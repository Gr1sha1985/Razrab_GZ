
#Область ПрограммныйИнтерфейсСлужебныйWebСервис

Функция ПолучитьТекстXMLНастроек(НастройкиККМ, ВерсияФорматаОбмена) Экспорт
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		
		ОбъектОбмена = ПолучитьЗаполнитьОбъектНастройкиККМ(НастройкиККМ, ВерсияФорматаОбмена);
	Иначе
		
		ОбъектОбмена = ПолучитьЗаполнитьОбъектНастройкиККМ1000(НастройкиККМ, ВерсияФорматаОбмена)
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПолучитьТекстXMLПрайсЛиста(ПрайсЛист, ВерсияФорматаОбмена) Экспорт
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		
		ОбъектОбмена = ПолучитьЗаполнитьОбъектПрайсЛист(ПрайсЛист, ВерсияФорматаОбмена);
		
	Иначе
		ОбъектОбмена = ПолучитьЗаполнитьОбъектПрайсЛист1000(ПрайсЛист, ВерсияФорматаОбмена);
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПолучитьТекстXMLЗаказов(Заказы, ВерсияФорматаОбмена) Экспорт
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		
		ОбъектОбмена = ПолучитьЗаполнитьОбъектЗаказы(Заказы, ВерсияФорматаОбмена);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
		ТекстСообщения = ЗаписьXML.Закрыть();
		
		Возврат ТекстСообщения;
		
	Иначе
		ТекстСообщения = "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсСлужебный

Функция ПолучитьТекстXMLДанныеЗагружены(ВерсияФорматаОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ИмяТипа = "ImportData";
	Иначе
		ИмяТипа = "PriceList";
	КонецЕсли;
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ИмяТипа);
	
	ОбъектВыгрузки = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектВыгрузки.ВерсияФормата = Формат(ВерсияФорматаОбмена, "ЧГ=0");
	ОбъектВыгрузки.Обработан = ТекущаяДатаСеанса();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектВыгрузки);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПолучитьФабрикуXDTO(ВерсияФорматаОбмена) Экспорт
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен(ВерсияФорматаОбмена));
	МассивПакетов = Новый Массив();
	МассивПакетов.Добавить(Пакет);
	Фабрика = Новый ФабрикаXDTO(,МассивПакетов);
	
	Возврат Фабрика;
	
КонецФункции

Функция URIПространстваИмен(ВерсияФорматаОбмена = Неопределено) Экспорт
	
	Если ВерсияФорматаОбмена = 1006 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/1.0.0.6";
		
	ИначеЕсли ВерсияФорматаОбмена = 1007 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/1.0.0.7";
		
	ИначеЕсли ВерсияФорматаОбмена = 2003 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/2.0.0.3";
		
	ИначеЕсли ВерсияФорматаОбмена = 3000 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/3.0.0.0";
		
	ИначеЕсли ВерсияФорматаОбмена = 3001 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/3.0.0.1";
		
	ИначеЕсли ВерсияФорматаОбмена = 3002 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/3.0.0.2";
		
	ИначеЕсли ВерсияФорматаОбмена = 3003 Тогда
		URIПространстваИмен = "http://www.1c.ru/EquipmentService/3.0.0.3";
		
	Иначе
		URIПространстваИмен = "http://www.1c.ru/EquipmentService";
	КонецЕсли;
	
	Возврат URIПространстваИмен;
	
КонецФункции

Функция ОбработатьЗагружаемыеДанныеИзККМ(Отказ, XMLТекст, ВыходныеПараметры, ВерсияФорматаОбмена) Экспорт
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудования.ПолучитьЗагружаемыеДанныеИзККМ();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Фабрика = ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ИмяТипа = "ImportData";
	Иначе
		ИмяТипа = "SalesReports";
	КонецЕсли;
	
	ТипXDTO = Фабрика.Тип(URIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	
	Попытка
		ДанныеИзККМ = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	Исключение
		
		ТекстСообщения = НСтр("ru='При чтении файла-отчета произошла ошибка.'") 
			+ Символы.ПС + ОписаниеОшибки();
		
		Отказ = Истина;
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ЗаполнитьОтчетыОПродажах(ДанныеИзККМ.ОтчетыОПродажах, ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах, ВерсияФорматаОбмена);
		ЗаполнитьОтчетыВскрытияТары(ДанныеИзККМ.ВскрытияАлкогольнойТары, ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары, ВерсияФорматаОбмена);
	Иначе
		ЗаполнитьОтчетыОПродажах1000(ДанныеИзККМ, ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах, ВерсияФорматаОбмена);
	КонецЕсли;
	
	Возврат ЗагружаемыеДанныеИзККМ;
	
КонецФункции

Процедура ЗаполнитьОтчетыОПродажах(ОтчетыОПродажахXDTO, ОтчетыОПродажах, ВерсияФорматаОбмена) Экспорт
	
	Если ОтчетыОПродажахXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтчетОПродажахXTDO Из ОтчетыОПродажахXDTO.ОтчетОПродажах Цикл
		
		ОтчетОПродажахККМ = МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ();
		
		ОтчетОПродажахККМ.НомерСмены 				= ОтчетОПродажахXTDO.НомерСмены;
		ОтчетОПродажахККМ.ДатаОткрытияСмены 		= ОтчетОПродажахXTDO.ДатаОткрытияСмены;
		ОтчетОПродажахККМ.ДатаЗакрытияСмены 		= ОтчетОПродажахXTDO.ДатаЗакрытияСмены;
		ОтчетОПродажахККМ.УникальныйИдентификатор 	= ОтчетОПродажахXTDO.УУИД;
		
		
		Если НЕ ОтчетОПродажахXTDO.Чеки = Неопределено Тогда
			
			Для Каждого ЧекXDTO Из ОтчетОПродажахXTDO.Чеки.Чек Цикл
				
				// Чек
				ЧекККМ = МенеджерОфлайнОборудования.ПолучитьЧекККМ();
				
				Если НЕ ЧекXDTO.КодСистемыНалогообложения = Неопределено Тогда
					ЧекККМ.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(ЧекXDTO.КодСистемыНалогообложения);
				КонецЕсли;
				
				Если НЕ ЧекXDTO.КодТипаРасчета = Неопределено Тогда
					ЧекККМ.ТипРасчета =
					МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(ЧекXDTO.КодТипаРасчета);
				КонецЕсли;
				
				Если НЕ ЧекXDTO.УУИДСвязанногоДокументаККМ = Неопределено Тогда
					ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = ЧекXDTO.УУИДСвязанногоДокументаККМ;
				КонецЕсли;
				
				Если НЕ ЧекXDTO.ТипСвязанногоДокументаККМ = Неопределено Тогда
					
					Если ЧекXDTO.ТипСвязанногоДокументаККМ = "Order" Тогда
						ЧекККМ.ТипСвязанногоДокументаККМ = "Заказ";
						
					ИначеЕсли ЧекXDTO.ТипСвязанногоДокументаККМ = "Check" Тогда
						ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЧекККМ.НомерЧека = ЧекXDTO.Номер;
				ЧекККМ.ДатаЧека  = ЧекXDTO.Дата;
				ЧекККМ.УникальныйИдентификатор = ЧекXDTO.УУИД;
				
				// Товары
				Если НЕ ЧекXDTO.Товары = Неопределено Тогда
					
					Для Каждого СтрокаТоварXDTO Из ЧекXDTO.Товары.ЧекТовар Цикл
						
						ТоварЧекаККМ = МенеджерОфлайнОборудования.ПолучитьТоварЧекаККМ();
						
						Если НЕ СтрокаТоварXDTO.КодПризнакаСпособаРасчета = Неопределено Тогда
							ТоварЧекаККМ.ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(СтрокаТоварXDTO.КодПризнакаСпособаРасчета);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ТоварЧекаККМ, СтрокаТоварXDTO,
						"Код,
						|Количество,
						|СтавкаНДС,
						|Сумма,
						|Цена
						|");
						
						Если ВерсияФорматаОбмена >= 3001 Тогда
							
							Если НЕ СтрокаТоварXDTO.ШтрихкодыМаркированнойПродукции = Неопределено Тогда
								
								Для Каждого МаркаЗначение Из СтрокаТоварXDTO.ШтрихкодыМаркированнойПродукции.ШтрихкодМаркированнойПродукции Цикл
									ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(МаркаЗначение);
								КонецЦикла;
								
							КонецЕсли;
							
						ИначеЕсли ВерсияФорматаОбмена < 3001 Тогда
							Если ЗначениеЗаполнено(СтрокаТоварXDTO.ШтрихкодАлкогольнойПродукции) Тогда
								ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(СтрокаТоварXDTO.ШтрихкодАлкогольнойПродукции);
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДТовара) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторНоменклатуры = СтрокаТоварXDTO.УУИДТовара;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДХарактеристики) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторХарактеристики = СтрокаТоварXDTO.УУИДХарактеристики;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТоварXDTO.УУИДУпаковки) Тогда
							ТоварЧекаККМ.УникальныйИдентификаторУпаковки = СтрокаТоварXDTO.УУИДУпаковки;
						КонецЕсли;
						
						ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
						
					КонецЦикла;
					
				КонецЕсли;
				
				// Оплаты
				Если НЕ ЧекXDTO.Оплаты = Неопределено Тогда
					
					Для Каждого СтрокаОплатаXDTO Из ЧекXDTO.Оплаты.Оплата Цикл
						
						ОплатаЧекаККМ = МенеджерОфлайнОборудования.ПолучитьОплатуЧекаККМ();
						
						ЗаполнитьЗначенияСвойств(ОплатаЧекаККМ, СтрокаОплатаXDTO,
						"СуммаВстречнымПредоставлением,
						|СуммаНаличнойОплаты,
						|СуммаПредоплатой,
						|СуммаПостоплатой,
						|СуммаЭлектроннойОплаты,
						|КодВидаЭлектроннойОплаты"
						);
						
						Если ЗначениеЗаполнено(СтрокаОплатаXDTO.УУИДВидаЭлектроннойОплаты) Тогда
							ОплатаЧекаККМ.УникальныйИдентификаторВидаЭлектроннойОплатыОплаты = 
							СтрокаОплатаXDTO.УУИДВидаЭлектроннойОплаты;
						КонецЕсли;
						
						ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// ДвиженияДС
		Если НЕ ОтчетОПродажахXTDO.ДвиженияДС = Неопределено Тогда
			
			Для Каждого ДвижениеДСXDTO Из ОтчетОПродажахXTDO.ДвиженияДС.ДвижениеДС Цикл
				
				ДвижениеДСККМ = МенеджерОфлайнОборудования.ПолучитьДвижениеДСККМ();
				
				ЗаполнитьЗначенияСвойств(ДвижениеДСККМ, ДвижениеДСXDTO,
					"Дата,
					|Номер,
					|Сумма
					|"
				);
				
				Если ДвижениеДСXDTO.ТипДвижения = "Income" Тогда
					
					ДвижениеДСККМ.ТипДвижения = "Внесение";
				ИначеЕсли ДвижениеДСXDTO.ТипДвижения = "Outcome" Тогда
					
					ДвижениеДСККМ.ТипДвижения = "Выемка";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДвижениеДСXDTO.УУИД) Тогда
					
					ДвижениеДСККМ.УникальныйИдентификатор = ДвижениеДСXDTO.УУИД;
					
				КонецЕсли;
				
				ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетыВскрытияТары(ВскрытияТарыXDTO, ВскрытияТары, ВерсияФорматаОбмена) Экспорт
	
	Если ВскрытияТарыXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВскрытиеТарыXTDO Из ВскрытияТарыXDTO.ВскрытиеАлкогольнойТары Цикл
		
		ВскрытиеТарыККМ = МенеджерОфлайнОборудования.ПолучитьВскрытиеТарыККМ();
		
		ВскрытиеТарыККМ.Дата 	= ВскрытиеТарыXTDO.Дата;
		ВскрытиеТарыККМ.Номер 	= ВскрытиеТарыXTDO.Номер;
		ВскрытиеТарыККМ.УникальныйИдентификатор = ВскрытиеТарыXTDO.УУИД;
		
		Если НЕ ВскрытиеТарыXTDO.Товары = Неопределено Тогда
			
			Для Каждого ТоварВскрытияXDTO Из ВскрытиеТарыXTDO.Товары.ВскрытиеАлкогольнойТарыТовар Цикл
				
				ТоварВскрытияККМ = МенеджерОфлайнОборудования.ПолучитьТоварВскрытияТарыККМ();
				
				ТоварВскрытияККМ.Код = ТоварВскрытияXDTO.Код;
				ТоварВскрытияККМ.Количество = ТоварВскрытияXDTO.Количество;
				
				Если ЗначениеЗаполнено(ТоварВскрытияXDTO.ШтрихкодАлкогольнойПродукции) Тогда
					ТоварВскрытияККМ.ШтрихкодАлкогольнойПродукции.Добавить(ТоварВскрытияXDTO.ШтрихкодАлкогольнойПродукции);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТоварВскрытияXDTO.УУИДТовара) Тогда
					ТоварВскрытияККМ.УникальныйИдентификаторНоменклатуры = ТоварВскрытияXDTO.УУИДТовара;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТоварВскрытияXDTO.УУИДХарактеристики) Тогда
					ТоварВскрытияККМ.УникальныйИдентификаторХарактеристики = ТоварВскрытияXDTO.УУИДХарактеристики;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТоварВскрытияXDTO.УУИДУпаковки) Тогда
					ТоварВскрытияККМ.УникальныйИдентификаторУпаковки = ТоварВскрытияXDTO.УУИДУпаковки;
				КонецЕсли;
				
				ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияККМ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВскрытияТары.Добавить(ВскрытиеТарыККМ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетыОПродажах1000(ОтчетыОПродажахККМ, ОтчетыОПродажах, ВерсияФорматаОбмена) Экспорт
	
	Если ОтчетыОПродажахККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтчетОПродажахXTDO Из ОтчетыОПродажахККМ.ОтчетОПродажах Цикл
		
		ОтчетОПродажахККМ = МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ();
		
		ОтчетОПродажахККМ.НомерСмены 		= ОтчетОПродажахXTDO.НомерСмены;
		ОтчетОПродажахККМ.ДатаОткрытияСмены = ОтчетОПродажахXTDO.ДатаОткрытияСмены;
		ОтчетОПродажахККМ.ДатаЗакрытияСмены = ОтчетОПродажахXTDO.ДатаЗакрытияСмены;
		
		// Все товары и оплаты упаковываются в один чек
		ЧекККМ = МенеджерОфлайнОборудования.ПолучитьЧекККМ();
		
		ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ЧекККМ.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		
		ЧекККМ.НомерЧека = ОтчетОПродажахXTDO.НомерСмены;
		ЧекККМ.ДатаЧека  = ОтчетОПродажахXTDO.ДатаОткрытияСмены;
		
		// Товары
		Для Каждого СтрокаТоварXDTO Из ОтчетОПродажахXTDO.ОтчетОПродажахТовары.ОтчетОПродажахТоварыЗапись Цикл
			
			ТоварЧекаККМ = МенеджерОфлайнОборудования.ПолучитьТоварЧекаККМ();
			
			ЗаполнитьЗначенияСвойств(ТоварЧекаККМ, СтрокаТоварXDTO,
				"Код,
				|Количество,
				|Сумма,
				|Цена
				|"
			);
			
			Если НЕ СтрокаТоварXDTO.Свойства().Получить("ШтрихкодАлкогольнойПродукции") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(СтрокаТоварXDTO.ШтрихкодАлкогольнойПродукции) Тогда
					ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(СтрокаТоварXDTO.ШтрихкодАлкогольнойПродукции);
				КонецЕсли;
				
			КонецЕсли;
			
			ТоварЧекаККМ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
			
			ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
			
		КонецЦикла;
		
		// Оплаты
		Для Каждого СтрокаОплатаXDTO Из ОтчетОПродажахXTDO.ОтчетОПродажахОплаты.ОтчетОПродажахОплатыЗапись Цикл
			
			ОплатаЧекаККМ = МенеджерОфлайнОборудования.ПолучитьОплатуЧекаККМ();
			
			ОплатаЧекаККМ.СуммаНаличнойОплаты = 0;
			ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
			ОплатаЧекаККМ.СуммаПредоплатой = 0;
			ОплатаЧекаККМ.СуммаПостоплатой = 0;
			ОплатаЧекаККМ.СуммаЭлектроннойОплаты = 0;
			
			Если СтрокаОплатаXDTO.ТипОплаты = 0 Тогда
				ОплатаЧекаККМ.СуммаНаличнойОплаты = СтрокаОплатаXDTO.Сумма;
			Иначе
				ОплатаЧекаККМ.СуммаЭлектроннойОплаты = СтрокаОплатаXDTO.Сумма;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОплатаXDTO.КодВидаОплаты) Тогда
				ОплатаЧекаККМ.КодВидаЭлектроннойОплаты = СтрокаОплатаXDTO.КодВидаОплаты;
			КонецЕсли;
				
			ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			
		КонецЦикла;
		
		ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
		
		// ДвиженияДС
		// нет
		ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
	КонецЦикла;
	
КонецПроцедуры


// Заполняет отчет о проверках цен.
// 
// Параметры:
// 	ПроверкиЦенниковXDTO - Массив - массив проверок ценников XDTO.
// 	ОтчетыОЦенниках - Массив - массив отчетов о ценниках.
// 	ВерсияФорматаОбмена - Число - версия формата обмена.
//
Процедура ЗаполнитьОтчетОПроверкахЦен(ПроверкиЦенниковXDTO, ОтчетыОЦенниках, ВерсияФорматаОбмена) Экспорт
	
	Если ПроверкиЦенниковXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		
		Для Каждого ОтчетОЦенникахXTDO Из ПроверкиЦенниковXDTO.ОтчетОЦенниках Цикл
			
			ОтчетОЦенниках = МенеджерОфлайнОборудования.ПолучитьОтчетОЦенниках();
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.Дата) Тогда
				ОтчетОЦенниках.Дата = ОтчетОЦенникахXTDO.Дата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.Номер) Тогда
				ОтчетОЦенниках.Номер = ОтчетОЦенникахXTDO.Номер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтчетОЦенникахXTDO.УУИД) Тогда
				ОтчетОЦенниках.УникальныйИдентификатор = ОтчетОЦенникахXTDO.УУИД;
			КонецЕсли;
			
			Если НЕ ОтчетОЦенникахXTDO.Товары = Неопределено Тогда
				
				Для Каждого ТоварXDTO Из ОтчетОЦенникахXTDO.Товары.ОтчетОЦенникахТовар Цикл
					
					Товар = МенеджерОфлайнОборудования.ПолучитьТоварОтчетаОЦенниках();
					
					Товар.Код = ТоварXDTO.Код;
					
					Если ЗначениеЗаполнено(ТоварXDTO.Штрихкод) Тогда
						Товар.Штрихкод = ТоварXDTO.Штрихкод;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДТовара) Тогда
						Товар.УникальныйИдентификаторНоменклатуры = ТоварXDTO.УУИДТовара;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДХарактеристики) Тогда
						Товар.УникальныйИдентификаторХарактеристики = ТоварXDTO.УУИДХарактеристики;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТоварXDTO.УУИДУпаковки) Тогда
						Товар.УникальныйИдентификаторУпаковки = ТоварXDTO.УУИДУпаковки;
					КонецЕсли;
					
					ОтчетОЦенниках.Товары.Добавить(Товар);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОтчетыОЦенниках.Добавить(ОтчетОЦенниках);
		КонецЦикла;
		
	Иначе // 100Х
		
		Для Каждого ОтчетОЦенникахXTDO Из ПроверкиЦенниковXDTO.ОтчетОЦенниках Цикл
			
			Если НЕ ОтчетОЦенникахXTDO.ОтчетОЦенникахЗапись = Неопределено Тогда
				
				ОтчетОЦенниках = МенеджерОфлайнОборудования.ПолучитьОтчетОЦенниках();
				
				Для Каждого ТоварXDTO Из ОтчетОЦенникахXTDO.ОтчетОЦенникахЗапись Цикл
					
					Товар = МенеджерОфлайнОборудования.ПолучитьТоварОтчетаОЦенниках();
					
					Товар.Код = ТоварXDTO.Код;
					
					Если ЗначениеЗаполнено(ТоварXDTO.Штрихкод) Тогда
						Товар.Штрихкод = ТоварXDTO.Штрихкод;
					КонецЕсли;
					
					ОтчетОЦенниках.Товары.Добавить(Товар);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ОтчетыОЦенниках.Добавить(ОтчетОЦенниках);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьУникальностьИдентификатораWebСервисОборудования(ИдентификаторУстройства, ИдентификаторWebСервисОборудования) Экспорт
	
	Уникален = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|    1
	|ИЗ
	|    Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|    ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторWebСервисОборудования
	|    И ПодключаемоеОборудование.Ссылка <> &Ссылка
	|");
	
	Запрос.УстановитьПараметр("ИдентификаторWebСервисОборудования", ИдентификаторWebСервисОборудования);
	Запрос.УстановитьПараметр("Ссылка"      , ИдентификаторУстройства);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Уникален = Ложь;
	КонецЕсли;
	
	Возврат Уникален;
	
КонецФункции

Процедура ПакетыОбработаны(Отказ, ПакетыОбработаны, Выгрузка, Пакеты, ВыходныеПараметры, ВерсияФорматаОбмена) Экспорт
	
	Результат = Истина;
	
	Если Выгрузка Тогда
		
		Если ВерсияФорматаОбмена > 2000 Тогда
			СтрокаТипОбъекта = "ExportData";
		Иначе
			СтрокаТипОбъекта = "PriceList";
		КонецЕсли;
		
	Иначе
		
		Если ВерсияФорматаОбмена > 2000 Тогда
			СтрокаТипОбъекта = "ImportData";
		Иначе
			СтрокаТипОбъекта = "SalesReports";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектXDTO = Неопределено;
	ТипXDTO = ФабрикаXDTO.Тип(URIПространстваИмен(ВерсияФорматаОбмена), СтрокаТипОбъекта);
	
	Для Каждого ТекПакет Из Пакеты Цикл
		
		ЧтениеXML = Неопределено;
		Если Не СоздатьЧтениеXML(ТекПакет, ЧтениеXML, ВыходныеПараметры) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			СообщениеОбОшибке = НСтр("ru='При проверке файла на обработанность произошла ошибка.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки;
			
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ОбъектXDTO.Обработан) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПакетыОбработаны = Результат;
	
КонецПроцедуры

// Функция возвращает массив из пакетов данных.
//
Функция РазбитьПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете) Экспорт
	
	МассивПакетов = Новый Массив;
	
	КоличествоЭлементов = СтруктураПрайсЛиста.ГруппыТоваров.Количество() + СтруктураПрайсЛиста.Товары.Количество();
	КоличествоПакетов   = ОпределитьКоличествоПакетов(КоличествоЭлементовВПакете, КоличествоЭлементов);
	
	Если КоличествоЭлементовВПакете = 0 Тогда
		КоличествоЭлементовВПакете = КоличествоЭлементов;
	КонецЕсли;
	
	Для НомерПакета = 1 По КоличествоПакетов Цикл
		
		СтруктураПакета = МенеджерОфлайнОборудования.ПолучитьПрайсЛистККМ();
		СтруктураПакета.Вставить("ПолнаяВыгрузка", СтруктураПрайсЛиста.ПолнаяВыгрузка);
		
		СтруктураПакета.ДанныеАгентов = СтруктураПрайсЛиста.ДанныеАгентов;
		СтруктураПакета.ДанныеПоставщиков = СтруктураПрайсЛиста.ДанныеПоставщиков;
		СтруктураПакета.ЕдиницыИзмерения = СтруктураПрайсЛиста.ЕдиницыИзмерения;
		
		СтруктураПакета.Вставить("НомерПакета", НомерПакета);
		СтруктураПакета.Вставить("ПакетовВсего", КоличествоПакетов);
		
		Для НомерЭлемента = 1 По КоличествоЭлементовВПакете Цикл
			
			// Группы
			Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
				
				СтруктураПакета.ГруппыТоваров.Добавить(СтруктураПрайсЛиста.ГруппыТоваров[0]);
				СтруктураПрайсЛиста.ГруппыТоваров.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			// Товары
			Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
				
				СтруктураПакета.Товары.Добавить(СтруктураПрайсЛиста.Товары[0]);
				СтруктураПрайсЛиста.Товары.Удалить(0);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивПакетов.Добавить(СтруктураПакета);
		
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

Функция ПолучитьТекстXMLДанныхВыгрузки(ДанныеДляВыгрузки, ВерсияФорматаОбмена) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен      = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта      = ФабрикаXDTO.Тип(URIИмен, "ExportData");
	ОбъектДанныеВыгрузки = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектДанныеВыгрузки.ВерсияФормата = Формат(ВерсияФорматаОбмена, "ЧГ=0");
	
	// Настройки ККМ
	Если НЕ ДанныеДляВыгрузки.НастройкиККМ = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		
		ОбъектНастройкиККМ = ПолучитьЗаполнитьОбъектНастройкиККМ(ДанныеДляВыгрузки.НастройкиККМ, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.НастройкиККМ = ОбъектНастройкиККМ;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПрайсЛист
	Если НЕ ДанныеДляВыгрузки.ПрайсЛист = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		
		ОбъектПрайсЛист = ПолучитьЗаполнитьОбъектПрайсЛист(ДанныеДляВыгрузки.ПрайсЛист, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.ПрайсЛист = ОбъектПрайсЛист;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заказы
	Если НЕ ДанныеДляВыгрузки.Заказы = Неопределено Тогда
		
		ЕстьВыгружаемыеДанные = Ложь;
		ОбъектЗаказы = ПолучитьЗаполнитьОбъектЗаказы(ДанныеДляВыгрузки.Заказы, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные);
		
		Если ЕстьВыгружаемыеДанные Тогда
			ОбъектДанныеВыгрузки.Заказы = ОбъектЗаказы;
		КонецЕсли;
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектДанныеВыгрузки);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ПолучитьЗаполнитьОбъектНастройкиККМ(ВыгружаемыеНастройкиККМ, ВерсияФорматаОбмена, ЕстьВыгружаемыеНастройки = Ложь)
	
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Settings");
	
	ОбъектНастройкиККМ = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// 200Х
	
	// НаименованиеОрганизации
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.НаименованиеОрганизации) Тогда
		
		ОбъектНастройкиККМ.НаименованиеОрганизации = ВыгружаемыеНастройкиККМ.НаименованиеОрганизации;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	// НаименованиеМагазина
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.НаименованиеМагазина) Тогда
		
		ОбъектНастройкиККМ.НаименованиеМагазина = ВыгружаемыеНастройкиККМ.НаименованиеМагазина;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	// ИНН
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ИНН) Тогда
		
		ОбъектНастройкиККМ.ИНН = ВыгружаемыеНастройкиККМ.ИНН;
		ЕстьВыгружаемыеНастройки = Истина;
	КонецЕсли;
	
	// КПП
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.КПП) Тогда
		
		ОбъектНастройкиККМ.КПП = ВыгружаемыеНастройкиККМ.КПП;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// АдресТочкиПродажи
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.АдресТочкиПродажи) Тогда
		
		ОбъектНастройкиККМ.АдресТочкиПродажи = ВыгружаемыеНастройкиККМ.АдресТочкиПродажи;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// МестоТочкиПродажи
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.МестоТочкиПродажи) Тогда
		
		ОбъектНастройкиККМ.МестоТочкиПродажи = ВыгружаемыеНастройкиККМ.МестоТочкиПродажи;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// ЭлектроннаяПочтаОтправителяЧека
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека) Тогда
		
		ОбъектНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека = ВыгружаемыеНастройкиККМ.ЭлектроннаяПочтаОтправителяЧека;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	Если ВыгружаемыеНастройкиККМ.Свойство("ПараметрыДрайвераККМ")
		И НЕ ВыгружаемыеНастройкиККМ.ПараметрыДрайвераККМ = Неопределено Тогда
		
		ПараметрыДрайвераККМ = ВыгружаемыеНастройкиККМ.ПараметрыДрайвераККМ;
		
		ОбъектНастройкиККМ.РазрешеноИспользоватьПлатежныеКарты = ПараметрыДрайвераККМ.РазрешеноИспользоватьПлатежныеКарты;
		ОбъектНастройкиККМ.РазрешеноИспользоватьСкидки = ПараметрыДрайвераККМ.РазрешеноИспользоватьСкидки;
		
	КонецЕсли;
	
	// СистемыНалогообложения
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.СистемыНалогообложения) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "СистемыНалогообложения");
		ОбъектСистемыНалогообложения = ФабрикаXDTO.Создать(ТипОбъекта);
		
		Для Каждого СистемаНалогообложенияККТ Из ВыгружаемыеНастройкиККМ.СистемыНалогообложения Цикл
			
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "СистемаНалогообложенияЗапись");
			ОбъектСистемаНалогообложенияЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ОбъектСистемаНалогообложенияЗапись.КодСистемыНалогообложения =
			МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(СистемаНалогообложенияККТ);
			
			МассивСистемНалогообложения = ОбъектСистемыНалогообложения.СистемаНалогообложенияЗапись; //СписокXDTO - .
			МассивСистемНалогообложения.Добавить(ОбъектСистемаНалогообложенияЗапись);
			
		КонецЦикла;
		
		ОбъектНастройкиККМ.СистемыНалогообложения = ОбъектСистемыНалогообложения;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	// ВидыЭлектроннойоплаты
	МассивВидовОплаты = ВыгружаемыеНастройкиККМ.ВидыЭлектроннойОплаты; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты - .
	Если ЗначениеЗаполнено(ВыгружаемыеНастройкиККМ.ВидыЭлектроннойОплаты) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ВидыЭлектроннойОплаты");
		ОбъектВидыЭлектроннойОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ВидЭлектроннойОплатыЗапись");
		Для Каждого ВидОплаты Из МассивВидовОплаты Цикл
			
			ОбъектВидЭлектроннойОплатыЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.Наименование) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.Наименование = ВидОплаты.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "Наименование");
			КонецЕсли;
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.Код) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.Код = ВидОплаты.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "Код");
			КонецЕсли;
			
			// ТипЭлектроннойОплаты (обязательное)
			Если ЗначениеЗаполнено(ВидОплаты.ТипЭлектроннойОплаты) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.ТипЭлектроннойОплаты = ВидОплаты.ТипЭлектроннойОплаты;
			Иначе
				ВызватьИсключениеЗаполнения("ВидЭлектроннойОплаты", "ТипЭлектроннойОплаты");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ВидОплаты.УникальныйИдентификатор) Тогда
				ОбъектВидЭлектроннойОплатыЗапись.УУИД = ВидОплаты.УникальныйИдентификатор;
			КонецЕсли;
			
			СписокВидовЭлектроннойОплаты = ОбъектВидыЭлектроннойОплаты.ВидЭлектроннойОплатыЗапись; //СписокXDTO - 
			СписокВидовЭлектроннойОплаты.Добавить(ОбъектВидЭлектроннойОплатыЗапись);
			
		КонецЦикла;
		
		ОбъектНастройкиККМ.ВидыЭлектроннойОплаты = ОбъектВидыЭлектроннойОплаты;
		ЕстьВыгружаемыеНастройки = Истина;
		
	КонецЕсли;
	
	Возврат ОбъектНастройкиККМ;
	
КонецФункции

Функция ПолучитьЗаполнитьОбъектНастройкиККМ1000(СтруктураНастроек, ВерсияФорматаОбмена)
	
	URIИмен      = URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Settings");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектОбмена.ВерсияФормата = ВерсияФорматаОбмена;
	ОбъектОбмена.ИНН = СтруктураНастроек.ИНН;
	
	Если СтруктураНастроек.Свойство("ПараметрыДрайвераККМ")
		И НЕ СтруктураНастроек.ПараметрыДрайвераККМ = Неопределено Тогда
		
		ПараметрыДрайвераККМ = СтруктураНастроек.ПараметрыДрайвераККМ;
		
		ОбъектОбмена.ИспользоватьБанковскиеКарты = ПараметрыДрайвераККМ.РазрешеноИспользоватьПлатежныеКарты;
		ОбъектОбмена.ИспользоватьСкидки = ПараметрыДрайвераККМ.РазрешеноИспользоватьСкидки;
	Иначе
		ОбъектОбмена.ИспользоватьБанковскиеКарты = Ложь;
		ОбъектОбмена.ИспользоватьСкидки = Ложь;
	КонецЕсли;
	
	ОбъектОбмена.НазваниеОрганизации = СтруктураНастроек.НаименованиеОрганизации;
	
	Если ЗначениеЗаполнено(СтруктураНастроек.СистемыНалогообложения) Тогда
		
		Если НЕ СтруктураНастроек.СистемыНалогообложения.Найти(Перечисления.ТипыСистемНалогообложенияККТ.ОСН) = Неопределено Тогда
			
			ОбъектОбмена.Налогообложение = "Общая";
			
		ИначеЕсли НЕ СтруктураНастроек.СистемыНалогообложения.Найти(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход) = Неопределено
			ИЛИ НЕ СтруктураНастроек.СистемыНалогообложения.Найти(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход) = Неопределено Тогда
			
			ОбъектОбмена.Налогообложение = "Упрощенная";
			
		КонецЕсли;
	КонецЕсли;
	
	// Виды оплаты.
	Если СтруктураНастроек.ВидыЭлектроннойОплаты <> Неопределено 
		И НЕ СтруктураНастроек.ВидыЭлектроннойОплаты.Количество() = 0 Тогда
		
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплаты");
		ВидОплатыXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
		
		Для Каждого ВидОплаты Из СтруктураНастроек.ВидыЭлектроннойОплаты Цикл
			
			Если ВидОплаты.ТипЭлектроннойОплаты = 1 Тогда // платежная карта
				
				ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплатыЗапись");
				ЗаписьВидыОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
				
				ЗаписьВидыОплаты.Код = ВидОплаты.Код;
				ЗаписьВидыОплаты.Наименование = ВидОплаты.Наименование;
				ЗаписьВидыОплаты.ТипОплаты = 1;
				
				СписокВидовОплаты = ВидОплатыXDTO.ВидыОплатыЗапись; //СписокXDTO - 
				СписокВидовОплаты.Добавить(ЗаписьВидыОплаты);
				
			КонецЕсли;
		КонецЦикла;
		
		ОбъектОбмена.ВидыОплаты = ВидОплатыXDTO;
	КонецЕсли;
	
	Возврат ОбъектОбмена;
	
КонецФункции

Функция ПолучитьЗаполнитьОбъектПрайсЛист(ВыгружаемыйПрайсЛист, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные = Ложь)
	
	//200Х
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "PriceList");
	ОбъектПрайсЛист = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ВыгружаемыйПрайсЛист.Свойство("ПолнаяВыгрузка") И ВыгружаемыйПрайсЛист.ПолнаяВыгрузка Тогда
		ОбъектПрайсЛист.ПолнаяВыгрузка = Истина;
	КонецЕсли;
	
	// Товары
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.Товары) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Товары");
		ОбъектТовары = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъектаТовар = ФабрикаXDTO.Тип(URIИмен, "ТоварЗапись");
		Товары = ВыгружаемыйПрайсЛист.Товары; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьТовара - 
		Для Каждого Товар Из Товары Цикл
			
			ЗаписьТовар = ФабрикаXDTO.Создать(ТипОбъектаТовар);
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(Товар.Наименование) Тогда
				ЗаписьТовар.Наименование = Товар.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "Наименование");
			КонецЕсли;
			
			// Код (необязательное)
			Если ЗначениеЗаполнено(Товар.Код) Тогда
				ЗаписьТовар.Код = Товар.Код;
			КонецЕсли;
			
			// Штрихкоды (необязательное)
			Если ЗначениеЗаполнено(Товар.Штрихкоды) Тогда
				ЗаписьТовар.Штрихкоды = ЗаписатьШтрихкоды(URIИмен, Товар.Штрихкоды);
			КонецЕсли;
			
			// Цена (необязательное)
			Если ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаписьТовар.Цена = Товар.Цена;
			КонецЕсли;
			
			// Остаток (необязательное)
			Если ЗначениеЗаполнено(Товар.Остаток) И Товар.Остаток > 0 Тогда
				ЗаписьТовар.Остаток = Формат(Товар.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
			КонецЕсли;
			
			// УникальныйИдентификатор (обязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификатор) Тогда
				ЗаписьТовар.УУИД = Товар.УникальныйИдентификатор;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "УникальныйИдентификатор");
			КонецЕсли;
			
			// СтавкаНДС (обязательное)
			Если ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
				
				Если ВерсияФорматаОбмена < 3000 И Товар.СтавкаНДС = МенеджерОфлайнОборудования.ПолучитьСтавкуНДС20() Тогда
					ТекстСообщения = НСтр("ru = 'Для использования НДС 20% необходимо использовать формат обмена 3.0 и выше'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ЗаписьТовар.СтавкаНДС = Товар.СтавкаНДС;
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "СтавкаНДС");
			КонецЕсли;
			
			// ПризнакПредметаРасчета (обязательное)
			Если ЗначениеЗаполнено(Товар.ПризнакПредметаРасчета) Тогда
				ЗаписьТовар.ПризнакПредметаРасчета =
					МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(Товар.ПризнакПредметаРасчета);
			Иначе
				ВызватьИсключениеЗаполнения("Товар", "ПризнакПредметаРасчета");
			КонецЕсли;
			
			// КодЕдиницыИзмерения (необязательное)
			Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
				ЗаписьТовар.КодБазовойЕдиницыИзмерения = Товар.КодЕдиницыИзмерения;
			КонецЕсли;
			
			// УникальныйИдентификаторЕдиницыИзмерения (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторЕдиницыИзмерения) Тогда
				ЗаписьТовар.УУИДБазовойЕдиницыИзмерения = Товар.УникальныйИдентификаторЕдиницыИзмерения;
			КонецЕсли;
			
			// КодГруппы (необязательное)
			Если ЗначениеЗаполнено(Товар.КодГруппы) Тогда
				ЗаписьТовар.КодГруппы = Товар.КодГруппы;
			КонецЕсли;
			
			// УникальныйИдентификаторГруппы (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторГруппы) Тогда
				ЗаписьТовар.УУИДГруппы = Товар.УникальныйИдентификаторГруппы;
			КонецЕсли;
			
			// Артикул (необязательное)
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ЗаписьТовар.Артикул = Товар.Артикул;
			КонецЕсли;
			
			// Описание (необязательное)
			Если ЗначениеЗаполнено(Товар.Описание) Тогда
				ЗаписьТовар.Описание = Товар.Описание;
			КонецЕсли;
			
			// ЭтоВесовойТовар (необязательное)
			Если Товар.ЭтоВесовойТовар Тогда
				ЗаписьТовар.ЭтоВесовойТовар = Товар.ЭтоВесовойТовар;
			КонецЕсли;
			
			// НомерСекции (необязательное)
			Если ЗначениеЗаполнено(Товар.НомерСекции) Тогда
				ЗаписьТовар.НомерСекции = Товар.НомерСекции;
			КонецЕсли;
			
			
			// КодДанныхАгента (необязательное)
			Если ЗначениеЗаполнено(Товар.КодДанныхАгента) Тогда
				ЗаписьТовар.КодДанныхАгента = Товар.КодДанныхАгента;
			КонецЕсли;
			
			// УникальныйИдентификаторДанныхАгента (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторДанныхАгента) Тогда
				ЗаписьТовар.УУИДДанныхАгента = Товар.УникальныйИдентификаторДанныхАгента;
			КонецЕсли;
			
			// КодДанныхАгента (необязательное)
			Если ЗначениеЗаполнено(Товар.КодДанныхПоставщика) Тогда
				ЗаписьТовар.КодДанныхПоставщика = Товар.КодДанныхПоставщика;
			КонецЕсли;
			
			// УникальныйИдентификаторДанныхПоставщика (необязательное)
			Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторДанныхПоставщика) Тогда
				ЗаписьТовар.УУИДДанныхПоставщика = Товар.УникальныйИдентификаторДанныхПоставщика;
			КонецЕсли;
			
			// ИмеетХарактеристики И Характеристики (необязательное)
			Если Товар.ИмеетХарактеристики Тогда
				
				ЗаписьТовар.ИмеетХарактеристики = Товар.ИмеетХарактеристики;
				ЗаписьТовар.Характеристики = ЗаписатьХарактеристики(Товар, ВерсияФорматаОбмена);
				
			КонецЕсли;
			
			// ИмеетУпаковки И Упаковки (необязательное)
			Если Товар.ИмеетУпаковки Тогда
				
				Если Товар.ИмеетХарактеристики Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru='Ошибка встраивания БПО (Офлайн оборудование).
					|Флаг ""%1"" не может быть ""Истина"", если у товара имеются характеристики (флаг %2).'"
					), "ИмеетУпаковки", "ИмеетХарактеристики");
					
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
				
				ЗаписьТовар.ИмеетУпаковки = Товар.ИмеетУпаковки;
				ЗаписьТовар.Упаковки = ЗаписатьУпаковки(Товар, ВерсияФорматаОбмена);
				
			КонецЕсли;
			
			// ЭтоАлкоголь (необязательное)
			Если Товар.ЭтоАлкоголь Тогда
				ЗаписьТовар.ЭтоАлкоголь = Товар.ЭтоАлкоголь;
				
				ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "АлкогольныеРеквизиты");
				АлкогольныеРеквизиты = ФабрикаXDTO.Создать(ТипОбъекта);
				
				АлкогольныеРеквизиты.Маркируемый = Товар.АлкогольныеРеквизиты.Маркируемый;
				АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции
					= Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
				АлкогольныеРеквизиты.ЕмкостьТары = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
				АлкогольныеРеквизиты.Крепость = Товар.АлкогольныеРеквизиты.Крепость;
				АлкогольныеРеквизиты.ИННПроизводителя = Товар.АлкогольныеРеквизиты.ИННПроизводителя;
				АлкогольныеРеквизиты.КПППроизводителя = Товар.АлкогольныеРеквизиты.КПППроизводителя;
				АлкогольныеРеквизиты.ВРозлив = Товар.АлкогольныеРеквизиты.ВРозлив;
				
				ЗаписьТовар.АлкогольныеРеквизиты = АлкогольныеРеквизиты;
			КонецЕсли;
			
			Если Товар.ЭтоМаркированнаяПродукция Тогда
				
				Если ВерсияФорматаОбмена < 3001 Тогда
					ТекстСообщения = НСтр("ru = 'Для работы с маркированной продукцией необходимо использовать формат обмена 3.1 и выше'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ЗаписьТовар.ЭтоМаркированнаяПродукция = Товар.ЭтоМаркированнаяПродукция;
				Если ВерсияФорматаОбмена < 3003 Тогда
					Если ЗначениеЗаполнено(Товар.ТипМаркированнойПродукции) Тогда
						ЗаписьТовар.КодМаркированнойПродукции = МенеджерОфлайнОборудования.КодТипаМаркировкиККТ(Товар.ТипМаркированнойПродукции);
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(Товар.ВидМаркированнойПродукции) Тогда
						ЗаписьТовар.КодМаркированнойПродукции = МенеджерОфлайнОборудования.КодВидаМаркировкиККТ(Товар.ВидМаркированнойПродукции);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Товар.КодВидаНоменклатурнойКлассификации) Тогда
				
				Если ВерсияФорматаОбмена < 3002 Тогда
					ТекстСообщения = НСтр("ru = 'Для работы с продукцией использующей номенклатурную классификацию необходимо использовать формат обмена 3.2 и выше'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ЗаписьТовар.КодВидаНоменклатурнойКлассификации = Товар.КодВидаНоменклатурнойКлассификации;
			КонецЕсли;
			
			СписокТоваров = ОбъектТовары.ТоварЗапись; //СписокXDTO - 
			СписокТоваров.Добавить(ЗаписьТовар);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.Товары = ОбъектТовары;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ГруппыТоваров
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ГруппыТоваров) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваров");
		ОбъектГруппыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъектаГруппа = ФабрикаXDTO.Тип(URIИмен, "ГруппаТоваровЗапись");
		
		Группы = ВыгружаемыйПрайсЛист.ГруппыТоваров; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров - .
		
		Для Каждого Группа Из Группы Цикл
			
			ЗаписьГруппа = ФабрикаXDTO.Создать(ТипОбъектаГруппа);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(Группа.Код) Тогда
				ЗаписьГруппа.Код = Группа.Код;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(Группа.Наименование) Тогда
				ЗаписьГруппа.Наименование = Группа.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "Наименование");
			КонецЕсли;
			
			// УникальныйИдентификатор (обязательное)
			Если ЗначениеЗаполнено(Группа.УникальныйИдентификатор) Тогда
				ЗаписьГруппа.УУИД = Группа.УникальныйИдентификатор;
			Иначе
				ВызватьИсключениеЗаполнения("Группа", "УникальныйИдентификатор");
			КонецЕсли;
			
			// КодГруппы (необязательное)
			Если ЗначениеЗаполнено(Группа.КодГруппы) Тогда
				ЗаписьГруппа.КодГруппы = Группа.КодГруппы;
			КонецЕсли;
			
			// УникальныйИдентификаторГруппы (необязательное)
			Если ЗначениеЗаполнено(Группа.УникальныйИдентификаторГруппы) Тогда
				ЗаписьГруппа.УУИДГруппы = Группа.УникальныйИдентификаторГруппы;
			КонецЕсли;
			
			СписокГруппТоваров = ОбъектГруппыТоваров.ГруппаТоваровЗапись; //СписокXDTO - 
			СписокГруппТоваров.Добавить(ЗаписьГруппа);
		КонецЦикла;
		
		ОбъектПрайсЛист.ГруппыТоваров = ОбъектГруппыТоваров;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ЕдиницыИзмерения
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ЕдиницыИзмерения) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ЕдиницыИзмерения");
		ОбъектЕдиницыИзмерения = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипЕдиницаИзмеренияЗапись = ФабрикаXDTO.Тип(URIИмен, "ЕдиницаИзмеренияЗапись");
		
		
		ЕдиницыИзмерения = ВыгружаемыйПрайсЛист.ЕдиницыИзмерения; // Массив Из см. МенеджерОфлайнОборудования.ПолучитьЗаписьЕдиницыИзмерения - 
		
		Для Каждого ЕИ Из ЕдиницыИзмерения Цикл
			
			ЗаписьЕИ = ФабрикаXDTO.Создать(ТипЕдиницаИзмеренияЗапись);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ЕИ.Код) Тогда
				ЗаписьЕИ.Код = ЕИ.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ЕдиницаИзмерения", "Код");
			КонецЕсли;
			
			// Наименование (обязательное)
			Если ЗначениеЗаполнено(ЕИ.Наименование) Тогда
				ЗаписьЕИ.Наименование = ЕИ.Наименование;
			Иначе
				ВызватьИсключениеЗаполнения("ЕдиницаИзмерения", "Наименование");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ЕИ.УникальныйИдентификатор) Тогда
				ЗаписьЕИ.УУИД = ЕИ.УникальныйИдентификатор;
			КонецЕсли;
			
			// КодОКЕИ (необязательное)
			Если ЗначениеЗаполнено(ЕИ.КодОКЕИ) Тогда
				ЗаписьЕИ.КодОКЕИ = ЕИ.КодОКЕИ;
			КонецЕсли;
			
			СписокЕдиницИзмерения = ОбъектЕдиницыИзмерения.ЕдиницаИзмеренияЗапись; //СписокXDTO - 
			СписокЕдиницИзмерения.Добавить(ЗаписьЕИ);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.ЕдиницыИзмерения = ОбъектЕдиницыИзмерения;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ДанныеАгентов
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ДанныеАгентов) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ДанныеАгентов");
		ОбъектДанныеАгентов = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипДанныеАгентаЗапись = ФабрикаXDTO.Тип(URIИмен, "ДанныеАгентаЗапись");
		
		Для Каждого ДанныеАгента Из ВыгружаемыйПрайсЛист.ДанныеАгентов Цикл
			
			ЗаписьДанныеАгента = ФабрикаXDTO.Создать(ТипДанныеАгентаЗапись);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.Код) Тогда
				ЗаписьДанныеАгента.Код = ДанныеАгента.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ДанныеАгента", "Код");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.УникальныйИдентификатор) Тогда
				ЗаписьДанныеАгента.УУИД = ДанныеАгента.УникальныйИдентификатор;
			КонецЕсли;
			
			// ПризнакАгента (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ПризнакАгента) Тогда
				ЗаписьДанныеАгента.ПризнакАгента =
					МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ДанныеАгента.ПризнакАгента);
			КонецЕсли;
			
			// ОперацияПлатежногоАгента (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ОперацияПлатежногоАгента) Тогда
				ЗаписьДанныеАгента.ОперацияПлатежногоАгента = ДанныеАгента.ОперацияПлатежногоАгента;
			КонецЕсли;
			
			// ТелефонПлатежногоАгента (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ТелефонПлатежногоАгента) Тогда
				ЗаписьДанныеАгента.ТелефонПлатежногоАгента = ДанныеАгента.ТелефонПлатежногоАгента;
			КонецЕсли;
			
			// ТелефонОператораПеревода (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ТелефонОператораПеревода) Тогда
				ЗаписьДанныеАгента.ТелефонОператораПеревода = ДанныеАгента.ТелефонОператораПеревода;
			КонецЕсли;
			
			// НаименованиеОператораПеревода (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.НаименованиеОператораПеревода) Тогда
				ЗаписьДанныеАгента.НаименованиеОператораПеревода = ДанныеАгента.НаименованиеОператораПеревода;
			КонецЕсли;
			
			// АдресОператораПеревода (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.АдресОператораПеревода) Тогда
				ЗаписьДанныеАгента.АдресОператораПеревода = ДанныеАгента.АдресОператораПеревода;
			КонецЕсли;
			
			// ИННОператораПеревода (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ИННОператораПеревода) Тогда
				ЗаписьДанныеАгента.ИННОператораПеревода = ДанныеАгента.ИННОператораПеревода;
			КонецЕсли;
			
			// ТелефонОператораПоПриемуПлатежей (необязательное)
			Если ЗначениеЗаполнено(ДанныеАгента.ТелефонОператораПоПриемуПлатежей) Тогда
				ЗаписьДанныеАгента.ТелефонОператораПриемаПлатежей = ДанныеАгента.ТелефонОператораПоПриемуПлатежей;
			КонецЕсли;
			
			СписокДанныхАгента = ОбъектДанныеАгентов.ДанныеАгентаЗапись; //СписокXDTO - 
			СписокДанныхАгента.Добавить(ЗаписьДанныеАгента);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.ДанныеАгентов = ОбъектДанныеАгентов;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	// ДанныеПоставщиков
	Если ЗначениеЗаполнено(ВыгружаемыйПрайсЛист.ДанныеПоставщиков) Тогда
		
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ДанныеПоставщиков");
		ОбъектДанныеПоставщиков = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипДанныеПоставщикаЗапись = ФабрикаXDTO.Тип(URIИмен, "ДанныеПоставщикаЗапись");
		
		Для Каждого ДанныеПоставщика Из ВыгружаемыйПрайсЛист.ДанныеПоставщиков Цикл
			
			ЗаписьДанныеПоставщика = ФабрикаXDTO.Создать(ТипДанныеПоставщикаЗапись);
			
			// Код (обязательное)
			Если ЗначениеЗаполнено(ДанныеПоставщика.Код) Тогда
				ЗаписьДанныеПоставщика.Код = ДанныеПоставщика.Код;
			Иначе
				ВызватьИсключениеЗаполнения("ДанныеПоставщика", "Код");
			КонецЕсли;
			
			// УникальныйИдентификатор (необязательное)
			Если ЗначениеЗаполнено(ДанныеПоставщика.УникальныйИдентификатор) Тогда
				ЗаписьДанныеПоставщика.УУИД = ДанныеПоставщика.УникальныйИдентификатор;
			КонецЕсли;
			
			// ТелефонПоставщика (необязательное)
			Если ЗначениеЗаполнено(ДанныеПоставщика.ТелефонПоставщика) Тогда
				ЗаписьДанныеПоставщика.ТелефонПоставщика = ДанныеПоставщика.ТелефонПоставщика;
			КонецЕсли;
			
			// НаименованиеПоставщика (необязательное)
			Если ЗначениеЗаполнено(ДанныеПоставщика.НаименованиеПоставщика) Тогда
				ЗаписьДанныеПоставщика.НаименованиеПоставщика = ДанныеПоставщика.НаименованиеПоставщика;
			КонецЕсли;
			
			// ИННПоставщика (необязательное)
			Если ЗначениеЗаполнено(ДанныеПоставщика.ИННПоставщика) Тогда
				ЗаписьДанныеПоставщика.ИННПоставщика = ДанныеПоставщика.ИННПоставщика;
			КонецЕсли;
			
			СписокДанныхПоставщика = ОбъектДанныеПоставщиков.ДанныеПоставщикаЗапись; //СписокXDTO - .
			СписокДанныхПоставщика.Добавить(ЗаписьДанныеПоставщика);
			
		КонецЦикла;
		
		ОбъектПрайсЛист.ДанныеПоставщиков = ОбъектДанныеПоставщиков;
		ЕстьВыгружаемыеДанные = Истина;
		
	КонецЕсли;
	
	Возврат ОбъектПрайсЛист;
	
КонецФункции

Функция ПолучитьЗаполнитьОбъектПрайсЛист1000(СтруктураПрайсЛиста, ВерсияФорматаОбмена)
	
	URIИмен      = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта      = ФабрикаXDTO.Тип(URIИмен, "PriceList");
	ОбъектПрайсЛист = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектПрайсЛист.ПолнаяЗагрузка = СтруктураПрайсЛиста.ПолнаяВыгрузка;
	
	Если ВерсияФорматаОбмена > 1005 Тогда
		
		ОбъектПрайсЛист.НомерПакета = ?(СтруктураПрайсЛиста.Свойство("НомерПакета") 
		И ЗначениеЗаполнено(СтруктураПрайсЛиста.НомерПакета), СтруктураПрайсЛиста.НомерПакета, 1);
		
		ОбъектПрайсЛист.ПакетовВсего = ?(СтруктураПрайсЛиста.Свойство("ПакетовВсего") 
		И ЗначениеЗаполнено(СтруктураПрайсЛиста.ПакетовВсего), СтруктураПрайсЛиста.ПакетовВсего, 1);
		
		ОбъектПрайсЛист.ВерсияФормата = ВерсияФорматаОбмена;
		
	КонецЕсли;
	
	// Группы товаров
	Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
		
		ТипОбъекта                    = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваров");
		ОбъектПрайсЛист.ГруппыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъекта                = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваровЗапись");
		
		ГруппыТоваров = СтруктураПрайсЛиста.ГруппыТоваров; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров - .
		
		Для Каждого ГруппаТоваров Из ГруппыТоваров Цикл
			
			ОбъектГруппыТоваровЗапись = ФабрикаXDTO.Создать(ТипОбъекта); //ОбъектXDTO - 
			
			Если ЗначениеЗаполнено(ГруппаТоваров.Код) Тогда
				ОбъектГруппыТоваровЗапись.Код = ГруппаТоваров.Код;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаТоваров.КодГруппы) Тогда
				ОбъектГруппыТоваровЗапись.КодГруппы = ГруппаТоваров.КодГруппы;
			Иначе
				ОбъектГруппыТоваровЗапись.КодГруппы = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаТоваров.Наименование) Тогда
				ОбъектГруппыТоваровЗапись.Наименование = ГруппаТоваров.Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГруппаТоваров.УникальныйИдентификатор) Тогда
				ОбъектГруппыТоваровЗапись.УникальныйИдентификатор = ГруппаТоваров.УникальныйИдентификатор;
			КонецЕсли;
			
			СписокГруппТоваров = ОбъектПрайсЛист.ГруппыТоваров; //СписокXDTO - 
			СписокГруппТоваров.Добавить(ОбъектГруппыТоваровЗапись);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
		
		ТипОбъектаТовары         = ФабрикаXDTO.Тип(URIИмен, "Товары");
		ТипОбъектаТоварыЗапись   = ФабрикаXDTO.Тип(URIИмен, "ТоварыЗапись");
		
		ОбъектПрайсЛист.Товары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
		
		Для Каждого СтрокаДерева Из СтруктураПрайсЛиста.Товары Цикл
			
			Если СтрокаДерева.ИмеетХарактеристики И НЕ СтрокаДерева.ИмеетУпаковки Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар1000(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена,
				СтруктураПрайсЛиста.ЕдиницыИзмерения);
				ЗаписатьХарактеристики1000(ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена, ОбъектТоварыЗапись.ЕдиницаИзмерения);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И НЕ СтрокаДерева.ИмеетХарактеристики Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар1000(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена,
				СтруктураПрайсЛиста.ЕдиницыИзмерения);
				ЗаписатьУпаковки1000(ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена, ОбъектТоварыЗапись.ЕдиницаИзмерения);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И СтрокаДерева.ИмеетХарактеристики Тогда
				
			Иначе
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар1000(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева, ВерсияФорматаОбмена,
				СтруктураПрайсЛиста.ЕдиницыИзмерения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбъектПрайсЛист;
	
КонецФункции

Функция ПолучитьЗаполнитьОбъектЗаказы(ВыгружаемыеЗаказы, ВерсияФорматаОбмена, ЕстьВыгружаемыеДанные = Ложь)
	
	//200Х
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Orders");
	ОбъектЗаказы = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если НЕ ЗначениеЗаполнено(ВыгружаемыеЗаказы) Тогда
		Возврат ОбъектЗаказы;
	КонецЕсли;
	
	ТипОбъектаЗаказ = ФабрикаXDTO.Тип(URIИмен, "Заказ");
	
	Для Каждого Заказ Из ВыгружаемыеЗаказы Цикл
		
		ЗаписьЗаказ = ФабрикаXDTO.Создать(ТипОбъектаЗаказ);
		
		// НомерЗаказа (обязательное)
		Если ЗначениеЗаполнено(Заказ.НомерЗаказа) Тогда
			ЗаписьЗаказ.НомерЗаказа = Заказ.НомерЗаказа;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "Наименование");
		КонецЕсли;
		
		// ДатаЗаказа (обязательное)
		Если ЗначениеЗаполнено(Заказ.ДатаЗаказа) Тогда
			ЗаписьЗаказ.ДатаЗаказа = Заказ.ДатаЗаказа;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "ДатаЗаказа");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Заказ.УникальныйИдентификатор) Тогда
			ЗаписьЗаказ.УУИД = Заказ.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Заказ", "УникальныйИдентификатор");
		КонецЕсли;
		
		// ГородДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.ГородДоставки) Тогда
			ЗаписьЗаказ.ГородДоставки = Заказ.ГородДоставки;
		КонецЕсли;
		
		// УлицаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.УлицаДоставки) Тогда
			ЗаписьЗаказ.УлицаДоставки = Заказ.УлицаДоставки;
		КонецЕсли;
		
		// НомерДомаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерДомаДоставки) Тогда
			ЗаписьЗаказ.НомерДомаДоставки = Заказ.НомерДомаДоставки;
		КонецЕсли;
		
		// НомерКвартирыДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерКвартирыДоставки) Тогда
			ЗаписьЗаказ.НомерКвартирыДоставки = Заказ.НомерКвартирыДоставки;
		КонецЕсли;
		
		// НомерПодъездаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерПодъездаДоставки) Тогда
			ЗаписьЗаказ.НомерПодъездаДоставки = Заказ.НомерПодъездаДоставки;
		КонецЕсли;
		
		// НомерЭтажаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерЭтажаДоставки) Тогда
			ЗаписьЗаказ.НомерЭтажаДоставки = Заказ.НомерЭтажаДоставки;
		КонецЕсли;
		
		// НомерТелефонаКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.НомерТелефонаКлиента) Тогда
			ЗаписьЗаказ.НомерТелефонаКлиента = Заказ.НомерТелефонаКлиента;
		КонецЕсли;
		
		// EmailКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.EmailКлиента) Тогда
			ЗаписьЗаказ.EmailКлиента = Заказ.EmailКлиента;
		КонецЕсли;
		
		// ДатаДоставки (необязательное)
		Если ЗначениеЗаполнено(Заказ.ДатаДоставки) Тогда
			ЗаписьЗаказ.ДатаДоставки = Заказ.ДатаДоставки;
		КонецЕсли;
		
		// СтатусЗаказа (необязательное)
		Если ЗначениеЗаполнено(Заказ.СтатусЗаказа) Тогда
			ЗаписьЗаказ.СтатусЗаказа = Заказ.СтатусЗаказа;
		КонецЕсли;
		
		// Комментарий (необязательное)
		Если ЗначениеЗаполнено(Заказ.Комментарий) Тогда
			ЗаписьЗаказ.Комментарий = Заказ.Комментарий;
		КонецЕсли;
		
		// ИмяКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.ИмяКлиента) Тогда
			ЗаписьЗаказ.ИмяКлиента = Заказ.ИмяКлиента;
		КонецЕсли;
		
		// ФамилияКлиента (необязательное)
		Если ЗначениеЗаполнено(Заказ.ФамилияКлиента) Тогда
			ЗаписьЗаказ.ФамилияКлиента = Заказ.ФамилияКлиента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.Товары) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "ЗаказТовары");
			ОбъектЗаказТовары = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ТипОбъектаТоварЗапись = ФабрикаXDTO.Тип(URIИмен, "ЗаказТоварыЗапись");
			Для Каждого Товар Из Заказ.Товары Цикл
				
				ЗаписьТовар = ФабрикаXDTO.Создать(ТипОбъектаТоварЗапись);
				
				// Код (обязательное)
				Если ЗначениеЗаполнено(Товар.Код) Тогда
					ЗаписьТовар.Код = Товар.Код;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Код");
				КонецЕсли;
				
				// Количество (обязательное)
				Если ЗначениеЗаполнено(Товар.Количество) Тогда
					ЗаписьТовар.Количество = Товар.Количество;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Количество");
				КонецЕсли;
				
				// Цена (обязательное)
				Если ЗначениеЗаполнено(Товар.Цена) Тогда
					ЗаписьТовар.Цена = Товар.Цена;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Цена");
				КонецЕсли;
				
				// Сумма (обязательное)
				Если ЗначениеЗаполнено(Товар.Сумма) Тогда
					ЗаписьТовар.Сумма = Товар.Сумма;
				Иначе
					ВызватьИсключениеЗаполнения("Заказ.Товары", "Сумма");
				КонецЕсли;
				
				// УникальныйИдентификаторТовара (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторТовара) Тогда
					ЗаписьТовар.УУИДТовара = Товар.УникальныйИдентификаторТовара;
				КонецЕсли;
				
				// УникальныйИдентификаторХарактеристики (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторХарактеристики) Тогда
					ЗаписьТовар.УУИДХарактеристики = Товар.УникальныйИдентификаторХарактеристики;
				КонецЕсли;
				
				// УникальныйИдентификаторУпаковки (необязательное)
				Если ЗначениеЗаполнено(Товар.УникальныйИдентификаторУпаковки) Тогда
					ЗаписьТовар.УУИДУпаковки = Товар.УникальныйИдентификаторУпаковки;
				КонецЕсли;
				
				СписокТоваров = ОбъектЗаказТовары.ЗаказТоварыЗапись; //СписокXDTO - 
				СписокТоваров.Добавить(ЗаписьТовар);

			КонецЦикла;
			
			ЗаписьЗаказ.Товары = ОбъектЗаказТовары;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.Оплаты) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Оплаты");
			ОбъектОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ТипОбъектаОплатаЗапись = ФабрикаXDTO.Тип(URIИмен, "Оплата");
			Для Каждого Оплата Из Заказ.Оплаты Цикл
				
				ЗаписьОплата = ФабрикаXDTO.Создать(ТипОбъектаОплатаЗапись);
				
				// СуммаНаличнойОплаты (обязательное)
				ЗаписьОплата.СуммаНаличнойОплаты = Оплата.СуммаНаличнойОплаты;
				
				// СуммаЭлектроннойОплаты (обязательное)
				ЗаписьОплата.СуммаЭлектроннойОплаты = Оплата.СуммаЭлектроннойОплаты;
				
				// СуммаПредоплатой (обязательное)
				ЗаписьОплата.СуммаПредоплатой = Оплата.СуммаПредоплатой;
				
				// СуммаПостоплатой (обязательное)
				ЗаписьОплата.СуммаПостоплатой = Оплата.СуммаПостоплатой;
				
				// СуммаВстречнымПредоставлением (обязательное)
				ЗаписьОплата.СуммаВстречнымПредоставлением = Оплата.СуммаВстречнымПредоставлением;
				
				// КодВидаЭлектроннойОплаты (необязательное)
				Если ЗначениеЗаполнено(Оплата.КодВидаЭлектроннойОплаты) Тогда
					ЗаписьОплата.КодВидаЭлектроннойОплаты = Оплата.КодВидаЭлектроннойОплаты;
				КонецЕсли;
				
				// УникальныйИдентификаторВидаЭлектроннойОплаты (необязательное)
				Если ЗначениеЗаполнено(Оплата.УникальныйИдентификаторВидаЭлектроннойОплаты) Тогда
					ЗаписьОплата.УУИДВидаЭлектроннойОплаты = Оплата.УникальныйИдентификаторВидаЭлектроннойОплаты;
				КонецЕсли;
				
				СписокОплат = ОбъектОплаты.Оплата; //СписокXDTO -
				СписокОплат.Добавить(ЗаписьОплата);
			КонецЦикла;
			
			ЗаписьЗаказ.Оплаты = ОбъектОплаты;
		КонецЕсли;
		
		СписокЗаказов = ОбъектЗаказы.Заказы; //СписокXDTO - 
		СписокЗаказов.Добавить(ЗаписьЗаказ);
		
	КонецЦикла;
	
	ЕстьВыгружаемыеДанные = Истина;
	
	Возврат ОбъектЗаказы;
	
КонецФункции

Функция ЗаписатьХарактеристики(Товар, ВерсияФорматаОбмена)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаХарактеристики = ФабрикаXDTO.Тип(URIИмен, "Характеристики");
	ТипОбъектаХарактеристикаЗапись = ФабрикаXDTO.Тип(URIИмен, "ХарактеристикаЗапись");
	
	ОбъектХарактеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристики);
	
	Характеристики = Товар.Характеристики; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики - .
	
	Для Каждого Характеристика Из Характеристики Цикл
		
		ЗаписьХарактеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристикаЗапись);
		
		// Наименование (обязательное)
		Если ЗначениеЗаполнено(Характеристика.Наименование) Тогда
			ЗаписьХарактеристики.Наименование = Характеристика.Наименование;
		Иначе
			ВызватьИсключениеЗаполнения("Характеристика", "Наименование");
		КонецЕсли;
		
		// Код (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Код) Тогда
			ЗаписьХарактеристики.Код = Характеристика.Код;
		КонецЕсли;
		
		// Штрихкоды (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Штрихкоды) Тогда
			ЗаписьХарактеристики.Штрихкоды = ЗаписатьШтрихкоды(URIИмен, Характеристика.Штрихкоды);
		КонецЕсли;
		
		// Цена (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Цена) Тогда
			ЗаписьХарактеристики.Цена = Характеристика.Цена;
		КонецЕсли;
		
		// Остаток (необязательное)
		Если ЗначениеЗаполнено(Характеристика.Остаток) И Характеристика.Остаток > 0 Тогда
			ЗаписьХарактеристики.Остаток = Формат(Характеристика.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Характеристика.УникальныйИдентификатор) Тогда
			ЗаписьХарактеристики.УУИД = Характеристика.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Характеристика", "УникальныйИдентификатор");
		КонецЕсли;
		
		// ИмеетУпаковки И Упаковки (необязательное)
		Если Характеристика.ИмеетУпаковки Тогда
			
			ЗаписьХарактеристики.ИмеетУпаковки = Характеристика.ИмеетУпаковки;
			ЗаписьХарактеристики.Упаковки = ЗаписатьУпаковки(Характеристика, ВерсияФорматаОбмена);
			
		КонецЕсли;
		
		СписокХарактеристик = ОбъектХарактеристики.ХарактеристикаЗапись; //СписокXDTO - 
		СписокХарактеристик.Добавить(ЗаписьХарактеристики);
		
	КонецЦикла;
	
	Возврат ОбъектХарактеристики;
	
КонецФункции

Функция ЗаписатьУпаковки(Источник, ВерсияФорматаОбмена)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаУпаковки = ФабрикаXDTO.Тип(URIИмен, "Упаковки");
	ТипОбъектаУпаковкаЗапись = ФабрикаXDTO.Тип(URIИмен, "УпаковкаЗапись");
	
	ОбъектУпаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковки);
	
	Упаковки = Источник.Упаковки; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки - .
	
	Для Каждого Упаковка Из Упаковки Цикл
		
		ЗаписьУпаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковкаЗапись);
		
		// Наименование (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Наименование) Тогда
			ЗаписьУпаковки.Наименование = Упаковка.Наименование;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Наименование");
		КонецЕсли;
		
		// Код (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Код) Тогда
			ЗаписьУпаковки.Код = Упаковка.Код;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Код");
		КонецЕсли;
		
		// Коэффициент (обязательное)
		Если ЗначениеЗаполнено(Упаковка.Коэффициент) Тогда
			ЗаписьУпаковки.Коэффициент = Упаковка.Коэффициент;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "Коэффициент");
		КонецЕсли;
		
		// УникальныйИдентификатор (обязательное)
		Если ЗначениеЗаполнено(Упаковка.УникальныйИдентификатор) Тогда
			ЗаписьУпаковки.УУИД = Упаковка.УникальныйИдентификатор;
		Иначе
			ВызватьИсключениеЗаполнения("Упаковка", "УникальныйИдентификатор");
		КонецЕсли;
		
		// Штрихкоды (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Штрихкоды) Тогда
			ЗаписьУпаковки.Штрихкоды = ЗаписатьШтрихкоды(URIИмен, Упаковка.Штрихкоды);
		КонецЕсли;
		
		// Цена (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Цена) Тогда
			ЗаписьУпаковки.Цена = Упаковка.Цена;
		КонецЕсли;
		
		// Остаток (необязательное)
		Если ЗначениеЗаполнено(Упаковка.Остаток) И Упаковка.Остаток > 0 Тогда
			ЗаписьУпаковки.Остаток = Формат(Упаковка.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		СписокУпаковок = ОбъектУпаковки.УпаковкаЗапись; //СписокXDTO - 
		СписокУпаковок.Добавить(ЗаписьУпаковки);
		
	КонецЦикла;
	
	Возврат ОбъектУпаковки;
	
КонецФункции

Функция ЗаписатьШтрихкоды(URIИмен, Штрихкоды)
	
	ТипОбъектаШтрихкоды = ФабрикаXDTO.Тип(URIИмен, "Штрихкоды");
	ОбъектШтрихкоды = ФабрикаXDTO.Создать(ТипОбъектаШтрихкоды);
	
	ТипОбъектаШтрихкодЗапись = ФабрикаXDTO.Тип(URIИмен, "ШтрихкодЗапись");
	
	Для Каждого ДанныеШтрихкода Из Штрихкоды Цикл
		
		ЗаписьШтрихкод = ФабрикаXDTO.Создать(ТипОбъектаШтрихкодЗапись);
		
		// Штрихкод (обязательное)
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда
			ЗаписьШтрихкод.Штрихкод = ДанныеШтрихкода.Штрихкод;
		Иначе
			ВызватьИсключениеЗаполнения("Штрихкод", "Штрихкод");
		КонецЕсли;
		
		// ТипШтрихкода (необязательное)
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
			ЗаписьШтрихкод.Тип = ДанныеШтрихкода.ТипШтрихкода;
		КонецЕсли;
		
		СписокШтрихкодов = ОбъектШтрихкоды.ШтрихкодЗапись; //СписокXDTO - 
		СписокШтрихкодов.Добавить(ЗаписьШтрихкод)
	КонецЦикла;
	
	Возврат ОбъектШтрихкоды;
	
КонецФункции

Функция ВызватьИсключениеЗаполнения(ИмяОбъекта, ИмяПоля)
	
	ТекстСообщения = НСтр("ru='Ошибка встраивания БПО (Офлайн оборудование).
		|Не заполнено обязательное поле: %ИмяПоля%, объект: %ИмяОбъекта%.'"
	);
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", 		ИмяПоля);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", 	ИмяОбъекта);
	
	ВызватьИсключение ТекстСообщения;
	
КонецФункции

Функция ОпределитьКоличествоПакетов(РазмерПакета, КоличествоЭлементов)
	
	Если РазмерПакета = 0 Тогда
		КоличествоПакетов = 1;
	Иначе
		// Определяем количество полных пакетов.
		КоличествоПолныхПакетов = Цел(КоличествоЭлементов/РазмерПакета);
		//	Если количество элементов на пакет больше чем определенное количество пакетов, добавляем один неполный пакет.
		КоличествоПакетов = КоличествоПолныхПакетов + ?((КоличествоЭлементов/РазмерПакета)-КоличествоПолныхПакетов>0, 1, 0);
	КонецЕсли;
	
	Возврат КоличествоПакетов;
	
КонецФункции

// Создает сообщение об ошибке.
// 
// Параметры:
// 	ВыходныеПараметры - Массив - массив выходных параметров.
// 	ТекстСообщения - Строка - текст возвращаемого сообщения.
//
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

Функция СоздатьЧтениеXML(ТекстПакета, ЧтениеXML, ВыходныеПараметры)
	
	Результат = Истина;
	
	ЧтениеXML = Новый ЧтениеXML;
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(ТекстПакета, ПараметрыЧтения);
	
	Попытка
		ЧтениеXML.Прочитать();
	Исключение
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru = 'При чтении файла произошла ошибка'"));
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьШтрихкод(Штрихкоды)
	
	ШтрихкодСтрока = "";
	
	Для Каждого ДанныеШтрихкода Из Штрихкоды Цикл
		
		Если НЕ ПустаяСтрока(ШтрихкодСтрока) Тогда
			ШтрихкодСтрока = ШтрихкодСтрока + ",";
		КонецЕсли;
		
		ШтрихкодСтрока = ШтрихкодСтрока + ДанныеШтрихкода.Штрихкод;
		
	КонецЦикла;
	
	Возврат ШтрихкодСтрока;
	
КонецФункции

// Записать товар формата 1.0.
// 
// Параметры:
// 	ОбъектПрайсЛист - Структура - .
// 	Запись - Структура - где:
// 	* Наименование - Строка - .
// 	Источник - Структура - где:
// 	* Наименование - Строка - .
// 	ВерсияФорматаОбмена - Число - .
// 	ЕдиницыИзмерения - Массив - .
Процедура ЗаписатьТовар1000(ОбъектПрайсЛист, Запись, Источник, ВерсияФорматаОбмена, ЕдиницыИзмерения)
	
	Если ЗначениеЗаполнено(Источник.КодГруппы) Тогда
		Запись.КодГруппы = Источник.КодГруппы;
	Иначе
		Запись.КодГруппы = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Наименование) Тогда
		Запись.Наименование = Источник.Наименование;
	КонецЕсли;

	Если ЗначениеЗаполнено(Источник.Артикул) Тогда
		Запись.Артикул = Источник.Артикул;
	Иначе
		Запись.Артикул = "";
	КонецЕсли;
	
	Запись.Весовой = Источник.ЭтоВесовойТовар;
	
	Если ЗначениеЗаполнено(Источник.КодЕдиницыИзмерения) Тогда
		
		Для Каждого ЕИ Из ЕдиницыИзмерения Цикл 
			Если ЕИ.Код = Источник.КодЕдиницыИзмерения Тогда
				Запись.ЕдиницаИзмерения = ЕИ.Наименование;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запись.ЕдиницаИзмерения = "шт";
	КонецЕсли;
	
	Запись.ИмеетУпаковки = Источник.ИмеетУпаковки;
	
	Запись.ИмеетХарактеристики = Источник.ИмеетХарактеристики;
	
	Если ЗначениеЗаполнено(Источник.СтавкаНДС) Тогда
		Если Источник.СтавкаНДС = "none" Тогда
			СтавкаНДС = 0;
		Иначе
			СтавкаНДС = Число(Источник.СтавкаНДС);
		КонецЕсли;
		Запись.СтавкаНДС = СтавкаНДС;
	КонецЕсли;
	
	Если Источник.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
		Запись.Услуга = Истина;
	Иначе
		Запись.Услуга = Ложь;
	КонецЕсли;
	
	Если ВерсияФорматаОбмена >= 1006 И ЗначениеЗаполнено(Источник.УникальныйИдентификатор) Тогда
		Запись.УникальныйИдентификатор = Источник.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ВерсияФорматаОбмена >= 1006 И Источник.ЭтоАлкоголь Тогда
		
		Запись.Алкоголь = Истина;
		
		Запись.Маркируемый 					= Источник.АлкогольныеРеквизиты.Маркируемый;
		Запись.КодВидаАлкогольнойПродукции 	= Источник.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
		Запись.ЕмкостьТары 					= Источник.АлкогольныеРеквизиты.ЕмкостьТары;
		Запись.Крепость 					= Источник.АлкогольныеРеквизиты.Крепость;
		Запись.ИННПроизводителя 			= Источник.АлкогольныеРеквизиты.ИННПроизводителя;
		Запись.КПППроизводителя 			= Источник.АлкогольныеРеквизиты.КПППроизводителя;
		
	КонецЕсли;
	
	Если НЕ (Источник.ИмеетУпаковки ИЛИ Источник.ИмеетХарактеристики) Тогда
		
		Если ЗначениеЗаполнено(Источник.Код) Тогда
			Запись.Код = Источник.Код;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Цена) Тогда
			Запись.Цена = Источник.Цена;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.Остаток) И Источник.Остаток > 0 Тогда
			Запись.Остаток = Формат(Источник.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		Запись.Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
		
	КонецЕсли;
	
	СписокТоваров = ОбъектПрайсЛист.Товары.ТоварыЗапись; //СписокXDTO - 
	СписокТоваров.Добавить(Запись);
	
КонецПроцедуры

Функция ЗаписатьХарактеристики1000(Запись, Источник, ВерсияФорматаОбмена, ЕдиницаИзмерения)
	
	URIИмен      = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаХарактеристики       = ФабрикаXDTO.Тип(URIИмен, "Характеристики");
	ТипОбъектаХарактеристикиЗапись = ФабрикаXDTO.Тип(URIИмен, "ХарактеристикиЗапись");
	
	Запись.Характеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристики);
	
	Характеристики = Источник.Характеристики; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики - .
	
	Для Каждого СтрокаХарактеристика Из Характеристики Цикл
		
		ОбъектХарактеристикиЗапись = ФабрикаXDTO.Создать(ТипОбъектаХарактеристикиЗапись); //ОбъектXDTO - 
		
		Если ЗначениеЗаполнено(СтрокаХарактеристика.Наименование) Тогда
			ОбъектХарактеристикиЗапись.Наименование = СтрокаХарактеристика.Наименование;
		КонецЕсли;
		
		Если ВерсияФорматаОбмена >= 1006
			И ЗначениеЗаполнено(СтрокаХарактеристика.УникальныйИдентификатор) Тогда
			ОбъектХарактеристикиЗапись.УникальныйИдентификатор = СтрокаХарактеристика.УникальныйИдентификатор;
		КонецЕсли;
		
		ОбъектХарактеристикиЗапись.ИмеетУпаковки = СтрокаХарактеристика.ИмеетУпаковки;
		
		Если НЕ СтрокаХарактеристика.ИмеетУпаковки Тогда
			
			Если ЗначениеЗаполнено(СтрокаХарактеристика.Код) Тогда
				ОбъектХарактеристикиЗапись.Код = СтрокаХарактеристика.Код;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаХарактеристика.Цена) Тогда
				ОбъектХарактеристикиЗапись.Цена = СтрокаХарактеристика.Цена;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаХарактеристика.Остаток) И СтрокаХарактеристика.Остаток > 0 Тогда
				ОбъектХарактеристикиЗапись.Остаток = Формат(СтрокаХарактеристика.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
			КонецЕсли;
			
			ОбъектХарактеристикиЗапись.Штрихкод = РазложитьШтрихкод(СтрокаХарактеристика.Штрихкоды);
			
		КонецЕсли;
		
		СписокХарактеристик = Запись.Характеристики.ХарактеристикиЗапись; //СписокXDTO - 
		СписокХарактеристик.Добавить(ОбъектХарактеристикиЗапись);
		
		Если СтрокаХарактеристика.ИмеетУпаковки Тогда
			ЗаписатьУпаковки1000(ОбъектХарактеристикиЗапись, СтрокаХарактеристика, ВерсияФорматаОбмена, ЕдиницаИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ЗаписатьУпаковки1000(Запись, Источник, ВерсияФорматаОбмена, ЕдиницаИзмерения)
	
	URIИмен = URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъектаУпаковки       = ФабрикаXDTO.Тип(URIИмен, "Упаковки");
	ТипОбъектаУпаковкиЗапись = ФабрикаXDTO.Тип(URIИмен, "УпаковкиЗапись");
	
	Запись.Упаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковки);
	
	Упаковки = Источник.Упаковки; //Массив Из См. МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки - .
	
	Для Каждого СтрокаУпаковка Из Упаковки Цикл
		
		ОбъектУпаковкиЗапись = ФабрикаXDTO.Создать(ТипОбъектаУпаковкиЗапись); //ОбъектXDTO - 
		
		Если ЗначениеЗаполнено(СтрокаУпаковка.Наименование) Тогда
			ОбъектУпаковкиЗапись.Наименование = СтрокаУпаковка.Наименование;
		Иначе
			ОбъектУпаковкиЗапись.Наименование = ЕдиницаИзмерения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУпаковка.Код) Тогда
			ОбъектУпаковкиЗапись.Код = СтрокаУпаковка.Код;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУпаковка.Цена) Тогда
			ОбъектУпаковкиЗапись.Цена = СтрокаУпаковка.Цена;
		Иначе
			ОбъектУпаковкиЗапись.Цена = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУпаковка.Остаток) И СтрокаУпаковка.Остаток > 0 Тогда
			ОбъектУпаковкиЗапись.Остаток = Формат(СтрокаУпаковка.Остаток, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУпаковка.Коэффициент) Тогда
			ОбъектУпаковкиЗапись.Коэффициент = СтрокаУпаковка.Коэффициент;
		Иначе
			ОбъектУпаковкиЗапись.Коэффициент = 1;
		КонецЕсли;
		
		Если ВерсияФорматаОбмена >= 1006 И ЗначениеЗаполнено(СтрокаУпаковка.УникальныйИдентификатор) Тогда
			ОбъектУпаковкиЗапись.УникальныйИдентификатор = СтрокаУпаковка.УникальныйИдентификатор;
		КонецЕсли;
		
		ОбъектУпаковкиЗапись.Штрихкод = РазложитьШтрихкод(СтрокаУпаковка.Штрихкоды);
		
		СписокУпаковок = Запись.Упаковки.УпаковкиЗапись; //СписокXDTO - 
		СписокУпаковок.Добавить(ОбъектУпаковкиЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
