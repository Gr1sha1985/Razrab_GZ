#Область ПрограммныйИнтерфейс

// Запускает фоновое задание обновления записей регистра сведений "ДанныеМонитораРуководителя".
//
Функция ЗапуститьОбновлениеМонитораВФоне(ПараметрыОбновления, УникальныйИдентификатор, СУчетомАктуальности, ОжидатьВыполненияЗадания) Экспорт
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ФоновоеЗаданиеОбновленияМонитораЗапущено() Тогда
		// Надо ждать
		Возврат Неопределено;
	КонецЕсли;
	
	Если СУчетомАктуальности Тогда
		ИмяПроцедуры = "ОбновитьДанныеМонитораВФоне";
	Иначе
		ИмяПроцедуры = "ПерезаписатьДанныеМонитораВФоне";
	КонецЕсли;
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗаданияОбновленияМонитора();
	Если НЕ ОжидатьВыполненияЗадания Тогда
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0; // Возвращать управление сразу
	КонецЕсли;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МониторРуководителя." + ИмяПроцедуры,
		ПараметрыОбновления,
		ПараметрыВыполненияВФоне);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Запускает фоновое задание обновления записей регистра сведений "ДанныеМонитораРуководителя"
// из вызова внешнего программного интерфейса.
//
Функция ЗапуститьОбновлениеМонитораДляВнешнегоПрограммногоИнтерфейса() Экспорт
	
	Если ФоновоеЗаданиеОбновленияМонитораЗапущено() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("ПолучатьПрошлыйПериод", Ложь);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗаданияОбновленияМонитора();
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания         = КлючФоновогоЗаданияОбновленияМонитора();
	ПараметрыВыполненияВФоне.ОжидатьЗавершение           = 0;
	
	// Привилегированный режим при запуске фонового задания устанавливается из-за того, что у пользователя,
	// получающего данные через внешний программный интерфейс, нет роли БазовыеПраваБСП.
	УстановитьПривилегированныйРежим(Истина);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МониторРуководителя.ОбновитьДанныеМонитораВФонеДляВнешнегоПрограммногоИнтерфейса",
		ПараметрыОбновления,
		ПараметрыВыполненияВФоне);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Вызывает обновление записей регистра сведений "ДанныеМонитораРуководителя" вызывается фоновым заданием
// при обновлении учитывается актуальность данных регистра сведений
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить ланные монитора
//									Если не заполнено данные будут обновлены по всем доступным организациям
//		*РазделыМонитора - Массив - список разделов монитора основных показателей, которые нужно обновить.
//		*ПолучатьПрошлыйПериод - Булево - признак, что нужно включать в расчет прошлый период.
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры)
Процедура ОбновитьДанныеМонитораВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт

	ОбновитьДанныеМонитора(Параметры.Организация, Истина, Параметры.РазделыМонитора, Параметры.ПолучатьПрошлыйПериод);

КонецПроцедуры	

// Вызывает перезапись данных регистра сведений "ДанныеМонитораРуководителя" вызывается фоновым заданием
// данные регистра сведений перезаписываются без учета актуальности
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить ланные монитора
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры)	
Процедура ПерезаписатьДанныеМонитораВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	ОбновитьДанныеМонитора(Параметры.Организация, Ложь, Параметры.РазделыМонитора, Параметры.ПолучатьПрошлыйПериод);
	
КонецПроцедуры

// Вызывает первоначальное заполнение регистра сведений "ДанныеМонитораРуководителя" по всем организациям
// Запускается при обновлении версии конфиурации и при переходе с предыдущей версии
Процедура ЗаполнитьДанныеМонитораРуководителя() Экспорт
	
	ОбновитьДанныеМонитораПоВсемОрганизациям(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Возвращает настройку списка разделов монитора руководителя  по умолчанию
// Возвращаемое значение:
// СписокЗначений - Список разделов монитора руководителя с пометками и упорядочиванием по умолчанию
Функция СписокРазделовМонитораРуководителяПоУмолчанию() Экспорт
	
	РазделыПоУмолчанию = Перечисления.РазделыМонитораРуководителя.РазделыМонитораРуководителяПоУмолчанию();
	НеиспользуемыеРазделы = Перечисления.РазделыМонитораРуководителя.НеиспользуемыеРазделы();
	
	СписокРазделов = Новый СписокЗначений();
	Для Каждого Раздел из Перечисления.РазделыМонитораРуководителя Цикл
		
		Если НеиспользуемыеРазделы.Найти(Раздел) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = ОбщегоНазначения.ИмяЗначенияПеречисления(Раздел);
		Если Лев(ВРег(Представление), 7) = "УДАЛИТЬ" Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = РазделыПоУмолчанию.Найти(Раздел) <> Неопределено;
		СписокРазделов.Добавить(Раздел, Представление, Пометка);
		
	КонецЦикла;
	
	Возврат СписокРазделов;
	
КонецФункции

// Создает пустую таблицу контейнер для данных монитора руководителя
// Возвращаемое значение:
//	ТаблицаЗначений - Пустая таблица данных монитора руководителя
//
Функция ТаблицаДанных() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	НоваяТаблицаДанных = Новый ТаблицаЗначений;
	
	НоваяТаблицаДанных.Колонки.Добавить("ПодразделМонитора", Новый ОписаниеТипов("ПеречислениеСсылка.ПодразделыМонитораРуководителя"));
	НоваяТаблицаДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	НоваяТаблицаДанных.Колонки.Добавить("Сумма", 		 ОписаниеТиповЧисло15_2);
	НоваяТаблицаДанных.Колонки.Добавить("СуммаВВалюте",  ОписаниеТиповЧисло15_2);
	НоваяТаблицаДанных.Колонки.Добавить("Порядок", 		 Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1)));
	НоваяТаблицаДанных.Колонки.Добавить("Валюта", 		 Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НоваяТаблицаДанных.Колонки.Добавить("ДанныеРасшифровки",
		Новый ОписаниеТипов("СправочникСсылка.Валюты, СправочникСсылка.НоменклатурныеГруппы,
			|СправочникСсылка.Контрагенты, ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика"));
	
	Возврат НоваяТаблицаДанных;
	
КонецФункции

Функция ШаблонЗапросаПоПросроченнойЗадолженнсти() Экспорт
	
	Возврат "ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.[СуммаОстаток] КАК Сумма
		|ПОМЕСТИТЬ [Остатки]
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&[Период],
		|			Счет В
		|				(&СписокСчетов),
		|			&СубконтоКонтрагентДоговор,
		|			Организация = &Организация
		|				И [ТекстУсловия]
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
		|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
		|					ИНАЧЕ &СтандартныйСрокОплаты
		|				КОНЕЦ = &[СрокОплаты]) КАК ХозрасчетныйОстатки
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиДолга.Контрагент КАК Контрагент,
		|	ОстаткиДолга.Договор КАК Договор,
		|	СУММА(ОстаткиДолга.Сумма) КАК Сумма
		|ПОМЕСТИТЬ [ОстаткиНаНачалоСрока]
		|ИЗ
		|	[Остатки] КАК ОстаткиДолга
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиДолга.Контрагент,
		|	ОстаткиДолга.Договор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Договор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.[СуммаОборот] КАК УменьшениеЗадолженности
		|ПОМЕСТИТЬ [ОборотыЗаПериод]
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&[НачалоПериода],
		|			&Период,
		|			,
		|			Счет В
		|				(&СписокСчетов),
		|			&СубконтоКонтрагентДоговор,
		|			Организация = &Организация
		|				И [ТекстУсловия]
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
		|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
		|					ИНАЧЕ &СтандартныйСрокОплаты
		|				КОНЕЦ = &[СрокОплаты],
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Субконто2,
		|	-ХозрасчетныйОбороты.[СуммаОборот]
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&[НачалоПериода],
		|			&Период,
		|			,
		|			Счет В
		|				(&СписокСчетов),
		|			&СубконтоКонтрагентДоговор,
		|			Организация = &Организация
		|				И [ТекстУсловия]
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
		|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
		|					ИНАЧЕ &СтандартныйСрокОплаты
		|				КОНЕЦ = &[СрокОплаты]
		|				И Субконто1 = КорСубконто1
		|				И Субконто2 = КорСубконто2,
		|			КорСчет В
		|				(&СписокСчетов),
		|			&СубконтоКонтрагентДоговор) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНаНачалоСрока.Контрагент КАК Контрагент,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ОборотыЗаПериод.УменьшениеЗадолженности, 0) >= ЕСТЬNULL(ОстаткиНаНачалоСрока.Сумма, 0)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ОстаткиНаНачалоСрока.Сумма, 0) - ЕСТЬNULL(ОборотыЗаПериод.УменьшениеЗадолженности, 0) > ОстаткиДолга.ОстатокДолга
		|						ТОГДА ОстаткиДолга.ОстатокДолга
		|					ИНАЧЕ ЕСТЬNULL(ОстаткиНаНачалоСрока.Сумма, 0) - ЕСТЬNULL(ОборотыЗаПериод.УменьшениеЗадолженности, 0)
		|				КОНЕЦ
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ [ПросроченнаяЗадолженность]
		|ИЗ
		|	ОстаткиДолга КАК ОстаткиДолга
		|		ЛЕВОЕ СОЕДИНЕНИЕ [ОстаткиНаНачалоСрока] КАК ОстаткиНаНачалоСрока
		|			ЛЕВОЕ СОЕДИНЕНИЕ [ОборотыЗаПериод] КАК ОборотыЗаПериод
		|			ПО ОстаткиНаНачалоСрока.Контрагент = ОборотыЗаПериод.Контрагент
		|				И ОстаткиНаНачалоСрока.Договор = ОборотыЗаПериод.Договор
		|		ПО ОстаткиДолга.Контрагент = ОстаткиНаНачалоСрока.Контрагент
		|			И ОстаткиДолга.Договор = ОстаткиНаНачалоСрока.Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиНаНачалоСрока.Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
КонецФункции

Функция ШаблонЗапросаОбъединениеПросроченнойЗадолженнсти() Экспорт
	
	Возврат "ВЫБРАТЬ
		|	ПросроченнаяЗадолженность.Контрагент,
		|	ПросроченнаяЗадолженность.Сумма
		|ИЗ
		|	[ПросроченнаяЗадолженность] КАК ПросроченнаяЗадолженность
		|";
	
КонецФункции	

// Получает список счетов расчтеов с контрагентами
//  Параметры:
// 	Тип - Число - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик,
// 
// Возвращаемое значение:
// 	Массив - Массив счетов
//		* СчетСсылка
//
Функция СчетаРасчетовСКонтрагентами(Тип) Экспорт
	
	// Получим настройку счетов которые учитывать не нужно
	ИсключенныеСчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	Если ИсключенныеСчета = Неопределено Тогда
		ИсключенныеСчета = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ИсключенныеСчета", ИсключенныеСчета);	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВидыСубконтоКонтрагенты.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКонтрагенты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДоговоры
	               |		ПО ВидыСубконтоКонтрагенты.Ссылка = ВидыСубконтоДоговоры.Ссылка
	               |ГДЕ
	               |	ВидыСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	               |	И НЕ ВидыСубконтоКонтрагенты.Ссылка.Забалансовый
	               |	И НЕ ВидыСубконтоКонтрагенты.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)
	               |	И ВидыСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";

Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции	

// Получает дату последнего оновления данных монитора руководителя по организации
// Если в рганизации указана мустая ссылка или неопределено то вернет наибольшую дату по всем организациям
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужно получить дату обновления
//					если не указана то по всем
// Возвращаемое значение:
// Дата, Неопределено - Если не удалось получить данные
//
Функция ПолучитьДатуПоследнегоОбновленияМонитора(Организация, РазделыМонитора) Экспорт

	ДатаПоследнегоОбновленияМонитора = '00010101';
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		СписокОрганизаций = СписокДоступныхОрганизаций;
		
	ИначеЕсли СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
		
	Иначе
		
		Возврат ДатаПоследнегоОбновленияМонитора;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("РазделыМонитора", РазделыМонитора);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МИНИМУМ(ДанныеМонитораРуководителя.ДатаОбновления) КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.ДанныеМонитораРуководителя КАК ДанныеМонитораРуководителя
	|ГДЕ
	|	ДанныеМонитораРуководителя.Организация В(&Организация)
	|	И ДанныеМонитораРуководителя.ПрошлыйПериод = Ложь
	|	И ДанныеМонитораРуководителя.РазделМонитора В(&РазделыМонитора)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		ДатаПоследнегоОбновленияМонитора = Результат.ДатаОбновления;
	КонецЕсли;
	
	Возврат ДатаПоследнегоОбновленияМонитора;
	
КонецФункции

// Получает данные из регистра сведений ДанныеМонитораРуководителя
// Параметры
// Организация - СправочникСсылка.Организации - Организация по которой нужно получить данные
// если не указана то по всем
// СписокРазделов - Массив - массив разделов монитора руководителя
// ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч
// Возвращаемое значение:
// Массив - Массив результатов запроса, результаты в массиве соответствуют разделам монитора
// и располагаются в том же порядке что и в СпискеРазделов
//
Функция ПолучитьДанныеРазделовМонитора(Организация, СписокРазделов, ВариантОкругления = 1000, ПолучатьПрошлыйПериод = Ложь, ПолучатьДанныеПодразделов = Ложь) Экспорт
	
	ДанныеМонитора = НовыйДанныеМонитораРуководителя();
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДанныеМонитораРуководителя) Тогда
		Возврат ДанныеМонитора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ВариантОкругления", ВариантОкругления);
	Запрос.УстановитьПараметр("РазделыМонитора",   СписокРазделов);
	
	Запрос.Текст = ЗапросКДаннымРазделаМонитора(ПолучатьПрошлыйПериод, ЗначениеЗаполнено(Организация), ПолучатьДанныеПодразделов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеМонитора.Добавить(), Выборка);
	КонецЦикла;
	
	ДанныеМонитора.Индексы.Добавить("РазделМонитора");
	
	Возврат ДанныеМонитора;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода) Экспорт
	
	ЭтоПолныйПериод = КонецМесяца(КонецПериода) = КонецДня(КонецПериода);
	
	ПредставлениеНачалаНеполногоПериода = Формат(НачалоПериода, "ДФ='д ММММ'");
	ПредставлениеНачалаПолногоПериода = Формат(НачалоПериода, "ДФ='ММММ'");
	
	ПредставлениеКонцаНеполногоПериода = Формат(КонецПериода, "ДФ='д MMMM'");
	ПредставлениеКонцаПолногоПериода = Формат(КонецПериода, "ДФ='MMMM'");
	
	Если НачалоДня(НачалоПериода) = НачалоДня(КонецПериода) Тогда // Обе даты в пределах одного дня
		
		ПредставлениеПериода = ПредставлениеНачалаНеполногоПериода;
	
	ИначеЕсли Месяц(НачалоПериода) = Месяц(КонецПериода) Тогда // Обе даты в пределах одного месяца
		
		Если ЭтоПолныйПериод Тогда
			ПредставлениеПериода = ПредставлениеКонцаПолногоПериода;
		Иначе
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1–%2", 
				Формат(НачалоПериода, "ДФ='d'"), ПредставлениеКонцаНеполногоПериода);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 – %2", 
			?(ЭтоПолныйПериод, ПредставлениеНачалаПолногоПериода, ПредставлениеНачалаНеполногоПериода), 
			?(ЭтоПолныйПериод, ПредставлениеКонцаПолногоПериода, ПредставлениеКонцаНеполногоПериода));
			
	КонецЕсли;
		
	Возврат ПредставлениеПериода;
	
КонецФункции

// Устанавливает значение параметра сеанса РазрешенныеРазделыМонитораРуководителя,
// который используется в тексте ограничения доступа к данным монитора руководителя
//
// Подробнее см. СтандартныеПодсистемыСервер.УстановкаПараметровСеанса()
//
Процедура УстановитьРазрешенныеРазделыМонитораРуководителя(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "РазрешенныеРазделыМонитораРуководителя" Тогда
		
		ПараметрыСеанса.РазрешенныеРазделыМонитораРуководителя = Перечисления.РазделыМонитораРуководителя.РазрешенныеПользователюРазделы();
		УстановленныеПараметры.Добавить(ИмяПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийПрограммныйИнтерфейс

// Обновляет данные регистра сведений "ДанныеМонитораРуководителя" для внешнего программного интерфейса.
// Вызывается фоновым заданием, данные регистра сведений перезаписываются без учета актуальности.
// Процедура обновления выполняется в привилегированном режиме.
// Параметры:
//   Параметры - Структура - Структура с параметрами переданная в фоновое задание
//         *ПолучатьПрошлыйПериод - Булево - Нужно ли расчитывать данные прошлого периода.
//	ВременноеХранилищеРезультата - Строка - путь к временному хранилищу (не используется в рамках данной процедуры)	
Процедура ОбновитьДанныеМонитораВФонеДляВнешнегоПрограммногоИнтерфейса(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Организация     = Справочники.Организации.ПустаяСсылка();
	РазделыМонитора = Перечисления.РазделыМонитораРуководителя.ПубликуемыеРазделыМонитораРуководителя();
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьДанныеМонитора(Организация, Ложь, РазделыМонитора, Параметры.ПолучатьПрошлыйПериод);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючФоновогоЗаданияОбновленияМонитора()
	
	Возврат "ЗаполнениеМонитораРуководителя";
	
КонецФункции

Функция НаименованиеФоновогоЗаданияОбновленияМонитора()
	
	Возврат НСтр("ru = 'Обновление данных монитора руководителя'");
	
КонецФункции

Функция ФоновоеЗаданиеОбновленияМонитораЗапущено()
	
	КлючФоновогоЗадания = КлючФоновогоЗаданияОбновленияМонитора();
	
	ВыполняющиесяФоновоеЗаданиеЗаполненияМонитора = ФоновыеЗадания.ПолучитьФоновыеЗадания(
		Новый Структура("Ключ, Состояние", КлючФоновогоЗадания, СостояниеФоновогоЗадания.Активно));
	Если ВыполняющиесяФоновоеЗаданиеЗаполненияМонитора.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйДанныеМонитораРуководителя()
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДанныеМонитораРуководителя;
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("РазделМонитора",     МетаданныеРегистра.Измерения.РазделМонитора.Тип);
	Данные.Колонки.Добавить("ПодразделМонитора",  МетаданныеРегистра.Измерения.ПодразделМонитора.Тип);
	Данные.Колонки.Добавить("Порядок",            МетаданныеРегистра.Реквизиты.Порядок.Тип);
	Данные.Колонки.Добавить("ДанныеРасшифровки",  МетаданныеРегистра.Ресурсы.ДанныеРасшифровки.Тип);
	Данные.Колонки.Добавить("Представление",      МетаданныеРегистра.Ресурсы.Представление.Тип);
	Данные.Колонки.Добавить("Валюта",             МетаданныеРегистра.Ресурсы.Валюта.Тип);
	Данные.Колонки.Добавить("СуммаВВалюте",       МетаданныеРегистра.Ресурсы.СуммаВВалюте.Тип);
	Данные.Колонки.Добавить("Сумма",              МетаданныеРегистра.Ресурсы.Сумма.Тип);
	Данные.Колонки.Добавить("СуммаПрошлыйПериод", МетаданныеРегистра.Ресурсы.Сумма.Тип);
	Данные.Колонки.Добавить("Отклонение",         МетаданныеРегистра.Ресурсы.Сумма.Тип);
	
	// Колонку РазделМонитора следует индексировать после заполнения коллекции
	
	Возврат Данные;
	
КонецФункции

Функция ЗапросКДаннымРазделаМонитора(ПолучатьПрошлыйПериод, ОтбиратьПоОрганизации, ПолучатьДанныеПодразделов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеМонитораРуководителя.РазделМонитора,
	|	ДанныеМонитораРуководителя.ПодразделМонитора,
	|	ДанныеМонитораРуководителя.Сумма / &ВариантОкругления КАК Сумма,
	|	ДанныеМонитораРуководителя.ДанныеРасшифровки,
	|	ДанныеМонитораРуководителя.Валюта,
	|	ДанныеМонитораРуководителя.СуммаВВалюте,
	|	ДанныеМонитораРуководителя.Порядок КАК Порядок,
	|	ДанныеМонитораРуководителя.Представление,
	|	ДанныеМонитораРуководителя.СуммаПрошлыйПериод / &ВариантОкругления КАК СуммаПрошлыйПериод,
	|	ВЫБОР
	|		КОГДА ДанныеМонитораРуководителя.СуммаПрошлыйПериод = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ДанныеМонитораРуководителя.Сумма / ДанныеМонитораРуководителя.СуммаПрошлыйПериод - 1) * 100
	|	КОНЕЦ КАК Отклонение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеМонитораРуководителя.РазделМонитора КАК РазделМонитора,
	|		ДанныеМонитораРуководителя.ПодразделМонитора КАК ПодразделМонитора,
	|		СУММА(ВЫБОР
	|				КОГДА ДанныеМонитораРуководителя.ПрошлыйПериод
	|					ТОГДА 0
	|				ИНАЧЕ ДанныеМонитораРуководителя.Сумма
	|			КОНЕЦ) КАК Сумма,
	|		ДанныеМонитораРуководителя.ДанныеРасшифровки КАК ДанныеРасшифровки,
	|		ДанныеМонитораРуководителя.Валюта КАК Валюта,
	|		СУММА(ДанныеМонитораРуководителя.СуммаВВалюте) КАК СуммаВВалюте,
	|		ДанныеМонитораРуководителя.Порядок КАК Порядок,
	|		ДанныеМонитораРуководителя.Представление КАК Представление,
	|		СУММА(ВЫБОР
	|				КОГДА ДанныеМонитораРуководителя.ПрошлыйПериод
	|					ТОГДА ДанныеМонитораРуководителя.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаПрошлыйПериод
	|	ИЗ
	|		РегистрСведений.ДанныеМонитораРуководителя КАК ДанныеМонитораРуководителя
	|	ГДЕ
	|		&Условие
	|		И ДанныеМонитораРуководителя.РазделМонитора В(&РазделыМонитора)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеМонитораРуководителя.РазделМонитора,
	|		ДанныеМонитораРуководителя.ПодразделМонитора,
	|		ДанныеМонитораРуководителя.ДанныеРасшифровки,
	|		ДанныеМонитораРуководителя.Валюта,
	|		ДанныеМонитораРуководителя.Представление,
	|		ДанныеМонитораРуководителя.Порядок) КАК ДанныеМонитораРуководителя
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделМонитора,
	|	ПодразделМонитора,
	|	Порядок,
	|	Сумма УБЫВ";
	
	Условия = Новый Массив;
	Если Не ПолучатьПрошлыйПериод Тогда
		Условия.Добавить("ДанныеМонитораРуководителя.ПрошлыйПериод = Ложь");
	КонецЕсли;
	Если ОтбиратьПоОрганизации Тогда
		Условия.Добавить("ДанныеМонитораРуководителя.Организация = &Организация");
	КонецЕсли;
	Если НЕ ПолучатьДанныеПодразделов Тогда
		Условия.Добавить("ДанныеМонитораРуководителя.ПодразделМонитора = ЗНАЧЕНИЕ(Перечисление.ПодразделыМонитораРуководителя.ПустаяСсылка)");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Условия) Тогда
		ТекстУсловия = "Истина";
	Иначе
		ТекстУсловия = СтрСоединить(Условия, Символы.ПС + Символы.Таб + Символы.Таб + "И ");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", ТекстУсловия);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обновляет данные регистра сведений "ДанныеМонитораРуководителя"
// Параметры:
//   Параметры - Структура - Структура с параметрами
//		*Организация - СправочникСсылка.Организации - организация по которой нужно обновить ланные монитора
//									Если не заполнено данные будут обновлены по всем доступным организациям
//	УчитыватьАктуальностьДанных - булево - Истина - перед обновлением проверить что данные неактуальны, Ложь - не проверять
Процедура ОбновитьДанныеМонитора(Организация, УчитыватьАктуальностьДанных, РазделыМонитора, ПолучатьПрошлыйПериод)
	
	Дата = ТекущаяДатаСеанса();
	
	ИнтервалОбновления = 0;
	Если УчитыватьАктуальностьДанных Тогда
		ИнтервалОбновления = 600;
	КонецЕсли;
	
	// Если организация не заполнена то данные нужно обновить по всем
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
		
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			РегистрыСведений.ДанныеМонитораРуководителя.ОбновитьДанныеМонитора(Организация, Дата, ИнтервалОбновления, РазделыМонитора, ПолучатьПрошлыйПериод);
		КонецЕсли;
	Иначе
		ОбновитьДанныеМонитораПоВсемОрганизациям(Дата, ИнтервалОбновления, РазделыМонитора, ПолучатьПрошлыйПериод);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные регистра сведений "ДанныеМонитораРуководителя" по всем организациям
// Параметры:
//  Дата - Дата - Дата на которую нужно получить данные для записи в регистр
//	ИнтервалОбновления - Число - Период в секундах в течении которого данные считаются актуальными
Процедура ОбновитьДанныеМонитораПоВсемОрганизациям(Дата, ИнтервалОбновления = 0, РазделыМонитора = Неопределено, ПолучатьПрошлыйПериод = Ложь)
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		
		РегистрыСведений.ДанныеМонитораРуководителя.ОбновитьДанныеМонитора(Организация, Дата, ИнтервалОбновления, РазделыМонитора, ПолучатьПрошлыйПериод);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИндексКартинкиОтклонения(Отклонение) Экспорт
	
	Если Отклонение = 0 Тогда
		ИндексКартинки = 0;
	ИначеЕсли Отклонение < 0 Тогда
		ИндексКартинки = 1;
	ИначеЕсли Отклонение > 0 Тогда
		ИндексКартинки = 2;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

#КонецОбласти

#Область ИнформационнаяПанель

Функция ДанныеОстаткиДенежныхСредств(Параметры) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Касса", 0);
	Данные.Вставить("Банк",  0);
	Данные.Вставить("Итого", 0);
	Данные.Вставить("ВалютныеОстатки", Неопределено);
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	ДанныеРазделовМонитора = ПолучитьДанныеРазделовМонитора(Параметры.Организация, РазделыМонитора, Параметры.ВариантОкругления);
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств);
	
	// Касса
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокКассыВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("Касса", НайденныеСтроки[0].Сумма);
	КонецЕсли;
	
	// Банк
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокРублевыхСчетовВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("Банк", НайденныеСтроки[0].Сумма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") Тогда
		// Валютные остатки
		Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокВалютныхСчетовВМониторе());
		ВалютныеОстатки = ДанныеРазделовМонитора.Скопировать(Отбор, "Сумма, СуммаВВалюте, ДанныеРасшифровки");
		ВалютныеОстатки.Колонки.ДанныеРасшифровки.Имя = "Валюта";
		Данные.Вставить("ВалютныеОстатки", ВалютныеОстатки);
	КонецЕсли;
	
	// Итого
	Отбор.Вставить("Порядок", Отчеты.ОстаткиДенежныхСредств.ПорядокИтоговВМониторе());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("Итого", НайденныеСтроки[0].Сумма);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеПокупатели(Параметры) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Задолженность", 0);
	Данные.Вставить("ЗадолженностьОтклонение", 0);
	Данные.Вставить("ПросроченнаяЗадолженность", 0);
	Данные.Вставить("ПросроченнаяЗадолженностьОтклонение", 0);
	Данные.Вставить("НеоплаченныеСчета", 0);
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	
	Если Не ПравоДоступа("Чтение", Метаданные.Константы.СрокОплатыПокупателей) Тогда
		ЗаданСрокОплатыПокупателей = Ложь;
	Иначе
		ЗаданСрокОплатыПокупателей = (Константы.СрокОплатыПокупателей.Получить() > 0);
	КонецЕсли;
	
	Если ЗаданСрокОплатыПокупателей Тогда
		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
	КонецЕсли;
	
	ДанныеРазделовМонитора = ПолучитьДанныеРазделовМонитора(
		Параметры.Организация, РазделыМонитора, Параметры.ВариантОкругления, Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	// Задолженность
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей);
	Отбор.Вставить("Порядок",        Отчеты.ЗадолженностьПокупателей.ПорядокИтоговВМониторе());
	
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("Задолженность",           НайденныеСтроки[0].Сумма);
		Данные.Вставить("ЗадолженностьОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	Если ЗаданСрокОплатыПокупателей Тогда
		
		// Просроченная задолженность
		Отбор = Новый Структура;
		Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей);
		Отбор.Вставить("Порядок",        Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПорядокИтоговВМониторе());
		
		НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Данные.Вставить("ПросроченнаяЗадолженность",           НайденныеСтроки[0].Сумма);
			Данные.Вставить("ПросроченнаяЗадолженностьОтклонение", НайденныеСтроки[0].Отклонение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Неоплаченные счета
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям);
	Отбор.Вставить("Порядок",        Отчеты.АнализНеоплаченныхСчетовПокупателям.ПорядокИтоговВМониторе());
	
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("НеоплаченныеСчета", НайденныеСтроки[0].Сумма);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеПоставщики(Параметры) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Задолженность", 0);
	Данные.Вставить("ЗадолженностьОтклонение", 0);
	Данные.Вставить("ПросроченнаяЗадолженность", 0);
	Данные.Вставить("ПросроченнаяЗадолженностьОтклонение", 0);
	Данные.Вставить("НеоплаченныеСчета", 0);
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	
	ЗаданСрокОплатыПоставщикам = (Константы.СрокОплатыПоставщикам.Получить() > 0);
	Если ЗаданСрокОплатыПоставщикам Тогда
		РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
	КонецЕсли;
	
	ДанныеРазделовМонитора = ПолучитьДанныеРазделовМонитора(
		Параметры.Организация, РазделыМонитора, Параметры.ВариантОкругления, Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	// Задолженность
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам);
	Отбор.Вставить("Порядок",        Отчеты.ЗадолженностьПоставщикам.ПорядокИтоговВМониторе());
	
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("Задолженность",           НайденныеСтроки[0].Сумма);
		Данные.Вставить("ЗадолженностьОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	Если ЗаданСрокОплатыПоставщикам Тогда
		
		// Просроченная задолженность
		Отбор = Новый Структура;
		Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам);
		Отбор.Вставить("Порядок",        Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПорядокИтоговВМониторе());
		
		НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Данные.Вставить("ПросроченнаяЗадолженность",           НайденныеСтроки[0].Сумма);
			Данные.Вставить("ПросроченнаяЗадолженностьОтклонение", НайденныеСтроки[0].Отклонение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Неоплаченные счета
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПоставщиков);
	Отбор.Вставить("Порядок",        Отчеты.АнализНеоплаченныхСчетовПоставщиков.ПорядокИтоговВМониторе());
	
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("НеоплаченныеСчета", НайденныеСтроки[0].Сумма);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеПродажи(Параметры) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ТекущийМесяц", 0);
	Данные.Вставить("ТекущийМесяцОтклонение", 0);
	Данные.Вставить("ТекущийМесяцСНачалаГода", 0);
	Данные.Вставить("ТекущийМесяцСНачалаГодаОтклонение", 0);
	Данные.Вставить("ПрошлыйМесяц", 0);
	Данные.Вставить("ПрошлыйМесяцОтклонение", 0);
	Данные.Вставить("ПрошлыйМесяцСНачалаГода", 0);
	Данные.Вставить("ПрошлыйМесяцСНачалаГодаОтклонение", 0);
	
	РазделыМонитора = Новый Массив;
	РазделыМонитора.Добавить(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	
	ДанныеРазделовМонитора = ПолучитьДанныеРазделовМонитора(
		Параметры.Организация, РазделыМонитора, Параметры.ВариантОкругления, Параметры.ПоказыватьСравнениеСПрошлымГодом);
	
	Если ДанныеРазделовМонитора = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеРазделовМонитора.Индексы.Добавить("РазделМонитора, Порядок");
	
	Отбор = Новый Структура;
	Отбор.Вставить("РазделМонитора", Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам);
	Отбор.Вставить("Порядок", 0);
	
	// Текущий месяц
	Отбор.Порядок = Отчеты.Продажи.ПорядокТекущегоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ТекущийМесяц", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ТекущийМесяцОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// С начала года
	Отбор.Вставить("Порядок", Отчеты.Продажи.ПорядокТекущегоМесяцаСНачалаГода());
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ТекущийМесяцСНачалаГода", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ТекущийМесяцСНачалаГодаОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// Прошлый месяц
	Отбор.Порядок = Отчеты.Продажи.ПорядокПрошлогоМесяца();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ПрошлыйМесяц", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ПрошлыйМесяцОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	// С начала года по конец прошлого месяца
	Отбор.Порядок = Отчеты.Продажи.ПорядокПрошлогоМесяцаСНачалаГода();
	НайденныеСтроки = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Данные.Вставить("ПрошлыйМесяцСНачалаГода", НайденныеСтроки[0].Сумма);
		Данные.Вставить("ПрошлыйМесяцСНачалаГодаОтклонение", НайденныеСтроки[0].Отклонение);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти
