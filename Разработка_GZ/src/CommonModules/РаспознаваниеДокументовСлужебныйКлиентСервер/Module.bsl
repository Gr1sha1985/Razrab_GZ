#Область СлужебныйПрограммныйИнтерфейс

#Область МодельРаспознанногоДокумента

// Описание реквизита модели распознанного документа.
// Если не найден - при указании СоздаватьЕслиНеНайдено = Истина будет добавлен с пустым значением.
//
Функция РеквизитДокумента(Объект, ИмяРеквизита, СоздаватьЕслиНеНайдено = Истина) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Если Не СоздаватьЕслиНеНайдено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Объект.РеквизитыДокумента.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Значение реквизита модели распознанного документа.
// Если не найден - не будет добавлен и будет возвращено значение по умолчанию.
//
Функция ЗначениеРеквизитаДокумента(Объект, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Реквизит = РеквизитДокумента(Объект, ИмяРеквизита, Ложь);
	
	Если Реквизит = Неопределено Или Не ЗначениеЗаполнено(Реквизит.Значение) Тогда 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Реквизит.Значение;
	
КонецФункции

// Устанавливает значение реквизита модели распознанного документа.
// Если не найден - будет добавлен с указанным значением.
//
Процедура УстановитьЗначениеРеквизитаДокумента(Объект, ИмяРеквизита, Значение) Экспорт
	
	Реквизит = РеквизитДокумента(Объект, ИмяРеквизита);
	Реквизит.Значение = Значение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТабличныхЧастей

Процедура ПриИзмененииКолонки(Объект, СтрокаТаблицы, ИмяРеквизита, ВыбранноеЗначение) Экспорт
	
	СуммаВключаетНДС = ЗначениеРеквизитаДокумента(Объект, "СуммаВключаетНДС", Ложь);
	
	Если ИмяРеквизита = "Номенклатура" Тогда
		ПриИзмененииНоменклатура(СтрокаТаблицы, ВыбранноеЗначение)
	ИначеЕсли ИмяРеквизита = "СуммаНДС" Тогда
		ПриИзмененииСуммаНДС(СтрокаТаблицы, СуммаВключаетНДС);
	ИначеЕсли ИмяРеквизита = "Количество" ИЛИ ИмяРеквизита = "Цена" Тогда
		Если ДоступноИзменитьЗначение(СтрокаТаблицы, "Сумма") Тогда
			ЗначениеПустогоКоличества = 1;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
			ПриИзмененииСумма(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		Если ДоступноИзменитьЗначение(СтрокаТаблицы, "Цена") Тогда
			ЗначениеПустогоКоличества = 1;
			СтрокаТаблицы.Цена = Окр(СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество), 2);
			ПриИзмененииСумма(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "СтавкаНДС" Тогда
		ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС);
	ИначеЕсли ИмяРеквизита = "ПроцентСкидки" Тогда
		Если ДоступноИзменитьЗначение(СтрокаТаблицы, "СуммаСкидки") Тогда
			СтрокаТаблицы.СуммаСкидки = СтрокаТаблицы.Сумма * СтрокаТаблицы.ПроцентСкидки / 100;
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "СуммаСкидки" Тогда
		Если ДоступноИзменитьЗначение(СтрокаТаблицы, "ПроцентСкидки") Тогда
			СтрокаТаблицы.ПроцентСкидки =
				?(СтрокаТаблицы.Сумма = 0,
					0,
					СтрокаТаблицы.СуммаСкидки / СтрокаТаблицы.Сумма * 100
				);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатура(СтрокаТаблицы, ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтрокаТаблицы.Услуга = РаспознаваниеДокументовСлужебныйВызовСервера.ЭтоНоменклатураУслуга(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСумма(СтрокаТаблицы, СуммаВключаетНДС) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СуммаНДС")
		И ДоступноИзменитьЗначение(СтрокаТаблицы, "СуммаНДС") Тогда
		
		СтрокаТаблицы.СуммаНДС = РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СуммаВключаетНДС,
			ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Всего")
		И ДоступноИзменитьЗначение(СтрокаТаблицы, "Всего") Тогда
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт
	
	Если ДоступноИзменитьЗначение(СтрокаТаблицы, "СуммаНДС") Тогда 
		СтрокаТаблицы.СуммаНДС = РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СуммаВключаетНДС,
			ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Всего")
		И ДоступноИзменитьЗначение(СтрокаТаблицы, "Всего") Тогда
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСуммаНДС(СтрокаТаблицы, СуммаВключаетНДС) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Всего")
		И ДоступноИзменитьЗначение(СтрокаТаблицы, "Всего") Тогда
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступноИзменитьЗначение(СтрокаТаблицы, ИмяРеквизита)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, ИмяРеквизита + "ЗаполненоВручную") Тогда
		Возврат Не СтрокаТаблицы[ИмяРеквизита + "ЗаполненоВручную"];
	КонецЕсли;
	
	Возврат Истина; // Если нет колонки признака заполнения вручную, то менятьиможно всегда.
	
КонецФункции

#КонецОбласти

#Область УчетНДС

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт

	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат Окр(СуммаНДС, 2);

КонецФункции // РассчитатьСуммуНДС()

Функция ПолучитьСтавкуНДС(СтавкаНДС) 
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
#Иначе
	СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
#КонецЕсли
	
	Возврат СтавкаНДСЧислом;
	
КонецФункции

#КонецОбласти

#Область СвойстваЯчеекТаблицы

Функция КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ) Экспорт
	
	Возврат ИмяРеквизита + "_" + Формат(НомерСтрокиТЧ, "ЧГ=")
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроблемныеРеквизиты

Процедура ПересчитатьПроблемныеРеквизитыТаблицыДокумента(Форма, СтрокаТаблицы) Экспорт
	
	ДанныеШапки = Новый Структура; // Необходимые для проверки таблицы
	ДанныеШапки.Вставить("ИтогоСумма", 0);
	ДанныеШапки.Вставить("ИтогоСуммаНДС", 0);
	ДанныеШапки.Вставить("ИтогоВсего", 0);
	ДанныеШапки.Вставить("СуммаВключаетНДС", Ложь);
	
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Форма);
	
	ДанныеШапки.СуммаВключаетНДС = ЗначениеРеквизитаДокумента(Форма.Объект, "СуммаВключаетНДС", Ложь);
	
	ПроблемныеРеквизиты = Новый Соответствие;
	
	// Заполнение для чисел в таблице
	ДобавитьОшибкиКоличествоЦенаСумма(ПроблемныеРеквизиты, ДанныеШапки, Форма.ТаблицаДокумента, СтрокаТаблицы);
	ДобавитьОшибкиСуммаСуммаНДСВсего(ПроблемныеРеквизиты, ДанныеШапки, Форма.ТаблицаДокумента, СтрокаТаблицы);
	
	// Проверка итогов таблицы
	ТекстПодсказки = НСтр("ru = 'Значение итога в подвале не совпадает с суммой по колонке'");
	
	Если ЕстьОшибкаВЗначенииИтогаПоТаблице(Форма.ТаблицаДокумента, "Сумма", ДанныеШапки.ИтогоСумма) Тогда
		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "ИтогоСумма", 0, "", ТекстПодсказки);
	КонецЕсли;
	
	Если ЕстьОшибкаВЗначенииИтогаПоТаблице(Форма.ТаблицаДокумента, "СуммаНДС", ДанныеШапки.ИтогоСуммаНДС) Тогда
		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "ИтогоСуммаНДС", 0, "", ТекстПодсказки);
	КонецЕсли;
	
	Если ЕстьОшибкаВЗначенииИтогаПоТаблице(Форма.ТаблицаДокумента, "Всего", ДанныеШапки.ИтогоВсего) Тогда
		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "ИтогоВсего", 0, "", ТекстПодсказки);
	КонецЕсли;
	
	// Удалим решенные проблемные элементы по строке
	ИндексПроблемы = Форма.ПроблемныеЭлементы.Количество();
	Пока ИндексПроблемы > 0 Цикл
		ИндексПроблемы = ИндексПроблемы - 1;
		СтрокаПроблемы = Форма.ПроблемныеЭлементы[ИндексПроблемы];
		
		УдалитьПроблему = Ложь;
		
		Если СтрокаПроблемы.ИмяРеквизита = "ИтогоСумма"
			Или СтрокаПроблемы.ИмяРеквизита = "ИтогоСуммаНДС"
			Или СтрокаПроблемы.ИмяРеквизита = "ИтогоВсего" Тогда
			
			// Удаляем проблему по проверке итогов
			УдалитьПроблему = Истина;
		КонецЕсли;
		
		Если СтрокаПроблемы.НомерСтроки = СтрокаТаблицы.НомерСтроки Тогда
			
			// Проблема относится к редактируемой строке, остальные пропускаем.
			УдалитьПроблему = Истина;
			
			Если СтрокаПроблемы.ИмяРеквизита = "Номенклатура"
				И Не СтрокаТаблицы.НоменклатураЗаполненоВручную Тогда
				// Проблема не решена, поле не заполнено.
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УдалитьПроблему Тогда
			
			Ключ = СтрокаПроблемы.ИмяРеквизита + "_" + Формат(СтрокаПроблемы.НомерСтроки, "ЧГ=") + "_" + СтрокаПроблемы.ГруппаОшибки;
			
			Если ПроблемныеРеквизиты.Получить(Ключ) = Неопределено Тогда
				// В новой таблице нет старой проблемы
				Если СтрокаПроблемы.НомерСтроки = 0 Тогда
					УстановитьЦветПоляПоУмолчанию(Форма, СтрокаПроблемы.ИмяРеквизита);
				Иначе
					ОтключитьУсловноеОформление(Форма, "ТаблицаДокумента", СтрокаПроблемы);
				КонецЕсли;
				Форма.ПроблемныеЭлементы.Удалить(СтрокаПроблемы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые проблемные элементы
	Для Каждого СтрокаПроблемы Из ПроблемныеРеквизиты Цикл
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки, ГруппаОшибки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПроблемы.Значение);
		
		Если Форма.ПроблемныеЭлементы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			// В старой таблице нет новой проблемы
			Если СтрокаПроблемы.Значение.НомерСтроки = 0 Тогда
				УстановитьЦветИДобавитьВПроблемные(Форма, СтрокаПроблемы.Значение);
			Иначе
				ДобавитьВУсловноеОформлениеИВПроблемные(Форма, "ТаблицаДокумента", СтрокаПроблемы.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПроблемыНаФорме = Новый Соответствие; // Только те реквизиты, что видит пользователь и без учета ГруппаОшибки
	Для Каждого Строка Из Форма.ПроблемныеЭлементы Цикл
		ПроблемыНаФорме.Вставить(Строка.ИмяРеквизита + "_" + Формат(Строка.НомерСтроки, "ЧГ="));
	КонецЦикла;
	
	Форма.ОсталосьОшибок = ПроблемыНаФорме.Количество();
	
КонецПроцедуры

#Область ПроблемныеРеквизитыНаФорме

Процедура ДобавитьВУсловноеОформлениеИВПроблемные(Форма, ИмяТаблицы, СтрокаПроблемы) Экспорт
	
	СтрокиТаблицы = Форма[ИмяТаблицы].НайтиСтроки(Новый Структура("НомерСтроки", СтрокаПроблемы.НомерСтроки));
	Если СтрокиТаблицы.Количество() = 1 Тогда
		СтрокиТаблицы[0][СтрокаПроблемы.ИмяРеквизита + "ТекстОшибки"] = СтрокаПроблемы.ТекстПодсказки;
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = Форма.ПроблемныеЭлементы.Добавить();
	СтрокаОшибки.ИмяРеквизита = СтрокаПроблемы.ИмяРеквизита;
	СтрокаОшибки.НомерСтроки = СтрокаПроблемы.НомерСтроки;
	СтрокаОшибки.ГруппаОшибки = СтрокаПроблемы.ГруппаОшибки;
	СтрокаОшибки.ТекстПодсказки = СтрокаПроблемы.ТекстПодсказки;
	
КонецПроцедуры

Процедура ОтключитьУсловноеОформление(Форма, ИмяТаблицы, СтрокаПроблемы) Экспорт
	
	СтрокиТаблицы = Форма[ИмяТаблицы].НайтиСтроки(Новый Структура("НомерСтроки", СтрокаПроблемы.НомерСтроки));
	Если СтрокиТаблицы.Количество() = 1 Тогда
		СтрокиТаблицы[0][СтрокаПроблемы.ИмяРеквизита + "ТекстОшибки"] = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦветИДобавитьВПроблемные(Форма, СтрокаПроблемы) Экспорт
	
	Если СтрокаПроблемы.ИмяРеквизита = "ИтогоСумма"
		Или СтрокаПроблемы.ИмяРеквизита = "ИтогоСуммаНДС"
		Или СтрокаПроблемы.ИмяРеквизита = "ИтогоВсего" Тогда
		
		ИзменяемыйЭлемент = Форма.Элементы[СтрокаПроблемы.ИмяРеквизита + "Красный"];
		ИзменяемыйЭлемент.Подсказка = СтрокаПроблемы.ТекстПодсказки;
		ИзменяемыйЭлемент.Родитель.Родитель.ТекущаяСтраница = ИзменяемыйЭлемент.Родитель;
	Иначе
		ИзменяемыйЭлемент = Форма.Элементы[СтрокаПроблемы.ИмяРеквизита];
		ИзменяемыйЭлемент.Родитель.ЦветФона = Новый Цвет(251, 212, 212);
		ИзменяемыйЭлемент.Подсказка = СтрокаПроблемы.ТекстПодсказки;
	КонецЕсли;
	
	СтрокаОшибки = Форма.ПроблемныеЭлементы.Добавить();
	СтрокаОшибки.ИмяРеквизита = СтрокаПроблемы.ИмяРеквизита;
	СтрокаОшибки.ТекстПодсказки = СтрокаПроблемы.ТекстПодсказки;
	
КонецПроцедуры

Процедура УстановитьЦветПоляПоУмолчанию(Форма, ИмяЭлемента) Экспорт
	
	Если ИмяЭлемента = "ИтогоСумма"
		Или ИмяЭлемента = "ИтогоСуммаНДС"
		Или ИмяЭлемента = "ИтогоВсего" Тогда
		
		СтраницаЭлемента = Форма.Элементы[ИмяЭлемента + "Белый"].Родитель;
		СтраницаЭлемента.Родитель.ТекущаяСтраница = СтраницаЭлемента;
	Иначе
		ИзменяемыйЭлемент = Форма.Элементы[ИмяЭлемента];
		ИзменяемыйЭлемент.Родитель.ЦветФона = Новый Цвет();
		ИзменяемыйЭлемент.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьОшибкиКоличествоЦенаСумма(ПроблемныеРеквизиты, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы)
	
	Если СтрокаТаблицы.Количество = 0
		Или (Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) <> СтрокаТаблицы.Сумма
		И Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество, 2) <> СтрокаТаблицы.Цена) Тогда
		
		ТекстПодсказки = НСтр("ru = 'Количество * Цена не совпадает с Сумма'");
		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Количество", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Цена", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "Сумма", ДанныеШапки.ИтогоСумма) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Сумма", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкиСуммаСуммаНДСВсего(ПроблемныеРеквизиты, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы)
	
	Если НЕ ЗначенияСуммаСуммаНДСВсегоСовпадают(СтрокаТаблицы, ДанныеШапки.СуммаВключаетНДС) Тогда
		ТекстПодсказки = НСтр("ru = 'Сумма + Сумма НДС не совпадает с Всего'");
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "Сумма", ДанныеШапки.ИтогоСумма) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Сумма", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "СуммаНДС", ДанныеШапки.ИтогоСуммаНДС) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "СуммаНДС", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "Всего", ДанныеШапки.ИтогоВсего) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Всего", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, ИмяРеквизита, НомерСтроки = 0, ГруппаОшибки = "", ТекстПодсказки)
	
	Строка = Новый Структура("ИмяРеквизита, НомерСтроки, ГруппаОшибки, ТекстПодсказки");
	Строка.ИмяРеквизита = ИмяРеквизита;
	Строка.НомерСтроки = НомерСтроки;
	Строка.ГруппаОшибки = ГруппаОшибки;
	Строка.ТекстПодсказки = ТекстПодсказки;
	
	Ключ = ИмяРеквизита + "_" + Формат(НомерСтроки, "ЧГ=") + "_" + ГруппаОшибки;
	
	ПроблемныеРеквизиты.Вставить(Ключ, Строка);
	
КонецПроцедуры

Функция СуммаИтогоПоКолонкеСовпадает(КоллекцияЗаписей, ИмяКолонкиСравнения, ЗначениеДляСравнения)
	
	Возврат КоллекцияЗаписей.Итог(ИмяКолонкиСравнения) = ЗначениеДляСравнения;
	
КонецФункции

Функция ЗначенияСуммаСуммаНДСВсегоСовпадают(ПроверяемаяЗапись, СуммаВключаетНДС)
	
	Если СуммаВключаетНДС Тогда
		СтавкаНДС = ПолучитьСтавкуНДС(ПроверяемаяЗапись.СтавкаНДС);
		СуммаНДС = РассчитатьСуммуНДС(ПроверяемаяЗапись.Сумма, Истина, СтавкаНДС);
		НДСОкругленный = Окр(СуммаНДС, 2);
		
		Возврат ПроверяемаяЗапись.Сумма = ПроверяемаяЗапись.Всего И ПроверяемаяЗапись.СуммаНДС = НДСОкругленный;
	Иначе
		Возврат ПроверяемаяЗапись.Сумма + ПроверяемаяЗапись.СуммаНДС = ПроверяемаяЗапись.Всего;
	КонецЕсли;
	
КонецФункции

Функция ЕстьОшибкаВЗначенииИтогаПоТаблице(ТаблицаДокумента, ИмяКолонки, ЗначениеИтого)
	
	// Предназначена для проверки полей (ИмяКолонки =) ИтогоСумма, ИтогоСуммаНДС, ИтогоВсего
	Если ЗначениеИтого = 0 Тогда
		Если ИмяКолонки = "СуммаНДС" Тогда
			Если ТаблицаДокумента.Итог("Сумма") = 0
				Или ТаблицаДокумента.Итог("Всего") = 0 Тогда
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (ТаблицаДокумента.Итог(ИмяКолонки) <> ЗначениеИтого);
	
КонецФункции


#КонецОбласти

#Область НечеткийПоиск

Функция ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, Варианты = Неопределено, КартинкаСоздание = 1) Экспорт 
	
	СписокДляВыбора = Новый СписокЗначений;
	
	Если КартинкаСоздание = 1 Тогда
		ТекстРаспознано = НСтр("ru = 'Создать: '");
		Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
	Иначе
		ТекстРаспознано = НСтр("ru = 'Распознано: '");
		Если КартинкаСоздание = 2 Тогда 
			Картинка = БиблиотекаКартинок.Заменить;
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ТекстРаспознано = Новый ФорматированнаяСтрока(ТекстРаспознано, Новый Шрифт(,,,Истина));
	СписокДляВыбора.Добавить(РаспознанныйТекст, Новый ФорматированнаяСтрока(
		ТекстРаспознано, """", РаспознанныйТекст, """"), Ложь, Картинка);
	
	Если Варианты = Неопределено Тогда
		Возврат СписокДляВыбора;
	КонецЕсли;
	
	Для Каждого Вариант Из Варианты Цикл
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Значение", Вариант.Значение);
		ПараметрыВыбора.Вставить("Уверенность", Вариант.Уверенность);
		
		ПредставлениеЗначения = Строка(Вариант.Значение);
		
		ЕстьДополнительноеЗначение = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Вариант, "ДополнительноеЗначение");
		
		Если ЕстьДополнительноеЗначение
			И ЗначениеЗаполнено(Вариант.ДополнительноеЗначение) Тогда
			
			ПредставлениеЗначения = ПредставлениеЗначения + " (" + Строка(Вариант.ДополнительноеЗначение) + ")";
		КонецЕсли;
		
		Уверенность = Новый ФорматированнаяСтрока("(" + НСтр("ru = 'увер. '") + Вариант.Уверенность + "%)", Новый Шрифт(,,,Истина));
		ПредставлениеЗначения = Новый ФорматированнаяСтрока(ПредставлениеЗначения, " ", Уверенность);
		СписокДляВыбора.Добавить(ПараметрыВыбора, ПредставлениеЗначения);
	КонецЦикла;
	
	Возврат СписокДляВыбора;
	
КонецФункции

#КонецОбласти

#Область РаспознанныйДокумент

Функция ПолучитьНаборКоординат(Данные = Неопределено) Экспорт
	
	КоординатыКартинки = Новый Массив;
	
	Если НЕ Данные = Неопределено Тогда
		КоординатыКартинки.Добавить(Данные.КоординатаX0);
		КоординатыКартинки.Добавить(Данные.КоординатаY0);
		КоординатыКартинки.Добавить(Данные.КоординатаX1);
		КоординатыКартинки.Добавить(Данные.КоординатаY1);
	Иначе
		КоординатыКартинки.Добавить(0);
		КоординатыКартинки.Добавить(0);
		КоординатыКартинки.Добавить(0);
		КоординатыКартинки.Добавить(0);
	КонецЕсли;
	
	Возврат КоординатыКартинки;
	
КонецФункции

#КонецОбласти

#Область Комплекты

Функция СтруктураСозданныхДокументов(ТипКомплекта) Экспорт
	
	СозданныеДокументы = Новый Структура;
	СозданныеДокументы.Вставить("Поступление", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("Реализация", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("СчетФактураПолученный", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("СчетФактураВыданный", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	
	Возврат СозданныеДокументы;
	
КонецФункции

Функция ТипДокументаИВидОперации(Знач ИмяКоманды) Экспорт
	
	Результат = Новый Структура("ТипДокумента, ВидОперации");
	
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "Форма", "");
	Если ИмяКоманды = "СоздатьРеализацияПродажаКомиссия" Тогда
		Результат.ТипДокумента = "РеализацияТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	ИначеЕсли ИмяКоманды = "СоздатьРеализацияТовары" Тогда
		Результат.ТипДокумента = "РеализацияТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары");
	ИначеЕсли ИмяКоманды = "СоздатьРеализацияУслуги" Тогда
		Результат.ТипДокумента = "РеализацияТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги");
		
	ИначеЕсли ИмяКоманды = "СоздатьПоступлениеПокупкаКомиссия" Тогда
		Результат.ТипДокумента = "ПоступлениеТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
	ИначеЕсли ИмяКоманды = "СоздатьПоступлениеТовары" Тогда
		Результат.ТипДокумента = "ПоступлениеТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары");
	ИначеЕсли ИмяКоманды = "СоздатьПоступлениеУслуги" Тогда
		Результат.ТипДокумента = "ПоступлениеТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги");
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтрезатьВремяУДатыСтрокой(Знач ДатаСтрокой) Экспорт
	
	Возврат СокрЛП(Лев(ДатаСтрокой, СтрДлина(ДатаСтрокой) - 8));
	
КонецФункции

Процедура ОбработатьДокументыКомплекта(Форма, ПараметрыСоздания) Экспорт
	
	ДокументСсылка = ПараметрыСоздания.Ссылка;
	ВидОперации = ПараметрыСоздания.ВидОперации;
	ТипДокументаСтрокой = ПараметрыСоздания.ТипДокументаСтрокой;
	
	ПараметрыЗаполнения = РаспознаваниеДокументовСлужебныйВызовСервера.ПолучитьПараметрыОткрытияФормы(ДокументСсылка, ВидОперации, ТипДокументаСтрокой);
	ПараметрыСоздания.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	#Если Не Сервер И Не ВнешнееСоединение Тогда
	Если Не ЗначениеЗаполнено(ПараметрыСоздания.СозданныйДокументТорг12Акт) И ПараметрыСоздания.СоздатьДокументПоступлениеРеализация
		Или Не ЗначениеЗаполнено(ПараметрыСоздания.СозданныйДокументСФ) И ПараметрыСоздания.СоздатьДокументСчетФактура Тогда
		
		// Запрет редактирования
		ДатаДокумента = ПараметрыЗаполнения.ДатаВходящегоДокумента;
		РедактированиеЗапрещено = РаспознаваниеДокументовСлужебныйВызовСервера.ЗапрещеноСозданиеДокументаВЗакрытомПериоде(ТипДокументаСтрокой, ДатаДокумента);
		
		ДополнительныеПараметры = Новый Структура("Форма, ПараметрыСоздания", Форма, ПараметрыСоздания);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаСменыДаты", ЭтотОбъект, ДополнительныеПараметры);
		
		// сделать проверку на запрет редактирования по счету фактуре?
		Если РедактированиеЗапрещено Тогда
			Если ПараметрыСоздания.ДанныеОбработки <> Неопределено Тогда
				ПараметрыЗаполнения = ПараметрыСоздания.ПараметрыЗаполнения;
				ПараметрыЗаполнения.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Дата документа находится в закрытом периоде.
				|Изменить дату документа на текущую?'");
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	СоздатьДокументыИзКомплекта(Форма, ПараметрыСоздания);
	
КонецПроцедуры

Процедура ЗавершениеВопросаСменыДаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Если Не Сервер И Не ВнешнееСоединение Тогда
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыСоздания.ПараметрыЗаполнения;
	ПараметрыЗаполнения.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	СоздатьДокументыИзКомплекта(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ПараметрыСоздания);
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьДокументыИзКомплекта(Форма, ПараметрыСоздания)
	
	Результат = РаспознаваниеДокументовСлужебныйВызовСервера.СоздатьДокументыИзКомплекта(ПараметрыСоздания);
	СозданныйДокумент = Результат.СоздаваемыйДокумент;
	
	ТекстСоздан = НСтр("ru = 'Создан документ'");
	ТекстПрикреплен = НСтр("ru = 'Скан прикреплен'");
	
	Если СозданныйДокумент = Неопределено Тогда
		Если ПараметрыСоздания.ДанныеОбработки <> Неопределено Тогда
			ПараметрыСоздания.ДанныеОбработки.КомплектовНеУдалосьОбработать = ПараметрыСоздания.ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
			Для Каждого ТекОшибка Из Результат.ОшибкиПроведения Цикл
				ПараметрыСоздания.ДанныеОбработки.ОшибкиПроведения.Вставить(ТекОшибка.Ключ, ТекОшибка.Значение);
			КонецЦикла;
		КонецЕсли;
	Иначе
		#Если Не Сервер И Не ВнешнееСоединение Тогда
		ПараметрыСоздания.Вставить("УдалосьОбработать", Истина);
		ОповеститьОбИзменении(ПараметрыСоздания.Ссылка);
		Оповестить("РаспознанныйДокумент_СтатусОбработан", ПараметрыСоздания.Ссылка, СозданныйДокумент);
		
		Если Не ЗначениеЗаполнено(ПараметрыСоздания.СозданныйДокументТорг12Акт)
			И ПараметрыСоздания.СоздатьДокументПоступлениеРеализация Тогда
			
			ТекстЗаголовка = ТекстСоздан;
		ИначеЕсли Не ПараметрыСоздания.СканПрикрепленТорг12Акт И ПараметрыСоздания.ПрикрепитьСканКПоступлениюРеализации Тогда
			ТекстЗаголовка = ТекстПрикреплен;
		Иначе
			ТекстЗаголовка = "";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстЗаголовка) Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СозданныйДокумент);
			ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, Строка(СозданныйДокумент), , СтатусОповещенияПользователя.Важное);
		КонецЕсли;
		
		
		Если Результат.Свойство("СоздаваемаяСчетФактура") Тогда
			Оповестить("РаспознанныйДокумент_СтатусОбработан", ПараметрыСоздания.РаспознанныйДокументСФ, Результат.СоздаваемаяСчетФактура);
			
			Если Не ЗначениеЗаполнено(ПараметрыСоздания.СозданныйДокументСФ)
				И ПараметрыСоздания.СоздатьДокументСчетФактура Тогда
				
				ТекстЗаголовка = ТекстСоздан;
			ИначеЕсли Не ПараметрыСоздания.СканПрикрепленСФ И ПараметрыСоздания.ПрикрепитьСканКСчетуФактуре Тогда
				ТекстЗаголовка = ТекстПрикреплен;
			Иначе
				ТекстЗаголовка = "";
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстЗаголовка) Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат.СоздаваемаяСчетФактура);
				ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, Строка(Результат.СоздаваемаяСчетФактура), , СтатусОповещенияПользователя.Важное);
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеДанныеОбработкиКомплектов() Экспорт
	
	ДанныеОбработки = Новый Структура("КомплектовВсего, КомплектовНеУдалосьОбработать, НомераСозданныхКомплектов, ОшибкиПроведения, ГрупповаяОбработка, РезультатОбратнойСвязи",
		0, 0, Новый Массив, Новый Соответствие, Ложь, Новый Структура);
	Возврат ДанныеОбработки;
	
КонецФункции

#КонецОбласти

Функция ПолучитьОбратноеСоответствие(СоответствиеИсточник) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

#КонецОбласти