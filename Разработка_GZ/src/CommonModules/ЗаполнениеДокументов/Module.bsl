Функция ПолучитьДанныеОрганизацияПриИзменении(ПараметрыДокумента) Экспорт

	ТекПользователь = Пользователи.ТекущийПользователь();

	Если ПараметрыДокумента.Свойство("Организация") Тогда

		Если ПараметрыДокумента.Свойство("ПодразделениеОрганизации")
		   И ЗначениеЗаполнено(ПараметрыДокумента.Организация) Тогда

			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");

			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.ПодразделениеОрганизации) Тогда
				// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
				Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ПараметрыДокумента.Организация) Тогда
					ПараметрыДокумента.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;
			Иначе
				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПараметрыДокумента.ПодразделениеОрганизации, ПараметрыДокумента.Организация) Тогда
					// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
					Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ПараметрыДокумента.Организация) Тогда
						ПараметрыДокумента.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ПараметрыДокумента.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыДокумента.Свойство("ДоговорКонтрагента")
		   И ЗначениеЗаполнено(ПараметрыДокумента.Организация)
		   И ЗначениеЗаполнено(ПараметрыДокумента.ДоговорКонтрагента)
		   И НЕ ПараметрыДокумента.ДоговорКонтрагента.Организация = ПараметрыДокумента.Организация Тогда
			ПараметрыДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыДокумента;

КонецФункции

Функция ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента, СписокВидовДоговоров = Неопределено,
	                                         СтруктураДополнительныхПараметров = Неопределено) Экспорт

	Если ПараметрыДокумента.Свойство("ДоговорКонтрагента") Тогда
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ПараметрыДокумента.ДоговорКонтрагента,
			ПараметрыДокумента.Контрагент,
			ПараметрыДокумента.Организация,
			СписокВидовДоговоров,
			СтруктураДополнительныхПараметров);
	КонецЕсли;

	Если ПараметрыДокумента.Свойство("Сделка") Тогда
		Если ПараметрыДокумента.Сделка <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ПараметрыДокумента.Вставить("Сделка", Неопределено);
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыДокумента;

КонецФункции

// Процедура выполняет общие действия при изменении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект,СписокВидовДоговоров = Неопределено,СтруктураДополнительныхПараметров = Неопределено,
	                                      НаименованиеРеквизитаДоговора = "", НаименованиеРеквизитаКонтрагента = "") Экспорт

	Если НЕ ЗначениеЗаполнено(НаименованиеРеквизитаКонтрагента) Тогда
	    НаименованиеРеквизитаКонтрагента = "Контрагент";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НаименованиеРеквизитаДоговора) Тогда
	    НаименованиеРеквизитаДоговора = "ДоговорКонтрагента";
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(НаименованиеРеквизитаДоговора, МетаданныеДокумента) Тогда

	 	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект[НаименованиеРеквизитаДоговора],
			ДокументОбъект[НаименованиеРеквизитаКонтрагента],
			ДокументОбъект["Организация"],
			СписокВидовДоговоров,
			СтруктураДополнительныхПараметров);

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сделка", МетаданныеДокумента)
		И НЕ ТипЗнч(ДокументОбъект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		ДокументОбъект.Сделка = Неопределено;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//  ДокументОбъект - объект документ в форме которого произошло событие.
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию.
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, ТекПользователь) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда

			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");

			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации) Тогда

				// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
				Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;

			Иначе // Если ПодразделениеОрганизации заполнено.

				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда

					// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
					Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ДокументОбъект.Организация) Тогда
						ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ДокументОбъект.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация)
		   И ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		   
		   	РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента);
		   
		   	Если РеквизитыДоговора.Организация <> ДокументОбъект.Организация Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Объект документа, курс которого надо получить.
//  ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то курс 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

			// Если есть реквизит КурсДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КурсВзаиморасчетов должен быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
	КонецЕсли;

	Возврат 1;

КонецФункции

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Объект документа, курс которого надо получить.
//  ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутствовать.
			//Тогда возьмем Кратность из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
    КонецЕсли;

	Возврат 1;

КонецФункции

// Функция выполняет проверку совпадения видов деятельности по переданным счетам
//
// Параметры
//  СчетДоходов  - счет доходов.
//  СчетРасходов - счет расходов.
//
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ВидыДеятельностиСовпадают(СчетДоходов, СчетРасходов) Экспорт

	Результат = Истина;
	КэшСчетов = Новый Соответствие;

	Если НЕ ЗначениеЗаполнено(СчетДоходов) ИЛИ НЕ ЗначениеЗаполнено(СчетРасходов) Тогда
		//Один из счетов не заполнен, соответствие не проверяется
	Иначе
		СчетДоходовБУВСтроке = СчетДоходов;
		СчетДоходовБУЕНВД = КэшСчетов[СчетДоходовБУВСтроке];
		Если СчетДоходовБУЕНВД = Неопределено Тогда
			СчетДоходовБУЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходовБУВСтроке);
			КэшСчетов[СчетДоходовБУВСтроке] = СчетДоходовБУЕНВД;
		КонецЕсли;

		СчетРасходовБУВСтроке = СчетРасходов;
		СчетРасходовБУЕНВД = КэшСчетов[СчетРасходовБУВСтроке];
		Если СчетРасходовБУЕНВД = Неопределено Тогда
			СчетРасходовБУЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетРасходовБУВСтроке);
			КэшСчетов[СчетРасходовБУВСтроке] = СчетРасходовБУЕНВД;
		КонецЕсли;

		Если СчетДоходовБУЕНВД <> СчетРасходовБУЕНВД Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВидыДеятельностиСовпадают()

Процедура УдалитьКлючИзСтруктуры(Структура, Ключ)

	Если ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство(Ключ) Тогда
		Структура.Удалить(Ключ);
	КонецЕсли;

КонецПроцедуры

// Для реквизита ПодразделениеОрганизации.
// Как правило, не следует применять для ПодразделениеЗатрат
Функция ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента)
	ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Склад)
		И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Склад, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСклада.ПодразделениеОрганизации;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
		И ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

    Возврат(ПодразделениеОрганизации);

КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - ДокументОбъект - Документ, реквизиты которого необходимо заполнить.
//  ДанныеЗаполнения - Структура ИЛИ Неопределено - Одноименный параметр обработчика ОбработкаЗаполнения документа.
//  ЗаполнятьСчетаУчета - Булево - Признак, что нужно заполнять счета учета.
//
Процедура Заполнить(ДокументОбъект, ДанныеЗаполнения = Неопределено, ЗаполнятьСчетаУчета = Ложь) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьПоСтруктуре(ДокументОбъект, ДанныеЗаполнения, МетаданныеДокумента);
	КонецЕсли;
	
	ЕстьРеквизитОрганизация          = ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация",          МетаданныеДокумента);
	ЕстьРеквизитКонтрагент           = ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент",           МетаданныеДокумента);
	ЕстьРеквизитДоговор              = ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента",   МетаданныеДокумента);
	ЕстьРеквизитВалютаДокумента      = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента",      МетаданныеДокумента);
	ЕстьРеквизитВалютаВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", МетаданныеДокумента);
	ЕстьРеквизитСчетОрганизации      = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации",      МетаданныеДокумента);
	ЕстьРеквизитВидОперации          = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации",          МетаданныеДокумента);
	ЕстьРеквизитЭтоУниверсальныйДокумент = ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", 
		МетаданныеДокумента);
	// Проверяем корректность связанных реквизитов, заполненных из ДанныхЗаполнения документа:
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", МетаданныеДокумента) Тогда
		ДокументОбъект.РучнаяКорректировка = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитДоговор
		И ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента);
		
		Если ЕстьРеквизитКонтрагент Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
				И ДокументОбъект.Контрагент <> СвойстваДоговора.Владелец Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
				СвойстваДоговора = Неопределено;
				УдалитьКлючИзСтруктуры(ДанныеЗаполнения, "ДоговорКонтрагента");
			Иначе
				ДокументОбъект.Контрагент = СвойстваДоговора.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваДоговора <> Неопределено
			И ЕстьРеквизитОрганизация Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДокументОбъект.Организация) <> СвойстваДоговора.Организация Тогда
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
					Если ЕстьРеквизитКонтрагент Тогда
						ДокументОбъект.Контрагент = Неопределено
					КонецЕсли;
					СвойстваДоговора    = Неопределено;
					УдалитьКлючИзСтруктуры(ДанныеЗаполнения, "ДоговорКонтрагента");
				КонецЕсли;
			Иначе
				ДокументОбъект.Организация = СвойстваДоговора.Организация;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваДоговора <> Неопределено Тогда
			Если ЕстьРеквизитВалютаДокумента Тогда
				ДокументОбъект.ВалютаДокумента = ?(СвойстваДоговора.РасчетыВУсловныхЕдиницах
					И ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета,
					ВалютаРегламентированногоУчета, СвойстваДоговора.ВалютаВзаиморасчетов);
			КонецЕсли;
			Если ЕстьРеквизитВалютаВзаиморасчетов Тогда
				ДокументОбъект.ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРеквизитЭтоУниверсальныйДокумент Тогда
			ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(ДокументОбъект.ДоговорКонтрагента);
			ДокументОбъект.ЭтоУниверсальныйДокумент = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем реквизиты значениями по умолчанию:
	Если ЕстьРеквизитОрганизация И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		Справочники.Организации.ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОсновнаяОрганизация);
		
		ДокументОбъект.Организация = ОсновнаяОрганизация;
		
	КонецЕсли;
	
	ПлательщикНДС = ЕстьРеквизитОрганизация И УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтруктурнаяЕдиница", ДокументОбъект, МетаданныеДокумента)
		И ЕстьРеквизитОрганизация Тогда
		ДокументОбъект.СтруктурнаяЕдиница = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ВидОперации", ДокументОбъект, МетаданныеДокумента) Тогда
		ВидОперацииМенеджер = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя];
		ДокументОбъект.ВидОперации = ВидОперацииМенеджер[0];
		Если (МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" Или МетаданныеДокумента.Имя = "ОплатаПлатежнойКартой")
			И ЗначениеЗаполнено(ДокументОбъект.Организация)
			И УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ДокументОбъект.Организация);
			Отбор.Вставить("Дата", ДокументОбъект.Дата);
			ПараметрыВыбора = Новый Структура("Отбор, СтрокаПоиска", Отбор, "");
			
			ДанныеВыбора = ВидОперацииМенеджер.ПолучитьДанныеВыбора(ПараметрыВыбора);
			ВидОперации = ДанныеВыбора.НайтиПоЗначению(ВидОперацииМенеджер.РозничнаяВыручка);
			Если ВидОперации <> Неопределено Тогда
				ДокументОбъект.ВидОперации = ВидОперации.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("Склад", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СкладОрдер", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СкладОрдер = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокумента) Тогда
		ДокументОбъект.НДСВключенВСтоимость = НЕ ПлательщикНДС
			ИЛИ (ЕстьРеквизитОрганизация И УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(
				ДокументОбъект.Организация, ДокументОбъект.Дата));
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокумента)
		И НЕ ТипДанныхЗаполнения = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		И НЕ (ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ДокументОбъект.ДокументБезНДС = НЕ ПлательщикНДС;
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация И ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокумента) Тогда
		НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(ДокументОбъект.Организация, ДокументОбъект.Дата);
		ДокументОбъект.НДСНеВыделять = НДСНеВыделять;
	Иначе
		НДСНеВыделять = Ложь;
	КонецЕсли;
	
	ИмяРеквизитаСтавкаНДС = "";
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтавкаНДС", МетаданныеДокумента) Тогда
		ИмяРеквизитаСтавкаНДС = "СтавкаНДС";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СтавкаНДСВознаграждения", МетаданныеДокумента) Тогда
		ИмяРеквизитаСтавкаНДС = "СтавкаНДСВознаграждения";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаСтавкаНДС) И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизитаСтавкаНДС]) Тогда
		
		ДокументЯвляетсяРеализацией = БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(
			ДокументОбъект.Ссылка);
		ДокументОбъект[ИмяРеквизитаСтавкаНДС] = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
			ДокументОбъект.Дата, ПлательщикНДС И (НЕ ДокументЯвляетсяРеализацией ИЛИ НЕ НДСНеВыделять));
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("БанковскийСчет", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
		Если ЕстьРеквизитВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("БанковскийСчетОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		Если ЕстьРеквизитВалютаДокумента Тогда
			ДокументОбъект.БанковскийСчетОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);
		Иначе
			ДокументОбъект.БанковскийСчетОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("БанковскийСчет") Тогда
			ДокументОбъект.СчетОрганизации = ДанныеЗаполнения.БанковскийСчет;
		ИначеЕсли ЕстьРеквизитВидОперации И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ВалютаРегламентированногоУчета, Ложь);
		Иначе
			Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
				И Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(ДокументОбъект.Организация) Тогда
				// В режиме интеграции банковский счет организации заполняется при загрузке документов из банка.
				// Если документ создается интерактивно и счет организаци не заполнен,
				// то в таком документе можно выбирать только счета, для которых не включена интеграция,
				// в том числе при заполнении счета "по умолчанию".
				СчетаБезИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииБезИнтеграции(
					ДокументОбъект.Организация);
				Если СчетаБезИнтеграции.Количество() = 1 Тогда
					ДокументОбъект.СчетОрганизации = СчетаБезИнтеграции[0];
				КонецЕсли;
			Иначе
				УчетДенежныхСредствБП.УстановитьБанковскийСчет(
					ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента, ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента));
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРеквизитВалютаДокумента И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) и ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитСчетОрганизации И ЕстьРеквизитВалютаДокумента И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		Если ВалютаСчета <> ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ВалютаСчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда
		
		ПодразделениеОрганизации = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда
			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("МестонахождениеОС", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.МестонахождениеОС, ДокументОбъект.Организация) Тогда
		
		МестонахождениеОС = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(МестонахождениеОС) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(МестонахождениеОС, ДокументОбъект.Организация) Тогда
			ДокументОбъект.МестонахождениеОС = МестонахождениеОС;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Местонахождение", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.Местонахождение, ДокументОбъект.Организация) Тогда
		
		Местонахождение = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(Местонахождение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Местонахождение, ДокументОбъект.Организация) Тогда
			ДокументОбъект.Местонахождение = Местонахождение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитВалютаДокумента И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ЕстьРеквизитВалютаВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаВзаиморасчетов) Тогда
		ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсДокумента = 1 Тогда
			
			СтруктураКурсаДокумента      = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсВзаиморасчетов = 1 Тогда
			
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ЗанимаемыхСтавок", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ДатаС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПериодРегистрации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СпособЗачетаАвансов", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента) Тогда
		
		ЗаполнитьПоУмолчанию = Истина;
		
		Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ДеятельностьНаПатенте") Тогда
			ЗаполнитьПоУмолчанию = Ложь;
			ДокументОбъект.ДеятельностьНаПатенте = ДанныеЗаполнения.ДеятельностьНаПатенте;
			Если НЕ ДанныеЗаполнения.ДеятельностьНаПатенте Тогда
				ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
			ИначеЕсли НЕ ДанныеЗаполнения.Свойство("Патент") И НЕ ЗначениеЗаполнено(ДокументОбъект.Патент) Тогда
				ДокументОбъект.Патент = УчетПСН.ПатентПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата);
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения <> Неопределено И ОбщегоНазначения.ЭтоСсылка(ТипДанныхЗаполнения) Тогда
			МетаданныеДанныхЗаполнения = Метаданные.НайтиПоТипу(ТипДанныхЗаполнения);
			Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДанныхЗаполнения)
				И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДанныхЗаполнения) Тогда
				// Документ-основание содержит реквизиты для патентной системы
				ЗаполнитьПоУмолчанию = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнитьПоУмолчанию Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект,
				УчетПСН.ДеятельностьНаПатентеПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств")
		И (МетаданныеДокумента.Имя = "ПлатежноеПоручение" ИЛИ МетаданныеДокумента.Имя = "ОтчетОРозничныхПродажах")
		И ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтатьяДвиженияДенежныхСредств", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("Руководитель", ДокументОбъект, МетаданныеДокумента)
		ИЛИ ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ГлавныйБухгалтер", ДокументОбъект, МетаданныеДокумента)
		ИЛИ ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("Исполнитель", ДокументОбъект, МетаданныеДокумента)Тогда
		
		ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументОбъект);
		
	КонецЕсли;
	
	// Заполнение реквизитов расчетного документа
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", МетаданныеДокумента) Тогда
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитТабЧастиДокумента("СтавкаНДС", СтрокаПлатеж, МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
				Если ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДокументОбъект.Организация) 
					И (МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" ИЛИ МетаданныеДокумента.Имя = "ПоступлениеНаРасчетныйСчет" 
					ИЛИ МетаданныеДокумента.Имя = "ОплатаПлатежнойКартой") Тогда
					СтрокаПлатеж.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДокументОбъект.Дата, ПлательщикНДС);
				Иначе
					СтрокаПлатеж.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДокументОбъект.Дата);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПодразделениеОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента)
				И ТипЗнч(ДокументОбъект.СчетОрганизации) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				
				РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
				Если ЗначениеЗаполнено(РеквизитыСчетаОрганизации.ПодразделениеОрганизации) Тогда
					ДокументОбъект.ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетДенежныхСредствКлиентСервер.ЕстьАвансыПолученные(ДокументОбъект.ВидОперации)
			И ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитТабЧастиДокумента(
				"ПорядокОтраженияАванса", СтрокаПлатеж, МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
				
				ОтражениеАвансаПоУмолчанию = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата);
				
				Для Каждого СтрокаПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если Не ЗначениеЗаполнено(СтрокаПлатежа.ПорядокОтраженияАванса) Тогда
						СтрокаПлатежа.ПорядокОтраженияАванса = ОтражениеАвансаПоУмолчанию;
					КонецЕсли;
				КонецЦикла;
				
		КонецЕсли;
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетКонтрагента", ДокументОбъект, МетаданныеДокумента)
				И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				БанковскийСчетКонтрагента = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Контрагент);
				Если НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
					УчетДенежныхСредствБП.УстановитьБанковскийСчет(
						БанковскийСчетКонтрагента,
						ДокументОбъект.Контрагент,
						ДокументОбъект.ВалютаДокумента);
				КонецЕсли;
				Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
					ВалютаБанковскогоСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "ВалютаДенежныхСредств");
					ВалютаБанковскогоСчетаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
					Если ВалютаБанковскогоСчетаКонтрагента = ВалютаБанковскогоСчетаОрганизации
						ИЛИ НЕ ЗначениеЗаполнено(ВалютаБанковскогоСчетаОрганизации)
						И ЕстьРеквизитВалютаДокумента И ВалютаБанковскогоСчетаКонтрагента = ДокументОбъект.ВалютаДокумента Тогда
						ДокументОбъект.СчетКонтрагента = БанковскийСчетКонтрагента;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И ЗначениеЗаполнено(ДокументОбъект.Контрагент)
				И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ПараметрыПлатежа = Новый Структура("ОплатаВВалюте",
					Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета));
				Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
						СтрокаПлатеж.ДоговорКонтрагента,
						ДокументОбъект.Контрагент,
						ДокументОбъект.Организация,
						УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации),
						ПараметрыПлатежа) Тогда
					
					РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(СтрокаПлатеж.ДоговорКонтрагента);
					
					Если ДокументОбъект.Организация.Пустая() И ЗначениеЗаполнено(РеквизитыДоговора.Организация) Тогда
						ДокументОбъект.Организация = РеквизитыДоговора.Организация;
					КонецЕсли;
					
					СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
						РеквизитыДоговора.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					Если НЕ РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
						ДокументОбъект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			Если НЕ ЕстьРасчетыСКонтрагентами И НЕ ЕстьРасчетыПоКредитам Тогда
				Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтатьяДвиженияДенежныхСредств", ДокументОбъект, МетаданныеДокумента) Тогда
					ДокументОбъект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитТабЧастиДокумента(
				"СтатьяДвиженияДенежныхСредств", СтрокаПлатеж, МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
				
				СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
				Для каждого СтрокаПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СтатьяДвиженияДенежныхСредств) Тогда
						СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьСчетаУчета Тогда
		СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//  КопироватьПодразделение - булево - если да - подразделение организации берется из документа-основания,
//										если нет - из реквизита СчетОрганизации или настройки пользователя
//
Процедура ЗаполнитьПоОснованию(ДокументОбъект, ДокументОснование, КопироватьПодразделение = Истина) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Дата
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;

	// Организация.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Склад.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокументаОснования) Тогда
	   
	   РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОснование.ДоговорКонтрагента);
	   
	   Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
	      ИЛИ ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДокументОбъект.Организация) =
		  	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(РеквизитыДоговора.Организация) Тогда

			ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

			// КурсВзаиморасчетов.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

				// КратностьВзаиморасчетов.
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;
	
	// УПД, УКД.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ЭтоУниверсальныйДокумент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ЭтоУниверсальныйДокумент = ДокументОснование.ЭтоУниверсальныйДокумент;
	КонецЕсли;

	// Банковский счет
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчетОрганизации) Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчетОрганизации;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СчетОрганизации;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Подразделение организации
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента) Тогда

		Если КопироватьПодразделение Тогда

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
				ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
			КонецЕсли;

		Иначе

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
					И (ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено) Тогда
					РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
					ДокументОбъект.ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Касса, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыКассы.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				РеквизитыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыБанковскогоСчета.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// НДСВключенВСтоимость.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НДСВключенВСтоимость = ДокументОснование.НДСВключенВСтоимость;
	КонецЕсли;
	
	// ДокументБезНДС.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДокументБезНДС = ДокументОснование.ДокументБезНДС;
	КонецЕсли;
	
	// НДСНеВыделять.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НДСНеВыделять = ДокументОснование.НДСНеВыделять;
	КонецЕсли;
	
	// СпособЗачетаАвансов
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособЗачетаАвансов", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособЗачетаАвансов", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.СпособЗачетаАвансов = ДокументОснование.СпособЗачетаАвансов;
		Иначе
			ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
	КонецЕсли;
	
	// ДеятельностьНаПатенте
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ДеятельностьНаПатенте = ДокументОснование.ДеятельностьНаПатенте;
		КонецЕсли;
	КонецЕсли;
	
	// Патент
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Патент = ДокументОснование.Патент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта
//  <МетаданныеОбъекта>  - <Метаданные> -
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт
	
	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (НЕ Объект.ЭтоГруппа
						И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПодразделениеЗатрат(ПодразделениеЗатрат, Знач Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		
		Если Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
			ПодразделениеЗатрат = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события документов ПриКопировании, выполняет общие действия при копировании.
// Необходимо вызывать из обработчика ПриКопировании в модуле объекта.
//
// Параметры:
//  Объект            - ДокументОбъект - объект нового документа, создаваемого копированием.
//  ОбъектКопирования - ДокументОбъект - исходный документ - источник копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Организация") Тогда
		// Если нет организации, дальнейшие проверки выполнять бесполезно.
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДокументБезНДС")
		И Объект.ДокументБезНДС Тогда
		// Плательщикам НДС нельзя отражать документы без НДС.
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "НДСНеВыделять")
		И Объект.НДСНеВыделять Тогда
		// На дату нового документа может стать необходимым выделение НДС.
		Объект.НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры
