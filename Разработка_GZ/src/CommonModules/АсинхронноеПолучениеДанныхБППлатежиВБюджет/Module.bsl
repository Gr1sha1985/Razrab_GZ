
#Область ПрограммныйИнтерфейс

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Реквизиты платежа в бюджет'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Реквизиты платежа в бюджет'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = АсинхронноеПолучениеДанныхБППлатежиВБюджет;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПубликуемыеДанные = ПубликуемыеРеквизитыПлатежаВБюджет(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	Если ПубликуемыеДанные <> Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(ПубликуемыеДанные);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "tax_payment_details";
	
КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//  Период       -Дата - дата в квартале, за который требуются публикуемые данные.
//  ВидНалога - ПеречислениеСсылка.ВидыНалогов - вид уплачиваемого налога.
//  ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - вид налогового обязательства.
//  ОплатаЗадолженности - Булево - если Истина, публикуются реквизиты для уплаты просроченной налоговой задолженности.
//
// Возвращаемое значение:
//   Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности = Ложь) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	Настройки.Вставить("date", Период);
	Настройки.Вставить("tax", XMLСтрока(ВидНалога));
	Настройки.Вставить("liability", XMLСтрока(ВидНалоговогоОбязательства));
	
	Настройки.Вставить("overdue_payment", ОплатаЗадолженности);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает адрес для запроса реквизитов платежа в бюджет через внешний программный интерфейс.
//
// Возвращаемые данные:
//   Строка - часть адреса http-сервиса.
//
Функция АдресСервиса() Экспорт
	
	ЧастиАдреса = Новый Массив;
	
	ЧастиАдреса.Добавить(ИнтеграцияСБанками.АдресСервисаПубликацияОтчетов());
	ЧастиАдреса.Добавить(ПубликуемыйИдентификатор());
	
	АдресСервиса = СтрСоединить(ЧастиАдреса, "/");
	
	Возврат АдресСервиса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПубликуемыеРеквизитыПлатежаВБюджет(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП;
	
	// Читаем настройки
	НастройкиСтруктурой = ПрочитатьНастройки(Параметры, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиСтруктурой.Свойство("organization") Тогда
		НастройкиСтруктурой.organization.Свойство("inn", ОрганизацияИНН);
		НастройкиСтруктурой.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоИмени(НастройкиСтруктурой.tax);
	ВидНалоговогоОбязательства =
		Перечисления.ВидыПлатежейВГосБюджет.ВидНалоговогоОбязательстваПоИмени(НастройкиСтруктурой.liability);
	
	Если Не ЗначениеЗаполнено(ВидНалога) Или Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось определить налог по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НалоговыйПериод = НастройкиСтруктурой.date;
	
	// В настройках может быть передан признак уплаты просроченной задолженности.
	ОплатаЗадолженности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиСтруктурой, "overdue_payment", Ложь);
	
	РеквизитыПлатежаВБюджет = РеквизитыПлатежаДляПубликации(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности);
	
	Если РеквизитыПлатежаВБюджет.Ошибки.Количество() > 0 Тогда
		КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаВыполненоСПредупреждениями();
		СообщениеОбОшибке = НСтр("ru = 'Реквизиты налогового платежа заполнены с ошибками. Перед уплатой налога рекомендуется исправить данные в 1С.'");
	КонецЕсли;
	
	// Заменяем русские ключи реквизитов английскими аналогами.
	СловарьПеревода = СловарьПеревода();
	ПубликуемыеРеквизитыПлатежа = ПеревестиКлючиРеквизитов(РеквизитыПлатежаВБюджет, СловарьПеревода);
	
	Возврат ИнтеграцияСБанками.СериализоватьВСтрокуJSON(ПубликуемыеРеквизитыПлатежа);
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("date");
	ОбязательныеПоля.Добавить("tax");
	ОбязательныеПоля.Добавить("liability");
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		Если Не НастройкиСтруктурой.Свойство(ОбязательноеПоле) Тогда
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В структуре JSON отсутствует обязательное поле %1'"), ОбязательноеПоле);
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

Функция РеквизитыПлатежаДляПубликации(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности)
	
	ПлатежноеПоручение = НовоеПлатежноеПоручениеВБюджет(Организация,
		НалоговыйПериод,
		ВидНалога,
		ВидНалоговогоОбязательства,
		ОплатаЗадолженности);
	
	РеквизитыПлательщикаПолучателя = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		ПлатежноеПоручение.Организация,
		ПлатежноеПоручение.СчетОрганизации,
		ПлатежноеПоручение.Контрагент,
		ПлатежноеПоручение.СчетКонтрагента,
		Истина, // ПеречислениеВБюджет
		ПлатежноеПоручение.Дата);
	
	Ошибки = ПроверитьПлатежноеПоручение(ПлатежноеПоручение);
	
	// Собираем результат
	Результат = Новый Структура;
	
	РеквизитыПолучателя = Новый Структура;
	РеквизитыПолучателя.Вставить("ИНН", ПлатежноеПоручение.ИННПолучателя);
	РеквизитыПолучателя.Вставить("КПП", ПлатежноеПоручение.КПППолучателя);
	РеквизитыПолучателя.Вставить("Наименование", ПлатежноеПоручение.ТекстПолучателя);
	РеквизитыПолучателя.Вставить("НомерСчета", РеквизитыПлательщикаПолучателя.НомерСчетаПолучателя);
	РеквизитыПолучателя.Вставить("БИК", РеквизитыПлательщикаПолучателя.БикБанкаПолучателя);
	
	Результат.Вставить("Получатель", РеквизитыПолучателя);
	
	НалоговыеРеквизиты = Новый Структура;
	НалоговыеРеквизиты.Вставить("СтатусСоставителя", ПлатежноеПоручение.СтатусСоставителя);
	НалоговыеРеквизиты.Вставить("КБК", ПлатежноеПоручение.КодБК);
	НалоговыеРеквизиты.Вставить("ОКТМО", ПлатежноеПоручение.КодОКАТО);
	НалоговыеРеквизиты.Вставить("ПоказательПериода", ПлатежноеПоручение.ПоказательПериода);
	НалоговыеРеквизиты.Вставить("ПоказательОснования", ПлатежноеПоручение.ПоказательОснования);
	
	Результат.Вставить("НалоговыеРеквизиты", НалоговыеРеквизиты);
	
	Результат.Вставить("НазначениеПлатежа", ПлатежноеПоручение.НазначениеПлатежа);
	Результат.Вставить("СуммаПлатежа", ПлатежноеПоручение.СуммаДокумента);
	
	Результат.Вставить("Ошибки", Ошибки);
	
	Возврат Результат;
	
КонецФункции

Функция НовоеПлатежноеПоручениеВБюджет(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности)
	
	// Реквизиты всегда получаем на текущую дату.
	Дата = НачалоДня(ТекущаяДатаСеанса());
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Дата", Дата);
	ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	
	ДанныеЗаполнения.Вставить("Налог", Налог);
	ДанныеЗаполнения.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	ДанныеЗаполнения.Вставить("НалоговыйПериод", НалоговыйПериод);
	
	Если ОплатаЗадолженности Тогда
		// При оплате налоговой задолженности вместо основания платежа по умолчанию указываем "ЗД".
		ДанныеЗаполнения.Вставить("ПоказательОснования",
			ПлатежиВБюджетКлиентСервер.ОснованиеПлатежаДобровольноеПогашениеЗадолженности());
	КонецЕсли;
	
	// Определяем получателя платежа. Данные госоргана получаем из веб-сервиса.
	ВидИКодГосударственногоОргана = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
		Налог, Организация, Дата);
	ПолучательПлатежа = Документы.ПлатежноеПоручение.ПолучательДляПлатежаГосударственномуОргану(
		ВидИКодГосударственногоОргана.Вид, ВидИКодГосударственногоОргана.Код);
	
	ДанныеЗаполнения.Вставить("Контрагент", ПолучательПлатежа.Контрагент);
	ДанныеЗаполнения.Вставить("СчетКонтрагента", ПолучательПлатежа.БанковскийСчет);
	
	ДанныеЗаполнения.Вставить("СуммаДокумента",
		СуммаПлатежаПоНалогу(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности));
	
	// Создаем документ.
	ДокументПлатежноеПоручение = Документы.ПлатежноеПоручение.СоздатьДокумент();
	ДокументПлатежноеПоручение.Заполнить(ДанныеЗаполнения);
	
	Возврат ДокументПлатежноеПоручение;
	
КонецФункции

Функция СуммаПлатежаПоНалогу(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности)
	
	ПорядокУплатыНалога = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(Организация, ВидНалога, НалоговыйПериод);
	Если ПорядокУплатыНалога = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ПорядокУплатыНалога.Организация = Организация; // Порядок из интерфейса задач бухгалтера возвращается с пустой организацией.
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, ПорядокУплатыНалога);
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	Если ОписаниеДействия <> Неопределено И ОписаниеДействия.Свойство("ИмяФормы") Тогда
		ПомощникВыполненияЗадачи = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеДействия.ИмяФормы);
	Иначе
		ПомощникВыполненияЗадачи = Неопределено;
	КонецЕсли;
	
	Если ДанныеПомощникаПубликуются(ПомощникВыполненияЗадачи) Тогда
		ПараметрыРасчетаСуммы = ПараметрыРасчетаНалогаКУплате(
			Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности);
		СуммаПлатежа = ПомощникВыполненияЗадачи.СуммаНалогаКУплате(ПараметрыРасчетаСуммы);
	Иначе
		СуммаПлатежа = 0;
	КонецЕсли;
	
	Возврат СуммаПлатежа;
	
КонецФункции

Функция ПараметрыРасчетаНалогаКУплате(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства, ОплатаЗадолженности)
	
	ПараметрыРасчета = ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате();
	
	ПараметрыРасчета.Организация                = Организация;
	ПараметрыРасчета.НалоговыйПериод            = НалоговыйПериод;
	ПараметрыРасчета.ВидНалога                  = ВидНалога;
	ПараметрыРасчета.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	ПараметрыРасчета.ОплатаЗадолженности        = ОплатаЗадолженности;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ДанныеПомощникаПубликуются(ПомощникВыполненияЗадачи)
	
	Если ПомощникВыполненияЗадачи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПомощникаПубликуются = Ложь;
	
	ДоступныеВозвращаемыеДанные = АсинхронноеПолучениеДанных.ДоступныеВозвращаемыеДанные();
	Для Каждого ОписаниеВозвращаемыхДанных Из ДоступныеВозвращаемыеДанные Цикл
		
		Если ОписаниеВозвращаемыхДанных.Значение.МодульМенеджер = ПомощникВыполненияЗадачи Тогда
			ДанныеПомощникаПубликуются = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПомощникаПубликуются;
	
КонецФункции

Функция ПроверитьПлатежноеПоручение(ДокументОбъект)
	
	// Проверка состоит из 2 этапов:
	//  - проверка специфичных бюджетных реквизитов (при интерактивном создании выполняется в форме и не блокирует запись);
	//  - проверка заполнения платежного поручения при записи (блокирующая).
	// В возвращаемых данных эти ошибки мы не разделяем: считаем, что любая ошибка в реквизитах платежа
	// приводит к необходимости перейти в 1С и исправить данные.
	
	Ошибки = Новый Массив;
	
	// Проверяем реквизиты платежа в бюджет, кроме УИН - в API платежи по требованиям не поддерживаются.
	
	ОшибкиБюджетныхРеквизитов
		= Документы.ПлатежноеПоручение.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ДокументОбъект, Ложь, Ложь, Ложь);
	
	Для Каждого ОшибкаБюджетныхРеквизитов Из ОшибкиБюджетныхРеквизитов Цикл
		ДобавитьОшибку(Ошибки, ОшибкаБюджетныхРеквизитов.Описание);
	КонецЦикла;
	
	// Вызовем стандартную проверку заполнения документа (без записи) и считаем сообщения.
	
	ПолучитьСообщенияПользователю(Истина); // Очистим сообщения, сформированные до вызова платформенной проверки.
	
	ДокументОбъект.ПроверитьЗаполнение();
	
	СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого СообщениеПроверкиЗаполнения Из СообщенияПроверкиЗаполнения Цикл
		// При заполнении реквизитов в API нулевая сумма не считается ошибкой.
		// Нулевой налог к уплате должен обрабатываться на стороне приемника.
		Если СообщениеПроверкиЗаполнения.Поле = "СуммаДокумента" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОшибку(Ошибки, СообщениеПроверкиЗаполнения.Текст);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Процедура ДобавитьОшибку(Ошибки, ТекстСообщения)
	
	Ошибка = НоваяОшибка();
	Ошибка.ТекстСообщения = ТекстСообщения;
	
	Ошибки.Добавить(Ошибка);
	
КонецПроцедуры

Функция НоваяОшибка()
	
	Ошибка = Новый Структура;
	
	Ошибка.Вставить("ТекстСообщения", "");
	
	Возврат Ошибка;
	
КонецФункции

Функция СловарьПеревода()
	
	Словарь = Новый Соответствие;
	Словарь.Вставить("Получатель", "payee");
	Словарь.Вставить("ИНН", "inn");
	Словарь.Вставить("КПП", "kpp");
	Словарь.Вставить("Наименование", "name");
	Словарь.Вставить("НомерСчета", "account");
	Словарь.Вставить("БИК", "bank");
	
	Словарь.Вставить("НалоговыеРеквизиты", "tax_details");
	Словарь.Вставить("СтатусСоставителя", "drawer_status");
	Словарь.Вставить("КБК", "cbc");
	Словарь.Вставить("ОКТМО", "oktmo");
	Словарь.Вставить("ПоказательОснования", "reason");
	Словарь.Вставить("ПоказательПериода", "tax_period");
	
	Словарь.Вставить("НазначениеПлатежа", "purpose");
	Словарь.Вставить("СуммаПлатежа", "sum");
	
	Словарь.Вставить("Ошибки", "errors");
	Словарь.Вставить("ТекстСообщения", "message");
	
	Возврат Словарь;
	
КонецФункции

Функция ПеревестиКлючиРеквизитов(ИсходноеЗначение, Словарь)
	
	Если ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
		
		Результат = Новый Структура;
		
		Для Каждого КлючИЗначение Из ИсходноеЗначение Цикл
			Результат.Вставить(Словарь[КлючИЗначение.Ключ], ПеревестиКлючиРеквизитов(КлючИЗначение.Значение, Словарь));
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого ЭлементИсточника Из ИсходноеЗначение Цикл
			Результат.Добавить(ПеревестиКлючиРеквизитов(ЭлементИсточника, Словарь));
		КонецЦикла;
		
	Иначе
		
		Результат = ИсходноеЗначение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
