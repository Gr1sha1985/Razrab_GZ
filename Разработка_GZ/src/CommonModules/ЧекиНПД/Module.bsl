#Область ПрограммныйИнтерфейс

// Конструктор структуры параметров для формирования чека.
// См. РегистрыСведений.ЧекиНПД.СформироватьЧекВФоне()
// и РегистрыСведений.ЧекиНПД.СформироватьЧек().
// 
// Возвращаемое значение:
//   - Структура.
//
Функция НовыйПараметрыФормированияЧека() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Ссылка", Неопределено);
	ПараметрыФормирования.Вставить("Организация", Неопределено);
	ПараметрыФормирования.Вставить("Контрагент", Неопределено);
	ПараметрыФормирования.Вставить("Дата", '00010101');
	ПараметрыФормирования.Вставить("СуммаДокумента", 0);
	ПараметрыФормирования.Вставить("Услуги", НовыйТаблицаУслуг());
	
	Возврат ПараметрыФормирования;
	
КонецФункции

// Возвращает параметры формирования чека.
//
// Параметры:
//   ДокументОснование - ДокументСсылка - ссылка на основание чека.
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//   Структура - см. НовыйПараметрыФормированияЧека()
//
Функция ПараметрыФормированияЧека(ДокументОснование, Организация) Экспорт
	
	МенеджерОснования = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОснование);
	Возврат МенеджерОснования.ПараметрыФормированияЧекаНПД(ДокументОснование, Организация);
	
КонецФункции

// Возвращает цену услуги НПД для организации.
//
// Параметры:
//  УслугаНПД	 - СправочникСсылка.Номенклатура - Услуга, по которой нужно определить цену.
//  Организация	 - СправочникСсылка.Организация - Организация на НПД, для которой нужно вернуть цену услуги.
//  Дата		 - Дата - Дата, на которую нужно вернуть цену.
// 
// Возвращаемое значение:
//   - Число - цена услуги НПД.
//
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	ДанныеОбъекта.Вставить("Дата", Дата);
	ДанныеОбъекта.Вставить("Организация", Организация);
	ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", СуммаВключаетНДСДляНПД());
	ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		УслугаНПД, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СведенияОНоменклатуре.Цена;
	
КонецФункции

// Сохраняет цену услуги НПД при записи документа.
//
// Параметры:
//  Объект	 - ДокументСсылка - Документ, в котором указывается цена НПД.
//             В модуле менеджера данного документа должна быть реализована функция ТекстЗапросаДанныеДляОбновленияЦенДокументов().
// 
Процедура СохранитьЦенуУслугиНПД(Объект) Экспорт
	
	Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка,
		Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
		Объект.ВалютаДокумента,
		СуммаВключаетНДСДляНПД());
	
КонецПроцедуры

// Возвращает контактную информацию для отправки чека.
//
// Параметры:
//  Контрагент	 - СправочникСсылка.Контрагенты - Контрагент, для которого возвращается контактная информация.
// 
// Возвращаемое значение:
//   - Структура - контактная информация для отправки чека.
//
Функция ПараметрыОтправкиЧека(Контрагент) Экспорт
	
	ПараметрыОтправки = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ПараметрыОтправки;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ПараметрыОтправки;
	КонецЕсли;
	
	АдресЭлектроннойПочты = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты.Представление) Тогда
		ПараметрыОтправки.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты.Представление);
	КонецЕсли;
	
	Телефон = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(
		Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	Если ЗначениеЗаполнено(Телефон.Представление) Тогда
		ПараметрыОтправки.Вставить("НомерТелефона", Телефон.Представление);
	КонецЕсли;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

// Процедура "УстановитьВДинамическомСпискеПредставленияАннулированныхЧеков"
//
// Параметры:
//  Строки - СтрокиДинамическогоСписка - в которых необходимо изменить представление поля "НомерЧека"
//
Процедура УстановитьВДинамическомСпискеПредставленияАннулированныхЧеков(Строки) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		СостояниеАннулирован = Перечисления.СостоянияЧековНПД.Аннулирован;
		Для Каждого Строка Из Строки Цикл
			ДанныеСтроки = Строка.Значение.Данные;
			Если ДанныеСтроки.Состояние = СостояниеАннулирован
				Или ДанныеСтроки.ПроизведенВозвратПоЧеку Тогда
				ДанныеСтроки.НомерЧека = РегистрыСведений.ЧекиНПД.ПредставлениеАннулированногоЧека(
					ДанныеСтроки.НомерЧека, ДанныеСтроки.ДатаАннулированияЧека);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НачатьОбновлениеСтатусовОфлайнЧековНПД(Организация, АдресРезультата) Экспорт
	
	ОфлайнЧеки = РегистрыСведений.ЧекиНПД.ЧекиОжидающиеОтправкуВФНС(Организация);
	
	Если Не ЗначениеЗаполнено(ОфлайнЧеки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СтатусыЧеков");
	ПараметрыМетода.Организация = Организация;
	ПараметрыМетода.Чеки = ОфлайнЧеки;
	
	Запрос = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыМетода);
	
	ПоместитьВоВременноеХранилище(Запрос, АдресРезультата);
	
КонецПроцедуры

// Изменяет статусы офлайн чеков по данным из сервиса и возвращает массив из обновленных чеков.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   АдресСтатусовЧеков - Строка - адрес временного хранилища, 
//                                 содержащего таблицу ИнтеграцияСПлатформойСамозанятые.НовыйСтатусыЧеков()
//
// Возвращаемое значение:
//   Массив из Строка - массив номеров обновленных чеков.
//
Функция ИзменитьСтатусыОфлайнЧеков(Организация, АдресСтатусовЧеков) Экспорт
	
	ОбновленныеОфлайнЧеки = Новый Массив;
	
	Если Не ЭтоАдресВременногоХранилища(АдресСтатусовЧеков) Тогда
		Возврат ОбновленныеОфлайнЧеки;
	КонецЕсли;
	
	СведенияОЧеках = ПолучитьИзВременногоХранилища(АдресСтатусовЧеков);
	УдалитьИзВременногоХранилища(АдресСтатусовЧеков);
	
	Если Не ЗначениеЗаполнено(СведенияОЧеках) Тогда
		Возврат ОбновленныеОфлайнЧеки;
	КонецЕсли;
	
	СтатусыЧеков = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЧеков();
	
	Для Каждого СведенияОЧеке Из СведенияОЧеках.СтатусыЧеков Цикл
		
		Если Не СведенияОЧеке.ЧекOffLine Тогда
			Продолжить; // Обрабатываем только офлайн чеки.
		КонецЕсли;
		
		Если ВРег(СведенияОЧеке.Статус) = ВРег(СтатусыЧеков.ОжидаетОтправкиВФНС) Тогда
			Продолжить; // Статус не изменился. Чек по-прежнему не передан в ФНС.
		КонецЕсли;
		
		РегистрыСведений.ЧекиНПД.ОбновитьОфлайнЧек(Организация, СведенияОЧеке);
		
		ОбновленныеОфлайнЧеки.Добавить(СведенияОЧеке.ИдентификаторЧека);
		
	КонецЦикла;
	
	Возврат ОбновленныеОфлайнЧеки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуммаВключаетНДСДляНПД()
	
	Возврат Истина;
	
КонецФункции

Функция НовыйТаблицаУслуг()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуг.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаУслуг.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаУслуг;
	
КонецФункции

#КонецОбласти
