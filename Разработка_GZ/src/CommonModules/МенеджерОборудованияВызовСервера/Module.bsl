
#Область ПрограммныйИнтерфейс     

// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.4.17";
	
КонецФункции

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 3003;
	Возврат РевизияИнтерфейса;
	
КонецФункции

// Получает текущую дату сервера, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДатаСеанса.
//
// Возвращаемое значение:
//  Результат - текущая дата сеанса.
//
Функция ПолучитьДатаСеанса() Экспорт
	
#Если МобильноеПриложениеСервер Тогда
	Возврат ТекущаяДата();
#Иначе
	Возврат ТекущаяДатаСеанса();
#КонецЕсли

КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
//  Параметры:
// 	ТипыПО - Неопределено - Описание
// 	Идентификатор - Неопределено - Описание
// 	РабочееМесто - Неопределено - Описание
// Возвращаемое значение:
// 	Массив из Структура - Описание:
// 	* Наименование - Строка - .
//
Функция ОборудованиеПоПараметрам(ТипыПО = Неопределено, Идентификатор = Неопределено,
	РабочееМесто = Неопределено, ТолькоАвтоматическаяФискализация = Ложь) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО, Идентификатор, РабочееМесто, ТолькоАвтоматическаяФискализация);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Функция возвращает по идентификатору устройства параметры регистрации.
//
Функция ПолучитьПараметрыРегистрацииУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыРегистрацииУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);
	
КонецФункции

// Процедура предназначена для сохранения параметров регистрации устройства
//
Функция СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыРегистрацииУстройства(Идентификатор, ПараметрыРегистрации); 
	
КонецФункции

// Функция возвращает структуру с данными устройства.
//
// Параметры:
// 	Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// Возвращаемое значение:
// 	Структура - Описание:
// *ОбработчикДрайвераИмя - Строка - имя драйвера.
// *ОбработчикДрайвера - Строка - обработчик драйвера. 
// *ИмяКомпьютера - Строка - наименование компьютера. 
// *РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место.
// *Параметры - Структура - структура с полями:
// **ДатаНачала - Дата - .
// **ДатаОкончания - Дата - .
// **ПериодВыгрузки - Структура - структура с полями:
// ***ДатаНачала - Дата - дата начала загрузки.
// ***ДатаОкончания - Дата - дата окончания загрузки. 
// *ИмяФайлаДрайвера - Строка - имя файла драйвера.
// *ИмяМакетаДрайвера - Строка - имя макета драйвера.
// *ПоставляетсяДистрибутивом - Булево - признак поставки дистрибутивом.
// *ИдентификаторОбъекта - Строка - идентификатор объекта строкой.
// *ВСоставеКонфигурации - Булево - признак поставке в составе конфигурации.
// *ДрайверОборудованияИмя - Строка - драйвер оборудования строкой.
// *ДрайверОборудования - СправочникСсылка.ПодключаемоеОборудование - драйвер оборудования.
// *ТипОборудованияИмя - Строка - тип опоборудования строкой.
// *ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип оборудования.
// *Наименование - Строка - наименование оборудования.
// *ИдентификаторУстройства - Строка - идентификатор устройства.
// *Ссылка - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает структуру с данными драйвера.
// 
// Параметры:
// 	Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВерсияДрайвера 
// * ИмяФайлаДрайвера 
// * ИмяМакетаДрайвера 
// * ПоставляетсяДистрибутивом 
// * ОбработчикДрайвера 
// * ИдентификаторОбъекта 
// * ВСоставеКонфигурации 
// * ТипОборудования 
// * ДрайверОборудованияИмя 
// * ДрайверОборудования
// 
Функция ПолучитьДанныеДрайвера(Идентификатор) Экспорт

	Возврат Справочники.ДрайверыОборудования.ПолучитьДанныеДрайвера(Идентификатор);
 
КонецФункции

// Функция возвращает параметры драйвера по наименованию обработчика.
//
Функция ПараметрыДрайвераПоОбработчику(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = Новый Структура;
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат.Вставить("Имя"            , ИмяПеречисления.Имя);
			Результат.Вставить("Наименование"   , ИмяПеречисления.Синоним);
			Результат.Вставить("ТипОборудования", Перечисления["ТипыПодключаемогоОборудования"][ИмяПеречисления.Комментарий]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокРабочиеМеста = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокРабочиеМеста;
	
КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище.
//
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Получает ссылку предопределенного элемента по его полному имени.
//
// Параметры:
//  ПолноеИмяПредопределенного - Строка - Имя предопределенного элемента.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодключаемоеОборудование - Описание  
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		СправочникСсылка = Результат.Выгрузить(); //ТаблицаЗначений: *Ссылка - СправочникСсылка.ПодключаемоеОборудование - .
		СтрокаТаблицы = СправочникСсылка[0];//Структура - где: *Ссылка -  СправочникСсылка.ПодключаемоеОборудование - .
		Ссылка = СтрокаТаблицы.Ссылка;
		Возврат Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает доступность сохранение данных пользователя.
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных.
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные(); //ОбъектМетаданных
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс]; //ОбъектМетаданных - 
	Имя = Результат.Имя;

	Возврат Имя;

КонецФункции

// Функция возвращает перечисление по имени.
//
Функция ПолучитьТипОборудования(ТипОборудованияИмя) Экспорт
	
	Попытка
		Результат = Перечисления["ТипыПодключаемогоОборудования"][ТипОборудованияИмя]; 
	Исключение
		Результат = Перечисления.ТипыПодключаемогоОборудования.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает Тип подключаемого оборудования по ссылке.
//
Функция ПолучитьТипПодключаемогоОборудования(ПодключаемоеОборудование) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");
	
КонецФункции

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();
	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;
	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());
	РабочееМесто.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРабочиеМесто = Справочники.РабочиеМеста.ПустаяСсылка();
		
		СписокРабочиеМеста = НайтиРабочиеМестаПоИД(МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста());
		Если СписокРабочиеМеста.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРабочиеМесто = СписокРабочиеМеста[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРабочиеМесто);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список оборудования для которого необходима переустановка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляПереустановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяПереустановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Возвращает список оборудования для которого необходима установка компоненты.
//
// Параметр:
//  РабочееМесто - СправочникСсылка.РабочиеМеста
// 
// Возвращаемое значение
//  Массив
//
Функция ДрайвераДляУстановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяУстановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования.
//
Процедура УстановитьПризнакПереустановкиДрайвераДляОборудования(ПодключаемоеОборудование, Признак) Экспорт
	
	УстановитьПризнакПереустановкиДрайвера(ПодключаемоеОборудование.РабочееМесто, ПодключаемоеОборудование.ДрайверОборудования, Признак);
	
КонецПроцедуры

// Обновить установленные драйвера по справочнику подключаемого оборудования.
//
Процедура ОбновитьУстановленныеДрайвера(ТипОборудования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	ПодключаемоеОборудование.Ссылка
							|ИЗ
							|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
							|ГДЕ
							|	(ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)");
							
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Истина;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости установки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакУстановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяУстановка = &ТребуетсяУстановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяУстановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяУстановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;  
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает типы используемого оборудования для текущего рабочего места.
// 
Функция ТипыИспользуемогоОборудованияТекущегоРабочегоМеста()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.УстройствоИспользуется
		|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто");
		
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		
		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("ТипОборудования");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Производит разложение данных дорожек магнитной карты по шаблонам.   
//
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.СчитывателиМагнитныхКарт") Тогда
		ИмяМодуля = "Справочники.ШаблоныМагнитныхКарт";
		МодульШаблоныМагнитныхКарт = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Возврат МодульШаблоныМагнитныхКарт.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистема ""СчитывателиМагнитныхКарт"" недоступна.'");
	КонецЕсли;
	
КонецФункции

// Получить описание драйвера XML пакета.
//
Функция ПолучитьОписаниеДрайвера(Данные) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("НаименованиеДрайвера");
	Параметры.Вставить("ОписаниеДрайвера");
	Параметры.Вставить("ТипОборудования");
	Параметры.Вставить("ВерсияДрайвера");
	Параметры.Вставить("ВерсияИнтеграционногоКомпонента");
	Параметры.Вставить("ИнтеграционныйКомпонент");
	Параметры.Вставить("ОсновнойДрайверУстановлен");
	Параметры.Вставить("URLЗагрузкиДрайвера");

	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DriverDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НаименованиеДрайвера      = ЧтениеXML.ЗначениеАтрибута("Name");
			ОписаниеДрайвера          = ЧтениеXML.ЗначениеАтрибута("Description");
			ТипОборудования           = ЧтениеXML.ЗначениеАтрибута("EquipmentType");
			ВерсияДрайвера            = ЧтениеXML.ЗначениеАтрибута("DriverVersion");
			ВерсияИнтеграционногоКомпонента = ЧтениеXML.ЗначениеАтрибута("IntegrationComponentVersion");
			ИнтеграционныйКомпонент   = ВРег(ЧтениеXML.ЗначениеАтрибута("IntegrationComponent")) = "TRUE";
			ОсновнойДрайверУстановлен = ВРег(ЧтениеXML.ЗначениеАтрибута("MainDriverInstalled")) = "TRUE";
			URLЗагрузкиДрайвера       = ЧтениеXML.ЗначениеАтрибута("DownloadURL");
			Параметры.НаименованиеДрайвера = НаименованиеДрайвера;
			Параметры.ОписаниеДрайвера = ОписаниеДрайвера;
			Параметры.ТипОборудования = ТипОборудования;
			Параметры.ВерсияДрайвера = ВерсияДрайвера;
			Параметры.ВерсияИнтеграционногоКомпонента = ВерсияИнтеграционногоКомпонента;
			Параметры.ИнтеграционныйКомпонент = ИнтеграционныйКомпонент;
			Параметры.ОсновнойДрайверУстановлен = ОсновнойДрайверУстановлен;
			Параметры.URLЗагрузкиДрайвера = URLЗагрузкиДрайвера;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#Область ПрограммныйИнтерфейсТСД   

// Получить таблицу товаров из XML структуры для ТСД.
//
// Возвращаемое значение
//  Массив
//
Функция ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция) Экспорт
	
	Результат = Новый Массив();
	
	АлкогольнаяПродукция = Ложь;
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ПозицияДанных = Новый Структура();
					
					Штрихкод = ЧтениеXML.ЗначениеАтрибута("BarCode");
					ШтрихкодBase64 = ЧтениеXML.ЗначениеАтрибута("BarCodeBase64");
					ШтрихкодУпаковки = ЧтениеXML.ЗначениеАтрибута("ContainerBarcode");
					ШтрихкодУпаковкиBase64 = ЧтениеXML.ЗначениеАтрибута("ContainerBarcodeBase64");
					
					Если Не ПустаяСтрока(ШтрихкодBase64) Тогда
						Штрихкод = Base64ВШтрихкод(ШтрихкодBase64);
					КонецЕсли;
					Если Не ПустаяСтрока(ШтрихкодУпаковкиBase64) Тогда
						ШтрихкодУпаковки = Base64ВШтрихкод(ШтрихкодУпаковкиBase64);
					КонецЕсли;
					
					ПозицияДанных.Вставить("Штрихкод"  , Штрихкод);
					ПозицияДанных.Вставить("Количество", ЧтениеXML.ЗначениеАтрибута("Quantity"));
					ПозицияДанных.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки);
					
					// Атрибуты для поддержки интеграции с ЕГАИС.
					ШтрихкодМаркиАлкогольнойПродукции = ЧтениеXML.ЗначениеАтрибута("AlcoholExciseStamp");
					Если Не ПустаяСтрока(ШтрихкодМаркиАлкогольнойПродукции) Тогда
						АлкогольнаяПродукция = Истина;
					КонецЕсли;
						
					ПозицияДанных.Вставить("ШтрихкодМаркиАлкогольнойПродукции", ШтрихкодМаркиАлкогольнойПродукции);
					ПозицияДанных.Вставить("НаименованиеАлкогольнойПродукции" , ЧтениеXML.ЗначениеАтрибута("AlcoholName"));
					ПозицияДанных.Вставить("СерийныйНомерАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholSerialNumber"));
					ПозицияДанных.Вставить("КодВидаАлкогольнойПродукции", ЧтениеXML.ЗначениеАтрибута("AlcoholKindCode"));
					ПозицияДанных.Вставить("КодАлкогольнойПродукции"    , ЧтениеXML.ЗначениеАтрибута("AlcoholCode"));
					ПозицияДанных.Вставить("ЕмкостьТары"                , ЧтениеXML.ЗначениеАтрибута("AlcoholContainerSize"));
					ПозицияДанных.Вставить("Крепость"                   , ЧтениеXML.ЗначениеАтрибута("AlcoholStrength"));
					ПозицияДанных.Вставить("ИННПроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorINNCode"));
					ПозицияДанных.Вставить("КПППроизводителя"           , ЧтениеXML.ЗначениеАтрибута("VendorKPPCode"));
					Результат.Добавить(ПозицияДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД.
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки, ПолнаяВыгрузка, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	ЗаписьXML.ЗаписатьАтрибут("FullLoad", XMLСтрока(ПолнаяВыгрузка));
	
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		
		НаименованиеНоменклатуры = "";
		Если Позиция.Свойство("Номенклатура") Тогда
			НаименованиеНоменклатуры = Строка(Позиция.Номенклатура);
		КонецЕсли;
		Если ПустаяСтрока(НаименованиеНоменклатуры) И Позиция.Свойство("Наименование") Тогда
			НаименованиеНоменклатуры = Позиция.Наименование;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		Если РевизияИнтерфейса >= 3003 Тогда
			
			Если Позиция.Свойство("ШтрихкодBase64") И Не ПустаяСтрока(Позиция.ШтрихкодBase64) Тогда
				ШтрихкодBase64 = Позиция.ШтрихкодBase64
			Иначе
				ШтрихкодBase64 = ШтрихкодВBase64(Позиция.Штрихкод)
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("BarCodeBase64" , XMLСтрока(ШтрихкодBase64));
			
			Если Позиция.Свойство("ШтрихкодУпаковкиBase64") И Не ПустаяСтрока(Позиция.ШтрихкодУпаковкиBase64) Тогда
				ШтрихкодУпаковкиBase64 = Позиция.ШтрихкодУпаковкиBase64
			ИначеЕсли Позиция.Свойство("ШтрихкодУпаковки") И Не ПустаяСтрока(Позиция.ШтрихкодУпаковки) Тогда
				ШтрихкодУпаковкиBase64 = ШтрихкодВBase64(Позиция.ШтрихкодУпаковки);
			КонецЕсли;
			Если Не ПустаяСтрока(ШтрихкодУпаковкиBase64) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("ContainerBarcodeBase64", XMLСтрока(ШтрихкодУпаковкиBase64));
			КонецЕсли; 
			
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("BarCode"         , XMLСтрока(?(Позиция.Свойство("Штрихкод"), Позиция.Штрихкод, "")));
			Если Позиция.Свойство("ШтрихкодУпаковки") И Не ПустаяСтрока(Позиция.ШтрихкодУпаковки) Тогда
				ЗаписьXML.ЗаписатьАтрибут("ContainerBarcode", XMLСтрока(Позиция.Свойство("ШтрихкодУпаковки")));
			КонецЕсли;
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("Name" , XMLСтрока(НаименованиеНоменклатуры));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement"            , XMLСтрока(?(Позиция.Свойство("ЕдиницаИзмерения"), Позиция.ЕдиницаИзмерения, "")));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature" , XMLСтрока(?(Позиция.Свойство("ХарактеристикаНоменклатуры"), Позиция.ХарактеристикаНоменклатуры, "")));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature"         , XMLСтрока(?(Позиция.Свойство("СерияНоменклатуры"), Позиция.СерияНоменклатуры, "")));
		ЗаписьXML.ЗаписатьАтрибут("Quality"                      , XMLСтрока(?(Позиция.Свойство("Качество")  , Позиция.Качество, "")));
		ЗаписьXML.ЗаписатьАтрибут("Price"                        , XMLСтрока(?(Позиция.Свойство("Цена")      , Позиция.Цена, 0)));
		ЗаписьXML.ЗаписатьАтрибут("Quantity"                     , XMLСтрока(?(Позиция.Свойство("Количество"), Позиция.Количество, 0)));
		ЗаписьXML.ЗаписатьАтрибут("Article"                      , XMLСтрока(?(Позиция.Свойство("Артикул")   , Позиция.Артикул, "")));
		Алкоголь = ?(Позиция.Свойство("Алкоголь"), Позиция.Алкоголь, Ложь);
		ЗаписьXML.ЗаписатьАтрибут("Alcohol", XMLСтрока(Алкоголь));
		Если Алкоголь = Истина Тогда
			ЗаписьXML.ЗаписатьАтрибут("AlcoholExcisable"     , XMLСтрока(?(Позиция.Свойство("Маркируемый")                , Позиция.Маркируемый, Ложь)));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholKindCode"      , XMLСтрока(?(Позиция.Свойство("КодВидаАлкогольнойПродукции"), Позиция.КодВидаАлкогольнойПродукции, "")));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholCode"          , XMLСтрока(?(Позиция.Свойство("КодАлкогольнойПродукции")    , Позиция.КодАлкогольнойПродукции, "")));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholContainerSize" , XMLСтрока(?(Позиция.Свойство("ЕмкостьТары")                , Позиция.ЕмкостьТары, Неопределено)));
			ЗаписьXML.ЗаписатьАтрибут("AlcoholStrength"      , XMLСтрока(?(Позиция.Свойство("Крепость")                   , Позиция.Крепость, Неопределено)));
			ЗаписьXML.ЗаписатьАтрибут("VendorINNCode"        , XMLСтрока(?(Позиция.Свойство("ИННПроизводителя")           , Позиция.ИННПроизводителя, Неопределено)));
			ЗаписьXML.ЗаписатьАтрибут("VendorKPPCode"        , XMLСтрока(?(Позиция.Свойство("КПППроизводителя")           , Позиция.КПППроизводителя, Неопределено)));
			Если РевизияИнтерфейса >= 3003 Тогда
				Если Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукцииBase64") И Не ПустаяСтрока(Позиция.ШтрихкодМаркиАлкогольнойПродукцииBase64) Тогда
					ШтрихкодМаркиАлкогольнойПродукцииBase64 = Позиция.ШтрихкодМаркиАлкогольнойПродукцииBase64
				Иначе
					ШтрихкодМаркиАлкогольнойПродукцииBase64 = ШтрихкодВBase64(Позиция.ШтрихкодМаркиАлкогольнойПродукции)
				КонецЕсли;
				ЗаписьXML.ЗаписатьАтрибут("AlcoholExciseStamp", XMLСтрока(?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции") , Позиция.ШтрихкодМаркиАлкогольнойПродукции, Неопределено)));
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("AlcoholExciseStamp", XMLСтрока(?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции") , Позиция.ШтрихкодМаркиАлкогольнойПродукции, Неопределено)));
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровТСД(МассивТоваров, ПолнаяВыгрузка);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсВесыСПечатьюЭтикеток  

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"          , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"        , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description"  , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"    , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("IsWeightGoods", XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//      
Функция ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

#КонецОбласти

// Получить таблицу меток RFID.
//
// Возвращаемое значение
//  Массив
// 
Функция МеткиRFID(ДанныеМеток) Экспорт
	
	Результат = Новый Массив();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ДанныеМеток);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "Tag" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				// Получение банков памяти считанной метки.
				TID = ЧтениеXML.ЗначениеАтрибута("TID");
				EPC = ЧтениеXML.ЗначениеАтрибута("EPC");
				USER = ЧтениеXML.ЗначениеАтрибута("USER");
				// Декодирование банка EPC по формату SGTIN.  
				ПозицияДанных = МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(EPC);
				ПозицияДанных.Вставить("TID" , TID);  // Добавляем в структура значения TID чипа метки.
				ПозицияДанных.Вставить("USER", USER); // Добавляем в структура значения банка USER.
				ПозицияДанных.Вставить("UserMemory", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(USER));
				
				Результат.Добавить(ПозицияДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру с описанием макета.
//
// Параметры:
//  Источник - Строка - источник события.
//  СообщениеОбОшибке - Строка - сообщение пользователю об ошибке
//  Результат - см. СоздатьОписаниеМакета
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = СоздатьОписаниеМакета();
	
	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);
	
	ШаблонСообщенияОбОшибке = НСтр("ru='При чтении файла атрибута %1 элемента %2 произошла ошибка.'");
	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл
		
		ЗначениеАтрибута = Неопределено;
		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
				Результат.Ширина = Число(ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Width", "Formatting");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Height", "Formatting");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Ориентация", 0);
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			НовоеПоле = Новый Структура;
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);
			
			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FieldName", "UserData");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда
				
				Если ЗначениеАтрибута=Неопределено Тогда
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "TypeFill", "UserData");
					Возврат Ложь;
				КонецЕсли;
				
				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);
				
				Если ЗначениеАтрибута="Parameter" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						Если ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Value", "UserData");
							Возврат Ложь;
						Иначе
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Value", "UserData");
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "TypeFill", "UserData");
				Возврат Ложь;
			КонецЕсли;
			
			Если НовоеПоле.Тип<>"UserData" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Left", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Top", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Width", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Height", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));
				КонецЕсли;
				
				Если НовоеПоле.Тип="Text" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FontSize", "Text");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;
					
				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Type", "Barcode");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;
					Иначе
						ПодписьШтрихкода = Истина;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FontSize", "Barcode");
							ШаблонДополнение = НСтр("ru='При значении атрибута %1 = %2 указание значения атрибута %3 обязательно.'");
							СообщениеОбОшибке = СообщениеОбОшибке + Символы.НПП + СтрШаблон(ШаблонДополнение, "PrintHRI", "True", "FontSize");
							Возврат Ложь;
						КонецЕсли;
						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);
						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
			КонецЕсли;
			Результат.Поля.Добавить(НовоеПоле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Создает описание макета.
// 
// Возвращаемое значение:
// Структура - структура с полями:
//  * Поля - Массив - массив полей.
//  * Ширина - Число - ширина макета.
//  * Высота - Число - высота макета.
//  * Ориентация - Число - ориентация макета.
//  * Масштаб - Число - масштаб.
//
Функция СоздатьОписаниеМакета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);
	Результат.Вставить("Ширина", 0);
	Результат.Вставить("Высота", 0);
	Результат.Вставить("Ориентация", 0);
	Результат.Вставить("Масштаб", 0);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки, РевизияИнтерфейса = 0) Экспорт
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда
					
					Если ТекЭлемент.Свойство("Ориентация") Тогда
						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;
					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;
					
					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);
					
				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда
				
				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					Если ТекЭлемент.Тип = "Text"
						И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					ИначеЕсли ТекЭлемент.Тип = "Barcode" И РевизияИнтерфейса > 3002 Тогда
						ШтрихкодBase64 = ШтрихкодВBase64(ТекЭлемент.ЗначениеПоУмолчанию);
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				ИначеЕсли ТекЭлемент.Тип = "Barcode" И РевизияИнтерфейса > 3002 Тогда
					ШтрихкодBase64 = ШтрихкодВBase64(ТекЭлемент.Значение);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
				
				СтильШрифта = "";
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ВыравниваниеГоризонтальное = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ВыравниваниеГоризонтальное = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;
				КонецЕсли;

				ВыравниваниеВертикальное = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВыравниваниеВертикальное = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ВыравниваниеГоризонтальное);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВыравниваниеВертикальное);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");
	
	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");
		
		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;
		
		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗначениеЭлемента = Неопределено;
			Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл
				Если ТекЭлемент.Наименование = ТекПоле.ИмяПоля Тогда
					ЗначениеЭлемента = ТекЭлемент;
					Прервать;
				КонецЕсли
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				Если РевизияИнтерфейса > 3002 И ЗначениеЭлемента <> Неопределено И ЗначениеЭлемента.Тип = "Barcode" Тогда
					ШтрихкодBase64 = ШтрихкодВBase64(ТекПоле.Значение);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
				КонецЕсли;
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат = ЗаписьXML.Закрыть(); 
	
	Возврат Результат;
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция формирует XML-описание макета.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
КонецФункции

// Функция получения кодировки файла.
//
// Параметры:
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
// Возвращаемое значение:
//  КодировкаТекста 
//
Функция ПолучитьКодировкуФайла(Кодировка = Неопределено) Экспорт
	
	Если Кодировка = Неопределено ИЛИ Кодировка = "UTF8" Тогда
		Кодировка = КодировкаТекста.UTF8;
	ИначеЕсли Кодировка = "ANSI" Тогда
		Кодировка = КодировкаТекста.ANSI;
	ИначеЕсли Кодировка = "OEM" Тогда
		Кодировка = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF16" Тогда
		Кодировка = КодировкаТекста.UTF16;
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции

// Процедура получения содержания текстовых файлов.
//
// Параметры:
//  ПомещаемыеФайлы - Массив - Массив bз Файл- имя файла или массив с именами файлов.
//  Кодировка - КодировкаТекста - Кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
Функция ПолучитьСодержаниеТекстовыхФайлов(ПомещаемыеФайлы, Кодировка = Неопределено) Экспорт
	
	СодержаниеФайлов = Новый Массив;
	РезультатЧтенияФайлов = Новый Структура;
	РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
	РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
	
	Для Каждого Файл Из ПомещаемыеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'При чтении файла %ИмяФайла% произошла ошибка'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
			
			РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
			Возврат РезультатЧтенияФайлов;
			
		КонецПопытки;
		
		СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
		СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
		
		СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
		ЧтениеТекста.Закрыть();
		
	КонецЦикла;
	
	РезультатЧтенияФайлов.Успешно = Истина;
	РезультатЧтенияФайлов.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтенияФайлов;
	
КонецФункции

// Функция получает содержание текстовых файлов из временного хранилища.
//
// Параметры: 
//   ПомещенныеФайлы - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание.
// Возвращаемое значение: 
//   РезультатЧтения - Структура:
//    * Успешно - булево.
//    * СодержаниеФайлов - массив структур, с ключами ОписаниеПереданногоФайла и ТекстСодержания или Неопределено, в случае Успешно = Ложь.
//    * ТекстОшибки - строка.
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение); //ТекстовыйДокумент
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОписаниеОшибки();
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Функция выполняет проверку дублирования кодов в массивах групп товаров и товаров подготавливаемых для ККМ-Offline.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
//   ГруппыТоваров  - массив, список групп товаров.
//   Товары  - массив, список товаров.
//   Коды  - строка, строка в которую через ", " будут перечислены дублирующиеся коды.
// Возвращаемое значение: 
//   Булево - если есть дублирование, возвращает Истина, иначе Ложь.
//
Функция ПроверитьДублированиеКодов(РасширеннаяВыгрузка, ГруппыТоваров, Товары, Коды) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Количество");
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из ГруппыТоваров Цикл
			ДобавитьЭлементВКоллекцию(ТекГруппа, ТЗ);
		КонецЦикла;
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьКодыТоваров(ТЗ, ТекТовар, "Товар");
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекТовар Из Товары Цикл
			ДобавитьЭлементВКоллекцию(ТекТовар, ТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗ.Свернуть("Код", "Количество");
	
	ЕстьДублированиеКодов = Ложь;
	
	ДублирующиесяКоды = "";
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		Если ТекСтрока.Количество > 1 Тогда
			
			Если НЕ ЕстьДублированиеКодов Тогда
				ЕстьДублированиеКодов = Истина;
				Коды = Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			Иначе
				Коды = Коды + ", " + Формат(ТекСтрока.Код, "ЧН=0; ЧГ=0");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДублированиеКодов Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#Область ПрограммныйИнтерфейсККТ

#Область ФискальныеОперации

// Записать операцию в журнал фискальных операций.
//
Процедура ЗаписатьФискальнуюОперацию(ПараметрыФискализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ПараметрыФискализации.ИдентификаторФискальнойЗаписи) Тогда
		ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	Иначе
		ИдентификаторЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
	КонецЕсли;
	// ФискальныеОперации
	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Дата = ПараметрыФискализации.ДатаВремяЧека;
	НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;                                 
	НоваяСтрока.ДокументОснование = ПараметрыФискализации.ДокументОснование;
	НоваяСтрока.ФискальныйПризнак = ПараметрыФискализации.ФискальныйПризнак;
	НоваяСтрока.ТипДокумента      = ПараметрыФискализации.ТипДокумента; 
	НоваяСтрока.Организация       = ПараметрыФискализации.Организация;
	НоваяСтрока.ТорговыйОбъект    = ПараметрыФискализации.ТорговыйОбъект;
	НоваяСтрока.ТипРасчета        = ПараметрыФискализации.ТипРасчета;
	НоваяСтрока.НомерСменыККМ     = ПараметрыФискализации.НомерСменыККТ;
	НоваяСтрока.НомерЧекаККМ      = ПараметрыФискализации.НомерЧекаККТ;
	НоваяСтрока.Сумма            = ПараметрыФискализации.СуммаЧека;
	НоваяСтрока.ОплатаНаличные   = ПараметрыФискализации.ОплатаНаличные;
	НоваяСтрока.ОплатаЭлектронно = ПараметрыФискализации.ОплатаЭлектронно;
	НоваяСтрока.ОплатаПостоплата = ПараметрыФискализации.ОплатаПостоплата;
	НоваяСтрока.ОплатаПредоплата = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ОплатаВстречноеПредоставление = ПараметрыФискализации.ОплатаВстречноеПредоставление;
	НоваяСтрока.ДополнительныйРеквизит  = ПараметрыФискализации.ДополнительныйРеквизит;
	НоваяСтрока.АдресСайтаПроверки      = ПараметрыФискализации.АдресСайтаПроверки;
	НоваяСтрока.ЗаводскойНомерФН        = ПараметрыФискализации.ЗаводскойНомерФН;
	НоваяСтрока.РегистрационныйНомерККТ = ПараметрыФискализации.РегистрационныйНомерККТ; 
	НоваяСтрока.КорректируемыйДокумент  = ПараметрыФискализации.КорректируемыйДокумент;
	НоваяСтрока.СубъектПерсональныхДанных = ПараметрыФискализации.СубъектПерсональныхДанных;
	НоваяСтрока.ЕдиныйЧек				= ПараметрыФискализации.ЕдиныйЧек;
	
	Если ПараметрыФискализации.ДанныеЧекаXML <> Неопределено Тогда
		НоваяСтрока.ДанныеXML = Новый ХранилищеЗначения(ПараметрыФискализации.ДанныеЧекаXML);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//
Функция ДанныеФискальнойОперации(ДокументСсылка, ИдентификаторЗаписи = Неопределено, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,  
	|	ФискальныеОперации.Дата                    КАК Дата,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма,         
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,  
	|	ФискальныеОперации.ЕдиныйЧек               КАК ЕдиныйЧек,  
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ИдентификаторЗаписи = Неопределено, "", " И (ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи)")
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ИдентификаторЗаписи <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	КонецЕсли;
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("Дата");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ЕдиныйЧек");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		Возврат ФискальнаяОперация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить данные журнала фискальных операций.
//
// Параметры:
//  ИдентификаторЗаписи - Идентификатор записи.
// 
Функция ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.Дата                    КАК Дата,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,  
	|	ФискальныеОперации.ЕдиныйЧек               КАК ЕдиныйЧек,  
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ИдентификаторЗаписи = &ИдентификаторЗаписи)");
	
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("Дата");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ЕдиныйЧек");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		Возврат ФискальнаяОперация;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить список журнала фискальных операций.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * НомерСменыККМ - Число - Номер чека ККМ.
//   * Сумма - Число - Сумма.
//   * ДокументОснование - ДокументСсылка - Документ-основание.
//
Функция СписокФискальныхОпераций(ДокументСсылка, ТипыДокументов = Неопределено, ТипРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	ФискальныеОперации.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
	|	ФискальныеОперации.НомерСменыККМ           КАК НомерСменыККМ,
	|	ФискальныеОперации.ТипДокумента            КАК ТипДокумента,
	|	ФискальныеОперации.ТипРасчета              КАК ТипРасчета,
	|	ФискальныеОперации.Организация             КАК Организация,
	|	ФискальныеОперации.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ФискальныеОперации.ЗаводскойНомерФН        КАК ЗаводскойНомерФН, 
	|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	ФискальныеОперации.ДокументОснование       КАК ДокументОснование, 
	|	ФискальныеОперации.КорректируемыйДокумент  КАК КорректируемыйДокумент,
	|	ФискальныеОперации.Сумма                   КАК Сумма, 
	|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак,
	|	ФискальныеОперации.ДополнительныйРеквизит  КАК ДополнительныйРеквизит,
	|	ФискальныеОперации.ДанныеXML               КАК ДанныеXML
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	(ФискальныеОперации.ДокументОснование = &ДокументСсылка)"
		+ ?(ТипыДокументов = Неопределено, "", " И (ФискальныеОперации.ТипДокумента В (&ТипыДокументов))")
		+ ?(ТипРасчета = Неопределено, "", " И (ФискальныеОперации.ТипРасчета = &ТипРасчета)")
		+ " УПОРЯДОЧИТЬ ПО ФискальныеОперации.Дата УБЫВ, ФискальныеОперации.НомерСменыККМ УБЫВ");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Если ТипыДокументов <> Неопределено Тогда
		// Подготовка типов документов для запроса.
		МассивТипыДокументов = Новый Массив();
		Если ТипЗнч(ТипыДокументов) = Тип("Массив") Тогда
			Для Каждого ТипДокумента Из ТипыДокументов Цикл
				МассивТипыДокументов.Добавить(ТипДокумента);
			КонецЦикла;
		Иначе
			МассивТипыДокументов.Добавить(ТипыДокументов);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипыДокументов", МассивТипыДокументов);
	КонецЕсли;
	
	Если ТипРасчета <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТипРасчета", ТипРасчета);
	КонецЕсли;
	
	СписокОпераций = Новый Массив(); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФискальнаяОперация = Новый Структура;
		ФискальнаяОперация.Вставить("ИдентификаторЗаписи");
		ФискальнаяОперация.Вставить("НомерЧекаККМ");
		ФискальнаяОперация.Вставить("НомерСменыККМ");
		ФискальнаяОперация.Вставить("ЗаводскойНомерФН");
		ФискальнаяОперация.Вставить("РегистрационныйНомерККТ");
		ФискальнаяОперация.Вставить("ТипДокумента");
		ФискальнаяОперация.Вставить("ТипРасчета");
		ФискальнаяОперация.Вставить("Организация");
		ФискальнаяОперация.Вставить("ТорговыйОбъект");
		ФискальнаяОперация.Вставить("Сумма");
		ФискальнаяОперация.Вставить("ДокументОснование");
		ФискальнаяОперация.Вставить("КорректируемыйДокумент");
		ФискальнаяОперация.Вставить("ФискальныйПризнак");
		ФискальнаяОперация.Вставить("ДополнительныйРеквизит");
		ФискальнаяОперация.Вставить("ДанныеXML");
		ЗаполнитьЗначенияСвойств(ФискальнаяОперация, Выборка);
		СписокОпераций.Добавить(ФискальнаяОперация);
	КонецЦикла;
	
	Возврат СписокОпераций;
	
КонецФункции

#КонецОбласти

#Область ОчередьЧековККТ

// Добавить чек в очередь чеков ККТ.
//
// Параметры:
//  ПараметрыЧекаККТ - Структура - Параметры чека ККТ:
//  * ПозицииЧека - Массив из См. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека - .
// 
Функция ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ) Экспорт
	                                            
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи) Тогда
		ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	Иначе
		ИдентификаторЗаписи = ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи;
	КонецЕсли;
	
	// ОчередьЧековККТ
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыЧекаККТ.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ФискальнаяОперации = ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи);
		
		НоваяСтрока = НаборЗаписей.Добавить();
		Если ФискальнаяОперации <> Неопределено И Не ПустаяСтрока(ФискальнаяОперации.ФискальныйПризнак) Тогда
			НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован;
		Иначе
			НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Новый;
		КонецЕсли;
		НоваяСтрока.Дата = МенеджерОборудованияВызовСервера.ПолучитьДатаСеанса();
		НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
		НоваяСтрока.ДокументОснование = ПараметрыЧекаККТ.ДокументОснование;
		НоваяСтрока.ТипДокумента      = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
		НоваяСтрока.Организация       = ПараметрыЧекаККТ.Организация;
		НоваяСтрока.ОрганизацияИНН    = ПараметрыЧекаККТ.ОрганизацияИНН;
		НоваяСтрока.СистемаНалогообложения = ПараметрыЧекаККТ.СистемаНалогообложения;
		НоваяСтрока.ТорговыйОбъект    = ПараметрыЧекаККТ.ТорговыйОбъект;         
		НоваяСтрока.СубъектПерсональныхДанных = ПараметрыЧекаККТ.СубъектПерсональныхДанных;
		НоваяСтрока.ТипРасчета        = ПараметрыЧекаККТ.ТипРасчета;
		Содержание = "";
		Сумма = 0;
		Для Каждого ПозицияЧека Из ПараметрыЧекаККТ.ПозицииЧека Цикл 
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Сумма = Сумма + ПозицияЧека.Сумма;
				Если Не ПустаяСтрока(Содержание) Тогда
					Содержание = Содержание + Символы.НПП + ПозицияЧека.Наименование
				Иначе
					Содержание = ПозицияЧека.Наименование
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Сумма      = Сумма;
		НоваяСтрока.Содержание = Содержание;
		НоваяСтрока.ДанныеЧека = Новый ХранилищеЗначения(ПараметрыЧекаККТ);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СоздатьСообщениеФискализации(ИдентификаторЗаписи, ПараметрыЧекаККТ.ОрганизацияИНН);
	
	Возврат ИдентификаторЗаписи;
	
КонецФункции

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - Идентификатор записи.
// 
Функция ДанныеЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЧековККТ.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента            КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета              КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация             КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека              КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование       КАК ДокументОснование, 
	|	ОчередьЧековККТ.Сумма                   КАК Сумма, 
	|	ОчередьЧековККТ.ДанныеЧека              КАК ДанныеЧека
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	(ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи)
	|УПОРЯДОЧИТЬ ПО ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		ДанныеЧека.Вставить("ДанныеЧека", Выборка.ДанныеЧека.Получить());
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Чеки в очереди на фискализацию.
//
Функция ЧекиВОчередиНаФискализацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьЧековККТ.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента            КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета              КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация             КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека              КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект          КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование       КАК ДокументОснование, 
	|	ОчередьЧековККТ.Сумма                   КАК Сумма
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	(ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Новый)) ИЛИ
	|	(ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Ошибка))
	|УПОРЯДОЧИТЬ ПО ОчередьЧековККТ.Дата УБЫВ");
	
	ЧекиНаФискализацию = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		ЧекиНаФискализацию.Добавить(ДанныеЧека);
	КонецЦикла;
	
	Возврат ЧекиНаФискализацию;
	
КонецФункции

// Удалить чек из очереди.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
Процедура УдалитьЧекИзОчереди(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументСсылка);
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Очистить очередь чеков.
//
Процедура ОчиститьОчередьЧеков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Записать статус чека в очереди.
//
Процедура ЗаписатьСтатусЧекаВОчереди(ПараметрыФискализации, СтатусЧека, ОборудованиеККТ = Неопределено, ТекстОшибки = Неопределено) Экспорт
	                                            
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ПараметрыФискализации.ИдентификаторФискальнойЗаписи) Тогда
		ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	Иначе
		ИдентификаторЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
	КонецЕсли;
	
	// ОчередьЧековККТ
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	НаборЗаписей.Прочитать();
	
	Для Каждого НоваяСтрока из НаборЗаписей Цикл
		НоваяСтрока.СтатусЧека  = СтатусЧека;     
		НоваяСтрока.ТекстОшибки = ТекстОшибки;
		Если ОборудованиеККТ <> Неопределено Тогда
			НоваяСтрока.ОборудованиеККТ  = ОборудованиеККТ; 
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
		ИдентификаторФискальнойЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
		РезультатФискализации = ФискальнаяОперацииПоИдентификатору(ИдентификаторФискальнойЗаписи);
		МенеджерОборудованияВызовСервераПереопределяемый.ФискализацияЧекаВОчереди(ИдентификаторФискальнойЗаписи, ПараметрыФискализации, ОборудованиеККТ, РезультатФискализации);
	КонецЕсли;
	
КонецПроцедуры

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - Идентификатор записи.
// 
Функция ПолучитьСтатусЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЧековККТ.ИдентификаторЗаписи     КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.СтатусЧека              КАК СтатусЧека,
	|	ФискальныеОперации.ФискальныйПризнак    КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ        КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ         КАК НомерЧекаККМ,
	|	ФискальныеОперации.ЗаводскойНомерФН     КАК ЗаводскойНомерФН,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|	ПО ОчередьЧековККТ.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи
	|ГДЕ
	|	(ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи)
	|УПОРЯДОЧИТЬ ПО ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ДанныеЧека.Вставить("ЗаводскойНомерФН");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ТекстОшибки");
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Данные чека из очереди по фискальный признаку и номеру чеку ККМ.
//
// Параметры:
//  ФискальныйПризнак - Фискальный признак
//  НомерЧекаККМ - Номер чека ККМ 
// 
Функция ПолучитьФискальнуюОперацию(ФискальныйПризнак, НомерЧекаККМ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "ВЫБРАТЬ ПЕРВЫЕ 1                          
	|	ОчередьЧековККТ.ДокументОснование    КАК ДокументОснование,
	|	ОчередьЧековККТ.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.ФискальныйПризнак    КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ        КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ         КАК НомерЧекаККМ
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|	ПО ОчередьЧековККТ.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи
	|ГДЕ
	|	(ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак)";
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Текст = Текст + Символы.НПП + "И (ФискальныеОперации.НомерЧекаККМ = &НомерЧекаККМ)";
	КонецЕсли;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ФискальныйПризнак", ФискальныйПризнак);
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Запрос.УстановитьПараметр("НомерЧекаККМ", Число(НомерЧекаККМ));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаспределеннаяФискализации

Функция ОбсуждениеФискализации() Экспорт
	
	Обсуждение = Неопределено;
	
	Если НЕ МенеджерОборудованияВызовСервераПереопределяемый.ДоступноРаспределеннаяФискализации() Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторОбсужденияСтрока = Константы.ИдентификаторОбсужденияФискализации.Получить();
	Попытка
		Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
			ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
		КонецЕсли;
		
		Если Обсуждение = Неопределено Тогда
			Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Отображаемое = Ложь;
			Обсуждение.Заголовок = НСтр("ru='Фискализация чеков'");
			Обсуждение.Ключ = Строка(Новый УникальныйИдентификатор);
			Обсуждение.Записать();
			Константы.ИдентификаторОбсужденияФискализации.Установить(Строка(Обсуждение.Идентификатор));
		КонецЕсли;
	
		// Добавить текущего пользователя в обсуждение.
		Если НЕ Обсуждение.Участники.Содержит(СистемаВзаимодействия.ИдентификаторТекущегоПользователя()) Тогда
			Обсуждение.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
			Обсуждение.Записать();
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Обсуждение.Идентификатор;
	
КонецФункции

Процедура СоздатьСообщениеФискализации(ИдентификаторЧека, ОрганизацияИИН = Неопределено) Экспорт
	
	Если НЕ МенеджерОборудованияВызовСервераПереопределяемый.ДоступноРаспределеннаяФискализации() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ИдентификаторОбсужденияСтрока = Константы.ИдентификаторОбсужденияФискализации.Получить();
		Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
			ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
			НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсуждения);
			НовоеСообщение.Дата = ТекущаяДата();
			ТекстСообщения = НСтр("ru='Фискализация чека'") + Символы.НПП + ИдентификаторЧека;
			Если Не ПустаяСтрока(ОрганизацияИИН) Тогда
				ТекстСообщения = ТекстСообщения + Символы.НПП + ОрганизацияИИН;
			КонецЕсли;
			НовоеСообщение.Текст = ТекстСообщения;
			НовоеСообщение.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Сформировать таблицу параметров в XML для операции с ФН.
//
Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ParametersFiscal");
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN"  , XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
		// Код причины перерегистрации.
		ЗаписьXML.ЗаписатьАтрибут("RegistrationReasonCode", XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
		// Коды причин изменения сведений о ККТ.
		Если Не ПустаяСтрока(СтруктураПараметров.КодыПричинИзмененияСведений) Тогда
			ЗаписьXML.ЗаписатьАтрибут("RegistrationLabelCodes", XMLСтрока(СтруктураПараметров.КодыПричинИзмененияСведений));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("KKTNumber"         , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
		ЗаписьXML.ЗаписатьАтрибут("CompanyName"       , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
		ЗаписьXML.ЗаписатьАтрибут("INN"               , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
		ЗаписьXML.ЗаписатьАтрибут("SaleAddress"       , XMLСтрока(СтруктураПараметров.АдресПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("SaleLocation"      , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystems"   , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("IsOffline"         , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
		ЗаписьXML.ЗаписатьАтрибут("IsEncrypted"       , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
		ЗаписьXML.ЗаписатьАтрибут("IsService"         , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
		ЗаписьXML.ЗаписатьАтрибут("IsExcisable"       , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
		ЗаписьXML.ЗаписатьАтрибут("IsGambling"        , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
		ЗаписьXML.ЗаписатьАтрибут("IsLottery"         , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
		ЗаписьXML.ЗаписатьАтрибут("AgentTypes"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
		ЗаписьXML.ЗаписатьАтрибут("BSOSing"           , XMLСтрока(СтруктураПараметров.ПризнакФормированияБСО));
		ЗаписьXML.ЗаписатьАтрибут("IsOnlineOnly"      , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
		ЗаписьXML.ЗаписатьАтрибут("IsAutomaticPrinter", XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
		ЗаписьXML.ЗаписатьАтрибут("IsAutomatic"       , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"   , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompany"        , XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
		ЗаписьXML.ЗаписатьАтрибут("OFDCompanyINN"     , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
		Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.АдресСайтаФНС) Тогда
			ЗаписьXML.ЗаписатьАтрибут("FNSURL", XMLСтрока(СтруктураПараметров.АдресСайтаФНС));
		КонецЕсли;
	
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(?(СтруктураПараметров.Свойство("Кассир")   , XMLСтрока(СтруктураПараметров.Кассир), НСтр("ru='Администратор'"))));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(?(СтруктураПараметров.Свойство("КассирИНН"), XMLСтрока(СтруктураПараметров.КассирИНН), "")));
		// ФФД 1.0.0
		ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
		ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
		ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
		ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
		ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
		ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
		ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
		ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
		ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияБСО));
		ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
		ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
		// ФФД 1.0.5 & 1.1
		ЗаписьXML.ЗаписатьАтрибут("PlaceSettle"        , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
		ЗаписьXML.ЗаписатьАтрибут("SaleExcisableGoods" , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
		ЗаписьXML.ЗаписатьАтрибут("SignOfGambling"     , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
		ЗаписьXML.ЗаписатьАтрибут("SignOfLottery"      , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
		ЗаписьXML.ЗаписатьАтрибут("SignOfAgent"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
		ЗаписьXML.ЗаписатьАтрибут("PrinterAutomatic"   , XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
		// Изменение параметров регистрации.
		ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
		Если Не ПустаяСтрока(СтруктураПараметров.КодыПричинИзмененияСведений) Тогда
			ЗаписьXML.ЗаписатьАтрибут("InfoChangesReasonsCodes", XMLСтрока(СтруктураПараметров.КодыПричинИзмененияСведений));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(СтруктураПараметров.ОтправительEmail));
		КонецЕсли;
		Если Не ПустаяСтрока(СтруктураПараметров.АдресСайтаФНС) Тогда
			ЗаписьXML.ЗаписатьАтрибут("FNSWebSite", XMLСтрока(СтруктураПараметров.АдресСайтаФНС));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу параметров из ККТ.
//
// Возвращаемое значение
//  Структура
//
Функция ПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено, РевизияИнтерфейса = 0) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	Параметры.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		Если (ЧтениеXML.Имя = "Parameters" Или ЧтениеXML.Имя = "TableParametersKKT") И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
			Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
				Параметры.ВерсияФФДФН = "1.0";
			КонецЕсли;
			Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
			Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
				Параметры.ВерсияФФДККТ = "1.0";
			КонецЕсли;
			// ФФД 1.0
			Параметры.РегистрационныйНомерККТ    = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
			Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
			Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
			Параметры.ОрганизацияНазвание        = ЧтениеXML.ЗначениеАтрибута("CompanyName");
			Параметры.ОрганизацияИНН             = СокрЛП(ЧтениеXML.ЗначениеАтрибута("INN"));
			Параметры.АдресПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleAddress");
			Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("SaleLocation");
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxationSystems");
			Параметры.ПризнакАвтономногоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOffline")) = "TRUE";
			Параметры.ПризнакШифрованиеДанных    = ВРег(ЧтениеXML.ЗначениеАтрибута("IsEncrypted")) = "TRUE";
			Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("IsService")) = "TRUE";
			Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("IsExcisable")) = "TRUE";
			Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("IsGambling")) = "TRUE";
			Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("IsLottery")) = "TRUE";
			Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("AgentTypes");
			Параметры.ПризнакФормированияБСО         = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
			Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("IsOnlineOnly")) = "TRUE";
			Параметры.УстановкаПринтераВАвтомате     = ВРег(ЧтениеXML.ЗначениеАтрибута("IsAutomaticPrinter")) = "TRUE";;
			Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("IsAutomatic")) = "TRUE";
			Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
			Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDCompany");
			Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDCompanyINN"));
			Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
			Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
			Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
			Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
			Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSURL");
		КонецЕсли;
		
	Иначе
		
		Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
			Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
				Параметры.ВерсияФФДФН = "1.0";
			КонецЕсли;
			Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
			Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
				Параметры.ВерсияФФДККТ = "1.0";
			КонецЕсли;
			// ФФД 1.0
			Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
			Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
			Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
			Параметры.АдресПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
			Параметры.МестоПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
			Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
			Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
				Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
			КонецЕсли;
			Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
			Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
			Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
			Параметры.ПризнакФормированияБСО         = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
			Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
			Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
			Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
			Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
			Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
			Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
			Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
			Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
			Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
			Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
			Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods")) = "TRUE";
			Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfGambling")) = "TRUE";
			Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfLottery")) = "TRUE";
			Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
			Параметры.УстановкаПринтераВАвтомате = ВРег(ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic")) = "TRUE";;
			Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
			Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSWebSite");
		КонецЕсли;
		
	КонецЕсли;
	
	СистемыНалогообложения = Новый Массив();
	СистемыНалогообложенияВрем = СтрРазделить(Параметры.КодыСистемыНалогообложения, ",");
	Для Каждого ВремСНО Из СистемыНалогообложенияВрем Цикл
		СНО = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(ВремСНО));
		СистемыНалогообложения.Добавить(СНО);
	КонецЦикла;
	Параметры.Вставить("СистемыНалогообложения", СистемыНалогообложения);
	
	Если НЕ ПустаяСтрока(ИдентификаторУстройства) Тогда
		СохранитьПараметрыРегистрацииУстройства(ИдентификаторУстройства, Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаписатьДанныеКоррекции(ЗаписьXML, ДанныеКоррекции)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CorrectionData");
	ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
	ЗаписьXML.ЗаписатьАтрибут("Type",  XMLСтрока(ДанныеКоррекции.ТипКоррекции));
	Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Date",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Number",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
		ЗаписьXML.ЗаписатьАтрибут("Description",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьДанныеАгента(ЗаписьXML, ДанныеАгента, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда // Операция платежного агента
			ЗаписьXML.ЗаписатьАтрибут("AgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда // Телефон платежного агента
			ЗаписьXML.ЗаписатьАтрибут("AgentPhone" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда // Телефон оператора по приему платежей
			ЗаписьXML.ЗаписатьАтрибут("PaymentProcessorPhone", XMLСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда // Телефон оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПеревода.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда // Наименование оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда // Адрес оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда // ИНН оператора перевода
			ЗаписьXML.ЗаписатьАтрибут("AcquirerOperatorINN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("AgentData");
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PayingAgentPhone" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПеревода.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоставщика(ЗаписьXML, ДанныеПоставщика, РевизияИнтерфейса = 0)
	
	Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("VendorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда // Телефон поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда // Наименование поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда // ИНН поставщика
			ЗаписьXML.ЗаписатьАтрибут("VendorINN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("PurveyorData");
		Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorName" , XMLСтрока(ДанныеПоставщика.Наименование));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("PurveyorVATIN" , XMLСтрока(ДанныеПоставщика.ИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, Позиция, ПараметрыФискализации)
	
	ДанныеКодаТоварнойНоменклатуры = Позиция.ДанныеКодаТоварнойНоменклатуры;
	
	// Код товара заполняемся для "товара".   
	Если Позиция.ПризнакПредметаРасчета <> Перечисления.ПризнакиПредметаРасчета.Товар
		И Позиция.ПризнакПредметаРасчета <> Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
		Возврат;
	КонецЕсли;
	
	// Требования к разработке драйверов подключаемого оборудования, версия 3.2 и выше.
	Если ПараметрыФискализации.РевизияИнтерфейса > 3001 Тогда 
		
		Если НЕ ПустаяСтрока(Позиция.КодВидаНоменклатурнойКлассификации) Тогда
			ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.КодВидаНоменклатурнойКлассификации);
			РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
		Иначе
			РеквизитКодаТовара = ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара;
			// Если реквизит кода товара (1162) не передается в готовом виде сформируем его из штрихкода
			Если ПустаяСтрока(РеквизитКодаТовара) Тогда
				ДанныеКодаТовара = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Позиция.Штрихкод);
				РеквизитКодаТовара = ДанныеКодаТовара.РеквизитКодаТовара;
			КонецЕсли;
		КонецЕсли;
		
		// Если первые 2 байта значения кода товара имеют значения "44h4Dh", и не был заполнен "КодВидаНоменклатурнойКлассификации"
		// И есть условие формирование 1162 только для маркировки.
		Если НЕ Лев(РеквизитКодаТовара, 2) = "RE" И ПустаяСтрока(Позиция.КодВидаНоменклатурнойКлассификации)
			И МенеджерОборудованияВызовСервераПереопределяемый.КодТовараЗаполняетсяТолькоДляDataMatrixGS1() Тогда
			Возврат;
		КонецЕсли;
		
		// Если первые 2 байта значения кода товара имеют значения "00h00h" в автономном режиме реквизит не включается.
		Если ПараметрыФискализации.АвтономныйРежим И Лев(РеквизитКодаТовара, 2) = "AA" Тогда
			Возврат;
		КонецЕсли;
		// Реквизит кода товара (1162) для стандарта 3.2 и выше в ККТ передается в готовом виде.
		Если НЕ ПустаяСтрока(РеквизитКодаТовара) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
			ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(РеквизитКодаТовара));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		// Требования к разработке драйверов подключаемого оборудования, версяи 3.1 и ниже.
		Если ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда // Необходимо всегда указывать тип маркировки. 
			Возврат;
		КонецЕсли;
		Если ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак)
			И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы)
			И ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда
				Возврат;
		КонецЕсли;
		ЗаписьXML.ЗаписатьНачалоЭлемента("GoodCodeData");
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда // Тип маркировки.
			ТипМаркировки = МенеджерОборудованияКлиентСервер.КодТипаМаркировкиККТ(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки);
			ЗаписьXML.ЗаписатьАтрибут("StampType", XMLСтрока(ТипМаркировки));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак) Тогда // Контрольный идентификационный знак (КиЗ).
			ЗаписьXML.ЗаписатьАтрибут("Stamp" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы) Тогда // Глобальный идентификатор торговой единицы (GTIN).
			ЗаписьXML.ЗаписатьАтрибут("GTIN" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда // Серийный номер.
			ЗаписьXML.ЗаписатьАтрибут("SerialNumber" , XMLСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер));
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара) Тогда // Ревизит кода товара.
			ЗаписьXML.ЗаписатьАтрибут("MarkingCode", XMLСтрока(ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ДополнительныйРеквизитПользователя);
	
	Если ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) 
		И ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда
			Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("UserAttribute");
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Наименование) Тогда // Наименование дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Name" , XMLСтрока(ДополнительныйРеквизитПользователя.Наименование));
	КонецЕсли;
	Если Не ПустаяСтрока(ДополнительныйРеквизитПользователя.Значение) Тогда // Значение дополнительного реквизита пользователя.
		ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ДополнительныйРеквизитПользователя.Значение));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Процедура формирует XML пакет для Фискализация чека.
// Параметры: 
//   РасширеннаяВыгрузка  - булево, признак расширенной выгрузки.
// Возвращаемое значение: 
//   Строка - если есть дублирование, возвращает Истина, иначе Ложь.
//
Процедура СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	Электронно   = ОбщиеПараметры.Электронно;
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;
	СуммаПредоставление = 0;
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	
	// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	
	Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierINN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("OperationType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxationSystem" , XMLСтрока(СистемаНалогообложения));
		
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ПокупательНомер = ?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "");
			Если Не ПустаяСтрока(ПокупательНомер) И Лев(ПокупательНомер, 1) <> "+" Тогда
				ПокупательНомер = "+" + ПокупательНомер;
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(ПокупательНомер));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(ОбщиеПараметры.Получатель));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ОбщиеПараметры.ПолучательИНН));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentType", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ЗаписатьДанныеКоррекции(ЗаписьXML, ОбщиеПараметры.ДанныеКоррекции);
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизитПользователя") Тогда
			ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ОбщиеПараметры.ДополнительныйРеквизитПользователя);
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента, ПараметрыФискализации.РевизияИнтерфейса);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика, ПараметрыФискализации.РевизияИнтерфейса);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда // Фискальная строка
					
					Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
						ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
					Иначе
						ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"              , XMLСтрока(ТекущаяПозиция.Наименование)); // Наименование товара.
					ЗаписьXML.ЗаписатьАтрибут("Quantity"          , XMLСтрока(ТекущаяПозиция.Количество)); // Количество товара.
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount" , XMLСтрока(ЦенаСоСкидками)); // Цена единицы товара с учетом скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("AmountWithDiscount", XMLСтрока(ТекущаяПозиция.Сумма)); // Конечная сумма по позиции чека с учетом всех скидок/наценок.
					ЗаписьXML.ЗаписатьАтрибут("DiscountAmount"    , XMLСтрока(ТекущаяПозиция.СуммаСкидок)); // Сумма скидок и наценок.
					ЗаписьXML.ЗаписатьАтрибут("Department"        , XMLСтрока(ТекущаяПозиция.НомерСекции)); // Отдел, по которому ведется продажа
					
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
							ЗначениеСтавкаНДС = "18/118";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
							ЗначениеСтавкаНДС = "10/110";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
							ЗначениеСтавкаНДС = "20/120";
						Иначе
							ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						КонецЕсли;
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("VATRate", XMLСтрока(ЗначениеСтавкаНДС)); // Ставка НДС
					Если ТекущаяПозиция.Свойство("СуммаНДС") Тогда
						ЗаписьXML.ЗаписатьАтрибут("VATAmount", XMLСтрока(ТекущаяПозиция.СуммаНДС));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
						ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("PaymentMethod", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
						ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета, ПараметрыФискализации.РевизияИнтерфейса);
						Если ПризнакПредметаРасчета <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("CalculationSubject", XMLСтрока(ПризнакПредметаРасчета));
						КонецЕсли;
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
						ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
						ЗаписьXML.ЗаписатьАтрибут("CalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ЕдиницаИзмерения") И ТекущаяПозиция.ЕдиницаИзмерения <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit", XMLСтрока(ТекущаяПозиция.ЕдиницаИзмерения));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("КодСтраныПроисхожденияТовара") И НЕ ПустаяСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара) Тогда
						ЗаписьXML.ЗаписатьАтрибут("CountryOfOrigin", XMLСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("НомерТаможеннойДекларации") И НЕ ПустаяСтрока(ТекущаяПозиция.НомерТаможеннойДекларации) Тогда
						ЗаписьXML.ЗаписатьАтрибут("CustomsDeclaration", XMLСтрока(ТекущаяПозиция.НомерТаможеннойДекларации));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("СуммаАкциза") И ТекущаяПозиция.СуммаАкциза <> Неопределено Тогда
						ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(ТекущаяПозиция.СуммаАкциза));
					КонецЕсли;
					
					Если ТекущаяПозиция.Свойство("ДополнительныйРеквизит") Тогда // Тэг 1191
						ДополнительныйРеквизит = "";
						Если НЕ ПустаяСтрока(ТекущаяПозиция.ДополнительныйРеквизит) Тогда
							ДополнительныйРеквизит = ТекущаяПозиция.ДополнительныйРеквизит;
						ИначеЕсли ТекущаяПозиция.Свойство("ДробноеКоличество") Тогда
							// Дробное количество, рекомендации ЦРПТ "ВЫВОД ТОВАРА ИЗ ОБОРОТА ПРИ РЕАЛИЗАЦИИ КОНЕЧНЫМ ПОТРЕБИТЕЛЯМ (ЧАСТИЧНАЯ ПРОДАЖА)"
							// для 1.0.5 и 1.1 - пишем в 1191, Формирование и  передача фискального  документав ГИС МТ 
							Если Не ПустаяСтрока(ТекущаяПозиция.ДробноеКоличество.Числитель) И Не ПустаяСтрока(ТекущаяПозиция.ДробноеКоличество.Знаменатель) Тогда
								Числитель = Число(ТекущаяПозиция.ДробноеКоличество.Числитель);
								Знаменатель = Число(ТекущаяПозиция.ДробноеКоличество.Знаменатель);
								ДополнительныйРеквизит = "mrk"; // Префикс «mrk», если  после «mrk» указание  дробной  части  отсутствует, упаковка считается выведенной из оборота полностью.
								Если Числитель <> Знаменатель Тогда
									ДополнительныйРеквизит = ДополнительныйРеквизит + Строка(Числитель) + "/" + Строка(Знаменатель) + "&"; 
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Не ПустаяСтрока(ДополнительныйРеквизит) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ДополнительныйРеквизит));  // Тэг 1191
						КонецЕсли;
					КонецЕсли;
					               
					ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция, ПараметрыФискализации);
					ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента, ПараметрыФискализации.РевизияИнтерфейса);
					ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика, ПараметрыФискализации.РевизияИнтерфейса);
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
			
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда // Текстовая строка
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда // Штрихкод
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("Type" , XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
					Если ПараметрыФискализации.РевизияИнтерфейса >= 3003 Тогда
						ШтрихКодBase64 = ШтрихкодВBase64(ТекущаяПозиция.ШтрихКод);
						Если ТекущаяПозиция.Свойство("ШтрихКодBase64") И 
							НЕ ПустаяСтрока(ТекущаяПозиция.ШтрихКодBase64) Тогда
							ШтрихКодBase64 = ТекущаяПозиция.ШтрихКодBase64;
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			ЗаписьXML.ЗаписатьАтрибут("PrePayment", XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьАтрибут("PostPayment", XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("Barter", XMLСтрока(СуммаПредоставление));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	ИначеЕсли ПараметрыФискализации.РевизияИнтерфейса > 2001 Тогда  // Версия стандарта 2.2 и выше
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ПокупательНомер = ?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "");
			Если Не ПустаяСтрока(ПокупательНомер) И Лев(ПокупательНомер, 1) <> "+" Тогда
				ПокупательНомер = "+" + ПокупательНомер;
			КонецЕсли;
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(ПокупательНомер));
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ПризнакАгента") И НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("AddressSettle", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("PlaceSettle", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerInfo", XMLСтрока(ОбщиеПараметры.Получатель));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerINN", XMLСтрока(ОбщиеПараметры.ПолучательИНН));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизитПользователя") Тогда
			ЗаписатьДополнительныйРеквизитПользователя(ЗаписьXML, ОбщиеПараметры.ДополнительныйРеквизитПользователя);
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
							ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
						Иначе
							ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
						КонецЕсли;
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"             , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ЦенаСоСкидками));
						ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
						ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
						
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						
						Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
							ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
							ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
							Если ПризнакПредметаРасчета <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
							КонецЕсли;
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
							ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
							ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ЕдиницаИзмерения") И ТекущаяПозиция.ЕдиницаИзмерения <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit", XMLСтрока(ТекущаяПозиция.ЕдиницаИзмерения));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("КодСтраныПроисхожденияТовара") И НЕ ПустаяСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара) Тогда
							ЗаписьXML.ЗаписатьАтрибут("CountryOfOrigin", XMLСтрока(ТекущаяПозиция.КодСтраныПроисхожденияТовара));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("НомерТаможеннойДекларации") И НЕ ПустаяСтрока(ТекущаяПозиция.НомерТаможеннойДекларации) Тогда
							ЗаписьXML.ЗаписатьАтрибут("CustomsDeclaration", XMLСтрока(ТекущаяПозиция.НомерТаможеннойДекларации));
						КонецЕсли;
						Если ТекущаяПозиция.Свойство("СуммаАкциза") И ТекущаяПозиция.СуммаАкциза <> Неопределено Тогда
							ЗаписьXML.ЗаписатьАтрибут("ExciseAmount", XMLСтрока(XMLСтрока(ТекущаяПозиция.СуммаАкциза)));
						КонецЕсли;
						
						Если ТекущаяПозиция.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ТекущаяПозиция.ДополнительныйРеквизит) Тогда
							ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(XMLСтрока(ТекущаяПозиция.ДополнительныйРеквизит)));
						КонецЕсли;
						
						ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
						ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция, ПараметрыФискализации);
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
						
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
		// Email отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
		КонецЕсли;
		// SMS отправляет средствами 1C
		Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
			ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						Наименование = ТекущаяПозиция.Наименование;
						ЗаписьXML.ЗаписатьАтрибут("Name"      , Наименование);
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
								ЗначениеСтавкаНДС = "18/118";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
								ЗначениеСтавкаНДС = "10/110";
							ИначеЕсли ТекущаяПозиция.СтавкаНДС = 120 Тогда
								ЗначениеСтавкаНДС = "20/120";
							Иначе
								ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
							КонецЕсли;
						Иначе
							ЗначениеСтавкаНДС = "none";
						КонецЕсли;
						ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличные));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектронно + СуммаПредоставление));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаПостоплата));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаПредоплата));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЕсли;
	
	ОплатаНеНаличными = СуммаЭлектронно + СуммаПостоплата + СуммаПредоплата + СуммаПредоставление; 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ПараметрыФискализации.ДанныеЧекаXML = ЗаписьXML.Закрыть();
	ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
	ПараметрыФискализации.СуммаЧека = СуммаЧека;
	ПараметрыФискализации.ОплатаНаличные    = ?(СуммаНаличные + ОплатаНеНаличными > СуммаЧека, СуммаЧека - ОплатаНеНаличными, СуммаНаличные); 
	ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
	ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
	ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
	ПараметрыФискализации.ОплатаВстречноеПредоставление = СуммаПредоставление;
	
КонецПроцедуры

Процедура СформироватьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ПараметрыФискализации) Экспорт
	
	Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		
		СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);
		
	Иначе
		ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
		СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
		ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
		ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
		ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		
		Если ОбщиеПараметры.Свойство("ДанныеКоррекции") Тогда
			ДанныеКоррекции = ОбщиеПараметры.ДанныеКоррекции;
			ТипКоррекции = ?(ПустаяСтрока(ДанныеКоррекции.ТипКоррекции), 0, ДанныеКоррекции.ТипКоррекции);   
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ДанныеКоррекции.ТипКоррекции));
			Если Не ПустаяСтрока(ДанныеКоррекции.ДатаКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseDate",  XMLСтрока(НачалоДня(ДанныеКоррекции.ДатаКоррекции)));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.НомерПредписания) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseNumber",  XMLСтрока(ДанныеКоррекции.НомерПредписания));
			КонецЕсли;
			Если Не ПустаяСтрока(ДанныеКоррекции.ОписаниеКоррекции) Тогда
				ЗаписьXML.ЗаписатьАтрибут("CorrectionBaseName",  XMLСтрока(ДанныеКоррекции.ОписаниеКоррекции));
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("ДополнительныйРеквизит") И НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизит) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("AdditionalAttribute", XMLСтрока(ОбщиеПараметры.ДополнительныйРеквизит));
		КонецЕсли;
		
		СуммаЧека   = 0;
		СуммаНДС10  = 0;
		СуммаНДС18  = 0;
		СуммаНДС20  = 0;
		СуммаНДС110 = 0;
		СуммаНДС118 = 0;
		СуммаНДС120 = 0;
		СуммаНДС0   = 0;
		СуммаБезНДС = 0;
		
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ПозицияЧека = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
					
					СуммаЧека = СуммаЧека + ПозицияЧека.Сумма; // Сумма позиции
					СтавкаНДС = ПозицияЧека.СтавкаНДС; // Ставка НДС
					СуммаНДС = ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС);  // Сумма НДС
					Если СтавкаНДС = 10 Тогда
						СуммаНДС10 = СуммаНДС10 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 18 Тогда
						СуммаНДС18 = СуммаНДС18 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 20 Тогда
						СуммаНДС20 = СуммаНДС20 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					ИначеЕсли СтавкаНДС = 0 Тогда
						СуммаНДС0 = СуммаНДС0 + ПозицияЧека.Сумма;
					ИначеЕсли СтавкаНДС = 110 Тогда
						СуммаНДС110 = СуммаНДС110 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 110 * 10);
					ИначеЕсли СтавкаНДС = 118 Тогда
						СуммаНДС118 = СуммаНДС118 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 118 * 18);
					ИначеЕсли СтавкаНДС = 120 Тогда
						СуммаНДС120 = СуммаНДС120 + ?(СуммаНДС > 0, СуммаНДС, ПозицияЧека.Сумма / 120 * 20);
					Иначе 
						СуммаБезНДС = СуммаБезНДС + ПозицияЧека.Сумма;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		СуммаНаличные       = 0;
		СуммаЭлектронно     = 0;
		СуммаПостоплата     = 0;
		СуммаПредоплата     = 0;
		СуммаПредоставление = 0;
		ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат; 
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплата = СуммаПредоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставление = СуммаПредоставление + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьАтрибут("Sum"       , XMLСтрока(СуммаЧека));
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(Окр(СуммаНДС0, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(Окр(СуммаНДС10, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(Окр(СуммаНДС18, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX20"  , XMLСтрока(Окр(СуммаНДС20, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(Окр(СуммаНДС110, 2))); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(Окр(СуммаНДС118, 2)));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX120" , XMLСтрока(Окр(СуммаНДС120, 2)));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
		ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
		ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
		ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
		ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ПараметрыФискализации.ДанныеЧекаXML = ЗаписьXML.Закрыть();
		ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
		ПараметрыФискализации.СуммаЧека = СуммаЧека;
		ПараметрыФискализации.ОплатаНаличные    = СуммаНаличные; 
		ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
		ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
		ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
		ПараметрыФискализации.ОплатаВстречноеПредоставление = СуммаПредоставление;

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
					ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ВремТипШтрихкода));
					// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
					Если РевизияИнтерфейса >= 3003 Тогда
						ШтрихКодBase64 = ШтрихкодВBase64(ВремШтрихКод);
						ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ВремШтрихКод));
					КонецЕсли;
				Иначе
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(НефискальныеДокументы, ВыходныеПараметры, ШиринаСтроки = 32, РевизияИнтерфейса = 0) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ПозицииЧека Из НефискальныеДокументы Цикл
		
		// Пакетная печать чека. Подготовка пакета.
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		
		// Табличная часть
		Если ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ПозицииЧека[ИндексМассива]; //см. МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
							ЗаписьXML.ЗаписатьАтрибут("Type", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
							// Значение штрихкода. Штрихкод кодируется текстом в кодировке Base64.
							Если РевизияИнтерфейса >= 3003 Тогда
								ШтрихКодBase64 = ШтрихкодВBase64(ТекущаяПозиция.ШтрихКод);
								Если ТекущаяПозиция.Свойство("ШтрихКодBase64") И 
									НЕ ПустаяСтрока(ТекущаяПозиция.ШтрихКодBase64) Тогда
									ШтрихКодBase64 = ТекущаяПозиция.ШтрихКодBase64;
								КонецЕсли;
								ЗаписьXML.ЗаписатьАтрибут("ValueBase64", XMLСтрока(ШтрихКодBase64));
							Иначе
								ЗаписьXML.ЗаписатьАтрибут("Value", XMLСтрока(ТекущаяПозиция.ШтрихКод));
							КонецЕсли;
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
							ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Текст = ЗаписьXML.Закрыть();
		Результат.Добавить(Текст);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры, РевизияИнтерфейса = 0) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
		ЗаписьXML.ЗаписатьАтрибут("CashierINN" , ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
			ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
			ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		КонецЕсли;
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("CashierName" , ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
		ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

// Получить параметры состояния из XML пакета.
//
Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные, НомерСмены = Неопределено) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров смены из ККТ.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML, РевизияИнтерфейса = 0) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
			
			Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Параметры.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
					Параметры.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
					ДатаСменыККТ = ЧтениеXML.ЗначениеАтрибута("DateTime");
					Если НЕ ПустаяСтрока(ДатаСменыККТ) Тогда
						Параметры.ДатаСменыККТ = XMLЗначение(Тип("Дата"), ДатаСменыККТ);
					КонецЕсли;
					Параметры.НомерЧекаЗаСмену = ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber");
					Параметры.СтатусСмены      = Число(ЧтениеXML.ЗначениеАтрибута("ShiftState"));
					Параметры.ОстатокНаличных  = ЧтениеXML.ЗначениеАтрибута("CashBalance");
					Параметры.НеобходимаСтрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("FNError")) = "TRUE";
					Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("FNOverflow")) = "TRUE";
					Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("FNFail")) = "TRUE";
					КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
					Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
					Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
					ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
					Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
						Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Параметры.ПревышеноВремяОжиданияОтветаОФД = ВРег(ЧтениеXML.ЗначениеАтрибута("OFDtimeout")) = "TRUE";
					Параметры.НеобходимаСтрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("UrgentReplacementFN")) = "TRUE";
					Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("MemoryOverflowFN")) = "TRUE";
					Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("ResourcesExhaustionFN")) = "TRUE";
					КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
					Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
					Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
					ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
					Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
						Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Заполнить результаты фискализация чека из XML пакета.
//
Процедура ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации) Экспорт
	
	Если Не ПустаяСтрока(ПараметрыФискализации.РезультатОперацииXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ПараметрыФискализации.РезультатОперацииXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DocumentOutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				ПараметрыФискализации.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
				ПараметрыФискализации.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
				ПараметрыФискализации.НомерЧекаЗаСмену   = ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber");
				ПараметрыФискализации.ФискальныйПризнак  = ЧтениеXML.ЗначениеАтрибута("FiscalSign");
				ПараметрыФискализации.АдресСайтаПроверки = ЧтениеXML.ЗначениеАтрибута("AddressSiteInspections");
				ДатаВремяЧека = ЧтениеXML.ЗначениеАтрибута("DateTime");
				Если НЕ ПустаяСтрока(ДатаВремяЧека) Тогда
					ПараметрыФискализации.ДатаВремяЧека = XMLЗначение(Тип("Дата"), ДатаВремяЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует шаблон чека.
//
Функция СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	ТипОборудования = "ККТ";
	
	ШаблонЧека = МенеджерОборудованияВызовСервераПереопределяемый.СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования); 
	Если СтандартнаяОбработка Тогда
		Возврат ОбщиеПараметры;
	Иначе
		Возврат ШаблонЧека;
	КонецЕсли;
	
КонецФункции

// Получить шаблон атрибутов чека для отсылки.
// 
Функция ШаблонАтрибутовЧекаДляОтсылки(ПараметрыФискализации) Экспорт 
	
	ТекстСообщения  = НСтр("ru='ККТ№:'") + ПараметрыФискализации.РегистрационныйНомерККТ + ";" + Символы.НПП 
		+ НСтр("ru='СУММА:'") + Формат(ПараметрыФискализации.СуммаЧека, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0") + ";" + Символы.НПП 
		+ НСтр("ru='ДФ:'")  + Формат(ПараметрыФискализации.ДатаВремяЧека, "дд.ММ.гггг ЧЧ:мм") + ";" + Символы.НПП 
		+ НСтр("ru='ФН№:'") + ПараметрыФискализации.ЗаводскойНомерФН + ";" + Символы.НПП 
		+ НСтр("ru='ФД№:'") + ПараметрыФискализации.НомерЧекаККТ + ";" + Символы.НПП 
		+ НСтр("ru='ФПД:'") + ПараметрыФискализации.ФискальныйПризнак + ";" + Символы.НПП 
		+ НСтр("ru='САЙТ:'") + ПараметрыФискализации.АдресСайтаПроверки;
		
	Возврат ТекстСообщения;
	
КонецФункции 

Функция ПодготовитьДанныеФискализацииЧека(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	ВерсияФФДККТ11 = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0.5");
	ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1"; // Признак ФФД 1.1
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();   
	ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ПараметрыФискализации.ЗаводскойНомерФН  = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.АвтономныйРежим   = ?(ПараметрыРегистрации.Свойство("ПризнакАвтономногоРежима"), ПараметрыРегистрации.ПризнакАвтономногоРежима, Ложь);
	ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализации.ДокументОснование = ОбщиеПараметры.ДокументОснование;
	ПараметрыФискализации.ИдентификаторФискальнойЗаписи = ОбщиеПараметры.ИдентификаторФискальнойЗаписи;
	ПараметрыФискализации.Организация       = ОбщиеПараметры.Организация;
	ПараметрыФискализации.ТорговыйОбъект    = ОбщиеПараметры.ТорговыйОбъект;
	ПараметрыФискализации.ДополнительныйРеквизит    = ОбщиеПараметры.ДополнительныйРеквизит;  
	ПараметрыФискализации.СубъектПерсональныхДанных = ОбщиеПараметры.СубъектПерсональныхДанных;
	
	Если ОбщиеПараметры.Свойство("КорректируемыйДокумент") Тогда 
		ПараметрыФискализации.КорректируемыйДокумент = ОбщиеПараметры.КорректируемыйДокумент;
	КонецЕсли;
	ПараметрыФискализации.Кассир       = ОбщиеПараметры.Кассир;
	ПараметрыФискализации.Электронно   = ОбщиеПараметры.Электронно;
	ПараметрыФискализации.Отправляет1СSMS   = ОбщиеПараметры.Отправляет1СSMS;
	ПараметрыФискализации.Отправляет1СEmail = ОбщиеПараметры.Отправляет1СEmail;
	ПараметрыФискализации.ВерсияФФДККТ11    = ВерсияФФДККТ11;
	ПараметрыФискализации.ЕдиныйЧек    = ОбщиеПараметры.ЕдиныйЧек;
	НеприменениеККТ = ОбщиеПараметры.Свойство("НеприменениеККТ") И ОбщиеПараметры.НеприменениеККТ;
	
	Если ОбщиеПараметры.Свойство("СформироватьЧекКоррекции") И ОбщиеПараметры.СформироватьЧекКоррекции Тогда
		Если НеприменениеККТ Или ВерсияФФДККТ11 Тогда
			// Если неприменение ККТ или ФФД 1.1 
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ПараметрыФискализации);
			ПараметрыФискализации.СформироватьЧекКоррекции = Истина;
		Иначе // Для ФФД 1.0.5 и исправления ошибок ККТ - КассовыйЧек 
			ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);
		КонецЕсли;
	Иначе
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
		МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);
	КонецЕсли;
	
	Возврат ПараметрыФискализации;
	
КонецФункции

Процедура ПодготовитьЧекКоррекции(ОбщиеПараметры, ОбщиеПараметрыСторно, ФФДККТ11)
	
	// Меняем признак типа расчета на противоположный.
	Если ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
		ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	ИначеЕсли ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		ОбщиеПараметрыСторно.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	КонецЕсли;
	
	// Для формата 1.0.5
	Если НЕ ФФДККТ11 Тогда            
		// Если не корректируются таблица оплат
		ТаблицаОплатИзмена = ОбщиеПараметрыСторно.ТаблицаОплат.Количество() <> ОбщиеПараметры.ТаблицаОплат.Количество();
		Если Не ТаблицаОплатИзмена Тогда
			Для Итератор = 0 По ОбщиеПараметрыСторно.ТаблицаОплат.Количество() - 1 Цикл 
				Если (ОбщиеПараметрыСторно.ТаблицаОплат[Итератор].ТипОплаты <> ОбщиеПараметры.ТаблицаОплат[Итератор].ТипОплаты)
					Или (ОбщиеПараметрыСторно.ТаблицаОплат[Итератор].Сумма <> ОбщиеПараметры.ТаблицаОплат[Итератор].Сумма) Тогда
					ТаблицаОплатИзмена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Необходимо изменить вид оплат на «ВстречноеПредоставление»	
		Если НЕ ТаблицаОплатИзмена Тогда
			Для Каждого ЭлементМассива Из ОбщиеПараметрыСторно.ТаблицаОплат Цикл 
				ЭлементМассива.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеЧекаКоррекции(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	ВерсияФФДККТ11 = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0.5");
	ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1"; // Признак ФФД 1.1
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	ПараметрыФискализации.НеприменениеККТ   = ОбщиеПараметры.НеприменениеККТ;
	ПараметрыФискализации.Кассир            = ОбщиеПараметры.Кассир;
	ПараметрыФискализации.Электронно        = ОбщиеПараметры.Электронно;
	ПараметрыФискализации.Отправляет1СSMS   = ОбщиеПараметры.Отправляет1СSMS;
	ПараметрыФискализации.Отправляет1СEmail = ОбщиеПараметры.Отправляет1СEmail;
	ПараметрыФискализации.Организация       = ОбщиеПараметры.Организация;
	ПараметрыФискализации.ТорговыйОбъект    = ОбщиеПараметры.ТорговыйОбъект;
	ПараметрыФискализации.ВерсияФФДККТ11    = ВерсияФФДККТ11; 
	ПараметрыФискализации.ЕдиныйЧек         = ОбщиеПараметры.ЕдиныйЧек;
	
	ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ПараметрыФискализации.ЗаводскойНомерФН  = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализации.ДокументОснование = ОбщиеПараметры.ДокументОснование;
	
	Если ОбщиеПараметры.НеприменениеККТ Тогда
		
		Если ПараметрыПодключения.РевизияИнтерфейса < 3000 
			И (ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств 
				 Или ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств) Тогда
			ПараметрыФискализации.Результат = Ложь;
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Для данного типа расчета нельзя сформировать чек коррекции для данного ККТ.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
			 
		// Сценарий 1 - непримененин ККТ. 
		Если НЕ ПустаяСтрока(ОбщиеПараметры.КорректируемыйДокумент) Тогда
			ПараметрыФискализации.Результат = Ложь;
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Чек коррекции «неприменение ККТ» нельзя сформировать для фискализированного ранее чека.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
		МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ПараметрыФискализации);
	Иначе
		// Сценарий 2 - исправление нарушений применения ККТ.
		Если ПустаяСтрока(ОбщиеПараметры.КорректируемыйДокумент) Тогда
			ПараметрыФискализации.Результат = Ложь; 
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Корректируемый документ не указан для формирования чека коррекции.'");
			Возврат ПараметрыФискализации;
		КонецЕсли;
		
		ТипыДокументов = Новый Массив();
		ТипыДокументов.Добавить(Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек); // Для ФФД 1.0.5
		ТипыДокументов.Добавить(Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции); // Для ФФД 1.1
		
		КорректируемыйДокументОперация = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(ОбщиеПараметры.КорректируемыйДокумент, ,ТипыДокументов, ОбщиеПараметры.ТипРасчета); 
		Если КорректируемыйДокументОперация = Неопределено Тогда
			ПараметрыФискализации.Результат = Ложь; 
			ПараметрыФискализации.ТекстОшибки = НСтр("ru='Не найден ранее фискализиронный кассовый чек для формирования чека коррекции.'");
			Возврат ПараметрыФискализации;
		Иначе
			// В зависимости от версии ФФД формируем "Кассовый чек" или "Кассовый чек коррекции".
			ТипФискальногоДокументов = ?(ВерсияФФДККТ11, Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции, Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек);
			
			// Дополнительный реквизит чека - фискальным признаком документа основания (по которому идет коррекция).
			ФискальныйПризнак = КорректируемыйДокументОперация.ФискальныйПризнак;
			
			// Формируем кассовый чек с корректными реквизитами.
			ОбщиеПараметры.ДополнительныйРеквизит = ФискальныйПризнак;
			ПараметрыФискализации.ДополнительныйРеквизит = ФискальныйПризнак;  
			ПараметрыФискализации.ТипДокумента = ТипФискальногоДокументов;
			ПараметрыФискализации.КорректируемыйДокумент = КорректируемыйДокументОперация.ДокументОснование;
			
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);
			
			// Формируем параметры фискализации для сторнирующего чека коррекции.
			ДанныеСторноЧекаXML = КорректируемыйДокументОперация.ДанныеXML.Получить();
			ЧекКоррекцииСторно = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
			ЗаполнитьЗначенияСвойств(ЧекКоррекцииСторно, ПараметрыФискализации);
			
			ОбщиеПараметрыСторно = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ДанныеСторноЧекаXML);
			ОбщиеПараметрыСторно.ДополнительныйРеквизит = ФискальныйПризнак;
			ПодготовитьЧекКоррекции(ОбщиеПараметры, ОбщиеПараметрыСторно, ВерсияФФДККТ11);
			
			МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметрыСторно, ЧекКоррекцииСторно);
			
			ПараметрыФискализации.ЧекКоррекцииСторно = ЧекКоррекцииСторно;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФискализации;
	
КонецФункции

Функция ПодготовитьДанныеИнкасации(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	Если ОбщиеПараметры.ТипИнкассации = 0 Тогда
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Выемка
	Иначе
		ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Внесение
	КонецЕсли;
	ПараметрыФискализации.ТипИнкассации = ОбщиеПараметры.ТипИнкассации; 
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	ПараметрыФискализации.РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ПараметрыФискализации.ЗаводскойНомерФН  = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ОбщиеПараметры.Свойство("ДокументОснование") Тогда 
		ПараметрыФискализации.ДокументОснование = ОбщиеПараметры.ДокументОснование;
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("Кассир") Тогда
		ПараметрыФискализации.Кассир = ОбщиеПараметры.Кассир;
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("Организация") Тогда
		ПараметрыФискализации.Организация = ОбщиеПараметры.Организация;
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("ТорговыйОбъект") Тогда
		ПараметрыФискализации.ТорговыйОбъект = ОбщиеПараметры.ТорговыйОбъект;
	КонецЕсли;
	
	ПараметрыФискализации.СуммаЧека      = ОбщиеПараметры.Сумма;
	ПараметрыФискализации.ОплатаНаличные = ОбщиеПараметры.Сумма;
	ПараметрыФискализации.ДанныеЧекаXML  = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ОбщиеПараметры);
	
	Возврат ПараметрыФискализации;
	
КонецФункции

Процедура ОбработатьДанныеФискализацииЧекаКоррекции(ПараметрыФискализации) Экспорт
	
	// Заполнить результаты фискализация чека из XML пакета.
	МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации); 
	
	Если НЕ ПараметрыФискализации.НеприменениеККТ Тогда
		// Заполнить результаты фискализация чека из XML пакета.
		МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации.ЧекКоррекцииСторно); 
		Попытка
			// Записать фискальную операцию - сторно.
			МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации.ЧекКоррекцииСторно);
		Исключение
			ПараметрыФискализации.ЧекКоррекцииСторно.ОперацияЗаписана = Ложь;
		КонецПопытки;
	КонецЕсли;
		
	Попытка
		// Записать фискальную операцию.
		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	Исключение
		ПараметрыФискализации.ОперацияЗаписана = Ложь;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьДанныеФискализацииЧека(ПараметрыФискализации) Экспорт
	
	// Заполнить результаты фискализация чека из XML пакета.
	МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации); 
	
	Попытка
		// Записать фискальную операцию.
		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	Исключение
		ПараметрыФискализации.ОперацияЗаписана = Ложь;
	КонецПопытки;
	
	// Формируем текст сообщения с атрибутами фискального чека для отправки покупателю. 
	Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
		ПараметрыФискализации.ТекстСообщения = МенеджерОборудованияВызовСервера.ШаблонАтрибутовЧекаДляОтсылки(ПараметрыФискализации); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеИнкасации(ПараметрыФискализации) Экспорт
	
	// Записать фискальную операцию.
	МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	
КонецПроцедуры

Функция ЗначениеXMLАтрибута(ЧтениеXML, ИмяАтрибута, ДопИмяАтрибута = Неопределено, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	Если ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута) <> Неопределено Тогда  
		Результат = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	ИначеЕсли НЕ ПустаяСтрока(ДопИмяАтрибута) И ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута) <> Неопределено Тогда
		Результат = ЧтениеXML.ЗначениеАтрибута(ДопИмяАтрибута);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Получить структуру чека из XML.
//
Функция ЗагрузитьДанныеФискализацииИзXML(ДанныеXML) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	СтавкиНДС = Новый Соответствие();
	СтавкиНДС.Вставить("10", 10); 
	СтавкиНДС.Вставить("18", 18);
	СтавкиНДС.Вставить("20", 20);
	СтавкиНДС.Вставить("0", 0);
	СтавкиНДС.Вставить("10/110", 110);
	СтавкиНДС.Вставить("18/118", 118);
	СтавкиНДС.Вставить("20/120", 120);
	СтавкиНДС.Вставить("none", Неопределено);
	ФискальнаяСтрока = Неопределено;
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "CheckPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					ТипРасчета = ?(ЧтениеXML.ЗначениеАтрибута("PaymentType") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("PaymentType"), ЧтениеXML.ЗначениеАтрибута("OperationType"));
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					СистемаНалогообложения = ?(ЧтениеXML.ЗначениеАтрибута("TaxVariant") <> Неопределено, ЧтениеXML.ЗначениеАтрибута("TaxVariant"), ЧтениеXML.ЗначениеАтрибута("TaxationSystem"));
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierVATIN");
					ОбщиеПараметры.ОтправительEmail = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
					ОбщиеПараметры.ПокупательEmail = ЧтениеXML.ЗначениеАтрибута("CustomerEmail");
					ОбщиеПараметры.ПокупательНомер = ЧтениеXML.ЗначениеАтрибута("CustomerPhone");
					ОбщиеПараметры.ПризнакАгента = ЧтениеXML.ЗначениеАтрибута("AgentSign");
					ОбщиеПараметры.АдресРасчетов = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
					ОбщиеПараметры.МестоРасчетов = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
					ОбщиеПараметры.ДополнительныйРеквизит = ЧтениеXML.ЗначениеАтрибута("AdditionalAttribute");
					Если ЧтениеXML.ЗначениеАтрибута("AgentSign") <> Неопределено Тогда  
						ПризнакАгента = Число(ЧтениеXML.ЗначениеАтрибута("AgentSign"));
						ОбщиеПараметры.ПризнакАгента = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
					КонецЕсли;
					ОбщиеПараметры.Получатель    = ЧтениеXML.ЗначениеАтрибута("CustomerInfo");
					ОбщиеПараметры.ПолучательИНН = ЧтениеXML.ЗначениеАтрибута("CustomerINN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
					ОбщиеПараметры.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
					ОбщиеПараметры.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "VendorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "VendorName");
					ОбщиеПараметры.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "VendorPhone");
					ОбщиеПараметры.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "VendorINN");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ДанныеАгента = ОбщиеПараметры.ДанныеАгента;
					ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentOperation");
					ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentPhone");
					ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorPhone");
					ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorName");
					ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorAddress");
					ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorVATIN");
					ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "ReceivePaymentsOperatorPhone");
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "UserAttribute" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "Name");
					ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение = ЗначениеXMLАтрибута(ЧтениеXML, "Value");
				КонецЕсли;
		
				Если ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Positions" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						
						Если ЧтениеXML.Имя = "FiscalString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
							
							ФискальнаяСтрока.Наименование =  ЗначениеXMLАтрибута(ЧтениеXML, "Name");
							ФискальнаяСтрока.Количество   =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "Quantity", , 0));
							
							ФискальнаяСтрока.ЦенаСоСкидками =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "PriceWithDiscount", , 0));
							ФискальнаяСтрока.Сумма          =  Число(ЗначениеXMLАтрибута(ЧтениеXML, "AmountWithDiscount", "SumWithDiscount", 0));
							СуммаСкидок = ЗначениеXMLАтрибута(ЧтениеXML, "DiscountAmount", "DiscountSum", 0);
							Если Не ПустаяСтрока(СуммаСкидок) Тогда
								ФискальнаяСтрока.СуммаСкидок  =  Число(СуммаСкидок);
							КонецЕсли;
							ФискальнаяСтрока.НомерСекции = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Department", , 0));
							ФискальнаяСтрока.ЕдиницаИзмерения = ЗначениеXMLАтрибута(ЧтениеXML, "MeasurementUnit");
							
							СтавкаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATRate", "Tax");
							ФискальнаяСтрока.СтавкаНДС = СтавкиНДС.Получить(СтавкаНДС);
							СуммаНДС = ЗначениеXMLАтрибута(ЧтениеXML, "VATAmount", "TaxSum", 0);
							Если Не ПустаяСтрока(СуммаНДС) Тогда
								ФискальнаяСтрока.СуммаНДС = Число(СуммаНДС);
							КонецЕсли;
							
							ПризнакСпособаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignMethodCalculation", "PaymentMethod", 0));
							ФискальнаяСтрока.ПризнакСпособаРасчета =  МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(ПризнакСпособаРасчета);
							ПризнакПредметаРасчета = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SignCalculationObject", "CalculationSubject", 0));
							ФискальнаяСтрока.ПризнакПредметаРасчета =  МенеджерОборудованияКлиентСервер.ПризнакПредметаРасчетаПоКоду(ПризнакПредметаРасчета);
							
							Если ЧтениеXML.ЗначениеАтрибута("SignSubjectCalculationAgent") <> Неопределено Тогда  
								ПризнакАгента = Число(ЧтениеXML.ЗначениеАтрибута("SignSubjectCalculationAgent"));
								ФискальнаяСтрока.ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПризнакАгентаПоКоду(ПризнакАгента);
							КонецЕсли;
							
							ФискальнаяСтрока.КодСтраныПроисхожденияТовара = ЗначениеXMLАтрибута(ЧтениеXML, "CountryOfOrigin");
							ФискальнаяСтрока.НомерТаможеннойДекларации = ЗначениеXMLАтрибута(ЧтениеXML, "CustomsDeclaration");
							ФискальнаяСтрока.ДополнительныйРеквизит = ЗначениеXMLАтрибута(ЧтениеXML, "AdditionalAttribute");
							
							СуммаАкциза = ЗначениеXMLАтрибута(ЧтениеXML, "ExciseAmount");
							Если НЕ ПустаяСтрока(СуммаАкциза) Тогда
								ФискальнаяСтрока.СуммаАкциза = Число(СуммаАкциза);
							КонецЕсли;
							
							ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "AgentData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ДанныеАгента = ФискальнаяСтрока.ДанныеАгента;
								ДанныеАгента.ПлатежныйАгент.Операция = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentOperation");
								ДанныеАгента.ПлатежныйАгент.Телефон  = ЗначениеXMLАтрибута(ЧтениеXML, "PayingAgentPhone");
								ДанныеАгента.ОператорПеревода.Телефон      = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorPhone");
								ДанныеАгента.ОператорПеревода.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorName");
								ДанныеАгента.ОператорПеревода.Адрес        = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorAddress");
								ДанныеАгента.ОператорПеревода.ИНН          = ЗначениеXMLАтрибута(ЧтениеXML, "MoneyTransferOperatorVATIN");
								ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "ReceivePaymentsOperatorPhone");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "PurveyorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "PurveyorVATIN");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "VendorData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеПоставщика.Наименование = ЗначениеXMLАтрибута(ЧтениеXML, "VendorName");
								ФискальнаяСтрока.ДанныеПоставщика.Телефон = ЗначениеXMLАтрибута(ЧтениеXML, "VendorPhone");
								ФискальнаяСтрока.ДанныеПоставщика.ИНН = ЗначениеXMLАтрибута(ЧтениеXML, "VendorINN");
							КонецЕсли;
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "GoodCodeData" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда   
							Если ФискальнаяСтрока <> Неопределено Тогда
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ЗначениеXMLАтрибута(ЧтениеXML, "GTIN");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак = ЗначениеXMLАтрибута(ЧтениеXML, "Stamp");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ЗначениеXMLАтрибута(ЧтениеXML, "SerialNumber");
								ТипМаркировки = ЗначениеXMLАтрибута(ЧтениеXML, "StampType");
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = МенеджерОборудованияКлиентСервер.ТипМаркировкиККТПоКоду(ТипМаркировки);
								ФискальнаяСтрока.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара = ЗначениеXMLАтрибута(ЧтениеXML, "MarkingCode");
							КонецЕсли
						КонецЕсли;
						
						Если ЧтениеXML.Имя = "TextString" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
							Текст = ЗначениеXMLАтрибута(ЧтениеXML, "Text");
							ТекстоваяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
							ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрока);
						КонецЕсли;
						
					КонецЦикла;  
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ЧтениеXML.Имя = "CheckCorrectionPackage" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					ТипРасчета = ЧтениеXML.ЗначениеАтрибута("PaymentType");
					ОбщиеПараметры.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(Число(ТипРасчета));
					
					ОбщиеПараметры.Кассир = ЧтениеXML.ЗначениеАтрибута("CashierName");
					ОбщиеПараметры.КассирИНН = ЧтениеXML.ЗначениеАтрибута("CashierVATIN");
					
					СистемаНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
					ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложенияККТПоКоду(Число(СистемаНалогообложения));
					
					СуммаДокумента  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Sum"   , , 0));
					СуммаБезНДС = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAXNone", , 0));
					СуммаНДС0   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX0"   , , 0));
					
					СуммаНДС10  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX10"  , , 0));
					СуммаНДС18  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX18"  , , 0));
					СуммаНДС20  = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX20"  , , 0));
					СуммаНДС110 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX110" , , 0));
					СуммаНДС118 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX118" , , 0));
					СуммаНДС120 = Число(ЗначениеXMLАтрибута(ЧтениеXML, "SumTAX120" , , 0));
					
					Если СуммаБезНДС > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция без НДС'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаБезНДС;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = Неопределено;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС0 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 0%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = СуммаНДС0;
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 0;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС10 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС10 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 10;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС20 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС20 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 20;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС18 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18%'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС18 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 18;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
		
					Если СуммаНДС110 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 10/110'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС110 * 110 / 10, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 110;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС120 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 20/120'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС120 * 120 / 20, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 120;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					Если СуммаНДС118 > 0 Тогда
						ФискальнаяСтрока = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
						ФискальнаяСтрока.Наименование = НСтр("ru='Фискальная позиция НДС 18/118'");
						ФискальнаяСтрока.Количество   = 1;
						ФискальнаяСтрока.ЦенаСоСкидками = Мин(СуммаНДС118 * 118 / 18, СуммаДокумента);
						ФискальнаяСтрока.Сумма          = ФискальнаяСтрока.ЦенаСоСкидками;
						ФискальнаяСтрока.СтавкаНДС      = 118;
						ОбщиеПараметры.ПозицииЧека.Добавить(ФискальнаяСтрока);
					КонецЕсли;
					
					СуммаПозиций = 0;
					Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
						СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
					КонецЦикла;
					
					Если СуммаПозиций > СуммаДокумента Тогда
						Пока СуммаПозиций > СуммаДокумента Цикл
							Разница = Окр(СуммаДокумента - СуммаПозиций);
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма - 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					Иначе
						Пока СуммаДокумента > СуммаПозиций Цикл
							Разница = Окр(СуммаДокумента - СуммаПозиций);
							Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
								Если ПозицияЧека.СтавкаНДС <> 0 И ПозицияЧека.СтавкаНДС <> Неопределено Тогда
									ПозицияЧека.Сумма = ПозицияЧека.Сумма + 0.01;
									ПозицияЧека.ЦенаСоСкидками = ПозицияЧека.Сумма;
									СуммаПозиций = 0;
									Для Каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
										СуммаПозиций = СуммаПозиций + ПозицияЧека.Сумма;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЧтениеXML.Имя = "Payments" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					СуммаНаличные   = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Cash", , 0));
					СуммаЭлектронно = Число(ЗначениеXMLАтрибута(ЧтениеXML, "ElectronicPayment", , 0));
					СуммаПостоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "Credit", "PostPayment", 0));
					СуммаПредоплата = Число(ЗначениеXMLАтрибута(ЧтениеXML, "AdvancePayment", "PrePayment", 0));
					СуммаПредоставление = Число(ЗначениеXMLАтрибута(ЧтениеXML, "CashProvision", "Barter", 0));
					
					Если СуммаНаличные > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
						СтрокаОплаты.Вставить("Сумма", СуммаНаличные);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаЭлектронно > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
						СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПостоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПостоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоплата > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоплата);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
					Если СуммаПредоставление > 0 Тогда
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление"));
						СтрокаОплаты.Вставить("Сумма", СуммаПредоставление);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОбщиеПараметры;
	
КонецФункции

// Возвращает Истина, если используется подсистемы фискальных устройств и эти подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У хотя бы одной "функциональной" подсистемы включен флажок "Включать в командный интерфейс".
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПодсистемыФискальныхУстройств() Экспорт
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ККТ")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ФискальныеРегистраторы")
		Или ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ПринтерЧеков");
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если используется подсистема Офлайн оборудование и эта подсистемы существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользуетсяПодсистемаОфлайнОборудования() Экспорт
	
	Результат = ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ОфлайнОборудование");
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку обязательности заполняет тэгов.
// 
// Параметры:
//  Параметры - Параметры фискального чека.  
//  ИдентификаторУстройства - Идентификатор устройства ККТ.
//  ОписаниеОшибки - Описание ошибки.
// 
// Возвращаемое значение:
//   Результат операции
//
Функция ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульФорматноЛогическийКонтрольВызовСервера = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольВызовСервера");
		МодульФорматноЛогическийКонтрольВызовСервера.ВыполненитьКоррекциюЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
		Возврат МодульФорматноЛогическийКонтрольВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Процедура приводит к формату согласованному с ФНС.
// 
// Параметры:
//  ОсновныеПараметры - Параметры фискального чека.  
//  Отказ - Отказ при выполнении операции.
//  ОписаниеОшибки - Описание ошибки.
//  ИсправленыОсновныеПараметры - Были исправлены основные параметры
//
Процедура ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульФорматноЛогическийКонтрольКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ФорматноЛогическийКонтрольКлиентСервер");
		МодульФорматноЛогическийКонтрольКлиентСервер.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	Если ТаблицаСведений.Найти("РегистрСведений.ФискальныеОперации", "Объект") = Неопределено Тогда
		НовыеСведения = ТаблицаСведений.Добавить();
		НовыеСведения.Объект          = "РегистрСведений.ФискальныеОперации";
		НовыеСведения.ПоляРегистрации = "СубъектПерсональныхДанных";
		НовыеСведения.ПоляДоступа     = "ДанныеXML";
		НовыеСведения.ОбластьДанных   = "ПаспортныеДанные";
	КонецЕсли;
	
	Если ТаблицаСведений.Найти("РегистрСведений.ОчередьЧековККТ", "Объект") = Неопределено Тогда
		НовыеСведения = ТаблицаСведений.Добавить();
		НовыеСведения.Объект          = "РегистрСведений.ОчередьЧековККТ";
		НовыеСведения.ПоляРегистрации = "СубъектПерсональныхДанных";
		НовыеСведения.ПоляДоступа     = "ДанныеЧека";
		НовыеСведения.ОбластьДанных   = "ПаспортныеДанные";
	КонецЕсли;
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	
	Если ОбластиПерсональныхДанных.Найти("ПаспортныеДанные", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "ПаспортныеДанные";
		НоваяОбласть.Представление = НСтр("ru = 'Паспортные данные'");
		НоваяОбласть.Родитель = "ЛичныеДанные";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсныйПроцедурыИФункции

Процедура ПодготовитьЭлементУправления(ЭлементУправления) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда    
		Если ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент() Тогда
			Если ЭлементУправления.Вид <> ВидПоляФормы.ПолеФлажка Тогда
				ЭлементУправления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			КонецЕсли;
			ЭлементУправления.ШрифтЗаголовка = ШрифтыСтиля.МелкийШрифтТекста;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подключение внешней компоненты.
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Процедура ПодключитьКомпонентуГенерацииИзображенияШтрихкода() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ПодключаемоеОборудование.ГенерацияШтрихкода") Тогда
		МодульГенерацияШтрихкода = ОбщегоНазначения.ОбщийМодуль("ГенерацияШтрихкода");
		КомпонентуГенерацииИзображения = МодульГенерацияШтрихкода.ПодключитьКомпонентуГенерацииИзображенияШтрихкода();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ГенерацияШтрихкода.ИзображениеШтрихкода()
// Формирование изображения штрихкода.
//
// Параметры: 
//   ПараметрыШтрихкода - Структура (Конструктор ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода())
//
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
//
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	РезультатОперации = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	Если РезультатОперации.Результат Тогда
		Возврат РезультатОперации.Картинка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КодаВидаНоменклатурнойКлассификации

// Возвращает класификатор кода вида номенклатурной классификации
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция КодыВидаНоменклатурнойКлассификации() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НаименованиеВидаНоменклатурнойКлассификации",,"НаименованиеВидаНоменклатурнойКлассификации");
	ТаблицаЗначений.Колонки.Добавить("КодВидаНоменклатурнойКлассификации",,"КодВидаНоменклатурнойКлассификации");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = ПолучитьОбщийМакет("КодВидаНоменклатурнойКлассификации").ПолучитьТекст() ;
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "КодВидаНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "ВидНоменклатурнойКлассификации" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
					ВидНоменклатурнойКлассификации = ТаблицаЗначений.Добавить();
					ВидНоменклатурнойКлассификации.НаименованиеВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("Имя");
					ВидНоменклатурнойКлассификации.КодВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("КодВида");
				КонецЕсли;
			КонецЦикла;           
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКодыТоваров(ТЗ, Элемент, Уровень = "Товар")
	
	Если Уровень = "Товар" Тогда
		
		Если Элемент.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Элемент.Характеристики Цикл
				ДобавитьКодыТоваров(ТЗ, ТекХарактеристика, "Характеристика");
			КонецЦикла;
			
		ИначеЕсли Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Элемент.ИмеетУпаковки Тогда
			
			Для Каждого ТекУпаковка Из Элемент.Упаковки Цикл
				ДобавитьКодыТоваров(ТЗ, ТекУпаковка, "Упаковка");
			КонецЦикла;
			
		Иначе
			
			ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		ДобавитьЭлементВКоллекцию(Элемент, ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементВКоллекцию(Элемент, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	
	Попытка
		НоваяСтрока.Код = Число(Элемент.Код);
	Исключение
		НоваяСтрока.Код = 0;
	КонецПопытки;;
	
	НоваяСтрока.Количество = 1;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.СтатусПоследнейСмены(ИдентификаторУстройства);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ТребуетсяЗакрытиеСмены(ИдентификаторУстройства) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			Если МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ИдентификаторУстройства) = Неопределено
				И ПолучитьТипПодключаемогоОборудования(ИдентификаторУстройства) = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция НоваяКассоваяСмена(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.НоваяКассоваяСмена(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ОписаниеПоследнейКассовойСмены(ФискальноеУстройство) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		Возврат МодульКассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФискальноеУстройство);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
///
Функция ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
		МодульКассовыеСменыВызовСервера.ИнкрементироватьТекущийНомерЧекаККТ(ФискальноеУстройство, КассоваяСмена);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
Процедура ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды) Экспорт
	
	Если ИспользуетсяПодсистемыФискальныхУстройств() Тогда
			МодульКассовыеСменыВызовСервера = ОбщегоНазначения.ОбщийМодуль("КассовыеСменыВызовСервера");
			МодульКассовыеСменыВызовСервера.ПослеВыполненияКомандыФискальнымУстройством(ПараметрыКоманды);
	Иначе
		ВызватьИсключение НСтр("ru='Выполнение команды невозможно, поскольку подсистемы ККТ, ФР, Принтер чеков недоступны.'");
	КонецЕсли;
	
КонецПроцедуры

Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	Если Штрихкод = Неопределено Тогда 
		ДвоичныеДанныеСтроки = Неопределено;
	Иначе
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
		ШтрихкодBase64 = Base64Строка(ДвоичныеДанныеСтроки);
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ПС, "");
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ВК, "");
	КонецЕсли;
	
	Возврат ШтрихкодBase64;
	
КонецФункции

#КонецОбласти