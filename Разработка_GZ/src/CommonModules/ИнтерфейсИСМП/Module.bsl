#Область ПрограммныйИнтерфейс

#Область РеестрКодовМаркировки

// Построить дерево упаковок на основании данных о кодах маркировки.
// 
// Параметры:
//  Значение - Массив Из Структура, Структура - Коды маркировки? для которых необходимо построить дерево упаковок
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС, Неопределено - Детализация хранения обувной продукции
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Структура - Описание:
//   * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//   * ТекстОшибки                    - Строка - Текст ошибки.
//   * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
//   * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//    ** GTIN - Строка - GTIN.
Функция ДеревоУпаковок(Значение, Детализация = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	Возврат ИнтерфейсМОТП.ДеревоУпаковок(Значение, Детализация, ПараметрыСканирования);
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//  МассивИсходныхСтрок - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  Организация - ОпределяемыйТип.Организация - Организация
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* СтатусыКодовМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти - элемент переданной входящей колеекции.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СтатусыКодовМаркировки(МассивИсходныхСтрок, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	
	Для Каждого ИсходнаяСтрока Из МассивИсходныхСтрок Цикл
		
		Если ПакетКодовМаркировки = Неопределено
			Или ПакетКодовМаркировки.Количество() >= 25 Тогда
			ПакетКодовМаркировки = Новый Массив();
			ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(ИсходнаяСтрока);
		
	КонецЦикла;
	
	СтатусыКодовМаркировки = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = СтатусыКодовМаркировкиПакетно(
			ПакетКодовМаркировки, СтатусыКодовМаркировки, Организация);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСтатусовКодовМаркировок.РезультатОтправкиЗапроса;
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//  МассивИсходныхСтрок - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  СтатусыКодовМаркировкиКеш - Соответствие, Неопределено - Кеш статусов кодов маркировки
//  Организация - ОпределяемыйТип.Организация - Организация
//  ВключатьСтатусыВложенныхКодов - Булево - Включать в соответствие СтатусыКодовМаркировки статусы вложенных кодов маркировки
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	отправки запроса.
//	* СтатусыКодовМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СтатусыКодовМаркировкиПакетно(МассивИсходныхСтрок, СтатусыКодовМаркировкиКеш = Неопределено, Организация = Неопределено, ВключатьСтатусыВложенныхКодов = Ложь) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СоответствиеКодовМаркировки      = Новый Соответствие;
	ПараметрыЗапросаПоВидамПродукции = Новый Соответствие;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	
	Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
		
		ПараметрыЗапроса = ПараметрыЗапросаПоВидамПродукции[СтрокаТаблицы.ВидПродукции];
		Если ПараметрыЗапроса = Неопределено Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ПараметрыURL",    Новый Массив);
			ПараметрыЗапроса.Вставить("КодыМаркировки",  Новый Массив);
			ПараметрыЗапроса.Вставить("ДобавленныеКоды", Новый Соответствие);
			
			Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				ПараметрыЗапроса.ПараметрыURL.Добавить(
					СтрШаблон(
						"pg=%1",
						ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаТаблицы.ВидПродукции)));
			КонецЕсли;
			
			ПараметрыЗапросаПоВидамПродукции.Вставить(СтрокаТаблицы.ВидПродукции, ПараметрыЗапроса);
			
		КонецЕсли;
		
		НормализованныйКодМаркировки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(СтрокаТаблицы, ПараметрыНормализации);
		
		СоответствиеКодовМаркировки.Вставить(СтрокаТаблицы, НормализованныйКодМаркировки);
		
		Если ПараметрыЗапроса.ДобавленныеКоды[НормализованныйКодМаркировки] <> Неопределено Тогда
			Продолжить;
		Иначе
			ПараметрыЗапроса.ДобавленныеКоды.Вставить(НормализованныйКодМаркировки, Истина);
		КонецЕсли;
		
		ПараметрыЗапроса.КодыМаркировки.Добавить(НормализованныйКодМаркировки);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначениеПараметровЗапроса Из ПараметрыЗапросаПоВидамПродукции Цикл
		
		ВидПродукции     = КлючИЗначениеПараметровЗапроса.Ключ;
		ПараметрыЗапроса = КлючИЗначениеПараметровЗапроса.Значение;
		
		URLЗапроса = СтрШаблон(
			"api/v4/facade/cis/cis_list%1",
			ПараметрыЗапроса(ПараметрыЗапроса.ПараметрыURL));
		
		ДанныеЗапроса = Новый Структура();
		ДанныеЗапроса.Вставить("cises", ПараметрыЗапроса.КодыМаркировки);
		
		РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
			URLЗапроса,
			ДанныеЗапроса,
			КлючСессии,
			"POST",
			ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
		
		РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
		
		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
			
			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
				ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(
					РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если ДанныеОбработки = Неопределено Тогда
					
					ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
					ВозвращаемоеЗначение.ТекстОшибки = СокрЛП(
						ВозвращаемоеЗначение.ТекстОшибки + Символы.ПС + ТекстОшибки);
					
				Иначе
					
					СтатусыПоЗначениямДляПоиска = Новый Соответствие;
					Для Каждого КлючИЗначение Из ДанныеОбработки Цикл
						
						СтатусыПоЗначениямДляПоиска.Вставить(
							КлючИЗначение.Ключ,
							ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки(
								КлючИЗначение.Значение, ВидПродукции, Ложь));
						
					КонецЦикла;
					
					Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
						СтатусыКодовМаркировки = Новый Соответствие;
					Иначе
						СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
					КонецЕсли;
					
					Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
						
						ЗначениеДляПоиска = СоответствиеКодовМаркировки[СтрокаТаблицы];
						
						ПараметрыКодаМаркировки = СтатусыПоЗначениямДляПоиска[ЗначениеДляПоиска];
						Если ПараметрыКодаМаркировки = Неопределено Тогда
							
							Если СтатусыКодовМаркировки[СтрокаТаблицы] <> Неопределено Тогда
								Продолжить;
							Конецесли;
							
							ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыКодаМаркировки();
							ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
							
						ИначеЕсли ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции)
								И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) Тогда
							
							СтрокаТаблицы.ВидПродукции = ПараметрыКодаМаркировки.ВидПродукции;
							
						КонецЕсли;
						
						СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
						
						// Интерфейс v4 возвращает статусы по дочерним элементам кода маркировки
						Если ВключатьСтатусыВложенныхКодов
							И ПараметрыКодаМаркировки.ВложенныеУпаковки <> Неопределено Тогда
							Для Каждого КлючИЗначение Из ПараметрыКодаМаркировки.ВложенныеУпаковки Цикл
								СтатусыКодовМаркировки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
					
					ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
				Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				КонецЕсли;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//	СтрокаКодаМаркировки - СтрокаТабличнойЧасти, см. ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода - Строка кода.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* ПараметрыКодаМаркировки - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ПараметрыКодаМаркировки).
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПараметрыСредстваИдентификации(СтрокаКодаМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;

	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаКодаМаркировки.ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаКодаМаркировки.ВидПродукции)));
	КонецЕсли;

	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"cis=%1",
				КодироватьСтроку(
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации),
					СпособКодированияСтроки.КодировкаURL)));

	URLЗапроса = СтрШаблон(
		"api/v4/facade/identifytools/info%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса, КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(СтрокаКодаМаркировки.ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыСредстваИдентификации(
					ДанныеОбработки, СтрокаКодаМаркировки.ВидПродукции);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
				ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// 
// Параметры:
//	СтрокаКодаМаркировки - СтрокаТаблицыЗначений, Структура - Строка кода маркировки.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* ПараметрыКодаМаркировки - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара)
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПараметрыМаркированнойПродукции(СтрокаКодаМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;

	ПараметрыЗапроса = Новый Массив;
	Если СтрокаКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
		Или СтрокаКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
		Или СтрокаКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаКодаМаркировки.ВидПродукции)));
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"cis=%1",
				КодироватьСтроку(
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации),
					СпособКодированияСтроки.КодировкаURL)));
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/marked_products/info%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(СтрокаКодаМаркировки.ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара(
					ДанныеОбработки, СтрокаКодаМаркировки.ВидПродукции);
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Найти средства идентификации организации по отбору.
// 
// Параметры:
//	ПараметрыОтбора - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораСредствИдентификации)
//	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* КодыМаркировки - Соответствие Из КлючИЗначение - Соответствие кода маркировки и параметров статуса:
//		** Ключ     - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыСредстваИдентификации)
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СписокСредствИдентификации(ПараметрыОтбора = Неопределено, ВидПродукции = Неопределено, ПараметрыНавигации = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИННПроизводителя") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"producerInn=%1",
					ПараметрыОтбора.ИННПроизводителя));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодМаркировки") Тогда
			
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
				ПараметрыОтбора.КодМаркировки, ВидПродукции);
			КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cis=%1",
					КодироватьСтроку(
						КодМаркировкиБезСкобок,
						СпособКодированияСтроки.КодировкаURL)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СерийныйНомер") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"sn=%1",
					ПараметрыОтбора.СерийныйНомер));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("GTIN") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtin=%1",
					ПараметрыОтбора.GTIN));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодТНВЭД") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"tnVed10=%1",
					ПараметрыОтбора.КодТНВЭД));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Статус") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cisStatus=%1",
					ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ПараметрыОтбора.Статус)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипЭмиссии") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"emissionType=%1",
					ПараметрыОтбора.ТипЭмиссии));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateFrom=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateTo=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			10));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"order=%1",
			"DESC"));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"orderColumn=%1",
			"emd"));
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Далее" Тогда
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			ПараметрыНавигации.КодМаркировкиПоследний, ВидПродукции);
		КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"uit=%1",
				КодироватьСтроку(
					КодМаркировкиБезСкобок,
					СпособКодированияСтроки.КодировкаURL)));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"NEXT"));
	КонецЕсли;
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Назад" Тогда
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			ПараметрыНавигации.КодМаркировкиПервый, ВидПродукции);
		КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"uit=%1",
				КодироватьСтроку(
					КодМаркировкиБезСкобок,
					СпособКодированияСтроки.КодировкаURL)));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"PREV"));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/facade/identifytools/listV2%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КодыМаркировки = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки["results"] Цикл
					
					ПараметрыСредстваИдентификации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыСредстваИдентификации(ЭлементДанных, ВидПродукции);
					
					НормализованныйКодМаркировки = РазобратьИНормализоватьКодМаркировки(ЭлементДанных["cis"], ВидПродукции);

					КодыМаркировки.Вставить(НормализованныйКодМаркировки, ПараметрыСредстваИдентификации);
					
				КонецЦикла;
				
				КоличествоЭлементов = ДанныеОбработки["results"].Количество();

				ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации();
				Если КоличествоЭлементов > 0 Тогда
					ПараметрыНавигации.КодМаркировкиПервый          = ДанныеОбработки["results"][0]["cis"];
					ПараметрыНавигации.ЗначениеПоляСортировкиПервое = ДанныеОбработки["results"][0]["emissionDate"];
					ПараметрыНавигации.КодМаркировкиПоследний          = ДанныеОбработки["results"][КоличествоЭлементов - 1]["cis"];
					ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = ДанныеОбработки["results"][КоличествоЭлементов - 1]["emissionDate"];
				КонецЕсли;

				ВозвращаемоеЗначение.ПараметрыНавигации = ПараметрыНавигации;
				ВозвращаемоеЗначение.КодыМаркировки     = КодыМаркировки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Найти маркированные товары по отбору.
// 
// Параметры:
//	ПараметрыОтбора - Структура - Параметры отбора
//	 См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораСредствИдентификации.
//	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* КодыМаркировки - Соответствие Из КлючИЗначение - Соответствие кода маркировки и параметров статуса:
//		** Ключ     - Строка - Код маркировки.
//		** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара)
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СписокМаркированнойПродукции(ПараметрыОтбора = Неопределено, ВидПродукции = Неопределено, ПараметрыНавигации = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИННПроизводителя") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"producerInn=%1",
					ПараметрыОтбора.ИННПроизводителя));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодМаркировки") Тогда
			
			РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
				ПараметрыОтбора.КодМаркировки, ВидПродукции);
			КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
			
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cis=%1",
					КодироватьСтроку(
						КодМаркировкиБезСкобок,
						СпособКодированияСтроки.КодировкаURL)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СерийныйНомер") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"sn=%1",
					ПараметрыОтбора.СерийныйНомер));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("GTIN") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtin=%1",
					ПараметрыОтбора.GTIN));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("КодТНВЭД") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"tnVed10=%1",
					ПараметрыОтбора.КодТНВЭД));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Статус") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cisStatus=%1",
					ИнтерфейсИСМПСлужебный.СтатусКодаМаркировки(ПараметрыОтбора.Статус)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТолькоАгрегированные") Тогда
			
			Если ПараметрыОтбора.ТолькоАгрегированные Тогда
				ЗначениеОтбора = "PACKED";
			Иначе
				ЗначениеОтбора = "NOT_PACKED";
			КонецЕсли;
			
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"cisAggregationStat=%1",
					ЗначениеОтбора));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СпособВыпускаВОборот") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"emissionType=%1",
					ИнтерфейсИСМПСлужебный.СпособВыпускаВОборот(ПараметрыОтбора.СпособВыпускаВОборот)));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateFrom=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"emissionDateTo=%1",
						ИнтеграцияИС.ДатаСЧасовымПоясом(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			10));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"order=%1",
			"DESC"));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"orderColumn=%1",
			"emd"));
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Далее" Тогда
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			ПараметрыНавигации.КодМаркировкиПоследний, ВидПродукции);
		КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"uit=%1",
				КодироватьСтроку(
					КодМаркировкиБезСкобок,
					СпособКодированияСтроки.КодировкаURL)));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"NEXT"));
	КонецЕсли;
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Назад" Тогда
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			ПараметрыНавигации.КодМаркировкиПервый, ВидПродукции);
		КодМаркировкиБезСкобок = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"uit=%1",
				КодироватьСтроку(
					КодМаркировкиБезСкобок,
					СпособКодированияСтроки.КодировкаURL)));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"PREV"));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/facade/marked_products/listV2%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				КодыМаркировки = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки["results"] Цикл
					
					ПараметрыМаркированногоТовара = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыМаркированногоТовара(ЭлементДанных, ВидПродукции);
					
					НормализованныйКодМаркировки = РазобратьИНормализоватьКодМаркировки(ЭлементДанных["cis"], ВидПродукции);

					КодыМаркировки.Вставить(НормализованныйКодМаркировки, ПараметрыМаркированногоТовара);
					
				КонецЦикла;
				
				КоличествоЭлементов = ДанныеОбработки["results"].Количество();

				ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации();
				Если КоличествоЭлементов > 0 Тогда
					ПараметрыНавигации.КодМаркировкиПервый          = ДанныеОбработки["results"][0]["cis"];
					ПараметрыНавигации.ЗначениеПоляСортировкиПервое = ДанныеОбработки["results"][0]["emissionDate"];
					ПараметрыНавигации.КодМаркировкиПоследний          = ДанныеОбработки["results"][КоличествоЭлементов - 1]["cis"];
					ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = ДанныеОбработки["results"][КоличествоЭлементов - 1]["emissionDate"];
				КонецЕсли;

				ВозвращаемоеЗначение.ПараметрыНавигации = ПараметрыНавигации;

				ВозвращаемоеЗначение.КодыМаркировки = КодыМаркировки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить вид продукции для кодов идентификации.
// Используется метод true-api cises/info.
// 
// Параметры:
//	МассивКодовМаркировки - Массив - коды маркировки.
//	Организация - СправочникСсылка.Организации - организация.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции по данным сервиса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ТоварнаяГруппаПоКодамИдентификации(МассивКодовМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПараметрыURL",    Новый Массив);
	ПараметрыЗапроса.Вставить("КодыМаркировки",  Новый Массив);
	
	Для Каждого КодМаркировки Из МассивКодовМаркировки Цикл
		
		ПараметрыЗапроса.КодыМаркировки.Добавить(КодМаркировки);
		
	КонецЦикла;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/cises/info%1",
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса.ПараметрыURL));
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ПараметрыЗапроса.КодыМаркировки, КлючСессии,
		"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
						
						ДанныеКодаМаркировки = ЭлементДанных["cisInfo"];
						
						КодОшибки = ЭлементДанных["errorCode"];
						Если КодОшибки = "404" Тогда
							
						Иначе
							
							ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки(ДанныеКодаМаркировки);
							ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ПараметрыКодаМаркировки);
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции.
// 
// Параметры:
//	Идентификатор - Строка                                           - Идентификатор карточки продукции в ИС МП.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//	* ДанныеПродукции - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции)
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьКарточкуПродукции(Идентификатор, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон(
		"api/v4/product/%1%2",
		КодироватьСтроку(Идентификатор, СпособКодированияСтроки.КодировкаURL),
		ПараметрыЗапроса(ПараметрыЗапроса));

	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ДанныеОбработки);
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции) - Реквизиты продукции:
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса              = Новый Массив;
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	ИсходныеЗначенияЗапроса       = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Значение);
		ИсходныеЗначенияЗапроса.Вставить(GTIN, Значение);
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				GTIN));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		ДанныеДляЗапроса = Новый Массив;
		Для Каждого ШтрихкодEAN Из Значение Цикл
			GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
			ИсходныеЗначенияЗапроса.Вставить(GTIN, ШтрихкодEAN);
			ДанныеДляЗапроса.Добавить(GTIN);
		КонецЦикла;
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				СтрСоединить(ДанныеДляЗапроса, ",")));
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ПараметрыОтправкиHTTPЗапросов = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("");
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/product/info%1", ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ПараметрыОтправкиHTTPЗапросов);
		
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					КлючРезультата = ИсходныеЗначенияЗапроса.Получить(ДанныеПродукции.GTIN);
					Если КлючРезультата = Неопределено Тогда
						КлючРезультата = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN)
					КонецЕсли;
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(КлючРезультата, ДанныеПродукции);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОтправкиЗапроса.КодСостояния <> 404 Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить наименования продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и наименования продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - Строка - Наименование продукции.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НаименованияПродукцииПоШтрихкодуEAN(Значение, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",      КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",            Неопределено);
	ВозвращаемоеЗначение.Вставить("НаименованиеПродукцииПоШтрихкодуEAN", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                         "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса                    = Новый Массив;
	НаименованиеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		НаименованиеПродукцииПоШтрихкодуEAN.Вставить(Значение, Неопределено);
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"gtins=%1",
				ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Значение)));
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ШтрихкодEAN Из Значение Цикл
			НаименованиеПродукцииПоШтрихкодуEAN.Вставить(ШтрихкодEAN, Неопределено);
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"gtins=%1",
					ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN)));
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон(
		"api/v4/product/names%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого КлючИЗначение Из ДанныеОбработки Цикл
					
					НаименованиеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(КлючИЗначение.Ключ),
						КлючИЗначение.Значение);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.НаименованиеПродукцииПоШтрихкодуEAN = НаименованиеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить список продукции по ИНН производителя.
// 
// Параметры:
// 	ИНН           - Строка                             - ИНН производителя.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	НомерСтраницы - Число                              - Номер страницы.
// 	Организация   - ОпределяемыйТип.Организация        - Организация.
// 	ВариантAPI    - Строка, Неопределено               - Вариант используемого API (ТАПИ, v3).
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции).
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоИННПроизводителя(ИНН, ВидПродукции, НомерСтраницы = 0, Организация = Неопределено, ВариантAPI = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(СтрШаблон("page=%1",  Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("pg=%1", ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(СтрШаблон("limit=%1", 100));
	
	Если ВариантAPI = Неопределено Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("inn=%1",   КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL)));
		ПараметрыЗапроса.Добавить(СтрШаблон("includeSubaccount=%1", Формат(Истина, "БЛ=false; БИ=true;")));
		URLЗапроса = СтрШаблон("api/v4/product/search%1", ПараметрыЗапроса(ПараметрыЗапроса));
		ПараметрыОтправкиHTTPЗапросов = ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции);
	Иначе
		URLЗапроса = СтрШаблон("api/v3/true-api/product/gtin%1", ПараметрыЗапроса(ПараметрыЗапроса));
		ПараметрыОтправкиHTTPЗапросов = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("");
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ПараметрыОтправкиHTTPЗапросов);
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				
				Если ВариантAPI = Неопределено Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
						ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
						ДанныеПродукцииПоШтрихкодуEAN.Вставить(
							ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
							ДанныеПродукции);
					КонецЦикла;
					
					ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
					
				Иначе
					
					Если ДанныеОбработки.total = 0 Или ДанныеОбработки.gtins.Количество() = 0 Тогда
						ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
					
					ОтветДанныеПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN(ДанныеОбработки.gtins, ВидПродукции);
					Если ОтветДанныеПоШтрихкодуEAN.ТребуетсяОбновлениеКлючаСессии Тогда
						ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
					ИначеЕсли ОтветДанныеПоШтрихкодуEAN.РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						Для Каждого GTIN Из ДанныеОбработки.gtins Цикл
							ДанныеПродукцииПоШтрихкодуEAN.Вставить(
								ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN),
								ОтветДанныеПоШтрихкодуEAN.ДанныеПродукцииПоШтрихкодуEAN.Получить(GTIN));
						КонецЦикла;
						ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
							URLЗапроса,
							ОтветДанныеПоШтрихкодуEAN.РезультатОтправкиЗапроса);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос списка продукции.
// В результате успешного выполнения запроса в ответе вернется список продукции,
// содержащие id - идентификатор продукта, gtin - международный товарный идентификатор и producerINN - ИНН производителя. 
// 
// Параметры:
// 	ПараметрыОтбора - Структура - Параметры отбора:
// 	 * ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	 * Наименование  - Строка - Наименование.
// 	 * ИНН           - Строка - ИНН производителя.
// 	 * ТорговаяМарка - Строка - Наименование торговой марки.
// 	 * Модель        - Строка - Наименование модели производителя.
// 	 * ТипУпаковки   - Строка - ТипУпаковки.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции)
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоОтбору(ПараметрыОтбора) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыОтбора.ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ПараметрыОтбора.ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон("api/v4/product/search?%1", СтрСоединить(ПараметрыЗапроса,"&"));

	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ПараметрыОтбора.ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить список продукции по части наименования.
// 
// Параметры:
// 	СтрокаПоиска - Строка - Часть наименования продукции.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	НомерСтраницы - Число - Номер страницы.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции).
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиПродукциюПоЧастиНаименования(СтрокаПоиска, ВидПродукции, НомерСтраницы = 1) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"text=%1",
			КодироватьСтроку(СтрокаПоиска, СпособКодированияСтроки.КодировкаURL)));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"page=%1",
			Формат(НомерСтраницы, "ЧН=0; ЧГ=0")));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			100));
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон(
		"api/v4/product/suggestions%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(
						ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN),
						ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

// Получить список документов по отбору.
// 
// Параметры:
// 	Организация  - ОпределяемыйТип.Организация                      - Организация.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - ВидПродукции.
// 	ПараметрыОтбора - см. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораДокументов.
// 	ПараметрыНавигации - Строка, Неопределено                       - Параметры навигации.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//  * ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии
//  * РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
//  * НайденныеДокументы - Массив Из См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента
//                       - Неопределено - Если при получении данных возникла ошибка.
//  * ТекстОшибки        - Строка - Текст сообщения об ошибке.
//  * ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам).
//                       - Неопределено - Если при получении данных возникла ошибка.
Функция НайтиДокументыПоОтбору(Организация, ВидПродукции = Неопределено, ПараметрыОтбора = Неопределено, ПараметрыНавигации = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеДокументы",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("ИНН") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"participantInn=%1",
					ПараметрыОтбора.ИНН));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СтатусДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentStatus=%1",
					ПараметрыОтбора.СтатусДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ФорматДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentFormat=%1",
					ПараметрыОтбора.ФорматДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипЗапроса") Тогда
			Если ПараметрыОтбора.ТипЗапроса = Перечисления.ТипыЗапросовИС.Входящий Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"inputFormat=%1",
						"true"));
			ИначеЕсли ПараметрыОтбора.ТипЗапроса = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"inputFormat=%1",
						"false"));
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ТипДокумента") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"documentType=%1",
					ПараметрыОтбора.ТипДокумента));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"number=%1",
					ПараметрыОтбора.Идентификатор));
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("Интервал") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateFrom=%1",
						ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.НачалоПериода)));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
				ПараметрыЗапроса.Добавить(
					СтрШаблон(
						"DateTo=%1",
						ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.КонецПериода)));
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			ПараметрыОтбора.КоличествоЗаписей));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"order=%1",
			"DESC"));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"orderColumn=%1",
			"receivedAt"));
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Далее" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"did=%1",
				ПараметрыНавигации.НомерДокументаПоследний));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"NEXT"));
	КонецЕсли;
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Назад" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"did=%1",
				ПараметрыНавигации.НомерДокументаПервый));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"PREV"));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/doc/listV2%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеДокументы  = Новый Массив;
				КоличествоЭлементов = ДанныеОбработки["results"].Количество();
				
				Если КоличествоЭлементов > 0 Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
						НайденныеДокументы.Добавить(
							ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента(
								ЭлементДанных));
					КонецЦикла;
					
					ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам();
					Если КоличествоЭлементов > 0 Тогда
						ПараметрыНавигации.НомерДокументаПервый            = ДанныеОбработки["results"][0]["number"];
						ПараметрыНавигации.ЗначениеПоляСортировкиПервое    = ДанныеОбработки["results"][0]["receivedAt"];
						ПараметрыНавигации.НомерДокументаПоследний         = ДанныеОбработки["results"][КоличествоЭлементов - 1]["number"];
						ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = ДанныеОбработки["results"][КоличествоЭлементов - 1]["receivedAt"];
					КонецЕсли;
					
					ПараметрыНавигации.КоличествоЗаписейВсего      = ДанныеОбработки["total"];
					ПараметрыНавигации.КоличествоЗаписейОбработано = КоличествоЭлементов;
					ВозвращаемоеЗначение.ПараметрыНавигации        = ПараметрыНавигации;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.НайденныеДокументы = НайденныеДокументы;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка                              - Идентификатор документа.
// 	Организация   - ОпределяемыйТип.Организация         - Организация
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// 	Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса       - см. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON.
// 	* ДанныеДокумента - Структура - Данные документа.
// 	                  - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиДокументаПоИдентификатору(Идентификатор, Организация = Неопределено, ВидПродукции = Неопределено, Операция = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"limit=%1",
				10));
	
	ПараметрыЗапроса.Добавить(СтрШаблон("number=%1", Идентификатор));
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/documents/%1/info%2",
		Идентификатор,
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.status);
				
				Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки 
					Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "errors") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ДанныеОбработки.errors, Символы.ПС);
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
					КонецЕсли;
				
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Проверен
					Или Статус = Перечисления.СтатусыДокументовИСМП.Принят Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения;
					ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ;
				ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована;
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус          = Статус;
				ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить состав документа по идентификатору.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	             - Неопределено.
// 	ПараметрыОтбора - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыОтбораДокументов).
// 	                - Неопределено.
// 	ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации).
// 	                   - Неопределено.
// 	ПараметрыОбработки - Структура, Неопределено - Параметры обработки.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - Структура - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON)
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки        - Строка - Текст ошибки.
// 	* СоставДокумента    - Массив - Состав документа из элемента данных products
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* Статус             - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа ИС МП
// 	* СтатусОбработки    - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения ИС МП
// 	* ДанныеДокумента    - Структура - (См. ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект) 
// 	* ПараметрыНавигации - Структура - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации)
// 	                     - Неопределено - Если при получении данных возникла ошибка.
Функция СоставДокументаПоИдентификатору(Организация, ВидПродукции = Неопределено, ПараметрыОтбора = Неопределено, Знач ПараметрыНавигации = Неопределено, ПараметрыОбработки = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("ИмяПоляТела",        "products");
		ПараметрыОбработки.Вставить("ИмяПоляСотировки",   "uit_code");
		ПараметрыОбработки.Вставить("РасширенныеСтатусы", Ложь);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СоставДокумента",                Неопределено);
	
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"limit=%1",
				Формат(ПараметрыОтбора.КоличествоЗаписей, "ЧГ=0;")));
		
		Идентификатор = ПараметрыОтбора.Идентификатор;
	КонецЕсли;
	
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"order=%1",
			"DESC"));
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"orderColumn=%1",
			ПараметрыОбработки.ИмяПоляСотировки));
	
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Далее" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"NEXT"));
	КонецЕсли;
	
	Если ПараметрыНавигации <> Неопределено
		И ПараметрыНавигации.Направление = "Назад" Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"orderedColumnValue=%1",
				ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pageDir=%1",
				"PREV"));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/documents/%1/info%2",
		Идентификатор,
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсИСМПСлужебный.СтатусДокумента(ДанныеОбработки.status);
				
				Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки
					Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "errors") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ДанныеОбработки.errors, Символы.ПС);
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
					КонецЕсли;
					
				ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
					И Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
					И Статус = Перечисления.СтатусыДокументовИСМП.Проверен
					Или Статус = Перечисления.СтатусыДокументовИСМП.Принят Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
					И Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения;
					ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
				ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
					И  Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ;
				ИначеЕсли ПараметрыОбработки.РасширенныеСтатусы
					И Статус = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована;
					
				Иначе
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					
					ВозвращаемоеЗначение.ДанныеДокумента = ДанныеОбработки;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус          = Статус;
				ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
				КоличествоЭлементов = ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела].Количество();
				Если КоличествоЭлементов > 0 Тогда
					
					СоставДокумента = Новый Массив;
					Для Каждого ЭлементДанных Из ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела] Цикл
						СоставДокумента.Добавить(ЭлементДанных);
					КонецЦикла;
					ВозвращаемоеЗначение.СоставДокумента = СоставДокумента;
					
					ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигации();
					ПараметрыНавигации.Направление = "Далее";
					
					Если ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела][0].Свойство(ПараметрыОбработки.ИмяПоляСотировки) Тогда
						ИмяКолонкиКМ = ПараметрыОбработки.ИмяПоляСотировки;
					Иначе
						ИмяКолонкиКМ = "uitu_code";
					КонецЕсли;
					КодОтбора = КодироватьСтроку(ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела][0][ИмяКолонкиКМ], СпособКодированияСтроки.КодировкаURL);
					
					ПараметрыНавигации.КодМаркировкиПервый          = КодОтбора;
					ПараметрыНавигации.ЗначениеПоляСортировкиПервое = КодОтбора;
					
					Если ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела][КоличествоЭлементов - 1].Свойство(ПараметрыОбработки.ИмяПоляСотировки) Тогда
						ИмяКолонкиКМ = ПараметрыОбработки.ИмяПоляСотировки;
					Иначе
						ИмяКолонкиКМ = "uitu_code";
					КонецЕсли;
					КодОтбора = КодироватьСтроку(ДанныеОбработки["body"][ПараметрыОбработки.ИмяПоляТела][КоличествоЭлементов - 1][ИмяКолонкиКМ], СпособКодированияСтроки.КодировкаURL);
					
					ПараметрыНавигации.КодМаркировкиПоследний          = КодОтбора;
					ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = КодОтбора;
					ПараметрыНавигации.КоличествоЗаписейОбработано     = КоличествоЭлементов;
					
					ВозвращаемоеЗначение.ПараметрыНавигации = ПараметрыНавигации;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЗаказыНаЭмиссиюКодовМаркировки

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиЗаказаКодовМаркировкиПоИдентификатору(Идентификатор, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/facade/order/%1/details",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(Перечисления.ВидыПродукцииИС.Обувь));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсИСМПСлужебный.СтатусЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки.order_status);
				
				Если    Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Аннулирован
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "errors") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ДанныеОбработки.errors, Символы.ПС);
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "order_status_details") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.order_status_details;
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>'");
					КонецЕсли;
					
				ИначеЕсли Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОписаниеОстатков
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы
					Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиОтгружены Тогда
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					
				Иначе
					
					СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.Статус          = Статус;
				ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция СоздатьДокументПоСообщению(Организация, Операция, ВидПродукции, ТекстСообщения, Подпись) Экспорт
	
	ПараметрыЗапроса = Новый Массив;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		ДокументBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ТекстСообщения);
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("document",        ДокументBase64);
		ТелоЗапроса.Вставить("document_format", "MANUAL");
		ТелоЗапроса.Вставить("signature",       ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		
		ПараметрыЗапроса = Новый Массив;
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pg=%1",
					ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
		КонецЕсли;
		
		URLЗапроса = СтрШаблон(
			"api/v4/facade/order%1",
			ПараметрыЗапроса(ПараметрыЗапроса));
		
		Возврат СоздатьЗаказНаЭмиссиюКодовМаркировки(
			URLЗапроса, ТелоЗапроса, Организация, Операция, ВидПродукции);
	
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции)
		И (Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
			Или ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииВыводаИзОборотаПоВидуПродукции(ВидПродукции).НайтиПоЗначению(Операция) <> Неопределено) Тогда
		
		Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			URLЗапроса = "api/v3/true-api/documents/aggregation/create";
		Иначе
			URLЗапроса = "api/v3/true-api/documents/dropped-out/create";
		КонецЕсли;
		
		ПоляФормы = Новый Массив();
		ПолеФормы = Новый Структура();
		ПолеФормы.Вставить("ИмяПоля",  "xmlFile");
		ПолеФормы.Вставить("ИмяФайла", "data.xml");
		ПолеФормы.Вставить("Тип",      "application/xml");
		ПолеФормы.Вставить("Тело",     ТекстСообщения);
		ПоляФормы.Добавить(ПолеФормы);
		
		ДанныеПреобразования = ДвоичныеДанныеPOSTЗапросаКакФорма(ПоляФормы);
		ТелоЗапроса = ДанныеПреобразования.ДвоичныеДанные;
		Размер      = ДанныеПреобразования.Размер;
		
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type",   "multipart/form-data; boundary=" + ДанныеПреобразования.Разделитель);
		ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовкиHTTP.Вставить("Content-Lenght", Формат(Размер, "ЧН=0; ЧГ=0;"));
		
		Если Подпись <> Неопределено Тогда
			ЗаголовкиHTTP.Вставить("X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		КонецЕсли;
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса          = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса         = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация         = Организация;
		ПараметрыСозданияДокумента.Операция            = Операция;
		ПараметрыСозданияДокумента.ЗаголовкиHTTP       = ЗаголовкиHTTP;
		ПараметрыСозданияДокумента.ПараметрыЗапроса    = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("");
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
	
	Иначе
		
		ДокументBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ТекстСообщения);
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("product_document", ДокументBase64);
		ТелоЗапроса.Вставить("document_format",  "MANUAL");
		ТелоЗапроса.Вставить("signature",        ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		ТелоЗапроса.Вставить("type",             ИнтерфейсИСМПСлужебный.ВидОперации(Операция));
		
		ПараметрыЗапроса = Новый Массив;
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pg=%1",
					ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
		КонецЕсли;
		
		URLЗапроса = СтрШаблон(
			"api/v3/true-api/lk/documents/create%1",
			ПараметрыЗапроса(ПараметрыЗапроса));
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса       = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса      = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация      = Организация;
		ПараметрыСозданияДокумента.Операция         = Операция;
		ПараметрыСозданияДокумента.ПараметрыЗапроса = ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("");
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РеестрКонтрагентов

// Найти контрагентов по части наименования.
// 
// Параметры:
// 	Значение - Строка - Часть наименования контрагента.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* НайденныеКонтрагенты - Массив Из (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента).
// 	                       - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиКонтрагентовПоЧастиНаименования(Значение, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеКонтрагенты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"name=%1",
				Значение));
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон(
		"api/v4/org/suggestions%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеКонтрагенты = Новый Массив;
				
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					ДанныеКонтрагента = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента(ЭлементДанных);
					
					НайденныеКонтрагенты.Добавить(ДанныеКонтрагента);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.НайденныеКонтрагенты = НайденныеКонтрагенты;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Найти контрагентов по ИНН.
// 
// Параметры:
// 	Значение - Строка - ИНН контрагента.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* НайденныеКонтрагенты - Массив Из (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента).
// 	                       - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция НайтиКонтрагентаПоИНН(Значение, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеКонтрагенты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"inn=%1",
				Значение));
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;

	URLЗапроса = СтрШаблон(
		"api/v4/org/registry/info%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			ИначеЕсли ДанныеОбработки.Количество() = 0 Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон("Не найдено данных о контрагенте с ИНН %1", Значение);
				
			Иначе
				
				НайденныеКонтрагенты = Новый Массив;
				
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					ДанныеКонтрагента = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеКонтрагента(ЭлементДанных);
					
					НайденныеКонтрагенты.Добавить(ДанныеКонтрагента);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.НайденныеКонтрагенты = НайденныеКонтрагенты;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрСУЗ

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции.
// 
// Параметры:
//	Идентификатор - Строка - Идентификатор карточки продукции в ИС МП.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
//	* ДанныеСУЗ - (См. ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеПродукции). - Данные СУЗ
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьИдентификаторАктивногоСУЗ(Организация) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Идентификатор",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v4/facade/suz/registry";
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(Перечисления.ВидыПродукцииИС.Обувь));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Идентификатор = ДанныеОбработки.suz_id;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Функция РазобратьИНормализоватьКодМаркировки(КодМаркировки, ВидПродукции = Неопределено) Экспорт

	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
		КодМаркировки, ВидПродукции, Неопределено, Неопределено, Ложь);

	Если ДанныеРазбора = Неопределено Тогда
		Возврат ШтрихкодированиеИСКлиентСервер.ШтрихкодВФорматеGS1(КодМаркировки);
	КонецЕсли;

	Возврат ДанныеРазбора.НормализованныйКодМаркировки;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает документ в ИС МП.
// 
// Параметры:
// 	Параметры - Структура - Описание:
// * URLЗапроса    - Строка - адрес на сервере.
// * ТелоЗапроса   - Структура - Данные тела запроса.
// * Организация   - ОпределяемыйТип.Организация - Организация.
// * Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// * ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// * ЗаголовкиHTTP - Соответствие, Неопределено - Заголовки HTTP запроса.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка -
// * ИдентификаторЗаявки - Неопределено -
// * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП -
// * РезультатОтправкиЗапроса - См. ИнтерфейсМОТПСлужебный.ОбработатьРезульатОтправкиHTTPЗапросаКакJSON
// * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
Функция СоздатьДокумент(Параметры)
	
	URLЗапроса          = Параметры.URLЗапроса;
	ТелоЗапроса         = Параметры.ТелоЗапроса;
	Организация         = Параметры.Организация;
	Операция            = Параметры.Операция;
	ЗаголовкиHTTP       = Параметры.ЗаголовкиHTTP;
	ПараметрыЗапроса    = Параметры.ПараметрыЗапроса;
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	Если ЗаголовкиHTTP <> Неопределено Тогда
		ЗаголовкиHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ПараметрыЗапроса,
		ЗаголовкиHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200
			Или РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			ИдентификаторЗаявки = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			Если РезультатОтправкиЗапроса.Объект <> Неопределено
				И РезультатОтправкиЗапроса.Объект.Свойство("id") Тогда
				ИдентификаторЗаявки = РезультатОтправкиЗапроса.Объект.id;
			КонецЕсли;
			
			Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаявки) Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ИдентификаторЗаявки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). - Результат
//	отправки запроса.
// 	* РеквизитыДокумента - Структура - Данные документа.
// 	                     - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СоздатьЗаказНаЭмиссиюКодовМаркировки(URLЗапроса, ТелоЗапроса, Организация, Операция, ВидПродукции)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии, "POST", ИнтерфейсИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(ВидПродукции));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 202 Тогда
			
			ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
			ВозвращаемоеЗначение.ИдентификаторЗаявки = РезультатОтправкиЗапроса.Объект.order_id;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возващает двоичные данные как пробразование по формату multipart/form-data.
// 
// Параметры:
// 	ПоляФормы - Массив из Структура:
// 	* ИмяПоля  - Строка - Имя поля формы.
// 	* ИмяФайла - Строка - Имя файла.
// 	* Тип      - Строка - Тип сожержимого.
// 	* Тело     - Строка - Содержание поля.
// Возвращаемое значение:
// 	Структура:
// 	* ДвоичныеДанные - ДвоичныеДанные - Результат преобразования.
// 	* Размер         - Число          - Размер данных.
// 	* Разделитель    - Строка         - Разделитель полей.
Функция ДвоичныеДанныеPOSTЗапросаКакФорма(ПоляФормы)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДвоичныеДанные", Неопределено);
	ВозвращаемоеЗначение.Вставить("Размер",         0);
	ВозвращаемоеЗначение.Вставить("Разделитель",    "");
	
	ИспользоватьBOM = Истина;
	Разделитель     = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(
		ПотокВПамяти,
		КодировкаТекста.UTF8,
		ПорядокБайтов.LittleEndian,,,
		ИспользоватьBOM);
	
	ТекущийИндекс = 0;
	Для Каждого ПолеФормы Из ПоляФормы Цикл
		
		ОписаниеСодержимого = СтрШаблон(
			"Content-Disposition: form-data; name=""%1""; filename=""%2""",
			ПолеФормы.ИмяПоля,
			ПолеФормы.ИмяФайла);
		ОписаниеТипа = СтрШаблон("Content-Type: %1", ПолеФормы.Тип);
		
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.ЗаписатьСтроку(ОписаниеСодержимого);
		ЗаписьДанных.ЗаписатьСтроку(ОписаниеТипа);
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку(ПолеФормы.Тело);
		Если ТекущийИндекс = ПоляФормы.ВГраница() Тогда
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--",, "");
		Иначе
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	
	ВозвращаемоеЗначение.ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	ВозвращаемоеЗначение.Размер         = ВозвращаемоеЗначение.ДвоичныеДанные.Размер();
	ВозвращаемоеЗначение.Разделитель    = Разделитель;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыеПараметрыСозданияДокумента()
	
	ПараметрыСозданияДокумента = Новый Структура();
	
	ПараметрыСозданияДокумента.Вставить("URLЗапроса");
	ПараметрыСозданияДокумента.Вставить("ТелоЗапроса");
	ПараметрыСозданияДокумента.Вставить("Организация");
	ПараметрыСозданияДокумента.Вставить("Операция");
	ПараметрыСозданияДокумента.Вставить("ЗаголовкиHTTP");
	ПараметрыСозданияДокумента.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыСозданияДокумента;
	
КонецФункции

// Формирует дополнение строки параметров URL.
// 
// Параметры:
// 	ПараметрыЗапроса - Массив из Строка, Неопределено - Данные параметров запроса
// Возвращаемое значение:
// 	Строка - Срока дополнения.
Функция ПараметрыЗапроса(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса <> Неопределено
		И ПараметрыЗапроса.Количество() > 0 Тогда
		Возврат "?" + СтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти