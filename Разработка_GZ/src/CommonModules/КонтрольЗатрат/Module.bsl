////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС МОДУЛЯ

Процедура ВыявитьУчетныеОшибкиРасчетСебестоимости(Ошибки, Период, Организация) Экспорт
	
	ПредопределенныеСчетаРасходов = УчетЗатрат.ПредопределенныеСчетаРасходов();
	
	// Настроен порядок использования счетов 20 и 23
	ПроверитьНастроеноИспользованиеСчетовПроизводства(Ошибки, Период, Организация);
	
	// Счета 20,23 в прошлых периодах закрыты без явных ошибок
	ПроверитьНетОтрицательногоСальдоПрямыхРасходов(Ошибки, Период, Организация);
	
	// Счета 25,26 закрыты в прошлых периодах
	ПроверитьНетНачальногоСальдоКосвенныхРасходов(Ошибки, Период, Организация);
	
	// На счетах 20,23,25,26 указаны подразделение, номенклатурная группа, статья затрат
	ЗаполненаАналитикаРасходов = ПроверитьЗаполненаАналитикаНаСчетахРасходов(Ошибки, Период, Организация);
		
	// Расчет долей списания косвенных расходов выполнен
	ПроверитьВыполненРасчетДолейСписанияКосвенныхРасходов(Ошибки, Период, Организация, ПредопределенныеСчетаРасходов);
	
	// На счетах 20,23 не использованы распределяемая статьи 
	ПроверитьИзвестенВидДеятельностиПрямыхРасходов(Ошибки, Период, Организация);
	
	// На счетах 20,23,25,26 нет статей с видом "Транспортные расходы"
	ПроверитьНетТранспортныхРасходовНаСчетахРасходовНаПроизводство(Ошибки, Период, Организация);
	
	// При реализации услуг указаны счета расходов
	ПроверитьЗаполненыСчетаРасходовПриРеализацииУслуг(Ошибки, Период, Организация);
	ПроверитьНетСчетовЗатратВместоСчетовРасходовПриРеализацииУслуг(Ошибки, Период, Организация);
	
	// При реализации услуг указаны номенклатурные группы
	ПроверитьЗаполненаНоменклатурнаяГруппаОказанныхУслуг(Ошибки, Период, Организация);
	
	// Распределение выручки по номенклатурным группам соответствует отнесенным на них затратам
	Если ЗаполненаАналитикаРасходов Тогда
		ПроверитьКорректноОтраженыДоходыРасходыЕНВД(Ошибки, Период, Организация);
	КонецЕсли;
	
	// Настройка распределения косвенных расходов выполнена корректно
	ПравилаРаспределенияРасходов.ПроверитьНастройку(Ошибки, Период, Организация);
	
КонецПроцедуры

Процедура ВыявитьУчетныеОшибкиРасходыНаПродажу(Ошибки, Период, Организация) Экспорт
	
	ПредопределенныеСчетаРасходовНаПродажу = УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу();
	
	// Расчет долей списания косвенных расходов выполнен
	ПроверитьВыполненРасчетДолейСписанияКосвенныхРасходов(Ошибки, Период, Организация, ПредопределенныеСчетаРасходовНаПродажу);
	
	ПроверитьНетТранспортныхРасходовНаСчетахРасходовНаПроизводство(Ошибки, Период, Организация);
	
	ПроверитьТранспортныеРасходыНеОтнесеныНаЕНВД(Ошибки, Период, Организация);
	
КонецПроцедуры

Процедура ОписатьОшибкиВыявленныеПриРасчетеСебестоимости(Ошибки, ДетальныеДанные, Период, Организация) Экспорт
	
	Если ДетальныеДанные.Свойство("НевернаяОценкаНезавершенногоПроизводства") Тогда
	
		ОписатьНевернаяОценкаНезавершенногоПроизводства(
			Ошибки, 
			ДетальныеДанные.НевернаяОценкаНезавершенногоПроизводства, 
			Период, 
			Организация);
			
	КонецЕсли;
		
	Если ДетальныеДанные.Свойство("РасходыНеУдалосьРаспределить") Тогда
	
		ОписатьРасходыНеУдалосьРаспределить(
			Ошибки, 
			ДетальныеДанные.РасходыНеУдалосьРаспределить,
			Период, 
			Организация);
			
	КонецЕсли;
		
	Если ДетальныеДанные.Свойство("ВыпускБезЗатрат") Тогда
	
		ОписатьВыпускБезЗатрат(Ошибки, ДетальныеДанные.ВыпускБезЗатрат, Организация);
			
	КонецЕсли;
	
КонецПроцедуры

// ПРОВЕРКА ЗАПОЛНЕНИЯ АНАЛИТИКИ НА СЧЕТАХ ЗАТРАТ

// Создает временные таблицы, которые содержат список счетов затрат, на которых обязательна та или иная аналитика
//
Процедура СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц, ПроверятьСтатьиЗатрат = Ложь) Экспорт
	
	// Общее правило: аналитика на счетах затрат должна быть заполнена.
	// Исключения:    
	// 1. на счете 26 может быть не заполнено подразделение
	// 2. номенклатурные группы могут быть не заполнены, если учет по ним не ведется
	// 3. статья затрат может быть не заполнена: расходы без статьи затрат считаются обычными расходами.
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаРасходов",                            УчетЗатрат.ПредопределенныеСчетаРасходов());
	Запрос.УстановитьПараметр("КалькуляционныеСчета",                     УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	Запрос.УстановитьПараметр("ИспользоватьНесколькоНоменклатурныхГрупп", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаГдеОбязательныПодразделения
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|	И Хозрасчетный.УчетПоПодразделениям
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ СчетаГдеОбязательныНоменклатурныеГруппы
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&КалькуляционныеСчета)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|	И &ИспользоватьНесколькоНоменклатурныхГрупп
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
	Если Не ПроверятьСтатьиЗатрат Тогда
		
		// Создадим пустую временную таблицу
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	0 КАК НомерСубконто
		|ПОМЕСТИТЬ СчетаГдеОбязательныСтатьиЗатрат
		|ГДЕ
		|	ЛОЖЬ";
	
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
		|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
		|ПОМЕСТИТЬ СчетаГдеОбязательныСтатьиЗатрат
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
		|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет";
	
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Позволяет вывести текст сообщения об ошибке вида "Не заполнена аналитика" в соответствии с правилами русского языка.
// Для этого добавляет в ПараметрыСообщения ключи:
//  - Реквизиты                 - Перечень аналитики в именительном падеже (например "подразделение, статья затрат")
//  - РеквизитыВинительныйПадеж - Перечень аналитики в винительном падеже  (например "подразделение, статью затрат")
//
// Параметры:
//  ПараметрыСообщения   - Структура
//  НеЗаполненаАналитика - Массив - может содержать строки "Подразделение", "НоменклатурнаяГруппа", "СтатьяЗатрат"
//
Процедура ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыСообщения, НеЗаполненаАналитика) Экспорт
	
	НаименованияАналитики = Новый Структура();
	НаименованияАналитики.Вставить("Подразделение",        НСтр("ru = 'подразделение'"));
	НаименованияАналитики.Вставить("НоменклатурнаяГруппа", НСтр("ru = 'номенклатурная группа'"));
	НаименованияАналитики.Вставить("СтатьяЗатрат",         НСтр("ru = 'статья затрат'"));
	
	НаименованияАналитикиВинительныйПадеж = Новый Структура();
	НаименованияАналитикиВинительныйПадеж.Вставить("Подразделение",        НСтр("ru = 'подразделение'"));
	НаименованияАналитикиВинительныйПадеж.Вставить("НоменклатурнаяГруппа", НСтр("ru = 'номенклатурную группу'"));
	НаименованияАналитикиВинительныйПадеж.Вставить("СтатьяЗатрат",         НСтр("ru = 'статью затрат'"));
	
	Если НеЗаполненаАналитика.Количество() = 1 Тогда
		
		ИмяАналитики = НеЗаполненаАналитика[0];
		
		СтрокаРеквизиты                 = НаименованияАналитики[ИмяАналитики];
		СтрокаРеквизитыВинительныйПадеж = НаименованияАналитикиВинительныйПадеж[ИмяАналитики];
		
	Иначе
		
		НаименованияНеЗаполненнойАналитики                 = Новый Массив;
		НаименованияНеЗаполненнойАналитикиВинительныйПадеж = Новый Массив;
		Для Каждого ИмяАналитики Из НеЗаполненаАналитика Цикл
			НаименованияНеЗаполненнойАналитики.Добавить(НаименованияАналитики[ИмяАналитики]);
			НаименованияНеЗаполненнойАналитикиВинительныйПадеж.Добавить(НаименованияАналитикиВинительныйПадеж[ИмяАналитики]);
		КонецЦикла;
		СтрокаРеквизиты = СтрСоединить(НаименованияНеЗаполненнойАналитики, ", ");
		СтрокаРеквизитыВинительныйПадеж = СтрСоединить(НаименованияНеЗаполненнойАналитикиВинительныйПадеж, ", ");
		
	КонецЕсли;
	
	ПараметрыСообщения.Вставить("Реквизиты",                 СтрокаРеквизиты);
	ПараметрыСообщения.Вставить("РеквизитыВинительныйПадеж", СтрокаРеквизитыВинительныйПадеж);
	
КонецПроцедуры

// Позволяет вывести текст сообщения об ошибке вида "Не заполнена аналитика" в соответствии с правилами русского языка.
// Для этого склоняет переданные слова в соответствии от числа и рода наименований переданных разрезов аналитики.
// Результат помещает в ПараметрыСообщения.
//
// Параметры:
//  ПараметрыСообщения 
//                - Структура - 
//                  Будут добавлены элементы:
//                  - Ключ     - из параметра СловаДляСклонения (см. далее)
//                  - Значение - словоформа в склонении, соответствующем перечню аналитики (например, "КрасныйЦвет" - "красная")
//  СловаДляСклонения 
//                - Структура - описывает склонение слова
//                  - Ключ - строка шаблона (например, "КрасныйЦвет")
//                  - Значение - структура с 4 элементами
//                              - Ключи - "он", "она", "оно", "они"
//                              - Значения - словоформы в соответствующем склонении ("красный", "красная", "красное", "красные")
//  НеЗаполненаАналитика
//                - Массив - может содержать строки "Подразделение", "НоменклатурнаяГруппа", "СтатьяЗатрат"
//
Процедура ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыСообщения, НеЗаполненаАналитика, СловаДляСклонения) Экспорт
	
	РодНаименованияАналитики = Новый Структура();
	РодНаименованияАналитики.Вставить("Подразделение",        НСтр("ru = 'оно'"));
	РодНаименованияАналитики.Вставить("НоменклатурнаяГруппа", НСтр("ru = 'она'"));
	РодНаименованияАналитики.Вставить("СтатьяЗатрат",         НСтр("ru = 'она'"));
	
	Если НеЗаполненаАналитика.Количество() = 1 Тогда
		
		ИмяАналитики = НеЗаполненаАналитика[0];
		Род = РодНаименованияАналитики[ИмяАналитики];
		
	Иначе
		
		Род = "они";
		
	КонецЕсли;
	
	Для Каждого Слово Из СловаДляСклонения Цикл
		
		ПравилаРодИЧисло = Слово.Значение;
		Если ПравилаРодИЧисло.Свойство(Род) Тогда
			СловоПоРодуИЧислу = ПравилаРодИЧисло[Род];
			ПараметрыСообщения.Вставить(Слово.Ключ, СловоПоРодуИЧислу);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОИСК УЧЕТНЫХ ОШИБОК РАСЧЕТА СЕБЕСТОИМОСТИ

Процедура ПроверитьНастроеноИспользованиеСчетовПроизводства(Ошибки, Период, Организация)
	
	// В учетной политике указано, что счета 20, 23 не используются,
	// а обороты на них есть
	
	Если УчетнаяПолитика.ВедетсяПроизводственнаяДеятельность(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СчетаРасходов", УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОборотыДт.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ОборотыДт
	|ГДЕ
	|	ОборотыДт.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОборотыДт.Активность
	|	И ОборотыДт.Организация = &Организация
	|	И ОборотыДт.СчетДт В
	|			(ВЫБРАТЬ
	|				СчетаРасходов.Счет
	|			ИЗ
	|				СчетаРасходов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОборотыКт.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ОборотыКт
	|ГДЕ
	|	ОборотыКт.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОборотыКт.Активность
	|	И ОборотыКт.Организация = &Организация
	|	И ОборотыКт.СчетКт В
	|			(ВЫБРАТЬ
	|				СчетаРасходов.Счет
	|			ИЗ
	|				СчетаРасходов)";	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Нет ошибки
		Возврат;
	КонецЕсли;

	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Невозможно закрыть счета 20, 23, 25.'");
	Ошибка.Локализация  = НСтр("ru = 'В учетной политике не указано, по каким видам деятельности учитываются затраты на счетах 20 и 23 - по видам деятельности, связанным с выпуском продукций или с оказанием услуг.'");
	Ошибка.Рекомендация = НСтр("ru = 'Если организация не выпускает продукцию, не выполняет работы и не оказывает услуги, то счет 20 использовать не следует. 
		|Проверьте настройки учетной политики.'");
	Ошибка.Ссылка       = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитику();
	
КонецПроцедуры

Процедура ПроверитьНетНачальногоСальдоКосвенныхРасходов(Ошибки, Период, Организация)
	
	// Счета 25, 26 имеют начальное сальдо
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов", УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКосвенныхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаКосвенныхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Остаток,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеПорядок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКосвенныхРасходов.Счет
	|				ИЗ
	|					СчетаКосвенныхРасходов),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКод,
	|	ПодразделениеПорядок
	|ИТОГИ ПО
	|	Счет";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Нет ошибки
		Возврат;
	КонецЕсли;
	
	ШаблонДетальныхДанных = СкопироватьКолонки(Результат, "Счет, Подразделение, Остаток");
	ШаблонДетальныхДанных.Колонки.Добавить("РасшифровкаСумма", Новый ОписаниеТипов("Структура"));
	
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		
		ДетальныеДанные = ШаблонДетальныхДанных.Скопировать();
		
		Выборка = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДетальныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РасшифровкаСумма = ОписаниеРасшифровкиБухгалтерскийОтчет(
				"ВедомостьПоСчету",
				НоваяСтрока.Счет,
				НоваяСтрока.Подразделение);
			
		КонецЦикла;
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Счет", ВыборкаСчет.Счет);
		
		Описание     = НСтр("ru = 'Невозможно закрыть счет [Счет]'");
		ЧтоСлучилось = НСтр("ru = 'Счет [Счет] имеет начальное сальдо'");
		ЧтоНадоЗнать = НСтр("ru = 'Расходы, учтенные на счете [Счет], списываются в дебет счетов 20, 23 каждый месяц, поэтому начальное сальдо указывает на ошибку в одном из предыдущих месяцев'");
		ГдеПроблема  = НСтр("ru = 'В таблице показано начальное сальдо на счете [Счет]'");
		ЧтоДелать    = НСтр("ru = 'Выполните повторно регламентную операцию ""Закрытие счетов 20, 23, 25, 26"" за тот месяц, в котором образовалось сальдо'");
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
		
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     ВыводСообщенийОбОшибках.СкомпоноватьТекст(Описание,     ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоСлучилось, ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыТекста));
		// ГдеПроблема - комплексный раздел, содержит таблицу
		Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема,  ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НачальноеСальдоКосвенныхРасходов_Шапка", Новый Структура);
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НачальноеСальдоКосвенныхРасходов_Строка", ДетальныеДанные);
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ЧтоДелать);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНетОтрицательногоСальдоПрямыхРасходов(Ошибки, Период, Организация)
	
	// Счета 20, 23 имеют отрицательное начальное сальдо (25 и 26 проверяем отдельно - там никакое сальдо не допускается)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Остаток,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеПорядок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКод,
	|	ПодразделениеПорядок
	|ИТОГИ ПО
	|	Счет";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Нет ошибки
		Возврат;
	КонецЕсли;
	
	ШаблонДетальныхДанных = СкопироватьКолонки(Результат, "Счет, Подразделение, НоменклатурнаяГруппа, Остаток");
	ШаблонДетальныхДанных.Колонки.Добавить("РасшифровкаСумма", Новый ОписаниеТипов("Структура"));
	
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		
		ДетальныеДанные = ШаблонДетальныхДанных.Скопировать();
		
		Выборка = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДетальныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РасшифровкаСумма = ОписаниеРасшифровкиБухгалтерскийОтчет(
				"ВедомостьПоСчету",
				НоваяСтрока.Счет,
				НоваяСтрока.Подразделение);
			
		КонецЦикла;
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Счет", ВыборкаСчет.Счет);
		
		Описание     = НСтр("ru = 'Невозможно закрыть счет [Счет]'");
		ЧтоСлучилось = НСтр("ru = 'Счет [Счет] имеет отрицательное начальное сальдо'");
		ЧтоНадоЗнать = НСтр("ru = 'Остаток по счету [Счет] показывает стоимость актива - незавершенного производства, поэтому отрицательное сальдо указывает на ошибку в одном из предыдущих месяцев'");
		ГдеПроблема  = НСтр("ru = 'В таблице показано начальное сальдо на счете [Счет]'");
		ЧтоДелать    = НСтр("ru = 'Выполните повторно регламентную операцию ""Закрытие счетов 20, 23, 25, 26"" за тот месяц, в котором образовалось отрицательное сальдо'");
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
		
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     ВыводСообщенийОбОшибках.СкомпоноватьТекст(Описание,     ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоСлучилось, ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыТекста));
		// ГдеПроблема - комплексный раздел, содержит таблицу
		Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема,  ПараметрыТекста));
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НачальноеСальдоКосвенныхРасходов_Шапка", Новый Структура);
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НачальноеСальдоКосвенныхРасходов_Строка", ДетальныеДанные);
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ЧтоДелать);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполненаАналитикаНаСчетахРасходов(Ошибки, Период, Организация)
	
	ДокументыНачисленияОплатыТрудаИВзносов = Новый Массив; // Ведем список таких документов, по ним выполним отдельную проверку
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получим списки счетов, где должна быть заполнена аналитика
	СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	// Получим список счетов и документов, где не заполнена аналитика
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", 		НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", 		КонецМесяца(Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.СчетДт КАК Счет,
	|	Движения.СчетДт.Код КАК КодСчета,
	|	""Подразделение"" КАК ИмяАналитики,
	|	1 КАК ПорядокАналитики
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					Отбор.Счет
	|				ИЗ
	|					СчетаГдеОбязательныПодразделения КАК Отбор),
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И ПодразделениеДт = &ПустоеПодразделение) КАК Движения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.СчетДт,
	|	Движения.СчетДт.Код,
	|	""НоменклатурнаяГруппа"",
	|	2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					Отбор.Счет
	|				ИЗ
	|					СчетаГдеОбязательныНоменклатурныеГруппы КАК Отбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			,
	|			,
	|			Организация = &Организация
	|				И (СубконтоДт1 = НЕОПРЕДЕЛЕНО
	|					ИЛИ СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))) КАК Движения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.СчетДт,
	|	Движения.СчетДт.Код,
	|	""СтатьяЗатрат"",
	|	3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					Отбор.Счет
	|				ИЗ
	|					СчетаГдеОбязательныСтатьиЗатрат КАК Отбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			,
	|			,
	|			Организация = &Организация
	|				И (СубконтоДт1 = НЕОПРЕДЕЛЕНО
	|					ИЛИ СубконтоДт1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))) КАК Движения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	КодСчета,
	|	ПорядокАналитики
	|ИТОГИ ПО
	|	Регистратор,
	|	Счет";

	// Обработаем результат
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипыРегламентныхДокументов = Новый Массив;
	ТипыРегламентныхДокументов.Добавить(Тип("ДокументСсылка.РегламентнаяОперация"));
	ТипыРегламентныхДокументов.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
	
	// Подготовим сообщение об ошибке
	ВыборкаОшибок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		// Если на всех счетах не заполнена одинаковая аналитика, то выведем одно сообщение.
		// В остальных случаях выведем несколько сообщений - для каждой аналитики свое
		// Соберем все данные об ошибках в этом документе
		ОшибкиЗаполнения     = Новый Массив; // Массив, чтобы сохранить упорядочивание
		
		НеЗаполненаАналитика = Новый Массив; // Общий набор не заполненной аналитики на всех счетах
		ОдинНаборАналитики   = Истина;
		
		ВыборкаСчетов = ВыборкаОшибок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетов.Следующий() Цикл
			
			НеЗаполненаАналитикаНаЭтомСчете = Новый Массив;
			
			ВыборкаАналитики = ВыборкаСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАналитики.Следующий() Цикл
				НеЗаполненаАналитикаНаЭтомСчете.Добавить(ВыборкаАналитики.ИмяАналитики);
			КонецЦикла;
			
			ОшибкиЗаполнения.Добавить(Новый Структура("Счет, Аналитика", ВыборкаСчетов.КодСчета, НеЗаполненаАналитикаНаЭтомСчете));
			
			// Дополним общий набор не заполненной аналитики на всех счетах,
			// заодно выясним, на всех ли счетах этот набор одинаковый
			Если НеЗаполненаАналитика.Количество() = 0 Тогда
				НеЗаполненаАналитика = НеЗаполненаАналитикаНаЭтомСчете;
			Иначе
				
				Если ОдинНаборАналитики И НеЗаполненаАналитика.Количество() <> НеЗаполненаАналитикаНаЭтомСчете.Количество() Тогда
				    ОдинНаборАналитики = Ложь;
				КонецЕсли;
				
				Для Каждого ИмяАналитики Из НеЗаполненаАналитикаНаЭтомСчете Цикл
					Если НеЗаполненаАналитика.Найти(ИмяАналитики) = Неопределено Тогда
						ОдинНаборАналитики = Ложь;
						НеЗаполненаАналитика.Добавить(ИмяАналитики);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Найдем нужные слова для сообщения об ошибке
		
		ПараметрыТекста = Новый Структура;
		
		// [Указаны]
		СловаДляСклонения = Новый Структура;
		СловаДляСклонения.Вставить("Указаны", Новый Структура("он,она,оно,они",НСтр("ru='указан'"),НСтр("ru='указана'"),НСтр("ru='указано'"),НСтр("ru='указаны'")));
		ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
		
		// [Реквизиты], [РеквизитыВинительныйПадеж]
		ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
		
		// [Документ]
		ПараметрыТекста.Вставить("Документ", "" + ВыборкаОшибок.Регистратор);
		
		Если ОдинНаборАналитики Тогда
			
			ТекстОшибки = НСтр("ru = 'Обнаружены обороты по дебету [Счетов] [СписокСчетов], в которых не [Указаны] [Реквизиты] в документе [Документ].'");
			
			// [СписокСчетов]
			МассивСчетов = Новый Массив;
			Для Каждого ОшибкаЗаполнения Из ОшибкиЗаполнения Цикл
				МассивСчетов.Добавить(ОшибкаЗаполнения.Счет);
			КонецЦикла;
			ПараметрыТекста.Вставить("СписокСчетов", СтрСоединить(МассивСчетов,", "));
			
			// [Счетов], [Которых]
			Если МассивСчетов.Количество() = 1 Тогда
				ПараметрыТекста.Вставить("Счетов",  "счета");
				ПараметрыТекста.Вставить("Которых", "которого");
			Иначе
				ПараметрыТекста.Вставить("Счетов",  "счетов");
				ПараметрыТекста.Вставить("Которых", "которых");
			КонецЕсли;
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Обнаружены проводки в документе [Документ], в которых
			|[СписокПроблем]'");
			
			ОписаниеПроблемы = НСтр("ru = ' - по дебету счета [Счет] не [Указаны] [Реквизиты]'");
			
			// Подготовим описание проблем - про каждый счет отдельная строка
			СписокПроблем = Новый Массив;
			Для Каждого ОшибкаЗаполнения Из ОшибкиЗаполнения Цикл
				
				ПараметрыСтроки = Новый Структура;
				// [Счет]
				ПараметрыСтроки.Вставить("Счет", ОшибкаЗаполнения.Счет);
				// [Указаны]
				ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыСтроки, ОшибкаЗаполнения.Аналитика, СловаДляСклонения);
				// [Реквизиты]
				ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыСтроки, ОшибкаЗаполнения.Аналитика);
				
				СписокПроблем.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ОписаниеПроблемы, ПараметрыСтроки));
				
			КонецЦикла;
			ПараметрыТекста.Вставить("СписокПроблем", СтрСоединить(СписокПроблем, Символы.ПС));
			
		КонецЕсли;
		
		ТекстОписания = НСтр("ru = 'Не [Указаны] [Реквизиты] производственных затрат.'");
		
		ТипРегистратора = ТипЗнч(ВыборкаОшибок.Регистратор);
		ЭтоРегламентныйДокумент = (ТипыРегламентныхДокументов.Найти(ТипРегистратора) <> Неопределено);
		Если ЭтоРегламентныйДокумент Тогда
			ТекстРекомендации = НСтр("ru = 'Выполните повторно эту регламентную операцию'");
		Иначе
			ТекстРекомендации = НСтр("ru = 'Укажите [РеквизитыВинительныйПадеж] в этом документе'");
		КонецЕсли;
		
		ОписаниеОшибки = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		ОписаниеОшибки.Описание     = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОписания,     ПараметрыТекста);
		ОписаниеОшибки.Рекомендация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстРекомендации, ПараметрыТекста);
		ОписаниеОшибки.Локализация  = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,       ПараметрыТекста);
		ОписаниеОшибки.Ссылка       = ВыборкаОшибок.Регистратор;
		
		// Ведем отдельный список проблемных документов начисления оплаты труда и взносов
		ДокументыНачисленияОплатыТрудаИВзносов.Добавить(ВыборкаОшибок.Регистратор);
		
	КонецЦикла;
		
	// Если есть ошибки в проводках документов оплаты труда и взносов, то сообщим о возможных причинах таких ошибок
	ПроверитьЗаполненаАналитикаНачислениеЗарплатыВзносов(Ошибки, ДокументыНачисленияОплатыТрудаИВзносов, Период);
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьЗаполненаАналитикаНачислениеЗарплатыВзносов(Ошибки, ПроблемныеДокументы, Период)
	
	Если ПроблемныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В "зарплатных" документах не хранится статья затрат и номенклатурная группа.
	// Поэтому недостаточно сообщить пользователю о не заполненной аналитике в таких документах.
	// Дополнительно сообщим о способах отражения зарплаты, в которых допущена ошибка.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получим список счетов, где должна быть заполнена аналитика
	СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	// Получим сведения о способах начисления, которые указаны в проблемных документах
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПроблемныеДокументы", ПроблемныеДокументы);
	Запрос.УстановитьПараметр("Период",              КонецМесяца(Период));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплаты.Начисление КАК Начисление,
	|	НачислениеЗарплаты.Сотрудник,
	|	НачислениеЗарплаты.Ссылка.Организация
	|ПОМЕСТИТЬ НачислениеЗарплаты
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка В(&ПроблемныеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплаты.Начисление.СпособОтраженияЗарплатыВБухучете КАК СпособОтражения,
	|	НачислениеЗарплаты.Начисление.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ НачислениеЗарплатыСпособыОтражения
	|ИЗ
	|	НачислениеЗарплаты КАК НачислениеЗарплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплатыОрганизацийСрезПоследних.ОтношениеКЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					НачислениеЗарплаты.Организация
	|				ИЗ
	|					НачислениеЗарплаты КАК НачислениеЗарплаты)) КАК БухучетЗарплатыОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БухучетЗарплатыСотрудниковСрезПоследних.СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплатыСотрудниковСрезПоследних.ОтношениеКЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыСотрудников.СрезПоследних(
	|			&Период,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					НачислениеЗарплаты.Сотрудник
	|				ИЗ
	|					НачислениеЗарплаты КАК НачислениеЗарплаты)) КАК БухучетЗарплатыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтражениеЗарплатыВБухучете.СпособОтраженияЗарплатыВБухучете КАК СпособОтражения,
	|	ОтражениеЗарплатыВБухучете.ОблагаетсяЕНВД КАК ЕНВД
	|ПОМЕСТИТЬ ОтборСпособыОтражения
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	ОтражениеЗарплатыВБухучете.Ссылка В(&ПроблемныеДокументы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыСпособыОтражения.СпособОтражения,
	|	ВариантыОтношенияКЕНВД.ЕНВД
	|ИЗ
	|	НачислениеЗарплатыСпособыОтражения КАК НачислениеЗарплатыСпособыОтражения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД) КАК ОтношениеКЕНВД,
	|			ИСТИНА КАК ЕНВД
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД),
	|			ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом),
	|			ИСТИНА
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом),
	|			ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка),
	|			ИСТИНА
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка),
	|			ЛОЖЬ) КАК ВариантыОтношенияКЕНВД
	|		ПО НачислениеЗарплатыСпособыОтражения.ОтношениеКЕНВД = ВариантыОтношенияКЕНВД.ОтношениеКЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете КАК Ссылка,
	|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете.Наименование КАК Наименование,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК СчетЗатрат,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат,
	|	ПорядокОтраженияЗарплатыВБухУчете.СчетНУ КАК СчетЗатратНУ,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ1 КАК СубконтоНУ1,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ2 КАК СубконтоНУ2,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ3 КАК СубконтоНУ3,
	|	СчетаГдеОбязательныНоменклатурныеГруппыНУ.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппыНУ,
	|	СчетаГдеОбязательныСтатьиЗатратНУ.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатратНУ
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|		ПО ПорядокОтраженияЗарплатыВБухУчете.Счет = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|		ПО ПорядокОтраженияЗарплатыВБухУчете.Счет = СчетаГдеОбязательныСтатьиЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппыНУ
	|		ПО ПорядокОтраженияЗарплатыВБухУчете.Счет = СчетаГдеОбязательныНоменклатурныеГруппыНУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатратНУ
	|		ПО ПорядокОтраженияЗарплатыВБухУчете.Счет = СчетаГдеОбязательныСтатьиЗатратНУ.Счет
	|ГДЕ
	|	(ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете, ПорядокОтраженияЗарплатыВБухУчете.ЕНВД) В
	|			(ВЫБРАТЬ
	|				Отбор.СпособОтражения,
	|				Отбор.ЕНВД
	|			ИЗ
	|				ОтборСпособыОтражения КАК Отбор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	// Обработаем результат
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидУчетаБухгалтерскийУчет = Новый Структура();
	ВидУчетаБухгалтерскийУчет.Вставить("Постфикс",            "");
	ВидУчетаБухгалтерскийУчет.Вставить("ХарактеристикаСчета", "");
	
	ВидУчетаНалоговыйУчет = Новый Структура();
	ВидУчетаНалоговыйУчет.Вставить("Постфикс",            "НУ");
	ВидУчетаНалоговыйУчет.Вставить("ХарактеристикаСчета", "налогового учета");
	
	ВидыУчета = Новый Массив;
	ВидыУчета.Добавить(ВидУчетаБухгалтерскийУчет);
	ВидыУчета.Добавить(ВидУчетаНалоговыйУчет);
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ВидУчета Из ВидыУчета Цикл
			
			Счет = Выборка["СчетЗатрат" + ВидУчета.Постфикс];
			
			Если Не ЗначениеЗаполнено(Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			НеЗаполненаАналитика = Новый Массив;
			
			НомерСубконто = Выборка["НомерСубконтоОбязательныНоменклатурныеГруппы" + ВидУчета.Постфикс];
			Если ЗначениеЗаполнено(НомерСубконто) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + ВидУчета.Постфикс + НомерСубконто]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
				
			НомерСубконто = Выборка["НомерСубконтоОбязательныСтатьиЗатрат" + ВидУчета.Постфикс];
			Если ЗначениеЗаполнено(НомерСубконто) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + ВидУчета.Постфикс + НомерСубконто]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
			
			Если НеЗаполненаАналитика.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Сообщим об ошибке
			ТекстОписания     = НСтр("ru = 'Не [Указаны] [Реквизиты] производственных затрат.'");
			ТекстРекомендации = НСтр("ru = 'Укажите [РеквизитыВинительныйПадеж] в этом справочнике'");
			ТекстОшибки       = НСтр("ru = 'В способе отражения зарплаты в учете ""[НазваниеСпособа]"" не [Заполнены] [Реквизиты] на счете [ХарактеристикаСчета] [Счет].'");
	
			ПараметрыТекста = Новый Структура;
			// [НазваниеСпособа], [Счет], [ХарактеристикаСчета]
			ПараметрыТекста.Вставить("НазваниеСпособа",     Выборка.Наименование);
	        ПараметрыТекста.Вставить("Счет",                Выборка.СчетЗатрат);
	        ПараметрыТекста.Вставить("ХарактеристикаСчета", ВидУчета.ХарактеристикаСчета);
			// [Заполнены], [Указаны]
			СловаДляСклонения = Новый Структура;
			СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
			СловаДляСклонения.Вставить("Указаны", Новый Структура("он,она,оно,они",НСтр("ru='указан'"),НСтр("ru='указана'"),НСтр("ru='указано'"),НСтр("ru='указаны'")));
			ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения);
			// [Реквизиты], [РеквизитыВинительныйПадеж]
			ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
			
			ОписаниеОшибки = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
			
			ОписаниеОшибки.Описание     = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОписания,     ПараметрыТекста);
			ОписаниеОшибки.Рекомендация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстРекомендации, ПараметрыТекста);
			ОписаниеОшибки.Локализация  = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыТекста);
			ОписаниеОшибки.Ссылка       = Выборка.Ссылка;
			
		КонецЦикла; // По видам учета
		
	КонецЦикла; // По выборке из запроса
	
КонецПроцедуры

Процедура ПроверитьКорректноОтраженыДоходыРасходыЕНВД(Ошибки, Период, Организация)
	
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период)
		Или УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	// Распределение выручки по номенклатурным группам противоречит отнесенным на них затратам:
	// 1. доходы по ЕНВД отражены по НГ, по которым есть расходы Не-ЕНВД
	// 2. наоборот
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	СубконтоНоменклатурныеГруппыСтатьиЗатрат = Новый Массив;
	СубконтоНоменклатурныеГруппыСтатьиЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	СубконтоНоменклатурныеГруппыСтатьиЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("СубконтоНоменклатурныеГруппыСтатьиЗатрат", СубконтоНоменклатурныеГруппыСтатьиЗатрат);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаДоходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.Счет КАК СчетДоходов,
	|	Доходы.Субконто1 КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ Доходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаДоходов.Счет
	|				ИЗ
	|					СчетаДоходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			Организация = &Организация
	|				И Субконто1 <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|			,
	|			) КАК Доходы
	|ГДЕ
	|	Доходы.СуммаОборотКт <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	СчетДоходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетРасходов,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОбороты.Субконто2 КАК СтатьяЗатрат
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			&СубконтоНоменклатурныеГруппыСтатьиЗатрат,
	|			Организация = &Организация
	|				И Субконто1 <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|				И Субконто2 <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиРасходов,
	|	Доходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Доходы.СчетДоходов КАК СчетДоходов,
	|	Расходы.СчетРасходов КАК СчетРасходов,
	|	Расходы.СтатьяЗатрат,
	|	Доходы.СчетДоходов.Код КАК КодСчетаДоходов,
	|	Расходы.СчетРасходов.Код КАК КодСчетаРасходов,
	|	ПРЕДСТАВЛЕНИЕ(Доходы.СчетДоходов),
	|	ПРЕДСТАВЛЕНИЕ(Доходы.НоменклатурнаяГруппа),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.СчетРасходов),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.СтатьяЗатрат)
	|ИЗ
	|	Доходы КАК Доходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО Доходы.НоменклатурнаяГруппа = Расходы.НоменклатурнаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Доходы.СчетДоходов = СчетаДоходовИРасходовЕНВД.Счет
	|ГДЕ
	|	(Расходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|				И НЕ СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL 
	|			ИЛИ Расходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|				И СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетДоходов,
	|	СчетРасходов
	|ИТОГИ ПО
	|	ВидДеятельностиРасходов,
	|	НоменклатурнаяГруппа,
	|	СчетДоходов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Если в регистре СчетаДоходовИРасходовЕНВД есть хоть одна запись, то считаем, что счета заполнены.
	ЗаполненыСчетаДоходовРасходовЕНВД = РегистрыСведений.СчетаДоходовИРасходовЕНВД.Выбрать().Следующий();
	
	СтруктураОписанияРасходов = Новый Структура("СчетРасходов, СтатьяЗатрат");
	ШаблонОписанияРасходов = НСтр("ru = 'счет [СчетРасходов], статья затрат ""[СтатьяЗатрат]""'");
	
	ВыборкаВидыДеятельности = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидыДеятельности.Следующий() Цикл
		
		Описание     = НСтр("ru = 'Не обеспечен раздельный учет доходов и расходов при совмещении разных налоговых режимов'");
		
		ЧтоНадоЗнать = Новый Массив;
		ЧтоНадоЗнать.Добавить(НСтр("ru = 'Деятельность с основной системой налогообложения отражается на счетах 90.01.1, 90.02.1'"));
		ЧтоНадоЗнать.Добавить(НСтр("ru = 'Деятельность с особым порядком налогообложения отражается на счетах 90.01.2, 90.02.2'"));
		Если БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
			ЧтоНадоЗнать.Добавить(НСтр("ru = 'Если плательщик наряду с деятельностью с особым порядком налогообложения ведет иные виды деятельности, 
				|он обязан вести раздельный учет доходов и расходов.'"));
			ЧтоНадоЗнать.Добавить(НСтр("ru = 'Для обеспечения раздельного учета следует использовать несколько номенклатурных групп: 
				|в документах, относящихся к деятельности с основной системой налогообложения указывать одну (одни),
				|в документах с особым порядком налогообложения - другую (другие).'"));
		КонецЕсли;
		
		Если ВыборкаВидыДеятельности.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
			ЧтоСлучилось = НСтр("ru = '[СловоНаСчете] [СчетДоходов] отражены доходы по номенклатурной группе ""[НоменклатурнаяГруппа]"".
				|Этот счет используется для учета доходов по видам деятельности с особым порядком налогообложения.
				|По этой же номенклатурной группе указаны расходы по деятельности с основной системой налогообложения'");
			
			ГдеПроблема = Новый Массив;
			ГдеПроблема.Добавить(НСтр("ru = 'Расходы по деятельности с основной системой налогообложения отражены по следующей аналитике:'"));
			
			ЧтоДелать = Новый Массив;
			ЧтоДелать.Добавить(НСтр("ru = 'Если номенклатурная группа ""[НоменклатурнаяГруппа]"" отражает вид деятельности с особым порядком налогообложения, то используйте соответствующую статью затрат.'"));
			ЧтоДелать.Добавить(НСтр("ru = 'Если эта номенклатурная группа отражает вид деятельности с основной системой налогообложения, то исправьте [СловоСчет] [СчетДоходов] на 90.01.1.'"));
		Иначе
			ЧтоСлучилось = НСтр("ru = '[СловоНаСчете] [СчетДоходов] отражены доходы по номенклатурной группе ""[НоменклатурнаяГруппа]"".
				|Этот счет используется для учета доходов по видам деятельности с основной системой налогообложения.
				|По этой же номенклатурной группе указаны расходы по деятельности с особым порядком налогообложения'");
				
			ГдеПроблема = Новый Массив;
			ГдеПроблема.Добавить(НСтр("ru = 'Расходы по деятельности с особым порядком налогообложения отражены по следующей аналитике:'"));
			
			ЧтоДелать = Новый Массив;
			ЧтоДелать.Добавить(НСтр("ru = 'Если номенклатурная группа ""[НоменклатурнаяГруппа]"" отражает вид деятельности с основной системой налогообложения, то используйте соответствующую статью затрат.'"));
			Если ЗаполненыСчетаДоходовРасходовЕНВД Тогда
				ЧтоДелать.Добавить(НСтр("ru = 'Если эта номенклатурная группа отражает вид деятельности с особым порядком налогообложения, то исправьте в первичных документах [СловоСчет] [СчетДоходов] на 90.01.2'"));
			Иначе
				// Если счета доходов расходов ЕНВД не заполнены, то могут быть различные рекомендации в зависимости от счета доходов, поэтому заполним этот текст ниже
				ЧтоДелать.Добавить(НСтр("ru = '[ТекстЧтоДелатьЕслиСчетаНеЗаполнены]'"));
			КонецЕсли;
		КонецЕсли;
		
		// Если одна номенклатурная группа, то предложим создать новую
		Если БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
			ЧтоДелать.Добавить(НСтр("ru = 'Если осуществляется несколько видов деятельности, то следует использовать несколько номенклатурных групп.'"));
			ЧтоДелать.Добавить(НСтр("ru = 'Их следует указать в справочнике ""Номенклатурные группы"". После этого рекомендуется в справочнике ""Номенклатура"" заполнить поле ""Номенклатурная группа"" в соответствии с тем, к каким видам деятельности относится реализация соответствующей продукции или услуг.'"));
		КонецЕсли;

		ВыборкаНоменклатурныеГруппы = ВыборкаВидыДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатурныеГруппы.Следующий() Цикл
			
			СчетДоходовВыручкаНеЕНВД = Ложь;
			СчетаДоходов     = Новый Массив;
			ОписаниеРасходов = Новый Массив;
			ВыборкаСчетаДоходов = ВыборкаНоменклатурныеГруппы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСчетаДоходов.Следующий() Цикл
				
				СчетаДоходов.Добавить(ВыборкаСчетаДоходов.СчетДоходов);
				СчетДоходовВыручкаНеЕНВД = СчетДоходовВыручкаНеЕНВД ИЛИ ВыборкаСчетаДоходов.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
				Если ОписаниеРасходов.Количество() > 0 Тогда 
					// У всех счетов доходов - одинаковые расходы
					Продолжить;
				КонецЕсли;
				
				// Заполним список ГдеПроблема
				ВыборкаРасходы = ВыборкаСчетаДоходов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаРасходы.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(СтруктураОписанияРасходов, ВыборкаРасходы);
					СтрокаОписаниеРасходов = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОписанияРасходов, СтруктураОписанияРасходов);
					ОписаниеРасходов.Добавить(СтрокаОписаниеРасходов);
					ГдеПроблема.Добавить(СтрокаОписаниеРасходов);
				КонецЦикла;
				
			КонецЦикла; // По ВыборкаСчетаДоходов
			
			ПараметрыОписанияОшибки = Новый Структура;
			Если НЕ ЗаполненыСчетаДоходовРасходовЕНВД И СчетДоходовВыручкаНеЕНВД Тогда
				ТекстЧтоДелатьЕслиСчетаНеЗаполнены = НСтр("ru = 'Если эта номенклатурная группа отражает вид деятельности с особым порядком налогообложения, то следует:
				|1. Исправить в первичных документах [СловоСчет] [СчетДоходов] на 90.01.2
				|2. Добавить счет 90.01.2 в регистр сведений ""Счета доходов и расходов по деятельности с особым порядком налогообложения"".'");
			Иначе
				ТекстЧтоДелатьЕслиСчетаНеЗаполнены = НСтр("ru = 'Если номенклатурная группа ""[НоменклатурнаяГруппа]"" отражает вид деятельности с особым порядком налогообложения, то добавьте счет 90.01.2 в регистр сведений ""Счета доходов и расходов по деятельности с особым порядком налогообложения"".'");
			КонецЕсли;
			ПараметрыОписанияОшибки.Вставить("ТекстЧтоДелатьЕслиСчетаНеЗаполнены", ТекстЧтоДелатьЕслиСчетаНеЗаполнены);
			ПараметрыОписанияОшибки.Вставить("СловоНаСчете",         НСтр(?(СчетаДоходов.Количество() = 1, "ru = 'На счете'", "ru = 'На счетах'")));
			ПараметрыОписанияОшибки.Вставить("СчетДоходов",          СтрСоединить(СчетаДоходов, ", "));
			ПараметрыОписанияОшибки.Вставить("НоменклатурнаяГруппа", ВыборкаНоменклатурныеГруппы.НоменклатурнаяГруппа);
			ПараметрыОписанияОшибки.Вставить("СловоСчет",            НСтр(?(СчетаДоходов.Количество() = 1, "ru = 'счет'", "ru = 'счета'")));
			
			Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
			
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     Описание);
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ЧтоСлучилось, ПараметрыОписанияОшибки));
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыОписанияОшибки));
			
			// Где проблема
			Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема, ПараметрыОписанияОшибки));
	
			// ЧтоДелать
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать, ПараметрыОписанияОшибки));
			
		КонецЦикла; // По ВыборкаНоменклатурныеГруппы
	КонецЦикла; // ВыборкаВидыДеятельности
	
КонецПроцедуры

Процедура ПроверитьИзвестенВидДеятельностиПрямыхРасходов(Ошибки, Период, Организация)
	
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период)
		Или УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	// На счете 20,23 использована распределяемая статья 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Регистратор КАК Документ,
	|	Расходы.СчетДт КАК Счет,
	|	Расходы.СубконтоДт1 КАК СтатьяЗатрат,
	|	Расходы.Период КАК Период,
	|	ПРЕДСТАВЛЕНИЕ(Расходы.Регистратор),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.СчетДт),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.СубконтоДт1)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			,
	|			,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)) КАК Расходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ
	|ИТОГИ ПО
	|	СтатьяЗатрат";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстРекомендация = НСтр("ru = 'Если расходы распределяемые, то укажите счета затрат - 25, 26 или 44. Если расходы прямые, то укажите статью затрат с признаком [НеЕНВД] или [ЕНВД].'");
	
	// [НеЕНВД], [ЕНВД]
	ПараметрыСтроки        = Новый Структура;
	Перечисление           = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат;
	МетаданныеПеречисления = Метаданные.Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ЗначенияПеречисления;
	
	Индекс                 = Перечисление.Индекс(Перечисление.ОсновнаяСистемаНалогообложения);
	ПараметрыСтроки.Вставить("НеЕНВД", МетаданныеПеречисления[Индекс].Синоним);
	Индекс                 = Перечисление.Индекс(Перечисление.ОсобыйПорядокНалогообложения);
	ПараметрыСтроки.Вставить("ЕНВД",   МетаданныеПеречисления[Индекс].Синоним);
	
	ТекстРекомендация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстРекомендация, ПараметрыСтроки);
	
	ВыборкаСтатьяЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтатьяЗатрат.Следующий() Цикл
		
		ТекстОписание = НСтр("ru = 'Прямые расходы отражены по распределяемой статье затрат [СтатьяЗатрат].
		|Эта статья предназначена для учета косвенных затрат, связанных с разными видами деятельности.'");
		ПараметрыСтроки = Новый Структура("СтатьяЗатрат", ВыборкаСтатьяЗатрат.СтатьяЗатрат);
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		Ошибка.Описание     = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОписание, ПараметрыСтроки);
		Ошибка.Рекомендация = ТекстРекомендация;
		Ошибка.Ссылка       = ВыборкаСтатьяЗатрат.СтатьяЗатрат;
		
		Выборка = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = НСтр("ru = 'В документе [Документ] обнаружены проводки по дебету счета [Счет] по статье ""[СтатьяЗатрат]"".'");
			
			ПараметрыСтроки.Вставить("Документ",     "" + Выборка.Документ);
			ПараметрыСтроки.Вставить("Счет",         "" + Выборка.Счет);
			
			МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
			МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
			МестоОшибки.Ссылка      = Выборка.Документ;
			
		КонецЦикла;
		
	КонецЦикла; // ВыборкаСтатьяЗатрат
	
КонецПроцедуры		

Процедура ПроверитьЗаполненаНоменклатурнаяГруппаОказанныхУслуг(Ошибки, Период, Организация)
	
	Если Не РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Период, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Не указана номенклатурная группа при реализации услуг
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаСебестоимостиПродаж
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|	И ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслугОбороты.Регистратор КАК Документ,
	|	РеализацияУслугОбороты.Период КАК Период,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияУслугОбороты.Регистратор)
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|				И СчетРасходов В
	|					(ВЫБРАТЬ
	|						СчетаСебестоимостиПродаж.Счет
	|					ИЗ
	|						СчетаСебестоимостиПродаж)) КАК РеализацияУслугОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			ТекстОшибки       = НСтр("ru = 'Не заполнено поле ""Субконто"" на закладке ""Счета учета"" в документе [Документ]'");
		Иначе
			ТекстОшибки       = НСтр("ru = 'Не заполнена колонка ""Субконто"" на закладке ""Услуги"" в документе [Документ]'");
		КонецЕсли;
		
		ПараметрыТекста  = Новый Структура("Документ", "" + Выборка.Документ);
		
		Ошибка              = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		Ошибка.Описание     = НСтр("ru = 'Не указана номенклатурная группа оказанных услуг.'");
		Ошибка.Локализация  = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыТекста);
		Ошибка.Рекомендация = НСтр("ru = 'Заполните субконто в указанном документе.'");
		Ошибка.Ссылка       = Выборка.Документ;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьВыполненРасчетДолейСписанияКосвенныхРасходов(Ошибки, Период, Организация, СчетаРасходов)
	
	Если РегистрыСведений.ДолиСписанияКосвенныхРасходов.ВыполненРасчетДолейСписанияКосвенныхРасходов(Период, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет долей списания косвенных расходов требуется, если есть какие-либо из следующих расходов:
	// - нормируемые
	// - транспортные
	// - распределяемые между деятельностью облагаемой налогом на прибыль и специальными налоговыми режимами.
	
	КонтролируемыеВидыРасходов = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
	КонтролируемыеВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	Запрос.УстановитьПараметр("ВидыРасходов",  КонтролируемыеВидыРасходов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&ВидыРасходов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатрат.СтатьяЗатрат
	|					ИЗ
	|						СтатьиЗатрат),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.КоличествоОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаНУОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборотДт <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаВРОборотДт <> 0)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Нет расходов, для которых нужно выполнять расчет долей
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		
	Ошибка.Описание     = НСтр("ru = 'Нет данных о долях списания косвенных расходов.'");
	Ошибка.Локализация  = НСтр("ru = 'Расчет долей списания косвенных расходов требуется, если есть какие-либо из следующих расходов:
	| - расходы, по которым главой 25 НК РФ предусмотрены ограничения
	| - расходы на доставку покупных товаров (транспортные расходы)
	| - расходы, относящиеся как к видам деятельности с особым порядком налогообложения, так и к видам деятельности с основной системой налогообложения'");
	Ошибка.Рекомендация = НСтр("ru = 'Выполните регламентную операцию ""Расчет долей списания косвенных расходов""'");
	
	СсылкаНаРегламентнуюОперацию = РегистрыСведений.ДолиСписанияКосвенныхРасходов.РегламентнаяОперация(Период, Организация);
	
	Если ЗначениеЗаполнено(СсылкаНаРегламентнуюОперацию) Тогда
		Ошибка.Ссылка = СсылкаНаРегламентнуюОперацию;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьНетТранспортныхРасходовНаСчетахРасходовНаПроизводство(Ошибки, Период, Организация)
	
	СчетаРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗатрат.ПредопределенныеСчетаРасходов());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	СтатьиЗатрат.Представление
	|ПОМЕСТИТЬ СтатьиЗатратТранспортныеРасходы
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В (&СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатратТранспортныеРасходы.СтатьяЗатрат
	|					ИЗ
	|						СтатьиЗатратТранспортныеРасходы),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаНУОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаВРОборот <> 0)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Найдена аналитика расходов, отраженных неверно. Для вывода сообщений пользователю детализируем информацию об ошибках
	// до документов.
	АналитикаРасходовОшибки = Результат.Выгрузить();
	Запрос.УстановитьПараметр("СтатьиЗатратОшибки",  АналитикаРасходовОшибки.ВыгрузитьКолонку("СтатьяЗатрат"));
	АналитикаРасходовОшибки.Свернуть("Счет"); // не используем СвернутьМассив() из соображений производительности
	Запрос.УстановитьПараметр("СчетаРасходовОшибки", АналитикаРасходовОшибки.ВыгрузитьКолонку("Счет"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяЗатрат,
	|	ХозрасчетныйОбороты.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В (&СчетаРасходовОшибки),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И Субконто1 В (&СтатьиЗатратОшибки),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ,
	|	Счет,
	|	СтатьяЗатрат";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание = НСтр("ru = 'Неверно указан счет учета транспортных расходов.'");
	Рекомендация    = НСтр("ru = 'Для транспортных расходов укажите в документах счет 44.01.
	|Для иных расходов укажите статью затрат с видом, отличным от вида ""[ТранспортныеРасходы]"".'");
	Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Рекомендация, ПараметрыТекста);
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В проводках документа [Документ] по счету [Счет] указана статья затрат ""[СтатьяЗатрат]"" с видом расходов ""[ТранспортныеРасходы]""'");
		
		ПараметрыТекста.Вставить("Документ",     Выборка.Документ);
		ПараметрыТекста.Вставить("Счет",         Выборка.Счет);
		ПараметрыТекста.Вставить("СтатьяЗатрат", Выборка.СтатьяЗатрат);
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыТекста);
		МестоОшибки.Ссылка      = Выборка.Документ;
		
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьТранспортныеРасходыНеОтнесеныНаЕНВД(Ошибки, Период, Организация)
	
	Если НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаРасходов", УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	СтатьиЗатрат.Представление,
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности
	|ПОМЕСТИТЬ НедопустимыеСтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|	И СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения), ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.СтатьиЗатрат) КАК СтатьяЗатрат,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период
	|ПОМЕСТИТЬ Ошибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					СчетаРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						НедопустимыеСтатьиЗатрат.СтатьяЗатрат
	|					ИЗ
	|						НедопустимыеСтатьиЗатрат),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(ХозрасчетныйОбороты.СуммаОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаНУОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаПРОборот <> 0
	|			ИЛИ ХозрасчетныйОбороты.СуммаВРОборот <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Регистратор КАК Документ,
	|	Ошибки.Счет КАК Счет,
	|	Ошибки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Ошибки.Период КАК Период,
	|	НедопустимыеСтатьиЗатрат.ВидДеятельности
	|ИЗ
	|	НедопустимыеСтатьиЗатрат КАК НедопустимыеСтатьиЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ошибки КАК Ошибки
	|		ПО НедопустимыеСтатьиЗатрат.СтатьяЗатрат = Ошибки.СтатьяЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ,
	|	Счет,
	|	СтатьяЗатрат";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	
	Описание = НСтр("ru = 'По видам деятельности, облагаемым ЕНВД, отражены расходы с видом ""[ТранспортныеРасходы]"".'");
	Ошибка.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Описание, ПараметрыТекста);
	
	Рекомендация    = НСтр("ru = 'Для статей транспортных расходов укажите, что они применяются для учета деятельности по основной системе налогообложения.
	|Для иных расходов укажите в документах статью затрат с видом, отличным от вида ""[ТранспортныеРасходы]"".'");
	Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Рекомендация, ПараметрыТекста);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В проводках документа [Документ] по счету [Счет] указана статья затрат ""[СтатьяЗатрат]"", предназначенная для учета [ВидДеятельности]'");
		
		Если Выборка.ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
			ПараметрыТекста.Вставить("ВидДеятельности", НСтр("ru = 'деятельности с основной системой налогообложения'"));
		Иначе 
			ПараметрыТекста.Вставить("ВидДеятельности", НСтр("ru = 'видов деятельности с разными системами налогообложения'"));
		КонецЕсли;
		
		ПараметрыТекста.Вставить("Документ",     Выборка.Документ);
		ПараметрыТекста.Вставить("Счет",         Выборка.Счет);
		ПараметрыТекста.Вставить("СтатьяЗатрат", Выборка.СтатьяЗатрат);
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыТекста);
		МестоОшибки.Ссылка      = Выборка.Документ;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполненыСчетаРасходовПриРеализацииУслуг(Ошибки, Период, Организация)
	
	// Если списание расходов на оказание услуг "По выручке", 
	// то в документах реализации услуг должен быть заполнен счет расходов
	
	Если Не РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Период, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслуг.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияУслуг.Регистратор),
	|	РеализацияУслуг.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.СчетРасходов = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И РеализацияУслуг.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияУслуг.Организация = &Организация
	|	И РеализацияУслуг.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не заполнен счет расходов, связанных с оказанием услуг.'");
	Ошибка.Рекомендация = НСтр("ru = 'Заполните счет.'");
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Ошибка.Локализация = НСтр("ru = 'См. документ:'");
	Иначе
		Ошибка.Локализация = НСтр("ru = 'См. документы:'");
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Ссылка      = Выборка.Регистратор;
		МестоОшибки.Локализация = "" + Выборка.Регистратор;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНетСчетовЗатратВместоСчетовРасходовПриРеализацииУслуг(Ошибки, Период, Организация)
	
	// В документах реализации услуг должен быть заполнен счет расходов, но не счет затрат
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("СчетаЗатрат",   УчетЗатрат.ПредопределенныеСчетаРасходов());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗатрат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслуг.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияУслуг.Регистратор),
	|	РеализацияУслуг.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.СчетРасходов В
	|			(ВЫБРАТЬ
	|				СчетаЗатрат.Счет
	|			ИЗ
	|				СчетаЗатрат)
	|	И РеализацияУслуг.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияУслуг.Организация = &Организация
	|	И РеализацияУслуг.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Неверно заполнен счет расходов, связанных с оказанием услуг.'");
	ШаблонРекомендации = НСтр("ru = 'Укажите счет, соответствующий счету выручки: %1, %2 или %3'");
	Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонРекомендации, 
		ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД.Код,
		ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД.Код,
		ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код);
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Ошибка.Локализация = НСтр("ru = 'См. документ:'");
	Иначе
		Ошибка.Локализация = НСтр("ru = 'См. документы:'");
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Ссылка      = Выборка.Регистратор;
		МестоОшибки.Локализация = "" + Выборка.Регистратор;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ОШИБОК, НАЙДЕННЫХ ПРИ РАСЧЕТЕ

Процедура ОписатьНевернаяОценкаНезавершенногоПроизводства(Ошибки, ДетальныеДанные, Период, Организация)
	
	// ДетальныеДанные готовятся в РасчетСебестоимости.ПодготовитьВыпускБезЗатрат()
	
	ПодразделениюСРазделителем  = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"), НСтр("ru = ', подразделению'"),  "");
	ПодразделениемСРазделителем = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"), НСтр("ru = ', подразделением'"), "");
	ПодразделенияСРазделителем  = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"), НСтр("ru = ', подразделения'"),  "");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ВидыДокументовОтраженияЗатрат", ВидыДокументовОтраженияЗатрат(Организация));
	ПараметрыТекста.Вставить("ПодразделениюСРазделителем",    ПодразделениюСРазделителем);
	ПараметрыТекста.Вставить("ПодразделениемСРазделителем",   ПодразделениемСРазделителем);
	ПараметрыТекста.Вставить("ПодразделенияСРазделителем",    ПодразделенияСРазделителем);
	
	// Эта ошибка возникает, если сумма НЗП задана такой, что это не позволяет оценить себестоимость выпуска.
	// Могут быть два случая
	// - сумма НЗП превышает сумму затрат (как правило)
	// - сумма НЗП равна сумме затрат (редко)
	// Тексты сообщений для них несколько отличаются.
	СуммыРавны = (ДетальныеДанные.Итог("Затраты") = ДетальныеДанные.Итог("НезавершенноеПроизводство"));
	
	Если СуммыРавны Тогда
		Описание     = НСтр("ru = 'Стоимость незавершенного производства равна сумме фактических затрат'");
	Иначе
		Описание     = НСтр("ru = 'Стоимость незавершенного производства превышает сумму фактических затрат'");
	КонецЕсли;
	
	ЧтоСлучилось = Новый Массив;
	ЧтоСлучилось.Добавить(НСтр("ru = 'Стоимость незавершенного производства на конец месяца установлена документами ""Инвентаризация НЗП"".'"));
	ЧтоСлучилось.Добавить(НСтр("ru = 'Также отражен выпуск продукции (оказание услуг).'"));
	Если СуммыРавны Тогда
		ЧтоСлучилось.Добавить(НСтр("ru = 'Стоимость незавершенного производства равна сумме фактических затрат.'"));
	Иначе
		ЧтоСлучилось.Добавить(НСтр("ru = 'Стоимость незавершенного производства превышает сумму фактических затрат.'"));
	КонецЕсли;
	ЧтоСлучилось.Добавить(НСтр("ru = 'Поэтому в себестоимость выпущенной продукции (оказанных услуг) нельзя включить никакие затраты, а значит она не может быть рассчитана правильно.	'"));
	
	ЧтоНадоЗнать = Новый Массив;
	ЧтоНадоЗнать.Добавить(НСтр("ru = 'Незавершенное производство отражается в учете по стоимости фактических затрат на него. Эта стоимость указывается в документах ""Инвентаризация НЗП"".'"));
	ЧтоНадоЗнать.Добавить(НСтр("ru = 'Затраты отражаются на счетах 20, 23, 25 и 26 документами:
                                |[ВидыДокументовОтраженияЗатрат]
                                |Затраты могут включать стоимость незавершенного производства на начало месяца.'"));
	ЧтоНадоЗнать.Добавить(НСтр("ru = 'В ходе регламентной операции ""Закрытие счетов 20, 23, 25, 26"" на счетах 20, 23 рассчитывается сумма фактических затрат по каждому счету[ПодразделениюСРазделителем] и номенклатурной группе. Из этой суммы вычитается стоимость незавершенного производства, указанная в документах ""Инвентаризация НЗП"" с таким же счетом[ПодразделениемСРазделителем] и номенклатурной группой.'"));
	ЧтоНадоЗнать.Добавить(НСтр("ru = 'Остаток распределяется между наименованиями продукции (услуг) с таким же счетом[ПодразделениемСРазделителем] и номенклатурной группой, если выпуск отражен документами:
                                |- Отчет производства за смену,
                                |- Оказание производственных услуг.'"));
	ЧтоНадоЗнать.Добавить(НСтр("ru = 'Для услуг, отраженных документами ""Реализация (акт, накладная, УПД)"" с учетом выручки остаток распределяется между наименованиями услуг, оказание которых отражено документами ""Реализация (акт, накладная, УПД)"" с такой же номенклатурной группой.'"));
		
	ГдеПроблема = НСтр("ru = 'В таблице приведены данные о фактических затратах, незавершенном производстве и выпущенной продукции.'");
		
	ЧтоДелать = Новый Массив;
	ЧтоДелать.Добавить(НСтр("ru = 'Проверьте стоимость незавершенного производства в каждой строке таблицы. Если есть ошибки – исправьте документы ""Инвентаризация НЗП"". Список документов можно открыть двойным щелчком мыши на ячейке со стоимостью НЗП.'"));
	ЧтоДелать.Добавить(НСтр("ru = 'Для продукции проверьте соответствие наименований продукции и счета[ПодразделенияСРазделителем], номенклатурной группы. Если есть ошибки - исправьте документы выпуска этой продукции.'"));
	ЧтоДелать.Добавить(НСтр("ru = 'Для услуг, отраженных документами ""Оказание производственных услуг"", проверьте соответствие наименований услуг и счета[ПодразделенияСРазделителем], номенклатурной группы. Если есть ошибки - исправьте документы оказания услуг.'"));
	ЧтоДелать.Добавить(НСтр("ru = 'Список документов можно открыть двойным щелчком мыши на ячейке с перечнем продукции и услуг.'"));
		
	// СКОМПОНУЕМ ОПИСАНИЕ ОШИБКИ
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
	
	ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     ВыводСообщенийОбОшибках.СкомпоноватьТекст(Описание,     ПараметрыТекста));
	ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоСлучилось, ПараметрыТекста));
	ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыТекста));
	
	// ГдеПроблема - комплексный раздел, содержит вложенные таблицы
	Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема,  ПараметрыТекста));
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НевернаяОценкаНезавершенногоПроизводства_Шапка", Новый Структура);
	
	Для Каждого СтрокаДанных Из ДетальныеДанные Цикл
		
		ДанныеДляВывода = Новый Структура("Счет, Подразделение, НоменклатурнаяГруппа, Затраты, НезавершенноеПроизводство");
		ЗаполнитьЗначенияСвойств(ДанныеДляВывода, СтрокаДанных);
		
		// Расшифровка
		
		РасшифровкаЗатраты = ОписаниеРасшифровкиДокументыЗатрат(
			СтрокаДанных.Счет, 
			СтрокаДанных.Подразделение, 
			СтрокаДанных.НоменклатурнаяГруппа);
		ДанныеДляВывода.Вставить("РасшифровкаЗатраты", РасшифровкаЗатраты);
		
		РасшифровкаНезавершенноеПроизводство = ВыводСообщенийОбОшибках.НовыйОписаниеРасшифровки("ФормаСписка");
		РасшифровкаНезавершенноеПроизводство.Объект    = "Документ.ИнвентаризацияНЗП";
		РасшифровкаНезавершенноеПроизводство.Заголовок = НСтр("ru = 'Список документов ""Инвентаризация НЗП""'");
		РасшифровкаНезавершенноеПроизводство.Отбор.Вставить("СчетЗатрат",               СтрокаДанных.Счет);
		РасшифровкаНезавершенноеПроизводство.Отбор.Вставить("ПодразделениеОрганизации", СтрокаДанных.Подразделение);
		ДанныеДляВывода.Вставить("РасшифровкаНезавершенноеПроизводство", РасшифровкаНезавершенноеПроизводство);
		
		РасшифровкаПродукция = ОписаниеРасшифровкиДокументыВыпуска(ДанныеДляВывода.Счет, ДанныеДляВывода.Подразделение, ДанныеДляВывода.НоменклатурнаяГруппа);
		ДанныеДляВывода.Вставить("РасшифровкаПродукция", РасшифровкаПродукция);
		
		// Вывод строки
		ДанныеДляВывода.Вставить("Продукция", СтрСоединить(СтрокаДанных.Продукция, ", "));
		
		СтрокаОписания = ВыводСообщенийОбОшибках.ДобавитьСекцию(
			Секция, 
			"НевернаяОценкаНезавершенногоПроизводства_Строка", 
			ДанныеДляВывода);
		
	КонецЦикла;
	
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "НевернаяОценкаНезавершенногоПроизводства_Подвал", Новый Структура);
	
	// ЧтоДелать
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать, ПараметрыТекста));
	
КонецПроцедуры

Процедура ОписатьРасходыНеУдалосьРаспределить(Ошибки, ВсеДетальныеДанные, Период, Организация)
	
	// ДетальныеДанные готовятся в РасчетСебестоимости.ПодготовитьРасходыНеУдалосьРаспределить()
	
	// Поищем подозрительные затраты, которые, вероятно, ошибочно не включены в базу,
	// потому что отражены по статьям с неподходящим видом затрат
	ПоискПодозрительныхЗатрат = Новый ТаблицаЗначений;
	ПоискПодозрительныхЗатрат.Колонки.Добавить("ИндексСчет",                 Новый ОписаниеТипов("Число"));
	ПоискПодозрительныхЗатрат.Колонки.Добавить("ИндексПравилоРаспределения", Новый ОписаниеТипов("Число"));
	ПоискПодозрительныхЗатрат.Колонки.Добавить("ВидЗатрат",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ПоискПодозрительныхЗатрат.Колонки.Добавить("ВРазрезеПодразделений",      Новый ОписаниеТипов("Булево"));
	ПоискПодозрительныхЗатрат.Колонки.Добавить("Подразделение",              Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПоискПодозрительныхЗатрат.Колонки.Добавить("Счет",                       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ИскатьОплатуТруда         = Ложь;
	ИскатьМатериальныеРасходы = Ложь;
	
	Для Каждого ГруппаОшибокСчет Из ВсеДетальныеДанные.Строки Цикл
		Для Каждого ГруппаОшибокПравилоРаспределения Из ГруппаОшибокСчет.Строки Цикл
			
			Если ГруппаОшибокПравилоРаспределения.МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
				ВидЗатрат                 = Перечисления.ВидыРасходовНУ.ОплатаТруда;
				ИскатьОплатуТруда         = Истина;
			ИначеЕсли ГруппаОшибокПравилоРаспределения.МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
				ИскатьМатериальныеРасходы = Истина;
				ВидЗатрат                 = Перечисления.ВидыРасходовНУ.МатериальныеРасходы;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
				Подразделения = ГруппаОшибокПравилоРаспределения.Строки.ВыгрузитьКолонку("Подразделение");
				УникальныеПодразделения = Новый Массив;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УникальныеПодразделения, Подразделения, Истина);
				Подразделения = УникальныеПодразделения;
			Иначе
				Подразделения = Новый Массив;
				Подразделения.Добавить();
			КонецЕсли;
			
			Для Каждого Подразделение Из Подразделения Цикл
				НоваяСтрока = ПоискПодозрительныхЗатрат.Добавить();
				НоваяСтрока.ИндексСчет                 = ВсеДетальныеДанные.Строки.Индекс(ГруппаОшибокСчет);
				НоваяСтрока.ИндексПравилоРаспределения = ГруппаОшибокСчет.Строки.Индекс(ГруппаОшибокПравилоРаспределения);
				НоваяСтрока.ВидЗатрат                  = ВидЗатрат;
				НоваяСтрока.ВРазрезеПодразделений      = ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений;
				НоваяСтрока.Счет                       = ГруппаОшибокПравилоРаспределения.Счет;
				НоваяСтрока.Подразделение              = Подразделение;
			КонецЦикла;
				
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                   Организация);
	Запрос.УстановитьПараметр("НачалоПериода",                 НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                  КонецМесяца(Период));
	Запрос.УстановитьПараметр("ПоискПодозрительныхЗатрат",     ПоискПодозрительныхЗатрат);
	Запрос.УстановитьПараметр("ИскатьОплатуТруда",             ИскатьОплатуТруда);
	Запрос.УстановитьПараметр("ИскатьМатериальныеРасходы",     ИскатьМатериальныеРасходы);
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов",           УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	Запрос.УстановитьПараметр("СчетаЗапасов",                  УчетЗатрат.ПредопределенныеСчетаЗапасов());
	Запрос.УстановитьПараметр("СчетаРасчетовПоОплатеТруда",    ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоискПодозрительныхЗатрат.ИндексСчет КАК ИндексСчет,
	|	ПоискПодозрительныхЗатрат.ИндексПравилоРаспределения КАК ИндексПравилоРаспределения,
	|	ПоискПодозрительныхЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ПоискПодозрительныхЗатрат.Подразделение КАК Подразделение,
	|	ПоискПодозрительныхЗатрат.ВРазрезеПодразделений КАК ВРазрезеПодразделений
	|ПОМЕСТИТЬ ПоискПодозрительныхЗатрат
	|ИЗ
	|	&ПоискПодозрительныхЗатрат КАК ПоискПодозрительныхЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗатрат,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасчетовПоОплатеТруда
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетовПоОплатеТруда)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаЗапасов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗапасов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.МатериальныеРасходы) КАК ВидЗатрат,
	|	МатериальныеРасходы.СчетДт КАК Счет,
	|	МатериальныеРасходы.СчетКт КАК КорСчет,
	|	МатериальныеРасходы.ПодразделениеДт КАК Подразделение,
	|	МатериальныеРасходы.СубконтоДт1 КАК СтатьяЗатрат,
	|	МатериальныеРасходы.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ПодозрительныеЗатраты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			СчетКт В
	|				(ВЫБРАТЬ
	|					СчетаЗапасов.Счет
	|				ИЗ
	|					СчетаЗапасов),
	|			,
	|			&ИскатьМатериальныеРасходы
	|				И Организация = &Организация
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатрат.Ссылка
	|					ИЗ
	|						Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|					ГДЕ
	|						СтатьиЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.МатериальныеРасходы))) КАК МатериальныеРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ОплатаТруда),
	|	ОплатаТруда.СчетДт,
	|	ОплатаТруда.СчетКт,
	|	ОплатаТруда.ПодразделениеДт,
	|	ОплатаТруда.СубконтоДт1,
	|	ОплатаТруда.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			СчетКт В
	|				(ВЫБРАТЬ
	|					СчетаРасчетовПоОплатеТруда.Счет
	|				ИЗ
	|					СчетаРасчетовПоОплатеТруда),
	|			,
	|			&ИскатьОплатуТруда
	|				И Организация = &Организация
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатрат.Ссылка
	|					ИЗ
	|						Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|					ГДЕ
	|						СтатьиЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ОплатаТруда))) КАК ОплатаТруда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПодозрительныхЗатрат.ИндексСчет КАК ИндексСчет,
	|	ПоискПодозрительныхЗатрат.ИндексПравилоРаспределения КАК ИндексПравилоРаспределения,
	|	ПоискПодозрительныхЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ПоискПодозрительныхЗатрат.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ПоискСУчетомПодразделений
	|ИЗ
	|	ПоискПодозрительныхЗатрат КАК ПоискПодозрительныхЗатрат
	|ГДЕ
	|	ПоискПодозрительныхЗатрат.ВРазрезеПодразделений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗатрат,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПодозрительныхЗатрат.ИндексСчет КАК ИндексСчет,
	|	ПоискПодозрительныхЗатрат.ИндексПравилоРаспределения КАК ИндексПравилоРаспределения,
	|	ПоискПодозрительныхЗатрат.ВидЗатрат КАК ВидЗатрат
	|ПОМЕСТИТЬ ПоискБезУчетаПодразделений
	|ИЗ
	|	ПоискПодозрительныхЗатрат КАК ПоискПодозрительныхЗатрат
	|ГДЕ
	|	НЕ ПоискПодозрительныхЗатрат.ВРазрезеПодразделений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискСУчетомПодразделений.ИндексСчет КАК ИндексСчет,
	|	ПоискСУчетомПодразделений.ИндексПравилоРаспределения КАК ИндексПравилоРаспределения,
	|	ПодозрительныеЗатраты.Счет КАК Счет,
	|	ПодозрительныеЗатраты.Подразделение КАК Подразделение,
	|	ПодозрительныеЗатраты.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ПодозрительныеЗатраты.КорСчет КАК КорСчет,
	|	ПодозрительныеЗатраты.Сумма КАК Сумма,
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.Счет) КАК СчетПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.Подразделение) КАК ПодразделениеПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.СтатьяЗатрат) КАК СтатьяЗатратПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.КорСчет) КАК КорСчетПредставление,
	|	ПодозрительныеЗатраты.Счет.Порядок КАК СчетПорядок,
	|	ПодозрительныеЗатраты.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеРеквизитДопУпорядочивания,
	|	ПодозрительныеЗатраты.СтатьяЗатрат.Наименование КАК СтатьяЗатратНаименование,
	|	ПодозрительныеЗатраты.КорСчет.Порядок КАК КорСчетПорядок
	|ИЗ
	|	ПодозрительныеЗатраты КАК ПодозрительныеЗатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоискСУчетомПодразделений КАК ПоискСУчетомПодразделений
	|		ПО ПодозрительныеЗатраты.Подразделение = ПоискСУчетомПодразделений.Подразделение
	|			И ПодозрительныеЗатраты.ВидЗатрат = ПоискСУчетомПодразделений.ВидЗатрат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоискБезУчетаПодразделений.ИндексСчет,
	|	ПоискБезУчетаПодразделений.ИндексПравилоРаспределения,
	|	ПодозрительныеЗатраты.Счет,
	|	ПодозрительныеЗатраты.Подразделение,
	|	ПодозрительныеЗатраты.СтатьяЗатрат,
	|	ПодозрительныеЗатраты.КорСчет,
	|	ПодозрительныеЗатраты.Сумма,
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.Счет),
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.Подразделение),
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.СтатьяЗатрат),
	|	ПРЕДСТАВЛЕНИЕ(ПодозрительныеЗатраты.КорСчет),
	|	ПодозрительныеЗатраты.Счет.Порядок,
	|	ПодозрительныеЗатраты.Подразделение.РеквизитДопУпорядочивания,
	|	ПодозрительныеЗатраты.СтатьяЗатрат.Наименование,
	|	ПодозрительныеЗатраты.КорСчет.Порядок
	|ИЗ
	|	ПодозрительныеЗатраты КАК ПодозрительныеЗатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоискБезУчетаПодразделений КАК ПоискБезУчетаПодразделений
	|		ПО ПодозрительныеЗатраты.ВидЗатрат = ПоискБезУчетаПодразделений.ВидЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетПорядок,
	|	ПодразделениеРеквизитДопУпорядочивания,
	|	СтатьяЗатратНаименование,
	|	КорСчетПорядок
	|ИТОГИ ПО
	|	ИндексСчет,
	|	ИндексПравилоРаспределения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КолонкиМакетаДетальныхДанных = "Счет, СчетПредставление, Подразделение, ПодразделениеПредставление, СтатьяЗатрат, СтатьяЗатратПредставление, КорСчет, КорСчетПредставление, Сумма";
	ШаблонДетальныхДанных = СкопироватьКолонки(РезультатЗапроса, КолонкиМакетаДетальныхДанных);
	ШаблонДетальныхДанных.Колонки.Добавить("РасшифровкаСумма", Новый ОписаниеТипов("Структура"));
	
	// Используем самодельный индекс, чтобы гарантировать порядок строк в таблице
	ПодозрительныеЗатраты = Новый Соответствие;
	
	ВыборкаИндексСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИндексСчет.Следующий() Цикл
		
		ИндексСчет = Новый Соответствие;
		
		ВыборкаИндексПравилоРаспределения = ВыборкаИндексСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИндексПравилоРаспределения.Следующий() Цикл
			
			ДетальныеДанные = ШаблонДетальныхДанных.Скопировать();
			
			Выборка = ВыборкаИндексПравилоРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДетальныеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.РасшифровкаСумма = ОписаниеРасшифровкиДокументыЗатрат(
					НоваяСтрока.Счет,
					НоваяСтрока.Подразделение,
					Неопределено, // Несущественно в данном случае
					НоваяСтрока.СтатьяЗатрат,
					НоваяСтрока.КорСчет);
			КонецЦикла;
			
			ИндексСчет.Вставить(ВыборкаИндексПравилоРаспределения.ИндексПравилоРаспределения, ДетальныеДанные);
			
		КонецЦикла;
		
		ПодозрительныеЗатраты.Вставить(ВыборкаИндексСчет.ИндексСчет, ИндексСчет);
		
	КонецЦикла; // ВыборкаИндексСчет
	
	
	// Выводим тексты сообщений
	
	СчетаОбщехозяйственныхРасходов = Новый Массив;
	СчетаОбщехозяйственныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СчетаОбщехозяйственныхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаОбщехозяйственныхРасходов);
	
	СчетаОбщепроизводственныхРасходов = Новый Массив;
	СчетаОбщепроизводственныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаОбщепроизводственныхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаОбщепроизводственныхРасходов);
	
	ШаблонДетальныхДанных = СкопироватьКолонки(ВсеДетальныеДанные, КолонкиМакетаДетальныхДанных);
	ШаблонДетальныхДанных.Колонки.Добавить("РасшифровкаСумма", Новый ОписаниеТипов("Структура"));
	
	// Тексты сообщений
	
	ОказаниеУслуг = УчетнаяПолитика.ОказаниеУслуг(Организация, Период);
	Настройки = УчетнаяПолитика.НастройкиУчетаЗатрат(Организация, Период);
	
	Для Каждого ГруппаОшибокСчет Из ВсеДетальныеДанные.Строки Цикл
		
		ЭтоСчетОбщехозяйственныхРасходов    = (СчетаОбщехозяйственныхРасходов.Найти(ГруппаОшибокСчет.Счет) <> Неопределено);
		ЭтоСчетОбщепроизводственныхРасходов = (СчетаОбщепроизводственныхРасходов.Найти(ГруппаОшибокСчет.Счет) <> Неопределено);
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Счет", ГруппаОшибокСчет.Счет);
		
		Для Каждого ГруппаОшибокПравилоРаспределения Из ГруппаОшибокСчет.Строки Цикл
			
			МетодРасчетаБазы = ГруппаОшибокПравилоРаспределения.МетодРасчета;
			
			ПараметрыТекста.Вставить("МетодРасчетаБазы", """" + ГруппаОшибокПравилоРаспределения.МетодРасчета + """");
			
			// Подразделения упоминаются в тексте, если база рассчитана в разрезе подразделений
			Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
				ПараметрыТекста.Вставить("ДляНекоторыхПодразделений", НСтр("ru = ' для некоторых подразделений'"));
				ПараметрыТекста.Вставить("ЭтихПодразделений",         НСтр("ru = ' этих подразделений'"));
				ПараметрыТекста.Вставить("УказанныхПодразделений",    НСтр("ru = ' указанных подразделений'"));
				ПараметрыТекста.Вставить("ВРазрезеПодразделений",     НСтр("ru = ' в разрезе подразделений'"));
				ПараметрыТекста.Вставить("ИПодразделениями",          НСтр("ru = ' и подразделениями'"));
				ПараметрыТекста.Вставить("ИПодразделения",            НСтр("ru = ' и подразделения'"));
			Иначе
				ПараметрыТекста.Вставить("ДляНекоторыхПодразделений", "");
				ПараметрыТекста.Вставить("ЭтихПодразделений",         "");
				ПараметрыТекста.Вставить("УказанныхПодразделений",    "");
				ПараметрыТекста.Вставить("ВРазрезеПодразделений",     "");
				ПараметрыТекста.Вставить("ИПодразделениями",          "");
				ПараметрыТекста.Вставить("ИПодразделения",            "");
			КонецЕсли;
			
			// Расходы именуются в тексте, в зависимости от счета, на котором отражены
			// Так как конфигурация применяется в языковых средах флективного строя,
			// то описание расходов склоняется по падежам
			Если ЭтоСчетОбщепроизводственныхРасходов Тогда
				ПараметрыТекста.Вставить("ОписаниеРасходов",                 НСтр("ru = 'общепроизводственные расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВРег",             НСтр("ru = 'Общепроизводственные расходы'")); // Это исключение. Если потребуется где-то еще, то следует доработать ВыводСообщенийОбОшибках.СкомпоноватьТекст, чтобы она умела начинать предложение с большой буквы.
				ПараметрыТекста.Вставить("ОписаниеРасходовРодительныйПадеж", НСтр("ru = 'общепроизводственных расходов'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВинительныйПадеж", НСтр("ru = 'общепроизводственные расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовПрепозитив",       НСтр("ru = 'об общепроизводственных расходах'"));
			ИначеЕсли ЭтоСчетОбщехозяйственныхРасходов Тогда
				ПараметрыТекста.Вставить("ОписаниеРасходов",                 НСтр("ru = 'общехозяйственные расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВРег",             НСтр("ru = 'Общехозяйственные расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовРодительныйПадеж", НСтр("ru = 'общехозяйственных расходов'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВинительныйПадеж", НСтр("ru = 'общехозяйственные расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовПрепозитив",       НСтр("ru = 'об общехозяйственных расходах'"));
			Иначе
				ПараметрыТекста.Вставить("ОписаниеРасходов",                 НСтр("ru = 'расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВРег",             НСтр("ru = 'Расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовРодительныйПадеж", НСтр("ru = 'расходов'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовВинительныйПадеж", НСтр("ru = 'расходы'"));
				ПараметрыТекста.Вставить("ОписаниеРасходовПрепозитив",       НСтр("ru = 'о расходах'"));
			КонецЕсли;
			
			
			Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
			
			// Часть текстов и общая структура описания однотипны.
			// Часть - отличаются для разных методов распределения.
			
			// Раздел ОПИСАНИЕ
			Описание = НСтр("ru = 'Счет [Счет] невозможно закрыть:[ДляНекоторыхПодразделений] не удалось рассчитать базу распределения [МетодРасчетаБазы]'");
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание", ВыводСообщенийОбОшибках.СкомпоноватьТекст(Описание, ПараметрыТекста));
			
			// Раздел ЧТО СЛУЧИЛОСЬ
			
			// ЧтоСлучилось состоит из трех частей: Обстоятельства, Причина и Следствие
			
			Обстоятельства = Новый Массив;
			Если ЭтоСчетОбщехозяйственныхРасходов Тогда
				Обстоятельства.Добавить(НСтр("ru = 'Учетная политика предусматривает включение общехозяйственных расходов в себестоимость продукции.'"));
			КонецЕсли;
			Обстоятельства.Добавить(НСтр("ru = 'База распределения [ОписаниеРасходовРодительныйПадеж] [МетодРасчетаБазы] задана в учетной политике.'"));
			
			// Описание причины зависит от метода расчета базы
			Причина = Новый Массив;
			Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска
				Или МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
				
				Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
					Причина.Добавить(НСтр("ru = 'Однако, выпуск продукции (оказание услуг) отражен не по всем подразделениям, расходы которых учтены на счете [Счет].'"));
				Иначе
					Причина.Добавить(НСтр("ru = 'Однако, выпуск продукции (оказание услуг) не отражен'"));
				КонецЕсли;
				
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				
				Настройка = Справочники.НастройкиУчетаЗатрат.СодержимоеПравилаРаспределения(
					Настройки,
					ГруппаОшибокПравилоРаспределения.Настройка);
				НужныДанныеРеализацияУслуг = ОказаниеУслуг И ЗначениеЗаполнено(Настройка.СчетПрямыхЗатрат);
				
				Если Не НужныДанныеРеализацияУслуг Тогда
					
					Причина.Добавить(НСтр("ru = 'Для расчета этой базы необходимы данные о затратах, отраженных на счетах 20 и 23.'"));
					Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
						Причина.Добавить(НСтр("ru = 'На счете [Счет] отражены затраты по подразделениям.'"));
					КонецЕсли;
					Причина.Добавить(НСтр("ru = 'На счетах 20, 23[ЭтихПодразделений] не отражены затраты ни по одной из номенклатурных групп, которые указаны при реализации продукции и услуг.'"));
					
				Иначе
					
					ЛокальныеПараметрыТекста = Новый Структура; // Для разных правил могут быть разными
					ЛокальныеПараметрыТекста.Вставить("СчетПрямыхЗатрат", "" + Настройка.СчетПрямыхЗатрат);
					Если ЗначениеЗаполнено(Настройка.ПодразделениеЗатрат) Тогда
						ЛокальныеПараметрыТекста.Вставить("ИПодразделение",            НСтр("ru = ' и подразделение '"));
						ЛокальныеПараметрыТекста.Вставить("ИПодразделении",            НСтр("ru = ' и подразделении '"));
						ЛокальныеПараметрыТекста.Вставить("ПодразделениеПрямыхЗатрат", """" + Настройка.ПодразделениеЗатрат + """");
					Иначе
						ЛокальныеПараметрыТекста.Вставить("ИПодразделение",            "");
						ЛокальныеПараметрыТекста.Вставить("ИПодразделении",            "");
						ЛокальныеПараметрыТекста.Вставить("ПодразделениеПрямыхЗатрат", "");
					КонецЕсли;
						
					ЛокальнаяПричина = Новый Массив;
					ЛокальнаяПричина.Добавить(НСтр("ru = 'В учетной политике указано, что косвенные расходы следует отнести на счет [СчетПрямыхЗатрат][ИПодразделение][ПодразделениеПрямыхЗатрат].'"));
					ЛокальнаяПричина.Добавить(НСтр("ru = 'Поэтому для расчета базы распределения необходимы данные 
                                                    |- либо о выручке от реализации услуг
                                                    |- либо о затратах, отраженных на счете [СчетПрямыхЗатрат][ИПодразделении][ПодразделениеПрямыхЗатрат].'"));
					ЛокальнаяПричина.Добавить(НСтр("ru = 'Выручка от реализации услуг не отражена либо отражена неверно.'"));
                    ЛокальнаяПричина.Добавить(НСтр("ru = 'На счете [СчетПрямыхЗатрат][ИПодразделении][ПодразделениеПрямыхЗатрат] не отражены затраты ни по одной из номенклатурных групп, которые указаны при реализации продукции и услуг.'"));
					
					Для Каждого Строка Из ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЛокальнаяПричина, ЛокальныеПараметрыТекста) Цикл
						Причина.Добавить(Строка);
					КонецЦикла;
				
				КонецЕсли;
				
			Иначе // База основана на стоимости затрат
				
				Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
					ЛокальнаяПричина = НСтр("ru = 'Однако, на счетах 20, 23 [ЗатратыОбразующиеБазу] отражены не по всем подразделениям, расходы которых учтены на счете [Счет]'");
				Иначе
					ЛокальнаяПричина = НСтр("ru = 'Однако, на счетах 20, 23 [ЗатратыОбразующиеБазу] не отражены'");
				КонецЕсли;
				
				Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
					ЗатратыОбразующиеБазу = НСтр("ru = 'затраты по оплате труда'");
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
					ЗатратыОбразующиеБазу = НСтр("ru = 'материальные затраты'");
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
					ЗатратыОбразующиеБазу = НСтр("ru = 'затраты'");
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
					ЗатратыОбразующиеБазу = НСтр("ru = 'затраты по этим статьям'");
				Иначе
					ЗатратыОбразующиеБазу = НСтр("ru = 'такие затраты'");
				КонецЕсли;
				
				Причина.Добавить(ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЛокальнаяПричина, Новый Структура("ЗатратыОбразующиеБазу", ЗатратыОбразующиеБазу)));
				
			КонецЕсли;
			
			Следствие = НСтр("ru = 'Поэтому [ОписаниеРасходовВинительныйПадеж][ЭтихПодразделений] распределить невозможно.'");
			
			ЧтоСлучилось = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧтоСлучилось, Обстоятельства);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧтоСлучилось, Причина);
			ЧтоСлучилось.Добавить(Следствие);
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоСлучилось, ПараметрыТекста));
			
			// Раздел ЧТО НАДО ЗНАТЬ
			
			// Тексты раздела определяются методом расчета базы распределения
			ЧтоНадоЗнать = Новый Массив;
			ЧтоНадоЗнать.Добавить(НСтр("ru = '[ОписаниеРасходовВРег] каждый месяц списываются в дебет счетов 20, 23[ВРазрезеПодразделений].'"));
			ЧтоНадоЗнать.Добавить(НСтр("ru = 'При списании они распределяются между номенклатурными группами[ИПодразделениями]. 
			                           |В учетной политике указана база распределения – способ, которым рассчитываются весовые коэффициенты для каждой номенклатурной группы[ИПодразделения].'"));
			Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска
				Или МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
				
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Коэффициенты базы [МетодРасчетаБазы] рассчитываются [ОписаниеМетодаРасчета].'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = '[ПоказательПродукции] выпущенной продукции определяется по данным закладки ""Продукция"" документа ""Отчет производства за смену"".'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = '[ПоказательУслуг] услуг определяется по данным закладки ""Услуги"" документа ""Оказание производственных услуг"".'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Поэтому базу [МетодРасчетаБазы] целесообразно применять при выполнении следующих условий:
                                           |- результаты работы подразделения регистрируются документами ""Отчет производства за смену"" и ""Оказание производственных услуг""
                                           |- наименования продукции (услуг), включенные в одну номенклатурную группу, измеряются в одинаковых единицах
                                           |- продукция выпускается (услуги оказываются) каждый месяц'"));

				ПараметрыЧтоНадоЗнать = Новый Структура;
				Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
					ПараметрыЧтоНадоЗнать.Вставить("ОписаниеМетодаРасчета", НСтр("ru = 'по количеству выпущенной продукции и объему оказанных услуг (в натуральном выражении)'"));
					ПараметрыЧтоНадоЗнать.Вставить("ПоказательПродукции",   НСтр("ru = 'Количество'"));
					ПараметрыЧтоНадоЗнать.Вставить("ПоказательУслуг",       НСтр("ru = 'Объем'"));
				Иначе // Плановая себестоимость
					ПараметрыЧтоНадоЗнать.Вставить("ОписаниеМетодаРасчета", НСтр("ru = 'по плановой себестоимости выпущенной продукции и оказанных услуг'"));
					ПараметрыЧтоНадоЗнать.Вставить("ПоказательПродукции",   НСтр("ru = 'Плановая себестоимость'"));
					ПараметрыЧтоНадоЗнать.Вставить("ПоказательУслуг",       НСтр("ru = 'Плановая себестоимость'"));
				КонецЕсли;
					
				ЧтоНадоЗнать = ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыЧтоНадоЗнать);
				
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'При настройке распределения [ОписаниеРасходов] по базе [МетодРасчетаБазы] можно указать счет и подразделение, на которые следует отнести затраты, распределив их между номенклатурными группами.'"));
				Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
					ЧтоНадоЗнать.Добавить(НСтр("ru = 'Если счет и подразделение не указаны, то косвенные расходы распределяются только между теми номенклатурными группами, на которых отражены прямые расходы.'"));
				Иначе
					ЧтоНадоЗнать.Добавить(НСтр("ru = 'Если счет и подразделение не указаны, то косвенные расходы распределяются между теми счетами и подразделениями, на которых отражены прямые расходы по таким же номенклатурным группам, что и выручка.'"));
				КонецЕсли;
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Поэтому следует использовать одни и те же номенклатурные группы для учета как выручки так и затрат.'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Если счет и подразделение указаны, а прямые расходы не отражены, то расходы распределяются между всеми номенклатурными группами, по которым отражена выручка от реализации услуг.'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Базу [МетодРасчетаБазы] целесообразно применять при выполнении следующих условий:
                                            |- продается все, что производится
                                            |- выручка признается каждый месяц
                                            |- прямые расходы на производство продукции и оказание услуг и выручка от их реализации отражаются на одинаковых номенклатурных группах'"));
				
			Иначе // База основана на стоимости затрат
				
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Коэффициенты базы [МетодРасчетаБазы] рассчитываются по данным о затратах основного и вспомогательного производства (счета 20, 23) [ПоКакимСтатьям]. 
				                            |Обычно такие затраты отражаются документами [КакОтражаютсяЗатратыОбразующиеБазу].'"));
				ЧтоНадоЗнать.Добавить(НСтр("ru = 'Базу [МетодРасчетаБазы] целесообразно применять, когда затраты, включаемые в ее расчет:
                                           |- признаются каждый месяц
                                           |- составляют существенную часть
                                           |- в достаточной мере характеризуют деятельность предприятия'"));
				
				ПараметрыЧтоНадоЗнать = Новый Структура;
				Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
					ПараметрыЧтоНадоЗнать.Вставить("ПоКакимСтатьям",                     НСтр("ru = 'по статьям затрат с видом ""Оплата труда""'"));
					СинонимДокументаОтраженияЗарплаты  = Метаданные.Документы[ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация)].Синоним;
					КакОтражаютсяЗатратыОбразующиеБазу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1""'"), СинонимДокументаОтраженияЗарплаты);
					ПараметрыЧтоНадоЗнать.Вставить("КакОтражаютсяЗатратыОбразующиеБазу", КакОтражаютсяЗатратыОбразующиеБазу);
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
					ПараметрыЧтоНадоЗнать.Вставить("ПоКакимСтатьям",                     НСтр("ru = 'по статьям затрат с видом ""Материальные расходы""'"));
					ПараметрыЧтоНадоЗнать.Вставить("КакОтражаютсяЗатратыОбразующиеБазу", НСтр("ru = '""Требование-накладная"", ""Отчет производства за смену"" (закладка ""Материалы""), ""Поступление (акт, накладная, УПД)"" (закладка ""Услуги"")'"));
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
					ПараметрыЧтоНадоЗнать.Вставить("ПоКакимСтатьям",                     НСтр("ru = 'по всем статьям затрат'"));
					ПараметрыЧтоНадоЗнать.Вставить("КакОтражаютсяЗатратыОбразующиеБазу", НСтр(ВидыДокументовОтраженияЗатрат(Организация)));
				ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
					
					Настройка = Справочники.НастройкиУчетаЗатрат.СодержимоеПравилаРаспределения(
						Настройки,
						ГруппаОшибокПравилоРаспределения.Настройка);
					СписокСтатейЗатрат = Настройка.СписокСтатейЗатрат.СтатьиЗатрат.ВыгрузитьКолонку("СтатьяЗатрат");
					
					СписокСтатейЗатратСтрокой = СтрСоединить(СписокСтатейЗатрат, Символы.ПС);
					ПоКакимСтатьям = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по следующим статьям затрат: 
						|%1'"), СписокСтатейЗатратСтрокой);
					
					ПараметрыЧтоНадоЗнать.Вставить("ПоКакимСтатьям",                     ПоКакимСтатьям);
					ПараметрыЧтоНадоЗнать.Вставить("КакОтражаютсяЗатратыОбразующиеБазу", НСтр(ВидыДокументовОтраженияЗатрат(Организация)));
				Иначе
					ПараметрыЧтоНадоЗнать.Вставить("ПоКакимСтатьям",                     "");
					ПараметрыЧтоНадоЗнать.Вставить("КакОтражаютсяЗатратыОбразующиеБазу", "");
				КонецЕсли;
				ЧтоНадоЗнать = ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыЧтоНадоЗнать);
				
			КонецЕсли;
			ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыТекста));
			
			// Раздел ГДЕ ПРОБЛЕМА (содержит таблицу)
			Если ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений Тогда
				ГдеПроблема  = НСтр("ru = 'В таблице приведены данные [ОписаниеРасходовПрепозитив] тех подразделений, для которых не удалось рассчитать базу распределения'");
			Иначе
				ГдеПроблема  = НСтр("ru = 'В таблице приведены данные о расходах, которые не удалось распределить'");
			КонецЕсли;
			
			Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема,  ПараметрыТекста));
			
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "РасходыНеУдалосьРаспределить_Шапка", Новый Структура);
			
			ДетальныеДанные = ШаблонДетальныхДанных.Скопировать();
			Для Каждого ДетальнаяСтрока Из ГруппаОшибокПравилоРаспределения.Строки Цикл
				НоваяСтрока = ДетальныеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяСтрока);
				НоваяСтрока.РасшифровкаСумма = ОписаниеРасшифровкиДокументыЗатрат(
					НоваяСтрока.Счет,
					НоваяСтрока.Подразделение,
					Неопределено,
					НоваяСтрока.СтатьяЗатрат);
				
			КонецЦикла;
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "РасходыНеУдалосьРаспределить_Строка", ДетальныеДанные);
			
			// Раздел ЧТО ДЕЛАТЬ
			
			ЧтоДелать = Новый Массив;
			ЧтоДелать.Добавить(НСтр("ru = 'Проверьте соответствие счетов и подразделений, указанных в таблице. Если расходы этих подразделений должны быть учтены на других счетах, то исправьте документы, которыми отражены затраты. Список документов можно открыть двойным щелчком мыши на ячейке с суммой затрат.'"));
			ЧтоДелать.Добавить(НСтр("ru = '[ПроверьтеИсходныеДанные] Если это не так – исправьте указанные документы.'")); 
			
			// "Исходные данные расчета" зависят от метода расчета базы
			ПроверьтеИсходныеДанные = "";
			Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска
				Или МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что для отражения выпуска продукции[УказанныхПодразделений] используются документы ""Отчет производства за смену"", а для отражения оказания услуг - документы ""Оказание производственных услуг"".'");
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что в документах реализации продукции и услуг указаны те же номенклатурные группы, что в документах отражения прямых затрат.'");
				
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что в документах отражения прямых затрат указаны счета 20 и 23 и статьи затрат с видом ""Оплата труда"".'");
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что в документах отражения прямых затрат указаны счета 20 и 23 и статьи затрат с видом ""Материальные расходы"".'");
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что в документах отражения прямых затрат указаны счета 20 и 23.'");
			ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
				ПроверьтеИсходныеДанные = НСтр("ru = 'Проверьте, что в документах отражения прямых затрат указаны счета 20 и 23 и стать затрат из списка.'");
			КонецЕсли;
			
			ПроверьтеИсходныеДанные = ВыводСообщенийОбОшибках.СкомпоноватьТекст(ПроверьтеИсходныеДанные, ПараметрыТекста);
			ПараметрыТекста.Вставить("ПроверьтеИсходныеДанные", ПроверьтеИсходныеДанные);
			
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст",ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать, ПараметрыТекста));
			
			// Для некоторых баз рекомендации могут быть дополнены списком подозрительных затрат
			
			ПодозрительныеЗатратыСчет = ПодозрительныеЗатраты[ВсеДетальныеДанные.Строки.Индекс(ГруппаОшибокСчет)];
			Если ПодозрительныеЗатратыСчет <> Неопределено Тогда
				ПодозрительныеЗатратыПравилоРаспределения = ПодозрительныеЗатратыСчет[ГруппаОшибокСчет.Строки.Индекс(ГруппаОшибокПравилоРаспределения)];
				Если ПодозрительныеЗатратыПравилоРаспределения <> Неопределено Тогда
					
					ЧтоДелать_ПодозрительныеЗатраты_Заголовок = НСтр("ru = 'Проверьте, что в документах [ХарактеристикаДокументов] правильно указаны статьи затрат.
							|В таблице ниже приведен перечень расходов, при отражении которых статьи затрат могли быть указаны неправильно.'");
							
					ЧтоДелать_ПодозрительныеЗатраты_Подвал    = НСтр("ru = 'Для того, чтобы включить перечисленные прямые расходы в базу распределения косвенных расходов, исправьте документы отражения затрат - укажите в них статьи затрат с видом ""[ВидЗатрат]"".
							|Список документов можно открыть двойным щелчком мыши на ячейке с суммой.'");
					
					ЛокальныеПараметрыТекста = Новый Структура;
					
					ВыводитьСекциюПодозрительныеЗатраты = Истина;
					Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
						ЛокальныеПараметрыТекста.Вставить("ВидЗатрат",                Перечисления.ВидыРасходовНУ.ОплатаТруда);
						ЛокальныеПараметрыТекста.Вставить("ХарактеристикаДокументов", НСтр("ru = 'отражения заработной платы'"));
					ИначеЕсли МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
						ЛокальныеПараметрыТекста.Вставить("ВидЗатрат",                Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
						ЛокальныеПараметрыТекста.Вставить("ХарактеристикаДокументов", НСтр("ru = 'признания материальных затрат'"));
					Иначе
						ВыводитьСекциюПодозрительныеЗатраты = Ложь;
					КонецЕсли;
					
					Если ВыводитьСекциюПодозрительныеЗатраты Тогда
						
						ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать_ПодозрительныеЗатраты_Заголовок, ЛокальныеПараметрыТекста));
					
						ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ПодозрительныеСтатьиЗатрат_Шапка", Новый Структура);
						
						ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ПодозрительныеСтатьиЗатрат_Строка", ПодозрительныеЗатратыПравилоРаспределения);
						
						ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать_ПодозрительныеЗатраты_Подвал, ЛокальныеПараметрыТекста));
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Секция заканчивается рекомендацией настроить распределение с соответствующей командой.
			Если МетодРасчетаБазы = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				НастройтеРаспределение = (НСтр("ru = 'Если прямых расходов нет, то в настройке распределения укажите счет и подразделение, на которые следует распределить косвенные расходы.'"));
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", НастройтеРаспределение);
			КонецЕсли;
			
			СсылкаНастройки = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитику();
			
			НастройтеРаспределение = (НСтр("ru = 'Проверьте, подходит ли для распределения расходов указанных подразделений база [МетодРасчетаБазы]. Если база не подходит, то замените ее.'"));
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(НастройтеРаспределение, ПараметрыТекста));
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Ссылка", СсылкаНастройки);
			
			Если ЭтоСчетОбщехозяйственныхРасходов Тогда
				НастройтеДиректКостинг = НСтр("ru = 'Проверьте, что общехозяйственные расходы требуется включать в себестоимость продукции. 
                                              |Если не требуется, то в учетной политике укажите, что общехозяйственные расходы включаются в себестоимость продаж (методом директ-костинг).'");
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст",  НастройтеДиректКостинг);
				ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Ссылка", СсылкаНастройки);
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписатьВыпускБезЗатрат(Ошибки, ВсеДетальныеДанные, Организация)
	
	// ДетальныеДанные готовятся в РасчетСебестоимости.ПодготовитьВыпускБезЗатрат()
	
	// Общие данные для продукции и услуг
	
	ШаблонДетальныхДанных = СкопироватьКолонки(ВсеДетальныеДанные, "Продукция, Счет, Подразделение, НоменклатурнаяГруппа");
	
	ПодразделениеСРазделителем = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"), НСтр("ru = ', подразделение'"), "");
	ПодразделенияСРазделителем = ?(ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"), НСтр("ru = ', подразделения'"), "");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("ВидыДокументовОтраженияЗатрат", ВидыДокументовОтраженияЗатрат(Организация));
	ПараметрыТекста.Вставить("ПодразделениеСРазделителем",    ПодразделениеСРазделителем);
	ПараметрыТекста.Вставить("ПодразделенияСРазделителем",    ПодразделенияСРазделителем);
	
	Для Каждого ВидОшибки Из ВсеДетальныеДанные.Строки Цикл
		
		// ТЕКСТЫ - РАЗНЫЕ ДЛЯ ПРОДУКЦИИ И УСЛУГ
		
		Если ВидОшибки.ЭтоУслуга Тогда
			
			Описание     = НСтр("ru = 'Невозможно определить себестоимость услуг'");
			
			ЧтоСлучилось = НСтр("ru = 'Для некоторых наименований оказанных услуг не отражены соответствующие им затраты. 
				|Поэтому себестоимость таких услуг нельзя определить.'");
					
			ЧтоНадоЗнать = НСтр("ru = 'Затраты отражаются документами:
				|[ВидыДокументовОтраженияЗатрат]
				|Для связи услуг с соответствующими им затратами в документах оказания услуг и в документах отражения затрат указываются одинаковые счет[ПодразделениеСРазделителем] и номенклатурная группа.'");
					
			ГдеПроблема  = НСтр("ru = 'В таблице приведены: 
				|- перечень наименований услуг, для которых не обнаружены затраты
				|- счет[ПодразделениеСРазделителем] и номенклатурная группа, указанные в документах оказания услуг
				|  (по этой аналитике определяются затраты на оказание услуг)'");
				
			// Заголовок таблицы с детальными данными
			ЗаголовокПродукция = НСтр("ru = 'Услуга'");
			ЗаголовокЗатраты   = НСтр("ru = 'Где должны быть затраты на выпуск услуг'");
			
			ЧтоДелать = Новый Массив;
			ЧтоДелать.Добавить(НСтр("ru = 'Проверьте соответствие наименований услуг и счета[ПодразделенияСРазделителем], номенклатурной группы.
				|Если есть ошибки - исправьте документы оказания услуг. Список документов можно открыть двойным щелчком мыши на ячейке с наименованием услуги.'"));
				
			ЧтоДелать.Добавить(НСтр("ru = 'Убедитесь, что для отражения услуг заказчикам используются подходящие документы. 
			|Если калькулировать себестоимость услуг не требуется, то вместо документов ""[ОказаниеПроизводственныхУслуг]"" используйте документы ""[РеализацияТоваровИУслуг]"".'"));
			
			ПараметрыТекста.Вставить("ОказаниеПроизводственныхУслуг", Метаданные.Документы.АктОбОказанииПроизводственныхУслуг.Синоним);
			ПараметрыТекста.Вставить("РеализацияТоваровИУслуг",       Метаданные.Документы.РеализацияТоваровУслуг.Синоним);
			
			ЧтоДелать.Добавить(НСтр("ru = 'Проверьте, что в документах отражения затрат на оказание этих услуг
				|[ВидыДокументовОтраженияЗатрат]
				|указаны те же счет[ПодразделениеСРазделителем] и номенклатурная группа, что и в документах оказания услуг.
				|Если есть ошибки - исправьте документы отражения затрат.'"));
				
		Иначе // Продукция
			
			Описание     = НСтр("ru = 'Невозможно определить себестоимость продукции'");
			
			ЧтоСлучилось = НСтр("ru = 'Для некоторых наименований выпущенной продукции не отражены соответствующие им затраты. 
				|Поэтому себестоимость такой продукции нельзя определить.'");
					
			ЧтоНадоЗнать = Новый Массив;
			ЧтоНадоЗнать.Добавить(НСтр("ru = 'Затраты отражаются документами:
                                        |[ВидыДокументовОтраженияЗатрат]'"));
			ЧтоНадоЗнать.Добавить(НСтр("ru = 'Для связи продукции с соответствующими ей затратами в документах выпуска и в документах отражения затрат продукции указываются одинаковые счет[ПодразделениеСРазделителем] и номенклатурная группа.'"));
					
			ГдеПроблема  = НСтр("ru = 'В таблице приведены: 
				|- перечень наименований продукции, для которых не обнаружены затраты;
				|- счет[ПодразделениеСРазделителем] и номенклатурная группа, указанные в документах выпуска продукции (по этой аналитике определяются затраты на выпуск)'");
				
			// Заголовок таблицы с детальными данными
			ЗаголовокПродукция = НСтр("ru = 'Продукция'");
			ЗаголовокЗатраты   = НСтр("ru = 'Где должны быть затраты на выпуск продукции'");
				
			ЧтоДелать = Новый Массив;
			ЧтоДелать.Добавить(НСтр("ru = 'Проверьте соответствие наименований продукции и счета[ПодразделенияСРазделителем], номенклатурной группы.
				|Если есть ошибки - исправьте документы выпуска продукции. Список документов можно открыть двойным щелчком мыши на ячейке с наименованием продукции.'"));
				
			ЧтоДелать.Добавить(НСтр("ru = 'Проверьте, что в документах отражения затрат на выпуск продукции
				|[ВидыДокументовОтраженияЗатрат]
				|указаны те же счет[ПодразделениеСРазделителем] и номенклатурная группа, что и в документах выпуска продукции.
				|Если есть ошибки - исправьте документы отражения затрат.'"));
				
		КонецЕсли;
		
		// ДЕТАЛЬНЫЕ ДАННЫЕ
		
		// КОМПОНОВКА
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
		
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание",     Описание);
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ЧтоСлучилось);
		ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоНадоЗнать", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоНадоЗнать, ПараметрыТекста));
		
		// ГдеПроблема - комплексный раздел, содержит таблицу
		Секция = ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ГдеПроблема",  ВыводСообщенийОбОшибках.СкомпоноватьТекст(ГдеПроблема, ПараметрыТекста));
		
		ТекстыШапкиТаблицы = Новый Структура;
		ТекстыШапкиТаблицы.Вставить("ЗаголовокПродукция", ЗаголовокПродукция);
		ТекстыШапкиТаблицы.Вставить("ЗаголовокЗатраты",   ЗаголовокЗатраты);
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ВыпускБезЗатрат_Шапка",  ТекстыШапкиТаблицы);
		
		// Строки таблицы
		ДанныеДляВывода = ШаблонДетальныхДанных.Скопировать();
		Для Каждого СтрокаДетальныхДанных Из ВидОшибки.Строки Цикл
			
			ДанныеДляВывода = Новый Структура("Продукция, Счет, Подразделение, НоменклатурнаяГруппа");
			ЗаполнитьЗначенияСвойств(ДанныеДляВывода, СтрокаДетальныхДанных);
			
			// Расшифровка
			РасшифровкаПродукция = Новый Массив;
			РасшифровкаПродукция.Добавить(СтрокаДетальныхДанных.Продукция);
			
			ДанныеДляВывода.Вставить(
				"РасшифровкаПродукция", 
				ОписаниеРасшифровкиДокументыВыпуска(СтрокаДетальныхДанных.Счет, СтрокаДетальныхДанных.Подразделение, СтрокаДетальныхДанных.НоменклатурнаяГруппа, СтрокаДетальныхДанных.Продукция));
			
			// Вывод строки
			
			СтрокаТаблицы = ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "ВыпускБезЗатрат_Строка", ДанныеДляВывода);
			
		КонецЦикла;
		
		// ЧтоДелать
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Секция, "Текст", ВыводСообщенийОбОшибках.СкомпоноватьТекст(ЧтоДелать, ПараметрыТекста));
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ РАБОТЫ С СООБЩЕНИЯМИ ОБ ОШИБКАХ

Функция ВидыДокументовОтраженияЗатрат(Организация)
	
	ВидыДокументовОтраженияЗатрат = Новый Массив;
	ВидыДокументовОтраженияЗатрат.Добавить("ТребованиеНакладная");
	ВидыДокументовОтраженияЗатрат.Добавить(ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация));
	ВидыДокументовОтраженияЗатрат.Добавить("ПоступлениеТоваровУслуг");
	
	ШаблонРегулярнойСтроки = НСтр("ru = '- %1'");
	ШаблонПоследнейСтроки  = НСтр("ru = '- %1 и др.'");
	
	ВГраница = ВидыДокументовОтраженияЗатрат.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		
		Если Индекс = ВГраница Тогда
			ШаблонТекущейСтроки = ШаблонПоследнейСтроки;
		Иначе
			ШаблонТекущейСтроки = ШаблонРегулярнойСтроки
		КонецЕсли;
		
		ВидыДокументовОтраженияЗатрат[Индекс] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекущейСтроки,
			Метаданные.Документы[ВидыДокументовОтраженияЗатрат[Индекс]].Синоним);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ВидыДокументовОтраженияЗатрат, Символы.ПС);
	
КонецФункции

Функция СкопироватьКолонки(ИсходнаяКоллекция, ИменаКолонок)
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Новый Структура(ИменаКолонок);
	Для Каждого Колонка Из ИсходнаяКоллекция.Колонки Цикл
		Если Не Колонки.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, , "Null");
		Результат.Колонки.Добавить(Колонка.Имя, ТипЗначения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеРасшифровкиБухгалтерскийОтчет(ВидОтчета, Счет, Подразделение = Неопределено, НоменклатурнаяГруппа = Неопределено, СтатьяЗатрат = Неопределено)
	
	Результат = ВыводСообщенийОбОшибках.НовыйОписаниеРасшифровки(ВидОтчета);
	Результат.Счет          = Счет;
	Результат.Подразделение = Подразделение;
	
	Если НоменклатурнаяГруппа = Неопределено И СтатьяЗатрат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Заполним Отбор
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
		Если НоменклатурнаяГруппа <> Неопределено 
			И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			Результат.Отбор.Вставить("Субконто" + НомерСубконто, НоменклатурнаяГруппа);
		ИначеЕсли СтатьяЗатрат <> Неопределено 
			И ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
			Результат.Отбор.Вставить("Субконто" + НомерСубконто, СтатьяЗатрат);
		КонецЕсли;
	КонецЦикла;
			
	Возврат Результат;
	
КонецФункции

Функция ОписаниеРасшифровкиДокументыВыпуска(Счет, Подразделение, НоменклатурнаяГруппа, Продукция = Неопределено)
	
	ОписаниеРасшифровки = ВыводСообщенийОбОшибках.НовыйОписаниеРасшифровки("ФормаСписка");
	ОписаниеРасшифровки.Заголовок = НСтр("ru = 'Выпуск продукции, услуг по плановой стоимости'");
	ОписаниеРасшифровки.Объект    = "РегистрНакопления.ВыпускПродукцииУслуг";
	ОписаниеРасшифровки.Отбор.Вставить("СчетЗатрат",           Счет);
	ОписаниеРасшифровки.Отбор.Вставить("Подразделение",        Подразделение);
	ОписаниеРасшифровки.Отбор.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Если Продукция <> Неопределено Тогда
		ОписаниеРасшифровки.Отбор.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	Возврат ОписаниеРасшифровки;
	
КонецФункции

Функция ОписаниеРасшифровкиДокументыЗатрат(Счет, Подразделение  = Неопределено, НоменклатурнаяГруппа = Неопределено, СтатьяЗатрат = Неопределено, КорСчет = Неопределено)
	
	ОписаниеРасшифровки = ВыводСообщенийОбОшибках.НовыйОписаниеРасшифровки("ОтчетПоПроводкам");
	ОписаниеРасшифровки.Заголовок = НСтр("ru = 'Проводки по принятию затрат к учету'");
	ОписаниеРасшифровки.Отбор.Вставить("СчетДт",          Счет);
	
	Если КорСчет <> Неопределено Тогда
		ОписаниеРасшифровки.Отбор.Вставить("СчетКт", КорСчет);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		Если Подразделение <> Неопределено Тогда
			ОписаниеРасшифровки.Отбор.Вставить("ПодразделениеДт", Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	Если НоменклатурнаяГруппа <> Неопределено Тогда
		ОписаниеРасшифровки.Отбор.Вставить("ВидСубконто1",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		ОписаниеРасшифровки.Отбор.Вставить("Субконто1",       НоменклатурнаяГруппа);
	КонецЕсли;
	
	Если СтатьяЗатрат <> Неопределено Тогда
		ОписаниеРасшифровки.Отбор.Вставить("ВидСубконто2",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		ОписаниеРасшифровки.Отбор.Вставить("Субконто2",       СтатьяЗатрат);
	КонецЕсли;
	
	Возврат ОписаниеРасшифровки;
	
КонецФункции
