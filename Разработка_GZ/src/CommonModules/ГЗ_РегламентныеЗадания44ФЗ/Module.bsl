
Процедура ГЗ_ВыполнитьОбработкуПо44ФЗ() Экспорт 
	
	ГЗ_44ФЗ_ЗагрузитьФайлыZIPсFTP();
	
	ГЗ_44ФЗ_РаспаковатьФайлыZIP();
	
	//ГЗ_44ФЗ_СформироватьПотокиОбработкиФайловXML();
	ГЗ_44ФЗ_ОбработатьФайлыXML();
КонецПроцедуры

Процедура ГЗ_44ФЗ_ОбработатьФайлыXML () Экспорт // ГЗ_44ФЗ_ОбработатьФайлыXML(ИндексНачала,РазмерПорции) Экспорт
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ.Получить();
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ.Получить();
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		НаименованиеПроцедуры = ГЗ_РаботаСXML.ОпределитьНаименованиеИзвещения44ФЗ(СтруктураПрочитанныхДанных);
		
		Если НаименованиеПроцедуры <> Неопределено  Тогда
			
			Если НаименованиеПроцедуры = "fcsClarification" или НаименованиеПроцедуры= "epNotificationCancel"  или НаименованиеПроцедуры = "epProlongationEZK" или НаименованиеПроцедуры = "pprf615Clarification"
					или НаименованиеПроцедуры = "epClarificationDoc" Или НаименованиеПроцедуры = "epClarificationResult" или НаименованиеПроцедуры= "epProlongationEOKOU" или НаименованиеПроцедуры="epProlongationEOK"
					Или НаименованиеПроцедуры= "fcsNotificationCancel" или НаименованиеПроцедуры = "epProlongationCancelEOK"  или НаименованиеПроцедуры = "epProlongationCancelEZK"
					или НаименованиеПроцедуры="pprf615NotificationCancel"  или НаименованиеПроцедуры="fcsNotificationOrgChange" //fcsNotificationOrgChange - смена орагнизации осущ закупку
					ИЛИ НаименованиеПроцедуры = "pprf615NotificationPO" //ПРЕДВАРИТЕЛЬНЫЙ ОТБОР ПОДРЯДНЫХ ОРГАНИЗАЦИЙ
					или НаименованиеПроцедуры="fcs_notificationEFDateChange" //перенос даты аукциона
					Или НаименованиеПроцедуры= "fcsNotificationCancelFailure" или НаименованиеПроцедуры= "epNotificationCancelFailure" Тогда  //Запросы на разъяснения по закупкам    //Разъяснения результатов конкурса  epClarificationResult
				
				 ЧтениеXML.Закрыть();
				 ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);

			Иначе	
			
			ОбъектXDTOСДанными =  СтруктураПрочитанныхДанных[НаименованиеПроцедуры];
			
			Если ТипЗнч(ОбъектXDTOСДанными) = Тип("ОбъектXDTO") Тогда 
				
				Если НаименованиеПроцедуры = "epNotificationEZK2020" ИЛИ НаименованиеПроцедуры = "epNotificationEOK" 
					ИЛИ НаименованиеПроцедуры = "epNotificationEOKOU" Или НаименованиеПроцедуры = "epNotificationEZP" 
					или НаименованиеПроцедуры = "epNotificationEZK"
					Или НаименованиеПроцедуры = "pprf615NotificationEF" или НаименованиеПроцедуры = "epNotificationEZT2020" Тогда
					
					СтруктураРеквизитовДляДокумента = ГЗ_Процедура_epNotificationEZK2020_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_epNotificationEZK2020_(ОбъектXDTOСДанными);
					СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
					
				Иначе 					
					СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsNotificationEF_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_epNotificationEF_(ОбъектXDTOСДанными);
					СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);			
					
				КонецЕсли;
			ИначеЕсли  ТипЗнч(ОбъектXDTOСДанными) = Тип("СписокXDTO") Тогда 
                А=1;
				
			КонецЕсли;
			Документы.ГЗ_ИзвещениеОПроведенииЗакупок.СоздатьДокументИзвещение(СтруктураРеквизитовДляДокумента); 
			
			ЧтениеXML.Закрыть();
			ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
			
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГЗ_44ФЗ_ПереместитьФайлыXML() Экспорт 
	
	НайденныеФайлыXML = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ.Получить(), "*.xml");
	ПутьДляПереносаФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ.Получить();
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл 
		Попытка
			ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляПереносаФайлов+НайденныйФайл.Имя);
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_44_ПеремещениеФайловXMLВКаталогОбработанных", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Завершено перемещение файлов в папку обработанных");
			
		Исключение
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_44_ПеремещениеФайловXMLВКаталогОбработанных", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Ошибка при перемещении файлов в папку обработанных");
			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_44ФЗ_СформироватьПотокиОбработкиФайловXML() Экспорт 
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ.Получить();
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	ЧислоПотоков = 5;
	
	ЧислоСтрокВТаблице = НайденныеФайлыXML.Количество();
	
	// объем порции данных для обработки каждым потоком 
	
	РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
	
	// массив, где будут храниться фоновые задания 
	
	МассивЗаданий = Новый Массив;
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл
		
		// определяем индекс для начала обработки данных данным потоком 
		
		// разные потоки обрабатывают разные части таблицы 
		
		ИндексНачала = (НомерПотока - 1)*РазмерПорции;
		
		Если (НомерПотока = ЧислоПотоков) Тогда
			
			// если это последний поток, то он обрабатывает все оставшиеся данные 
			
			// т.к. число потоков может не быть кратно количеству строк в таблице 
			
			РазмерПорции = ЧислоСтрокВТаблице -(ЧислоПотоков*РазмерПорции)+РазмерПорции;
			
		КонецЕсли;
		
		// определяем массив параметров для процедуры 
		
		НаборПараметров = Новый Массив;
		
		//НаборПараметров.Добавить(НайденныеФайлыXML);
		
		НаборПараметров.Добавить(ИндексНачала);		
		
		НаборПараметров.Добавить(РазмерПорции);		
		
		// запуск фонового задания 		
		
		//ЗапуститьВыполнениеДлительнойОперации("ГЗ_РегламентныеЗадания44ФЗ.ГЗ_44ФЗ_ОбработатьФайлыXML",НаборПараметров, Строка("Обработка файлов XML в потоке №"+НомерПотока),Ложь,Новый УникальныйИдентификатор);  
		Задание = ФоновыеЗадания.Выполнить("ГЗ_РегламентныеЗадания44ФЗ.ГЗ_44ФЗ_ОбработатьФайлыXML",НаборПараметров);
		// добавляем задание в массив, чтобы потом отследить выполнение 		
		
		МассивЗаданий.Добавить(Задание);
	КонецЦикла;
	
	//Если МассивЗаданий.Количество() > 0 Тогда
	//	Попытка
	//		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_44_ЗагрузкаДанныхИзXML", 
	//		УровеньЖурналаРегистрации.Информация, , ,
	//		"Загрузка файлов XML по 44 ФЗ завершена");
	//		
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_44_ПеремещениеФайловXMLВКаталогОбработанных", 
	//		УровеньЖурналаРегистрации.Информация, , ,
	//		"Начато перемещение файлов в папку обработанных");
	//		ГЗ_44ФЗ_ПереместитьФайлыXML();
	//	Исключение
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_44_ПеремещениеФайловXMLВКаталогОбработанных", 
	//		УровеньЖурналаРегистрации.Ошибка, , ,
	//		"Ошибка перемещения файлов в папку обработанных");
	//	КонецПопытки;
	//	МассивЗаданий.Очистить();
	//КонецЕсли;		
КонецПроцедуры

Функция ЗапуститьВыполнениеДлительнойОперации(ИмяЭкспортнойПроцедуры,
		ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации,
		УникальныйИдентификаторЗадания)

	ЗаданиеВыполнено = Ложь;


	// Режим длительной операции.
		//ВремяОжидания = 0.8;

		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);

		Задание = Задание.ОжидатьЗавершенияВыполнения();//(ВремяОжидания);

		УникальныйИдентификаторЗадания = Задание.УникальныйИдентификатор;

		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(УникальныйИдентификаторЗадания, СообщениеОбОшибке);

		//Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда			
		//	ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		//КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания,
		СообщениеОбОшибке) Экспорт

	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка

		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";

	Исключение
	// что-то произошло, нужно сообщить
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
			|Подробности см. в Журнале регистрации.
			|" + ОписаниеОшибки() + "'");
		Выполнено = Истина;

	КонецПопытки;

	Возврат Выполнено;

КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Наименование");
	СтруктураВозврата.Вставить("НаименованиеПолное");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("Банк");
	СтруктураВозврата.Вставить("БИК");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("КоррСчет");
	СтруктураВозврата.Вставить("БанкДляРасчетов");
	СтруктураВозврата.Вставить("БанкДляРасчетовБИК");
	СтруктураВозврата.Вставить("БанкДляРасчетовКоррСчет");
	СтруктураВозврата.Вставить("ДолжностьРуководителя");
	СтруктураВозврата.Вставить("Руководитель");
	СтруктураВозврата.Вставить("ЮридическоеФизическоеЛицо");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("АдресРегистрации");
	СтруктураВозврата.Вставить("РеквизитыАдресРегистрации");
	СтруктураВозврата.Вставить("Телефон");
	СтруктураВозврата.Вставить("АдресЭлектроннойПочты");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьПлощадкуETP (СтруктураДанных)
	СпрПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
	Если СпрПлощадка.Пустая() Тогда 
		Площадка = СоздатьНовуюПлощадку(СтруктураДанных);
	Иначе
		Площадка = СпрПлощадка;
	КонецЕсли;
	
	Возврат   Площадка;
КонецФункции

Функция СоздатьНовуюПлощадку(СтруктураДанных)
	
	НоваяПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.СоздатьЭлемент();
	НоваяПлощадка.url= СтруктураДанных.url;
	НоваяПлощадка.Наименование = СтруктураДанных.name;
	НоваяПлощадка.GZcode = СтруктураДанных.code;
	НоваяПлощадка.ГЗ_НаименованиеПолное = СтруктураДанных.name;
	НоваяПлощадка.Записать();
	
	Возврат НоваяПлощадка.Ссылка;
КонецФункции

Функция ПолучитьСпособЗакупки (СтруктураДанных)
	СпрСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
	Если СпрСпособЗакупки.Пустая() Тогда 
		СпособЗакупки = СоздатьНовыйСпособЗакупки(СтруктураДанных);
	Иначе
		СпособЗакупки = СпрСпособЗакупки;
	КонецЕсли;
	
	Возврат  СпособЗакупки;
КонецФункции

Функция СоздатьНовыйСпособЗакупки(СтруктураДанных)
	
	НовыйСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.СоздатьЭлемент();
	НовыйСпособЗакупки.Наименование = СтруктураДанных.name;
	НовыйСпособЗакупки.ГЗ_НаименованиеПолное = СтруктураДанных.name;
	НовыйСпособЗакупки.GZcode = СтруктураДанных.code;
	НовыйСпособЗакупки.Записать();
	
	Возврат НовыйСпособЗакупки.Ссылка;
КонецФункции

Функция ПроверитьТипЗначения (ПроверяемоеЗначение)
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("ОбъектXDTO") Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ГЗ_ОбработкаФайловZIP() Экспорт
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГЗ_ОбработкаФайловZIP);
	ГЗ_44ФЗ_РаспаковатьФайлы();
КонецПроцедуры

Процедура ГЗ_44ФЗ_ЗагрузитьФайлыZIPсFTP() Экспорт
	ГЗ_44ФЗ_НайтиФайлыНаFTP_Сервере();
КонецПроцедуры

Процедура ГЗ_44ФЗ_НайтиФайлыНаFTP_Сервере() Экспорт 
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "free";
	Пароль = "free";
	ИмяКаталога = "/fcs_regions";///<регион>/*Notice*/daily";
	
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0"));
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30*Константы.GZ_КоличествоДнейЗагрузкиФайловXML.Получить()); //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти = FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				Если Найти(ПапкаИзКаталога.Имя, "notifications") > 0 Тогда
					Если День(ТекущаяДата()) = 1 Тогда
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/prevMonth/","*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);	
					Иначе
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/currMonth/","*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
					КонецЕсли;
					Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_44ФЗ_РаспаковатьФайлыZIP() Экспорт
	ГЗ_44ФЗ_РаспаковатьФайлы();
КонецПроцедуры

Процедура ГЗ_44ФЗ_РаспаковатьФайлы() Экспорт
	НайдФайлы = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ.Получить(), "*.zip", Истина);
	Для Каждого ФайлЗип Из НайдФайлы Цикл 
		
		Попытка
			ЧтениеЗипФалов = Новый ЧтениеZipФайла(ФайлЗип.ПолноеИмя);
			ЧтениеЗипФалов.ИзвлечьВсе(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ.Получить());	
			
		Исключение
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Получение файла завершилось с ошибкой. Имя файла: "+ФайлЗип.ПолноеИмя);
		КонецПопытки;
	КонецЦикла;
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ.Получить(), "*.zip");
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ.Получить(), "*.sig");
КонецПроцедуры

Процедура Тест(ХДТО)
	Для Каждого СвойствоХДТО Из ХДТО.Свойства() Цикл
		ОбъектПакета_1_ХДТО = ХДТО[СвойствоХДТО.Имя];
		
		Если ТипЗнч(ОбъектПакета_1_ХДТО) = Тип("ОбъектXDTO") Тогда 
			Для Каждого СтрокаПакета_1_ХДТО Из ОбъектПакета_1_ХДТО.Свойства() Цикл
				//ОбъектПакета_1_ХДТО[СтрокаПакета_1_ХДТО.Имя]
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ГЗ_ВыполнитьОбработкуДоговоровПо44ФЗ() Экспорт
	
	ГЗ_44ФЗ_ЗагрузитьФайлыДоговоровZIPсFTP();
	
	ГЗ_44ФЗ_РаспаковатьФайлыДоговоров();
	
	ГЗ_44ФЗ_ОбработатьФайлыXMLДоговора();

КонецПроцедуры

Процедура ГЗ_44ФЗ_ЗагрузитьФайлыДоговоровZIPсFTP() Экспорт 
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "free";
	Пароль = "free";
	ИмяКаталога = "/fcs_regions";///<регион>/*Notice*/daily";
	
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0"));
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30*Константы.GZ_КоличествоДнейЗагрузкиФайловXML.Получить()); //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти = FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				Если Найти(ПапкаИзКаталога.Имя, "contracts") > 0 Тогда
					Если День(ТекущаяДата()) = 1 Тогда
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/prevMonth/","*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);	
					Иначе
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/currMonth/","*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
					КонецЕсли;
					Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Договоры.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_44ФЗ_РаспаковатьФайлыДоговоров() Экспорт
	НайдФайлы = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Договоры.Получить(), "*.zip", Истина);
	Для Каждого ФайлЗип Из НайдФайлы Цикл 
		
		Попытка
			ЧтениеЗипФалов = Новый ЧтениеZipФайла(ФайлЗип.ПолноеИмя);
			ЧтениеЗипФалов.ИзвлечьВсе(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Договоры.Получить());	
			
		Исключение
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Получение файла завершилось с ошибкой. Имя файла: "+ФайлЗип.ПолноеИмя);
		КонецПопытки;
	КонецЦикла;
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Договоры.Получить(), "*.zip");
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Договоры.Получить(), "*.sig");
КонецПроцедуры

Процедура ГЗ_44ФЗ_ОбработатьФайлыXMLДоговора() Экспорт
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Договоры.Получить();//"D:\XML\contract\in\";
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Договоры.Получить();//"D:\XML\contract\out\";
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	//Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
	//	
	//	ЧтениеXML = Новый ЧтениеXML();
	//	ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
	//	
	//	СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//	XDTOДанные = ?(СтруктураПрочитанныхДанных.Свойства().Получить("cpContractSign")<>Неопределено,СтруктураПрочитанныхДанных.cpContractSign, Неопределено); 
	//	Если  XDTOДанные<> Неопределено Тогда 
	//		СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту(XDTOДанные);
	//	
	//		Документы.ГЗ_ПроектКонтрактаПо44ФЗ.СоздатьДокументПроектКонтактаПо44ФЗ(СтруктураРеквизитовДляДокумента); 
	//		
	//		ЧтениеXML.Закрыть();
	//		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
	//	Иначе
	//		ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
	//		УровеньЖурналаРегистрации.Ошибка, , ,
	//		"Получение файла завершилось с ошибкой. Имя файла: "+НайденныйФайл.ПолноеИмя);
	//
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 
		
		Если СтруктураПрочитанныхДанных.Свойства().Получить("cpContractSign")<>Неопределено Тогда 
			   СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_cpContractSign(СтруктураПрочитанныхДанных.cpContractSign);
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("contract")<>Неопределено Тогда 
			   СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_contract(СтруктураПрочитанныхДанных.contract);		   
        КонецЕсли;
		Если СтруктураРеквизитовДляДокумента <>  Неопределено Тогда 
			СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
		
			Документы.ГЗ_ПроектКонтрактаПо44ФЗ.СоздатьДокументПроектКонтактаПо44ФЗ(СтруктураРеквизитовДляДокумента); 
		КонецЕсли;	
		ЧтениеXML.Закрыть();
		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
      
	КонецЦикла;


КонецПроцедуры
 
Функция СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_cpContractSign (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    foundationInfo.purchaseNumber - поиск извещения	
	
	НомерИзвещения = ?(xdto_пакет.foundationInfo.Свойства().Получить("purchaseNumber")<>Неопределено,xdto_пакет.foundationInfo.purchaseNumber,"");
	
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения);
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
			СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Номер извещения не определен!!!");
	
		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		
		СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer)); 
		СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
	
	КонецЕсли;
	
	СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.commonInfo.docNumber);	
	
	СтруктураДанныхДляКонтракта.Вставить("url_ПодписанногоДоговора",xdto_пакет.contractProjectFilesInfo.contractProjectFileInfo.url);

	СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.contractInfo.subject);
	СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.contractInfo.price);
	СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.commonInfo.signDate));

	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ИНН", xdto_пакет.participantInfo.legalEntityRFInfo.INN);
	РеквизитыКонтрагента.Вставить("КПП", xdto_пакет.participantInfo.legalEntityRFInfo.KPP);
	РеквизитыКонтрагента.Вставить("Наименование", xdto_пакет.participantInfo.legalEntityRFInfo.fullName);
	РеквизитыКонтрагента.Вставить("НаименованиеПолное", xdto_пакет.participantInfo.legalEntityRFInfo.fullName);
	
	СтруктураДанныхДляКонтракта.Вставить("Контрагент",Справочники.Контрагенты.СоздатьКонтрагента(РеквизитыКонтрагента));
		
	Возврат СтруктураДанныхДляКонтракта;
	 
	 
КонецФункции

Функция СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_contract (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    xdto_пакет.foundation.fcsOrder.order.notificationNumber - поиск извещения	
	НомерИзвещения = "";
	
	Если xdto_пакет.Свойства().Получить("foundation") <> Неопределено Тогда   //.fcsOrder.order.notificationNumber
		Если xdto_пакет.foundation.Свойства().Получить("fcsOrder") <> Неопределено Тогда
			Если xdto_пакет.foundation.fcsOrder.Свойства().Получить("order") <> Неопределено Тогда
				Если xdto_пакет.foundation.fcsOrder.order.Свойства().Получить("notificationNumber") <> Неопределено Тогда
					 НомерИзвещения = xdto_пакет.foundation.fcsOrder.order.notificationNumber;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	//НомерИзвещения = ?(xdto_пакет.Свойства().Получить("regNum")<>Неопределено,xdto_пакет.regNum,"");
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения); 
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда 
			Если xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		    	СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer));
			Иначе
				СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			КонецЕсли;

			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());

		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		
		СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer)); 
		СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
	КонецЕсли;	
	
	СтруктураДанныхДляКонтракта.Вставить("url_ПодписанногоДоговора",xdto_пакет.href);
	
	
	Если xdto_пакет.printForm.Свойства().Получить("docRegNumber")<> Неопределено Тогда 
		СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.printForm.docRegNumber);	
	ИначеЕсли xdto_пакет.Свойства().Получить("regNum")<> Неопределено Тогда  	
		СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.regNum);
	КонецЕсли;
	
	Если xdto_пакет.Свойства().Получить("contractSubject")<> Неопределено Тогда			
		
		СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.contractSubject);
		
	ИначеЕсли xdto_пакет.Свойства().Получить("products")<> Неопределено Тогда
		Если xdto_пакет.products.Свойства().Получить("product")<> Неопределено Тогда
			Если ТипЗнч(xdto_пакет.products.product) = Тип("ОбъектXDTO") Тогда 
				Если xdto_пакет.products.product.Свойства().Получить("name")<> Неопределено Тогда
					СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.products.product.name);
				КонецЕсли;
			ИначеЕсли ТипЗнч(xdto_пакет.products.product) = Тип("СписокXDTO") Тогда	
				СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.products.product[0].name);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	
	Если xdto_пакет.priceInfo.Свойства().Получить("price")<> Неопределено Тогда 
	
		СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.priceInfo.price);    //xdto_пакет.priceInfo.rightToConcludeContractPriceInfo 
	ИначеЕсли xdto_пакет.priceInfo.Свойства().Получить("rightToConcludeContractPriceInfo")<> Неопределено Тогда
		СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.priceInfo.rightToConcludeContractPriceInfo.price);
	КонецЕсли;
	Если xdto_пакет.свойства().Получить("placementDate") <> Неопределено Тогда 
		СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.placementDate));
	Иначе
		СтруктураДанныхДляКонтракта.Вставить("Дата",ТекущаяДата());
	КонецЕсли;	
попытка	
	xdto_контрагент = Неопределено;
	
	Если xdto_пакет.Свойства().Получить("suppliersInfo")<> Неопределено Тогда 	
		Если xdto_пакет.suppliersInfo.Свойства().Получить("supplierInfo")<> Неопределено Тогда 
			 Если ТипЗнч(xdto_пакет.suppliersInfo.supplierInfo) = Тип("ОбъектXDTO") Тогда
							Если xdto_пакет.suppliersInfo.supplierInfo.Свойства().Получить("legalEntityRF")<> Неопределено Тогда 
								Если xdto_пакет.suppliersInfo.supplierInfo.legalEntityRF.Свойства().Получить("EGRULInfo")<> Неопределено Тогда  
									xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo.legalEntityRF.EGRULInfo;
								КонецЕсли; 
							КонецЕсли;  
						ИначеЕсли ТипЗнч(xdto_пакет.suppliersInfo.supplierInfo) = Тип("СписокXDTO") Тогда
							Если xdto_пакет.suppliersInfo.supplierInfo[0].Свойства().Получить("legalEntityRF")<> Неопределено Тогда 
								xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo[0].legalEntityRF.EGRULInfo;
							ИначеЕсли xdto_пакет.suppliersInfo.supplierInfo[0].Свойства().Получить("individualPersonRFIndEntr")<> Неопределено Тогда 
								xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo[0].individualPersonRFIndEntr.EGRIPInfo;
							КонецЕсли;	
	
				КонецЕсли;
						
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("suppliers")<> Неопределено Тогда  	
		Если xdto_пакет.suppliers.Свойства().Получить("supplier")<> Неопределено Тогда 
			Если ТипЗнч(xdto_пакет.suppliers.supplier) = Тип("ОбъектXDTO") Тогда 
				Если xdto_пакет.suppliers.supplier.Свойства().Получить("legalEntityRF")<> Неопределено Тогда 
					xdto_контрагент = xdto_пакет.suppliers.supplier.legalEntityRF;
				КонецЕсли;
			ИначеЕсли ТипЗнч(xdto_пакет.suppliers.supplier) = Тип("СписокXDTO") Тогда
				  Если xdto_пакет.suppliers.supplier[0].свойства().получить("legalEntityRF")<> Неопределено Тогда 
				  		xdto_контрагент = xdto_пакет.suppliers.supplier[0].legalEntityRF;
				 
						
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
	
	Если xdto_контрагент<> Неопределено Тогда
		
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("ИНН", xdto_контрагент.INN);
		РеквизитыКонтрагента.Вставить("КПП", ?(xdto_контрагент.Свойства().Получить("KPP") <> Неопределено,xdto_контрагент.KPP,""));

		
		
		Если xdto_контрагент.Свойства().Получить("fullName") <> Неопределено Тогда 
			РеквизитыКонтрагента.Вставить("Наименование", xdto_контрагент.fullName);
			РеквизитыКонтрагента.Вставить("НаименованиеПолное", xdto_контрагент.fullName);
		ИначеЕсли xdto_контрагент.Свойства().Получить("lastName") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("Наименование", xdto_контрагент.lastName +" "+xdto_контрагент.firstName + " " + xdto_контрагент.middleName);
			РеквизитыКонтрагента.Вставить("НаименованиеПолное", xdto_контрагент.lastName +" "+xdto_контрагент.firstName + " " + xdto_контрагент.middleName);
		КонецЕсли;
		
		СтруктураДанныхДляКонтракта.Вставить("Контрагент",Справочники.Контрагенты.СоздатьКонтрагента(РеквизитыКонтрагента));
	Иначе
		ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
		УровеньЖурналаРегистрации.Ошибка, , ,
		"Контрагент не определен ");	
	КонецЕсли;
Исключение
КонецПопытки;	
	Возврат СтруктураДанныхДляКонтракта;
	
	
КонецФункции

Процедура ГЗ_ВыполнитьОбработкуПротоколовПо44ФЗ() Экспорт
	ГЗ_44ФЗ_ЗагрузитьФайлыПротоколовZIPсFTP();
	
	ГЗ_44ФЗ_РаспаковатьФайлыПротоколов();
	
	ГЗ_44ФЗ_ОбработатьФайлыXMLПротоколов();
КонецПроцедуры

Процедура ГЗ_44ФЗ_ЗагрузитьФайлыПротоколовZIPсFTP() Экспорт 
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "free";
	Пароль = "free";
	ИмяКаталога = "/fcs_regions";///<регион>/*Notice*/daily";
	
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0"));
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30*Константы.GZ_КоличествоДнейЗагрузкиФайловXML.Получить()); //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти = FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				Если Найти(ПапкаИзКаталога.Имя, "protocols") > 0 Тогда
					Если День(ТекущаяДата()) = 1 Тогда
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/prevMonth/","*" , Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);	
					Иначе
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/currMonth/", "*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
					КонецЕсли;
					Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_44ФЗ_РаспаковатьФайлыПротоколов() Экспорт
	НайдФайлы = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить(), "*.zip", Истина);
	Для Каждого ФайлЗип Из НайдФайлы Цикл 
		
		Попытка
			ЧтениеЗипФалов = Новый ЧтениеZipФайла(ФайлЗип.ПолноеИмя);
			ЧтениеЗипФалов.ИзвлечьВсе(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить());	
			
		Исключение
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Получение файла завершилось с ошибкой. Имя файла: "+ФайлЗип.ПолноеИмя);
		КонецПопытки;
	КонецЦикла;
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить(), "*.zip");
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить(), "*.sig");
КонецПроцедуры

Процедура ГЗ_44ФЗ_ОбработатьФайлыXMLПротоколов() Экспорт
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить();//"D:\XML\contract\in\";
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Протоколы.Получить();//"D:\XML\contract\out\";
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 
		
		Если СтруктураПрочитанныхДанных.Свойства().Получить("fcsPlacementResult")<>Неопределено Тогда 
			
			СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоПротоколу(СтруктураПрочитанныхДанных.fcsPlacementResult);
			
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF3")<>Неопределено Тогда 
			Продолжить;  
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZK1")<>Неопределено Тогда 
			Продолжить;  
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZT2020FinalPart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEFInvalidation")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEFSingleApp")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK1")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK2")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK3")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZK2020FinalPart")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZK2020Final")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZK2")<>Неопределено Тогда 
			Продолжить;			
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolCancel")<>Неопределено Тогда  //Отмена протокола
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolDeviation")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEvasion")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU3")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOUSingleApp")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOUSinglePart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKSinglePart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolDeviation")<>Неопределено Тогда 
			Продолжить;		
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("pprf615ProtocolEF1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKSingleApp")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolCancel")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP1Extract")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epNoticeApplicationsAbsence")<>Неопределено Тогда 
			Продолжить;                                                                                                
		Иначе
			Сообщить("Нет описания файла" );
		КонецЕсли;  
		
		Если СтруктураРеквизитовДляДокумента <> Неопределено Тогда 
			СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
		
			Документы.ГЗ_Протокол44ФЗ.СоздатьДокументПротоколПо44ФЗ(СтруктураРеквизитовДляДокумента); 
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
		
	КонецЦикла;
	
КонецПроцедуры
 
Функция СформироватьСтруктуруОбязательныхРеквизитовПоПротоколу (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    foundationInfo.purchaseNumber - поиск извещения	
	
	НомерИзвещения = ?(xdto_пакет.Свойства().Получить("purchaseNumber")<>Неопределено,xdto_пакет.purchaseNumber,"");
	
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения);
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
			СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаПротоколовПо44ФЗ", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Номер извещения не определен!!!");
			
		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураДанныхДляКонтракта.Вставить("createDate",XMLЗначение(Тип("Дата"),xdto_пакет.createDate));	
	
	СтруктураДанныхДляКонтракта.Вставить("foundationProtocolNumber",xdto_пакет.foundationProtocolNumber);
	
	СтруктураДанныхДляКонтракта.Вставить("lotNumber",xdto_пакет.lotNumber);
	СтруктураДанныхДляКонтракта.Вставить("procedurelFailed",XMLЗначение(Тип("Булево"),xdto_пакет.procedurelFailed));
	СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.createDate));
	СтруктураДанныхДляКонтракта.Вставить("protocolNumber",?(xdto_пакет.Свойства().Получить("protocolNumber")<> Неопределено, xdto_пакет.protocolNumber, ""));
	СтруктураДанныхДляКонтракта.Вставить("foundationProtocolNumber", xdto_пакет.foundationProtocolNumber);
	
	
	Если xdto_пакет.Свойства().Получить("abandonedReason") <> Неопределено Тогда
		
		РеквизитыabandonedReason = Новый Структура;
		РеквизитыabandonedReason.Вставить("code", xdto_пакет.abandonedReason.code);
		РеквизитыabandonedReason.Вставить("objectName", ?(xdto_пакет.abandonedReason.Свойства().Получить("objectName")<> Неопределено,xdto_пакет.abandonedReason.objectName, ""));
		
		РеквизитыabandonedReason.Вставить("name", ?(xdto_пакет.abandonedReason.Свойства().Получить("name")<> Неопределено,xdto_пакет.abandonedReason.name, ""));
		Если xdto_пакет.abandonedReason.Свойства().Получить("type")<> Неопределено Тогда 
			Если xdto_пакет.abandonedReason.type = "OR" Тогда 
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OR);
			ИначеЕсли xdto_пакет.abandonedReason.type = "NR" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NR);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "NS" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NS);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "NV" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NV);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "O" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.O);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "OV" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OV);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "OV2" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OV2);
			Иначе
				
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураДанныхДляКонтракта.Вставить("abandonedReason",Справочники.ГЗ_ОснованиеПризнаниеПроцедурыНесостоявшейся.СоздатьОснованиеПризнанияПроцедуры(РеквизитыabandonedReason));
		
	КонецЕсли;	
	
	Если xdto_пакет.Свойства().Получить("result") <> Неопределено Тогда 	
		СтруктураДанныхДляКонтракта.Вставить("result",?(xdto_пакет.result = "CC", Истина, Ложь));
	КонецЕсли;	
	
	Если xdto_пакет.Свойства().Получить("applications")<> Неопределено Тогда 
		Если xdto_пакет.applications.Свойства().Получить("application")<> Неопределено Тогда
			
			ТабличнаяЧастьapplication = ВернутьСтруктуруТабличнойЧастиДокумента();
			
			Если ТипЗнч(xdto_пакет.applications.application) = Тип("ОбъектXDTO") Тогда 
				
				НоваяСтрокаТЧ = ТабличнаяЧастьapplication.Добавить();
				НоваяСтрокаТЧ.journalNumber = xdto_пакет.applications.application.journalNumber; 
				НоваяСтрокаТЧ.appRating = ?(xdto_пакет.applications.application.Свойства().Получить("appRating")<> Неопределено,xdto_пакет.applications.application.appRating, ""); 
				Если xdto_пакет.applications.application.Свойства().Получить("result")<> Неопределено Тогда 
					НоваяСтрокаТЧ.result = ?(xdto_пакет.applications.application.result="CC", Истина, Ложь);
				КонецЕсли;	
				НоваяСтрокаТЧ.price = ?(xdto_пакет.applications.application.Свойства().Получить("price")<> Неопределено,xdto_пакет.applications.application.price, 0);
				
			ИначеЕсли ТипЗнч(xdto_пакет.applications.application) = Тип("СписокXDTO") Тогда
				
				Для Каждого СтрокаПакетаXDTO Из xdto_пакет.applications.application Цикл
					НоваяСтрокаТЧ = ТабличнаяЧастьapplication.Добавить();
					НоваяСтрокаТЧ.journalNumber = СтрокаПакетаXDTO.journalNumber; 
					НоваяСтрокаТЧ.appRating = ?(СтрокаПакетаXDTO.Свойства().Получить("appRating")<> Неопределено,СтрокаПакетаXDTO.appRating, ""); 
					Если СтрокаПакетаXDTO.Свойства().Получить("result")<> Неопределено Тогда 
						НоваяСтрокаТЧ.result = ?(СтрокаПакетаXDTO.result="CC", Истина, Ложь);
					КонецЕсли;	
					НоваяСтрокаТЧ.price = ?(СтрокаПакетаXDTO.Свойства().Получить("price")<> Неопределено,СтрокаПакетаXDTO.price, 0);
					
				КонецЦикла;
			КонецЕсли;
			СтруктураДанныхДляКонтракта.Вставить("application",ТабличнаяЧастьapplication);  
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураДанныхДляКонтракта;

 КонецФункции
 
Функция ВернутьСтруктуруТабличнойЧастиДокумента() Экспорт 
	ТабличнаяЧастьИзвещения = Новый	 ТаблицаЗначений;
	ТабличнаяЧастьИзвещения.Колонки.Добавить("journalNumber", ,"journalNumber");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("appRating", ,"appRating");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("price", ,"price");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("result", ,"result");

	Возврат  ТабличнаяЧастьИзвещения;
КонецФункции

Процедура GZ_ВыполнитьАктивациюБотов() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры










































