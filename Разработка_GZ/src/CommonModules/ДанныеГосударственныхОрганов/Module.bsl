#Область ПрограммныйИнтерфейс

// Возвращаются реквизиты налоговой инспекции по коду.
//
// Параметры:
//  КодНалоговогоОргана  - Строка - код налогового органа.
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	РеквизитыНалоговогоОргана = РаботаСКонтрагентами.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыНалоговогоОргана, Вид);
	
	Возврат РеквизитыНалоговогоОргана;
	
КонецФункции

// Возвращается код региона (в соответствии с адресным классификатором) по коду налоговой инспекции.
//
// Параметры:
//	КодНалоговогоОргана - Строка - код налогового органа.
//
// Возвращаемое значение:
//	Строка - код региона по адресному классификатору -  см. РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ()
//
Функция КодРегионаПоКодуНалоговогоОргана(Знач КодНалоговогоОргана) Экспорт
	
	КодРегиона = "";
	
	Если СтрДлина(КодНалоговогоОргана) < 2 Тогда
		Возврат КодРегиона;	
	КонецЕсли;	
	
	КодРегиона = Лев(КодНалоговогоОргана, 2);
	
	// 99 - код г.Байконур и одновременно код инспекций по крупнейшим налогоплательщикам.
	// 9901 - код местной инспекции, все остальные - инспекции по крупнейшим налогоплательщикам - находятся в Москве
	Если КодРегиона = "99" И КодНалоговогоОргана <> "9901" Тогда
		КодРегиона = "77";
	КонецЕсли;	
		
	Возврат КодРегиона;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду
//
// Параметры:
//  КодОтделенияФСС  - Строка - Код отделения ФСС
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ФСС. 
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	РеквизитыФСС = РаботаСКонтрагентами.РеквизитыОтделенияФССПоКоду(КодОтделенияФСС);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыФСС, Вид);
	
	Возврат РеквизитыФСС;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду.
//
// Параметры:
//  КодОтделенияПФР  - Строка - код отделения ПФР
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ПФР. 
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	РеквизитыПФР = РаботаСКонтрагентами.РеквизитыОтделенияПФРПоКоду(КодОтделенияПФР);
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыПФР, Вид);
	
	Возврат РеквизитыПФР;
	
КонецФункции

// Возвращаются реквизиты налоговой инспекции по организации.
//
// Параметры:
//  Организация - Справочник.Организации - Организация, по которой получаем сведения.
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    - ФНС_Наименование - Строка - Наименование ФНС
//    - ФНС_Телефоны     - Строка - Телефон ФНС
//    - ФНС_Адрес        - Строка - Адрес ФНС
//
Функция РеквизитыНалоговогоОрганаПоОрганизации(Организация) Экспорт
	
	Сведения = Новый Структура("ФНС_Наименование, ФНС_Адрес, ФНС_Телефоны, ФНС_Контрагент, ФНС_СведенияОПолучателеКонверта");
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	КодНалоговогоОргана = КодГосударственногоОрганаОрганизации(
		Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	// Контакты налогового органа получаем из открытых данных в интернет.
	// В контактных данных ассоциированного с госорганом контрагента эта информация не сохраняется
	РеквизитыНалоговогоОргана = РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	
	Сведения.ФНС_Контрагент   = РеквизитыНалоговогоОргана.Ссылка;
	Сведения.ФНС_Наименование = РеквизитыНалоговогоОргана.Наименование;
	Сведения.ФНС_Телефоны     = РеквизитыНалоговогоОргана.Телефон;
	
	Если Не ПустаяСтрока(РеквизитыНалоговогоОргана.Адрес) Тогда
		ЧастиАдреса        = СтрРазделить(РеквизитыНалоговогоОргана.Адрес, ",", Ложь);
		Сведения.ФНС_Адрес = СтрСоединить(ЧастиАдреса, ", ");
		Сведения.ФНС_СведенияОПолучателеКонверта = СведенияОПолучателеКонверта(
			Сведения.ФНС_Наименование, РеквизитыНалоговогоОргана.Адрес);
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по организации.
//
// Параметры:
//  Организация - Справочник.Организации - Организация, по которой получаем сведения.
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    - ПФР_Наименование - Строка - Наименование ПФР
//    - ПФР_Телефоны     - Строка - Телефон ПФР
//    - ПФР_Адрес        - Строка - Адрес ПФР
//
Функция РеквизитыОтделенияПФРПоОрганизации(Организация) Экспорт
	
	Сведения = Новый Структура("ПФР_Наименование, ПФР_Адрес, ПФР_Телефоны, ПФР_Контрагент, ПФР_СведенияОПолучателеКонверта");
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	КодОтделенияПФР = КодГосударственногоОрганаОрганизации(
		Организация, Перечисления.ВидыГосударственныхОрганов.ОрганПФР);
	
	Если НЕ ЗначениеЗаполнено(КодОтделенияПФР) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	// Контакты отделения ПФР получаем из открытых данных в интернет.
	// В контактных данных ассоциированного с госорганом контрагента эта информация не сохраняется
	РеквизитыОтделенияПФР = РеквизитыОтделенияПФРПоКоду(КодОтделенияПФР);
	
	Сведения.ПФР_Контрагент   = РеквизитыОтделенияПФР.Ссылка;
	Сведения.ПФР_Наименование = РеквизитыОтделенияПФР.Наименование;
	Сведения.ПФР_Телефоны     = РеквизитыОтделенияПФР.Телефон;
	
	Если Не ПустаяСтрока(РеквизитыОтделенияПФР.Адрес) Тогда
		ЧастиАдреса        = СтрРазделить(РеквизитыОтделенияПФР.Адрес, ",", Ложь);
		Сведения.ПФР_Адрес = СтрСоединить(ЧастиАдреса, ", ");
		Сведения.ПФР_СведенияОПолучателеКонверта = СведенияОПолучателеКонверта(
			Сведения.ПФР_Наименование, РеквизитыОтделенияПФР.Адрес);
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по организации.
//
// Параметры:
//  Организация - Справочник.Организации - Организация, по которой получаем сведения.
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    - ФСС_Наименование - Строка - Наименование ФСС
//    - ФСС_Телефоны     - Строка - Телефон ФСС
//    - ФСС_Адрес        - Строка - Адрес ФСС
//
Функция РеквизитыОтделенияФССПоОрганизации(Организация) Экспорт
	
	Сведения = Новый Структура("ФСС_Наименование, ФСС_Адрес, ФСС_Телефоны, ФСС_Контрагент, ФСС_СведенияОПолучателеКонверта");
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	КодОтделенияФСС = КодГосударственногоОрганаОрганизации(
		Организация, Перечисления.ВидыГосударственныхОрганов.ОрганФСС);
	
	Если НЕ ЗначениеЗаполнено(КодОтделенияФСС) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	// Контакты налогового органа получаем из открытых данных в интернет.
	// В контактных данных ассоциированного с госорганом контрагента эта информация не сохраняется
	РеквизитыОтделенияФСС = РеквизитыОтделенияФССПоКоду(КодОтделенияФСС);
	
	Сведения.ФСС_Контрагент   = РеквизитыОтделенияФСС.Ссылка;
	Сведения.ФСС_Наименование = РеквизитыОтделенияФСС.Наименование;
	Сведения.ФСС_Телефоны     = РеквизитыОтделенияФСС.Телефон;
	
	Если Не ПустаяСтрока(РеквизитыОтделенияФСС.Адрес) Тогда
		ЧастиАдреса        = СтрРазделить(РеквизитыОтделенияФСС.Адрес, ",", Ложь);
		Сведения.ФСС_Адрес = СтрСоединить(ЧастиАдреса, ", ");
		Сведения.ФСС_СведенияОПолучателеКонверта = СведенияОПолучателеКонверта(
			Сведения.ФСС_Наименование, РеквизитыОтделенияФСС.Адрес);
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Возвращает сведения о государственном органе из справочника Контрагенты
//
// Параметры:
//  ВидГосударственногоОргана - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
//  КодГосударственногоОргана - Строка - код государственного органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции.
//
Функция ГосударственныйОрган(Знач ВидГосударственногоОргана, Знач КодГосударственногоОргана) Экспорт
	
	Код = КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана);
	
	ГосударственныйОрган = НовыеРеквизитыГосударственногоОргана();
	ГосударственныйОрган.Вид = ВидГосударственногоОргана;
	ГосударственныйОрган.Код = Код;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат ГосударственныйОрган;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", ВидГосударственногоОргана);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное КАК ПолноеНаименование,
	|	Контрагенты.Наименование,
	|	Контрагенты.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.НомерСчета, """") КАК РасчетныйСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.ТекстКорреспондента, """") КАК ПолучательПлатежа,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет, """") КАК КоррСчет
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган, Выборка);
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган.ПлатежныеРеквизиты, Выборка);
		
		Если НЕ ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
			ПолучательПлатежа = УчетДенежныхСредствБП.НаименованиеПлательщикаПолучателяПоУмолчанию(
					Выборка.Ссылка, Выборка.БанковскийСчет, Истина);
			ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа = ПолучательПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГосударственныйОрган;
	
КонецФункции

// Проверяет, что реквизиты в справочнике Контрагенты совпадают с данными сервиса
//
// Параметры:
//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//   Булево - признак, что платежные реквизиты в справочнике "Контрагенты" актуальны
//
Функция ПлатежныеРеквизитыАктуальны(Реквизиты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыИнформационнойБазы = ДанныеГосударственныхОрганов.ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
	
	Если Реквизиты.ИНН <> РеквизитыИнформационнойБазы.ИНН
		ИЛИ Реквизиты.КПП <> РеквизитыИнформационнойБазы.КПП
		ИЛИ Реквизиты.ПолноеНаименование <> РеквизитыИнформационнойБазы.ПолноеНаименование
		ИЛИ Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.РасчетныйСчет
		ИЛИ Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.ПолучательПлатежа
		ИЛИ Реквизиты.ПлатежныеРеквизиты.БИК <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.БИК
		ИЛИ Реквизиты.ПлатежныеРеквизиты.КоррСчет <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.КоррСчет Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Обновляет платежные реквизиты государственного органа в справочнике "Контрагенты".
// В том случае, если в справочнике "Контрагенты" нет элемента, соответствующего гос.органу, он будет создан.
//
// Параметры:
//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//
Процедура ОбновитьДанныеГосударственногоОргана(Реквизиты) Экспорт
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		
		Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		//Определим родителя для государственного органа
		НаименованиеРодителя = НСтр("ru='Государственные органы'");
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Вид", Реквизиты.Вид);
		Запрос.Параметры.Вставить("Наименование", НаименованиеРодителя);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Родитель КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ВидГосударственногоОргана = &Вид
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ИСТИНА
		|	И Контрагенты.Наименование = &Наименование
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Родитель = Выборка.Ссылка;
		Иначе
			НовыйРодитель = Справочники.Контрагенты.СоздатьГруппу();
			НовыйРодитель.Наименование = НаименованиеРодителя;
			НовыйРодитель.Записать();
			Родитель = НовыйРодитель.Ссылка;
		КонецЕсли;
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Объект.Родитель = Родитель;
		Объект.ГосударственныйОрган = Истина;
		Объект.ВидГосударственногоОргана = Реквизиты.Вид;
		Объект.КодГосударственногоОргана = КодГосударственногоОрганаДляЗапросаРеквизитов(Реквизиты.Вид, Реквизиты.Код);
		Объект.Наименование = Реквизиты.Наименование;
	КонецЕсли;
	
	Объект.ИНН = Реквизиты.ИНН;
	Объект.КПП = Реквизиты.КПП;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	
	//Проверим, что данные банковского счета актуальны (совпадают БИК, коррсчет и расчетный счет)
	//Если данные актуальны, обновляем счет.
	//В противном случае создаем новый расчетный счет, предварительно убедившись, что такого расчетного счета у контрагента уже нет.
	ДанныеБанковскогоСчетаАктуальны = Ложь;
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		РеквизитыРасчетногоСчета = РеквизитыБанковскогоСчета(Объект.ОсновнойБанковскийСчет);
		Если РеквизитыРасчетногоСчета.РасчетныйСчет = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет
			И РеквизитыРасчетногоСчета.БИК = Реквизиты.ПлатежныеРеквизиты.БИК
			И РеквизитыРасчетногоСчета.КоррСчет = Реквизиты.ПлатежныеРеквизиты.КоррСчет Тогда
			ДанныеБанковскогоСчетаАктуальны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет)
		И ДанныеБанковскогоСчетаАктуальны Тогда
		БанковскийСчет = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	Иначе
		
		БанковскийСчетКонтрагента = БанковскийСчетПоРеквизитам(
			Объект.Ссылка,
			Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет,
			Реквизиты.ПлатежныеРеквизиты.БИК,
			Реквизиты.ПлатежныеРеквизиты.КоррСчет);
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчет = БанковскийСчетКонтрагента.ПолучитьОбъект();
			Объект.ОсновнойБанковскийСчет = БанковскийСчет.Ссылка;
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			БанковскийСчет.ВидСчета = "Расчетный";
			БанковскийСчет.ВсегдаУказыватьКПП = Истина;
			НоваяСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
			БанковскийСчет.УстановитьСсылкуНового(НоваяСсылка);
			
			Банки = Новый Массив;
			Банки.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору(
				Реквизиты.ПлатежныеРеквизиты.БИК, Реквизиты.ПлатежныеРеквизиты.КоррСчет));
			РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(Банки);
			Банк = Справочники.Банки.СсылкаНаБанк(
				Реквизиты.ПлатежныеРеквизиты.БИК, , Реквизиты.ПлатежныеРеквизиты.КоррСчет);
			
			НаименованиеБанка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				Реквизиты.ПлатежныеРеквизиты, "НаименованиеБанка");
			
			Если ЗначениеЗаполнено(Банк) Тогда
				ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование");
				Если ЗначениеЗаполнено(НаименованиеБанка)
					И СтрНайти(НаименованиеБанка, "//") > 0
					И СтрНайти(ДанныеБанка.Наименование, "//") = 0 Тогда
					ДанныеБанка.Наименование = НаименованиеБанка;
				КонецЕсли;
			Иначе
				ДанныеБанка = Новый Структура("Наименование", НаименованиеБанка);
			КонецЕсли;
			
			БанковскийСчет.Банк = Банк;
			БанковскийСчет.НомерСчета = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет;
			Объект.ОсновнойБанковскийСчет = БанковскийСчет.ПолучитьСсылкуНового();
			НаименованиеБанка = ?(ЗначениеЗаполнено(ДанныеБанка.Наименование), ДанныеБанка.Наименование, "");
			БанковскийСчет.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(
				БанковскийСчет, НаименованиеБанка);
		КонецЕсли;
	КонецЕсли;
	
	БанковскийСчет.ТекстКорреспондента = Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа;
	
	НачатьТранзакцию();
	Попытка
		Объект.Записать();
		БанковскийСчет.Владелец = Объект.Ссылка;
		БанковскийСчет.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка сохранения государственного органа %1:'"), Реквизиты.Код)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка записи объекта", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Контрагенты, , ОписаниеОшибки);
	КонецПопытки;
	
	Реквизиты.Ссылка = Объект.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.БанковскийСчет = БанковскийСчет.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.Банк           = БанковскийСчет.Банк;
	
КонецПроцедуры

// Проверяет, что платежные реквизиты, переданные в параметре, соответствуют платежным реквизитам государственного органа
//
// Параметры:
//  Параметры - Структура - структура должна содержать параметры Контрагент, ПлатежныеРеквизиты, АдресРезультатаПроверкиПлатежныхРеквизитов.
//  АдресХранилища - Строка - адрес хранилища, в который будет помещен результат проверки.
//
// Возвращаемое значение:
//
Процедура ПроверитьПлатежныеРеквизитыКонтрагентаВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура();
	
	Если Параметры.Свойство("Контрагент") Тогда
		
		Результат = ПроверитьПлатежныеРеквизитыКонтрагента(Параметры.Контрагент, Параметры.ПлатежныеРеквизиты);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Проверяет, что платежные реквизиты контрагента-государственного органа, соответствуют текущим данным
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента-государственный орган, для которого выполняется проверка реквизитов.
//  ПлатежныеРеквизиты - Структура - Структура текущих платежных реквизитов контрагента.
//
// Возвращаемое значение:
//     Структура - Результат проверки.
Функция ПроверитьПлатежныеРеквизитыКонтрагента(Контрагент, ПлатежныеРеквизиты) Экспорт
	
	Результат = Новый Структура;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
		
	Если РеквизитыКонтрагента.ГосударственныйОрган
		И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
		И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
		И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
		
		Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
		Код = РеквизитыКонтрагента.КодГосударственногоОргана;
		Реквизиты = Неопределено;
		Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			
			Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
				
				Если ЗначениеЗаполнено(Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет) Тогда
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Истина);
					
					//Сравним полученные реквизиты и текущие значения
					СписокРасхождений = "";
					Если Реквизиты.ИНН <> ПлатежныеРеквизиты.ИНН Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='ИНН'");
					КонецЕсли;
					
					Если Реквизиты.КПП <> ПлатежныеРеквизиты.КПП Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='КПП'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> ПлатежныеРеквизиты.ПолучательПлатежа Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Получатель платежа'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> ПлатежныеРеквизиты.РасчетныйСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Расчетный счет'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.БИК <> ПлатежныеРеквизиты.БИК Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='БИК'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.КоррСчет <> ПлатежныеРеквизиты.КоррСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru = 'Корр.счет'");
					КонецЕсли;
					
					Если СписокРасхождений = "" Тогда
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Истина);
						Результат.Вставить("РезультатПроверки", НСтр("ru='Платежные реквизиты 
																		|указаны верно'"));
					Иначе
						ВДокументеНовыеРеквизиты2021 = БанковскиеПравила.ЭтоБИКТОФК(ПлатежныеРеквизиты.БИК)
							И БанковскиеПравила.ЭтоКазначейскийСчет(ПлатежныеРеквизиты.РасчетныйСчет)
							И БанковскиеПравила.ЭтоЕдиныйКазначейскийСчет(ПлатежныеРеквизиты.КоррСчет);
						
						ДатаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
							ПлатежныеРеквизиты, "ДатаДокумента", ТекущаяДатаСеанса());
						ТолькоНовые = ПлатежиВБюджетКлиентСервер.ПрекращеноДействиеПереходногоПериодаУплатыНаКазначейскиеСчета(
							ДатаДокумента);
						
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Ложь);
						Если ВДокументеНовыеРеквизиты2021 Или ТолькоНовые Тогда
							Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Возможно, платежные реквизиты указаны неверно.
									|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
						Иначе
							Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'С 01.01.21 рекомендуются новые платежные реквизиты для уплаты налога.
									|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Ложь);
					Результат.Вставить("РезультатПроверки", НСтр("ru='Сведения о платежных реквизитах не найдены'"));
					
				КонецЕсли;
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
				Результат.Вставить("ТребуетсяАутентификация", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к интернет-поддержке пользователей.'"));
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
				Результат.Вставить("Сервис1СКонтрагентНеПодключен", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к сервису ""1С:Контрагент"".'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Получает эталонные платежные реквизиты контрагента, если он является государственным органом
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагент - ссылка на контрагента, для которого требуется определить платежные реквизиты, должен иметь тип "Государственный орган"
//
// Возвращаемое значение:
//     Структура или Неопределено   - реквизиты государственного органа, либо Неопределено, если определить сведения не удается
Функция ПолучитьПлатежныеРеквизитыКонтрагента(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
	
	Если РеквизитыКонтрагента.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
			Код = РеквизитыКонтрагента.КодГосударственногоОргана;
			Реквизиты = Неопределено;
			Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты) Тогда
				Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					Возврат Реквизиты;
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает контрагента-получателя налога
//
// Параметры:
//  Налог       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация - СправочникСсылка.Организации
//  Период      - Дата
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
Функция АдминистраторНалогаОрганизации(Налог, Организация, Период = Неопределено) Экспорт
	Перем КодГосударственногоОргана;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ГосударственныйОрган = ВидИКодГосударственногоОрганаПоНалогу(Налог, Организация, Период);
	
	Если ЗначениеЗаполнено(ГосударственныйОрган.Код) Тогда
		Контрагент = ГосударственныйОрган(ГосударственныйОрган.Вид, ГосударственныйОрган.Код).Ссылка;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Возвращает код и вид государственного органа, которому нужно уплачивать налог
//
// Параметры:
//  Налог		 - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация	 - СправочникСсылка.Организации
//  Период		 - Дата
// 
// Возвращаемое значение:
//   - Структура
//
Функция ВидИКодГосударственногоОрганаПоНалогу(Налог, Организация, Период = Неопределено) Экспорт
	
	ВидИКод = Новый Структура();
	ВидИКод.Вставить("Вид", Справочники.ВидыНалоговИПлатежейВБюджет.ВидГосударственногоОргана(Налог, Период));
	ВидИКод.Вставить("Код", КодГосударственногоОрганаОрганизации(Организация, ВидИКод.Вид));
	Возврат ВидИКод;
	
КонецФункции

// Возвращает текст гиперссылки "Платежные реквизиты" для отображения на форме
//
// Параметры:
//  ГосударственныйОрган - Структура или Неопределено - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//     Строка - текстовое описание гиперссылки "Платежные реквизиты" для отображения на форме
Функция ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	Если ЗначениеЗаполнено(ГосударственныйОрган)
		И ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
		Возврат ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
	Иначе
		Возврат НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
КонецФункции

// Определяет код государственного органа, администрирующего деятельность организации
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации, СправочникОбъект.Организации - администрируемая организация
//  ВидГосударственногоОргана	 - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
// 
// Возвращаемое значение:
//  Строка - значащая часть кода государственного органа, заданного в информационной базе
//
Функция КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана) Экспорт
	
	Код = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.Код");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаПФР");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодПодчиненностиФСС");
		КонецЕсли;
	Иначе
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = Организация.РегистрацияВНалоговомОргане.Код;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = Организация.КодОрганаПФР;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = Организация.КодПодчиненностиФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		Возврат СокрЛП(Код);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РеквизитыБанковскогоСчета(БанковскийСчет) Экспорт
	
	Реквизиты = Новый Структура("ПолучательПлатежа, РасчетныйСчет, КоррСчет, БИК");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	БанковскиеСчета.ТекстКорреспондента КАК ПолучательПлатежа
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &РасчетныйСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Реквизиты.КоррСчет = СокрЛП(Реквизиты.КоррСчет);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция БанковскийСчетПоРеквизитам(Контрагент, РасчетныйСчет, БИК, КоррСчет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка()
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", РасчетныйСчет);
	Запрос.Параметры.Вставить("Владелец", Контрагент);
	Запрос.Параметры.Вставить("БИК", БИК);
	Запрос.Параметры.Вставить("КоррСчет", КоррСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &РасчетныйСчет
	|	И Банки.Код = &БИК
	|	И Банки.КоррСчет = &КоррСчет
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область ОписанияРеквизитов

Процедура ДополнитьРеквизитыГосударственногоОрганаДаннымиИБ(РеквизитыГосударственногоОргана, Вид)
	
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыГосударственногоОргана.Код);
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка", ГосударственныйОрганИБ.Ссылка); // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид", Вид);                              // ПеречислениеСсылка.ВидыГосударственныхОрганов
	
	ПлатежныеРеквизиты = РеквизитыГосударственногоОргана.ПлатежныеРеквизиты;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет", ГосударственныйОрганИБ.БанковскийСчет); // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк",           ГосударственныйОрганИБ.Банк);           // СправочникСсылка.Банки
	
КонецПроцедуры

Функция НовыеРеквизитыГосударственногоОргана()
	
	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка");             // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид");                // ПеречислениеСсылка.ВидыГосударственныхОрганов
	РеквизитыГосударственногоОргана.Вставить("Код");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("ИНН");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("КПП");                // Строка, 9
	РеквизитыГосударственногоОргана.Вставить("Наименование");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование"); // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Адрес");              // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Телефон");            // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");   // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты"); // Структура из НовыеПлатежныеРеквизиты
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганИП"); // Структура из НовыеРегистрирующийОрган
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганЮЛ"); // Структура из НовыеРегистрирующийОрган
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	РеквизитыГосударственногоОргана.РегистрирующийОрганИП = НовыеРегистрирующийОрган();
	РеквизитыГосударственногоОргана.РегистрирующийОрганЮЛ = НовыеРегистрирующийОрган();
	
	// Служебный реквизит
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");     // Строка, 0
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет");     // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк");               // СправочникСсылка.Банки
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");  // Строка
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");      // Строка, 20
	ПлатежныеРеквизиты.Вставить("КоррСчет");           // Строка
	ПлатежныеРеквизиты.Вставить("БИК");                // Строка
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

Функция НовыеРегистрирующийОрган()
	
	РегистрирующийОрган = Новый Структура;
	
	РегистрирующийОрган.Вставить("Код");          // Строка
	РегистрирующийОрган.Вставить("Наименование"); // Строка
	РегистрирующийОрган.Вставить("Адрес");        // Строка
	РегистрирующийОрган.Вставить("Телефон");      // Строка
	РегистрирующийОрган.Вставить("Информация");   // Строка
	
	Возврат РегистрирующийОрган;
	
КонецФункции

#КонецОбласти

#Область ПечатьКонвертов

Функция СведенияОПолучателеКонверта(ПредставлениеПолучателя, Адрес9Запятых)
	
	СведенияОПолучателе = Справочники.Контрагенты.НовыйСведенияОПолучателеКонверта();
	СведенияОПолучателе.Представление = ПредставлениеПолучателя;
	
	Если ЗначениеЗаполнено(Адрес9Запятых) Тогда
		ЧастиАдреса = СтрРазделить(Адрес9Запятых, ",");
		Если ЧастиАдреса.Количество() = 10 Тогда
			ЗаполнитьРеквизитыАдресаИзАдрес9Запятых(СведенияОПолучателе, ЧастиАдреса);
		Иначе
			ЗаполнитьРеквизитыАдресаИзПредставленияАдреса(СведенияОПолучателе, ЧастиАдреса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОПолучателе;
	
КонецФункции

Функция ЗаполнитьРеквизитыАдресаИзАдрес9Запятых(СведенияОПолучателе, ЧастиАдреса)
	
	// Для представления адреса для конверта используем следующий вывод:
	//  Улица, Дом, Корпус, Квартира, Город, Район, Регион, Страна
	// Подобный же способ вывода адреса используется в Справочники.Контрагенты.ПредставлениеПочтовогоАдреса
	
	СокращенияАдреса = СокращенияАдреса();
	
	ЧастиАдресаБезИндекса = Новый Массив;
	
	Если ЗначениеЗаполнено(ЧастиАдреса[6]) Тогда
		Улица = ПеренестиСокращениеВНачало(СокрЛП(ЧастиАдреса[6]), СокращенияАдреса);
		ЧастиАдресаБезИндекса.Добавить(Улица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧастиАдреса[7]) Тогда
		Дом = СокрЛП(ЧастиАдреса[7]);
		// В адресе могут встречатся разные сочетания: дом 1, д.1, д 1 и т.д.
		// Если в поле для дома уже есть какое-то сокращение от дома (начинается на д),
		// то дополнительно дом в начало добавлять не нужно.
		Если Не СтрНачинаетсяС(НРег(Дом), "д") Тогда
			Дом = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='дом %1'"), Дом);
		КонецЕсли;
		ЧастиАдресаБезИндекса.Добавить(Дом);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧастиАдреса[8]) Тогда
		Корпус = СокрЛП(ЧастиАдреса[8]);
		Если Не СтрНачинаетсяС(НРег(Корпус), "к") Тогда
			Корпус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='корпус %1'"), Корпус);
		КонецЕсли;
		ЧастиАдресаБезИндекса.Добавить(Корпус);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧастиАдреса[9]) Тогда
		Квартира = СокрЛП(ЧастиАдреса[9]);
		Если Не СтрНачинаетсяС(НРег(Квартира), "к") Тогда
			Корпус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='кв. %1'"), Квартира);
		КонецЕсли;
		ЧастиАдресаБезИндекса.Добавить(Квартира);
	КонецЕсли;
	
	// Элементы с индексом от 5 до 2 (населенный пункт, город, район, регион) выводим в обратном порядке.
	ИндексЧастиАдреса = 5;
	Пока ИндексЧастиАдреса >= 2 Цикл
		ЧастьАдреса = ПеренестиСокращениеВНачало(СокрЛП(ЧастиАдреса[ИндексЧастиАдреса]), СокращенияАдреса);
		Если ЗначениеЗаполнено(ЧастьАдреса) Тогда
			ЧастиАдресаБезИндекса.Добавить(ЧастьАдреса);
		КонецЕсли;
		ИндексЧастиАдреса = ИндексЧастиАдреса - 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЧастиАдреса[0]) Тогда
		КодСтраны = СокрЛП(ЧастиАдреса[0]);
		ДанныеСтраныМира = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(КодСтраны);
		Если ЗначениеЗаполнено(ДанныеСтраныМира) Тогда
			ЧастиАдресаБезИндекса.Добавить(ДанныеСтраныМира.Наименование);
		КонецЕсли;
	Иначе
		ЧастиАдресаБезИндекса.Добавить(НСтр("ru='Россия'"));
	КонецЕсли;
	
	СведенияОПолучателе.Индекс = ЧастиАдреса[1];
	СведенияОПолучателе.Адрес = СтрСоединить(ЧастиАдресаБезИндекса, ", ");
	
КонецФункции

Функция ЗаполнитьРеквизитыАдресаИзПредставленияАдреса(СведенияОПолучателе, ЧастиАдреса)
	
	Индекс = "";
	ЧастиАдресаБезИндекса = Новый Массив;
	
	Для Каждого ЧастьАдреса Из ЧастиАдреса Цикл
		ЧастьАдресаБезПробелов = СокрЛП(ЧастьАдреса);
		Если Индекс = ""
			И СтрДлина(ЧастьАдресаБезПробелов) = 6
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьАдресаБезПробелов) Тогда
			Индекс = ЧастьАдресаБезПробелов;
		Иначе
			ЧастиАдресаБезИндекса.Добавить(ЧастьАдресаБезПробелов);
		КонецЕсли;
	КонецЦикла;
	
	СведенияОПолучателе.Индекс = Индекс;
	СведенияОПолучателе.Адрес = СтрСоединить(ЧастиАдресаБезИндекса, ", ");
	
КонецФункции

Функция ПеренестиСокращениеВНачало(ЧастьАдреса, СокращенияАдреса)
	
	СловаЧастиАдреса = СтрРазделить(ЧастьАдреса, " ", Ложь);
	Если СловаЧастиАдреса.Количество() > 1 Тогда
		ИндексПоследнегоЭлемента = СловаЧастиАдреса.Количество() - 1;
		СокращениеЧастиАдреса = СокращенияАдреса.Получить(СловаЧастиАдреса[ИндексПоследнегоЭлемента]);
		Если СокращениеЧастиАдреса <> Неопределено Тогда
			// Удаляем последнее слово в части адреса, и добавляем сокращение самым первым элементом.
			СловаЧастиАдреса.Удалить(ИндексПоследнегоЭлемента);
			СловаЧастиАдреса.Вставить(0, СокращениеЧастиАдреса);
		КонецЕсли;
		ЧастьАдресаССокращением = СтрСоединить(СловаЧастиАдреса, " ");
	Иначе
		ЧастьАдресаССокращением = ЧастьАдреса;
	КонецЕсли;
	
	Возврат ЧастьАдресаССокращением;
	
КонецФункции

Функция СокращенияАдреса()
	
	СокращенияАдреса = Новый Соответствие;
	СокращенияАдреса.Вставить("респ", "респ.");
	СокращенияАдреса.Вставить("с", "с.");
	СокращенияАдреса.Вставить("ул", "ул.");
	СокращенияАдреса.Вставить("пр-кт", "пр-кт");
	СокращенияАдреса.Вставить("наб", "наб.");
	СокращенияАдреса.Вставить("г", "г.");
	СокращенияАдреса.Вставить("п", "п.");
	СокращенияАдреса.Вставить("д", "д.");
	Возврат СокращенияАдреса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Реквизиты государственных органов могут определяться частью кода государственного органа
//
Функция КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Возврат Лев(КодГосударственногоОргана, 3);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	Иначе
		Возврат КодГосударственногоОргана;
	КонецЕсли;
	
КонецФункции

Функция ГосударственныйОрганИнформационнойБазы(Вид, Код);
	
	ГосударственныйОрганИнформационнойБазы = Новый Структура();
	ГосударственныйОрганИнформационнойБазы.Вставить("Ссылка", Справочники.Контрагенты.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("Банк", Справочники.Банки.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", Вид);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрганИнформационнойБазы, Выборка);
	КонецЕсли;
	
	Возврат ГосударственныйОрганИнформационнойБазы;
	
КонецФункции

#КонецОбласти