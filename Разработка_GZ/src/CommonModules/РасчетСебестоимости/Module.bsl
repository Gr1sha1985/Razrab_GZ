#Область ПрограммныйИнтерфейс

// Основной алгоритм расчета себестоимости.
//
// Параметры:
//  Период		 - Дата - Дата из месяца, за который выполняется расчет.
//  Организация	 - СправочникСсылка.Организации - организация, по которой выполняется расчет.
//  Ссылка		 - ДокументСсылка.РегламентнаяОперация - регламентная операция, в ходе которой выполняется расчет,
//                 используется для записи в журнал регистрации.
//  РегламентнаяОперация - ПеречислениеСсылка.ВидыРегламентныхОпераций 
//               - определяет объем выполняемых действий
// 
// Возвращаемое значение:
//  Неопределено - данных для расчета нет.
//  Структура - результат расчета:
//    * либо таблицы значений, соответствующие регистрам, в которые нужно записать результат
//    * либо свойство Ошибки (и тогда в регистры ничего не надо писать).
//      Ошибки - это структура с детальной информацией об ошибках.
//
Функция РассчитатьСебестоимость(Период, Организация, Ссылка, РегламентнаяОперация) Экспорт
	
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		Режим                             = "РасходыНаПроизводство";
		ОценитьЗапасы                     = Истина;
		РаспределитьРасходыНаПроизводство = Истина;
		СписатьРасходыНаПродажу           = Ложь;
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		Режим                             = "РасходыНаПродажу";
		ОценитьЗапасы                     = Ложь;
		РаспределитьРасходыНаПроизводство = Ложь;
		СписатьРасходыНаПродажу           = Истина;
	Иначе
		Режим                             = "Запасы";
		ОценитьЗапасы                     = Истина;
		РаспределитьРасходыНаПроизводство = Ложь;
		СписатьРасходыНаПродажу           = Ложь;
	КонецЕсли;
	
	// Как правило, состав наборов сумм незначительно влияет на время расчета и потребную память,
	// поэтому для простоты кода используются все наборы.
	// В частности, это позволяет в некоторых случаях использовать статические тексты запросов.
	ОписаниеСумм = ОписаниеКоллекцииСумм();
	
	ВариантыСтруктурыЗатрат = СтруктураЗатрат.НовыйВариантыСтруктурыЗатрат();
	Если РаспределитьРасходыНаПроизводство Тогда
		СтруктураЗатрат.ДобавитьСтандартныйВариантСтруктурыЗатрат(ВариантыСтруктурыЗатрат, ОписаниеСумм);
	КонецЕсли;
	ЭлементыЗатрат.ДобавитьВариантСтруктурыЗатрат(ВариантыСтруктурыЗатрат, Период, Организация, ОценитьЗапасы, ОписаниеСумм);
	СтруктураЗатрат.ДополнитьОписаниеКоллекцииСумм(ОписаниеСумм, ВариантыСтруктурыЗатрат);
	
	ЗарегистрироватьЭтап("Начало расчета", Ссылка);
	
	// ПОДГОТОВКА
	
	Протокол = НовыйПротокол(ОписаниеСумм, ВариантыСтруктурыЗатрат);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьСчетаЗатрат(МенеджерВременныхТаблиц, Период, Организация, Режим);
	
	// ИНТЕРПРЕТАЦИЯ ПЕРВИЧНЫХ ДОКУМЕНТОВ
	
	// НачальноеСальдо
	СоздатьНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация);
	СоздатьСтатьиКалькуляцииНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация, ВариантыСтруктурыЗатрат);
	
	// Особые виды движений: ОборотыФикс, ПредварительныеПроводкиВыпуск, ФиксированнаяСтоимость
	СоздатьОборотыФикс(МенеджерВременныхТаблиц, Период, Организация);
	СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация);
	СоздатьФиксированнаяСтоимость(МенеджерВременныхТаблиц, Период, Организация);
	
	// Выбытия (использует ОборотыФикс, ПредварительныеПроводкиВыпуск, ФиксированнаяСтоимость)
	СоздатьВыбытия(МенеджерВременныхТаблиц, Период, Организация);
	
	// Поступления (использует ОборотыФикс, Выбытия, ПредварительныеПроводкиВыпуск)
	СоздатьПоступления(МенеджерВременныхТаблиц, Период, Организация);
	
	// НезавершенноеПроизводство
	СоздатьНезавершенноеПроизводство(МенеджерВременныхТаблиц, Период, Организация, Не РаспределитьРасходыНаПроизводство);
	
	ЭлементыЗатрат.СоздатьСтруктуруСтоимостиЗапасов(МенеджерВременныхТаблиц, Период, Организация, ВариантыСтруктурыЗатрат);
		
	// Создаем таблицу КлючиВершин, которая позволяет упростить дальнейшую работу с данными - 
	// манипулировать не аналитикой, а номерами вершин
	// Таблица может быть дополнена по результатам распределения расходов
	Если Не СоздатьКлючиВершин(МенеджерВременныхТаблиц) Тогда
		// Никаких данных для обработки не выявлено, делать нечего
		Возврат Неопределено;
	КонецЕсли;
	
	// Далее удобнее соединяться по идентификаторам, а не свойствам ключей
	ДополнитьВыбытияИдентификаторамиВершин(МенеджерВременныхТаблиц);
	
	ЗарегистрироватьЭтап("Получены данные первичных документов", Ссылка);
	
	// РАСПРЕДЕЛЕНИЕ РАСХОДОВ
	
	РазрезыРаспределения = РаспределениеРасходов.РазрезыРаспределения(МенеджерВременныхТаблиц);
	
	ПравилаРаспределения = ПравилаРаспределенияРасходов.НовыеПравилаРаспределения();
	Если РегламентнаяОперация <> Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда
		ПравилаРаспределенияРасходов.Заполнить(
			ПравилаРаспределения,
			РазрезыРаспределения,
			Период,
			Организация,
			РегламентнаяОперация);
	КонецЕсли;
	
	Протокол.ПравилаРаспределения = ПравилаРаспределения;
	
	// Добавляет:
	// Расходы
	// РаспределениеНаСубконто
	// РаспределениеНаРасходы
	// ОбособленныйНалоговыйУчет
	// Обновляет:
	// КлючиВершин
	// Использует:
	// Поступления
	// все таблицы, созданные в СоздатьСчетаЗатрат()
	РаспределениеРасходов.СоздатьСхемуРаспределения(
		МенеджерВременныхТаблиц,
		ПравилаРаспределения,
		РазрезыРаспределения,
		Период,
		Организация);
	
	// СодержаниеПроводокРаспределенияРасходов
	// ПравилаРаспределенияРасходовВыпуск
	// МетодыРаспределенияРасходов
	ПравилаРаспределенияРасходов.СоздатьКлассификаторыПравилРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения);
		
	// ОЦЕНКА ЗАТРАТ
	
	// Для того, чтобы оценить затраты, представим их движение в виде графа.
	//
	// Граф состоит из ребер и вершин.
	//
	// Вершины - это состояния _затрат_, например, "20 счет по конкретному подразделению, НГ и статье затрат",
	// или "41 счет, конкретное наименование товара, конкретный склад, конкретная партия"
	// Важно: объекты учета, не являющиеся затратами, не входят в число вершин. 
	// Например, не будет вершины, соответствующей счету 90.02.
	//
	// Сначала граф заполняем следующими данными
	// - суммовая оценка вершины - это стоимость всех внешних поступлений,
	// - вес вершины - это вес всех движений, которые следует оценить (как внутри учета затрат так и "наружу"). 
	// По окончании работы процедуры
	// - суммовая оценка вершины - это стоимость, которая приходится на внешнее выбытие и конечный остаток
	// - вес вершины - это сумма количеств внешнего выбытия и конечного остатка.
	// Таким образом, вес и суммы вершины позволяют дать суммовую оценку проводкам по выбытию затрат.
	// Следствие: в каждом состоянии цена единицы остатка и внешнего выбытия в любом направлении будет одинаковой.
	//
	// Ребра - это движение затрат внутри учета затрат. Например - выпуск продукции или перемещение товаров, но не реализация услуг.
	// В начале работы процедуры 
	// - суммовой оценки не имеют
	// - вес вершины - это количественная характеристика движения
	// По окончании работы процедуры
	// - назначается суммовая оценка ребер
	// - вес не меняется
	//
	// Движения по распределению расходов - это также ребра.
	// Для них вес - это коэффициент распределения.
	//
	// Алгоритм оценки основан на допущении: игнорируются, разрушаются замкнутые маршруты в графе - "циклы", контуры
	// (далее используем термин "Контур", чтобы не путаться с ключевым словом языка Цикл).
	//
	// Отсутствие контуров позволяет представить движения в графе в виде одного или нескольких деревьев - 
	// _связных_ _ацикличных_ подграфов.
	// Здесь:
	// - связность означает наличие путей между любой парой вершин,
	// - ацикличность - отсутствие контуров и, как следствие, что между парами вершинами имеется только по одному пути.
	//
	// Следствие: в дереве легко последовательно рассчитать стоимость каждого ребра 
	// - следует найти корень и пройти от нее к тем вершинам, из которых нет исходящих ребер ("Приемников").
	//
	// Для вершин разных типов (Запасов и Расходов) и ребер разных типов (Перемещений, Распределений) 
	// применяются разные методы разрушения контуров:
	//
	// 1. Для перемещений считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0.
	// 
	// 2. Для остальных движений внутри контура запасов ("комплектаций") просто игнорируем одно из ребер цикла 
	// (считаем, что циклы в комплектациях редки, поэтому допустимо пожертвовать точностью вычислений за счет простоты алгоритма).
	//
	// 3. Контуры, которые проходят через вершины типа "Расходы", называются встречным выпуском.
	// Для таких контуров применяем следующий подход:
	// - заранее находим контуры и находим "слабые звенья" в них - те, которые потом разомкнем, тем самым разрушив цикл
	// - в ряде алгоритмов игнорируем "слабые звенья", но полностью циклы не разрушаются
	// - оценку расходов выполняем дважды:
	//   - сначала оцениваем весь граф, включая "слабые звенья"
	//   - затем разрушаем контуры, зафиксировав оценку слабых звеньев, полученную при первом распределении
	//   - наконец, выполняем оценку еще раз, начиная с тех вершин, в которые вели слабые звенья
	//
	// Граф затрат храним в виде структуры, содержащей
	// - две основные таблицы значений:
	//  - Вершины
	//  - Ребра
	// - вспомогательные (опциональные) таблицы значений:
	//  - Контуры
	//  - ЦелевоеСальдо
	//
	Затраты = НовыйГрафЗатрат(ОписаниеСумм, ВариантыСтруктурыЗатрат);
	
	Затраты.КешПараметровРасчета.ОсновнойВидРазницПБУ18 = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(
		Период,
		Организация);
	
	ЗаполнитьГрафЗатрат(Затраты, МенеджерВременныхТаблиц);
	Если РаспределитьРасходыНаПроизводство Тогда
		СоздатьЦелевоеСальдо(МенеджерВременныхТаблиц);
		ЗаполнитьЦелевоеСальдо(Затраты, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	ЗаписатьГрафЗатратДляОтладки(Затраты, Ссылка);
	
	ИндексироватьГрафЗатрат(Затраты);
	
	Если РаспределитьРасходыНаПроизводство Тогда
		ОграничитьЦелевоеСальдо(Затраты);
	КонецЕсли;
	
	ЗарегистрироватьЭтап("Готовы данные для оценки затрат", Ссылка);
	
	// Инициализируем структуры данных для работы со структурой затрат
	СтруктураЗатрат.СоздатьКлючи(МенеджерВременныхТаблиц, ВариантыСтруктурыЗатрат, Затраты, Протокол.КлючиСтруктурыЗатрат);
	СтруктураЗатрат.ДополнитьГрафЗатрат(Затраты, МенеджерВременныхТаблиц);
	
	ЗаписатьГрафЗатратДляОтладки(Затраты, Ссылка);
	
	ЗарегистрироватьЭтап("Инициализированы данные о структуре затрат", Ссылка);
	
	// Разрушим контуры всех видов:
	РазрушитьПетли(Затраты);
	
	Если ОценитьЗапасы Тогда
		// - преобразуем граф перемещений, чтобы он содержал данные набора деревьев
		РазрушитьВсеКонтуры(Затраты, "Перемещения");
	
		// - если есть другие контуры (циклы) в разделе Запасы, то их тоже разрушим, но другим, менее "точным" способом
		РазрушитьВсеКонтуры(Затраты, "Запасы");
	КонецЕсли;
	
	// - обработаем контуры в разделе учета Расходы
	Если РаспределитьРасходыНаПроизводство Тогда
		
		// - отработаем ограничение, заданное пользователем
		ПрименитьНастройкуПорядкаПеределов(Затраты, МенеджерВременныхТаблиц, Период, Организация);
		
		// - разрушим встречный выпуск
		ПрименитьНастройкуВстречногоВыпуска(Затраты, МенеджерВременныхТаблиц, Период, Организация);
		РазрушитьВсеКонтуры(Затраты, "ВстречныйВыпуск");
		
	КонецЕсли;
	
	Если РаспределитьРасходыНаПроизводство Или СписатьРасходыНаПродажу Тогда
		// - разрушим уцелевшие циклы: для математики оценки важно, чтобы контуров не было
		РазрушитьВсеКонтуры(Затраты, "Контрольный");
	КонецЕсли;
		
	ЗарегистрироватьЭтап("Обработан встречный выпуск", Ссылка);
	
	Если РаспределитьРасходыНаПроизводство Тогда
		// Оценка запасов уже выполнена регламентной операцией "Корректировка стоимости номенклатуры"
		ЗафиксироватьПредварительнуюОценкуЗапасов(Затраты, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Выполним основной алгоритм оценки
	ОценитьЗатраты(Затраты, Протокол.КлючиСтруктурыЗатрат);
	ДооценитьКонтуры(Затраты);
	
	ЗарегистрироватьЭтап("Выполнена оценка затрат", Ссылка);
	
	СохранитьОценкуЗапасов(Протокол, Затраты, ОписаниеСумм); // В СоздатьДвижения оценка будет "испорчена"
	
	// Готовимся формировать проводки - преобразовываем абстрактные данные в аналитику проводок
	// Создает временные таблицы ВнутренниеДвижения, ВнешниеДвижения, ОценкаВершин, ДоступныеСуммы
	СоздатьДвижения(МенеджерВременныхТаблиц, Затраты, Протокол);
	
	ЗаписатьОписаниеГрафаДляОтладки(Затраты, Протокол, Ссылка);
	
	ЗарегистрироватьЭтап("Готовы данные для формирования проводок", Ссылка);
	
	// ФОРМИРОВАНИЕ РЕЗУЛЬТАТА
	
	Результат = Новый Структура;
	
	Если РаспределитьРасходыНаПроизводство Тогда
		
		// Ошибки закрытия счетов 20, 23, 25, 26
		ПодготовитьВыпускБезЗатрат(Результат, МенеджерВременныхТаблиц, Протокол);
		ПодготовитьРасходыНеУдалосьРаспределить(Результат, МенеджерВременныхТаблиц, Протокол);
		
	КонецЕсли;
	
	Если Результат.Свойство("Ошибки") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проводки
	Результат.Вставить("Хозрасчетный", НоваяТаблицаПроводок());
	
	// Подготовка проводок
	
	// Выбытия + ВнутренниеДвижения + ОценкаВершин
	ДобавитьПроводкиВнутренниеДвижения(
		Результат.Хозрасчетный, 
		МенеджерВременныхТаблиц);
		
	ЗарегистрироватьЭтап("Готовы проводки по Дт счетов учета запасов и расходов", Ссылка);
	
	// ВнешниеДвижения + ОценкаВершин
	ДобавитьПроводкиВнешниеДвижения(
		Результат.Хозрасчетный,
		МенеджерВременныхТаблиц,
		Затраты,
		Протокол);
		
	ЗарегистрироватьЭтап("Готовы проводки по Кт счетов учета запасов и расходов", Ссылка);

	// ВнутренниеДвижения + ВнешниеДвижения по передачам материалов в эксплуатацию
	ДобавитьПроводкиСчетМЦ04(
		Результат.Хозрасчетный,
		МенеджерВременныхТаблиц,
		Период,
		Организация);
	
	ЗарегистрироватьЭтап("Готовы проводки по счету МЦ.04", Ссылка);
	
	// Уничтожим таблицы, которые больше не понадобятся
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВнешниеДвижения");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Счет 40
	Если РаспределитьРасходыНаПроизводство Тогда
		ДобавитьПроводкиСчет40(Результат.Хозрасчетный, Период, Организация, Ссылка);
	КонецЕсли;
	
	// Подготовка справок-расчетов
	СохранитьКлючиВершин(Протокол, МенеджерВременныхТаблиц);
	Если РаспределитьРасходыНаПроизводство Тогда
		СохранитьСебестоимостьВыпущеннойПродукции(Протокол, Затраты, ОписаниеСумм);
	КонецЕсли;
	
	ЭлементыЗатрат.ДополнитьРезультат(
		Результат, 
		Протокол, 
		ОписаниеСумм, 
		МенеджерВременныхТаблиц, 
		Организация, 
		ВариантыСтруктурыЗатрат);
	
	Если РаспределитьРасходыНаПроизводство ИЛИ СписатьРасходыНаПродажу Тогда
		
		// Создадим по данным протокола временную таблицу СальдоПослеРасчета,
		// которая используется для подготовки справок-расчетов
		СоздатьСальдоПослеРасчета(МенеджерВременныхТаблиц, Протокол);
		
		ПодготовитьСправкаРасчетСписанияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц, Период, Организация);
		
		Результат.Вставить("РасчетСписанияКосвенныхРасходов", Протокол.СправкаРасчетСписанияКосвенныхРасходов);
		
		Если РаспределитьРасходыНаПроизводство Тогда
		
			ПодготовитьСправкаРасчетКалькуляцияСебестоимости(Протокол, Затраты, МенеджерВременныхТаблиц, Период);
			Результат.Вставить("РасчетКалькуляцииСебестоимости", Протокол.КалькуляцияСебестоимости); // Перед записью будет свернут
			
			Результат.Вставить(
				"РасчетСебестоимостиПродукции",
				СправкаРасчетСебестоимостиПродукции(Протокол, МенеджерВременныхТаблиц, ОписаниеСумм));
				
			РасчетРаспределенияКосвенныхРасходов = ПодготовитьСправкаРасчетРаспределенияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц);
			Результат.Вставить("РасчетРаспределенияКосвенныхРасходов", РасчетРаспределенияКосвенныхРасходов);
			
			РасчетПорядкаПеределов = ПодготовитьСправкаРасчетПорядкаПеределов(Затраты, МенеджерВременныхТаблиц);
			Результат.Вставить("РасчетПорядкаПеределов",  РасчетПорядкаПеределов);
			
		КонецЕсли;
		
		УничтожитьСальдоПослеРасчета(МенеджерВременныхТаблиц);
		
		ЗарегистрироватьЭтап("Готовы справки-расчеты", Ссылка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет коллекцию Движения проводками с результатами расчета себестоимости
//
// Параметры:
//  Движения	 - КоллекцияДвижений - коллекция, содержащая дополняемый набор Хозрасчетный
//  Проводки	 - ТаблицаЗначений - см. НоваяТаблицаПроводок, данные для записи
//  Период		 - Дата - характеризует период, за который рассчитана себестоимость
//  Организация	 - Организация - организация, по которой рассчитана себестоимость
//
Процедура СформироватьДвиженияРасчетСебестоимости(Движения, Проводки, Период, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Проводки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчетов = Новый Соответствие;
	Для Каждого СтрокаПроводки Из Проводки Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			СтрокаПроводки.СчетДт,
			Проводка.СубконтоДт,
			СвойстваСчетов,
			СтрокаПроводки.СубконтоДт1,
			СтрокаПроводки.СубконтоДт2,
			СтрокаПроводки.СубконтоДт3);
			
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			СтрокаПроводки.СчетКт,
			Проводка.СубконтоКт,
			СвойстваСчетов,
			СтрокаПроводки.СубконтоКт1,
			СтрокаПроводки.СубконтоКт2,
			СтрокаПроводки.СубконтоКт3);
			
		ЗаполнитьВидСтоимостиВыпускПродукции(Проводка);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#Область ПримерВизуализацииРасчета

// Возвращает описание графа на языке Dot.
// Такое описание графа, в частности, позволяет визуализировать граф затрат.
Функция ОписаниеГрафа(Затраты, ПравилаРаспределения) Экспорт
	
	ТелоОписания = Новый ТекстовыйДокумент;
	
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		
		Если ОписаниеВершины.РазделУчета = "Запасы" Тогда
			ТелоОписания.ДобавитьСтроку(СтрШаблон("%1 [shape=""box""];", XMLСтрока(ОписаниеВершины.Идентификатор)));
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		СвойстваРебра = Новый Структура;
		Если Ребро.СлабоеЗвено Или Ребро.Зафиксировано Тогда
			СвойстваРебра.Вставить("style", "dotted");
		КонецЕсли;
		
		ЕстьВес    = Истина;
		ВидСтрелки = "empty";
		Если Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
			ВидСтрелки = "odot";
			ЕстьВес    = Ложь;
		ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы Тогда
			ВидСтрелки = "dot";
			ЕстьВес    = Ложь;
		ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ФиксированнаяСтоимость Тогда
			ВидСтрелки = "tee";
			ЕстьВес    = Ложь;
		ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Распределение Тогда
			ВидСтрелки = "normal";
		ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Выпуск Тогда
			ВидСтрелки = "open";
		КонецЕсли;
		
		СвойстваРебра.Вставить("arrowhead", ВидСтрелки);
		
		Если ЕстьВес Тогда
			СвойстваРебра.Вставить("label", XMLСтрока(Ребро.Вес));
		КонецЕсли;
		
		Если Не ПустаяСтрока(Ребро.ПравилоРаспределения) Тогда
			Правило = ПравилаРаспределения.Найти(Ребро.ПравилоРаспределения, "Имя");
			СвойстваРебра.Вставить("taillabel", XMLСтрока(ПравилаРаспределения.Индекс(Правило)));
		КонецЕсли;
		
		ПоляСвойств = Новый Массив;
		Для Каждого ОписаниеСвойства Из СвойстваРебра Цикл
			ПоляСвойств.Добавить(СтрШаблон("[%1 = ""%2""]", ОписаниеСвойства.Ключ, ОписаниеСвойства.Значение));
		КонецЦикла;
		
		ОписаниеРебра = СтрШаблон(
			"%1 -> %2 %3;",
			XMLСтрока(Ребро.Источник),
			XMLСтрока(Ребро.Приемник),
			СтрСоединить(ПоляСвойств, " "));
		
		ТелоОписания.ДобавитьСтроку(ОписаниеРебра);
		
	КонецЦикла;
		
	Возврат СтрШаблон(
		"digraph abstract {
		|%1
		|}",
		ТелоОписания.ПолучитьТекст());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыФункцииРасчета

#Область ИсходныеДанные

// Создадим временные таблицы с информацией о счетах затрат.
// Таблицы расходов могут опционально создаваться пустыми.
// Перечень таблиц:
// СчетаЗатрат
// СчетаЗапасов
// ОборотныеСубконто
// СчетаПрямыхРасходов
// СчетаКосвенныхРасходов
// СчетаРасходов
// СубконтоЗатрат
Процедура СоздатьСчетаЗатрат(МенеджерВременныхТаблиц, Период, Организация, Режим)
	
	СоздатьСчетаЗапасов(МенеджерВременныхТаблиц, Период, Организация, Режим = "РасходыНаПродажу");
	СоздатьСчетаРасходов(МенеджерВременныхТаблиц, Режим);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаРасходов.Счет КАК Счет,
	|	""Расходы"" КАК РазделУчета
	|ПОМЕСТИТЬ СчетаЗатрат
	|ИЗ
	|	СчетаРасходов КАК СчетаРасходов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаЗапасов.Счет,
	|	""Запасы""
	|ИЗ
	|	СчетаЗапасов КАК СчетаЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
	СоздатьСубконтоЗатрат(МенеджерВременныхТаблиц);
	
	СоздатьОборотныеСубконто(МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Создает временные таблицы с перечнями счетов запасов:
// - СчетаЗапасов
// - СчетаТорговойНаценкиАТТ
// - СчетаМатериаловВЭксплуатации
Процедура СоздатьСчетаЗапасов(МенеджерВременныхТаблиц, Период, Организация, Пустые = Ложь)
	
	Если Пустые Тогда
		СчетаЗапасов           = Новый Массив;
		СчетаЗапасовИсключения = Новый Массив;
		УчетВПродажныхЦенах    = Ложь;
	Иначе
		
		// Не считаем счетами запасов те, на которых не ведется пономенклатурный учет
		СчетаЗапасов = УчетЗатрат.ПредопределенныеСчетаЗапасов();
		
		// Если учет ведется по розничным ценам, то счет 41.11 оценивается совместно с счетом наценки
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
		УчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
		Если УчетВПродажныхЦенах Тогда
			СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ); // 42.01
		КонецЕсли;
		
		// Некоторые счета запасов не обрабатываем
		СчетаЗапасовИсключения = Новый Массив;
		СчетаЗапасовИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К  - служебный счет
		СчетаЗапасовИсключения.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);       // 10.11 - не умеем
		СчетаЗапасовИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов);     // 10.12.2 - технический, регулирующий, суммы всегда совпадают с 10.12.1
		
	КонецЕсли;
	
	// Создаем временные таблицы
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаЗапасов",           СчетаЗапасов);
	Запрос.УстановитьПараметр("СчетаЗапасовИсключения", СчетаЗапасовИсключения);
	Запрос.УстановитьПараметр("УчетВПродажныхЦенах",    УчетВПродажныхЦенах);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.НомерСтроки КАК НомерСубконтоНоменклатура
	|ПОМЕСТИТЬ СчетаЗапасов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И Хозрасчетный.Количественный
	|	И Хозрасчетный.Суммовой
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗапасов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаЗапасовИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) КАК СчетЗапасов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) КАК СчетНаценки
	|ПОМЕСТИТЬ СчетаТорговойНаценкиАТТ
	|ГДЕ
	|	&УчетВПродажныхЦенах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаМатериаловВЭксплуатации
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временные таблицы с перечнями счетов расходов
// - КалькуляционныеСчета
// - СчетаРасходов
// - СчетаПрямыхРасходов
// - СчетаКосвенныхРасходов
Процедура СоздатьСчетаРасходов(МенеджерВременныхТаблиц, Режим = "РасходыНаПроизводство")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если Режим = "РасходыНаПроизводство" Тогда
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",           УчетЗатрат.ПредопределенныеСчетаПрямыхРасходов());
		Запрос.УстановитьПараметр("КалькуляционныеСчета",          УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",        УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",           Истина);
	ИначеЕсли Режим = "РасходыНаПродажу" Тогда
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",           Новый Массив);
		Запрос.УстановитьПараметр("КалькуляционныеСчета",          Новый Массив);
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",        УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",           Ложь);
	Иначе // Запасы
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",           Новый Массив);
		Запрос.УстановитьПараметр("КалькуляционныеСчета",          Новый Массив);
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",        Новый Массив);
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",           Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ КалькуляционныеСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КалькуляционныеСчета)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКосвенныхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаКосвенныхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаПрямыхРасходов.Счет КАК Счет,
	|	""Расходы"" КАК Назначение
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	СчетаПрямыхРасходов КАК СчетаПрямыхРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаКосвенныхРасходов.Счет,
	|	""Расходы"" КАК Назначение
	|ИЗ
	|	СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции),
	|	""Выпуск"" КАК Назначение
	|ГДЕ
	|	&ДобавитьСчетВыпуска
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу, содержащую данные о субконто счетов затрат и их значениях по умолчанию.
// Содержит только суммовые субконто, так как суть расчета - в определении сумм.
//
Процедура СоздатьСубконтоЗатрат(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// В запросе с Различные нельзя выбрать ОписаниеТипов, поэтому используется дополнительный запрос для получения типов
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТ_ВидыСубконтоСчетовЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаЗатрат.Счет
	|			ИЗ
	|				СчетаЗатрат)
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ ВТ_ВидыСубконтоЗатрат
	|ИЗ
	|	ВТ_ВидыСубконтоСчетовЗатрат КАК ВидыСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконтоЗатрат.ВидСубконто КАК ВидСубконто,
	|	ВидыСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ВТ_ВидыСубконтоЗатрат КАК ВидыСубконтоЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыСубконтоХозрасчетные КАК ВидыСубконто
	|		ПО ВидыСубконтоЗатрат.ВидСубконто = ВидыСубконто.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыСубконтоЗатрат";
	
	ЗначенияСубконтоПоУмолчанию = Новый ТаблицаЗначений;
	ЗначенияСубконтоПоУмолчанию.Колонки.Добавить("ВидСубконто",         Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ЗначенияСубконтоПоУмолчанию.Колонки.Добавить("ЗначениеПоУмолчанию", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеСубконто = ЗначенияСубконтоПоУмолчанию.Добавить();
		ОписаниеСубконто.ВидСубконто         = Выборка.ВидСубконто;
		ОписаниеСубконто.ЗначениеПоУмолчанию = Выборка.ТипЗначения.ПривестиЗначение(Неопределено);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗначенияСубконтоПоУмолчанию", ЗначенияСубконтоПоУмолчанию);
	
	// В полях ВидСубконтоX значения NULL означают отсутствие субконто с этим номером,
	// с тем, чтобы в результате соединения отсутствие субконто можно было проверить на NULL
	// как в случае отсутствия записей про счет, так и в случае отсутствия субконто на счете
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСубконтоПоУмолчанию.ВидСубконто КАК ВидСубконто,
	|	ЗначенияСубконтоПоУмолчанию.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ПОМЕСТИТЬ ЗначенияСубконтоПоУмолчанию
	|ИЗ
	|	&ЗначенияСубконтоПоУмолчанию КАК ЗначенияСубконтоПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СубконтоЗатрат.Счет КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СубконтоЗатрат.НомерСубконто = 1
	|				ТОГДА ЗначенияПоУмолчанию.ВидСубконто
	|		КОНЕЦ) КАК ВидСубконто1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СубконтоЗатрат.НомерСубконто = 2
	|				ТОГДА ЗначенияПоУмолчанию.ВидСубконто
	|		КОНЕЦ) КАК ВидСубконто2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СубконтоЗатрат.НомерСубконто = 3
	|				ТОГДА ЗначенияПоУмолчанию.ВидСубконто
	|		КОНЕЦ) КАК ВидСубконто3,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА СубконтоЗатрат.НомерСубконто = 1
	|					ТОГДА ЗначенияПоУмолчанию.ЗначениеПоУмолчанию
	|				ИНАЧЕ NULL
	|			КОНЕЦ), НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию1,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА СубконтоЗатрат.НомерСубконто = 2
	|					ТОГДА ЗначенияПоУмолчанию.ЗначениеПоУмолчанию
	|				ИНАЧЕ NULL
	|			КОНЕЦ), НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию2,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА СубконтоЗатрат.НомерСубконто = 3
	|					ТОГДА ЗначенияПоУмолчанию.ЗначениеПоУмолчанию
	|				ИНАЧЕ NULL
	|			КОНЕЦ), НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию3
	|ПОМЕСТИТЬ СубконтоЗатрат
	|ИЗ
	|	ВТ_ВидыСубконтоСчетовЗатрат КАК СубконтоЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСубконтоПоУмолчанию КАК ЗначенияПоУмолчанию
	|		ПО СубконтоЗатрат.ВидСубконто = ЗначенияПоУмолчанию.ВидСубконто
	|ГДЕ
	|	СубконтоЗатрат.НомерСубконто <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СубконтоЗатрат.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыСубконтоСчетовЗатрат";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьОборотныеСубконто(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ХозрасчетныйВидыСубконто.НомерСтроки = 1) КАК Субконто1,
	|	МАКСИМУМ(ХозрасчетныйВидыСубконто.НомерСтроки = 2) КАК Субконто2,
	|	МАКСИМУМ(ХозрасчетныйВидыСубконто.НомерСтроки = 3) КАК Субконто3
	|ПОМЕСТИТЬ ВТ_ОборотныеСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаЗатрат.Счет
	|			ИЗ
	|				СчетаЗатрат)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотныеСубконто.Счет КАК Счет,
	|	ОборотныеСубконто.Субконто1 КАК Субконто1,
	|	ОборотныеСубконто.Субконто2 КАК Субконто2,
	|	ОборотныеСубконто.Субконто3 КАК Субконто3,
	|	ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию1,
	|	ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию2,
	|	ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию3
	|ПОМЕСТИТЬ ОборотныеСубконто
	|ИЗ
	|	ВТ_ОборотныеСубконто КАК ОборотныеСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО ОборотныеСубконто.Счет = СубконтоЗатрат.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОборотныеСубконто";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу НачальноеСальдоЗапасов
//
Процедура СоздатьНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация)
	
	// НачальноеСальдо = 
	//   сальдо запасов
	// + сальдо прямых расходов
	// + сальдо косвенных расходов
	
	// Сначала разберемся с косвенными расходами, затем с остальными расходами и затем добавим данные о запасах
	СоздатьВТ_СальдоКосвенныхРасходов(МенеджерВременныхТаблиц, Период, Организация);
	
	// Теперь получим сальдо прямых расходов и запасов, затем скомпонуем результат
	
	// Для учета затрат нас не интересует оценка запасов в розничных ценах.
	// Поэтому если учет товаров в рознице ведется по ценам реализации,
	// то счет 41.11 заменяем на счет 42.01, на котором будут "храниться"
	// затраты в ценах приобретения.
	// При формировании проводок, если необходимо, выполним обратное преобразование.
	
	// Для учета малоценных объектов используется пара счетов 10.12.1 (Активный) и 10.12.2 (Пассивный).
	// Суммы на счете 10.12.2 равны суммам на 10.12.1, поэтому они не важны для целей учета затрат.
	// Движение малоценных объектов по-разному учитывается в бухгалтерском и налоговом учете.
	// Бухгалтерский учет таких запасов - усеченный, он нужен только для забалансовых сумм, находящихся вне контура затрат.
	// Поэтому в контуре учета затрат на 10.12.1 учитываются только суммы налогового учета,
	// а для бухгалтерского используется 10.12.2
	// При формировании проводок он будет обратно заменен на 10.12.1.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",              НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачальноеСальдо.Счет КАК Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто1
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию1
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто2
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию2
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто3
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию3
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто3,
	|	НачальноеСальдо.КоличествоОстаток КАК Количество,
	|	НачальноеСальдо.СуммаОстаток КАК Сумма,
	|	НачальноеСальдо.СуммаНУОстаток КАК СуммаНУ,
	|	НачальноеСальдо.СуммаПРОстаток КАК СуммаПР,
	|	НачальноеСальдо.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_НачальноеСальдоПрямыхРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			,
	|			Организация = &Организация) КАК НачальноеСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО НачальноеСальдо.Счет = ОборотныеСубконто.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет КАК Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто1
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию1
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто2
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию2
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ОборотныеСубконто.Субконто3
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию3
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто3,
	|	НачальноеСальдо.КоличествоОстаток КАК Количество,
	|	НачальноеСальдо.СуммаОстаток КАК Сумма,
	|	НачальноеСальдо.СуммаНУОстаток КАК СуммаНУ,
	|	НачальноеСальдо.СуммаПРОстаток КАК СуммаПР,
	|	НачальноеСальдо.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_НачальноеСальдоЗапасов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаЗапасов.Счет
	|				ИЗ
	|					СчетаЗапасов),
	|			,
	|			Организация = &Организация) КАК НачальноеСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО НачальноеСальдо.Счет = ОборотныеСубконто.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, НачальноеСальдо.Счет) КАК Счет,
	|	НачальноеСальдо.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(НачальноеСальдо.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА НачальноеСальдо.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА 0
	|			ИНАЧЕ НачальноеСальдо.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(НачальноеСальдо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВЫБОР
	|			КОГДА НачальноеСальдо.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА 0
	|			ИНАЧЕ НачальноеСальдо.СуммаПР
	|		КОНЕЦ) КАК СуммаПР,
	|	СУММА(ВЫБОР
	|			КОГДА НачальноеСальдо.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА -НачальноеСальдо.СуммаНУ
	|			ИНАЧЕ НачальноеСальдо.СуммаВР
	|		КОНЕЦ) КАК СуммаВР
	|ПОМЕСТИТЬ НачальноеСальдо
	|ИЗ
	|	ВТ_НачальноеСальдоЗапасов КАК НачальноеСальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО НачальноеСальдо.Счет = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО НачальноеСальдо.Счет = СубконтоЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценки
	|		ПО НачальноеСальдо.Счет = СчетаТорговойНаценки.СчетЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, НачальноеСальдо.Счет),
	|	НачальноеСальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов),
	|	НачальноеСальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто3
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(НачальноеСальдо.Количество),
	|	СУММА(НачальноеСальдо.Сумма),
	|	0,
	|	СУММА(НачальноеСальдо.СуммаПР),
	|	СУММА(НачальноеСальдо.СуммаВР) + СУММА(НачальноеСальдо.СуммаНУ)
	|ИЗ
	|	ВТ_НачальноеСальдоЗапасов КАК НачальноеСальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО НачальноеСальдо.Счет = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО НачальноеСальдо.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	НачальноеСальдо.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальноеСальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НачальноеСальдо.Субконто3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет,
	|	НачальноеСальдо.Подразделение,
	|	НачальноеСальдо.Субконто1,
	|	НачальноеСальдо.Субконто2,
	|	НачальноеСальдо.Субконто3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	СУММА(НачальноеСальдо.Количество),
	|	СУММА(НачальноеСальдо.Сумма),
	|	СУММА(НачальноеСальдо.СуммаНУ),
	|	СУММА(НачальноеСальдо.СуммаПР),
	|	СУММА(НачальноеСальдо.СуммаВР)
	|ИЗ
	|	ВТ_НачальноеСальдоПрямыхРасходов КАК НачальноеСальдо
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальноеСальдо.Счет,
	|	НачальноеСальдо.Подразделение,
	|	НачальноеСальдо.Субконто1,
	|	НачальноеСальдо.Субконто2,
	|	НачальноеСальдо.Субконто3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение),
	|	ВЫБОР
	|		КОГДА НачальноеСальдо.Субконто1 ЕСТЬ NULL
	|				И ОборотныеСубконто.Субконто1
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию1
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачальноеСальдо.Субконто2 ЕСТЬ NULL
	|				И ОборотныеСубконто.Субконто2
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию2
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачальноеСальдо.Субконто3 ЕСТЬ NULL
	|				И ОборотныеСубконто.Субконто3
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию3
	|		ИНАЧЕ ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	0,
	|	НачальноеСальдо.Сумма,
	|	НачальноеСальдо.СуммаНУ,
	|	НачальноеСальдо.СуммаПР,
	|	НачальноеСальдо.СуммаВР
	|ИЗ
	|	ВТ_СальдоКосвенныхРасходов КАК НачальноеСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО НачальноеСальдо.Счет = ОборотныеСубконто.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НачальноеСальдоПрямыхРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НачальноеСальдоЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоКосвенныхРасходов";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТ_СальдоКосвенныхРасходов(МенеджерВременныхТаблиц, Период, Организация)
	
	// Сальдо определяется на начало месяца
	НачалоМесяца = НачалоМесяца(Период);
	
	// На счетах косвенных расходов может остаться сальдо в двух случаях: 
	// 1. сальдо транспортных расходов
	// 2. сальдо нормируемых расходов налогового учета
	// Их поместим в СальдоКосвенныхРасходов.
	//
	// Сальдо транспортных расходов может быть перенесено с прошлого года.
	// Поэтому транспортные расходы можно отражать только по тем счетам, по которым субконто СтатьяЗатрат не оборотное.
	// Следовательно, сальдо таких расходов получить просто. 
	//
	// Если организация уплачивает налог на прибыль, то дополнительно нужно получать данные о нормируемых расходах.
	// Сальдо нормируемых расходов не переносится с прошлого года.
	// Поэтому суммы таких расходов могут накапливаться на счетах, где СтатьяЗатрат - оборотное субконто.
	// Следовательно, нужно обращаться к оборотам с начала налогового периода. Это сложнее.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Период",              НачалоМесяца);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	НачалоНалоговогоПериода   = Неопределено;
	Если ПлательщикНалогаНаПрибыль Тогда
		
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
		
		Если НачалоНалоговогоПериода = Неопределено 
			Или НачалоНалоговогоПериода > НачалоМесяца Тогда
			// До начала месяца организация не была плательщиком налога на прибыль.
			ПлательщикНалогаНаПрибыль = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуютсяОбороты = ПлательщикНалогаНаПрибыль И НачалоМесяца > НачалоНалоговогоПериода;
	
	Если Не ТребуютсяОбороты Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
		|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
		|ПОМЕСТИТЬ ВТ_СальдоКосвенныхРасходов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаКосвенныхРасходов.Счет
		|				ИЗ
		|					СчетаКосвенныхРасходов),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;

	// В налоговом учете на конец месяца могут остаться остатки сверхнормативных расходов.
	// Для того, чтобы в следующем месяце сопоставить эти расходы с нормативами,
	// важно знать статьи, по которым они отражены.
	// Но на счетах расходов статья затрат - оборотное субконто и при получении остатков на начало месяца
	// статья неизвестна.
	//
	// Сверхнормативные расходы не могут остаться с предыдущего года.
	// Поэтому, для того, чтобы получить остатки сверхнормативных расходов в разрезе статей затрат,
	// достаточно обратиться к оборотам с начала года до текущего месяца.
	//
	// Здесь игнорируем КорСчет, поскольку он нужен для разделения
	// - прямых и косвенных расходов
	// - материальных иных расходов в бухгалтерском учете (по элементам затрат)
	// При этом
	// - все нормируемые расходы - косвенные, транспортные - прямые, то есть, делить их не надо
	// - классификация расходов на материальные и прочие в налоговом учете своя, определяемая видом статьи,
	//   а не КорСчетом.
	
	Запрос.УстановитьПараметр("НормируемыеРасходы",      Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("ДоНачалаПериода",         НачалоМесяца - 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТ_СчетаРасходовОборотныеСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СчетаКосвенныхРасходов.Счет
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСубконто,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатратНормируемые
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&НормируемыеРасходы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Субконто3 КАК Субконто3,
	|	0 КАК Сумма,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаНУ,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоКосвенныхРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоНалоговогоПериода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 1),
	|			,
	|			Организация = &Организация
	|				И Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоНалоговогоПериода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 2),
	|			,
	|			Организация = &Организация
	|				И Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоНалоговогоПериода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 3),
	|			,
	|			Организация = &Организация
	|				И Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКосвенныхРасходов.Счет
	|					ИЗ
	|						СчетаКосвенныхРасходов)
	|				И НЕ Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТ_СчетаРасходовОборотныеСтатьиЗатрат.Счет
	|						ИЗ
	|							ВТ_СчетаРасходовОборотныеСтатьиЗатрат),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаРасходовОборотныеСтатьиЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатратНормируемые";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьОборотыФикс(МенеджерВременныхТаблиц, Период, Организация)
	
	// Применяется две модели фиксированной стоимости:
	// 1. "Без ребра" - внешняя (исходная) оценка источника и приемника корректируется на фиксированную стоимость.
	//    Для целей расчета оборот по фиксированной стоимости не приводит к появлению ребра.
	// 2. "С ребром" - используется ребро специального вида, при проходе по которому стоимость не меняется,
	//    но, например, рассчитывается структура затрат.
	//    Такое ребро может быть кратным, т.е. параллельно ему будет ребро, оценка которого рассчитывается.
	
	// Для первой модели используется таблица ОборотыФикс, для второй - ФиксированнаяСтоимость
	// Первая исторически более ранняя.
	// В перспективе возможен отказ от первой модели.
	
	// Далее подробно описана реализация первой модели.
	// Про вторую см. СоздатьФиксированнаяСтоимость
	
	// Обороты по фиксированной стоимости - это следующие движения из учета затрат (по ИЛИ):
	// - у которых стоит флаг НеКорректироватьСтоимостьАвтоматически
	// - ручные операции без количества
	// - возвраты от покупателей, стоимость которых фиксирована в документе (отражаются "красным сторно" - по Кт счетов с минусом)
	// - возвратные отходы (отражаются "красным сторно" - по Кт счетов с минусом)
	// - увеличение стоимости спецодежды и спецоснастки в эксплуатации
	//   (последние имеют особый порядок учета, уточнение оценки таких операций не поддерживается механизмами погашения стоимости)
	// - корректировка зарплаты
	// - исходящие авизо (отражают выбытие активов)
	
	// Такие операции описываются либо свойствами документов либо свойствами записи регистра.
	// Этих операций немного.
	// Поэтому сначала определяем ссылки на записи регистра по фиксированной стоимости.
	
	// ОборотыФикс нужны, чтобы
	// 1. из выбытий отобрать только те, которые следует рассчитать (исключить из всех выбытий ОборотыФикс, см. СоздатьВыбытия())
	// 2. к поступлениям добавить результат поступления по фиксированной стоимости (см. СоздатьПоступления())
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Запрос нельзя редактировать конструктором, потому что он содержит комментарии,
	// которые ниже будут заменены - см. //ОбъединитьДокументыФикс
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВыбытияФикс
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСделка
	|		ПО ВозвратТоваровОтПокупателя.Сделка = ДанныеПервичныхДокументовСделка.Документ
	|			И ДанныеПервичныхДокументовСделка.Организация = &Организация 
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ЕСТЬNULL(ДанныеПервичныхДокументовСделка.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) < &НачалоПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Склад <> ВозвратТоваровОтПокупателя.Склад
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Склад ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВозвратныеОтходы.Регистратор,
	|	ВозвратныеОтходы.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ВозвратныеОтходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО ВозвратныеОтходы.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	ВозвратныеОтходы.Активность
	|	И ВозвратныеОтходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратныеОтходы.Организация = &Организация
	|	И ВозвратныеОтходы.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
	|	И ВозвратныеОтходы.КоличествоКт < 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияБух КАК ОперацияБух
	|		ПО Движения.Регистратор = ОперацияБух.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ОперацияБух
	|	И Движения.КоличествоКт < 0
	|	И НЕ ОперацияБух.СпособЗаполнения ПОДОБНО ""Сторно""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НеКорректируемые.Регистратор,
	|	НеКорректируемые.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК НеКорректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО НеКорректируемые.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	НеКорректируемые.Активность
	|	И НеКорректируемые.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НеКорректируемые.Организация = &Организация
	|	И НеКорректируемые.НеКорректироватьСтоимостьАвтоматически
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОперацияБух.Регистратор,
	|	ОперацияБух.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ОперацияБух
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО ОперацияБух.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	ОперацияБух.Активность
	|	И ОперацияБух.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОперацияБух.Организация = &Организация
	|	И ОперацияБух.Регистратор ССЫЛКА Документ.ОперацияБух
	|	И ЕСТЬNULL(ОперацияБух.КоличествоКт, 0) = 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаМатериаловВЭксплуатации КАК СчетаМатериаловВЭксплуатации
	|		ПО Движения.СчетДт = СчетаМатериаловВЭксплуатации.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО Движения.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|
	|//ОбъединитьДокументыФикс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Обороты.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(Обороты.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Обороты.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Обороты.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Обороты.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Обороты.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Обороты.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Обороты.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Обороты.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(Обороты.КоличествоКт, 0) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(ЕСТЬNULL(Обороты.Сумма, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаНУКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаПРКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаВРКт, 0)) КАК СуммаВР
	|ПОМЕСТИТЬ ОборотыФикс
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			(Регистратор, НомерСтроки) В
	|				(ВЫБРАТЬ
	|					ВыбытияФикс.Регистратор,
	|					ВыбытияФикс.НомерСтроки
	|				ИЗ
	|					ВыбытияФикс КАК ВыбытияФикс),
	|			,
	|			) КАК Обороты
	|СГРУППИРОВАТЬ ПО
	|	Обороты.СчетДт,
	|	Обороты.ПодразделениеДт,
	|	Обороты.СубконтоДт1,
	|	Обороты.СубконтоДт2,
	|	Обороты.СубконтоДт3,
	|	Обороты.СчетКт,
	|	Обороты.ПодразделениеКт,
	|	Обороты.СубконтоКт1,
	|	Обороты.СубконтоКт2,
	|	Обороты.СубконтоКт3
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВыбытияФикс";

	// Дополним запрос для подготовки ВыбытияФикс документами, 
	// движения которых всегда считаются оборотами по фиксированной стоимости 
	
	ИменаДокументовФиксированнойСтоимости = Новый Массив;
	ИменаДокументовФиксированнойСтоимости.Добавить("НачислениеЗарплаты");
	ИменаДокументовФиксированнойСтоимости.Добавить("ОтражениеЗарплатыВБухучете");
	ИменаДокументовФиксированнойСтоимости.Добавить("ОтражениеЗарплатыВУчете");
	УчетОбособленныхПодразделений.ДополнитьМассивИменамиДокументовАвизо(ИменаДокументовФиксированнойСтоимости, Ложь);
	
	ТекстОбъединитьДокументыФикс = "";
	Для Каждого ИмяДокумента Из ИменаДокументовФиксированнойСтоимости Цикл
		
		ТекстПоДокументу = "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Движения.Регистратор,
		|	Движения.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
		|		ПО Движения.СчетКт = СчетаЗатрат.Счет
		|ГДЕ
		|	Движения.Активность
		|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Движения.Организация = &Организация
		|	И Движения.Регистратор ССЫЛКА Документ.%ИмяДокумента%
		|";
		
		ТекстПоДокументу = СтрЗаменить(ТекстПоДокументу, "%ИмяДокумента%", ИмяДокумента);
		ТекстОбъединитьДокументыФикс = ТекстОбъединитьДокументыФикс + ТекстПоДокументу;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОбъединитьДокументыФикс", ТекстОбъединитьДокументыФикс);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьФиксированнаяСтоимость(МенеджерВременныхТаблиц, Период, Организация)
	
	// Выбирает данные для оценки фиксированной стоимости по модели "С ребром".
	// См. СоздатьОборотыФикс
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Если ИсточникДанныхВыпуска(Период, Организация) = "Счет40" Тогда
		
		// При использовании счета 40 оценка продукции по плановой стоимости (Дт 43 Кт 40) фиксируется.
		// Даже если затем суммы на счете 43 доводятся до фактической стоимости, то разница отражается отдельным (кратным),
		// не фиксированным ребром.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Проводки.СчетДт КАК СчетДт,
		|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
		|	Проводки.СубконтоДт1 КАК СубконтоДт1,
		|	Проводки.СубконтоДт2 КАК СубконтоДт2,
		|	Проводки.СубконтоДт3 КАК СубконтоДт3,
		|	Проводки.СчетКт КАК СчетКт,
		|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
		|	Проводки.СубконтоКт1 КАК СубконтоКт1,
		|	Проводки.СубконтоКт2 КАК СубконтоКт2,
		|	Проводки.СубконтоКт3 КАК СубконтоКт3,
		|	0 КАК Количество,
		|	Проводки.Сумма КАК Сумма,
		|	Проводки.СуммаНУ КАК СуммаНУ,
		|	Проводки.СуммаПР КАК СуммаПР,
		|	Проводки.СуммаВР КАК СуммаВР
		|ПОМЕСТИТЬ ФиксированнаяСтоимость
		|ИЗ
		|	ПредварительныеПроводкиВыпуск КАК Проводки";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
		|	&ПустоеПодразделение КАК ПодразделениеДт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
		|	&ПустоеПодразделение КАК ПодразделениеКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	0 КАК Количество,
		|	0 КАК Сумма,
		|	0 КАК СуммаНУ,
		|	0 КАК СуммаПР,
		|	0 КАК СуммаВР
		|ПОМЕСТИТЬ ФиксированнаяСтоимость
		|ГДЕ
		|	ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИсточникДанныхВыпуска(Период, Организация)
	
	Если Не УчетПроизводства.ИспользоватьСчетВыпускПродукции(Период, Организация) Тогда
		Возврат "РегистрНакопления";
	КонецЕсли;
	
	ВариантУчета = УчетнаяПолитика.ВариантУчетаСтоимостиВыпуска(Организация, Период);
	Если Перечисления.ВариантыУчетаСтоимостиВыпуска.ТранзитныйАлгоритмУчетаОтклоненийОтПлановойСебестоимости(ВариантУчета) Тогда
		Возврат "РегистрНакопленияСчет40";
	Иначе
		Возврат "Счет40";
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу Поступления
Процедура СоздатьПоступления(МенеджерВременныхТаблиц, Период, Организация)
	
	// Поступления =
	//   ОборотДт
	// - ОборотКт (по фиксированной стоимости)
	
	// ОборотДт =
	//   ОборотДтЗапасы
	// + ОборотДтРасходы,
	// при этом в ОборотДтРасходы заполняется поле КорСчет.
	// Это нужно для определения элементов затрат, а также, для целей налогового учета - прямые расходы налогового учета
	// задаются с точностью до КорСчета.
	// Корсчет не может быть счетом расходов
	// - информацию об элементах затрат несут "первичные" расходы
	// - все "вторичные" расходы для целей налогового учета считаются прямыми.
	
	// Услуги собственным подразделениям могут быть отражены по плановой стоимости.
	// В соответствующих проводках не содержится номенклатура.
	// В то же время, данные о выпуске по плановой стоимости хранятся в отдельном регистре и важны для расчета.
	// Поэтому скорректируем данные ОборотДтРасходы на данные о плановой стоимости потребленных услуг,
	// так, чтобы в данных о поступлениях появились сведения о номенклатуре этих услуг.
	
	// ОборотДтРасходы дополняется информацией о наименованиях использованных запасов и их количестве (КоличествоМатериала).
	// Таким образом, отнесение двух наименований материалов на одну и ту же статью затрат будет отражено в учете расходов раздельно,
	// несмотря на то, что эти суммы на счете расходов отражаются сводно, по одной и той же аналитике.
	// Эта информация используется для составления Калькуляции себестоимости.
	//
	// Данные о поступлении расходов из контура запасов в разрезе наименований запасов выбираются из таблиц Выбытия.
	// Это сделано для того, чтобы состав аналитики, соответствующий состоянию расходов, был идентичен в таблицах Выбытия и Поступления.
	// Идентичность важна для механизма оценки затрат - см. пояснение по заполнению информации о Вершинах в ЗаполнитьГрафЗатрат()
	//
	// Аналогично выбирается дополнительная аналитика из данных таблицы ОборотыФикс.
	//
	// Для дополнения поступлений данными о материалах используется таблица ВТ_ДополнительнаяАналитикаРасходов.
	// Данные о поступлениях корректируются на данные из ВТ_ДополнительнаяАналитикаРасходов:
	// - сводные данные о поступлениях, для которых известна дополнительная аналитика, вычитаются
	// - взамен прибавляются те же суммы, но с большей детализацией и с указанием КоличествоМатериала
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Об использовании пар счетов 41.11/42.01 и 10.12.1/10.12.2 см. комментарий в СоздатьНачальноеСальдо
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выбытия.СчетДт КАК Счет,
	|	Выбытия.ПодразделениеДт КАК Подразделение,
	|	Выбытия.СубконтоДт1 КАК Субконто1,
	|	Выбытия.СубконтоДт2 КАК Субконто2,
	|	Выбытия.СубконтоДт3 КАК Субконто3,
	|	Выбытия.СчетКт КАК КорСчет,
	|	Выбытия.НоменклатураКт КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА Выбытия.НоменклатураДт = Выбытия.НоменклатураКт
	|				ТОГДА Выбытия.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоМатериала,
	|	СУММА(Выбытия.Сумма) КАК Сумма,
	|	СУММА(Выбытия.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выбытия.СуммаПР) КАК СуммаПР,
	|	СУММА(Выбытия.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_ДополнительнаяАналитикаРасходов
	|ИЗ
	|	Выбытия КАК Выбытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|		ПО Выбытия.СчетДт = СчетаРасходов.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Выбытия.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Выбытия.НоменклатураКт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Выбытия.СчетДт,
	|	Выбытия.ПодразделениеДт,
	|	Выбытия.СубконтоДт1,
	|	Выбытия.СубконтоДт2,
	|	Выбытия.СубконтоДт3,
	|	Выбытия.СчетКт,
	|	Выбытия.НоменклатураКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыбытияФикс.СчетДт,
	|	ВыбытияФикс.ПодразделениеДт,
	|	ВыбытияФикс.СубконтоДт1,
	|	ВыбытияФикс.СубконтоДт2,
	|	ВыбытияФикс.СубконтоДт3,
	|	ВыбытияФикс.СчетКт,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	СУММА(ВыбытияФикс.Количество),
	|	СУММА(ВыбытияФикс.Сумма),
	|	СУММА(ВыбытияФикс.СуммаНУ),
	|	СУММА(ВыбытияФикс.СуммаПР),
	|	СУММА(ВыбытияФикс.СуммаВР)
	|ИЗ
	|	ОборотыФикс КАК ВыбытияФикс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|		ПО ВыбытияФикс.СчетДт = СчетаРасходов.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО ВыбытияФикс.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыбытияФикс.СчетДт,
	|	ВыбытияФикс.ПодразделениеДт,
	|	ВыбытияФикс.СубконтоДт1,
	|	ВыбытияФикс.СубконтоДт2,
	|	ВыбытияФикс.СубконтоДт3,
	|	ВыбытияФикс.СчетКт,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(ВыбытияФикс.СубконтоКт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.СчетДт КАК Счет,
	|	Выпуск.ПодразделениеДт КАК Подразделение,
	|	Выпуск.СубконтоДт1 КАК Субконто1,
	|	Выпуск.СубконтоДт2 КАК Субконто2,
	|	Выпуск.СубконтоДт3 КАК Субконто3,
	|	Выпуск.ПродукцияДт КАК Номенклатура,
	|	СУММА(Выпуск.Сумма) КАК Сумма,
	|	СУММА(Выпуск.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выпуск.СуммаПР) КАК СуммаПР,
	|	СУММА(Выпуск.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_УслугиСобственнымПодразделениям
	|ИЗ
	|	ПредварительныеПроводкиВыпуск КАК Выпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|		ПО Выпуск.СчетДт = СчетаРасходов.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.СчетДт,
	|	Выпуск.ПодразделениеДт,
	|	Выпуск.СубконтоДт1,
	|	Выпуск.СубконтоДт2,
	|	Выпуск.СубконтоДт3,
	|	Выпуск.ПродукцияДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поступления.Счет КАК Счет,
	|	ЕСТЬNULL(Поступления.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	Поступления.Субконто1 КАК Субконто1,
	|	Поступления.Субконто2 КАК Субконто2,
	|	Поступления.Субконто3 КАК Субконто3,
	|	Поступления.КорСчет КАК КорСчет,
	|	Поступления.Номенклатура КАК Номенклатура,
	|	СУММА(Поступления.КоличествоМатериала) КАК КоличествоМатериала,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(Поступления.Количество, 0) КАК ЧИСЛО(15, 3))) КАК Количество,
	|	СУММА(ЕСТЬNULL(Поступления.Сумма, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаНУ, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаПР, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаВР, 0)) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Поступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыДтЗапасы.Счет КАК Счет,
	|		ОборотыДтЗапасы.Подразделение КАК Подразделение,
	|		ОборотыДтЗапасы.Субконто1 КАК Субконто1,
	|		ОборотыДтЗапасы.Субконто2 КАК Субконто2,
	|		ОборотыДтЗапасы.Субконто3 КАК Субконто3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|		0 КАК КоличествоМатериала,
	|		ОборотыДтЗапасы.КоличествоОборотДт КАК Количество,
	|		ОборотыДтЗапасы.СуммаОборотДт КАК Сумма,
	|		ОборотыДтЗапасы.СуммаНУОборотДт КАК СуммаНУ,
	|		ОборотыДтЗапасы.СуммаПРОборотДт КАК СуммаПР,
	|		ОборотыДтЗапасы.СуммаВРОборотДт КАК СуммаВР
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаЗапасов.Счет
	|					ИЗ
	|						СчетаЗапасов),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК ОборотыДтЗапасы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыДтРасходы.Счет,
	|		ЕСТЬNULL(ОборотыДтРасходы.Подразделение, &ПустоеПодразделение),
	|		ОборотыДтРасходы.Субконто1,
	|		ОборотыДтРасходы.Субконто2,
	|		ОборотыДтРасходы.Субконто3,
	|		ОборотыДтРасходы.КорСчет,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0,
	|		ОборотыДтРасходы.КоличествоОборотДт,
	|		ОборотыДтРасходы.СуммаОборотДт,
	|		ОборотыДтРасходы.СуммаНУОборотДт,
	|		ОборотыДтРасходы.СуммаПРОборотДт,
	|		ОборотыДтРасходы.СуммаВРОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаРасходов.Счет
	|					ИЗ
	|						СчетаРасходов),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК ОборотыДтРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнутренниеУслугиСторно.Счет,
	|		ВнутренниеУслугиСторно.Подразделение,
	|		ВнутренниеУслугиСторно.Субконто1,
	|		ВнутренниеУслугиСторно.Субконто2,
	|		ВнутренниеУслугиСторно.Субконто3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0,
	|		0,
	|		-ВнутренниеУслугиСторно.Сумма,
	|		-ВнутренниеУслугиСторно.СуммаНУ,
	|		-ВнутренниеУслугиСторно.СуммаПР,
	|		-ВнутренниеУслугиСторно.СуммаВР
	|	ИЗ
	|		ВТ_УслугиСобственнымПодразделениям КАК ВнутренниеУслугиСторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнутренниеУслуги.Счет,
	|		ВнутренниеУслуги.Подразделение,
	|		ВнутренниеУслуги.Субконто1,
	|		ВнутренниеУслуги.Субконто2,
	|		ВнутренниеУслуги.Субконто3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|		ВнутренниеУслуги.Номенклатура,
	|		0,
	|		0,
	|		ВнутренниеУслуги.Сумма,
	|		ВнутренниеУслуги.СуммаНУ,
	|		ВнутренниеУслуги.СуммаПР,
	|		ВнутренниеУслуги.СуммаВР
	|	ИЗ
	|		ВТ_УслугиСобственнымПодразделениям КАК ВнутренниеУслуги
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыКт.СчетКт,
	|		ОборотыКт.ПодразделениеКт,
	|		ОборотыКт.СубконтоКт1,
	|		ОборотыКт.СубконтоКт2,
	|		ОборотыКт.СубконтоКт3,
	|		ВЫБОР
	|			КОГДА СчетаРасходов.Счет ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ОборотыКт.СчетДт
	|		КОНЕЦ,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0,
	|		-ОборотыКт.Количество,
	|		-ОборотыКт.Сумма,
	|		-ОборотыКт.СуммаНУ,
	|		-ОборотыКт.СуммаПР,
	|		-ОборотыКт.СуммаВР
	|	ИЗ
	|		ОборотыФикс КАК ОборотыКт
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|			ПО ОборотыКт.СчетДт = СчетаРасходов.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительнаяАналитикаРасходов.Счет,
	|		ДополнительнаяАналитикаРасходов.Подразделение,
	|		ДополнительнаяАналитикаРасходов.Субконто1,
	|		ДополнительнаяАналитикаРасходов.Субконто2,
	|		ДополнительнаяАналитикаРасходов.Субконто3,
	|		ДополнительнаяАналитикаРасходов.КорСчет,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		0,
	|		0,
	|		-ДополнительнаяАналитикаРасходов.Сумма,
	|		-ДополнительнаяАналитикаРасходов.СуммаНУ,
	|		-ДополнительнаяАналитикаРасходов.СуммаПР,
	|		-ДополнительнаяАналитикаРасходов.СуммаВР
	|	ИЗ
	|		ВТ_ДополнительнаяАналитикаРасходов КАК ДополнительнаяАналитикаРасходов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительнаяАналитикаРасходов.Счет,
	|		ДополнительнаяАналитикаРасходов.Подразделение,
	|		ДополнительнаяАналитикаРасходов.Субконто1,
	|		ДополнительнаяАналитикаРасходов.Субконто2,
	|		ДополнительнаяАналитикаРасходов.Субконто3,
	|		ДополнительнаяАналитикаРасходов.КорСчет,
	|		ДополнительнаяАналитикаРасходов.Номенклатура,
	|		ДополнительнаяАналитикаРасходов.КоличествоМатериала,
	|		0,
	|		ДополнительнаяАналитикаРасходов.Сумма,
	|		ДополнительнаяАналитикаРасходов.СуммаНУ,
	|		ДополнительнаяАналитикаРасходов.СуммаПР,
	|		ДополнительнаяАналитикаРасходов.СуммаВР
	|	ИЗ
	|		ВТ_ДополнительнаяАналитикаРасходов КАК ДополнительнаяАналитикаРасходов) КАК Поступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Поступления.Подразделение, &ПустоеПодразделение),
	|	Поступления.Счет,
	|	Поступления.Субконто1,
	|	Поступления.Субконто2,
	|	Поступления.Субконто3,
	|	Поступления.КорСчет,
	|	Поступления.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, Поступления.Счет) КАК Счет,
	|	Поступления.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто1, СубконтоЗатрат.ЗначениеПоУмолчанию1)
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто2, СубконтоЗатрат.ЗначениеПоУмолчанию2)
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто3, СубконтоЗатрат.ЗначениеПоУмолчанию3)
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА КорСчетаРасходов.Счет ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(СчетаТорговойНаценкиКор.СчетНаценки, Поступления.КорСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Поступления.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(Поступления.КоличествоМатериала) КАК КоличествоМатериала,
	|	СУММА(Поступления.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА Поступления.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА 0
	|			ИНАЧЕ Поступления.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Поступления.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВЫБОР
	|			КОГДА Поступления.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА 0
	|			ИНАЧЕ Поступления.СуммаПР
	|		КОНЕЦ) КАК СуммаПР,
	|	СУММА(ВЫБОР
	|			КОГДА Поступления.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|				ТОГДА -Поступления.СуммаНУ
	|			ИНАЧЕ Поступления.СуммаВР
	|		КОНЕЦ) КАК СуммаВР
	|ПОМЕСТИТЬ Поступления
	|ИЗ
	|	ВТ_Поступления КАК Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Поступления.Счет = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК КорСчетаРасходов
	|		ПО Поступления.КорСчет = КорСчетаРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценки
	|		ПО Поступления.Счет = СчетаТорговойНаценки.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценкиКор
	|		ПО Поступления.КорСчет = СчетаТорговойНаценкиКор.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Поступления.Счет = СубконтоЗатрат.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, Поступления.Счет),
	|	Поступления.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто1, СубконтоЗатрат.ЗначениеПоУмолчанию1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто2, СубконтоЗатрат.ЗначениеПоУмолчанию2)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто3, СубконтоЗатрат.ЗначениеПоУмолчанию3)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Поступления.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорСчетаРасходов.Счет ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(СчетаТорговойНаценкиКор.СчетНаценки, Поступления.КорСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Поступления.Количество) <> 0
	|		ИЛИ СУММА(Поступления.КоличествоМатериала) <> 0
	|		ИЛИ СУММА(Поступления.Сумма) <> 0
	|		ИЛИ СУММА(Поступления.СуммаНУ) <> 0
	|		ИЛИ СУММА(Поступления.СуммаПР) <> 0
	|		ИЛИ СУММА(Поступления.СуммаВР) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов),
	|	Поступления.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто1, СубконтоЗатрат.ЗначениеПоУмолчанию1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто2, СубконтоЗатрат.ЗначениеПоУмолчанию2)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто3, СубконтоЗатрат.ЗначениеПоУмолчанию3)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Поступления.Номенклатура
	|	КОНЕЦ,
	|	0,
	|	СУММА(Поступления.Количество),
	|	СУММА(Поступления.Сумма),
	|	0,
	|	СУММА(Поступления.СуммаПР),
	|	СУММА(Поступления.СуммаВР) + СУММА(Поступления.СуммаНУ)
	|ИЗ
	|	ВТ_Поступления КАК Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Поступления.Счет = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Поступления.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	Поступления.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Поступления.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто1, СубконтоЗатрат.ЗначениеПоУмолчанию1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто2, СубконтоЗатрат.ЗначениеПоУмолчанию2)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Поступления.Субконто3, СубконтоЗатрат.ЗначениеПоУмолчанию3)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Поступления.Номенклатура
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Поступления.Количество) <> 0
	|		ИЛИ СУММА(Поступления.СуммаНУ) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Поступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_УслугиСобственнымПодразделениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДополнительнаяАналитикаРасходов";
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу ПредварительныеПроводкиВыпуск
//
// Среди движений учета затрат есть такие, про которые известна дополнительная информация, не хранящаяся в основных проводках.
// А именно, для движений по выпуску продукции и услуг по плановой стоимости известно:
// - факт, что это выпуск
// - номенклатура, включая номенклатуру внутренних услуг.
// Эти данные поместим во временную таблицу.
//
// Информация о выпуске хранится в регистре накопления ВыпускПродукцииУслуг и/или на счете 40.
// При применении счета 40:
// - если используется транзитный алгоритм учета выпуска, то данные регистра модифицируем, "смешиваем" с данными проводок:
//  -- в регистре ВыпускПродукцииУслуг не упоминается счет 40
//  -- а проводки сформированы по счету 40
// - если на счете 40 ведется учет по Продукции, то данных на счете 40 достаточно, данные регистра избыточны, их не учитываем.
//
// В любом случае речь идет только о суммовых движениях.
//
Процедура СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация, ТолькоРегистрНакопления = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",              КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение",       БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Если ТолькоРегистрНакопления Тогда
		ИсточникДанныхВыпуска = "РегистрНакопления";
	Иначе
		ИсточникДанныхВыпуска = ИсточникДанныхВыпуска(Период, Организация);
	КонецЕсли;
		
	Если ИсточникДанныхВыпуска = "Счет40" Тогда
		
		// Берем данные со счета выпуска - с той детализацией, что есть на счете
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ПлановаяСтоимость.СчетДт КАК СчетДт,
		|	ЕСТЬNULL(ПлановаяСтоимость.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
		|					ТОГДА ПлановаяСтоимость.СубконтоДт1
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
		|					ТОГДА ПлановаяСтоимость.СубконтоДт2
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
		|					ТОГДА ПлановаяСтоимость.СубконтоДт3
		|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураДт,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ПлановаяСтоимость.СубконтоКт3 КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПродукцияДт,
		|	ПлановаяСтоимость.СчетКт КАК СчетКт,
		|	ЕСТЬNULL(ПлановаяСтоимость.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
		|	ЕСТЬNULL(ПлановаяСтоимость.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураКт,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПродукцияКт,
		|	ИСТИНА КАК ФиксированнаяСтоимость,
		|	ЛОЖЬ КАК ЭтоВыпуск,
		|	ЕСТЬNULL(ПлановаяСтоимость.СуммаОборот, 0) КАК Сумма,
		|	ЕСТЬNULL(ПлановаяСтоимость.СуммаНУОборотКт, 0) КАК СуммаНУ,
		|	ЕСТЬNULL(ПлановаяСтоимость.СуммаПРОборотКт, 0) КАК СуммаПР,
		|	ЕСТЬNULL(ПлановаяСтоимость.СуммаВРОборотКт, 0) КАК СуммаВР
		|ПОМЕСТИТЬ ПредварительныеПроводкиВыпуск
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , , , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции), , Организация = &Организация) КАК ПлановаяСтоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
		|		ПО ПлановаяСтоимость.СчетДт = СчетаЗапасов.Счет";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
		
		ТаблицаПлановаяСтоимость = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, "ПлановаяСтоимость");
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ВыпускПродукции);
		
		// Предварительные проводки отражают выпуск по плановой стоимости - отбираем только их
		ВидыСтоимости = СвойстваСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости];
		Если ВидыСтоимости <> Неопределено Тогда
			
			Отбор = СтрШаблон("СубконтоКт%1 = ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)", ВидыСтоимости);
			
			СхемыЗапросов.ДополнитьУсловиеРегистраБухгалтерии(ТаблицаПлановаяСтоимость, Отбор);
			
		КонецЕсли;
		
		Продукция = СвойстваСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция];
		Если Продукция <> Неопределено Тогда
			
			ВыражениеПродукция = СхемыЗапросов.ВыражениеПриведениеТипа(
				СтрШаблон("ПлановаяСтоимость.СубконтоКт%1", Продукция),
				Тип("СправочникСсылка.Номенклатура"));
				
			СхемыЗапросов.УстановитьВыражение(ТаблицаПлановаяСтоимость, "ПродукцияКт", ВыражениеПродукция);
			
		КонецЕсли;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	Иначе
		
		Если ИсточникДанныхВыпуска = "РегистрНакопленияСчет40" Тогда
			Запрос.УстановитьПараметр("ИспользоватьСчетВыпускПродукции", Истина);
			Запрос.УстановитьПараметр(
				"УчетНаСчетеВыпускПродукцииПоПодразделениям", 
				ПланыСчетов.Хозрасчетный.ВыпускПродукции.УчетПоПодразделениям);
			ВидыСубконтоСчет40 = ПланыСчетов.Хозрасчетный.ВыпускПродукции.ВидыСубконто;
			ВидыСтоимости      = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости);
			Если ВидыСтоимости = Неопределено Тогда
				Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции", 0);
			Иначе
				Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции", ВидыСтоимости.НомерСтроки);
			КонецЕсли;
			НоменклатурныеГруппы = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
			Если НоменклатурныеГруппы = Неопределено Тогда
				Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", 0);
			Иначе
				Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", НоменклатурныеГруппы.НомерСтроки);
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("ИспользоватьСчетВыпускПродукции",                  Ложь);
			Запрос.УстановитьПараметр("УчетНаСчетеВыпускПродукцииПоПодразделениям",       Ложь);
			Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции",        0);
			Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", 0);
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыпускПродукцииУслуг.Продукция КАК Продукция,
		|	ВыпускПродукцииУслуг.СчетСписания КАК СчетДт,
		|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеДт,
		|	ВыпускПродукцииУслуг.СубконтоСписания1 КАК СубконтоДт1,
		|	ВыпускПродукцииУслуг.СубконтоСписания2 КАК СубконтоДт2,
		|	ВыпускПродукцииУслуг.СубконтоСписания3 КАК СубконтоДт3,
		|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетКт,
		|	ВыпускПродукцииУслуг.Подразделение КАК ПодразделениеКт,
		|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаКт,
		|	ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот КАК Сумма
		|ПОМЕСТИТЬ ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И СчетЗатрат В
		|					(ВЫБРАТЬ
		|						СчетаРасходов.Счет
		|					ИЗ
		|						СчетаРасходов)) КАК ВыпускПродукцииУслуг
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетКт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проводки.СчетДт КАК СчетДт,
		|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
		|	Проводки.СубконтоДт1 КАК СубконтоДт1,
		|	Проводки.СубконтоДт2 КАК СубконтоДт2,
		|	Проводки.СубконтоДт3 КАК СубконтоДт3,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
		|					ТОГДА Проводки.СубконтоДт1
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
		|					ТОГДА Проводки.СубконтоДт2
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
		|					ТОГДА Проводки.СубконтоДт3
		|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураДт,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
		|					ТОГДА Проводки.СубконтоДт1
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
		|					ТОГДА Проводки.СубконтоДт2
		|				КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
		|					ТОГДА Проводки.СубконтоДт3
		|				ИНАЧЕ Проводки.Продукция
		|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПродукцияДт,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСчетВыпускПродукции
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
		|		ИНАЧЕ Проводки.СчетКт
		|	КОНЕЦ КАК СчетКт,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьСчетВыпускПродукции
		|				ИЛИ &УчетНаСчетеВыпускПродукцииПоПодразделениям
		|			ТОГДА Проводки.ПодразделениеКт
		|		ИНАЧЕ &ПустоеПодразделение
		|	КОНЕЦ КАК ПодразделениеКт,
		|	ВЫБОР
		|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
		|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 1
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		КОГДА &ИспользоватьСчетВыпускПродукции
		|			ТОГДА ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
		|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 2
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
		|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 2
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		КОГДА &ИспользоватьСчетВыпускПродукции
		|			ТОГДА ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
		|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК СубконтоКт2,
		|	ВЫБОР
		|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 3
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
		|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 3
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		КОГДА &ИспользоватьСчетВыпускПродукции
		|			ТОГДА ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
		|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|			ТОГДА Проводки.НоменклатурнаяГруппаКт
		|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК СубконтоКт3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураКт,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПродукцияКт,
		|	ЛОЖЬ КАК ФиксированнаяСтоимость,
		|	ИСТИНА КАК ЭтоВыпуск,
		|	Проводки.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА &ПлательщикНалогаНаПрибыль
		|			ТОГДА Проводки.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНУ,
		|	0 КАК СуммаПР,
		|	0 КАК СуммаВР
		|ПОМЕСТИТЬ ПредварительныеПроводкиВыпуск
		|ИЗ
		|	ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов КАК Проводки
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
		|		ПО Проводки.СчетДт = СчетаЗапасов.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
		|		ПО Проводки.СчетКт = СубконтоЗатрат.Счет
		|ГДЕ
		|	Проводки.Сумма <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу движений Выбытия.
Процедура СоздатьВыбытия(МенеджерВременныхТаблиц, Период, Организация)
	
	// Выбытия - это движения по Кт счетов учета, кроме операций фиксированной стоимости (см. СоздатьОборотыФикс())
	
	// Выбытия включают в себя движения внутри учета затрат и выбытия из него.
	
	// Выбытия делятся на движения
	// - с "однородным" количеством, которое никогда не меняется в ходе движения ("перемещения")
	// - с "разнородным" количеством
	// Принимаем допущение, что если движение ограничено счетами запасов и с обеих сторон движения номенклатура не изменилась,
	// то это движения с "однородным" количеством.
	// У таких движений во временной таблице установлен флаг БезИзмененияКоличества
	// (Важно: если нет номенклатуры на любой из сторон проводки, то это движение с "разнородным" количеством)
	
	// Номенклатура используется для вершин, соответствующих запасам, а также, для вершин, соответствующих прямым расходам.
	// В последнем случае имеется в виду номенклатура запасов, потраченных на производство.
	// См. также СтруктураЗатрат.СоздатьКлючи для стандартного варианта.
	
	// Об использовании пар счетов 41.11/42.01 и 10.12.1/10.12.2 см. комментарий в СоздатьНачальноеСальдо
	// Выбытие со счета 10.12.1 в налоговом учете - всегда в рамках контура учета затрат.
	// В бухгалтерском учете может быть
	// - внутри контура затрат, если речь идет о движении в рамках счета 10.12.1
	// - вне контура затрат, если речь идет о других счетах - так как стоимость таких запасов включена в затраты при приобретении.
	// В последнем случае для идентификации такого движения "в никуда" используем служебный счет МЦ.04
	// Счет МЦ.04 здесь выбран исходя из цели, для которой ведется учет бухгалтерских сумм, но это не значит,
	// что таких записей достаточно можно использовать для формирования проводок по этому  приводить 
	
	// Если ведется учет по розничным ценам, то не формируем проводки вида Дт 90 Кт 42,
	// так как такие проводки формируются другой регламентной операцией.
	// Для того, чтобы исключить такие проводки, накладываем условие с использованием таблиц
	// СчетаСебестоимостьПродаж и СчетаТорговойНаценкиАТТ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",        НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",  БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаСебестоимостьПродаж
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.КорСчет КАК СчетДт,
	|	ЕСТЬNULL(Обороты.ПодразделениеКор, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(Обороты.КорСубконто1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Обороты.КорСубконто2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Обороты.КорСубконто3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Обороты.Счет КАК СчетКт,
	|	ЕСТЬNULL(Обороты.Подразделение, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Обороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Обороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Обороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	Обороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов) КАК ДанныеЗабалансовогоУчета,
	|	Обороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов)
	|		И Обороты.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов) КАК ПереходНаЗабалансовыйУчет,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Обороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ЕСТЬNULL(Обороты.СуммаОборотКт, 0) КАК Сумма,
	|	ЕСТЬNULL(Обороты.СуммаНУОборотКт, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(Обороты.СуммаПРОборотКт, 0) КАК СуммаПР,
	|	ЕСТЬNULL(Обороты.СуммаВРОборотКт, 0) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Выбытия
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаЗатрат.Счет
	|				ИЗ
	|					СчетаЗатрат),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК Обороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыФикс.СчетДт,
	|	ОборотыФикс.ПодразделениеДт,
	|	ОборотыФикс.СубконтоДт1,
	|	ОборотыФикс.СубконтоДт2,
	|	ОборотыФикс.СубконтоДт3,
	|	ОборотыФикс.СчетКт,
	|	ОборотыФикс.ПодразделениеКт,
	|	ОборотыФикс.СубконтоКт1,
	|	ОборотыФикс.СубконтоКт2,
	|	ОборотыФикс.СубконтоКт3,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	-ОборотыФикс.Количество,
	|	-ОборотыФикс.Сумма,
	|	-ОборотыФикс.СуммаНУ,
	|	-ОборотыФикс.СуммаПР,
	|	-ОборотыФикс.СуммаВР
	|ИЗ
	|	ОборотыФикс КАК ОборотыФикс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыФикс.СчетДт,
	|	ОборотыФикс.ПодразделениеДт,
	|	ОборотыФикс.СубконтоДт1,
	|	ОборотыФикс.СубконтоДт2,
	|	ОборотыФикс.СубконтоДт3,
	|	ОборотыФикс.СчетКт,
	|	ОборотыФикс.ПодразделениеКт,
	|	ОборотыФикс.СубконтоКт1,
	|	ОборотыФикс.СубконтоКт2,
	|	ОборотыФикс.СубконтоКт3,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	-ОборотыФикс.Количество,
	|	-ОборотыФикс.Сумма,
	|	-ОборотыФикс.СуммаНУ,
	|	-ОборотыФикс.СуммаПР,
	|	-ОборотыФикс.СуммаВР
	|ИЗ
	|	ФиксированнаяСтоимость КАК ОборотыФикс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыФикс.СчетДт,
	|	ОборотыФикс.ПодразделениеДт,
	|	ОборотыФикс.СубконтоДт1,
	|	ОборотыФикс.СубконтоДт2,
	|	ОборотыФикс.СубконтоДт3,
	|	ОборотыФикс.СчетКт,
	|	ОборотыФикс.ПодразделениеКт,
	|	ОборотыФикс.СубконтоКт1,
	|	ОборотыФикс.СубконтоКт2,
	|	ОборотыФикс.СубконтоКт3,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	ОборотыФикс.Сумма,
	|	ОборотыФикс.СуммаНУ,
	|	ОборотыФикс.СуммаПР,
	|	ОборотыФикс.СуммаВР
	|ИЗ
	|	ФиксированнаяСтоимость КАК ОборотыФикс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.СчетДт КАК СчетДт,
	|	Обороты.ПодразделениеДт КАК ПодразделениеДт,
	|	Обороты.СубконтоДт1 КАК СубконтоДт1,
	|	Обороты.СубконтоДт2 КАК СубконтоДт2,
	|	Обороты.СубконтоДт3 КАК СубконтоДт3,
	|	Обороты.НоменклатураДт КАК НоменклатураДт,
	|	Обороты.СчетКт КАК СчетКт,
	|	Обороты.ПодразделениеКт КАК ПодразделениеКт,
	|	Обороты.СубконтоКт1 КАК СубконтоКт1,
	|	Обороты.СубконтоКт2 КАК СубконтоКт2,
	|	Обороты.СубконтоКт3 КАК СубконтоКт3,
	|	Обороты.НоменклатураКт КАК НоменклатураКт,
	|	Обороты.Выпуск КАК Выпуск,
	|	Обороты.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	Обороты.ДанныеЗабалансовогоУчета КАК ДанныеЗабалансовогоУчета,
	|	Обороты.ПереходНаЗабалансовыйУчет КАК ПереходНаЗабалансовыйУчет,
	|	СУММА(Обороты.Количество) КАК Количество,
	|	СУММА(Обороты.Сумма) КАК Сумма,
	|	СУММА(Обороты.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Обороты.СуммаПР) КАК СуммаПР,
	|	СУММА(Обороты.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_ВыбытияВыпуск
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.СчетДт КАК СчетДт,
	|		Обороты.ПодразделениеДт КАК ПодразделениеДт,
	|		Обороты.СубконтоДт1 КАК СубконтоДт1,
	|		Обороты.СубконтоДт2 КАК СубконтоДт2,
	|		Обороты.СубконтоДт3 КАК СубконтоДт3,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт3 КАК Справочник.Номенклатура)
	|			КОГДА СчетаПрямыхРасходовДт.Счет ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ КАК НоменклатураДт,
	|		Обороты.СчетКт КАК СчетКт,
	|		Обороты.ПодразделениеКт КАК ПодразделениеКт,
	|		Обороты.СубконтоКт1 КАК СубконтоКт1,
	|		Обороты.СубконтоКт2 КАК СубконтоКт2,
	|		Обороты.СубконтоКт3 КАК СубконтоКт3,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ КАК НоменклатураКт,
	|		ЛОЖЬ КАК Выпуск,
	|		Обороты.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|		ЛОЖЬ КАК ДанныеЗабалансовогоУчета,
	|		ЛОЖЬ КАК ПереходНаЗабалансовыйУчет,
	|		Обороты.Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА Обороты.ДанныеЗабалансовогоУчета
	|				ТОГДА 0
	|			ИНАЧЕ Обороты.Сумма
	|		КОНЕЦ КАК Сумма,
	|		Обороты.СуммаНУ КАК СуммаНУ,
	|		ВЫБОР
	|			КОГДА Обороты.ДанныеЗабалансовогоУчета
	|				ТОГДА 0
	|			ИНАЧЕ Обороты.СуммаПР
	|		КОНЕЦ КАК СуммаПР,
	|		ВЫБОР
	|			КОГДА Обороты.ДанныеЗабалансовогоУчета
	|				ТОГДА -Обороты.СуммаНУ
	|			ИНАЧЕ Обороты.СуммаВР
	|		КОНЕЦ КАК СуммаВР
	|	ИЗ
	|		ВТ_Выбытия КАК Обороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовДт
	|			ПО Обороты.СчетДт = СчетаЗапасовДт.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовКт
	|			ПО Обороты.СчетКт = СчетаЗапасовКт.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаПрямыхРасходов КАК СчетаПрямыхРасходовДт
	|			ПО Обороты.СчетДт = СчетаПрямыхРасходовДт.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Обороты.ПереходНаЗабалансовыйУчет
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Обороты.ПереходНаЗабалансовыйУчет
	|				ТОГДА Обороты.ПодразделениеКт
	|			ИНАЧЕ Обороты.ПодразделениеДт
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Обороты.ПереходНаЗабалансовыйУчет
	|				ТОГДА Обороты.СубконтоКт1
	|			ИНАЧЕ Обороты.СубконтоДт1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Обороты.ПереходНаЗабалансовыйУчет
	|				ТОГДА Обороты.СубконтоКт2
	|			ИНАЧЕ Обороты.СубконтоДт2
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Обороты.ПереходНаЗабалансовыйУчет
	|				ТОГДА Обороты.СубконтоКт3
	|			ИНАЧЕ Обороты.СубконтоДт3
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ,
	|		Обороты.СчетКт,
	|		Обороты.ПодразделениеКт,
	|		Обороты.СубконтоКт1,
	|		Обороты.СубконтоКт2,
	|		Обороты.СубконтоКт3,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		Обороты.ФиксированнаяСтоимость,
	|		ИСТИНА,
	|		Обороты.ПереходНаЗабалансовыйУчет,
	|		Обороты.Количество,
	|		Обороты.Сумма,
	|		0,
	|		Обороты.СуммаПР,
	|		Обороты.СуммаВР + Обороты.СуммаНУ
	|	ИЗ
	|		ВТ_Выбытия КАК Обороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовДт
	|			ПО Обороты.СчетДт = СчетаЗапасовДт.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовКт
	|			ПО Обороты.СчетКт = СчетаЗапасовКт.Счет
	|	ГДЕ
	|		Обороты.ДанныеЗабалансовогоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускСторно.СчетДт,
	|		ВыпускСторно.ПодразделениеДт,
	|		ВыпускСторно.СубконтоДт1,
	|		ВыпускСторно.СубконтоДт2,
	|		ВыпускСторно.СубконтоДт3,
	|		ВыпускСторно.НоменклатураДт,
	|		ВыпускСторно.СчетКт,
	|		ВыпускСторно.ПодразделениеКт,
	|		ВыпускСторно.СубконтоКт1,
	|		ВыпускСторно.СубконтоКт2,
	|		ВыпускСторно.СубконтоКт3,
	|		ВыпускСторно.НоменклатураКт,
	|		ЛОЖЬ,
	|		ВыпускСторно.ФиксированнаяСтоимость,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		0,
	|		-ВыпускСторно.Сумма,
	|		-ВыпускСторно.СуммаНУ,
	|		-ВыпускСторно.СуммаПР,
	|		-ВыпускСторно.СуммаВР
	|	ИЗ
	|		ПредварительныеПроводкиВыпуск КАК ВыпускСторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Выпуск.СчетДт,
	|		Выпуск.ПодразделениеДт,
	|		Выпуск.СубконтоДт1,
	|		Выпуск.СубконтоДт2,
	|		Выпуск.СубконтоДт3,
	|		Выпуск.ПродукцияДт,
	|		Выпуск.СчетКт,
	|		Выпуск.ПодразделениеКт,
	|		Выпуск.СубконтоКт1,
	|		Выпуск.СубконтоКт2,
	|		Выпуск.СубконтоКт3,
	|		Выпуск.ПродукцияКт,
	|		Выпуск.ЭтоВыпуск,
	|		Выпуск.ФиксированнаяСтоимость,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		0,
	|		Выпуск.Сумма,
	|		Выпуск.СуммаНУ,
	|		Выпуск.СуммаПР,
	|		Выпуск.СуммаВР
	|	ИЗ
	|		ПредварительныеПроводкиВыпуск КАК Выпуск) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.СчетДт,
	|	Обороты.ПодразделениеДт,
	|	Обороты.СубконтоДт1,
	|	Обороты.СубконтоДт2,
	|	Обороты.СубконтоДт3,
	|	Обороты.НоменклатураДт,
	|	Обороты.СчетКт,
	|	Обороты.ПодразделениеКт,
	|	Обороты.СубконтоКт1,
	|	Обороты.СубконтоКт2,
	|	Обороты.СубконтоКт3,
	|	Обороты.НоменклатураКт,
	|	Обороты.Выпуск,
	|	Обороты.ФиксированнаяСтоимость,
	|	Обороты.ДанныеЗабалансовогоУчета,
	|	Обороты.ПереходНаЗабалансовыйУчет
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Обороты.Количество) <> 0
	|		ИЛИ СУММА(Обороты.Сумма) <> 0
	|		ИЛИ СУММА(Обороты.СуммаНУ) <> 0
	|		ИЛИ СУММА(Обороты.СуммаПР) <> 0
	|		ИЛИ СУММА(Обороты.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Движения.ДанныеЗабалансовогоУчета
	|				И НЕ Движения.ПереходНаЗабалансовыйУчет
	|	КОНЕЦ КАК ВнутреннееДвижение,
	|	ВЫБОР
	|		КОГДА СчетаЗапасовКт.Счет ЕСТЬ NULL
	|				ИЛИ СчетаЗатратДт.РазделУчета ЕСТЬ NULL
	|				ИЛИ СчетаЗатратДт.РазделУчета <> ""Запасы""
	|			ТОГДА ЛОЖЬ
	|		КОГДА Движения.НоменклатураКт = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Движения.НоменклатураКт <> Движения.НоменклатураДт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезИзмененияКоличества,
	|	Движения.Выпуск КАК Выпуск,
	|	ВЫБОР
	|		КОГДА Движения.ДанныеЗабалансовогоУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов)
	|		ИНАЧЕ ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт)
	|	КОНЕЦ КАК СчетКт,
	|	Движения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт1
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт2
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт3
	|	КОНЕЦ КАК СубконтоКт3,
	|	Движения.НоменклатураКт КАК НоменклатураКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетКт,
	|	ЕСТЬNULL(СчетаТорговойНаценкиДт.СчетНаценки, Движения.СчетДт) КАК СчетДт,
	|	Движения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА СубконтоЗатратДт.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт1, СубконтоЗатратДт.ЗначениеПоУмолчанию1)
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА СубконтоЗатратДт.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт2, СубконтоЗатратДт.ЗначениеПоУмолчанию2)
	|	КОНЕЦ КАК СубконтоДт2,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт3
	|		КОГДА СубконтоЗатратДт.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт3, СубконтоЗатратДт.ЗначениеПоУмолчанию3)
	|	КОНЕЦ КАК СубконтоДт3,
	|	Движения.НоменклатураДт КАК НоменклатураДт,
	|	ВЫБОР
	|		КОГДА НЕ СчетаРасходовДт.Счет ЕСТЬ NULL
	|				И СчетаРасходовКт.Счет ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчетДт,
	|	Движения.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	СУММА(Движения.Количество) КАК Количество,
	|	СУММА(Движения.Сумма) КАК Сумма,
	|	СУММА(Движения.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Движения.СуммаПР) КАК СуммаПР,
	|	СУММА(Движения.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ Выбытия
	|ИЗ
	|	ВТ_ВыбытияВыпуск КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатратДт
	|		ПО Движения.СчетДт = СчетаЗатратДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовКт
	|		ПО Движения.СчетКт = СчетаЗапасовКт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходовДт
	|		ПО Движения.СчетДт = СчетаРасходовДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценкиДт
	|		ПО Движения.СчетДт = СчетаТорговойНаценкиДт.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценкиКт
	|		ПО Движения.СчетКт = СчетаТорговойНаценкиКт.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаСебестоимостьПродаж КАК СчетаСебестоимостьПродажДт
	|		ПО Движения.СчетДт = СчетаСебестоимостьПродажДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходовКт
	|		ПО Движения.СчетКт = СчетаРасходовКт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратДт
	|		ПО Движения.СчетДт = СубконтоЗатратДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратКт
	|		ПО Движения.СчетКт = СубконтоЗатратКт.Счет
	|ГДЕ
	|	(СчетаСебестоимостьПродажДт.Счет ЕСТЬ NULL
	|			ИЛИ СчетаТорговойНаценкиКт.СчетНаценки ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Движения.ДанныеЗабалансовогоУчета
	|				И НЕ Движения.ПереходНаЗабалансовыйУчет
	|	КОНЕЦ,
	|	Движения.ПодразделениеДт,
	|	Движения.ПодразделениеКт,
	|	Движения.НоменклатураДт,
	|	Движения.НоменклатураКт,
	|	ВЫБОР
	|		КОГДА СчетаЗапасовКт.Счет ЕСТЬ NULL
	|				ИЛИ СчетаЗатратДт.РазделУчета ЕСТЬ NULL
	|				ИЛИ СчетаЗатратДт.РазделУчета <> ""Запасы""
	|			ТОГДА ЛОЖЬ
	|		КОГДА Движения.НоменклатураКт = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Движения.НоменклатураКт <> Движения.НоменклатураДт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Движения.Выпуск,
	|	ВЫБОР
	|		КОГДА Движения.ДанныеЗабалансовогоУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов)
	|		ИНАЧЕ ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Движения.СубконтоКт3
	|	КОНЕЦ,
	|	ЕСТЬNULL(СчетаТорговойНаценкиДт.СчетНаценки, Движения.СчетДт),
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА СубконтоЗатратДт.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт1, СубконтоЗатратДт.ЗначениеПоУмолчанию1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА СубконтоЗатратДт.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт2, СубконтоЗатратДт.ЗначениеПоУмолчанию2)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL
	|			ТОГДА Движения.СубконтоДт3
	|		КОГДА СубконтоЗатратДт.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(Движения.СубконтоДт3, СубконтоЗатратДт.ЗначениеПоУмолчанию3)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СчетаРасходовДт.Счет ЕСТЬ NULL
	|				И СчетаРасходовКт.Счет ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	Движения.ФиксированнаяСтоимость
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Движения.Количество) <> 0
	|		ИЛИ СУММА(Движения.Сумма) <> 0
	|		ИЛИ СУММА(Движения.СуммаНУ) <> 0
	|		ИЛИ СУММА(Движения.СуммаПР) <> 0
	|		ИЛИ СУММА(Движения.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3,
	|	НоменклатураДт,
	|	КорСчетДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыбытияВыпуск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаСебестоимостьПродаж";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу НезавершенноеПроизводство с суммами, которые должны остаться в НЗП после оценки затрат
Процедура СоздатьНезавершенноеПроизводство(МенеджерВременныхТаблиц, Период, Организация, Пустая = Ложь)
	
	Если Пустая Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	&ПустоеПодразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
		|	0 КАК Сумма,
		|	0 КАК СуммаНУ
		|ПОМЕСТИТЬ НезавершенноеПроизводство
		|ГДЕ
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Номенклатура,
		|	КорСчет";
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",             БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ВестиУчетЗатратПоПодразделениям", ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"));
	
	// Данные документов ИнвентаризацияНЗП с отбором по счетам прямых расходов,
	// выраженные в виде набора субконто.
	
	// Важно, чтобы в качестве значений оборотных субконто (статьи затрат, продукции) были указаны пустые ссылки,
	// поскольку именно на такие ключи собираются прямые затраты со всех статей затрат, всей не выпущенной продукции.
	// См. ДобавитьПравилоНезавершенноеПроизводство
	// См. также СоздатьСтатьиКалькуляцииНачальноеСальдо()
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыНЗП.Ссылка.СчетЗатрат КАК Счет,
	|	ВЫБОР
	|		КОГДА &ВестиУчетЗатратПоПодразделениям = ИСТИНА
	|			ТОГДА СуммыНЗП.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	СУММА(СуммыНЗП.Сумма) КАК Сумма,
	|	СУММА(СуммыНЗП.СуммаНУ) КАК СуммаНУ
	|ПОМЕСТИТЬ НезавершенноеПроизводство
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.Состав КАК СуммыНЗП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО СуммыНЗП.Ссылка.СчетЗатрат = КалькуляционныеСчета.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО СуммыНЗП.Ссылка.СчетЗатрат = СубконтоЗатрат.Счет
	|ГДЕ
	|	СуммыНЗП.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СуммыНЗП.Ссылка.Организация = &Организация
	|	И СуммыНЗП.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыНЗП.Ссылка.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ВестиУчетЗатратПоПодразделениям = ИСТИНА
	|			ТОГДА СуммыНЗП.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьСтатьиКалькуляцииНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация, ВариантыСтруктурыЗатрат)
	
	НайденИсточник = Ложь;
	Для Каждого Вариант Из ВариантыСтруктурыЗатрат Цикл
		Если Вариант.ВнешниеИсточники.Найти("СтатьиКалькуляцииНачальноеСальдо") <> Неопределено Тогда
			НайденИсточник = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденИсточник Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийПериодРасчета = ДобавитьМесяц(Период, -1);
	РегистрыСведений.РасчетКалькуляцииСебестоимости.ПривестиПериодРасчета(ПредыдущийПериодРасчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПредыдущийПериодРасчета", ПредыдущийПериодРасчета);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",             БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	// в запросе следует учесть, что при отключении учета затрат по подразделениям данные регистра РасчетКалькуляцииСебестоимости
	// перестанут соответствовать данным регистра бухгалтерии Хозрасчетный: в Хозрасчетный подразделения будут очищены,
	// а в РасчетКалькуляцииСебестоимости - нет
	Запрос.УстановитьПараметр("ВестиУчетЗатратПоПодразделениям", ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"));
	
	// В отличие от СоздатьНезавершенноеПроизводство() важно, чтобы в качестве статьи затрат и продукции
	// было указано Неопределено, а не пустые значения соответствующих типов,
	// поскольку эти субконто оборотные и сальдо по ним будет иметь именно значение Неопределено - см. СоздатьНачальноеСальдо()
	
	// Для эффективного использования индекса в запросе применяется отбор по периоду на равенство.
	// Это допустимо, при условии, что 
	// - период расчета указывает на месяц, за который рассчитывается себестоимость
	// - при записи в регистр используется соглашение о том, какой конкретно датой кодировать месяц
	//   (см. РегистрыСведений.РасчетКалькуляцииСебестоимости.ПривестиПериодРасчета())
	// Используется основной индекс непериодического регистра сведений,
	// включающий все измерения, в том порядке, как они заданы при конфигурировании.
	// А именно, используется часть индекса ПериодРасчета + Организация + НезавершенноеПроизводство
	Запрос.Текст =
    "ВЫБРАТЬ
    |	СтруктураСтоимости.СчетВыпуска КАК Счет,
    |	ВЫБОР
    |		КОГДА &ВестиУчетЗатратПоПодразделениям = ИСТИНА
    |			ТОГДА СтруктураСтоимости.Подразделение
    |		ИНАЧЕ &ПустоеПодразделение
    |	КОНЕЦ КАК Подразделение,
    |	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
    |			ТОГДА СтруктураСтоимости.НоменклатурнаяГруппа
    |		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
    |	КОНЕЦ КАК Субконто1,
    |	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
    |			ТОГДА СтруктураСтоимости.НоменклатурнаяГруппа
    |		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
    |	КОНЕЦ КАК Субконто2,
    |	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
    |			ТОГДА СтруктураСтоимости.НоменклатурнаяГруппа
    |		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
    |	КОНЕЦ КАК Субконто3,
    |	СтруктураСтоимости.Продукция КАК Номенклатура,
    |	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
    |	СтруктураСтоимости.ПериодЗатрат КАК ПериодЗатрат,
    |	СтруктураСтоимости.СчетРасходов КАК СчетРасходов,
    |	СтруктураСтоимости.ЭлементЗатрат КАК ЭлементЗатрат,
    |	СтруктураСтоимости.СтатьяЗатрат КАК СтатьяЗатрат,
    |	СтруктураСтоимости.Материал КАК Материал,
    |	СтруктураСтоимости.КоличествоМатериала КАК КоличествоМатериала,
    |	СтруктураСтоимости.Сумма КАК Сумма,
    |	СтруктураСтоимости.СуммаНУ КАК СуммаНУ,
    |	СтруктураСтоимости.СуммаПР КАК СуммаПР,
    |	СтруктураСтоимости.СуммаВР КАК СуммаВР
    |ПОМЕСТИТЬ СтатьиКалькуляцииНачальноеСальдо
    |ИЗ
    |	РегистрСведений.РасчетКалькуляцииСебестоимости КАК СтруктураСтоимости
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
    |		ПО СтруктураСтоимости.СчетВыпуска = КалькуляционныеСчета.Счет
    |		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
    |		ПО СтруктураСтоимости.СчетВыпуска = СубконтоЗатрат.Счет
    |ГДЕ
    |	СтруктураСтоимости.Активность
    |	И СтруктураСтоимости.ПериодРасчета = &ПредыдущийПериодРасчета
    |	И СтруктураСтоимости.Организация = &Организация
    |	И СтруктураСтоимости.НезавершенноеПроизводство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Счет,
    |	Подразделение,
    |	Субконто1,
    |	Субконто2,
    |	Субконто3,
    |	Номенклатура,
    |	КорСчет";
	
	Запрос.Выполнить();
	
КонецПроцедуры
	
#КонецОбласти

#Область Кодирование // Преобразование исходных данных в абстрактное описание

Функция СоздатьКлючиВершин(МенеджерВременныхТаблиц)
	
	// МенеджерВременныхТаблиц содержит таблицы 
	// - СчетаЗатрат
	
	// - НачальноеСальдо
	// - Поступления
	// - Выбытия
	
	// Получим ключи всех затрат, известные из первичных документов
	
	// В менеджер добавляются временные таблицы КлючиВершин, ИдентификаторыВершин.
	// КлючиВершин позволяет по набору значений аналитики определить номер вершины,
	// ИдентификаторыВершин - по идентификатору определить аналитику и дополнительные сведения.
	// До распределения расходов количество записей в таблицах одинаковое:
	// они отличаются только индексами и составом полей с дополнительными сведениями.
	
	// После распределения расходов в таблице ИдентификаторыВершин могут присутствовать вершины,
	// которые отсутствуют в КлючиВершин.
	// Это связано с тем, что в ходе распределения могут появляться несколько вершин с одинаковой аналитикой учета,
	// отличающиеся нюансами налогового учета.
	// Одна (и только одна) из вершин с одинаковой аналитикой будет присутствовать в КлючиВершин.
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет КАК Счет,
	|	Вершины.Подразделение КАК Подразделение,
	|	Вершины.Субконто1 КАК Субконто1,
	|	Вершины.Субконто2 КАК Субконто2,
	|	Вершины.Субконто3 КАК Субконто3,
	|	Вершины.Номенклатура КАК Номенклатура,
	|	Вершины.КорСчет КАК КорСчет
	|ИЗ
	|	НачальноеСальдо КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет,
	|	Вершины.Подразделение,
	|	Вершины.Субконто1,
	|	Вершины.Субконто2,
	|	Вершины.Субконто3,
	|	Вершины.Номенклатура,
	|	Вершины.КорСчет
	|ИЗ
	|	Поступления КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.СчетДт,
	|	Вершины.ПодразделениеДт,
	|	Вершины.СубконтоДт1,
	|	Вершины.СубконтоДт2,
	|	Вершины.СубконтоДт3,
	|	Вершины.НоменклатураДт,
	|	Вершины.КорСчетДт
	|ИЗ
	|	Выбытия КАК Вершины
	|ГДЕ
	|	Вершины.ВнутреннееДвижение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.СчетКт,
	|	Вершины.ПодразделениеКт,
	|	Вершины.СубконтоКт1,
	|	Вершины.СубконтоКт2,
	|	Вершины.СубконтоКт3,
	|	Вершины.НоменклатураКт,
	|	Вершины.КорСчетКт
	|ИЗ
	|	Выбытия КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет,
	|	Вершины.Подразделение,
	|	Вершины.Субконто1,
	|	Вершины.Субконто2,
	|	Вершины.Субконто3,
	|	Вершины.Номенклатура,
	|	Вершины.КорСчет
	|ИЗ
	|	НезавершенноеПроизводство КАК Вершины
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	КлючиВершин = Запрос.Выполнить().Выгрузить();
	
	Если Не ЗначениеЗаполнено(КлючиВершин) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	// Пронумеруем вершины
	КлючиВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	
	Для Каждого СтрокаТаблицы Из КлючиВершин Цикл
		СтрокаТаблицы.Идентификатор = КлючиВершин.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	// Поместим ключи всех вершин во временную таблицу.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КлючиВершин", КлючиВершин);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ ВТ_КлючиВершин
	|ИЗ
	|	&КлючиВершин КАК КлючиВершин
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|";
	Запрос.Выполнить();
		
	// Создадим КлючиВершин и ИдентификаторыВершин
	
	// Счет ВыбытиеМалоценногоОборудованияИЗапасов - технический, регулирующий:
	// он участвует в логике регламентной операции для выделения отдельного "забалансового" контура учета,
	// но данные этого счета в расчете не участвуют.
	// Поэтому он не включается в СчетаЗатрат (СчетаЗапасов), но включается в перечень вершин.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(СчетаЗатрат.РазделУчета, ""Запасы"") КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершин
	|ИЗ
	|	ВТ_КлючиВершин КАК КлючиВершин
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО КлючиВершин.Счет = СчетаЗатрат.Счет
	|ГДЕ
	|	(СчетаЗатрат.Счет ЕСТЬ НЕ NULL 
	|			ИЛИ КлючиВершин.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.РазделУчета КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто1, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто1
	|	КОНЕЦ КАК НеОборотноеСубконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто2, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто2
	|	КОНЕЦ КАК НеОборотноеСубконто2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто3, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто3
	|	КОНЕЦ КАК НеОборотноеСубконто3
	|ПОМЕСТИТЬ ИдентификаторыВершин
	|ИЗ
	|	КлючиВершин КАК КлючиВершин
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО КлючиВершин.Счет = ОборотныеСубконто.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КлючиВершин";
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьВыбытияИдентификаторамиВершин(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Выбытия.ВнутреннееДвижение,
	|	Выбытия.БезИзмененияКоличества,
	|	Выбытия.Выпуск,
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт,
	|	КлючиВершин.Идентификатор КАК Приемник,
	|	КлючиВершин.РазделУчета КАК РазделУчетаПриемник,
	|	Выбытия.СчетДт,
	|	Выбытия.ПодразделениеДт,
	|	Выбытия.СубконтоДт1,
	|	Выбытия.СубконтоДт2,
	|	Выбытия.СубконтоДт3,
	|	Выбытия.НоменклатураДт,
	|	Выбытия.КорСчетДт,
	|	Выбытия.ФиксированнаяСтоимость,
	|	Выбытия.Количество,
	|	Выбытия.Сумма,
	|	Выбытия.СуммаНУ,
	|	Выбытия.СуммаПР,
	|	Выбытия.СуммаВР
	|ПОМЕСТИТЬ ВТ_Выбытия
	|ИЗ
	|	Выбытия КАК Выбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиВершин
	|		ПО Выбытия.СчетДт = КлючиВершин.Счет
	|			И Выбытия.ПодразделениеДт = КлючиВершин.Подразделение
	|			И Выбытия.СубконтоДт1 = КлючиВершин.Субконто1
	|			И Выбытия.СубконтоДт2 = КлючиВершин.Субконто2
	|			И Выбытия.СубконтоДт3 = КлючиВершин.Субконто3
	|			И Выбытия.НоменклатураДт = КлючиВершин.Номенклатура
	|			И Выбытия.КорСчетДт = КлючиВершин.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Выбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выбытия.ВнутреннееДвижение,
	|	Выбытия.БезИзмененияКоличества,
	|	Выбытия.Выпуск,
	|	КлючиВершин.Идентификатор КАК Источник,
	|	КлючиВершин.РазделУчета КАК РазделУчетаИсточник,
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт,
	|	Выбытия.Приемник КАК Приемник,
	|	Выбытия.РазделУчетаПриемник,
	|	Выбытия.СчетДт,
	|	Выбытия.ПодразделениеДт,
	|	Выбытия.СубконтоДт1,
	|	Выбытия.СубконтоДт2,
	|	Выбытия.СубконтоДт3,
	|	Выбытия.НоменклатураДт,
	|	Выбытия.КорСчетДт,
	|	Выбытия.ФиксированнаяСтоимость,
	|	Выбытия.Количество,
	|	Выбытия.Сумма,
	|	Выбытия.СуммаНУ,
	|	Выбытия.СуммаПР,
	|	Выбытия.СуммаВР
	|ПОМЕСТИТЬ Выбытия
	|ИЗ
	|	ВТ_Выбытия КАК Выбытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиВершин
	|		ПО Выбытия.СчетКт = КлючиВершин.Счет
	|			И Выбытия.ПодразделениеКт = КлючиВершин.Подразделение
	|			И Выбытия.СубконтоКт1 = КлючиВершин.Субконто1
	|			И Выбытия.СубконтоКт2 = КлючиВершин.Субконто2
	|			И Выбытия.СубконтоКт3 = КлючиВершин.Субконто3
	|			И Выбытия.НоменклатураКт = КлючиВершин.Номенклатура
	|			И Выбытия.КорСчетКт = КлючиВершин.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выбытия";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Оценка // Алгоритмы оценки стоимости

#Область КоллекцияСумм // Соглашения при работе с суммами

Функция ОписаниеКоллекцииСумм(ИспользуетсяНалоговыйУчет = Истина, ИспользуютсяРазницыПоНалогуНаПрибыль = Истина, РазделятьНебалансовые = Ложь)
	
	Если Не РазделятьНебалансовые Тогда
		Возврат НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(ИспользуетсяНалоговыйУчет, ИспользуютсяРазницыПоНалогуНаПрибыль);
	Иначе
	
		ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
		
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет", "Сумма");
		
		Если ИспользуетсяНалоговыйУчет Тогда
			КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУДт,СуммаНУКт");
		КонецЕсли;
		
		Если ИспользуютсяРазницыПоНалогуНаПрибыль Тогда
			КоллекцииСумм.ДобавитьНаборСумм(
				ОписаниеСумм,
				НалогНаПрибыльБухгалтерскийУчет.ИмяНабораСуммРазницыПоНалогуНаПрибыль(),
				"СуммаПРДт,СуммаПРКт,СуммаВРДт,СуммаВРКт");
		КонецЕсли;
		
		Возврат ОписаниеСумм;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ГрафЗатрат // Общие методы работы с графом затрат

// Описание коллекции для хранения графа затрат
//
Функция НовыйГрафЗатрат(ОписаниеСумм, ВариантыСтруктурыЗатрат)
	
	ТипИдентификатораВершины = УчетЗатрат.ТипИдентификатораВершины();
	ТипВес                   = Новый ОписаниеТипов("Число");

	Затраты = Новый Структура;
	Затраты.Вставить("ОписаниеСумм", ОписаниеСумм);
	
	// Вершины
	Затраты.Вставить("Вершины", Новый ТаблицаЗначений);
	// - заполняются исходными данными
	Затраты.Вершины.Колонки.Добавить("Идентификатор",       ТипИдентификатораВершины);
	Затраты.Вершины.Колонки.Добавить("РазделУчета",         Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7))); // Расходы, Запасы
	Затраты.Вершины.Колонки.Добавить("Вес",                 ТипВес);
	Затраты.Вершины.Колонки.Добавить("КоличествоМатериала", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	// - результат расчета
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.Вершины, ОписаниеСумм);
	// НомерПередела используется для упорядочивания проводок, 
	// настройки порядка переделов, выводится в справку-расчет.
	// В предельном случае может быть столько переделов, сколько вершин.
	Затраты.Вершины.Колонки.Добавить("НомерПередела", ТипИдентификатораВершины);
	// Заполненное ЦелевоеСальдо означает, что в этой вершине должна остаться сумма, ограждаемая от распределения.
	// В общем случае, целевое сальдо может быть "размазано" по нескольким вершинам:
	// т.е. заданная сумма целевого сальдо должна остаться суммарно в вершинах группы,
	// при этом в каждой конкретной вершине может остаться сумма, меньшая, чем целевое сальдо.
	// Когда это возможно, суммы целевого сальдо должны остаться в вершинах,
	// смежных с вершинами, не входящими в группу - см. ОграничитьЦелевоеСальдо.
	// Вся такая группа идентифицируется идентификатором одной из вершин группы.
	// В колонке ЦелевоеСальдо указывается такой идентификатор группы.
	// Суммы целевого сальдо см. в таблице ЦелевоеСальдо (ниже).
	Затраты.Вершины.Колонки.Добавить("ЦелевоеСальдо", ТипИдентификатораВершины);
	// Также колонки могут временно добавляться по ходу работы с графом
	// (удаляются после завершения локальных алгоритмов)
	
	// Ребра
	
	Затраты.Вставить("Ребра", Новый ТаблицаЗначений);
	// - заполняются исходными данными
	Затраты.Ребра.Колонки.Добавить("ВидДвижения",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийРасчетСебестоимости"));
	Затраты.Ребра.Колонки.Добавить("Источник",             ТипИдентификатораВершины);
	Затраты.Ребра.Колонки.Добавить("Приемник",             ТипИдентификатораВершины);
	Затраты.Ребра.Колонки.Добавить("Вес",                  ТипВес);
	Затраты.Ребра.Колонки.Добавить("ПравилоРаспределения", ПравилаРаспределенияРасходов.ТипИмени());
	// - результат расчета
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.Ребра, ОписаниеСумм);
	// - промежуточные данные
 	// Для определенных ребер рассчитанная сумма не должна меняться после какого-то события ("фиксируется").
	// Например, после того как первоначально оценили ребро, являющееся встречным выпуском,
	// его суммовую оценку нельзя трогать.
	// Другими словами, при обходе графа для его оценки ребро отсутствует, по нему нельзя ходить.
	// Совсем удалить ребро нельзя, потому что оно хранит суммовую оценку.
	// Кроме того, эта оценка повлияла на суммовую оценку приемника.
	// Важно, чтобы для зафиксированных ребер суммовая оценка приемника 
	// не была скорректирована с учетом оценки источника.
	Затраты.Ребра.Колонки.Добавить("Зафиксировано",        Новый ОписаниеТипов("Булево"));
	// Слабые звенья - это те ребра, по которым "порвется" контур.
	// После устранения слабых звеньев граф станет ацикличным.
	Затраты.Ребра.Колонки.Добавить("СлабоеЗвено",          Новый ОписаниеТипов("Булево")); 
	
	// Контуры
	
	// Разомкнутые контуры сохраняются в графе, эти сведения учитываются при оценке - 
	// см. ДооценитьКонтуры()
	// Эту коллекцию заполним по мере нахождения контуров, см. ДобавитьКонтур()
	Затраты.Вставить("Контуры", Новый ТаблицаЗначений);
	Затраты.Контуры.Колонки.Добавить("Вершина", ТипИдентификатораВершины);
	Затраты.Контуры.Колонки.Добавить("Ребра",   Новый ОписаниеТипов("Массив")); 
	Затраты.Контуры.Колонки.Добавить("Вес",     ТипВес);
	
	// ЦелевоеСальдо
	
	// Для ряда вершин задано целевое сальдо - эти суммы должны остаться после оценки.
	// Например, целевое сальдо используется, когда пользователь задал суммы незавершенного производства.
	// Эту коллекцию заполним позже, см. ЗаполнитьЦелевоеСальдо()
	Затраты.Вставить("ЦелевоеСальдо",             Новый ТаблицаЗначений);
	Затраты.Вставить("ОписаниеСуммЦелевоеСальдо", ОписаниеКоллекцииСумм(Истина, Ложь));
	Затраты.ЦелевоеСальдо.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	Затраты.ЦелевоеСальдо.Колонки.Добавить("СоставГруппы",  Новый ОписаниеТипов("Соответствие")); // Ключ - идентификатор вершины, Значение - коллекция сумм
	// Заданы суммы БУ и НУ, а суммы разниц рассчитываются исходя из того, какие разницы есть в затратах
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.ЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	// НастройкаВстречногоВыпуска
	
	// Граф может содержать таблицу НастройкаВстречногоВыпуска, если это предусмотрено настройками пользователя
	// См. ПрименитьНастройкуВстречногоВыпуска()
	
	// СтруктураЗатрат
	
	// Граф может содержать информацию о структуре затрат
	СтруктураЗатрат.ИнициализироватьГрафЗатрат(Затраты, ВариантыСтруктурыЗатрат);
	
	// Так как при оценке графа используется итерационный подход,
	// то для ускорения выполнения кода в циклах преобразуем некоторые параметры расчета, объявленные ранее,
	// для быстрого доступа
	ИнициализироватьКешПараметровРасчета(Затраты);
	
	// Так как коллекция может содержать много данных и для заполнения поиск в коллекции не требуется,
	// то для оптимизации заполнения индексы следует создавать после заполнения.
	// См. ИндексироватьГрафЗатрат()
	
	Возврат Затраты;
	
КонецФункции

// Инициализирует в графе затрат поля, хранящие некоторые параметры расчета,
// преобразованные для быстрого доступа к ним в итерационных алгоритмах
//
Процедура ИнициализироватьКешПараметровРасчета(Затраты)
	
	Затраты.Вставить("КешПараметровРасчета", Новый Структура);
	
	ИнициализироватьКешРасчетаКалькуляции(Затраты);
	ИнициализироватьКешНалоговогоУчета(Затраты);
	
КонецПроцедуры

Процедура ЗаполнитьГрафЗатрат(Затраты, МенеджерВременныхТаблиц)
	
	// Заполним вершины.
	// МенеджерВременныхТаблиц содержит таблицы КлючиВершин, НачальноеСальдо, Поступления, Выбытия
	
	// Получим следующие данные о вершинах:
	// - суммарный вес всех значимых поступлений. Эта величина арифметически равна сумме всех выбытий и конечного остатка - 
	//   то есть сумме весов всех ребер, которые требуют оценки
	// - суммы внешних (!) поступлений - то есть таких проводок, которые определяют оценку оставшихся проводок
	//   (для этого вычитаем те поступления, что получились в результате выбытий)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.РазделУчета КАК РазделУчета,
	|	СУММА(Вершины.КоличествоМатериала) КАК КоличествоМатериала,
	|	СУММА(Вершины.Вес) КАК Вес,
	|	СУММА(Вершины.Сумма) КАК Сумма,
	|	СУММА(Вершины.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Вершины.СуммаПР) КАК СуммаПР,
	|	СУММА(Вершины.СуммаВР) КАК СуммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		Ключи.Идентификатор КАК Идентификатор,
	|		Ключи.РазделУчета КАК РазделУчета,
	|		0 КАК КоличествоМатериала,
	|		0 КАК Вес,
	|		0 КАК Сумма,
	|		0 КАК СуммаНУ,
	|		0 КАК СуммаПР,
	|		0 КАК СуммаВР
	|	ИЗ
	|		ИдентификаторыВершин КАК Ключи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Ключи.Идентификатор,
	|		Ключи.РазделУчета,
	|		0,
	|		Вершины.Количество,
	|		Вершины.Сумма,
	|		Вершины.СуммаНУ,
	|		Вершины.СуммаПР,
	|		Вершины.СуммаВР
	|	ИЗ
	|		НачальноеСальдо КАК Вершины
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|			ПО Вершины.Счет = Ключи.Счет
	|				И Вершины.Подразделение = Ключи.Подразделение
	|				И Вершины.Субконто1 = Ключи.Субконто1
	|				И Вершины.Субконто2 = Ключи.Субконто2
	|				И Вершины.Субконто3 = Ключи.Субконто3
	|				И Вершины.Номенклатура = Ключи.Номенклатура
	|				И Вершины.КорСчет = Ключи.КорСчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Ключи.Идентификатор,
	|		Ключи.РазделУчета,
	|		Вершины.КоличествоМатериала,
	|		Вершины.Количество,
	|		Вершины.Сумма,
	|		Вершины.СуммаНУ,
	|		Вершины.СуммаПР,
	|		Вершины.СуммаВР
	|	ИЗ
	|		Поступления КАК Вершины
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|			ПО Вершины.Счет = Ключи.Счет
	|				И Вершины.Подразделение = Ключи.Подразделение
	|				И Вершины.Субконто1 = Ключи.Субконто1
	|				И Вершины.Субконто2 = Ключи.Субконто2
	|				И Вершины.Субконто3 = Ключи.Субконто3
	|				И Вершины.Номенклатура = Ключи.Номенклатура
	|				И Вершины.КорСчет = Ключи.КорСчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Вершины.Приемник,
	|		Вершины.РазделУчетаПриемник,
	|		0,
	|		0,
	|		-Вершины.Сумма,
	|		-Вершины.СуммаНУ,
	|		-Вершины.СуммаПР,
	|		-Вершины.СуммаВР
	|	ИЗ
	|		Выбытия КАК Вершины
	|	ГДЕ
	|		НЕ Вершины.Приемник ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БазыРаспределения.Источник,
	|		""Расходы"",
	|		0,
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РаспределениеНаРасходы КАК БазыРаспределения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БазыРаспределения.Идентификатор,
	|		""Расходы"",
	|		0,
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РаспределениеНаСубконто КАК БазыРаспределения) КАК Вершины
	|
	|СГРУППИРОВАТЬ ПО
	|	Вершины.Идентификатор,
	|	Вершины.РазделУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.Вершины.Добавить(), Выборка);
	КонецЦикла;
	Затраты.Вершины.ЗаполнитьЗначения(УчетЗатрат.ИдентификаторВершиныНеопределено(), "ЦелевоеСальдо, НомерПередела");
		
	// Заполним ребра.
	
	// Таблица Ребра содержит данные о движениях внутри учета затрат
	
	// Ребра могут быть разных типов (значения перечисления "ВидыДвиженийРасчетСебестоимости"):
	// - "Перемещение"      - ребра между вершинами с однородным весом; такие ребра связывают вершины из разделов "Запасы"
	//                        Вес - количество номенклатуры
	// - "Распределение"    - результат промежуточного распределения расходов; Источник - из раздела "Расходы"
	//                        Вес - коэффициенты базы распределения
	// - "Выпуск"           - результат распределения расходов на объекты калькуляции; Источник - из раздела "Расходы";
	//                        при выпуске продукции - приемник из раздела "Запасы",
	//                        при оказании услуг собственным подразделениям - "Расходы".
	//                        Вес - коэффициенты базы распределения
	// - "ПостоянныеРазницы"- результат выделения расходов налогового учета с тем, чтобы поступить с ними по-особенному.
	//                        За счет этого появятся разницы, такие разницы считаются постоянными
	//                        Источник - из раздела "Расходы"
	//                        Вес - не определен
	// - "ВременныеРазницы" - результат выделения расходов налогового учета с тем, чтобы поступить с ними по-особенному.
	//                        За счет этого появятся разницы, такие разницы считаются временными
	//                        Источник - из раздела "Расходы"
	//                        Вес - не определен
	// - "Другое"           - например по результатам комплектации товаров или использования материалов в производстве.
	//                        Вес - количество номенклатуры
	// - "ФиксированнаяСтоимость" - ребра, оценка которых не требуется (задана до выполнения расчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.ВидДвижения КАК ВидДвижения,
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник,
	|	СУММА(Ребра.Вес) КАК Вес,
	|	СУММА(Ребра.Сумма) КАК Сумма,
	|	СУММА(Ребра.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Ребра.СуммаПР) КАК СуммаПР,
	|	СУММА(Ребра.СуммаВР) КАК СуммаВР,
	|	Ребра.ПравилоРаспределения КАК ПравилоРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Перемещение) КАК ВидДвижения,
	|		Ребра.Источник КАК Источник,
	|		Ребра.Приемник КАК Приемник,
	|		Ребра.Количество КАК Вес,
	|		0 КАК Сумма,
	|		0 КАК СуммаНУ,
	|		0 КАК СуммаПР,
	|		0 КАК СуммаВР,
	|		"""" КАК ПравилоРаспределения
	|	ИЗ
	|		Выбытия КАК Ребра
	|	ГДЕ
	|		Ребра.ВнутреннееДвижение
	|		И Ребра.БезИзмененияКоличества
	|		И Ребра.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Другое),
	|		Прочие.Источник,
	|		Прочие.Приемник,
	|		Прочие.Количество,
	|		0,
	|		0,
	|		0,
	|		0,
	|		""""
	|	ИЗ
	|		Выбытия КАК Прочие
	|	ГДЕ
	|		Прочие.ВнутреннееДвижение
	|		И НЕ Прочие.БезИзмененияКоличества
	|		И Прочие.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ФиксированнаяСтоимость),
	|		ОборотыФикс.Источник,
	|		ОборотыФикс.Приемник,
	|		ОборотыФикс.Количество,
	|		ОборотыФикс.Сумма,
	|		ОборотыФикс.СуммаНУ,
	|		ОборотыФикс.СуммаПР,
	|		ОборотыФикс.СуммаВР,
	|		""""
	|	ИЗ
	|		Выбытия КАК ОборотыФикс
	|	ГДЕ
	|		ОборотыФикс.ВнутреннееДвижение
	|		И ОборотыФикс.ФиксированнаяСтоимость
	|		И ОборотыФикс.Количество = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПравилаРаспределенияРасходовВыпуск.Выпуск = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|		КОНЕЦ,
	|		БазыРаспределения.Идентификатор,
	|		КлючиПриемник.Идентификатор,
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0,
	|		БазыРаспределения.Правило
	|	ИЗ
	|		РаспределениеНаСубконто КАК БазыРаспределения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиПриемник
	|			ПО БазыРаспределения.Счет = КлючиПриемник.Счет
	|				И БазыРаспределения.Подразделение = КлючиПриемник.Подразделение
	|				И БазыРаспределения.Субконто1 = КлючиПриемник.Субконто1
	|				И БазыРаспределения.Субконто2 = КлючиПриемник.Субконто2
	|				И БазыРаспределения.Субконто3 = КлючиПриемник.Субконто3
	|				И БазыРаспределения.Номенклатура = КлючиПриемник.Номенклатура
	|				И БазыРаспределения.КорСчет = КлючиПриемник.КорСчет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПравилаРаспределенияРасходовВыпуск КАК ПравилаРаспределенияРасходовВыпуск
	|			ПО БазыРаспределения.Правило = ПравилаРаспределенияРасходовВыпуск.Правило
	|	ГДЕ
	|		БазыРаспределения.База <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПравилаРаспределенияРасходовВыпуск.Выпуск = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|		КОНЕЦ,
	|		БазыРаспределения.Источник,
	|		БазыРаспределения.Приемник,
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0,
	|		БазыРаспределения.Правило
	|	ИЗ
	|		РаспределениеНаРасходы КАК БазыРаспределения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПравилаРаспределенияРасходовВыпуск КАК ПравилаРаспределенияРасходовВыпуск
	|			ПО БазыРаспределения.Правило = ПравилаРаспределенияРасходовВыпуск.Правило
	|	ГДЕ
	|		БазыРаспределения.База <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбособленныйНалоговыйУчет.ТипРазниц,
	|		ОбособленныйНалоговыйУчет.Источник,
	|		ОбособленныйНалоговыйУчет.Приемник,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныйНалоговыйУчет.Правило
	|	ИЗ
	|		ОбособленныйНалоговыйУчет КАК ОбособленныйНалоговыйУчет) КАК Ребра
	|
	|СГРУППИРОВАТЬ ПО
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Ребра.ПравилоРаспределения,
	|	Ребра.ВидДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ребра.Источник,
	|	Ребра.Приемник";
	
	// Все вершины, используемые в Ребра, должны быть в коллекции Вершины!
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.Ребра.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьГрафЗатрат(Затраты)
	
	Затраты.Вершины.Индексы.Добавить("Идентификатор"); // См. ОписаниеВершины()
	
	Затраты.ЦелевоеСальдо.Индексы.Добавить("Идентификатор");
	
	// См. ИнцидентныеРебра()
	Затраты.Ребра.Индексы.Добавить("Источник");
	Затраты.Ребра.Индексы.Добавить("Источник,Зафиксировано");
	Затраты.Ребра.Индексы.Добавить("Источник,СлабоеЗвено");
	Затраты.Ребра.Индексы.Добавить("Источник,Зафиксировано,СлабоеЗвено");
	Затраты.Ребра.Индексы.Добавить("Приемник,Зафиксировано");
	Затраты.Ребра.Индексы.Добавить("Источник,Приемник");
	
КонецПроцедуры

Процедура СкорректироватьОценкуРебра(ОписаниеПриемника, Ребро, НоваяОценкаРебра, Затраты, ОписаниеИсточника, ФиксированнаяСтоимость = Ложь)
	
	ОписаниеСуммПриемника = Затраты.ОписаниеСумм;
	ОграничитьСтруктуруЗатрат(ОписаниеСуммПриемника, Ребро, ОписаниеИсточника, ОписаниеПриемника, Затраты.КешПараметровРасчета);
	
	Если ФиксированнаяСтоимость Тогда
		// Корректировка выполняется только один раз.
		// В ребре записана окончательная оценка.
		Корректировка = НоваяОценкаРебра;
	Иначе
		// В оценке вершины-приемника уже может присутствовать предыдущая оценка ребра.
		// Поэтому скорректируем оценку вершины-приемника 
		// только на сумму разницы между предыдущей и новой оценкой ребра
		Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСуммПриемника, Истина);
		КоллекцииСумм.Заполнить(Корректировка, НоваяОценкаРебра, ОписаниеСуммПриемника);
		КоллекцииСумм.Вычесть(Корректировка, Ребро, ОписаниеСуммПриемника);
	КонецЕсли;
	
	// Изменим оценку вершины-приемника
	КоллекцииСумм.Сложить(ОписаниеПриемника, Корректировка, ОписаниеСуммПриемника);
	
	СтруктураЗатрат.УстановитьОсновныеЭлементы(ОписаниеПриемника, Затраты.ВариантыСтруктурыЗатрат);
	
	Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		УстановитьМатериальныйСостав(ОписаниеПриемника, Затраты.ОписаниеСумм);
	КонецЕсли;
	
	// Доведем оценку ребра до новой оценки
	КоллекцииСумм.Заполнить(Ребро, НоваяОценкаРебра, Затраты.ОписаниеСумм);
	
КонецПроцедуры

Процедура ОграничитьСтруктуруЗатрат(ОписаниеСуммПриемника, Ребро, ОписаниеИсточника, ОписаниеПриемника, КешПараметровРасчета)
	
	// Расчет структуры затрат может быть ограничен.
	// Например, расчет калькуляции ограничен одним переделом.
	
	// ОписаниеСуммПриемника - изменяемый параметр.
	// В него устанавливается сокращенное описание сумм - без наборов, соответствующих структуре затрат,
	// которая для конкретного ребра ограничена.
	
	ОграничитьСтатьиКалькуляции(ОписаниеСуммПриемника, Ребро, ОписаниеИсточника, ОписаниеПриемника, КешПараметровРасчета);
	
КонецПроцедуры

Функция ОписаниеВершины(Затраты, Идентификатор)
	
	Возврат Затраты.Вершины.Найти(Идентификатор, "Идентификатор");
	
КонецФункции

Функция ИнцидентныеРебра(Затраты, Вершина, ВключаяСлабыеЗвенья = Ложь, ВключаяЗафиксированные = Ложь)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Источник", Вершина);
	Если НЕ ВключаяЗафиксированные Тогда
		Отбор.Вставить("Зафиксировано", Ложь);
	КонецЕсли;
	Если НЕ ВключаяСлабыеЗвенья Тогда
		Отбор.Вставить("СлабоеЗвено",   Ложь);
	КонецЕсли;
	
	Возврат Затраты.Ребра.НайтиСтроки(Отбор);
	
КонецФункции

Функция МожноЗафиксироватьРебро(Затраты, Ребро)
	
	ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
	
	Если Ребро.Вес = ОписаниеИсточника.Вес Тогда
		// Все затраты из вершины "перетекают" по этому ребру.
		// Его нельзя зафиксировать, так как затраты могут зависнуть в вершине.
		Возврат Ложь;
	Иначе
		// Часть из смежных ребер могут быть слабыми звеньями.
		// Исключим их из расчета, потому что слабые звенья "порвутся", будут позднее зафиксированы.
		// Зафиксированные ребра игнорируем, потому что их вес уже вычтен из веса источника (см. ЗафиксироватьРебро())
		СмежныеРебра = ИнцидентныеРебра(Затраты, Ребро.Источник, Истина);
		
		ВесИсточникаЗаВычетомСлабыхЗвеньев = ОписаниеИсточника.Вес;
		Для Каждого СмежноеРебро Из СмежныеРебра Цикл
			Если СмежноеРебро.СлабоеЗвено Тогда
				ВесИсточникаЗаВычетомСлабыхЗвеньев = ВесИсточникаЗаВычетомСлабыхЗвеньев - СмежноеРебро.Вес;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ребро.Вес <> ВесИсточникаЗаВычетомСлабыхЗвеньев;
		
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область Графы // Общие алгоритмы на графах

Функция КорниДеревьев(Затраты)
	
	// Находит вершины с нулевой степенью захода - то есть те, у которых нет предшественников.
	// При поиске корней исключаем слабые звенья (потому что дерево - это по определению ацикличный граф).
	//
	// Для поиска таких вершин всем приемникам ставим метки.
	// Вершины без меток - это корни.
	
	Затраты.Вершины.Колонки.Добавить("ПоступаютЗатраты", Новый ОписаниеТипов("Булево")); // Удалим метки по окончании функции
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		Если Ребро.Зафиксировано ИЛИ Ребро.СлабоеЗвено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		ОписаниеПриемника.ПоступаютЗатраты = Истина;
		
	КонецЦикла;
	
	// Выберем затраты, в которые не поступают затраты
	КорниДеревьев = Затраты.Вершины.НайтиСтроки(Новый Структура("ПоступаютЗатраты", Ложь));
	
	// Метки нужны только для работы этой процедуры
	Затраты.Вершины.Колонки.Удалить("ПоступаютЗатраты");
	
	Возврат КорниДеревьев;
	
КонецФункции

Процедура РазрушитьВсеКонтуры(Затраты, МетодРазрушения)
	
	// Произведем серию поисков в глубину в графе.
	// Т.е. из каждой вершины, в которую мы еще ни разу не приходили, запустим поиск в глубину, 
	// который при входе в вершину будет ставить ей метку "Подозреваемая", а при выходе - "Пройдена". 
	// И если поиск в глубину пытается пойти в подозреваемую вершину, то это означает, 
	// что мы нашли цикл.
	// Сам цикл восстановливаем проходом по массиву пути.
	
	// В начальный момент времени все вершины графа со статусом "НеПройдена". 
	// Выполним следующие действия: 
	// - из множества всех не пройденных вершин выберем любую вершину
	// - выполняем для нее процедуру поиска в глубину (DFS)
	// Повторяем эти шаги до тех пор, пока не останется вершин со статусом "НеПройдена"
	
	// Инициализируем поле "Статус", статус может принимать одно из трех значений:
	Статусы = Новый Структура;
	Статусы.Вставить("НеПройдена",    0);
	Статусы.Вставить("Подозреваемая", 1);
	Статусы.Вставить("Пройдена",      2);
	ТипСтатуса = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	Затраты.Вершины.Колонки.Добавить("Статус", ТипСтатуса);
	
	// Определим стартовые вершины, характеризующие область графа, которую будем обходить
	Если МетодРазрушения = "Контрольный" Тогда
		// Этот метод работает со всем графом, остальные - с его частью
		СтартовыеВершины = Затраты.Вершины;
	Иначе
		Если МетодРазрушения = "ВстречныйВыпуск" Тогда
			// Контуры встречного выпуска начинаем искать начиная от вершин расходов
			Отбор = Новый Структура("РазделУчета", "Расходы");
		Иначе
			// Остальные методы предназначены только для раздела "Запасы"
			Отбор = Новый Структура("РазделУчета", "Запасы");
		КонецЕсли;
		СтартовыеВершины = Затраты.Вершины.НайтиСтроки(Отбор);
	КонецЕсли;
	
	// Запустим разрушение
	Для Каждого ОписаниеВершины Из СтартовыеВершины Цикл
		
		Путь = Новый Массив;
		
		РазрушитьКонтурПоискВГлубинуРекурсивно(Затраты, ОписаниеВершины, Путь, МетодРазрушения, Статусы);
		
	КонецЦикла;
	
	// Уберем за собой
	Затраты.Вершины.Колонки.Удалить("Статус");
	
КонецПроцедуры

Функция РазрушитьКонтурПоискВГлубинуРекурсивно(Затраты, ОписаниеВершины, Путь, МетодРазрушения, Статусы)
	
	Если ОписаниеВершины.Статус = Статусы.Пройдена Тогда
		Возврат Неопределено; // Контуров не найдено
	ИначеЕсли ОписаниеВершины.Статус = Статусы.Подозреваемая Тогда
		// Найдена вершина, входящая в цикл.
		// Разрушаем цикл.
		// Цикл можем разрушить по разному - удалить то или иное ребро цикла.
		// После разрушения цикла текущая вершина станет недостижимой по тому пути,
		// по которому сюда пришли, поэтому обходить глубже бессмысленно.
		Возврат РазрушитьКонтур(Затраты, ОписаниеВершины, Путь, МетодРазрушения);
	КонецЕсли;

	ОписаниеВершины.Статус = Статусы.Подозреваемая;

	// Пойдем из Подозреваемой вершины и если прийдем в эту же, значит нашли контур
	
	Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор); // Ходим только по остовным ребрам
	
	// Упорядочим приемники так, чтобы первым была вершина, через которую только что прошли, а остальные были упорядочены по убыванию веса.
	// Это в некоторых случаях позволит в первую очередь устранять те циклы, которые более объяснимые, кажутся очевидными.
	Если Приемники.Количество() > 1 Тогда
		
		ПредыдущаяВершина = Неопределено;
		Если ЗначениеЗаполнено(Путь) Тогда
			ПредыдущаяВершина = Путь[Путь.ВГраница()].Источник;
		КонецЕсли;
		
		Сортировщик = Новый ТаблицаЗначений;
		Сортировщик.Колонки.Добавить("Ребро"); // элементы сортируемой коллекции
		Сортировщик.Колонки.Добавить("Предыдущая", Новый ОписаниеТипов("Булево"));
		Сортировщик.Колонки.Добавить("Вес",        Затраты.Ребра.Колонки.Вес.ТипЗначения);
		
		Для Каждого Ребро Из Приемники Цикл
			НоваяСтрока = Сортировщик.Добавить();
			НоваяСтрока.Ребро      = Ребро;
			НоваяСтрока.Предыдущая = (Ребро.Приемник = ПредыдущаяВершина);
			НоваяСтрока.Вес        = Ребро.Вес;
		КонецЦикла;
		
		Сортировщик.Сортировать("Предыдущая УБЫВ, Вес");
		Приемники = Сортировщик.ВыгрузитьКолонку("Ребро");
		
	КонецЕсли;
	
	Для Каждого Ребро Из Приемники Цикл
		
		// Метод "Перемещения" разрушает циклы только в ограниченном пространстве ребер
		Если МетодРазрушения = "Перемещения" И Ребро.ВидДвижения <> Перечисления.ВидыДвиженийРасчетСебестоимости.Перемещение Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		
		// Метод "Запасы" ограничивается одноименным разделом учета
		Если МетодРазрушения = "Запасы" И ОписаниеПриемника.РазделУчета <> "Запасы" Тогда
			Продолжить;
		КонецЕсли;
		
		Путь.Добавить(Ребро);
		
		// Продолжим поиск в глубину
		ВершинаВозврата = РазрушитьКонтурПоискВГлубинуРекурсивно(
			Затраты, 
			ОписаниеВершины(Затраты, Ребро.Приемник), 
			Путь, 
			МетодРазрушения,
			Статусы);
			
		// Отступаем на шаг - удаляем последний элемент
		Путь.Удалить(Путь.Количество() - 1);
		
		Если ВершинаВозврата <> Неопределено Тогда
			// Избежим парадокса.
			// После того, как мы разрушили контур, может оказаться, что в этом графе (новом, измененном) 
			// вершина, в которой мы находимся, не достижима по пути, по которому в нее пришли.
			// В таком случае вернемся по следам назад в крайнюю достижимую вершину.
			Если ВершинаВозврата <> ОписаниеВершины.Идентификатор Тогда
				// Текущая вершина недостижима по Пути.
				// Сделаем шаг назад, уничтожим следы пребывания здесь.
				ОписаниеВершины.Статус = Статусы.НеПройдена;
				Возврат ВершинаВозврата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если пришли сюда, то подозрения с вершины сняты
	ОписаниеВершины.Статус = Статусы.Пройдена;
	
	Возврат Неопределено; // Контуры не найдены
	
КонецФункции

Функция РазрушитьКонтур(Затраты, ОписаниеВершины, Путь, МетодРазрушения)
	
	Контур = Новый Массив; // Содержит описание ребер из коллекции списка инцидентности
	// Найдем контур
	// Обходим Путь с конца, добавляя ребра до тех пор, пока не вернемся в Вершину 
	КоличествоШагов  = Путь.Количество();
	Для Индекс = 1 По КоличествоШагов Цикл // Обходим массив с конца
		
		Ребро = Путь[КоличествоШагов - Индекс];
		
		// Добавим в Контур ребро, соответствующее шагу,
		// так, чтобы ребра в контуре шли в порядке обхода
		Контур.Вставить(0, Ребро);
		
		Если Ребро.Источник = ОписаниеВершины.Идентификатор Тогда
			// Вернулись в первую по пути обхода вершину, которая принадлежит контуру
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выберем проблемное ребро и удалим его
	Если МетодРазрушения = "ВстречныйВыпуск" Тогда
		
		// Сначала попробуем найти проблемное ребро в соответствии с настройкой
		ПроблемноеРебро = НайтиВстречныйВыпускПоНастройке(Контур, Затраты);
		
		Если ПроблемноеРебро = Неопределено Тогда
			
			ПроблемноеРебро = НайтиВстречныйВыпускБезНастройки(Контур, Затраты);
			
		КонецЕсли;
		
		ПроблемноеРебро.СлабоеЗвено = Истина;
		
	ИначеЕсли МетодРазрушения = "Перемещения" Тогда
		
		// Сократим все ребра контура на одинаковое количество
		МинимальныйВес = Контур[0].Вес;
		Для Каждого Ребро Из Контур Цикл
			МинимальныйВес = Мин(МинимальныйВес, Ребро.Вес);
		КонецЦикла;
		
		Для Каждого Ребро Из Контур Цикл
			
			// Сократим вес ребра
			Ребро.Вес = Ребро.Вес - МинимальныйВес;
			
			// Так как вес вершины соответствует сумме весов оцениваемых движений,
			// то уменьшим вес вершины
			ОписаниеИсточника     = ОписаниеВершины(Затраты, Ребро.Источник);
			ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - МинимальныйВес;
			
			Если Ребро.Вес = 0 Тогда
				ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем контур в граф, чтобы позже его дооценить.
		// Подробнее см. ДооценитьКонтуры()
		// Дооценивать следует исходя из одной вершины, поэтому важно выбрать вершину,
		// которая предоставит адекватную оценку: количество поступления в него должно быть больше, 
		// чем вес, на который сокращены ребра.
		// В общем случае такой вершины может и не быть, поэтому найдем вершину с максимальным весом.
		ВершинаСМаксимальнымВесом = ОписаниеВершины(Затраты, Контур[0].Источник);
		Для Каждого ОписаниеРебра Из Контур Цикл
			ОписаниеИсточника = ОписаниеВершины(Затраты, ОписаниеРебра.Источник);
			Если ОписаниеИсточника.Вес > ВершинаСМаксимальнымВесом.Вес Тогда
				ВершинаСМаксимальнымВесом = ОписаниеИсточника;
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьКонтур(Затраты, ВершинаСМаксимальнымВесом.Идентификатор, МинимальныйВес, Контур);
		
	Иначе
		
		// Приравниваем ко встречному выпуску - один раз пройдем по этому ребру
		ПроблемноеРебро = Контур[0];
		ПроблемноеРебро.СлабоеЗвено = Истина;
		
	КонецЕсли;
	
	// Вернем вершину перед первым по маршруту разомкнутым ребром
	Для Каждого Ребро Из Контур Цикл
		Если Ребро.Зафиксировано ИЛИ Ребро.СлабоеЗвено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ребро.Источник;
	
КонецФункции

Процедура РазрушитьПетли(Затраты)
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		Если Ребро.Зафиксировано Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ребро.Источник <> Ребро.Приемник Тогда
			Продолжить;
		КонецЕсли;
			
		// Это петля
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
		
		// Запишем информацию о контуре, чтобы его дооценить позже
		// См. ДооценитьКонтуры()
		Контур = Новый Массив;
		Контур.Добавить(Ребро);
		ДобавитьКонтур(Затраты, Ребро.Источник, Ребро.Вес, Контур);
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗафиксироватьРебро(Ребро, ОписаниеИсточника, ОписаниеСумм)
	
	Ребро.Зафиксировано = Истина;
	
	// Так как фиксируется сумма, то уменьшим на эту сумму оценку источника
	КоллекцииСумм.Вычесть(ОписаниеИсточника, Ребро, ОписаниеСумм);
	
	// Так как вес ребра не участвует в оценке, то уменьшим сумму весов в источнике
	ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - Ребро.Вес;
	
КонецПроцедуры

Процедура ДобавитьКонтур(Затраты, Вершина, Вес, РебраКонтура)
	
	НоваяСтрока = Затраты.Контуры.Добавить();
	НоваяСтрока.Вершина = Вершина;
	НоваяСтрока.Вес     = Вес;
	НоваяСтрока.Ребра   = РебраКонтура;
	
КонецПроцедуры

#КонецОбласти

#Область ОценкаЗатрат // Основной алгоритм оценки

Процедура ОценитьЗатраты(Затраты, КлючиСтруктурыЗатрат = Неопределено)
	
	Затраты.Вершины.Колонки.Добавить("КоличествоИсточников",             УчетЗатрат.ТипИдентификатораВершины());
	Затраты.Вершины.Колонки.Добавить("КоличествоРассчитанныхИсточников", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.Вершины.Колонки.Добавить("Достижима", Новый ОписаниеТипов("Булево")); // Достижима из стартовых вершин
	Затраты.Вершины.Колонки.Добавить("ВОчереди",  Новый ОписаниеТипов("Булево")); // Для обхода в ширину
	
	СтартовыеВершины = КорниДеревьев(Затраты);
	
	// Установим материальный состав для корневых вершин.
	Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		Для Каждого ОписаниеВершины Из СтартовыеВершины Цикл
			УстановитьМатериальныйСостав(ОписаниеВершины, Затраты.ОписаниеСумм);
		КонецЦикла;
	КонецЕсли;
	
	Сортировщик = Новый ТаблицаЗначений;
	Сортировщик.Колонки.Добавить("Вес",      Затраты.Ребра.Колонки.Вес.ТипЗначения);
	Сортировщик.Колонки.Добавить("Приемник", Затраты.Ребра.Колонки.Приемник.ТипЗначения);
	Сортировщик.Колонки.Добавить("Ребро");
	
	СокращенныйРасчет = ИнициализироватьСокращенныйРасчетСтатейКалькуляции(Затраты.ВариантыСтруктурыЗатрат, КлючиСтруктурыЗатрат);
	
	Пока СтартовыеВершины.Количество() > 0 Цикл
		
		// Используем для хранения очереди коллекцию СтартовыеВершины.
		// Отметим, что стартовые вершины уже стоят в очереди.
		// Признак ВОчереди нужен, чтобы исключить попадание вершины в очередь несколько раз.
		Для Каждого ОписаниеВершины Из СтартовыеВершины Цикл
			ОписаниеВершины.ВОчереди  = Истина;
		КонецЦикла;
		
		// Проставим у каждой вершины число источников. При этом не считаем источниками те, что инцидентны через слабые звенья
		// Используем обход графа в ширину
		Пока СтартовыеВершины.Количество() > 0 Цикл
			
			ОписаниеИсточника = СтартовыеВершины[0];
			ОписаниеИсточника.Достижима = Истина;
			
			Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор); // Ходим только по остовным ребрам
			
			Для Каждого Ребро Из Приемники Цикл
				
				ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
				ОписаниеПриемника.КоличествоИсточников = ОписаниеПриемника.КоличествоИсточников + 1;
				
				Если НЕ ОписаниеПриемника.ВОчереди Тогда
					// Не ставим в очередь несколько раз
					ОписаниеПриемника.ВОчереди = Истина;
					СтартовыеВершины.Добавить(ОписаниеПриемника);
				КонецЕсли;
				
			КонецЦикла;
			
			СтартовыеВершины.Удалить(0);
			
		КонецЦикла;
		
		СтартовыеВершины = Неопределено; // Следствие: признак "ВОчереди" более использовать нельзя
		
		// Выполняем оценку, начиная с достижимых вершин, у которых КоличествоИсточников = 0
		Отбор = Новый Структура;
		Отбор.Вставить("Достижима",            Истина);
		Отбор.Вставить("КоличествоИсточников", 0);
		СтартовыеВершины = Затраты.Вершины.НайтиСтроки(Отбор);
		
		// Обходим граф в ширину, таким образом, чтобы обход из вершины стартовал только тогда,
		// когда все источники для нее рассчитаны.
		// В ходе обхода оцениваем ребра.
		// Слабые звенья разрываем. Запоминаем вершины, в которые вели разрушенные ребра.
		ВершиныСлабыхЗвеньев = Новый Массив;
		
		Пока СтартовыеВершины.Количество() > 0 Цикл
			
			ОписаниеИсточника = СтартовыеВершины[0];
			
			// Вершины, которые подверглись оценке, имеют неотрицательный номер передела
			Если ОписаниеИсточника.НомерПередела < 0 Тогда
				ОписаниеИсточника.НомерПередела = 0;
			КонецЕсли;
			
			// Оценим инцидентные ребра:
			// цена всех инцидентных ребер - одинаковая
			КоличествоИсточника = 0 + ОписаниеИсточника.Вес;
			СуммыИсточника = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина); // При распределении будем изменять эту коллекцию
			КоллекцииСумм.Заполнить(СуммыИсточника, ОписаниеИсточника, Затраты.ОписаниеСумм);
			ИсключитьЦелевоеСальдо(СуммыИсточника, Затраты, ОписаниеИсточника);
			
			// Идем по приемникам, включая слабые звенья, но не включая зафиксированные ребра
			Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор, Истина);
			
			// Упорядочим коллекцию ребер по убыванию весов для точности расчета (наиболее важные получат наибольшую точность)
			// Для двух ребер алгоритм распределения обеспечивает идентичный результат вне зависимости от порядка.
			Если Приемники.Количество() > 2 Тогда
				
				Для Каждого Ребро Из Приемники Цикл
					ЭлементСортировки = Сортировщик.Добавить();
					ЭлементСортировки.Вес      = Ребро.Вес;
					ЭлементСортировки.Приемник = Ребро.Приемник;
					ЭлементСортировки.Ребро    = Ребро;
				КонецЦикла;
				
				Сортировщик.Сортировать("Вес Убыв, Приемник");
				
				Приемники = Сортировщик.ВыгрузитьКолонку("Ребро");
				
				Сортировщик.Очистить();
				
			КонецЕсли;
			
			// Создадим кэш описаний приемников, чтобы сократить число поисков
			ОписанияПриемников = Новый Соответствие;
			Для Каждого Ребро Из Приемники Цикл
				ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
				ОписанияПриемников.Вставить(Ребро.Приемник, ОписаниеПриемника);
			КонецЦикла;
			
			// Сначала обработаем все движения, стоимость которых известна:
			// - движения по фиксированной стоимости
			// - расщепление расходов в налоговом учете
			ПриемникиРаспределение = Новый Массив;
			Для Каждого Ребро Из Приемники Цикл
				
				Если Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ФиксированнаяСтоимость Тогда
					
					// Рассчитаем оценку движения
					ОценкаРебра = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина);
					
					Если Ребро.Сумма = СуммыИсточника.Сумма Тогда
						КоллекцииСумм.Заполнить(ОценкаРебра, СуммыИсточника, Затраты.ОписаниеСумм);
					Иначе
						КоллекцииСумм.Заполнить(ОценкаРебра, Ребро, Затраты.ОписаниеСумм);
						
						СтруктураЗатрат.РассчитатьДолю(
							ОценкаРебра,
							СуммыИсточника,
							ОценкаРебра.Сумма,
							СуммыИсточника.Сумма,
							Затраты.ВариантыСтруктурыЗатрат);
						
					КонецЕсли;
					
					СкорректироватьОценкуРебра(
						ОписанияПриемников[Ребро.Приемник],
						Ребро,
						ОценкаРебра,
						Затраты,
						ОписаниеИсточника,
						Истина);
						
					ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
					
					КоллекцииСумм.Вычесть(СуммыИсточника, Ребро, Затраты.ОписаниеСумм);
					
				ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы
					Или Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
					
					ОценкаРебра = ВыделитьНалоговыйУчет(Ребро.ВидДвижения, СуммыИсточника, Затраты);
					СкорректироватьОценкуРебра(
						ОписанияПриемников[Ребро.Приемник],
						Ребро,
						ОценкаРебра,
						Затраты,
						ОписаниеИсточника);
					
				Иначе
					ПриемникиРаспределение.Добавить(Ребро);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
				
				РассчитатьЛимитСтатейКалькуляции(
					СокращенныйРасчет,
					СуммыИсточника.СтатьиКалькуляции,
					ПриемникиРаспределение.Количество());
				
			КонецЕсли;
			
			// Затем распределим суммы источника, оставшиеся после расщепления.
			// В результате могут появиться погрешности округления разниц по налогу на прибыль, которые позже спрячем.
			ОписанияПриемникиРазницыПоНалогуНаПрибыль = Новый Соответствие;
			
			Если ПриемникиРаспределение.Количество() = 1
				И ПриемникиРаспределение[0].Вес = КоличествоИсточника Тогда
				
				// В тривиальном случае
				// - оценку ребра не следует рассчитывать - достаточно взять из оценки вершины: это быстрее
				// - как следствие, погрешностей округления заведомо не может быть
				
				Ребро = ПриемникиРаспределение[0];
				
				ОценкаРебра = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина);
				КоллекцииСумм.Заполнить(ОценкаРебра, СуммыИсточника, Затраты.ОписаниеСумм);
				
				ОписаниеПриемника = ОписанияПриемников[Ребро.Приемник];
				СкорректироватьОценкуРебра(
					ОписаниеПриемника,
					Ребро,
					ОценкаРебра,
					Затраты,
					ОписаниеИсточника);
				
			Иначе
				
				// В общем случае оценку вершины следует распределить между ребрами
				
				Для Каждого Ребро Из ПриемникиРаспределение Цикл
					
					Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
						СократитьРасчетСтатейКалькуляции(СуммыИсточника, Ребро.Вес, СокращенныйРасчет);
					КонецЕсли;
					
					ОценкаРебра = ОценитьДвижение(Ребро.Вес, КоличествоИсточника, СуммыИсточника, Затраты);
					ОписаниеПриемника = ОписанияПриемников[Ребро.Приемник];
					СкорректироватьОценкуРебра(
						ОписаниеПриемника,
						Ребро,
						ОценкаРебра,
						Затраты,
						ОписаниеИсточника);
					
					ОписанияПриемникиРазницыПоНалогуНаПрибыль.Вставить(Ребро.Приемник, ОписаниеПриемника);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СпрятатьРазницыПоНалогуНаПрибыльПохожиеНаПогрешностиОкругления(ОписанияПриемникиРазницыПоНалогуНаПрибыль, Затраты);
			
			// Наконец, сделаем следующий шаг - в каждый из приемников затрат
			Для Каждого Ребро Из Приемники Цикл
				
				ОписаниеПриемника = ОписанияПриемников[Ребро.Приемник];
				
				Если Ребро.СлабоеЗвено Тогда
					
					// По слабому звену проходим только один раз - уже прошли, больше не пойдем
					ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
					
					// Из этой вершины запустим расчет еще раз, чтобы "рассосались" по всему графу последствия прохода по слабому звену
					ВершиныСлабыхЗвеньев.Добавить(ОписаниеПриемника);
					
				Иначе
					
					// Покажем, что рассчитали приемник
					ОписаниеПриемника.КоличествоРассчитанныхИсточников = ОписаниеПриемника.КоличествоРассчитанныхИсточников + 1;
					
					// Запустим расчет со следующей вершины, если все ее источники рассчитаны
					Если ОписаниеПриемника.КоличествоИсточников = ОписаниеПриемника.КоличествоРассчитанныхИсточников Тогда
						ОписаниеПриемника.НомерПередела = Макс(ОписаниеПриемника.НомерПередела, ОписаниеИсточника.НомерПередела + 1);
						СтартовыеВершины.Добавить(ОписаниеПриемника);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // По инцидентным ребрам
			
			СтартовыеВершины.Удалить(0);
			
		КонецЦикла;
		
		// Не допускаем одинаковые элементы в очереди
		СтартовыеВершины = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВершиныСлабыхЗвеньев);
		
		// Инициализируем метки для следующей итерации
		Затраты.Вершины.ЗаполнитьЗначения(0,    "КоличествоИсточников");
		Затраты.Вершины.ЗаполнитьЗначения(0,    "КоличествоРассчитанныхИсточников");
		Затраты.Вершины.ЗаполнитьЗначения(Ложь, "Достижима");
		Затраты.Вершины.ЗаполнитьЗначения(Ложь, "ВОчереди");
		
	КонецЦикла;
	
	Затраты.Вершины.Колонки.Удалить("КоличествоИсточников");
	Затраты.Вершины.Колонки.Удалить("КоличествоРассчитанныхИсточников");
	Затраты.Вершины.Колонки.Удалить("Достижима");
	Затраты.Вершины.Колонки.Удалить("ВОчереди");
	
	ЗаписатьСтатистикуСокращенногоРасчета(СокращенныйРасчет);
	
КонецПроцедуры

// Рассчитывает суммы движения исходя из средней цены в оценке источника.
//
Функция ОценитьДвижение(Знач КоличествоДвижения, КоличествоИсточника, СуммыИсточника, Затраты)
	
	Если КоличествоИсточника <= 0 Тогда
		Возврат КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
	КонецЕсли;
	
	КоличествоДвижения = Мин(КоличествоИсточника, КоличествоДвижения);
	
	// Рассчитаем оценку движения
	ОценкаДвижения = Доля(СуммыИсточника, КоличествоДвижения, КоличествоИсточника, Затраты);
	
	// Скорректируем оценку источника
	КоличествоИсточника = КоличествоИсточника - КоличествоДвижения;
	КоллекцииСумм.Вычесть(СуммыИсточника, ОценкаДвижения, Затраты.ОписаниеСумм);
	
	Возврат ОценкаДвижения;
	
КонецФункции

Функция Доля(ИсходныеСуммы, Числитель, Знаменатель, Затраты)
	
	Результат = КоллекцииСумм.Доля(ИсходныеСуммы, Затраты.ОписаниеСумм, Числитель, Знаменатель);// Делит только фиксированные наборы
	
	НалогНаПрибыльБухгалтерскийУчет.ИсправитьПогрешностиОкругления(
		Результат,
		ИсходныеСуммы,
		Затраты.ОписаниеСумм,
		Числитель,
		Знаменатель,
		Затраты.КешПараметровРасчета.ОсновнойВидРазницПБУ18);
		
	СтруктураЗатрат.РассчитатьДолю(Результат, ИсходныеСуммы, Числитель, Знаменатель, Затраты.ВариантыСтруктурыЗатрат);
		
	Возврат Результат;
	
КонецФункции

Процедура ДооценитьКонтуры(Затраты)
	
	// Контуры размыкаются потому, что этого требует выбранный математический алгоритм оценки.
	// То есть, они размыкаются, чтобы получить оценку.
	// В результате получается корректная сумма оценки всех движений "за контуром",
	// однако сумма движений, соответствующих сокращенным ребрам может получиться неверной, заниженной.
	// Чтобы получить адекватную сумму движений, соответствующих сокращенным ребрам, 
	// следует после оценки графа дооценить ребра, входящие в разомкнутые контуры.
	// Пример: потребуется дать оценку проводкам 2 и 3, 
	// несмотря на то, что эти движения не влияют на последующие движения (финансовый результат, проводка 4)
	// 1. Дт 41/1 Кт 60     10 шт на 1000 руб
	// 2. Дт 41/2 Кт 41/1   5 шт
	// 3. Дт 41/1 Кт 41/2   5 шт
	// 4. Дт 90   Кт 41/1   10 шт (на 1000 руб)
	// В ходе оценки графа движения 2 и 3 получили нулевую оценку.
	// Теперь дадим им новую оценку исходя из суммовой оценки той вершины, к которой "привязан" контур.
	
	ОписаниеСумм = Затраты.ОписаниеСумм;
	
	// Контуры могут в общем случае пересекаться.
	// Если вычислять оценку пересекающихся контуров последовательно, 
	// то за счет разомкнутых ребер удельная величина дооценки каждого следующего разомкнутого контура
	// будет испытывать влияние предыдущего.
	// При некоторых условиях это может приводить к цепной реакции:
	// это влияние будет нелинейно расти для каждого следующего пересекающегося контура.
	// Поэтому заранее получим оценку каждой вершины во главе контура и будем использовать ее для всех контуров,
	// начинающихся из этой вершины.
	// Такая - неизменная - оценка не будет испытывать влияние следующих контуров и цепной реакции удастся избежать.
	ОценкиВершинКонтуров = Новый Соответствие;
	Для Каждого Контур Из Затраты.Контуры Цикл
		
		Если ОценкиВершинКонтуров[Контур.Вершина] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВершины = ОписаниеВершины(Затраты, Контур.Вершина);
		
		Суммы = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм, Истина);
		КоллекцииСумм.Заполнить(Суммы, ОписаниеВершины, ОписаниеСумм);
		
		ОценкаВершиныКонтура = Новый Структура;
		ОценкаВершиныКонтура.Вставить("Вес",   ОписаниеВершины.Вес);
		ОценкаВершиныКонтура.Вставить("Суммы", Суммы);
		
		ОценкиВершинКонтуров.Вставить(Контур.Вершина, ОценкаВершиныКонтура);
		
	КонецЦикла;
	
	Для Каждого Контур Из Затраты.Контуры Цикл
		
		ОценкаВершины = ОценкиВершинКонтуров[Контур.Вершина];
		
		Если ОценкаВершины.Вес = 0 Тогда
			// Ничего не сможем оценить исходя из такой вершины
			Продолжить;
		КонецЕсли;
	
		// Количество источника может быть меньше, чем количество движения.
		// В таком случае сумма дооценки должна быть больше, чем сумма источника 
		// (в отличие от остальных случаев оценки движений)
		// Поэтому здесь не используем ОценитьДвижение()
		
		СуммыДооценки = Доля(ОценкаВершины.Суммы, Контур.Вес, ОценкаВершины.Вес, Затраты);
		
		Для Каждого Ребро Из Контур.Ребра Цикл
			
			ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
			ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
			
			// Используем общий подход - сначала рассчитаем полную сумму движения, затем - сумму корректировки
			НоваяОценкаРебра = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм, Истина);
			КоллекцииСумм.Заполнить(НоваяОценкаРебра, Ребро, ОписаниеСумм);
			КоллекцииСумм.Сложить(НоваяОценкаРебра, СуммыДооценки, ОписаниеСумм);
			
			СкорректироватьОценкуРебра(ОписаниеПриемника, Ребро, НоваяОценкаРебра, Затраты, ОписаниеИсточника);
			
			Если Ребро.Зафиксировано Тогда
				// Скорректируем оценку источника - так всегда поступаем с зафиксированными ребрами

				КоллекцииСумм.Вычесть(ОписаниеИсточника, СуммыДооценки, ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьПредварительнуюОценкуЗапасов(Затраты, МенеджерВременныхТаблиц)
	
	Затраты.Ребра.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число")); // Нужен для помещения во временную таблицу, удалим в конце процедуры
	Для Каждого СтрокаТаблицы Из Затраты.Ребра Цикл
		СтрокаТаблицы.Индекс = Затраты.Ребра.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	ЛишниеВершины = ЗапасыНаКоторыеНеВлияютРасходы(Затраты);
	ИдентификаторыЛишнихВершин = Новый ТаблицаЗначений;
	ИдентификаторыЛишнихВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Для Каждого СтрокаТаблицы Из ЛишниеВершины Цикл
		ИдентификаторыЛишнихВершин.Добавить().Идентификатор = СтрокаТаблицы.Идентификатор;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЛишниеВершины) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем ребра из "лишних" вершин в остальную часть графа.
	// На предварительную оценку таких ребер увеличим оценку приемников.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЛишниеВершины", ИдентификаторыЛишнихВершин);
	Запрос.УстановитьПараметр("Ребра",         Затраты.Ребра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛишниеВершины.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЛишниеВершины
	|ИЗ
	|	&ЛишниеВершины КАК ЛишниеВершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Индекс КАК Индекс,
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_Ребра
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_РебраИзЛишнихВершин
	|ИЗ
	|	ВТ_Ребра КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛишниеВершины КАК ЛишниеВершины
	|		ПО Ребра.Источник = ЛишниеВершины.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_ЛишниеРебраВлияютНаРасходы
	|ИЗ
	|	ВТ_РебраИзЛишнихВершин КАК Ребра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛишниеВершины КАК ЛишниеВершины
	|		ПО Ребра.Приемник = ЛишниеВершины.Идентификатор
	|ГДЕ
	|	ЛишниеВершины.Идентификатор ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник";
	Запрос.Выполнить();
	
	// Разделим запросы, формирующие временные таблицы и запросы, выбирающие данные,
	// чтобы не вычислять номера запросов в пакете
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.Индекс КАК Индекс,
	|	Выбытия.Сумма КАК Сумма,
	|	Выбытия.СуммаНУ КАК СуммаНУ,
	|	Выбытия.СуммаПР КАК СуммаПР,
	|	Выбытия.СуммаВР КАК СуммаВР
	|ИЗ
	|	ВТ_Ребра КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РебраИзЛишнихВершин КАК ЛишниеРебра
	|		ПО Ребра.Источник = ЛишниеРебра.Источник
	|			И Ребра.Приемник = ЛишниеРебра.Приемник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Выбытия КАК Выбытия
	|		ПО Ребра.Источник = Выбытия.Источник
	|			И Ребра.Приемник = Выбытия.Приемник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Приемник КАК Идентификатор,
	|	СУММА(Выбытия.Сумма) КАК Сумма,
	|	СУММА(Выбытия.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выбытия.СуммаПР) КАК СуммаПР,
	|	СУММА(Выбытия.СуммаВР) КАК СуммаВР
	|ИЗ
	|	ВТ_ЛишниеРебраВлияютНаРасходы КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Выбытия КАК Выбытия
	|		ПО Ребра.Источник = Выбытия.Источник
	|			И Ребра.Приемник = Выбытия.Приемник
	|
	|СГРУППИРОВАТЬ ПО
	|	Ребра.Приемник";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОписаниеСуммВыборка = ОписаниеКоллекцииСумм();
	
	// Предварительная оценка стоимости запасов, полученная выше
	// 1. достаточна в части тех сумм, которые отражаются непосредственно в проводках
	// 2. может быть недостаточной для сумм, учет которых ведется не только в проводках, таких как данные о структуре стоимости.
	//
	// Поэтому предварительная оценка для сумм второго вида не принимается в расчет:
	// если такие есть, то для них используется оценка прошлого периода, а предварительная оценка игнорируется.
	//
	// В связи с этим порядок фиксации предварительной оценки затрат может быть разным, в зависимости от используемых наборов сумм:
	// могут использоваться
	// 1. либо только данные предварительной оценки, если они полные
	// 2. либо, если используются суммы второго вида, как данные предварительной оценки (для одних сумм),
	//    так и данные оценки предыдущего периода для других.
	//
	// В первом случае можно опираться на данные предварительной оценки 
	// - как вершин, на которые не влияют расходы
	// - так и ребер, ведущих из этих вершин.
	//
	// Поэтому достаточно
	// - скорректировать оценку вершин, в которые ведут ребра с предварительной оценкой
	// - удалить эти вершины и ребра из графа
	// При этом порядок обхода вершин и ребер не важен, потому что все суммы уже есть в исходных данных.
	// Это позволяет ограничиться более производительным алгоритмом обхода - см. ЗапасыНаКоторыеНеВлияютРасходы.
	//
	// Во втором случае корректные оценки будут только у корневых вершин, поэтому порядок обхода вершин важен.
	// Для получения этой оценки создаем отдельный граф, который будет содержать
	// - вершины запасов и ребра, удаленные из общего графа (имеющие предварительную оценку)
	// - инцидентные удаленным ребрам вершины расходов.
	// В этом графе оцениваем только те суммы, предварительную оценку которых использовать не можем, используя общий механизм оценки.
	// Цель этого - получить оценку вершин расходов.
	// Затем полученную оценку расходов добавляем в основной граф.
	
	ВариантыИспользованияПредварительнойОценки = Новый Структура;
	ВариантыИспользованияПредварительнойОценки.Вставить("Использовать",   Новый Массив);
	ВариантыИспользованияПредварительнойОценки.Вставить("НеИспользовать", Новый Массив);
	
	Для Каждого Вариант Из Затраты.ВариантыСтруктурыЗатрат Цикл
		Если Вариант.Имя = "СтатьиКалькуляции" Тогда
			// Эти значения не относятся к запасам - это оценка незавершенного производства
			ВариантыИспользованияПредварительнойОценки.Использовать.Добавить(Вариант);
		Иначе
			ВариантыИспользованияПредварительнойОценки.НеИспользовать.Добавить(Вариант);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВариантыИспользованияПредварительнойОценки.НеИспользовать) Тогда
		Запасы = НовыйГрафЗатрат(Затраты.ОписаниеСумм, Затраты.ВариантыСтруктурыЗатрат);
	КонецЕсли;
	
	// Удалим лишние ребра из графа.
	Выборка = РезультатЗапроса[0].Выбрать();
	// Выборка отсортирована по убыванию строки - то есть удалять будем с конца таблицы ребер, чтобы не "порушить" индексы строк.
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВариантыИспользованияПредварительнойОценки.НеИспользовать) Тогда
			ИсходноеРебро = Затраты.Ребра[Выборка.Индекс];
			ЗаполнитьЗначенияСвойств(Запасы.Ребра.Добавить(), ИсходноеРебро);//Исходное ребро будет удалено, поэтому заполнять ссылками на вложенные коллекции безопасно
		КонецЕсли;
		
		Затраты.Ребра.Удалить(Выборка.Индекс);
		
	КонецЦикла;
	
	// На оценку удаленных ребер скорректируем оценку вершин графа
	// (конечно, корректируем только вершины, которые не подлежат удалению)
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВершины = ОписаниеВершины(Затраты, Выборка.Идентификатор);
		КоллекцииСумм.Сложить(ОписаниеВершины, Выборка, ОписаниеСуммВыборка);
		СтруктураЗатрат.УстановитьОсновныеЭлементы(ОписаниеВершины, ВариантыИспользованияПредварительнойОценки.Использовать);
		
		Если ЗначениеЗаполнено(ВариантыИспользованияПредварительнойОценки.НеИспользовать) Тогда
			// Дополним граф запасов данными о вершинах расходов.
			// Нам важна только та часть оценки этих вершин, что определяется инцидентными ребрами.
			// Поэтому веса и суммы не заполняем.
			ВершинаРасходов = Запасы.Вершины.Добавить();
			ВершинаРасходов.РазделУчета   = "Расходы";
			ВершинаРасходов.Идентификатор = Выборка.Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим лишние вершины из графа
	// Из таблицы Выбытия лишние ребра можно не удалять, потому что проводки формируются только с участием тех вершин-источников,
	// которые есть в графе
	Для Каждого ОписаниеВершины Из ЛишниеВершины Цикл
		
		СтрокиКУдалению = Затраты.Контуры.НайтиСтроки(Новый Структура("Вершина", ОписаниеВершины.Идентификатор));
		Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			Затраты.Контуры.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		СтрокиКУдалению = Затраты.ЦелевоеСальдо.НайтиСтроки(Новый Структура("Идентификатор", ОписаниеВершины.Идентификатор));
		Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			Затраты.ЦелевоеСальдо.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВариантыИспользованияПредварительнойОценки.НеИспользовать) Тогда
			// Дополним граф запасов данными о вершинах запасов.
			ОписаниеВершиныЗапасов  = Запасы.Вершины.Добавить();
			// Исходная вершина будет удалена, поэтому заполнять ссылками на вложенные коллекции безопасно
			ЗаполнитьЗначенияСвойств(ОписаниеВершиныЗапасов, ОписаниеВершины);
		КонецЕсли;
		
		Затраты.Вершины.Удалить(ОписаниеВершины);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВариантыИспользованияПредварительнойОценки.НеИспользовать) Тогда
		
		// Выполним оценку в графе запасов
		ОценитьЗатраты(Запасы);
		
		// Дополним основной граф результатами оценки - только в части 
		ОписаниеСуммДобавленнойОценки = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
		СтруктураЗатрат.ДополнитьОписаниеКоллекцииСумм(
			ОписаниеСуммДобавленнойОценки,
			ВариантыИспользованияПредварительнойОценки.НеИспользовать);
		
		ВершиныРасходов = Запасы.Вершины.НайтиСтроки(Новый Структура("РазделУчета", "Расходы"));
		Для Каждого ОписаниеРассчитаннойВершины Из ВершиныРасходов Цикл
			
			ОписаниеВершиныРезультата = ОписаниеВершины(Затраты, ОписаниеРассчитаннойВершины.Идентификатор);
			Если ОписаниеВершиныРезультата = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КоллекцииСумм.Сложить(ОписаниеВершиныРезультата, ОписаниеРассчитаннойВершины, ОписаниеСуммДобавленнойОценки);
			
			СтруктураЗатрат.УстановитьОсновныеЭлементы(
				ОписаниеВершиныРезультата,
				ВариантыИспользованияПредварительнойОценки.НеИспользовать);
		КонецЦикла;
		
	КонецЕсли;
	
	// Уберем за собой
	Затраты.Ребра.Колонки.Удалить("Индекс");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_Ребра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЛишниеРебраВлияютНаРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РебраИзЛишнихВершин";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапасыНаКоторыеНеВлияютРасходы(Затраты)
	
	// Находим вершины, у которых среди предшественников ни в одном поколении нет расходов.
	//
	// Для поиска таких вершин применим такой алгоритм:
	// - поджигаем все вершины из раздела "Расходы"
	// - "горящие" вершины "поджигают" смежные - пока не "сгорит" все, куда можно добраться
	// - не "сгоревшие" вершины - лишние (они в силу алгоритма из раздела "Запасы")
	
	Затраты.Вершины.Колонки.Добавить("ПоступаютРасходы", Новый ОписаниеТипов("Булево")); // Удалим метки по окончании функции
	
	ОчередьВершин = Новый Массив;
	
	// Ставим в очередь все расходы
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		Если ОписаниеВершины.РазделУчета = "Расходы" Тогда
			ОписаниеВершины.ПоступаютРасходы = Истина;
			ОчередьВершин.Добавить(ОписаниеВершины);
		КонецЕсли;
	КонецЦикла;
	
	// "Поджигаем" все, до куда дотянемся
	Пока ОчередьВершин.Количество() > 0 Цикл
		
		ОписаниеВершины = ОчередьВершин[0];
		ОписаниеВершины.ПоступаютРасходы = Истина;
		
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор, Истина, Истина);
		
		Для Каждого ОписаниеРебра Из Приемники Цикл
			
			ОписаниеПриемника = ОписаниеВершины(Затраты, ОписаниеРебра.Приемник);
			Если НЕ ОписаниеПриемника.ПоступаютРасходы Тогда
				ОчередьВершин.Добавить(ОписаниеПриемника);
			КонецЕсли;
			
		КонецЦикла;
		
		ОчередьВершин.Удалить(0);
		
	КонецЦикла;
	
	// Выберем расходы, которые не "сгорели"
	Отбор = Новый Структура;
	Отбор.Вставить("ПоступаютРасходы", Ложь);
	НеПоступаютРасходы = Затраты.Вершины.НайтиСтроки(Отбор);
	
	Затраты.Вершины.Колонки.Удалить("ПоступаютРасходы");
	
	Возврат НеПоступаютРасходы;
	
КонецФункции

#Область ЦелевоеСальдо // Ограничение распределения по сумме целевого сальдо - по данным документа ИнвентаризацияНЗП

// См. также НевернаяОценкаНезавершенногоПроизводства

Процедура СоздатьЦелевоеСальдо(МенеджерВременныхТаблиц)
	
	// Идентифицируем вершины графа, в которых могут быть суммы незавершенного производства - 
	// то есть те суммы, которые следует оставить на счетах, несмотря на данные весов вершины и ребер
	
	// В графе затрат может содержаться несколько вершин с одинаковыми наборами ключевых полей.
	// Такие наборы вершин образуют группу, на некоторых (конечных) вершинах которой должна остаться сумма целевого сальдо.
	// Определим эту группу
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ключи.Идентификатор КАК Идентификатор,
	|	Ключи.Счет КАК Счет,
	|	Ключи.Подразделение КАК Подразделение,
	|	Ключи.Субконто1 КАК Субконто1,
	|	Ключи.Субконто2 КАК Субконто2,
	|	Ключи.Субконто3 КАК Субконто3,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.КорСчет КАК КорСчет,
	|	НезавершенноеПроизводство.Сумма КАК Сумма,
	|	НезавершенноеПроизводство.СуммаНУ КАК СуммаНУ
	|ПОМЕСТИТЬ ЦелевоеСальдо
	|ИЗ
	|	НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|		ПО НезавершенноеПроизводство.Счет = Ключи.Счет
	|			И НезавершенноеПроизводство.Подразделение = Ключи.Подразделение
	|			И НезавершенноеПроизводство.Субконто1 = Ключи.Субконто1
	|			И НезавершенноеПроизводство.Субконто2 = Ключи.Субконто2
	|			И НезавершенноеПроизводство.Субконто3 = Ключи.Субконто3
	|			И НезавершенноеПроизводство.Номенклатура = Ключи.Номенклатура
	|			И НезавершенноеПроизводство.КорСчет = Ключи.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ключи.Идентификатор КАК ИдентификаторВершины,
	|	ЦелевоеСальдо.Идентификатор КАК ИдентификаторГруппы
	|ПОМЕСТИТЬ ГруппыЦелевоеСальдо
	|ИЗ
	|	ЦелевоеСальдо КАК ЦелевоеСальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК Ключи
	|		ПО ЦелевоеСальдо.Счет = Ключи.Счет
	|			И ЦелевоеСальдо.Подразделение = Ключи.Подразделение
	|			И ЦелевоеСальдо.Субконто1 = Ключи.Субконто1
	|			И ЦелевоеСальдо.Субконто2 = Ключи.Субконто2
	|			И ЦелевоеСальдо.Субконто3 = Ключи.Субконто3
	|			И ЦелевоеСальдо.Номенклатура = Ключи.Номенклатура
	|			И ЦелевоеСальдо.КорСчет = Ключи.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторВершины";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьЦелевоеСальдо(Затраты, МенеджерВременныхТаблиц)
	
	// В вершинах графа проставим информацию о суммах незавершенного производства - 
	// то есть тех суммах, которые следует оставить на счетах, несмотря на данные весов вершины и ребер
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦелевоеСальдо.Идентификатор КАК Идентификатор,
	|	ЦелевоеСальдо.Сумма КАК Сумма,
	|	ЦелевоеСальдо.СуммаНУ КАК СуммаНУ
	|ИЗ
	|	ЦелевоеСальдо КАК ЦелевоеСальдо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.ЦелевоеСальдо.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЦелевоеСальдо.ИдентификаторВершины КАК ИдентификаторВершины,
	|	ГруппыЦелевоеСальдо.ИдентификаторГруппы КАК ИдентификаторГруппы
	|ИЗ
	|	ГруппыЦелевоеСальдо КАК ГруппыЦелевоеСальдо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторВершины";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеВершины = ОписаниеВершины(Затраты, Выборка.ИдентификаторВершины);
		ОписаниеВершины.ЦелевоеСальдо = Выборка.ИдентификаторГруппы;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОграничитьЦелевоеСальдо(Затраты)
	
	ПромежуточныеВершиныГруппЦелевогоСальдо = Новый Массив;
	ПоследниеВершиныГруппЦелевогоСальдо = Новый Соответствие;
	РезервныеВершиныГруппЦелевогоСальдо = Новый Соответствие;
	
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		
		Если ОписаниеВершины.ЦелевоеСальдо = УчетЗатрат.ИдентификаторВершиныНеопределено() Тогда
			Продолжить;
		КонецЕсли;
		
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор, Истина);
		
		ПоследняяВершинаГруппы = Истина;
		ЕстьВыходИзГруппы      = Ложь;
		
		Для Каждого Приемник Из Приемники Цикл
			
			ОписаниеПриемника = ОписаниеВершины(Затраты, Приемник.Приемник);
			
			Если ОписаниеПриемника.ЦелевоеСальдо <> ОписаниеВершины.ЦелевоеСальдо Тогда
				// Пока все перебранные следующие вершины не входят в группу.
				// Поэтому, пока вершина из ОписаниеВершины выглядит, как последняя.
				ЕстьВыходИзГруппы = Истина;
				Продолжить;
			КонецЕсли;
			
			// Из вершины ОписаниеВершины можно попасть в другую вершину этой же группы.
			// Поэтому она точно не последняя.
			ПоследняяВершинаГруппы = Ложь;
			
			Если ЕстьВыходИзГруппы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоследняяВершинаГруппы Тогда
			ПоследниеВершиныГруппЦелевогоСальдо.Вставить(ОписаниеВершины.ЦелевоеСальдо, ОписаниеВершины.Идентификатор);
			Продолжить;
		КонецЕсли;
			
		ПромежуточныеВершиныГруппЦелевогоСальдо.Добавить(ОписаниеВершины);
		
		Если ЕстьВыходИзГруппы Тогда
			РезервныеВершиныГруппЦелевогоСальдо.Вставить(ОписаниеВершины.ЦелевоеСальдо, ОписаниеВершины);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеВершины Из ПромежуточныеВершиныГруппЦелевогоСальдо Цикл
		ОписаниеВершины.ЦелевоеСальдо = УчетЗатрат.ИдентификаторВершиныНеопределено();
	КонецЦикла;
	
	Для Каждого ОписаниеГруппы Из РезервныеВершиныГруппЦелевогоСальдо Цикл
		
		ЕстьПоследняяВершина = ПоследниеВершиныГруппЦелевогоСальдо[ОписаниеГруппы.Ключ] <> Неопределено;
		Если ЕстьПоследняяВершина Тогда
			Продолжить;
		КонецЕсли;
		
		// Восстановим одну из промежуточных вершин, чтобы в группе осталась хотя бы одна вершина
		ОписаниеГруппы.Значение.ЦелевоеСальдо = ОписаниеГруппы.Ключ;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьЦелевоеСальдо(Суммы, Затраты, ОписаниеВершины)
	
	Если ОписаниеВершины.ЦелевоеСальдо < 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦелевоеСальдо = Затраты.ЦелевоеСальдо.Найти(ОписаниеВершины.ЦелевоеСальдо, "Идентификатор");
	Если ЦелевоеСальдо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определим предельную сумму, которую следует оставить в этой вершине (или следующих, входящих в группу) - 
	// с учетом ранее исключенных сумм
	РанееИсключеннаяСумма = ЦелевоеСальдо.СоставГруппы[ОписаниеВершины.Идентификатор];
	Если РанееИсключеннаяСумма <> Неопределено Тогда
		КоллекцииСумм.Сложить(ЦелевоеСальдо, РанееИсключеннаяСумма, Затраты.ОписаниеСуммЦелевоеСальдо);
		ЦелевоеСальдо.СоставГруппы.Удалить(ОписаниеВершины.Идентификатор);
	КонецЕсли;
		
	СуммыЦелевоеСальдо = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСуммЦелевоеСальдо, Истина);
	КоллекцииСумм.Заполнить(СуммыЦелевоеСальдо, ЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	Если КоллекцииСумм.Пустая(СуммыЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим сумму, которую можем оставить в этой вершине
	ИсходнаяСумма = Суммы.Сумма;
	
	ДостижимоеСальдо = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
	
	КоллекцииСумм.Заполнить(ДостижимоеСальдо, Суммы, Затраты.ОписаниеСуммЦелевоеСальдо);
	КоллекцииСумм.Ограничить(ДостижимоеСальдо, СуммыЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	// Запомним исключенную сумму
	ИсключенныеСуммы = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСуммЦелевоеСальдо, Истина);
	КоллекцииСумм.Заполнить(ИсключенныеСуммы, ДостижимоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	ЦелевоеСальдо.СоставГруппы.Вставить(ОписаниеВершины.Идентификатор, ИсключенныеСуммы);
	КоллекцииСумм.Вычесть(ЦелевоеСальдо, ИсключенныеСуммы, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	// Дополним данные о достижимом сальдо разницами.
	// Рассчитаем их так, чтобы выглядело достоверно - 
	// разницы были такими же, как и в оценке расходов.
	НалогНаПрибыльБухгалтерскийУчет.РассчитатьРазницыПоНалогуНаПрибыль(
		ДостижимоеСальдо,
		ОписаниеВершины,
		Затраты.ОписаниеСумм,
		Истина,
		Затраты.КешПараметровРасчета.ОсновнойВидРазницПБУ18);
	
	КоллекцииСумм.Вычесть(Суммы, ДостижимоеСальдо, Затраты.ОписаниеСумм);
	
	СтруктураЗатрат.ИсправитьВсе(Суммы, Затраты.ВариантыСтруктурыЗатрат);
	
	// Скорректируем количество материалов. Опираемся на бухгалтерскую оценку
	Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию 
		И ЗначениеЗаполнено(Суммы.СтатьиКалькуляции) Тогда
		
		ТипКоличествоМатериала = Затраты.ОписаниеСумм.НаборыСумм.СтатьиКалькуляции.ДополнительныеЗначения.КоличествоМатериала;
		
		Для Каждого ДанныеСтатьиКалькуляции Из Суммы.СтатьиКалькуляции Цикл
			
			Если ДанныеСтатьиКалькуляции.КоличествоМатериала = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтатьиКалькуляции.КоличествоМатериала = КоллекцииСумм.ДоляСуммы(
				ДанныеСтатьиКалькуляции.КоличествоМатериала,
				Суммы.Сумма,
				ИсходнаяСумма,
				ТипКоличествоМатериала);
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НалоговыйУчет // Особенности работы с суммами налога на прибыль и разниц

Функция ВыделитьНалоговыйУчет(ВидДвижения, СуммыИсточника, Затраты)
	
	// В ходе выделения сумм налогового учета на другую вершину переносятся только суммы налогового учета.
	// В результате отражаются временные или постоянные разницы.
	// Какие именно определяется типом ребра.
	// Выделение сумм налогового учета нужно для того, чтобы поддержать разные правила для целей бухгалтерского и налогового учета.
	
	// Для пары БУ_ПР и НУ_ПР:
	// для вида учета БУ
	// БУ = БУ()
	// НУ = 0
	// ПР = ПР() + НУ()
	// ВР = ВР()
	// для вида учета НУ
	// БУ = 0
	// НУ = НУ()
	// ПР = - НУ()
	// ВР = 0
	// Таким образом, суммы ПР и ВР "ходят" вслед за суммой БУ.
	
	СуммыРебра = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
	
	Если Не КоллекцииСумм.ЕстьНаборСумм(Затраты.ОписаниеСумм, "НалоговыйУчет") Тогда
		Возврат СуммыРебра;
	КонецЕсли;
	
	СуммыРебра.СуммаНУ = СуммыИсточника.СуммаНУ;
	
	НаборыСуммНалоговыйУчет = Новый Массив;
	Для Каждого КоллекцияНалоговыйУчет Из Затраты.КешПараметровРасчета.ИменаСвойствНалоговыйУчетПеременныхНаборовСумм Цикл
		
		НаборСуммИсточника = СуммыИсточника[КоллекцияНалоговыйУчет.Ключ];
		Если Не ЗначениеЗаполнено(НаборСуммИсточника) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборСуммРебра = СуммыИсточника[КоллекцияНалоговыйУчет.Ключ].Скопировать();
		НаборСуммРебра.ЗаполнитьЗначения(0, КоллекцияНалоговыйУчет.Значение);
		СуммыРебра[КоллекцияНалоговыйУчет.Ключ] = НаборСуммРебра;
		НаборыСуммНалоговыйУчет.Добавить(НаборСуммРебра);
		
	КонецЦикла;
	
	Если НалогНаПрибыльБухгалтерскийУчет.ЕстьРазницыПоНалогуНаПрибыль(Затраты.ОписаниеСумм) Тогда
		
		Если ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы Тогда
			
			СуммыРебра.СуммаПР = - СуммыРебра.СуммаНУ;
			
			ВыделитьРазницыПоНалогуНаПрибыльПеременныхНаборовСумм(НаборыСуммНалоговыйУчет, "СуммаПР");
			
		ИначеЕсли ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
			
			СуммыРебра.СуммаВР = - СуммыРебра.СуммаНУ;
			
			ВыделитьРазницыПоНалогуНаПрибыльПеременныхНаборовСумм(НаборыСуммНалоговыйУчет, "СуммаВР");
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоллекцииСумм.Вычесть(СуммыИсточника, СуммыРебра, Затраты.ОписаниеСумм);
	
	Возврат СуммыРебра;
		
КонецФункции

Процедура ИнициализироватьКешНалоговогоУчета(Затраты)
	
	// Для простоты обращения безусловно помещаем значение по умолчанию,
	// фактическое значение которого, при необходимости, устанавливаем снаружи.
	Затраты.КешПараметровРасчета.Вставить("ОсновнойВидРазницПБУ18", Перечисления.ВидыРазницПБУ18.ВР);
	
	Если Не КоллекцииСумм.ЕстьНаборСумм(Затраты.ОписаниеСумм, "НалоговыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРазницы = НалогНаПрибыльБухгалтерскийУчет.ЕстьРазницыПоНалогуНаПрибыль(Затраты.ОписаниеСумм);
	
	Затраты.КешПараметровРасчета.Вставить("ИменаСвойствНалоговыйУчетПеременныхНаборовСумм", Новый Структура);
	
	Для Каждого ОписаниеСумм Из Затраты.ОписаниеСумм Цикл
		
		Для Каждого ИмяНабора Из Затраты.ОписаниеСумм.ИменаПеременныхНаборовСумм Цикл
			
			ОписаниеНабора = Затраты.ОписаниеСумм.НаборыСумм[ИмяНабора];
			
			Если ОписаниеНабора.ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиОчистки = Новый Массив;
			КолонкиОчистки.Добавить("Сумма");
			
			Если ЕстьРазницы Тогда
				
				Если ОписаниеНабора.ИменаСвойств.Найти("СуммаПР") = Неопределено 
					Или ОписаниеНабора.ИменаСвойств.Найти("СуммаВР") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				КолонкиОчистки.Добавить("СуммаПР");
				КолонкиОчистки.Добавить("СуммаВР");
				
			КонецЕсли;
			
			Для Каждого ОписаниеЗначения Из ОписаниеНабора.ДополнительныеЗначения Цикл
				КолонкиОчистки.Добавить(ОписаниеЗначения.Ключ);
			КонецЦикла;
			
			Затраты.КешПараметровРасчета.ИменаСвойствНалоговыйУчетПеременныхНаборовСумм.Вставить(
				ИмяНабора,
				СтрСоединить(КолонкиОчистки, ","));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьРазницыПоНалогуНаПрибыльПеременныхНаборовСумм(НаборыСуммНалоговыйУчет, ИмяСуммыРазницы)

	Для Каждого НаборСумм Из НаборыСуммНалоговыйУчет Цикл
		Для Каждого Запись Из НаборСумм Цикл
			Запись[ИмяСуммыРазницы] = - Запись.СуммаНУ;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Меняет в переданных вершинах и ведущих к ним ребрах вид разниц, которые похожи на погрешности округления.
// Часть алгоритма оценки затрат. Подробнее см. в теле функции.
//
// Параметры:
//  ОписанияПриемников - Структура - набор описаний вершин, находящихся в общем окружении, 
//           т.е. таких, в которые ведут смежные ребра, выходящие из одного источника.
//           Эти смежные ребра не должны быть зафиксированными.
//           Ключ - идентификатор вершины, Значение - описание вершины
//  Затраты - см. НовыйГрафЗатрат()
Процедура СпрятатьРазницыПоНалогуНаПрибыльПохожиеНаПогрешностиОкругления(ОписанияПриемников, Затраты)
	
	// В результате выделения сумм налогового учета может получиться так, что между парой вершин есть два пути.
	// При этом 
	// - в источнике нет разниц одного вида (например, постоянных), но есть разницы другого вида (например, временные)
	// - в каждом из путей появляются разницы (в примере - постоянные), но с противоположным знаком.
	//
	// Если этому источнику смежны несколько приемников, то в результате округления и в результате исправления погрешностей округления
	// в приемниках безосновательно появятся разницы одного из видов (в примере - постоянные).
	// Если бы округлять было бы не нужно, то разницы были бы другого вида.
	//
	// Сложно отследить, почему - за счет какого именно округления - появились разницы и были ли основания
	// (а таким основанием может быть, например, различие баз распределения расходов в бухгалтерском и налоговом учете).
	//
	// Поэтому найдем такие разницы, которые выглядят подозрительно, и если их можно объяснить округлением - спрячем, переведем в другой вид.
	
	Если Не КоллекцииСумм.ЕстьНаборСумм(Затраты.ОписаниеСумм, "НалоговыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписанияПриемников.Количество() < 2 Тогда
		// Погрешности могут быть за счет округления при распределении. А в этом случае больше одного приемника.
		Возврат;
	КонецЕсли;
	
	СуммаПриемников     = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
	ПриемникиСРазницами = Новый Соответствие; // Ключ - идентификатор вершины; значение - коллекция сумм
	Для Каждого КлючИЗначение Из ОписанияПриемников Цикл
		
		// Важно, чтобы было два вида разниц: одна может оказаться "правильной", другая - нет.
		// Если разниц нет совсем, то и проблемы нет.
		// Если разницы только одного вида, то даже если проблема и есть, нет возможности ее устранить.
		Если КлючИЗначение.Значение.СуммаПР = 0 Или КлючИЗначение.Значение.СуммаВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыПриемника = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина);
		КоллекцииСумм.Заполнить(СуммыПриемника, КлючИЗначение.Значение, Затраты.ОписаниеСумм);
		ПриемникиСРазницами.Вставить(КлючИЗначение.Ключ, СуммыПриемника); // В ПриемникиСРазницами помещаем _копию_ коллекции сумм, потому что ниже будем их пытаться перераспределять и нужна возможность откатиться при неудачной попытке
		
		КоллекцииСумм.Сложить(СуммаПриемников, СуммыПриемника, Затраты.ОписаниеСумм);
		
	КонецЦикла;
	
	Если ПриемникиСРазницами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧтоКорректировать = "";
	Если СуммаПриемников.СуммаПР = 0 И СуммаПриемников.СуммаВР <> 0 Тогда
		// Похоже, что те суммы ПР, что есть у отдельных приемников - неправильные, случайные.
		// Потому что в сумме они дают 0.
		ЧтоКорректировать = "СуммаПР";
		ЧемКорректировать = "СуммаВР";
	ИначеЕсли СуммаПриемников.СуммаВР = 0 И СуммаПриемников.СуммаПР <> 0 Тогда
		ЧтоКорректировать = "СуммаВР";
		ЧемКорректировать = "СуммаПР";
	Иначе
		// Не выглядит подозрительно
		Возврат; 
	КонецЕсли;
	
	// Попробуем спрятать подозрительно выглядящие суммы.
	
	// Для этого нужно будет перераспределить их между ребрами, ведущими к приемникам, в которых замечена проблема.
	// Пробное перераспределение сохраняем в отдельном описании части графа.
	ПробноеРаспределение = Новый Структура;
	ПробноеРаспределение.Вставить("Источники", Затраты.Вершины.СкопироватьКолонки());
	ПробноеРаспределение.Источники.Колонки.Добавить("ЕстьРебраДляКорректировкиРазниц", Новый ОписаниеТипов("Булево"));
	ПробноеРаспределение.Источники.Индексы.Добавить("Идентификатор");
	ПробноеРаспределение.Вставить("Приемники", ПриемникиСРазницами);// Ключ - идентификатор вершины; значение - коллекция сумм
	ПробноеРаспределение.Вставить("Ребра",     Затраты.Ребра.СкопироватьКолонки());
	ПробноеРаспределение.Ребра.Колонки.Добавить("Ребро");// Ссылка на строку таблицы Ребра из Затраты
	ПробноеРаспределение.Ребра.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Число")); // Сумма корректировки
	ПробноеРаспределение.Ребра.Индексы.Добавить("Источник");
	ПробноеРаспределение.Ребра.Индексы.Добавить("Приемник,Зафиксировано");
	
	Отбор = Новый Структура; // См. ИнцидентныеРебра()
	Отбор.Вставить("Приемник");// ниже в цикле меняется
	Отбор.Вставить("Зафиксировано", Ложь);
	
	Для Каждого ОписаниеПриемникаКлючИЗначение Из ОписанияПриемников Цикл
		
		Отбор.Приемник = ОписаниеПриемникаКлючИЗначение.Ключ;
		Ребра = Затраты.Ребра.НайтиСтроки(Отбор);
		Для Каждого Ребро Из Ребра Цикл
			
			Если ПриемникиСРазницами[Ребро.Приемник] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеИсточника = ПробноеРаспределение.Источники.Найти(Ребро.Источник, "Идентификатор");
			Если ОписаниеИсточника = Неопределено Тогда
				ОписаниеИсточника = ПробноеРаспределение.Источники.Добавить();
				ОписаниеИсточника.Идентификатор = Ребро.Источник;
			КонецЕсли;
			ОписаниеИсточника.Вес = ОписаниеИсточника.Вес + Ребро.Вес;
			КоллекцииСумм.Сложить(ОписаниеИсточника, Ребро, Затраты.ОписаниеСумм);
			
			Если Ребро.СуммаПР = 0 Или Ребро.СуммаВР = 0 Тогда
				// Использовать его для перераспределения нельзя
				Продолжить;
			КонецЕсли;
			
			ОписаниеИсточника.ЕстьРебраДляКорректировкиРазниц = Истина; // Для оптимизации: далее сможем пропустить вершины без ребер.
			
			ПробноеРебро = ПробноеРаспределение.Ребра.Добавить();
			ЗаполнитьЗначенияСвойств(ПробноеРебро, Ребро);
			ПробноеРебро.Ребро = Ребро;
			
		КонецЦикла;
	КонецЦикла;
	
	// В каждой группе ребер, ведущих из одного источника, (кусте) пытаемся перераспределить суммы так, чтобы
	// - нежелательные разницы в приемниках пропали
	// - перераспределение в ребрах не было заметно - можно было его объяснить округлением, а именно так, чтобы:
	// -- не затронуть суммы источника; другими словами, чтобы суммарная оценка ребер не изменилась
	// -- новые оценки ребер отличались от точных (неокругленных) незначительно
	
	РазрядностьДробнойЧастиСумм = БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм();
	ПоловинаМинимальнойСуммы    = Pow(10, -РазрядностьДробнойЧастиСумм) / 2;
	
	Для Каждого ОписаниеИсточника Из ПробноеРаспределение.Источники Цикл
		
		Если Не ОписаниеИсточника.ЕстьРебраДляКорректировкиРазниц Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеИсточника.Вес = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ребра = ПробноеРаспределение.Ребра.НайтиСтроки(Новый Структура("Источник", ОписаниеИсточника.Идентификатор));
		
		// Для того, чтобы оценка источника не изменилась, обеспечим, что суммарное увеличение равно суммарному уменьшению
		ИтогоКорректировка = 0;
		
		Для Каждого Ребро Из Ребра Цикл
			
			ОписаниеПриемника = ПробноеРаспределение.Приемники[Ребро.Приемник];
			
			Коэффициент = Ребро.Вес / ОписаниеИсточника.Вес;
			ТочноеЗначениеЧтоКорректировать = ОписаниеИсточника[ЧтоКорректировать] * Коэффициент;
			ТочноеЗначениеЧемКорректировать = ОписаниеИсточника[ЧемКорректировать] * Коэффициент;
			
			Если ТочноеЗначениеЧтоКорректировать = Окр(ТочноеЗначениеЧтоКорректировать, РазрядностьДробнойЧастиСумм)
				И ТочноеЗначениеЧемКорректировать = Окр(ТочноеЗначениеЧемКорректировать, РазрядностьДробнойЧастиСумм) Тогда
				// Результат распределения выражен точным значением, поэтому никакие округления к нему заведомо не применялись.
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеПриемника[ЧтоКорректировать] > 0 Тогда
				// надо уменьшить
				МинимальноеЧтоКорректировать  = Окр(ТочноеЗначениеЧтоКорректировать - ПоловинаМинимальнойСуммы, РазрядностьДробнойЧастиСумм);
				МаксимальноеЧемКорректировать = Окр(ТочноеЗначениеЧемКорректировать + ПоловинаМинимальнойСуммы, РазрядностьДробнойЧастиСумм);
				Ребро.Корректировка = - Мин(
					ОписаниеПриемника[ЧтоКорректировать],
					Ребро[ЧтоКорректировать] - МинимальноеЧтоКорректировать,
					МаксимальноеЧемКорректировать - Ребро[ЧемКорректировать]);
			Иначе
				// надо увеличить
				МаксимальноеЧтоКорректировать = Окр(ТочноеЗначениеЧтоКорректировать + ПоловинаМинимальнойСуммы, РазрядностьДробнойЧастиСумм);
				МинимальноеЧемКорректировать  = Окр(ТочноеЗначениеЧемКорректировать - ПоловинаМинимальнойСуммы, РазрядностьДробнойЧастиСумм);
				Ребро.Корректировка = Мин(
					-ОписаниеПриемника[ЧтоКорректировать],
					МаксимальноеЧтоКорректировать - Ребро[ЧтоКорректировать],
					Ребро[ЧемКорректировать] - МинимальноеЧемКорректировать);
			КонецЕсли;
			
			ИтогоКорректировка = ИтогоКорректировка + Ребро.Корректировка;
				
		КонецЦикла;
		
		// Применим корректировки
		Для Каждого Ребро Из Ребра Цикл
			
			// Корректировки могли изменить оценку источника. Это недопустимо.
			// Отменим отдельные корректировки - те, что привели бы к изменению оценки источника.
			// (Можем отменить полностью корректировку ребра или ее часть).
			Если ИтогоКорректировка > 0 И Ребро.Корректировка > 0 Тогда
				ОтменаКорректировки = Мин(ИтогоКорректировка, Ребро.Корректировка);
			ИначеЕсли ИтогоКорректировка < 0 И Ребро.Корректировка < 0 Тогда
				ОтменаКорректировки = Макс(ИтогоКорректировка, Ребро.Корректировка);
			Иначе
				ОтменаКорректировки = 0;
			КонецЕсли;
			ИтогоКорректировка  = ИтогоКорректировка  - ОтменаКорректировки;
			Ребро.Корректировка = Ребро.Корректировка - ОтменаКорректировки;
				
			Если Ребро.Корректировка = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеПриемника = ПробноеРаспределение.Приемники[Ребро.Приемник];
			
			Ребро[ЧтоКорректировать] = Ребро[ЧтоКорректировать] + Ребро.Корректировка;
			Ребро[ЧемКорректировать] = Ребро[ЧемКорректировать] - Ребро.Корректировка;
			ОписаниеПриемника[ЧтоКорректировать] = ОписаниеПриемника[ЧтоКорректировать] + Ребро.Корректировка;
			ОписаниеПриемника[ЧемКорректировать] = ОписаниеПриемника[ЧемКорректировать] - Ребро.Корректировка;
			
			Ребро.Корректировка = 0; // Потрачено
			
		КонецЦикла;
		
	КонецЦикла;// По Источники
	
	// Если корректировки привели к желаемому результату (у всех приемников пропали нежелательные суммы) 
	// то применяем их (переносим из ПробноеРаспределение в Затраты)
	ВсеСкорректированы = Истина;
	Для Каждого КлючИЗначение Из ПробноеРаспределение.Приемники Цикл
		
		Если КлючИЗначение.Значение[ЧтоКорректировать] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСкорректированы = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если ВсеСкорректированы Тогда
		
		Для Каждого КлючИЗначение Из ПробноеРаспределение.Приемники Цикл
			ОписаниеПриемника = ОписаниеВершины(Затраты, КлючИЗначение.Ключ);
			КоллекцииСумм.Заполнить(ОписаниеПриемника, КлючИЗначение.Значение, Затраты.ОписаниеСумм);
		КонецЦикла;
		
		Для Каждого ПробноеРебро Из ПробноеРаспределение.Ребра Цикл
			КоллекцииСумм.Заполнить(ПробноеРебро.Ребро, ПробноеРебро, Затраты.ОписаниеСумм);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВстречныйВыпуск

Процедура ПрименитьНастройкуПорядкаПеределов(Затраты, МенеджерВременныхТаблиц, Период, Организация)
	
	// Учтем ограничения номеров переделов, заданные пользователем.
	// Будут назначены слабыми звеньями все связи, которые ведут 
	// из вершины с большим номером передела 
	// в вершину с меньшим номером.
	// В результате циклы будут исключены - они будут обработаны в том же порядке, что и встречный выпуск:
	// - сначала распределим расходы в том порядке, который задал пользователь
	// - повторим расчет, если были движения, идущие вразрез с этим порядком ("встречные").
	//   В ходе повторного расчета игнорируем встречные движения.
	// Если пользователь не задал номера переделов каким-то подразделениям, то это значит, что ограничений нет.
	
	Если Не УчетнаяПолитика.РассчитыватьСебестоимостьПолуфабрикатов(Организация, Период)
		И Не УчетнаяПолитика.РассчитыватьСебестоимостьУслугСобственнымПодразделениям(Организация, Период) Тогда
		// Производство одноэтапное, настройка не имеет смысла
		Возврат;
	КонецЕсли;
	
	СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(Организация, Период);
	Если СпособРасчетаСебестоимостиПроизводства <> Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		// Настройка не используется
		Возврат;
	КонецЕсли;
	
	// Получим данные настройки
	// Важно получить все идентификаторы
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокПеределов.НомерПередела КАК НомерПередела,
	|	ПорядокПеределов.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ПорядокПеределов
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК ПорядокПеределов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	ПорядокПеределов.НомерПередела КАК НомерПередела
	|ИЗ
	|	ИдентификаторыВершин КАК КлючиВершин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПорядокПеределов КАК ПорядокПеределов
	|		ПО (КлючиВершин.РазделУчета = ""Расходы"")
	|			И КлючиВершин.Подразделение = ПорядокПеределов.Подразделение";
	
	// Проставим номера переделов в соответствии с настройкой
	Выборка = Запрос.Выполнить().Выбрать();
	МаксимальныйНомерПередела = -1;
	Пока Выборка.Следующий() Цикл
		ОписаниеВершины = ОписаниеВершины(Затраты, Выборка.Идентификатор);
		ОписаниеВершины.НомерПередела = Выборка.НомерПередела;
		// Считаем, что вершины, для которых не задан номер передела, "всегда разрешены" - имеют 
		// - минимальный номер передела (-1), когда ребро ведет из этой вершины
		// - максимальный номер передела, когда ребро ведет в эту вершину
		МаксимальныйНомерПередела = Макс(МаксимальныйНомерПередела, Выборка.НомерПередела); 
	КонецЦикла;
	
	// Разорвем связи из вершины с бОльшим номером передела в вершины с меньшим номером передела
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		
		Если ОписаниеВершины.РазделУчета <> "Расходы" Тогда
			// Настройку пользователь выполнил для расходов
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеВершины.НомерПередела < 0 Тогда
			// Для этой вершины нет ограничений
			Продолжить;
		КонецЕсли;
		
		// Проверим, что выполняются ограничения для всех ребер из этой вершины
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор);
		Для Каждого Ребро Из Приемники Цикл
			
			// Пользователь задал ограничения для расходов.
			// Поэтому может потребоваться проложить путь через вершины с запасами до вершины с расходами.
			// Используем поиск в глубину.
			// Если в ходе поиска найдем, что из этой вершины можно попасть в расходы с меньшим номером передела,
			// то разорвем ребро перед вершиной.
			ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
			Если ОписаниеВершины.НомерПередела > МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеПриемника, МаксимальныйНомерПередела) Тогда
				// Нельзя идти вспять
				Ребро.СлабоеЗвено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_ПорядокПеределов";
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеВершины, МаксимальныйНомерПередела)
	
	Если ОписаниеВершины.РазделУчета = "Расходы" Тогда
		// Простой случай
		Если ОписаниеВершины.НомерПередела = -1 Тогда 
			Возврат МаксимальныйНомерПередела;
		Иначе
			Возврат ОписаниеВершины.НомерПередела;
		КонецЕсли;
	КонецЕсли;
	
	// С запасами сложнее - прийдется найти все расходы, в которые можно попасть из этой вершины,
	// проходя только по разделу запасы, и найти минимальный номер передела.
	
	// Для того, чтобы сократить сложность алгоритма (число обходов), 
	// при проходе по затратам каждой вершине затрат присвоим минимальный номер передела,
	// который достигается из нее.
	
	Если ОписаниеВершины.НомерПередела >= 0 Тогда // Присвоен какой-то номер 
		// обход не требуется - выполнен ранее
		Возврат ОписаниеВершины.НомерПередела;
	КонецЕсли;
	
	ОписаниеВершины.НомерПередела = МаксимальныйНомерПередела;
	
	Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор);// Ходим только по остовным ребрам
	
	Для Каждого Ребро Из Приемники Цикл
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		
		// Обойдем в глубину
		ОписаниеВершины.НомерПередела = Мин(
			ОписаниеВершины.НомерПередела,
			МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеПриемника, МаксимальныйНомерПередела));
		
	КонецЦикла;
	
	Возврат ОписаниеВершины.НомерПередела;
	
КонецФункции

// Заполняет в коллекции Затраты таблицу НастройкаВстречногоВыпуска
// в соответствии с настройками пользователя из регистра ВстречныйВыпускПродукцииУслуг.
// Также использует данные временных таблиц Расходы, ИдентификаторыВершин
Процедура ПрименитьНастройкуВстречногоВыпуска(Затраты, МенеджерВременныхТаблиц, Период, Организация)
	
	СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(Организация, Период);
	Если СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		// Настройка не используется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Получаем настройки
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройка.Продукция КАК Продукция,
	|	Настройка.Подразделение КАК Подразделение,
	|	Настройка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Настройка.ПодразделениеПересчета,
	|	Настройка.НоменклатурнаяГруппаПересчета
	|ПОМЕСТИТЬ ВТ_НастройкаВстречногоВыпуска
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&Период, Организация = &Организация) КАК Настройка
	|ГДЕ
	|	Настройка.Учитывается
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройка.Продукция
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Нет настроек
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_НастройкаВстречногоВыпуска";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	// Поместим ребра графа во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ребра", Затраты.Ребра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_Ребра
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник";
	Запрос.Выполнить();
	
	// Настройку для услуг применяем к фактическим данным.
	//
	// При этом настройка интерпретируется так:
	//
	// - для услуг (собственным подразделениям)  однозначно
	// -- Подразделение, НоменклатурнаяГруппа - Источник
	// -- Продукция, ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - Приемник (в разделе "Расходы")
	//    (при этом ПодразделениеПересчета и НоменклатурнаяГруппаПересчета могут быть не заполнены, в таком случае означают "любое")
	//
	// - для продукции - двояко
	//
	// -- "со стороны выпуска" - по аналогии с услугами
	// --- Подразделение, НоменклатурнаяГруппа - Источник
	// --- Продукция - Приемник (в разделе "Запасы")
	// --- ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - не заполнены
	
	// -- "со стороны использования"
	// --- Продукция - Источник (из раздела "Запасы")
	// --- ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - Приемник 
	//    (в раздел "Расходы", могут быть не заполнены, в таком случае означают "любое")
	// --- Подразделение, НоменклатурнаяГруппа - дополнительное условие ("кто выпустил эту продукцию"). Такие расходы 
	// ---- должны быть в контуре
	// ---- должны относиться к выпуску (быть источником в ребре с типом "Выпуск")
	// ---- между этой вершиной и Источником не может быть других ребер выпуска
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник,
	|	НЕОПРЕДЕЛЕНО КАК Условие
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И (КлючиПриемник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = Условие.НоменклатурнаяГруппа
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = Условие.НоменклатурнаяГруппа
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|ИТОГИ
	|	МАКСИМУМ(Условие)
	|ПО
	|	Источник,
	|	Приемник";
	
	Затраты.Вставить("НастройкаВстречногоВыпуска", Новый ТаблицаЗначений);
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Источник", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Приемник", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Условие",  Новый ОписаниеТипов("Соответствие")); // Для эффективной проверки условия
	
	ВыборкаИсточник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсточник.Следующий() Цикл
		
		ВыборкаПриемник = ВыборкаИсточник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПриемник.Следующий() Цикл
			
			НоваяСтрока = Затраты.НастройкаВстречногоВыпуска.Добавить();
			НоваяСтрока.Источник = ВыборкаПриемник.Источник;
			НоваяСтрока.Приемник = ВыборкаПриемник.Приемник;
			
			// Возможно, что размыкать это ребро следует при обнаружении контура следует не всегда,
			// а только если в контуре выполняется условие - продукция выпущена конкретным подразделением.
			// Если это так, то заполним список условий.
			// (Для услуг список пустой - условие отсутствует)
			
			Если ВыборкаПриемник.Условие <> Неопределено Тогда
				
				Выборка = ВыборкаПриемник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					НоваяСтрока.Условие.Вставить(Выборка.Условие, Выборка.Условие);
				КонецЦикла;
				
			КонецЕсли; // Заполнили условие
			
		КонецЦикла; // ВыборкаПриемник
		
	КонецЦикла; // ВыборкаИсточник
	
	Затраты.НастройкаВстречногоВыпуска.Индексы.Добавить("Источник,Приемник");
	
	// Уберем за собой
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТ_НастройкаВстречногоВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ребра";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НайтиВстречныйВыпускПоНастройке(Контур, Затраты)
	
	Если НЕ Затраты.Свойство("НастройкаВстречногоВыпуска") Тогда
		Возврат Неопределено; // Настройка не используется
	КонецЕсли;
	
	// Найдем ребра, входящие в контур и описанные в настройке как встречный выпуск.
	Отбор = Новый Структура("Источник,Приемник");
	Для ИндексРебраВКонтуре = 0 По Контур.Количество() - 1 Цикл
		
		Ребро = Контур[ИндексРебраВКонтуре];
		
		ЗаполнитьЗначенияСвойств(Отбор, Ребро);
		ПоНастройке = Затраты.НастройкаВстречногоВыпуска.НайтиСтроки(Отбор);
		
		Если ПоНастройке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МожноЗафиксироватьРебро(Затраты, Ребро) Тогда
			// Такое ребро не считаем встречным выпуском, так как его размыкание приведет к зависанию сумм.
			Продолжить;
		КонецЕсли;
		
		Настройка = ПоНастройке[0];
		
		Если Настройка.Условие.Количество() = 0 Тогда
			Возврат Ребро;
		КонецЕсли;
		
		// Есть условие: размыкать это ребро следует только тогда, когда в контур входит одна из вершин, 
		// указанных пользователем в качестве вершины выпуска.
		// "Вершина выпуска" означает, что между этой вершиной и размыкаемым ребром нет расходов 
		// (могут лежать только вершины из раздела Запасы)
		
		// Находим вершину выпуска
		ТекущееРебро        = Ребро;
		ИндексТекущегоРебра = ИндексРебраВКонтуре;
		ОсталосьШагов  = Контур.Количество() - 1;// Чтобы не ходить по контуру вечно
		Пока ОсталосьШагов > 0 Цикл
			// Проверяем, является ли источник вершиной выпуска
			Если ТекущееРебро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Выпуск Тогда
				Если Настройка.Условие[ТекущееРебро.Источник] <> Неопределено Тогда
					// Условие выполняется - этот контур следует разорвать по ребру, указанному пользователем
					Возврат Ребро;
				Иначе
					// Условие не выполняется
					Прервать;
				КонецЕсли;
			КонецЕсли;
			// Шаг назад
			ИндексТекущегоРебра = ИндексТекущегоРебра - 1;
			Если ИндексТекущегоРебра < 0 Тогда
				ИндексТекущегоРебра = Контур.Вграница();
			КонецЕсли;
			ТекущееРебро = Контур[ИндексТекущегоРебра];
			ОсталосьШагов = ОсталосьШагов - 1;
		КонецЦикла;
		
		// Условие не выполняется
		
	КонецЦикла;// По Контур
	
	// Для контура пользователь не выполнил настройки
	Возврат Неопределено;
	
КонецФункции

Функция НайтиВстречныйВыпускБезНастройки(Знач Контур, Затраты)
	
	// Важно, чтобы ребро не было единственным "сливом" из вершины,
	// иначе в этой вершине зависнет сумма 
	// (а из данных первичных документов не следует, что должна зависнуть сумма)
	ПерваяОчередь = Новый Массив;
	Для Каждого Ребро Из Контур Цикл
		
		Если МожноЗафиксироватьРебро(Затраты, Ребро) Тогда
			ПерваяОчередь.Добавить(Ребро);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерваяОчередь.Количество() > 0 Тогда
		Контур = ПерваяОчередь;
	КонецЕсли;
	
	// Стараемся выбрать то ребро, которое соответствует выпуску продукции/услуг либо отражает списание материалов в производство.
	// Это сделает результат понятнее и не нарушит пропорции распределения, которые отражаются в справках-расчетах.
	ПерваяОчередь = Новый Массив;
	Для Каждого Ребро Из Контур Цикл
		Если Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Выпуск
			Или Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Другое Тогда
			ПерваяОчередь.Добавить(Ребро);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерваяОчередь.Количество() > 0 Тогда
		Контур = ПерваяОчередь;
	КонецЕсли;
	
	// Стараемся выбрать то ребро, у которого наименьший удельный вес.
	// Можно надеяться, что это какое-то незначительное ребро, которым можно пренебречь.
	Если Контур.Количество() = 1 Тогда
		Возврат Контур[0];
	КонецЕсли;
	
	РанжированныеПоВесу = Новый Массив;
	МинимальныйУдельныйВес = 1;
	Для Каждого Ребро Из Контур Цикл
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		Если ОписаниеИсточника.Вес = 0 Тогда
			РанжированныеПоВесу.Вставить(0, Ребро);
		Иначе
			УдельныйВес = Ребро.Вес / ОписаниеИсточника.Вес;
			Если УдельныйВес = МинимальныйУдельныйВес Тогда
				// Раз нет никаких методических предпочтений, то прибегнем к техническому, которое позволит сократить время выполнения:
				// выберем такое ребро, которое в наименьшей степени изменит граф. 
				// Скорее всего, таким ребром будет то, что стоит ближе к концу контура (то есть текущее лучше, чем предыдущее с таким же весом).
				РанжированныеПоВесу.Вставить(0, Ребро);
			ИначеЕсли УдельныйВес < МинимальныйУдельныйВес Тогда
				МинимальныйУдельныйВес = Мин(МинимальныйУдельныйВес, Ребро.Вес / ОписаниеИсточника.Вес);
				РанжированныеПоВесу.Вставить(0, Ребро);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РанжированныеПоВесу[0];
	
КонецФункции

#КонецОбласти

#Область КалькуляцияСебестоимости

Процедура ИнициализироватьКешРасчетаКалькуляции(Затраты)
	
	ВариантСтруктурыЗатрат = ВариантСтруктурыЗатратКалькуляцияСебестоимости(Затраты.ВариантыСтруктурыЗатрат);
	
	Затраты.КешПараметровРасчета.Вставить("РассчитыватьКалькуляцию", ВариантСтруктурыЗатрат <> Неопределено);
	
	Если Не Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		Возврат;
	КонецЕсли;
	
	Затраты.КешПараметровРасчета.Вставить("ОписаниеСуммБезСтатейКалькуляции", КоллекцииСумм.НовыйОписаниеКоллекцииСумм());
	
	Для Каждого ОписаниеНабораСумм Из Затраты.ОписаниеСумм.НаборыСумм Цикл
		
		Если ОписаниеНабораСумм.Ключ = "СтатьиКалькуляции" Тогда
			Продолжить;
		КонецЕсли;
		
		СоставНабора = СтрСоединить(ОписаниеНабораСумм.Значение.ИменаСвойств, ",");
		Если ОписаниеНабораСумм.Значение.Переменный Тогда
			КоллекцииСумм.ДобавитьПеременныйНаборСумм(
				Затраты.КешПараметровРасчета.ОписаниеСуммБезСтатейКалькуляции,
				ОписаниеНабораСумм.Ключ,
				СоставНабора,
				ОписаниеНабораСумм.Значение.ДополнительныеЗначения);
		Иначе
			КоллекцииСумм.ДобавитьНаборСумм(
				Затраты.КешПараметровРасчета.ОписаниеСуммБезСтатейКалькуляции,
				ОписаниеНабораСумм.Ключ,
				СоставНабора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьМатериальныйСостав(Вершина, ОписаниеСумм)
	
	Если Вершина.РазделУчета <> "Расходы"
		Или Не Вершина.СтатьиКалькуляцииУстановленОсновнойКлюч Тогда
		Возврат;
	КонецЕсли;
	
	Если Вершина.КоличествоМатериала = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьКУстановке = Неопределено;
	Для Каждого СтатьяКалькуляции Из Вершина.СтатьиКалькуляции Цикл
		Если СтатьяКалькуляции.КоличествоМатериала <> 0 Тогда
			Возврат;
		КонецЕсли;
		Если СтатьяКалькуляции.Идентификатор = Вершина.СтатьиКалькуляцииОсновнойКлюч Тогда
			ЗаписьКУстановке = СтатьяКалькуляции;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписьКУстановке = Неопределено Тогда
		ЗаписьКУстановке = КоллекцииСумм.ЭлементПеременногоНабораСумм(
			Вершина,
			"СтатьиКалькуляции",
			Вершина.СтатьиКалькуляцииОсновнойКлюч,
			ОписаниеСумм);
	КонецЕсли;
	ЗаписьКУстановке.КоличествоМатериала = Вершина.КоличествоМатериала;
	
КонецПроцедуры

Функция ВариантСтруктурыЗатратКалькуляцияСебестоимости(ВариантыСтруктурыЗатрат)
	Возврат ВариантыСтруктурыЗатрат.Найти("СтатьиКалькуляции", "Имя");
КонецФункции

Процедура ОграничитьСтатьиКалькуляции(ОписаниеСуммПриемника, Ребро, ОписаниеИсточника, ОписаниеПриемника, КешПараметровРасчета)
	
	// Расчет калькуляции ограничен одним переделом.
	
	Если Не КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ОписаниеПриемника.СтатьиКалькуляцииУстановленОсновнойКлюч Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеИсточника.РазделУчета <> "Запасы"
		И Ребро.ВидДвижения <> Перечисления.ВидыДвиженийРасчетСебестоимости.Выпуск Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСуммПриемника = КешПараметровРасчета.ОписаниеСуммБезСтатейКалькуляции;
	
КонецПроцедуры

Функция ИнициализироватьСокращенныйРасчетСтатейКалькуляции(ВариантыСтруктурыЗатрат, КлючиСтруктурыЗатрат)
	
	// При расчете калькуляции большое количество статей калькуляции и большое количество приемников 
	// могут катастрофически замедлить расчет.
	// При этом такое сочетание детализации и приемников вряд ли полезно на практике.
	// Поэтому, если встретились с таким сочетанием, то попробуем сократить расчет,
	// снизив детализацию статей калькуляции
	
	Если КлючиСтруктурыЗатрат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Вариант = ВариантСтруктурыЗатратКалькуляцияСебестоимости(ВариантыСтруктурыЗатрат);
	Если Вариант = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючиСтатейКалькуляции = КлючиСтруктурыЗатрат[Вариант.Имя];
	Если КлючиСтатейКалькуляции = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СокращенныйРасчет = Новый Структура;
	
	СокращенныйРасчет.Вставить("РесурсПроизводительности",             200000);// эмпирическое значение, отражающее сложность расчета: после достижения этого значения расчет считается "сложным", может требовать значительного времени
	СокращенныйРасчет.Вставить("МинимальноеКоличествоПриемников",           2);
	СокращенныйРасчет.Вставить("МинимальноеКоличествоСтатейКалькуляции",    4);
	СокращенныйРасчет.Вставить("МаксимальноеКоличествоСтатейКалькуляции", 499);
	СокращенныйРасчет.Вставить("КоэффициентУменьшения",                   0.8);// самые большие суммы могут получить больше статей, каждая следующая меньше;
	                                                                           // насколько именно меньше получит следующая статья определяет этот коэффициент
	
	// Кеш значений
	СокращенныйРасчет.Вставить("Лимит",                  СокращенныйРасчет.МаксимальноеКоличествоСтатейКалькуляции * СокращенныйРасчет.МинимальноеКоличествоПриемников);// Все что ниже лимита, считается приемлемым с точки зрения производительности
	СокращенныйРасчет.Вставить("КлючиСтатейКалькуляции", КлючиСтатейКалькуляции);
	СокращенныйРасчет.Вставить("ОписаниеСумм",           Вариант.ОписаниеСумм);
	// Заполняются ниже по СокращенныйРасчет.ОписаниеСумм
	СокращенныйРасчет.Вставить("ИменаСвойств",       СокращенныйРасчет.ОписаниеСумм.НаборыСумм.СтатьиКалькуляции.ИменаСвойств);
	СокращенныйРасчет.Вставить("ОтборНезаполненных", Новый Структура);
	СокращенныйРасчет.Вставить("СтрокаСортировки",   "");
	
	// Изменяемые в ходе расчета - инициализируются в РассчитатьЛимитСтатейКалькуляции(),
	// модифицируются в СократитьРасчетСтатейКалькуляции()
	// Все относятся к одной итерации распределения: когда некоторый набор статей калькуляции распределяется между некоторым набором приемников (ребер).
	СокращенныйРасчет.Вставить("Сократить",              Ложь);                  // в данной итерации распределения количество статей следует сократить
	СокращенныйРасчет.Вставить("Сортировщик",            Новый ТаблицаЗначений); // колонки заполняются ниже
	СокращенныйРасчет.Вставить("ПервыйПриемник",         Истина);                // первый (самый большой) получит максимальное количество статей
	СокращенныйРасчет.Вставить("КоличествоПриемников",   0);                     // сколько еще осталось приемников
	СокращенныйРасчет.Вставить("ОстатокРесурсовРасчета", 0);                     // сколько еще осталось сочетаний приемников и статей
	СокращенныйРасчет.Вставить("ВесПредыдущегоРебра",    0);                     // стараемся, чтобы ребра с одинаковым весом получили одинаковый набор статей
	СокращенныйРасчет.Вставить("СтатьиПрочее",           Новый Соответствие);    // группировочные статьи калькуляции (без материалов), в которые следует отнести сокращаемые статьи калькуляции (с материалами)
	
	// ОтборНезаполненных, Сортировщик, СтрокаСортировки
	ЭлементыСтрокиСортировки = Новый Массив;
	СокращенныйРасчет.Сортировщик.Колонки.Добавить("ЭлементКоллекции");
	СокращенныйРасчет.Сортировщик.Колонки.Добавить("Идентификатор",       УчетЗатрат.ТипИдентификатораВершины());
	СокращенныйРасчет.Сортировщик.Колонки.Добавить("ИдентификаторГруппы", УчетЗатрат.ТипИдентификатораВершины());
	СокращенныйРасчет.Сортировщик.Индексы.Добавить("Идентификатор");
	ОписаниеНабораСумм = СокращенныйРасчет.ОписаниеСумм.НаборыСумм.СтатьиКалькуляции;
	Для Каждого ИмяСвойства Из ОписаниеНабораСумм.ИменаСвойств Цикл
		СокращенныйРасчет.ОтборНезаполненных.Вставить(ИмяСвойства, 0);
		ЭлементыСтрокиСортировки.Добавить(ИмяСвойства + " Убыв");
		СокращенныйРасчет.Сортировщик.Колонки.Добавить(ИмяСвойства, БухгалтерскийУчетКлиентСервер.ТипСумма());
	КонецЦикла;
	Для Каждого КлючИЗначение Из ОписаниеНабораСумм.ДополнительныеЗначения Цикл
		СокращенныйРасчет.ОтборНезаполненных.Вставить(КлючИЗначение.Ключ, 0);
		ЭлементыСтрокиСортировки.Добавить(КлючИЗначение.Ключ + " Убыв");
		СокращенныйРасчет.Сортировщик.Колонки.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СокращенныйРасчет.СтрокаСортировки = СтрСоединить(ЭлементыСтрокиСортировки, ",");
	
	Возврат СокращенныйРасчет;
	
КонецФункции

Процедура РассчитатьЛимитСтатейКалькуляции(СокращенныйРасчет, СтатьиКалькуляции, КоличествоПриемников)
	
	Если СокращенныйРасчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьиКалькуляции) Тогда
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КоличествоПриемников <= СокращенныйРасчет.МинимальноеКоличествоПриемников Тогда
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	КоличествоСтатейКалькуляции = СтатьиКалькуляции.Количество();
	Если КоличествоСтатейКалькуляции <= СокращенныйРасчет.МинимальноеКоличествоСтатейКалькуляции Тогда
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	КонтрольноеЗначение = КоличествоСтатейКалькуляции * КоличествоПриемников;
	Если КонтрольноеЗначение > СокращенныйРасчет.Лимит Тогда
		СокращенныйРасчет.РесурсПроизводительности = СокращенныйРасчет.РесурсПроизводительности - КонтрольноеЗначение;
	КонецЕсли;
	СокращенныйРасчет.Сократить = (СокращенныйРасчет.РесурсПроизводительности < 0);
	
	Если Не СокращенныйРасчет.Сократить Тогда
		Возврат;
	КонецЕсли;
		
	// Найдем строки которые можно удалить и подготовим коллекцию, хранящую их в порядке удаления
	СокращенныйРасчет.Сортировщик.Очистить();
	Для Каждого ЭлементКоллекции Из СтатьиКалькуляции Цикл
		ОписаниеУдаляемойСтроки = СокращенныйРасчет.КлючиСтатейКалькуляции.Найти(ЭлементКоллекции.Идентификатор, "Идентификатор");
		Если ОписаниеУдаляемойСтроки = Неопределено Или ОписаниеУдаляемойСтроки.ИдентификаторГруппы = УчетЗатрат.ИдентификаторВершиныНеопределено() Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СокращенныйРасчет.Сортировщик.Добавить();
		// Строго говоря, для оценки значимости влияния отдельных статей на результат, следует упорядочивать статьи по убыванию модуля суммы.
		// Но это может быть дорогой операцией, поэтому пренебрегаем этим: считаем отрицальные суммы незначимыми.
		// Это позволяет использовать ЗаполнитьЗначенияСвойств() вместо перебора показателей для проверки их знака.
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		НоваяСтрока.ЭлементКоллекции    = ЭлементКоллекции;
		НоваяСтрока.ИдентификаторГруппы = ОписаниеУдаляемойСтроки.ИдентификаторГруппы;
	КонецЦикла;
	
	Если СокращенныйРасчет.Сортировщик.Количество() < СокращенныйРасчет.МинимальноеКоличествоСтатейКалькуляции Тогда
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	// Оградим от сокращения минимальное количество строк
	СокращенныйРасчет.Сортировщик.Сортировать(СокращенныйРасчет.СтрокаСортировки);
	Для НомерСтроки = 1 По СокращенныйРасчет.МинимальноеКоличествоСтатейКалькуляции Цикл
		СокращенныйРасчет.Сортировщик.Удалить(0);
	КонецЦикла;
	
	// Инициализируем остальные свойства итерации расчета
	СокращенныйРасчет.ПервыйПриемник         = Истина;
	СокращенныйРасчет.ВесПредыдущегоРебра    = -1;
	
	СокращенныйРасчет.КоличествоПриемников   = КоличествоПриемников;
	
	СокращенныйРасчет.ОстатокРесурсовРасчета = МинимальнаяДопустимаяТочностьРасчета(
		КоличествоСтатейКалькуляции,
		КоличествоПриемников,
		СокращенныйРасчет);
		
	СокращенныйРасчет.СтатьиПрочее.Очистить();
	
КонецПроцедуры

Процедура СократитьРасчетСтатейКалькуляции(СуммыИсточника, Вес, СокращенныйРасчет)
	
	Если СокращенныйРасчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СокращенныйРасчет.Сократить Или СокращенныйРасчет.КоличествоПриемников < 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокращенныйРасчет.Сортировщик) Тогда
		// сильнее сократить не можем
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	КоличествоСтатейКалькуляции = СуммыИсточника.СтатьиКалькуляции.Количество();
	
	Если СокращенныйРасчет.ОстатокРесурсовРасчета >= СокращенныйРасчет.КоличествоПриемников * КоличествоСтатейКалькуляции Тогда
		// достаточно сократили
		СокращенныйРасчет.Сократить = Ложь;
		Возврат;
	КонецЕсли;
	
	ДоступноеКоличество = СокращенныйРасчет.Сортировщик.Количество();
	ЗащищенныеСтатьи    = КоличествоСтатейКалькуляции - ДоступноеКоличество;
	
	Лимит = ДоступноеКоличество;
	Если СокращенныйРасчет.ПервыйПриемник Тогда
		СокращенныйРасчет.ПервыйПриемник = Ложь;
		Если КоличествоСтатейКалькуляции > СокращенныйРасчет.МаксимальноеКоличествоСтатейКалькуляции Тогда
			Лимит = Макс(0, СокращенныйРасчет.МаксимальноеКоличествоСтатейКалькуляции - ЗащищенныеСтатьи);
		КонецЕсли;
	Иначе
		РезервТочности = СокращенныйРасчет.ОстатокРесурсовРасчета - ЗащищенныеСтатьи * СокращенныйРасчет.КоличествоПриемников;
		Если РезервТочности <= 0 Тогда
			Лимит = 0;
		ИначеЕсли Вес < СокращенныйРасчет.ВесПредыдущегоРебра Тогда
			Лимит = Макс(0, Цел(ДоступноеКоличество * СокращенныйРасчет.КоэффициентУменьшения));
		КонецЕсли;
	КонецЕсли;
	
	ЛишниеСтатьи = ДоступноеКоличество - Лимит;
	Если ЛишниеСтатьи > 0 Тогда
	
		// Удалим все строки с нулевыми значениями
		Для Каждого КУдалению Из СуммыИсточника.СтатьиКалькуляции.НайтиСтроки(СокращенныйРасчет.ОтборНезаполненных) Цикл
			
			// Удалим из сортировщика
			СтрокаСортировщика = СокращенныйРасчет.Сортировщик.Найти(КУдалению.Идентификатор, "Идентификатор");
			Если СтрокаСортировщика <> Неопределено Тогда
				СокращенныйРасчет.Сортировщик.Удалить(СтрокаСортировщика);
			КонецЕсли;
			
			// Удалим из кэша
			СокращенныйРасчет.СтатьиПрочее.Удалить(КУдалению.Идентификатор);
			
			// Удалим из основной коллекции
			СуммыИсточника.СтатьиКалькуляции.Удалить(КУдалению);
			
			КоличествоСтатейКалькуляции = КоличествоСтатейКалькуляции - 1;
			ЛишниеСтатьи = ЛишниеСтатьи - 1;
			
		КонецЦикла;
		
		// Сократим количество статей - начнем с наименьших
		Если ЛишниеСтатьи > 0 Тогда
			
			ИндексУдаляемойСтроки = СокращенныйРасчет.Сортировщик.Количество() - 1;// Если добавили строку Прочее, то ее не удаляем
			
			Пока ЛишниеСтатьи > 0 Цикл
				
				ОписаниеУдаляемойСтроки = СокращенныйРасчет.Сортировщик[ИндексУдаляемойСтроки];
				УдаляемаяСтрока = ОписаниеУдаляемойСтроки.ЭлементКоллекции;
				
				СтатьяПрочее = СокращенныйРасчет.СтатьиПрочее[ОписаниеУдаляемойСтроки.ИдентификаторГруппы];
				Если СтатьяПрочее = Неопределено Тогда
					СтатьяПрочее = КоллекцииСумм.ЭлементПеременногоНабораСумм(
						СуммыИсточника,
						"СтатьиКалькуляции",
						ОписаниеУдаляемойСтроки.ИдентификаторГруппы,
						СокращенныйРасчет.ОписаниеСумм);
					СокращенныйРасчет.СтатьиПрочее.Вставить(ОписаниеУдаляемойСтроки.ИдентификаторГруппы, СтатьяПрочее);
				КонецЕсли;
				
				// Отнесем на строку Прочее
				Для Каждого ИмяСвойства Из СокращенныйРасчет.ИменаСвойств Цикл
					СтатьяПрочее[ИмяСвойства] = СтатьяПрочее[ИмяСвойства] + УдаляемаяСтрока[ИмяСвойства];
				КонецЦикла;
				
				// Удалим лишнюю статью
				// - из сортировщика
				СокращенныйРасчет.Сортировщик.Удалить(ОписаниеУдаляемойСтроки);
				ИндексУдаляемойСтроки = ИндексУдаляемойСтроки - 1;
				
				// - из основной коллекции
				СуммыИсточника.СтатьиКалькуляции.Удалить(УдаляемаяСтрока);
				КоличествоСтатейКалькуляции = КоличествоСтатейКалькуляции - 1;
				
				ЛишниеСтатьи = ЛишниеСтатьи - 1;
				
			КонецЦикла;
				
		КонецЕсли;
			
	КонецЕсли;
	
	СокращенныйРасчет.ВесПредыдущегоРебра    = Вес;
	СокращенныйРасчет.ОстатокРесурсовРасчета = СокращенныйРасчет.ОстатокРесурсовРасчета - КоличествоСтатейКалькуляции;
	СокращенныйРасчет.КоличествоПриемников   = СокращенныйРасчет.КоличествоПриемников - 1;
	
КонецПроцедуры

Функция МинимальнаяДопустимаяТочностьРасчета(КоличествоСтатейКалькуляции, КоличествоПриемников, СокращенныйРасчет)
	
	МинимальноеЧислоСтатейКалькуляции       = Мин(КоличествоСтатейКалькуляции, СокращенныйРасчет.МинимальноеКоличествоСтатейКалькуляции);
	МаксимальноеКоличествоСтатейКалькуляции = Мин(КоличествоСтатейКалькуляции, СокращенныйРасчет.МаксимальноеКоличествоСтатейКалькуляции);
	
	// Все приемники получат как минимум гарантированное количество статей
	МинимальнаяДопустимаяТочность = МинимальноеЧислоСтатейКалькуляции * КоличествоПриемников;
	
	Если МаксимальноеКоличествоСтатейКалькуляции = МинимальноеЧислоСтатейКалькуляции Тогда
		// Фактически ограничения нет
		Возврат МинимальнаяДопустимаяТочность;
	КонецЕсли;
	
	// Первые несколько приемников получат максимальное число статей
	МинимальнаяДопустимаяТочность = МинимальнаяДопустимаяТочность +
		СокращенныйРасчет.МинимальноеКоличествоПриемников * (МаксимальноеКоличествоСтатейКалькуляции - МинимальноеЧислоСтатейКалькуляции);
		
	// Верхний дециль приемников получит больше статей
	ВерхнийДециль = Цел(КоличествоПриемников / 10);
	Если ВерхнийДециль <= СокращенныйРасчет.МинимальноеКоличествоПриемников Тогда
		Возврат МинимальнаяДопустимаяТочность;
	КонецЕсли;
	
	ДополнительнаяТочность = 1/2 * (ВерхнийДециль - СокращенныйРасчет.МинимальноеКоличествоПриемников) * 
		(МаксимальноеКоличествоСтатейКалькуляции - МинимальноеЧислоСтатейКалькуляции);
		
	// Дополнительная точность не должна обходиться дорого
	ДополнительнаяТочность = Мин(ДополнительнаяТочность, МинимальнаяДопустимаяТочность / 10);
	
	// Если дополнительная точность требует выйти за лимит, то так,
	// чтобы дополнительная точность не требовала больше ресурсов, чем минимальная
	Возврат Макс(МинимальнаяДопустимаяТочность + ДополнительнаяТочность, СокращенныйРасчет.Лимит);
	
КонецФункции

Процедура ЗаписатьСтатистикуСокращенногоРасчета(СокращенныйРасчет)
	
	Если СокращенныйРасчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СокращенныйРасчет.РесурсПроизводительности > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗаписи = НСтр(
		"ru = 'Детализация расчета калькуляции сокращена в целях производительности. Количество сокращенных записей: %1'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		,
		СтрШаблон(ШаблонЗаписи, -СокращенныйРасчет.РесурсПроизводительности));
	
	Если Не ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли;
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
		"СтатистикаБП.СокращенныйРасчетСтатейКалькуляции.ИсчерпанРесурсПроизводительности",
		-СокращенныйРасчет.РесурсПроизводительности);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Декодирование // Обратное преобразование графа в аналитику проводок

// Создает временные таблицы ВнутренниеДвижения, ВнешниеДвижения, ОценкаВершин, ДоступныеСуммы
//
Процедура СоздатьДвижения(МенеджерВременныхТаблиц, Затраты, Протокол)
	
	// Определим суммы, исходя из которых рассчитываются внешние движения
	// (оценка источника за вычетом внутренних движений и целевого сальдо)
	// Эти суммы запишем в Вершины ("испортим" их).
	// Отдельно - для протокола - сохраним суммы оценки источника за вычетом внутренних движений
	Для Каждого ОписаниеИсточника Из Затраты.Вершины Цикл
		
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор, Истина, Истина); // Все ребра
		
		// "Портим" описание вершины - 
		// по окончании цикла вершины будут содержать суммы 
		// за вычетом уже рассчитанных (внутренних) движений
		Для Каждого Ребро Из Приемники Цикл
			
			// Уменьшим у источника вес и суммы, доступные к списанию
			Если Не Ребро.Зафиксировано Тогда // У зафиксированных ребер это сделали при фиксации ребра
				ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - Ребро.Вес;
				КоллекцииСумм.Вычесть(ОписаниеИсточника, Ребро, Затраты.ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем в протокол
		Если Не КоллекцииСумм.Пустая(ОписаниеИсточника, Затраты.ОписаниеСумм) Тогда
			НоваяСтрока = Протокол.СальдоПослеРасчета.Добавить();
			НоваяСтрока.Идентификатор = ОписаниеИсточника.Идентификатор;
			КоллекцииСумм.Заполнить(НоваяСтрока, ОписаниеИсточника, Затраты.ОписаниеСумм);
		КонецЕсли;
		
		// Учтем целевое сальдо
		ИсключитьЦелевоеСальдо(ОписаниеИсточника, Затраты, ОписаниеИсточника);
		
	КонецЦикла;
	
	// Результаты оценки стоимости поместим во временные таблицы
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Вершины",        Затраты.Вершины);
	Запрос.УстановитьПараметр("Ребра",          Затраты.Ребра);
	
	// Результатом выполнения некоторых правил является распределение затрат на выпущенную продукцию/услуги.
	// Движения (внутренние), сформированные такими правилами, могут быть "не интересны" с точки зрения проводок, т.к. не меняются
	// аналитики плана счетов (ни счет, ни подразделение, ни какое-либо из необоротных субконто).
	// В то же время все такие движения требуется сохранить, чтобы позже получить данные для справок-расчетов:
	// в частности, вид базы распределения и значение базы.
	// Эти особые движения имеют 
	// 	- ВидДвижения = Распределение
	//	- непустую продукцию в Дт, а в Кт - продукцию, отличную от Дт.
	// Для того, чтобы не выкидывать эти движения, смягчаем отбор внутренних движений (добавляем условие "ИЛИ").
	// В то же время, чтобы отличать движения, которые требуется преобразовать в проводки, используется признак "ОтличаетсяАналитикаПроводок".
			
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.Вес КАК Вес,
	|	Вершины.Сумма КАК Сумма,
	|	Вершины.СуммаНУ КАК СуммаНУ,
	|	Вершины.СуммаПР КАК СуммаПР,
	|	Вершины.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ОценкаВершин
	|ИЗ
	|	&Вершины КАК Вершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.НомерПередела КАК НомерПередела
	|ПОМЕСТИТЬ ВТ_ПорядокВершин
	|ИЗ
	|	&Вершины КАК Вершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник,
	|	Ребра.ВидДвижения КАК ВидДвижения,
	|	Ребра.ПравилоРаспределения КАК ПравилоРаспределения,
	|	Ребра.Вес КАК Вес,
	|	Ребра.Сумма КАК Сумма,
	|	Ребра.СуммаНУ КАК СуммаНУ,
	|	Ребра.СуммаПР КАК СуммаПР,
	|	Ребра.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_ВнутренниеДвижения
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|			ТОГДА Идентификаторы.Субконто1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|			ТОГДА Идентификаторы.Субконто2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|			ТОГДА Идентификаторы.Субконто3
	|	КОНЕЦ КАК Продукция
	|ПОМЕСТИТЬ ВТ_АналитикаПродукция
	|ИЗ
	|	ИдентификаторыВершин КАК Идентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Идентификаторы.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Идентификаторы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Идентификаторы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Идентификаторы.Субконто3
	|			КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник КАК Источник,
	|	ВнешниеДвижения.СчетКт КАК СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1 КАК СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2 КАК СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3 КАК СубконтоКт3,
	|	ВнешниеДвижения.ПродукцияКт КАК ПродукцияКт,
	|	ВнешниеДвижения.СчетДт КАК СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2 КАК СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3 КАК СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт КАК НоменклатураДт,
	|	СУММА(ВнешниеДвижения.Количество) КАК Количество,
	|	СУММА(ВнешниеДвижения.Сумма) КАК Сумма,
	|	СУММА(ВнешниеДвижения.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВнешниеДвижения.СуммаПР) КАК СуммаПР,
	|	СУММА(ВнешниеДвижения.СуммаВР) КАК СуммаВР,
	|	ВнешниеДвижения.Выпуск КАК Выпуск,
	|	ВнешниеДвижения.МетодРаспределения КАК МетодРаспределения,
	|	ВнешниеДвижения.ПравилоРаспределения КАК ПравилоРаспределения
	|ПОМЕСТИТЬ ВнешниеДвижения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выбытие.Источник КАК Источник,
	|		Выбытие.СчетКт КАК СчетКт,
	|		Выбытие.ПодразделениеКт КАК ПодразделениеКт,
	|		Выбытие.СубконтоКт1 КАК СубконтоКт1,
	|		Выбытие.СубконтоКт2 КАК СубконтоКт2,
	|		Выбытие.СубконтоКт3 КАК СубконтоКт3,
	|		ЕСТЬNULL(АналитикаПродукция.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПродукцияКт,
	|		Выбытие.СчетДт КАК СчетДт,
	|		Выбытие.ПодразделениеДт КАК ПодразделениеДт,
	|		Выбытие.СубконтоДт1 КАК СубконтоДт1,
	|		Выбытие.СубконтоДт2 КАК СубконтоДт2,
	|		Выбытие.СубконтоДт3 КАК СубконтоДт3,
	|		Выбытие.НоменклатураДт КАК НоменклатураДт,
	|		Выбытие.Количество КАК Количество,
	|		Выбытие.Сумма КАК Сумма,
	|		Выбытие.СуммаНУ КАК СуммаНУ,
	|		Выбытие.СуммаПР КАК СуммаПР,
	|		Выбытие.СуммаВР КАК СуммаВР,
	|		Выбытие.Выпуск КАК Выпуск,
	|		ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка) КАК МетодРаспределения,
	|		"""" КАК ПравилоРаспределения
	|	ИЗ
	|		Выбытия КАК Выбытие
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК Вершины
	|			ПО Выбытие.Источник = Вершины.Идентификатор
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АналитикаПродукция КАК АналитикаПродукция
	|			ПО Выбытие.Источник = АналитикаПродукция.Идентификатор
	|	ГДЕ
	|		НЕ Выбытие.ВнутреннееДвижение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределениеРасходов.Идентификатор,
	|		КлючиИсточник.Счет,
	|		КлючиИсточник.Подразделение,
	|		КлючиИсточник.Субконто1,
	|		КлючиИсточник.Субконто2,
	|		КлючиИсточник.Субконто3,
	|		ЕСТЬNULL(АналитикаПродукция.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|		РаспределениеРасходов.Счет,
	|		РаспределениеРасходов.Подразделение,
	|		РаспределениеРасходов.Субконто1,
	|		РаспределениеРасходов.Субконто2,
	|		РаспределениеРасходов.Субконто3,
	|		РаспределениеРасходов.Номенклатура,
	|		РаспределениеРасходов.База,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(РаспределениеНаВыпуск.Выпуск, ЛОЖЬ),
	|		ЕСТЬNULL(МетодыРаспределения.МетодРасчета, ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)),
	|		РаспределениеРасходов.Правило
	|	ИЗ
	|		РаспределениеНаСубконто КАК РаспределениеРасходов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|			ПО РаспределениеРасходов.Идентификатор = КлючиИсточник.Идентификатор
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АналитикаПродукция КАК АналитикаПродукция
	|			ПО РаспределениеРасходов.Идентификатор = АналитикаПродукция.Идентификатор
	|			ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиПриемник
	|			ПО РаспределениеРасходов.Счет = КлючиПриемник.Счет
	|				И РаспределениеРасходов.Подразделение = КлючиПриемник.Подразделение
	|				И РаспределениеРасходов.Субконто1 = КлючиПриемник.Субконто1
	|				И РаспределениеРасходов.Субконто2 = КлючиПриемник.Субконто2
	|				И РаспределениеРасходов.Субконто3 = КлючиПриемник.Субконто3
	|				И РаспределениеРасходов.Номенклатура = КлючиПриемник.Номенклатура
	|				И РаспределениеРасходов.КорСчет = КлючиПриемник.КорСчет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПравилаРаспределенияРасходовВыпуск КАК РаспределениеНаВыпуск
	|			ПО РаспределениеРасходов.Правило = РаспределениеНаВыпуск.Правило
	|			ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределенияРасходов КАК МетодыРаспределения
	|			ПО РаспределениеРасходов.Правило = МетодыРаспределения.Правило
	|	ГДЕ
	|		КлючиПриемник.Счет ЕСТЬ NULL
	|		И РаспределениеРасходов.База <> 0) КАК ВнешниеДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнешниеДвижения.Источник,
	|	ВнешниеДвижения.СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3,
	|	ВнешниеДвижения.ПродукцияКт,
	|	ВнешниеДвижения.СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт,
	|	ВнешниеДвижения.Выпуск,
	|	ВнешниеДвижения.МетодРаспределения,
	|	ВнешниеДвижения.ПравилоРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеДвижения.Приемник КАК Приемник,
	|	КлючиВершинДт.Счет КАК СчетДт,
	|	КлючиВершинДт.Подразделение КАК ПодразделениеДт,
	|	КлючиВершинДт.Субконто1 КАК СубконтоДт1,
	|	КлючиВершинДт.Субконто2 КАК СубконтоДт2,
	|	КлючиВершинДт.Субконто3 КАК СубконтоДт3,
	|	ВЫБОР
	|		КОГДА ВнутренниеДвижения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск)
	|			ТОГДА КлючиВершинДт.Номенклатура
	|		ИНАЧЕ ЕСТЬNULL(АналитикаПродукцияДт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	КОНЕЦ КАК НоменклатураДт,
	|	ВнутренниеДвижения.Источник КАК Источник,
	|	КлючиВершинКт.Счет КАК СчетКт,
	|	КлючиВершинКт.Подразделение КАК ПодразделениеКт,
	|	КлючиВершинКт.Субконто1 КАК СубконтоКт1,
	|	КлючиВершинКт.Субконто2 КАК СубконтоКт2,
	|	КлючиВершинКт.Субконто3 КАК СубконтоКт3,
	|	ЕСТЬNULL(АналитикаПродукцияКт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПродукцияКт,
	|	ВнутренниеДвижения.Вес КАК Вес,
	|	ВнутренниеДвижения.Сумма КАК Сумма,
	|	ВнутренниеДвижения.СуммаНУ КАК СуммаНУ,
	|	ВнутренниеДвижения.СуммаПР КАК СуммаПР,
	|	ВнутренниеДвижения.СуммаВР КАК СуммаВР,
	|	ВнутренниеДвижения.ВидДвижения КАК ВидДвижения,
	|	ВнутренниеДвижения.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ВнутренниеДвижения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск) КАК Выпуск,
	|	ЕСТЬNULL(МетодыРаспределения.МетодРасчета, ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)) КАК МетодРаспределения,
	|	ПорядокВершин.НомерПередела КАК Порядок,
	|	КлючиВершинДт.Счет <> КлючиВершинКт.Счет
	|		ИЛИ КлючиВершинДт.Подразделение <> КлючиВершинКт.Подразделение
	|		ИЛИ КлючиВершинДт.НеОборотноеСубконто1 <> КлючиВершинКт.НеОборотноеСубконто1
	|		ИЛИ КлючиВершинДт.НеОборотноеСубконто2 <> КлючиВершинКт.НеОборотноеСубконто2
	|		ИЛИ КлючиВершинДт.НеОборотноеСубконто3 <> КлючиВершинКт.НеОборотноеСубконто3 КАК ОтличаетсяАналитикаПроводок
	|ПОМЕСТИТЬ ВнутренниеДвижения
	|ИЗ
	|	ВТ_ВнутренниеДвижения КАК ВнутренниеДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиВершинКт
	|		ПО ВнутренниеДвижения.Источник = КлючиВершинКт.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиВершинДт
	|		ПО ВнутренниеДвижения.Приемник = КлючиВершинДт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АналитикаПродукция КАК АналитикаПродукцияКт
	|		ПО ВнутренниеДвижения.Источник = АналитикаПродукцияКт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АналитикаПродукция КАК АналитикаПродукцияДт
	|		ПО ВнутренниеДвижения.Приемник = АналитикаПродукцияДт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ МетодыРаспределенияРасходов КАК МетодыРаспределения
	|		ПО ВнутренниеДвижения.ПравилоРаспределения = МетодыРаспределения.Правило
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПорядокВершин КАК ПорядокВершин
	|		ПО ВнутренниеДвижения.Источник = ПорядокВершин.Идентификатор
	|ГДЕ
	|	(НЕ(КлючиВершинДт.Счет = КлючиВершинКт.Счет
	|					И КлючиВершинДт.Подразделение = КлючиВершинКт.Подразделение
	|					И КлючиВершинДт.НеОборотноеСубконто1 = КлючиВершинКт.НеОборотноеСубконто1
	|					И КлючиВершинДт.НеОборотноеСубконто2 = КлючиВершинКт.НеОборотноеСубконто2
	|					И КлючиВершинДт.НеОборотноеСубконто3 = КлючиВершинКт.НеОборотноеСубконто3)
	|			ИЛИ ВнутренниеДвижения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|				И ЕСТЬNULL(АналитикаПродукцияДт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ЕСТЬNULL(АналитикаПродукцияДт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЕСТЬNULL(АналитикаПродукцияКт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			ИЛИ ВнутренниеДвижения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск)
	|				И КлючиВершинДт.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И КлючиВершинДт.Номенклатура <> ЕСТЬNULL(АналитикаПродукцияКт.Продукция, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
	|	И (ВнутренниеДвижения.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск)
	|			ИЛИ НЕ(ВнутренниеДвижения.Сумма = 0
	|					И ВнутренниеДвижения.СуммаНУ = 0
	|					И ВнутренниеДвижения.СуммаПР = 0
	|					И ВнутренниеДвижения.СуммаВР = 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВнутренниеДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПорядокВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АналитикаПродукция";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПроводок

// Проводки - общие процедуры

Функция НоваяТаблицаПроводок()
	
	ТипСчет             = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ТипПодразделение    = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ТипСубконто         = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ТипСтрокаСодержание = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Реквизиты.Содержание.Тип;
	
	ТаблицаПроводок = Новый ТаблицаЗначений;
	ТаблицаПроводок.Колонки.Добавить("Выпуск",          Новый ОписаниеТипов("Булево"));
	ТаблицаПроводок.Колонки.Добавить("СчетДт",          ТипСчет);
	ТаблицаПроводок.Колонки.Добавить("СчетКт",          ТипСчет);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеДт", ТипПодразделение);
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеКт", ТипПодразделение);
	ТаблицаПроводок.Колонки.Добавить("Содержание",      ТипСтрокаСодержание);
	ОписаниеСуммПроводки = ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(ТаблицаПроводок, ОписаниеСуммПроводки);
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура СвернутьТаблицуПроводок(Проводки)
	
	ОписаниеСумм  = ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	
	Измерения = Новый Массив;
	Ресурсы   = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	
	Для Каждого Колонка Из Проводки.Колонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		
		Если Ресурсы.Найти(ИмяКолонки) = Неопределено Тогда
			Измерения.Добавить(ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Измерения = СтрСоединить(Измерения, ",");
		
	Проводки.Свернуть(Измерения, КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
	
КонецПроцедуры

Функция СодержаниеПроводки(Выпуск, СодержаниеПроводки = "")
	
	Если ЗначениеЗаполнено(СодержаниеПроводки) Тогда
		Возврат СодержаниеПроводки;
	ИначеЕсли Выпуск Тогда
		Возврат НСтр("ru = 'Корректировка выпуска продукции (услуг)'");
	Иначе
		Возврат НСтр("ru = 'Корректировка стоимости списания'");
	КонецЕсли;
	
КонецФункции

Функция НовыйОписаниеПроводки()
	
	ОписаниеПроводки = Новый Структура;
	ОписаниеПроводки.Вставить("СчетДт",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ОписаниеПроводки.Вставить("СчетКт",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ОписаниеПроводки.Вставить("АналитикаДт", Новый Структура);
	ОписаниеПроводки.Вставить("АналитикаКт", Новый Структура);
	ОписаниеПроводки.Вставить("Суммы",       Новый Структура);
	ОписаниеПроводки.Вставить("Содержание",  "");
	ОписаниеПроводки.Вставить("Выпуск",      Ложь);
	ОписаниеПроводки.Вставить("ПараметрыДополнительныхПроводок", Неопределено);
	ОписаниеПроводки.Вставить("Сторно",      Ложь);
	
	Возврат ОписаниеПроводки;
	
КонецФункции

Процедура ДобавитьПроводку(ТаблицаПроводок, ОписаниеПроводки)
	
	Проводка = ТаблицаПроводок.Добавить();
	Проводка.Содержание = ОписаниеПроводки.Содержание;
	Проводка.Выпуск     = ОписаниеПроводки.Выпуск;
	
	Проводка.СчетДт     = ОписаниеПроводки.СчетДт;
	Проводка.СчетКт     = ОписаниеПроводки.СчетКт;
	
	Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов Тогда
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
		Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПриобретениеМалоценногоОборудованияИЗапасов;
		ИначеЕсли Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеМалоценногоОборудованияИЗапасов;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним субконто Дт и Кт
	Для НомерСубконто = 1 По 3 Цикл
		Проводка["СубконтоДт" + НомерСубконто] = ОписаниеПроводки.АналитикаДт["Субконто" + НомерСубконто];
		Проводка["СубконтоКт" + НомерСубконто] = ОписаниеПроводки.АналитикаКт["Субконто" + НомерСубконто];
	КонецЦикла;
	
	// Заполним подразделения
	// В проводках по Дт счетов финансового результата подразделение Дт должно соответствовать подразделению Кт.
	// Это нужно, так как 
	// - с одной стороны учет доходов и расходов ведется в разрезе подразделений
	// - с другой стороны, важно не допускать проводки между разными обособленными подразделениями
	// Счет 91.02 был добавлен позже, поэтому доп. проверка на заполненность
	ПодразделениеДт = ОписаниеПроводки.АналитикаДт.Подразделение;
	Если Проводка.СчетДт.УчетПоПодразделениям И Проводка.СчетКт.УчетПоПодразделениям Тогда
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Проводка.СчетДт, ПланыСчетов.Хозрасчетный.Продажи) Тогда
			ПодразделениеДт = ОписаниеПроводки.АналитикаКт.Подразделение;
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Проводка.СчетДт, ПланыСчетов.Хозрасчетный.ПрочиеРасходы)
			И НЕ ЗначениеЗаполнено(ОписаниеПроводки.АналитикаДт.Подразделение) Тогда
			ПодразделениеДт = ОписаниеПроводки.АналитикаКт.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, 
		ПодразделениеДт, 
		ОписаниеПроводки.АналитикаКт.Подразделение);
		
	// Заполним суммы
	Если ОписаниеПроводки.Сторно Тогда
		Знак = -1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	Суммы = ОписаниеПроводки.Суммы;
	Проводка.Сумма  = Знак * Суммы.Сумма;
	
	НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки( // Суммы НУ одинаковые в Дт и Кт
		Знак * Суммы.СуммаНУ, Знак * Суммы.СуммаНУ, 
		Знак * Суммы.СуммаПР, Знак * Суммы.СуммаПР,
		Знак * Суммы.СуммаВР, Знак * Суммы.СуммаВР,
		Проводка);
		
	ЭлементыЗатрат.ДобавитьПроводки(ТаблицаПроводок, Проводка, Суммы, ОписаниеПроводки.ПараметрыДополнительныхПроводок);
	
КонецПроцедуры

Функция НоваяСтруктураПолейПроводки(Основание = Неопределено, Суффикс = Неопределено)
	
	// Ключи - имена ключевых полей
	// Значения - шаблоны имени поля основания. 
	//            Используются, если передано основание и суффикс.
	//            В этом случае %% будет заменен на суффикс и из получившегося поля будет получено значения ключевого поля.
	Шаблон = Новый Структура;
	Шаблон.Вставить("Счет",          "Счет%%");
	Шаблон.Вставить("Подразделение", "Подразделение%%");
	Шаблон.Вставить("Субконто1",     "Субконто%%1");
	Шаблон.Вставить("Субконто2",     "Субконто%%2");
	Шаблон.Вставить("Субконто3",     "Субконто%%3");
	
	// См. также РазрезыУчета()
	
	// Инициализируем пустую структуру
	Ключ = Новый Структура;
	Для Каждого КлючИЗначение Из Шаблон Цикл
		Ключ.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если Основание = Неопределено Тогда
		Возврат Ключ;
	КонецЕсли;
	
	// Заполняем структуру
	Если Суффикс = Неопределено Тогда
		// Имена полей в основании и структуре совпадают
		ЗаполнитьЗначенияСвойств(Ключ, Основание);
	Иначе
		// Имена полей отличаются суффиксом
		Для Каждого КлючИЗначение Из Шаблон Цикл
			ИмяПоляОснования = СтрЗаменить(КлючИЗначение.Значение, "%%", Суффикс);
			Ключ.Вставить(КлючИЗначение.Ключ, Основание[ИмяПоляОснования]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

// Внутри учета затрат

Процедура ДобавитьПроводкиВнутренниеДвижения(Проводки, МенеджерВременныхТаблиц)
	
	// Рассчитаем корректировки - разницу между предварительными и окончательными движениями
	
	// МенеджерВременныхТаблиц содержит данные
	// - предварительных проводок (Выбытия)
	// - окончательных проводок (ВнутренниеДвижения)
	// - вершин, для которых могла измениться оценка (ОценкаВершин)
	
	// Получим корректировки
	// Не формируем тривиальные проводки - то есть те, где аналитика Дт и Кт совпадает либо все ресурсы равны 0
	// Также не формируем проводки для вершин, оценка которых заведомо не изменилась
	
	// Упорядочиваем так, чтобы сумма каждой проводка могла быть рассчитана без знания сумм следующих проводок.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Корректировки.СчетДт КАК СчетДт,
	|	Корректировки.ПодразделениеДт КАК ПодразделениеДт,
	|	Корректировки.СубконтоДт1 КАК СубконтоДт1,
	|	Корректировки.СубконтоДт2 КАК СубконтоДт2,
	|	Корректировки.СубконтоДт3 КАК СубконтоДт3,
	|	Корректировки.СчетКт КАК СчетКт,
	|	Корректировки.ПодразделениеКт КАК ПодразделениеКт,
	|	Корректировки.СубконтоКт1 КАК СубконтоКт1,
	|	Корректировки.СубконтоКт2 КАК СубконтоКт2,
	|	Корректировки.СубконтоКт3 КАК СубконтоКт3,
	|	Корректировки.СодержаниеПроводки КАК СодержаниеПроводки,
	|	Корректировки.Выпуск КАК Выпуск,
	|	МАКСИМУМ(Корректировки.Порядок) КАК Порядок,
	|	СУММА(Корректировки.Сумма) КАК Сумма,
	|	СУММА(Корректировки.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Корректировки.СуммаПР) КАК СуммаПР,
	|	СУММА(Корректировки.СуммаВР) КАК СуммаВР,
	|	СУММА(Корректировки.СуммаФакт) КАК СуммаФакт,
	|	СУММА(Корректировки.СуммаФактНУ) КАК СуммаФактНУ,
	|	СУММА(Корректировки.СуммаФактПР) КАК СуммаФактПР,
	|	СУММА(Корректировки.СуммаФактВР) КАК СуммаФактВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОкончательныеПроводки.СчетДт КАК СчетДт,
	|		ОкончательныеПроводки.ПодразделениеДт КАК ПодразделениеДт,
	|		ОкончательныеПроводки.СубконтоДт1 КАК СубконтоДт1,
	|		ОкончательныеПроводки.СубконтоДт2 КАК СубконтоДт2,
	|		ОкончательныеПроводки.СубконтоДт3 КАК СубконтоДт3,
	|		ОкончательныеПроводки.СчетКт КАК СчетКт,
	|		ОкончательныеПроводки.ПодразделениеКт КАК ПодразделениеКт,
	|		ВЫБОР
	|			КОГДА ОкончательныеПроводки.Выпуск
	|					И ОборотныеСубконто.Субконто1
	|				ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию1
	|			ИНАЧЕ ОкончательныеПроводки.СубконтоКт1
	|		КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР
	|			КОГДА ОкончательныеПроводки.Выпуск
	|					И ОборотныеСубконто.Субконто2
	|				ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию2
	|			ИНАЧЕ ОкончательныеПроводки.СубконтоКт2
	|		КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР
	|			КОГДА ОкончательныеПроводки.Выпуск
	|					И ОборотныеСубконто.Субконто3
	|				ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию3
	|			ИНАЧЕ ОкончательныеПроводки.СубконтоКт3
	|		КОНЕЦ КАК СубконтоКт3,
	|		ОкончательныеПроводки.Сумма КАК Сумма,
	|		ОкончательныеПроводки.СуммаНУ КАК СуммаНУ,
	|		ОкончательныеПроводки.СуммаПР КАК СуммаПР,
	|		ОкончательныеПроводки.СуммаВР КАК СуммаВР,
	|		ОкончательныеПроводки.Сумма КАК СуммаФакт,
	|		ОкончательныеПроводки.СуммаНУ КАК СуммаФактНУ,
	|		ОкончательныеПроводки.СуммаПР КАК СуммаФактПР,
	|		ОкончательныеПроводки.СуммаВР КАК СуммаФактВР,
	|		ОкончательныеПроводки.Порядок КАК Порядок,
	|		СодержаниеПроводок.СодержаниеПроводки КАК СодержаниеПроводки,
	|		ОкончательныеПроводки.Выпуск КАК Выпуск
	|	ИЗ
	|		ВнутренниеДвижения КАК ОкончательныеПроводки
	|			ЛЕВОЕ СОЕДИНЕНИЕ СодержаниеПроводокРаспределенияРасходов КАК СодержаниеПроводок
	|			ПО ОкончательныеПроводки.ПравилоРаспределения = СодержаниеПроводок.Правило
	|				И (НЕ ОкончательныеПроводки.Выпуск)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|			ПО ОкончательныеПроводки.СчетКт = ОборотныеСубконто.Счет
	|	ГДЕ
	|		ОкончательныеПроводки.ОтличаетсяАналитикаПроводок
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПредварительныеПроводки.СчетДт,
	|		ПредварительныеПроводки.ПодразделениеДт,
	|		ПредварительныеПроводки.СубконтоДт1,
	|		ПредварительныеПроводки.СубконтоДт2,
	|		ПредварительныеПроводки.СубконтоДт3,
	|		ПредварительныеПроводки.СчетКт,
	|		ПредварительныеПроводки.ПодразделениеКт,
	|		ПредварительныеПроводки.СубконтоКт1,
	|		ПредварительныеПроводки.СубконтоКт2,
	|		ПредварительныеПроводки.СубконтоКт3,
	|		-ПредварительныеПроводки.Сумма,
	|		-ПредварительныеПроводки.СуммаНУ,
	|		-ПредварительныеПроводки.СуммаПР,
	|		-ПредварительныеПроводки.СуммаВР,
	|		ПредварительныеПроводки.Сумма,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL,
	|		ПредварительныеПроводки.Выпуск
	|	ИЗ
	|		Выбытия КАК ПредварительныеПроводки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК Вершины
	|			ПО ПредварительныеПроводки.Источник = Вершины.Идентификатор
	|	ГДЕ
	|		ПредварительныеПроводки.ВнутреннееДвижение) КАК Корректировки
	|ГДЕ
	|	НЕ(Корректировки.СчетДт = Корректировки.СчетКт
	|				И Корректировки.ПодразделениеДт = Корректировки.ПодразделениеКт
	|				И Корректировки.СубконтоДт1 = Корректировки.СубконтоКт1
	|				И Корректировки.СубконтоДт2 = Корректировки.СубконтоКт2
	|				И Корректировки.СубконтоДт3 = Корректировки.СубконтоКт3)
	|
	|СГРУППИРОВАТЬ ПО
	|	Корректировки.СчетДт,
	|	Корректировки.ПодразделениеДт,
	|	Корректировки.СубконтоДт1,
	|	Корректировки.СубконтоДт2,
	|	Корректировки.СубконтоДт3,
	|	Корректировки.СчетКт,
	|	Корректировки.ПодразделениеКт,
	|	Корректировки.СубконтоКт1,
	|	Корректировки.СубконтоКт2,
	|	Корректировки.СубконтоКт3,
	|	Корректировки.Выпуск,
	|	Корректировки.СодержаниеПроводки
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Корректировки.Сумма) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаНУ) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаПР) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаВР) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СодержаниеПроводки,
	|	Выпуск,
	|	СчетКт,
	|	ПодразделениеКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3,
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеПроводки = НовыйОписаниеПроводки();
	
	// На каждую корректировку сформируем проводку
	Пока Выборка.Следующий() Цикл
		
		АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
		АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
		
		ОписаниеПроводки.СчетДт      = АналитикаДт.Счет;
		ОписаниеПроводки.СчетКт      = АналитикаКт.Счет;
		ОписаниеПроводки.АналитикаДт = АналитикаДт;
		ОписаниеПроводки.АналитикаКт = АналитикаКт;
		ОписаниеПроводки.Суммы       = Выборка;
		ОписаниеПроводки.Содержание  = СодержаниеПроводки(Выборка.Выпуск, Выборка.СодержаниеПроводки);
		ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
		
		ДобавитьПроводку(Проводки, ОписаниеПроводки);
		
	КонецЦикла;
	
КонецПроцедуры

// "Списание" из учета затрат

Процедура ДобавитьПроводкиВнешниеДвижения(Проводки, МенеджерВременныхТаблиц, Затраты, Протокол)
	
	// Проводки по внешнему списанию следует свернуть, поэтому сначала соберем их в отдельной коллекции
	ПроводкиВнешнееСписание = НоваяТаблицаПроводок();
	
	// В результате оценки стоимости не должна поменяться стоимость на счетах расчетов.
	// Вместо счета расчета сделаем проводку на счет внереализационных доходов или расходов.
	СчетаРасчетов = Новый Массив;
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);     // 60
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);           // 71
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);   // 73
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // 76
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);            // 79
	
	СчетВнереализационныхРасходов  = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	СчетВнереализационныхДоходов   = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	СубконтоНаСчетеДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров");
	
	// Скомпонуем данные об оценке вершин и всех внешних движениях
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	// Упорядочивание по убыванию количества важно для корректной работы СократитьРасчетСтатейКалькуляции
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник КАК Источник,
	|	СчетаРасходов.Назначение КАК СчетКтНазначение,
	|	ВнешниеДвижения.СчетКт КАК СчетКт,
	|	РасходыКт.ВидДеятельности КАК ВидДеятельностиКт,
	|	ВнешниеДвижения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА ВнешниеДвижения.Выпуск
	|				И ОборотныеСубконто.Субконто1
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию1
	|		ИНАЧЕ ВнешниеДвижения.СубконтоКт1
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА ВнешниеДвижения.Выпуск
	|				И ОборотныеСубконто.Субконто2
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию2
	|		ИНАЧЕ ВнешниеДвижения.СубконтоКт2
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА ВнешниеДвижения.Выпуск
	|				И ОборотныеСубконто.Субконто3
	|			ТОГДА ОборотныеСубконто.ЗначениеПоУмолчанию3
	|		ИНАЧЕ ВнешниеДвижения.СубконтоКт3
	|	КОНЕЦ КАК СубконтоКт3,
	|	ВЫБОР
	|		КОГДА СчетаРасчетов.Счет ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетДтРасчеты,
	|	ВнешниеДвижения.СчетДт КАК СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2 КАК СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3 КАК СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт КАК НоменклатураДт,
	|	ВнешниеДвижения.СчетДт.НалоговыйУчет КАК СчетДтНалоговыйУчет,
	|	ЕСТЬNULL(ОценкаВершин.Вес, 0) КАК КоличествоИсточника,
	|	ЕСТЬNULL(ОценкаВершин.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ОценкаВершин.СуммаНУ, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(ОценкаВершин.СуммаПР, 0) КАК СуммаПР,
	|	ЕСТЬNULL(ОценкаВершин.СуммаВР, 0) КАК СуммаВР,
	|	ВнешниеДвижения.Количество КАК Количество,
	|	ВнешниеДвижения.Сумма КАК ПредварительнаяСумма,
	|	ВнешниеДвижения.СуммаНУ КАК ПредварительнаяСуммаНУ,
	|	ВнешниеДвижения.СуммаПР КАК ПредварительнаяСуммаПР,
	|	ВнешниеДвижения.СуммаВР КАК ПредварительнаяСуммаВР,
	|	ВнешниеДвижения.Выпуск КАК Выпуск,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА ВнешниеДвижения.СубконтоКт1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА ВнешниеДвижения.СубконтоКт2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА ВнешниеДвижения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппаКт,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА ВнешниеДвижения.СубконтоКт1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА ВнешниеДвижения.СубконтоКт2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА ВнешниеДвижения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатратКт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ВнешниеДвижения.СубконтоКт1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ВнешниеДвижения.СубконтоКт2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ВнешниеДвижения.СубконтоКт3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)) КАК ВидДеятельностиСтатьиЗатратКт,
	|	ВнешниеДвижения.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ВнешниеДвижения.МетодРаспределения КАК МетодРаспределения,
	|	СодержаниеПроводок.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ВнешниеДвижения.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ВнешниеДвижения.НоменклатураДт <> ВнешниеДвижения.ПродукцияКт КАК РаспределениеНаНоменклатуру
	|ИЗ
	|	ВнешниеДвижения КАК ВнешниеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО ВнешниеДвижения.Источник = ОценкаВершин.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК РасходыКт
	|		ПО ВнешниеДвижения.Источник = РасходыКт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|		ПО ВнешниеДвижения.СчетКт = СчетаРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасчетов КАК СчетаРасчетов
	|		ПО ВнешниеДвижения.СчетДт = СчетаРасчетов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СодержаниеПроводокРаспределенияРасходов КАК СодержаниеПроводок
	|		ПО ВнешниеДвижения.ПравилоРаспределения = СодержаниеПроводок.Правило
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО ВнешниеДвижения.СчетКт = СубконтоЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО ВнешниеДвижения.СчетКт = ОборотныеСубконто.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник,
	|	Количество УБЫВ,
	|	СодержаниеПроводки,
	|	Выпуск,
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3,
	|	НоменклатураДт
	|ИТОГИ ПО
	|	Источник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИсточник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОписаниеСуммБазовое  = ОписаниеКоллекцииСумм(); // Без расширенной аналитики
	ОписаниеСуммПроводок = ОписаниеКоллекцииСумм(Истина, Истина, Истина); // То, как записывается в коллекции проводок - раздельные суммы по небалансовым ресурсам
	
	ПараметрыФормированияПроводокПоЭлементамЗатрат = Неопределено;
	ЭлементыЗатрат.ЗаполнитьПараметрыФормированияПроводок(
		ПараметрыФормированияПроводокПоЭлементамЗатрат,
		Затраты.ВариантыСтруктурыЗатрат,
		Протокол.КлючиСтруктурыЗатрат,
		ОписаниеСуммПроводок);
	
	СоответствиеИменПредварительнаяСумма = Новый Соответствие; 
	СоответствиеИменПредварительнаяСумма.Вставить("Сумма",   "ПредварительнаяСумма");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаНУ", "ПредварительнаяСуммаНУ");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаПР", "ПредварительнаяСуммаПР");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаВР", "ПредварительнаяСуммаВР");
	
	// В результате оценки стоимости не должна поменяться стоимость на счете учета товаров в рознице, должна поменяться наценка.
	//
	// Чтобы это обеспечить для НТТ:
	// вслед за проводкой по списанию товаров в Дт 41.12
	// следует сделать проводку сторно Дт 41.12 Кт 42.02
	//
	// Почему это сработает:
	// пример схемы проводок по счетам учета товаров в НТТ и торговой наценки для перемещения товаров с оптового склада
	// 1. Дт 41.12 Кт 42.02 (Розничная цена)
	// 2. Дт 41.12 Кт 41.01 (Себестоимость)
	// 3. Дт 41.12 Кт 42.02 (- Себестоимость)
	//
	// В АТТ проводки по счетам торговой наценки формируются по другому принципу:
	// оценка запасов корректируется на счете 42.01, а не 41.11.
	// Подробнее см. создание и использование временной таблицы СчетаТорговойНаценкиАТТ.
	
	СчетаТорговойНаценкиНТТ = Новый Соответствие;
	СчетаТорговойНаценкиНТТ.Вставить(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ,
		ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	
	Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		ВариантСтруктурыЗатрат    = ВариантСтруктурыЗатратКалькуляцияСебестоимости(Затраты.ВариантыСтруктурыЗатрат);
		ОписаниеКлючейКалькуляции = Протокол.КлючиСтруктурыЗатрат[ВариантСтруктурыЗатрат.Имя];
	Иначе
		ВариантСтруктурыЗатрат    = Неопределено;
		ОписаниеКлючейКалькуляции = Неопределено;
	КонецЕсли;
	
	КлючРаспределениеНаУслуги = Новый Структура(
		РегистрыСведений.РасчетСебестоимостиПродукции.КлючАналитикиВыпускаПродукции()); // для оптимизации инициализируем вне цикла
	
	СокращенныйРасчет = ИнициализироватьСокращенныйРасчетСтатейКалькуляции(
		Затраты.ВариантыСтруктурыЗатрат,
		Протокол.КлючиСтруктурыЗатрат);
		
	// Описание ресурсов для СправкаРасчетСписанияКосвенныхРасходов
	РесурсыСправкаРасчетСписанияКосвенныхРасходов = Новый Структура;
	РесурсыСправкаРасчетСписанияКосвенныхРасходов.Вставить("СуммаЗатрат", Новый Соответствие);
	РесурсыСправкаРасчетСписанияКосвенныхРасходов.Вставить("СуммаННП",    Новый Соответствие);
	РесурсыСправкаРасчетСписанияКосвенныхРасходов.Вставить("СуммаНеННП",  Новый Соответствие);
	СвойстваКоллекцииСумм = СтрРазделить(",НУ,ПР,ВР", ",", Истина);
	Для Каждого ОписаниеРесурса Из РесурсыСправкаРасчетСписанияКосвенныхРасходов Цикл
		Для Каждого СуффиксСвойства Из СвойстваКоллекцииСумм Цикл
			ОписаниеРесурса.Значение.Вставить(
				СтрШаблон("Сумма%1", СуффиксСвойства), // Например, СуммаПР
				СтрШаблон("%1%2", ОписаниеРесурса.Ключ, СуффиксСвойства)); // Например, СуммаНеННППР
		КонецЦикла;
	КонецЦикла;
	
	Пока ВыборкаИсточник.Следующий() Цикл
		
		Источник = ОписаниеВершины(Затраты, ВыборкаИсточник.Источник);
		Если Источник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоИсточника = Источник.Вес;
		СуммыИсточника      = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина);
		КоллекцииСумм.Заполнить(СуммыИсточника, Источник, Затраты.ОписаниеСумм);
		
		Выборка = ВыборкаИсточник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
			
			РассчитатьЛимитСтатейКалькуляции(
				СокращенныйРасчет,
				СуммыИсточника.СтатьиКалькуляции,
				Выборка.Количество());
			
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл // По приемникам
			
			Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
				СократитьРасчетСтатейКалькуляции(СуммыИсточника, Выборка.Количество, СокращенныйРасчет);
			КонецЕсли;
			
			// Рассчитаем сумму корректировки
			ОценкаДвижения = ОценитьДвижение(Выборка.Количество, КоличествоИсточника, СуммыИсточника, Затраты);
			
			Если Не КоллекцииСумм.Пустая(ОценкаДвижения, Затраты.ОписаниеСумм) Тогда
				
				// Запишем в протокол сумму расходного движения с отрицательным знаком
				НоваяЗаписьПротокола = Протокол.СальдоПослеРасчета.Добавить();
				НоваяЗаписьПротокола.Идентификатор = Выборка.Источник;
				КоллекцииСумм.Вычесть(НоваяЗаписьПротокола, ОценкаДвижения, Затраты.ОписаниеСумм);
				
				Если Выборка.Выпуск Тогда
					
					// Запишем в протокол выпуск (услуг)
					НоваяСтрока = Протокол.КалькуляцияСебестоимости.Добавить();
					КоллекцииСумм.Заполнить(НоваяСтрока, ОценкаДвижения, ОписаниеСуммБазовое); // Фактическая оценка
					НоваяСтрока.Продукция            = Выборка.НоменклатураДт;
					НоваяСтрока.СчетВыпуска          = Выборка.СчетКт;
					НоваяСтрока.Подразделение        = Выборка.ПодразделениеКт;
					НоваяСтрока.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаКт;
					
					ДетализироватьКалькуляцияСебестоимостиСтруктуройЗатрат(
						НоваяСтрока,
						ОценкаДвижения,
						ОписаниеКлючейКалькуляции,
						ВариантСтруктурыЗатрат);
					
					Если Выборка.РаспределениеНаНоменклатуру Тогда
						
						// Запишем распределение косвенных расходов в Протокол.РаспределениеНаУслуги.
						// Дубли строк с одинаковым ключем в протоколе не допускаются.
						// База распределения определяется, если в исходных данных она одинаковая.
						
						КлючРаспределениеНаУслуги.СчетВыпуска          = Выборка.СчетКт;
						КлючРаспределениеНаУслуги.Подразделение        = Выборка.ПодразделениеКт;
						КлючРаспределениеНаУслуги.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаКт;
						КлючРаспределениеНаУслуги.Продукция            = Выборка.НоменклатураДт;
						
						СтрокиРаспределениеНаУслуги = Протокол.РаспределениеНаУслуги.НайтиСтроки(КлючРаспределениеНаУслуги);
						Если ЗначениеЗаполнено(СтрокиРаспределениеНаУслуги) Тогда
							ЗаписьРаспределениеНаУслуги = СтрокиРаспределениеНаУслуги[0];
							Если ЗаписьРаспределениеНаУслуги.ВидБазыРаспределения <> Выборка.МетодРаспределения Тогда
								ЗаписьРаспределениеНаУслуги.КонфликтВидБазыРаспределения = Истина;
								ЗаписьРаспределениеНаУслуги.ВидБазыРаспределения = Неопределено;
								ЗаписьРаспределениеНаУслуги.БазаРаспределения    = 0;
							КонецЕсли;
						Иначе
							ЗаписьРаспределениеНаУслуги = Протокол.РаспределениеНаУслуги.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьРаспределениеНаУслуги, КлючРаспределениеНаУслуги);
							ЗаписьРаспределениеНаУслуги.ВидБазыРаспределения = Выборка.МетодРаспределения;
						КонецЕсли;
						
						КоллекцииСумм.Сложить(ЗаписьРаспределениеНаУслуги, ОценкаДвижения, ОписаниеСуммБазовое);
						
						Если Не ЗаписьРаспределениеНаУслуги.КонфликтВидБазыРаспределения Тогда
							ЗаписьРаспределениеНаУслуги.БазаРаспределения = Выборка.Количество
								+ ЗаписьРаспределениеНаУслуги.БазаРаспределения;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Выборка.ПравилоРаспределения) 
					И Выборка.СчетКтНазначение = "Расходы"
					И Выборка.СчетДтНалоговыйУчет Тогда
					
					// Запишем в протокол списание расходов (включение в декларацию за текущий период).
					// Расходы, которые списаны потому, что их нельзя включить в декларацию ни сейчас ни в будущем,
					// в протокол не включаются
					
					НоваяСтрока = Протокол.СправкаРасчетСписанияКосвенныхРасходов.Добавить();
					НоваяСтрока.СчетУчета     = Выборка.СчетКт;
					НоваяСтрока.Подразделение = Выборка.ПодразделениеКт;
					НоваяСтрока.СтатьяЗатрат  = Выборка.СтатьяЗатратКт;
					НоваяСтрока.ВидДеятельностиДляНалоговогоУчетаЗатрат
	                                          = Выборка.ВидДеятельностиСтатьиЗатратКт;
					
					КоллекцииСумм.Выгрузить(
						НоваяСтрока,
						ОценкаДвижения,
						ОписаниеСуммБазовое,
						РесурсыСправкаРасчетСписанияКосвенныхРасходов.СуммаЗатрат);
					Если Выборка.ВидДеятельностиКт = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
						КоллекцииСумм.Выгрузить(
							НоваяСтрока,
							ОценкаДвижения,
							ОписаниеСуммБазовое,
							РесурсыСправкаРасчетСписанияКосвенныхРасходов.СуммаННП);
					Иначе
						КоллекцииСумм.Выгрузить(
							НоваяСтрока,
							ОценкаДвижения,
							ОписаниеСуммБазовое,
							РесурсыСправкаРасчетСписанияКосвенныхРасходов.СуммаНеННП);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			// Подготовим проводки на сумму разницы между предварительной и окончательной суммами - "корректировки"
			
			ДоКорректировки = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСуммБазовое, Истина);
			КоллекцииСумм.Заполнить(
				ДоКорректировки, 
				Выборка, 
				ОписаниеСуммБазовое,
				СоответствиеИменПредварительнаяСумма); // Из выборки берем поля с префиксом "ПредварительнаяСумма"
			
			Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм, Истина);
			КоллекцииСумм.Заполнить(Корректировка, ОценкаДвижения, Затраты.ОписаниеСумм);
			КоллекцииСумм.Вычесть(Корректировка, ДоКорректировки, ОписаниеСуммБазовое);
			
			// Убедимся, что есть что корректировать
			Если КоллекцииСумм.Пустая(Корректировка, Затраты.ОписаниеСумм) Тогда
				Продолжить;
			КонецЕсли;
			
			СодержаниеПроводки = СодержаниеПроводки(Выборка.Выпуск, Выборка.СодержаниеПроводки);
			
			Если Не Выборка.СчетДтРасчеты Тогда
				
				// Обычная проводка
				ОписаниеПроводки = НовыйОписаниеПроводки();
				ОписаниеПроводки.СчетДт      = Выборка.СчетДт;
				ОписаниеПроводки.СчетКт      = Выборка.СчетКт;
				ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
				ОписаниеПроводки.АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
				ОписаниеПроводки.Суммы       = Корректировка;
				ОписаниеПроводки.Содержание  = СодержаниеПроводки;
				ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
				ОписаниеПроводки.ПараметрыДополнительныхПроводок = ПараметрыФормированияПроводокПоЭлементамЗатрат;

				ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				// Добавим проводку по торговой наценке	
				СчетТорговойНаценки = СчетаТорговойНаценкиНТТ[Выборка.СчетДт];
				Если СчетТорговойНаценки <> Неопределено Тогда
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = Выборка.СчетДт;
					ОписаниеПроводки.СчетКт      = СчетТорговойНаценки;
					ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
					ОписаниеПроводки.АналитикаКт = ОписаниеПроводки.АналитикаДт; // Аналитика на счете запасов и счете наценки совпадает
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					ОписаниеПроводки.Сторно      = Истина;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				КонецЕсли;
				
				
			Иначе // СчетДтРасчеты
				
				// Корректировка расчетов выполняется за счет внереализационных доходов или расходов,
				// а не за счет расчетов
				АналитикаПрочихДоходовРасходов = НоваяСтруктураПолейПроводки();
				АналитикаПрочихДоходовРасходов.Вставить("Подразделение", Выборка.ПодразделениеДт);
				АналитикаПрочихДоходовРасходов.Вставить("Субконто1",     СубконтоНаСчетеДоходовРасходов);
				
				// В зависимости от знака корректировки определим, что будем корректировать - доходы или расходы
				Если Корректировка.Сумма > 0 ИЛИ 
					(Корректировка.Сумма = 0 И 
						(Корректировка.СуммаНУ > 0 
						ИЛИ Корректировка.СуммаПР > 0 
						ИЛИ Корректировка.СуммаВР > 0)) Тогда
						
					// Расходы
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = СчетВнереализационныхРасходов;
					ОписаниеПроводки.СчетКт      = Выборка.СчетКт;
					ОписаниеПроводки.АналитикаДт = АналитикаПрочихДоходовРасходов;
					ОписаниеПроводки.АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				Иначе
					
					// Доходы - сторно
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = Выборка.СчетКт;
					ОписаниеПроводки.СчетКт      = СчетВнереализационныхДоходов;
					ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
					ОписаниеПроводки.АналитикаКт = АналитикаПрочихДоходовРасходов;
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					ОписаниеПроводки.Сторно      = Истина;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;  // По Выборке
		
	КонецЦикла;  // По ВыборкаИсточник
	
	ЗаписатьСтатистикуСокращенногоРасчета(СокращенныйРасчет);
	
	// Свернем проводки и добавим их в общую коллекцию 
	СвернутьТаблицуПроводок(ПроводкиВнешнееСписание);
	Для Каждого Проводка Из ПроводкиВнешнееСписание Цикл
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСуммПроводок) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Проводка);
	КонецЦикла;
	
КонецПроцедуры

// Счет 40

Процедура ДобавитьПроводкиСчет40(Проводки, Период, Организация, Ссылка)
	
	// Используется в транзитном алгоритме.
	// При формировании проводок правилами распределения см. ЗаполнитьВидСтоимостиВыпускПродукции
	
	Если ИсточникДанныхВыпуска(Период, Организация) <> "РегистрНакопленияСчет40" Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСчетаЗатрат(МенеджерВременныхТаблиц, Период, Организация, "РасходыНаПроизводство");
	ТолькоРегистрНакопления = Истина; // Важно получить исходную аналитику учета расходов (из регистра накопления, без учета счета 40)
	СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация, ТолькоРегистрНакопления);
	
	// Пронумеруем таблицу перед помещением в запрос.
	// Запрос в итоге вернет строки, которые нужно заменить.
	Проводки.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число")); // Удалим в конце процедуры
	Для Каждого СтрокаТаблицы Из Проводки Цикл
		СтрокаТаблицы.Индекс = Проводки.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	// Поместим проводки во временные таблицы.
	// Затем отберем среди них те, которые были отражены с плановой стоимостью.
	// Отбираем только по аналитике Кт, так как при реализации услуг
	// аналитика Дт в предварительных проводках и окончательных может не совпадать:
	// в проводках в Дт счета 90 устанавливаем подразделение по подразделению Кт - см. ДобавитьПроводку()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; // Это локальный менеджер, используется только в этой процедуре
	Запрос.УстановитьПараметр("Проводки", Проводки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.Индекс КАК Индекс,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.СуммаНУДт КАК СуммаНУДт,
	|	Проводки.СуммаПРДт КАК СуммаПРДт,
	|	Проводки.СуммаВРДт КАК СуммаВРДт,
	|	Проводки.СуммаНУКт КАК СуммаНУКт,
	|	Проводки.СуммаПРКт КАК СуммаПРКт,
	|	Проводки.СуммаВРКт КАК СуммаВРКт,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.Содержание КАК Содержание
	|ПОМЕСТИТЬ ВТ_ПредварительныеПроводкиСПлановойСтоимостью
	|ИЗ
	|	&Проводки КАК Проводки
	|ГДЕ
	|	Проводки.Выпуск
	|	И Проводки.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.Индекс КАК Индекс,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.СуммаНУДт КАК СуммаНУДт,
	|	Проводки.СуммаПРДт КАК СуммаПРДт,
	|	Проводки.СуммаВРДт КАК СуммаВРДт,
	|	Проводки.СуммаНУКт КАК СуммаНУКт,
	|	Проводки.СуммаПРКт КАК СуммаПРКт,
	|	Проводки.СуммаВРКт КАК СуммаВРКт,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.Содержание КАК Содержание
	|ПОМЕСТИТЬ ВТ_ОкончательныеПроводки
	|ИЗ
	|	&Проводки КАК Проводки
	|ГДЕ
	|	Проводки.Выпуск
	|	И Проводки.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	ПодразделениеКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПоПлановойСтоимости.СчетКт КАК СчетКт,
	|	ВыпускПоПлановойСтоимости.ПодразделениеКт КАК ПодразделениеКт,
	|	ВыпускПоПлановойСтоимости.СубконтоКт1 КАК СубконтоКт1,
	|	ВыпускПоПлановойСтоимости.СубконтоКт2 КАК СубконтоКт2,
	|	ВыпускПоПлановойСтоимости.СубконтоКт3 КАК СубконтоКт3
	|ПОМЕСТИТЬ ВТ_ПроводкиСПлановойСтоимостью
	|ИЗ
	|	ПредварительныеПроводкиВыпуск КАК ВыпускПоПлановойСтоимости
	|ГДЕ
	|	ВыпускПоПлановойСтоимости.Сумма <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	ПодразделениеКт,
	|	ВыпускПоПлановойСтоимости.СубконтоКт1,
	|	ВыпускПоПлановойСтоимости.СубконтоКт2,
	|	ВыпускПоПлановойСтоимости.СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.Индекс КАК Индекс,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.СуммаНУДт КАК СуммаНУДт,
	|	Проводки.СуммаПРДт КАК СуммаПРДт,
	|	Проводки.СуммаВРДт КАК СуммаВРДт,
	|	Проводки.СуммаНУКт КАК СуммаНУКт,
	|	Проводки.СуммаПРКт КАК СуммаПРКт,
	|	Проводки.СуммаВРКт КАК СуммаВРКт,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СубконтоЗатратКт.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Проводки.СубконтоКт1
	|		КОГДА СубконтоЗатратКт.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Проводки.СубконтоКт2
	|		КОГДА СубконтоЗатратКт.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Проводки.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	СубконтоЗатратВыпускПродукции.ВидСубконто1 КАК ВыпускПродукцииСубконто1,
	|	СубконтоЗатратВыпускПродукции.ВидСубконто2 КАК ВыпускПродукцииСубконто2,
	|	СубконтоЗатратВыпускПродукции.ВидСубконто3 КАК ВыпускПродукцииСубконто3,
	|	СубконтоЗатратВыпускПродукции.ЗначениеПоУмолчанию1 КАК ВыпускПродукцииЗначениеПоУмолчанию1,
	|	СубконтоЗатратВыпускПродукции.ЗначениеПоУмолчанию2 КАК ВыпускПродукцииЗначениеПоУмолчанию2,
	|	СубконтоЗатратВыпускПродукции.ЗначениеПоУмолчанию3 КАК ВыпускПродукцииЗначениеПоУмолчанию3
	|ПОМЕСТИТЬ ВТ_ОкончательныеПроводкиСПлановойСтоимостью
	|ИЗ
	|	ВТ_ОкончательныеПроводки КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратКт
	|		ПО Проводки.СчетКт = СубконтоЗатратКт.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратВыпускПродукции
	|		ПО (СубконтоЗатратВыпускПродукции.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПроводкиСПлановойСтоимостью КАК ВыпускПоПлановойСтоимости
	|		ПО Проводки.СчетКт = ВыпускПоПлановойСтоимости.СчетКт
	|			И Проводки.ПодразделениеКт = ВыпускПоПлановойСтоимости.ПодразделениеКт
	|			И Проводки.СубконтоКт1 = ВыпускПоПлановойСтоимости.СубконтоКт1
	|			И Проводки.СубконтоКт2 = ВыпускПоПлановойСтоимости.СубконтоКт2
	|			И Проводки.СубконтоКт3 = ВыпускПоПлановойСтоимости.СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПроводкиСПлановойСтоимостью";
	
	Запрос.Выполнить();
	
	// Запомним строки, которые потребуется удалить.
	// Но удалим их позже - только после того, когда добавим новые строки.
	// Так проще сохранить порядок строк.
	СтрокиКУдалению = Новый Массив;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проводки.Индекс
	|ИЗ
	|	ВТ_ПредварительныеПроводкиСПлановойСтоимостью КАК Проводки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.Индекс
	|ИЗ
	|	ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Проводки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиКУдалению.Добавить(Проводки[Выборка.Индекс]);
	КонецЦикла;
	
	// Получим строки, которые нужно заменить в таблице проводок:
	// а. в проводках по Кт счета 40 заменим вид стоимости на "Отклонение".
	//    Такие проводки - это сторно предварительных проводок (предварительных - то есть сформированных первичными документами).
	//    Цель: добиться того, что проводки по Кт счета 40, сформированные регламентной операцией, 
	//    будут иметь вид стоимости Отклонение.
	// б. проводки по выпуску разобъем на две:
	//   1. По Дт счета 40 с видом стоимости "Выпуск по фактической стоимости"
	//   2. По Кт счета 40 с видом стоимости "Отклонение"
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; // Это локальный менеджер
	Запрос.УстановитьПараметр("УчетНаСчетеВыпускПродукцииПоПодразделениям", ПланыСчетов.Хозрасчетный.ВыпускПродукции.УчетПоПодразделениям);
	Запрос.УстановитьПараметр("ПустоеПодразделение",                        БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Проводки.Индекс) КАК Индекс,
	|	Проводки.Порядок КАК Порядок,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	СУММА(Проводки.Сумма) КАК Сумма,
	|	СУММА(Проводки.СуммаНУДт) КАК СуммаНУДт,
	|	СУММА(Проводки.СуммаПРДт) КАК СуммаПРДт,
	|	СУММА(Проводки.СуммаВРДт) КАК СуммаВРДт,
	|	СУММА(Проводки.СуммаНУКт) КАК СуммаНУКт,
	|	СУММА(Проводки.СуммаПРКт) КАК СуммаПРКт,
	|	СУММА(Проводки.СуммаВРКт) КАК СуммаВРКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановаяСтоимость.Индекс КАК Индекс,
	|		2 КАК Порядок,
	|		ПлановаяСтоимость.СчетДт КАК СчетДт,
	|		ПлановаяСтоимость.ПодразделениеДт КАК ПодразделениеДт,
	|		ПлановаяСтоимость.СубконтоДт1 КАК СубконтоДт1,
	|		ПлановаяСтоимость.СубконтоДт2 КАК СубконтоДт2,
	|		ПлановаяСтоимость.СубконтоДт3 КАК СубконтоДт3,
	|		ПлановаяСтоимость.СчетКт КАК СчетКт,
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА ПлановаяСтоимость.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ КАК ПодразделениеКт,
	|		ВЫБОР
	|			КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт1
	|		КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР
	|			КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт2
	|		КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР
	|			КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт3
	|		КОНЕЦ КАК СубконтоКт3,
	|		ПлановаяСтоимость.Сумма КАК Сумма,
	|		ПлановаяСтоимость.СуммаНУДт КАК СуммаНУДт,
	|		ПлановаяСтоимость.СуммаПРДт КАК СуммаПРДт,
	|		ПлановаяСтоимость.СуммаВРДт КАК СуммаВРДт,
	|		ПлановаяСтоимость.СуммаНУКт КАК СуммаНУКт,
	|		ПлановаяСтоимость.СуммаПРКт КАК СуммаПРКт,
	|		ПлановаяСтоимость.СуммаВРКт КАК СуммаВРКт
	|	ИЗ
	|		ВТ_ПредварительныеПроводкиСПлановойСтоимостью КАК ПлановаяСтоимость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|			ПО (СубконтоЗатрат.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Дт40.Индекс,
	|		1,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции),
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА Дт40.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Дт40.ВыпускПродукцииСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА Дт40.ВыпускПродукцииСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ Дт40.ВыпускПродукцииЗначениеПоУмолчанию1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Дт40.ВыпускПродукцииСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА Дт40.ВыпускПродукцииСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ Дт40.ВыпускПродукцииЗначениеПоУмолчанию2
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Дт40.ВыпускПродукцииСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА Дт40.ВыпускПродукцииСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ Дт40.ВыпускПродукцииЗначениеПоУмолчанию3
	|		КОНЕЦ,
	|		Дт40.СчетКт,
	|		Дт40.ПодразделениеКт,
	|		Дт40.СубконтоКт1,
	|		Дт40.СубконтоКт2,
	|		Дт40.СубконтоКт3,
	|		Дт40.Сумма,
	|		Дт40.СуммаНУДт,
	|		Дт40.СуммаПРДт,
	|		Дт40.СуммаВРДт,
	|		Дт40.СуммаНУКт,
	|		Дт40.СуммаПРКт,
	|		Дт40.СуммаВРКт
	|	ИЗ
	|		ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Дт40
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Кт40.Индекс,
	|		2,
	|		Кт40.СчетДт,
	|		Кт40.ПодразделениеДт,
	|		Кт40.СубконтоДт1,
	|		Кт40.СубконтоДт2,
	|		Кт40.СубконтоДт3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции),
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА Кт40.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Кт40.ВыпускПродукцииСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА Кт40.ВыпускПродукцииСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ Кт40.ВыпускПродукцииЗначениеПоУмолчанию1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Кт40.ВыпускПродукцииСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА Кт40.ВыпускПродукцииСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ Кт40.ВыпускПродукцииЗначениеПоУмолчанию2
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Кт40.ВыпускПродукцииСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА Кт40.ВыпускПродукцииСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ Кт40.ВыпускПродукцииЗначениеПоУмолчанию3
	|		КОНЕЦ,
	|		Кт40.Сумма,
	|		Кт40.СуммаНУДт,
	|		Кт40.СуммаПРДт,
	|		Кт40.СуммаВРДт,
	|		Кт40.СуммаНУКт,
	|		Кт40.СуммаПРКт,
	|		Кт40.СуммаВРКт
	|	ИЗ
	|		ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Кт40) КАК Проводки
	|
	|СГРУППИРОВАТЬ ПО
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс УБЫВ,
	|	Проводки.Порядок УБЫВ";
	
	// Выборка упорядочена так, чтобы строки добавлялись "с конца".
	// Этим обеспечиваем, что проводки будут вставлены перед теми, которые собрались удалять.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Проводки.Вставить(Выборка.Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "ПодразделениеДт, ПодразделениеКт");
		НоваяСтрока.Содержание = СодержаниеПроводки(Истина);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			НоваяСтрока, 
			Выборка.ПодразделениеДт, 
			Выборка.ПодразделениеКт);
		
	КонецЦикла;
	
	// Удалим "приговоренные" строки
	Для Каждого Проводка Из СтрокиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
	// Уберем за собой
	Проводки.Колонки.Удалить("Индекс");
	
	// Менеджер локальный, поэтому временные таблицы можно не уничтожать
	
	ЗарегистрироватьЭтап("Готовы проводки по счету 40", Ссылка);
	
КонецПроцедуры

Процедура ЗаполнитьВидСтоимостиВыпускПродукции(Проводка)
	
	// Заполним оборотную аналитику для счета 40:
	// в ходе расчета она не имеет значения, нужна только для иллюстрации результата расчета.
	//
	// В ходе расчета для всех движений используется вид стоимости, заданный до начала расчета - "Плановая"
	
	// В транзитном алгоритме записи с видом стоимости Плановая не формируются - см. ДобавитьПроводкиСчет40
	
	Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыпускПродукции
		И Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости] = Перечисления.ВидыСтоимости.Плановая Тогда
		Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости] = Перечисления.ВидыСтоимости.Фактическая;
	КонецЕсли;
	
	Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыпускПродукции
		И Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости] = Перечисления.ВидыСтоимости.Плановая Тогда
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости] = Перечисления.ВидыСтоимости.Отклонение;
	КонецЕсли;
	
КонецПроцедуры

// Корректировка небалансового счета

Процедура ДобавитьПроводкиСчетМЦ04(Проводки, МенеджерВременныхТаблиц, Период, Организация)
	
	// При использовании отложенного проведения себестоимость списываемого инвентаря в момент проведения документа
	// ещё неизвестна. Поэтому как проводки Дт 20 Кт 10, так и проводки Дт МЦ.04 имеют нулевую сумму. После расчёта
	// себестоимости мы знаем сумму проводки Дт 20 Кт 10 и можем рассчитать сумму по забалансовому счёту Дт МЦ.04 .
	
	Если Не ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим порядок субконто Номенклатура на счете МЦ.04 .
	ВидСубконтоНоменлатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СчетМЦ04 = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации;
	СубконтоНоменклатура = СчетМЦ04.ВидыСубконто.Найти(ВидСубконтоНоменлатура);
	Если СубконтоНоменклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерСубконтоНоменклатура = СубконтоНоменклатура.НомерСтроки;
	
	// Рассчитаем корректировки - приход на счет МЦ.04
	
	// МенеджерВременныхТаблиц содержит данные
	// - данные "списаний" из затрат (ВнешниеДвижения)
	// - данные фактических движений затрат (ВнутренниеДвижения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура", ВидСубконтоНоменлатура);
	Запрос.УстановитьПараметр("НачалоМесяца",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца",             КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",     БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("СчетМЦ04",                БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетМЦ04));
	Запрос.УстановитьПараметр("Счет10",       
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получаем данные движений, для которых будет скорректирована сумма.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Номенклатура,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоДт) КАК КоличествоДт,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ИнвентарьВЭксплуатации
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И СчетДт В (&СчетМЦ04)
	|				И НЕ НеКорректироватьСтоимостьАвтоматически
	|				И Активность,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ПодразделениеДт, &ПустоеПодразделение),
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентарьВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ИнвентарьВЭксплуатации.Регистратор КАК Регистратор,
	|	ИнвентарьВЭксплуатации.СчетДт КАК СчетДт,
	|	ИнвентарьВЭксплуатации.СубконтоДт1 КАК СубконтоДт1,
	|	ИнвентарьВЭксплуатации.СубконтоДт2 КАК СубконтоДт2,
	|	ИнвентарьВЭксплуатации.СубконтоДт3 КАК СубконтоДт3,
	|	ИнвентарьВЭксплуатации.ПодразделениеДт КАК ПодразделениеДт,
	|	СУММА(ИнвентарьВЭксплуатации.КоличествоДт) КАК КоличествоДт,
	|	СУММА(ИнвентарьВЭксплуатации.Сумма) КАК Сумма
	|ИЗ
	|	ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентарьВЭксплуатации.Номенклатура,
	|	ИнвентарьВЭксплуатации.СчетДт,
	|	ИнвентарьВЭксплуатации.СубконтоДт1,
	|	ИнвентарьВЭксплуатации.СубконтоДт2,
	|	ИнвентарьВЭксплуатации.СубконтоДт3,
	|	ИнвентарьВЭксплуатации.ПодразделениеДт,
	|	ИнвентарьВЭксплуатации.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Регистратор,
	|	ПодразделениеДт,
	|	СчетДт,
	|	СубконтоДт2,
	|	СубконтоДт3";
	
	Если НомерСубконтоНоменклатура <> 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Номенклатура",
			"ХозрасчетныйДвиженияССубконто.СубконтоДт" + НомерСубконтоНоменклатура + " КАК Номенклатура");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Получили список поступлений Дт МЦ.04, для которых нужно дать оценку себестоимости.
	ИнвентарьВЭксплуатации = Результат.Выгрузить();
	
	// Запрос получает данные движений при передаче инвентаря в эксплуатацию (Дт СчетЗатрат Кт 10),
	// а затем суммы этих движений на основе данных расчета себестоимости.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоНоменклатура
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|	КОНЕЦ КАК Номенклатура,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК Количество
	|ПОМЕСТИТЬ ВТ_ИсходныеБалансовыеДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор В
	|					(ВЫБРАТЬ
	|						ИнвентарьВЭксплуатации.Регистратор
	|					ИЗ
	|						ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации)
	|				И Организация = &Организация
	|				И СчетКт В (&Счет10)
	|				И (ВидСубконтоКт1 = &ВидСубконтоНоменклатура
	|						И СубконтоКт1 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ИнвентарьВЭксплуатации.Номенклатура
	|							ИЗ
	|								ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации)
	|					ИЛИ ВидСубконтоКт2 = &ВидСубконтоНоменклатура
	|						И СубконтоКт2 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ИнвентарьВЭксплуатации.Номенклатура
	|							ИЗ
	|								ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации)
	|					ИЛИ ВидСубконтоКт3 = &ВидСубконтоНоменклатура
	|						И СубконтоКт3 В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ИнвентарьВЭксплуатации.Номенклатура
	|							ИЗ
	|								ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации))
	|				И Активность,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьБалансовыхДвижений.Номенклатура КАК Номенклатура,
	|	СебестоимостьБалансовыхДвижений.Регистратор КАК Регистратор,
	|	СУММА(СебестоимостьБалансовыхДвижений.КоличествоПоДокументу) КАК КоличествоПоДокументу,
	|	ВЫРАЗИТЬ(СУММА(СебестоимостьБалансовыхДвижений.Сумма / СебестоимостьБалансовыхДвижений.Количество * СебестоимостьБалансовыхДвижений.КоличествоПоДокументу) КАК ЧИСЛО(15, 2)) КАК СуммаПоДокументу
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ИсходныеБалансовыеДвижения.Регистратор КАК Регистратор,
	|		ВТ_ИсходныеБалансовыеДвижения.Номенклатура КАК Номенклатура,
	|		ВТ_ИсходныеБалансовыеДвижения.СчетДт КАК СчетДт,
	|		ВТ_ИсходныеБалансовыеДвижения.ПодразделениеДт КАК ПодразделениеДт,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт2 КАК СубконтоДт2,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт3 КАК СубконтоДт3,
	|		ВТ_ИсходныеБалансовыеДвижения.СчетКт КАК СчетКт,
	|		ВТ_ИсходныеБалансовыеДвижения.ПодразделениеКт КАК ПодразделениеКт,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоКт2 КАК СубконтоКт2,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоКт3 КАК СубконтоКт3,
	|		ВнутренниеДвижения.Вес КАК Количество,
	|		ВнутренниеДвижения.Сумма КАК Сумма,
	|		ВТ_ИсходныеБалансовыеДвижения.Количество КАК КоличествоПоДокументу
	|	ИЗ
	|		ВТ_ИсходныеБалансовыеДвижения КАК ВТ_ИсходныеБалансовыеДвижения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнутренниеДвижения КАК ВнутренниеДвижения
	|			ПО ВТ_ИсходныеБалансовыеДвижения.СчетКт = ВнутренниеДвижения.СчетКт
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт1 = ВнутренниеДвижения.СубконтоКт1
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт2 = ВнутренниеДвижения.СубконтоКт2
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт3 = ВнутренниеДвижения.СубконтоКт3
	|				И ВТ_ИсходныеБалансовыеДвижения.ПодразделениеКт = ВнутренниеДвижения.ПодразделениеКт
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт1 = ВнутренниеДвижения.СубконтоДт1
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт2 = ВнутренниеДвижения.СубконтоДт2
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт3 = ВнутренниеДвижения.СубконтоДт3
	|				И ВТ_ИсходныеБалансовыеДвижения.СчетДт = ВнутренниеДвижения.СчетДт
	|				И ВТ_ИсходныеБалансовыеДвижения.ПодразделениеДт = ВнутренниеДвижения.ПодразделениеДт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ИсходныеБалансовыеДвижения.Регистратор,
	|		ВТ_ИсходныеБалансовыеДвижения.Номенклатура,
	|		ВТ_ИсходныеБалансовыеДвижения.СчетДт,
	|		ВТ_ИсходныеБалансовыеДвижения.ПодразделениеДт,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт1,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт2,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоДт3,
	|		ВТ_ИсходныеБалансовыеДвижения.СчетКт,
	|		ВТ_ИсходныеБалансовыеДвижения.ПодразделениеКт,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоКт2,
	|		ВТ_ИсходныеБалансовыеДвижения.СубконтоКт3,
	|		ЕСТЬNULL(ОценкаВершин.Вес, 0),
	|		ЕСТЬNULL(ОценкаВершин.Сумма, 0),
	|		ВТ_ИсходныеБалансовыеДвижения.Количество
	|	ИЗ
	|		ВТ_ИсходныеБалансовыеДвижения КАК ВТ_ИсходныеБалансовыеДвижения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешниеДвижения КАК ВнешниеДвижения
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|				ПО ВнешниеДвижения.Источник = ОценкаВершин.Идентификатор
	|			ПО ВТ_ИсходныеБалансовыеДвижения.СчетКт = ВнешниеДвижения.СчетКт
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт1 = ВнешниеДвижения.СубконтоКт1
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт2 = ВнешниеДвижения.СубконтоКт2
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоКт3 = ВнешниеДвижения.СубконтоКт3
	|				И ВТ_ИсходныеБалансовыеДвижения.ПодразделениеКт = ВнешниеДвижения.ПодразделениеКт
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт1 = ВнешниеДвижения.СубконтоДт1
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт2 = ВнешниеДвижения.СубконтоДт2
	|				И ВТ_ИсходныеБалансовыеДвижения.СубконтоДт3 = ВнешниеДвижения.СубконтоДт3
	|				И ВТ_ИсходныеБалансовыеДвижения.СчетДт = ВнешниеДвижения.СчетДт
	|				И ВТ_ИсходныеБалансовыеДвижения.ПодразделениеДт = ВнешниеДвижения.ПодразделениеДт) КАК СебестоимостьБалансовыхДвижений
	|ГДЕ
	|	СебестоимостьБалансовыхДвижений.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьБалансовыхДвижений.Номенклатура,
	|	СебестоимостьБалансовыхДвижений.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИсходныеБалансовыеДвижения";
	
	Результат = Запрос.Выполнить();
	// Получили себестоимость инвентаря, переданного в эксплуатацию.
	СебестоимостьНоменклатуры = Результат.Выбрать();
	
	// Проводки следует свернуть, поэтому сначала соберем их в отдельной коллекции.
	ПроводкиПередачаИнвентаря = НоваяТаблицаПроводок();
	
	ОписаниеСуммПроводок = ОписаниеКоллекцииСумм(Истина, Истина, Ложь);
	ОписаниеПроводки = НовыйОписаниеПроводки();
	ТекстКорректировки = СодержаниеПроводки(Ложь, НСтр("ru = 'Корректировка передачи инвентаря'"));

	ЕстьНоменклатураДляПереоценки = Истина;
	
	// Движемся по суммам фактической себестоимости номенклатуры, списанной с 10-ых счетов (выборка СебестоимостьНоменклатуры),
	// и дополняем суммы проводок, ранее сделанных по МЦ.04 (таблица ИнвентарьВЭксплуатации).
	// В простейшем случае конкретная номенклатура-инвентарь списывается на одно МОЛ. Однако необходимо также учесть варианты:
	// - одна и та же номенклатура передаётся в эксплуатацию разным МОЛ в определённой пропорции;
	// - номенклатура является как инвентарём, так и спецоснасткой в одном и том же документе (например, набор инструментов).
	
	Пока ЕстьНоменклатураДляПереоценки И СебестоимостьНоменклатуры.Следующий() Цикл
		
		// По логике построения запроса в ИнвентарьВЭксплуатации всегда есть номенклатура, которая есть в
		// СебестоимостьНоменклатуры. Обратное неверно. Пропускаем номенклатуру, для которой не нужно
		// делать корректирующие проводки.
		Пока ЕстьНоменклатураДляПереоценки
			И (СебестоимостьНоменклатуры.Номенклатура <> ИнвентарьВЭксплуатации[0].СубконтоДт1
			Или СебестоимостьНоменклатуры.Регистратор <> ИнвентарьВЭксплуатации[0].Регистратор) Цикл
			
			ИнвентарьВЭксплуатации.Удалить(0);
			ЕстьНоменклатураДляПереоценки = (ИнвентарьВЭксплуатации.Количество() > 0);
			
		КонецЦикла;
		Если Не ЕстьНоменклатураДляПереоценки Тогда
			Прервать;
		КонецЕсли;
		
		// Получим обороты ранее сделанных проводок по Дт МЦ.04 .
		// Может быть просуммировано несколько строк, например, если были разные МОЛ в документе.
		СтрокиПоПереоцениваемойНоменклатуре = Новый Массив;
		КоличествоМЦПоДокументу = 0;
		СуммаМЦПоДокументу = 0;
		Для каждого ПереоцениваемаяНоменклатура Из ИнвентарьВЭксплуатации Цикл
			Если СебестоимостьНоменклатуры.Номенклатура <> ПереоцениваемаяНоменклатура.СубконтоДт1
				Или СебестоимостьНоменклатуры.Регистратор <> ПереоцениваемаяНоменклатура.Регистратор Тогда
				Прервать;
			КонецЕсли;
			
			СтрокиПоПереоцениваемойНоменклатуре.Добавить(ПереоцениваемаяНоменклатура);
			КоличествоМЦПоДокументу = КоличествоМЦПоДокументу + ПереоцениваемаяНоменклатура.КоличествоДт;
			СуммаМЦПоДокументу      = СуммаМЦПоДокументу + ПереоцениваемаяНоменклатура.Сумма;
		КонецЦикла;
		
		Если КоличествоМЦПоДокументу = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СебестоимостьНоменклатуры.КоличествоПоДокументу < КоличествоМЦПоДокументу Тогда
			
			// Для корректировки себестоимости нужно учитывать не всю номенклатуру из документа, значит и не всю сумму.
			// Маловероятная ситуация, когда в одном документе номенклатура использована и как инвентарь, и как спецодежда/спецоснастка.
			СуммаМЦПоДокументу = Окр(СуммаМЦПоДокументу * СебестоимостьНоменклатуры.КоличествоПоДокументу / КоличествоМЦПоДокументу, 2);
			
			РазницаКоличеств = КоличествоМЦПоДокументу - СебестоимостьНоменклатуры.КоличествоПоДокументу;
			Пока РазницаКоличеств > 0 Цикл
				Если РазницаКоличеств > СтрокиПоПереоцениваемойНоменклатуре[0].КоличествоДт Тогда
					РазницаКоличеств = РазницаКоличеств - СтрокиПоПереоцениваемойНоменклатуре[0].КоличествоДт;
					ИнвентарьВЭксплуатации.Удалить(СтрокиПоПереоцениваемойНоменклатуре[0]);
					СтрокиПоПереоцениваемойНоменклатуре.Удалить(0);
				Иначе
					СтрокиПоПереоцениваемойНоменклатуре[0].КоличествоДт = СтрокиПоПереоцениваемойНоменклатуре[0].КоличествоДт - РазницаКоличеств;
					РазницаКоличеств = 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Распределяем сумму, списанную с Кт 10 на Дт МЦ.
		Если СуммаМЦПоДокументу <> СебестоимостьНоменклатуры.СуммаПоДокументу Тогда
			
			РаспределяемаяСумма = СебестоимостьНоменклатуры.СуммаПоДокументу - СуммаМЦПоДокументу;
			ПереоцениваемыеКоличества = Новый Массив;
			Для каждого ПереоцениваемаяНоменклатура Из СтрокиПоПереоцениваемойНоменклатуре Цикл
				ПереоцениваемыеКоличества.Добавить(ПереоцениваемаяНоменклатура.КоличествоДт);
			КонецЦикла;
			
			ФактическаяСебестоимость =
				ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, ПереоцениваемыеКоличества);
			Если ФактическаяСебестоимость = Неопределено Тогда
				ФактическаяСебестоимость = Новый Массив(ПереоцениваемыеКоличества.Количество());
			КонецЕсли;
			
			Инд = 0;
			Для каждого ПереоцениваемаяНоменклатура Из СтрокиПоПереоцениваемойНоменклатуре Цикл
				
				Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСуммПроводок);
				Корректировка.Сумма = ФактическаяСебестоимость[Инд];
				Инд = Инд + 1;
				
				АналитикаДт = НоваяСтруктураПолейПроводки(ПереоцениваемаяНоменклатура, "Дт");
				
				ОписаниеПроводки.СчетДт      = ПереоцениваемаяНоменклатура.СчетДт;
				ОписаниеПроводки.АналитикаДт = АналитикаДт;
				ОписаниеПроводки.АналитикаКт = НоваяСтруктураПолейПроводки();
				ОписаниеПроводки.Суммы       = Корректировка;
				ОписаниеПроводки.Содержание  = ТекстКорректировки;
				
				ДобавитьПроводку(ПроводкиПередачаИнвентаря, ОписаниеПроводки);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Удаляем использованные строки.
		Для каждого ПереоцениваемаяНоменклатура Из СтрокиПоПереоцениваемойНоменклатуре Цикл
			ИнвентарьВЭксплуатации.Удалить(ПереоцениваемаяНоменклатура);
		КонецЦикла;
		СтрокиПоПереоцениваемойНоменклатуре.Очистить();
		ЕстьНоменклатураДляПереоценки = (ИнвентарьВЭксплуатации.Количество() > 0);
		
	КонецЦикла;
	
	// Свернем проводки и добавим их в общую коллекцию
	СвернутьТаблицуПроводок(ПроводкиПередачаИнвентаря);
	Для Каждого Проводка Из ПроводкиПередачаИнвентаря Цикл
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСуммПроводок) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Проводка);
	КонецЦикла;
	
	// Рассчитаем корректировки - расход со счета МЦ.04
	// Вычислим суммы Кт МЦ.04 по номенклатуре, которая в текущем месяце как передавалась в эксплуатацию, так и списывалась.
	
	Запрос.УстановитьПараметр("ИзмененияСтоимости",
		ПроводкиПередачаИнвентаря.Скопировать(, "СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,ПодразделениеДт, Сумма"));
	ПроводкиПередачаИнвентаря = Неопределено;
	
	// Запрос получает данные для расчёта себестоимости номенклатуры в движениях Кт МЦ.04, которая и передавалась,
	// и списывалась из эксплуатации в текущем месяце (возможно, лишь частично).
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентарьВЭксплуатации.СубконтоДт1 КАК СубконтоДт1,
	|	ИнвентарьВЭксплуатации.СубконтоДт2 КАК СубконтоДт2,
	|	ИнвентарьВЭксплуатации.СубконтоДт3 КАК СубконтоДт3
	|ПОМЕСТИТЬ ИнвентарьВЭксплуатацииОтбор
	|ИЗ
	|	ИнвентарьВЭксплуатации КАК ИнвентарьВЭксплуатации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИнвентарьВЭксплуатации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияСтоимости.СчетДт КАК СчетДт,
	|	ИзмененияСтоимости.СубконтоДт1 КАК СубконтоДт1,
	|	ИзмененияСтоимости.СубконтоДт2 КАК СубконтоДт2,
	|	ИзмененияСтоимости.СубконтоДт3 КАК СубконтоДт3,
	|	ИзмененияСтоимости.ПодразделениеДт КАК ПодразделениеДт,
	|	ИзмененияСтоимости.Сумма КАК Сумма
	|ПОМЕСТИТЬ ИзмененияСтоимости
	|ИЗ
	|	&ИзмененияСтоимости КАК ИзмененияСтоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписанияДляКорректировки.СчетКт КАК СчетКт,
	|	ВТ_СписанияДляКорректировки.СубконтоКт1 КАК СубконтоКт1,
	|	ВТ_СписанияДляКорректировки.СубконтоКт2 КАК СубконтоКт2,
	|	ВТ_СписанияДляКорректировки.СубконтоКт3 КАК СубконтоКт3,
	|	ВТ_СписанияДляКорректировки.ПодразделениеКт КАК ПодразделениеКт,
	|	СУММА(ВТ_СписанияДляКорректировки.КоличествоСписано) КАК КоличествоСписано,
	|	СУММА(ВТ_СписанияДляКорректировки.СуммаСписано) КАК СуммаСписано,
	|	СУММА(ВТ_СписанияДляКорректировки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВТ_СписанияДляКорректировки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет КАК СчетКт,
	|		ХозрасчетныйОстатки.Субконто1 КАК СубконтоКт1,
	|		ХозрасчетныйОстатки.Субконто2 КАК СубконтоКт2,
	|		ХозрасчетныйОстатки.Субконто3 КАК СубконтоКт3,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК ПодразделениеКт,
	|		0 КАК КоличествоСписано,
	|		0 КАК СуммаСписано,
	|		ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстаток,
	|		ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоМесяца,
	|				Счет В (&СчетМЦ04),
	|				,
	|				Организация = &Организация
	|					И (Субконто1, Субконто2, Субконто3) В
	|						(ВЫБРАТЬ
	|							ИнвентарьВЭксплуатации.СубконтоДт1,
	|							ИнвентарьВЭксплуатации.СубконтоДт2,
	|							ИнвентарьВЭксплуатации.СубконтоДт3
	|						ИЗ
	|							ИнвентарьВЭксплуатацииОтбор КАК ИнвентарьВЭксплуатации)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		ХозрасчетныйОбороты.Субконто1,
	|		ХозрасчетныйОбороты.Субконто2,
	|		ХозрасчетныйОбороты.Субконто3,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|		ХозрасчетныйОбороты.КоличествоОборотКт,
	|		ХозрасчетныйОбороты.СуммаОборотКт,
	|		ХозрасчетныйОбороты.КоличествоОборотДт,
	|		ХозрасчетныйОбороты.СуммаОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				Период,
	|				Счет В (&СчетМЦ04),
	|				,
	|				Организация = &Организация
	|					И (Субконто1, Субконто2, Субконто3) В
	|						(ВЫБРАТЬ
	|							ИнвентарьВЭксплуатации.СубконтоДт1,
	|							ИнвентарьВЭксплуатации.СубконтоДт2,
	|							ИнвентарьВЭксплуатации.СубконтоДт3
	|						ИЗ
	|							ИнвентарьВЭксплуатацииОтбор КАК ИнвентарьВЭксплуатации),
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзмененияСтоимости.СчетДт,
	|		ИзмененияСтоимости.СубконтоДт1,
	|		ИзмененияСтоимости.СубконтоДт2,
	|		ИзмененияСтоимости.СубконтоДт3,
	|		ЕСТЬNULL(ИзмененияСтоимости.ПодразделениеДт, &ПустоеПодразделение),
	|		0,
	|		0,
	|		0,
	|		ИзмененияСтоимости.Сумма
	|	ИЗ
	|		ИзмененияСтоимости КАК ИзмененияСтоимости) КАК ВТ_СписанияДляКорректировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписанияДляКорректировки.СчетКт,
	|	ВТ_СписанияДляКорректировки.ПодразделениеКт,
	|	ВТ_СписанияДляКорректировки.СубконтоКт1,
	|	ВТ_СписанияДляКорректировки.СубконтоКт2,
	|	ВТ_СписанияДляКорректировки.СубконтоКт3
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_СписанияДляКорректировки.КоличествоОстаток) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИзмененияСтоимости";
	
	Результат = Запрос.Выполнить();
	СебестоимостьНоменклатуры = Результат.Выбрать();
	
	ОписаниеПроводки = НовыйОписаниеПроводки();
	ТекстКорректировки = СодержаниеПроводки(Ложь, НСтр("ru = 'Корректировка списания инвентаря'"));
	
	Пока СебестоимостьНоменклатуры.Следующий() Цикл
		
		СуммаКорректировки = Окр(СебестоимостьНоменклатуры.СуммаОстаток / СебестоимостьНоменклатуры.КоличествоОстаток
			* СебестоимостьНоменклатуры.КоличествоСписано, 2) - СебестоимостьНоменклатуры.СуммаСписано;
		Если СуммаКорректировки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСуммПроводок);
		Корректировка.Сумма = СуммаКорректировки;
		
		АналитикаКт = НоваяСтруктураПолейПроводки(СебестоимостьНоменклатуры, "Кт");
		
		ОписаниеПроводки.СчетКт      = СебестоимостьНоменклатуры.СчетКт;
		ОписаниеПроводки.АналитикаКт = АналитикаКт;
		ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки();
		ОписаниеПроводки.Суммы       = Корректировка;
		ОписаниеПроводки.Содержание  = ТекстКорректировки;
		
		ДобавитьПроводку(Проводки, ОписаниеПроводки);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Протоколирование // Протоколирование хода расчета

Функция НовыйПротокол(ОписаниеСумм, ВариантыСтруктурыЗатрат)
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	// Протокол используется для заполнения справок-расчетов
	Протокол = Новый Структура;
	Протокол.Вставить("ПравилаРаспределения", ПравилаРаспределенияРасходов.НовыеПравилаРаспределения());
	
	// Суммарная оценка запасов - включает начальное сальдо и сумму всех поступлений
	Протокол.Вставить("ОценкаЗапасов", Новый ТаблицаЗначений);
	Протокол.ОценкаЗапасов.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.ОценкаЗапасов.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.ОценкаЗапасов, ОписаниеСумм);
	
	// Движения из Расходов в Запасы
	Протокол.Вставить("СебестоимостьВыпущеннойПродукции", Новый ТаблицаЗначений);
	Протокол.СебестоимостьВыпущеннойПродукции.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.СебестоимостьВыпущеннойПродукции.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.СебестоимостьВыпущеннойПродукции, ОписаниеСумм);
	
	// Сальдо на счетах затрат после формирования проводок
	Протокол.Вставить("СальдоПослеРасчета", Новый ТаблицаЗначений);
	Протокол.СальдоПослеРасчета.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.СальдоПослеРасчета.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.СальдоПослеРасчета, ОписаниеСумм);
	
	// Ключи вершин
	Протокол.Вставить("КлючиВершин", Новый ТаблицаЗначений);
	Протокол.КлючиВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.КлючиВершин.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.КлючиВершин.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Протокол.КлючиВершин.Колонки.Добавить("Субконто1",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Субконто2",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Субконто3",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Номенклатура",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Протокол.КлючиВершин.Колонки.Добавить("КорСчет",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.КлючиВершин.Индексы.Добавить("Идентификатор");
	
	// Ключи элементов структуры затрат
	Протокол.Вставить("КлючиСтруктурыЗатрат", Новый Соответствие);
	Для Каждого Вариант Из ВариантыСтруктурыЗатрат Цикл
		Протокол.КлючиСтруктурыЗатрат.Вставить(Вариант.Имя, СтруктураЗатрат.НовыйОписаниеКлючей(Вариант));
	КонецЦикла;
	
	// Калькуляция себестоимости продукции, включая те случаи, когда в проводки не записывается номенклатура.
	Протокол.Вставить("КалькуляцияСебестоимости", Новый ТаблицаЗначений);
	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"НезавершенноеПроизводство",
		Новый ОписаниеТипов("Булево"));
 	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"СчетВыпуска",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));// Cчет выпуска, на котором сгруппированы затраты
	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"НоменклатурнаяГруппа",
		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"Продукция",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого ОписаниеКолонки Из СтруктураЗатрат.СоставКлючаКалькуляцииСебестоимости() Цикл
 		Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
			ОписаниеКолонки.Ключ,
			ОписаниеКолонки.Значение);
	КонецЦикла;
	
	Протокол.КалькуляцияСебестоимости.Колонки.Добавить(
		"КоличествоМатериала",
		Метаданные.РегистрыСведений.РасчетКалькуляцииСебестоимости.Ресурсы.КоличествоМатериала.Тип);
	
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.КалькуляцияСебестоимости, ОписаниеСумм);
	
	// Распределение косвенных расходов на счетах прямых расходов (20, 23) между наименованиями оказанных услуг
	Протокол.Вставить("РаспределениеНаУслуги", Новый ТаблицаЗначений);
	
 	Протокол.РаспределениеНаУслуги.Колонки.Добавить("СчетВыпуска",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));// Cчет выпуска, на котором сгруппированы затраты
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("Подразделение",        БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("Продукция",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("КонфликтВидБазыРаспределения", Новый ОписаниеТипов("Булево"));
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("ВидБазыРаспределения",         Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	Протокол.РаспределениеНаУслуги.Колонки.Добавить("БазаРаспределения",            Метаданные.РегистрыСведений.РасчетСебестоимостиПродукции.Ресурсы.БазаРаспределения.Тип);
	
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.РаспределениеНаУслуги, ОписаниеСумм);
	Протокол.РаспределениеНаУслуги.Индексы.Добавить(РегистрыСведений.РасчетСебестоимостиПродукции.КлючАналитикиВыпускаПродукции());
	
	// Расходы, списанные из контура учета затрат, но не являющиеся выпуском
	Протокол.Вставить("СправкаРасчетСписанияКосвенныхРасходов", Новый ТаблицаЗначений);
 	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СчетУчета",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
 	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));// Из статьи затрат
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатрат",   ТипСумма); // Всего до списания
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратНУ", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратПР", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратВР", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННП",      ТипСумма); // По видам деятельности на основной системе учета (облагаемым налогом на прибыль)
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННПНУ",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННППР",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННПВР",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННП",    ТипСумма); // По видам деятельности не на основной системе учета (не облагаемым налогом на прибыль)
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННПНУ",  ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННППР",  ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННПВР",  ТипСумма);
	
	Возврат Протокол;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(ДополнениеИмени = "")
	
	ИмяСобытия = НСтр("ru = 'РегламентныеОперации'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если ПустаяСтрока(ДополнениеИмени) Тогда
		Возврат ИмяСобытия;
	Иначе
		Возврат ИмяСобытия + "." + ДополнениеИмени;
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьЭтап(Этап, Ссылка)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		Этап);
	
КонецПроцедуры

Процедура ЗаписатьГрафЗатратДляОтладки(Затраты, Ссылка)
	
	// Записывает xml-представление обезличенных данных, над которыми могут быть выполнены алгоритмы оценки затрат.
	// Эти данные могут быть полезны для оптимизации производительности расчета.
	
	Если Не ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
		
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(Запись, Затраты, НазначениеТипаXML.Явное);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации("Отладка.Затраты"),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		Запись.Закрыть());
		
КонецПроцедуры

Процедура ЗаписатьОписаниеГрафаДляОтладки(Затраты, Протокол, Ссылка)
	
	// Записывает представление данных о затратах на языке Dot.
	// Эти данные могут быть полезны для настройки распределения затрат.
	
	Если Не ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации("Отладка.ПредставлениеЗатрат"),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		ОписаниеГрафа(Затраты, Протокол.ПравилаРаспределения));
		
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации("Отладка.ПравилаРаспределения"),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		СериализоватьПравилаРаспределения(Протокол.ПравилаРаспределения));
	
КонецПроцедуры

Функция СериализоватьПравилаРаспределения(ПравилаРаспределения)
	
	ПравилаСоответствие = Новый Соответствие;
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		ПравилаСоответствие.Вставить(XMLСтрока(ПравилаРаспределения.Индекс(Правило)), Правило.Имя);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ПравилаСоответствие);
	
КонецФункции

#КонецОбласти

#Область СправкиРасчеты // Составление справок-расчетов

Процедура СоздатьСальдоПослеРасчета(МенеджерВременныхТаблиц, Протокол)
	
	// Данные протокола поместим во временную таблицу 
	// и преобразуем их к удобному для дальнейшей обработки виду:
	// - заполним аналитику учета затрат (в протоколе - только номер вершины)
	// - уточним суммы НУ и ПР для расходов, не учитываемых в целях налогообложения.
	// Уточнять суммы НУ и ПР нужно, так как в конфигурации принято соглашение:
	// не учитываемые расходы никогда не отражаются по виду учета "НУ",
	// могут отражаться по виду учета "ПР". 
	// См. также
	// - ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете в модуле набора записей регистра Хозрасчетный
	// - правило распределения расходов ДобавитьПравилоРасходыНеУчитываемыеВЦеляхНалогообложения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Протокол", Протокол.СальдоПослеРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Протокол.Идентификатор КАК Идентификатор,
	|	Протокол.Сумма КАК Сумма,
	|	Протокол.СуммаНУ КАК СуммаНУ,
	|	Протокол.СуммаПР КАК СуммаПР,
	|	Протокол.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Протокол
	|ИЗ
	|	&Протокол КАК Протокол
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сальдо.Идентификатор КАК Идентификатор,
	|	СУММА(Сальдо.Сумма) КАК Сумма,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Сальдо.СуммаПР) КАК СуммаПР,
	|	СУММА(Сальдо.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоПослеРасчета
	|ИЗ
	|	ВТ_Протокол КАК Сальдо
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Идентификатор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сальдо.Сумма) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаНУ) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаПР) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сальдо.Идентификатор КАК Идентификатор,
	|	Ключи.Счет КАК Счет,
	|	Ключи.Подразделение КАК Подразделение,
	|	Ключи.Субконто1 КАК Субконто1,
	|	Ключи.Субконто2 КАК Субконто2,
	|	Ключи.Субконто3 КАК Субконто3,
	|	Сальдо.Сумма КАК Сумма,
	|	Сальдо.СуммаНУ КАК СуммаНУ,
	|	Сальдо.СуммаПР КАК СуммаПР,
	|	Сальдо.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоПослеРасчетаАналитика
	|ИЗ
	|	ВТ_СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК Ключи
	|		ПО Сальдо.Идентификатор = Ключи.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Протокол
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоПослеРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатратНеУчитываемые
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет КАК Счет,
	|	СальдоПослеРасчета.Подразделение КАК Подразделение,
	|	СальдоПослеРасчета.Субконто1 КАК Субконто1,
	|	СальдоПослеРасчета.Субконто2 КАК Субконто2,
	|	СальдоПослеРасчета.Субконто3 КАК Субконто3
	|ПОМЕСТИТЬ ВТ_НеучитываемыеРасходы
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоЗатрат.Счет
	|			И (СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто1 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоЗатрат.Счет
	|			И (СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто2 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоЗатрат.Счет
	|			И (СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто3 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатратНеУчитываемые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СальдоПослеРасчета.Идентификатор КАК Идентификатор,
	|	СальдоПослеРасчета.Счет КАК Счет,
	|	СальдоПослеРасчета.Подразделение КАК Подразделение,
	|	СальдоПослеРасчета.Субконто1 КАК Субконто1,
	|	СальдоПослеРасчета.Субконто2 КАК Субконто2,
	|	СальдоПослеРасчета.Субконто3 КАК Субконто3,
	|	СУММА(СальдоПослеРасчета.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА НеучитываемыеРасходы.Счет ЕСТЬ NULL
	|				ТОГДА СальдоПослеРасчета.СуммаНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНУ,
	|	СУММА(ВЫБОР
	|			КОГДА НеучитываемыеРасходы.Счет ЕСТЬ NULL
	|				ТОГДА СальдоПослеРасчета.СуммаПР
	|			ИНАЧЕ СальдоПослеРасчета.СуммаНУ + СальдоПослеРасчета.СуммаПР
	|		КОНЕЦ) КАК СуммаПР,
	|	СУММА(СальдоПослеРасчета.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ СальдоПослеРасчета
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеучитываемыеРасходы КАК НеучитываемыеРасходы
	|		ПО СальдоПослеРасчета.Счет = НеучитываемыеРасходы.Счет
	|			И СальдоПослеРасчета.Подразделение = НеучитываемыеРасходы.Подразделение
	|			И СальдоПослеРасчета.Субконто1 = НеучитываемыеРасходы.Субконто1
	|			И СальдоПослеРасчета.Субконто2 = НеучитываемыеРасходы.Субконто2
	|			И СальдоПослеРасчета.Субконто3 = НеучитываемыеРасходы.Субконто3
	|
	|СГРУППИРОВАТЬ ПО
	|	СальдоПослеРасчета.Идентификатор,
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоПослеРасчетаАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеучитываемыеРасходы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УничтожитьСальдоПослеРасчета(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ СальдоПослеРасчета";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПодготовитьСправкаРасчетПорядкаПеределов(Затраты, МенеджерВременныхТаблиц)
	
	// Выведем порядок переделов в виде, привычном для пользователей прошлых версий
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Вершины", Затраты.Вершины);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.НомерПередела КАК НомерПередела
	|ПОМЕСТИТЬ ВТ_НомераПеределов
	|ИЗ
	|	&Вершины КАК Вершины
	|ГДЕ
	|	Вершины.РазделУчета = ""Расходы""
	|	И Вершины.НомерПередела > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(НомераПеределов.НомерПередела) КАК НомерПередела
	|ПОМЕСТИТЬ ВТ_НомераПеределовАналитика
	|ИЗ
	|	ВТ_НомераПеределов КАК НомераПеределов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|			ПО Расходы.Счет = КалькуляционныеСчета.Счет
	|		ПО НомераПеределов.Идентификатор = Расходы.Идентификатор
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	Расходы.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПередела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераПеределов.НомерПередела КАК НомерПередела,
	|	НомераПеределов.Счет КАК Счет,
	|	НомераПеределов.Подразделение КАК Подразделение,
	|	НомераПеределов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	ВТ_НомераПеределовАналитика КАК НомераПеределов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПередела,
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|ИТОГИ ПО
	|	НомерПередела";
	
	ДвиженияРасчетПорядкаПеределов = Новый ТаблицаЗначений;
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("НомерПередела");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("Счет");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("Подразделение");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("НоменклатурнаяГруппа");
	
	ВыборкаПеределов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерПередела = 1; // Пользователю показываем натуральные числа
	Пока ВыборкаПеределов.Следующий() Цикл
		
		Выборка = ВыборкаПеределов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДвиженияРасчетПорядкаПеределов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.НомерПередела = НомерПередела;
		КонецЦикла;
		
		НомерПередела = НомерПередела + 1;
		
	КонецЦикла;
	
	// Уберем за собой
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_НомераПеределов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НомераПеределовАналитика";
	Запрос.Выполнить();
	
	Возврат ДвиженияРасчетПорядкаПеределов;
	
	
КонецФункции

Процедура ПодготовитьСправкаРасчетКалькуляцияСебестоимости(Протокол, Затраты, МенеджерВременныхТаблиц, Период)
	
	// Справка уже заполнена данными о внешних движения по фактической стоимости.
	// Дополним ее данными о внутренних движениях по фактической стоимости.
	// Обеспечим заполнение минимального набора полей, характеризующих затраты.
	
	Если Затраты.КешПараметровРасчета.РассчитыватьКалькуляцию Тогда
		ВариантСтруктурыЗатрат    = ВариантСтруктурыЗатратКалькуляцияСебестоимости(Затраты.ВариантыСтруктурыЗатрат);
		ОписаниеКлючейКалькуляции = Протокол.КлючиСтруктурыЗатрат[ВариантСтруктурыЗатрат.Имя];
	Иначе
		ВариантСтруктурыЗатрат    = Неопределено;
		ОписаниеКлючейКалькуляции = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Группировка результата выполняется непосредственно перед записью
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СебестоимостьВыпуска.Источник КАК Источник,
	|	СебестоимостьВыпуска.Приемник КАК Приемник,
	|	СебестоимостьВыпуска.СчетКт КАК СчетВыпуска,
	|	СебестоимостьВыпуска.ПодразделениеКт КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СебестоимостьВыпуска.СубконтоКт1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СебестоимостьВыпуска.СубконтоКт2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА СебестоимостьВыпуска.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	СебестоимостьВыпуска.НоменклатураДт КАК Продукция,
	|	СебестоимостьВыпуска.Сумма КАК Сумма,
	|	СебестоимостьВыпуска.СуммаНУ КАК СуммаНУ,
	|	СебестоимостьВыпуска.СуммаПР КАК СуммаПР,
	|	СебестоимостьВыпуска.СуммаВР КАК СуммаВР
	|ИЗ
	|	ВнутренниеДвижения КАК СебестоимостьВыпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО СебестоимостьВыпуска.СчетКт = СубконтоЗатрат.Счет
	|ГДЕ
	|	СебестоимостьВыпуска.Выпуск
	|	И (СебестоимостьВыпуска.Сумма <> 0
	|			ИЛИ СебестоимостьВыпуска.СуммаНУ <> 0
	|			ИЛИ СебестоимостьВыпуска.СуммаПР <> 0
	|			ИЛИ СебестоимостьВыпуска.СуммаВР <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Протокол.КалькуляцияСебестоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ВариантСтруктурыЗатрат = Неопределено Или ОписаниеКлючейКалькуляции = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Источник,Приемник", Выборка.Источник, Выборка.Приемник);
		Ребра = Затраты.Ребра.НайтиСтроки(Отбор); // должно быть ровно одно ребро
		
		Для Каждого Ребро Из Ребра Цикл
			
			ДетализироватьКалькуляцияСебестоимостиСтруктуройЗатрат(
				НоваяСтрока,
				Ребро,
				ОписаниеКлючейКалькуляции,
				ВариантСтруктурыЗатрат);
				
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополним справку данными о НЗП.
	// Отберем среди вершин сальдо после расчета те вершины, что относятся к прямым расходам,
	// и представим их в виде аналитики расходов (Счет, Подразделение, НоменклатурнаяГруппа)
	// Результат запишем в протокол
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сальдо.Идентификатор КАК Идентификатор,
	|	Сальдо.Счет КАК СчетВыпуска,
	|	Сальдо.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Сальдо.Субконто1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Сальдо.Субконто2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Сальдо.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	Сальдо.Сумма КАК Сумма,
	|	Сальдо.СуммаНУ КАК СуммаНУ,
	|	Сальдо.СуммаПР КАК СуммаПР,
	|	Сальдо.СуммаВР КАК СуммаВР
	|ИЗ
	|	СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО Сальдо.Счет = КалькуляционныеСчета.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Сальдо.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	(Сальдо.Сумма <> 0
	|			ИЛИ Сальдо.СуммаНУ <> 0
	|			ИЛИ Сальдо.СуммаПР <> 0
	|			ИЛИ Сальдо.СуммаВР <> 0)";

	Отбор = Новый Структура("Идентификатор");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Протокол.КалькуляцияСебестоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.НезавершенноеПроизводство = Истина;
		
		Если ВариантСтруктурыЗатрат = Неопределено Или ОписаниеКлючейКалькуляции = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Идентификатор = Выборка.Идентификатор;
		Для Каждого ОписаниеВершины Из Протокол.СальдоПослеРасчета.НайтиСтроки(Отбор) Цикл
			
			ДетализироватьКалькуляцияСебестоимостиСтруктуройЗатрат(
				НоваяСтрока,
				ОписаниеВершины,
				ОписаниеКлючейКалькуляции,
				ВариантСтруктурыЗатрат);
				
		КонецЦикла;
		
	КонецЦикла;
	
	// Обеспечим заполнение минимального набора полей, характеризующих затраты.
	ПериодЗатратПоУмолчанию  = НачалоМесяца(Период);
	ЭлементЗатратПоУмолчанию = Перечисления.ЭлементыЗатрат.ПрочиеЗатраты;
	Для Каждого Запись Из Протокол.КалькуляцияСебестоимости Цикл
		
		Если Не ЗначениеЗаполнено(Запись.ПериодЗатрат) Тогда
			Запись.ПериодЗатрат = ПериодЗатратПоУмолчанию;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Запись.СчетРасходов) Тогда
			Запись.СчетРасходов = Запись.СчетВыпуска;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Запись.ЭлементЗатрат) Тогда
			Запись.ЭлементЗатрат = ЭлементЗатратПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры			

Функция СправкаРасчетСебестоимостиПродукции(Протокол, МенеджерВременныхТаблиц, ОписаниеСумм)
	
	Записи = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетСебестоимостиПродукции);
	Записи.Колонки.Добавить("КонфликтВидБазыРаспределения", Новый ОписаниеТипов("Булево")); // используется в ходе заполнения
	
	ИменаСумм = КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм);
	
	// Сгруппированные данные об общей себестоимости выпуска
	// дополним данными о распределении косвенных расходов между наименованиями продукции.
	
	// 1. Возьмем из калькуляции сгруппированные данные о выпуске (без НЗП).
	КлючАналитикиВыпускаПродукции = РегистрыСведений.РасчетСебестоимостиПродукции.КлючАналитикиВыпускаПродукции();
	
	Выпуск = Протокол.КалькуляцияСебестоимости.Скопировать(
		Новый Структура("НезавершенноеПроизводство", Ложь),
		КлючАналитикиВыпускаПродукции + ", " + ИменаСумм);
		
	Выпуск.Свернуть(КлючАналитикиВыпускаПродукции, ИменаСумм);
	
	Для Каждого Запись Из Выпуск Цикл
		ЗаполнитьЗначенияСвойств(Записи.Добавить(), Запись);
	КонецЦикла;
	
	Записи.Индексы.Добавить(КлючАналитикиВыпускаПродукции);
	
	// 2. Дополним данными о распределении косвенных расходов
	КешРаспределениеНаПродукцию = Неопределено; // кеш для оптимизации производительности ПрименитьРаспределениеНаПродукцию()
	
	// 2.1. Внешние движения
	// Данные о распределении косвенных расходов уже получены в части внешних движений - см. Протокол.РаспределениеНаУслуги.
	// Применим их.
	Для Каждого Распределение Из Протокол.РаспределениеНаУслуги Цикл
		ПрименитьРаспределениеНаПродукцию(Записи, Распределение, КешРаспределениеНаПродукцию);
	КонецЦикла;
	
	// 2.2. Внутренние движения
	// Их нужно сначала получить.
	
	// Распределение между наименованиями продукции может выполняться
	// - либо непосредственно при выпуске (например, Дт 43 Кт 20 <пустая продукция>)
	// - либо до выпуска, при этом остальная аналитика выпуска не должна измениться
	//   (например, Дт 20 <заполнена продукция> Кт 20 <пустая продукция>).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// Набор полей запроса должен соответствовать Протокол.РаспределениеНаУслуги
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Распределение.СчетКт КАК СчетВыпуска,
	|	Распределение.ПодразделениеКт КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	Распределение.НоменклатураДт КАК Продукция,
	|	МАКСИМУМ(Распределение.МетодРаспределения) КАК ВидБазыРаспределения,
	|	МАКСИМУМ(Распределение.МетодРаспределения) <> МИНИМУМ(Распределение.МетодРаспределения) КАК КонфликтВидБазыРаспределения,
	|	СУММА(Распределение.Вес) КАК БазаРаспределения,
	|	СУММА(Распределение.Сумма) КАК Сумма,
	|	СУММА(Распределение.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Распределение.СуммаПР) КАК СуммаПР,
	|	СУММА(Распределение.СуммаВР) КАК СуммаВР
	|ИЗ
	|	ВнутренниеДвижения КАК Распределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО Распределение.СчетКт = КалькуляционныеСчета.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Распределение.СчетКт = СубконтоЗатрат.Счет
	|ГДЕ
	|	(Распределение.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|			ИЛИ Распределение.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Выпуск))
	|	И Распределение.МетодРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|	И Распределение.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Распределение.НоменклатураДт <> Распределение.ПродукцияКт
	|	И (Распределение.Выпуск
	|			ИЛИ Распределение.СчетДт = Распределение.СчетКт
	|				И Распределение.ПодразделениеДт = Распределение.ПодразделениеКт
	|				И ВЫБОР
	|					КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|						ТОГДА Распределение.СубконтоДт1 = Распределение.СубконтоКт1
	|					КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|						ТОГДА Распределение.СубконтоДт2 = Распределение.СубконтоКт2
	|					КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|						ТОГДА Распределение.СубконтоДт3 = Распределение.СубконтоКт3
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Распределение.СчетКт,
	|	Распределение.ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт1
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт2
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|			ТОГДА Распределение.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	Распределение.НоменклатураДт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрименитьРаспределениеНаПродукцию(Записи, Выборка, КешРаспределениеНаПродукцию);
	КонецЦикла;
	
	Возврат Записи;
	
КонецФункции

Процедура ПрименитьРаспределениеНаПродукцию(СправкаРасчет, РаспределениеКосвенныхРасходов, Отбор)
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура(
			РегистрыСведений.РасчетСебестоимостиПродукции.КлючАналитикиВыпускаПродукции());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, РаспределениеКосвенныхРасходов);
	
	СтрокиВыпуск = СправкаРасчет.НайтиСтроки(Отбор); // должно быть не более одной строки
	Для Каждого Выпуск Из СтрокиВыпуск Цикл
		
		Выпуск.КосвенныеРасходы   = Выпуск.КосвенныеРасходы   + РаспределениеКосвенныхРасходов.Сумма;
		Выпуск.КосвенныеРасходыНУ = Выпуск.КосвенныеРасходыНУ + РаспределениеКосвенныхРасходов.СуммаНУ;
		Выпуск.КосвенныеРасходыВР = Выпуск.КосвенныеРасходыВР + РаспределениеКосвенныхРасходов.СуммаВР;
		Выпуск.КосвенныеРасходыПР = Выпуск.КосвенныеРасходыПР + РаспределениеКосвенныхРасходов.СуммаПР;
		
		Если Выпуск.КонфликтВидБазыРаспределения Тогда
			Продолжить;
		КонецЕсли;
		Если РаспределениеКосвенныхРасходов.КонфликтВидБазыРаспределения
			Или Не ЗначениеЗаполнено(РаспределениеКосвенныхРасходов.ВидБазыРаспределения)
			Или (ЗначениеЗаполнено(Выпуск.ВидБазыРаспределения)
				И Выпуск.ВидБазыРаспределения <> РаспределениеКосвенныхРасходов.ВидБазыРаспределения) Тогда
			Выпуск.КонфликтВидБазыРаспределения = Истина;
			Выпуск.ВидБазыРаспределения = Неопределено;
			Выпуск.БазаРаспределения    = 0;
		Иначе
			Выпуск.ВидБазыРаспределения = РаспределениеКосвенныхРасходов.ВидБазыРаспределения;
			Выпуск.БазаРаспределения    = РаспределениеКосвенныхРасходов.БазаРаспределения
				+ Выпуск.БазаРаспределения;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСправкаРасчетРаспределенияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц)
	
	// Получим данные о распределении косвенных расходов на расходы -
	// примерно так, как в ДобавитьПроводкиВнутренниеДвижения()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Распределение.ПравилоРаспределения КАК ПравилоРаспределения,
	|	Распределение.Источник КАК Источник,
	|	Распределение.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Распределение.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатратКт.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Распределение.СубконтоКт1
	|				КОГДА СубконтоЗатратКт.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Распределение.СубконтоКт2
	|				КОГДА СубконтоЗатратКт.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Распределение.СубконтоКт3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатратКт,
	|	Распределение.Приемник КАК Приемник,
	|	ВЫБОР
	|		КОГДА РасходыДт.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕНВД,
	|	Распределение.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Распределение.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатратДт.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Распределение.СубконтоДт1
	|				КОГДА СубконтоЗатратДт.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Распределение.СубконтоДт2
	|				КОГДА СубконтоЗатратДт.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Распределение.СубконтоДт3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппаДт,
	|	Распределение.Сумма КАК Сумма,
	|	Распределение.СуммаНУ КАК СуммаНУ,
	|	Распределение.СуммаПР КАК СуммаПР,
	|	Распределение.СуммаВР КАК СуммаВР,
	|	Распределение.Вес КАК База,
	|	ВЫБОР
	|		КОГДА РасходыКт.НалоговыйУчет = ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяБазаРаспределенияНУ
	|ПОМЕСТИТЬ ВТ_РезультатРаспределенияКосвенныхРасходов
	|ИЗ
	|	ВнутренниеДвижения КАК Распределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходовКт
	|		ПО Распределение.СчетКт = СчетаКосвенныхРасходовКт.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК РасходыДт
	|		ПО Распределение.Приемник = РасходыДт.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК РасходыКт
	|		ПО Распределение.Источник = РасходыКт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратДт
	|		ПО Распределение.СчетДт = СубконтоЗатратДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатратКт
	|		ПО Распределение.СчетКт = СубконтоЗатратКт.Счет
	|ГДЕ
	|	Распределение.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПравилоРаспределения";
	
	Запрос.Выполнить();
	
	// Подготовим информацию о правилах распределения, которые привели к такому результату
	РелевантныеПравилаРаспределения = Новый ТаблицаЗначений;
	РелевантныеПравилаРаспределения.Колонки.Добавить("Имя",          ПравилаРаспределенияРасходов.ТипИмени());
	РелевантныеПравилаРаспределения.Колонки.Добавить("ВидОперации",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасчетаКосвенныхРасходов"));
	РелевантныеПравилаРаспределения.Колонки.Добавить("МетодРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распределение.ПравилоРаспределения КАК Имя
	|ИЗ
	|	ВТ_РезультатРаспределенияКосвенныхРасходов КАК Распределение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Найдем в протоколе это правило
		Правило = Протокол.ПравилаРаспределения.Найти(Выборка.Имя, "Имя");
		Если Правило = Неопределено Тогда
			// Где-то нарушилась целостность
			Продолжить;
		КонецЕсли;
		
		// Заполним сведения о правиле распределения
		НоваяСтрока = РелевантныеПравилаРаспределения.Добавить();
		НоваяСтрока.Имя          = Правило.Имя;
		НоваяСтрока.МетодРасчета = Правило.МетодРасчета;
		Если Правило.ПоляИсточника.Свойство("Подразделение") Тогда
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
		Иначе
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщехозяйственныхРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
	// Скомпонуем результат в вид, удобный для записи в регистр РасчетРаспределенияКосвенныхРасходов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", РелевантныеПравилаРаспределения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Имя КАК Имя,
	|	Правила.ВидОперации КАК ВидОперации,
	|	Правила.МетодРасчета КАК МетодРасчета
	|ПОМЕСТИТЬ ВТ_ПравилаРаспределения
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаРаспределения.ПравилоРаспределения КАК ПравилоРаспределения,
	|	БазаРаспределения.ЕНВД КАК ЕНВД,
	|	БазаРаспределения.СчетДт КАК СчетДт,
	|	БазаРаспределения.ПодразделениеДт КАК ПодразделениеДт,
	|	БазаРаспределения.НоменклатурнаяГруппаДт КАК НоменклатурнаяГруппаДт,
	|	МАКСИМУМ(БазаРаспределения.База) КАК База,
	|	МАКСИМУМ(БазаРаспределения.ОтличаетсяБазаРаспределенияНУ) КАК ОтличаетсяБазаРаспределенияНУ
	|ПОМЕСТИТЬ ВТ_БазаРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Распределение.ПравилоРаспределения КАК ПравилоРаспределения,
	|		Распределение.Источник КАК Источник,
	|		Распределение.ЕНВД КАК ЕНВД,
	|		Распределение.СчетДт КАК СчетДт,
	|		Распределение.ПодразделениеДт КАК ПодразделениеДт,
	|		Распределение.НоменклатурнаяГруппаДт КАК НоменклатурнаяГруппаДт,
	|		СУММА(Распределение.База) КАК База,
	|		МАКСИМУМ(Распределение.ОтличаетсяБазаРаспределенияНУ) КАК ОтличаетсяБазаРаспределенияНУ
	|	ИЗ
	|		ВТ_РезультатРаспределенияКосвенныхРасходов КАК Распределение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Распределение.ПравилоРаспределения,
	|		Распределение.Источник,
	|		Распределение.ЕНВД,
	|		Распределение.СчетДт,
	|		Распределение.ПодразделениеДт,
	|		Распределение.НоменклатурнаяГруппаДт) КАК БазаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	БазаРаспределения.ПравилоРаспределения,
	|	БазаРаспределения.ЕНВД,
	|	БазаРаспределения.СчетДт,
	|	БазаРаспределения.ПодразделениеДт,
	|	БазаРаспределения.НоменклатурнаяГруппаДт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПравилоРаспределения,
	|	ЕНВД,
	|	СчетДт,
	|	ПодразделениеДт,
	|	НоменклатурнаяГруппаДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распределение.ПравилоРаспределения КАК ПравилоРаспределения,
	|	Распределение.СчетКт КАК СчетКт,
	|	Распределение.ПодразделениеКт КАК ПодразделениеКт,
	|	Распределение.СтатьяЗатратКт КАК СтатьяЗатратКт,
	|	Распределение.ЕНВД КАК ЕНВД,
	|	Распределение.СчетДт КАК СчетДт,
	|	Распределение.ПодразделениеДт КАК ПодразделениеДт,
	|	Распределение.НоменклатурнаяГруппаДт КАК НоменклатурнаяГруппаДт,
	|	СУММА(Распределение.Сумма) КАК Сумма,
	|	СУММА(Распределение.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Распределение.СуммаПР) КАК СуммаПР,
	|	СУММА(Распределение.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СуммыРаспределения
	|ИЗ
	|	ВТ_РезультатРаспределенияКосвенныхРасходов КАК Распределение
	|
	|СГРУППИРОВАТЬ ПО
	|	Распределение.ПравилоРаспределения,
	|	Распределение.СчетКт,
	|	Распределение.ПодразделениеКт,
	|	Распределение.СтатьяЗатратКт,
	|	Распределение.ЕНВД,
	|	Распределение.СчетДт,
	|	Распределение.ПодразделениеДт,
	|	Распределение.НоменклатурнаяГруппаДт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПравилоРаспределения,
	|	ЕНВД,
	|	СчетДт,
	|	ПодразделениеДт,
	|	НоменклатурнаяГруппаДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаРаспределения.ВидОперации КАК ВидОперации,
	|	ПравилаРаспределения.МетодРасчета КАК БазаРаспределения,
	|	Распределение.СчетКт КАК СчетУчета,
	|	Распределение.ПодразделениеКт КАК Подразделение,
	|	Распределение.СтатьяЗатратКт КАК СтатьяЗатрат,
	|	Распределение.ЕНВД КАК ЕНВД,
	|	Распределение.СчетДт КАК СчетРаспределения,
	|	Распределение.ПодразделениеДт КАК ПодразделениеРаспределения,
	|	Распределение.НоменклатурнаяГруппаДт КАК НоменклатурнаяГруппаРаспределения,
	|	СУММА(Распределение.Сумма) КАК Сумма,
	|	СУММА(Распределение.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Распределение.СуммаПР) КАК СуммаПР,
	|	СУММА(Распределение.СуммаВР) КАК СуммаВР,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(БазаРаспределения.ОтличаетсяБазаРаспределенияНУ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА БазаРаспределения.ОтличаетсяБазаРаспределенияНУ
	|							ТОГДА 0
	|						ИНАЧЕ БазаРаспределения.База
	|					КОНЕЦ)
	|		ИНАЧЕ СУММА(БазаРаспределения.База)
	|	КОНЕЦ КАК СуммаБазы,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(БазаРаспределения.ОтличаетсяБазаРаспределенияНУ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА БазаРаспределения.ОтличаетсяБазаРаспределенияНУ
	|							ТОГДА БазаРаспределения.База
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ СУММА(БазаРаспределения.База)
	|	КОНЕЦ КАК СуммаБазыНУ,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(БазаРаспределения.ОтличаетсяБазаРаспределенияНУ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА БазаРаспределения.ОтличаетсяБазаРаспределенияНУ
	|							ТОГДА 0
	|						ИНАЧЕ БазаРаспределения.База
	|					КОНЕЦ)
	|		ИНАЧЕ СУММА(БазаРаспределения.База)
	|	КОНЕЦ КАК СуммаБазыПР,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(БазаРаспределения.ОтличаетсяБазаРаспределенияНУ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА БазаРаспределения.ОтличаетсяБазаРаспределенияНУ
	|							ТОГДА 0
	|						ИНАЧЕ БазаРаспределения.База
	|					КОНЕЦ)
	|		ИНАЧЕ СУММА(БазаРаспределения.База)
	|	КОНЕЦ КАК СуммаБазыВР
	|ИЗ
	|	ВТ_СуммыРаспределения КАК Распределение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПравилаРаспределения КАК ПравилаРаспределения
	|		ПО Распределение.ПравилоРаспределения = ПравилаРаспределения.Имя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БазаРаспределения КАК БазаРаспределения
	|		ПО Распределение.ПравилоРаспределения = БазаРаспределения.ПравилоРаспределения
	|			И Распределение.ЕНВД = БазаРаспределения.ЕНВД
	|			И Распределение.СчетДт = БазаРаспределения.СчетДт
	|			И Распределение.ПодразделениеДт = БазаРаспределения.ПодразделениеДт
	|			И Распределение.НоменклатурнаяГруппаДт = БазаРаспределения.НоменклатурнаяГруппаДт
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаРаспределения.ВидОперации,
	|	ПравилаРаспределения.МетодРасчета,
	|	Распределение.СчетКт,
	|	Распределение.ПодразделениеКт,
	|	Распределение.СтатьяЗатратКт,
	|	Распределение.ЕНВД,
	|	Распределение.СчетДт,
	|	Распределение.ПодразделениеДт,
	|	Распределение.НоменклатурнаяГруппаДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕНВД,
	|	ВидОперации,
	|	БазаРаспределения,
	|	СчетУчета,
	|	Подразделение,
	|	СтатьяЗатрат,
	|	СчетРаспределения,
	|	ПодразделениеРаспределения,
	|	НоменклатурнаяГруппаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РезультатРаспределенияКосвенныхРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_БазаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СуммыРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПравилаРаспределения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПодготовитьСправкаРасчетСписанияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц, Период, Организация)
	
	// Дополним справку данными о сальдо косвенных расходов.
	// Сальдо может быть ненулевым, если были нормируемые расходы либо так настроено распределение.
	
	// Отберем среди вершин те, что относятся к косвенным расходам,
	// и представим их в виде аналитики расходов (Счет, Подразделение, СтатьяЗатрат)
	// Результат запишем в протокол
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сальдо.Счет КАК СчетУчета,
	|	Сальдо.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)) КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	СУММА(Сальдо.Сумма) КАК СуммаЗатрат,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаЗатратНУ,
	|	СУММА(Сальдо.СуммаПР) КАК СуммаЗатратПР,
	|	СУММА(Сальдо.СуммаВР) КАК СуммаЗатратВР
	|ИЗ
	|	СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|		ПО Сальдо.Счет = СчетаКосвенныхРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Сальдо.Счет = СубконтоЗатрат.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Счет,
	|	Сальдо.Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Сальдо.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сальдо.Сумма) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаНУ) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаПР) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаВР) <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Протокол.СправкаРасчетСписанияКосвенныхРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Если организация не применяет спец.режимы, или применяет только спец.режимы,
	// то все статьи затрат учитываются либо по основному виду деятельности, либо по спец.режимам,
	// не зависимо от значения, указанного в статье затрат.
	// Поэтому и в расчете списания косвенных расходов необходимо указывать в поле ВидДеятельностиДляНалоговогоУчетаЗатрат 
	// только доступные виды деятельности
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период) Тогда
		Протокол.СправкаРасчетСписанияКосвенныхРасходов.ЗаполнитьЗначения(
					Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения,
					"ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ИначеЕсли УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Протокол.СправкаРасчетСписанияКосвенныхРасходов.ЗаполнитьЗначения(
					Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения,
					"ВидДеятельностиДляНалоговогоУчетаЗатрат");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьРасходыНеУдалосьРаспределить(Результат, МенеджерВременныхТаблиц, Протокол)
	
	// Здесь подразумеваются только счета косвенных расходов, распределяемые по данным явной настройки.
	// В то же время, настройки по умолчанию могут применяться для счетов косвенных расходов, не указанных в регистре.
	
	// Подготовим информацию о правилах распределения, которые привели к такому результату
	РелевантныеПравилаРаспределения = Новый ТаблицаЗначений;
	РелевантныеПравилаРаспределения.Колонки.Добавить("Имя",           ПравилаРаспределенияРасходов.ТипИмени());
	РелевантныеПравилаРаспределения.Колонки.Добавить("НастроеноЯвно", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеУдалосьРаспределить.Правило КАК Правило
	|ИЗ
	|	НеУдалосьРаспределить КАК НеУдалосьРаспределить";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Найдем в протоколе это правило
		Правило = Протокол.ПравилаРаспределения.Найти(Выборка.Правило, "Имя");
		Если Правило = Неопределено Тогда
			// Где-то нарушилась целостность
			Продолжить;
		КонецЕсли;
		
		// Речь только о тех расходах, которые распределяются 
		// "методами распределения косвенных расходов"
		Если Не ЗначениеЗаполнено(Правило.МетодРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполним сведения о правиле распределения
		ОтборПравила = РелевантныеПравилаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(ОтборПравила, Правило);
		ОтборПравила.НастроеноЯвно = ЗначениеЗаполнено(Правило.Настройка);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПравилаРаспределения", РелевантныеПравилаРаспределения);
	// ВТ_НеУдалосьРаспределитьАналитика используется, чтобы организовать упорядочивание.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаРаспределения.Имя КАК Имя,
	|	ПравилаРаспределения.НастроеноЯвно КАК НастроеноЯвно
	|ПОМЕСТИТЬ ВТ_ПравилаРаспределения
	|ИЗ
	|	&ПравилаРаспределения КАК ПравилаРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаРаспределения.Имя КАК ПравилоРаспределения,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.КорСчет КАК ПланСчетов.Хозрасчетный) КАК КорСчет,
	|	СУММА(ОценкаВершин.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_НеУдалосьРаспределитьАналитика
	|ИЗ
	|	НеУдалосьРаспределить КАК НеУдалосьРаспределить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО НеУдалосьРаспределить.Идентификатор = ОценкаВершин.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК ИдентификаторыВершин
	|		ПО НеУдалосьРаспределить.Идентификатор = ИдентификаторыВершин.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПравилаРаспределения КАК ПравилаРаспределения
	|		ПО НеУдалосьРаспределить.Правило = ПравилаРаспределения.Имя
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО (ИдентификаторыВершин.Счет = СубконтоЗатрат.Счет)
	|ГДЕ
	|	ОценкаВершин.Сумма > 0
	|	И (ПравилаРаспределения.НастроеноЯвно
	|			ИЛИ ИдентификаторыВершин.Счет В
	|				(ВЫБРАТЬ
	|					СчетаКосвенныхРасходов.Счет
	|				ИЗ
	|					СчетаКосвенныхРасходов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаРаспределения.Имя,
	|	ИдентификаторыВершин.Счет,
	|	ИдентификаторыВершин.Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ИдентификаторыВершин.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА ИдентификаторыВершин.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)),
	|	ИдентификаторыВершин.КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеУдалосьРаспределить.ПравилоРаспределения КАК ПравилоРаспределения,
	|	НеУдалосьРаспределить.Счет КАК Счет,
	|	НеУдалосьРаспределить.Подразделение КАК Подразделение,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НеУдалосьРаспределить.СтатьяЗатрат КАК СтатьяЗатрат,
	|	НеУдалосьРаспределить.КорСчет КАК КорСчет,
	|	НеУдалосьРаспределить.Счет.Представление КАК СчетПредставление,
	|	НеУдалосьРаспределить.Подразделение.Представление КАК ПодразделениеПредставление,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа.Представление КАК НоменклатурнаяГруппаПредставление,
	|	НеУдалосьРаспределить.СтатьяЗатрат.Представление КАК СтатьяЗатратПредставление,
	|	НеУдалосьРаспределить.КорСчет.Представление КАК КорСчетПредставление,
	|	НеУдалосьРаспределить.Сумма КАК Сумма
	|ИЗ
	|	ВТ_НеУдалосьРаспределитьАналитика КАК НеУдалосьРаспределить
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеУдалосьРаспределить.Счет.Порядок,
	|	НеУдалосьРаспределить.ПравилоРаспределения,
	|	НеУдалосьРаспределить.Подразделение.РеквизитДопУпорядочивания,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа.Наименование,
	|	НеУдалосьРаспределить.СтатьяЗатрат.Наименование,
	|	НеУдалосьРаспределить.КорСчет
	|ИТОГИ ПО
	|	Счет,
	|	ПравилоРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПравилаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеУдалосьРаспределитьАналитика";
	
	РасходыНеУдалосьРаспределить = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Дополним список ошибок сведениями об использованной базе распределения
	РасходыНеУдалосьРаспределить.Колонки.Добавить("Настройка",             Протокол.ПравилаРаспределения.Колонки.Настройка.ТипЗначения);
	РасходыНеУдалосьРаспределить.Колонки.Добавить("МетодРасчета",          Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	РасходыНеУдалосьРаспределить.Колонки.Добавить("ВРазрезеПодразделений", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ГруппаОшибокСчет Из РасходыНеУдалосьРаспределить.Строки Цикл
		Для Каждого ГруппаОшибокПравилоРаспределения Из ГруппаОшибокСчет.Строки Цикл
		
			// Найдем в протоколе это правило
			Правило = Протокол.ПравилаРаспределения.Найти(ГруппаОшибокПравилоРаспределения.ПравилоРаспределения, "Имя");
			Если Правило = Неопределено Тогда
				// Где-то нарушилась целостность
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ГруппаОшибокПравилоРаспределения, Правило, "Настройка, МетодРасчета");
			Если Правило.ПоляИсточника.Свойство("Подразделение")
				И ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям")
				Тогда
				ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если РасходыНеУдалосьРаспределить.Строки.Количество() > 0 Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("РасходыНеУдалосьРаспределить",  РасходыНеУдалосьРаспределить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьВыпускБезЗатрат(Результат, МенеджерВременныхТаблиц, Протокол)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнутренниеДвижения.Источник КАК Идентификатор,
	|	ВнутренниеДвижения.СчетКт КАК Счет,
	|	ВнутренниеДвижения.ПодразделениеКт КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнутренниеДвижения.СубконтоКт1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнутренниеДвижения.СубконтоКт2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнутренниеДвижения.СубконтоКт3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ВнутренниеДвижения.НоменклатураДт КАК Продукция,
	|	ВнутренниеДвижения.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Выпуск
	|ИЗ
	|	ВнутренниеДвижения КАК ВнутренниеДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО ВнутренниеДвижения.СчетКт = СубконтоЗатрат.Счет
	|ГДЕ
	|	ВнутренниеДвижения.Выпуск
	|	И ВнутренниеДвижения.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник,
	|	ВнешниеДвижения.СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнешниеДвижения.СубконтоКт1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнешниеДвижения.СубконтоКт2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА ВнешниеДвижения.СубконтоКт3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|	ВнешниеДвижения.НоменклатураДт,
	|	ЕСТЬNULL(ОценкаВершин.Сумма, 0)
	|ИЗ
	|	ВнешниеДвижения КАК ВнешниеДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО ВнешниеДвижения.СчетКт = СубконтоЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО ВнешниеДвижения.Источник = ОценкаВершин.Идентификатор
	|ГДЕ
	|	ВнешниеДвижения.Выпуск
	|	И ВнешниеДвижения.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВнешниеДвижения.Количество <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.Счет КАК Счет,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.Продукция КАК Продукция
	|ПОМЕСТИТЬ ВТ_ГруппыВыпускБезЗатрат
	|ИЗ
	|	ВТ_Выпуск КАК Выпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.Счет,
	|	Выпуск.Подразделение,
	|	Выпуск.НоменклатурнаяГруппа,
	|	Выпуск.Продукция
	|
	|ИМЕЮЩИЕ
	|	СУММА(Выпуск.Сумма) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускБезЗатрат.Продукция КАК Продукция
	|ИЗ
	|	ВТ_ГруппыВыпускБезЗатрат КАК ВыпускБезЗатрат";
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		// Уберем за собой
		Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТ_Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ГруппыВыпускБезЗатрат";
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выпуск.Идентификатор КАК Идентификатор,
	|	Выпуск.Счет КАК Счет,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.Продукция КАК Продукция
	|ПОМЕСТИТЬ ВТ_ВыпускБезЗатрат
	|ИЗ
	|	ВТ_Выпуск КАК Выпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГруппыВыпускБезЗатрат КАК Отбор
	|		ПО Выпуск.Счет = Отбор.Счет
	|			И Выпуск.Подразделение = Отбор.Подразделение
	|			И Выпуск.НоменклатурнаяГруппа = Отбор.НоменклатурнаяГруппа
	|			И Выпуск.Продукция = Отбор.Продукция
	|ГДЕ
	|	Выпуск.Сумма = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ГруппыВыпускБезЗатрат";
	
	Запрос.Выполнить();
	
	НевернаяОценкаНезавершенногоПроизводства = НевернаяОценкаНезавершенногоПроизводства(МенеджерВременныхТаблиц, Протокол);
	
	Если ЗначениеЗаполнено(НевернаяОценкаНезавершенногоПроизводства) Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("НевернаяОценкаНезавершенногоПроизводства",  НевернаяОценкаНезавершенногоПроизводства);
	КонецЕсли;
	
	// Другие случаи выпуска без затрат
	Запрос.УстановитьПараметр(
		"НевернаяОценкаНезавершенногоПроизводства",
		НевернаяОценкаНезавершенногоПроизводства.ВыгрузитьКолонку("Идентификатор"));
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Подразделения.Ссылка КАК Подразделение,
	|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
	|	Номенклатура.Ссылка КАК Продукция,
	|	Номенклатура.Услуга КАК ЭтоУслуга,
	|	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Ссылка) КАК СчетПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Подразделения.Ссылка) КАК ПодразделениеПредставление,
	|	ПРЕДСТАВЛЕНИЕ(НоменклатурныеГруппы.Ссылка) КАК НоменклатурнаяГруппаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Номенклатура.Ссылка) КАК ПродукцияПредставление
	|ИЗ
	|	ВТ_ВыпускБезЗатрат КАК ВыпускБезЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВыпускБезЗатрат.Продукция = Номенклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВыпускБезЗатрат.Счет = Хозрасчетный.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО ВыпускБезЗатрат.Подразделение = Подразделения.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|		ПО ВыпускБезЗатрат.НоменклатурнаяГруппа = НоменклатурныеГруппы.Ссылка
	|ГДЕ
	|	НЕ ВыпускБезЗатрат.Идентификатор В (&НевернаяОценкаНезавершенногоПроизводства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок,
	|	Подразделения.РеквизитДопУпорядочивания,
	|	НоменклатурныеГруппы.Наименование,
	|	Номенклатура.Наименование
	|ИТОГИ ПО
	|	ЭтоУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выпуск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыпускБезЗатрат";
	
	ВыпускБезЗатрат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыпускБезЗатрат.Строки.Количество() > 0 Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("ВыпускБезЗатрат",  ВыпускБезЗатрат);
	КонецЕсли;
	
КонецПроцедуры

Функция НевернаяОценкаНезавершенногоПроизводства(МенеджерВременныхТаблиц, Протокол)
	
	// В частном случае затраты не могут быть распределены на выпуск из-за того, что неверно выполнена оценка НЗП.
	// Оценка НЗП не верна, если ее сумма, указанная в документе Инвентаризация НЗП,
	// выше, чем сумма затрат.
	// Здесь оперируем только суммой бухгалтерского учета, так как ошибки учета выявляются по ней.
	
	НевернаяОценкаНезавершенногоПроизводства = Новый ТаблицаЗначений;
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Идентификатор",             УчетЗатрат.ТипИдентификатораВершины());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("ЦелевоеСальдо",             УчетЗатрат.ТипИдентификатораВершины());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Счет",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Подразделение",             БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("НоменклатурнаяГруппа",      Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Затраты",                   БухгалтерскийУчетКлиентСервер.ТипСумма());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("НезавершенноеПроизводство", БухгалтерскийУчетКлиентСервер.ТипСумма());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Продукция",                 Новый ОписаниеТипов("Массив")); // Массив номенклатуры
	
	// Найдем пересечения вершин нулевого выпуска и "затронутых" инвентаризацией НЗП
	// Поскольку вероятно, что именно они являются причиной проблемы, то сразу включим их в результирующую коллекцию
	// Если вероятность не оправдается, то удалим позже
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦелевоеСальдо.ИдентификаторГруппы КАК ЦелевоеСальдо,
	|	Выпуск.Идентификатор КАК Идентификатор,
	|	ВЫРАЗИТЬ(Выпуск.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	ВЫРАЗИТЬ(Выпуск.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(Выпуск.НоменклатурнаяГруппа КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
	|	ВЫРАЗИТЬ(Выпуск.Продукция КАК Справочник.Номенклатура) КАК Продукция
	|ПОМЕСТИТЬ ВТ_ВыпускБезЗатратНезавершенноеПроизводство
	|ИЗ
	|	ГруппыЦелевоеСальдо КАК ЦелевоеСальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыпускБезЗатрат КАК Выпуск
	|		ПО ЦелевоеСальдо.ИдентификаторВершины = Выпуск.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выпуск.Идентификатор КАК Идентификатор,
	|	Выпуск.ЦелевоеСальдо КАК ЦелевоеСальдо,
	|	Выпуск.Счет КАК Счет,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выпуск.Продукция КАК Продукция
	|ИЗ
	|	ВТ_ВыпускБезЗатратНезавершенноеПроизводство КАК Выпуск
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выпуск.Счет.Порядок,
	|	Выпуск.Подразделение.РеквизитДопУпорядочивания,
	|	Выпуск.НоменклатурнаяГруппа.Наименование,
	|	Выпуск.Идентификатор,
	|	Выпуск.Продукция.Наименование
	|ИТОГИ
	|	МАКСИМУМ(ЦелевоеСальдо),
	|	МАКСИМУМ(Счет),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(НоменклатурнаяГруппа)
	|ПО
	|	Идентификатор";
	
	ВыборкаВершиныВыпуска = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВершиныВыпуска.Следующий() Цикл
		
		Ошибка = НевернаяОценкаНезавершенногоПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(Ошибка, ВыборкаВершиныВыпуска);
		
		ВыборкаПродукция = ВыборкаВершиныВыпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПродукция.Следующий() Цикл
			Ошибка.Продукция.Добавить(ВыборкаПродукция.Продукция);
		КонецЦикла;
		
	КонецЦикла;
	
	// Определим суммы НЗП для групп, попавших под подозрение
	ГруппыЦелевоеСальдо = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		НевернаяОценкаНезавершенногоПроизводства.ВыгрузитьКолонку("ЦелевоеСальдо"));
	Запрос.УстановитьПараметр("ГруппыЦелевоеСальдо", ГруппыЦелевоеСальдо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыЦелевоеСальдо.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	СУММА(ЦелевоеСальдо.Сумма) КАК Сумма
	|ИЗ
	|	ЦелевоеСальдо КАК ЦелевоеСальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыЦелевоеСальдо КАК ГруппыЦелевоеСальдо
	|		ПО ЦелевоеСальдо.Идентификатор = ГруппыЦелевоеСальдо.ИдентификаторВершины
	|ГДЕ
	|	ЦелевоеСальдо.Идентификатор В(&ГруппыЦелевоеСальдо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыЦелевоеСальдо.ИдентификаторГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыпускБезЗатратНезавершенноеПроизводство";
	
	СуммыЦелевоеСальдо = Запрос.Выполнить().Выгрузить();
	СуммыЦелевоеСальдо.Индексы.Добавить("ИдентификаторГруппы");
	
	// Проверяем гипотезу, что отсутствие оценки выпуска действительно объясняется некорректно введенными данными об НЗП.
	// А именно, выполняются условия:
	// 1. до этой вершины дошла сумма
	//    (но она не включена в стоимость выпуска, потому что отнесена к НЗП)
	// 2. эта сумма не превышает величину НЗП
	//    (т.е. исключаем ситуацию, когда только часть затрат оставили в НЗП,
	//    а нулевая оценка выпуска вызвана какой-то другой причиной).
	//
	// Для определения суммы, дошедшей до вершины выпуска, используем СальдоПослеРасчета,
	// а не ОценкаВершин, потому что ОценкаВершин уже уменьшена на суммы,
	// указанные в документах инвентаризации
	
	КоличествоСтрок = НевернаяОценкаНезавершенногоПроизводства.Количество();
	Для НомерСКонца = 1 По КоличествоСтрок Цикл
		
		Индекс = КоличествоСтрок - НомерСКонца;
		Ошибка = НевернаяОценкаНезавершенногоПроизводства[Индекс];
		
		СтрокаПротокола = Протокол.СальдоПослеРасчета.Найти(Ошибка.Идентификатор, "Идентификатор");
		Если СтрокаПротокола <> Неопределено Тогда
			Ошибка.Затраты = СтрокаПротокола.Сумма;
		КонецЕсли;
		
		ЗаписьНЗП = СуммыЦелевоеСальдо.Найти(Ошибка.ЦелевоеСальдо, "ИдентификаторГруппы");
		Если ЗаписьНЗП <> Неопределено Тогда
			Ошибка.НезавершенноеПроизводство = ЗаписьНЗП.Сумма;
		КонецЕсли;
		
		Если Ошибка.Затраты > Ошибка.НезавершенноеПроизводство Тогда
			// Гипотеза не подтвердилась
			НевернаяОценкаНезавершенногоПроизводства.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НевернаяОценкаНезавершенногоПроизводства;
	
КонецФункции

Процедура СохранитьКлючиВершин(Протокол, МенеджерВременныхТаблиц)
	
	// Таблица ИдентификаторыВершин содержит как вершины из КлючиВершин,
	// так и дополнительные вершины, созданные в ходе распределения расходов.
	// В частном случае на такой дополнительной вершине могут быть собраны затраты,
	// оставшиеся на конец периода в незавершенном производстве.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ИЗ
	|	ИдентификаторыВершин КАК КлючиВершин";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Протокол.КлючиВершин.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОценкуЗапасов(Протокол, Затраты, ОписаниеСумм)
	
	ОтборЗапасы = Новый Структура("РазделУчета", "Запасы");
	Для Каждого ОписаниеВершины Из Затраты.Вершины.НайтиСтроки(ОтборЗапасы) Цикл
		
		Если КоллекцииСумм.Пустая(ОписаниеВершины, ОписаниеСумм) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Протокол.ОценкаЗапасов.Добавить();
		НоваяСтрока.Идентификатор = ОписаниеВершины.Идентификатор;
		КоллекцииСумм.Заполнить(НоваяСтрока, ОписаниеВершины, ОписаниеСумм);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьСебестоимостьВыпущеннойПродукции(Протокол, Затраты, ОписаниеСумм)
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		Если ОписаниеИсточника.РазделУчета <> "Расходы" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		Если ОписаниеПриемника.РазделУчета <> "Запасы" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Протокол.СебестоимостьВыпущеннойПродукции.Добавить();
		НоваяСтрока.Идентификатор = Ребро.Приемник;
		КоллекцииСумм.Заполнить(НоваяСтрока, Ребро, ОписаниеСумм);
		
	КонецЦикла;
	
КонецПроцедуры

// СуммарнаяЗапись - элемент коллекции Протокол.КалькуляцияСебестоимости
//                   Эту запись разобъем на детальные - поделим по статьям калькуляции.
//                   Суммарная запись может остаться в части сумм, для которых структура неизвестна.
Процедура ДетализироватьКалькуляцияСебестоимостиСтруктуройЗатрат(СуммарнаяЗапись, Суммы, ОписаниеКлючейКалькуляции, ВариантСтруктурыЗатрат)
	
	Если ОписаниеКлючейКалькуляции = Неопределено
		Или ВариантСтруктурыЗатрат = Неопределено
		Или Не ЗначениеЗаполнено(Суммы.СтатьиКалькуляции) Тогда // Может быть Неопределено, если данных о калькуляции нет
		Возврат;
	КонецЕсли;
	
	РасчетКалькуляцииСебестоимости = СуммарнаяЗапись.Владелец(); // Дополняемая коллекция
	
	// Добавим детальные строки
	Для Каждого ДетализацияЗатрат Из Суммы.СтатьиКалькуляции Цикл
		
		ОписаниеЭлементаЗатрат = ОписаниеКлючейКалькуляции.Найти(ДетализацияЗатрат.Идентификатор, "Идентификатор");
		Если ОписаниеЭлементаЗатрат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Не создаем тривиальные записи
		Если КоллекцииСумм.Пустая(ДетализацияЗатрат, ВариантСтруктурыЗатрат.ОписаниеСводныхСумм) 
			И ДетализацияЗатрат.КоличествоМатериала = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ДетальнаяЗапись = РасчетКалькуляцииСебестоимости.Добавить();
				
		ЗаполнитьЗначенияСвойств(ДетальнаяЗапись, СуммарнаяЗапись);// суммы будут перезаполнены далее
		ЗаполнитьЗначенияСвойств(ДетальнаяЗапись, ОписаниеЭлементаЗатрат, ВариантСтруктурыЗатрат.СоставКлючаСтрокой);
		
		ДетальнаяЗапись.КоличествоМатериала = ДетализацияЗатрат.КоличествоМатериала;
		КоллекцииСумм.Заполнить(ДетальнаяЗапись, ДетализацияЗатрат, ВариантСтруктурыЗатрат.ОписаниеСводныхСумм);
		
		// Скорректируем сводную строку
		КоллекцииСумм.Вычесть(СуммарнаяЗапись, ДетализацияЗатрат, ВариантСтруктурыЗатрат.ОписаниеСводныхСумм);
		
	КонецЦикла;
	
	// Удалим суммарную запись, если она стала тривиальной
	Если КоллекцииСумм.Пустая(СуммарнаяЗапись, ВариантСтруктурыЗатрат.ОписаниеСводныхСумм) 
		И СуммарнаяЗапись.КоличествоМатериала = 0 Тогда
		
		РасчетКалькуляцииСебестоимости.Удалить(СуммарнаяЗапись);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
