
#Область ПрограммныйИнтерфейс

// Пересчитывает количество из базовой единицы измерения номенклатуры в единицу измерения ВетИС.
//
Функция ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличествоВЕТИС = Неопределено;
	
	Результат = ИнтеграцияВЕТИСБПВызовСервера.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Единицы измерения номенклатуры не соотвествуют единицам ВЕТИС'");
	Иначе
		НовоеКоличествоВЕТИС = ?(Результат <> 0, Количество * Результат, Количество);
	КонецЕсли;
	
	Возврат НовоеКоличествоВЕТИС;
	
КонецФункции

// Пересчитывает количество из единицы измерения ВетИС в базовую единицу измерения номенклатуры.
//
Функция ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличество = Неопределено;
	
	Результат = ИнтеграцияВЕТИСБПВызовСервера.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Единицы измерения номенклатуры не соотвествуют единицам ВЕТИС'");
	Иначе
		НовоеКоличество = ?(Результат <> 0, КоличествоВЕТИС / Результат, КоличествоВЕТИС);
	КонецЕсли;
	
	Возврат НовоеКоличество;
	
КонецФункции


#КонецОбласти 
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет соответствие полей документов-оснований и исходящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствующего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствующего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприятию грузополучателя
//
Процедура ЗаполнитьСоответствиеПолейДокументовОснованийИИсходящейТранспортнойОперации(СоответствиеПолей) Экспорт
	
	СоответствиеПолей.Вставить("ВозвратТоваровПоставщику", Новый Соответствие);
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузоотправительПредприятие", "Склад");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузополучательПредприятие", "");
	
	СоответствиеПолей.Вставить("ПеремещениеТоваров", Новый Соответствие);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительПредприятие", "СкладОтправитель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", Неопределено);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательПредприятие", "СкладПолучатель");
	
	СоответствиеПолей.Вставить("РеализацияТоваровУслуг", Новый Соответствие);
	СоответствиеПолей["РеализацияТоваровУслуг"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["РеализацияТоваровУслуг"].Вставить("ГрузоотправительПредприятие", "Склад");
	СоответствиеПолей["РеализацияТоваровУслуг"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["РеализацияТоваровУслуг"].Вставить("ГрузополучательПредприятие", "");
	
КонецПроцедуры

// Заполняет соответствие полей документов-оснований и входящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствующего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствующего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприятию грузополучателя
//
Процедура ЗаполнитьСоответствиеПолейДокументовОснованийИВходящейТранспортнойОперации(СоответствиеПолей) Экспорт
	
	СоответствиеПолей.Вставить("ВозвратТоваровОтПокупателя", Новый Соответствие);
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузополучательПредприятие", "Склад");
	
	СоответствиеПолей.Вставить("ПоступлениеТоваровУслуг", Новый Соответствие);
	СоответствиеПолей["ПоступлениеТоваровУслуг"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ПоступлениеТоваровУслуг"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПоступлениеТоваровУслуг"].Вставить("ГрузополучательПредприятие", "Склад");
	
	СоответствиеПолей.Вставить("ПеремещениеТоваров", Новый Соответствие);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительПредприятие", "СкладОтправитель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", Неопределено);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательПредприятие", "СкладПолучатель");
	
КонецПроцедуры

// Заполняет соответствие полей документов-оснований и производственных операций
//
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "СборкаТоваров",
//  	а значением — соответствие со свойствами:
//  ** ХозяйствующийСубъект — Строка — имя поля документа, которое соответствует хозяйствующему субъекту
//  ** Предприятие — Строка — имя поля документа, которое соответствует предприятию хозяйствующего субъекта
//
Процедура ЗаполнитьСоответствиеПолейДокументовОснованийИПроизводственнойОперации(СоответствиеПолей) Экспорт
	
	СоответствиеПолей.Вставить("ОтчетПроизводстваЗаСмену", Новый Соответствие);
	СоответствиеПолей["ОтчетПроизводстваЗаСмену"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ОтчетПроизводстваЗаСмену"].Вставить("Предприятие", "Склад");
	
КонецПроцедуры

// Заполняет соответствие полей документов-оснований и инвентаризации продукции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "СписаниеНедостачТоваров",
//  	а значением — соответствие со свойствами:
//  ** ХозяйствующийСубъект — Строка — имя поля документа, которое соответствует хозяйствующему субъекту
//  ** Предприятие — Строка — имя поля документа, которое соответствует предприятию хозяйствующего субъекта
//
Процедура ЗаполнитьСоответствиеПолейДокументовОснованийИИнвентаризацииПродукции(СоответствиеПолей) Экспорт
	
	СоответствиеПолей.Вставить("СписаниеТоваров", Новый Соответствие);
	СоответствиеПолей["СписаниеТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["СписаниеТоваров"].Вставить("Предприятие", "Склад");
	
	СоответствиеПолей.Вставить("ОприходованиеТоваров", Новый Соответствие);
	СоответствиеПолей["ОприходованиеТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ОприходованиеТоваров"].Вставить("Предприятие", "Склад");
	
КонецПроцедуры

// Заполняет свойства (например, Видимость, Доступность итп) отдельных элементов формы документа 
//   'ПроизводственнаяОперацияВЕТИС' в зависимости от документа-основания.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеПроизводственнаяОперацияВЕТИС - Основание документа.
//   Свойства          - Структура                                              - Свойства элементов.
//
Процедура ЗаполнитьСвойстваЭлементовПроизводственнойТранзакцииПоДокументуОснованию(Свойства, ДокументОснование) Экспорт
	
	СвойстваПоУмолчанию = Новый Структура("Видимость, Доступность, ТолькоПросмотр", Ложь, Истина, Истина);
	
	ЗаполнитьЗначенияСвойств(Свойства, СвойстваПоУмолчанию);
	
КонецПроцедуры

// Заполняет признак необходимости заполнения реквизита 'ТорговыйОбъект' документа 'ПроизводственнаяОперацияВЕТИС'.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеПроизводственнаяОперацияВЕТИС - Основание документа.
//   Заполнять         - Булево                                                 - Необходимость заполнения.
//
Процедура ЗаполнятьТорговыйОбъектПоДокументуОснованию(ДокументОснование, Заполнять) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру, содержащую поля кэшируемых значений.
// 
// Параметры:
//   КэшированныеЗначения - (см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения) - результат.
//
Процедура ЗаполнитьСтруктуруКэшируемыеЗначения(КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает параметры формы подбора товаров.
//
// Параметры:
//	Форма					- УправляемаяФорма			- Форма, в которой вызывается команда открытия формы подбора товаров.
//	ПараметрыУказанияСерий	- Структура, Неопределено	- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	ПараметрыПодбора - Структура - Структура со свойствами:
//		* СкрыватьКнопкуЗапрашиватьКоличество		- Булево - Признак необходимости сокрытия кнопки указания количества.
//		* РежимПодбораБезКоличественныхПараметров	- Булево - Признак работы формы подбора товаров с выключенным режимом 
//																использования количественных параметров.
//		* Склад										- ОпределяемыйТип.ТорговыйОбъектВЕТИС - Склад, на котором осуществляется подбор товаров.
//		* ПараметрыУказанияСерий					- ПараметрыУказанияСерий - Состав полей определен в функции 
//																			НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ЗаполнитьПараметрыФормыПодбораТоваров(ПараметрыПодбора, Форма, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Пересчитывает количество из базовой единицы измерения номенклатуры в единицу измерения ВЕТИС.
//
Процедура ЗаполнитьКоличествоЕдиницВЕТИС(КоличествоВЕТИС, Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки) Экспорт
	
	Результат = ИнтеграцияВЕТИСБПВызовСервера.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Единицы измерения номенклатуры не соотвествуют единицам ВЕТИС'");
	Иначе
		КоличествоВЕТИС = ?(Результат <> 0, Количество * Результат, Количество);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество из единицы измерения ВЕТИС в базовую единицу измерения номенклатуры.
//
Процедура ЗаполнитьКоличествоЕдиницПоВЕТИС(Количество, КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	Результат = ИнтеграцияВЕТИСБПВызовСервера.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Единицы измерения номенклатуры не соотвествуют единицам ВЕТИС'");
	Иначе
		Количество = ?(Результат <> 0, КоличествоВЕТИС / Результат, КоличествоВЕТИС);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры оформления серии по данным строки (если использование условного оформления не возможно).
//
// Параметры:
//   ПараметрыОформленияСерии - Структура - поля, на основании которых можно оформить элемент формы.
//   ДанныеСтроки - Структура, ДанныеФормыЭлементКоллекции - данные, в которых содержится информация по оформлению серии.
//
Процедура ЗаполнитьПараметрыОформленияСерииПоДаннымСтроки(ПараметрыОформленияСерии, ДанныеСтроки) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
