
#Область ПрограммныйИнтерфейс

// Процедура готовит область факсимиле в печатных формах,
// которые сформированы на экране.
//
// Параметры:
//  ОбластьМакета      - ФормаКлиентскогоПриложения.
//  СведенияОДокументе - Строка таблицы значений, выборка из запроса.
//  ОбъектыПечати      - Список значений.
//  ПараметрыПечати    - Структура, дополнительные праметры печати
//						 хранит в частности адрес факсимиле во временном хранилище 
//
Процедура ДополнитьДокументПодписьюИПечатью(ОбластьМакета, СведенияОДокументе, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	КлючевыеДанные = Новый Структура("Документ, Организация,
			|Предприниматель, Руководитель, ГлавныйБухгалтер,
			|ОтветственныйЗаОформление, Исполнитель, Кладовщик,
			|ДоверенноеЛицо");
	
	// Заполняем по данным печатной формы
	Если ТипЗнч(СведенияОДокументе) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ЗаполнитьЗначенияСвойств(КлючевыеДанные, СведенияОДокументе);
		Колонки = СведенияОДокументе.Владелец().Колонки;
	ИначеЕсли ТипЗнч(СведенияОДокументе) = Тип("СтрокаТаблицыЗначений") Тогда
		Колонки = СведенияОДокументе.Владелец().Колонки;
		Если Колонки.Найти("ДанныеШапки") <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КлючевыеДанные, СведенияОДокументе.ДанныеШапки);
		Иначе
			ЗаполнитьЗначенияСвойств(КлючевыеДанные, СведенияОДокументе);
		КонецЕсли;
	Иначе
		УдалитьВсеОбластиФаксимиле(ОбластьМакета);
		Возврат;
	КонецЕсли;
	
	// Если не нашлось одноименных полей, ищем похожие
	Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Документ) Тогда
		Если Колонки.Найти("Ссылка") <> Неопределено Тогда
			КлючевыеДанные.Документ = СведенияОДокументе.Ссылка;
		Иначе
			УдалитьВсеОбластиФаксимиле(ОбластьМакета);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИсключаемыеТипыДокументов = ИсключаемыеТипыДокументов(ПараметрыПечати);
	Если ИсключаемыеТипыДокументов.Найти(ТипЗнч(КлючевыеДанные.Документ)) <> Неопределено Тогда
		
		ДанныеОбласти      = ОбъектыПечати.НайтиПоЗначению(КлючевыеДанные.Документ);
		ОбластьВладелец    = ДанныеОбласти.Представление;
		МассивИменПоказателей = МассивИменПоказателейФаксимиле();
		Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
			ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
		КонецЦикла;
		Возврат;
	Иначе
		// Организация не всегда хранится в реквизите Организация
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация) И Колонки.Найти("Поставщик") <> Неопределено Тогда
			КлючевыеДанные.Организация = СведенияОДокументе.Поставщик;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация) И Колонки.Найти("Грузоотправитель") <> Неопределено Тогда
			КлючевыеДанные.Организация = СведенияОДокументе.Грузоотправитель;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация) И Колонки.Найти("ДанныеШапки") <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация) И СведенияОДокументе.ДанныеШапки.Свойство("Поставщик") <> Неопределено Тогда
				КлючевыеДанные.Организация = СведенияОДокументе.ДанныеШапки.Поставщик;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация) И СведенияОДокументе.ДанныеШапки.Свойство("Грузоотправитель") <> Неопределено Тогда
				КлючевыеДанные.Организация = СведенияОДокументе.ДанныеШапки.Грузоотправитель;
			КонецЕсли;			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация)
			ИЛИ ТипЗнч(КлючевыеДанные.Организация) <> Тип("СправочникСсылка.Организации") Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьМакета);
			Возврат;
		КонецЕсли;
		
		// Ситуация, когда в документе подписанты явно не указаны
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Руководитель)
			ИЛИ НЕ ЗначениеЗаполнено(КлючевыеДанные.ГлавныйБухгалтер) Тогда
			
			ДатаДокумета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючевыеДанные.Документ, "Дата");
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(КлючевыеДанные.Организация, ДатаДокумета);
			
			Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Руководитель) Тогда
				КлючевыеДанные.Руководитель = Руководители.Руководитель;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КлючевыеДанные.ГлавныйБухгалтер) Тогда
				КлючевыеДанные.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Исполнитель) Тогда
			Если Колонки.Найти("ПредставительОрганизации") <> Неопределено Тогда
				КлючевыеДанные.Исполнитель = СведенияОДокументе.ПредставительОрганизации;
			Иначе
				КлючевыеДанные.Исполнитель = КлючевыеДанные.Руководитель;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Кладовщик) Тогда
			Если Колонки.Найти("ОтпускПроизвел") <> Неопределено Тогда
				КлючевыеДанные.Кладовщик = СведенияОДокументе.ОтпускПроизвел;
			КонецЕсли;
		КонецЕсли;
		
		// Предприниматель - он же руководитель
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Предприниматель) Тогда
			КлючевыеДанные.Предприниматель = КлючевыеДанные.Руководитель;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлючевыеДанные.ОтветственныйЗаОформление)
			И ЗначениеЗаполнено(КлючевыеДанные.Предприниматель)
			И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(КлючевыеДанные.Организация) Тогда
			КлючевыеДанные.ОтветственныйЗаОформление = КлючевыеДанные.Предприниматель;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(КлючевыеДанные.Документ);
	Если ДанныеОбласти = Неопределено Тогда
		УникальныеТипыДокументов = УникальныеТипыДокументов(ПараметрыПечати);
		ЗначениеРеквизитаОбъектаПечати = УникальныеТипыДокументов.Получить(ТипЗнч(КлючевыеДанные.Документ));
		Если ЗначениеРеквизитаОбъектаПечати <> Неопределено Тогда
			ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(СведенияОДокументе[ЗначениеРеквизитаОбъектаПечати]);
		КонецЕсли;
		Если ДанныеОбласти = Неопределено Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьМакета);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьВладелец    = ДанныеОбласти.Представление;
	ПозицияРазделителя = СтрНайти(ОбластьВладелец, ";", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		ОбластьВладелец = СокрЛП(Прав(ОбластьВладелец, СтрДлина(ОбластьВладелец) - ПозицияРазделителя));
		ДанныеОбласти.Представление = ОбластьВладелец;
	КонецЕсли;
	
	СоответствиеФаксимиле          = Новый Соответствие;
	МассивИменПоказателей          = Новый Массив;
	МассивУдаляемыхИменПоказателей = Новый Массив;
	ОрганизацияЮридическоеЛицо     = Истина;
	
	ПолучитьДанныеФаксимиле(СоответствиеФаксимиле,
		МассивИменПоказателей,
		МассивУдаляемыхИменПоказателей,
		ОрганизацияЮридическоеЛицо,
		КлючевыеДанные,
		ПараметрыПечати);
	
	// Удаляем заведомо лишние картинки из табличного документа
	Для Каждого ЗначениеПоказателя ИЗ МассивУдаляемыхИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
	КонецЦикла;
	
	// В некоторых случаях на форме есть взаимоисключающие реквизиты.
	// Например, подпись руководителя и подпись предпринимателя в счете-фактуре
	Если ОрганизацияЮридическоеЛицо Тогда
		ОчиститьОбластьФаксимиле(ОбластьМакета, "ФаксимилеПредприниматель");
	Иначе
		ОбластьФаксимиле = ОбластьМакета.Области.Найти("ФаксимилеПредприниматель");
		Если ОбластьФаксимиле <> Неопределено Тогда
			ОчиститьОбластьФаксимиле(ОбластьМакета, "ФаксимилеРуководитель");
		КонецЕсли;
	КонецЕсли;
	
	РасшифровкаФаксимилеМакета = Новый Структура();
	
	Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
		
		// Печать нельзя привязать к ответственному лицу
		Если СтрНайти(ЗначениеПоказателя, "ФаксимилеПечать") > 0
			ИЛИ СтрНайти(ЗначениеПоказателя, "ФаксимильнаяПечать") > 0 Тогда
			КлючСоответствия = "Организация";
		Иначе
			КлючСоответствия = СтрЗаменить(ЗначениеПоказателя, "Факсимиле", "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Накладная", "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Услуги",    "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Материалы", "");
		КонецЕсли;
		
		ОбработатьОбластьФаксимиле(РасшифровкаФаксимилеМакета,
			ОбластьВладелец,
			ОбластьМакета,
			ЗначениеПоказателя,
			КлючевыеДанные,
			КлючСоответствия,
			СоответствиеФаксимиле);
			
	КонецЦикла;
	
	// Измененный макет, не содержащий области факсимиле
	Если РасшифровкаФаксимилеМакета.Количество() = 0 Тогда
		УдалитьВсеОбластиФаксимиле(ОбластьМакета);
		Возврат;
	КонецЕсли;
	
	// Расшифровка в первой колонке последней строки
	АдресПараметровРасшифровки = ПоместитьВоВременноеХранилище(РасшифровкаФаксимилеМакета, Новый УникальныйИдентификатор);
	
	ОбластьРасшифровки = ОбластьМакета.Область("R" + Формат(ОбластьМакета.Области[ОбластьВладелец].Низ, "ЧГ=")
		 + "C1:R" + Формат(ОбластьМакета.Области[ОбластьВладелец].Низ, "ЧГ=") + "C1");
		
	ОбластьРасшифровки.Имя = "РасшифровкаФаксимилеМакета_" + ОбластьВладелец;
	ОбластьРасшифровки.Расшифровка = АдресПараметровРасшифровки;
	ОбластьРасшифровки.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	
КонецПроцедуры

// Возвращает текст гиперссылки для открытия формы ПечатьАртикулов обработки ПанелиАдминистрированияБП
//
// Возвращаемое значение
//  Строка - текст гиперссылки
//
Функция ГиперссылкаФормыНастройкиПечатиАртикулов() Экспорт
	
	Возврат "e1cib/data/Обработка.ПанельАдминистрированияБП.Форма.ПечатьАртикулов";
	
КонецФункции

#Область ДобавлениеФаксимиле

Процедура ПриПолученииПодписейИПечатей(СписокДокументов, ПодписиИПечати) Экспорт
	
	КомплектыПодписейИПечатей = Новый Соответствие;
	
	ДокументыПоТипам = ДокументыПоТипам(СписокДокументов);
	
	Для Каждого ДокументыПоТипу Из ДокументыПоТипам Цикл
		
		ТипДокумента = ДокументыПоТипу.Ключ;
		Если ВДокументеЕстьОрганизация(ТипДокумента) Тогда
			ОрганизацииВДокументах = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыПоТипу.Значение, "Организация");
			Для Каждого ОрганизацияВДокументе Из ОрганизацииВДокументах Цикл
				Документ = ОрганизацияВДокументе.Ключ;
				Организация = ОрганизацияВДокументе.Значение;
				КомплектПодписейИПечатей = КомплектыПодписейИПечатей[Организация];
				Если КомплектПодписейИПечатей = Неопределено Тогда
					КомплектПодписейИПечатей = Справочники.Организации.ПодписиИПечатиОрганизации(Организация, Документ.Дата);
					КомплектыПодписейИПечатей.Вставить(Организация, КомплектПодписейИПечатей);
				КонецЕсли;
				ПодписиИПечати.Вставить(Документ, КомплектПодписейИПечатей);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыПоТипам(СписокДокументов)
	
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ДокументыПоТипам[ТипДокумента] = Неопределено Тогда
			ДокументыПоТипам[ТипДокумента] = Новый Массив;
		КонецЕсли;
		ДокументыПоТипам[ТипДокумента].Добавить(Документ);
	КонецЦикла;
	
	Возврат ДокументыПоТипам;
	
КонецФункции

Функция ВДокументеЕстьОрганизация(ТипДокумента)
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	Возврат ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область ДобавлениеФаксимилеПриПечатиСтарое

// Возвращает настройки факсимиле в зависимости от имени макета.
// Если имя макета пустая строка, то возвращается общая настройка печати факсимиле.
//
// Параметры:
//  ИмяМакета	 - Строка - Имя макета, для которой нужно вернуть настройку.
//                          Может быть пустой строкой, тогда возвращается общая настройка без привязки к макету.
// 
// Возвращаемое значение:
//   - Структура - Настройка подписи и печати.
//
Функция НастройкиПодписиИПечати(ИмяМакета = "") Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ВыводитьФаксимиле", Ложь);
	Настройки.Вставить("ФаксимилеДоступноДляВывода", Истина);
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если НастройкиВыводаФаксимиле <> Неопределено
		И НастройкиВыводаФаксимиле.Свойство("ФаксимилеДоступноДляВывода") Тогда
		
		Настройки.ФаксимилеДоступноДляВывода = НастройкиВыводаФаксимиле.ФаксимилеДоступноДляВывода;
		Если Не Настройки.ФаксимилеДоступноДляВывода Тогда
			Возврат Настройки;
		КонецЕсли;
		
		ВыводитьФаксимиле = Неопределено;
		НастройкиВыводаФаксимиле.Свойство("ВыводитьФаксимиле" + ИмяМакета, ВыводитьФаксимиле);
		Если ВыводитьФаксимиле <> Неопределено Тогда
			Настройки.ВыводитьФаксимиле = ВыводитьФаксимиле;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Сохраняет настройки подписи и печати.
//
// Параметры:
//  ФаксимилеДоступноДляВывода	 - Булево - Признак, что факсимиле доступно для вывода.
//  ВыводитьФаксимиле			 - Булево, Неопределено - Признак, что нужно выводить факсимиле.
//                                 Если указано Неопределено, то признак вывода факсимиле не будет сохраняться.
//  ИмяМакета					 - Строка - Имя макета, для которого будет сохранена настройка. Если пустая строка - то будет сохранена только общая настройка.
//
Процедура СохранитьНастройкиПодписиИПечати(ФаксимилеДоступноДляВывода, ВыводитьФаксимиле, ИмяМакета = "") Экспорт
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если НастройкиВыводаФаксимиле = Неопределено Тогда
		НастройкиВыводаФаксимиле = Новый Структура;
	КонецЕсли;
	НастройкиВыводаФаксимиле.Вставить("ФаксимилеДоступноДляВывода", ФаксимилеДоступноДляВывода);
	
	Если ВыводитьФаксимиле <> Неопределено
		И ТипЗнч(ВыводитьФаксимиле) = Тип("Булево") Тогда
		
		// Общая настройка сохраняется всегда, даже если заполнено ИмяМакета.
		НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле", ВыводитьФаксимиле);
		Если ЗначениеЗаполнено(ИмяМакета) Тогда
			НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле" + ИмяМакета, ВыводитьФаксимиле);
		КонецЕсли;
		
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле", НастройкиВыводаФаксимиле);
	
КонецПроцедуры

// Процедура дополняет форму ПечатьДокументов элементами управления.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма) Экспорт
	
	СообщитьПроДополнительныеУсловияОтчетаКомитенту(Форма);

	ПроверитьУдалитьРекламуПодключенияДиректБанкаКСчетуИнтеграции(Форма);
	
	ДокументыДляПечати = ДокументыДляПечатиИзНастроек(Форма.НастройкиПечатныхФорм);
	
	Если ДокументыДляПечати.Количество() = 1 Тогда
		УдалитьИзЗаголовкаНеПолученныйНомерППИнтеграцияСБанком(Форма, ДокументыДляПечати[0]);
	КонецЕсли;
	
	// Определим - есть ли формы с факсимиле
	// Сначала определяем, документы ли выведены на печать или нет
	// Если на печати документы, то определяем, можно ли выводить факсимиле
	// и настраиваем форму для вывода факсимиле.
	Если ЕстьПечатныеФормыСПодписьюИПечатью(Форма) Тогда
		НастроитьПодписьИПечать(Форма, ДокументыДляПечати);
	КонецЕсли;
	
	СервисЭлектронныхТрудовыхКнижек.ПечатьДокументовПриСозданииНаСервере(Форма);
	
	ПерсонализированныеПредложенияСервисов.ПечатьДокументовПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Процедура дополняет обработчик закрытия формы ПечатьДокументов
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура СохранитьНастройкиПечатиПриЗакрытии(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ГруппаПодписьИПечатьБП") <> Неопределено
		И Форма.Элементы.ГруппаПодписьИПечатьБП.Видимость Тогда
		
		ВыводитьФаксимиле = Неопределено;
		ИмяМакета = "";
		Если НЕ Форма.Элементы.ГруппаПодписьИПечатьБП.ТолькоПросмотр Тогда
			
			ВыводитьФаксимиле = Форма.ПодписьИПечатьБП;
			
			Если Форма.Элементы.Найти("НастройкиПечатныхФорм") <> Неопределено Тогда
				ИмяМакета = ИмяМакетаНастройкиПечатныхФорм(Форма.НастройкиПечатныхФорм);
			КонецЕсли;
			
		КонецЕсли;
		
		СохранитьНастройкиПодписиИПечати(Истина, ВыводитьФаксимиле, ИмяМакета);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет факсимиле в печатные формы,
// которые сформированы на экране.
//
// Параметры:
//  Форма     - Управляемая форма.
//  Контекст  - Структура - коллекция параметров (описывает команду формы):
//   * ИмяКоманды    - Строка - имя команды;
//   * Представление - Строка - мпредставление команды;
//   * ИмяРеквизита  - Строка - имя реквизита формы;
//  Результат - Структура - возвращаемый результат работы.
//
Процедура ПечататьФаксимилеПриИзмененииНаСервере(Форма, Контекст, Результат) Экспорт
	
	// Сначала проверка настройки
	МассивДокументов = Новый Массив;
	Для НомерСтрокиПечатнойФормы = 1 ПО Форма.НастройкиПечатныхФорм.Количество() Цикл
		СписокДокументов = ПолучитьСписокДокументов(Форма.НастройкиПечатныхФорм[НомерСтрокиПечатнойФормы-1]);
		МассивДокументовВременный = СписокДокументов.ВыгрузитьЗначения();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, МассивДокументовВременный, Истина);
	КонецЦикла;
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	Для НомерСтрокиПечатнойФормы = 1 ПО Форма.НастройкиПечатныхФорм.Количество() Цикл
		
		СписокДокументов = ПолучитьСписокДокументов(Форма.НастройкиПечатныхФорм[НомерСтрокиПечатнойФормы-1]);
		Если СписокДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МожноВывестиФаксимиле(СписокДокументов[0].Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		УправлениеКартинкойФаксимиле(Форма["ПечатнаяФорма" + НомерСтрокиПечатнойФормы],
			МассивИменПоказателей,
			Форма.ПодписьИПечатьБП)
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет факсимиле в печатные формы,
// которые сформированы в фоне
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент - сформированная печатная форма;
//  Ссылка             - ДокументСсылка - документ, для которого формируется печатная форма.
//
Процедура ДобавитьФаксимилеВФоне(ТабличныйДокумент, Ссылка) Экспорт
	
	Если НЕ МожноВывестиФаксимиле(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеКартинкойФаксимиле(ТабличныйДокумент, МассивИменПоказателейФаксимиле());
	
КонецПроцедуры

// Процедура дополняет обработчик закрытия формы ПечатьДокументов
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПечатьДокументовПриЗакрытииНаСервере(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ГруппаПодписьИПечатьБП") <> Неопределено Тогда
		Если Форма.Элементы.ГруппаПодписьИПечатьБП.Видимость Тогда
			НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
			Если НастройкиВыводаФаксимиле = Неопределено Тогда
				НастройкиВыводаФаксимиле = Новый Структура;
			КонецЕсли;
			НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле", Форма.ПодписьИПечатьБП);
			Если  НЕ Форма.Элементы.ГруппаПодписьИПечатьБП.ТолькоПросмотр Тогда
				Если Форма.Элементы.Найти("НастройкиПечатныхФорм") <> Неопределено Тогда
					Если Форма.НастройкиПечатныхФорм.Количество() = 1 Тогда
						ИмяМакета = Форма.НастройкиПечатныхФорм[0].ИмяМакета;
						ИмяМакета = СтрЗаменить(ИмяМакета, ".", "");
						НастройкиВыводаФаксимиле.Вставить("ВыводитьФаксимиле" + ИмяМакета, Форма.ПодписьИПечатьБП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НастройкиВыводаФаксимиле.Вставить("ФаксимилеДоступноДляВывода", Истина);
			ХранилищеОбщихНастроек.Сохранить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле", НастройкиВыводаФаксимиле);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеФаксимилеПриОтправке

// Процедура определяет возможность добавление факсимиле в форму отправки
//
// Параметры:
//  АдресВоВременномХранилище - Строка
//  ПараметрыФаксимиле        - Структура, параметры отрисовки команды:
//   * ВыводитьПодписьИПечать - Булево - можно вывести факсимиле;
//   * ПредложитьНастроить    - Булево - необходимо настроить факсимиле.
//
Процедура ПолучитьПараметрыФаксимилеПриОтправке(АдресВоВременномХранилище, ПараметрыФаксимиле) Экспорт
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ПечатныеФормы  = ИсходныеДанные.НаборПечатныхФорм;
	
	ЕстьМакетыСПодписьюИПечатью = Ложь;
	Для Каждого СтрокаМассива ИЗ ПечатныеФормы Цикл
		
		СписокДокументов = СтрокаМассива.ОбъектыПечати;
		Если СписокДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокТабличныхДокументов = СтрокаМассива.ТабличныеДокументы;
		
		Для Каждого ТаблицныйДокумент ИЗ СтрокаМассива.ТабличныеДокументы Цикл
			
			РабочаяПечатнаяФорма = ТаблицныйДокумент.Значение;
			Если ЕстьПечатныеФормыСПодписьюИПечатьюВМакете(РабочаяПечатнаяФорма) Тогда
				ЕстьМакетыСПодписьюИПечатью = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьМакетыСПодписьюИПечатью Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьМакетыСПодписьюИПечатью Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаМассива ИЗ ПечатныеФормы Цикл
		СписокТабличныхДокументов = СтрокаМассива.ТабличныеДокументы;
		СписокДокументов          = СтрокаМассива.ОбъектыПечати;
		МассивДокументовВременный = СписокДокументов.ВыгрузитьЗначения();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, МассивДокументовВременный, Истина);
	КонецЦикла;
	
	НастройкиПодписиИПечати = НастройкиПодписиИПечати();
	
	ПараметрыФаксимиле = ПроверитьЗаполнениеПечатиПодписейОрганизации(МассивДокументов,
		НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
	ПараметрыФаксимиле.Вставить("ВыводитьПодписьИПечать", Истина);
	
КонецПроцедуры

// Процедура добавляет факсимиле в формы отправки
//
// Параметры:
//  ПечатныеФормы - Массив печатных форм.
//
Процедура ДобавитьФаксимилеПриОтправке(ПечатныеФормы) Экспорт
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	Для Каждого СтрокаМассива ИЗ ПечатныеФормы Цикл
		
		СписокДокументов = СтрокаМассива.ОбъектыПечати;
		Если СписокДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МожноВывестиФаксимиле(СписокДокументов[0].Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокТабличныхДокументов = СтрокаМассива.ТабличныеДокументы;
		
		Для Каждого ТаблицныйДокумент ИЗ СтрокаМассива.ТабличныеДокументы Цикл
			
			УправлениеКартинкойФаксимиле(ТаблицныйДокумент.Значение, МассивИменПоказателей);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Процедура добавляет подсказку элемента управления выводом факсимиле,
// а также управляет его доступностью и фоном
//
// Параметры:
//  Элемент - Элемент формы.
//  Группа  - Группа формы.
//
Процедура ОформитьВыводРеквизитаПодписьИПечать(Элемент, Группа, ПараметрыВывода) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ПараметрыВывода.ФаксимилеДоступноДляВывода Тогда
		
		Группа.ТолькоПросмотр = Истина;	
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Размер печати или подписи превышает предельно допустимый (500 Кб).'")));
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = '
				|'")));
		Если ЗначениеЗаполнено(ПараметрыВывода.Организация) Тогда	
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Настройте печать и подписи руководителей в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = ', затем сформируйте печатную форму снова'")));
		Иначе
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в Реквизитах организации'")));
			КонецЕсли;
			
	ИначеЕсли ПараметрыВывода.НужноЗаполнить Тогда
		
		Группа.ТолькоПросмотр = Истина;	
		
		Если ПараметрыВывода.ПредложитьНастроить И ЗначениеЗаполнено(ПараметрыВывода.Организация) Тогда	
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Сначала настройте печать и подписи руководителей в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = ', затем сформируйте печатную форму снова'")));
		ИначеЕсли НЕ ПараметрыВывода.ПредложитьНастроить И ЗначениеЗаполнено(ПараметрыВывода.Организация) Тогда	
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
		Иначе
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в Реквизитах организации'")));
		КонецЕсли;
			
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыВывода.Организация)  Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в '")));
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Реквизитах организации'"),,,,"НастройкаФаксимилеОткрытьОрганизацию"));
		Иначе
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Печать и подписи руководителей настраиваются в Реквизитах организации'")));
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = '
			|'")));
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Подписи сотрудников настраиваются в карточке сотрудника.'")));
	
	Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

// Функция проверяет использоваие измененного "старого" макета
// Параметры:
//  Ссылка - Документ.Ссылка.
// Возвращаемое значение:
//  Булево - признак того, что есть измененные макеты без областей для нового механизма факсимиле
//           Истина - есть измененные макеты
//           Ложь   - нет измененных макетов
//  
Функция ИспользуетсяИзмененныйМакет(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		ИмяОбъекта = "Документ.АктСверкиВзаиморасчетов";
		ИмяМакета  = "ПФ_MXL_АктСверки";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИмяОбъекта = "ОбщийМакет";
		ИмяМакета  = "ПФ_MXL_СчетЗаказ";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Доверенность") Тогда
		ИмяОбъекта = "ОбщийМакет";
		ИмяМакета  = "ПФ_MXL_М2";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтарыхИмен = Новый Массив;
	МассивСтарыхИмен.Добавить("Печать");
	МассивСтарыхИмен.Добавить("Подпись");
	МассивСтарыхИмен.Добавить("ПодписьРуководителя");
	МассивСтарыхИмен.Добавить("ПодписьГлавногоБухгалтера");
	МассивСтарыхИмен.Добавить("ПечатьПредпринимателя");
	МассивСтарыхИмен.Добавить("ПодписьПредпринимателя");
	
	МассивНовыхИмен = МассивИменПоказателейФаксимиле();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Запрос.УстановитьПараметр("ИмяМакета",  ИмяМакета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект КАК Объект,
	|	ПользовательскиеМакетыПечати.Макет КАК Макет
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект = &ИмяОбъекта
	|	И ПользовательскиеМакетыПечати.ИмяМакета = &ИмяМакета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Макет = Выборка.Макет.Получить();
		Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда			
			Продолжить;
		Иначе
			Для Каждого ИмяПоказателя ИЗ МассивСтарыхИмен Цикл
				Если Макет.Области.Найти(ИмяПоказателя) <> Неопределено Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ИмяПоказателя ИЗ МассивНовыхИмен Цикл
				Если Макет.Области.Найти(ИмяПоказателя) <> Неопределено Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если для макета с указанным именем зарегистрирован пользовательский макет.
//
// Параметры:
// ПроверяемыеМакеты  - Массив - Проверяемые имена макетов.
//                               Имена макетов  - Строка, Пример: "ПФ_MXL_БухгалтерскаяСправка".
// ПроверяемыеОбъекты - Массив - Проверяемые имена объектов, которым принадлежат макеты.
//                               Имена объектов - Строка, Пример: "Документ.ОперацияБух".
// ИменаНовыхОбластей - Массив - Имена областей, которые должны быть в макетах, чтобы считать, что макет актуальный.
//                               Имена областей - Строка, Пример: "ЗаголовокТаблицыПБУ18".
//
// Возвращаемое значение:
// Булево - Истина, если среди проверяемых макетов есть хотя бы один измененный, 
//  в котором отсутствуют искомые новые области.
//
Функция ИспользуютсяИзмененныеМакеты(ПроверяемыеМакеты, ПроверяемыеОбъекты, ИменаНовыхОбластей) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	Запрос.УстановитьПараметр("ПроверяемыеМакеты",  ПроверяемыеМакеты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета КАК ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект КАК Объект,
	|	ПользовательскиеМакетыПечати.Макет КАК Макет
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Объект В (&ПроверяемыеОбъекты)
	|	И ПользовательскиеМакетыПечати.ИмяМакета В (&ПроверяемыеМакеты)
	|	И ПользовательскиеМакетыПечати.Использование";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		Макет = Выборка.Макет.Получить();
		Если ТипЗнч(Макет) <> Тип("ТабличныйДокумент") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из ИменаНовыхОбластей Цикл
			Если Макет.Области.Найти(ИмяПоказателя) = Неопределено Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает двоичные данные картинки присоединенного файла факсимиле к физическому лицу
//
// Параметры:
//  ФизическоеЛицо - Ссылка на физическое лицо, к которой присоединена картинка
Функция ДвоичныеДанныеФаксимилеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПрисоединенныйФайл = ПрисоединенныйФайлФаксимилеФизическогоЛица(ФизическоеЛицо);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ПрисоединенныйФайлФаксимилеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ПрисоединенныйФайл = Справочники.Файлы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФаксимилеПодписи");
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументыДляПечатиИзНастроек(НастройкиПечатныхФорм)
	
	ДокументыДляПечати = Новый Массив;
	
	Для НомерСтроки = 1 ПО НастройкиПечатныхФорм.Количество() Цикл
		
		СписокДокументов = ПолучитьСписокДокументов(НастройкиПечатныхФорм[НомерСтроки-1]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляПечати, СписокДокументов.ВыгрузитьЗначения(), Истина);
		
	КонецЦикла;
	
	Возврат ДокументыДляПечати;
	
КонецФункции

Функция ЕстьПечатныеФормыСПодписьюИПечатью(Форма)
	
	Для НомерСтроки = 1 ПО Форма.НастройкиПечатныхФорм.Количество() Цикл
		
		РабочаяПечатнаяФорма = Форма["ПечатнаяФорма" + НомерСтроки];
		Если ЕстьПечатныеФормыСПодписьюИПечатьюВМакете(РабочаяПечатнаяФорма) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПечатныеФормыСПодписьюИПечатьюВМакете(Макет)
	
	Для Каждого Область ИЗ Макет.Области Цикл
		Если СтрНайти(Область.Имя, "РасшифровкаФаксимилеМакета") <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура НастроитьПодписьИПечать(Форма, ДокументыДляПечати)
	
	ИмяМакета = ИмяМакетаНастройкиПечатныхФорм(Форма.НастройкиПечатныхФорм);
	НастройкиПодписиИПечати = НастройкиПодписиИПечати(ИмяМакета);
	
	РезультатПроверки = ПроверитьЗаполнениеПечатиПодписейОрганизации(ДокументыДляПечати, НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
	
	ДобавитьРеквизитФормыОрганизация(Форма, РезультатПроверки);
	
	ИмяРеквизита = "ПодписьИПечатьБП";
	ДобавитьФлажокПодписиИПечати(Форма, ИмяРеквизита, РезультатПроверки);
	
	Если НастройкиПодписиИПечати.ВыводитьФаксимиле = Истина
		И НЕ РезультатПроверки.НужноЗаполнить Тогда
		Форма[ИмяРеквизита] = Истина;
		Результат = Новый Структура;
		Контекст  = Новый Структура("ИмяКоманды, ИмяРеквизита", ИмяРеквизита, ИмяРеквизита);
		ПечататьФаксимилеПриИзмененииНаСервере(Форма, Контекст, Результат);
	КонецЕсли;
	
	// Постобработка
	Если НЕ Форма.Элементы.ГруппаНастройкаКомплектаКоманднаяПанель.Видимость Тогда
		Форма.Элементы.НастройкиПечатныхФорм.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФлажокПодписиИПечати(Форма, ИмяРеквизита, РезультатПроверки)
	
	// Добавляем реквизит
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"),, НСтр("ru = 'Подпись и печать'"));
	НовыеРеквизитыФормы.Добавить(РеквизитФормы);
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	// Добавляем группу для размещения элемента, связанного с реквизитом
	ГруппаПодписьИПечать = Форма.Элементы.Вставить("Группа" + ИмяРеквизита, Тип("ГруппаФормы"),
		Форма.Элементы.ГруппаКоманднаяПанель, Форма.Элементы.КоманднаяПанельПраваяЧасть);
	ГруппаПодписьИПечать.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПодписьИПечать.ОтображатьЗаголовок      = Ложь;
	ГруппаПодписьИПечать.Отображение              = ОтображениеОбычнойГруппы.Нет;
	ГруппаПодписьИПечать.ЦветФона                 = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	ГруппаПодписьИПечать.Ширина                   = 16;
	ГруппаПодписьИПечать.РастягиватьПоГоризонтали = Ложь;	
	
	// Добавляем элемент, связанный с реквизитом
	ФлагПодписьИПечать = Форма.Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаПодписьИПечать);
	ФлагПодписьИПечать.Вид                  = ВидПоляФормы.ПолеФлажка;
	ФлагПодписьИПечать.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;
	ФлагПодписьИПечать.ПутьКДанным          = ИмяРеквизита;
	ФлагПодписьИПечать.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ФлагПодписьИПечать.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьКоманду");
	
	ОформитьВыводРеквизитаподписьИПечать(ФлагПодписьИПечать, ГруппаПодписьИПечать, РезультатПроверки);
	
КонецПроцедуры

Процедура ДобавитьРеквизитФормыОрганизация(Форма, РезультатПроверки)
	
	Если ЗначениеЗаполнено(РезультатПроверки.Организация) Тогда
		
		ИмяРеквизитаОрганизация = "Организация";
		НовыеРеквизитыФормы = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизитаОрганизация,
			Новый ОписаниеТипов("СправочникСсылка.Организации"),
			,
			НСтр("ru = 'Организация'"));
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
		Форма[ИмяРеквизитаОрганизация] = РезультатПроверки.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМакетаНастройкиПечатныхФорм(НастройкиПечатныхФорм)
	
	ИмяМакета = "";
	Если НастройкиПечатныхФорм.Количество() = 1 Тогда
		ИмяМакета = НастройкиПечатныхФорм[0].ИмяМакета;
		ИмяМакета = СтрЗаменить(ИмяМакета, ".", "");
	КонецЕсли;
	
	Возврат ИмяМакета;
	
КонецФункции

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	МассивИменПоказателей.Добавить("ФаксимилеДоверенноеЛицо");
	// для совместимости - подвал Счета
	МассивИменПоказателей.Добавить("ФаксимильнаяПечать");
	МассивИменПоказателей.Добавить("ФаксимильнаяПечатьПредприниматель");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

Функция ПолучитьСписокДокументов(НастройкаПечатныхФорм)
	
	СписокДокументов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы) Тогда
		СоответствиеДокументов = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы);
		Если ТипЗнч(СоответствиеДокументов) = Тип("Соответствие") Тогда
			Для Каждого ЗначениеСоответствия Из СоответствиеДокументов Цикл
				СписокДокументов.Добавить(ЗначениеСоответствия.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция МожноВывестиФаксимиле(ПроверяемоеЗначение)
	
	// Факсимиле добавляется только для документов,
	// у которых есть реквизит Организация
	
	Можно = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Можно = Ложь;
	КонецЕсли;
	ПроверяемыеМетаданные = ПроверяемоеЗначение.Метаданные();
	Если НЕ Метаданные.Документы.Содержит(ПроверяемыеМетаданные) Тогда
		Можно = Ложь;
	КонецЕсли;
	Если ПроверяемыеМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		Можно = Ложь;
	КонецЕсли;
	Если НЕ Можно И ТипЗнч(ПроверяемоеЗначение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		// Исключительная ситуация для Оказания услуг
		Можно = Истина;
	КонецЕсли;
	
	Возврат Можно;
	
КонецФункции

Процедура ОбработатьОбластьФаксимиле(РасшифровкаФаксимилеМакета,
				ОбластьВладелец,
				ОбластьМакета,
				ИмяОбласти,
				КлючевыеДанные,
				ИмяДанных,
				СоответствиеФаксимиле)
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		РасшифровкаФаксимилеМакета.Вставить(ИмяОбласти,
			ДополнитьРасшифровкуФаксимиле(КлючевыеДанные.Документ,
					ПолучитьДанныеКартинки(КлючевыеДанные[ИмяДанных], СоответствиеФаксимиле),
					ОбластьВладелец,
					ОбластьФаксимиле));
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти) Экспорт
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВсеОбластиФаксимиле(ОбластьМакета) Экспорт
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьРасшифровкуФаксимиле(ДанныеДокумента, ДанныеКартинки, ОбластьВладелец, ОбластьФаксимиле)
	
	РасшифровкаМакета = Новый Структура();
	РасшифровкаМакета.Вставить("Документ",         ДанныеДокумента);
	РасшифровкаМакета.Вставить("ДанныеКартинки",   ДанныеКартинки);
	РасшифровкаМакета.Вставить("Высота",           ОбластьФаксимиле.Высота);
	РасшифровкаМакета.Вставить("Ширина",           ОбластьФаксимиле.Ширина);
	РасшифровкаМакета.Вставить("Верх",             ОбластьФаксимиле.Верх);
	РасшифровкаМакета.Вставить("Лево",             ОбластьФаксимиле.Лево);
	РасшифровкаМакета.Вставить("ОбластьВладелец",  ОбластьВладелец);
	
	Возврат РасшифровкаМакета;
	
КонецФункции

Процедура УправлениеКартинкойФаксимиле(РабочаяПечатнаяФорма, МассивИменПоказателей, Добавить = Истина)
	
	МассивИменОбластей = Новый Массив;
	Для Каждого ОбластьМакета ИЗ РабочаяПечатнаяФорма.Области Цикл
		Если СтрНайти(ОбластьМакета.Имя, "РасшифровкаФаксимилеМакета") <> 0 Тогда
			МассивИменОбластей.Добавить(ОбластьМакета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ЦветФонаБелый = Новый Цвет(255,255,255);
	ЦветФонаАвто  = Новый Цвет();
	
	Для Каждого ИмяОбластиМакета ИЗ МассивИменОбластей Цикл
		
		ОбластьМакета = РабочаяПечатнаяФорма.Области[ИмяОбластиМакета];
		Если НЕ ЭтоАдресВременногоХранилища(ОбластьМакета.Расшифровка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФаксимиле = ПолучитьИзВременногоХранилища(ОбластьМакета.Расшифровка);
		Если ТипЗнч(ДанныеФаксимиле) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
			
			Если НЕ ДанныеФаксимиле.Свойство(ЗначениеПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураЗначений = ДанныеФаксимиле[ЗначениеПоказателя];
			
			ИмяОбластиФаксимиле = ЗначениеПоказателя + "_" + СтруктураЗначений.ОбластьВладелец;
			
			АдресКартинки = СтруктураЗначений.ДанныеКартинки;
			
			Если Добавить И ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОбластьКартинки = РабочаяПечатнаяФорма.Области[СтруктураЗначений.ОбластьВладелец];
				
				РисунокТабличногоДокумента = РабочаяПечатнаяФорма.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				РисунокТабличногоДокумента.Имя = ИмяОбластиФаксимиле;
				РисунокТабличногоДокумента.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				РисунокТабличногоДокумента.РазмерКартинки = РазмерКартинки.Пропорционально;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Картинка = ПолучитьИзВременногоХранилища(АдресКартинки);
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Расположить(ОбластьКартинки);
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Верх           = СтруктураЗначений.Верх;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Лево           = СтруктураЗначений.Лево;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Высота         = СтруктураЗначений.Высота;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Ширина         = СтруктураЗначений.Ширина;
				Если СтрНайти(РисунокТабличногоДокумента.Имя, "ФаксимильнаяПечать") > 0 Тогда
					РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].ЦветФона   = ЦветФонаБелый;
				Иначе
					РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].ЦветФона   = ЦветФонаАвто;
				КонецЕсли;
			Иначе
				
				Если РабочаяПечатнаяФорма.Области.Найти(ИмяОбластиФаксимиле) <> Неопределено Тогда
					РабочаяПечатнаяФорма.Рисунки.Удалить(ИмяОбластиФаксимиле);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеКартинки(КлючевойПоказатель, СоответствиеФаксимиле)
	
	ДанныеКартинки  = "";
	Если ЗначениеЗаполнено(КлючевойПоказатель) Тогда
		ДанныеКартинки = СоответствиеФаксимиле.Получить(КлючевойПоказатель);
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции

Процедура ПолучитьДанныеФаксимиле(СоответствиеФаксимиле,
								МассивИменПоказателей,
								МассивУдаляемыхИменПоказателей,
								ОрганизацияЮридическоеЛицо,
								КлючевыеДанные,
								ПараметрыПечати)
								
	Организация = КлючевыеДанные.Организация;
	ДанныеФаксимиле = Неопределено;
	АдресВременногоХранилищаФаксимиле = "";
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("АдресВременногоХранилищаФаксимиле", АдресВременногоХранилищаФаксимиле) Тогда
			ДанныеФаксимиле = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФаксимиле);
			Если ЗначениеЗаполнено(ДанныеФаксимиле) Тогда
				ДанныеФаксимилеОрганизации = ДанныеФаксимиле.Получить(Организация);
				Если ДанныеФаксимилеОрганизации <> Неопределено Тогда
					СоответствиеФаксимиле          = ДанныеФаксимилеОрганизации.СоответствиеФаксимиле;
					МассивИменПоказателей          = ДанныеФаксимилеОрганизации.МассивИменПоказателей;
					МассивУдаляемыхИменПоказателей = ДанныеФаксимилеОрганизации.МассивУдаляемыхИменПоказателей;
					ОрганизацияЮридическоеЛицо     = ДанныеФаксимилеОрганизации.ОрганизацияЮридическоеЛицо;
					
					НастройкиПодписиИПечати = НастройкиПодписиИПечати();
					ПредставлениеРеквизита = НСтр("ru = 'Подпись сотрудника'");
					Попытка
						ЗаполнитьПодписантов(КлючевыеДанные, СоответствиеФаксимиле, НастройкиПодписиИПечати, ПредставлениеРеквизита);
						СохранитьНастройкиПодписиИПечати(НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода, Неопределено);
						Возврат;
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.Организации, Организация,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
						Если ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "ВыводитьФаксимиле") = Истина Тогда
							ТекстОшибки = НСтр("ru = 'Ошибка получения картинки ""%1"" для организации %2. Подробности в журнале регистрации.'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
								ПредставлениеРеквизита, Организация));
						КонецЕсли;
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресВременногоХранилищаФаксимиле) Тогда
		АдресВременногоХранилищаФаксимиле = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НастройкиПодписиИПечати = НастройкиПодписиИПечати();
	
	ОрганизацияЮридическоеЛицо     = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
	
	ДвоичныеДанныеПечати                    = Неопределено;
	ДвоичныеДанныеПодписьРуководителя       = Неопределено;
	ДвоичныеДанныеПодписьГлавногоБухгалтера = Неопределено;
	ДвоичныеДанныеФаксимиле                 = Неопределено;
	Попытка
		ПредставлениеРеквизита = НСтр("ru = 'Печать'");
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			Организация, "ФайлПечать");
		
		ПроверитьРазмерФаксимиле(ДвоичныеДанныеПечати, ПредставлениеРеквизита, Организация,
			НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
		
		Если ОрганизацияЮридическоеЛицо Тогда
			ПредставлениеРеквизита = НСтр("ru = 'Подпись руководителя'");	
		Иначе
			ПредставлениеРеквизита = НСтр("ru = 'Подпись'");
		КонецЕсли;
		ДвоичныеДанныеПодписьРуководителя       = ДвоичныеДанныеФаксимилеФизическогоЛица(ОтветственныеЛицаОрганизации.Руководитель);
		ПроверитьРазмерФаксимиле(ДвоичныеДанныеПодписьРуководителя, ПредставлениеРеквизита, Организация,
			НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
			
		Если ОрганизацияЮридическоеЛицо Тогда
			ПредставлениеРеквизита = НСтр("ru = 'Подпись главного бухгалтера'");	
			ДвоичныеДанныеПодписьГлавногоБухгалтера = ДвоичныеДанныеФаксимилеФизическогоЛица(ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
			ПроверитьРазмерФаксимиле(ДвоичныеДанныеПодписьГлавногоБухгалтера, ПредставлениеРеквизита, Организация,
				НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
		КонецЕсли;
			
		ПредставлениеРеквизита = НСтр("ru = 'Факсимильная подпись и печать'");	
		ДвоичныеДанныеФаксимиле = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			Организация, "ФайлФаксимильнаяПечать");
			
	
		СоответствиеФаксимиле = Новый Соответствие;
		СоответствиеФаксимиле.Вставить(ОтветственныеЛицаОрганизации.Руководитель,
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПодписьРуководителя), Новый УникальныйИдентификатор));
		Если ОрганизацияЮридическоеЛицо
			И ОтветственныеЛицаОрганизации.ГлавныйБухгалтер <> ОтветственныеЛицаОрганизации.Руководитель Тогда	
			СоответствиеФаксимиле.Вставить(ОтветственныеЛицаОрганизации.ГлавныйБухгалтер, 
				ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера), Новый УникальныйИдентификатор));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДвоичныеДанныеФаксимиле)
			И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПечати)
			И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя)
			И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
			СоответствиеФаксимиле.Вставить(Организация,
				ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеФаксимиле), Новый УникальныйИдентификатор));
			ИмяПоказателя = "ФаксимилеПечать";
			МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
			МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
			ИмяПоказателя = "ФаксимилеПечатьПредприниматель";
			МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
			МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
		Иначе
			СоответствиеФаксимиле.Вставить(Организация,
				ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПечати), Новый УникальныйИдентификатор));
			ИмяПоказателя = "ФаксимильнаяПечать";
			МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
			МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
			ИмяПоказателя = "ФаксимильнаяПечатьПредприниматель";
			МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
			МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
		КонецЕсли;
		
		ПредставлениеРеквизита = НСтр("ru = 'Подпись сотрудника'");
		ЗаполнитьПодписантов(КлючевыеДанные, СоответствиеФаксимиле, НастройкиПодписиИПечати, ПредставлениеРеквизита);
		
		ДанныеФаксимилеОрганизации = Новый Структура("СоответствиеФаксимиле, МассивИменПоказателей, МассивУдаляемыхИменПоказателей, ОрганизацияЮридическоеЛицо",
													СоответствиеФаксимиле, МассивИменПоказателей, МассивУдаляемыхИменПоказателей, ОрганизацияЮридическоеЛицо);
		
		Если НЕ ЗначениеЗаполнено(ДанныеФаксимиле) Тогда
			ДанныеФаксимиле = Новый Соответствие;
		КонецЕсли;
		ДанныеФаксимиле.Вставить(Организация, ДанныеФаксимилеОрганизации);
		
		АдресВременногоХранилищаФаксимиле = ПоместитьВоВременноеХранилище(ДанныеФаксимиле, АдресВременногоХранилищаФаксимиле);
		ПараметрыПечати.Вставить("АдресВременногоХранилищаФаксимиле", АдресВременногоХранилищаФаксимиле);
		
		СохранитьНастройкиПодписиИПечати(НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода, Неопределено);
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		Если ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "ВыводитьФаксимиле") = Истина Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка получения картинки ""%1"" для организации %2. Подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ПредставлениеРеквизита, Организация));
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПодписантов(КлючевыеДанные, СоответствиеФаксимиле, НастройкиПодписиИПечати, ПредставлениеРеквизита)
	
	Организация = КлючевыеДанные.Организация;
	
	Для Каждого Показатель ИЗ КлючевыеДанные Цикл
		ЗначениеПоказателя = Показатель.Значение;
		Если ЗначениеЗаполнено(ЗначениеПоказателя)
			И ТипЗнч(ЗначениеПоказателя) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Если СоответствиеФаксимиле.Получить(ЗначениеПоказателя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодпись = ДвоичныеДанныеФаксимилеФизическогоЛица(ЗначениеПоказателя);
			СоответствиеФаксимиле.Вставить(ЗначениеПоказателя,
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПодпись), Новый УникальныйИдентификатор));
			ПроверитьРазмерФаксимиле(ДвоичныеДанныеПодпись, ПредставлениеРеквизита, Организация,
				НастройкиПодписиИПечати.ФаксимилеДоступноДляВывода);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсключаемыеТипыДокументов(ПараметрыПечати)
	
	Если НЕ ПараметрыПечати.Свойство("ИсключаемыеТипыДокументов") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ВыкупПредметовЛизинга"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		
		ПараметрыПечати.Вставить("ИсключаемыеТипыДокументов", МассивТипов);
	КонецЕсли;
	
	Возврат ПараметрыПечати.ИсключаемыеТипыДокументов;
	
КонецФункции

Функция УникальныеТипыДокументов(ПараметрыПечати)
	
	Если НЕ ПараметрыПечати.Свойство("УникальныеТипыДокументов") Тогда
		СоответствиеТиповРеквизитов = Новый Соответствие;
		СоответствиеТиповРеквизитов.Вставить(Тип("ДокументСсылка.ОказаниеУслуг"), "ДоговорКонтрагента");
		
		ПараметрыПечати.Вставить("УникальныеТипыДокументов", СоответствиеТиповРеквизитов);
	КонецЕсли;
	
	Возврат ПараметрыПечати.УникальныеТипыДокументов;
	
КонецФункции

#Область НаличиеФаксимиле

// Собирает данные для проверки заполнения необходимых реквизитов пред печатью с факсимильной подписью.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы одного типа.
//
// Возвращаемое значение:
//  Структура:
//    * НужноЗаполнить - Булево- нужно заполнить реквизиты.
//    * Организация - СправочникСсылка.Организации - организация документов.
//    * ПредложитьНастроить - Булево - у пользователя достаточно прав для настройки.
//
Функция ПроверитьЗаполнениеПечатиПодписейОрганизации(МассивДокументов, ФаксимилеДоступноДляВывода)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	РезультатПроверки.Вставить("НужноЗаполнить", Ложь);
	РезультатПроверки.Вставить("ПредложитьНастроить", Ложь);
	РезультатПроверки.Вставить("ФаксимилеДоступноДляВывода", ФаксимилеДоступноДляВывода);
	
	НужноЗаполнить = НЕ ФаксимилеДоступноДляВывода;
	
	ТаблицаОрганизацийДокументов = ОрганизацииДокументовДляПечати(МассивДокументов);
	
	ОрганизацииДокументов = ТаблицаОрганизацийДокументов.ВыгрузитьКолонку("Организация");
	ОрганизацииДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииДокументов);
	
	Если ОрганизацииДокументов.Количество() = 1 Тогда
		
		Организация = ОрганизацииДокументов[0];
		
		РезультатПроверки.Организация = Организация;
		
		ТаблицаДатДокументов = ТаблицаОрганизацийДокументов.Скопировать(Новый Структура("Организация", Организация));
		ТаблицаДатДокументов.Сортировать("Дата Убыв");
		ДатаПроверки = ТаблицаДатДокументов[0].Дата;
		
		Если ФаксимилеДоступноДляВывода Тогда
			
			НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФайлПечать"),
				ДатаПроверки);
		
			Если НужноЗаполнить Тогда
				НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФайлФаксимильнаяПечать"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки.НужноЗаполнить      = НужноЗаполнить;
	РезультатПроверки.ПредложитьНастроить = НужноЗаполнить 
											И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОрганизацииДокументовДляПечати(МассивДокументов)
	
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("Организация");
	Организации.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Организации;
	КонецЕсли;
	
	МетаданныеДокумента = МассивДокументов[0].Метаданные();
	Если НЕ Метаданные.Документы.Содержит(МетаданныеДокумента) Тогда
		Возврат Организации;
	КонецЕсли;
		
	МетаданныеИмя = МетаданныеДокумента.ПолноеИмя();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеДокумента) Тогда
		ИмяРеквизита = "ОрганизацияПолучатель";
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ПакетЗапроса.Операторы[0];
	Оператор.Источники.Добавить(МетаданныеИмя, "Документ");
	Оператор.ВыбиратьРазличные = Истина;
	Оператор.ВыбираемыеПоля.Добавить("Документ." + ИмяРеквизита);
	Оператор.ВыбираемыеПоля.Добавить("Документ.Дата");
	ПакетЗапроса.Колонки[0].Псевдоним = "Организация";
	ПакетЗапроса.Колонки[1].Псевдоним = "Дата";
	Оператор.Отбор.Добавить("Документ.Ссылка В(&Документы)");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Документы", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Организации.Добавить(), Выборка);
	КонецЦикла;
	
	Организации.Свернуть("Организация, Дата");
	
	Возврат Организации;
	
КонецФункции

Функция ЗаполненыПечатьИПодписи(Организация, ПроверяемыеРеквизиты, ДатаПроверки = Неопределено)
	
	РеквизитыЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(Организация) И ПроверяемыеРеквизиты.Количество() <> 0 Тогда
		
		ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация,
			Новый ФиксированныйМассив(ПроверяемыеРеквизиты));
		
		Для Каждого Реквизит Из ЗначенияРеквизитовОрганизации Цикл
			Если НЕ Реквизит.Значение.Пустая() Тогда
				РеквизитыЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ РеквизитыЗаполнены И ДатаПроверки <> Неопределено Тогда
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ДатаПроверки);
		Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
			РеквизитыЗаполнены = ЗначениеЗаполнено(ПрисоединенныйФайлФаксимилеФизическогоЛица(Руководители.Руководитель));
		КонецЕсли;
		Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
			РеквизитыЗаполнены = ЗначениеЗаполнено(ПрисоединенныйФайлФаксимилеФизическогоЛица(Руководители.ГлавныйБухгалтер));
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

Процедура ПроверитьРазмерФаксимиле(ДвоичныеДанныеФаксимиле, ПредставлениеРеквизита, Организация, ФаксимилеДоступноДляВывода)
	
	Если НЕ ФаксимилеДоступноДляВывода Тогда
		ДвоичныеДанныеФаксимиле = Неопределено;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДвоичныеДанныеФаксимиле) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопустимыйРазмерКартинки(ДвоичныеДанныеФаксимиле.Размер(), ПредставлениеРеквизита, Организация) Тогда
		
		ФаксимилеДоступноДляВывода = Ложь;
		ДвоичныеДанныеФаксимиле    = Неопределено;
				
	КонецЕсли;
	
КонецПроцедуры

Функция ДопустимыйРазмерКартинки(РазмерКартинки, ПредставлениеКартинки, ВладелецКартинки, ОповеститьПользователя = Ложь) Экспорт
	
	ДопустимыйРазмерКартинки = РазмерКартинки <= 512000;
	
	Если НЕ ДопустимыйРазмерКартинки Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер картинки ""%1"" слишком велик.
				|Рекомендуется использовать файл формата *.png размером не более 500 Кб.'"),
				ПредставлениеКартинки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, ВладелецКартинки,
			ТекстОшибки);
			
		Если ОповеститьПользователя Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВладелецКартинки);
		КонецЕсли;
			
		Возврат Ложь;			
	КонецЕсли;
	
	Возврат ДопустимыйРазмерКартинки;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБанком

// Процедура проверяет и удаляет с формы ПечатьДокументов рекламу подключения ДиректБанка к счету интеграции.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура ПроверитьУдалитьРекламуПодключенияДиректБанкаКСчетуИнтеграции(Форма)
	
	Если Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ЭлементДополнительнаяИнформация = Элементы.Найти("ДополнительнаяИнформация");
	Если ЭлементДополнительнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяИнформацияЗаголовок = Строка(ЭлементДополнительнаяИнформация.Заголовок);
	Если ПустаяСтрока(ДополнительнаяИнформацияЗаголовок) Тогда
		Возврат;
	КонецЕсли;
	
	БИКБанковИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БИКВсехБанковИнтеграции();
	ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции = Ложь;
	Для Каждого БИК Из БИКБанковИнтеграции Цикл
		Если СтрНайти(ДополнительнаяИнформацияЗаголовок, БИК) > 0 Тогда
			ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПредложениеПодключитьДиректБанкКСчетуИнтеграции Тогда
		ЭлементДополнительнаяИнформация.Заголовок = "";
		Элементы.КартинкаИнформации.Картинка = Новый Картинка;
		Элементы.ГруппаДополнительнаяИнформация.Видимость = Ложь;
		Элементы.КартинкаИнформации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет и удаляет с формы ПечатьДокументов рекламу подключения ДиректБанка к счету интеграции.
//
// Параметры:
//  Форма - Управляемая форма.
//
Процедура УдалитьИзЗаголовкаНеПолученныйНомерППИнтеграцияСБанком(Форма, Документ)
	
	Если Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеДокумента = НСтр("ru = 'Платежное поручение'");
	Если Не Документы.ПлатежноеПоручение.НомерПлатежногоПорученияИзвестен(Документ)
		И СтрНайти(Форма.Заголовок, НазваниеДокумента) > 0 Тогда
		Форма.Заголовок = НазваниеДокумента;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура проверяет, если среди печатных форм есть Отчет комитенту 
// и в печатной форме нет требуемых областей, 
// то выводим баннер с предупреждением
Процедура СообщитьПроДополнительныеУсловияОтчетаКомитенту(Форма)

	ЭтоОтчетКомитентуОтчетОПродажах = Ложь;
	
	Если НЕ Форма.КлючНастроек = НСтр("ru = 'Документ.ОтчетКомитентуОПродажах-ОтчетКомитентуОПродажах'") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОбъектПечати Из Форма.ОбъектыПечати Цикл
		Если ТипЗнч(ОбъектПечати.Значение) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПечати.Значение, "ВидОперации");
		
			// Контролируем изменение макета у документов с видом операции Отчет о продажах
			Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
				ЭтоОтчетКомитентуОтчетОПродажах = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоОтчетКомитентуОтчетОПродажах Тогда
	// Печатные формы не связаны с отчетами комитента, для них баннер выводить не требуется
		Возврат;
	КонецЕсли;

	// Проверим, есть ли печатная форма счета и есть ли в ней область доп. условий.
	ЕстьПечатнаяФормаОтчетКомитенту = Ложь;
	
	// Проверим, есть ли печатная форма счета и есть ли в ней область 
	Для НомерСтроки = 1 ПО Форма.НастройкиПечатныхФорм.Количество() Цикл
		
		СтрокаНастройкиПечатнойФормы = Форма.НастройкиПечатныхФорм[НомерСтроки - 1];

		Если СтрокаНастройкиПечатнойФормы.ИмяМакета <> "ОтчетКомитентуОПродажах" Тогда
			Продолжить;
		КонецЕсли;
		ЕстьПечатнаяФормаОтчетКомитенту = Истина; 
	
		РабочаяПечатнаяФорма = Форма[СтрокаНастройкиПечатнойФормы.ИмяРеквизита];
		
		Для Каждого Область ИЗ РабочаяПечатнаяФорма.Области Цикл
			ОбластьДополнительныеУсловия = СтрНайти(Область.Имя, "ВидСобытия");
			Если ОбластьДополнительныеУсловия <> 0 Тогда
				// Дополнительные условия уже используются, сообщать ничего не требуется.
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

	Если НЕ ЕстьПечатнаяФормаОтчетКомитенту Тогда
		Возврат;
	КонецЕсли;
	
	// Если ранее уже показывали пользователю баннер и он его закрыл, то больше не показываем.
	НеПоказыватьБаннерДопУсловияОтчетаКомитента = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"БП.ПечатьДокументов", "НеПоказыватьБаннерДопУсловияОтчетаКомитента");
	Если НеПоказыватьБаннерДопУсловияОтчетаКомитента = Истина Тогда
		Возврат;
	КонецЕсли;

	// Добавляем баннер перед ГруппаПечатныеФормы, в которой выводится печатный документ.
	ГруппаПечатныеФормы = Форма.Элементы.Найти("ГруппаПечатныеФормы");
	
	ГруппаБаннер = Форма.Элементы.Вставить("ГруппаБаннерДопУсловияОтчетаКомитента",
		Тип("ГруппаФормы"), Форма, ГруппаПечатныеФормы);
	ГруппаБаннер.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБаннер.ОтображатьЗаголовок      = Ложь;
	ГруппаБаннер.РастягиватьПоГоризонтали = Истина;
	ГруппаБаннер.ЦветФона                 = ЦветаСтиля.БыстрыеОтборыФонГруппы; // Выделяем баннер цветом.
	
	НадписьБаннер = Форма.Элементы.Добавить("НадписьБаннерДопУсловияОтчетаКомитента",
		Тип("ДекорацияФормы"), ГруппаБаннер);
	НадписьБаннер.РастягиватьПоГоризонтали = Истина;
	НадписьБаннер.АвтоМаксимальнаяШирина   = Ложь;
	
	ЗаголовокБаннера = Новый Массив;
	ЗаголовокБаннера.Добавить(
		НСтр("ru = 'Внимание! В отчете комитенту добавлена возможность вывода на печать информации по счетам-фактурам.'"));
	ЗаголовокБаннера.Добавить(" ");
	ЗаголовокБаннера.Добавить(
		НСтр("ru = 'Для использования новых возможностей рекомендуем восстановить типовой макет.'"));
	ЗаголовокБаннера.Добавить(" ");
	ЗаголовокБаннера.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),
		 , , , "https://its.1c.ru/db/answers1c/content/641/hdoc"));

	// Дополнительные условия в счете не используются, выведем баннер о том, что есть такая возможность.  	
	НадписьБаннер.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокБаннера);
	
	// Добавим крестик для закрытия баннера, если пользователю он не интересен.
	КартинкаЗакрытьБаннер = Форма.Элементы.Добавить("КартинкаЗакрытьБаннерДопУсловияСчетаНаОплату",
		 Тип("ДекорацияФормы"), ГруппаБаннер);
	КартинкаЗакрытьБаннер.Заголовок   = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,
		 , , , "ЗакрытьБаннерДопУсловияОтчетаКомитента");

КонецПроцедуры

#КонецОбласти
