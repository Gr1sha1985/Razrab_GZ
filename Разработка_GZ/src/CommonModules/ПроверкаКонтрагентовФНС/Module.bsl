///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с контрагентами".
// ОбщийМодуль.ПроверкаКонтрагентовФНС.
//
// Серверные процедуры и функции для работы с сервисом проверки Контрагентов ФНС:
//  - кэширование результатов проверки;
//  - вызов операций сервиса проверки ФНС;
//  - проверка данных кэша состояний контрагентов;
//  - проверка кэша состояний ФНС.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаСостоянияКонтрагентов

// Проверяет наличие доступа к веб-сервису ФНС.
//
// Возвращаемое значение:
//  Булево - если Истина, доступ к веб-сервису ФНС есть.
//
Функция ЕстьДоступКВебСервисуФНС() Экспорт
	
	Возврат ПроверкаКонтрагентовФНСПовтИсп.ПроверитьДоступностьСервиса();
	
КонецФункции

// Определяет состояние контрагента на основании данных ФНС или кэша состояний.
//
// Параметры:
//  ДанныеКонтрагентов - ТаблицаЗначений - контрагенты, состояния которых необходимо проверить;
//  ОбновитьКэш - Булево - регулирует необходимость записи результатов проверки в кэш состояний;
//  ЕстьДоступКВебСервисуФНС - Булево - определяет наличие доступа к сервису ФНС.
//
// Пример:
//
Процедура СостоянияКонтрагентовФНС(ДанныеКонтрагентов, ОбновитьКэш, ЕстьДоступКВебСервисуФНС) Экспорт
	
	// Будет выполняется поиск данных по таблице.
	Если ДанныеКонтрагентов.Количество() > 100 Тогда
		ДанныеКонтрагентов.Индексы.Добавить("ИНН, КПП, Дата");
	КонецЕсли;
	
	// Перед выполнением запроса к сервису ФНС, необходимо выполнить
	// поиск состояний в кэше.
	ОпределитьСостоянияИзКэша(ДанныеКонтрагентов);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	
	ДанныеДляПроверки      = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	
	// Если все состояния были получены из кэша, обращение
	// к сервису ФНС не требуется.
	Если ДанныеДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Перед выполнением запроса к сервису, если необходимо проверить более
	// одного контрагента необходимо проверить доступность сервиса.
	Если ДанныеДляПроверки.Количество() <> 1 Тогда
		ЕстьДоступКВебСервисуФНС = ЕстьДоступКВебСервисуФНС();
		Если Не ЕстьДоступКВебСервисуФНС Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение таблицы контрагентов, которую необходимо
	// отправить на проверку в сервис ФНС.
	ОписаниеДанныхПроверок = ОписаниеДанныхПроверок();
	Для Каждого ОписаниеКонтрагента Из ДанныеДляПроверки Цикл
		ЗаполнитьЗначенияСвойств(
			ОписаниеДанныхПроверок.Добавить(),
			ОписаниеКонтрагента,
			"ИНН, КПП, Дата");
	КонецЦикла;
	ОписаниеДанныхПроверок.Свернуть("ИНН, КПП, Дата");
	
	ИнформацияОСостоянияхКонтрагентов(ДанныеКонтрагентов, ОписаниеДанныхПроверок);
	
	// Сохранить результаты проверки в кэш.
	Если ОбновитьКэш Тогда
		СохранитьРезультатыПроверки(ДанныеДляПроверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ПроверкаКэшаСостоянийФНС.
//
Процедура ПроверкаКэшаСостоянийФНС() Экспорт
	
	// Регламентные задания блокируются на время служебных
	// операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПроверкаКэшаСостоянийФНС);
	
	// Проверяем, включен ли механизм проверки состояний контрагентов ФНС.
	Если НЕ ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена() Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка устаревших данных РС КэшСостоянийКонтрагентовФНС.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Последовательная обработка областей, в которые
		// содержат неактуальный кэш состояний.
		ОбластиДанных = ОбластиДанныхУдаленияКэша();
		Для Каждого ОбластьДанных Из ОбластиДанных Цикл
			ОчиститьУстаревшийКэш(ОбластьДанных);
		КонецЦикла;
	Иначе
		ОчиститьУстаревшийКэш();
	КонецЕсли;
	
	// Получаем прокси перед началом получение данных из сервиса.
	Прокси = ПроксиСервиса();
	Если Прокси = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'Не удалось проверить контрагентов в сервисе ФНС. Не удалось подключиться к
			|сервису (см. описание ошибки в журнале регистрации).'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Инициализация параметров запроса веб сервиса.
	ПараметрыРаботыСервиса = ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO      = Неопределено;
	КонтрагентФабрикиXDTO  = Неопределено;
	КонтрагентыЗапроса     = Неопределено;
	
	ЗаполнитьПараметрыЗапросаСервисаФНС(
		Прокси,
		ПараметрыРаботыСервиса,
		ЗапросФабрикиXDTO,
		КонтрагентФабрикиXDTO,
		КонтрагентыЗапроса);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Последовательная обработка областей, в которых
		// не проверенные данные.
		ОбластиДанных = ОбластиДанныхПроверкиСостояний();
		Для Каждого ОбластьДанных Из ОбластиДанных Цикл
			ВыполнитьПроверкуКэшаСостояний(
				Прокси,
				ЗапросФабрикиXDTO,
				КонтрагентФабрикиXDTO,
				КонтрагентыЗапроса,
				ОбластьДанных);
		КонецЦикла;
		
	Иначе
		
		ВыполнитьПроверкуКэшаСостояний(
			Прокси,
			ЗапросФабрикиXDTO,
			КонтрагентФабрикиXDTO,
			КонтрагентыЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Выполняет настройку регламентного задания проверки кэша состояний
// при переходе на версию 2.3.2.9.
//
Процедура УстановитьРасписаниеПроверкиКэшаСостояний() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПроверкаКэшаСостоянийФНС);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	// Если задание уже создано нет необходимости
	// добавлять новое.
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;

	// Чтобы не создавать пиковых нагрузок на сервис,
	// время обновления будет выбрано случайным образом
	// между 00:00 и 07:00.
	Генератор = Новый ГенераторСлучайныхЧисел;
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 25200);
	Расписание.ПериодПовтораДней = 1;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ПроверкаКэшаСостоянийФНС);
	ПараметрыЗадания.Вставить("Использование", ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена());
	ПараметрыЗадания.Вставить("Расписание",    Расписание);
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область ВызовОперацийСервиса

// Проверяет наличие доступа к веб-сервису ФНС.
//
// Возвращаемое значение:
//  Булево - если Истина, доступ к веб-сервису ФНС есть.
//
Функция ПроверитьДоступностьСервиса() Экспорт
	
	Таймаут = 15;
	Прокси  = ПроксиСервиса(Таймаут);
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем на конкретных данных
	ДанныеКонтрагента = Новый Структура();
	ДанныеКонтрагента.Вставить("ИНН", "7709860400");
	ДанныеКонтрагента.Вставить("КПП", "770901001");
	ДанныеКонтрагента.Вставить("Дата", ПредставлениеДатыВСервисе(ТекущаяДатаСеанса()));
	
	Параметры         = ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета, 
		Параметры.ИмяТипаЗапросаФабрикиXDTO);
	ЗапросФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета,
		Параметры.ИмяТипаЗапросаФабрикиXDTO);
	
	КонтрагентФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета, 
		Параметры.ИмяТипаКонтрагентаФабрикиXDTO);
	
	КонтрагентыЗапроса = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	КонтрагентЗапроса  = Прокси.ФабрикаXDTO.Создать(КонтрагентФабрикиXDTO);
	
	ДобавитьКонтрагентаВЗапросКСервису(
		Прокси,
		ДанныеКонтрагента,
		КонтрагентыЗапроса,
		КонтрагентЗапроса,
		Ложь);
	
	NdsResponse = ПолучитьСостоянияКонтрагентов(Прокси, КонтрагентыЗапроса);
	
	Если NdsResponse = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет состояние контрагента на основании данных ФНС.
//
// Параметры:
//  ДанныеКонтрагентов - ТаблицаЗначений - контрагенты, состояния которых необходимо проверить;
//  ДанныеДляПроверки - ТаблицаЗначений - см. функцию ОписаниеДанныхПроверок.
//
Процедура ИнформацияОСостоянияхКонтрагентов(ДанныеКонтрагентов, ОписаниеДанныхПроверок)
	
	Прокси = ПроксиСервиса();
	Если Прокси = Неопределено Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Не удалось проверить контрагентов в сервисе ФНС. Не удалось подключиться к
				|сервису (см. описание ошибки в журнале регистрации).'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыСервиса = ПараметрыРаботыСервиса();
	КоличествоКонтрагентов = ОписаниеДанныхПроверок.Количество();
	
	ЗапросФабрикиXDTO     = Неопределено;
	КонтрагентФабрикиXDTO = Неопределено;
	КонтрагентыЗапроса    = Неопределено;
	ЗаполнитьПараметрыЗапросаСервисаФНС(
		Прокси,
		ПараметрыРаботыСервиса,
		ЗапросФабрикиXDTO,
		КонтрагентФабрикиXDTO,
		КонтрагентыЗапроса);
	
	РазмерПорции = 1000;
	
	// Разбиваем всю таблицу на блоки запросов.
	КоличествоЗапросов = ?(
		КоличествоКонтрагентов % РазмерПорции = 0,
		КоличествоКонтрагентов / РазмерПорции,
		Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
	
	// Выполняем несколько запросов. В каждом запросе не более 1000 строк.
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента  = Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента = Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		КонтрагентыЗапроса.NP.Очистить();
		
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ОписаниеДанныхПроверок[ИндексТекущегоКонтрагента];
			КонтрагентЗапроса = Прокси.ФабрикаXDTO.Создать(КонтрагентФабрикиXDTO);
			ДобавитьКонтрагентаВЗапросКСервису(
				Прокси,
				ДанныеКонтрагента,
				КонтрагентыЗапроса,
				КонтрагентЗапроса);
			
		КонецЦикла;
		
		Если КонтрагентыЗапроса.NP.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		NdsResponse = ПолучитьСостоянияКонтрагентов(Прокси, КонтрагентыЗапроса);
		
		Если NdsResponse <> Неопределено Тогда
			ЗаполнитьСостоянияКонтрагентов(
				NdsResponse,
				ДанныеКонтрагентов,
				КонтрагентыЗапроса.NP.Количество());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отправляет запрос на проверку контрагентов в сервис ФНС.
//
// Параметры:
//  Прокси - WSПрокси - параметры прокси сервера сервиса ФНС;
//  КонтрагентыЗапроса - СписокXDTO - список контрагентов, для которых
//                       необходимо получить состояние;
//
// Возвращаемое значение:
//  СписокXDTO, Неопределено - результат проверки контрагентов.
//
Функция ПолучитьСостоянияКонтрагентов(Прокси, КонтрагентыЗапроса)
	
	Попытка
		NdsResponse = Прокси.NdsRequest2(КонтрагентыЗапроса);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить контрагентов в сервисе ФНС. Ошибка при вызове операции сервиса.
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписатьОшибкуВЖурналРегистрации(
			СообщениеЖурналаРегистрации,
			НСтр("ru = 'NdsRequest2'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		NdsResponse = Неопределено;
		
	КонецПопытки;
	
	Возврат NdsResponse;
	
КонецФункции

// Заполняет описание контрагента и добавляет его в список на проверку.
//
// Параметры:
//  NdsResponse - ОбъектXDTO - ответ сервиса ФНС;
//  ДанныеКонтрагентов - ТаблицаЗначений - контрагенты, состояния которых необходимо проверить;
//  КонтрагентЗапроса - ОбъектXDTO - описание контрагента;
//  КонтрагентыЗапроса - СписокXDTO - список контрагентов, для которых
//                       необходимо получить состояние;
//  ЗаполнятьСостояниеОшибки - Булево - если Истина, в случае ошибки в результат
//                             будет установлено состояние "КонтрагентСодержитОшибкиВДанных".
//
Процедура ДобавитьКонтрагентаВЗапросКСервису(
		Прокси,
		ДанныеКонтрагента,
		КонтрагентыЗапроса,
		КонтрагентЗапроса,
		ЗаполнятьСостояниеОшибки = Истина)
	
	Попытка
		
		// Указываем ИНН, КПП и Дату
		КонтрагентЗапроса.INN = ДанныеКонтрагента.ИНН;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			КонтрагентЗапроса.KPP = ДанныеКонтрагента.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)Тогда
			КонтрагентЗапроса.DT = ПредставлениеДатыВСервисе(ДанныеКонтрагента.Дата);
		КонецЕсли;
		
		// Добавляем данные по контрагенту в список на проверку.
		КонтрагентыЗапроса.NP.Добавить(КонтрагентЗапроса);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ЗаполнятьСостояниеОшибки Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
		КонецЕсли;
		
		РаботаСКонтрагентами.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			"ПроверкаКонтрагентов",
			НСтр("ru = 'Формирование данных для обращения к сервису ФНС'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецПопытки;
	
КонецПроцедуры

// Обрабатывает ответ сервиса ФНС и заполняет результат операции.
//
// Параметры:
//  NdsResponse - ОбъектXDTO - ответ сервиса ФНС;
//  ДанныеКонтрагентов - ТаблицаЗначений - контрагенты, состояния которых необходимо проверить;
//  КоличествоЗапрошенных - Число - количество контрагентов в запросе.
//
Процедура ЗаполнитьСостоянияКонтрагентов(
		NdsResponse,
		ДанныеКонтрагентов,
		КоличествоЗапрошенных)
	
	КоличествоПолученных  = NdsResponse.NP.Количество();
	Если Не КоличествоОбъектовРавноКоличествуВОтвете(КоличествоЗапрошенных, КоличествоПолученных) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КонтрагентОтвета Из NdsResponse.NP Цикл
		
		Попытка
			ОтборКонтрагентов = Новый Структура;
			ОтборКонтрагентов.Вставить("ИНН",  ?(КонтрагентОтвета.INN = Неопределено, "", КонтрагентОтвета.INN));
			ОтборКонтрагентов.Вставить("КПП",  ?(КонтрагентОтвета.KPP = Неопределено, "", КонтрагентОтвета.KPP));
			ОтборКонтрагентов.Вставить("Дата", СтроковыеФункцииКлиентСервер.СтрокаВДату(КонтрагентОтвета.DT));
			
			ДанныеКонтрагента = ДанныеКонтрагентов.НайтиСтроки(ОтборКонтрагентов);
			Для Каждого ОписаниеКонтрагента Из ДанныеКонтрагента Цикл
				Если ОписаниеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных Тогда 
					ОписаниеКонтрагента.Состояние = СостояниеКонтрагента(КонтрагентОтвета.State);
				КонецЕсли;
			КонецЦикла;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				НСтр("ru = 'Обработка ответа от веб-сервиса'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет количество контрагентов в ответе сервиса.
//
// Параметры:
//  КоличествоЗапрошенных - Число - количество контрагентов в запросе;
//  КоличествоПолученных  - Число - количество контрагентов в ответе.
//
// Возвращаемое значение:
//  Булево - если Истина, количество совпадает.
//
Функция КоличествоОбъектовРавноКоличествуВОтвете(КоличествоЗапрошенных, КоличествоПолученных)
	
	Если КоличествоЗапрошенных <> КоличествоПолученных Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис ФНС получил информацию не по всем контрагентам.
					|Количество контрагентов в запросе %1, количество контрагентов в ответе %2.'"),
				КоличествоЗапрошенных,
				КоличествоПолученных),
			НСтр("ru = 'Обработка ответа от веб-сервиса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Конструктор объекта WSПрокси.
//
// Параметры:
//  Таймаут - Число - количество секунд ожидания ответа.
//
// Возвращаемое значение:
//  WSПрокси  - объект WSПрокси.
//
Функция ПроксиСервиса(Таймаут = 120)
	
	Результат = Неопределено;
	
	Попытка
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ЗаполнитьЗначенияСвойств(
			ПараметрыПодключения,
			ПараметрыРаботыСервиса());
		ПараметрыПодключения.Таймаут = Таймаут;
		Результат = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СообщениеЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при подключении к сервису ФНС для проверки контрагентов по ЕГРН.
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписатьОшибкуВЖурналРегистрации(
			СообщениеЖурналаРегистрации,
			НСтр("ru = 'Ошибка доступа к веб-сервису'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Определяет параметры подключения к сервису ФНС.
//
// Возвращаемое значение:
//  Структура - настройки подключения:
//   * АдресWSDL                     - Строка - месторасположение wsdl;
//   * URIПространстваИмен           - Строка - URI пространства имен web-сервиса;
//   * ПространствоИменОтвета        - Строка - URI пространства имен ответа web-сервиса.
//   * ИмяСервиса                    - Строка - имя сервиса;
//   * ИмяТочкиПодключения           - Строка - точка подключения к сервису;
//   * АдресСервиса                  - Строка - фактический адрес сервиса;
//   * ИмяТипаКонтрагентаФабрикиXDTO - Строка - имя типа описания контрагента;
//   * ИмяТипаЗапросаФабрикиXDTO     - Строка - имя типа списка контрагентов.
//
Функция ПараметрыРаботыСервиса()
	
	АдресСервиса = URLWsdlСервисаПроверкиСостоянийФНС();
	
	// Заполняем общие настройки
	Результат = Новый Структура();
	Результат.Вставить("АдресСервиса",                  АдресСервиса);
	Результат.Вставить("ИмяТипаКонтрагентаФабрикиXDTO", "NdsRequest2_NP");
	Результат.Вставить("ИмяТипаЗапросаФабрикиXDTO",     "NdsRequest2");
	Результат.Вставить("АдресWSDL",                     АдресСервиса);
	Результат.Вставить("URIПространстваИмен",           "http://ws.unisoft");
	Результат.Вставить("ИмяСервиса",                    "FNSNDSCAWS2");
	Результат.Вставить("ИмяТочкиПодключения",           "FNSNDSCAWS2_Port");
	Результат.Вставить("ПространствоИменОтвета",        "http://ws.unisoft/FNSNDSCAWS2/Request");
	
	Возврат Результат;
	
КонецФункции

// Определяет состояние контрагента на основании кода состояния сервиса ФНС
//
// Параметры:
//  КодСостояния - Состояние - код состояния, который вернул сервис ФНС.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияСуществованияКонтрагента, Неопределено - результат преобразования.
//
Функция СостояниеКонтрагента(КодСостояния)
	
	Если КодСостояния = "0" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС;
	ИначеЕсли КодСостояния = "1" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	ИначеЕсли КодСостояния = "3" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС;
	ИначеЕсли КодСостояния = "4" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС;
	ИначеЕсли КодСостояния = "5" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеверныйИНН;
	ИначеЕсли КодСостояния = "6" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДлинаИНН;
	ИначеЕсли КодСостояния = "7" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДлинаКПП;
	ИначеЕсли КодСостояния = "8" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВИНН;
	ИначеЕсли КодСостояния = "9" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВКПП;
	ИначеЕсли КодСостояния = "10" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.ИПНеМожетИметьКПП;
	ИначеЕсли КодСостояния = "11" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НекорректныйФорматДаты;
	ИначеЕсли КодСостояния = "12" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДата;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Формирование параметров запрос и типов XDTO для запроса в сервис ФНС.
//
// Параметры:
//  Прокси - WSПрокси - параметры прокси сервера сервиса ФНС;
//  ПараметрыРаботыСервиса - Структура - см. функцию ПараметрыРаботыСервиса;
//  ЗапросФабрикиXDTO - Неопределено - переменная для типа список контрагентов;
//  КонтрагентФабрикиXDTO - Неопределено - переменная для типа описание контрагента в сервисе;
//  КонтрагентыЗапроса - Неопределено - переменная для списка контрагентов, для которых
//                       необходимо получить состояние.
//
Процедура ЗаполнитьПараметрыЗапросаСервисаФНС(
		Прокси,
		ПараметрыРаботыСервиса,
		ЗапросФабрикиXDTO,
		КонтрагентФабрикиXDTO,
		КонтрагентыЗапроса)
	
	ЗапросФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
		ПараметрыРаботыСервиса.ПространствоИменОтвета,
		ПараметрыРаботыСервиса.ИмяТипаЗапросаФабрикиXDTO);
	
	КонтрагентФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
		ПараметрыРаботыСервиса.ПространствоИменОтвета,
		ПараметрыРаботыСервиса.ИмяТипаКонтрагентаФабрикиXDTO);
	
	КонтрагентыЗапроса = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемСостояний

// Сохраняет результат проверки контрагентов ФНС в кэш.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - см. функцию ОписаниеДанныхПроверок.
//
Процедура ОпределитьСостоянияИзКэша(ДанныеКонтрагентов)
	
	ДатаОбновленияДанныхФНС = ДатаОбновленияДанныхФНС();
	ОписаниеДанныхПроверок  = ОписаниеДанныхПроверок();
	
	Для Каждого ОписаниеКонтрагента Из ДанныеКонтрагентов Цикл
		Если НачалоДня(ОписаниеКонтрагента.Дата) < ДатаОбновленияДанныхФНС
			И ОписаниеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка() Тогда
			ЗаполнитьЗначенияСвойств(
				ОписаниеДанныхПроверок.Добавить(),
				ОписаниеКонтрагента,
				"ИНН, КПП, Дата");
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеДанныхПроверок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанныхПроверок.Свернуть("ИНН, КПП, Дата");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеДанныхПроверок.ИНН КАК ИНН,
		|	ОписаниеДанныхПроверок.КПП КАК КПП,
		|	ОписаниеДанныхПроверок.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ДанныеПроверки
		|ИЗ
		|	&ОписаниеДанныхПроверок КАК ОписаниеДанныхПроверок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИНН,
		|	КПП,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПроверки.ИНН КАК ИНН,
		|	ВТ_ДанныеПроверки.КПП КАК КПП,
		|	ВТ_ДанныеПроверки.Дата КАК Дата,
		|	КэшСостоянийКонтрагентовФНС.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПроверки КАК ВТ_ДанныеПроверки
		|		ПО КэшСостоянийКонтрагентовФНС.ИНН = ВТ_ДанныеПроверки.ИНН
		|			И КэшСостоянийКонтрагентовФНС.КПП = ВТ_ДанныеПроверки.КПП
		|			И КэшСостоянийКонтрагентовФНС.ДатаПроверки = ВТ_ДанныеПроверки.Дата
		|			И (КэшСостоянийКонтрагентовФНС.Проверен = ИСТИНА)";
	
	Запрос.УстановитьПараметр("ОписаниеДанныхПроверок", ОписаниеДанныхПроверок);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОтборКонтрагентов = Новый Структура;
		ОтборКонтрагентов.Вставить("ИНН",  ВыборкаДетальныеЗаписи.ИНН);
		ОтборКонтрагентов.Вставить("КПП",  ВыборкаДетальныеЗаписи.КПП);
		ОтборКонтрагентов.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
		
		НайденныеСтроки = ДанныеКонтрагентов.НайтиСтроки(ОтборКонтрагентов);
		Для Каждого ОписаниеКонтрагента Из НайденныеСтроки Цикл
			ОписаниеКонтрагента.Состояние = ВыборкаДетальныеЗаписи.Состояние;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет результат проверки контрагентов ФНС в кэш.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - см. функцию ОписаниеДанныхПроверок.
//
Процедура СохранитьРезультатыПроверки(ДанныеДляПроверки)
	
	// Перед записью необходимо определить, отсутствующие записи в кэше.
	// Для проверки будет использоваться данные полученные за последние
	// 4 месяца. Кэш не будет записан если в ИБ не существует ссылки на
	// контрагента.
	ГраницаАктуальностиКэша = ГраницаАктуальностиКэшаСостояний();
	ОписаниеДанныхПроверок  = ОписаниеДанныхПроверок(Истина);
	ДатаОбновленияДанныхФНС = ДатаОбновленияДанныхФНС();
	
	ОписаниеДанныхПроверок.Колонки.Добавить("Проверен", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ОписаниеКонтрагента Из ДанныеДляПроверки Цикл
		Если НачалоДня(ОписаниеКонтрагента.Дата) > ГраницаАктуальностиКэша
			И ЗначениеЗаполнено(ОписаниеКонтрагента.Контрагент)Тогда
			
			СтрокаДанныхПроверки = ОписаниеДанныхПроверок.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				СтрокаДанныхПроверки,
				ОписаниеКонтрагента,
				"ИНН, КПП, Дата, Состояние");
			
			// Состояние контрагента считается проверенным, если дата, на которую оно получено,
			// меньше текущей на семь дней. Необходимость в дополнительной проверке возникает
			// из-за того, что данные из ЕГРН загружаются в сервис проверки состояний контрагентов
			// ФНС один раз в семь дней.
			//
			// Сервис проверки ФНС
			// ---------------------------------------------------
			//       Дата проверки  ▲
			//                      |------------------------
			//                      |                       |
			//                      |                       |
			//                      |                       |
			//                      |                       |
			//                      |                       |
			//                      |                       |
			//                      |                       |
			//                      |                       |
			// Информационная база  |                       | Проверка на Текущая дата - 7 дней.
			// ---------------------------------------------------
			//                      ▲         7 дней         ▲
			//                      |                        |
			//                      |                        |
			//               {Ввод операции}       { Проверка состояния  }
			//                                     {регламентным заданием}
			//
			СтрокаДанныхПроверки.Проверен = СтрокаДанныхПроверки.Дата < ДатаОбновленияДанныхФНС;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеДанныхПроверок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанныхПроверок.Свернуть("ИНН, КПП, Дата, Состояние, Проверен");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписаниеДанныхПроверок.ИНН КАК ИНН,
		|	ОписаниеДанныхПроверок.КПП КАК КПП,
		|	ОписаниеДанныхПроверок.Дата КАК Дата,
		|	ОписаниеДанныхПроверок.Состояние КАК Состояние,
		|	ОписаниеДанныхПроверок.Проверен КАК Проверен
		|ПОМЕСТИТЬ ВТ_ДанныеПроверки
		|ИЗ
		|	&ОписаниеДанныхПроверок КАК ОписаниеДанныхПроверок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИНН,
		|	КПП,
		|	Дата,
		|	Состояние,
		|	Проверен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПроверки.ИНН КАК ИНН,
		|	ВТ_ДанныеПроверки.КПП КАК КПП,
		|	ВТ_ДанныеПроверки.Дата КАК ДатаПроверки,
		|	ВТ_ДанныеПроверки.Состояние КАК Состояние,
		|	ВТ_ДанныеПроверки.Проверен КАК Проверен
		|ИЗ
		|	ВТ_ДанныеПроверки КАК ВТ_ДанныеПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|		ПО (КэшСостоянийКонтрагентовФНС.ИНН = ВТ_ДанныеПроверки.ИНН)
		|			И (КэшСостоянийКонтрагентовФНС.КПП = ВТ_ДанныеПроверки.КПП)
		|			И (КэшСостоянийКонтрагентовФНС.ДатаПроверки = ВТ_ДанныеПроверки.Дата)
		|			И (КэшСостоянийКонтрагентовФНС.Состояние = ВТ_ДанныеПроверки.Состояние)
		|			И (КэшСостоянийКонтрагентовФНС.Проверен = ВТ_ДанныеПроверки.Проверен)
		|			%1
		|ГДЕ
		|	КэшСостоянийКонтрагентовФНС.ИНН ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ОписаниеДанныхПроверок", ОписаниеДанныхПроверок);
	Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ИнтернетПоддержкаПользователей.ЗначениеРазделителяСеанса());
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса")
			И ОбщегоНазначения.РазделениеВключено() Тогда
		ОтборРазделить = "И (КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные = &ОбластьДанныхВспомогательныеДанные)";
	Иначе
		ОтборРазделить = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ОтборРазделить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Запись = РегистрыСведений.КэшСостоянийКонтрагентовФНС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		Запись.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Производит удаление устаревшего кэша состояний проверки.
//
// Параметры:
//  ОбластьДанных - Число - номер области данных в которой выполняется очистка.
//
Процедура ОчиститьУстаревшийКэш(ОбластьДанных = Неопределено)
	
	// АПК:547-вкл
	
	// Блокировку ставить не требуется, т.к. устаревший кэш не будет изменяться алгоритмами
	// подсистемы "Работа с контрагентами".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КэшСостоянийКонтрагентовФНС.ДатаПроверки КАК ДатаПроверки
		|ИЗ
		|	РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|ГДЕ
		|	КэшСостоянийКонтрагентовФНС.ДатаПроверки < &ГраницаАктуальности
		|	%1";
	
	Запрос.УстановитьПараметр("ГраницаАктуальности", ГраницаАктуальностиКэшаСостояний());
	Запрос.УстановитьПараметр("ОбластьДанных",       ОбластьДанных);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ОтборРазделить = "И КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные = &ОбластьДанных";
	Иначе
		ОтборРазделить = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ОтборРазделить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор = РегистрыСведений.КэшСостоянийКонтрагентовФНС.СоздатьНаборЗаписей();
		Набор.Отбор.ДатаПроверки.Установить(ВыборкаДетальныеЗаписи.ДатаПроверки);
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Набор.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанных)
		КонецЕсли;
		Набор.Записать();
	КонецЦикла;
	
	// АПК:547-вкл
	
КонецПроцедуры

// Производит получение данных из сервиса и запись результатов проверки
// кэш состояний проверки.
//
// Параметры:
//  Прокси - WSПрокси - параметры прокси сервера сервиса ФНС;
//  ЗапросФабрикиXDTO - ТипЗначенияXDTO - тип списка контрагентов;
//  КонтрагентФабрикиXDTO - ТипЗначенияXDTO - тип описание контрагента в сервисе;
//  КонтрагентыЗапроса - СписокXDTO - список контрагентов, для которых
//                       необходимо получить состояние;
//  ОбластьДанных - Число - номер области данных в которой выполняется проверка.
//
Процедура ВыполнитьПроверкуКэшаСостояний(
		Прокси,
		ЗапросФабрикиXDTO,
		КонтрагентФабрикиXDTO,
		КонтрагентыЗапроса,
		ОбластьДанных = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КэшСостоянийКонтрагентовФНС.ИНН КАК ИНН,
		|	КэшСостоянийКонтрагентовФНС.КПП КАК КПП,
		|	КэшСостоянийКонтрагентовФНС.ДатаПроверки КАК Дата,
		|	КэшСостоянийКонтрагентовФНС.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|ГДЕ
		|	НЕ КэшСостоянийКонтрагентовФНС.Проверен
		|	И КэшСостоянийКонтрагентовФНС.ДатаПроверки <= &ДатаОбновленияДанныхФНС
		|	И КэшСостоянийКонтрагентовФНС.ДатаПроверки >= &ГраницаАктуальностиКэшаСостояний
		|	%1";
	
	Запрос.УстановитьПараметр("ДатаОбновленияДанныхФНС",          ДатаОбновленияДанныхФНС());
	Запрос.УстановитьПараметр("ГраницаАктуальностиКэшаСостояний", ГраницаАктуальностиКэшаСостояний());
	Запрос.УстановитьПараметр("ОбластьДанных",                    ОбластьДанных);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ОтборРазделить = "И КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные = &ОбластьДанных";
	Иначе
		ОтборРазделить = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ОтборРазделить);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РазмерПорции = 1000;
	Сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КонтрагентЗапроса = Прокси.ФабрикаXDTO.Создать(КонтрагентФабрикиXDTO);
		ДобавитьКонтрагентаВЗапросКСервису(
			Прокси,
			ВыборкаДетальныеЗаписи,
			КонтрагентыЗапроса,
			КонтрагентЗапроса,
			Ложь);
		
		Если Сч = РазмерПорции Тогда
			ОбновитьЗаписиКэшаСостояний(
				Прокси,
				КонтрагентыЗапроса,
				ОбластьДанных,
				РазмерПорции);
			КонтрагентыЗапроса.NP.Очистить();
			Сч = 0;
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если Сч <> 0 Тогда
		ОбновитьЗаписиКэшаСостояний(
			Прокси,
			КонтрагентыЗапроса,
			ОбластьДанных,
			Сч)
	КонецЕсли;
	
КонецПроцедуры

// Производит получение данных из сервиса и запись результатов проверки
// кэш состояний проверки.
//
// Параметры:
//  Прокси - WSПрокси - параметры прокси сервера сервиса ФНС;
//  КонтрагентыЗапроса - СписокXDTO - список контрагентов, для которых
//                       необходимо получить состояние;
//  ОбластьДанных - Число - номер области данных в которой выполняется обновление;
//  РазмерПорции - Число - количество контрагентов в запросе.
//
Процедура ОбновитьЗаписиКэшаСостояний(
		Прокси,
		КонтрагентыЗапроса,
		ОбластьДанных,
		РазмерПорции)
	
	NdsResponse = ПолучитьСостоянияКонтрагентов(Прокси, КонтрагентыЗапроса);
	Если NdsResponse = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КоличествоОбъектовРавноКоличествуВОтвете(РазмерПорции, NdsResponse.NP.Количество()) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КонтрагентОтвета Из NdsResponse.NP Цикл
		
		Попытка
			
			Запись = РегистрыСведений.КэшСостоянийКонтрагентовФНС.СоздатьМенеджерЗаписи();
			Запись.ИНН          = КонтрагентОтвета.INN;
			Запись.КПП          = КонтрагентОтвета.KPP;
			Запись.ДатаПроверки = СтроковыеФункцииКлиентСервер.СтрокаВДату(КонтрагентОтвета.DT);
			Запись.Состояние    = СостояниеКонтрагента(КонтрагентОтвета.State);
			Запись.Проверен     = Истина;
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
			КонецЕсли;
			
			Запись.Записать();
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				НСтр("ru = 'Обработка ответа от веб-сервиса'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
				
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет дату обновления данных в сервисе ФНС.
//
// Возвращаемое значение:
//  Дата - дата начиная с которой можно использовать кэш состояний ФНС.
//
Функция ДатаОбновленияДанныхФНС()
	
	Возврат НачалоДня(ТекущаяДатаСеанса()) - 7*24*60*60;
	
КонецФункции

// Определяет минимальную дату хранения кэша.
//
// Возвращаемое значение:
//  Дата - дата начиная с которой необходимо хранить кэш.
//
Функция ГраницаАктуальностиКэшаСостояний() Экспорт
	
	Возврат ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -4);
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет области данных, которые содержат не проверенные состояния контрагентов.
//
// Возвращаемое значение:
//  Массив - содержит номера областей, которые хранят не актуальный кэш.
//
Функция ОбластиДанныхПроверкиСостояний()
	
	// В запросе отбираются все области, которые содержат не проверенные
	// данные состояний.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|ГДЕ
		|	КэшСостоянийКонтрагентовФНС.ДатаПроверки <= &ДатаОбновленияДанныхФНС
		|	И КэшСостоянийКонтрагентовФНС.ДатаПроверки >= &ГраницаАктуальностиКэшаСостояний
		|	И НЕ КэшСостоянийКонтрагентовФНС.Проверен
		|	И КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные > &ОбластьДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбластьДанных";
	
	Запрос.УстановитьПараметр("ГраницаАктуальностиКэшаСостояний", ГраницаАктуальностиКэшаСостояний());
	Запрос.УстановитьПараметр("ДатаОбновленияДанныхФНС",          ДатаОбновленияДанныхФНС());
	
	ОбластиДанных = Новый Массив;
	ОбластьДанных = 0;
	
	// Выполняется курсорная выборка, в которой в качестве курсора используется
	// ОбластьДанныхВспомогательныеДанные.
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластиДанных.Добавить(ВыборкаДетальныеЗаписи.ОбластьДанных);
		КонецЦикла;
		
		// Наибольший номер области, который используется для получения
		// следующей порции данных. Дополнительная сортировка не требуется,
		// т.к. данные были упорядоченны в запросе.
		ОбластьДанных = ОбластиДанных[ОбластиДанных.ВГраница()];
		
	КонецЦикла;
	
	Возврат ОбластиДанных;
	
КонецФункции

// Определяет области данных, которые содержат не актуальный кэш.
//
// Возвращаемое значение:
//  Массив - содержит номера областей, которые хранят не актуальный кэш.
//
Функция ОбластиДанныхУдаленияКэша()
	
	// В запросе отбираются все области, которые содержат не актуальный кэш
	// состояний проверки контрагентов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.КэшСостоянийКонтрагентовФНС КАК КэшСостоянийКонтрагентовФНС
		|ГДЕ
		|	КэшСостоянийКонтрагентовФНС.ДатаПроверки < &ГраницаАктуальностиКэшаСостояний
		|	И КэшСостоянийКонтрагентовФНС.ОбластьДанныхВспомогательныеДанные > &ОбластьДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбластьДанных";
	
	Запрос.УстановитьПараметр("ГраницаАктуальностиКэшаСостояний", ГраницаАктуальностиКэшаСостояний());
	
	ОбластиДанных = Новый Массив;
	ОбластьДанных = 0;
	
	// Выполняется курсорная выборка, в которой в качестве курсора используется
	// ОбластьДанныхВспомогательныеДанные.
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластиДанных.Добавить(ВыборкаДетальныеЗаписи.ОбластьДанных);
		КонецЦикла;
		
		// Наибольший номер области, который используется для получения
		// следующей порции данных. Дополнительная сортировка не требуется,
		// т.к. данные были упорядоченны в запросе.
		ОбластьДанных = ОбластиДанных[ОбластиДанных.ВГраница()];
		
	КонецЦикла;
	
	Возврат ОбластиДанных;
	
КонецФункции

// Формирует таблицу, которая используется для отправки запроса в сервис.
//
// Параметры:
//  Состояние - Булево - если Истина, будет добавлена колонка Состояние
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит пустую таблицу значений с колонками:
//   *ИНН - Строка - налоговый номер, по которому необходимо выполнить проверку;
//   *КПП - Строка - код налогового органа, по которому необходимо выполнить проверку;
//   *Дата - Дата - дата состояния;
//   *Состояние - ПеречислениеСсылка.СостоянияСуществованияКонтрагента - состояние по данным ФНС.
//
Функция ОписаниеДанныхПроверок(Состояние = Ложь)
	
	ОписаниеДанных = Новый ТаблицаЗначений;
	ОписаниеДанных.Колонки.Добавить("ИНН",  ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ОписаниеДанных.Колонки.Добавить("КПП",  ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ОписаниеДанных.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Если Состояние Тогда
		ОписаниеДанных.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	КонецЕсли;
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Выполняет преобразование даты проверки в формат сервиса ФНС.
//
// Параметры:
//  Дата - Дата - дата проверки контрагента.
//
// Возвращаемое значение:
//  Строка - представление даты в сервисе ФНС
//
Функция ПредставлениеДатыВСервисе(Знач Дата)
	
	Результат = Неопределено;
	
	// Для предотвращения ошибки "Неверная дата (ранее 01.01.1991 или позднее текущей даты)".
	// Обе даты вычисляем одновременно, чтобы между ними не оказалось сдвига в несколько секунд.
	ТекущаяДатаПК = ТекущаяДатаСеанса();
	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();
	
	НаТекущийДень = (ТипЗнч(Дата) = Тип("Строка") И Дата = Формат(ТекущаяДатаПК, "ДФ=dd.MM.yyyy") // АПК:335 не локализуется (формат веб-сервиса).
		ИЛИ ТипЗнч(Дата) = Тип("Дата") И НачалоДня(Дата) = НачалоДня(ТекущаяДатаПК));
	
	Если НаТекущийДень Тогда
		
		РазницаСервераФНСИВсемирного = 3;
		РазницаПКИВсемирного = (ТекущаяДатаПК - ТекущаяУниверсальнаяДата)/60/60;
		РазницаПКИСервераФНС = РазницаПКИВсемирного - РазницаСервераФНСИВсемирного;
		
		ЧасовойПоясВосточнееФНС = РазницаПКИСервераФНС > 0;
		
		Если ЧасовойПоясВосточнееФНС Тогда
			РазницаВСекундах = РазницаПКИСервераФНС*60*60;
			ТекущаяДатаНаСервере = ТекущаяДатаПК - РазницаВСекундах;
			Дата = НачалоДня(ТекущаяДатаНаСервере);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда 
		Результат = Дата;
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда 
		Результат = Формат(Дата, "ДФ=dd.MM.yyyy"); // АПК:335 не локализуется (формат веб-сервиса).
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет URL wsdl сервиса проверки состояний ФНС.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLWsdlСервисаПроверкиСостоянийФНС()
	
	Возврат "http://"
		+ ХостСервисаПроверкиСостоянийФНС()
		+ "/FNSNDSCAWS_2?wsdl";
	
КонецФункции

// Определяет хост для вызова сервиса проверки состояний ФНС.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаПроверкиСостоянийФНС() Экспорт
	
	Возврат "npchk.nalog.ru";
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  ИмяДополнительногоСобытия - Строка - имя дополнительного события для журнала регистрации.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(
		СообщениеОбОшибке,
		ИмяДополнительногоСобытия = "")
	
	РаботаСКонтрагентами.ЗаписатьОшибкуВЖурналРегистрации(
		СообщениеОбОшибке,
		ИмяСобытияЖурналаРегистрации(),
		ИмяДополнительногоСобытия);
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ПроверкаКонтрагентов.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
