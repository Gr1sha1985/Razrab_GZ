// Отражение в финансовой отчетности отложенных налогов на прибыль.
// Выполнение требований
// - ПБУ 18 "Учет расчетов по налогу на прибыль организаций" (балансовый метод)
// - IAS 12 "Налоги на прибыль"
// - Рекомендации БМЦ Р-102/2019-КпР "Порядок учета налога на прибыль" (далее в тексте - Р-102)

#Область КоллекцииСумм

Функция ОписаниеКоллекцииСумм(ИспользуетсяНалоговыйУчет = Истина, ИспользуютсяРазницыПоНалогуНаПрибыль = Истина) Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет", "Сумма");
	
	Если ИспользуетсяНалоговыйУчет Тогда
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУ");
	КонецЕсли;
	
	Если ИспользуютсяРазницыПоНалогуНаПрибыль Тогда
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль(), "СуммаПР, СуммаВР");
	КонецЕсли;
	
	Возврат ОписаниеСумм;
	
КонецФункции

Функция ИмяНабораСуммРазницыПоНалогуНаПрибыль() Экспорт
	
	Возврат "РазницыПоНалогуНаПрибыль";
	
КонецФункции

Функция ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Экспорт
	
	// Всегда, когда есть набор с разницами, должны быть и наборы для сумм БУ и НУ
	
	Возврат КоллекцииСумм.ЕстьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль());
	
КонецФункции

// Рассчитывает в коллекции Приемник разницы по налогу на прибыль, т.е. обеспечивает выполнение равенства БУ = НУ + ПР + ВР.
// При этом, если равенство не выполняется, то суммы ПР и ВР будут рассчитаны заново исходя из сумм БУ и НУ.
//
// Какие именно суммы в этом случае получатся (как разница между БУ и НУ распределится между ПР или ВР),
// зависит от данных Источника.
// Правила:
// 1. Разница в Приемнике, по возможности (по возможности, при соблюдении правила БУ = НУ + ПР + ВР в Источнике),
//    должна появиться там же, где была в Источнике.
//    Если в Источнике оба вида разниц не равны нулю и имеют одинаковый знак, то делим пропорционально.
// 2. Неосновную разницу ограничиваем с учетом знака: она может быть по модулю меньше, чем в Источнике, но не больше
//    (это может быть запрещено параметром функции)
// 3. В случае сомнений признаем разницу основного вида (по умолчанию - временную).
// 
// Поскольку в соответствии с современной трактовкой ПБУ 18 основной вид разниц - временные,
// то использование постоянных разниц в качестве основного вида считаем оставленным для совместимости.
// Поэтому в таком режиме правила могут выполняться не в полном объеме, чтобы поведение соответствовало предыдущим версиям.
//
// Параметры:
//  Приемник     - Структура - см. КоллекцииСумм.НовыйКоллекцияСумм, модифицируемая коллекция сумм,
//                             должна содержать Сумма, СуммаНУ, СуммаПР, СуммаВР
//                             См. также ОписаниеКоллекцииСумм
//  Источник     - Структура - см. КоллекцииСумм.НовыйКоллекцияСумм, коллекция, используемая как шаблон
//                             должна содержать Сумма, СуммаНУ, СуммаПР, СуммаВР
//                             См. также ОписаниеКоллекцииСумм
//  ОписаниеСумм - Структура - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм. Описание коллекций Приемник и Источник
//  ОграничиватьСуммуРазницыНеосновногоВида
//               - Булево - Ложь, если не требуется ограничивать сумму неосновной разницы с учетом знака
//                          (т.е. допускается относить, например, на постоянные разницы отрицательную сумму,
//                          при условии, если в Источнике постоянные разницы положительны)
//  ОсновнойВидРазниц
//               - ПеречислениеСсылка.ВидыРазницПБУ18 - вид разниц, к которым разница между БУ и НУ относится по умолчанию
//                                  (т.е. если это нельзя однозначно определить из Источника)
//               - Неопределено - по умолчанию разницы относятся к временным
//
Процедура РассчитатьРазницыПоНалогуНаПрибыль(Приемник, Источник, ОписаниеСумм, ОграничиватьСуммуРазницыНеосновногоВида = Истина, ОсновнойВидРазниц = Неопределено) Экспорт
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
		
	Разница = Приемник.Сумма - Приемник.СуммаНУ;
	Если Приемник.СуммаВР + Приемник.СуммаПР = Разница Тогда
		// Уже все хорошо
		Возврат;
	КонецЕсли;
	
	Если ОсновнойВидРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
	
		Если Источник.СуммаПР = 0 И Источник.СуммаВР = 0 Тогда
			Приемник.СуммаПР = Разница;
			Приемник.СуммаВР = 0;
		ИначеЕсли ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Источник.СуммаПР) = ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Источник.СуммаВР) Тогда
			// Делим пропорционально. Знаменатель заведомо ненулевой.
			Приемник.СуммаПР = Окр(Разница / (Источник.СуммаПР + Источник.СуммаВР) * Источник.СуммаПР, БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
			Приемник.СуммаВР = Разница - Приемник.СуммаПР;
		ИначеЕсли Не ОграничиватьСуммуРазницыНеосновногоВида И Источник.СуммаПР = 0 Тогда
			// Выше проверили, что СуммаВР <> 0
			Приемник.СуммаПР = 0;
			Приемник.СуммаВР = Разница;
		ИначеЕсли ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Источник.СуммаВР) = ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Разница) Тогда
			Приемник.СуммаПР = 0;
			Приемник.СуммаВР = Разница;
		Иначе
			Приемник.СуммаПР = Разница;
			Приемник.СуммаВР = 0;
		КонецЕсли;
		
	Иначе
		
		Приемник.СуммаПР = 0;
		
		Если Источник.СуммаПР <> 0 Тогда
			
			Если Источник.СуммаВР = 0 Тогда
				Приемник.СуммаПР = Разница;
			ИначеЕсли ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Источник.СуммаПР) = ОбщегоНазначенияБПКлиентСервер.ЗнакЧисла(Источник.СуммаВР) Тогда
				// Делим пропорционально. Знаменатель заведомо ненулевой.
				Приемник.СуммаПР = Окр(
					Разница / (Источник.СуммаПР + Источник.СуммаВР) * Источник.СуммаПР,
					БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
			КонецЕсли;
			
			Если ОграничиватьСуммуРазницыНеосновногоВида И Приемник.СуммаПР <> 0 Тогда
				// Применим ограничение разницы с учетом знака
				Если Источник.СуммаПР > 0 И Разница > 0 Тогда
					Приемник.СуммаПР = Мин(Источник.СуммаПР, Разница);
				ИначеЕсли Источник.СуммаПР < 0 И Разница < 0 Тогда
					Приемник.СуммаПР = Макс(Источник.СуммаПР, Разница);
				Иначе
					// знак не подходящий
					Приемник.СуммаПР = 0;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
			
		Приемник.СуммаВР = Разница - Приемник.СуммаПР;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ИсправитьПогрешностиОкругления(Доли, ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель, ОсновнойВидРазниц = Неопределено) Экспорт
	
	Если Числитель = Знаменатель Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеСуммы.СуммаПР = 0 И ИсходныеСуммы.СуммаВР = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В исходных суммах может соблюдаться равенство БУ = НУ + ПР + ВР.
	// При расчете долей равенство может нарушиться на копейки за счет погрешностей округления.
	//
	// В исходных суммах равенство может и не соблюдаться.
	// Чтобы не зависеть от того, соблюдалось равенство или нет в исходных суммах,
	// введем сумму Контроль = БУ - НУ - ПР - ВР.
	//
	// От этой суммы рассчитаем долю по тому же алгоритму, что и для других сумм.
	// А затем обеспечим, чтобы для коллекции с долями выполнялось равенство Контроль = БУ - НУ - ПР - ВР:
	// при необходимости исправим сумму ПР или ВР.
	
	КонтрольнаяСуммаИсходная = ИсходныеСуммы.Сумма - ИсходныеСуммы.СуммаНУ - ИсходныеСуммы.СуммаПР - ИсходныеСуммы.СуммаВР;
	КонтрольнаяСуммаДоли     = Доли.Сумма          - Доли.СуммаНУ          - Доли.СуммаПР          - Доли.СуммаВР;
	
	ДоляИсходнойКонтрольнойСуммы = КоллекцииСумм.ДоляСуммы(КонтрольнаяСуммаИсходная, Числитель, Знаменатель);
	Погрешность                  = КонтрольнаяСуммаДоли - ДоляИсходнойКонтрольнойСуммы; // Сумма, которую надо добавить к разницам
	
	Если Погрешность = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СуммыПогрешности = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	СуммыПогрешности.Сумма = Погрешность;
	РассчитатьРазницыПоНалогуНаПрибыль(СуммыПогрешности, ИсходныеСуммы, ОписаниеСумм, Ложь, ОсновнойВидРазниц);
	СуммыПогрешности.Сумма = 0;
	КоллекцииСумм.Сложить(Доли, СуммыПогрешности, ОписаниеСумм);
		
КонецПроцедуры

#КонецОбласти

#Область ПереходныйПериод

Функция ВариантУчетаОтложенногоНалога(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.ВариантУчетаОтложенногоНалога КАК ВариантУчетаОтложенногоНалога
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ВариантУчетаОтложенногоНалога) Тогда
		Возврат Выборка.ВариантУчетаОтложенногоНалога;
	Иначе
		Возврат Перечисления.ВариантыУчетаОтложенногоНалога.Нет;
	КонецЕсли;
	
КонецФункции

Функция ОсновнойВидРазниц(Период, Организация) Экспорт
	
	Если ВариантУчетаОтложенногоНалога(Период, Организация) = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод
		И Не НалогНаПрибыльБухгалтерскийУчетКлиентСервер.Приказ236нОбязателен(Период) Тогда
		Возврат Перечисления.ВидыРазницПБУ18.ПР;
	Иначе
		Возврат Перечисления.ВидыРазницПБУ18.ВР;
	КонецЕсли;
	
КонецФункции

Процедура ИнициализироватьРасчетОтложенногоНалога(Движения, ПериодРасчета, Организация) Экспорт
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(Организация, ПериодРасчета);
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перечисления.ВариантыУчетаОтложенногоНалога.ЭтоБалансовыйМетод(КонтекстРасчета.ВариантУчетаОтложенногоНалога) Тогда
		// Используется при переходе от затратного к балансовому методу
		Возврат;
	КонецЕсли;
	
	НачальныеДанныеОтчетнаяДата = КонтекстРасчета.НачалоНалоговогоПериода;
	
	// При выполнении регламентной операции или при инициализации сведения о примененных ставках записываются всегда,
	// а сведения о суммах отложенного налога - только при наличии временных разниц.
	// Поэтому проверка записей о ставках эффективнее.
	НачальныеДанныеПериодРасчета = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПериодРасчета(
		НачальныеДанныеОтчетнаяДата,
		КонтекстРасчета.Организация,
		ПериодРасчета);
		
	Если ЗначениеЗаполнено(НачальныеДанныеПериодРасчета) Тогда
		// Инициализировано
		Возврат;
	КонецЕсли;
	
	// См. также РассчитатьОтложенныйНалог()
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСальдоВременныхРазниц(
		МенеджерВременныхТаблиц,
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.Организации,
		КонтекстРасчета.ВариантУчетаОтложенногоНалога);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаОтложенныйНалог",   СчетаОтложенныйНалог());
	Запрос.УстановитьПараметр("НеиспользованныеАктивы", Перечисления.ВидыАктивовИОбязательств.НеиспользованныеНалоговыеУбыткиВычеты());
	Запрос.УстановитьПараметр("ОтчетнаяДата",           НачальныеДанныеОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",            КонтекстРасчета.Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущиеДанные.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|	ТекущиеДанные.ВидАктивовОбязательств КАК ВидАктивовИОбязательств,
	|	ТекущиеДанные.Счет КАК Счет,
	|	ТекущиеДанные.Филиал КАК Филиал,
	|	ТекущиеДанные.Подразделение КАК Подразделение,
	|	ТекущиеДанные.Субконто1 КАК Субконто1,
	|	ТекущиеДанные.Субконто2 КАК Субконто2,
	|	ТекущиеДанные.Субконто3 КАК Субконто3,
	|	СУММА(ТекущиеДанные.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	СУММА(ТекущиеДанные.НалоговаяСтоимость) КАК НалоговаяСтоимость,
	|	СУММА(ТекущиеДанные.ВременнаяРазница) КАК ВременнаяРазница,
	|	0 КАК ОтложенныйНалог
	|ИЗ
	|	СальдоВременныхРазниц КАК ТекущиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеДанные.СчетОтложенногоНалога,
	|	ТекущиеДанные.ВидАктивовОбязательств,
	|	ТекущиеДанные.Счет,
	|	ТекущиеДанные.Филиал,
	|	ТекущиеДанные.Подразделение,
	|	ТекущиеДанные.Субконто1,
	|	ТекущиеДанные.Субконто2,
	|	ТекущиеДанные.Субконто3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сальдо.Счет,
	|	Сальдо.Субконто1,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	0,
	|	Сальдо.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В (&СчетаОтложенныйНалог),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И НЕ Субконто1 В (&НеиспользованныеАктивы)) КАК Сальдо
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств,
	|	Счет,
	|	Филиал,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИТОГИ
	|	СУММА(ВременнаяРазница),
	|	СУММА(ОтложенныйНалог)
	|ПО
	|	ОБЩИЕ,
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств";
	
	// Сначала определим ставку налога:
	// - проверим предположение, что подходит установленная ставка
	// - если не подходит, то рассчитаем исходя из сумм налога.
	
	ВременныеРазницыДляРасчетаСтавки = 0;
	ОтложенныйНалогДляРасчетаСтавки  = 0;
	ИсключенныеИзРасчетаСуммы = Новый Массив;
	
	ВыборкаОбщие = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьДанные = ВыборкаОбщие.Следующий();
	Если ЕстьДанные Тогда
		// Выборка по счету используется для записи данных расчета, но может потребоваться и для расчета ставки
		ВыборкаСчетОтложенногоНалога = ВыборкаОбщие.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	КонецЕсли;
	
	Если Не ЕстьДанные Тогда
		ВременныеРазницыДляРасчетаСтавки = 0;
		ОтложенныйНалогДляРасчетаСтавки  = 0;
	ИначеЕсли ВыборкаОбщие.ОтложенныйНалог >= 0 И ВыборкаОбщие.ВременнаяРазница < 0 Тогда
		ВременныеРазницыДляРасчетаСтавки  = - ВыборкаОбщие.ВременнаяРазница;
		ОтложенныйНалогДляРасчетаСтавки   = ВыборкаОбщие.ОтложенныйНалог;
	ИначеЕсли ВыборкаОбщие.ОтложенныйНалог <= 0 И ВыборкаОбщие.ВременнаяРазница > 0 Тогда
		ВременныеРазницыДляРасчетаСтавки  = ВыборкаОбщие.ВременнаяРазница;
		ОтложенныйНалогДляРасчетаСтавки   = - ВыборкаОбщие.ОтложенныйНалог;
	Иначе
		// Данные в целом некорректны - знак временных разниц не соответствует знаку отложенного налога.
		// Рассчитывать по ним ставку не имеет смысла.
		// Рассчитаем ставку только по тем активам и обязательствам, где со знаками все в порядке.
		
		Пока ВыборкаСчетОтложенногоНалога.Следующий() Цикл
			
			ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборкаВидАктивовОбязательств.ОтложенныйНалог > 0
					И ВыборкаВидАктивовОбязательств.ВременнаяРазница < 0 Тогда
					ОтложенныйНалогБезЗнака  = ВыборкаВидАктивовОбязательств.ОтложенныйНалог;
					ВременнаяРазницаБезЗнака = - ВыборкаВидАктивовОбязательств.ВременнаяРазница;
				ИначеЕсли ВыборкаВидАктивовОбязательств.ОтложенныйНалог < 0
					И ВыборкаВидАктивовОбязательств.ВременнаяРазница > 0 Тогда
					ОтложенныйНалогБезЗнака  = - ВыборкаВидАктивовОбязательств.ОтложенныйНалог;
					ВременнаяРазницаБезЗнака = ВыборкаВидАктивовОбязательств.ВременнаяРазница;
				Иначе
					СуммыПоВидуАктивовОбязательств = Новый Массив;
					СуммыПоВидуАктивовОбязательств.Добавить(ВыборкаВидАктивовОбязательств.ВременнаяРазница);
					СуммыПоВидуАктивовОбязательств.Добавить(ВыборкаВидАктивовОбязательств.ОтложенныйНалог);
					ИсключенныеИзРасчетаСуммы.Добавить(СуммыПоВидуАктивовОбязательств);
					Продолжить;
				КонецЕсли;
				
				ВременныеРазницыДляРасчетаСтавки = ВременныеРазницыДляРасчетаСтавки + ВременнаяРазницаБезЗнака;
				ОтложенныйНалогДляРасчетаСтавки  = ОтложенныйНалогДляРасчетаСтавки  + ОтложенныйНалогБезЗнака;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ВыборкаСчетОтложенногоНалога.Сбросить();
		
	КонецЕсли;
	
	ПротоколыРасчетаСтавок = Новый Соответствие;
	
	// Отложенный налог должен быть рассчитан исходя из установленной ставки.
	// Далее протестируем: если установим, что это не так, то запишем и фактически использованную
	ПротоколРасчетаСтавки = НовыйПротоколРасчетаСтавкиНалога();
	ПротоколыРасчетаСтавок.Вставить(
		Перечисления.ВидыСтавокОтложенногоНалога.ПервоеПрименение,
		ПротоколРасчетаСтавки);
	ПротоколыРасчетаСтавок.Вставить(
		Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог,
		ПротоколРасчетаСтавки);
		
	ПротоколРасчетаСтавки.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
	ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ДатаРасчетаСтавки", НачальныеДанныеОтчетнаяДата);
	УстановленнаяСтавкаНалога = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		ПротоколРасчетаСтавки.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
		
	ПредыдущийПериод = НачальныеДанныеОтчетнаяДата - 1;
	РасчетРаспределенияНалоговойБазы = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ПрочитатьРасчетРаспределенияНалоговойБазы(
		РасчетРаспределенияНалоговойБазы,
		ПредыдущийПериод,
		КонтекстРасчета.Организация);
		
	Если РасчетРаспределенияНалоговойБазы <> Неопределено Тогда
		СкорректироватьСтавкуПоДолямНалоговойБазы(
			УстановленнаяСтавкаНалога,
			ПредыдущийПериод,
			КонтекстРасчета.Организация,
			РасчетРаспределенияНалоговойБазы,
			ПротоколРасчетаСтавки);
	КонецЕсли;
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	// Убедимся, что подходит
	СуммаОтложенногоНалогаПоСтавке = ВременныеРазницыДляРасчетаСтавки * УстановленнаяСтавкаНалога;
	СуммаОтложенногоНалогаПоСтавке = ТипСумма.ПривестиЗначение(СуммаОтложенногоНалогаПоСтавке);
	
	Погрешность = СуммаОтложенногоНалогаПоСтавке - ОтложенныйНалогДляРасчетаСтавки;
	Если Погрешность = 0 Тогда
		ОтносительнаяПогрешностьСтавки = 0;
	ИначеЕсли ОтложенныйНалогДляРасчетаСтавки = 0 Тогда
		ОтносительнаяПогрешностьСтавки = 1 + ЭмпирическоеЗначениеПогрешностиСтавки(); // относительная погрешность очень большая (заведомо больше границы)
	Иначе
		ОтносительнаяПогрешностьСтавки = Погрешность / ОтложенныйНалогДляРасчетаСтавки;
		Если ОтносительнаяПогрешностьСтавки < 0 Тогда
			ОтносительнаяПогрешностьСтавки = - ОтносительнаяПогрешностьСтавки;
		КонецЕсли;
	КонецЕсли;
	
	РасчетнаяСтавкаНалога = Неопределено;
	Если ОтносительнаяПогрешностьСтавки > ЭмпирическоеЗначениеПогрешностиСтавки() Тогда
		// Установленная ставка не подходит
		ПротоколРасчетаСтавки = НовыйПротоколРасчетаСтавкиНалога();
		ПротоколыРасчетаСтавок.Вставить(
			Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог,
			ПротоколРасчетаСтавки);
		
		ПротоколРасчетаСтавки.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПоСуммеОтложенногоНалога;
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ВременныеРазницы",          ВременныеРазницыДляРасчетаСтавки);
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ОтложенныйНалог",           ОтложенныйНалогДляРасчетаСтавки);
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ИсключенныеИзРасчетаСуммы", ИсключенныеИзРасчетаСуммы);
		Если ПротоколРасчетаСтавки.ДанныеАлгоритма.ВременныеРазницы <> 0 Тогда
			РасчетнаяСтавкаНалога = ОкруглитьСтавкуНалога(
				ПротоколРасчетаСтавки.ДанныеАлгоритма.ОтложенныйНалог
				/ ПротоколРасчетаСтавки.ДанныеАлгоритма.ВременныеРазницы);
			Если РасчетнаяСтавкаНалога < 0 Или РасчетнаяСтавкаНалога > 1 Тогда
				РасчетнаяСтавкаНалога = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Записи = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетОтложенногоНалога);
	
	// Запишем детальные данные расчета - исходя из установленной ставки
	// Отклонения - отдельными строками
	Пока ЕстьДанные И ВыборкаСчетОтложенногоНалога.Следующий() Цикл
		
		ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств) Тогда
				Продолжить;
			КонецЕсли;
			
			ВременнаяРазница = ВыборкаВидАктивовОбязательств.ВременнаяРазница;
			ОтложенныйНалог  = - ВременнаяРазница * УстановленнаяСтавкаНалога;
			Отклонение       = ВыборкаВидАктивовОбязательств.ОтложенныйНалог - ОтложенныйНалог;
			Если Отклонение <> 0 Тогда
				ЗаписьОтклонение = Записи.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОтклонение, ВыборкаВидАктивовОбязательств, , "ВременнаяРазница,ОтложенныйНалог");
				ЗаписьОтклонение.ОтложенныйНалог = Отклонение; // 0
				// Учтем погрешность округления общей суммы (округление выполнилось при присваивании значения типизированной колонке).
				ПогрешностьОкругления = Отклонение - ЗаписьОтклонение.ОтложенныйНалог;
				ОтложенныйНалог       = ОтложенныйНалог + ПогрешностьОкругления;
				Если ЗаписьОтклонение.ОтложенныйНалог = 0 Тогда
					// значение оказалось ниже порога округления
					Записи.Удалить(ЗаписьОтклонение);
				КонецЕсли;
			КонецЕсли;
			
			// Порядок работы с погрешностью округления - такой же, как в РассчитатьОтложенныйНалог,
			// чтобы погрешности округления относились на одни и те же объекты
			ПогрешностьОкругленияСуммарногоЗначенияНакопленная = 0;
			
			Выборка = ВыборкаВидАктивовОбязательств.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОстатокСтрок = Выборка.Количество();
			Пока Выборка.Следующий() Цикл
				
				ОстатокСтрок = ОстатокСтрок - 1;
				
				Если Не ЗначениеЗаполнено(Выборка.ВременнаяРазница) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьВременныеРазницы = Записи.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьВременныеРазницы, Выборка);
				
				Если ОстатокСтрок = 0 Тогда
					// В последнюю строку относим остаток, чтобы избежать ошибки округления детальных сумм, которая уже не может быть погашена
					ЗаписьВременныеРазницы.ОтложенныйНалог = ОтложенныйНалог;
				Иначе
					
					ОтложенныйНалогОбъекта = - Выборка.ВременнаяРазница * УстановленнаяСтавкаНалога;
					// Заботимся, чтобы не накапливалась погрешность округления
					ПогрешностьОкругленияСуммарногоЗначения = 0;
					ДополнитьОкругленнымЗначением(
						ЗаписьВременныеРазницы.ОтложенныйНалог,
						ОтложенныйНалогОбъекта,
						ПогрешностьОкругленияСуммарногоЗначения,
						Ложь);
					ПогрешностьОкругленияСуммарногоЗначенияНакопленная = ПогрешностьОкругленияСуммарногоЗначения
						+ ПогрешностьОкругленияСуммарногоЗначенияНакопленная;
						
					УстранитьПогрешностьОкругления(
						ЗаписьВременныеРазницы.ОтложенныйНалог,
						ПогрешностьОкругленияСуммарногоЗначенияНакопленная);
						
					ОтложенныйНалог = ОтложенныйНалог - ЗаписьВременныеРазницы.ОтложенныйНалог;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Записи.ЗаполнитьЗначения(НачальныеДанныеОтчетнаяДата, "ОтчетнаяДата");
	
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(ПериодРасчета, КонтекстРасчета.Организация);
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Записи,
		РеквизитыЗаписи,
		"РасчетОтложенногоНалога");
		
	СтавкиНалога = Новый Соответствие;
	СтавкиНалога.Вставить(Перечисления.ВидыСтавокОтложенногоНалога.ПервоеПрименение, УстановленнаяСтавкаНалога);
	СтавкиНалога.Вставить(Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог,     УстановленнаяСтавкаНалога);
	Если РасчетнаяСтавкаНалога <> Неопределено Тогда
		СтавкиНалога.Вставить(Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог, РасчетнаяСтавкаНалога);
	КонецЕсли;
	
	РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ЗаписатьРасчетСтавокНалога(
		Движения,
		СтавкиНалога,
		ПротоколыРасчетаСтавок,
		ПериодРасчета,
		КонтекстРасчета.Организация,
		НачальныеДанныеОтчетнаяДата);
		
КонецПроцедуры

Функция ЭмпирическоеЗначениеПогрешностиСтавки()
	
	Возврат 0.002;
	
КонецФункции

Процедура ОбновитьКонстантыГлобальногоИнтерфейса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаДавно", НачалоГода(ДобавитьМесяц(ТекущаяДата(), -6)));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ ПлательщикиНалогаНаПрибыль
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ГраницаДавно, ) КАК Настройки
	|ГДЕ
	|	Настройки.ПлательщикНалогаНаПрибыль
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК Настройки
	|ГДЕ
	|	Настройки.ПлательщикНалогаНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(УчетнаяПолитика.БалансовыйМетод) КАК БалансовыйМетод,
	|	МАКСИМУМ(УчетнаяПолитика.ЗатратныйМетод) КАК ЗатратныйМетод
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетод)
	|			ИЛИ УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы) КАК БалансовыйМетод,
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод) КАК ЗатратныйМетод
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитика.СрезПоследних(
	|				&ГраницаДавно,
	|				Организация В
	|					(ВЫБРАТЬ
	|						ПлательщикиНалогаНаПрибыль.Организация
	|					ИЗ
	|						ПлательщикиНалогаНаПрибыль)) КАК УчетнаяПолитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетод)
	|			ИЛИ УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы),
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлательщикиНалогаНаПрибыль КАК ПлательщикиНалогаНаПрибыль
	|			ПО УчетнаяПолитика.Организация = ПлательщикиНалогаНаПрибыль.Организация
	|	ГДЕ
	|		УчетнаяПолитика.Период > &ГраницаДавно) КАК УчетнаяПолитика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Константы.ОтложенныйНалогЗатратныйМетод.Установить(Выборка.ЗатратныйМетод = Истина);
		Константы.ОтложенныйНалогБалансовыйМетод.Установить(Выборка.БалансовыйМетод = Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентнаяОперация

Процедура ОтразитьПоследствияНачисленияНалога(Движения, Период, Организация, Ссылка) Экспорт
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(Организация, Период);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перечисления.ВариантыУчетаОтложенногоНалога.ЭтоБалансовыйМетод(КонтекстРасчета.ВариантУчетаОтложенногоНалога) Тогда
		// Для затратного метода см. РасчетНалогаНаПрибыль.РассчитатьОтложенныйНалог
		Возврат;
	КонецЕсли;
	
	НачисленныйНалог = НачисленныйНалог(КонтекстРасчета);
	
	// ПБУ18.20
	// Расход (доход) по налогу на прибыль определяется как сумма текущего налога на прибыль и отложенного налога на прибыль.
	
	// Рассчитываем
	РасчетОтложенногоНалога = РассчитатьОтложенныйНалог(КонтекстРасчета, НачисленныйНалог);
	
	РасчетРасходаПоНалогу = РассчитатьРасходПоНалогу(КонтекстРасчета, РасчетОтложенногоНалога, НачисленныйНалог);
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы Тогда
		РассчитатьТекущийНалог(РасчетРасходаПоНалогу, КонтекстРасчета, РасчетОтложенногоНалога);
	КонецЕсли;
	
	// Формируем проводки
	ЗаписатьИзменениеОтложенногоНалога(Движения.Хозрасчетный, РасчетОтложенногоНалога, КонтекстРасчета);
	
	ЗаписатьРасчетНалога(
		Движения.Хозрасчетный,
		РасчетРасходаПоНалогу,
		НачисленныйНалог,
		КонтекстРасчета);
		
	ЗаписатьВлияниеУбыткаТекущегоПериода(
		Движения.Хозрасчетный,
		РасчетРасходаПоНалогу.ВлияниеУбыткаТекущегоПериода,
		КонтекстРасчета);
		
	ЗакрытьСчетРасчетаНалога(Движения.Хозрасчетный, КонтекстРасчета);
		
	// Записываем протокол
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетОтложенногоНалога.ВременныеРазницы,
		РеквизитыЗаписи,
		"РасчетОтложенногоНалога");
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетОтложенногоНалога.ЭффектИзмененияСтавокНалогаНаПрибыль,
		РеквизитыЗаписи,
		"РасчетЭффектаИзмененияСтавокНалогаНаПрибыль");
		
	РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ЗаписатьРасчетСтавокНалога(
		Движения,
		РасчетОтложенногоНалога.СтавкиНалога,
		РасчетОтложенногоНалога.ПротоколРасчетаСтавокНалога,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
		
	ЗаписатьРасчетПоказателейОтложенногоНалога(Движения, РасчетРасходаПоНалогу, РеквизитыЗаписи);
	
КонецПроцедуры

// Определяет перечень счетов, в корреспонденции с которыми отражается начисление налога на прибыль
// в вариантах, когда ПБУ 18 применяется.
// 
// Возвращаемое значение:
//  Массив - содержит ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаТекущегоНалога() Экспорт
	
	СчетаТекущегоНалога = Новый Массив;
	СчетаТекущегоНалога.Добавить(ПланыСчетов.Хозрасчетный.ТекущийНалогНаПрибыль); // 99.02.Т, см. Р-102
	СчетаТекущегоНалога.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль); // Традиционный 68.04.2
	
	Возврат СчетаТекущегоНалога;
	
КонецФункции

#Область Коллекции

// В роли КонтекстРасчета используется РасчетНалогаНаПрибыль.НовыйКонтекстРасчета

Функция НовыйРасчетОтложенногоНалога()
	
	Расчет = Новый Структура;
	
	// Все сведения о расчете отложенного налога с детализацией, как на счетах 09 и 77
	Расчет.Вставить("ОтложенныйНалог", НовыйИзменениеОтложенногоНалога());
	
	// Часть сведений о расчете отложенного налога, определяемая с большей детализацией, чем на счетах 09 и 77:
	// - величина отложенных налоговых активов и обязательств на отчетную дату
	// - эффект изменения временных разниц
	Расчет.Вставить(
		"ВременныеРазницы",
		ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетОтложенногоНалога));
		
	// Часть сведений, раскрывающая эффект изменения ставок налога - с детализацией, как на счетах 09 и 77
	Расчет.Вставить(
		"ЭффектИзмененияСтавокНалогаНаПрибыль",
		ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль));
	
	// IAS12.46 "Обязательства (активы) по текущему налогу за текущий и предыдущие периоды оцениваются в сумме,
	//           которую ожидается уплатить налоговым органам (истребовать к возмещению налоговыми органами),
	//           рассчитанной с использованием ставок налога (и налогового законодательства),
	//           действующих или по существу принятых по состоянию на конец отчетного периода."
	//
	// ПБУ18.14 "ставку налога на прибыль, установленную законодательством Российской Федерации о налогах и сборах и действующую на отчетную дату"
	Расчет.Вставить("СтавкиНалога",                Новый Соответствие);
	Расчет.Вставить("ПротоколРасчетаСтавокНалога", Новый Соответствие);
	Для Каждого МетаданныеВидСтавки Из Метаданные.Перечисления.ВидыСтавокОтложенногоНалога.ЗначенияПеречисления Цикл
		ВидСтавки = Перечисления.ВидыСтавокОтложенногоНалога[МетаданныеВидСтавки.Имя];
		Расчет.СтавкиНалога.Вставить(ВидСтавки, 0);
		Расчет.ПротоколРасчетаСтавокНалога.Вставить(ВидСтавки, НовыйПротоколРасчетаСтавкиНалога());
	КонецЦикла;
	
	// Данные о начале отчетного периода, приведенные в соответствии с соглашениями регистра РасчетОтложенногоНалога
	Расчет.Вставить("НачальныеДанныеОтчетнаяДата",  '0001-01-01'); // соответствует измерению ОтчетнаяДата
	Расчет.Вставить("НачальныеДанныеПериодРасчета", '0001-01-01'); // соответствует измерению ПериодРасчета
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйИзменениеОтложенногоНалога()
	
	Изменение = Новый ТаблицаЗначений;
	
	// Изменение
	Измерения     = Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль.Измерения;
	РесурсыРазниц = Метаданные.РегистрыСведений.РасчетОтложенногоНалога.Ресурсы;
	РесурсыСтавок = Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль.Ресурсы;
	
	Изменение.Колонки.Добавить("Счет",                                Измерения.Счет.Тип);
	Изменение.Колонки.Добавить("ВидАктивовИОбязательств",             Измерения.ВидАктивовИОбязательств.Тип);
	// на отчетную дату
	Изменение.Колонки.Добавить("ОтложенныйНалог",                     РесурсыРазниц.ОтложенныйНалог.Тип);
	// за налоговый период
	Изменение.Колонки.Добавить("ЭффектУвеличенияВременныхРазниц",     РесурсыРазниц.ЭффектУвеличенияВременныхРазниц.Тип);
	Изменение.Колонки.Добавить("ЭффектУменьшенияВременныхРазниц",     РесурсыРазниц.ЭффектУменьшенияВременныхРазниц.Тип);
	Изменение.Колонки.Добавить("ЭффектИзмененияСтавкиБудущегоНалога", РесурсыСтавок.ЭффектИзмененияСтавкиБудущегоНалога.Тип);
	Изменение.Колонки.Добавить("ЭффектИзмененияСтавкиТекущегоНалога", РесурсыСтавок.ЭффектИзмененияСтавкиТекущегоНалога.Тип);
	Изменение.Колонки.Добавить("ПогрешностьОкругления",               РесурсыРазниц.ПогрешностьОкругления.Тип);
	// Эффект изменения ставки может быть посчитан двумя способами:
	// - "каноническим", через отношение ставок,                                  E = T0 * (Rc / R0 - 1)
	// - "практическим", через разность суммы по новой ставке и по старой ставке, E = D0 * Rc - T0
	// (обозначения см. в РассчитатьОтложенныйНалог)
	//
	// В случае, когда все активы и обязательства оценены по одинаковой ставке, оба метода должны давать одинаковый результат.
	// Это следует исходя из того, что T0 = D0 * R0
	// Тогда, E = T0 * (Rc / R0 - 1) = T0 * Rc / R0 - T0 = D0 * R0 * Rc / R0 - T0 = D0 * Rc - T0
	//
	// Однако, когда исходные данные некорректны и для разных активов и обязательств ставка отличается,
	// "практический" метод дает проверяемый результат, а "канонический" - нет.
	//
	// Для того, чтобы в справке-расчете показать пользователю, как именно можно проверить результат,
	// потребуется информация, применимы ли в конкретном случае оба способа или только "практический".
	//
	// Если они дают достаточно похожий (с учетом погрешности округления) результат, то применимы оба способа.
	// Если есть заметное расхождение, то "канонический" применять нельзя.
	Изменение.Колонки.Добавить(
		"РасхождениеМетодовОценкиЭффектаИзмененияСтавкиТекущегоНалога",
		РесурсыСтавок.РасхождениеМетодовОценкиЭффектаИзмененияСтавкиТекущегоНалога.Тип);
	// для формирования проводок
	Изменение.Колонки.Добавить("УвеличениеОтложенногоНалога",         РесурсыРазниц.ЭффектУвеличенияВременныхРазниц.Тип);
	Изменение.Колонки.Добавить("УменьшениеОтложенногоНалога",         РесурсыРазниц.ЭффектУменьшенияВременныхРазниц.Тип);
	Изменение.Колонки.Добавить("Пересчет",                            РесурсыРазниц.ОтложенныйНалог.Тип);
	
	Возврат Изменение;
	
КонецФункции

#КонецОбласти

#Область НалоговыеСтавки

Процедура ОпределитьСтавкиНалога(Расчет, ОбщаяСуммаНалога, КонтекстРасчета)
	
	РасчетРаспределенияНалоговойБазы = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ПрочитатьРасчетРаспределенияНалоговойБазы(
		РасчетРаспределенияНалоговойБазы,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
	
	// ТекущийНалог
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог] = СтавкаТекущегоНалога(
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазы,
		ОбщаяСуммаНалога,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог]);
		
	// БудущийНалог
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог] =
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
		
	УточнитьСтавкуБудущегоНалога(
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог],
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазы,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог]);
		
	// ПредыдущаяОценка
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка] =
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
		
	УточнитьСтавкуНачалоПериода(
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка],
		КонтекстРасчета,
		Расчет.НачальныеДанныеОтчетнаяДата,
		Расчет.НачальныеДанныеПериодРасчета,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка]);
		
КонецПроцедуры

// IAS12.46 "Обязательства (активы) по текущему налогу за текущий и предыдущие периоды оцениваются в сумме,
//           которую ожидается уплатить налоговым органам (истребовать к возмещению налоговыми органами),
//           рассчитанной с использованием ставок налога (и налогового законодательства),
//           действующих или по существу принятых по состоянию на конец отчетного периода."
//
// ПБУ18.14 "ставку налога на прибыль, установленную законодательством Российской Федерации о налогах и сборах
//          и действующую на отчетную дату"
//
Функция СтавкаТекущегоНалога(КонтекстРасчета, РасчетРаспределенияНалоговойБазы, ОбщаяСуммаНалога, Протокол)
	
	Протокол.ДанныеАлгоритма.Вставить(
		"ДатаРасчетаСтавки",
		Макс(КонтекстРасчета.КонецПериода, КонтекстРасчета.НалоговыйПериод));
	
	СтавкаНалога = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
	
	Если РасчетРаспределенияНалоговойБазы = Неопределено Тогда
		
		Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
		
	Иначе
		
		// Для разных регионов могут быть установлены разные ставки.
		// Следует учесть эти различия (предварительно проверив, что они фактически есть).
		
		СтавкиРегиональныйБюджет = Новый Соответствие;
		НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
			СтавкиРегиональныйБюджет,
			Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
			КонтекстРасчета.Организация,
			РасчетРаспределенияНалоговойБазы.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"));
			
		ФактическиИспользуетсяЕдинаяСтавка = Ложь;	
		СтавкаРегиональныйБюджет           = Неопределено;
		Для Каждого ОписаниеСтавки Из СтавкиРегиональныйБюджет Цикл
			Если СтавкаРегиональныйБюджет = Неопределено Тогда
				СтавкаРегиональныйБюджет           = ОписаниеСтавки.Значение;
				ФактическиИспользуетсяЕдинаяСтавка = Истина;
			ИначеЕсли СтавкаРегиональныйБюджет <> ОписаниеСтавки.Значение Тогда
				ФактическиИспользуетсяЕдинаяСтавка = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФактическиИспользуетсяЕдинаяСтавка Тогда
			
			Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
			
			Если СтавкаРегиональныйБюджет <> Неопределено Тогда
				
				// Региональная ставка в единственном регионе фактической деятельности организации
				// может быть иной, чем установлена для организации в целом.
				// Рассчитаем суммарную ставку исходя из региональной ставки.
				
				Протокол.ДанныеАлгоритма.Вставить("СтавкаРегиональныйБюджет", СтавкаРегиональныйБюджет);
				Протокол.ДанныеАлгоритма.Вставить("СтавкаФедеральныйБюджет",  0);
				
				Протокол.ДанныеАлгоритма.СтавкаФедеральныйБюджет = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(
					Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
					КонтекстРасчета.Организация);
					
				СтавкаНалога = Протокол.ДанныеАлгоритма.СтавкаФедеральныйБюджет + Протокол.ДанныеАлгоритма.СтавкаРегиональныйБюджет;
					
			КонецЕсли;
			
		Иначе
			
			// В территориально-распределенной организации при наличии разных ставок налога в разных регионах 
			// определить ставку "установленную законодательством Российской Федерации о налогах и сборах"
			// опираясь непосредственно на законодательство непросто,
			// так как следует учесть
			// - влияние подразделений, закрытых в течение периода
			// - влияние округления суммы налоговой базы и налога. 
			// Поэтому, когда это возможно, для определения фактически действующей ставки за отчетный период
			// рассчитаем ее как отношение суммы налога к налоговой базе.
			
			Протокол.ДанныеАлгоритма.Вставить(
				"НалоговаяБаза",
				РасчетРаспределенияНалоговойБазы.Итог("НалоговаяБаза"));
				
			Протокол.ДанныеАлгоритма.Вставить(
				"ОбщаяСуммаНалога",
				ОбщаяСуммаНалога);
				
			Если Протокол.ДанныеАлгоритма.НалоговаяБаза > 0 И Протокол.ДанныеАлгоритма.ОбщаяСуммаНалога > 0 Тогда
				// Рассчитываем через фактические показатели налоговой базы и начисленного налога
				Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПоНалоговойБазе;
				СтавкаНалога = ОкруглитьСтавкуНалога(
					Протокол.ДанныеАлгоритма.ОбщаяСуммаНалога
					/ Протокол.ДанныеАлгоритма.НалоговаяБаза);
			Иначе
				// Применяем ставки, установленные в отчетном периоде
				СкорректироватьСтавкуПоДолямНалоговойБазы(
					СтавкаНалога,
					Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
					КонтекстРасчета.Организация,
					РасчетРаспределенияНалоговойБазы,
					Протокол);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтавкаНалога;
		
КонецФункции

// В общем случае, отложенный налог должен быть оценен по ставке,
// которая будет действовать при погашении отложенных налоговых активов и обязательств.
//
// Как правило, сложно определить, когда именно они будут погашены и какая будет ставка.
// Поэтому, в типовом решении используем ставку, установленную на следующий отчетный период.
// Если в разных регионах деятельности предприятия отличаются ставки, то корректируем ставку 
// в соответствии с правилами распределения налоговой базы, установленными НК.
// При этом
// - используем те показатели, что сложились на отчетную дату
// - исключаем из них показатели закрытых подразделений -
//   очевидно, они не повлияют на распределение прибыли в будущем.
// 
// При необходимости учитывать другие параметры, эту процедуру рекомендуется переопределить.
//
Процедура УточнитьСтавкуБудущегоНалога(Ставка, КонтекстРасчета, РасчетРаспределенияНалоговойБазы, Протокол)
	
	СледующийГод = КонецГода(КонтекстРасчета.КонецПериода) + 1;
	
	Протокол.ДанныеАлгоритма.Вставить("ДатаРасчетаСтавки", СледующийГод);
	
	Ставка = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
	
	Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
	Если РасчетРаспределенияНалоговойБазы <> Неопределено Тогда
		СкорректироватьСтавкуПоДолямНалоговойБазы(
			Ставка,
			Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
			КонтекстРасчета.Организация,
			РасчетРаспределенияНалоговойБазы,
			Протокол);
	КонецЕсли;
		
КонецПроцедуры

Процедура УточнитьСтавкуНачалоПериода(Ставка, КонтекстРасчета, НачальныеДанныеОтчетнаяДата, НачальныеДанныеПериодРасчета, Протокол)
	
	Если Не ЗначениеЗаполнено(НачальныеДанныеПериодРасчета) Тогда
		// Ранее установили, что данных нет.
		Возврат;
	КонецЕсли;
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("ОтчетнаяДата",  НачальныеДанныеОтчетнаяДата);
	ОписаниеПериода.Вставить("ПериодРасчета", НачальныеДанныеПериодРасчета);
	
	ПрочитаннаяСтавка = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
		ОписаниеПериода,
		КонтекстРасчета.Организация,
		"Доля",
		Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог);
		
	Если ПрочитаннаяСтавка <> Неопределено Тогда
		
		Ставка = ПрочитаннаяСтавка;
		
		Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПредыдущийРасчет;
		Протокол.ДанныеАлгоритма.Вставить("ОтчетнаяДата",  НачальныеДанныеОтчетнаяДата);
		Протокол.ДанныеАлгоритма.Вставить("ПериодРасчета", НачальныеДанныеПериодРасчета);
		
		ПервоеПрименение = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
			ОписаниеПериода,
			КонтекстРасчета.Организация,
			"Доля",
			Перечисления.ВидыСтавокОтложенногоНалога.ПервоеПрименение);
			
		Если ПервоеПрименение <> Неопределено Тогда
			Протокол.ДанныеАлгоритма.Вставить("ПервоеПрименение", ПервоеПрименение);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция НовыйПротоколРасчетаСтавкиНалога()
	
	Протокол = Новый Структура;
	Протокол.Вставить("АлгоритмРасчета",  Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПустаяСсылка());
	Протокол.Вставить("ДанныеАлгоритма",  Новый Структура);
	
	Возврат Протокол;
	
КонецФункции

// Закрытые подразделения не учитываем, так как в будущих периодах они уже не повлияют на распределение прибыли.
Процедура СкорректироватьСтавкуПоДолямНалоговойБазы(Ставка, Период, Организация, РасчетРаспределенияНалоговойБазы, Протокол)
	
	Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.УстановленнаяПоДолямНалоговойБазы;
	Протокол.ДанныеАлгоритма.Вставить("ОбщаяСтавка", Ставка);
	
	// В отдельных подразделениях региональная ставка может отличаться от общеустановленной
	ОбщаяСтавкаРегиональныйБюджет = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(Период, Организация);
	СтавкиРегиональныйБюджет = Новый Соответствие;
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
		СтавкиРегиональныйБюджет,
		Период,
		Организация,
		РасчетРаспределенияНалоговойБазы.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"));
		
	// Чтобы сократить ошибки округления, среднюю ставку рассчитываем как разницу между
	// - общеустановленной ставкой
	// - отклонением региональных ставок от общеустановленной.
	// Рассчитаем отклонение региональных ставок от общеустановленных, взвешенное с учетом доли налоговой базы подразделений.
	// Закрытые подразделения не учитываем, так как в будущих периодах они уже не повлияют на распределение прибыли.
	
	ВзвешеннаяСуммаОтклоненийСтавки = 0;
	СуммаДолейНалоговойБазы         = 0;
	
	Протокол.ДанныеАлгоритма.Вставить("ОтклоненияСтавки",  Новый Соответствие);
	Протокол.ДанныеАлгоритма.Вставить("ДолиНалоговойБазы", Новый Соответствие);
		
	Для Каждого ЗаписьРаспределенияНалоговойБазы Из РасчетРаспределенияНалоговойБазы Цикл
		
		Если ЗаписьРаспределенияНалоговойБазы.Закрыто Тогда
			// не учитываем показатели вовсе
			Продолжить;
		КонецЕсли;
		
		Протокол.ДанныеАлгоритма.ДолиНалоговойБазы.Вставить(
			ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане,
			ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы);
		
		СуммаДолейНалоговойБазы = СуммаДолейНалоговойБазы + ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы;
		
		СтавкаРегиональныйБюджет = СтавкиРегиональныйБюджет[ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане];
		Если Не ЗначениеЗаполнено(СтавкаРегиональныйБюджет) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтклонениеСтавки = СтавкаРегиональныйБюджет - ОбщаяСтавкаРегиональныйБюджет;
		Если ОтклонениеСтавки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Протокол.ДанныеАлгоритма.ОтклоненияСтавки.Вставить(
			ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане,
			ОтклонениеСтавки);
		
		ВзвешеннаяСуммаОтклоненийСтавки = ОтклонениеСтавки * ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы
			+ ВзвешеннаяСуммаОтклоненийСтавки;
		
	КонецЦикла;
	
	Если СуммаДолейНалоговойБазы <> 0 Тогда
		ОтклонениеСтавки = ОкруглитьСтавкуНалога(ВзвешеннаяСуммаОтклоненийСтавки / СуммаДолейНалоговойБазы);
		Ставка = Ставка + ОтклонениеСтавки;
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаПоСтавкеНалога(База, Ставка)
	
	Возврат Окр(База * Ставка, 2);
	
КонецФункции

Функция ОкруглитьСтавкуНалога(ТочноеЗначение)
	
	ТипСтавкиНалога = Метаданные.РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.Ресурсы.СтавкаНалога.Тип;
	
	КвалификаторыЧислаЛюбойЗнак = Новый КвалификаторыЧисла(
		ТипСтавкиНалога.КвалификаторыЧисла.Разрядность,
		ТипСтавкиНалога.КвалификаторыЧисла.РазрядностьДробнойЧасти,
		ДопустимыйЗнак.Любой);
	ТипДляОкругления = Новый ОписаниеТипов(ТипСтавкиНалога,,,КвалификаторыЧислаЛюбойЗнак);
	
	Возврат ТипДляОкругления.ПривестиЗначение(ТочноеЗначение);
	
КонецФункции

#КонецОбласти

#Область ОтложенныйНалог // Оценка отложенных налоговых активов и обязательств

#Область Правила

Функция СчетаОтложенныйНалог()
	
	// Счета, подлежащие автоматической корректировке
	
	СчетаОтложенныйНалог = Новый Массив;
	СчетаОтложенныйНалог.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СчетаОтложенныйНалог.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаОтложенныйНалог);

КонецФункции

Функция СчетаДоходовРасходов()
	
	// Временные разницы определяются на балансовых счетах, а не на счетах формирования прибыли.
	
	СчетаДоходовРасходов = Новый Массив;
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	Возврат СчетаДоходовРасходов;

КонецФункции

Функция СчетаБезНалоговойСтоимости()
	
	// В программе принято, что по отдельным видам активов и обязательств налоговая стоимость всегда равняется нулю.
	// Поэтому учет налоговой стоимости на них может быть отключен.
	// Идентифицировать временные разницы на этих счетах может потребоваться вне зависимости от ведения налогового учета на них.
	
	СчетаБезНалоговойСтоимости = Новый Массив;
	СчетаБезНалоговойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
	СчетаБезНалоговойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ);
	СчетаБезНалоговойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);
	СчетаБезНалоговойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ);
	СчетаБезНалоговойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ВыполненныеЭтапыПоНезавершеннымРаботам);
	
	Возврат СчетаБезНалоговойСтоимости;

КонецФункции

Функция НовыйПравилаГруппировкиАктивовОбязательств() Экспорт

	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("ОсновнойСчет",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Правила.Колонки.Добавить("ВидАктивовОбязательств",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	Правила.Колонки.Добавить("ДополнительныеСчета",       Новый ОписаниеТипов("Массив"));
	Правила.Колонки.Добавить("ИсключенныеСубконто",       Новый ОписаниеТипов("Массив"));
	
	Возврат Правила;
	
КонецФункции

Процедура ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств(Правила) Экспорт
	
	// В режиме совместимости с редакцией ПБУ 18 2015 года -
	// см. НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств()
	
	// ПБУ 18 содержит общее требование о группировке временных разниц и частное.
	//
	// Общее:
	// 3. В аналитическом учете временные разницы учитываются дифференцированно по видам активов и обязательств,
	// в оценке которых возникла временная разница
	//
	// Частное:
	// 19. предоставляется право отражать в бухгалтерском балансе сальдированную (свернутую)
	// сумму отложенного налогового актива и отложенного налогового обязательства, кроме случаев,
	// когда законодательством Российской Федерации о налогах и сборах предусмотрено
	// раздельное формирование налоговой базы.
	//
	// Таким образом, обязательное требование - исключить ситуации, когда отложенный налоговый актив
	// не должен быть признан, несмотря на наличие временных разниц (п. 14, 17 и 19 ПБУ 18).
	//
	// Для этого, организация группирует временные разницы исходя из того, каким образом доходы и расходы,
	// относящиеся к конкретному активу или обязательству (объекту налогового учета),
	// будут участвовать в формировании налоговой базы будущих периодов.
	//
	// Временные разницы должны быть отнесены к разным группам,
	// если относящиеся к ним будущие доходы и расходы будут облагаться налогом на прибыль в разных юрисдикциях
	// или по разным ставкам, либо налоговое законодательство не позволяет взаимозачет прибылей и убытков.
	// См. http://bmcenter.ru/Files/R-KpR-Registr_ucheta_vremennih_raznic
	//
	// В остальном группировка может быть произвольной, в том числе, можно отнести все разницы в одну группу.
	//
	// Поскольку в программе не автоматизировано раздельное формирование налоговой базы,
	// группировка активов и обязательств выполняется с максимальной детализацией,
	// с учетом рациональности (т.е. так, чтобы затраты на детализацию не были чрезмерными).
	
	// Общее правило в отношении субконто:
	// активы и обязательства детализируются до всех разрезов необоротной аналитики (по которым ведется учет разниц).
	
	// Могут быть исключения, распространяющиеся как на все счета, так и на отдельные счета.
	// Общие для всех счетов перечислены в ГлобальныеИсключенияДетализацииАктивовОбязательств,
	// частные - в поле ИсключенныеСубконто правил.
	// Частные исключения могут использоваться при кастомизации.
	
	// Правила, заданные в коллекции позже, имеют больший приоритет, чем заданные раньше.
	// С учетом этого, сначала следует установить правило для счета более высокого уровня, а потом - исключения для подчиненных.
	
	// Раздел I. ВНЕОБОРОТНЫЕ АКТИВЫ
	
	// ОсновныеСредства
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
		
	// Стоимость основного средства в общем случае "размазана" по двум счетам - стоимости ОС и "накопленной" амортизации,
	// поэтому стоимость такого актива собирается в целом по основному и дополнительным счетам.
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества);
	
	// ДоходныеВложенияВ_МЦ
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
		
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	
	// НематериальныеАктивы
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
		
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	
	// Оборудование 
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
		
	// ВложенияВоВнеоборотныеАктивы
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	
	// Раздел II. ПРОИЗВОДСТВЕННЫЕ ЗАПАСЫ
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Материалы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	
	// Корректировки балансовой стоимости материалов учитываем обособленно от первоначальной оценки актива,
	// так как детализация на счетах корректировок не позволяет однозначно идентифицировать актив:
	// на счете 10 есть субсчета, отличающиеся аналитикой, а на счетах 14,15,16 структура счетов и аналитика могут отличаться.
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМатериалов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиТоваров;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиГотовойПродукции;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ПриобретениеТоваров;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМатериалов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиТоваров;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	
	// Раздел III. ЗАТРАТЫ НА ПРОИЗВОДСТВО
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.БракВПроизводстве;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	
	// Раздел IV. ГОТОВАЯ ПРОДУКЦИЯ И ТОВАРЫ
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Товары;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	
	// Раздел V. ДЕНЕЖНЫЕ СРЕДСТВА
	
	// Финансовые вложения
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ФинансовыеВложения;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
		
	// Оценки по обесценению учитываем обособленно от первоначальной оценки актива;
	// так как детализация на счете 59 не позволяет однозначно идентифицировать актив:
	// на счете 58 есть субсчета; отличающиеся аналитикой; а на счете 59 нет субсчетов и аналитика беднее.
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
		
	// Раздел VI. РАСЧЕТЫ
		
	// Общие правила по счетам расчетов
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	
	// Исключения по счетам расчетов
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	// Курсовые разницы
	СчетаРасчетов = УчетВзаиморасчетов.ОсновныеСчетаРасчетов();
	
	Для Каждого ОписаниеСчета Из СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах] Цикл
		Правило = Правила.Добавить();
		Правило.ОсновнойСчет           = ОписаниеСчета.Значение;
		Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	КонецЦикла;
		
	Для Каждого ОписаниеСчета Из СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте] Цикл
		Правило = Правила.Добавить();
		Правило.ОсновнойСчет           = ОписаниеСчета.Значение;
		Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	КонецЦикла;
	
	// Резервы по сомнительным долгам
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	
	// Раздел VIII. ФИНАНСОВЫЕ РЕЗУЛЬТАТЫ
	
	// Недостачи и потери от порчи ценностей
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	
КонецПроцедуры

// Виды субконто, в разрезе которых никакие данные о временных разницах не учитываются
// при оценке отложенных налоговых активов и обязательств.
//
Функция ГлобальныеИсключенияДетализацииАктивовОбязательств()
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Возврат Исключения;
		
КонецФункции

#КонецОбласти

#Область Расчет

Функция РассчитатьОтложенныйНалог(КонтекстРасчета, ОбщаяСуммаНалога)
	
	// ПБУ18.14
	// Изменение величины отложенных налоговых активов в отчетном периоде равняется произведению вычитаемых временных разниц,
	// возникших (погашенных) в отчетном периоде, на ставку налога на прибыль,
	// установленную законодательством Российской Федерации о налогах и сборах и действующую на отчетную дату. 
	//
	// В случае изменения ставок налога на прибыль в соответствии с законодательством
	// Российской Федерации о налогах и сборах величина отложенных налоговых активов подлежит пересчету на дату,
	// предшествующую дате начала применения измененных ставок
	// с отнесением возникшей в результате пересчета разницы на счет учета прибылей и убытков.
	
	// IAS12.60(a) Балансовая стоимость отложенных налоговых активов и обязательств может меняться
	// даже при отсутствии изменений в сумме соответствующих временных разниц ... 
	// в результате изменения в ставках налога или налоговом законодательстве
	
	// IAS12.80(d) Компоненты расхода (дохода) по налогу могут включать сумму расхода (дохода) 
	// по отложенному налогу, относящегося к изменениям в ставках налога или введению новых налогов
	// (c) сумму расхода (дохода) по отложенному налогу, относящегося к возникновению и восстановлению временных разниц;
	// (d) сумму расхода (дохода) по отложенному налогу, относящегося к изменениям в ставках налога или введению новых налогов;
	// (g) расход по отложенному налогу, возникающий в результате списания
	//     или восстановления предыдущего списания отложенного налогового актива в соответствии с пунктом 56
	//     (Балансовая стоимость отложенного налогового актива подлежит повторной оценке по состоянию на конец
	//      каждого отчетного периода...
	//      Любое такое уменьшение должно быть восстановлено в той мере, в которой станет вероятным получение достаточной
	//      налогооблагаемой прибыли.)
	
	// Исходя из этих требований, в программе порядок расчета следующий:
	// 1. Отложенные налоги оцениваем по ставке будущего налога,
	//    которая в частном (и частом) случае равна ставке текущего налога в силу ПБУ 18.
	//    Организация может отклониться от этого требования IAS12.46 и применять другую ставку.
	// 2. В сумме изменения отложенного налога за отчетный период выделяем компоненты
	//    - эффект изменения временных разниц
	//    - эффект изменения ставки налога.
	// 3. Эффект изменения временных разниц оцениваем по ставке текущего налога для выполнения требований ПБУ18.14.
	//    Также это упрощает численную сверку суммы начисленного налога и показателей отложенного налога
	//    (в частности, выполняемую на счете 68.04.2).
	//    Ниже эта ставка обозначена как Rc.
	// 4. Эффект изменения ставки налога численно равен сумме
	//    - произведения временных разниц на начало отчетного периода на разницу между ставками
	//      текущего налога и налога, по которым отложенные налоги оценены в предыдущем отчетном периоде
	//    - произведения временных разниц на конец отчетного периода на разницу между ставками
	//      будущего налога и текущего налога, по которым отложенные налоги оценены в предыдущем отчетном периоде.
	// 5. Эффект изменения временных разниц оцениваем раздельно по увеличению и уменьшению разниц с тем,
	//    чтобы показать в финансовой отчетности раздельно признание и погашение налоговых активов (обязательств).
	// 
	// Корректность расчета в пунктах 3 и 4 обеспечивается следующими равенствами:
	// T1 - T0 = D1*R1 - D0*R0 = (D1-D0)*Rc + D1*(R1-Rc) + D0*(Rc-R0) = 
	//         = {D1*Rc} - {{D0*Rc}} + D1*R1 - {D1*Rc} + {{D0*Rc}} - D0*R0
	// где
	//   T1 - отложенный налог на отчетную дату
	//   T0 - отложенный налог на начало отчетного периода
	//   D1 - временные разницы на отчетную дату 
	//   D0 - временные разницы на начало периода
	//   R1 - ставка налога на отчетную дату
	//   R0 - ставка налога на начало периода
	//   Rc - ставка текущего налога
	//
	// В частном случае, когда все ставки равны, расчет простой:
	// - T1 = D1*R1;
	// - эффект изменения разниц определяется как T1 - T0.
	
	Расчет = НовыйРасчетОтложенногоНалога();
	Расчет.НачальныеДанныеОтчетнаяДата = КонтекстРасчета.НачалоНалоговогоПериода;
	РегистрыСведений.РасчетОтложенногоНалога.ПривестиПериодРасчета(Расчет.НачальныеДанныеОтчетнаяДата);
	
	// При выполнении регламентной операции или при инициализации сведения о примененных ставках записываются всегда,
	// а сведения о суммах отложенного налога - только при наличии временных разниц.
	// Поэтому проверка записей о ставках эффективнее.
	Расчет.НачальныеДанныеПериодРасчета = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПериодРасчета(
		Расчет.НачальныеДанныеОтчетнаяДата,
		КонтекстРасчета.Организация,
		КонтекстРасчета.КонецПериода);
	
	ОтчетнаяДата = КонтекстРасчета.КонецПериода + 1;
	
	// Получим данные о временных разницах
	// См. также ИнициализироватьРасчетОтложенногоНалога
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСальдоВременныхРазниц(
		МенеджерВременныхТаблиц,
		ОтчетнаяДата,
		КонтекстРасчета.Организации,
		КонтекстРасчета.ВариантУчетаОтложенногоНалога);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачальныеДанныеОтчетнаяДата",  Расчет.НачальныеДанныеОтчетнаяДата);
	Запрос.УстановитьПараметр("НачальныеДанныеПериодРасчета", Расчет.НачальныеДанныеПериодРасчета);
	Запрос.УстановитьПараметр("ОтчетнаяДата",                 ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организация",                  КонтекстРасчета.Организация);
	
	// Вычитаемые (deductible) разницы на счетах учета активов имеют отрицательный знак,
	// облагаемые (taxable) - положительный.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|	Изменения.ВидАктивовИОбязательств КАК ВидАктивовИОбязательств,
	|	Изменения.Счет КАК Счет,
	|	Изменения.Филиал КАК Филиал,
	|	Изменения.Подразделение КАК Подразделение,
	|	Изменения.Субконто1 КАК Субконто1,
	|	Изменения.Субконто2 КАК Субконто2,
	|	Изменения.Субконто3 КАК Субконто3,
	|	СУММА(Изменения.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	СУММА(Изменения.НалоговаяСтоимость) КАК НалоговаяСтоимость,
	|	СУММА(Изменения.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(Изменения.ВременнаяРазницаПредыдущая) КАК ВременнаяРазницаПредыдущая,
	|	СУММА(Изменения.ОтложенныйНалогПредыдущий) КАК ОтложенныйНалогПредыдущий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДанные.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|		ТекущиеДанные.ВидАктивовОбязательств КАК ВидАктивовИОбязательств,
	|		ТекущиеДанные.Счет КАК Счет,
	|		ТекущиеДанные.Филиал КАК Филиал,
	|		ТекущиеДанные.Подразделение КАК Подразделение,
	|		ТекущиеДанные.Субконто1 КАК Субконто1,
	|		ТекущиеДанные.Субконто2 КАК Субконто2,
	|		ТекущиеДанные.Субконто3 КАК Субконто3,
	|		ТекущиеДанные.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|		ТекущиеДанные.НалоговаяСтоимость КАК НалоговаяСтоимость,
	|		ТекущиеДанные.ВременнаяРазница КАК ВременнаяРазница,
	|		0 КАК ВременнаяРазницаПредыдущая,
	|		0 КАК ОтложенныйНалогПредыдущий
	|	ИЗ
	|		СальдоВременныхРазниц КАК ТекущиеДанные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачальныеДанные.СчетОтложенногоНалога,
	|		НачальныеДанные.ВидАктивовИОбязательств,
	|		НачальныеДанные.Счет,
	|		НачальныеДанные.Филиал,
	|		НачальныеДанные.Подразделение,
	|		НачальныеДанные.Субконто1,
	|		НачальныеДанные.Субконто2,
	|		НачальныеДанные.Субконто3,
	|		0,
	|		0,
	|		0,
	|		НачальныеДанные.ВременнаяРазница,
	|		НачальныеДанные.ОтложенныйНалог
	|	ИЗ
	|		РегистрСведений.РасчетОтложенногоНалога КАК НачальныеДанные
	|	ГДЕ
	|		НачальныеДанные.ОтчетнаяДата = &НачальныеДанныеОтчетнаяДата
	|		И НачальныеДанные.Организация = &Организация
	|		И НачальныеДанные.ПериодРасчета = &НачальныеДанныеПериодРасчета
	|		И (НачальныеДанные.ВременнаяРазница <> 0
	|				ИЛИ НачальныеДанные.ОтложенныйНалог <> 0)) КАК Изменения
	|
	|СГРУППИРОВАТЬ ПО
	|	Изменения.СчетОтложенногоНалога,
	|	Изменения.ВидАктивовИОбязательств,
	|	Изменения.Счет,
	|	Изменения.Филиал,
	|	Изменения.Подразделение,
	|	Изменения.Субконто1,
	|	Изменения.Субконто2,
	|	Изменения.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств,
	|	Счет,
	|	Филиал,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИТОГИ
	|	СУММА(ВременнаяРазница),
	|	СУММА(ВременнаяРазницаПредыдущая),
	|	СУММА(ОтложенныйНалогПредыдущий)
	|ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств";
	
	// Обработаем полученные данные
	ОпределитьСтавкиНалога(Расчет, ОбщаяСуммаНалога, КонтекстРасчета);
	
	СтавкаТекущегоНалога     = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
	СтавкаПредыдущегоРасчета = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка];
	СтавкаБудущегоНалога     = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог];
	
	Если СтавкаТекущегоНалога = СтавкаПредыдущегоРасчета Тогда
		КоэффициентыСтавкиТекущегоНалога = Неопределено;
	Иначе
		
		КоэффициентыСтавкиТекущегоНалога = Новый Структура;
		КоэффициентыСтавкиТекущегоНалога.Вставить("Минимум",  0);
		КоэффициентыСтавкиТекущегоНалога.Вставить("Максимум", 0);
		
		Если СтавкаПредыдущегоРасчета <> 0 Тогда
			
			// Применяется к оценке на начало периода (по ставке предыдущего расчета)
			// Эффект изменения ставки = D0 * (Rc-R0) = T0/R0 * (Rc-R0) = T0 * (Rc-R0)/R0 = T0 * k
			Коэффициент = (СтавкаТекущегоНалога - СтавкаПредыдущегоРасчета) / СтавкаПредыдущегоРасчета;
			
			КоэффициентыСтавкиТекущегоНалога.Минимум  = Коэффициент - ЭмпирическоеЗначениеПогрешностиСтавки();
			КоэффициентыСтавкиТекущегоНалога.Максимум = Коэффициент + ЭмпирическоеЗначениеПогрешностиСтавки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтавкаБудущегоНалога = 0 Тогда
		КоэффицентСтавкиБудущегоНалога = Неопределено;
	Иначе
		// Применяется к оценке на конец периода (по ставке будущего налога)
		// Эффект изменения ставки = D1*(R1-Rc) = T1/R1 * (R1-Rc) = T1 * (R1-Rc)/R1 = T1 * k
		КоэффицентСтавкиБудущегоНалога  = (СтавкаБудущегоНалога - СтавкаТекущегоНалога) / СтавкаБудущегоНалога;
	КонецЕсли;
	
	ВозможенЭффектИзмененияСтавки = ЗначениеЗаполнено(КоэффициентыСтавкиТекущегоНалога)
		Или ЗначениеЗаполнено(КоэффицентСтавкиБудущегоНалога);
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	ВыборкаСчетОтложенногоНалога = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетОтложенногоНалога.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСчетОтложенногоНалога.СчетОтложенногоНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
			
			ЗаписьОтложенныйНалог = Расчет.ОтложенныйНалог.Добавить();
			ЗаписьОтложенныйНалог.Счет                    = ВыборкаСчетОтложенногоНалога.СчетОтложенногоНалога;
			ЗаписьОтложенныйНалог.ВидАктивовИОбязательств = ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств;
			
			// Погрешности округления могут
			// 1. быть в исходных данных - сумме предыдущей оценки отложенного налога
			// 2. образовываться в ходе расчета.
			// При этом в ходе расчета погрешности могут быть двух видов:
			// a. "по горизонтали" - начальное сальдо разниц * ставку + изменения разниц * ставку <> конечное сальдо разниц * ставку
			//    (ПогрешностьОкругленияСальдо)
			// b. "по вертикали"   - суммарное значение разниц по виду умноженное на ставку <> сумме произведений каждой разницы на ставку
			//    (ПогрешностьОкругленияСуммарногоЗначенияНакопленная).
			// Устранение погрешностей одного вида может приводить к появлению погрешностей другого вида.
			// Учитываем все их при расчете.
			//
			// Суть расчета - определение суммы отложенного налогового актива (обязательства) - ранее обозначен T1.
			// Поэтому погрешности в его расчете
			// - учитываем с отрицательным знаком - см. формулу T1 - T0 = eD + eR; T0 - T1 + eD + eR = 0
			// - регистрируем, записываем в ЗаписьОтложенныйНалог.ПогрешностьОкругления
			
			Если Не ВозможенЭффектИзмененияСтавки Тогда
				// В ходе расчета погрешность округления не накапливается, потому что изменения отложенного налога рассчитываются прямым счетом,
				// без умножения на ставку налога.
				ПогрешностьОкругленияСальдо = 0;
			Иначе
				// Вычитаемые (deductible) разницы на счетах учета активов имеют отрицательный знак,
				// облагаемые (taxable) - положительный.
				ОтложенныйНалогПредыдущий   = - ВыборкаВидАктивовОбязательств.ВременнаяРазницаПредыдущая * СтавкаПредыдущегоРасчета;
				ПогрешностьОкругленияСальдо = ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий - ОтложенныйНалогПредыдущий;
				Если ТипСумма.ПривестиЗначение(ПогрешностьОкругленияСальдо) <> 0 Тогда
					// Слишком большая для погрешности округления
					ПогрешностьОкругленияСальдо = 0;
				КонецЕсли;
			КонецЕсли;
			
			ПогрешностьОкругленияСуммарногоЗначенияНакопленная = 0;// см. выше "погрешность по вертикали"
			
			Выборка = ВыборкаВидАктивовОбязательств.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.ВременнаяРазница)
					И Не ЗначениеЗаполнено(Выборка.ВременнаяРазницаПредыдущая) Тогда
					
					// Временных разниц нет, но может быть сумма отложенного налога, которая на отчетную дату устранена.
					// Это изменение суммы отложенного налога может быть ниже описано как эффект изменения ставки налога в сводной записи.
					
					ИзменениеОтложенногоНалога = - Выборка.ОтложенныйНалогПредыдущий;
					Если ИзменениеОтложенногоНалога > 0 Тогда
						ЗаписьОтложенныйНалог.УвеличениеОтложенногоНалога = ЗаписьОтложенныйНалог.УвеличениеОтложенногоНалога + ИзменениеОтложенногоНалога;
					Иначе
						ЗаписьОтложенныйНалог.УменьшениеОтложенногоНалога = ЗаписьОтложенныйНалог.УменьшениеОтложенногоНалога + ИзменениеОтложенногоНалога;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
					
				// Детальные данные о разницах
				ЗаписьВременныеРазницы = Расчет.ВременныеРазницы.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьВременныеРазницы, Выборка);
				ЗаписьВременныеРазницы.ОтчетнаяДата = ОтчетнаяДата;
				
				// Сальдо отложенного налога на отчетную дату
				ОтложенныйНалог = - ЗаписьВременныеРазницы.ВременнаяРазница * СтавкаБудущегоНалога;
				
				// Заботимся, чтобы не накапливалась погрешность округления
				// - "по вертикали"
				ПогрешностьОкругленияСуммарногоЗначения = 0;
				ДополнитьОкругленнымЗначением(
					ЗаписьВременныеРазницы.ОтложенныйНалог,
					ОтложенныйНалог,
					ПогрешностьОкругленияСуммарногоЗначения,
					Ложь);
				ПогрешностьОкругленияСуммарногоЗначенияНакопленная = ПогрешностьОкругленияСуммарногоЗначения
					+ ПогрешностьОкругленияСуммарногоЗначенияНакопленная;
					
				УстранениеПогрешностиСуммарногоЗначения = УстранитьПогрешностьОкругления(
					ЗаписьВременныеРазницы.ОтложенныйНалог,
					ПогрешностьОкругленияСуммарногоЗначенияНакопленная);
					
				ЗаписьОтложенныйНалог.ПогрешностьОкругления = ЗаписьОтложенныйНалог.ПогрешностьОкругления + УстранениеПогрешностиСуммарногоЗначения;
				
				// - "по горизонтали"
				Если ВозможенЭффектИзмененияСтавки Тогда
					ПогрешностьОкругленияСальдо = - ПогрешностьОкругленияСуммарногоЗначения
						+ ПогрешностьОкругленияСальдо;
				КонецЕсли;
				
				ЗаписьОтложенныйНалог.ОтложенныйНалог = ЗаписьОтложенныйНалог.ОтложенныйНалог + ЗаписьВременныеРазницы.ОтложенныйНалог;
				
				ИзменениеОтложенногоНалога = ЗаписьВременныеРазницы.ОтложенныйНалог - Выборка.ОтложенныйНалогПредыдущий;
				Если ИзменениеОтложенногоНалога > 0 Тогда
					ЗаписьОтложенныйНалог.УвеличениеОтложенногоНалога = ЗаписьОтложенныйНалог.УвеличениеОтложенногоНалога + ИзменениеОтложенногоНалога;
				Иначе
					ЗаписьОтложенныйНалог.УменьшениеОтложенногоНалога = ЗаписьОтложенныйНалог.УменьшениеОтложенногоНалога + ИзменениеОтложенногоНалога;
				КонецЕсли;
				
				Если Не ВозможенЭффектИзмененияСтавки Тогда
					
					// Все изменения отложенного налога объясняем изменением разниц.
					// Поскольку при вычитании погрешность округления не может измениться, ранее накопленные погрешности не учитываем.
					ЭффектИзмененияВременныхРазниц = ИзменениеОтложенногоНалога;
					
				Иначе
					
					ИзменениеВременнойРазницы = Выборка.ВременнаяРазница - Выборка.ВременнаяРазницаПредыдущая;
					
					ЭффектИзмененияВременныхРазниц = - ИзменениеВременнойРазницы * СтавкаТекущегоНалога; // не округлена
					
					Если ЭффектИзмененияВременныхРазниц <> 0 Тогда
						// При округлении произведения возможна погрешность округления.
						// Поэтому учтем ранее накопленную погрешность.
						ЭффектИзмененияВременныхРазниц = ЭффектИзмененияВременныхРазниц + УстранениеПогрешностиСуммарногоЗначения;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭффектИзмененияВременныхРазниц > 0 Тогда
					
					ДополнитьОкругленнымЗначением(
						ЗаписьВременныеРазницы.ЭффектУвеличенияВременныхРазниц,
						ЭффектИзмененияВременныхРазниц,
						ПогрешностьОкругленияСальдо);
						
					ЗаписьОтложенныйНалог.ЭффектУвеличенияВременныхРазниц = ЗаписьВременныеРазницы.ЭффектУвеличенияВременныхРазниц
						+ ЗаписьОтложенныйНалог.ЭффектУвеличенияВременныхРазниц;
						
				ИначеЕсли ЭффектИзмененияВременныхРазниц < 0 Тогда
						
					ДополнитьОкругленнымЗначением(
						ЗаписьВременныеРазницы.ЭффектУменьшенияВременныхРазниц,
						ЭффектИзмененияВременныхРазниц,
						ПогрешностьОкругленияСальдо);
						
					ЗаписьОтложенныйНалог.ЭффектУменьшенияВременныхРазниц = ЗаписьВременныеРазницы.ЭффектУменьшенияВременныхРазниц
						+ ЗаписьОтложенныйНалог.ЭффектУменьшенияВременныхРазниц;
						
				КонецЕсли;
						
			КонецЦикла;
			
			Если ВозможенЭффектИзмененияСтавки Тогда
				
				ПогрешностьОкругленияСальдо = - ЗаписьОтложенныйНалог.ПогрешностьОкругления
					+ ПогрешностьОкругленияСальдо;
				
				Если ЗначениеЗаполнено(КоэффицентСтавкиБудущегоНалога) Тогда
					
					ЭффектИзмененияСтавкиБудущегоНалога = ЗаписьОтложенныйНалог.ОтложенныйНалог
						* КоэффицентСтавкиБудущегоНалога;
						
					ДополнитьОкругленнымЗначением(
						ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиБудущегоНалога,
						ЭффектИзмененияСтавкиБудущегоНалога,
						ПогрешностьОкругленияСальдо);
						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КоэффициентыСтавкиТекущегоНалога) Тогда
					
					ЭффектИзмененияСтавкиТекущегоНалога =
						- ВыборкаВидАктивовОбязательств.ВременнаяРазницаПредыдущая * СтавкаТекущегоНалога
						- ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий;
					
					// Определим, может ли быть то же значение получено через коэффициент изменения ставки налога,
					// то есть, определим, можно ли для проверки правильности результата
					// использовать "каноническую" формулу расчета эффекта (через отношение ставок налога)
					Если ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий = 0 Тогда
						ЗаписьОтложенныйНалог.РасхождениеМетодовОценкиЭффектаИзмененияСтавкиТекущегоНалога =
							(ЭффектИзмененияСтавкиТекущегоНалога <> 0);
					Иначе
						КоэффициентСтавки = ЭффектИзмененияСтавкиТекущегоНалога / ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий;
						ЗаписьОтложенныйНалог.РасхождениеМетодовОценкиЭффектаИзмененияСтавкиТекущегоНалога =
							(КоэффициентСтавки < КоэффициентыСтавкиТекущегоНалога.Минимум Или 
							 КоэффициентСтавки >  КоэффициентыСтавкиТекущегоНалога.Максимум);
					КонецЕсли;
					
					ДополнитьОкругленнымЗначением(
						ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиТекущегоНалога,
						ЭффектИзмененияСтавкиТекущегоНалога,
						ПогрешностьОкругленияСальдо);
						
					
				КонецЕсли;
					
				Если ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиТекущегоНалога <> 0
					Или ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиБудущегоНалога <> 0 Тогда
					
					ЗаполнитьЗначенияСвойств(Расчет.ЭффектИзмененияСтавокНалогаНаПрибыль.Добавить(), ЗаписьОтложенныйНалог);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Расчет;
	
КонецФункции

Процедура СоздатьСальдоВременныхРазниц(МенеджерВременныхТаблиц, ОтчетнаяДата, Организации, ВариантУчетаОтложенногоНалога)
	
	ВедетсяУчетРазниц = (ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод);
	
	ПравилаГруппировки = НовыйПравилаГруппировкиАктивовОбязательств();
	ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств(ПравилаГруппировки);
	
	ПланГруппировки = ПланГруппировкиАктивовОбязательств(ПравилаГруппировки, ВедетсяУчетРазниц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланГруппировки", ПланГруппировки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланГруппировки.Счет КАК Счет,
	|	ПланГруппировки.СчетГруппировки КАК СчетГруппировки,
	|	ПланГруппировки.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ПланГруппировки.ПозицияСубконто1 КАК ПозицияСубконто1,
	|	ПланГруппировки.ПозицияСубконто2 КАК ПозицияСубконто2,
	|	ПланГруппировки.ПозицияСубконто3 КАК ПозицияСубконто3,
	|	ПланГруппировки.НомерВариантаИсключения КАК НомерВариантаИсключения,
	|	ПланГруппировки.ВыбиратьТолькоРазницы КАК ВыбиратьТолькоРазницы,
	|	ПланГруппировки.ОграниченныйУчетРазниц КАК ОграниченныйУчетРазниц
	|ПОМЕСТИТЬ ВТ_ПравилаГруппировки
	|ИЗ
	|	&ПланГруппировки КАК ПланГруппировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	Запрос.Выполнить();
	
	// Получаем данные о временных разницах
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетнаяДата", ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",  Организации);
	
	// Временную таблицу ВТ_БалансовыеДанные не индексируем, потому что она далее используется в качестве ЛЕВОЙ в соединении,
	// и из нее выбираются все данные.
	// Возможные значения NULL в субконто приводим к Неопределено для правильной группировки строк с одинаковыми по сути значениями. 
	
	Запрос.Текст = // Текст будет модифицирован - см. НастроитьРасчетВременнойРазницы(), ОптимизироватьЗапросСальдоДляГруппировки()
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Организация КАК Филиал,
	|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|	Остатки.СуммаОстаток КАК БалансоваяСтоимость,
	|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) КАК НалоговаяСтоимость,
	|	ЕСТЬNULL(Остатки.СуммаВРОстаток, 0) КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВТ_БалансовыеДанные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ПланГруппировки.Счет
	|				ИЗ
	|					ВТ_ПравилаГруппировки КАК ПланГруппировки),
	|			,
	|			Организация В (&Организации)) КАК Остатки";
	НастроитьРасчетВременнойРазницы(Запрос.Текст, ВедетсяУчетРазниц);
	ОптимизироватьЗапросСальдоДляГруппировки(Запрос.Текст, ПланГруппировки);
	Запрос.Выполнить();
	
	// Дополняем данными о виде активов и обязательств, группируем по счету, выстраиваем субконто в нужном порядке.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА Правила.ОграниченныйУчетРазниц
	|						ТОГДА БалансовыеДанные.БалансоваяСтоимость
	|					ИНАЧЕ БалансовыеДанные.ВременнаяРазница
	|				КОНЕЦ) < 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства)
	|	КОНЕЦ КАК СчетОтложенногоНалога,
	|	Правила.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	Правила.СчетГруппировки КАК Счет,
	|	БалансовыеДанные.Филиал КАК Филиал,
	|	БалансовыеДанные.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 1
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 1
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 1
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 2
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 2
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 2
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 3
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 3
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 3
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	СУММА(БалансовыеДанные.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	СУММА(БалансовыеДанные.НалоговаяСтоимость) КАК НалоговаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА Правила.ОграниченныйУчетРазниц
	|				ТОГДА БалансовыеДанные.БалансоваяСтоимость
	|			ИНАЧЕ БалансовыеДанные.ВременнаяРазница
	|		КОНЕЦ) КАК ВременнаяРазница
	|ПОМЕСТИТЬ СальдоВременныхРазниц
	|ИЗ
	|	ВТ_БалансовыеДанные КАК БалансовыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПравилаГруппировки КАК Правила
	|		ПО БалансовыеДанные.Счет = Правила.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ВидАктивовОбязательств,
	|	Правила.СчетГруппировки,
	|	БалансовыеДанные.Филиал,
	|	БалансовыеДанные.Подразделение,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 1
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 1
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 1
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 2
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 2
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 2
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Правила.ПозицияСубконто1 = 3
	|			ТОГДА БалансовыеДанные.Субконто1
	|		КОГДА Правила.ПозицияСубконто2 = 3
	|			ТОГДА БалансовыеДанные.Субконто2
	|		КОГДА Правила.ПозицияСубконто3 = 3
	|			ТОГДА БалансовыеДанные.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Правила.ОграниченныйУчетРазниц
	|				ТОГДА БалансовыеДанные.БалансоваяСтоимость
	|			ИНАЧЕ БалансовыеДанные.ВременнаяРазница
	|		КОНЕЦ) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_БалансовыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПравилаГруппировки";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура НастроитьРасчетВременнойРазницы(ТекстЗапроса, ВедетсяУчетРазниц)
	
	// Запрос включает в себя выборку трех показателей регистра бухгалтерии.
	// Но в зависимости от выбранного варианта учета, нас интересуют
	// - либо данные ресурса с временными разницами
	// - либо данные двух других ресурсов
	
	// Здесь устанавливаем отбор по записям, в которых временная разница фактически есть, чтобы сократить объем выбираемых данных.
	// Однако, такой отбор может приводить к неверным данным о суммах налоговой и бухгалтерской стоимости в случаях,
	// когда данные разных счетов группируются.
	// Поэтому при подготовке текста запроса для группировки отбор может быть удален - см. ОптимизироватьЗапросСальдоДляГруппировки
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкаВременнаяРазница = ОписаниеЗапроса.Колонки.Найти("ВременнаяРазница");
		Если КолонкаВременнаяРазница = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонкиВременнаяРазница = ОписаниеЗапроса.Колонки.Индекс(КолонкаВременнаяРазница);
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			
			Если ВедетсяУчетРазниц Тогда
				
				ВыражениеВременнаяРазница = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(
					ОписаниеЗапроса,
					ОператорЗапроса,
					"ВременнаяРазница");
					
				ТекстВыраженияВременнаяРазница = Строка(ВыражениеВременнаяРазница);
				
			Иначе
				
				// 1. ВР = БУ - НУ
				
				ВыражениеБалансоваяСтоимость = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(
					ОписаниеЗапроса,
					ОператорЗапроса,
					"БалансоваяСтоимость");
				
				ВыражениеНалоговаяСтоимость  = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(
					ОписаниеЗапроса,
					ОператорЗапроса,
					"НалоговаяСтоимость");
					
				ТекстВыраженияВременнаяРазница = СтрШаблон(
					"%1 - %2",
					ВыражениеБалансоваяСтоимость,
					ВыражениеНалоговаяСтоимость);
					
				ВыражениеВременнаяРазница = Новый ВыражениеСхемыЗапроса(ТекстВыраженияВременнаяРазница);
					
				ОператорЗапроса.ВыбираемыеПоля.Установить(ИндексКолонкиВременнаяРазница, ВыражениеВременнаяРазница);
				
			КонецЕсли;
			
			// 2. ВР <> 0
			ТекстУсловия = СтрШаблон("%1 <> 0", ТекстВыраженияВременнаяРазница);
			ОператорЗапроса.Отбор.Добавить(ТекстУсловия);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Корректирует рассчитываемое значение на округленную величину.
// При этом погрешность округления регистрируется (при последовательных вызовах - суммируется)
// и при превышении порога значимости может быть устранена.
//
// Параметры:
//  Хранилище				 - Число - округленное значение, которое может быть модифицировано.
//                             Должно иметь тип значения с явным ограничением числа знаков в дробной части.
//  ТочноеЗначение			 - Число - слагаемое, которое может иметь точность большую, чем Хранилище.
//  ПогрешностьОкругления	 - Число - накопленная погрешность округления.
//  Устранить				 - Булево - Истина - при превышении накопленной погрешностью округления порога значимости,
//                             значение в Хранилище будет скорректировано так,
//                             чтобы накопленная погрешность округления стала меньше порога значимости.
//
Процедура ДополнитьОкругленнымЗначением(Хранилище, ТочноеЗначение, ПогрешностьОкругления, Устранить = Истина)
	
	ПредыдущееЗначение = Хранилище; // поскольку значение имеет примитивный тип, оно будет скопировано в новую переменную
	
	Хранилище = Хранилище + ТочноеЗначение; // неявное округление
	
	ПогрешностьНовогоОкругления = (Хранилище - ТочноеЗначение - ПредыдущееЗначение);
	
	ПогрешностьОкругления = ПогрешностьОкругления + ПогрешностьНовогоОкругления;
	
	Если Устранить Тогда
		УстранитьПогрешностьОкругления(Хранилище, ПогрешностьОкругления);
	КонецЕсли;
	
КонецПроцедуры

// Применяет накопленную погрешность округления к ранее округленному значению:
// если накопленная погрешность заметна для типа значения округленного значения,
// то это округленное значение будет скорректировано, а абсолютное значение погрешности уменьшится - станет менее порога значимости.
//
// Например, если значение округляется до 2 знаков после запятой, то накопленная погрешность -0.006 - значима (округляется до -0.01).
// Поэтому значение должно быть скорректировано на 0.01, а накопленная погрешность уменьшится - составит 0.004.
//
// Параметры:
//  Хранилище				 - Число - ранее округленное значение, которое может быть модифицировано.
//                             Должно иметь тип значения с явным ограничением числа знаков в дробной части.
//  ПогрешностьОкругления	 - Число - накопленная погрешность округления
// 
// Возвращаемое значение:
//  Число - примененная погрешность.
//
Функция УстранитьПогрешностьОкругления(Хранилище, ПогрешностьОкругления)
	
	ДоПримененияПогрешности = Хранилище; // поскольку значение имеет примитивный тип, оно будет скопировано в новую переменную
	
	Хранилище = Хранилище - ПогрешностьОкругления; // неявное округление
	
	ПримененнаяПогрешность = Хранилище - ДоПримененияПогрешности;
	ПогрешностьОкругления  = ПогрешностьОкругления + ПримененнаяПогрешность;
	
	Возврат ПримененнаяПогрешность;
	
КонецФункции

#КонецОбласти

#Область Запись

Процедура ЗаписатьИзменениеОтложенногоНалога(Проводки, РасчетОтложенногоНалога, КонтекстРасчета)
	
	ОтдельныеПроводкиИзмененияСтавкиНалога = ОтдельныеПроводкиИзмененияСтавкиНалога(КонтекстРасчета);
	
	Если ОтдельныеПроводкиИзмененияСтавкиНалога Тогда
		
		// Эффект изменения разниц - в корреспонденции со счетом 68.04.2
		// Дт 09      Кт 68.04.2
		// Дт 68.04.2 Кт 09
		// Дт 68.04.2 Кт 77
		// Дт 77      Кт 68.04.2
		СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
		
		// Остальные эффекты - в корреспонденции со счетом 99.02.4
		// Дт 09      Кт 99.02.4
		// Дт 99.02.4 Кт 09
		// Дт 99.02.4 Кт 77
		// Дт 77      Кт 99.02.4
		СчетПересчетаОтложенногоНалога = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
		
	Иначе
		// Р-102
		// 5 Сумма отложенного налога на прибыль отражается по дебету или кредиту счета 99 "Прибыли и убытки"
		// (субсчет "Отложенный налог на прибыль") в корреспонденции соответственно с кредитом или дебетом счетов
		// 09 "Отложенные налоговые активы" или 77 "Отложенные налоговые обязательства".
		
		СчетРасчетаНалога              = ПланыСчетов.Хозрасчетный.ОтложенныйНалогНаПрибыль;
		СчетПересчетаОтложенногоНалога = СчетРасчетаНалога; // эффект от изменения ставки на проводках не отражается
		
	КонецЕсли;
	
	// Учтем ранее сформированные проводки
	Корректировки = КорректировкиОтложенногоНалога(РасчетОтложенногоНалога.ОтложенныйНалог, КонтекстРасчета, ОтдельныеПроводкиИзмененияСтавкиНалога);
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	
	Представления = Новый Структура;
	Представления.Вставить("Увеличение", Новый Соответствие);
	Представления.Вставить("Уменьшение", Новый Соответствие);
	Представления.Вставить("Пересчет",   Новый Соответствие);
	
	СтавкаБудущегоНалога = РасчетОтложенногоНалога.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог];
	
	Представления.Увеличение.Вставить(
		ВидСчета.Активный,
		НСтр("ru = 'Признание отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Уменьшение.Вставить(
		ВидСчета.Активный,
		НСтр("ru = 'Погашение отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Уменьшение.Вставить(
		ВидСчета.Пассивный,
		НСтр("ru = 'Признание отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Увеличение.Вставить(
		ВидСчета.Пассивный,
		НСтр("ru = 'Погашение отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	ШаблонПредставленияПересчетПоСтавке = НСтр(
		"ru = 'Пересчет %1 по ставке %2%%'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ПредставлениеПересчетПоставке = СтрШаблон(
		ШаблонПредставленияПересчетПоСтавке,
		НСтр("ru = 'отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка),
		СтавкаБудущегоНалога * 100);
		
	Представления.Пересчет.Вставить(ВидСчета.Активный, ПредставлениеПересчетПоставке);
		
	ПредставлениеПересчетПоставке = СтрШаблон(
		ШаблонПредставленияПересчетПоСтавке,
		НСтр("ru = 'отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка),
		СтавкаБудущегоНалога * 100);
		
	Представления.Пересчет.Вставить(ВидСчета.Пассивный, ПредставлениеПересчетПоставке);
	
	// Сформируем проводки на разницу
	СчетаОтложенногоНалога = Новый Соответствие; // Кеш
	
	Для Каждого Корректировка Из Корректировки Цикл
		
		ВидСчетаОтложенногоНалога = СчетаОтложенногоНалога[Корректировка.Счет];
		Если ВидСчетаОтложенногоНалога = Неопределено Тогда
			ВидСчетаОтложенногоНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корректировка.Счет, "Вид");
			СчетаОтложенногоНалога.Вставить(Корректировка.Счет, ВидСчетаОтложенногоНалога);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидСчетаОтложенногоНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПроводкуОтложенныйНалог(
			Проводки,
			Корректировка.УвеличениеОтложенногоНалога,
			Представления.Увеличение[ВидСчетаОтложенногоНалога],
			ВидДвиженияБухгалтерии.Дебет,
			Корректировка.Счет,
			Корректировка.ВидАктивовИОбязательств,
			СчетРасчетаНалога,
			КонтекстРасчета);
			
		ДобавитьПроводкуОтложенныйНалог(
			Проводки,
			-Корректировка.УменьшениеОтложенногоНалога,
			Представления.Уменьшение[ВидСчетаОтложенногоНалога],
			ВидДвиженияБухгалтерии.Кредит,
			Корректировка.Счет,
			Корректировка.ВидАктивовИОбязательств,
			СчетРасчетаНалога,
			КонтекстРасчета);
			
		// Все остальные эффекты, кроме основных проводок, условно относим к изменению ставки налога
			
		Если Корректировка.Пересчет > 0 Тогда
				
			ДобавитьПроводкуОтложенныйНалог(
				Проводки,
				Корректировка.Пересчет,
				Представления.Пересчет[ВидСчетаОтложенногоНалога],
				ВидДвиженияБухгалтерии.Дебет,
				Корректировка.Счет,
				Корректировка.ВидАктивовИОбязательств,
				СчетПересчетаОтложенногоНалога,
				КонтекстРасчета);
				
		ИначеЕсли Корректировка.Пересчет < 0 Тогда
				
			ДобавитьПроводкуОтложенныйНалог(
				Проводки,
				-Корректировка.Пересчет,
				Представления.Пересчет[ВидСчетаОтложенногоНалога],
				ВидДвиженияБухгалтерии.Кредит,
				Корректировка.Счет,
				Корректировка.ВидАктивовИОбязательств,
				СчетПересчетаОтложенногоНалога,
				КонтекстРасчета);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтдельныеПроводкиИзмененияСтавкиНалога(КонтекстРасчета)
	
	// Если текущий налог рассчитывается по данным бухгалтерского учета, то проводки по счету расчета налога
	// важно оценивать по ставке текущего налога.
	// Поэтому в проводках важно различать эффект изменения разниц и эффект изменения ставок.
	// Как следствие, из ранее сформированных проводок важно исключить проводки эффекта изменения ставок.
	
	Возврат (КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы);
	
КонецФункции

Функция КорректировкиОтложенногоНалога(ИзменениеОтложенногоНалога, КонтекстРасчета, ОтдельныеПроводкиИзмененияСтавкиНалога)
	
	Корректировки = ИзменениеОтложенногоНалога.Скопировать(); // См. НовыйИзменениеОтложенногоНалога()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаОтложенныйНалог",   СчетаОтложенныйНалог());
	Запрос.УстановитьПараметр("НеиспользованныеАктивы", Перечисления.ВидыАктивовИОбязательств.НеиспользованныеНалоговыеУбыткиВычеты());
	Запрос.УстановитьПараметр("ОтчетнаяДата",           КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("НачалоПериода",          КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации",            КонтекстРасчета.Организации);
	
	Запрос.Текст = // Текст запроса может быть модифицирован - добавляется отбор по кор.счету в запрос ОтраженныеДанные.Обороты
	"ВЫБРАТЬ
	|	ОтраженныеДанные.СчетОтложенногоНалога КАК Счет,
	|	ОтраженныеДанные.ВидАктивовИОбязательств КАК ВидАктивовИОбязательств,
	|	СУММА(ОтраженныеДанные.ОтложенныйНалог) КАК ОтложенныйНалог,
	|	СУММА(ОтраженныеДанные.УвеличениеОтложенногоНалога) КАК УвеличениеОтложенногоНалога,
	|	СУММА(ОтраженныеДанные.УменьшениеОтложенногоНалога) КАК УменьшениеОтложенногоНалога
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сальдо.Счет КАК СчетОтложенногоНалога,
	|		Сальдо.Субконто1 КАК ВидАктивовИОбязательств,
	|		Сальдо.СуммаОстаток КАК ОтложенныйНалог,
	|		0 КАК УвеличениеОтложенногоНалога,
	|		0 КАК УменьшениеОтложенногоНалога
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ОтчетнаяДата,
	|				Счет В (&СчетаОтложенныйНалог),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|				Организация В (&Организации)
	|					И НЕ Субконто1 В (&НеиспользованныеАктивы)) КАК Сальдо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Обороты.Счет,
	|		Обороты.Субконто1,
	|		0,
	|		Обороты.СуммаОборотДт,
	|		-Обороты.СуммаОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаОтложенныйНалог),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|				Организация В (&Организации)
	|					И НЕ Субконто1 В (&НеиспользованныеАктивы),
	|				,
	|				) КАК Обороты) КАК ОтраженныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтраженныеДанные.СчетОтложенногоНалога,
	|	ОтраженныеДанные.ВидАктивовИОбязательств
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	ВидАктивовИОбязательств";
	
	Если ОтдельныеПроводкиИзмененияСтавкиНалога Тогда
		
		// Отдельно выделяем увеличение или уменьшение отложенного налога за счет эффекта изменения временных разниц
		Корректировки.ЗагрузитьКолонку(
			Корректировки.ВыгрузитьКолонку("ЭффектУвеличенияВременныхРазниц"),
			"УвеличениеОтложенногоНалога");
		Корректировки.ЗагрузитьКолонку(
			Корректировки.ВыгрузитьКолонку("ЭффектУменьшенияВременныхРазниц"),
			"УменьшениеОтложенногоНалога");
		
		// Ограничиваем выборку проводок только корреспонденциями со счетом расчета налога
		
		Запрос.УстановитьПараметр("СчетРасчетаНалога", ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
			
			Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ОператорГруппировки Из ОписаниеЗапроса.Операторы Цикл
				
				ЗапросГруппировки = ОператорГруппировки.Источники.НайтиПоПсевдониму("ОтраженныеДанные"); // содержит ВложенныйЗапросСхемыЗапроса в Источник
				
				Если ЗапросГруппировки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ОператорЗапроса Из ЗапросГруппировки.Источник.Запрос.Операторы Цикл
					
					ТаблицаОбороты = ОператорЗапроса.Источники.НайтиПоПсевдониму("Обороты");
					
					Если ТаблицаОбороты = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					// Параметры виртуальной таблицы Обороты регистра бухгалтерии:
					// НачалоПериода, КонецПериода, Периодичность, УсловиеСчета, Субконто, Условие, УсловиеКорСчета, КорСубконто
					ИндексПараметраУсловиеКорСчета = 6;
					
					ОтборКорСчет = "КорСчет = &СчетРасчетаНалога";
					ТаблицаОбороты.Источник.Параметры[ИндексПараметраУсловиеКорСчета].Выражение = Новый ВыражениеСхемыЗапроса(ОтборКорСчет);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	КлючевыеПоля = "Счет, ВидАктивовИОбязательств";
	
	Корректировки.Индексы.Добавить(КлючевыеПоля);
	Отбор = Новый Структура(КлючевыеПоля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		
		ЗаписиКорректировка = Корректировки.НайтиСтроки(Отбор);
		
		ИсправлениеОшибкиУчета = Ложь;
		Если ЗначениеЗаполнено(ЗаписиКорректировка) Тогда
			Корректировка = ЗаписиКорректировка[0];
		Иначе
			Корректировка = Корректировки.Добавить();
			ЗаполнитьЗначенияСвойств(Корректировка, Отбор);
			ИсправлениеОшибкиУчета = Истина; // Таких проводок не должно было быть
		КонецЕсли;
		
		Корректировка.ОтложенныйНалог = Корректировка.ОтложенныйНалог - Выборка.ОтложенныйНалог;
		
		Если ИсправлениеОшибкиУчета И Не ОтдельныеПроводкиИзмененияСтавкиНалога Тогда
			
			// Сторнируем ранее сформированные проводки.
			// Если ОтдельныеПроводкиИзмененияСтавкиНалога, то так делать не следует,
			// поскольку эта ошибка могла быть отражена в корреспонденции со счетом пересчета при изменении ставки.
			Если Корректировка.ОтложенныйНалог > 0 Тогда
				Корректировка.УменьшениеОтложенногоНалога = Корректировка.ОтложенныйНалог;
			Иначе
				Корректировка.УвеличениеОтложенногоНалога = Корректировка.ОтложенныйНалог;
			КонецЕсли;
			
		Иначе
		
			Корректировка.УвеличениеОтложенногоНалога = Корректировка.УвеличениеОтложенногоНалога
				- Выборка.УвеличениеОтложенногоНалога;
			
			Корректировка.УменьшениеОтложенногоНалога = Корректировка.УменьшениеОтложенногоНалога
				- Выборка.УменьшениеОтложенногоНалога;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Корректировка Из Корректировки Цикл
		
		Корректировка.Пересчет =
			  Корректировка.ОтложенныйНалог
			- Корректировка.УвеличениеОтложенногоНалога
			- Корректировка.УменьшениеОтложенногоНалога;
		
	КонецЦикла;
	
	Возврат Корректировки;
	
КонецФункции

Процедура ДобавитьПроводкуОтложенныйНалог(Проводки, Сумма, Содержание, ВидДвижения, Счет, ВидАктивовИОбязательств, КорСчет, КонтекстРасчета)
				
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
			
	Проводки.Записывать = Истина;
			
	Проводка = Проводки.Добавить();
	Проводка.Период      = КонтекстРасчета.КонецПериода;
	Проводка.Организация = КонтекстРасчета.Организация;
	Проводка.Сумма       = Сумма;
	Проводка.Содержание  = Содержание;
	
	Если ВидДвижения = ВидДвиженияБухгалтерии.Дебет Тогда
		
		Проводка.СчетДт = Счет;
		Проводка.СчетКт = КорСчет;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктивовИОбязательств);
			
	Иначе
		
		Проводка.СчетДт = КорСчет;
		Проводка.СчетКт = Счет;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктивовИОбязательств);
			
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область ВыборкаГруппировкаВременныхРазниц

// Технологические процедуры выборки и группировки сальдо временных разниц

Функция БалансовыеСчетаВременныхРазниц(ВедетсяУчетРазниц)
	
	ОписаниеСчетов = Новый Структура;
	ОписаниеСчетов.Вставить("ГлобальныеИсключения", ГлобальныеИсключенияДетализацииАктивовОбязательств());
	ОписаниеСчетов.Вставить("ПланСчетов",           Новый ТаблицаЗначений);
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Счет",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Родитель",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто1", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто2", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто3", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("ОграниченныйУчетРазниц",
	                                                        Новый ОписаниеТипов("Булево"));
	
	// После заполнения будут добавлены индексы
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаДоходовРасходов",       СчетаДоходовРасходов());
	Запрос.УстановитьПараметр("СчетаБезНалоговойСтоимости", СчетаБезНалоговойСтоимости());
	Запрос.УстановитьПараметр("ВедетсяУчетРазниц",          ВедетсяУчетРазниц);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Счета.Ссылка КАК Счет,
	|	Счета.Родитель КАК Родитель,
	|	ВидыСубконто1.ВидСубконто КАК Субконто1,
	|	ВидыСубконто2.ВидСубконто КАК Субконто2,
	|	ВидыСубконто3.ВидСубконто КАК Субконто3,
	|	&ВедетсяУчетРазниц
	|		И НЕ Счета.НалоговыйУчет КАК ОграниченныйУчетРазниц
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Счета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО Счета.Ссылка = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|			И (НЕ ВидыСубконто1.ТолькоОбороты)
	|			И (ВидыСубконто1.Суммовой)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО Счета.Ссылка = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|			И (НЕ ВидыСубконто2.ТолькоОбороты)
	|			И (ВидыСубконто2.Суммовой)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО Счета.Ссылка = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|			И (НЕ ВидыСубконто3.ТолькоОбороты)
	|			И (ВидыСубконто3.Суммовой)
	|ГДЕ
	|	НЕ Счета.Ссылка В ИЕРАРХИИ (&СчетаДоходовРасходов)
	|	И НЕ Счета.Забалансовый
	|	И (Счета.НалоговыйУчет
	|			ИЛИ Счета.Ссылка В ИЕРАРХИИ (&СчетаБезНалоговойСтоимости))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОписаниеСчетов.ПланСчетов.Добавить(), Выборка);
	КонецЦикла;
	
	ОписаниеСчетов.ПланСчетов.Индексы.Добавить("Счет");
	ОписаниеСчетов.ПланСчетов.Индексы.Добавить("Родитель");
	
	Возврат ОписаниеСчетов;
	
КонецФункции

Функция ПланГруппировкиАктивовОбязательств(ПравилаГруппировки, ВедетсяУчетРазниц)
	
	// Группировка выполняется по счетам и видам субконто.
	// При этом для группировки по счетам важно, чтобы состав аналитики на группируемых счетах был одинаков -
	// иначе группировка будет бессмысленной.
	// Поэтому при группировке может потребоваться поменять порядок субконто - выстроить их в том же порядке,
	// что и на счете, используемом для группировки.
	
	// Для этого используется понятие ПозицияСубконто, которое показывает,
	// в какое поле выборки будет включено значение субконто с конкретным порядковым номером.
	
	// Пример: счет 03 - основной, для группы, включающей счет 02.02;
	// на счете 03 субконто ОсновныеСредства имеет порядковый номер 2, а на счете 02.02 - 1.
	// В этом случае на счете 02.02 ПозицияСубконто1 будет равна 2.
	// То есть, при группировке значения субконто 1 со счета 02.02 нужно будет сопоставить со значениями субконто 2 счета-группы (03).
	
	ПланГруппировки = Новый ТаблицаЗначений;
	ПланГруппировки.Колонки.Добавить("Счет",                    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПланГруппировки.Колонки.Добавить("СчетГруппировки",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПланГруппировки.Колонки.Добавить("ВидАктивовОбязательств",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ПланГруппировки.Колонки.Добавить("ПозицияСубконто1",        ОбщегоНазначения.ОписаниеТипаЧисло(1)); // 0 - исключено; 1,2,3 - позиция в выборке
	ПланГруппировки.Колонки.Добавить("ПозицияСубконто2",        ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ПланГруппировки.Колонки.Добавить("ПозицияСубконто3",        ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ПланГруппировки.Колонки.Добавить("НомерВариантаИсключения", ОбщегоНазначения.ОписаниеТипаЧисло(1)); // максимальное значение = 2^3 = 8
	// Отдельные балансовые показатели могут не иметь отражения в налоговом учете - см. СчетаБезНалоговойСтоимости
	// Поэтому даже в режиме, когда ведется учет разниц, опираться на суммы разниц на таких счетах нельзя.
	// Вместе с тем, это автоматически означает, что балансовая стоимость и есть сумма разницы
	ПланГруппировки.Колонки.Добавить("ОграниченныйУчетРазниц",  Новый ОписаниеТипов("Булево"));
	// Позволяет сократить объем данных, включаемых в расчет.
	// Если Счет и СчетГруппировки не совпадают, то выбирать только разницы нельзя
	// Это свойство неприменимо для счетов с ОграниченныйУчетРазниц
	ПланГруппировки.Колонки.Добавить("ВыбиратьТолькоРазницы",   Новый ОписаниеТипов("Булево")); 
	
	ПланГруппировки.Индексы.Добавить("Счет");// для каждого счета должна быть ровно одна запись
	
	ОписаниеСчетов = БалансовыеСчетаВременныхРазниц(ВедетсяУчетРазниц);
	
	// Для счетов, входящих в группы, используется единый набор аналитики, чтобы была возможность группировки.
	ГруппыСчетов = Новый Соответствие;
	Для Каждого Правило Из ПравилаГруппировки Цикл
		
		Если Не ЗначениеЗаполнено(Правило.ДополнительныеСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СубконтоСчетаГруппировки = ОписаниеСчетов.ПланСчетов.Найти(Правило.ОсновнойСчет, "Счет");
		Если СубконтоСчетаГруппировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СубконтоГруппы = Новый Соответствие;
		ГруппыСчетов.Вставить(Правило.ОсновнойСчет, СубконтоГруппы);
		
		Для НомерСубконто = 1 По 3 Цикл
			
			ВидСубконто = СубконтоСчетаГруппировки["Субконто" + НомерСубконто];
			
			Если Не МожноИспользоватьСубконтоДляГруппировки(ВидСубконто, ОписаниеСчетов, Правило.ИсключенныеСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			СубконтоГруппы.Вставить(ВидСубконто, НомерСубконто);
			
		КонецЦикла;
			
		Для Каждого ДополнительныйСчет Из Правило.ДополнительныеСчета Цикл
			
			ОписаниеСчета = ОписаниеСчетов.ПланСчетов.Найти(ДополнительныйСчет, "Счет");
			
			Если ОписаниеСчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЛишниеСубконто = ОбщегоНазначения.СкопироватьРекурсивно(СубконтоГруппы);
			
			Для НомерСубконто = 1 По 3 Цикл
				ВидСубконто = ОписаниеСчета["Субконто" + НомерСубконто];
				ЛишниеСубконто.Удалить(ВидСубконто);
			КонецЦикла;
			
			Для Каждого ОписаниеЛишнегоСубконто Из ЛишниеСубконто Цикл
				СубконтоГруппы.Удалить(ОписаниеЛишнегоСубконто.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
	// Включим в план счета, для которых установлены правила.
	
	// Правила, заданные в коллекции правил позже, должны вытеснять более ранние.
	// Не должно быть несколько правил для одного и того же счета.
	// Поэтому коллекция правил обходится с конца
	КоличествоПравил = ПравилаГруппировки.Количество();
	Для НомерСКонца = 1 По КоличествоПравил Цикл
		
		Правило = ПравилаГруппировки[КоличествоПравил - НомерСКонца];
		
		СубконтоСчетаГруппировки = ГруппыСчетов[Правило.ОсновнойСчет];
		
		СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, Правило.ОсновнойСчет, СубконтоСчетаГруппировки);
		
		Для Каждого ДополнительныйСчет Из Правило.ДополнительныеСчета Цикл
			СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ДополнительныйСчет, СубконтоСчетаГруппировки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Включим счета, для которых правил нет.
	Для Каждого ОписаниеСчета Из ОписаниеСчетов.ПланСчетов Цикл
		ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Неопределено, ОписаниеСчетов, ОписаниеСчета, Неопределено);
	КонецЦикла;
	
	Возврат ПланГруппировки;
	
КонецФункции

Процедура СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, Знач ОписаниеСчета, СубконтоСчетаГруппировки)
	
	Если ТипЗнч(ОписаниеСчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		ОписаниеСчета = ОписаниеСчетов.ПланСчетов.Найти(ОписаниеСчета, "Счет");
		Если ОписаниеСчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, СубконтоСчетаГруппировки);
	
	ПодчиненныеСчета = ОписаниеСчетов.ПланСчетов.НайтиСтроки(Новый Структура("Родитель", ОписаниеСчета.Счет));
	
	Если Не ЗначениеЗаполнено(ПодчиненныеСчета) Тогда
		ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, СубконтоСчетаГруппировки);
	Иначе
		Для Каждого ОписаниеПодчиненногоСчета Из ПодчиненныеСчета Цикл
			СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеПодчиненногоСчета, СубконтоСчетаГруппировки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, СубконтоСчетаГруппировки)
	
	Запись = ПланГруппировки.Найти(ОписаниеСчета.Счет, "Счет");
	Если Запись <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Правило = Неопределено Тогда
		ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВидПрочие();
		СчетГруппировки        = ОписаниеСчета.Счет;
		ИсключенныеСубконто    = Новый Массив;
	Иначе
		ВидАктивовОбязательств = Правило.ВидАктивовОбязательств;
		СчетГруппировки        = Правило.ОсновнойСчет;
		ИсключенныеСубконто    = Правило.ИсключенныеСубконто
	КонецЕсли;
		
	Запись = ПланГруппировки.Добавить();
	Запись.Счет = ОписаниеСчета.Счет;
	Запись.ВидАктивовОбязательств = ВидАктивовОбязательств;
	Запись.ОграниченныйУчетРазниц = ОписаниеСчета.ОграниченныйУчетРазниц;
	
	Если СубконтоСчетаГруппировки = Неопределено Тогда
		Запись.СчетГруппировки = ОписаниеСчета.Счет;
	Иначе
		Запись.СчетГруппировки = СчетГруппировки;
	КонецЕсли;
		
	Запись.ВыбиратьТолькоРазницы = (Запись.Счет = Запись.СчетГруппировки И Не Запись.ОграниченныйУчетРазниц);
	Запись.НомерВариантаИсключения = 0;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		ВидСубконто = ОписаниеСчета["Субконто" + НомерСубконто];
		
		ПозицияСубконто = НомерСубконто;
		Если СубконтоСчетаГруппировки = Неопределено Тогда
			Если Не МожноИспользоватьСубконтоДляГруппировки(ВидСубконто, ОписаниеСчетов, ИсключенныеСубконто) Тогда
				ПозицияСубконто = 0;
			КонецЕсли;
		Иначе
			ПозицияСубконто = СубконтоСчетаГруппировки[ВидСубконто];
			Если ПозицияСубконто = Неопределено Тогда
				ПозицияСубконто = 0;
			КонецЕсли;
		КонецЕсли;
		
		Запись["ПозицияСубконто" + НомерСубконто] = ПозицияСубконто;
		
		Если ПозицияСубконто = 0 Тогда
			Запись.НомерВариантаИсключения = Запись.НомерВариантаИсключения + Pow(2, НомерСубконто - 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МожноИспользоватьСубконтоДляГруппировки(ВидСубконто, ОписаниеСчетов, ИсключенныеСубконто)
	Возврат ЗначениеЗаполнено(ВидСубконто) 
		И ОписаниеСчетов.ГлобальныеИсключения.Найти(ВидСубконто) = Неопределено
		И ИсключенныеСубконто.Найти(ВидСубконто) = Неопределено;
КонецФункции

Процедура ОптимизироватьЗапросСальдоДляГруппировки(ТекстЗапроса, ПланГруппировки)
	
	// Выделим в отдельные запросы получение данных по счетам, где требуется исключить какие-либо субконто.
	// Это позволит сократить выборку детальных данных, которые впоследствии все равно будут сгруппированы.
	
	// На каждую комбинацию исключаемых полей делаем свой запрос, ограниченный счетами, где необходима такая комбинация.
	// Каждый из таких запросов получит указание, какие субконто заведомо не нужны.
	
	// Исходный запрос ограничим счетами, по которым исключения не требуются.
	// В таком запросе будет описано получение всех трех субконто.
	// Исходный запрос важно оставить, даже если окажется, что фактически счетов без исключений нет.
	// Потому что по наличию субконто в пути к полю платформа определяет тип поля запроса.
	// Если ни в одном не будет, то колонка запроса получит тип Неопределено, который не может быть выбран в запросе.
	
	// Комбинации заранее получили номера.
	// Конкретное значение (семантика) номера в этой процедуре не важно: главное, чтобы 
	// - номер однозначно идентифицировал набор исключаемых полей
	// - при последовательных выполнениях одна и так же комбинация получала один и тот же номер
	//   (это важно для кеширования платформой текстов запросов).
	
	// Кроме исключения субконто, выделим запросы, в которых возможно заранее наложить отбор на записи, содержащие разницы.
	
	КомбинацииИсключаемыхПолей = ПланГруппировки.Скопировать();
	Для НомерСубконто = 1 По 3 Цикл
		КомбинацииИсключаемыхПолей.Колонки.Добавить("ИсключитьСубконто" + НомерСубконто, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	Для Каждого Запись Из КомбинацииИсключаемыхПолей Цикл
		Для НомерСубконто = 1 По 3 Цикл
			Запись["ИсключитьСубконто" + НомерСубконто] = (Запись["ПозицияСубконто" + НомерСубконто] = 0);
		КонецЦикла;
	КонецЦикла;
	КомбинацииИсключаемыхПолей.Свернуть("ИсключитьСубконто1, ИсключитьСубконто2, ИсключитьСубконто3, НомерВариантаИсключения, ВыбиратьТолькоРазницы");
	
	Если КомбинацииИсключаемыхПолей.Количество() = 1
		И КомбинацииИсключаемыхПолей[0].ВыбиратьТолькоРазницы
		И ТривиальнаяКомбинацияИсключаемыхПолей(КомбинацииИсключаемыхПолей[0]) Тогда
		// Оптимизация невозможна.
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОписаниеЗапроса  = СхемаЗапроса.ПакетЗапросов[0];
	ОператорыЗапроса = ОписаниеЗапроса.Операторы;
	
	ПоляЗапросаСубконто = Новый Соответствие; // Ключ - номер субконто; значение - индекс поля.
	Для НомерСубконто = 1 По 3 Цикл
		Колонка = ОписаниеЗапроса.Колонки.Найти("Субконто" + НомерСубконто);
		Если Колонка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПоляЗапросаСубконто.Вставить(НомерСубконто, ОписаниеЗапроса.Колонки.Индекс(Колонка));
	КонецЦикла;
	
	// Работаем с первым запросом в пакете. Исходный запрос содержит один оператор с обращением к виртуальной таблице Остатки.
	
	ШаблонУсловиеСчета = "Счет В(%1)";
	ШаблонЗапросаУсловиеСчета = 
	"ВЫБРАТЬ
	|	ПланГруппировки.Счет КАК Счет
	|ИЗ
	|	ВТ_ПравилаГруппировки КАК ПланГруппировки
	|ГДЕ
	|	ПланГруппировки.НомерВариантаИсключения = &НомерВариантаИсключения
	|	И ПланГруппировки.ВыбиратьТолькоРазницы = &ВыбиратьТолькоРазницы";
	// Значения параметров будут позже заменены на константы
	ШаблонУсловиеСчета = СтрШаблон(ШаблонУсловиеСчета, ШаблонЗапросаУсловиеСчета);
	ШаблонУсловиеСчета = СтрЗаменить(ШаблонУсловиеСчета, "&НомерВариантаИсключения", "%1");
	ШаблонУсловиеСчета = СтрЗаменить(ШаблонУсловиеСчета, "&ВыбиратьТолькоРазницы",   "%2");
	
	Для Каждого Комбинация Из КомбинацииИсключаемыхПолей Цикл
		
		Если ТривиальнаяКомбинацияИсключаемыхПолей(Комбинация)
			И Комбинация.ВыбиратьТолькоРазницы Тогда
			Оператор = ОператорыЗапроса[0];
		Иначе
			
			Оператор = ОператорыЗапроса.Добавить(ОператорыЗапроса[0]);
			
			// Исключим субконто
			Для НомерСубконто = 1 По 3 Цикл
				Если Не Комбинация["ИсключитьСубконто" + НомерСубконто] Тогда
					Продолжить;
				КонецЕсли;
				ИндексПоля = ПоляЗапросаСубконто[НомерСубконто];
				Оператор.ВыбираемыеПоля[ИндексПоля] = Новый ВыражениеСхемыЗапроса("Неопределено");
			КонецЦикла;
			
			// Уберем отбор
			Если Не Комбинация.ВыбиратьТолькоРазницы Тогда
				Оператор.Отбор.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Укажем отбор по счетам, соответствующим комбинации.
		Источник = Оператор.Источники.НайтиПоИмени("РегистрБухгалтерии.Хозрасчетный.Остатки");
		Если Источник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекстУсловиеСчета = СтрШаблон(
			ШаблонУсловиеСчета,
			XMLСтрока(Комбинация.НомерВариантаИсключения),
			XMLСтрока(Комбинация.ВыбиратьТолькоРазницы));
		
		ПараметрУсловиеСчета = Источник.Источник.Параметры[ИндексПараметраУсловиеСчета()];
		ПараметрУсловиеСчета.Выражение = Новый ВыражениеСхемыЗапроса(ТекстУсловиеСчета);
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ИндексПараметраУсловиеСчета()
	Возврат 1; // В виртуальной таблице Остатки регистра бухгалтерии: Остатки(Период, УсловиеСчета, Субконто, Условие)
КонецФункции

Функция ТривиальнаяКомбинацияИсключаемыхПолей(Комбинация)
	
	Для НомерСубконто = 1 По 3 Цикл
		Если Комбинация["ИсключитьСубконто" + НомерСубконто] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РасходПоНалогу

Функция НовыйРасчетРасходаПоНалогу()
	
	Расчет = Новый Структура;
	Расчет.Вставить("Ставка",                        0);
	Расчет.Вставить("ОблагаемыйФинансовыйРезультат", КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекцииСумм()));
	Расчет.Вставить("ПорядокРасчета",                Новый Соответствие); // Ключ - показатель, Значение - строка, порядок расчета
	
	Для Каждого ОписаниеПоказателя Из Метаданные.Перечисления.ПоказателиОтложенногоНалога.ЗначенияПеречисления Цикл
		Расчет.Вставить(ОписаниеПоказателя.Имя, 0);
	КонецЦикла;
	
	// Некоторые показатели из Перечисления.ПоказателиОтложенногоНалога не имеют кодов.
	// Такие не должны быть частью формул (на них не следует ссылаться в ПорядокРасчета)
	
	Расчет.Вставить("КодыПоказателей", Неопределено); // Кеш для использования Перечисления.ПоказателиОтложенногоНалога.Код()
	
	Расчет.Вставить("КодЯзыка",        ОбщегоНазначения.КодОсновногоЯзыка()); // данные расчета записываются в информационную базу
	
	Возврат Расчет;
	
КонецФункции

Функция РассчитатьРасходПоНалогу(КонтекстРасчета, РасчетОтложенногоНалога, НачисленныйНалог)
	
	// Текущий налог определяется по данным налоговой декларации по налогу на прибыль
	// (в соответствии с вторым вариантом из предложенных в ПБУ18.22).
	
	// Расход по налогу на прибыль рассчитывается в соответствии с приложением к ПБУ18
	// (показатели, вычитаемые из прибыли, отражаются с отрицательным знаком).
	
	Расчет = НовыйРасчетРасходаПоНалогу();
	Расчет.Ставка          = РасчетОтложенногоНалога.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
	Расчет.ТекущийНалог    = - НачисленныйНалог;
	
	// Порядок расчета текущего налога (см. НачисленныйНалог)
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы Тогда
		СчетТекущегоНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Иначе
		СчетТекущегоНалога = ПланыСчетов.Хозрасчетный.ТекущийНалогНаПрибыль;
	КонецЕсли;
	
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Оборот по кредиту счета %1 в корреспонденции со счетом %2 (со знаком ""минус"")'", Расчет.КодЯзыка),
		КодСчета(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом),
		КодСчета(СчетТекущегоНалога));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ТекущийНалог", ПорядокРасчета);
	
	// Прибыль до налогообложения, налоговая база
	Расчет.ОблагаемыйФинансовыйРезультат = РасчетНалогаНаПрибыль.СуммыНалоговойБазы(
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		ОписаниеКоллекцииСумм());
		
	Расчет.ПрибыльДоНалогообложения = Расчет.ОблагаемыйФинансовыйРезультат.Сумма;
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ПрибыльДоНалогообложения", ПорядокРасчетаФинансовыйРезультат(Расчет.КодЯзыка));
	
	// Отложенный налог
	Расчет.ЭффектИзмененияВременныхРазниц = РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектУвеличенияВременныхРазниц")
	                                      + РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектУменьшенияВременныхРазниц");
	Расчет.ЭффектИзмененияСтавкиБудущегоНалога = РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектИзмененияСтавкиБудущегоНалога");
	Расчет.ЭффектИзмененияСтавкиТекущегоНалога = РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектИзмененияСтавкиТекущегоНалога");
	
	Если ЗначениеЗаполнено(Расчет.ЭффектИзмененияСтавкиБудущегоНалога)
		Или ЗначениеЗаполнено(Расчет.ЭффектИзмененияСтавкиТекущегоНалога) Тогда
		// В протокол выводим детальные записи об эффектах, если они несут дополнительную информацию.
		// Если случай тривиальный - т.е. все изменение обуславливается только изменением разниц -
		// то это не выводим в протокол.
		// Это повторяет и логику пояснений в СправкаРасчетОтложенногоНалога - какие-либо эффекты упоминаются,
		// если есть влияние изменения ставок.
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ЭффектИзмененияВременныхРазниц");
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ЭффектИзмененияСтавкиТекущегоНалога");
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ЭффектИзмененияСтавкиБудущегоНалога");
	КонецЕсли;
	
	Расчет.ОтложенныйНалог = Расчет.ЭффектИзмененияВременныхРазниц
	                       + Расчет.ЭффектИзмененияСтавкиБудущегоНалога
	                       + Расчет.ЭффектИзмененияСтавкиТекущегоНалога;
	
	// 34 Отложенный налоговый актив должен признаваться в отношении перенесенных на будущие периоды
	//    неиспользованных налоговых убытков
	Расчет.ВлияниеУбыткаТекущегоПериода = ВлияниеУбыткаТекущегоПериода(
		Расчет.ОблагаемыйФинансовыйРезультат,
		Расчет.Ставка,
		КонтекстРасчета);
		
	Расчет.ОтложенныйНалог = Расчет.ОтложенныйНалог + Расчет.ВлияниеУбыткаТекущегоПериода;
	
	// Для справки-расчета приводим другой порядок расчета отложенного налога
	ДобавитьОписаниеРасчетаОтложенногоНалога(Расчет, РасчетОтложенногоНалога.ОтложенныйНалог, КонтекстРасчета);
	
	// РасходПоНалогу
	Расчет.РасходПоНалогу = Расчет.ОтложенныйНалог + Расчет.ТекущийНалог;
	
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) + (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалог, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ТекущийНалог, Расчет.КодыПоказателей));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "РасходПоНалогу", ПорядокРасчета);
	
	// 20. Условный расход (условный доход) по налогу на прибыль равняется величине,
	//     определяемой как произведение бухгалтерской прибыли,
	//     сформированной в отчетном периоде, на ставку налога на прибыль
	
	РассчитатьНалоговыйРасход(Расчет, "УсловныйРасход", "ПрибыльДоНалогообложения");
	
	// 7. Для целей Положения под постоянным налоговым расходом (доходом) понимается сумма налога,
	//    которая приводит к увеличению (уменьшению) налоговых платежей по налогу на прибыль в отчетном периоде.
	
	Расчет.ПостоянныйНалоговыйРасход = Расчет.РасходПоНалогу
	                                 - Расчет.УсловныйРасход
	                                 - Расчет.ЭффектИзмененияСтавкиБудущегоНалога
	                                 - Расчет.ЭффектИзмененияСтавкиТекущегоНалога;
	
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) - (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.РасходПоНалогу, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.УсловныйРасход, Расчет.КодыПоказателей));
	
	Если ЗначениеЗаполнено(Расчет.ЭффектИзмененияСтавкиБудущегоНалога)
		Или ЗначениеЗаполнено(Расчет.ЭффектИзмененияСтавкиТекущегоНалога) Тогда
		
		ПорядокРасчета = СтрШаблон(
			НСтр("ru = '%1 - (%2) - (%3)'", Расчет.КодЯзыка),
			ПорядокРасчета,
			Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ЭффектИзмененияСтавкиТекущегоНалога, Расчет.КодыПоказателей),
			Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ЭффектИзмененияСтавкиБудущегоНалога, Расчет.КодыПоказателей));
		
	КонецЕсли;
	
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ПостоянныйНалоговыйРасход", ПорядокРасчета);
	
	// Для иллюстрации приводим показатель прибыли, очищенной от налога - как показано в Приложении 1 к ПБУ 18
	Расчет.ЧистаяПрибыль = Расчет.ПрибыльДоНалогообложения + Расчет.РасходПоНалогу;
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) + (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ПрибыльДоНалогообложения, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.РасходПоНалогу, Расчет.КодыПоказателей));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ЧистаяПрибыль", ПорядокРасчета);
	
	Возврат Расчет;
	
КонецФункции

Процедура РассчитатьТекущийНалог(Расчет, КонтекстРасчета, РасчетОтложенногоНалога)
	
	// Проводки иллюстрируют расчет текущего налога на прибыль рассчитывается по данным бухгалтерского учета
	// в соответствии с первым вариантом, из предложенных в ПБУ18.22.
	// Его сумма может расходиться от начисленного налога за счет разницы в округлении.
	
	// ПБУ18.22
	
	// 22. ... определения величины текущего налога на прибыль ... на основе данных, сформированных в бухгалтерском учете
	//     При этом величина текущего налога на прибыль должна соответствовать сумме исчисленного налога на прибыль,
	//     отраженного в налоговой декларации по налогу на прибыль;
	
	// Такой расчет основан на транзакционном правиле БУ = НУ + ПР + ВР, где каждый компонент умножается на ставку налога:
	// БУ * Ставка = НУ * Ставка + ПР * Ставка + ВР * Ставка.
	///
	// При этом
	// - ТекущийНалог                   = НУ * Ставка
	// - УсловныйРасход                 = БУ * Ставка
	// - ПостоянныйНалоговыйРасход      = ПР * Ставка
	//
	// 7. Постоянный налоговый расход (доход) равняется величине, определяемой как произведение постоянной разницы,
	//    возникшей в отчетном периоде, на ставку налога на прибыль
	//
	// РасходПоНалогу = БУ - ПР = НУ + ВР
	// Поэтому сумма ПР выбирается с отрицательным знаком
	
	Расчет.ПостояннаяРазница = - Расчет.ОблагаемыйФинансовыйРезультат.СуммаПР;
	
	ВидУчета = НСтр("ru = 'данные по учету постоянных разниц'", Расчет.КодЯзыка);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ПостояннаяРазница", ПорядокРасчетаФинансовыйРезультат(Расчет.КодЯзыка, ВидУчета));
	
	РассчитатьНалоговыйРасход(Расчет, "ПостоянныйНалоговыйРасход", "ПостояннаяРазница");
	
	// Формула балансируется значением ВР * Ставка, которое в идеальных условиях будет
	// численно равно ЭффектИзмененияВременныхРазниц, определенному балансовым методом. 
	// Но в условиях разного рода погрешностей в учете они могут отличаться.
	//
	// Поэтому вводится условное понятие ОтложенныйРасход - влияние изменения временных разниц на расчет финансового результата.
	
	Расчет.ВременнаяРазница = Расчет.ОблагаемыйФинансовыйРезультат.СуммаВР;
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ВременнаяРазница");
	
	Расчет.ОтложенныйРасход = - СуммаПоСтавкеНалога(Расчет.ОблагаемыйФинансовыйРезультат.СуммаВР, Расчет.Ставка);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйРасход");
	
	// Далее эти погрешности раскладываются по влияющим факторам
	Если КонтекстРасчета.ПрименяютсяСпециальныеРежимы Тогда
		
		// Влияние изменения разниц может потребоваться скорректировать, когда не выполняется требование ПБУ18.16:
		//   В случае, если законодательством ... предусмотрены разные ставки налога на прибыль по отдельным видам доходов,
		//   то при оценке отложенного налогового актива или отложенного налогового обязательства
		//   ставка налога на прибыль должна соответствовать тому виду дохода,
		//   который ведет к уменьшению ... временной разницы в ... последующих отчетных периодах.
		
		// В программе принято, что на балансовых счетах отражаются разницы, которые относятся к видам деятельности,
		// облагаемым налогом на прибыль.
		
		// Если соответствующие активы и обязательства повлияли на финансовый результат по видам деятельности,
		// облагаемым в рамках специальных режимов, то это следует учесть при числовой сверке сумму текущего налога.
		
		// Такое влияние описано в ПБУ18.17, ПБУ18.18 отдельно, поэтому и в расчете покажем его обособленно.
		
		НеОблагаемыйФинансовыйРезультат = РасчетНалогаНаПрибыль.СуммыНалоговойБазы(
			КонтекстРасчета.НачалоНалоговогоПериода,
			КонтекстРасчета.КонецПериода,
			КонтекстРасчета.Организация,
			ОписаниеКоллекцииСумм(),
			ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД);
			
		Расчет.ВыбытиеПоСпециальнымРежимам = - СуммаПоСтавкеНалога(НеОблагаемыйФинансовыйРезультат.СуммаВР, Расчет.Ставка);
		
		Если ЗначениеЗаполнено(Расчет.ВыбытиеПоСпециальнымРежимам) Тогда
			
			ДобавитьЗаписьПротоколаРасчета(Расчет, "ВыбытиеПоСпециальнымРежимам");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйРасход");
	
	Расчет.РасчетныйТекущийНалог = Расчет.УсловныйРасход + Расчет.ПостоянныйНалоговыйРасход - Расчет.ОтложенныйРасход;
	Расчет.РасчетныйТекущийНалог = Расчет.РасчетныйТекущийНалог - Расчет.ВлияниеУбыткаТекущегоПериода; // при убытке текущий налог равен нулю, поэтому требуется балансировать суммой убытка
	
	ДобавитьЗаписьПротоколаРасчета(Расчет, "РасчетныйТекущийНалог");
	
	// Суммарная величина погрешностей может быть определена, как разница в расчете сумм текущего налога двумя способами из ПБУ18.22
	Расчет.КорректировкаТекущегоНалога = Расчет.РасчетныйТекущийНалог - Расчет.ТекущийНалог;
	Если ЗначениеЗаполнено(Расчет.КорректировкаТекущегоНалога) Тогда
		ДобавитьЗаписьПротоколаРасчета(Расчет, "КорректировкаТекущегоНалога");
	КонецЕсли;
	
	// На практике могут быть допущены разного рода ошибки, неточности в учете.
	// Покажем влияние этих ошибок.
	
	// Ошибка учета разниц заключается в том, что не выполняется равенство БУ=НУ+ПР+ВР.
	// Т.е. какие-то расхождения между налоговой и бухгалтерской прибылью оказались "незамеченными"
	// для целей ПБУ 18.
	ОшибкаУчетаРазниц = Расчет.ОблагаемыйФинансовыйРезультат.Сумма
		              - Расчет.ОблагаемыйФинансовыйРезультат.СуммаНУ
		              - Расчет.ОблагаемыйФинансовыйРезультат.СуммаВР
		              - Расчет.ОблагаемыйФинансовыйРезультат.СуммаПР;
	
	Расчет.ВлияниеОшибокУчетаРазниц = - СуммаПоСтавкеНалога(ОшибкаУчетаРазниц, Расчет.Ставка);
	
	Если ЗначениеЗаполнено(Расчет.ВлияниеОшибокУчетаРазниц) Тогда
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ВлияниеОшибокУчетаРазниц");
	КонецЕсли;
	
	// Ошибка учета отложенного налога показывает разницу между разными методами определением суммы изменения отложенного налога.
	// Если учет построен верно, то разницы не должно быть.
	// Как правило, разница вызвана отражением временных разниц на балансовых счетах
	// без отражения их совокупного влияния на счетах доходов и расходов.
	// Корректный порядок учета предполагает, что возникновение и погашение разниц может быть при корреспонденции
	// - либо двух балансовых счетов, при этом суммарный баланс разниц не меняется;
	// - либо балансового и счета доходов (расходов).
	РасчетныйЭффектИзмененияВременныхРазниц = Расчет.ОтложенныйРасход;
	Если ЗначениеЗаполнено(Расчет.ВыбытиеПоСпециальнымРежимам) Тогда
		РасчетныйЭффектИзмененияВременныхРазниц = РасчетныйЭффектИзмененияВременныхРазниц + Расчет.ВыбытиеПоСпециальнымРежимам;
	КонецЕсли;
	
	Расчет.ВлияниеОшибокУчетаОтложенногоНалога = РасчетныйЭффектИзмененияВременныхРазниц - Расчет.ЭффектИзмененияВременныхРазниц;
	Если ЗначениеЗаполнено(Расчет.ВлияниеОшибокУчетаОтложенногоНалога) Тогда
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ВлияниеОшибокУчетаОтложенногоНалога");
	КонецЕсли;
	
КонецПроцедуры

Функция КодСчета(Счет)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Код");
КонецФункции

Процедура ДобавитьЗаписьПротоколаРасчета(Расчет, ИмяПоказателя, ПорядокРасчета = "")
	
	Расчет.ПорядокРасчета.Вставить(Перечисления.ПоказателиОтложенногоНалога[ИмяПоказателя], ПорядокРасчета);
	
КонецПроцедуры

Процедура РассчитатьНалоговыйРасход(Расчет, ИмяРассчитываемогоПоказателя, ИмяПоказателяБазы)
	
	// Налоговый расход определяется исходя из некоторой базы - прибыли или ее компонента.
	// Для этого база умножается на ставку налога.
	// Кроме того, база и налоговый расход имеют противоположные знаки,
	// так как, например, прибыль увеличивает чистую прибыль, а налог - уменьшает.
	
	Расчет[ИмяРассчитываемогоПоказателя] = - СуммаПоСтавкеНалога(Расчет[ИмяПоказателяБазы], Расчет.Ставка);
	
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '- (%1) * %2%%'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога[ИмяПоказателяБазы], Расчет.КодыПоказателей),
		Формат(Расчет.Ставка * 100, "ЧН=0"));
		
	ДобавитьЗаписьПротоколаРасчета(Расчет, ИмяРассчитываемогоПоказателя, ПорядокРасчета);
	
КонецПроцедуры

Функция ПорядокРасчетаФинансовыйРезультат(КодЯзыка, ВидУчета = "")
	
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Оборот по счету %1 в корреспонденции со счетами %2,%3'", КодЯзыка),
		КодСчета(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки),
		КодСчета(ПланыСчетов.Хозрасчетный.Продажи),
		КодСчета(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы));
		
	Если ПустаяСтрока(ВидУчета) Тогда
		Возврат ПорядокРасчета;
	КонецЕсли;
	
	Шаблон = НСтр("ru = '%1 (%2)'", КодЯзыка); // Оборот (по такому-то виду учета)
	Возврат СтрШаблон(Шаблон, ПорядокРасчета, ВидУчета);
	
КонецФункции

Процедура ДобавитьОписаниеРасчетаОтложенногоНалога(Расчет, ОтложенныйНалог, КонтекстРасчета)
	
	// Фактически для расчета определяется конечное сальдо по счетам 09 и 77 и изменения (эффекты).
	// Но для иллюстрации расчета покажем начальное и конечное сальдо.
	
	ОтложенныйНалоговыйАктивИзменение         = 0;
	ОтложенноеНалоговоеОбязательствоИзменение = 0;
	
	Для Каждого Запись Из ОтложенныйНалог Цикл
		
		ИзменениеОтложенногоНалога = СуммарноеИзменениеОтложенногоНалога(Запись);
		
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы Тогда
			Расчет.ОтложенныйНалоговыйАктивКонецПериода = Расчет.ОтложенныйНалоговыйАктивКонецПериода + Запись.ОтложенныйНалог;
			ОтложенныйНалоговыйАктивИзменение = ОтложенныйНалоговыйАктивИзменение + ИзменениеОтложенногоНалога;
		Иначе
			Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода = Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода + Запись.ОтложенныйНалог;
			ОтложенноеНалоговоеОбязательствоИзменение = ОтложенноеНалоговоеОбязательствоИзменение + ИзменениеОтложенногоНалога;
		КонецЕсли;
		
	КонецЦикла;
	
	Расчет.ОтложенныйНалоговыйАктивНачалоПериода         = Расчет.ОтложенныйНалоговыйАктивКонецПериода         - ОтложенныйНалоговыйАктивИзменение;
	Расчет.ОтложенноеНалоговоеОбязательствоНачалоПериода = Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода - ОтложенноеНалоговоеОбязательствоИзменение;
	
	// Такой расчет отложенного налогового актива не включает специальный налоговый актив по убытку,
	// учтенный на счете 09 в течение отчетного периода до переноса убытка.
	// Включим.
	Расчет.ОтложенныйНалоговыйАктивКонецПериода = Расчет.ОтложенныйНалоговыйАктивКонецПериода + Расчет.ВлияниеУбыткаТекущегоПериода;
	
	// Для описания расчета инвертируем знаки отложенного обязательства
	Расчет.ОтложенноеНалоговоеОбязательствоНачалоПериода = - Расчет.ОтложенноеНалоговоеОбязательствоНачалоПериода;
	Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода  = - Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода;
	
	// Описание расчета
	КодСчетаОтложенныеНалоговыеАктивы        = КодСчета(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	КодСчетаОтложенныеНалоговыеОбязательства = КодСчета(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	
	// - на начало периода
	Расчет.ОтложенныйНалогНачалоПериода = Расчет.ОтложенныйНалоговыйАктивНачалоПериода - Расчет.ОтложенноеНалоговоеОбязательствоНачалоПериода;
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) - (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалоговыйАктивНачалоПериода, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенноеНалоговоеОбязательствоНачалоПериода, Расчет.КодыПоказателей));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйНалогНачалоПериода", ПорядокРасчета);
		
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Сальдо на начало периода по дебету счета %1'", Расчет.КодЯзыка),
		КодСчетаОтложенныеНалоговыеАктивы);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйНалоговыйАктивНачалоПериода", ПорядокРасчета);
		
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Сальдо на начало периода по кредиту счета %1'", Расчет.КодЯзыка),
		КодСчетаОтложенныеНалоговыеОбязательства);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенноеНалоговоеОбязательствоНачалоПериода", ПорядокРасчета);
		
	// - на конец периода
	Расчет.ОтложенныйНалогКонецПериода = Расчет.ОтложенныйНалоговыйАктивКонецПериода - Расчет.ОтложенноеНалоговоеОбязательствоКонецПериода;
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) - (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалоговыйАктивКонецПериода, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенноеНалоговоеОбязательствоКонецПериода, Расчет.КодыПоказателей));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйНалогКонецПериода", ПорядокРасчета);
		
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Сальдо на конец периода по дебету счета %1'", Расчет.КодЯзыка),
		КодСчетаОтложенныеНалоговыеАктивы);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйНалоговыйАктивКонецПериода", ПорядокРасчета);
		
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = 'Сальдо на конец периода по кредиту счета  %1'", Расчет.КодЯзыка),
		КодСчетаОтложенныеНалоговыеОбязательства);
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенноеНалоговоеОбязательствоКонецПериода", ПорядокРасчета);
		
	// - отложенный налог за период
	ПорядокРасчета = СтрШаблон(
		НСтр("ru = '(%1) - (%2)'", Расчет.КодЯзыка),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалогКонецПериода, Расчет.КодыПоказателей),
		Перечисления.ПоказателиОтложенногоНалога.Код(Перечисления.ПоказателиОтложенногоНалога.ОтложенныйНалогНачалоПериода, Расчет.КодыПоказателей));
	ДобавитьЗаписьПротоколаРасчета(Расчет, "ОтложенныйНалог", ПорядокРасчета);
	
	// - специальный налоговый актив
	Если ЗначениеЗаполнено(Расчет.ВлияниеУбыткаТекущегоПериода) Тогда
		
		ПорядокРасчета = СтрШаблон(
			НСтр("ru = 'Сальдо на конец периода по дебету счета  %1 - вид актива %2'", Расчет.КодЯзыка),
			КодСчетаОтложенныеНалоговыеАктивы,
			Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
		ДобавитьЗаписьПротоколаРасчета(Расчет, "ВлияниеУбыткаТекущегоПериода", ПорядокРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СуммарноеИзменениеОтложенногоНалога(Изменение)
	
	Возврат Изменение.ЭффектУвеличенияВременныхРазниц
		  + Изменение.ЭффектУменьшенияВременныхРазниц
		  + Изменение.ЭффектИзмененияСтавкиБудущегоНалога
		  + Изменение.ЭффектИзмененияСтавкиТекущегоНалога
		  + Изменение.ПогрешностьОкругления;

КонецФункции

Функция ВлияниеУбыткаТекущегоПериода(ОблагаемыйФинансовыйРезультат, СтавкаНалога, КонтекстРасчета)
	
	// 34 Отложенный налоговый актив должен признаваться в отношении перенесенных на будущие периоды
	//    неиспользованных налоговых убытков
	
	// В течение налогового периода признаем сумму такого отложенного актива условно -
	// только для выполнения технологических равенств на счетах учета
	
	Если ОблагаемыйФинансовыйРезультат.СуммаНУ >= 0 Тогда
		Возврат 0;
	КонецЕсли;
		
	УбытокТекущегоПериода = - ОблагаемыйФинансовыйРезультат.СуммаНУ;
	
	// Убыток текущего периода, перенесенный на будущие периоды, уже может быть отражен на балансовом счете как расход будущих периодов.
	// Поэтому, влияние убытка текущего периода уточняется с учетом уже перенесенного убытка.
	ПереносУбыткаТекущегоПериода = НалогНаПрибыльУбыткиПрошлыхЛет.УбытокПеренесенныйНаБудущее(
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организации);
		
	НеПеренесенныйУбыток = Макс(0, УбытокТекущегоПериода - ПереносУбыткаТекущегоПериода);
		
	Возврат СуммаПоСтавкеНалога(НеПеренесенныйУбыток, СтавкаНалога);
		
КонецФункции

Процедура ЗаписатьРасчетНалога(Проводки, РасчетТекущегоНалога, СуммаНачисленногоНалога, КонтекстРасчета)
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		// Р-102 позволяет обойтись без таких проводок
		Возврат;
	КонецЕсли;
	
	// Все проводки - в корреспонденции со счетом 68.04.2
	СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	СхемаРасчета = Новый ТаблицаЗначений;
	СхемаРасчета.Колонки.Добавить("Имя",             Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("ПредставлениеКт", Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("КорСчетКт",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")); // По Кт счета 68.04.2
	СхемаРасчета.Колонки.Добавить("ПредставлениеДт", Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("КорСчетДт",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")); // По Дт счета 68.04.2
	СхемаРасчета.Колонки.Добавить("КорСубконто",     Новый ОписаниеТипов("Соответствие"));
	
	// Начисление условного расхода (дохода)
	// Дт 99.02.1 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.02.2
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "УсловныйРасход";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Условный расход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
	ВариантПроводки.ПредставлениеДт = НСтр("ru = 'Условный доход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
	
	// Начисление постоянного расхода (дохода)
	// Дт 99.02.3 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.02.3 
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "ПостоянныйНалоговыйРасход";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Постоянный налоговый расход'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	ВариантПроводки.ПредставлениеДт = НСтр("ru = 'Постоянный налоговый доход'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
		
	// Списание сумм отложенных налоговых активов и обязательств при выбытии активов, по которым они начислены,
	// в ходе деятельности, не облагаемой налогом на прибыль.
	// Дт 99.01.2 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.01.2 
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "ВыбытиеПоСпециальнымРежимам";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Корректировка отложенного налога в связи с выбытием активов и обязательств по деятельности, не облагаемой налогом на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	ВариантПроводки.ПредставлениеДт = ВариантПроводки.ПредставлениеКт;
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	ВариантПроводки.КорСубконто.Вставить(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки,
		Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		
	// Определим суммы проводок
	СуммыПроводок = Новый Структура; // Ключ - имя варианта, Значение - сумма
	СуммыПроводок.Вставить("УсловныйРасход",              РасчетТекущегоНалога.УсловныйРасход);
	СуммыПроводок.Вставить("ПостоянныйНалоговыйРасход",   РасчетТекущегоНалога.ПостоянныйНалоговыйРасход);
	СуммыПроводок.Вставить("ВыбытиеПоСпециальнымРежимам", РасчетТекущегоНалога.ВыбытиеПоСпециальнымРежимам);
	
	// Скорректируем на суммы ранее сформированных проводок.
	
	КорСчетаВариантов = Новый Соответствие; // Ключ - счет, Значение - имя варианта
	КорСчета          = Новый Массив;
	Для Каждого ВариантПроводки Из СхемаРасчета Цикл
		
		КорСчетаВарианта = Новый Массив;
		
		Если ЗначениеЗаполнено(ВариантПроводки.КорСчетКт) Тогда
			КорСчетаВарианта.Добавить(ВариантПроводки.КорСчетКт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВариантПроводки.КорСчетДт) Тогда
			КорСчетаВарианта.Добавить(ВариантПроводки.КорСчетДт);
		КонецЕсли;
		
		КорСчетаВарианта = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(КорСчетаВарианта);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета, КорСчетаВарианта);
		
		Для Каждого Счет Из КорСчетаВарианта Цикл
			КорСчетаВариантов.Вставить(Счет, ВариантПроводки.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",       КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СчетРасчетаНалога", СчетРасчетаНалога);
	Запрос.УстановитьПараметр("КорСчета",          КорСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &СчетРасчетаНалога, , Организация = &Организация, КорСчет В (&КорСчета), ) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяВарианта = КорСчетаВариантов[Выборка.КорСчет];
		
		Если ИмяВарианта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммыПроводок.Свойство(ИмяВарианта) Тогда
			СуммыПроводок[ИмяВарианта] = СуммыПроводок[ИмяВарианта] - Выборка.Сумма;
		Иначе
			СуммыПроводок.Вставить(ИмяВарианта, - Выборка.Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем проводки на суммы корректировки
	
	Для Каждого ВариантПроводки Из СхемаРасчета Цикл
		
		Если Не СуммыПроводок.Свойство(ВариантПроводки.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = СуммыПроводок[ВариантПроводки.Имя];
		
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводки.Записывать = Истина;
		
		Проводка = Проводки.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		
		Если Сумма > 0 Тогда
			
			// По Дт счета расчета налога
			
			Проводка.Сумма       = Сумма;
			Проводка.Содержание  = ВариантПроводки.ПредставлениеДт;
			
			Проводка.СчетДт = СчетРасчетаНалога;
			Проводка.СчетКт = ВариантПроводки.КорСчетДт;
			
			Для Каждого ЗначениеСубконто Из ВариантПроводки.КорСубконто Цикл
				Проводка.СубконтоКт.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
			КонецЦикла;
			
		Иначе
			
			// По Кт счета расчета налога
			
			Проводка.Сумма       = - Сумма;
			Проводка.Содержание  = ВариантПроводки.ПредставлениеКт; 
			
			Проводка.СчетДт = ВариантПроводки.КорСчетКт;
			Проводка.СчетКт = СчетРасчетаНалога;
			Для Каждого ЗначениеСубконто Из ВариантПроводки.КорСубконто Цикл
				Проводка.СубконтоДт.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВлияниеУбыткаТекущегоПериода(Проводки, ВлияниеУбыткаТекущегоПериода, КонтекстРасчета)
	
	// Начисление или погашение специального отложенного налогового актива
	// Дт 09 Кт 68.04.2 (99.02.О)
	// или
	// Дт 68.04.2 (99.02.О) Кт 09
	// на разницу между переданной суммой влияния убытка и ранее отраженной на счете 09.
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.ОтложенныйНалогНаПрибыль;
	Иначе
		СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КонецЕсли;
	
	СчетОтложенногоНалога = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетОтложенногоНалога", СчетОтложенногоНалога);
	Запрос.УстановитьПараметр("ОтчетнаяДата",          КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организации",           КонтекстРасчета.Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Сальдо.СуммаОстаток) КАК ОтложенныйНалог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет = &СчетОтложенногоНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = Значение(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК Сальдо";
	
	РанееОтраженныйОтложенныйНалог = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОтложенныйНалог) Тогда
		РанееОтраженныйОтложенныйНалог = Выборка.ОтложенныйНалог;
	КонецЕсли;
	
	Корректировка = ВлияниеУбыткаТекущегоПериода - РанееОтраженныйОтложенныйНалог;
	Если Корректировка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияБухгалтерии.Дебет;
	Если Корректировка < 0 Тогда
		ВидДвижения = ВидДвиженияБухгалтерии.Кредит;
		Корректировка = -Корректировка;
	КонецЕсли;
	
	// Представление записывается в ИБ, поэтому локализуются основным языком конфигурации.
	Представление = НСтр("ru = 'Убыток текущего периода'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ДобавитьПроводкуОтложенныйНалог(
		Проводки,
		Корректировка,
		Представление,
		ВидДвижения,
		СчетОтложенногоНалога,
		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода,
		СчетРасчетаНалога,
		КонтекстРасчета);
	
КонецПроцедуры

Функция НачисленныйНалог(КонтекстРасчета)
	
	// При применении ПБУ 18 налог начисляется проводкой
	// Дт 68.04.2 Кт 68.04.1
	// или
	// Дт 99.02.Т Кт 68.04.1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",         КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СчетаТекущегоНалога", СчетаТекущегоНалога());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК НачисленныйНалог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт В (&СчетаТекущегоНалога), , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачисленныйНалог;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗакрытьСчетРасчетаНалога(Проводки, КонтекстРасчета)
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		Возврат;
	КонецЕсли;
	
	// Все проводки - в корреспонденции со счетом 68.04.2
	СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КорСчет           = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	ПредставлениеПроводки = НСтр("ru = 'Перенос сальдо счета 68.04.2'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Определим сумму проводки как сальдо на счете скорректированное на подготовленные проводки
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("ОтчетнаяДата",      КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организация",       КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СчетРасчетаНалога", СчетРасчетаНалога);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сальдо
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет = &СчетРасчетаНалога, , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Сальдо = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сальдо = Сальдо + Выборка.Сальдо;
	КонецЦикла;
	
	Для Каждого Проводка Из Проводки Цикл
		Если Проводка.СчетДт = СчетРасчетаНалога Тогда
			Сальдо = Сальдо + Проводка.Сумма;
		КонецЕсли;
		Если Проводка.СчетКт = СчетРасчетаНалога Тогда
			Сальдо = Сальдо - Проводка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если Сальдо = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводки.Записывать = Истина;
	
	Проводка = Проводки.Добавить();
	Проводка.Период      = КонтекстРасчета.КонецПериода;
	Проводка.Организация = КонтекстРасчета.Организация;
	
	Если Сальдо > 0 Тогда
		
		// По Кт счета расчета налога
		
		Проводка.Сумма       = Сальдо;
		Проводка.Содержание  = ПредставлениеПроводки; 
		
		Проводка.СчетДт = КорСчет;
		Проводка.СчетКт = СчетРасчетаНалога;
		
	Иначе
		
		// По Дт счета расчета налога
		
		Проводка.Сумма       = - Сальдо;
		Проводка.Содержание  = ПредставлениеПроводки;
		
		Проводка.СчетДт = СчетРасчетаНалога;
		Проводка.СчетКт = КорСчет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРасчетПоказателейОтложенногоНалога(Движения, РасчетРасходаПоНалогу, РеквизитыЗаписи)
	
	Протокол = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетПоказателейОтложенногоНалога);
	
	Для Каждого ОписаниеПоказателя Из Метаданные.Перечисления.ПоказателиОтложенногоНалога.ЗначенияПеречисления Цикл
		
		ИмяПоказателя = ОписаниеПоказателя.Имя;
		Показатель    = Перечисления.ПоказателиОтложенногоНалога[ИмяПоказателя];
		
		Сумма          = РасчетРасходаПоНалогу[ИмяПоказателя];
		ПорядокРасчета = РасчетРасходаПоНалогу.ПорядокРасчета[Показатель];
		
		// В расчет включаются показатели, для которых задан порядок расчета.
		// Это позволяет исключить показатели, которые имеют числовое значение, но не важны (избыточны) для пояснения расчета.
		// В частном случае порядок расчета может быть пустой строкой: это позволяет включить показатель без описания.
		Если ПорядокРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Некоторые показатели следует называть "доход", так как они увеличивают чистую прибыль.
		// Однако, численно равны расходу (положительное число)
		Если Показатель = Перечисления.ПоказателиОтложенногоНалога.ПостоянныйНалоговыйРасход И Сумма > 0 Тогда
			Показатель = Перечисления.ПоказателиОтложенногоНалога.ПостоянныйНалоговыйДоход;
		ИначеЕсли Показатель = Перечисления.ПоказателиОтложенногоНалога.УсловныйРасход И Сумма > 0 Тогда
			Показатель = Перечисления.ПоказателиОтложенногоНалога.УсловныйДоход;
		ИначеЕсли Показатель = Перечисления.ПоказателиОтложенногоНалога.РасходПоНалогу И Сумма > 0 Тогда
			Показатель = Перечисления.ПоказателиОтложенногоНалога.ДоходПоНалогу;
		КонецЕсли;
		
		Запись = Протокол.Добавить();
		Запись.Показатель      = Показатель;
		Запись.НомерПоказателя = Перечисления.ПоказателиОтложенногоНалога.Код(Запись.Показатель, РасчетРасходаПоНалогу.КодыПоказателей);
		Запись.ПорядокРасчета  = ПорядокРасчета;
		Запись.Сумма           = Сумма;
		
	КонецЦикла;
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Протокол,
		РеквизитыЗаписи,
		"РасчетПоказателейОтложенногоНалога");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СправкиРасчеты

Функция СправкиРасчеты() Экспорт
	
	ИменаОтчетов = Новый Массив;
	ИменаОтчетов.Добавить("СправкаРасчетРасходаПоНалогуНаПрибыль");
	ИменаОтчетов.Добавить("СправкаРасчетОтложенногоНалога");
	ИменаОтчетов.Добавить("СправкаРасчетЭффектаИзмененияСтавокНалогаНаПрибыль");
	
	Возврат Новый ФиксированныйМассив(ИменаОтчетов);
	
КонецФункции

Процедура ДобавитьСправкиРасчеты(СписокВыбора) Экспорт
	
	Для Каждого ИмяОтчета Из СправкиРасчеты() Цикл
		
		Схема = Отчеты[ИмяОтчета].ПолучитьМакет(Метаданные.Отчеты[ИмяОтчета].ОсновнаяСхемаКомпоновкиДанных);
		Варианты = Схема.ВариантыНастроек;
		Если ЗначениеЗаполнено(Варианты) Тогда
			Представление = Варианты[0].Представление;
			СписокВыбора.Добавить(ИмяОтчета, Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПервичныеДокументы

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы разниц в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыПостоянныхВременныхРазниц()
// 
// Возвращаемое значение:
//  Булево - Истина, если может потребоваться использовать суммы разниц в проводках.
//
Функция ПользователюДоступныСуммыРазниц() Экспорт
	
	// Функциональные опции, привязанные к ресурсу периодического регистра сведений,
	// фактически могут быть использованы только при использовании Периода в качестве параметров функциональной опции.
	
	// Потому что значение функциональной опции вычисляется по срезу последних регистра и если период не передан,
	// то значение функциональной опции будет Истина только в том случае, когда на самый поздний момент значение ресурса Истина,
	// а не в том случае, когда в одной из записей значение ресурса Истина.
	
	// Поэтому здесь не обращаемся к функциональной опции, а обращаемся к данным регистра непосредственно.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетнаяПолитика.ПоддержкаПБУ18 КАК ПоддержкаПБУ18
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.ПоддержкаПБУ18";
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти
