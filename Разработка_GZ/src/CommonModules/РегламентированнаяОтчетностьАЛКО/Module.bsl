
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции регламентированных отчетов ФСРАР общего назначения:
// - для работы с регистрами сведений АЛКО;
// - для проверки, выгрузки, печати отчетов АЛКО
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейсОбщие

// Возвращает номер версии подсистемы, встроенной в конфигурацию.
//
// Параметры:
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации.
// Возвращаемое значение:
//  Строка - версия подсистемы, например "1.0.1.1".
//
Функция ВерсияПодсистемыКонфигурации(ИмяПодсистемы) Экспорт

	ВерсияПодсистемы =  РегламентированнаяОтчетностьАЛКОПовтИсп.ВерсияПодсистемыКонфигурации(ИмяПодсистемы);

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(ВерсияПодсистемы);
	
КонецФункции

// Возвращает версию подсистемы в виде числового значения.
//
// Параметры
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации. 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюПодсистемыКонфигурацииЧислом(ИмяПодсистемы) Экспорт

	ВерсияПодсистемы = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьВерсиюПодсистемыКонфигурацииЧислом(ИмяПодсистемы); 
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(ВерсияПодсистемы);

КонецФункции

// Возвращает приведенное к числу значение версии подсистемы.
// Параметры
//	 СтрокаВерсии - Строка. Строка версии вида "0.0.0.0".
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюЧислом(СтрокаВерсии) Экспорт

	Версия = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьВерсиюЧислом(СтрокаВерсии);
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Версия);

КонецФункции

// Возвращает версию подсистемы "СтандартныеПодсистемы" в виде числового значения.
//
// Параметры
//	 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюБСПЧислом() Экспорт

	Версия = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьВерсиюБСПЧислом();
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Версия);
	
КонецФункции

// Возвращает имя общего модуля работы с адресами, в зависимости от версии БСП.
// Параметры
//	 ВерсияБСПЧислом - Число. Результат работы ПолучитьВерсиюЧислом().
// Возвращаемое значение:
//   Строка.
//
Функция ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом = Неопределено) Экспорт

	ИмяМодуля = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом);
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(ИмяМодуля);

КонецФункции


// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате 
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                       общий модуль или модуль менеджера объекта.
// Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                       в порядке расположения элементов массива.
// 
Процедура ВыполнитьМетодКонфигурацииАЛКО(Знач ИмяМетода,
		Знач Параметры = Неопределено, ВерсияБСПЧислом = Неопределено) Экспорт

	ИмяОбщегоМодуляВычислитьВыполнить = ПолучитьИмяОбщегоМодуляВычислитьВыполнить(ВерсияБСПЧислом);

	Попытка
		ОбщийМодульВычислитьВыполнить = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляВычислитьВыполнить);
	Исключение

		ТекстСообщения = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляВычислитьВыполнить + "!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ОбщийМодульВычислитьВыполнить.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);

КонецПроцедуры

// Выполнить экспортную процедуру объекта встроенного языка по имени.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемом для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  Объект - Произвольный - объект встроенного языка 1С:Предприятия, содержащий методы (например, ОбработкаОбъект),
//  ИмяМетода - Строка - имя экспортной процедуры модуля объекта обработки.
// Параметры - Массив - параметры передаются в процедуру <ИмяПроцедуры>
//  в порядке расположения элементов массива.
//
Процедура ВыполнитьМетодОбъектаАЛКО(Знач Объект, Знач ИмяМетода,
		Знач Параметры = Неопределено, ВерсияБСПЧислом = Неопределено) Экспорт

	ИмяОбщегоМодуляВычислитьВыполнить = ПолучитьИмяОбщегоМодуляВычислитьВыполнить(ВерсияБСПЧислом);

	Попытка
		ОбщийМодульВычислитьВыполнить = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляВычислитьВыполнить);
	Исключение

		ТекстСообщения = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляВычислитьВыполнить + "!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ОбщийМодульВычислитьВыполнить.ВыполнитьМетодОбъекта(Объект, ИмяМетода, Параметры);

КонецПроцедуры

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
//  безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
//  присутствующих в составе конфигурации. В результате при выполнении алгоритма:
//   - игнорируются попытки установки привилегированного режима,
//   - запрещаются все внешние (по отношению к платформе 1С:Предприятие) действия (COM,
//       загрузка внешних компонент, запуск внешних приложений и команд операционной системы,
//       доступ к файловой системе и Интернет-ресурсам),
//   - запрещается отключение использования разделителей сеанса,
//   - запрещается изменение значений разделителей сеанса (если разделение данным разделителем не
//       является условно выключенным),
//   - запрещается изменение объектов, которые управляют состоянием условного разделения.
//
// Параметры:
//  Алгоритм - Строка - содержащая произвольный алгоритм на встроенном языке 1С:Предприятия.
//  Параметры - Произвольный - в качестве значения данного параметра может быть передано значение,
//    которое требуется для выполнения алгоритма (при этом в тексте алгоритма обращение к данному
//    значению должно осуществляться как к имени переменной Параметры).
//
Процедура ВыполнитьВБезопасномРежимеАЛКО(Знач Алгоритм,
		Знач Параметры = Неопределено, ВерсияБСПЧислом = Неопределено) Экспорт

	ИмяОбщегоМодуляВычислитьВыполнить = ПолучитьИмяОбщегоМодуляВычислитьВыполнить(ВерсияБСПЧислом);

	Попытка
		ОбщийМодульВычислитьВыполнить = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляВычислитьВыполнить);
	Исключение

		ТекстСообщения = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляВычислитьВыполнить + "!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ОбщийМодульВычислитьВыполнить.ВыполнитьВБезопасномРежиме(Алгоритм, Параметры);

КонецПроцедуры

// Вычисляет переданное выражение, предварительно устанавливая безопасный режим выполнения кода
//  и безопасный режим разделения данных для всех разделителей, присутствующих в составе конфигурации.
//  В результате при вычислении выражения:
//   - игнорируются попытки установки привилегированного режима,
//   - запрещаются все внешние (по отношению к платформе 1С:Предприятие) действия (COM,
//       загрузка внешних компонент, запуск внешних приложений и команд операционной системы,
//       доступ к файловой системе и Интернет-ресурсам),
//   - запрещается отключение использования разделителей сеанса,
//   - запрещается изменение значений разделителей сеанса (если разделение данным разделителем не
//       является условно выключенным),
//   - запрещается изменение объектов, которые управляют состоянием условного разделения.
//
// Параметры:
//  Выражение - Строка - выражение, которое требуется вычислить. Например, "МойМодуль.МояФункция(Параметры)".
//  Параметры - Произвольный - в качестве значения данного параметра может быть передано значение,
//    которое требуется для вычисления выражения (при этом в тексте выражения обращение к данному
//    значению должно осуществляться как к имени переменной Параметры).
//
// Возвращаемое значение: 
//   Произвольный - результат вычисления выражения.
//
Функция ВычислитьАЛКО(Знач Выражение, Знач Параметры = Неопределено,
		ВерсияБСПЧислом = Неопределено) Экспорт

	ИмяОбщегоМодуляВычислитьВыполнить = ПолучитьИмяОбщегоМодуляВычислитьВыполнить(ВерсияБСПЧислом);

	Попытка
		ОбщийМодульВычислитьВыполнить = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляВычислитьВыполнить);
	Исключение

		ТекстСообщения = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляВычислитьВыполнить + "!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат Неопределено;

	КонецПопытки;

	Возврат ОбщийМодульВычислитьВыполнить.ВычислитьВБезопасномРежиме(Выражение, Параметры);

КонецФункции

// Определяет значение, отображаемое элементом формы, по имени элемента.
//
// Параметры:
//			Форма			- Управляемая форма.
//			ИмяЭлемента		- Строка - имя элемента формы.
//
// Возвращаемое значение:
//		Произвольное.
//
Функция ПолучитьЗначениеЭлементаФормы(Форма, ИмяЭлемента) Экспорт

	Элементы = Форма.Элементы;

	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Если НЕ ЗначениеЗаполнено(ПутьКДанным) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПозицияТочки = СтрНайти(ПутьКДанным, ".");
	Если ПозицияТочки > 0 Тогда

		ИмяАгрегатногоРеквизита = Лев(ПутьКДанным, ПозицияТочки - 1);
		ПутьКДанным = Сред(ПутьКДанным, ПозицияТочки + 1);

		// Например, Запись для формы записи регистра сведений.
		ЗначениеЭлемента = Форма[ИмяАгрегатногоРеквизита][ПутьКДанным];

	Иначе
		ЗначениеЭлемента = Форма[ПутьКДанным];
	КонецЕсли;

	Возврат ЗначениеЭлемента;

КонецФункции

// Определяет имя формы объекта для значения, отображаемого элементом формы.
//
// Параметры:
//			Форма			- Управляемая форма.
//			ИмяЭлемента		- Строка - имя элемента формы.
//          ЗначениеСсылки	- Тип любой. В параметре возвращается значение реквизита формы, который является
//							источником данных для элемента.
// Возвращаемое значение:
//		Строка.
//
Функция ПолучитьИмяФормыОбъектаЗначенияЭлементаФормы(Форма, ИмяЭлементаСсылки,
		ЗначениеСсылки = Неопределено) Экспорт

	ЗначениеСсылки = ПолучитьЗначениеЭлементаФормы(Форма, ИмяЭлементаСсылки);
	ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(ЗначениеСсылки);

	Возврат ИмяФормыОбъекта;

КонецФункции

// Определяет неполное имя объекта метаданных по имени любой формы, относящейся к этому объекту.
//
// Параметры:
//
//			ИмяФормыОбъектаМетаданных	- Строка - имя любой формы объекта метаданных.
//
// Возвращаемое значение:
//		Строка.
//
// Пример:
//
// ИмяОбъекта = ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормы);
//
// Если имя формы например РегистрыСведений.СведенияРеглОтчетАлкоПрил11Раздел1.Форма.ФормаЗаписи
// то ИмяОбъекта = "СведенияРеглОтчетАлкоПрил11Раздел1"
//
Функция ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормыОбъектаМетаданных) Экспорт

	ИмяОбъектаСВидомОбъекта = Лев(ИмяФормыОбъектаМетаданных, СтрНайти(ИмяФормыОбъектаМетаданных, ".Форма.")
		- 1);
	ПозТочкиПередИменемОбъекта = СтрНайти(ИмяОбъектаСВидомОбъекта, ".", НаправлениеПоиска.СКонца);
	Результат = Сред(ИмяОбъектаСВидомОбъекта, ПозТочкиПередИменемОбъекта + 1);

	Возврат Результат;

КонецФункции

// Определяет имя формы объекта по переданной ссылке.
//
// Параметры:
// 		Ссылка		- Любая ссылка - ссылка на объект метаданных.
//
// Возвращаемое значение:
// 		Строка - имя формы объекта ссылки.
//
Функция ПолучитьИмяФормыОбъекта(Ссылка) Экспорт

	ИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();

	ИмяФормыОбъекта = ИмяОбъектаМетаданных + ".ФормаОбъекта";

	Возврат ИмяФормыОбъекта;

КонецФункции

// Опеределяет все ли символы в переданной строке - цифры. 
// Не используется посимвольный перебор, благодаря чему работает очень быстро,
// что важно при большом объеме проверок.
// Не подходит для проверки строки произвольной длины.
//
// Параметры:
// 		ПроверяемаяСтрока		- Строка.
//
// Возвращаемое значение:
// 		Булево - Истина если в строке все символы являются цифрами.
//
Функция ВСтрокеВсеЦифры(ПроверяемаяСтрока) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ВСтрокеВсеЦифры(ПроверяемаяСтрока);

КонецФункции

// Создает поток XML в необходимой кодировке, в виде строки или в виде файла.
//
// Параметры:
// 		Кодировка		- Строка. - Необязательный. Название кодировки.
//		ИмяФайлаXML		- Строка. - Необязательный. Имя файла, в который нужно начать писать поток XML.
//
// Возвращаемое значение:
// 		ЗаписьXML  	- с установленной строкой кодировки и в случае переданного имени файла, 
//					с открытым файлом для записи информации XML.
//
Функция СоздатьНовыйПотокXML(Кодировка = "windows-1251",
		ИмяФайлаXML = Неопределено) Экспорт

	ПотокXML = Новый ЗаписьXML();

	ПотокXML.Отступ = Истина;

	Если ЗначениеЗаполнено(ИмяФайлаXML) Тогда
		ПотокXML.ОткрытьФайл(ИмяФайлаXML, Кодировка);
	Иначе
		ПотокXML.УстановитьСтроку(Кодировка);
	КонецЕсли;

	ПотокXML.ЗаписатьОбъявлениеXML();

	Возврат ПотокXML;

КонецФункции

// Формирует Хеш сумму CRC32.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Число.	
//
Функция ПолучитьХешCRC32(Стр) Экспорт

	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(Стр);

	Возврат Хеширование.ХешСумма;

КонецФункции

// Формирует Хеш сумму SHA256.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка.	
//
Функция ПолучитьХешSHA256(Стр) Экспорт

	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(Стр);

	СтрокаХеша = Строка(Хеширование.ХешСумма); // хеш SHA256 - двоичные данные
	СтрокаХеша = СтрЗаменить(СтрокаХеша, " ", ""); // длина 64 символа
	Возврат СтрокаХеша;

КонецФункции

// Формирует строку Хеш суммы SHA256 с символом "X" впереди.
// В таком виде строка хеш суммы может использоваться в качестве ключа структуры.
//
// Параметры:
// 		Стр				- Строка.
//
// Возвращаемое значение:
// 		Строка.	
//
Функция ХешСтрокойПригоднойДляКлючаСтруктуры(Стр) Экспорт

	Результат = "Х" + ПолучитьХешSHA256(Строка(Стр));

	Возврат Результат;

КонецФункции

Функция ПолучитьИдДок(ДокументСсылкаАлкоОтчет) Экспорт

	ИдДокАлкоОтчет = ДокументСсылкаАлкоОтчет.УникальныйИдентификатор();
	ИдДокАлкоОтчет = СтрЗаменить(Строка(ИдДокАлкоОтчет), "-", "");		
		
	Возврат ИдДокАлкоОтчет;

КонецФункции
 
// Формирует идентификатор страницы табличных данных отчета при отражении в регистре сведений.
//
// Параметры:
// 		ДокументСсылкаАлкоОтчет				- ДокументСсылка.
//		ИндексСтраницы						- Число.
// Возвращаемое значение:
// 		Строка.	
//
Функция ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет,
		ИндексСтраницы, ИДДок = Неопределено) Экспорт
		
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ИДДок)  Тогда
		
		Если ЗначениеЗаполнено(ДокументСсылкаАлкоОтчет) Тогда
		
			СписокСохранения = ДокументСсылкаАлкоОтчет.ДанныеОтчета.Получить();
			
			ИДДок = Неопределено;	
			СписокСохранения.Свойство("ИДДок", ИДДок);	
		
		КонецЕсли; 
				
		Если НЕ ЗначениеЗаполнено(ИДДок) Тогда		
			ИДДок = ПолучитьИдДок(ДокументСсылкаАлкоОтчет);		
		КонецЕсли;
	
	КонецЕсли; 

	Результат = ИДДок + "_" + Строка(ИндексСтраницы);	
		

	ДолжноБытьСимволов = 47;

	Результат = ВернутьСтрокуНужнойДлины(Результат, ДолжноБытьСимволов);

	Возврат Результат;

КонецФункции

// Формирует из строки параметра строку нужной длины, обрезая справа или добавляя справа пробелы.
//
// Параметры:
// 		Стр						- Строка.
//		ДолжноБытьСимволов		- Число.
// Возвращаемое значение:
// 		Строка.	
//
Функция ВернутьСтрокуНужнойДлины(Стр, ДолжноБытьСимволов) Экспорт

	Результат = Стр;

	Если СтрДлина(Результат) > ДолжноБытьСимволов Тогда

		Результат = Лев(Результат, ДолжноБытьСимволов);

	Иначе

		Пока СтрДлина(Результат) < ДолжноБытьСимволов Цикл
			Результат = Результат + " ";
		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ОтчетОбъект отчета, в том числе внешнего, пригодного для обращения к процедурам и функциям
// модуля объекта отчета, получению макетов.
// Если в параметре ОбъектЭтогоОтч передано значение, возвращается именно оно.
//
// Параметры:
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
// Возвращаемое значение:
// 		ОтчетОбъект.<Имяотчета>	
//
Функция ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено) Экспорт

	Если ОбъектЭтогоОтч = Неопределено Тогда
		ОбъектЭтогоОтч = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
	КонецЕсли;

	Возврат ОбъектЭтогоОтч;

КонецФункции

// Возвращает макет опеределенный в конфигурации отчета, в том числе внешнего.
//
// Параметры:
// 		ИмяМакета			- Строка. Имя макета, как оно определено в конфигураторе.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
// Возвращаемое значение:
// 		ТабличныйДокумент; ТекстовыйДокумент; другой объект, который может быть макетом.	
//
Функция ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормы,
		ОбъектЭтогоОтч = Неопределено) Экспорт

	Возврат ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч).ПолучитьМакет(Строка(ИмяМакета));

КонецФункции

// Возвращает имя действующего на переданную дату макета нужного типа.
//
// Логика работы функции построена в предположении, что имя макета соответствует шаблону
// {ОсновноеИмяМакета}[версия]{[_]{ГГГГ}Кв{НомерКвартала}}[_{СуффиксОсновногоИмени}][_{ГГГГММЧЧ}]
//
// Заключенное в {} обязательные поля, а в [] - необязательные.
// При наличии обоих полей, определеяющих дату начала действия - [_{ГГГГММЧЧ}] будет иметь приоритет.
//
// Например:
//	ПечатнаяФормаОтчета2012Кв3_Титульный_20140101
//	ПечатнаяФормаОтчета2012Кв3_Титульный
//	Списки2015Кв3
//	СхемаВыгрузки431_2015Кв4
//	Списки2012Кв3_20120726.
//
// Параметры:
// 		
// 		ИмяФормы				-	Строка. Имя формы отчета.
//		ОсновноеИмяМакета		-	Строка. Имя макета без даты начала действия и суффикса.
//		НаДату					-	Дата. Дата, на момент которой необходимо определеить имя действующего макета.
//								Например: "ПечатнаяФормаОтчета", "СхемаВыгрузки", "Списки", "СоставПоказателей".
//		СуффиксОсновногоИмени 	- 	Строка. Необязательный. Строка суффикса после основного имени и даты действия в имени.
//		ОбъектЭтогоОтч			- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
// Возвращаемое значение:
// 		Строка - имя действующего на переданную дату макета.	
//
Функция ИмяДействующегоМакета(ИмяФормы = Неопределено, ОсновноеИмяМакета, 
		НаДату, СуффиксОсновногоИмени = "", ОбъектЭтогоОтч = Неопределено) Экспорт

	Если ОбъектЭтогоОтч = Неопределено И НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
	
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ИмяДействующегоМакета 
				|одновременно НЕ переданы параметры ОбъектЭтогоОтч и ИмяФормы.
				|Должен быть передан хотя бы один из этих параметров";
	
	КонецЕсли;
	
	ДатаДействующегоМакета = ПустоеЗначениеПоТипу("Дата");
	ДатаОбновленияДействующегоМакета = ПустоеЗначениеПоТипу("Дата");
	ИмяДействующегоМакета = "";
	
	ДатаСамогоРаннегоМакета = '2200.12.31';
	ДатаОбновленияСамогоРаннегоМакета = ПустоеЗначениеПоТипу("Дата");
	ИмяСамогоРаннегоМакета = "";
	
	Если ОбъектЭтогоОтч = Неопределено Тогда	
		ОбъектЭтогоОтч = ОбъектОтчетаАЛКО(ИмяФормы)		
	КонецЕсли;
	
	МетаданныеОтчета = ОбъектЭтогоОтч.Метаданные();
	КоллекцияМакетов = МетаданныеОтчета.Макеты;
	
	ДлинаСуффикса = СтрДлина(СуффиксОсновногоИмени);
	
	Для каждого МетаданныеМакета Из КоллекцияМакетов Цикл
	
		ИмяМакета = МетаданныеМакета.Имя;
		
		ПозицияПервогоСимвола = СтрНайти(ИмяМакета, ОсновноеИмяМакета);
		
		Если НЕ ПозицияПервогоСимвола = 1 Тогда
			Продолжить;		
		КонецЕсли;
		
		ДатаОбновления = ПустоеЗначениеПоТипу("Дата");
		ВозможнаяДата = Прав(ИмяМакета, 8);
		
		Если ВСтрокеВсеЦифры(ВозможнаяДата) Тогда
			
			ГодОбновления = Число(Лев(ВозможнаяДата, 4));
			МесяцОбновления = Число(Сред(ВозможнаяДата, 5, 2));
			ЧислоОбновления = Число(Прав(ВозможнаяДата, 2));
			
			ДатаОбновления = Дата(ГодОбновления, МесяцОбновления, ЧислоОбновления);
			
		КонецЕсли; 
		
		
		Если ДлинаСуффикса > 0 Тогда
		
			ПозицияСуффикса = СтрНайти(ИмяМакета, СуффиксОсновногоИмени, НаправлениеПоиска.СКонца);
			
			Если ПозицияСуффикса = 0 Тогда
				// Без суффикса не нужен.
				Продолжить;				
			КонецЕсли; 
			
		КонецЕсли;
		
		// В этой точке имеем точно макет из нужной группы.
		// Определим дату начала действия макета по кварталу.
		ПозицияКв = СтрНайти(ВРег(ИмяМакета), "КВ", НаправлениеПоиска.СКонца);
				
		Если ПозицияКв = 0 Тогда
			// Макет без метки даты.
			Продолжить;
		КонецЕсли;
		
		ПозицияГода = ПозицияКв - 4;
		ГодДаты = Число(Сред(ИмяМакета, ПозицияГода, 4));
				
		НомерКвартала = Число(Сред(ИмяМакета, ПозицияКв + 2, 1));
		
		ДатаНачалаДействияМакетаПоКварталу = НачалоКвартала(Дата(ГодДаты, НомерКвартала*3, 1));
				
		Если ДатаНачалаДействияМакетаПоКварталу > НаДату Тогда
			// Начало действия макета должно быть раньше даты действия.
			// На случай, если не найдем ничего, запоминаем самый ранний из макетов.
			Если ДатаСамогоРаннегоМакета > ДатаНачалаДействияМакетаПоКварталу Тогда			
				
				ДатаСамогоРаннегоМакета = ДатаНачалаДействияМакетаПоКварталу;
				ДатаОбновленияСамогоРаннегоМакета = ДатаОбновления;
				ИмяСамогоРаннегоМакета = ИмяМакета;
				
			ИначеЕсли ДатаСамогоРаннегоМакета = ДатаНачалаДействияМакетаПоКварталу Тогда
				
				Если ДатаОбновленияСамогоРаннегоМакета > ДатаОбновления Тогда
					
					ДатаСамогоРаннегоМакета = ДатаНачалаДействияМакетаПоКварталу;
					ДатаОбновленияСамогоРаннегоМакета = ДатаОбновления;
					ИмяСамогоРаннегоМакета = ИмяМакета;		
				
				КонецЕсли;
				
			КонецЕсли; 
			
			Продолжить;
			
		ИначеЕсли ДатаНачалаДействияМакетаПоКварталу > ДатаДействующегоМакета Тогда
			// Находим наибольшую дату начала действия среди тех, что меньше даты действия.
			ДатаДействующегоМакета = ДатаНачалаДействияМакетаПоКварталу;
			ДатаОбновленияДействующегоМакета = ДатаОбновления;
			ИмяДействующегоМакета = ИмяМакета;
			
		ИначеЕсли ДатаНачалаДействияМакетаПоКварталу = ДатаДействующегоМакета Тогда
			Если ДатаОбновленияДействующегоМакета < ДатаОбновления Тогда
				
				ДатаДействующегоМакета = ДатаНачалаДействияМакетаПоКварталу;
				ДатаОбновленияДействующегоМакета = ДатаОбновления;
				ИмяДействующегоМакета = ИмяМакета;		
			
			КонецЕсли;		
		КонецЕсли; 
		
	КонецЦикла; 
	
	ИмяДействующегоМакета = ?(ЗначениеЗаполнено(ИмяДействующегоМакета), ИмяДействующегоМакета, ИмяСамогоРаннегоМакета); 
	
	Возврат ИмяДействующегоМакета;
	
КонецФункции
 
Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы,
		ОбъектЭтогоОтч = Неопределено) Экспорт

	НазваниеОтчета = ОбъектОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч).Метаданные().ОсновнаяФорма.Синоним;

	Возврат НазваниеОтчета;

КонецФункции

Функция ПроверкаГотовностиПечатиНаСервереАЛКО(Форма) Экспорт

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Форма.СтруктураРеквизитовФормы.мРежимПечати = Ложь;

		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда

		Форма.СтруктураРеквизитовФормы.мРежимПечати = Ложь;
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ОпределитьКонтрагентаАЛКО(ИНН, КПП,
		ПолноеИлиКраткоеНаименование = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИНН = СокрЛП(ИНН);

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);

	УсловиеНалоговыйНомер = ?(ЕстьНалоговыйНомер, "Контрагенты.НалоговыйНомер = &ИНН", "Ложь");

	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка Как Контрагент				
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ГДЕ
		|
		|	(Контрагенты.ИНН = &ИНН ИЛИ &УсловиеНалоговыйНомер)";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНалоговыйНомер", УсловиеНалоговыйНомер);

	ЗапросКонтрагента = Новый Запрос;
	ЗапросКонтрагента.Текст = ТекстЗапроса;

	ЗапросКонтрагента.Параметры.Вставить("ИНН", ИНН);

	РезультатЗапроса = ЗапросКонтрагента.Выполнить().Выгрузить();

	Контрагент = ОпределитьКонтрагентаИзЗапросаАЛКО(РезультатЗапроса, ИНН, КПП, ПолноеИлиКраткоеНаименование, "Контрагент", ЕстьСтранаРегистрации);

	Возврат Контрагент;

КонецФункции

Функция ОпределитьКонтрагентаИзЛицензийПоставщиковАЛКО(ИНН, КПП,
		ПолноеИлиКраткоеНаименование = Неопределено,
		ТипАлкоголя = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИНН = СокрЛП(ИНН);

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);

	СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции);

	УсловиеВидЛицензии = "Истина";
	ИзмерениеПоставщик = "";

	Если ЗначениеЗаполнено(ТипАлкоголя)
			и (ТипЗнч(ТипАлкоголя) = Тип("Строка")) Тогда

		СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
		РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);

		Если ЗначениеЗаполнено(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво) Тогда

			Если ВРег(ТипАлкоголя) = ВРег("Слабоалкогольная")
					или ВРег(ТипАлкоголя) = ВРег("Пиво") Тогда

				УсловиеВидЛицензии = "ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			Иначе
				УсловиеВидЛицензии = "ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			КонецЕсли;

			УсловиеВидЛицензии = СтрЗаменить(УсловиеВидЛицензии, "&ВидыЛицензийНаПродажуАлкоголя", СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
		КонецЕсли;

	КонецЕсли;

	Если СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), ВРег("РегистрСведений.")) > 0 Тогда
		ИзмерениеПоставщик = "Поставщик";

	ИначеЕсли СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), ВРег("Справочник.")) > 0 Тогда
		ИзмерениеПоставщик = "Владелец";
	Иначе
	// Непонятная ситуация, на всякий случай упростим запрос.
		СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции) Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ВыборКонтрагента КАК Контрагент
			|ИЗ
			|	&ЛицензииПоставщиков КАК ЛицензииПоставщиковАлкогольнойПродукции
			|ГДЕ
			|	
			|	(&УсловиеИНН = &ИНН ИЛИ &УсловиеНалоговыйНомер)
			|    И &УсловиеВидЛицензии";

		ВыборКонтрагента = "ЛицензииПоставщиковАлкогольнойПродукции."
			+ ИзмерениеПоставщик;
		УсловиеИНН = "ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик
			+ ".ИНН";

		УсловиеНалоговыйНомер = ?(ЕстьНалоговыйНомер, "&УсловиеНалоговыйНомер2 = &ИНН", "Ложь");
		УсловиеНалоговыйНомер2 = "ЛицензииПоставщиковАлкогольнойПродукции."
			+ ИзмерениеПоставщик + ".НалоговыйНомер";
		УсловиеНалоговыйНомер = СтрЗаменить(УсловиеНалоговыйНомер, "&УсловиеНалоговыйНомер2", УсловиеНалоговыйНомер2);

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыборКонтрагента", ВыборКонтрагента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЛицензииПоставщиков", СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИНН", УсловиеИНН);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНалоговыйНомер", УсловиеНалоговыйНомер);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);

	Иначе

		Возврат ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеИлиКраткоеНаименование);

	КонецЕсли;

	ЗапросКонтрагента = Новый Запрос;
	ЗапросКонтрагента.Текст = ТекстЗапроса;

	ЗапросКонтрагента.Параметры.Вставить("ИНН", ИНН);

	РезультатЗапроса = ЗапросКонтрагента.Выполнить().Выгрузить();

	Контрагент = ОпределитьКонтрагентаИзЗапросаАЛКО(РезультатЗапроса, ИНН, КПП, ПолноеИлиКраткоеНаименование, "Контрагент", ЕстьСтранаРегистрации);

	Если Контрагент = Неопределено Тогда

		Возврат ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеИлиКраткоеНаименование);

	КонецЕсли;

	Возврат Контрагент;

КонецФункции

Функция ТекстЗапросаВыбораКонтрагентаАЛКО(ОсновнаяТаблица,
		НужныЛицензии = Истина, ТипАлкоголя = Неопределено,
		НайтиКонтрагента = Ложь, СтруктураПараметров = Неопределено) Экспорт

	Перем КодПродукции, ВставитьКодПродукции, ВставитьДату;
	
	КодПродукции = Ложь; ВставитьКодПродукции = Ложь; ВставитьДату = Ложь;
			
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
	
		////////////////////////////////////////////////////////////////////////////////////////
		// Проверка параметров, переданных в структуре.
		СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

		// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
		ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КодПродукции", "Булево", Ложь, Ложь, Ложь);
		// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
		ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВставитьКодПродукции", "Булево", Ложь, Ложь, Ложь);
		// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
		ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВставитьДату", "Булево", Ложь, Ложь, Ложь);
		
		ПравильныеПараметрыВСтруктуре(СтруктураПараметров, СтруктураТиповИЗначенийПоУмолчанию, Ложь);	
		
		СтруктураПараметров.Свойство("КодПродукции", КодПродукции);
		СтруктураПараметров.Свойство("ВставитьКодПродукции", ВставитьКодПродукции);
		СтруктураПараметров.Свойство("ВставитьДату", ВставитьДату);
	
	КонецЕсли; 
	
	
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
	
	РеквизитНаименованиеПолное = "Наименование";

	СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";

	Если НужныЛицензии ИЛИ КодПродукции
		ИЛИ (ЗначениеЗаполнено(ТипАлкоголя)
			и (ТипЗнч(ТипАлкоголя) = Тип("Строка"))) Тогда
		РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции);
	КонецЕсли;

	УсловиеВидЛицензии = "Истина";
	УсловиеКодПродукции = "Истина";
	УсловиеКонтрагент = "Истина";
	УсловиеПоискаКонтрагента = "Истина";
	УсловиеПоДате = "Истина";
	
	ВставитьКодПродукции = Ложь;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|&СсылкаНаЭлементСправочника КАК Ссылка,
		|&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
		|&КонтрагентВыборИНН КАК ИНН,
		|&КонтрагентВыборКПП КАК КПП,
		|&КонтрагентСтранаРегистрации КАК СтранаРегистрации,
		|&КонтрагентВидДеятельности КАК ВидДеятельности,
		|&КонтрагентКодВидаПродукции КАК КодВидаПродукции,		
		|&КонтрагентЛицензии КАК Лицензии
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ПсевдонимТаблицаКонтрагентов
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты ПО &КонтрагентСсылка = Контрагенты.Ссылка
		|			
		|ГДЕ
		|   &УсловиеВидЛицензии
		|	И &УсловиеКодПродукции
		|	И &УсловиеКонтрагент
		|	И &УсловиеПоДате
		|	И &УсловиеПоискаКонтрагента";

	ПсевдонимТаблицаКонтрагентов = "ПсевдонимТаблицаКонтрагентов";

	ИзмерениеПоставщик = "";
	ИзмерениеПериод = "";
	ИзмерениеСерияНомер = "";
	
	КонтрагентСтранаРегистрации = """""";
	КонтрагентВидЛицензии = """""";
	КонтрагентКодВидаПродукции = """""";
	КонтрагентВидДеятельности = """""";
	КонтрагентДатаВыдачи = """""";
	КонтрагентДатаОкончания = """""";
	КонтрагентСерияНомер = """                                          """;
	КонтрагентКемВыдана = """                                                                                    """;


	Если СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), ВРег("РегистрСведений.")) > 0 Тогда

		ИзмерениеПоставщик = "Поставщик";
		ИзмерениеПериод = "Период";
		ИзмерениеСерияНомер = "СерияНомер";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СсылкаНаЭлементСправочника КАК Ссылка,", "");

	ИначеЕсли СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), ВРег("Справочник.")) > 0 Тогда

		ИзмерениеПоставщик = "Владелец";
		ИзмерениеПериод = "ДатаНачала";
		ИзмерениеСерияНомер = "Наименование";

		СсылкаНаЭлементСправочника = ПсевдонимТаблицаКонтрагентов + ".Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СсылкаНаЭлементСправочника", СсылкаНаЭлементСправочника);

	Иначе

	// Непонятная ситуация, на всякий случай упростим запрос.
		СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СсылкаНаЭлементСправочника КАК Ссылка,", "");

	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции) Тогда

		ТаблицаКонтрагентов = СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции;

		Если ЗначениеЗаполнено(ТипАлкоголя)
				и (ТипЗнч(ТипАлкоголя) = Тип("Строка")) Тогда

			СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
			РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);

			Если ЗначениеЗаполнено(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво) Тогда

				Если ВРег(ТипАлкоголя) = ВРег("Слабоалкогольная")
						или ВРег(ТипАлкоголя) = ВРег("Пиво") Тогда

					УсловиеВидЛицензии = ПсевдонимТаблицаКонтрагентов
						+ ".ВидЛицензии = ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
				Иначе
					УсловиеВидЛицензии = ПсевдонимТаблицаКонтрагентов
						+ ".ВидЛицензии <> ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
				КонецЕсли;

				УсловиеВидЛицензии = СтрЗаменить(УсловиеВидЛицензии, "&ВидыЛицензийНаПродажуАлкоголя", СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
					
			КонецЕсли;

		КонецЕсли;
		
		Если КодПродукции Тогда
			// Для лицензий "Производство и поставка" код продукции есть,
			// для лицензий "Закупка и поставка" кода продукции нет.
			УсловиеКодПродукции = "(" +ПсевдонимТаблицаКонтрагентов
				+ ".КодВидаПродукции = &КодПродукции ИЛИ " + ПсевдонимТаблицаКонтрагентов 
				+ ".КодВидаПродукции = """" )";
				
			ВставитьКодПродукции = Истина;
			
		КонецЕсли;
		
		Если ВставитьДату Тогда
				
			УсловиеПоДате = "(" +ПсевдонимТаблицаКонтрагентов + "." + ИзмерениеПериод
				+ " <= &ДатаКонца И " + ПсевдонимТаблицаКонтрагентов 
				+ ".ДатаОкончания >= &ДатаНачала )";
		
		КонецЕсли;

		КонтрагентСсылка = ПсевдонимТаблицаКонтрагентов + "." + ИзмерениеПоставщик
			+ ".Ссылка";

		КонтрагентНаименованиеПолное = ПсевдонимТаблицаКонтрагентов + "."
			+ ИзмерениеПоставщик + "." + РеквизитНаименованиеПолное;

		Если ЕстьСтранаРегистрации Тогда
			
			КонтрагентСтранаРегистрации = ПсевдонимТаблицаКонтрагентов + "."
				+ ИзмерениеПоставщик + ".СтранаРегистрации";
		
		КонецЕсли;

		КонтрагентИНН = ПсевдонимТаблицаКонтрагентов + "." + ИзмерениеПоставщик
			+ ".ИНН";

		Если ЕстьНалоговыйНомер Тогда
			КонтрагентНалоговыйНомер = ПсевдонимТаблицаКонтрагентов + "."
				+ ИзмерениеПоставщик + ".НалоговыйНомер";
		КонецЕсли;

		КонтрагентКПП = ПсевдонимТаблицаКонтрагентов + "." + ИзмерениеПоставщик
			+ ".КПП";

		КонтрагентВидЛицензии = ПсевдонимТаблицаКонтрагентов + ".ВидЛицензии";
		
		Если ВставитьКодПродукции Тогда
			
			КонтрагентКодВидаПродукции = ПсевдонимТаблицаКонтрагентов + ".КодВидаПродукции";
			КонтрагентВидДеятельности = "
				|ВЫБОР
				|	КОГДА &КонтрагентКодВидаПродукции = """"
				|		ТОГДА ""Закупка, хранение и поставки""
				|	ИНАЧЕ ""Производство, хранение и поставки""
				|КОНЕЦ";
					
		КонецЕсли;
				
		КонтрагентДатаВыдачи = ПсевдонимТаблицаКонтрагентов + "." + ИзмерениеПериод;
		КонтрагентДатаОкончания = ПсевдонимТаблицаКонтрагентов + ".ДатаОкончания";
		КонтрагентСерияНомер = ПсевдонимТаблицаКонтрагентов + "."
			+ ИзмерениеСерияНомер;
		КонтрагентКемВыдана = ПсевдонимТаблицаКонтрагентов + ".КемВыдана";

	Иначе

		ТаблицаКонтрагентов = "Справочник.Контрагенты";

		КонтрагентСсылка = ПсевдонимТаблицаКонтрагентов + ".Ссылка";

		КонтрагентНаименованиеПолное = ПсевдонимТаблицаКонтрагентов + "."
			+ РеквизитНаименованиеПолное;

		Если ЕстьСтранаРегистрации Тогда
			
			КонтрагентСтранаРегистрации = ПсевдонимТаблицаКонтрагентов
				+ ".СтранаРегистрации";
		
		КонецЕсли;

		КонтрагентИНН = ПсевдонимТаблицаКонтрагентов + ".ИНН";

		Если ЕстьНалоговыйНомер Тогда
			КонтрагентНалоговыйНомер = ПсевдонимТаблицаКонтрагентов
				+ ".НалоговыйНомер";
		КонецЕсли;

		КонтрагентКПП = ПсевдонимТаблицаКонтрагентов + ".КПП";
		
		УсловиеКонтрагент = ПсевдонимТаблицаКонтрагентов + "."
			+ РеквизитНаименованиеПолное + " ЕСТЬ НЕ NULL";

	КонецЕсли;

	Если НужныЛицензии Тогда

		КонтрагентЛицензии = "
			|&КонтрагентВидЛицензии КАК ВидЛицензии,
			|&КонтрагентДатаВыдачи КАК ДатаВыдачи,
			|&КонтрагентДатаОкончания КАК ДатаОкончания,
			|&КонтрагентСерияНомер КАК СерияНомер,
			|&КонтрагентКемВыдана КАК КемВыдана
			|";
	Иначе
		КонтрагентЛицензии = "";
	КонецЕсли;
	

	// Формируем выбор по ИНН или налоговому номеру.
	Если ЕстьСтранаРегистрации И ЕстьНалоговыйНомер Тогда

		КонтрагентВыборИНН = "
			|ВЫБОР
			|	КОГДА &КонтрагентСтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА &КонтрагентИНН
			|	ИНАЧЕ &КонтрагентНалоговыйНомер
			|КОНЕЦ";

		КонтрагентВыборИНН = СтрЗаменить(КонтрагентВыборИНН, "&КонтрагентСтранаРегистрации", КонтрагентСтранаРегистрации);
		КонтрагентВыборИНН = СтрЗаменить(КонтрагентВыборИНН, "&КонтрагентИНН", КонтрагентИНН);
		КонтрагентВыборИНН = СтрЗаменить(КонтрагентВыборИНН, "&КонтрагентНалоговыйНомер", КонтрагентНалоговыйНомер);

		КонтрагентВыборКПП = "
			|ВЫБОР
			|	КОГДА &КонтрагентСтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА &КонтрагентКПП
			|	ИНАЧЕ """"
			|КОНЕЦ";

		КонтрагентВыборКПП = СтрЗаменить(КонтрагентВыборКПП, "&КонтрагентСтранаРегистрации", КонтрагентСтранаРегистрации);
		КонтрагентВыборКПП = СтрЗаменить(КонтрагентВыборКПП, "&КонтрагентКПП", КонтрагентКПП);

	Иначе
		КонтрагентВыборИНН = КонтрагентИНН;
		КонтрагентВыборКПП = КонтрагентКПП;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПсевдонимТаблицаКонтрагентов", ПсевдонимТаблицаКонтрагентов);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентНаименованиеПолное", КонтрагентНаименованиеПолное);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентВыборИНН", КонтрагентВыборИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентВыборКПП", КонтрагентВыборКПП);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентЛицензии КАК Лицензии", КонтрагентЛицензии);

	Если НЕ НужныЛицензии Тогда

	// Убираем запятую после "СтранаРегистрации", так как дальше будет инструкция ИЗ.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК КодВидаПродукции,", "КАК КодВидаПродукции");

	КонецЕсли;
		

	Если НужныЛицензии ИЛИ ВставитьКодПродукции ИЛИ (ТаблицаКонтрагентов = "Справочник.Контрагенты") Тогда

	// Убираем привязку запроса к справочнику Контрагенты,
		// если нужны лицензии, нет смысла привязываться к справочнику контрагентов.
		// Если основная таблица и так справочник контрагентов - левое соединение с ним же тоже ни к чему.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты ПО &КонтрагентСсылка = Контрагенты.Ссылка", "");
	КонецЕсли;

	Если НайтиКонтрагента Тогда
		УсловиеПоискаКонтрагента = "&КонтрагентСсылка = &ИскомыйКонтрагентСсылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоискаКонтрагента", УсловиеПоискаКонтрагента);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентСсылка", КонтрагентСсылка);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентСтранаРегистрации", КонтрагентСтранаРегистрации);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентВидДеятельности", КонтрагентВидДеятельности);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентКодВидаПродукции", КонтрагентКодВидаПродукции);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентВидЛицензии", КонтрагентВидЛицензии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентДатаВыдачи", КонтрагентДатаВыдачи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентДатаОкончания", КонтрагентДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентСерияНомер", КонтрагентСерияНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентКемВыдана", КонтрагентКемВыдана);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКодПродукции", УсловиеКодПродукции);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате", УсловиеПоДате);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКонтрагент", УсловиеКонтрагент);

	Если НужныЛицензии Тогда
		ОсновнаяТаблица = ТаблицаКонтрагентов;
	Иначе
	// Без лицензий основная таблица всегда Справочник.Контрагенты.
		ОсновнаяТаблица = "Справочник.Контрагенты";
	КонецЕсли;

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Вставить("ВставитьКодПродукции", ВставитьКодПродукции);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыбораПроизводителяИмпортераАЛКО(ВставитьКодПродукции,
		ТипАлкоголя = Неопределено, 
		НуженОтборПоКодуПродукции = Истина,
		ИспользоватьРегистрСведенийСведенияОбАлкогольнойПродукции = Истина) Экспорт

	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	ЕстьПроизводитель = ОбщегоНазначения.ЕстьРеквизитОбъекта("Производитель", МетаданныеНоменклатуры);
	ЕстьИмпортер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Импортер", МетаданныеНоменклатуры);

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
	
	РеквизитНаименованиеПолное = "Наименование";
	
	ВставитьКодПродукции = Ложь;
	УсловиеВидЛицензии = "Истина";
	УсловиеКодПродукции = "Истина";

	СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции = "";
	Если ИспользоватьРегистрСведенийСведенияОбАлкогольнойПродукции Тогда	
		РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);	
	КонецЕсли; 
	

	Если ЗначениеЗаполнено(ТипАлкоголя)
			и (ТипЗнч(ТипАлкоголя) = Тип("Строка")) Тогда

		СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
		РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);

		Если ЗначениеЗаполнено(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво) Тогда

			Если ВРег(ТипАлкоголя) = ВРег("Слабоалкогольная")
					или ВРег(ТипАлкоголя) = ВРег("Пиво") Тогда

				УсловиеВидЛицензии = "СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			Иначе
				УсловиеВидЛицензии = "СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			КонецЕсли;

			УсловиеВидЛицензии = СтрЗаменить(УсловиеВидЛицензии, "&ВидыЛицензийНаПродажуАлкоголя", СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
		КонецЕсли;

	КонецЕсли;
	
	Если НуженОтборПоКодуПродукции И ЗначениеЗаполнено(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции) Тогда
	
		УсловиеКодПродукции = "СведенияОбАлкогольнойПродукции.КодВида169 = &КодПродукции";
		ВставитьКодПродукции = Истина;
	
	КонецЕсли; 

	Если ЗначениеЗаполнено(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)
			И ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер
			И ЕстьСтранаРегистрации Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.ИНН
			|		ИНАЧЕ Контрагенты.НалоговыйНомер
			|	КОНЕЦ КАК ИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.КПП
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК КПП,
			|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Импортер
			|			ИНАЧЕ СправочникНоменклатура.Производитель
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		&СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
			|	ГДЕ
			|       &УсловиеКодПродукции
			|		И &УсловиеВидЛицензии
			|															) КАК ПроизводителиИмпортеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СведенияОбАлкогольнойПродукции", СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКодПродукции", УсловиеКодПродукции);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)
			И ЕстьПроизводитель И ЕстьИмпортер И ЕстьСтранаРегистрации Тогда
			
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	Контрагенты.ИНН КАК ИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.КПП
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК КПП,
			|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Импортер
			|			ИНАЧЕ СправочникНоменклатура.Производитель
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		&СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
			|	ГДЕ
			|       &УсловиеКодПродукции
			|		И &УсловиеВидЛицензии
			|															) КАК ПроизводителиИмпортеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СведенияОбАлкогольнойПродукции", СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКодПродукции", УсловиеКодПродукции);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)
			И ЕстьПроизводитель И ЕстьИмпортер  Тогда
			
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.КПП КАК КПП,
			|	"""" КАК СтранаРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Импортер
			|			ИНАЧЕ СправочникНоменклатура.Производитель
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		&СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
			|	ГДЕ
			|       &УсловиеКодПродукции
			|		И &УсловиеВидЛицензии
			|															) КАК ПроизводителиИмпортеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СведенияОбАлкогольнойПродукции", СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКодПродукции", УсловиеКодПродукции);
	
	ИначеЕсли ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер
			И ЕстьСтранаРегистрации Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.ИНН
			|		ИНАЧЕ Контрагенты.НалоговыйНомер
			|	КОНЕЦ КАК ИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.КПП
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК КПП,
			|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Импортер
			|			ИНАЧЕ СправочникНоменклатура.Производитель
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		Справочник.Номенклатура КАК СправочникНоменклатура
			|			) КАК ПроизводителиИмпортеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";
		
	ИначеЕсли ЕстьПроизводитель И ЕстьИмпортер Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.КПП КАК КПП,
			|	"""" КАК СтранаРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Импортер
			|			ИНАЧЕ СправочникНоменклатура.Производитель
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		Справочник.Номенклатура КАК СправочникНоменклатура
			|			) КАК ПроизводителиИмпортеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";

	ИначеЕсли ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.ИНН
			|		ИНАЧЕ Контрагенты.НалоговыйНомер
			|	КОНЕЦ КАК ИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|			ТОГДА Контрагенты.КПП
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК КПП,
			|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации				
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ &КонтрагентНаименованиеПолное ЕСТЬ НЕ NULL";

	Иначе

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|
			|	&КонтрагентНаименованиеПолное КАК НаименованиеПолное,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.КПП КАК КПП,
			|	"""" КАК СтранаРегистрации				
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ &КонтрагентНаименованиеПолное ЕСТЬ НЕ NULL";

	КонецЕсли;

	КонтрагентНаименованиеПолное = "Контрагенты." + РеквизитНаименованиеПолное;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрагентНаименованиеПолное", КонтрагентНаименованиеПолное);

	Возврат ТекстЗапроса;

КонецФункции

Функция ОпределитьПроизводителяИмпортераАЛКО(ИНН, КПП, ПолноеНаименование,
		КодПродукции, ТипАлкоголя = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИНН = СокрЛП(ИНН);

	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	ЕстьПроизводитель = ОбщегоНазначения.ЕстьРеквизитОбъекта("Производитель", МетаданныеНоменклатуры);
	ЕстьИмпортер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Импортер", МетаданныеНоменклатуры);

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);

	ВставитьКодПродукции = Ложь;
	УсловиеВидЛицензии = "Истина";

	СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);

	Если ЗначениеЗаполнено(ТипАлкоголя)
			и (ТипЗнч(ТипАлкоголя) = Тип("Строка")) Тогда

		СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
		РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);

		Если ЗначениеЗаполнено(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво) Тогда

			Если ВРег(ТипАлкоголя) = ВРег("Слабоалкогольная")
					или ВРег(ТипАлкоголя) = ВРег("Пиво") Тогда

				УсловиеВидЛицензии = "СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			Иначе
				УсловиеВидЛицензии = "СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(&ВидыЛицензийНаПродажуАлкоголя)";
			КонецЕсли;

			УсловиеВидЛицензии = СтрЗаменить(УсловиеВидЛицензии, "&ВидыЛицензийНаПродажуАлкоголя", СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)
			И ЕстьПроизводитель И ЕстьИмпортер Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПроизводителиИмпортеры.ПроизводительИмпортер Как Контрагент
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Производитель
			|			ИНАЧЕ СправочникНоменклатура.Импортер
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		&СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
			|	ГДЕ
			|        СведенияОбАлкогольнойПродукции.КодВида169 = &КодПродукции
			|		И &УсловиеВидЛицензии
			|															) КАК ПроизводителиИмпортеры
			|ГДЕ
			|	(ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН = &ИНН ИЛИ &УсловиеНалоговыйНомер)";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СведенияОбАлкогольнойПродукции", СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидЛицензии", УсловиеВидЛицензии);

		УсловиеНалоговыйНомер = ?(ЕстьНалоговыйНомер, "ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер = &ИНН", "Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНалоговыйНомер", УсловиеНалоговыйНомер);

		ВставитьКодПродукции = Истина;

	ИначеЕсли ЕстьПроизводитель И ЕстьИмпортер Тогда

		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПроизводителиИмпортеры.ПроизводительИмпортер Как Контрагент
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА СправочникНоменклатура.Производитель
			|			ИНАЧЕ СправочникНоменклатура.Импортер
			|		КОНЕЦ КАК ПроизводительИмпортер
			|	ИЗ
			|		Справочник.Номенклатура КАК СправочникНоменклатура
			|			) КАК ПроизводителиИмпортеры
			|ГДЕ
			|	(ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН = &ИНН  ИЛИ &УсловиеНалоговыйНомер)";

		УсловиеНалоговыйНомер = ?(ЕстьНалоговыйНомер, "ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер = &ИНН", "Ложь");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНалоговыйНомер", УсловиеНалоговыйНомер);

	Иначе

		Возврат ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеНаименование);

	КонецЕсли;

	ЗапросПроизводительИмпортер = Новый Запрос;
	ЗапросПроизводительИмпортер.Текст = ТекстЗапроса;

	Если ВставитьКодПродукции Тогда
		ЗапросПроизводительИмпортер.Параметры.Вставить("КодПродукции", КодПродукции);
	КонецЕсли;

	ЗапросПроизводительИмпортер.Параметры.Вставить("ИНН", ИНН);

	РезультатЗапроса = ЗапросПроизводительИмпортер.Выполнить().Выгрузить();

	ПроизводительИмпортер = ОпределитьКонтрагентаИзЗапросаАЛКО(РезультатЗапроса, ИНН, КПП, ПолноеНаименование, "Контрагент", ЕстьСтранаРегистрации);

	Если ПроизводительИмпортер = Неопределено Тогда

		Возврат ОпределитьКонтрагентаАЛКО(ИНН, КПП, ПолноеНаименование);

	КонецЕсли;

	Возврат ПроизводительИмпортер;

КонецФункции

Функция ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта,
		ОбъектЭтогоОтч = Неопределено) Экспорт

	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакета = ИмяДействующегоМакета(ИмяФормыОбъекта, "СхемаВыгрузки", 
													ДатаКонцаОтчета, , ОбъектЭтогоОтч);
	Макет = ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтч);

	ВысотаТаблицы = Макет.ВысотаТаблицы;

	УчтенныеГруппы = Новый Соответствие;

	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость
					И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда

				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Если код строки не заполнен - пропускаем.
				Если СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст) = "" Тогда				
					Продолжить;				
				КонецЕсли; 

				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);

				УчтенныеГруппы.Вставить(НомСтр, НовСтр);

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ДеревоСтруктуры;

КонецФункции

// Определяет наличие реквизита верхнего уровня у формы.
//
// Параметры:
// 		Форма 				- Управляемая форма.
//		ИмяРеквизитаФормы 	- Строка.
//
// Возвращаемое значение: Булево.
//
Функция ЕстьРеквизитВерхнегоУровняФормы(Форма, ИмяРеквизитаФормы) Экспорт

	РеквизитыФормыВладельца = Форма.ПолучитьРеквизиты();

	ЕстьРеквизит = Ложь;
	Для каждого РеквизитФормы Из РеквизитыФормыВладельца Цикл

		ИмяРеквизита = РеквизитФормы.Имя;
		Если ВРег(ИмяРеквизита) = ВРег(ИмяРеквизитаФормы) Тогда
			ЕстьРеквизит = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьРеквизит;

КонецФункции

// Приводит переданные через структуру параметры к верному типу и значениям по умолчанию 
// в случае незаполненности или несоответствия типа.
// Универсальная процедура приведения в порядок параметров, переданных в функцию или процедуру в составе структуры.
// Позволяет контролировать тип параметра и значения по умолчанию для случая если неверный тип и/или незаполнено значение.
// При этом если в структуре параметров нет каких то ключей-параметров, они дописываются со значениями по умолчанию.
//
// Параметры:
// 		СтруктураПараметров					- Структура. 
//											Содержит в качестве ключей имена параметров, в качестве значений - значения параметров.
//		СтруктураТиповИЗначенийПоУмолчанию 	- Структура.
//
//			* <ИмяПараметра>			- Структура. Ключ - имя параметра.
//				* ДопустимыйТип 		- Структура. 
//					* <ИмяТипа>			- Любой. Значением является значение по умолчанию, если параметр указанного типа, 
//										но не заполнен. 
//										Если в значении передано "Неопределено" - присваивается Неопределено.
//										Если значение не передано или передано Неопределено, 
//										присваивается пустое значение нужного типа. Если тип не входит в число возможных для 
//										функции ПустоеЗначениеПоТипу() - пустое значение присваевается Неопределено.
//										Ключ - строка имени допустимого типа, без точек и пробелов, В ВЕРХНЕМ РЕГИСТРЕ. 
//										Не допускается использование составных типов, например Справочники.СтраныМира.
//										Примеры правильных типов:
//										"СТРОКА", "ЧИСЛО", "СТРУКТУРА", "ФИКСИРОВАННАЯСТРУКТУРА", 
//										"НЕОПРЕДЕЛЕНО", "СТРОКАТАБЛИЦЫЗНАЧЕНИЙ".
//				* ЗначениеПоУмолчанию	- Любой. Необязательный. Значение по умолчанию, если параметр передан неверного типа.
//										Если ключ ЗначениеПоУмолчанию отсутствует - присваивается пустое значение первого найденного
//										допустимого типа. 
//										Иначе 
//										Если в значении передано "Неопределено" - присваивается Неопределено.
//										Если значение не передано или передано Неопределено, присваивается пустое значение 
//										первого найденного допустимого типа.
//
//
Функция ПравильныеПараметрыВСтруктуре(СтруктураПараметров,
		СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки = Неопределено) Экспорт

	БылоИсправление = Ложь;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПравильныеПараметрыВСтруктуре 
				|передана СтруктураПараметров, котрая не является структурой";
		КонецЕсли;

		Если НЕ ТипЗнч(СтруктураТиповИЗначенийПоУмолчанию) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПравильныеПараметрыВСтруктуре 
				|передана СтруктураТиповИЗначенийПоУмолчанию, которая не является структурой";
		КонецЕсли;

	КонецЕсли;

	Для каждого КлючЗначение Из СтруктураПараметров Цикл

		ИмяПараметра = КлючЗначение.Ключ;
		ЗначениеПараметра = КлючЗначение.Значение;

		Если НЕ СтруктураТиповИЗначенийПоУмолчанию.Свойство(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураНастроек = СтруктураТиповИЗначенийПоУмолчанию[ИмяПараметра];

		ТипЗначения = ТипЗнч(ЗначениеПараметра);
		ИмяТипаЗначения = Строка(ТипЗначения);
		
		// Если допустим тип Неопределено - разрешается любой тип.
		Если СтруктураНастроек.ДопустимыйТип.Свойство("НЕОПРЕДЕЛЕНО") Тогда
			Продолжить;
		КонецЕсли;
		
		// Переводим в верхний регистр, чтобы потом искать в структуре настроек.		
		ИмяТипаЗначения = ВРег(СтрЗаменить(ИмяТипаЗначения, " ", "")); // "Не определено", "Фиксированная структура".
		
		// Игнорируем GUID.
		Если ИмяТипаЗначения = ВРег("УникальныйИдентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтруктураНастроек.ДопустимыйТип.Свойство(ИмяТипаЗначения) Тогда

			БылоИсправление = Истина;
			
			// Неверный тип.
			ЗначениеПоУмолчанию = СтруктураНастроек.ЗначениеПоУмолчанию;

			Если ЗначениеПоУмолчанию = Неопределено Тогда

			// Значение не передано или передано неопределеное.

				// Опеределяем первый допустимый тип.
				ТипЗначенияПоУмолчанию = "Неопределено";

				Для каждого ДопустимыйТип Из СтруктураНастроек.ДопустимыйТип Цикл
					ТипЗначенияПоУмолчанию = ДопустимыйТип.Ключ;
					Прервать;
				КонецЦикла;

				ЗначениеПоУмолчанию = ПустоеЗначениеПоТипу(ТипЗначенияПоУмолчанию);

			ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("Строка")
					И ЗначениеПоУмолчанию = "Неопределено" Тогда
				ЗначениеПоУмолчанию = Неопределено;
			КонецЕсли;

			СтруктураПараметров[ИмяПараметра] = ЗначениеПоУмолчанию;

		Иначе

		// Правильный тип у параметра. Нужно лишь проверить не пуст ли.
			Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				
				ЗначениеДляНезаполненного = СтруктураНастроек.ДопустимыйТип[ИмяТипаЗначения];

				Если ЗначениеДляНезаполненного = Неопределено Тогда
					ЗначениеДляНезаполненного = ПустоеЗначениеПоТипу(ИмяТипаЗначения);
				ИначеЕсли ТипЗнч(ЗначениеДляНезаполненного) = Тип("Строка")
						И ЗначениеДляНезаполненного = "Неопределено" Тогда
					ЗначениеДляНезаполненного = Неопределено;
				КонецЕсли;
				
				// Присваиваем только для простых типов.
				Если ИмяТипаЗначения = "ЧИСЛО" 
					ИЛИ ИмяТипаЗначения = "СТРОКА" 
					ИЛИ ИмяТипаЗначения = "БУЛЕВО"
					ИЛИ ЗначениеДляНезаполненного = Неопределено 
					ИЛИ ЗначениеЗаполнено(ЗначениеДляНезаполненного) Тогда
				
					Если СтруктураПараметров[ИмяПараметра] <> ЗначениеДляНезаполненного Тогда
					
						СтруктураПараметров[ИмяПараметра] = ЗначениеДляНезаполненного;	
						БылоИсправление = Истина;
						
					КонецЕсли;	
				
				КонецЕсли; 
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для каждого КлючЗначение Из СтруктураТиповИЗначенийПоУмолчанию Цикл

		ИмяПараметра = КлючЗначение.Ключ;

		Если НЕ СтруктураПараметров.Свойство(ИмяПараметра) Тогда

			СтруктураНастроек = КлючЗначение.Значение;

			ЗначениеПоУмолчанию = СтруктураНастроек.ЗначениеПоУмолчанию;

			Если ЗначениеПоУмолчанию = Неопределено Тогда

			// Значение не передано или передано неопределеное.

				// Опеределяем первый допустимый тип.
				ТипЗначенияПоУмолчанию = "Неопределено";

				Для каждого ДопустимыйТип Из СтруктураНастроек.ДопустимыйТип Цикл
					ТипЗначенияПоУмолчанию = ДопустимыйТип.Ключ;
					Прервать;
				КонецЦикла;

				ЗначениеПоУмолчанию = ПустоеЗначениеПоТипу(ТипЗначенияПоУмолчанию);

			ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("Строка")
					И ЗначениеПоУмолчанию = "Неопределено" Тогда
				ЗначениеПоУмолчанию = Неопределено;
			КонецЕсли;

			СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПоУмолчанию);
			
			БылоИсправление = Истина;
			
		КонецЕсли;

	КонецЦикла;

	Возврат БылоИсправление;
	
КонецФункции

Процедура ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию,
		ИмяПараметра, ИмяТипаЗначенияПараметра,
		ЗначениеПоУмолчаниюДляНезаполненного = Неопределено,
		ЗначениеПоУмолчаниюЕслиНеверногоТипа = Неопределено,
		РежимОтладки = Неопределено) Экспорт

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ (ТипЗнч(ИмяПараметра) = Тип("Строка")
				И ЗначениеЗаполнено(ИмяПараметра)) Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию() 
				|передан параметр ИмяПараметра, который не является заполненной Строкой!";
		КонецЕсли;

		Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ВерноеИмяКлючаСтруктуры(ИмяПараметра) Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию() 
				|передан параметр ИмяПараметра, который не является Строкой, 
				|пригодной для использования в качестве Ключа струтктуры!";
		КонецЕсли;

		Если НЕ (ТипЗнч(ИмяТипаЗначенияПараметра) = Тип("Строка")
				И ЗначениеЗаполнено(ИмяТипаЗначенияПараметра)) Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию() 
				|передан параметр ИмяТипаЗначенияПараметра, который не является заполненной Строкой!";
		КонецЕсли;

		Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ВерноеИмяКлючаСтруктуры(ИмяТипаЗначенияПараметра) Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию() 
				|передан параметр ИмяТипаЗначенияПараметра, который не является Строкой, 
				|пригодной для использования в качестве Ключа струтктуры!";
		КонецЕсли;

	КонецЕсли;

	ЗначениеПоУмолчаниюЕслиНеверногоТипаУстановлено = Ложь;

	Если НЕ СтруктураТиповИЗначенийПоУмолчанию.Свойство(ИмяПараметра) Тогда

		СтруктураТиповИЗначенийПоУмолчанию.Вставить(ИмяПараметра, Новый Структура("ДопустимыйТип, ЗначениеПоУмолчанию", Новый Структура, ЗначениеПоУмолчаниюЕслиНеверногоТипа));

		ЗначениеПоУмолчаниюЕслиНеверногоТипаУстановлено = Истина;

	КонецЕсли;

	// Переводим в верхний регистр, чтобы потом искать в структуре настроек.
	ИмяДопустимогоТипаЗначения = ВРег(СтрЗаменить(ИмяТипаЗначенияПараметра, " ", "")); // "Не определено", "Фиксированная структура".
	СтруктураТиповИЗначенийПоУмолчанию[ИмяПараметра].ДопустимыйТип.Вставить(ИмяДопустимогоТипаЗначения, ЗначениеПоУмолчаниюДляНезаполненного);

	Если ЗначениеЗаполнено(ЗначениеПоУмолчаниюЕслиНеверногоТипа)
			И (НЕ ЗначениеПоУмолчаниюЕслиНеверногоТипаУстановлено) Тогда

			// ЗначениеПоУмолчанию если параметр передан неверного типа - устанавливаем если его вообще нет,
		// или если передано значимое значение для него.
		СтруктураТиповИЗначенийПоУмолчанию[ИмяПараметра].Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчаниюЕслиНеверногоТипа);

	КонецЕсли;

КонецПроцедуры

// Возвращает пустое значение нужного типа.
//
// Параметры:
//		 ИмяТипа - 	Строка. Имя Типа, пустое значение которого нужно вернуть.
//					Может принимать значения (регистр не важен)
//					СТРОКА, НЕОПРЕДЕЛЕНО, ЧИСЛО, ДАТА, МАССИВ, СТРУКТУРА, СООТВЕТСТВИЕ, СПИСОКЗНАЧЕНИЙ, ТАБЛИЦАЗНАЧЕНИЙ
//					ДЕРЕВОЗНАЧЕНИЙ, ФИКСИРОВАННЫЙМАССИВ, ФИКСИРОВАННОЕСООТВЕТСТВИЕ, ФИКСИРОВАННАЯСТРУКТУРА, СТРОКАТАБЛИЦЫЗНАЧЕНИЙ.
//
// Результат
//		Пустое значение нужного типа или Неопределено.
//
Функция ПустоеЗначениеПоТипу(ИмяТипа) Экспорт

	ПараметрВерногоТипа = Ложь;
	НеверноеИмяТипа = Ложь;

	Если ТипЗнч(ИмяТипа) = Тип("Строка") Тогда

		ПараметрВерногоТипа = Истина;

		ВРегИмяТипа = ВРег(ИмяТипа);

		Если ВРегИмяТипа = "НЕОПРЕДЕЛЕНО" ИЛИ ВРегИмяТипа = "НЕ ОПРЕДЕЛЕНО" Тогда
			Возврат Неопределено;
		ИначеЕсли ВРегИмяТипа = "СТРОКА" Тогда
			Возврат "";
		ИначеЕсли ВРегИмяТипа = "ЧИСЛО" Тогда
			Возврат 0;
		ИначеЕсли ВРегИмяТипа = "ДАТА" Тогда
			Возврат '00010101';
		ИначеЕсли ВРегИмяТипа = "МАССИВ" Тогда
			Возврат Новый Массив;
		ИначеЕсли ВРегИмяТипа = "СТРУКТУРА" Тогда
			Возврат Новый Структура;
		ИначеЕсли ВРегИмяТипа = "СООТВЕТСТВИЕ" Тогда
			Возврат Новый Соответствие;
		ИначеЕсли ВРегИмяТипа = "СПИСОКЗНАЧЕНИЙ"
				ИЛИ ВРегИмяТипа = "СПИСОК ЗНАЧЕНИЙ" Тогда
			Возврат Новый СписокЗначений;
		ИначеЕсли ВРегИмяТипа = "ТАБЛИЦАЗНАЧЕНИЙ"
				ИЛИ ВРегИмяТипа = "ТАБЛИЦА ЗНАЧЕНИЙ" Тогда
			Возврат Новый ТаблицаЗначений;
		ИначеЕсли ВРегИмяТипа = "ДЕРЕВОЗНАЧЕНИЙ"
				ИЛИ ВРегИмяТипа = "ДЕРЕВО ЗНАЧЕНИЙ" Тогда
			Возврат Новый ДеревоЗначений;
		ИначеЕсли ВРегИмяТипа = "ФИКСИРОВАННЫЙМАССИВ"
				ИЛИ ВРегИмяТипа = "ФИКСИРОВАННЫЙ МАССИВ" Тогда
			Возврат Новый ФиксированныйМассив(Новый Массив);
		ИначеЕсли ВРегИмяТипа = "ФИКСИРОВАННОЕСООТВЕТСТВИЕ"
				ИЛИ ВРегИмяТипа = "ФИКСИРОВАННОЕ СООТВЕТСТВИЕ" Тогда
			Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
		ИначеЕсли ВРегИмяТипа = "ФИКСИРОВАННАЯСТРУКТУРА"
				ИЛИ ВРегИмяТипа = "ФИКСИРОВАННАЯ СТРУКТУРА" Тогда
			Возврат Новый ФиксированнаяСтруктура(Новый Структура);
		ИначеЕсли ВРегИмяТипа = "СТРОКАТАБЛИЦЫЗНАЧЕНИЙ"
				ИЛИ ВРегИмяТипа = "СТРОКА ТАБЛИЦЫ ЗНАЧЕНИЙ" Тогда
			Таблица = Новый ТаблицаЗначений;
			Возврат Таблица.Добавить();

		Иначе
			НеверноеИмяТипа = Истина;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ПараметрВерногоТипа) ИЛИ НеверноеИмяТипа Тогда

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки,
		ИмяФайлаXML = Неопределено, Кодировка = "windows-1251") Экспорт

		// пишем в строку или в файл, если передано имя файла XML
	ПотокXML = СоздатьНовыйПотокXML(Кодировка, ИмяФайлаXML);

	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	СтрокаИмениФайла = Символы.ПС + "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл
		+ """ -->";
	ПотокXML.ЗаписатьБезОбработки(СтрокаИмениФайла);

	// Получаем текст XML или закрываем файл.
	// В случае записи в файл возвращается пустая строка.
	ТекстДляЗаписи = ПотокXML.Закрыть();

	Возврат ТекстДляЗаписи;

КонецФункции

Процедура УдалитьНастройкиОкнаФормы(Форма) Экспорт

	УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(ХранилищеСистемныхНастроек, Форма);
		
	Если ТипЗнч(ХранилищеНастроекДанныхФорм) = Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
	
		УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(ХранилищеНастроекДанныхФорм, Форма);
	
	КонецЕсли; 
		 
	Если ТипЗнч(ХранилищеПользовательскихНастроекОтчетов) = Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
	
		УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(ХранилищеПользовательскихНастроекОтчетов, Форма);
	
	КонецЕсли;
	
	Если ТипЗнч(ХранилищеОбщихНастроек) = Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
	
		УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(ХранилищеОбщихНастроек, Форма);
	
	КонецЕсли;
	
	Если ТипЗнч(ХранилищеВариантовОтчетов) = Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
	
		УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(ХранилищеВариантовОтчетов, Форма);
	
	КонецЕсли;

КонецПроцедуры

Функция ЧислоИзСтроки(Стр) Экспорт
	
	Если ЗначениеЗаполнено(Стр) Тогда
		Значение = XMLЗначение(Тип("Число"), " " + СокрЛП(СтрЗаменить(СтрЗаменить(Стр, Символы.НПП, ""), ",", ".")));
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция БулевоИзСтроки(Стр) Экспорт
	
	СтрБулево = СтрЗаменить(НРег(Строка(Стр)), "истина", "true");
	СтрБулево = СтрЗаменить(НРег(Строка(СтрБулево)), "ложь", "false");
	
	Если ЗначениеЗаполнено(Стр) Тогда
		Значение = XMLЗначение(Тип("Булево"), "" + СтрБулево);
	Иначе
		Значение = Ложь
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДатаИзСтрокиЛюбогоФормата(СтрДата) Экспорт
	
	Разделители = "-.,/:";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли (Сим = "T" ИЛИ Сим = " ") И МассивПолей.ВГраница() < 3 Тогда
			МассивПолей.Вставить(3, "");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	Поле1 = Макс(1, XMLЗначение(Тип("Число"), " " + СокрЛП(МассивПолей[0])));
	Поле2 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Поле3 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Если СтрДлина(МассивПолей[0]) = 8 ИЛИ СтрДлина(МассивПолей[0]) = 14 Тогда
		
		Возврат Дата(МассивПолей[0]);
		
	ИначеЕсли СтрДлина(МассивПолей[0]) = 4 Тогда
		Год   = Мин(3999, Поле1);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле3);
	ИначеЕсли МассивПолей.ВГраница() > 0
		И СтрДлина(МассивПолей[1]) = 4 Тогда
		Год   = Мин(3999, Поле2);
		Месяц = Мин(12,   Поле1);
		День  = Мин(31,   Поле3);
	Иначе
		Год   = Мин(3999, Поле3);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле1);
	КонецЕсли;
	
	Час = Мин(23, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 3, "0", СокрЛП(МассивПолей[3]))));
	Мин = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 4, "0", СокрЛП(МассивПолей[4]))));
	Сек = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 5, "0", СокрЛП(МассивПолей[5]))));
	
	Возврат Дата(Год, Месяц, День, Час, Мин, Сек);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРегистрацияАлкоОтчетов

Процедура РеглОтчетыИсполнителиТребований(ИсполнителиТребований) Экспорт

	Для НомерПриложения = 1 По 12 Цикл
		
		ИмяОтчета = "РегламентированныйОтчетАлкоПриложение" + НомерПриложения;
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2013_Приложение" + НомерПриложения;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2013_Приложение" + НомерПриложения + "Квартал4";
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2014_Приложение" + НомерПриложения;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
	КонецЦикла;
	
	Для НомерПриложения = 13 По 15 Цикл
		
		ИмяОтчета = "РегламентированныйОтчетАлкоПриложение" + НомерПриложения;
				
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2016_Приложение" + НомерПриложения;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2017_Приложение" + НомерПриложения;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
	КонецЦикла;
	
	// ФСРАР - виноградные 2019.
	ИсполнителиТребований.Вставить("ДекларированиеАлкогольнойПродукции.2020_Декларация9",	"РегламентированныйОтчетАлкоПриложение27");
	ИсполнителиТребований.Вставить("ДекларированиеАлкогольнойПродукции.2020_Декларация10",	"РегламентированныйОтчетАлкоПриложение28");
	ИсполнителиТребований.Вставить("ДекларированиеАлкогольнойПродукции.2020_Декларация11",	"РегламентированныйОтчетАлкоПриложение29");
	
	// ФСРАР - алкогольные 2021.
	Для НомерПриложения = 19 По 26 Цикл
		
		ИмяОтчета = "РегламентированныйОтчетАлкоПриложение" + НомерПриложения;
		НомерДекларации = НомерПриложения - 18;
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2021_Декларация" + НомерДекларации;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
	КонецЦикла;
	
	// ФСРАР - фармацевтические 2021.
	Для НомерПриложения = 30 По 31 Цикл
		
		ИмяОтчета = "РегламентированныйОтчетАлкоПриложение" + НомерПриложения;
		НомерДекларации = НомерПриложения - 21;
		
		ИмяПравила = "ДекларированиеАлкогольнойПродукции.2021_Декларация" + НомерДекларации;
		ИсполнителиТребований.Вставить(ИмяПравила, ИмяОтчета);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт

	// Вспомогательные.
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоЗаявлениеОКорректировке");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоУведомлениеВыездногоОбслуживания");
	
	// ФСРАР алкогольные до 2021.	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение8");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение9");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение10");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение12");
	
	// ФСРАР виноградные до 2019.
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение13");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение14");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение15");
	
	// ФСРАР фармацевтические до 2021.
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение16");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение17");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение18");
	
	// ФСРАР алкогольные с 2021. Приказ ФСРАР РФ от 17.12.2020 г. № 396	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение19");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение20");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение21");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение22");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение23");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение24");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение25");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение26");
	
	// ФСРАР виноградные с 2019.
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение27");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение28");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение29");
	
	// ФСРАР фармацевтические в составе алкогольных с 2021. Приказ ФСРАР РФ от 17.12.2020 г. № 396	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение30");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение31");
	
	
КонецПроцедуры

Функция СписокРегистровСведенийАлкоОтчетов() Экспорт

	Список = Новый СписокЗначений;
	
	// Общие.
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоЖурнал");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоЛицензии");
	
	// ФСРАР алкогольные до 2020.
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел1");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил11Раздел2");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел1");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2");
	
	// ФСРАР виноградные до 2019.
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил13Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил14Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил15Поставщики");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил15Производство");
	
	// ФСРАР фармацевтические до 2020.
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил16Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил17Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил18Декларация");
	
	// ФСРАР виноградные с 2019.	
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил27Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил28Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил29Поставщики");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил29Производство");
	
	// ФСРАР алкогольные с 2021.	
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил19Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил20Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил21Раздел1Поставки");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил21Раздел2Возвраты");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил22Раздел1Поступления");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил22Раздел2Возвраты");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил23Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил24Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил25Раздел1Обороты");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил25Раздел2Поступления");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил25Раздел3Возвраты");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил26Раздел1Обороты");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил26Раздел2Поступления");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил26Раздел3Возвраты");
	
	// ФСРАР фармацевтические с 2021.
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил30Декларация");
	Список.Добавить(
		"РегистрСведений.СведенияРеглОтчетАлкоПрил31Декларация");
	
			
	Возврат Список

КонецФункции
 
#КонецОбласти

#Область ПрограммныйИнтерфейсАдреснаяИнформация

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт

	СтруктураПустогоАдреса = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьПустуюСтруктуруАдреса();
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПустогоАдреса);
		
КонецФункции

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//
//			Адресные поля
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт
	
	СтруктураПустогоОП = РегламентированнаяОтчетностьАЛКОПовтИсп.ПолучитьПустуюСтруктуруСведенийОбОП();
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПустогоОП);

КонецФункции

// Формирует структуру адресных сведений отчета из XML или JSON представления или
// стандартного представления адресной информации. 
// Оставлена для совместимости стороннего кода.
//
// Параметры:
// 		Адрес						- Строка. XML представление или стандартное представление адресной информации.
//		ПроверитьАдрес				- Булево. По умолчанию Истина. Признак необходимости проверки корректности
//									адреса в соответствии с адресным классификатором.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//			* АдресJSON				- JSON представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(знач Адрес, 
					ПроверитьАдрес = Истина, СоответствиеКешАдресов = Неопределено) Экспорт
					
	Возврат ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(Адрес, 
					ПроверитьАдрес, СоответствиеКешАдресов)
					
КонецФункции
					
// Формирует структуру адресных сведений отчета из XML или JSON представления или
// стандартного представления адресной информации. 
//
// Параметры:
// 		Адрес						- Строка. XML представление или стандартное представление адресной информации.
//		ПроверитьАдрес				- Булево. По умолчанию Истина. Признак необходимости проверки корректности
//									адреса в соответствии с адресным классификатором.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//			* АдресJSON				- JSON представление адреса подсистемы УправлениеКонтактнойИнформацией
//
// Дополнительно присутствуют свойства, определяемые в РаботаСАдресамиКлиентСервер.ПоляАдреса().
//
Функция ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(знач Адрес, 
					ПроверитьАдрес = Истина, СоответствиеКешАдресов = Неопределено) Экспорт

					
	Если НЕ СоответствиеКешАдресов = Неопределено Тогда
	
		ХешАдрес = ПолучитьХешSHA256(Адрес);
		АдресИзКеша = СоответствиеКешАдресов.Получить(ХешАдрес);
		
		Если НЕ АдресИзКеша = Неопределено Тогда		
			Возврат АдресИзКеша		
		КонецЕсли; 
	
	КонецЕсли;
	
	АдресВФорматеОтчета = 
		РегламентированнаяОтчетностьАЛКОПовтИспНаВызов.СтруктураАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(
																						Адрес, ПроверитьАдрес);				
	Результат = ОбщегоНазначения.СкопироватьРекурсивно(АдресВФорматеОтчета);
	
	Если НЕ СоответствиеКешАдресов = Неопределено Тогда	
		СоответствиеКешАдресов.Вставить(ХешАдрес, Результат)		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

// Возвращает сокращения частей адреса.
// Предзначена в первую очередь для сокращения поля "иное" или "другое" в случае заполнения.
// Там возможно все что угодно, поэтому представлены максимум вариантов.
// Также используется для сокращения стандартных значений в ТипДома, ТипКорпуса и ТипКвартиры.
//
// Возвращаемое значение:
//      Соответствие - Список сокращений.
//
Функция СокращенияОбъектовАдресацииАдресаРФ() Экспорт
	
	Результат = РегламентированнаяОтчетностьАЛКОПовтИсп.СокращенияОбъектовАдресацииАдресаРФ();
			
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Результат)
	
КонецФункции

// Формирует структуру уникальных идентификаторов ФИАС структуры адреса,
// получаемой из ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON().
//
// Параметры:
// 		СтруктураАдреса				- Структура. Соответствует результату работы
//									ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON().
//
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* КодРегион				- GUID или Неопределено.
//			* КодРайон				- GUID или Неопределено.
//			* КодГород				- GUID или Неопределено.
//			* КодНаселПункт			- GUID или Неопределено.
//			* КодУлица				- GUID или Неопределено.
//			* КодДом				- GUID или Неопределено.
//			* КодКварт				- GUID или Неопределено.
//
Функция КодыФИАС(СтруктураАдреса) Экспорт

	Перем АдресJSON, АдресXML;
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодРегион", 	Неопределено);
	Результат.Вставить("КодРайон", 		Неопределено);
	Результат.Вставить("КодГород", 		Неопределено);
	Результат.Вставить("КодНаселПункт", Неопределено);
	Результат.Вставить("КодУлица", 		Неопределено);
	Результат.Вставить("КодДом", 		Неопределено);
	Результат.Вставить("КодКварт", 		Неопределено);
	
	СтруктураАдреса.Свойство("АдресJSON", АдресJSON);
	Если НЕ ЗначениеЗаполнено(АдресJSON) Тогда
	
		СтруктураАдреса.Свойство("АдресXML", АдресXML);
		
		Если НЕ ЗначениеЗаполнено(АдресXML) Тогда
			Возврат Результат
		Иначе
			ПустойАдресXML = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("XML");
			Если АдресXML = ПустойАдресXML Тогда			
				Возврат Результат			
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ПустойАдресJSON = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("JSON");
		Если АдресJSON = ПустойАдресJSON Тогда		
			Возврат Результат		
		КонецЕсли; 
	
	КонецЕсли; 
		
	ПроверенАдрес = НеобходимостьПроверкиАдреса(СтруктураАдреса);
	
	Если НЕ ПроверенАдрес Тогда		
		СтруктураАдреса = ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(СтруктураАдреса, Истина, Истина);		
	КонецЕсли;
	
	Результат.Вставить("КодРегион", 	СтруктураАдреса.Идентификаторы.Регион);
	Результат.Вставить("КодРайон", 		СтруктураАдреса.Идентификаторы.Район);
	Результат.Вставить("КодГород", 		СтруктураАдреса.Идентификаторы.Город);
	
	Если ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.НаселенныйПункт) Тогда	
		Результат.Вставить("КодНаселПункт", СтруктураАдреса.Идентификаторы.НаселенныйПункт)
	ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Поселение) Тогда	
		Результат.Вставить("КодНаселПункт", СтруктураАдреса.Идентификаторы.Поселение)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Улица) Тогда	
		Результат.Вставить("КодУлица", 		СтруктураАдреса.Идентификаторы.Улица)
	ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Территория) Тогда	
		Результат.Вставить("КодУлица", 		СтруктураАдреса.Идентификаторы.Территория)	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураАдреса.ИдентификаторДома) Тогда	
		Результат.Вставить("КодДом", 		СтруктураАдреса.ИдентификаторДома)
	ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.ИдентификаторЗемельногоУчастка) Тогда	
		Результат.Вставить("КодДом", 		СтруктураАдреса.ИдентификаторЗемельногоУчастка)	
	КонецЕсли; 
	
	Возврат Результат

КонецФункции

Функция СтруктураПредопределенныхВидовКонтактнойИнформацииАдреса() Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Предопределенный = Истина";

	ЗапросПредопределенных = Новый Запрос;
	ЗапросПредопределенных.Текст = ТекстЗапроса;
	РезЗапросаПредопределенных = ЗапросПредопределенных.Выполнить().Выгрузить();

	Результат = Новый Структура;
	Результат.Вставить("Адрес", Новый СписокЗначений);
	Результат.Вставить("Почтовый", Новый СписокЗначений);

	Результат.Вставить("Организация", Новый Структура);
	Результат.Организация.Вставить("Почтовый", Новый СписокЗначений);
	Результат.Организация.Вставить("Юридический", Новый СписокЗначений);
	Результат.Организация.Вставить("Фактический", Новый СписокЗначений);

	Результат.Вставить("Контрагент", Новый Структура);
	Результат.Контрагент.Вставить("Почтовый", Новый СписокЗначений);
	Результат.Контрагент.Вставить("Юридический", Новый СписокЗначений);
	Результат.Контрагент.Вставить("Фактический", Новый СписокЗначений);

	ПравильныйТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");

	МетаданныеВидыКонтактнойИнформации = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ЕстьРеквизитТолькоНациональныйАдрес = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТолькоНациональныйАдрес", МетаданныеВидыКонтактнойИнформации);

	Для каждого СтрокаЗапроса Из РезЗапросаПредопределенных Цикл

		ИмяПредопределенныхДанныхВРег = ВРег(СтрокаЗапроса.ИмяПредопределенныхДанных);
		ПредопределенныйЭлементСправочника = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."
			+ СтрокаЗапроса.ИмяПредопределенныхДанных);

		Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Адрес")) > 0 Тогда

			Результат.Адрес.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных);

			ТолькоНациональныйАдрес = Неопределено;
			Если ЕстьРеквизитТолькоНациональныйАдрес
					и ЗначениеЗаполнено(ПредопределенныйЭлементСправочника.ТолькоНациональныйАдрес) Тогда
				ТолькоНациональныйАдрес = ?(ПредопределенныйЭлементСправочника.ТолькоНациональныйАдрес, "ТолькоНациональныйАдрес", "ЛюбойАдрес");
			КонецЕсли;

			// Фиксируем в категориях видов контактной информации только элементы,
			// с верно установленным типом - в противном случае при передаче такого вида
			// в форму ввода адресной информации БСП будет ошибка.
			Если ПредопределенныйЭлементСправочника.Тип = ПравильныйТипКонтактнойИнформации Тогда

				Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Почт")) > 0 Тогда
					Если ТолькоНациональныйАдрес = Неопределено Тогда
						Результат.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ЛюбойАдрес");
					Иначе
						Результат.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
					КонецЕсли;

				КонецЕсли;

				Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Орг")) > 0 Тогда

					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Почт")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Организация.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ЛюбойАдрес");
						Иначе
							Результат.Организация.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Юр")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Организация.Юридический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ТолькоНациональныйАдрес");
						Иначе
							Результат.Организация.Юридический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Факт")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Организация.Фактический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ТолькоНациональныйАдрес");
						Иначе
							Результат.Организация.Фактический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Контраг")) > 0 Тогда

					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Почт")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Контрагент.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ЛюбойАдрес");
						Иначе
							Результат.Контрагент.Почтовый.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Юр")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Контрагент.Юридический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ТолькоНациональныйАдрес");
						Иначе
							Результат.Контрагент.Юридический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(ИмяПредопределенныхДанныхВРег, ВРег("Факт")) > 0 Тогда
						Если ТолькоНациональныйАдрес = Неопределено Тогда
							Результат.Контрагент.Фактический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, "ЛюбойАдрес");
						Иначе
							Результат.Контрагент.Фактический.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных, ТолькоНациональныйАдрес);
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ОпределитьВидыКонтактнойИнформацииДляВводаАдреса() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТолькоНациональныйАдрес", Неопределено);
	Результат.Вставить("ЛюбойАдрес", Неопределено);

	// Вначале любой адрес.
	ИмяВидКонтактнойИнформации = Неопределено;

	СтруктураДоступныхВидовКонтактнойИнформации = СтруктураПредопределенныхВидовКонтактнойИнформацииАдреса();

	// Вначале смотрим почтовыевиды контактной информации - они обычно наименее ограничены по вариантам заполнения.
	// СписокПочтовыхВидовКонтактнойИнформации в  СтруктураДоступныхВидовКонтактнойИнформации.Почтовый.
	// Потом по Контрагентам.
	СтруктураВидовКонтактнойИнформацииКонтрагентов = СтруктураДоступныхВидовКонтактнойИнформации.Контрагент;
	// Потом по Организациям.
	СтруктураВидовКонтактнойИнформацииОрганизаций = СтруктураДоступныхВидовКонтактнойИнформации.Организация;

	СписокПочтовыхВидовКонтрагентов = СтруктураВидовКонтактнойИнформацииКонтрагентов.Почтовый;
	СписокПочтовыхВидовОрганизаций = СтруктураВидовКонтактнойИнформацииОрганизаций.Почтовый;

	Для каждого ЭлементСписка Из СписокПочтовыхВидовКонтрагентов Цикл

		Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
			ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда
		Для каждого ЭлементСписка Из СписокПочтовыхВидовОрганизаций Цикл

			Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииКонтрагентов.Фактический Цикл

			Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииОрганизаций.Фактический Цикл

			Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииКонтрагентов.Юридический Цикл

			Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииОрганизаций.Юридический Цикл

			Если ЭлементСписка.Представление = "ЛюбойАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда
		ИмяВидКонтактнойИнформации = "ПочтовыйАдресОрганизации";
	КонецЕсли;

	Если НЕ ИмяВидКонтактнойИнформации = Неопределено Тогда

		ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."
			+ ИмяВидКонтактнойИнформации);
		Результат.Вставить("ЛюбойАдрес", ВидКонтактнойИнформации);

	КонецЕсли;

	// Определяем вид контактной информации для национального адреса.
	ИмяВидКонтактнойИнформации = Неопределено;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииОрганизаций.Юридический Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииКонтрагентов.Юридический Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииОрганизаций.Фактический Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда

		Для каждого ЭлементСписка Из СтруктураВидовКонтактнойИнформацииКонтрагентов.Фактический Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда
		Для каждого ЭлементСписка Из СписокПочтовыхВидовОрганизаций Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда
		Для каждого ЭлементСписка Из СписокПочтовыхВидовКонтрагентов Цикл

			Если ЭлементСписка.Представление = "ТолькоНациональныйАдрес" Тогда
				ИмяВидКонтактнойИнформации = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ИмяВидКонтактнойИнформации = Неопределено Тогда
		ИмяВидКонтактнойИнформации = "ЮрАдресОрганизации";
	КонецЕсли;

	Если НЕ ИмяВидКонтактнойИнформации = Неопределено Тогда

		ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."
			+ ИмяВидКонтактнойИнформации);
		Результат.Вставить("ТолькоНациональныйАдрес", ВидКонтактнойИнформации);

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получить значение определенного вида контактной информации у объекта в формате JSON, если его нет то в XML.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//	   ПредставлениеАдреса		- Необязательный. Строка. В этом параметре передается представление адреса,
//								рассчитанное по представлению в XML.
//     ИмяВидКонтактнойИнформацииОсновной - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного - Необязательный.	
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного2 - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//	   ВыдаватьЛюбойЕслиНетНужногоВида - Булево.
//
// Возвращаемое значение:
//		Строка - строка JSON или XML значения полей адреса.
//		Неопределено - если не найдено.
//
Функция ПолучитьАдресОбъекта(знач Ссылка, ПредставлениеАдреса = Неопределено,
		СписокИменВидовКонтактнойИнформации = Неопределено,
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина,
		знач ДатаАдреса = Неопределено, ВариантСтрокиАдреса = "JSON") Экспорт

	Если НЕ (ВариантСтрокиАдреса = "JSON" ИЛИ ВариантСтрокиАдреса = "XML") Тогда
		ВариантСтрокиАдреса = "JSON";	
	КонецЕсли;
	
	Если ВариантСтрокиАдреса = "JSON" Тогда
	
		СтрокаАдреса = ПолучитьАдресJSONОбъекта(Ссылка, ПредставлениеАдреса,
												СписокИменВидовКонтактнойИнформации, 
												ВыдаватьЛюбойЕслиНетНужногоВида,
												ДатаАдреса);	
		Если СтрокаАдреса = Неопределено Тогда							
			СтрокаАдреса = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON(ВариантСтрокиАдреса);			
		КонецЕсли;
		
	Иначе
		СтрокаАдреса = ПолучитьАдресXMLОбъекта(Ссылка, ПредставлениеАдреса,
												СписокИменВидовКонтактнойИнформации, 
												ВыдаватьЛюбойЕслиНетНужногоВида,
												ДатаАдреса);		
		Если СтрокаАдреса = Неопределено Тогда							
			СтрокаАдреса = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON(ВариантСтрокиАдреса);			
		КонецЕсли;
		
	КонецЕсли;		
	 
	Возврат СтрокаАдреса;	

КонецФункции

Функция ПрефиксСтрокиСтруктурыХраненияАдреса() Экспорт
	Возврат "#&!";
КонецФункции
 
Функция АдресОбъектаВСтрокуСтруктурыХранения(знач Ссылка, 
		ПредставлениеАдреса = Неопределено,
		СписокИменВидовКонтактнойИнформации = Неопределено,
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина,
		знач ДатаАдреса = Неопределено, 
		ВариантСтрокиАдреса = "JSON",
		ПроверятьАдрес = Истина) Экспорт

	СтрокаАдресаXMLилиJSON = ПолучитьАдресОбъекта(Ссылка, ПредставлениеАдреса, СписокИменВидовКонтактнойИнформации,
										ВыдаватьЛюбойЕслиНетНужногоВида, ДатаАдреса, ВариантСтрокиАдреса);
										
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(
															СтрокаАдресаXMLилиJSON, ПроверятьАдрес);
			
	Возврат СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);

КонецФункции

Функция СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса) Экспорт

	СтрокаВнутр = ЗначениеВСтрокуВнутр(СтруктураАдреса);
	
	Результат = ПрефиксСтрокиСтруктурыХраненияАдреса() + СтрокаВнутр;
		
	Возврат Результат;

КонецФункции

Функция СтруктураАдресаИзСтрокиСтруктурыХранения(ПолеСтруктурыАдреса) Экспорт

	СтруктураРезультата = РегламентированнаяОтчетностьАЛКОПовтИспНаВызов.СтруктураАдресаИзСтрокиСтруктурыХранения(
												ПолеСтруктурыАдреса);
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(СтруктураРезультата);
	
КонецФункции

Процедура ВводАдресаКонтрагентаЗавершениеНаСервере(Результат, ПредставлениеАдреса, ПолеСтруктурыАдреса,
				 Модифицированность = Ложь, СтруктураАдреса = Неопределено) Экспорт

	Если НЕ (ТипЗнч(Результат) = Тип("Структура")) Тогда
		Возврат;	
	КонецЕсли;
	
	СтароеПредставлениеАдреса = ПредставлениеАдреса;
	СтароеПолеСтруктурыАдреса = ПолеСтруктурыАдреса;
	
	АдресXML					=  Результат.КонтактнаяИнформация;  // формат XML
	АдресJSON					=  Результат.Значение;				// формат JSON
	НовоеПредставлениеАдреса	=  Результат.Представление;
	
	Если ЗначениеЗаполнено(АдресJSON) Тогда
	
		СтруктураАдреса = 
			ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресJSON, Истина);	
			
	Иначе
			
		СтруктураАдреса = 
			ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресXML, Истина);	
			
	КонецЕсли;
	
	НовоеПолеСтруктурыАдреса = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
	
	Если НЕ (НовоеПредставлениеАдреса = СтароеПредставлениеАдреса 
			И НовоеПолеСтруктурыАдреса = СтароеПолеСтруктурыАдреса) Тогда
	
		ПолеСтруктурыАдреса = НовоеПолеСтруктурыАдреса;
		ПредставлениеАдреса = НовоеПредставлениеАдреса;
		Модифицированность = Истина;
	
	КонецЕсли; 
		
КонецПроцедуры

Функция ЭтоКонтактнаяИнформацияВСтрокеСтруктурыХранения(СтрокаАдреса) Экспорт

	Возврат ТипЗнч(СтрокаАдреса) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(СтрокаАдреса), ПрефиксСтрокиСтруктурыХраненияАдреса());

КонецФункции
 
Функция ВариантКонтактнойИнформацииАЛКО(СтрокаАдреса) Экспорт

	Результат = Новый Структура("ЭтоСтруктураАдреса, ЭтоXML, ЭтоJSON");
	Результат.Вставить("ЭтоСтруктураАдреса", 	Ложь);
	Результат.Вставить("ЭтоXML", 				Ложь);
	Результат.Вставить("ЭтоJSON", 				Ложь);
	
	Если НЕ ТипЗнч(СтрокаАдреса) = Тип("Строка") Тогда
		СтрокаАдреса = "";	
	КонецЕсли; 

	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаАдреса) Тогда
		Результат.ЭтоXML = Истина;
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(СтрокаАдреса) Тогда
		Результат.ЭтоJSON = Истина;
	ИначеЕсли ЭтоКонтактнаяИнформацияВСтрокеСтруктурыХранения(СтрокаАдреса) Тогда
		Результат.ЭтоСтруктураАдреса = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработкаСохраненияАдресаКонтрагента(Контрагент = Неопределено, 
												ПолеСтруктурыАдреса,  
												ДатаАдреса = Неопределено,
												ПроверятьАдрес = Истина,
												НапрямуюИзКеша = Ложь) Экспорт
	
	СтруктураРезультата = РегламентированнаяОтчетностьАЛКОПовтИспНаВызов.ОбработкаСохраненияАдресаКонтрагента(
												Контрагент, 
												ПолеСтруктурыАдреса,  
												ДатаАдреса,
												ПроверятьАдрес);
	
	Возврат ?(НапрямуюИзКеша, СтруктураРезультата, 
				ОбщегоНазначения.СкопироватьРекурсивно(СтруктураРезультата));
		
КонецФункции

Процедура ОбработкаСохраненияАдреса(ПолеСтруктурыАдреса, 
									Представление, 
									СтруктураАдреса = Неопределено,
									ПроверятьАдрес = Истина) Экспорт

	Представление = "";
	
	СтруктураАдреса = СтруктураАдресаИзСтрокиСтруктурыХранения(ПолеСтруктурыАдреса);
	ПроверенАдрес = НеобходимостьПроверкиАдреса(СтруктураАдреса);
	
	Если (НЕ ПроверенАдрес) И ПроверятьАдрес Тогда		
		СтруктураАдреса = ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(СтруктураАдреса, Истина, Истина);		
	КонецЕсли;
	ПолеСтруктурыАдреса = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
	
	Представление = СтруктураАдреса.ПредставлениеАдреса;
	
КонецПроцедуры

Процедура ОбработкаЗаписиРегистраАлкоЛицензии(Запись) Экспорт

	АдресVNUTR = Запись.П0000000VNUTR;
	СтруктураАдреса = Неопределено;
	ОбработкаСохраненияАдреса(Запись.П0000000VNUTR, Запись.П0000000Адрес, СтруктураАдреса);
					
	Запись.П000000000201 = СокрЛП(Запись.П000000000201);
	
	Если НЕ АдресVNUTR = Запись.П0000000VNUTR Тогда
		
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗаполнитьЗаписьРегистраЛицензийИзСтруктурыАдреса(
																	Запись, СтруктураАдреса);
		
	КонецЕсли;

КонецПроцедуры

// Вносит новые данные адреса местонахождения организации в данные титульного листа отчета ФСРАР.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Результат			- Структура - результат, возвращаемый 
//							УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации()
//
Процедура ОбновитьМестоОсуществленияДеятельности(Форма, Результат) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ (ТипЗнч(Результат) = Тип("Структура")) Тогда
		Возврат;
	КонецЕсли;

	ОбрабатываемыеДанные = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;

	СтароеМестоДеятельности = СокрЛП(Форма.СтруктураДанныхТитульный.МестоДеятельности);

	АдресXML = Результат.КонтактнаяИнформация; // формат XML
	АдресJSON = Результат.Значение; // формат JSON
	ПредставлениеАдреса = Результат.Представление;

	АдресXMLилиJSON = ?(ЗначениеЗаполнено(АдресJSON), АдресJSON, АдресXML);
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресXMLилиJSON, Истина);
	
	// Организация всегда российская.
	СтруктураАдреса.Вставить("КодСтраны", "643");
	СтруктураАдреса.Вставить("Страна", "РОССИЯ");
	
	Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности = СтруктураАдреса;

	Форма.СтруктураДанныхТитульный.МестоДеятельности = ПредставлениеАдреса;
	Форма.ОрганизацияМестоОсуществленияДеятельности = ПредставлениеАдреса;

	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияМестоОсуществленияДеятельности) Тогда
		Форма.ОрганизацияМестоОсуществленияДеятельности = "Заполнить";
	КонецЕсли;

	Форма.Модифицированность = Форма.Модифицированность
		или (СтароеМестоДеятельности <> СокрЛП(ПредставлениеАдреса));

	ОбновитьЦветаСсылокТитульногоАЛКО(Форма);

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсПроверка

// Передает из фоновой задачи процент выполнения процесса и сообщение пользователю.
// В дальнейшем переданную информацию можно прочесть с помощью 
// РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторФоновогоЗадания)
// или ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторФоновогоЗадания)
//
// Параметры:
//
//	 	СообщениеПользователю 				- Строка - Необязательный. Основное сообщение, выводимое в форме 
//											длительной операции.
// 		Обработано 							- Число - Необязательный. По умолчанию 0. Отражает количество отработанных
//											операций.
// 		НужноОбработать						- Число - Необязательный. По умолчанию 100. Отражает общее количество
//											операций, которые нужно отработать.
// 		СтоПроцентов						- Число - Необязательный. По умолчанию 100. Отражает сколько процентов
//											соответствует параметру НужноОбработать.
//
// Пример:
//
// 	НужноОбработатьСтрок = 2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2);
//	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%,
//	// при проверке выгрузки - примерно 90% от общего времени выполнения.
//	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
//	. . . .
//	РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
//										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
//
Процедура СообщитьПроцентВыполнения(СообщениеПользователю = Неопределено,
		Обработано = 0, НужноОбработать = 100, СтоПроцентов = 100,
		РежимОтладки = Неопределено) Экспорт

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(Обработано) = Тип("Число") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения() 
				|передан параметр Обработано, который не является Числом!";
		КонецЕсли;

		Если НЕ ТипЗнч(НужноОбработать) = Тип("Число") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения() 
				|передан параметр НужноОбработать, который не является Числом!";
		КонецЕсли;

		Если НЕ ТипЗнч(СтоПроцентов) = Тип("Число") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения() 
				|передан параметр СтоПроцентов, который не является Числом!";
		КонецЕсли;

		Если (НЕ СообщениеПользователю = Неопределено)
				И (НЕ ТипЗнч(СообщениеПользователю) = Тип("Строка")) Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения() 
				|передан параметр СообщениеПользователю, который не является Строкой!";
		КонецЕсли;

	КонецЕсли;

	СтруктураИнформации = Новый Структура;

	Если НЕ СообщениеПользователю = Неопределено Тогда
		СтруктураИнформации.Вставить("СообщениеПользователю", СообщениеПользователю);
	КонецЕсли;

	ПроцентВыполненияОперации = 0;
	Если НужноОбработать > 0 Тогда
		ПроцентВыполненияОперации = (Обработано / НужноОбработать) * СтоПроцентов;
	КонецЕсли;

	СтруктураИнформации.Вставить("ВидимостьПроцентаВыполненияОперации", ?(ПроцентВыполненияОперации > 0, Истина, Ложь));

	СтруктураИнформации.Вставить("ПроцентВыполненияОперации", ПроцентВыполненияОперации);

	ДлительныеОперации.СообщитьПрогресс(, , СтруктураИнформации);

КонецПроцедуры

// Вычисляет контрольное число ИНН для физических и юридических лиц.
//
// Параметры:
//
//	 	ИНН 				- Строка. ИНН российского юридического или физического лица. 
//
// Возвращаемое значение:
//		Неопределено или Строка - для юридических лиц длиной 1 символ-цифру, для физических - 2 символа-цифры.
//
Функция КонтрольноеЧислоИНН(ИНН, РежимОтладки = Неопределено) Экспорт

// Проверка основных параметров.
	ИНН = ?(ЗначениеЗаполнено(ИНН), ИНН, "");

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки И (НЕ ТипЗнч(ИНН) = Тип("Строка")) Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.КонтрольноеЧислоИНН() 
			|передана ИНН, не являющаяся Строкой!";
	КонецЕсли;

	ВесаЮЛ = ВесаЮЛ();
	ВесаФЛ11 = ВесаФЛ11();
	ВесаФЛ12 = ВесаФЛ12();

	ТипЧисло = Новый ОписаниеТипов("Число");

	КонтрольноеЧисло = Неопределено;

	Если СтрДлина(СокрЛП(ИНН)) = 10 Тогда
		КонтрольнаяСумма = 0;

		Для Инд = 1 По 9 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма = КонтрольнаяСумма + ЧисловоеПредставлениеРазряда
				* ВесаЮЛ[Инд];
		КонецЦикла;

		КонтрольнаяСумма = КонтрольнаяСумма % 11 % 10;

		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма);

	ИначеЕсли СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;

		Для Инд = 1 По 10 Цикл
			ЧисловоеПредставлениеРазряда = ТипЧисло.ПривестиЗначение(Сред(ИНН, Инд, 1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + ЧисловоеПредставлениеРазряда
				* ВесаФЛ11[Инд];
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + ЧисловоеПредставлениеРазряда
				* ВесаФЛ12[Инд];
		КонецЦикла;

		КонтрольнаяСумма11 = КонтрольнаяСумма11 % 11 % 10;

		КонтрольнаяСумма12 = КонтрольнаяСумма12 + КонтрольнаяСумма11 * ВесаФЛ12[11];
		КонтрольнаяСумма12 = КонтрольнаяСумма12 % 11 % 10;

		КонтрольноеЧисло = СтрокаЧГ0(КонтрольнаяСумма11)
			+ СтрокаЧГ0(КонтрольнаяСумма12);

	КонецЕсли;

	Возврат КонтрольноеЧисло;

КонецФункции

// Создает пустую таблицу сообщений об ошибках.
//
// Параметры:
//
//	 	Нет.
//
// Возвращаемое значение:
//		Таблица значений
//
Функция СоздатьТаблицуСообщенийОбОшибках() Экспорт

	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ОтчетДок");
	ТаблицаСообщений.Колонки.Добавить("Раздел");
	ТаблицаСообщений.Колонки.Добавить("Страница");
	ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
	ТаблицаСообщений.Колонки.Добавить("Описание");
	ТаблицаСообщений.Колонки.Добавить("ТипОшибки");

	Возврат ТаблицаСообщений;

КонецФункции

// Добавляет строку в таблицу сообщений об ошибках, заполняя ее данными о ошибке.
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураОшибки				- Структура - структура информации об ошибке.
//			* ТекстОписанияОшибки		- Строка - описание сути ошибки.
//			* Раздел					- Строка - раздел отчета, к которому относится ошибка.
//			* Показатель				- Строка - имя поля формы отчета или имя колонки таблицы с указанием номера строки,
//										например: 
//										"Организация", "П000000000102" - имена полей
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//			* ЛистРаздела			- Число - Необязательный. Номер листа многостраничного раздела.
//			* ТипОшибки				- Строка - Необязательный. Тип ошибки, описанный в макете "ШаблоныСообщенийОбОшибках" отчета
//
//
Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках,
		СтатусПроверки = Ложь, СтруктураОшибки, РежимОтладки = Неопределено, 
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено) Экспорт

		// Струкутра таблицы сообщений
	//
	//"ОтчетДок"
	//"Раздел"
	//"Страница"
	//"ИмяЯчейки"
	//"Описание"
	//"ТипОшибки"
	Перем ТекстОписанияОшибки, Раздел, Показатель, ЛистРаздела, ТипОшибки;

	ДокументСсылкаАлкоОтчет = ПривестиДокументКСсылке(ДокументСсылка);
	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылка = ДокументСсылкаАлкоОтчет;
	
	// Проверка основных параметров.
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;
		
		Если НЕ ТипЗнч(ТаблицаСообщенийОбОшибках) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения() 
				|передана ТаблицаСообщенийОбОшибках, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(СтруктураОшибки) = Тип("Структура") Тогда
			ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения() 
				|передана СтруктураОшибки, не являющаяся Структурой!";
		КонецЕсли;

	КонецЕсли;
	
	НужноВыдатьОшибкуСлишкомМногоОшибок = Ложь;
	Если ЗначениеЗаполнено(МаксимальноеКоличествоОшибок) И ТипЗнч(МаксимальноеКоличествоОшибок) = Тип("Число") Тогда
		
		Если НЕ (ЗначениеЗаполнено(ТекущееКоличествоОшибок) И ТипЗнч(ТекущееКоличествоОшибок) = Тип("Число")) Тогда
			ТекущееКоличествоОшибок = ТаблицаСообщенийОбОшибках.Количество();		
		КонецЕсли;
		
		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда		
			Возврат;
		ИначеЕсли ТекущееКоличествоОшибок = МаксимальноеКоличествоОшибок Тогда
			НужноВыдатьОшибкуСлишкомМногоОшибок = Истина;
		КонецЕсли; 
			
	КонецЕсли; 
	

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекстОписанияОшибки", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Раздел", "Строка", "Неопределено", "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Показатель", "Строка", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ЛистРаздела", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного Неопределено, если не тот тип - тоже Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТипОшибки", "Строка", "Неопределено", "Неопределено", РежимОтладки);

	ПравильныеПараметрыВСтруктуре(СтруктураОшибки, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураОшибки.Свойство("ТекстОписанияОшибки", ТекстОписанияОшибки);
	СтруктураОшибки.Свойство("Раздел", Раздел);
	СтруктураОшибки.Свойство("Показатель", Показатель);
	СтруктураОшибки.Свойство("ЛистРаздела", ЛистРаздела);
	СтруктураОшибки.Свойство("ТипОшибки", ТипОшибки);

	СтатусПроверки = Ложь;

	НоваяСтрокаСообщений = ТаблицаСообщенийОбОшибках.Добавить();

	НоваяСтрокаСообщений.ОтчетДок = ДокументСсылка;

	НоваяСтрокаСообщений.Описание = ТекстОписанияОшибки;
	НоваяСтрокаСообщений.Раздел = Раздел;
	НоваяСтрокаСообщений.ИмяЯчейки = Показатель;

	Если НЕ ЛистРаздела = Неопределено Тогда
		НоваяСтрокаСообщений.Страница = ЛистРаздела;
	КонецЕсли;

	Если НЕ ТипОшибки = Неопределено Тогда
		НоваяСтрокаСообщений.ТипОшибки = ТипОшибки;
	КонецЕсли;
	
	Если НЕ ТекущееКоличествоОшибок = Неопределено Тогда
		ТекущееКоличествоОшибок = ТекущееКоличествоОшибок + 1;	
	КонецЕсли; 
	
	Если НужноВыдатьОшибкуСлишкомМногоОшибок Тогда
	
		ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок
				+ " и более ошибок. Дальнейшая проверка прекращена!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", Раздел);
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", ЛистРаздела);
		СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
		// Здесь не передаем информацию о максимальном количестве ошибок, 
		// чтобы это сообщение гарантированно попало в таблицу ошибок.
		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки);
	
	КонецЕсли; 

КонецПроцедуры

// Проверяет заполнение раздела Лицензий деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		ТаблицаСтраницыЛицензии		- ТаблицаЗначений - таблица страниц раздела Лицензии декларации.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//
//		СтруктураСведенийРазделаЛицензий- Структура - структура информации о разделе Лицензии.
//			* ЕстьЛицензииВРазделеЛицензии	- Булево - флаг наличия информации о лицензиях в разделе Лицензии.
//											В некоторых декларациях в разделе Лицензии информация о лицензиях убрана,
//											но сам раздел остался.
//			* ИмяПоляКодВидаДеятельности	- Строка - имя элемента формы, содержащего значение Вида деятельности.
//			* СписокКодовДеятельности		- Массив - массив возможных значений для кода деятельности.
//			* ДатаНачалаОтчета			- Дата - Необязательный. Дата начала регламентированного отчета ФСРАР.
//			* ДатаКонцаОтчета			- Дата - Необязательный. Дата окончания регламентированного отчета ФСРАР.
//			* НижняяГраницаДатыПоXSD	- Дата - Необязательный. Нижняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 01.01.1000
//			* ВерхняяГраницаДатыПоXSD	- Дата - Необязательный. Верхняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 31.12.2099
//
// Возвращаемое значение:
//		Булево - Истина, если нет ошибок проверки.
//
Функция ВерноеЗаполнениеРазделаЛицензии(ДокументСсылкаАлкоОтчет, СтатусПроверки,
		ТаблицаСтраницыЛицензии, ТаблицаСообщенийОбОшибках,
		ТаблицаСообщенийДляСведения, СтруктураСведенийРазделаЛицензий,
		РежимОтладки = Неопределено) Экспорт

	Перем СписокКодовДеятельности, ИмяПоляКодВидаДеятельности,
		ЕстьЛицензииВРазделеЛицензии, НижняяГраницаДатыПоXSD,
		ВерхняяГраницаДатыПоXSD, ДатаНачалаОтчета, ДатаКонцаОтчета;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
		// Проверка основных параметров.
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;
		
		Если НЕ ТипЗнч(СтруктураСведенийРазделаЛицензий) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана СтруктураСведенийРазделаЛицензий, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийОбОшибках) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ТаблицаСообщенийОбОшибках, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСтраницыЛицензии) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() 
				|передана ТаблицаСтраницыЛицензии, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ЕстьЛицензииВРазделеЛицензии", "Булево", Истина, Неопределено, РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "П000000000105", если не тот тип - "П000000000105".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяПоляКодВидаДеятельности", "Строка", "П000000000105", "П000000000105", РежимОтладки);
	// Тип Массив, по умолчанию для незаполненного пустой массив, если не тот тип - тоже.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СписокКодовДеятельности", "Массив", , , РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НижняяГраницаДатыПоXSD", "Дата", '1000.01.01 00:00.00', '1000.01.01 00:00.00', РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - максимальная дата по XSD.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВерхняяГраницаДатыПоXSD", "Дата", '2099.12.31 23:59.59', '2099.12.31 23:59.59', РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаНачалаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаКонцаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийРазделаЛицензий, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураСведенийРазделаЛицензий.Свойство("ЕстьЛицензииВРазделеЛицензии", ЕстьЛицензииВРазделеЛицензии);
	Если НЕ ТипЗнч(ЕстьЛицензииВРазделеЛицензии) = Тип("Булево") Тогда
		ВызватьИсключение "В РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() не передан признак ЕстьЛицензииВРазделеЛицензии.";
	КонецЕсли;

	Если НЕ ЕстьЛицензииВРазделеЛицензии Тогда

	// В разделе только адреса деятельности, они не выгружаются.
		// Проверять нечего.
		Возврат Истина;

	КонецЕсли;

	СтруктураСведенийРазделаЛицензий.Свойство("ИмяПоляКодВидаДеятельности", ИмяПоляКодВидаДеятельности);

	СтруктураСведенийРазделаЛицензий.Свойство("СписокКодовДеятельности", СписокКодовДеятельности);

	НеПереданСписок = Истина;
	Если (ТипЗнч(СписокКодовДеятельности) = Тип("Массив"))
			И (СписокКодовДеятельности.Количество() > 0) Тогда
		НеПереданСписок = Ложь;
	КонецЕсли;

	Если НеПереданСписок Тогда
		ВызватьИсключение "В РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии() не передан массив СписокКодовДеятельности.";
	КонецЕсли;

	СтруктураСведенийРазделаЛицензий.Свойство("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийРазделаЛицензий.Свойство("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	СтруктураСведенийРазделаЛицензий.Свойство("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийРазделаЛицензий.Свойство("ДатаКонцаОтчета", ДатаКонцаОтчета);

	Если НЕ (ТипЗнч(ДатаНачалаОтчета) = Тип("Дата")
			И ТипЗнч(ДатаКонцаОтчета) = Тип("Дата")) Тогда

		ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылкаАлкоОтчет);

		Если НЕ ТипЗнч(ДатаНачалаОтчета) = Тип("Дата") Тогда
			ДатаНачалаОтчета = ДатыОтчета.ДатаНачалаОтчета;
		КонецЕсли;

		Если НЕ ТипЗнч(ДатаКонцаОтчета) = Тип("Дата") Тогда
			ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		КонецЕсли;

	КонецЕсли;

	ДанныеРаздела = ТаблицаСтраницыЛицензии;

	ЕстьЗаполненныйЛистРаздела = Ложь;

	ТекстОписанияОшибки = "";

	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		ДополнительныеДанныеРаздела = ЛистРаздела.ДополнительныеДанные[0].Значение;

		Если НЕ УказанаЛицензия(ДанныеЛиста, ИмяПоляКодВидаДеятельности) Тогда
			Продолжить;
		КонецЕсли;

		ЕстьЗаполненныйЛистРаздела = Истина;

		ВидДеятельности = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(ИмяПоляКодВидаДеятельности, ДанныеЛиста);
		КодВидаДеятельности = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(ИмяПоляКодВидаДеятельности, ДополнительныеДанныеРаздела);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках("В разделе Лицензии", НомерЛиста, Неопределено, "", РежимОтладки);

		Если ЗначениеЗаполнено(ВидДеятельности)
				И НЕ ЗначениеЗаполнено(КодВидаДеятельности) Тогда

			ТекстОписанияОшибки = СтрокаГде
				+ " нарушена внутренняя структура данных вида деятельности по лицензии. 
				|Требуется повторный выбор значения из списка!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Лицензии");
			СтруктураОшибки.Вставить("Показатель", ИмяПоляКодВидаДеятельности);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НарушенаСтруктураКодаВидаДеятельности");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийРазделаЛицензий.ТекущееКоличествоОшибок);

		Иначе

		// Определим имена элементов формы 
			ИндексПоляКодВидаДеятельности = Число(Прав(ИмяПоляКодВидаДеятельности, 2));
			ИдГруппыЛицензии = Лев(ИмяПоляКодВидаДеятельности, 11);

			ИндексПоляСерия = ИндексПоляКодВидаДеятельности - 4;
			СтрокаИндексПоляСерия = Формат(ИндексПоляСерия, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");
			ИмяСерияЛицензии = ИдГруппыЛицензии + СтрокаИндексПоляСерия;
			СерияЛицензии = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(ИмяСерияЛицензии, ДанныеЛиста);

			ИндексПоляНомер = ИндексПоляКодВидаДеятельности - 3;
			СтрокаИндексПоляНомер = Формат(ИндексПоляНомер, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");
			ИмяНомерЛицензии = ИдГруппыЛицензии + СтрокаИндексПоляНомер;
			НомерЛицензии = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры(ИмяНомерЛицензии, ДанныеЛиста);

			ИндексПоляДатаВыдачи = ИндексПоляКодВидаДеятельности - 2;
			СтрокаИндексПоляДатаВыдачи = Формат(ИндексПоляДатаВыдачи, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");
			ИмяДатаВыдачиЛицензии = ИдГруппыЛицензии + СтрокаИндексПоляДатаВыдачи;
			ДатаВыдачиЛицензии = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(ИмяДатаВыдачиЛицензии, ДанныеЛиста);

			ИндексПоляДатаОкончания = ИндексПоляКодВидаДеятельности - 1;
			СтрокаИндексПоляДатаОкончания = Формат(ИндексПоляДатаОкончания, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");
			ИмяДатаОкончанияЛицензии = ИдГруппыЛицензии
				+ СтрокаИндексПоляДатаОкончания;
			ДатаОкончанияЛицензии = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(ИмяДатаОкончанияЛицензии, ДанныеЛиста);

			// На текущий момент в лицензиях декларанта, указываемых в разделе Лицензии,
			// нет поля лицензии "Кем выдана".			 
			ИмяКемВыданаЛицензия = Неопределено;
			КемВыданаЛицензия = Неопределено;

			// Отправляем на универсальную проверку.
			СтруктураСведенийЛицензий = Новый Структура;

			СтруктураСведенийЛицензий.Вставить("ИмяРаздела", "Лицензии");
			СтруктураСведенийЛицензий.Вставить("СтрВКакомРазделе", "В разделе Лицензии");
			СтруктураСведенийЛицензий.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийЛицензий.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийЛицензий.Вставить("НомерСтрокиСтроковый", Неопределено);
			СтруктураСведенийЛицензий.Вставить("ИмяТаблицы", "");

			СтруктураСведенийЛицензий.Вставить("РоссийскийРезидент", Истина);

			СтруктураСведенийЛицензий.Вставить("НетПроблемИННКПП", Истина);

			СтруктураСведенийЛицензий.Вставить("ИмяСерияЛицензии", ИмяСерияЛицензии);
			СтруктураСведенийЛицензий.Вставить("СерияЛицензии", СерияЛицензии);
			СтруктураСведенийЛицензий.Вставить("ИмяНомерЛицензии", ИмяНомерЛицензии);
			СтруктураСведенийЛицензий.Вставить("НомерЛицензии", НомерЛицензии);

			СтруктураСведенийЛицензий.Вставить("ИмяДатаВыдачиЛицензии", ИмяДатаВыдачиЛицензии);
			СтруктураСведенийЛицензий.Вставить("ДатаВыдачиЛицензии", ДатаВыдачиЛицензии);
			СтруктураСведенийЛицензий.Вставить("ИмяДатаОкончанияЛицензии", ИмяДатаОкончанияЛицензии);
			СтруктураСведенийЛицензий.Вставить("ДатаОкончанияЛицензии", ДатаОкончанияЛицензии);

			СтруктураСведенийЛицензий.Вставить("КемВыданаОбязателен", Ложь);
			СтруктураСведенийЛицензий.Вставить("ИмяКемВыданаЛицензия", ИмяКемВыданаЛицензия);
			СтруктураСведенийЛицензий.Вставить("КемВыданаЛицензия", КемВыданаЛицензия);

			СтруктураСведенийЛицензий.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
			СтруктураСведенийЛицензий.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

			СтруктураСведенийЛицензий.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
			СтруктураСведенийЛицензий.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

			СтруктураСведенийЛицензий.Вставить("РодительскийПадежЧьяЛицензия", "декларанта");

			СтруктураСведенийЛицензий.Вставить("КодОбязателен", Истина);
			СтруктураСведенийЛицензий.Вставить("Код", КодВидаДеятельности);
			СтруктураСведенийЛицензий.Вставить("ИмяКод", ИмяПоляКодВидаДеятельности);
			СтруктураСведенийЛицензий.Вставить("СписокКодов", СписокКодовДеятельности);
			
			СтруктураСведенийЛицензий.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоОшибок);
			СтруктураСведенийЛицензий.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийРазделаЛицензий.ТекущееКоличествоОшибок);
			СтруктураСведенийЛицензий.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийЛицензий.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийРазделаЛицензий.ТекущееКоличествоПредупреждений);
	
			ПроверкаПройдена = ВернаяЛицензия(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийЛицензий, , РежимОтладки);

			СтруктураСведенийЛицензий.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоОшибок);
			СтруктураСведенийЛицензий.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийРазделаЛицензий.ТекущееКоличествоОшибок);
			СтруктураСведенийЛицензий.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийЛицензий.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийРазделаЛицензий.ТекущееКоличествоПредупреждений);
			
			Если НЕ ПроверкаПройдена Тогда
				ТекстОписанияОшибки = "Ошибка в лицензии";
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда

		СтрГде = "В разделе Лицензии";
		ТекстОписанияОшибки = СтрГде + " не введено ни одной лицензии!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Лицензии");
		СтруктураОшибки.Вставить("Показатель", ИмяПоляКодВидаДеятельности);
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхЛицензии");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийРазделаЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийРазделаЛицензий.ТекущееКоличествоОшибок);

	КонецЕсли;

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

Функция ЛицензируемаяДеятельностьАЛКО(ТаблицаСтраницыЛицензии,
		ИмяПоляКодЛицензии = "П000000000105") Экспорт

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЛицензируемаяДеятельностьАЛКО(ТаблицаСтраницыЛицензии, ИмяПоляКодЛицензии);

КонецФункции

// Определяет является ли контрагент российским.
// При наличии реквизита СтранаРегистрации и его заполнении определяется по стране регистрации,
// в противном случае определяется исходя из 
//
// Параметры:
//
//		Контрагент							- Справочник.Контрагенты.
//		ЕстьСтранаРегистрацииВКонфигурации 	- Булево или Неопределено. Необязательный. Определяет есть ли
//											в реквизитах элемента Справочник.Контрагенты реквизит СтранаРегистрации.
//		СтранаРоссия						- Справочник.СтраныМира. Необязательный. Предопределенный элемент
//											Справочник.СтраныМира.Россия.
//	 	ИНН 								- Строка. ИНН контрагента стран ЕАЭС.
//		КПП									- Строка. КПП российского контрагента.
//
// Возвращаемое значение:
//		Неопределено или Булево - Неопределено если принадлежность определить не удалось.
//
Функция ЭтоТочноРоссийскийРезидент(Контрагент,
		ЕстьСтранаРегистрацииВКонфигурации = Неопределено,
		СтранаРоссия = Неопределено, СтранаРегистрации = Неопределено, ИНН, КПП,
		РежимОтладки = Неопределено) Экспорт

		// Проверка основных параметров.
	ИНН = ?(ЗначениеЗаполнено(ИНН), ИНН, "");
	КПП = ?(ЗначениеЗаполнено(КПП), КПП, "");

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(ИНН) = Тип("Строка") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ЭтоТочноРоссийскийРезидент() 
				|передана ИНН, не являющаяся Строкой!";
		КонецЕсли;

		Если НЕ ТипЗнч(КПП) = Тип("Строка") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ЭтоТочноРоссийскийРезидент() 
				|передана КПП, не являющаяся Строкой!";
		КонецЕсли;

	КонецЕсли;

	РоссийскийРезидент = Неопределено;

	Если ЕстьСтранаРегистрацииВКонфигурации = Неопределено Тогда

		МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
		ЕстьСтранаРегистрацииВКонфигурации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	КонецЕсли;

	// Если в конфигурации в справочнике Контрагенты имеется реквизит СтранаРегистрации,
	// справочник СтраныМира всегда есть.
	Если ЕстьСтранаРегистрацииВКонфигурации и (СтранаРоссия = Неопределено) Тогда
		СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьСтранаРегистрацииВКонфигурации Тогда

			Если НЕ ЗначениеЗаполнено(СтранаРегистрации) Тогда
				СтранаРегистрации = Контрагент.СтранаРегистрации;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтранаРегистрации) Тогда
				РоссийскийРезидент = (СтранаРегистрации = СтранаРоссия);
				Возврат РоссийскийРезидент;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Если не смогли определеить по стране регистрации,
	// определяем по переданному ИНН и КПП.
	ИНН = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);

	КПП = СокрЛП(КПП);
	ДлинаКПП = СтрДлина(КПП);

	Если (РоссийскийРезидент = Неопределено) и (ДлинаИНН = 10) Тогда
	// В странах ЕАЭС 10 значный ИНН только у России.
		РоссийскийРезидент = Истина;
		
	КонецЕсли;

	Если (РоссийскийРезидент = Неопределено) и (ДлинаИНН = 12) Тогда

	// Или российский или казахстанский или не правильный.
		Если ВСтрокеВсеЦифры(ИНН) Тогда

			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН, РежимОтладки);

			// Контрольное число совпадает с российским - точно российский.
			Если КонтрольноеЧислоИНН = Прав(ИНН, 2) Тогда
				РоссийскийРезидент = Истина;			
			КонецЕсли; 
		
		КонецЕсли;

	КонецЕсли;

	Если (РоссийскийРезидент = Неопределено) и (ДлинаКПП > 0) Тогда

	// Считаем как неверный ИНН российского контрагента.
		РоссийскийРезидент = Истина;
		
	КонецЕсли;

	Возврат РоссийскийРезидент;

КонецФункции

// Проверяет заполнение полей Лицензий в строках таблиц или страницах (в т.ч. раздел Лицензии) деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураСведенийЛицензий	- Структура - структура информации о лицензии.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
//			* НомерЛиста                - Число  - Необязательный, если проверяются не поля Таблицы.
//										Номер листа многостраничного раздела.
//			* РоссийскийРезидент 		- Булево - Необязательный. Флаг, если Истина - владелец лицензии российский резидент.
//										Владельцем в любом случае может быть только российский резидент, но при проверке ИНН-КПП
//										уже точно известна принадлежность, и если иностранный резидент - лицензию можно не проверять.
//			* НетПроблемИННКПП	 		- Булево - Необязательный. Флаг, если Истина - проверка ИНН-КПП прошла без ошибок.
//
//			* ИмяСерияЛицензии			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей серию лицензии, или имя элемента формы, содержащего значение серии лицензии, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//										"П000000000005" - элемент страницы.
//			* СерияЛицензии 			- Строка - строка серии.
//			* ИмяНомерЛицензии			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей номер лицензии, или имя элемента формы, содержащего значение номера лицензии, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//										"П000000000005" - элемент страницы.
//			* НомерЛицензии 			- Строка - строка номера лицензии.
//			* ИмяДатаВыдачиЛицензии		- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей дату выдачи лицензии, или имя элемента формы, содержащего значение даты выдачи лицензии, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//										"П000000000005" - элемент страницы.
//			* ДатаВыдачиЛицензии 		- Дата - дата выдачи лицензии.
//			* ИмяДатаОкончанияЛицензии	- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей дату окончания лицензии, или имя элемента формы, содержащего значение даты окончания лицензии, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//										"П000000000005" - элемент страницы.
//			* ДатаОкончанияЛицензии 	- Дата - дата окончания лицензии.
//			* ИмяКемВыданаЛицензия		- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей наименование органа выдачи лицензии, или имя элемента формы, например: 
//										"П000020000305_6" - имя колонки таблицы "П000020000305", строка 6
//										"П000000000005".
//			* КемВыданаЛицензия			- Строка - строка наименования органа выдачи лицензии.
//
//			* ДатаНачалаОтчета			- Дата - Необязательный. Дата начала регламентированного отчета ФСРАР.
//			* ДатаКонцаОтчета			- Дата - Необязательный. Дата окончания регламентированного отчета ФСРАР.
//			* НижняяГраницаДатыПоXSD	- Дата - Необязательный. Нижняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 01.01.1000
//			* ВерхняяГраницаДатыПоXSD	- Дата - Необязательный. Верхняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 31.12.2099
//
//			* РодительскийПадежЧьяЛицензия	- Строка - строка содержащая обозначение владельца лицензии в родительском падеже,
//										например: "производителя/импортера" или "поставщика".
//			* КодОбязателен				- Булево - Необязательный. Флаг, если Истина - при заполнении должен быть указан код деятельности.
//										По умолчанию Ложь. Имеет смысл в основном при проверке раздела Лицензии деклараций.
//			* Код				 		- Строка - обязателен при условии КодОбязателен = Истина. Код деятельности по лицензии.
//			* ИмяКод					- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей наименование органа выдачи лицензии, или имя элемента формы, например: 
//										"П000020000305_6" - имя колонки таблицы "П000020000305", строка 6
//										"П000000000005".
//			* СписокКодов				- Массив - обязателен при условии КодОбязателен = Истина. 
//										Массив возможных значений для кода деятельности.
//
//		Заполнена						- Булево. В этом параметре передается обратно признак заполнения лицензии.
//
// Возвращаемое значение:
//		Булево						Истина, если нет ошибок.
//
Функция ВернаяЛицензия(ДокументСсылка, ТаблицаСообщенийОбОшибках,
		ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийЛицензий,
		Заполнена = Неопределено, РежимОтладки = Неопределено) Экспорт

	Перем ИмяРаздела, СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый,
		ИмяТаблицы, РоссийскийРезидент, НетПроблемИННКПП, ИмяСерияЛицензии,
		СерияЛицензии, ИмяНомерЛицензии, НомерЛицензии, ИмяДатаВыдачиЛицензии,
		ДатаВыдачиЛицензии, ИмяДатаОкончанияЛицензии, ДатаОкончанияЛицензии,
		ДатаНачалаОтчета, ДатаКонцаОтчета, НижняяГраницаДатыПоXSD,
		ВерхняяГраницаДатыПоXSD, КемВыданаОбязателен, ИмяКемВыданаЛицензия,
		КемВыданаЛицензия, РодительскийПадежЧьяЛицензия, КодОбязателен, Код, ИмяКод,
		СписокКодов, СтрокаГде;

		// Проверка основных параметров.
		
	ДокументСсылкаАлкоОтчет = ПривестиДокументКСсылке(ДокументСсылка);
	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяЛицензия() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылка = ДокументСсылкаАлкоОтчет;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураСведенийЛицензий) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяЛицензия() 
				|передана СтруктураСведенийЛицензий, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяЛицензия() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийОбОшибках) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяЛицензия() 
				|передана ТаблицаСообщенийОбОшибках, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяЛицензия() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РоссийскийРезидент", "Булево", Истина, Истина, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НетПроблемИННКПП", "Булево", Истина, Истина, РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяСерияЛицензии", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СерияЛицензии", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяНомерЛицензии", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛицензии", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяДатаВыдачиЛицензии", "Строка", "", "", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаВыдачиЛицензии", "Дата", , , РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяДатаОкончанияЛицензии", "Строка", "", "", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаОкончанияЛицензии", "Дата", , , РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаНачалаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаКонцаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НижняяГраницаДатыПоXSD", "Дата", '1000.01.01 00:00.00', '1000.01.01 00:00.00', РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - максимальная дата по XSD.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВерхняяГраницаДатыПоXSD", "Дата", '2099.12.31 23:59.59', '2099.12.31 23:59.59', РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КемВыданаОбязателен", "Булево", Истина, Истина, РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяКемВыданаЛицензия", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КемВыданаЛицензия", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РодительскийПадежЧьяЛицензия", "Строка", "", "", РежимОтладки);

	// Код лицензий обязателен только для разделов Лицензий.
	// Для лицензий, указанных в строках, кода лицензии обычно нет.
	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КодОбязателен", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяКод", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "". ,
	// Может быть так же Число.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Код", "Строка", "", "", РежимОтладки);
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Код", "Число", 0, "", РежимОтладки);

	// Тип Массив, по умолчанию для незаполненного пустой массив, если не тот тип - тоже.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СписокКодов", "Массив", , , РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
		
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийЛицензий, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураСведенийЛицензий.Свойство("ИмяРаздела", ИмяРаздела);
	СтруктураСведенийЛицензий.Свойство("НомерЛиста", НомерЛиста);

	СтруктураСведенийЛицензий.Свойство("СтрокаГде", СтрокаГде);

	Если НЕ ЗначениеЗаполнено(СтрокаГде) Тогда

		СтруктураСведенийЛицензий.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийЛицензий.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийЛицензий.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	// Лицензии могут быть только у российских получателей.
	// По умолчанию считаем российским.
	СтруктураСведенийЛицензий.Свойство("РоссийскийРезидент", РоссийскийРезидент);

	СтруктураСведенийЛицензий.Свойство("НетПроблемИННКПП", НетПроблемИННКПП);
	// Если есть ошибки по ИНН/КПП нет смысла проверять лицензию, 
	// корректность ее заполнения зависит от корректности данных ИНН/КПП,
	// которые определяют, резидент РФ или нет проверяемый контрагент.
	Если НЕ НетПроблемИННКПП Тогда
		Заполнена = Ложь;
		Возврат Ложь;
	КонецЕсли;

	СтруктураСведенийЛицензий.Свойство("ИмяСерияЛицензии", ИмяСерияЛицензии);
	СтруктураСведенийЛицензий.Свойство("СерияЛицензии", СерияЛицензии);
	СтруктураСведенийЛицензий.Свойство("ИмяНомерЛицензии", ИмяНомерЛицензии);
	СтруктураСведенийЛицензий.Свойство("НомерЛицензии", НомерЛицензии);

	СтруктураСведенийЛицензий.Свойство("ИмяДатаВыдачиЛицензии", ИмяДатаВыдачиЛицензии);
	СтруктураСведенийЛицензий.Свойство("ДатаВыдачиЛицензии", ДатаВыдачиЛицензии);
	СтруктураСведенийЛицензий.Свойство("ИмяДатаОкончанияЛицензии", ИмяДатаОкончанияЛицензии);
	СтруктураСведенийЛицензий.Свойство("ДатаОкончанияЛицензии", ДатаОкончанияЛицензии);

	СтруктураСведенийЛицензий.Свойство("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийЛицензий.Свойство("ДатаКонцаОтчета", ДатаКонцаОтчета);

	Если НЕ (ТипЗнч(ДатаНачалаОтчета) = Тип("Дата")
			И ТипЗнч(ДатаКонцаОтчета) = Тип("Дата")) Тогда

		ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылка);

		Если НЕ ТипЗнч(ДатаНачалаОтчета) = Тип("Дата") Тогда
			ДатаНачалаОтчета = ДатыОтчета.ДатаНачалаОтчета;
		КонецЕсли;

		Если НЕ ТипЗнч(ДатаКонцаОтчета) = Тип("Дата") Тогда
			ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		КонецЕсли;

	КонецЕсли;

	СтруктураСведенийЛицензий.Свойство("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийЛицензий.Свойство("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	СтруктураСведенийЛицензий.Свойство("КемВыданаОбязателен", КемВыданаОбязателен);
	СтруктураСведенийЛицензий.Свойство("ИмяКемВыданаЛицензия", ИмяКемВыданаЛицензия);
	СтруктураСведенийЛицензий.Свойство("КемВыданаЛицензия", КемВыданаЛицензия);

	СтруктураСведенийЛицензий.Свойство("РодительскийПадежЧьяЛицензия", РодительскийПадежЧьяЛицензия);

	СтруктураСведенийЛицензий.Свойство("КодОбязателен", КодОбязателен);

	СтруктураСведенийЛицензий.Свойство("Код", Код);
	Код = ?(ТипЗнч(Код) = Тип("Строка"), Код, ?(ТипЗнч(Код) = Тип("Число"), Формат(Код, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0"), ""));

	СтруктураСведенийЛицензий.Свойство("ИмяКод", ИмяКод);
	СтруктураСведенийЛицензий.Свойство("СписокКодов", СписокКодов);

	ЛицензияЗаполнена = Ложь;
	КодЗаполнен = Ложь;
	ТекстОписанияОшибки = "";

	ИмяПоказателяЗаполнено = Неопределено;
	ИмяПоказателяНеЗаполнено = Неопределено;

	ЭтоСтрокаТаблицы = ЗначениеЗаполнено(НомерСтрокиСтроковый);
	ПостфиксСтроки = ?(ЭтоСтрокаТаблицы, "_" + НомерСтрокиСтроковый, "");

	ИмяПоказателяСерияЛицензии = ИмяСерияЛицензии + ПостфиксСтроки;

	ИмяПоказателяДатаВыдачиЛицензии = ИмяДатаВыдачиЛицензии + ПостфиксСтроки;
	ИмяПоказателяДатаОкончанияЛицензии = ИмяДатаОкончанияЛицензии
		+ ПостфиксСтроки;
	ИмяПоказателяКемВыданаЛицензия = ИмяКемВыданаЛицензия + ПостфиксСтроки;
	ИмяПоказателяКод = ИмяКод + ПостфиксСтроки;

	СерияНомерЛицензии = СерияЛицензии + ?(ЗначениеЗаполнено(СерияЛицензии)
		И ЗначениеЗаполнено(НомерЛицензии), ",", "") + НомерЛицензии;

	Если ЗначениеЗаполнено(Код) Тогда
		ИмяПоказателяЗаполнено = ИмяПоказателяКод;
		КодЗаполнен = Истина;
	ИначеЕсли КодОбязателен Тогда
		ИмяПоказателяНеЗаполнено = ИмяПоказателяКод;
	КонецЕсли;

	Если ЗначениеЗаполнено(СерияНомерЛицензии) Тогда
		ИмяПоказателяЗаполнено = ИмяПоказателяСерияЛицензии;
		ЛицензияЗаполнена = Истина;
	Иначе
		ИмяПоказателяНеЗаполнено = ИмяПоказателяСерияЛицензии;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаВыдачиЛицензии) Тогда
		ИмяПоказателяЗаполнено = ИмяПоказателяДатаВыдачиЛицензии;
		ЛицензияЗаполнена = Истина;
	Иначе
		ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаВыдачиЛицензии;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончанияЛицензии) Тогда
		ИмяПоказателяЗаполнено = ИмяПоказателяДатаОкончанияЛицензии;
		ЛицензияЗаполнена = Истина;
	Иначе
		ИмяПоказателяНеЗаполнено = ИмяПоказателяДатаОкончанияЛицензии;
	КонецЕсли;

	Если ЗначениеЗаполнено(КемВыданаЛицензия) Тогда
		ИмяПоказателяЗаполнено = ИмяПоказателяКемВыданаЛицензия;
		ЛицензияЗаполнена = Истина;
	ИначеЕсли КемВыданаОбязателен Тогда
		ИмяПоказателяНеЗаполнено = ИмяПоказателяКемВыданаЛицензия;
	КонецЕсли;

	Заполнена = ЛицензияЗаполнена ИЛИ КодЗаполнен;

	Если Заполнена Тогда

	// Что-то заполнено.
		Если РоссийскийРезидент Тогда

		// По умолчанию считаем лицензионной, чтобы можно было проверять лицензии в строках таблиц,
			// не только лицензии организации в разделе Лицензии.
			ЛицензионнаяДеятельность = Истина;

			// Коды.			
			Если КодОбязателен И (НЕ КодЗаполнен) Тогда

			// Не указан код деятельности.
				ТекстОписанияОшибки = СтрокаГде
					+ " не указан код(вид) деятельности по лицензии "
					+ РодительскийПадежЧьяЛицензия + "!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКод);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаДеятельностиЛицензии");

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

				// Не имеет смысла проверять дальше, поскольку заполнение полей лицензии зависит от того,
				// лицензионная деятельность или нет, что невозможно установить при незаполненном коде деятельности.
				Возврат Ложь;

			ИначеЕсли КодЗаполнен Тогда
				
				ЧислоКод = Код;
				ЛицензионнаяДеятельность = РегламентированнаяОтчетностьАЛКОКлиентСервер.КодТребуетЛицензию(ЧислоКод);

				Если СписокКодов.Найти(Код) = Неопределено Тогда

				// Код вне допустимого списка. 
					// Ручной ввод - если не было недавнего изменения списка, это ошибка.
					// Предупреждаем, но даем выгрузить.
					ТекстОписанияОшибки = СтрокаГде
						+ " указан код(вид) деятельности по лицензии "
						+ РодительскийПадежЧьяЛицензия
						+ ", который не предусмотрен текущей схемой выгрузки отчета!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКод);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "КодДеятельностиНеИзСписка");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
						СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений, СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);

					// Если код не из списка выбора, надо проверить длину.
					Если СтрДлина(Код) <> 2 Тогда

						ТекстОписанияОшибки = СтрокаГде
							+ " указан код вида деятельности по лицензии "
							+ РодительскийПадежЧьяЛицензия + " неверной длины!
							|Код должен состоять из 2-х символов, обычно цифр.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКод);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "КодДеятельностиЛицензииНе2");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
							СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

					КонецЕсли;

					// Так же есть смысл проверить, что код состоит из цифр.
					// Предупреждаем, но даем выгрузить.
					Если НЕ ВСтрокеВсеЦифры(Код) Тогда

						ТекстОписанияОшибки = СтрокаГде
							+ " указан код вида деятельности по лицензии "
							+ РодительскийПадежЧьяЛицензия
							+ ", в котором не все символы являются цифрами!
							|Формально такая ситуация допустима, но на практике коды деятельности всегда состоят из цифр.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКод);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "КодДеятельностиЛицензииНеЦифры");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
							СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений, СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если Заполнена И (ЛицензионнаяДеятельность
					ИЛИ (ДатаКонцаОтчета < '20131101')) Тогда

					// Должны быть заполнены все значимые поля Лицензии.
				Если НЕ (ИмяПоказателяНеЗаполнено = Неопределено) Тогда

					ТекстОписанияОшибки = СтрокаГде + " не все поля сведений о лицензии "
						+ РодительскийПадежЧьяЛицензия + " заполнены!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНеЗаполнено);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НетЛицензии");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
							СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

				КонецЕсли;

				// Проверка на минимальную длину Кем Выдана.
				Если КемВыданаОбязателен ИЛИ ЗначениеЗаполнено(КемВыданаЛицензия) Тогда

					Если СтрДлина(КемВыданаЛицензия) < 3 Тогда

						ТекстОписанияОшибки = СтрокаГде
							+ " в поле ""Кем выдана лицензия"" сведений о лицензии "
							+ РодительскийПадежЧьяЛицензия + ", содержится менее 3-х символов!";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКемВыданаЛицензия);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "КемВыданаЛицензияМеньше3");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
								СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);
								
					ИначеЕсли СтрДлина(КемВыданаЛицензия) > 1000 Тогда

						ТекстОписанияОшибки = СтрокаГде
							+ " в поле ""Кем выдана лицензия"" сведений о лицензии "
							+ РодительскийПадежЧьяЛицензия + ", содержится более 1000 символов!";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКемВыданаЛицензия);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "КемВыданаЛицензияБольше1000");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
								СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

					КонецЕсли;

				КонецЕсли;

				Если ЗначениеЗаполнено(СерияНомерЛицензии)
						И (СтрДлина(СерияНомерЛицензии) > 100) Тогда

					ТекстОписанияОшибки = СтрокаГде
						+ " в полях ""серия,номер лицензии"" сведений о лицензии "
						+ РодительскийПадежЧьяЛицензия + ", содержится более 100 символов!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКемВыданаЛицензия);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "СерияНомерБольше100");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
								СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

				КонецЕсли;

				// Проверяем даты.

				// Дата выдачи лицензии. 
				СтруктураСведенийДаты = Новый Структура;

				СтруктураСведенийДаты.Вставить("ИмяРаздела", ИмяРаздела);
				СтруктураСведенийДаты.Вставить("СтрокаГде", СтрокаГде);
				СтруктураСведенийДаты.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);

				СтруктураСведенийДаты.Вставить("НомерЛиста", НомерЛиста);
				СтруктураСведенийДаты.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
				СтруктураСведенийДаты.Вставить("ИмяТаблицы", ИмяТаблицы);
				СтруктураСведенийДаты.Вставить("Показатель", ИмяПоказателяДатаВыдачиЛицензии);

				СтруктураСведенийДаты.Вставить("РодПадежДатаЧего", "выдачи лицензии");

				СтруктураСведенийДаты.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
				СтруктураСведенийДаты.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

				СтруктураСведенийДаты.Вставить("ТипДаты", "ДатаНачалаДействияЛицензии");

				СтруктураСведенийДаты.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
				СтруктураСведенийДаты.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

				СтруктураСведенийДаты.Вставить("Обязательный", Истина);
				
				СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок);
				СтруктураСведенийДаты.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);
				СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийДаты.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);
	
				ПроверкаДатыВыдачиПройдена = ВернаяДата(ДокументСсылка, ТаблицаСообщенийОбОшибках, ТаблицаСообщенийДляСведения, СтатусПроверки, ДатаВыдачиЛицензии, СтруктураСведенийДаты, РежимОтладки);

				СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок);
				СтруктураСведенийДаты.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);
				СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийДаты.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);
			
			
				// Дата окончания лицензии. 
				СтруктураСведенийДаты = Новый Структура;

				СтруктураСведенийДаты.Вставить("ИмяРаздела", ИмяРаздела);
				СтруктураСведенийДаты.Вставить("СтрокаГде", СтрокаГде);
				СтруктураСведенийДаты.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);

				СтруктураСведенийДаты.Вставить("НомерЛиста", НомерЛиста);
				СтруктураСведенийДаты.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
				СтруктураСведенийДаты.Вставить("ИмяТаблицы", ИмяТаблицы);
				СтруктураСведенийДаты.Вставить("Показатель", ИмяПоказателяДатаОкончанияЛицензии);

				СтруктураСведенийДаты.Вставить("РодПадежДатаЧего", "окончания лицензии");

				СтруктураСведенийДаты.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
				СтруктураСведенийДаты.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

				СтруктураСведенийДаты.Вставить("ТипДаты", "ДатаКонцаДействияЛицензии");

				СтруктураСведенийДаты.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
				СтруктураСведенийДаты.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

				СтруктураСведенийДаты.Вставить("Обязательный", Истина);

				СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок);
				СтруктураСведенийДаты.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);
				СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийДаты.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);
	
				ПроверкаДатыОкончанияПройдена = ВернаяДата(ДокументСсылка, ТаблицаСообщенийОбОшибках, ТаблицаСообщенийДляСведения, СтатусПроверки, ДатаОкончанияЛицензии, СтруктураСведенийДаты, РежимОтладки);
				
				СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок);
				СтруктураСведенийДаты.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);
				СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений);
				СтруктураСведенийДаты.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);
			
				Если ПроверкаДатыОкончанияПройдена И ПроверкаДатыВыдачиПройдена Тогда

				// Дата выдачи должна быть меньше даты окончания.
					Если ДатаОкончанияЛицензии <= ДатаВыдачиЛицензии Тогда

						ТекстОписанияОшибки = СтрокаГде
							+ " дата окончания указана предшевствующая дате выдачи в полях сведений о лицензии "
							+ РодительскийПадежЧьяЛицензия + "!";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяДатаОкончанияЛицензии);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ДатаВыдачиПозжеДатыОкончания");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
								СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

					Иначе

					// Дата начала должна быть меньше даты конца не более чем на 5 лет,
					// поскольку максимальный срок лицензии ФСРАР - 5 лет.
					// В порядке предупреждения.
						МаксимальныйСрокЛицензииФСРАР = 5;
						МинимальнаяДатаВыдачи = ДобавитьМесяц(ДатаОкончанияЛицензии, -МаксимальныйСрокЛицензииФСРАР
							* 12);

						Если МинимальнаяДатаВыдачи > ДатаВыдачиЛицензии Тогда

						// Значит лицензия выдана более чем на 5 лет, что подозрительно.
							ТекстОписанияОшибки = СтрокаГде
								+ " разница между датой окончания и датой выдачи в полях сведений о лицензии "
								+ РодительскийПадежЧьяЛицензия + ", превышает "
								+ МаксимальныйСрокЛицензииФСРАР + " лет!";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяДатаОкончанияЛицензии);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "СрокЛицензииБольше5лет");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
								СтруктураСведенийЛицензий.МаксимальноеКоличествоПредупреждений, СтруктураСведенийЛицензий.ТекущееКоличествоПредупреждений);

						КонецЕсли;

					КонецЕсли;

				Иначе
					ТекстОписанияОшибки = "Не пройдена проверка дат лицензии";
				КонецЕсли;

			ИначеЕсли ЛицензияЗаполнена И (НЕ ЛицензионнаяДеятельность) Тогда

			// Указан код, который относится к нелицензионной деятельности,
				// но что то из полей лицензии заполнено.
				ТекстОписанияОшибки = СтрокаГде
					+ " указан код(вид) деятельности по лицензии "
					+ РодительскийПадежЧьяЛицензия
					+ ", который предполагает нелицензионную деятельность,
					|т.е без лицензии, но при этом заполнены поля лицензии!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКод);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ЛицензияДляНелицензионнойДеятельности");

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
						СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

			КонецЕсли;

		Иначе

			ТекстОписанияОшибки = СтрокаГде + " заполнены сведения о лицензии для "
				+ РодительскийПадежЧьяЛицензия + ", который не является резидентом РФ!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяЗаполнено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеНужнаЛицензия");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийЛицензий.МаксимальноеКоличествоОшибок, СтруктураСведенийЛицензий.ТекущееКоличествоОшибок);

		КонецЕсли;

	КонецЕсли;

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

Функция ВернаяНакладная(ДокументСсылка, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийНакладной,
		ТипНакладной = "ТТН", Заполнена = Неопределено,
		РежимОтладки = Неопределено) Экспорт

	Перем ИмяРаздела, НомерЛиста, СтрокаГде, СтрВКакомРазделе,
		НомерСтрокиСтроковый, ИмяТаблицы, ИмяДатыТТН, ДатаТТН, ИмяНомерТТН,
		НомерТТН, ИмяНомерГТД, НомерГТД, ИмяОбъемПоТТН, ОбъемПоТТН,
		ДатаНачалаОтчета, ДатаКонцаОтчета, НижняяГраницаДатыПоXSD,
		ВерхняяГраницаДатыПоXSD, Обязательный, 
		НомерГТДОбязателен, НомерТТНОбязателен, ДатаТТНОбязательна, ОбъемТТНОбязателен,
		НомерГТДилиНомерТТНОбязателен,
		МаксДлинаНомерТТН, МаксДлинаНомерГТД;

		// Проверка основных параметров.
	ДокументСсылкаАлкоОтчет = ПривестиДокументКСсылке(ДокументСсылка);
	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяНакладная() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылка = ДокументСсылкаАлкоОтчет;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураСведенийНакладной) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяНакладная() 
				|передана СтруктураСведенийНакладной, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяНакладная() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяНакладная() 
				|передана ТаблицаСообщений, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяНакладная() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяДатыТТН", "Строка", "", "", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаТТН", "Дата", , , РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяНомерТТН", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерТТН", "Строка", "", "", РежимОтладки);
	
	// Тип Число, по умолчанию для незаполненного 50, если не тот тип - 50.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксДлинаНомерТТН", "Число", 50, 50, РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 50, если не тот тип - 50.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксДлинаНомерГТД", "Число", 50, 50, РежимОтладки);
	
	
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерТТНОбязателен", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаТТНОбязательна", "Булево", Истина, Истина, РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ОбъемТТНОбязателен", "Булево", Истина, Истина, РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерГТДилиНомерТТНОбязателен", "Булево", Истина, Истина, РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяНомерГТД", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерГТД", "Строка", "", "", РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерГТДОбязателен", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяОбъемПоТТН", "Строка", "", "", РежимОтладки);
	// Тип число, по умолчанию для незаполненного 0, если не тот тип - тоже 0.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ОбъемПоТТН", "Число", 0, 0, РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаНачалаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаКонцаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НижняяГраницаДатыПоXSD", "Дата", '1000.01.01 00:00.00', '1000.01.01 00:00.00', РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - максимальная дата по XSD.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВерхняяГраницаДатыПоXSD", "Дата", '2099.12.31 23:59.59', '2099.12.31 23:59.59', РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Обязательный", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
		
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийНакладной, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураСведенийНакладной.Свойство("ИмяРаздела", ИмяРаздела);
	СтруктураСведенийНакладной.Свойство("НомерЛиста", НомерЛиста);

	СтруктураСведенийНакладной.Свойство("СтрокаГде", СтрокаГде);

	Если НЕ ЗначениеЗаполнено(СтрокаГде) Тогда

		СтруктураСведенийНакладной.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийНакладной.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийНакладной.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	СтруктураСведенийНакладной.Свойство("ИмяДатыТТН", ИмяДатыТТН);
	СтруктураСведенийНакладной.Свойство("ДатаТТН", ДатаТТН);
	СтруктураСведенийНакладной.Свойство("ДатаТТНОбязательна", ДатаТТНОбязательна);
	
	СтруктураСведенийНакладной.Свойство("ИмяНомерТТН", ИмяНомерТТН);
	СтруктураСведенийНакладной.Свойство("НомерТТН", НомерТТН);
	СтруктураСведенийНакладной.Свойство("НомерТТНОбязателен", НомерТТНОбязателен);
	СтруктураСведенийНакладной.Свойство("МаксДлинаНомерТТН", МаксДлинаНомерТТН);
	
	СтруктураСведенийНакладной.Свойство("ИмяНомерГТД", ИмяНомерГТД);
	СтруктураСведенийНакладной.Свойство("НомерГТД", НомерГТД);
	СтруктураСведенийНакладной.Свойство("НомерГТДОбязателен", НомерГТДОбязателен);
	СтруктураСведенийНакладной.Свойство("МаксДлинаНомерГТД", МаксДлинаНомерГТД);

	СтруктураСведенийНакладной.Свойство("ИмяОбъемПоТТН", ИмяОбъемПоТТН);
	СтруктураСведенийНакладной.Свойство("ОбъемПоТТН", ОбъемПоТТН);
	СтруктураСведенийНакладной.Свойство("ОбъемТТНОбязателен", ОбъемТТНОбязателен);
	
	СтруктураСведенийНакладной.Свойство("НомерГТДилиНомерТТНОбязателен", НомерГТДилиНомерТТНОбязателен);

	СтруктураСведенийНакладной.Свойство("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийНакладной.Свойство("ДатаКонцаОтчета", ДатаКонцаОтчета);

	Если НЕ (ТипЗнч(ДатаНачалаОтчета) = Тип("Дата")
			И ТипЗнч(ДатаКонцаОтчета) = Тип("Дата")) Тогда

		ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылка);

		Если НЕ ТипЗнч(ДатаНачалаОтчета) = Тип("Дата") Тогда
			ДатаНачалаОтчета = ДатыОтчета.ДатаНачалаОтчета;
		КонецЕсли;

		Если НЕ ТипЗнч(ДатаКонцаОтчета) = Тип("Дата") Тогда
			ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		КонецЕсли;

	КонецЕсли;

	СтруктураСведенийНакладной.Свойство("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийНакладной.Свойство("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	СтруктураСведенийНакладной.Свойство("Обязательный", Обязательный);

	Если НЕ ((ТипЗнч(ТипНакладной) = Тип("Строка")) И (ТипНакладной = "ТТН"
			ИЛИ ТипНакладной = "Уведомление")) Тогда
		ТипНакладной = "ТТН";
	КонецЕсли;

	СтрТипНакладнойЧего = ?(ТипНакладной = "ТТН", "накладной", "уведомления");

	ТипДаты = ?(ТипНакладной = "ТТН", "ДатаНакладной", "ДатаУведомления");

	ИмяПоказателяНеЗаполнено = Неопределено;
	СтрНезаполненныеПоля = "";
	Заполнена = Ложь;

	// Сначала проверяем заполнение.					
	Если ЗначениеЗаполнено(ДатаТТН) Тогда

		Заполнена = Истина;
	ИначеЕсли ДатаТТНОбязательна Тогда
		ИмяПоказателяНеЗаполнено = ИмяДатыТТН;
		СтрНезаполненныеПоля = СтрНезаполненныеПоля + """Дата"", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТТН) Тогда
		Заполнена = Истина;
	ИначеЕсли НомерТТНОбязателен Тогда
		ИмяПоказателяНеЗаполнено = ИмяНомерТТН;
		СтрНезаполненныеПоля = СтрНезаполненныеПоля + """Номер"", "
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		Заполнена = Истина;
	ИначеЕсли НомерГТДОбязателен Тогда
		ИмяПоказателяНеЗаполнено = ИмяНомерГТД;
		СтрНезаполненныеПоля = СтрНезаполненныеПоля + """Номер ГТД"", "
	КонецЕсли;
	
	
	Если НомерГТДилиНомерТТНОбязателен И (НЕ (НомерТТНОбязателен ИЛИ НомерГТДОбязателен)) Тогда
		
		// Оба номера необязательны, но хотя бы один должен быть.
		Если ЗначениеЗаполнено(НомерТТН + НомерГТД) Тогда

			Заполнена = Истина;
		Иначе
			ИмяПоказателяНеЗаполнено = ИмяНомерТТН;
			СтрНезаполненныеПоля = СтрНезаполненныеПоля + """Номер"" или ""Номер ГТД"", ";
		КонецЕсли;	
	
	КонецЕсли; 
	

	Если ЗначениеЗаполнено(ОбъемПоТТН) Тогда

		Заполнена = Истина;
	ИначеЕсли ОбъемТТНОбязателен Тогда
		ИмяПоказателяНеЗаполнено = ИмяОбъемПоТТН;
		СтрНезаполненныеПоля = СтрНезаполненныеПоля + """Объем (количество)"", ";
	КонецЕсли;

	СтрНезаполненныеПоля = СокрЛП(СтрНезаполненныеПоля);
	Если ЗначениеЗаполнено(СтрНезаполненныеПоля) Тогда
	// Убираем последнюю запятую.
		СтрНезаполненныеПоля = Лев(СтрНезаполненныеПоля, СтрДлина(СтрНезаполненныеПоля)
			- 1);
	КонецЕсли;
	
	Если НЕ Заполнена Тогда

		Если Обязательный Тогда

			ТекстОписанияОшибки = СтрокаГде + " не заполнены поля "
				+ СтрТипНакладнойЧего + "!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяДатыТТН);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеЗаполненаТТН");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок, СтруктураСведенийНакладной.ТекущееКоличествоОшибок);

		КонецЕсли;

		Возврат (ТекстОписанияОшибки = "");

	КонецЕсли;

	// Должны быть заполнены все значимые поля ТТН.
	Если НЕ (ИмяПоказателяНеЗаполнено = Неопределено) Тогда

		ТекстОписанияОшибки = СтрокаГде + " не заполнены обязательные поля "
			+ СтрТипНакладнойЧего + ":
			|" + СтрНезаполненныеПоля + ".";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНеЗаполнено);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеЗаполненаТТН");

		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок, СтруктураСведенийНакладной.ТекущееКоличествоОшибок);
	КонецЕсли;

	// Проверка на максимальную длину номера.
	Если ЗначениеЗаполнено(НомерТТН) Тогда

		Если СтрДлина(НомерТТН) > МаксДлинаНомерТТН Тогда

			ТекстОписанияОшибки = СтрокаГде + " в номере " + СтрТипНакладнойЧего
				+ " содержится более " + МаксДлинаНомерТТН + " символов!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяНомерТТН);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НомерТТНбольше50");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок, СтруктураСведенийНакладной.ТекущееКоличествоОшибок);

		КонецЕсли;

	КонецЕсли;

	// Проверка на максимальную длину номера ГТД.
	Если ЗначениеЗаполнено(НомерГТД) Тогда

		Если СтрДлина(НомерГТД) > МаксДлинаНомерГТД Тогда

			ТекстОписанияОшибки = СтрокаГде + " в номере ГТД " + СтрТипНакладнойЧего
				+ " содержится более " + МаксДлинаНомерГТД + " символов!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяНомерГТД);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НомерТТНбольше50");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок, СтруктураСведенийНакладной.ТекущееКоличествоОшибок);

		КонецЕсли;

	КонецЕсли;

	// Проверяем дату накладной.
	СтруктураСведенийДаты = Новый Структура;

	СтруктураСведенийДаты.Вставить("ИмяРаздела", ИмяРаздела);
	СтруктураСведенийДаты.Вставить("СтрокаГде", СтрокаГде);
	СтруктураСведенийДаты.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);

	СтруктураСведенийДаты.Вставить("НомерЛиста", НомерЛиста);
	СтруктураСведенийДаты.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
	СтруктураСведенийДаты.Вставить("ИмяТаблицы", ИмяТаблицы);
	СтруктураСведенийДаты.Вставить("Показатель", ИмяДатыТТН);

	СтруктураСведенийДаты.Вставить("РодПадежДатаЧего", СтрТипНакладнойЧего);

	СтруктураСведенийДаты.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийДаты.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

	ТипДаты = ?(ТипНакладной = "ТТН", "ДатаНакладной", "ДатаУведомления");
	СтруктураСведенийДаты.Вставить("ТипДаты", ТипДаты);

	СтруктураСведенийДаты.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийДаты.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	СтруктураСведенийДаты.Вставить("Обязательный", Истина);
	
	СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок);
	СтруктураСведенийДаты.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийНакладной.ТекущееКоличествоОшибок);
	СтруктураСведенийДаты.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийНакладной.МаксимальноеКоличествоПредупреждений);
	СтруктураСведенийДаты.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийНакладной.ТекущееКоличествоПредупреждений);
	
	ПроверкаДатыПройдена = ВернаяДата(ДокументСсылка, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, ДатаТТН, СтруктураСведенийДаты, РежимОтладки);

	СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок);
	СтруктураСведенийДаты.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийНакладной.ТекущееКоличествоОшибок);
	СтруктураСведенийДаты.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийНакладной.МаксимальноеКоличествоПредупреждений);
	СтруктураСведенийДаты.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийНакладной.ТекущееКоличествоПредупреждений);
	
	Если НЕ ПроверкаДатыПройдена Тогда
		ТекстОписанияОшибки = "Ошибка в дате ТТН.";
	КонецЕсли;

	// Проверка на отсутствие отрицательных чисел.
	
	Если ОбъемПоТТН < 0 Тогда

		ТекстОписанияОшибки = СтрокаГде + " в графе ""Объем"" (Количество) "
			+ СтрТипНакладнойЧего + " указано не положительное значение!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", ИмяОбъемПоТТН);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ОтрицательныйОбъемПоТТН");

		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийНакладной.МаксимальноеКоличествоОшибок, СтруктураСведенийНакладной.ТекущееКоличествоОшибок);

	КонецЕсли;
		

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Проверяет заполнение Обособленных Подразделений на страницах отчетов сдаваемых в ФСРАР, при обнаружении
// ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщений			- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураСведенийПроверки	- Структура - структура содержащая настройки проверки.
//			* ПараметрыВыгрузки			- Структура содержащая параметры выгрузки отчета.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//			* СтрВКакомРазделе			- Строка - строка вида "В разделе Раздел 1"
//			* НомерЛиста                - Число  - номер листа многостраничного раздела.
//			* ЛистРаздела				- СписокЗначений - Содержит данные по листу раздела, получаемые из 
//										реквизита формы таблицы Форма["ТаблицаСтраницы" + <ИмяРаздела>].
//			* КПП_НеОбязателен			- Булево - Необязательный. Флаг, если Истина - КПП может быть не заполнен.
//			* ПроверятьНаПустоту		- Булево - Необязательный. Флаг, если Истина - незаполненные данные по ОП
//										считаются ошибкой. 
//		СведенияОбОП				- Необязательный. Передаваться в процедуру может любое значение,
//									но при возврате из процедуры в этом параметре будет содержаться структура,
//									поля которой совпадают со структурой, получаемой из функции ПолучитьПустуюСтруктуруСведенийОбОП().
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерноеЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийПроверки,
		СведенияОбОП = Неопределено, РежимОтладки = Неопределено, 
		СоответствиеКешАдресов = Неопределено) Экспорт

	Перем ИмяРаздела, ЛистРаздела, СтрВКакомРазделе, НомерЛиста,
		ОписаниеСтруктурыАдресаИзОтчета, ПроверятьНаПустоту, ПараметрыВыгрузки;

		// Проверка основных параметров.
		
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураСведенийПроверки) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП() 
				|передана СтруктураСведенийПроверки, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП() 
				|передана ТаблицаСообщений, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип Структура, по умолчанию для незаполненного пустая структура, если не тот тип - тоже.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ПараметрыВыгрузки", "Структура", , , РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ЛистРаздела", "СтрокаТаблицыЗначений", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ПроверятьНаПустоту", "Булево", Истина, Истина, РежимОтладки);
	// Тип Структура, по умолчанию для незаполненного Неопределено, если не тот тип - тоже Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ОписаниеСтруктурыАдресаИзОтчета", "Структура", "Неопределено", "Неопределено", РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийПроверки, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураСведенийПроверки.Свойство("ПараметрыВыгрузки", ПараметрыВыгрузки);
	СтруктураСведенийПроверки.Свойство("ИмяРаздела", ИмяРаздела);
	СтруктураСведенийПроверки.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
	СтруктураСведенийПроверки.Свойство("НомерЛиста", НомерЛиста);
	СтруктураСведенийПроверки.Свойство("ЛистРаздела", ЛистРаздела);

	СтруктураСведенийПроверки.Свойство("ПроверятьНаПустоту", ПроверятьНаПустоту);

	СтруктураСведенийПроверки.Свойство("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

	ДанныеЛиста = ЛистРаздела.Данные[0].Значение;

	ДанныеОП = ДанныеЛиста.ОбособленноеПодразделение;
	ТекстОписанияОшибки = "";

	СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

	Если (ПустаяСтрока(ДанныеОП) ИЛИ (СокрЛП(ДанныеОП) = "Заполнить"))
			И ПроверятьНаПустоту Тогда

		ТекстОписанияОшибки = СтрокаГде
			+ " не указаны реквизиты обособленного подразделения!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхОП");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок, СтруктураСведенийПроверки.ТекущееКоличествоОшибок);

	ИначеЕсли НЕ (ПустаяСтрока(ДанныеОП)
			ИЛИ (СокрЛП(ДанныеОП) = "Заполнить")) Тогда

		СведенияОбОП = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда

				ИНН_ОП = СокрЛП(ПараметрыВыгрузки.ИННФЛ);
				КПП_ДолженБытьПуст = Истина;
				РоссийскийТолькоЮЛ = Ложь;
				РоссийскийТолькоФЛ = Истина;

			Иначе

				ИНН_ОП = СокрЛП(ПараметрыВыгрузки.ИННЮЛ);
				КПП_ДолженБытьПуст = Ложь;
				РоссийскийТолькоЮЛ = Истина;
				РоссийскийТолькоФЛ = Ложь;

			КонецЕсли;

			КПП_ОП = СокрЛП(СведенияОбОП.КПП);
			НаименованиеОП = СведенияОбОП.Наименование;
			ПоказательОП = "ОбособленноеПодразделение";

			СтруктураСведенийИННКПП = Новый Структура;

			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", Неопределено);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", Неопределено);

			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", ПоказательОП);
			СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеОП);

			СтруктураСведенийИННКПП.Вставить("КонтрольОП", Истина);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", ПоказательОП);
			СтруктураСведенийИННКПП.Вставить("ИНН", ИНН_ОП);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", ПоказательОП);
			СтруктураСведенийИННКПП.Вставить("КПП", КПП_ОП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", "обособленного подразделения");

			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", Ложь);
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", КПП_ДолженБытьПуст);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
			СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);

			СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", Ложь);

			СтруктураСведенийИННКПП.Вставить("ИННLiteТип", Ложь);
			СтруктураСведенийИННКПП.Вставить("КППLiteТип", Ложь);
			
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийПроверки.ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийПроверки.МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийПроверки.ТекущееКоличествоПредупреждений);
			
			СтруктураСведенийИННКПП.Вставить("КодСтраны", "643"); // ОП может быть только резиднетом РФ.
			СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", Ложь);
			СтруктураСведенийИННКПП.Вставить("ТолькоРФ", Истина); // ОП может быть только резиднетом РФ.
			СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", Неопределено); 	// По умолчанию 20.
			СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", Неопределено);		// По умолчанию 1.

			РоссийскийРезидент = Истина;

			ПроверкаПройдена = ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийРезидент, РежимОтладки);

			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийПроверки.ТекущееКоличествоОшибок);
			СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийПроверки.МаксимальноеКоличествоПредупреждений);
			СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийПроверки.ТекущееКоличествоПредупреждений);

			Если НЕ ПроверкаПройдена Тогда
				ТекстОписанияОшибки = "Ошибка в Наименовании-ИНН-КПП ОП.";
			КонецЕсли;

			// Проверяем адрес ОП.
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", ПоказательОП);

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", Неопределено);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", Неопределено);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", "обособленного подразделения");

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Истина);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", Истина);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", Ложь);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", Ложь);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", Ложь);
			
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", СтруктураСведенийПроверки.ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураСведенийПроверки.МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", СтруктураСведенийПроверки.ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения,
												СтатусПроверки, СведенияОбОП, ВспомогательнаяСтруктураДанных, РежимОтладки, СоответствиеКешАдресов);

			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоОшибок", СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", СтруктураСведенийПроверки.ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураСведенийПроверки.МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", СтруктураСведенийПроверки.ТекущееКоличествоПредупреждений);

			Если НЕ ПроверкаАдресаПройдена Тогда
			// Гарантируем что ТекстОписанияОшибки не окажется пустым.					
				ТекстОписанияОшибки = "Ошибка в адресе ОП";
			КонецЕсли;

		Иначе

			Если ПроверятьНаПустоту Тогда

				ТекстОписанияОшибки = СтрокаГде
					+ " нарушена внутренняя структура реквизитов обособленного подразделения, 
					|требуется повторный ввод данных!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НарушенаСтруктураРеквизитовОП");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураСведенийПроверки.МаксимальноеКоличествоОшибок, СтруктураСведенийПроверки.ТекущееКоличествоОшибок);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Проверяет заполнение Титульного листа отчетов сдаваемых в ФСРАР, при обнаружении
// ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщений			- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		ПараметрыВыгрузки			- Структура - структура содержащая настройки проверки.
//									Возвращается функцией СформироватьСтруктуруПоказателейИСтруктуруПараметровАЛКО().
//		КПП56СимволыМогутБытьБуквами- Булево - Необязательный. Признак, могут ли 5 и 6 символы КПП быть не цифрами.
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерноеЗаполнениеТитульный(ДокументСсылкаАлкоОтчет, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, ПараметрыВыгрузки,
		СтруктураПараметров, РежимОтладки = Неопределено, СоответствиеКешАдресов = Неопределено) Экспорт

	Перем 	ПроверятьЗаполнениеДиректора, ПроверятьЗаполнениеГлБухгалтера,
			ПроверятьЗаполнениеТелефона, ПроверятьЗаполнениеEmail,
			ПроверятьЗаполнениеАдресаОрг, ПроверятьЗаполнениеАдресаМестаДеятельности;
	
	// Проверка основных параметров.
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(ПараметрыВыгрузки) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана ПараметрыВыгрузки, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана ТаблицаСообщений, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный() 
				|передана СтруктураПараметров, не являющаяся Структурой!";
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеДиректора", ПроверятьЗаполнениеДиректора);
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеГлБухгалтера", ПроверятьЗаполнениеГлБухгалтера);
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеАдресаОрг", ПроверятьЗаполнениеАдресаОрг);
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеАдресаМестаДеятельности", ПроверятьЗаполнениеАдресаМестаДеятельности);
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеТелефона", ПроверятьЗаполнениеТелефона);
	СтруктураПараметров.Свойство("ПроверятьЗаполнениеEmail", ПроверятьЗаполнениеEmail);
	
	// По умолчанию все проверяем.
	ПроверятьЗаполнениеДиректора 	= ?(ТипЗнч(ПроверятьЗаполнениеДиректора) = Тип("Булево"), ПроверятьЗаполнениеДиректора, Истина);
	ПроверятьЗаполнениеГлБухгалтера = ?(ТипЗнч(ПроверятьЗаполнениеГлБухгалтера) = Тип("Булево"), ПроверятьЗаполнениеГлБухгалтера, Истина);
	ПроверятьЗаполнениеАдресаОрг 	= ?(ТипЗнч(ПроверятьЗаполнениеАдресаОрг) = Тип("Булево"), ПроверятьЗаполнениеАдресаОрг, Истина);
	ПроверятьЗаполнениеАдресаМестаДеятельности
									= ?(ТипЗнч(ПроверятьЗаполнениеАдресаМестаДеятельности) = Тип("Булево"), ПроверятьЗаполнениеАдресаМестаДеятельности, Истина);
	ПроверятьЗаполнениеТелефона 	= ?(ТипЗнч(ПроверятьЗаполнениеТелефона) = Тип("Булево"), ПроверятьЗаполнениеТелефона, Истина);
	ПроверятьЗаполнениеEmail 		= ?(ТипЗнч(ПроверятьЗаполнениеEmail) = Тип("Булево"), ПроверятьЗаполнениеEmail, Истина);

	ТекстОписанияОшибки = "";

	ИмяРаздела = "Титульный";
	СтрВКакомРазделе = "На Титульном листе декларации";
	НомерЛиста = Неопределено;
	НомерСтрокиСтроковый = Неопределено;
	ИмяТаблицы = Неопределено;

	СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);
	
			
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		
		Если ПроверятьЗаполнениеДиректора Тогда
		
			УказаныФИО = 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия))
						И 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя));
				
			Если НЕ УказаныФИО Тогда
				ТекстОписанияОшибки = СтрокаГде
					+ " не указаны фамилия, имя и отчество индивидуального предпринимателя!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "Организация");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанФИОПредпринимателяДекларант");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);

			КонецЕсли;	
		
		КонецЕсли; 
		

		ИННФЛ = СокрЛП(ПараметрыВыгрузки.ИННФЛ);
		НаименованиеФЛ = СокрЛП(ПараметрыВыгрузки.НаимЮЛ);

		СтруктураСведенийИННКПП = Новый Структура;

		СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
		СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", "Организация");
		СтруктураСведенийИННКПП.Вставить("Наименование", НаименованиеФЛ);

		СтруктураСведенийИННКПП.Вставить("КонтрольОП", Ложь);
		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", "Организация");
		СтруктураСведенийИННКПП.Вставить("ИНН", ИННФЛ);
		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", "Организация");
		СтруктураСведенийИННКПП.Вставить("КПП", "");
		СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", "индивидуального предпринимателя");

		СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", Ложь);
		СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", Истина);
		СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", Ложь);
		СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", Истина);

		СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", Ложь);

		СтруктураСведенийИННКПП.Вставить("ИННLiteТип", Ложь);
		СтруктураСведенийИННКПП.Вставить("КППLiteТип", Ложь);
		
		СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

		СтруктураСведенийИННКПП.Вставить("КодСтраны", "643"); // Декларант может быть только резиднетом РФ.
		СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", Ложь);
		СтруктураСведенийИННКПП.Вставить("ТолькоРФ", Истина); // Декларант может быть только резиднетом РФ.
		СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", Неопределено); 	// По умолчанию 20.
		СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", Неопределено);		// По умолчанию 1.
			
		ПроверкаПройдена = ВерныеНаименованиеИННКПП(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
							СтатусПроверки, СтруктураСведенийИННКПП, Истина, РежимОтладки);
							
		СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);					

		Если НЕ ПроверкаПройдена Тогда
			ТекстОписанияОшибки = "Ошибка в Наименовании-ИНН-КПП";
		КонецЕсли;

	Иначе

		Если ПроверятьЗаполнениеДиректора Тогда
		
			УказаныФИО = 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительФамилия))
						И 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.РуководительИмя));
			Если НЕ УказаныФИО Тогда
				ТекстОписанияОшибки = СтрокаГде
					+ " не указаны фамилия, имя и отчество (при наличии) руководителя организации!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "Организация");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанФИОРуководителяДекларант");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);

			КонецЕсли;	
		
		КонецЕсли; 
		
		Если ПроверятьЗаполнениеГлБухгалтера Тогда
		
			УказаныФИО = 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухФамилия))
						И 	(НЕ ПустаяСтрока(ПараметрыВыгрузки.ГлавбухИмя));
			Если НЕ УказаныФИО Тогда
				
				ТекстОписанияОшибки = СтрокаГде
					+ " не указаны фамилия, имя и отчество (при наличии) главного бухгалтера!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "Организация");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанФИОГлБухДекларант");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);

			КонецЕсли;	
		
		КонецЕсли; 
		
		ИНН = СокрЛП(ПараметрыВыгрузки.ИННЮЛ);
		КПП = СокрЛП(ПараметрыВыгрузки.КППЮЛ);
		Наименование = СокрЛП(ПараметрыВыгрузки.НаимЮЛ);

		СтруктураСведенийИННКПП = Новый Структура;

		СтруктураСведенийИННКПП.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийИННКПП.Вставить("СтрокаГде", СтрокаГде);
		СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийИННКПП.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", ИмяТаблицы);

		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяНаименования", "Организация");
		СтруктураСведенийИННКПП.Вставить("Наименование", Наименование);

		СтруктураСведенийИННКПП.Вставить("КонтрольОП", Ложь);
		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", "Организация");
		СтруктураСведенийИННКПП.Вставить("ИНН", ИНН);
		СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", "Организация");
		СтруктураСведенийИННКПП.Вставить("КПП", КПП);
		СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", "организации");

		СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", Ложь);
		СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", Ложь);
		СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоЮЛ", Истина);
		СтруктураСведенийИННКПП.Вставить("РоссийскийТолькоФЛ", Ложь);

		СтруктураСведенийИННКПП.Вставить("КПП56СимволыМогутБытьБуквами", Ложь);

		СтруктураСведенийИННКПП.Вставить("ИННLiteТип", Ложь);
		СтруктураСведенийИННКПП.Вставить("КППLiteТип", Ложь);
		
		СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		СтруктураСведенийИННКПП.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийИННКПП.Вставить("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

		СтруктураСведенийИННКПП.Вставить("КодСтраны", "643"); // Декларант может быть только резиднетом РФ.
		СтруктураСведенийИННКПП.Вставить("ТолькоЕАЭС", Ложь);
		СтруктураСведенийИННКПП.Вставить("ТолькоРФ", Истина); // Декларант может быть только резиднетом РФ.
		СтруктураСведенийИННКПП.Вставить("МаксДлинаИННпоXSD", Неопределено); 	// По умолчанию 20.
		СтруктураСведенийИННКПП.Вставить("МинДлинаИННпоXSD", Неопределено);		// По умолчанию 1.
			
		ПроверкаПройдена = ВерныеНаименованиеИННКПП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП, Истина, РежимОтладки);
							
		СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		СтруктураСведенийИННКПП.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийИННКПП.Свойство("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);					

		Если НЕ ПроверкаПройдена Тогда
			ТекстОписанияОшибки = "Ошибка в Наименовании-ИНН-КПП";
		КонецЕсли;

	КонецЕсли;

	// Проверяем адрес организации.
	
	Если ПроверятьЗаполнениеАдресаОрг Тогда
	
		ВспомогательнаяСтруктураДанных = Новый Структура;

		ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
		ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
		ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		ВспомогательнаяСтруктураДанных.Вставить("Показатель", "Организация");

		// Поля, заполненны только при проверке строчных и многостраничных разделов.
		ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
		ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
		ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", "организации");

		ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", СтруктураПараметров.ОписаниеСтруктурыАдресаИзОтчета);

		ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Истина);
		ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", Истина);
		ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", Ложь);
		ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", Ложь);
		ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", Ложь);
			
		ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

		ПроверкаАдресаПройдена = ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
											СтатусПроверки, ПараметрыВыгрузки.АдресОрганизации, ВспомогательнаяСтруктураДанных, 
											РежимОтладки, СоответствиеКешАдресов);
		
		ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
		ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
		ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
		ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

		Если НЕ ПроверкаАдресаПройдена Тогда
		// Гарантируем что ТекстОписанияОшибки не окажется пустым.					
			ТекстОписанияОшибки = "Ошибка в адресе";
		КонецЕсли;	
	
	КонецЕсли; 
		

	// Проверяем адрес места деятельности.
	
	Если ПроверятьЗаполнениеАдресаМестаДеятельности Тогда
	
		Если ПараметрыВыгрузки.Свойство("АдресМестаДеятельности") Тогда
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", "МестоОсуществленияДеятельности");

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", "места осуществления деятельности");

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", СтруктураПараметров.ОписаниеСтруктурыАдресаИзОтчета);

			// Адрес места деятельности не является обязательным, проверка будет осуществлена только при его заполнении.
			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Ложь);

			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", Истина);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", Ложь);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", Ложь);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", Ложь);
				
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
												СтатусПроверки, ПараметрыВыгрузки.АдресМестаДеятельности, ВспомогательнаяСтруктураДанных, 
												РежимОтладки, СоответствиеКешАдресов);
			
			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоОшибок", СтруктураПараметров.МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", СтруктураПараметров.ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("МаксимальноеКоличествоПредупреждений", СтруктураПараметров.МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", СтруктураПараметров.ТекущееКоличествоПредупреждений);

			Если НЕ ПроверкаАдресаПройдена Тогда
			// Гарантируем что ТекстОписанияОшибки не окажется пустым.					
				ТекстОписанияОшибки = "Ошибка в адресе";
			КонецЕсли;

		КонецЕсли;	
	
	КонецЕсли; 
	
	// Телефон.
	
	Если ПроверятьЗаполнениеТелефона Тогда
	
		Если ПустаяСтрока(ПараметрыВыгрузки.ТелОрг) Тогда
			
			ТекстОписанияОшибки = СтрокаГде
				+ " в данных организации не указан телефон организации!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", "Организация");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеУказанТелефонДекларант");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
									СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);
		КонецЕсли;	
	
	КонецЕсли; 
	

	// Email.
	
	Если ПроверятьЗаполнениеEmail Тогда
	
		Если ПустаяСтрока(ПараметрыВыгрузки.EmailОтпр) Тогда
			
			ТекстОписанияОшибки = СтрокаГде
				+ " в данных организации не указан Email организации!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", "ЭлектронныйАдресОрганизации");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеУказанEmailДекларант");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
									СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);
		Иначе
			
			ПравильныйАдрес = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПараметрыВыгрузки.EmailОтпр);
			Если НЕ ПравильныйАдрес Тогда

				ТекстОписанияОшибки = СтрокаГде
					+ " в данных организации указан неверный Email организации!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", "ЭлектронныйАдресОрганизации");
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеВерныйEmailДекларант");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураПараметров.МаксимальноеКоличествоОшибок, СтруктураПараметров.ТекущееКоличествоОшибок);

			КонецЕсли;

		КонецЕсли;	
	
	КонецЕсли; 
	

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Проверяет заполнение различных кодов в строках таблиц деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		Код							- Строка - проверяемый код продукции.
//		СтруктураИнформацииВидаПродукции	- Структура - структура информации о виде продукции.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//			* ИмяПоказателя				- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей код продукции, например: 
//										"П000020000302_5" - имя колонки таблицы "П000020000302", строка 5.
//			* НомерЛиста                - Число  - Номер листа многостраничного раздела.
//			* СписокКодов				- Массив - Массив возможных значений для кода вида продукции.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерныйКод(ДокументСсылка, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, Код,
		СтруктураИнформацииВидаПродукции, РежимОтладки = Неопределено) Экспорт

	Перем ИмяПоказателя, ИмяРаздела, НомерЛиста, СписокКодов, СтрокаГде,
		СтрВКакомРазделе, РодПадежКодЧего, НомерСтрокиСтроковый, ИмяТаблицы,
		КонтрольДлиныКода, КонтрольНаЦифры, ДлинаКода;

		// Проверка основных параметров.
	ДокументСсылкаАлкоОтчет = ПривестиДокументКСсылке(ДокументСсылка);
	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйКод() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылка = ДокументСсылкаАлкоОтчет;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураИнформацииВидаПродукции) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйКод() 
				|передана СтруктураИнформацииВидаПродукции, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйКод() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйКод() 
				|передана ТаблицаСообщений, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйКод() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяПоказателя", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "вида продукции", если не тот тип - тоже "вида продукции".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РодПадежКодЧего", "Строка", "вида продукции", "вида продукции", РежимОтладки);
	
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);

	// Тип Булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КонтрольДлиныКода", "Булево", Истина, Истина, РежимОтладки);
	// Тип Булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КонтрольНаЦифры", "Булево", Истина, Истина, РежимОтладки);
	
	// Тип Число, по умолчанию для незаполненного 3, если не тот тип - 3.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДлинаКода", "Число", 3, 3, РежимОтладки);
	
	// Тип Массив, по умолчанию для незаполненного пустой массив, если не тот тип - тоже пустой массив.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СписокКодов", "Массив", , , РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
		
	ПравильныеПараметрыВСтруктуре(СтруктураИнформацииВидаПродукции, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураИнформацииВидаПродукции.Свойство("ИмяПоказателя", ИмяПоказателя);
	СтруктураИнформацииВидаПродукции.Свойство("ИмяРаздела", ИмяРаздела);
	СтруктураИнформацииВидаПродукции.Свойство("НомерЛиста", НомерЛиста);
	
	СтруктураИнформацииВидаПродукции.Свойство("КонтрольДлиныКода", КонтрольДлиныКода);
	СтруктураИнформацииВидаПродукции.Свойство("КонтрольНаЦифры", КонтрольНаЦифры);
	СтруктураИнформацииВидаПродукции.Свойство("ДлинаКода", ДлинаКода);
	
	СтруктураИнформацииВидаПродукции.Свойство("СтрокаГде", СтрокаГде);
	
	СтруктураИнформацииВидаПродукции.Свойство("РодПадежКодЧего", РодПадежКодЧего);
	ПроверяетсяКодПродукции = (РодПадежКодЧего = "вида продукции"); 

	Если НЕ ЗначениеЗаполнено(СтрокаГде) Тогда

		СтруктураИнформацииВидаПродукции.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураИнформацииВидаПродукции.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураИнформацииВидаПродукции.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	СтруктураИнформацииВидаПродукции.Свойство("СписокКодов", СписокКодов);

	Если ТипЗнч(Код) = Тип("Строка") И ЗначениеЗаполнено(Код) Тогда

		Если СписокКодов.Найти(Код) = Неопределено Тогда

		// Код вне допустимого списка. 
			// Ручной ввод - если не было недавнего изменения списка, это ошибка.
			// Предупреждаем, но даем выгрузить.
			ТекстОписанияОшибки = СтрокаГде + " указан код " + РодПадежКодЧего + " " + """" + Код
				+ """" + ", который не предусмотрен текущей схемой выгрузки отчета!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", ?(ПроверяетсяКодПродукции, 
													"КодПродукцииНеИзСписка", "КодНеИзСписка"));

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
										СтруктураИнформацииВидаПродукции.МаксимальноеКоличествоПредупреждений, 
										СтруктураИнформацииВидаПродукции.ТекущееКоличествоПредупреждений);

			// Если код не из списка выбора, надо проверить длину.
			Если КонтрольДлиныКода И (СтрДлина(Код) <> ДлинаКода) Тогда

				ТекстОписанияОшибки = СтрокаГде + " указан код " + РодПадежКодЧего + " " + """"
					+ Код + """" + " неверной длины!
					|Код должен состоять из " + ДлинаКода + "-х символов, обычно цифр.";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", ?(ПроверяетсяКодПродукции, 
													"КодПродукцииНе3", "КодНевернаяДлина"));

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураИнформацииВидаПродукции.МаксимальноеКоличествоОшибок, СтруктураИнформацииВидаПродукции.ТекущееКоличествоОшибок);

			КонецЕсли;

			// Так же есть смысл проверить, что код состоит из цифр.
			// Предупреждаем, но даем выгрузить.
			Если КонтрольНаЦифры И (НЕ ВСтрокеВсеЦифры(Код)) Тогда

				ТекстОписанияОшибки = СтрокаГде + " указан код " + РодПадежКодЧего + " " + """"
					+ Код + """" + ", в котором не все символы являются цифрами!
					|Формально такая ситуация допустима, но на практике коды чаще всего состоят из цифр.";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", ?(ПроверяетсяКодПродукции, 
													"КодПродукцииНеЦифры", "КодНеЦифры"));

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
										СтруктураИнформацииВидаПродукции.МаксимальноеКоличествоПредупреждений, 
										СтруктураИнформацииВидаПродукции.ТекущееКоличествоПредупреждений);

			КонецЕсли;

		КонецЕсли;

	Иначе

		ТекстОписанияОшибки = СтрокаГде + " не задан код " + РодПадежКодЧего + "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", ?(ПроверяетсяКодПродукции, 
												"НетКодаПродукции", "НетКода"));

		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки,
					СтруктураИнформацииВидаПродукции.МаксимальноеКоличествоОшибок, СтруктураИнформацииВидаПродукции.ТекущееКоличествоОшибок);

	КонецЕсли;

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Проверяет заполнение кода вида продукции в строках таблиц деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		Код							- Строка - проверяемый код продукции.
//		СтруктураИнформацииВидаПродукции	- Структура - структура информации о виде продукции.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//			* ИмяПоказателя				- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей код продукции, например: 
//										"П000020000302_5" - имя колонки таблицы "П000020000302", строка 5.
//			* НомерЛиста                - Число  - Номер листа многостраничного раздела.
//			* СписокКодов				- Массив - Массив возможных значений для кода вида продукции.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерныйКодВидаПродукции(ДокументСсылка, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, Код,
		СтруктураИнформацииВидаПродукции, РежимОтладки = Неопределено) Экспорт

	СтруктураИнформацииВидаПродукции.Вставить("РодПадежКодЧего", "вида продукции");
	СтруктураИнформацииВидаПродукции.Вставить("КонтрольДлиныКода", Истина);
	СтруктураИнформацииВидаПродукции.Вставить("ДлинаКода", 3);
	СтруктураИнформацииВидаПродукции.Вставить("КонтрольНаЦифры", Истина);
	
	Возврат ВерныйКод(ДокументСсылка, ТаблицаСообщений,
		ТаблицаСообщенийДляСведения, СтатусПроверки, Код,
		СтруктураИнформацииВидаПродукции, РежимОтладки);

КонецФункции

// Определеяет принадлежность контрагента к ЕАЭС и РФ.
//
// Параметры:
//  ИНН  				- Строка - ИНН или иной налоговый идентификатор контрагента.
//  КПП  				- Строка - КПП контрагента.
//  НаименованиеПолное  - Строка - Наименование контрагента.
//	СтранаРегистрации	- СправочникСсылка.СтраныМира - страна регистрации контрагента.
//						или Строка из 3 цифр - код страны.
//	РезидентРФ			- Булево. В этом параметре передается результат определения принадлежности к РФ.
//	РезидентЕАЭС		- Булево. В этом параметре передается результат определения принадлежности к ЕАЭС.
//	РежимОтладки		- Булево. Признак отладки.
//
Процедура ОпределитьПринадлежностьЕАЭСиРФ(Знач ИНН = "", Знач КПП = "", Знач НаименованиеПолное = "", СтранаРегистрации = "", 
											РезидентРФ, РезидентЕАЭС, РежимОтладки = Неопределено) Экспорт
											
	ИНН = ?(ТипЗнч(ИНН) = Тип("Строка"), СокрЛП(ИНН), "");
	КПП = ?(ТипЗнч(КПП) = Тип("Строка"), СокрЛП(КПП), "");
	НаименованиеПолное = ?(ТипЗнч(НаименованиеПолное) = Тип("Строка"), СокрЛП(НаименованиеПолное), "");
	
	РезидентРФ = Ложь;		
	РезидентЕАЭС = Ложь;

	// Вначале пытаемся определить по стране.
	
	Если ЗначениеЗаполнено(СтранаРегистрации) Тогда
	// Заполнено может быть только при наличии реквизита СтранаРегистрации в справочнике Контрагентов.
	// И значит передан элемент справочника СтраныМира.
		КодСтраны = "";
		
		Если ТипЗнч(СтранаРегистрации) = Тип("СправочникСсылка.СтраныМира") Тогда
		
			КодСтраны = СтранаРегистрации.Код;
			
		ИначеЕсли ТипЗнч(СтранаРегистрации) = Тип("Строка") 
				И СтрДлина(СтранаРегистрации) = 3 
				И ВСтрокеВсеЦифры(СтранаРегистрации) Тогда
				
			КодСтраны = СтранаРегистрации;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			
			ДолжнаБытьДлинаИНН = ВозможныеДлиныИНН(КодСтраны);
			// ВозможныеДлиныИНН возвратят для обращения по коду или число (длину ИНН для страны), 
			// или массив (10, 12), если код 643 (Россия), 
			// или Неопределено, если код не являкется кодом страны ЕАЭС.
			
			ИзЕАЭС_БезРФ = (ТипЗнч(ДолжнаБытьДлинаИНН) = Тип("Число"));
			
			Если КодСтраны = "643" Тогда
			// РФ.			
				РезидентРФ = Истина;		
				РезидентЕАЭС = Истина;
			ИначеЕсли ИзЕАЭС_БезРФ Тогда
			// Не РФ, Но из ЕАЭС.
				РезидентРФ = Ложь;		
				РезидентЕАЭС = Истина;
			Иначе
			// Не РФ и НЕ ЕАЭС.
				РезидентРФ = Ложь;		
				РезидентЕАЭС = Ложь;
			КонецЕсли;
			
			Возврат;
		
		КонецЕсли; 
		
	КонецЕсли;
	
	// Данных Страны нет или передано не то что надо.
	
	// Сначала проверяем по ИНН - КПП.
	ВсеЦифрыИНН = ВСтрокеВсеЦифры(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	ДлинаКПП = СтрДлина(КПП);
	
	Если ВсеЦифрыИНН Тогда
	
		Если ДлинаКПП > 0 ИЛИ ДлинаИНН = 10 Тогда	
			
			РезидентРФ = Истина;		
			РезидентЕАЭС = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		Если ДлинаИНН = 12 Тогда
		
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН, РежимОтладки);
			
			// Контрольное число совпадает с российским.
			Если КонтрольноеЧислоИНН = Прав(ИНН, 2) Тогда
				
				РезидентРФ = Истина;		
				РезидентЕАЭС = Истина;
				
				Возврат;
				
			Иначе
				
				// Считаем Казахстаном.
				РезидентРФ = Ложь;		
				РезидентЕАЭС = Истина;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Смотрим по длинам ЕАЭС.
		ДлиныИНН_ЕАЭС_БезРФ = ВозможныеДлиныИНН("ЕАЭС_БезРФ");
		
		Если НЕ ДлиныИНН_ЕАЭС_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
			
			РезидентРФ = Ложь;		
			РезидентЕАЭС = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Не смогли определить, пробуем понять по названию.
	// Если в Названии русские буквы - скорее всего это не иностранная компания из вне ЕАЭС.
	ДлинаНазвания = СтрДлина(НаименованиеПолное);
	СуммаКодов = 0;
	Для Индекс = 1  По  ДлинаНазвания Цикл	
		СуммаКодов = СуммаКодов + КодСимвола(Сред(НаименованиеПолное, Индекс, 1));	
	КонецЦикла; 
	
	
	// Если буквы все русские, средний код будет всегда больше кода буквы "z".
	// Если это не так - значит как минимум есть латинские буквы, и их больше русских.
	Если СуммаКодов > ДлинаНазвания * КодСимвола("z") Тогда
	
		РезидентРФ = Ложь;		
		РезидентЕАЭС = Истина;
		
	КонецЕсли; 	

КонецПроцедуры
 
// Проверяет поля Наименование, ИНН и КПП в строках таблиц или страницах (в т.ч. Титульный) деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
// Владельцем ИНН (идентификационного номера) может быть как российский, так 
// и иностранный резидент.
//
// Параметры:
//
//	 	ДокументСсылка				- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		СтруктураСведенийИННКПП		- Структура - структура информации о ИНН-КПП.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
//			* НомерЛиста                - Число  - Необязательный, если проверяются не поля Таблицы.
//										Номер листа многостраничного раздела.
//
//			* КонтрольОП                - Булево - Необязательный. Флаг, если Истина - идет проверка обособленного подразделения.
//			* ИмяПоказателяИНН			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей ИНН, или имя элемента формы, содержащего значение ИНН, например: 
//										"П000020000304_5" - имя колонки таблицы "П000020000304", строка 5
//										"ИНН1".
//			* ИмяПоказателяКПП			- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей КПП, или имя элемента формы, содержащего значение КПП, например: 
//										"П000020000305_6" - имя колонки таблицы "П000020000305", строка 6
//										"КПП1".
//			* ИНН						- Строка - строка значения ИНН.
//			* КПП						- Строка - строка значения КПП.
//			* РодПадежЧейИННКПП			- Строка - строка содержащая обозначение владельца ИНН-КПП в родительском падеже,
//										например: "производителя/импортера" или "поставщика".
//			* ИмяПоказателяНаименования - Строка - имя колонки таблицы с указанием номера строки,
//										содержащей Наименование контрагента, чей ИНН-КПП проверяется, 
//										или имя элемента формы, содержащего значение Наименование.
//			* Наименование 				- Строка - строка значения Наименования.
//			* МожетБытьПустойИНН		- Булево - Необязательный. Флаг, если Истина - ИНН может быть не заполнен.
//			* МожетБытьПустойКПП		- Булево - Необязательный. Флаг, если Истина - КПП может быть не заполнен.
//			* РоссийскийТолькоЮЛ		- Булево - Необязательный. Флаг, если Истина - если ИНН российский, то должен
//										принадлежать юридическому лицу.
//			* РоссийскийТолькоФЛ		- Булево - Необязательный. Флаг, если Истина - если ИНН российский, то должен
//										принадлежать физическому лицу.
//			* КПП56СимволыМогутБытьБуквами - Булево - Необязательный. Флаг, если Истина -  5 и 6 символы КПП могут быть 
//										латинскими буквами.
//			* ИННLiteТип				- Булево - Необязательный. Флаг, если Истина - ИНН 10 значный и состоит из любых цифр, 
//										допускаются 00 в начале ИНН.
//			* КППLiteТип				- Булево - Необязательный. Флаг, если Истина - КПП состоит из любых цифр, 
//										допускаются 00 в начале КПП.
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерныеНаименованиеИННКПП(ДокументСсылка, ТаблицаСообщенийОбОшибках,
		ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураСведенийИННКПП,
		РоссийскийРезидент = Неопределено, РежимОтладки = Неопределено) Экспорт

	Перем ИмяРаздела, СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый,
		ИмяТаблицы, ИмяПоказателяИНН, ИНН, ИмяПоказателяКПП, КПП, РодПадежЧейИННКПП,
		МожетБытьПустойИНН, ИмяПоказателяНаименования, Наименование,
		МожетБытьПустойКПП, РоссийскийТолькоЮЛ, РоссийскийТолькоФЛ,
		КПП56СимволыМогутБытьБуквами, ИННLiteТип, КППLiteТип, КонтрольОП, 
		СтрокаГде, ТолькоЕАЭС, ТолькоРФ, КодСтраны, МаксДлинаПоXSD, МинДлинаПоXSD;

		// Проверка основных параметров.
		
	ДокументСсылкаАлкоОтчет = ПривестиДокументКСсылке(ДокументСсылка);
	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылка = ДокументСсылкаАлкоОтчет;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураСведенийИННКПП) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП() 
				|передана СтруктураСведенийИННКПП, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП() 
				|передана ДокументСсылка, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийОбОшибках) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП() 
				|передана ТаблицаСообщенийОбОшибках, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныеНаименованиеИННКПП() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КонтрольОП", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяПоказателяИНН", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИНН", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяПоказателяКПП", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КПП", "Строка", "", "", РежимОтладки);
	
	// Тип Число, по умолчанию для незаполненного пустая строка, если не тот тип - тоже.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КодСтраны", "Строка", "", "", РежимОтладки);
	
	
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РодПадежЧейИННКПП", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяПоказателяНаименования", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Наименование", "Строка", "", "", РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТолькоЕАЭС", "Булево", Истина, Истина, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТолькоРФ", "Булево", Ложь, Ложь, РежимОтладки);
	
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МожетБытьПустойИНН", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МожетБытьПустойКПП", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РоссийскийТолькоЮЛ", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РоссийскийТолькоФЛ", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.	
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КПП56СимволыМогутБытьБуквами", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИННLiteТип", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "КППLiteТип", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 20, если не тот тип - 20.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксДлинаИННпоXSD", "Число", 20, 20, РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 1, если не тот тип - 1.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МинДлинаИННпоXSD", "Число", 1, 1, РежимОтладки);
		
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийИННКПП, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	СтруктураСведенийИННКПП.Свойство("ИмяРаздела", ИмяРаздела);

	СтруктураСведенийИННКПП.Свойство("СтрокаГде", СтрокаГде);

	Если НЕ ЗначениеЗаполнено(СтрокаГде) Тогда

		СтруктураСведенийИННКПП.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийИННКПП.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийИННКПП.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	// Поля, заполненны только при проверке строчных и многостраничных разделов.
	СтруктураСведенийИННКПП.Свойство("НомерЛиста", НомерЛиста);

	СтруктураСведенийИННКПП.Свойство("КонтрольОП", КонтрольОП);

	СтруктураСведенийИННКПП.Свойство("ИмяПоказателяИНН", ИмяПоказателяИНН);
	СтруктураСведенийИННКПП.Свойство("ИНН", ИНН);
	СтруктураСведенийИННКПП.Свойство("ИмяПоказателяКПП", ИмяПоказателяКПП);
	СтруктураСведенийИННКПП.Свойство("КПП", КПП);
	
	СтруктураСведенийИННКПП.Свойство("КодСтраны", КодСтраны);
		
	СтруктураСведенийИННКПП.Свойство("РодПадежЧейИННКПП", РодПадежЧейИННКПП);

	СтруктураСведенийИННКПП.Свойство("ИмяПоказателяНаименования", ИмяПоказателяНаименования);
	СтруктураСведенийИННКПП.Свойство("Наименование", Наименование);

	СтруктураСведенийИННКПП.Свойство("ТолькоЕАЭС", ТолькоЕАЭС);
	СтруктураСведенийИННКПП.Свойство("ТолькоРФ", ТолькоРФ);
	
	СтруктураСведенийИННКПП.Свойство("МожетБытьПустойИНН", МожетБытьПустойИНН);
	СтруктураСведенийИННКПП.Свойство("МожетБытьПустойКПП", МожетБытьПустойКПП);
	СтруктураСведенийИННКПП.Свойство("РоссийскийТолькоЮЛ", РоссийскийТолькоЮЛ);
	СтруктураСведенийИННКПП.Свойство("РоссийскийТолькоФЛ", РоссийскийТолькоФЛ);
	СтруктураСведенийИННКПП.Свойство("КПП56СимволыМогутБытьБуквами", КПП56СимволыМогутБытьБуквами);
	СтруктураСведенийИННКПП.Свойство("ИННLiteТип", ИННLiteТип);
	СтруктураСведенийИННКПП.Свойство("КППLiteТип", КППLiteТип);
	
	СтруктураСведенийИННКПП.Свойство("МинДлинаИННпоXSD", МинДлинаПоXSD);
	СтруктураСведенийИННКПП.Свойство("МаксДлинаИННпоXSD", МаксДлинаПоXSD);
	
	ДлинаИНН = СтрДлина(ИНН);
	ДлинаКПП = СтрДлина(КПП);
	
	

	ТекстОписанияОшибки = "";

	СтрИностранного = "";

	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
	
	ДлиныИНН_РФ = ВозможныеДлиныИНН("РФ");
	// ВозможныеДлиныИНН() вернут в данных случаях массив.
	ДлиныИНН_ЕАЭС_БезРФ = ВозможныеДлиныИНН("ЕАЭС_БезРФ");
	
	СтраныЕАЭС = Новый Соответствие;
	СтраныЕАЭС.Вставить("051", "Армения");
	СтраныЕАЭС.Вставить("112", "Беларусь");
	СтраныЕАЭС.Вставить("398", "Казахстан");
	СтраныЕАЭС.Вставить("417", "Киргизия");
	
	ДлинаКодаСтраны = СтрДлина(КодСтраны);
	Если ДлинаКодаСтраны <> 3 ИЛИ (НЕ ВСтрокеВсеЦифры(КодСтраны)) Тогда
	// Неверно передан код страны, очищаем.
		КодСтраны = "";
		ДлинаКодаСтраны = 0;	
	КонецЕсли;
	
	Если КодСтраны = "643" Тогда
		РоссийскийРезидент = Истина;
	ИначеЕсли ЗначениеЗаполнено(КодСтраны) Тогда
		РоссийскийРезидент = Ложь;
	КонецЕсли;
		
	// Должен быть 10 значным - значит российское юрлицо.
	Если ИННLiteТип Тогда
		МожетБытьПустойКПП = Ложь;
	КонецЕсли;

	// Если КПП точно непуст - это точно российский резидент.
	Если НЕ МожетБытьПустойКПП Тогда
		ТолькоРФ = Истина;
		РоссийскийТолькоЮЛ = Истина;
		РоссийскийТолькоФЛ = Ложь;
	КонецЕсли;

	Если РоссийскийТолькоЮЛ Тогда
		ТолькоРФ = Истина;
		РоссийскийТолькоФЛ = Ложь;
	КонецЕсли;

	Если РоссийскийТолькоФЛ Тогда
		ТолькоРФ = Истина;
		РоссийскийТолькоЮЛ = Ложь;
	КонецЕсли;
	
	Если КонтрольОП Тогда
		ТолькоРФ = Истина;	
	КонецЕсли; 
	
	// Контроль на цифры.
	ВсеЦифры = ВСтрокеВсеЦифры(ИНН);
	
	Если ДлинаИНН = 10 Тогда
	// Считаем российским, если только четко не сказано что не Российский.
		Если РоссийскийРезидент = Неопределено Тогда

			РоссийскийРезидент = Истина;
			МожетБытьПустойКПП = Ложь;
			РоссийскийТолькоЮЛ = Истина;
			РоссийскийТолькоФЛ = Ложь;
			
			КодСтраны = "643";
			ДлинаКодаСтраны = 3;

		КонецЕсли;

	ИначеЕсли ДлинаИНН = 12 Тогда

	// Или российский или казахстанский предаположительно, но возможны и другие страны. 
		Если РоссийскийРезидент = Неопределено И ВсеЦифры Тогда
		// Если значение не определено, значит точной информации о стране нет.
			КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН, РежимОтладки);
			// Контрольное число совпадает с российским.
			Если КонтрольноеЧислоИНН = Прав(ИНН, 2) Тогда

				РоссийскийРезидент = Истина;
				МожетБытьПустойКПП = Истина;
				РоссийскийТолькоФЛ = Истина;
				РоссийскийТолькоЮЛ = Ложь;
								
				КодСтраны = "643";
				ДлинаКодаСтраны = 3;
				
			Иначе 
			// Контрольное число не российское.
				Если ТолькоРФ Тогда
				// Если ожидается российский контрагент, считаем российским.	
					РоссийскийРезидент = Истина;
					МожетБытьПустойКПП = Истина;
					РоссийскийТолькоФЛ = Истина;
					РоссийскийТолькоЮЛ = Ложь;
										
					КодСтраны = "643";
					ДлинаКодаСтраны = 3;
					
				Иначе
					РоссийскийРезидент = Ложь;											
				КонецЕсли; 
								
			КонецЕсли;
			
		ИначеЕсли РоссийскийРезидент = Неопределено Тогда
		// Не все цифры.	
			Если ТолькоРФ Тогда
			// Если ожидается российский контрагент, считаем российским.	
				РоссийскийРезидент = Истина;
				МожетБытьПустойКПП = Истина;
				РоссийскийТолькоФЛ = Истина;
				РоссийскийТолькоЮЛ = Ложь;
				
				КодСтраны = "643";
				ДлинаКодаСтраны = 3;
				
			Иначе
				РоссийскийРезидент = Ложь;											
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если РоссийскийРезидент = Неопределено Тогда
	// Длина ИНН не 10 и не 12, КодСтраны тоже ничего не дал.
	// Если ожидается только российский контрагент, считаем российским. 
	// Иначе - иностранным.
		РоссийскийРезидент = ТолькоРФ;
		
		Если РоссийскийРезидент Тогда
			
			КодСтраны = "643";
			ДлинаКодаСтраны = 3;			
		
		КонецЕсли;
		
	КонецЕсли;
	
	ДолжнаБытьДлинаИНН = ВозможныеДлиныИНН(КодСтраны);
	// ВозможныеДлиныИНН возвратят для обращения по коду или число (длину ИНН для страны), 
	// или массив (10, 12), если код 643 (Россия), 
	// или Неопределено, если код не являкется кодом страны ЕАЭС.
	
	СтранаЕАЭС = СтраныЕАЭС.Получить(КодСтраны);
	ИзЕАЭС_БезРФ = (ТипЗнч(ДолжнаБытьДлинаИНН) = Тип("Число"));
	СтранаУказана = (ДлинаКодаСтраны = 3);
	
	
	// Здесь признак РоссийскийРезидент в любом случае определен.
	Если РоссийскийРезидент ИЛИ ТолькоРФ ИЛИ ТолькоЕАЭС ИЛИ ИзЕАЭС_БезРФ Тогда
		МожетБытьПустойИНН = Ложь;	
	КонецЕсли; 
	
	МожетБытьПустойКПП = (НЕ РоссийскийРезидент) ИЛИ (РоссийскийРезидент И ДлинаИНН = 12);
	
	
			
	// Проверка на минимальную длину Наименования.
	Если СтрДлина(Наименование) < 3 Тогда

		ТекстОписанияОшибки = СтрокаГде + " наименование " + РодПадежЧейИННКПП
			+ " содержит менее 3-х символов!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименования);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ДлинаНаименованияМеньше3");

		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
							СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

	ИначеЕсли СтрДлина(Наименование) > 1000 Тогда

		ТекстОписанияОшибки = СтрокаГде + " наименование " + РодПадежЧейИННКПП
			+ " содержит более 1000 символов!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", ИмяПоказателяНаименования);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ДлинаНаименованияБольше1000");

		СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
							СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

	КонецЕсли;

	// Для ОП нет смысла контролировать ИНН.
	Если НЕ КонтрольОП Тогда
		/////////////////////////////////////////////////////////////////////////////
		// Контроль на длину ИНН, контрольные суммы, наличие цифр.
		
		// Контроль на цифры.
		// Для все стран ЕАЭС ИНН и его аналоги состоят только из цифр.
		Если ДлинаИНН > 0 И (ТолькоРФ ИЛИ ТолькоЕАЭС ИЛИ РоссийскийРезидент ИЛИ ИзЕАЭС_БезРФ) Тогда

			Если НЕ ВсеЦифры Тогда

				ТекстОписанияОшибки = СтрокаГде
					+ " строка ИНН (идентификационного, налогового номера) " + РодПадежЧейИННКПП + " "
					+ ИНН + " должна состоять только из цифр!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыИНН");

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
						СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
				
			КонецЕсли;

		КонецЕсли;
		
		Если (Не МожетБытьПустойИНН) И (ДлинаИНН = 0) Тогда
		// ИНН обязателен, но не указан.	
			ТекстОписанияОшибки = СтрокаГде + " не указан ИНН (Идентификационный, налоговый номер) " + РодПадежЧейИННКПП + "!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеУказанИНН");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
						СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
						
		Иначе
						
			СтрРоссийского = ?(Прав(СокрЛП(РодПадежЧейИННКПП), 3) = "ции", " российской ", " российского ");
			СтрИностранного = ?(Прав(СокрЛП(РодПадежЧейИННКПП), 3) = "ции", " иностранной ", " иностранного ");
			
			Если РоссийскийРезидент Тогда
			// Точно резидент РФ. Во всех декларациях допускается указание российских резидентов, поэтому
			// контроль только по длине и контрольному числу.
				
				Если НЕ МожетБытьПустойКПП Тогда
				// Должно быть ЮрЛицо.
					Если НЕ ДлинаИНН = 10 Тогда

						ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН"
							+ СтрРоссийского + РодПадежЧейИННКПП + " " + ИНН + "!
							|ИНН должен быть 10-значный.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "РосИННнеВернаяДлина");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
									СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

					КонецЕсли;
				Иначе
				// Может быть ЮрЛицо или ФизЛицо.				
					Если ДлиныИНН_РФ.Найти(ДлинаИНН) = Неопределено Тогда
					// Длина не 10 и не 12.
						ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН" + СтрРоссийского
							+ РодПадежЧейИННКПП + " " + ИНН + "!
							|ИНН должен быть 10 или 12-значный.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "РосИННнеВернаяДлина");

						СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
									СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

					Иначе

						Если РоссийскийТолькоЮЛ и (ДлинаИНН <> 10) Тогда
						// Должно быть ЮрЛицо, но длина ИНН не 10.
							ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН"
								+ СтрРоссийского + РодПадежЧейИННКПП + " " + ИНН + "!
								|ИНН должен быть 10-значный.";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "РосИННнеВернаяДлина");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

						ИначеЕсли РоссийскийТолькоФЛ и (ДлинаИНН <> 12) Тогда
						// Должно быть ФизЛицо, но длина ИНН не 12.
							ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН"
								+ СтрРоссийского + РодПадежЧейИННКПП + " " + ИНН + "!
								|ИНН должен быть 12-значный!";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "РосИННнеВернаяДлина");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;
			Иначе
			// Точно иностранец.
			
				Если ТолькоРФ Тогда
				// Дожен быть российским резидентом, но указан иностранец.
					ТекстОписанияОшибки = СтрокаГде
						+ " указан иностранный контрагент " 
						+ Наименование + " в качестве "
						+ РодПадежЧейИННКПП 
						+ ?(ДлинаИНН > 0, ", Идентификационный (налоговый) Номер " + ИНН, "")
						+ ?(СтранаУказана, ", Код страны регистрации " + КодСтраны, "") + ".
						|Должен быть указан российский.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "КонтрагентИностранный");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
									СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

				
				Иначе
					
					Если ТолькоЕАЭС Тогда
									
						Если (НЕ ИзЕАЭС_БезРФ) И СтранаУказана Тогда
						// Указан иностранец извне ЕАЭС.
							ТекстОписанияОшибки = СтрокаГде
								+ " указан иностранный контрагент " 
								+ Наименование + " не из страны ЕАЭС в качестве "
								+ РодПадежЧейИННКПП 
								+ ?(ДлинаИНН > 0, ", Идентификационный (налоговый) Номер " + ИНН, "") 
								+ ?(СтранаУказана, ", Код страны регистрации " + КодСтраны, "") + ".
								|Должен быть указан контрагент из стран ЕАЭС.";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "КонтрагентНеЕАЭС");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
											СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

						ИначеЕсли НЕ СтранаУказана Тогда
						// ИзЕАЭС_БезРФ при неуказанной стране всегда Ложь.
						// Нужно убедиться, что длина ИНН соответствует одной из длин ИНН ЕАЭС
							Если ДлиныИНН_ЕАЭС_БезРФ.Найти(ДлинаИНН) = Неопределено Тогда
							// Длина не соответствует странам ТС.
								ТекстОписанияОшибки = СтрокаГде
									+ " неверно указан Идентификационный (налоговый) Номер" + СтрИностранного
									+ РодПадежЧейИННКПП + " " + ИНН + "!
									|Длина идентификационного номера не соответствует ни одной из стран таможенного союза ЕАЭС, исключая Россию.";

								СтруктураОшибки = Новый Структура;
								СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
								СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
								СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
								СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
								СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИННнеЕАЭС");

								СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
												СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ИзЕАЭС_БезРФ Тогда
					// Если ИзЕАЭС_БезРФ Истина - страна точно указана.
					// Нужно убедиться что длина ИНН соответствует длине страны.
						Если НЕ ДолжнаБытьДлинаИНН = ДлинаИНН Тогда
						// Неверная длина ИНН.
							ТекстОписанияОшибки = СтрокаГде
								+ " неверно указан Идентификационный (налоговый) Номер" + СтрИностранного
								+ РодПадежЧейИННКПП + " " + ИНН + "!
								|Код страны регистрации " + КодСтраны + ", страна регистрации " + СтранаЕАЭС + "
								|Длина Номера должна быть " + СтрокаЧГ0(ДолжнаБытьДлинаИНН)
								+ ", но длина Номера состовляет " + СтрокаЧГ0(ДлинаИНН) + ".";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИННнеСоответствуетСтране");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
											СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
		
							
						КонецЕсли;
									
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;	
						
		КонецЕсли;
		
		// Нужно убедиться, что длина ИНН соответствуют минимуму и максимуму по схеме XSD.
		Если (ДлинаИНН > 0)  И ((ДлинаИНН > МаксДлинаПоXSD) ИЛИ (ДлинаИНН < МинДлинаПоXSD)) Тогда
		// Неверная длина ИНН.
			ТекстОписанияОшибки = СтрокаГде
				+ " неверно указан Идентификационный (налоговый) Номер" 
				+ РодПадежЧейИННКПП + " " + ИНН + "!
				|Длина Номера согласно схемы XSD должна быть от " + СтрокаЧГ0(МинДлинаПоXSD)
				+ " до " + СтрокаЧГ0(МаксДлинаПоXSD) + ".
				|Но длина Номера состовляет " + СтрокаЧГ0(ДлинаИНН) + ".";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "ДлинаИННнеСоответствуетXSD");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
							СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
			
		
		КонецЕсли;
		
		//
		/////////////////////////////////////////////////////////////////////////////
		
	КонецЕсли;

	Если НЕ РоссийскийРезидент Тогда
	// Для правильной отработки контроля КПП в случае если Длина ИНН равна 10,
	// КПП для иностранцев должен быть пуст.
		ДлинаИНН = ?(ДлинаИНН = 10, 9, ДлинаИНН);
	КонецЕсли;
	
	// Контроль КПП.
	Если (ДлинаИНН = 10) и РоссийскийРезидент Тогда

		Если НЕ РоссийскийТолькоФЛ Тогда

		// Это вероятно резидент РФ - ЮрЛицо и должно быть КПП.
			Если ДлинаКПП = 0 Тогда
			// КПП пуст.
				ТекстОписанияОшибки = СтрокаГде + " не указан КПП " + РодПадежЧейИННКПП
					+ "!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанКПП");

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

			ИначеЕсли НЕ ДлинаКПП = 9 Тогда
			// КПП неверный.
				ТекстОписанияОшибки = СтрокаГде + " неверно указан КПП " + РодПадежЧейИННКПП
					+ " " + КПП + "!
					|КПП должен быть 9-значный.";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеКПП9Цифр");

				СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

			КонецЕсли;

		КонецЕсли;

	Иначе
	// КПП должен быть пуст. 
		Если НЕ ДлинаКПП = 0 Тогда
			ТекстОписанияОшибки = СтрокаГде + " КПП " + РодПадежЧейИННКПП
				+ " должен быть пуст!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "КППнеПуст");

			СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

		КонецЕсли;
	КонецЕсли;

	Если ТекстОписанияОшибки = "" Тогда

	// Т.е ошибок по длинам ИНН-КПП не было.		
		Если ДлинаКПП > 0 Тогда

			Если КПП56СимволыМогутБытьБуквами Тогда

			// В КПП 5 и 6 символы могут быть не цифрами, их не проверяем.
				КПП_цифры = Лев(КПП, 4) + Сред(КПП, 7);
				Если НЕ ВСтрокеВсеЦифры(КПП_цифры) Тогда

					ТекстОписанияОшибки = СтрокаГде + " строка КПП " + РодПадежЧейИННКПП
						+ " " + КПП
						+ " должна состоять только из цифр (за исключением 5-го и 6-го символов)!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыКПП56");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

				КонецЕсли;

				КПП_Цифры_Буквы = ВРег(Сред(КПП, 5, 2)); // 5-6 символы КПП
				СтрокаБуквЦифр = "0123456789ABCDEFGHIJKLMNOPRSTQUVXYZW";

				КПП_Цифры_Буквы_Первый = Лев(КПП_Цифры_Буквы, 1);
				КПП_Цифры_Буквы_Второй = Прав(КПП_Цифры_Буквы, 1);

				Если (СтрНайти(СтрокаБуквЦифр, КПП_Цифры_Буквы_Первый) = 0)
						или (СтрНайти(СтрокаБуквЦифр, КПП_Цифры_Буквы_Второй) = 0) Тогда

					ТекстОписанияОшибки = СтрокаГде + " 5-й и 6-й символы строки КПП "
						+ РодПадежЧейИННКПП + " " + КПП
						+ " должны состоять только из цифр или латинских букв!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НедопустимыеСимволыКПП56");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

				КонецЕсли;

			Иначе

			// В КПП все символы должны быть цифрами.				
				Если НЕ ВСтрокеВсеЦифры(КПП) Тогда

					ТекстОписанияОшибки = СтрокаГде + " строка КПП " + РодПадежЧейИННКПП
						+ " " + КПП + " должна состоять только из цифр!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеКПП9Цифр");

					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Контроль на первые 00 для РФ.
		Если РоссийскийРезидент Тогда

		// Поскольку ошибок по длине ИНН нет, можно смело брать 2 символа слева.
			Если Лев(ИНН, 2) = "00" Тогда

				ТекстОписанияОшибкиДо = ТекстОписанияОшибки;
				ТекстОписанияОшибки = СтрокаГде + " строка ИНН " + РодПадежЧейИННКПП + " "
					+ ИНН + " не должна начинаться с 00!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ИНН00");

				Если НЕ (КППLiteТип ИЛИ ИННLiteТип) Тогда
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
				Иначе
				// Сообщаем в виде предупреждения, для сведения.
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
							СтруктураСведенийИННКПП.МаксимальноеКоличествоПредупреждений, СтруктураСведенийИННКПП.ТекущееКоличествоПредупреждений);
					ТекстОписанияОшибки = ТекстОписанияОшибкиДо;
				КонецЕсли;

			КонецЕсли;

			Если (ДлинаКПП > 2) И (Лев(КПП, 2) = "00") Тогда

				ТекстОписанияОшибкиДо = ТекстОписанияОшибки;
				ТекстОписанияОшибки = СтрокаГде + " строка КПП " + РодПадежЧейИННКПП + " "
					+ КПП + " не должна начинаться с 00!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателяКПП);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КПП00");

				Если НЕ КППLiteТип Тогда
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);
				Иначе
				// Сообщаем в виде предупреждения, для сведения.
					СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
							СтруктураСведенийИННКПП.МаксимальноеКоличествоПредупреждений, СтруктураСведенийИННКПП.ТекущееКоличествоПредупреждений);
					ТекстОписанияОшибки = ТекстОписанияОшибкиДо;
				КонецЕсли;

			КонецЕсли;

			Если ВсеЦифры И ИНН <> "0000000000" Тогда
			// Проверка на контрольные суммы.
				КонтрольноеЧислоИНН = КонтрольноеЧислоИНН(ИНН, РежимОтладки);

				Если ЗначениеЗаполнено(КонтрольноеЧислоИНН) Тогда

					ТекстОписанияОшибкиДо = ТекстОписанияОшибки;

					Если ДлинаКПП = 9 Тогда

					// ЮрЛицо.			
						Если КонтрольноеЧислоИНН <> Прав(ИНН, 1) Тогда
							ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН "
								+ РодПадежЧейИННКПП + " " + ИНН + "!
								|Неверное контрольное число ИНН";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "КонтрольноеЧислоИНН");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
											СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

						КонецЕсли;

					Иначе

					// ФизЛицо.			
						Если КонтрольноеЧислоИНН <> Прав(ИНН, 2) Тогда

							ТекстОписанияОшибки = СтрокаГде + " неверно указан ИНН "
								+ РодПадежЧейИННКПП + " " + ИНН + "!
								|Неверное контрольное число ИНН";

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателяИНН);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
							СтруктураОшибки.Вставить("ТипОшибки", "КонтрольноеЧислоИНН");

							СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
											СтруктураСведенийИННКПП.МаксимальноеКоличествоОшибок, СтруктураСведенийИННКПП.ТекущееКоличествоОшибок);

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат (ТекстОписанияОшибки = "");

КонецФункции

// Проверяет поля типа Дата деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		ПроверяемаяДата				- Дата - проверяемое значение даты.
//		СтруктураСведенийДаты		- Структура - структура информации о проверяемой дате.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
//			* НомерЛиста                - Число  - Необязательный, если проверяются не поля Таблицы.
//										Номер листа многостраничного раздела.
//			* Показатель				- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей проверяемое значение даты, 
//										или имя элемента формы отчета, содержащего проверяемое значение даты.
//			* РодПадежДатаЧего			- Строка - строка содержащая обозначение владельца поля даты в родительском падеже,
//										например: "накладной" или "начала действия лицензии".
//			* ДатаНачалаОтчета			- Дата - Необязательный. Дата начала регламентированного отчета ФСРАР.
//			* ДатаКонцаОтчета			- Дата - Необязательный. Дата окончания регламентированного отчета ФСРАР.
//			* МинимальнаяДатаПредположительно - Дата - Необязательный. Минимально возможная дата для проверяемой даты, исходя
//										из соображений зравого смысла. 
//										Если не указана, устанавливается исходя из значения параметра ТипДаты.
//			* МаксимальнаяДатаПредположительно - Дата - Необязательный. Максимально возможная дата для проверяемой даты, исходя
//										из соображений зравого смысла.
//										Если не указана, устанавливается исходя из значения параметра ТипДаты.
//			* ТипДаты					- Строка - Необязательный. Назначение проверяемого значения даты, может принимать значения:
//										"ДатаПодписи", "ДатаДокументаЛичности", "ДатаНакладной", "ДатаУведомления",
//										"ДатаНачалаДействияЛицензии", "ДатаКонцаДействияЛицензии", "Произвольный".
//										Если не установлен или не соответствует возможным значениям - присваивается значение "Произвольный".
//			* НижняяГраницаДатыПоXSD	- Дата - Необязательный. Нижняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 01.01.1000
//			* ВерхняяГраницаДатыПоXSD	- Дата - Необязательный. Верхняя граница возможного значения даты, устанвленная в схеме
//										выгрузки отчета. Если не установлен - устанавливается в стандартное значение 31.12.2099
//
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВернаяДата(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках,
		ТаблицаСообщенийДляСведения, СтатусПроверки, ПроверяемаяДата,
		СтруктураСведенийДаты, РежимОтладки = Неопределено) Экспорт

	Перем ИмяРаздела, СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый,
		ИмяТаблицы, Показатель, РодПадежДатаЧего, ДатаНачалаОтчета, ДатаКонцаОтчета,
		ТипДаты, МинимальнаяДатаПредположительно, МаксимальнаяДатаПредположительно,
		НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD, Обязательный, СтрокаГде;

		// Проверка основных параметров.
		
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяДата() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(СтруктураСведенийДаты) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяДата() 
				|передана СтруктураСведенийДаты, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяДата() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийОбОшибках) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяДата() 
				|передана ТаблицаСообщенийОбОшибках, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщенийДляСведения) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВернаяДата() 
				|передана ТаблицаСообщенийДляСведения, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Показатель", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РодПадежДатаЧего", "Строка", "", "", РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаНачалаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ДатаКонцаОтчета", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МинимальнаяДатаПредположительно", "Дата", "Неопределено", "Неопределено", РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - неопределено, чтобы отработало автоопределение.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальнаяДатаПредположительно", "Дата", "Неопределено", "Неопределено", РежимОтладки);

	// Тип строка, по умолчанию для незаполненного "Произвольный", если не тот тип - тоже "Произвольный".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТипДаты", "Строка", "Произвольный", "Произвольный", РежимОтладки);

	// Тип Дата, по умолчанию для незаполненного или если не тот тип - пустая дата.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НижняяГраницаДатыПоXSD", "Дата", '1000.01.01 00:00.00', '1000.01.01 00:00.00', РежимОтладки);
	// Тип Дата, по умолчанию для незаполненного или если не тот тип - максимальная дата по XSD.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ВерхняяГраницаДатыПоXSD", "Дата", '2099.12.31 23:59.59', '2099.12.31 23:59.59', РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Обязательный", "Булево", Истина, Истина, РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
		
	ПравильныеПараметрыВСтруктуре(СтруктураСведенийДаты, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////


	// Указанные ниже константы используются при определении наиболее вероятных возможных границ
	// в случаях когда ПроверяемаяДата имеет тип ДатаНачалаДействияЛицензии, ДатаКонцаДействияЛицензии,
	// или ДатаДокументаЛичности - если предположительные границы дат не переданы в СтруктураСведенийДаты.
	МаксимальныйСрокЛицензииФСРАР = 5; // 5 лет.
	МаксимальныйВозрастДокументаЛичности = 30; // 30 лет.
	СтруктураСведенийДаты.Свойство("ИмяРаздела", ИмяРаздела);

	СтруктураСведенийДаты.Свойство("СтрокаГде", СтрокаГде);

	Если НЕ (ТипЗнч(СтрокаГде) = Тип("Строка")
			И ЗначениеЗаполнено(СтрокаГде)) Тогда

		СтруктураСведенийДаты.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийДаты.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		СтруктураСведенийДаты.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	// Поля, заполненны только при проверке строчных и многостраничных разделов.
	СтруктураСведенийДаты.Свойство("НомерЛиста", НомерЛиста);
	СтруктураСведенийДаты.Свойство("Показатель", Показатель);

	СтруктураСведенийДаты.Свойство("РодПадежДатаЧего", РодПадежДатаЧего);

	СтруктураСведенийДаты.Свойство("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийДаты.Свойство("ДатаКонцаОтчета", ДатаКонцаОтчета);

	Если НЕ (ТипЗнч(ДатаНачалаОтчета) = Тип("Дата")
			И ТипЗнч(ДатаКонцаОтчета) = Тип("Дата")) Тогда

		ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылкаАлкоОтчет);

		Если НЕ ТипЗнч(ДатаНачалаОтчета) = Тип("Дата") Тогда
			ДатаНачалаОтчета = ДатыОтчета.ДатаНачалаОтчета;
		КонецЕсли;

		Если НЕ ТипЗнч(ДатаКонцаОтчета) = Тип("Дата") Тогда
			ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		КонецЕсли;

	КонецЕсли;

	ДатаНачалаОтчета = НачалоДня(ДатаНачалаОтчета);
	ДатаКонцаОтчета = КонецДня(ДатаКонцаОтчета);

	СтруктураСведенийДаты.Свойство("МинимальнаяДатаПредположительно", МинимальнаяДатаПредположительно);
	СтруктураСведенийДаты.Свойство("МаксимальнаяДатаПредположительно", МаксимальнаяДатаПредположительно);

	СтруктураСведенийДаты.Свойство("ТипДаты", ТипДаты);
	// ТипДаты может принимать строковые значения:
	// - ДатаПодписи
	// - ДатаДокументаЛичности
	// - ДатаНакладной
	// - ДатаУведомления
	// - ДатаНачалаДействияЛицензии (сейчас выдаются лицензии не более чем на 5 лет)
	// - ДатаКонцаДействияЛицензии
	// - Произвольный
	ТипДаты = ?((ТипЗнч(ТипДаты) = Тип("Строка"))
		И ЗначениеЗаполнено(ТипДаты), ТипДаты, "Произвольный");
	Если НЕ (ТипДаты = "ДатаПодписи" ИЛИ ТипДаты = "ДатаНакладной"
			ИЛИ ТипДаты = "ДатаКонцаДействияЛицензии"
			ИЛИ ТипДаты = "ДатаНачалаДействияЛицензии" ИЛИ ТипДаты = "ДатаУведомления"
			ИЛИ ТипДаты = "ДатаДокументаЛичности" ИЛИ ТипДаты = "Произвольный") Тогда

		ТипДаты = "Произвольный";

	КонецЕсли;

	СтруктураСведенийДаты.Свойство("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийДаты.Свойство("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);
	// согласно описанию типа ДатаТип в схемах выгрузки, 
	// год даты должен быть в диапозоне от 1000 до 2099 на момент написания кода.
	СтруктураСведенийДаты.Свойство("Обязательный", Обязательный);

	ТекстОписанияОшибки = "";

	// Ограничение по нижней и верхней границе - единственные строгие, на которые надо выдавать ошибки.
	// Все остальные, с точки зрения здравого смысла - выдаем как предупреждение, но позволяем выгрузить.
	Если ТипЗнч(ПроверяемаяДата) <> Тип("Дата") Тогда

		ТекстОписанияОшибки = СтрокаГде + " неверно указана дата "
			+ РодПадежДатаЧего + " " + Строка(ПроверяемаяДата) + "!
			|Значение не является датой.";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "УказанаНеДата");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

		// Нет смысла проверять дальше.								
		Возврат Ложь;

	ИначеЕсли Обязательный И (НЕ ЗначениеЗаполнено(ПроверяемаяДата)) Тогда

		ТекстОписанияОшибки = СтрокаГде + " не указана дата " + РодПадежДатаЧего
			+ "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "УказанаНеДата");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

		// Нет смысла проверять дальше.								
		Возврат Ложь;

	КонецЕсли;

	Если (ПроверяемаяДата < НижняяГраницаДатыПоXSD)
			ИЛИ (ПроверяемаяДата > ВерхняяГраницаДатыПоXSD) Тогда

		ТекстОписанияОшибки = СтрокаГде + " неверно указана дата "
			+ РодПадежДатаЧего + " " + Формат(ПроверяемаяДата, "ДЛФ=ДД") + "!
			|Согласно схеме выгрузки ФСРАР значение должно быть в промежутке с "
			+ Формат(НижняяГраницаДатыПоXSD, "ДЛФ=ДД") + " по "
			+ Формат(ВерхняяГраницаДатыПоXSD, "ДЛФ=ДД") + ".";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ДатаВнеГраницСхемыXSD");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

		// Нет смысла проверять дальше.								
		Возврат Ложь;

	КонецЕсли;

	// Дополнительные проверки с точки зрения "здравого смысла".
	// Не будут препятствовать выгрузке, но пользователь сможет увидеть как предупреждение.
	Если ТипДаты = "Произвольный" Тогда

	// В случае произвольного типа дальше проверять есть смысл, если указаны
		// МинимальнаяДатаПредположительно или МаксимальнаяДатаПредположительно.
		Если МинимальнаяДатаПредположительно = Неопределено
				И МаксимальнаяДатаПредположительно = Неопределено Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЕсли;

	Если МинимальнаяДатаПредположительно = Неопределено
			ИЛИ МаксимальнаяДатаПредположительно = Неопределено Тогда

			// Определяем исходя из типа даты.
		Если ТипДаты = "Произвольный" Тогда

			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, НижняяГраницаДатыПоXSD, МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ВерхняяГраницаДатыПоXSD, МаксимальнаяДатаПредположительно);

		ИначеЕсли ТипДаты = "ДатаПодписи" Тогда
		// Логично предполагать, что Дата подписи не должна быть ранее конца периода отчета,
			// и не должна быть позже срока сдачи за следующий отчетный период.
			// Для отчетов ФСРАР - все отчеты квартальные, со сроком сдачи 20 число месяца, 
			// следующим за окончанием квартала.
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, ДатаКонцаОтчета, МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, КонецКвартала(ДатаКонцаОтчета
				+ 10 * 24 * 60 * 60) + 20 * 24 * 60
				* 60, МаксимальнаяДатаПредположительно);
		ИначеЕсли ТипДаты = "ДатаНакладной" Тогда
		// Логично предполагать, что Дата ТТН должна принадлежать периоду отчета,
			// хотя теоретически возможна ситуация отгрузки в прошлом квартале и оприходования
			// уже в следующем.
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, ДатаНачалаОтчета, МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ДатаКонцаОтчета, МаксимальнаяДатаПредположительно);
		ИначеЕсли ТипДаты = "ДатаУведомления" Тогда
		// Уведомление о поставке может быть задолго до самой поставки.
			// Но по идее, разница не может быть больше квартала.
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, НачалоКвартала(ДатаНачалаОтчета
				- 10 * 24 * 60 * 60), МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ДатаКонцаОтчета, МаксимальнаяДатаПредположительно);
		ИначеЕсли ТипДаты = "ДатаДокументаЛичности" Тогда
		// Предположим максимальный возраст человека, участвующего в хозяйственной деятельности 70 лет.
			// Паспорт он может получить в последний раз в 45 лет, водительские права выдаются на 10 лет, 
			// военный билет в 18 лет, но после 45 лет вероятность его предъявления крайне мала. 
			// Будем считать максимально возможным "возрастом" документа 30 лет.
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, ДобавитьМесяц(ДатаНачалаОтчета, -МаксимальныйВозрастДокументаЛичности
				* 12), МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ДатаКонцаОтчета, МаксимальнаяДатаПредположительно);
		ИначеЕсли ТипДаты = "ДатаКонцаДействияЛицензии" Тогда
		// Лицензия должна действовать в отчетный период, значит как минимум окончание действия должно быть
			// больше или равно даты начала отчета. Лицензии ФСРАР выдаются не более чем на 5 лет, 
			// значит даже если выдана лицензия в последний день периода отчета, 
			// она может быть максимум на 5 лет с этого момента.			
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, ДатаНачалаОтчета, МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ДобавитьМесяц(ДатаКонцаОтчета, МаксимальныйСрокЛицензииФСРАР
				* 12), МаксимальнаяДатаПредположительно);
		ИначеЕсли ТипДаты = "ДатаНачалаДействияЛицензии" Тогда
		// Логично предполагать, что минимальная дата - не более чем 5 лет от даты начала отчета,
			// и не позднее даты окончания отчета.
			МинимальнаяДатаПредположительно = ?(МинимальнаяДатаПредположительно = Неопределено, ДобавитьМесяц(ДатаНачалаОтчета, -МаксимальныйСрокЛицензииФСРАР
				* 12), МинимальнаяДатаПредположительно);
			МаксимальнаяДатаПредположительно = ?(МаксимальнаяДатаПредположительно = Неопределено, ДатаКонцаОтчета, МаксимальнаяДатаПредположительно);
		КонецЕсли;

	КонецЕсли;

	МинимальнаяДатаПредположительно = НачалоДня(МинимальнаяДатаПредположительно);
	МаксимальнаяДатаПредположительно = КонецДня(МаксимальнаяДатаПредположительно);

	Если (ПроверяемаяДата < МинимальнаяДатаПредположительно
			ИЛИ ПроверяемаяДата > МаксимальнаяДатаПредположительно)
		И 
		(НЕ (ТипДаты = "ДатаНакладной" ИЛИ ТипДаты = "ДатаНачалаДействияЛицензии"
		ИЛИ ТипДаты = "ДатаКонцаДействияЛицензии"))	Тогда
		
		ТекстОписанияОшибки = СтрокаГде
			+ " с высокой вероятностью неверно указана дата " + РодПадежДатаЧего + " "
			+ Формат(ПроверяемаяДата, "ДЛФ=ДД") + "!
			|Значение предположительно должно быть в промежутке с "
			+ Формат(МинимальнаяДатаПредположительно, "ДЛФ=ДД") + " по "
			+ Формат(МаксимальнаяДатаПредположительно, "ДЛФ=ДД") + ".
			|
			|Данное сообщение является предупреждением, препятствием для выгрузки отчета не является.
			|Тем не менее, настоятельно рекомендуется убедиться в правильности введенных данных.";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ДатаВнеГраницЗдравогоСмысла");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
				СтруктураСведенийДаты.МаксимальноеКоличествоПредупреждений, СтруктураСведенийДаты.ТекущееКоличествоПредупреждений);
		
	КонецЕсли;
	
	Если ПроверяемаяДата < ДатаНачалаОтчета
			ИЛИ ПроверяемаяДата > ДатаКонцаОтчета Тогда
			
		Если ТипДаты = "ДатаНакладной" Тогда

			ТекстОписанияОшибки = СтрокаГде + " неверно указана дата "
				+ РодПадежДатаЧего + " " + Формат(ПроверяемаяДата, "ДЛФ=ДД") + "!
				|Значение должно быть в промежутке с "
				+ Формат(ДатаНачалаОтчета, "ДЛФ=ДД") + " по "
				+ Формат(ДатаКонцаОтчета, "ДЛФ=ДД") + ".";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", Показатель);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "ДатаТТНВнеГраницОтчета");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
								СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

		ИначеЕсли ТипДаты = "ДатаНачалаДействияЛицензии" Тогда 
			
			Если ПроверяемаяДата > ДатаКонцаОтчета Тогда
				// Дата начала лицензии больше конца периода отчета.
				ТекстОписанияОшибки = СтрокаГде + " неверно указана дата "
					+ РодПадежДатаЧего + " " + Формат(ПроверяемаяДата, "ДЛФ=ДД") + "!
					|Дата " + РодПадежДатаЧего + " не может быть позже даты конца периода отчета "
					+ Формат(ДатаКонцаОтчета, "ДЛФ=ДД") + ".";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Показатель);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ДатаВыдачиБольшеПериодаОтчета");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

			КонецЕсли;
			
		ИначеЕсли ТипДаты = "ДатаКонцаДействияЛицензии" Тогда
			
			Если ПроверяемаяДата < ДатаНачалаОтчета Тогда	
				// Дата конца лицензии меньше начала периода отчета.
				ТекстОписанияОшибки = СтрокаГде + " неверно указана дата "
					+ РодПадежДатаЧего + " " + Формат(ПроверяемаяДата, "ДЛФ=ДД") + "!
					|Дата " + РодПадежДатаЧего + " не может быть раньше даты начала периода отчета "
					+ Формат(ДатаНачалаОтчета, "ДЛФ=ДД") + ".";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Показатель);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ДатаОкончанияМеньшеПериодаОтчета");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураОшибки, РежимОтладки,
										СтруктураСведенийДаты.МаксимальноеКоличествоОшибок, СтруктураСведенийДаты.ТекущееКоличествоОшибок);

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Формирует унифицированную для всех отчетов строку, которая определяет местонахождение ошибки в сообщении об ошибке.
//
// Параметры:
//
//		СтрВКакомРазделе 	- Строка - определяет раздел нахождения ошибки.
//							Например: "На Титульном листе", "В разделе Раздел II декларации".
//		НомерЛиста			- Число - Необязательный. Номер листа многостраничного раздела. 
//							Обязателен для многостраничных разделов и не обязателен в иных случаях.
//		СтрНомерСтроки		- Строка - Необязательный. Строка, содержащая номер строки таблицы, в которой обнаружена ошибка.
//							Обязателен для многострочных разделов и не обязателен в иных случаях.
//		ИмяТаблицы			- Строка - Необязательный. Название таблицы, в которой обнаружена ошибка.
//							Используется для многострочных разделов, обычно в случаях, 
//							когда на странице раздела имеется несколько таблиц.
//
// Возвращаемое значение:
//		Строка
//
Функция СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста = Неопределено,
		СтрНомерСтроки = Неопределено, ИмяТаблицы = Неопределено,
		РежимОтладки = Неопределено) Экспорт

		// Проверка основных параметров.
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки И (НЕ ТипЗнч(СтрВКакомРазделе) = Тип("Строка")) Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках() 
			|передана СтрВКакомРазделе, не являющаяся Строкой!";
	КонецЕсли;

	СтрНомерЛиста = ?(ТипЗнч(НомерЛиста) = Тип("Число"), СтрокаЧГ0(НомерЛиста), "");
	СтрНомерСтроки = ?(ТипЗнч(СтрНомерСтроки) = Тип("Строка")
		И ЗначениеЗаполнено(СтрНомерСтроки), СтрНомерСтроки, "");

	ВТаблице = ?(ТипЗнч(ИмяТаблицы) = Тип("Строка")
		И ЗначениеЗаполнено(ИмяТаблицы), ", в таблице " + ИмяТаблицы, "");

	СтрНаЛистеВСтрокеВТаблице = ?(ЗначениеЗаполнено(СтрНомерЛиста), ", на листе "
		+ СтрНомерЛиста, "") + ВТаблице
		+ ?(ЗначениеЗаполнено(СтрНомерСтроки), ", в строке " + СтрНомерСтроки, "");

	СтрНаЛистеВСтрокеВТаблице = ?(ЗначениеЗаполнено(СтрНаЛистеВСтрокеВТаблице), СтрНаЛистеВСтрокеВТаблице
		+ ",", СтрНаЛистеВСтрокеВТаблице);

	СтрГде = СтрВКакомРазделе + СтрНаЛистеВСтрокеВТаблице;

	Возврат СтрГде;

КонецФункции

Функция ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(АдресСтруктура, 
		ПроверитьАдрес = Истина, ПроверитьПринудительно = Истина, СоответствиеКешАдресов = Неопределено) Экспорт

	Если НЕ (ТипЗнч(АдресСтруктура) = Тип("Структура") 
			или ТипЗнч(АдресСтруктура) = Тип("ФиксированнаяСтруктура")) Тогда	
		ВызватьИсключение "В РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
						|передана в параметре АдресСтруктура не структура.";	
	КонецЕсли; 

	Если НЕ ТипЗнч(ПроверитьПринудительно) = Тип("Булево") Тогда
		ПроверитьПринудительно = Истина;
	КонецЕсли;
	
	Если ПроверитьПринудительно Тогда
		ПроверитьАдрес = Истина;	
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПроверитьАдрес) = Тип("Булево") Тогда
		ПроверитьАдрес = Истина;
	КонецЕсли;
	
	Если НЕ ПроверитьПринудительно Тогда
		
		ПроверенАдрес = НеобходимостьПроверкиАдреса(АдресСтруктура);
			
		Если ПроверенАдрес ИЛИ (НЕ ПроверитьАдрес) Тогда			
			// Нет смысла обновлять, адрес либо проверен по классификатору, либо проверка не требуется.				
			Возврат АдресСтруктура;		
		КонецЕсли; 
		
	КонецЕсли;	 
	
	АдресXML  = "";
	АдресJSON = "";
		
	ЕстьКлючАдресJSON = АдресСтруктура.Свойство("АдресJSON");
	ЕстьКлючАдресXML = АдресСтруктура.Свойство("АдресXML");
	
	Если НЕ (ЕстьКлючАдресJSON ИЛИ ЕстьКлючАдресXML) Тогда
	
		// Предпологаем структуру в формате 9 запятых.
		СтруктураАдреса9Запятых	= Новый Структура(
			"Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ТипДома, ТипКорпуса, ТипКвартиры");
		
		ЭтоФормат9Запятых = Истина;
		Для каждого КлючИЗначение Из СтруктураАдреса9Запятых Цикл		
			ЭтоФормат9Запятых = ЭтоФормат9Запятых И АдресСтруктура.Свойство(КлючИЗначение.Ключ);		
		КонецЦикла; 
		
		Если НЕ ЭтоФормат9Запятых Тогда		
			ВызватьИсключение "В РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
						|передана в параметре АдресСтруктура структура, которая не является структурой адресной информации.";		
		КонецЕсли;
		
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресСтруктура, , Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML, Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Иначе
		Если ЕстьКлючАдресJSON 
			И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресСтруктура.АдресJSON) Тогда			
			АдресJSON = АдресСтруктура.АдресJSON;			
		КонецЕсли;
		
		Если ЕстьКлючАдресXML 
			И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресСтруктура.АдресXML) Тогда			
			АдресXML = АдресСтруктура.АдресXML;			
		КонецЕсли;	
	КонецЕсли; 
	
	Если РегламентированнаяОтчетностьАЛКОКлиентСервер.XMLилиJSONНеПуст(АдресJSON) Тогда	
		// Перезаполняем адрес из JSON строки.
		АдресСтруктураИзXMLИлиJSON = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(
											АдресJSON, ПроверитьАдрес, СоответствиеКешАдресов);			
		
	ИначеЕсли РегламентированнаяОтчетностьАЛКОКлиентСервер.XMLилиJSONНеПуст(АдресXML) Тогда
		// Перезаполняем адрес из XML строки.
		АдресСтруктураИзXMLИлиJSON = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(
											АдресXML, ПроверитьАдрес, СоответствиеКешАдресов);		
	Иначе
		АдресСтруктураИзXMLИлиJSON = ПолучитьПустуюСтруктуруАдреса();		
	КонецЕсли;

	// АдресСтруктура может содержать не только адрес.
	// Аккуратно дополняем всей информацией из исходной структуры, не имеющей отношения к адресной информации.
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ОбъединитьСтруктурыИлиСоответствия(АдресСтруктура, АдресСтруктураИзXMLИлиJSON);
	
	АдресСтруктура.Вставить("ПредставлениеАдреса", АдресСтруктура.Представление);
	АдресСтруктура.Вставить("Адрес", АдресСтруктура.Представление);
	
	Возврат АдресСтруктура;
		
КонецФункции
 
// Проверяет поля адресной инофрмации деклараций сдаваемых в ФСРАР, 
// при обнаружении ошибки - формируется сообщение об ошибке процедурой СообщитьОбОшибкеЗаполнения().
//
// Параметры:
//
//	 	ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета.
//		ТаблицаСообщенийОбОшибках	- Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках().
//		ТаблицаСообщенийДляСведения - Таблица значений - изначально должна быть сформирована 
//									функцией СоздатьТаблицуСообщенийОбОшибках(). 
//		СтатусПроверки				- Булево - Флаг наличия ошибок при проверке выгрузки отчета.
//		АдресСтруктура				- Структура - проверяемое значение структуры адресной информации.
//									Поля структуры соответствуют структуре, получаемой при вызове
//									функции ПолучитьПустуюСтруктуруАдреса().
//
//		ВспомогательнаяСтруктураДанных	- Структура - структура вспомогательной информации.
//			* ИмяРаздела				- Строка - имя раздела отчета.
//
//			===== Необходимо наличие или ключа СтрокаГде или ключей СтрВКакомРазделе, НомерСтрокиСтроковый =========
//			* СтрокаГде					- Строка - Необязательный. Строка начала сообщений об ошибках, указывающая где
//										имено ошибка. Обычно генерируется функцией СтрокаГдеСообщенийОбОшибках()
//			* СтрВКакомРазделе			- Строка - Необязательный. Строка вида "В разделе Лицензии"
//			* НомерСтрокиСтроковый		- Строка - Необязательный. Номерстроки таблицы.
//			* ИмяТаблицы				- Строка - Необязательный. Пользовательское наименование проверяемой таблицы.
//          ========================================================================================================
//
//			* НомерЛиста                - Число  - Необязательный, если проверяются не поля Таблицы.
//										Номер листа многостраничного раздела.
//			* Показатель				- Строка - имя колонки таблицы с указанием номера строки,
//										содержащей проверяемое значение даты, 
//										или имя элемента формы отчета, содержащего проверяемое значение даты.
//			* РодПадежАдресЧего			- Строка - строка содержащая обозначение владельца поля адреса в родительском падеже,
//										например: "организации" или "получателя".
//
//			* ОписаниеСтруктурыАдресаИзОтчета	- Структура - Необязательный.
//										Поля структуры соответствуют структуре, получаемой при вызове
//										функции ПолучитьПустуюСтруктуруАдреса(). 
//										Может не содержать поля  АдресXML, КодСтраны
//										Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
//										При наличии перечисленных полей - они будут удалены!
//										Значениями всех полей структуры является структура вида:
//											* ПредставлениеПоля - осмысленное название поля адреса.
//											* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
//											* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
//											* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
//										В случае если ОписаниеСтруктурыАдресаИзОтчета не указана, используется структура по умолчанию.
//
//			* Обязательный				-  Булево - Необязательный. Признак, что проверяемый адрес обязателен к заполнению.
//										Значение по умолчанию Истина.
//			* ТолькоРоссия				- Булево - Необязательный. Признак, что проверяемый адрес должен быть российским.
//										Значение по умолчанию Ложь.
//			* ТолькоЕАЭС 				- Булево - Необязательный. Признак, что проверяемый адрес должен принадлежать 
//										одной из стран участниц ЕАЭС.
//										Значение по умолчанию Ложь.
//			* ТолькоИностранныйКромеЕАЭС- Булево - Необязательный. Признак, что проверяемый адрес должен быть иностранным, за  
//										за исключением стран участниц ЕАЭС.
//										Значение по умолчанию Ложь.
//			* ЛюбойИностранный			- Булево - Необязательный. Признак, что проверяемый адрес должен быть иностранным.
//										Значение по умолчанию Ложь.
//
// Возвращаемое значение:
//		Булево						Истина, если ошибки не найдены.
//
Функция ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения,
		СтатусПроверки,	АдресСтруктура, ВспомогательнаяСтруктураДанных,
		РежимОтладки = Неопределено, СоответствиеКешАдресов = Неопределено) Экспорт

	Перем ИмяРаздела, СтрВКакомРазделе, Показатель, НомерЛиста,
		НомерСтрокиСтроковый, РодПадежАдресЧего, ИмяТаблицы, Обязательный,
		ТолькоРоссия, ТолькоЕАЭС, ТолькоИностранныйКромеЕАЭС, ЛюбойИностранный,
		ОписаниеСтруктурыАдресаИзОтчета, СтрокаГде;

		// Проверка основных параметров.
		
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если РежимОтладки Тогда

		Если НЕ ТипЗнч(АдресСтруктура) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() 
				|передана АдресСтруктура, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ВспомогательнаяСтруктураДанных) = Тип("Структура") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() 
				|передана ВспомогательнаяСтруктураДанных, не являющаяся Структурой!";
		КонецЕсли;

		Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
		КонецЕсли;

		Если НЕ ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() 
				|передана ТаблицаСообщений, не являющаяся ТаблицаЗначений!";
		КонецЕсли;

	КонецЕсли;

	// Проверка вспомогательных параметров.
	////////////////////////////////////////////////////////////////////////////////////////
	// Проверка параметров, переданных в структуре.
	СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;

	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяРаздела", "Строка", "", "", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерЛиста", "Число", 0, "Неопределено", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрокаГде", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "СтрВКакомРазделе", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "НомерСтрокиСтроковый", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ИмяТаблицы", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "РодПадежАдресЧего", "Строка", "", "", РежимОтладки);
	// Тип строка, по умолчанию для незаполненного "", если не тот тип - тоже "".
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Показатель", "Строка", "", "", РежимОтладки);
	// Тип Структура, по умолчанию для незаполненного Неопределено, если не тот тип - тоже.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ОписаниеСтруктурыАдресаИзОтчета", "Структура", "Неопределено", "Неопределено", РежимОтладки);

	// Тип булево, по умолчанию для незаполненного Истина, если не тот тип - тоже Истина.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "Обязательный", "Булево", Истина, Истина, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТолькоРоссия", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТолькоЕАЭС", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТолькоИностранныйКромеЕАЭС", "Булево", Ложь, Ложь, РежимОтладки);
	// Тип булево, по умолчанию для незаполненного Ложь, если не тот тип - тоже Ложь.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ЛюбойИностранный", "Булево", Ложь, Ложь, РежимОтладки);

	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоОшибок", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "МаксимальноеКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);
	// Тип Число, по умолчанию для незаполненного 0, если не тот тип - Неопределено.
	ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, "ТекущееКоличествоПредупреждений", "Число", 0, "Неопределено", РежимОтладки);

	ПравильныеПараметрыВСтруктуре(ВспомогательнаяСтруктураДанных, СтруктураТиповИЗначенийПоУмолчанию, РежимОтладки);

	//
	////////////////////////////////////////////////////////////////////////////////////////
	ВспомогательнаяСтруктураДанных.Свойство("ИмяРаздела", ИмяРаздела);

	ВспомогательнаяСтруктураДанных.Свойство("СтрокаГде", СтрокаГде);

	Если НЕ (ТипЗнч(СтрокаГде) = Тип("Строка")
			И ЗначениеЗаполнено(СтрокаГде)) Тогда

		ВспомогательнаяСтруктураДанных.Свойство("СтрВКакомРазделе", СтрВКакомРазделе);
		ВспомогательнаяСтруктураДанных.Свойство("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
		ВспомогательнаяСтруктураДанных.Свойство("ИмяТаблицы", ИмяТаблицы);

		СтрокаГде = СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

	КонецЕсли;

	// Поля, заполненны только при проверке строчных и многостраничных разделов.
	ВспомогательнаяСтруктураДанных.Свойство("НомерЛиста", НомерЛиста);
	ВспомогательнаяСтруктураДанных.Свойство("Показатель", Показатель);

	ВспомогательнаяСтруктураДанных.Свойство("РодПадежАдресЧего", РодПадежАдресЧего);

	ВспомогательнаяСтруктураДанных.Свойство("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

	ВспомогательнаяСтруктураДанных.Свойство("Обязательный", Обязательный);
	Обязательный = ?(ТипЗнч(Обязательный) = Тип("Булево"), Обязательный, Истина);

	ВспомогательнаяСтруктураДанных.Свойство("ТолькоРоссия", ТолькоРоссия);
	ТолькоРоссия = ?(ТипЗнч(ТолькоРоссия) = Тип("Булево"), ТолькоРоссия, Ложь);

	ВспомогательнаяСтруктураДанных.Свойство("ТолькоЕАЭС", ТолькоЕАЭС);
	ТолькоЕАЭС = ?(ТипЗнч(ТолькоЕАЭС) = Тип("Булево"), ТолькоЕАЭС, Ложь);

	ВспомогательнаяСтруктураДанных.Свойство("ТолькоИностранныйКромеЕАЭС", ТолькоИностранныйКромеЕАЭС);
	ТолькоИностранныйКромеЕАЭС = ?(ТипЗнч(ТолькоИностранныйКромеЕАЭС) = Тип("Булево"), ТолькоИностранныйКромеЕАЭС, Ложь);

	ВспомогательнаяСтруктураДанных.Свойство("ЛюбойИностранный", ЛюбойИностранный);
	ЛюбойИностранный = ?(ТипЗнч(ЛюбойИностранный) = Тип("Булево"), ЛюбойИностранный, Ложь);

	// Если все признаки географического ограничения ложны - допускается любой адрес.
	Если ТолькоРоссия Тогда
		ТолькоЕАЭС = Ложь;
		ТолькоИностранныйКромеЕАЭС = Ложь;
		ЛюбойИностранный = Ложь;
	КонецЕсли;

	Если ТолькоЕАЭС Тогда
		ТолькоИностранныйКромеЕАЭС = Ложь;
		ЛюбойИностранный = Ложь;
	КонецЕсли;

	Если ТолькоИностранныйКромеЕАЭС Тогда
		ЛюбойИностранный = Ложь;
	КонецЕсли;

	Результат = Истина;
	АдресЗаполнен = Ложь;

	АдресРоссийский = Неопределено;
	АдресЕАЭС = Неопределено;
	АдресИностранныйКромеЕАЭС = Неопределено;
	АдресИностранный = Неопределено;

	КодСтраны = Неопределено;

	// Обязательные поля для российского и иностранного адресов.
	КодСтраныУказан = Ложь;
	КодРегионаУказан = Ложь;
	ПредставлениеУказано = Ложь;
	
	ПроверитьАдрес = Истина;
	АдресСтруктура = ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(АдресСтруктура, ПроверитьАдрес, Ложь, СоответствиеКешАдресов);

	Если АдресСтруктура.Свойство("КодСтраны") Тогда

		Если ЗначениеЗаполнено(АдресСтруктура.КодСтраны) Тогда

			КодСтраныУказан = Истина;

			КодСтраны = СокрЛП(АдресСтруктура.КодСтраны);

			АдресРоссийский = (КодСтраны = "643");

			// Страны ЕАЭС - Россия Белоруссия Армения Казахстан Киргизия 
			АдресЕАЭС = (КодСтраны = "643") ИЛИ (КодСтраны = "112")
				ИЛИ (КодСтраны = "051") ИЛИ (КодСтраны = "398") ИЛИ (КодСтраны = "417");

			АдресИностранныйКромеЕАЭС = НЕ АдресЕАЭС;

			АдресИностранный = НЕ АдресРоссийский;

			Если СтрДлина(КодСтраны) <> 3 Тогда

			// Ошибка - код страны должен состоять из 3 символов.
				ТекстОписанияОшибки = СтрокаГде
					+ " неверно заполнено поле ""Код Страны"" адреса " + РодПадежАдресЧего
					+ "!
					|Строка поля должна состоять из 3-х цифр.";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Показатель);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
				Результат = Ложь;

			КонецЕсли;

			Если НЕ ВСтрокеВсеЦифры(КодСтраны) Тогда

				ТекстОписанияОшибки = СтрокаГде
					+ " неверно заполнено поле ""Код Страны"" адреса " + РодПадежАдресЧего
					+ "! 
					|Строка поля должна состоять только из цифр.";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Показатель);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеверныеСимволыПоляАдреса");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
				Результат = Ложь;

			КонецЕсли;

			Если КодСтраны = "000" Тогда

				ТекстОписанияОшибки = СтрокаГде
					+ " неверно заполнено поле ""Код Страны"" адреса " + РодПадежАдресЧего
					+ "! 
					|Строка поля ""Код Страны"" адреса не должна быть равна ""000"".";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Показатель);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеверныеСимволыПоляАдреса");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
				Результат = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Определим заполнен ли адрес.
	АдресЗаполнен = ЗначениеЗаполнено(АдресСтруктура.Представление);
	
	Если НЕ (АдресЗаполнен ИЛИ Обязательный) Тогда

	// Если адрес не заполнен, очищаем код страны - он может быть присвоен.
		АдресСтруктура.Вставить("КодСтраны", "");
		АдресСтруктура.Вставить("КодРегиона", "");
		// Проверять нечего - незаполненный адрес для необязательного поля.
		Возврат Истина;

	КонецЕсли;

	Если (НЕ АдресЗаполнен) И Обязательный Тогда
	// Ошибка - не заполнен адрес.
		ТекстОписанияОшибки = СтрокаГде + " не заполнен адрес " + РодПадежАдресЧего
			+ "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеЗаполненАдрес");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		// Если адрес не заполнен, очищаем код страны - он может быть присвоен.
		АдресСтруктура.Вставить("КодСтраны", "");
		АдресСтруктура.Вставить("КодРегиона", "");
		
		Возврат Ложь;

	КонецЕсли;
	
	Если АдресСтруктура.Свойство("РезультатПроверкиАдреса") 
		И АдресСтруктура.РезультатПроверкиАдреса = "Ошибка"  Тогда
		
		ОшибкиПроверкиАдреса = "";
		Если ТипЗнч(АдресСтруктура.ОшибкиПроверкиАдреса) = Тип("СписокЗначений") Тогда
		
			Для каждого ЭлементСписка Из АдресСтруктура.ОшибкиПроверкиАдреса Цикл		
				ОшибкиПроверкиАдреса = ОшибкиПроверкиАдреса + "
										|" + ЭлементСписка.Представление;		
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(АдресСтруктура.ОшибкиПроверкиАдреса) = Тип("Строка") Тогда
			ОшибкиПроверкиАдреса = ОшибкиПроверкиАдреса + "
										|" + АдресСтруктура.ОшибкиПроверкиАдреса;
		КонецЕсли; 
		 
		Если НЕ ЗначениеЗаполнено(ОшибкиПроверкиАдреса) Тогда
			// Пустая строка, непонятно что.
			ОшибкиПроверкиАдреса = ОшибкиПроверкиАдреса + "
										|Неклассифицированная ошибка. 
										|Рекомендуется загрузить адресный классификатор по нужному региону, если не загружен,"
										+ " и ввести адрес ""с нуля"".";
		
		КонецЕсли; 
		
		ТекстОписанияОшибки = СтрокаГде + " при проверке адреса "
			+ РодПадежАдресЧего + " по адресному классификатору обнаружено:"
			+ ОшибкиПроверкиАдреса;

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "ОшибкаПоКлассификатору");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, 
									РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоПредупреждений, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоПредупреждений);		
	
	КонецЕсли; 

	Если НЕ КодСтраныУказан Тогда

	// Ошибка - не указан код страны.
		ТекстОписанияОшибки = СтрокаГде + " не заполнен код страны адреса "
			+ РодПадежАдресЧего + "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеУказанКодСтраны");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		Результат = Ложь;

	КонецЕсли;

	// Если есть ошибки в коде страны - дальше нет смысла проверять.
	Если НЕ Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проверим соответствие адреса по географическому признаку.
	Если ТолькоРоссия И АдресИностранный Тогда

	// Ошибка - вместо российского указан иностранный адрес.
		ТекстОписанияОшибки = СтрокаГде
			+ " вместо российского указан иностранный адрес " + РодПадежАдресЧего
			+ "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеАдресРФ");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		Результат = Ложь;

	КонецЕсли;

	Если ТолькоЕАЭС И АдресИностранныйКромеЕАЭС Тогда

	// Ошибка - вместо адреса ЕАЭС указан иностранный адрес не входящий в ЕАЭС.
		ТекстОписанияОшибки = СтрокаГде
			+ " вместо адреса, относящегося к одной из стран - участниц ЕАЭС, указан иной адрес "
			+ РодПадежАдресЧего + "!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеАдресЕАЭС");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		Результат = Ложь;

	КонецЕсли;

	Если ТолькоИностранныйКромеЕАЭС И АдресЕАЭС Тогда

	// Ошибка - вместо иностранный адреса не входящего в ЕАЭС, указан адрес ЕАЭС .
		ТекстОписанияОшибки = СтрокаГде
			+ " вместо иностранного адреса, не относящегося к странам - участницам ЕАЭС, указан адрес "
			+ РодПадежАдресЧего + ", относящийся к одной из стран - участниц ЕАЭС!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеАдресКромеЕАЭС");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		Результат = Ложь;

	КонецЕсли;

	Если ЛюбойИностранный И АдресРоссийский Тогда

	// Ошибка - вместо иностранный адреса, указан адрес РФ .
		ТекстОписанияОшибки = СтрокаГде + " вместо иностранного адреса "
			+ РодПадежАдресЧего + " указан российский адрес!";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Показатель);
		СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
		СтруктураОшибки.Вставить("ТипОшибки", "НеАдресИностранный");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
		Результат = Ложь;

	КонецЕсли;

	// Если есть ошибки в коде страны по географическому принципу - дальше нет смысла проверять.
	Если НЕ Результат Тогда
		Возврат Результат;
	КонецЕсли;

	// В этой точке алгоритма адрес всегда заполнен.

	// Проверим наличие обязательных полей.
	Если АдресРоссийский Тогда

	// Помимо кода страны обязательно поле код региона.
		Если АдресСтруктура.Свойство("КодРегиона") Тогда

			Если ЗначениеЗаполнено(АдресСтруктура.КодРегиона) Тогда

				КодРегионаУказан = Истина;

				КодРегиона = СокрЛП(АдресСтруктура.КодРегиона);

				Если СтрДлина(КодРегиона) <> 2 Тогда

				// Ошибка - код региона должен состоять из 2 символов.
					ТекстОписанияОшибки = СтрокаГде
						+ " неверно заполнено поле ""Код Региона"" российского адреса "
						+ РодПадежАдресЧего + "! 
						|Строка поля должна состоять из 2-х цифр.
						|Не вводите российский адрес в свободной форме диалога ввода адресной информации.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				КонецЕсли;

				Если НЕ ВСтрокеВсеЦифры(КодРегиона) Тогда

					ТекстОписанияОшибки = СтрокаГде
						+ " неверно заполнено поле ""Код Региона"" российского адреса "
						+ РодПадежАдресЧего + "! 
						|Строка поля должна состоять только из цифр.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверныеСимволыПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				КонецЕсли;

				Если КодРегиона = "00" Тогда

					ТекстОписанияОшибки = СтрокаГде
						+ " неверно заполнено поле ""Код Региона"" российского адреса "
						+ РодПадежАдресЧего + "! 
						|Строка поля ""Код Региона"" адреса не должна быть равна ""00"".";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверныеСимволыПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ КодРегионаУказан Тогда

		// Ошибка - не указано обязательное поле российского адреса.
			ТекстОписанияОшибки = СтрокаГде + " не заполнен код региона адреса "
				+ РодПадежАдресЧего + "!
				|Не вводите российский адрес в свободной форме диалога ввода адресной информации.";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", Показатель);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеУказанКодРегиона");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
			Результат = Ложь;

		КонецЕсли;

	Иначе
	// Иностранный адрес - должно быть заполнено поле ПредставлениеАдреса. Максимальная длина 1000 символов.
		Если АдресСтруктура.Свойство("ПредставлениеАдреса") Тогда

			Если ЗначениеЗаполнено(АдресСтруктура.ПредставлениеАдреса) Тогда

				ПредставлениеУказано = Истина;

				ПредставлениеАдреса = СокрЛП(АдресСтруктура.ПредставлениеАдреса);

				Если СтрДлина(ПредставлениеАдреса) > 1000 Тогда

				// Ошибка - ПредставлениеАдреса должен состоять не более чем из 1000 символов.
					ТекстОписанияОшибки = СтрокаГде + " неверно заполнен иностранный адрес "
						+ РодПадежАдресЧего + "! 
						|Длина строки адреса в свободной форме диалога ввода адресной информации не должна превышать 1000 символов.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ ПредставлениеУказано Тогда

		// Ошибка - не указано обязательное поле иностранного адреса.
			ТекстОписанияОшибки = СтрокаГде + " неверно заполнен иностранный адрес "
				+ РодПадежАдресЧего + "! 
				|Используйте свободную форму диалога ввода адресной информации для ввода иностранных адресов.";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
			СтруктураОшибки.Вставить("Показатель", Показатель);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НеЗаполненАдрес");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
			Результат = Ложь;

		КонецЕсли;

	КонецЕсли;

	// Контроль длин полей структуры адреса.
	// Имеет смысл только для российского адреса, введенного в режиме КЛАДРа.

	// Хотя для большинства стран ЕАЭС КЛАДР так же доступен, 
	// выгрузка всех иностранных адресов состоит только из кода страны и строки адреса.
	Если АдресРоссийский Тогда

		ОписаниеСтруктурыАдреса = ПолучитьПустуюСтруктуруАдреса();
		Для каждого КлючЗначение Из ОписаниеСтруктурыАдреса Цикл
			ОписаниеСтруктурыАдреса[КлючЗначение.Ключ] = Новый Структура("ПредставлениеПоля, МинДлина, МаксДлина, ТолькоЦифры");
		КонецЦикла;
		
		// Описание длин из описания адресов схем xsd выгрузок алкодеклараций.
		ОписаниеСтруктурыАдреса.Индекс.ПредставлениеПоля = """Индекс""";
		ОписаниеСтруктурыАдреса.Индекс.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Индекс.МаксДлина = 10;
		ОписаниеСтруктурыАдреса.Индекс.ТолькоЦифры = Истина;

		ОписаниеСтруктурыАдреса.Район.ПредставлениеПоля = """Район""";
		ОписаниеСтруктурыАдреса.Район.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Район.МаксДлина = 50;
		ОписаниеСтруктурыАдреса.Район.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Город.ПредставлениеПоля = """Город""";
		ОписаниеСтруктурыАдреса.Город.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Город.МаксДлина = 50;
		ОписаниеСтруктурыАдреса.Город.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.НаселенныйПункт.ПредставлениеПоля = """Населенный Пункт""";
		ОписаниеСтруктурыАдреса.НаселенныйПункт.МинДлина = 0;
		ОписаниеСтруктурыАдреса.НаселенныйПункт.МаксДлина = 50;
		ОписаниеСтруктурыАдреса.НаселенныйПункт.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Улица.ПредставлениеПоля = """Улица""";
		ОписаниеСтруктурыАдреса.Улица.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Улица.МаксДлина = 50;
		ОписаниеСтруктурыАдреса.Улица.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Дом.ПредставлениеПоля = """Дом""";
		ОписаниеСтруктурыАдреса.Дом.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Дом.МаксДлина = 20;
		ОписаниеСтруктурыАдреса.Дом.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Корпус.ПредставлениеПоля = """Корпус""";
		ОписаниеСтруктурыАдреса.Корпус.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Корпус.МаксДлина = 20;
		ОписаниеСтруктурыАдреса.Корпус.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Литера.ПредставлениеПоля = """Литера""";
		ОписаниеСтруктурыАдреса.Литера.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Литера.МаксДлина = 50;
		ОписаниеСтруктурыАдреса.Литера.ТолькоЦифры = Ложь;

		ОписаниеСтруктурыАдреса.Квартира.ПредставлениеПоля = """Квартира""";
		ОписаниеСтруктурыАдреса.Квартира.МинДлина = 0;
		ОписаниеСтруктурыАдреса.Квартира.МаксДлина = 20;
		ОписаниеСтруктурыАдреса.Квартира.ТолькоЦифры = Ложь;

		ТипЗначенияСтруктурыАдресаИзОтчета = ТипЗнч(ОписаниеСтруктурыАдресаИзОтчета);
		ОписаниеДействующейСтруктурыАдреса = ?(ТипЗначенияСтруктурыАдресаИзОтчета = Тип("Структура")
									ИЛИ ТипЗначенияСтруктурыАдресаИзОтчета = Тип("ФиксированнаяСтруктура"), 
									ОписаниеСтруктурыАдресаИзОтчета, ОписаниеСтруктурыАдреса);

		
		Для каждого КлючЗначение Из ОписаниеСтруктурыАдреса Цикл

			ИмяПоляАдреса = КлючЗначение.Ключ;

			Если АдресСтруктура.Свойство(ИмяПоляАдреса) Тогда

				ЗначениеПоляАдреса = АдресСтруктура[ИмяПоляАдреса];
				ДлинаПоляАдреса = СтрДлина(ЗначениеПоляАдреса);

				СтруктураОписанияПоля = ОписаниеДействующейСтруктурыАдреса[ИмяПоляАдреса];
				
				// Проверяем по ключу, который должен быть типом булево.
				Если СтруктураОписанияПоля.ТолькоЦифры = Неопределено Тогда				
					// Ключ ИмяПоляАдреса не относится к структуре адресной информации выгрузки.
					Продолжить;				
				КонецЕсли; 

				// При текущем описании полей, нет смысла проверять на минимальную длину,
				// но в будущем это может измениться, поэтому сразу заложим проверку минимальной длины.
				// Тоже самое в отношении фиксированной длины.
				Если (СтруктураОписанияПоля.МинДлина = СтруктураОписанияПоля.МаксДлина)
						И (ДлинаПоляАдреса <> СтруктураОписанияПоля.МаксДлина) Тогда

					ТекстОписанияОшибки = СтрокаГде + " неверно заполнено поле "
						+ СтруктураОписанияПоля.ПредставлениеПоля + " российского адреса "
						+ РодПадежАдресЧего + "! 
						|Строка поля должна состоять из " + СтруктураОписанияПоля.МаксДлина
						+ " символов.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				ИначеЕсли ДлинаПоляАдреса > СтруктураОписанияПоля.МаксДлина Тогда
					
					// Сначала пытаемся сократить.
					АдресСтруктура[ИмяПоляАдреса] 
						= СократитьПолеАдреса(АдресСтруктура[ИмяПоляАдреса], 
															ИмяПоляАдреса, СтруктураОписанияПоля.МаксДлина);
															
					ДлинаПоляАдреса = СтрДлина(АдресСтруктура[ИмяПоляАдреса]);

					Если ДлинаПоляАдреса > СтруктураОписанияПоля.МаксДлина Тогда
						
						ТекстОписанияОшибки = СтрокаГде + " неверно заполнено поле "
							+ СтруктураОписанияПоля.ПредставлениеПоля + " российского адреса "
							+ РодПадежАдресЧего + "! 
							|Строка поля должна состоять НЕ БОЛЕЕ чем из "
							+ СтруктураОписанияПоля.МаксДлина + " символов.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", Показатель);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);

						Результат = Ложь;
						
					КонецЕсли;

				ИначеЕсли ДлинаПоляАдреса < СтруктураОписанияПоля.МинДлина Тогда

					ТекстОписанияОшибки = СтрокаГде + " неверно заполнено поле "
						+ СтруктураОписанияПоля.ПредставлениеПоля + " российского адреса "
						+ РодПадежАдресЧего + "! 
						|Строка поля должна состоять НЕ МЕНЕЕ чем из "
						+ СтруктураОписанияПоля.МинДлина + " символов.";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НевернаяДлинаПоляАдреса");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
					Результат = Ложь;

				КонецЕсли;

				Если СтруктураОписанияПоля.ТолькоЦифры Тогда

					Если ЗначениеЗаполнено(ЗначениеПоляАдреса) И (НЕ ВСтрокеВсеЦифры(ЗначениеПоляАдреса)) Тогда

						ТекстОписанияОшибки = СтрокаГде + " неверно заполнено поле "
							+ СтруктураОписанияПоля.ПредставлениеПоля + " российского адреса "
							+ РодПадежАдресЧего + "! 
							|Строка поля должна состоять только из цифр.";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", Показатель);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НеверныеСимволыПоляАдреса");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
									СтруктураОшибки, РежимОтладки,
									ВспомогательнаяСтруктураДанных.МаксимальноеКоличествоОшибок, 
									ВспомогательнаяСтруктураДанных.ТекущееКоличествоОшибок);
									
						Результат = Ложь;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяет наличие данных в строке декларации.
//
// Параметры:
//		СтрокаДекларации 	- Любой агрегатный тип или строка таблицы, со сведениями строки декларации.
//		ИдГруппы			- Строка - Идентификатор многострочной группы отчета.
//		КоличествоКолонокВРазделе - Число. 
//
// Возвращаемое значение:
//		Булево						Истина, если имеются данные.
//
Функция СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы,
		КоличествоКолонокВРазделе, НачальныйИндекс = 1) Экспорт

	Для Индекс = НачальныйИндекс По КоличествоКолонокВРазделе Цикл

		СтрНомерКолонки = Формат(Индекс, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");

		Если ЗначениеЗаполнено(СтрокаДекларации[ИдГруппы + СтрНомерКолонки]) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Формирует уникальную для параметров организации строку, пригодную для использования
// в качестве ключа структуры.
//
// Параметры:
//
//	 	Наименование				- Строка - Необязательный. Наименование организации.
//		ИНН							- Строка - Необязательный. Строка ИНН организации. 
//		КПП							- Строка - Необязательный. Строка КПП организации.
//		ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации.
//
// Возвращаемое значение:
//		Строка.
//
Функция ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры(Наименование = Неопределено,
		ИНН = Неопределено, КПП = Неопределено,
		ПредставлениеАдреса = Неопределено) Экспорт

	ИдОрганизации = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);

	Результат = ХешСтрокойПригоднойДляКлючаСтруктуры(ИдОрганизации);

	Возврат Результат;

КонецФункции

// Проверяет содержимое результата проверки выгрузки отчета, сохраненного во временном хранилище.
//
// Параметры:
//
//	 	АдресВоВременномХранилище	- Строка. Адрес во временном хранилище.
//
// Возвращаемое значение:
//		Число	
// 				- 0 - нет ошибок
//				- 10 - только критические ошибки
//      		больше 10 - есть критические ошибки и  сообщения для сведения
//				меньше 10 - только сообщения для сведения
//      		- 100 - непредвиденная ошибка (в норме не должно возвращаться никогда).
//				
Функция ПолучитьРезультатПроверкиАЛКО(АдресВоВременномХранилище) Экспорт

	Если НЕ ТипЗнч(АдресВоВременномХранилище) = Тип("Строка") Тогда
		Возврат 100;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда

		Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);

	Иначе
		Возврат 100;
	КонецЕсли;

	// Результат  Структура
	// - РезультатОперации
	// - ПредставлениеОшибок
	// - ПредставлениеСообщенийДляСведения
	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		РезультатОперации = Неопределено;
		Результат.Свойство("РезультатОперации", РезультатОперации);

		Если РезультатОперации = Неопределено Тогда
			РезультатОперации = 100;
		КонецЕсли;

		Возврат РезультатОперации;

	Иначе

	// Что то пошло не так.		
		Возврат 100;

	КонецЕсли;

КонецФункции

Процедура УдалитьИзВременногоХранилищаАдресаАЛКО(Форма, ОсновнойАдрес,
		ВспомогательныйАдрес, АдресДвоичныхДанных) Экспорт

	Если ОсновнойАдрес Тогда

		Если Форма.СтруктураРеквизитовФормы.Свойство("АдресВоВременномХранилище") Тогда

			Если ЭтоАдресВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
				УдалитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ВспомогательныйАдрес Тогда

		Если Форма.СтруктураРеквизитовФормы.Свойство("ВспомогательныйАдресВоВременномХранилище") Тогда

			Если ЭтоАдресВременногоХранилища(Форма.СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище) Тогда
				УдалитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.ВспомогательныйАдресВоВременномХранилище);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если АдресДвоичныхДанных Тогда

		Если Форма.СтруктураРеквизитовФормы.Свойство("АдресХранилищаДвоичныхДанных") Тогда

			Если ЭтоАдресВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных) Тогда
				УдалитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьУсловныеЭлементыАЛКО(Знач ПараметрыВыгрузки, Узел,
		ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки,
		ВерсияБСПЧислом = Неопределено) Экспорт

	КоличествоСтрок = Узел.Строки.Количество();

	Для Инд = 1 По КоличествоСтрок Цикл

		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);

		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполненоАЛКО(ПараметрыВыгрузки, ТекСтр.Условие, , ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом) Тогда

				Узел.Строки.Удалить(ТекСтр);
				Продолжить;

			КонецЕсли;
		КонецЕсли;

		ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, ТекСтр, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента) Экспорт

	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция СкопироватьУзелАЛКО(Родитель, Узел) Экспорт

	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");

	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзелАЛКО(НовыйУзел, Стр);
	КонецЦикла;

	Возврат НовыйУзел;

КонецФункции

Функция НовыйУзелИзПрототипаАЛКО(ПрототипУзла) Экспорт

	РодительУзла = ПрототипУзла.Родитель;

	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");

	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзелАЛКО(НовыйУзел, Стр);
	КонецЦикла;

	Возврат НовыйУзел;

КонецФункции

Функция ИдентификаторОП_АЛКО(СведенияОП) Экспорт

	Если СведенияОП <> Неопределено И (ЗначениеЗаполнено(СведенияОП.КПП)
			Или ЗначениеЗаполнено(СведенияОП.Наименование)
			Или ЗначениеЗаполнено(СведенияОП.ПредставлениеАдреса)) Тогда

		Наименование_ОП = СведенияОП.Наименование;
		КПП_ОП = СведенияОП.КПП;
		Адрес = СведенияОП.ПредставлениеАдреса;

		ИдОП = ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры(Наименование_ОП, , КПП_ОП, Адрес);

	Иначе
		ИдОП = ПолучитьХешИдОрганизацииСтрокойПригоднойДляКлючаСтруктуры("", , "", "");
	КонецЕсли;

	Возврат ИдОП;

КонецФункции

Процедура ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя) Экспорт

	Если Узел = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(Узел.МаксРазмерность < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), Узел.МаксРазмерность)), СокрЛП(ЗначениеПоказателя));

	ИначеЕсли Узел.Формат = "N" Тогда

		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";

		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=")
				+ ";";
		КонецЕсли;

		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=")
				+ ";";
		КонецЕсли;

		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));

	ИначеЕсли Узел.Формат = "gYear" Тогда

		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	Иначе
		Узел.Значение = ЗначениеПоказателя;
	КонецЕсли;

КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел) Экспорт

	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Стр);
	КонецЦикла;

	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда

		Если (Найти(Узел.Обязательность, "Н") <> 0
				ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПустАЛКО(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0
				ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПустАЛКО(Узел) И ?(Найти(Узел.Обязательность, "О") <> 0
				ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента,
		ЗначениеЭлемента) Экспорт

	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлементАЛКО(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML_АЛКО(ПодчиненныйЭлемент, ЗначениеЭлемента);

КонецПроцедуры

Функция ПроверитьДанныеАЛКО(Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений,
		СтатусПроверки) Экспорт

	СтатусПроверкиПоФормату = Истина;

	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФорматуАЛКО(Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки) Тогда
			СтатусПроверкиПоФормату = Ложь;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверкиПоФормату = (ПроверитьДанныеАЛКО(Стр, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки)
			И СтатусПроверкиПоФормату); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;

	Возврат СтатусПроверкиПоФормату;

КонецФункции
#КонецОбласти

#Область ПрограммныйИнтерфейсЗаполнение

// Возвращает общий хеш SHA256 переданных в списке данных.
//
// Параметры:
//
//		Данные - Список Значений.
//
// Возвращаемое значение:
//		Хеш SHA256.
//
Функция ПолучитьХешИдДанных(Данные, Разделитель = "_") Экспорт

	Если ТипЗнч(Данные) = Тип("СписокЗначений") Тогда

		ИдДанных = ПолучитьИдДанных(Данные, Разделитель);
		Возврат ПолучитьХешSHA256(ИдДанных);

	Иначе

		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПолучитьХешИдДанных(Данные) должен быть передан 
			|в качестве аргумента Список Значений. Однако передано иное."
	КонецЕсли;

КонецФункции

// Формирует структуру, содержащую уникальные для поставщика строки, идентифицирующие
// поставщика и лицензию поставщика.
//
// Параметры:
//
//		СтруктураСведений			- Структура
//	 		* Наименование					- Строка - Необязательный. Наименование организации поставщика.
//			* ИНН							- Строка - Необязательный. Строка ИНН организации поставщика. 
//			* КПП							- Строка - Необязательный. Строка КПП организации поставщика.
//			* ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации поставщика.
//			* Номер							- Строка - Необязательный. Номер лицензии поставщика.
//			* Серия							- Строка - Необязательный. Серия лицензии поставщика.
//			* ДатаВыдачи					- Дата   - Необязательный. Дата выдачи (начала действия) лицензии поставщика.
//			* ДатаВыдачи					- Дата   - Необязательный. Дата окончания лицензии поставщика.
//			* КемВыдана 					- Строка - Необязательный. Наименование органа, выдавшего лицензию.
//
// Возвращаемое значение:
//		Структура.
//			* ХешИдПоставщика	- Строка - Хеш SHA256 сведений поставщика.
//			* ХешИдЛицензии		- Строка - Хеш SHA256 сведений лицензии поставщика.
//
Функция ПолучитьВсеИдПоставщика(СтруктураСведений) Экспорт

	Перем Наименование, ИНН, КПП, ПредставлениеАдреса, Номер, Серия, ДатаВыдачи,
		ДатаОкончания, КемВыдана;

	СтруктураСведений.Свойство("Наименование", Наименование);
	СтруктураСведений.Свойство("ИНН", ИНН);
	СтруктураСведений.Свойство("КПП", КПП);
	СтруктураСведений.Свойство("ПредставлениеАдреса", ПредставлениеАдреса);
	СтруктураСведений.Свойство("Номер", Номер);
	СтруктураСведений.Свойство("Серия", Серия);
	СтруктураСведений.Свойство("ДатаВыдачи", ДатаВыдачи);
	СтруктураСведений.Свойство("ДатаОкончания", ДатаОкончания);
	СтруктураСведений.Свойство("КемВыдана", КемВыдана);

	ХешИдПоставщика = ПолучитьХешИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	ХешИдПолучателя = ХешИдПоставщика;
	ХешИдЛицензии = ПолучитьХешИдЛицензии(ХешИдПоставщика, Номер, Серия, ДатаВыдачи, ДатаОкончания, КемВыдана);

	Результат = Новый Структура;
	Результат.Вставить("ХешИдПоставщика", ХешИдПоставщика);
	Результат.Вставить("ХешИдПолучателя", ХешИдПолучателя);
	Результат.Вставить("ХешИдЛицензии", ХешИдЛицензии);

	Возврат Результат;

КонецФункции

// Формирует структуру, содержащую уникальные для производителя и пары производитель-код продукции
// строки, идентифицирующие производителя и пару производитель-код продукции.
//
// Параметры:
//
//			КодПродукции                - Строка - Необязательный. Код продукции.
//	 		Наименование				- Строка - Необязательный. Наименование организации производителя.
//			ИНН							- Строка - Необязательный. Строка ИНН организации производителя. 
//			КПП							- Строка - Необязательный. Строка КПП организации производителя.
//			ПредставлениеАдреса			- Строка - Необязательный. Строка представления адреса организации производителя.
//
// Возвращаемое значение:
//		Структура.
//			* ХешИдПроизводителя	- Строка - Хеш SHA256 сведений производителя.
//			* ХешИдКодПродПроизв	- Строка - Хеш SHA256 сведений пары производитель - код продукции.
//
Функция ПолучитьВсеИдПроизводителя(КодПродукции = Неопределено,
		Наименование = Неопределено, ИНН = Неопределено, КПП = Неопределено,
		ПредставлениеАдреса = Неопределено) Экспорт

	ПреобразованнаяСтрокаКодПр = КодПродукции;
	ПреобразованнаяСтрокаКодПр = ?(ПреобразованнаяСтрокаКодПр = Неопределено, "", ПреобразованнаяСтрокаКодПр);

	ИдПроизводителя = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);

	ИдКодПродуктаПроизводителя = ПреобразованнаяСтрокаКодПр + "\"
		+ ИдПроизводителя;

	ХешИдПроизводителя = ПолучитьХешSHA256(ИдПроизводителя);
	ХешИдКодПродПроизв = ПолучитьХешSHA256(ИдКодПродуктаПроизводителя);

	Результат = Новый Структура;
	Результат.Вставить("ХешИдПроизводителя", ХешИдПроизводителя);
	Результат.Вставить("ХешИдКодПродПроизв", ХешИдКодПродПроизв);

	Возврат Результат;

КонецФункции

Функция ХешИдКодПродПроцСпирта(КодПродукции = Неопределено,
		ПроцентСпирта = Неопределено) Экспорт

	ПреобразованнаяСтрокаКодПр = КодПродукции;
	ПреобразованнаяСтрокаКодПр = ?(ЗначениеЗаполнено(ПреобразованнаяСтрокаКодПр), ПреобразованнаяСтрокаКодПр, "");

	Если ТипЗнч(ПроцентСпирта) = Тип("Число") Тогда
		СтрокаПроцентСпирта = Формат(ПроцентСпирта, "ЧЦ=15; ЧДЦ=5; ЧН=; ЧГ=0");
	ИначеЕсли ТипЗнч(ПроцентСпирта) = Тип("Строка") Тогда
		СтрокаПроцентСпирта = ПроцентСпирта;
	Иначе
		СтрокаПроцентСпирта = "0";
	КонецЕсли;

	ИдКодПродПроцСпирта = ПреобразованнаяСтрокаКодПр + "\" + СтрокаПроцентСпирта;
	ИдКодПродПроцСпирта = ПолучитьДопустимуюСтроку(ИдКодПродПроцСпирта);

	Результат = ПолучитьХешSHA256(ИдКодПродПроцСпирта);

	Возврат Результат;

КонецФункции

Функция ХешИдТранспортногоСредства(ТипТС = Неопределено,
		РегистрационныйНомерТС = Неопределено,
		ГрузоподъемностьТС = Неопределено) Экспорт

	Данные = Новый СписокЗначений;
	Данные.Добавить(ТипТС);
	Данные.Добавить(РегистрационныйНомерТС);
	Данные.Добавить(ГрузоподъемностьТС);

	Возврат ПолучитьХешИдДанных(Данные)
КонецФункции

// Дополняет таблицу значений недостающими колонками, которые соответствуют
// стандартным реквизитам, измерениям, ресурсам и реквизитам регистра.
//
// Параметры:
//
//	 	ИмяРегистра					- Строка - имя регистра сведений.
//		ТаблЗнач					- Таблица значений.
//
Процедура ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистра, ТаблЗнач) Экспорт

	СтруктураРегистра = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);

	Для каждого ЭлементСтруктуры Из СтруктураРегистра Цикл

		ИмяКолонки = ЭлементСтруктуры.Ключ;

		Если ТаблЗнач.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ТаблЗнач.Колонки.Добавить(ИмяКолонки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Вносит изменения в реквизиты формы отчета после заполнения регистров сведений данными на основании данных ИБ.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма заполняемого отчета ФСРАР.
//
Процедура ЗагрузитьПодготовленныеДанныеАвтоЗаполненияАЛКО(Форма) Экспорт

	Если Форма.НомерАлкоОтчета = 11 или Форма.НомерАлкоОтчета = 12 Тогда
	
		ЗагрузитьПодготовленныеДанныеАвтоЗаполнения11_12(Форма);	
	
	КонецЕсли;
	
	Если Форма.НомерАлкоОтчета = 25 или Форма.НомерАлкоОтчета = 26 Тогда
	
		ЗагрузитьПодготовленныеДанныеАвтоЗаполнения25_26(Форма);
	
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсВыводСтраницы

// Выводит титульный лист отчета ФСРАР.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ЗаполнитьТитульныйАЛКО(Форма) Экспорт

	Форма.Элементы.ГруппаПанельОтправки.Видимость = Истина;

	Форма.ОрганизацияОтчета = Форма.СтруктураРеквизитовФормы.Организация;

	НужноВыставитьПБОЮЛ = Ложь;
	Если НЕ Форма.СтруктураДанныхТитульный.Свойство("ЭтоПБОЮЛ") Тогда
		НужноВыставитьПБОЮЛ = Истина;
	ИначеЕсли Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ = Неопределено Тогда
		НужноВыставитьПБОЮЛ = Истина;
	КонецЕсли;

	Если НужноВыставитьПБОЮЛ Тогда
		Форма.СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
	КонецЕсли;

	// Сразу отключим ненужные поля - ГлавБух не нужен для ИП и в Заявлении о корректировке и прочих формах уведомлений-заявлений.
	Форма.Элементы.ГлавныйБухгалтер.Видимость = НЕ (Форма.ЭтоПБОЮЛ
		ИЛИ (Форма.НомерАлкоОтчета = 0) ИЛИ (Форма.НомерАлкоОтчета >= 1000));

	Форма.Элементы.КПП.Видимость = НЕ (Форма.ЭтоПБОЮЛ
		ИЛИ (Форма.НомерАлкоОтчета = 1000));

	Если НЕ Форма.Элементы.Найти("ГражданинПодсобноеХозяйство") = Неопределено Тогда

		Форма.Элементы.ГражданинПодсобноеХозяйство.Видимость = Форма.ЭтоПБОЮЛ;
		Форма.ЭтоЛичноеХозяйство = Ложь;

		Если Форма.ЭтоПБОЮЛ Тогда

			ЭтоЛичноеХозяйство = Неопределено;
			Форма.СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство", ЭтоЛичноеХозяйство);

			Если ЭтоЛичноеХозяйство = Неопределено Тогда
				ЭтоЛичноеХозяйство = Ложь;
			КонецЕсли;

			Форма.ЭтоЛичноеХозяйство = ЭтоЛичноеХозяйство;

		КонецЕсли;

		Форма.СтруктураДанныхТитульный.Вставить("ЭтоЛичноеХозяйство", Форма.ЭтоЛичноеХозяйство);

	КонецЕсли;

	Форма.ОрганизацияНаименованиеПолное = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргНазв", Форма.ОрганизацияНаименованиеПолное);

	Форма.ОрганизацияНаименованиеСокращенное = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргНазвСокращ", Форма.ОрганизацияНаименованиеСокращенное);

	Форма.ОрганизацияИНН = "";
	Форма.СтруктураДанныхТитульный.Свойство("ИНН1", Форма.ОрганизацияИНН);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияИНН) Тогда
		Форма.ОрганизацияИНН = "Заполнить";
	КонецЕсли;

	Форма.ОрганизацияКПП = "";
	Форма.СтруктураДанныхТитульный.Свойство("КПП1", Форма.ОрганизацияКПП);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияКПП) Тогда
		Форма.ОрганизацияКПП = "Заполнить";
	КонецЕсли;

	Форма.КудаПредставляется = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргИМНС", Форма.КудаПредставляется);

	КолПрил = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("Прил", КолПрил);

	Если НЕ (ТипЗнч(КолПрил) = Тип("Строка") или ТипЗнч(КолПрил) = Тип("Булево")
			или ТипЗнч(КолПрил) = Тип("Число")) Тогда
		КолПрил = 0;
	ИначеЕсли ТипЗнч(КолПрил) = Тип("Строка") Тогда

		КолПрил = СтрЗаменить(КолПрил, " ", "");
		КолПрил = СтрЗаменить(КолПрил, "-", "");
		КолПрил = СтрЗаменить(КолПрил, "+", "");

		Если НЕ ВСтрокеВсеЦифры(КолПрил) Тогда
			КолПрил = 0;
		КонецЕсли;

	КонецЕсли;

	Форма.КоличествоСтраницПодтверждающихДокументов = Число(КолПрил);

	ЗаполнитьОтчетныйПериодСГодомАЛКО(Форма);

	Форма.НомерКорректировки = "";
	Форма.СтруктураДанныхТитульный.Свойство("НомКорр", Форма.НомерКорректировки);

	ОргПочтовыйИндекс = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("ПочтовыйИндекс", ОргПочтовыйИндекс);
	Если НЕ ЗначениеЗаполнено(ОргПочтовыйИндекс) Тогда
		ОргПочтовыйИндекс = 0;
	КонецЕсли;

	Форма.ОрганизацияПочтовыйИндекс = Формат(Число(ОргПочтовыйИндекс), "ЧЦ=6; ЧГ=; ЧВН=");

	ОргКодРегиона = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("КодРегиона", ОргКодРегиона);
	Если НЕ ЗначениеЗаполнено(ОргКодРегиона) Тогда
		ОргКодРегиона = 0;
	КонецЕсли;

	Форма.ОрганизацияКодРегиона = Формат(Число(ОргКодРегиона), "ЧЦ=2; ЧВН=");

	ОргТелОрганизации = "";
	Форма.СтруктураДанныхТитульный.Свойство("ТелОрганизации", ОргТелОрганизации);
	// Заполним общую строку адреса.
	Форма.ОрганизацияПолныйАдресТелефон = "";
	Форма.ОрганизацияПолныйАдресТелефон = Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса
		+ ", тел.: "
		+ ?(ЗначениеЗаполнено(ОргТелОрганизации), ОргТелОрганизации, "");

	АдресБезЗапятых = СтрЗаменить(Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса, ",", "");
	Если НЕ ЗначениеЗаполнено(АдресБезЗапятых) Тогда
		Форма.ОрганизацияПолныйАдресТелефон = "Заполнить";
	КонецЕсли;

	ПредставлениеАдресаОрганизации = СокрЛП(Форма.ДополнительныеДанные.Титульный.АдресОрганизации.ПредставлениеАдреса);
	Форма.СтруктураДанныхТитульный.Вставить("ПредставлениеАдресаОрганизации", ПредставлениеАдресаОрганизации);

	Если НЕ Форма.Элементы.Найти("МестоОсуществленияДеятельности") = Неопределено Тогда

		Форма.ОрганизацияМестоОсуществленияДеятельности = "";
		Если НЕ Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельности", Форма.ОрганизацияМестоОсуществленияДеятельности) Тогда

			Форма.Модифицированность = Истина;

			// Если был импорт из старого формата, данные по месту очуществления деятельности могут быть
			// в полях МестоДеятельностиОрганизации или МестоДеятельностиИП или АдресМестаДеятИП или АдресМестаДеятОрг.
			// В этом случае извлечем данные, запишем в поле МестоДеятельности и после этого удалим старые поля.
			Если Форма.ЭтоПБОЮЛ Тогда

				Если Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиИП") Тогда
					Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиИП", Форма.ОрганизацияМестоОсуществленияДеятельности);
					Форма.СтруктураДанныхТитульный.Удалить("МестоДеятельностиИП");
				ИначеЕсли Форма.СтруктураДанныхТитульный.Свойство("АдресМестаДеятИП") Тогда
					Форма.СтруктураДанныхТитульный.Свойство("АдресМестаДеятИП", Форма.ОрганизацияМестоОсуществленияДеятельности);
					Форма.СтруктураДанныхТитульный.Удалить("АдресМестаДеятИП");
				КонецЕсли;

			Иначе

				Если Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиОрганизации") Тогда
					Форма.СтруктураДанныхТитульный.Свойство("МестоДеятельностиОрганизации", Форма.ОрганизацияМестоОсуществленияДеятельности);
					Форма.СтруктураДанныхТитульный.Удалить("МестоДеятельностиОрганизации");
				ИначеЕсли Форма.СтруктураДанныхТитульный.Свойство("АдресМестаДеятОрг") Тогда
					Форма.СтруктураДанныхТитульный.Свойство("АдресМестаДеятОрг", Форма.ОрганизацияМестоОсуществленияДеятельности);
					Форма.СтруктураДанныхТитульный.Удалить("АдресМестаДеятОрг");
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияМестоОсуществленияДеятельности) Тогда

			Форма.ОрганизацияМестоОсуществленияДеятельности = "Заполнить";
			Форма.СтруктураДанныхТитульный.Вставить("МестоДеятельности", "");
			АдресМестаДеятельности = ПолучитьПустуюСтруктуруАдреса();

			Форма.ДополнительныеДанные.Титульный.Вставить("АдресМестаДеятельности", АдресМестаДеятельности);

		Иначе
			Форма.СтруктураДанныхТитульный.Вставить("МестоДеятельности", Форма.ОрганизацияМестоОсуществленияДеятельности);
		КонецЕсли;

		Если НЕ Форма.ДополнительныеДанные.Титульный.Свойство("АдресМестаДеятельности") Тогда

			Форма.Модифицированность = Истина;

			Если ЗначениеЗаполнено(Форма.СтруктураДанныхТитульный.МестоДеятельности) Тогда

				АдресМестаДеятельности = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(Форма.СтруктураДанныхТитульный.МестоДеятельности, Истина);
			Иначе
				АдресМестаДеятельности = ПолучитьПустуюСтруктуруАдреса();
			КонецЕсли;

			Форма.ДополнительныеДанные.Титульный.Вставить("АдресМестаДеятельности", АдресМестаДеятельности);

		КонецЕсли;

		// Адрес всегда российский.
		Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности.Вставить("КодСтраны", "643");
		Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности.Вставить("Страна", "РОССИЯ");

	КонецЕсли;

	Форма.ОрганизацияЭлектронныйАдрес = "";
	Форма.СтруктураДанныхТитульный.Свойство("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);

	// Руководители.
	Форма.ОрганизацияРуководитель = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргДиректор", Форма.ОрганизацияРуководитель);

	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияРуководитель) Тогда
		Форма.СтруктураДанныхТитульный.Свойство("ОргИндивидуальныйПредприниматель", Форма.ОрганизацияРуководитель);
	КонецЕсли;

	// В поле ОргДиректор всегда сохраняем ФИО руководителя, даже если ИП.
	Форма.СтруктураДанныхТитульный.Вставить("ОргДиректор", Форма.ОрганизацияРуководитель);

	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияРуководитель) Тогда
		Форма.ОрганизацияРуководитель = "Заполнить";
	КонецЕсли;

	Форма.ОрганизацияГлавБух = "";
	Форма.СтруктураДанныхТитульный.Свойство("ОргБухгалтер", Форма.ОрганизацияГлавБух);
	Если НЕ ЗначениеЗаполнено(Форма.ОрганизацияГлавБух) Тогда
		Форма.ОрганизацияГлавБух = "Заполнить";
	КонецЕсли;

	// ДатаПодписи.
	ДатаПодписиСтруктураДанных = Неопределено;
	Форма.СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписиСтруктураДанных);

	Если НЕ Форма.НужноСкопировать Тогда
		Форма.ДатаПодписи = ?(ДатаПодписиСтруктураДанных = Неопределено, Форма.ДатаПодписи, ДатаПодписиСтруктураДанных);
	КонецЕсли;

	Если Форма.ДатаПодписи <> ДатаПодписиСтруктураДанных Тогда
		Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);
	КонецЕсли;

	// Специфические реквизиты Заявления о крректировке.
	Если Форма.НомерАлкоОтчета = 0 Тогда

		ПринудительноЗаполнить = (Форма.НужноСкопировать ИЛИ Форма.БылИмпорт);
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗагрузитьРекивизитыЗаявленияОКорректировкиАЛКО(Форма.СтруктураРеквизитовФормы, Форма.СтруктураДанныхТитульный, ПринудительноЗаполнить);

		СданныйАлкоОтчет = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("СданныйАлкоОтчет", СданныйАлкоОтчет);

		// Проверка со стороны декларации - сданного отчета.
		ЗаявлениеОКорректировке = ПолучитьЗаявлениеОКорректировкеПоЖурналу(СданныйАлкоОтчет);

		Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда

			Если НЕ Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка = ЗаявлениеОКорректировке Тогда

				СданныйАлкоОтчет = Неопределено;

			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(СданныйАлкоОтчет) Тогда
			Форма.СданныйАлкоОтчетПредставление = Строка(СданныйАлкоОтчет);
		Иначе
			Форма.СданныйАлкоОтчетПредставление = "Заполнить";
		КонецЕсли;

		Форма.СданныйАлкоОтчет = СданныйАлкоОтчет;

		НомерПриложения = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("НомерПриложения", НомерПриложения);

		Если ЗначениеЗаполнено(НомерПриложения) Тогда
			
			Форма.НомерПриложения = НомерПриложения;
			ЭтоОтчет2019года = (Число(НомерПриложения) > 18);
						
			СтрокаНомерПриложения = ?(ЭтоОтчет2019года, Строка(Число(НомерПриложения) - 18), Строка(НомерПриложения));
			Форма.НомерПриложенияПредставление = "Приложение № " + СтрокаНомерПриложения;
			
		КонецЕсли;

		ИсходящийНомер = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("ИсходящийНомер", ИсходящийНомер);

		Форма.ИсходящийНомер = ИсходящийНомер;

		Обоснования = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("Обоснования", Обоснования);

		Форма.Обоснования = Обоснования;

	ИначеЕсли Форма.НомерАлкоОтчета = 1000 Тогда

		Форма.ДатаНачалаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("ДатаНачалаУведомления", Форма.ДатаНачалаУведомления);

		Форма.ДатаКонцаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("ДатаКонцаУведомления", Форма.ДатаКонцаУведомления);

		Форма.ВремяНачалаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("ВремяНачалаУведомления", Форма.ВремяНачалаУведомления);

		Форма.ВремяКонцаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Свойство("ВремяКонцаУведомления", Форма.ВремяКонцаУведомления);

		Форма.НомерКонтактногоТелефона = "";
		Форма.СтруктураДанныхТитульный.Свойство("НомерКонтактногоТелефона", Форма.НомерКонтактногоТелефона);

		Форма.ДобНомер = "";
		Форма.СтруктураДанныхТитульный.Свойство("ДобНомер", Форма.ДобНомер);

		Форма.ПереключательПредставителя = 0;
		Форма.СтруктураДанныхТитульный.Свойство("ПереключательПредставителя", Форма.ПереключательПредставителя);
		Если НЕ ЗначениеЗаполнено(Форма.ПереключательПредставителя) Тогда
			Форма.ПереключательПредставителя = 2;
		КонецЕсли;

		Форма.Представитель = "";
		Форма.СтруктураДанныхТитульный.Свойство("Представитель", Форма.Представитель);

		Форма.НаименованиеДокумента = "";
		Форма.СтруктураДанныхТитульный.Свойство("НаименованиеДокумента", Форма.НаименованиеДокумента);

		Форма.НомерКорректировкиУведомления = 0;
		Форма.СтруктураДанныхТитульный.Свойство("НомерКорректировкиУведомления", Форма.НомерКорректировкиУведомления);

		Форма.ЭтоОтмена = Ложь;
		Форма.СтруктураДанныхТитульный.Свойство("ЭтоОтмена", Форма.ЭтоОтмена);
		Если НЕ ЗначениеЗаполнено(Форма.ЭтоОтмена) Тогда
			Форма.ЭтоОтмена = Ложь;
		КонецЕсли;

		Форма.КоличествоСтраницПодтверждающихДокументов = 0;
		Форма.СтруктураДанныхТитульный.Свойство("Прил", Форма.КоличествоСтраницПодтверждающихДокументов);

		Форма.НомерЛицензии = "";
		Форма.СтруктураДанныхТитульный.Свойство("НомерЛицензии", Форма.НомерЛицензии);

		Форма.Элементы.КПП_ОП.Видимость = НЕ Форма.ЭтоПБОЮЛ;
		Форма.КПП_ОП = "";

		Если НЕ Форма.ЭтоПБОЮЛ Тогда

			Форма.СтруктураДанныхТитульный.Свойство("КПП_ОП", Форма.КПП_ОП);
			Если НЕ ЗначениеЗаполнено(Форма.КПП_ОП) Тогда
				Форма.СтруктураДанныхТитульный.Свойство("КПП1", Форма.КПП_ОП);
				Форма.СтруктураДанныхТитульный.Вставить("КПП_ОП", Форма.КПП_ОП);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	// Конец специфических реквизитов Заявления о крректировке.

	// Для сохраненного первичного отчета определяем наличие введенных 
	// на его основании документов Заявление о корректировке.
	Если Форма.ПользовательСохранилОтчет И (НЕ Форма.НомерАлкоОтчета = 0)
			И (Форма.НомерАлкоОтчета < 1000)
			И (Форма.СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета >= '20170701') Тогда

		Если НЕ ЗначениеЗаполнено(Форма.ЗаявлениеОКорректировкеПредставление) Тогда

			ЗаявлениеОКорректировке = ПолучитьЗаявлениеОКорректировкеПоЖурналу(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

			Форма.ЗаявлениеОКорректировке = ЗаявлениеОКорректировке;

			Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда
				Форма.ЗаявлениеОКорректировкеПредставление = Строка(ЗаявлениеОКорректировке);
			Иначе
				Форма.ЗаявлениеОКорректировкеПредставление = "Заполнить";
			КонецЕсли;

		КонецЕсли;

		Форма.Элементы.ЗаявлениеОКорректировкеПредставление.Видимость = Истина;

	КонецЕсли;

	ОбновитьЦветаСсылокТитульногоАЛКО(Форма);

КонецПроцедуры

Функция ПолучитьЗаявлениеОКорректировкеПоЖурналу(ДокументСсылкаАлкоОтчет) Экспорт

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПолучитьЗаявлениеОКорректировкеПоЖурналу() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	НаборЗаписей = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, "ЗаявлениеОКорректировке", 0, 0, СоответствиеДействий.Получить("Сервис"));

	ЗаявлениеОКорректировке = Неопределено;

	Если НаборЗаписей.Количество() > 0 Тогда

	// Запись в наборе может быть только одна.
		ЗаявлениеОКорректировкеВнутреннееПредставление = НаборЗаписей[0].НачальноеЗначение;

		Если ЗначениеЗаполнено(ЗаявлениеОКорректировкеВнутреннееПредставление) Тогда
			ЗаявлениеОКорректировке = ЗначениеИзСтрокиВнутр(ЗаявлениеОКорректировкеВнутреннееПредставление);
		КонецЕсли;

	КонецЕсли;

	Возврат ЗаявлениеОКорректировке;

КонецФункции

// Выводит в форме отчета ФСРАР нужную страницу многостраничного многострочного раздела.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Шаг					- Число - смысл зависит от параметра ПоказатьПоИндексу,
//							если ПоказатьПоИндексу Истина, то Шаг - это индекс страницы, которую необходимо вывести.
//							Если ПоказатьПоИндексу Ложь, то Шаг - это разница между индексом текущей страницы, и той,
//							которую необходимо вывести на форму.
//		Раздел				- Строка - имя многострочного раздела отчета, страницу которого необходимо вывести.
//		ПоказатьПоИндексу	- Булево - Необязательный. Флаг, поясняющий смысл параметра Шаг.
//
Процедура ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма, Шаг, Раздел,
		ПоказатьПоИндексу = Истина) Экспорт

	ИмяТаблицыСтраницРаздела = Неопределено;
	Если НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ИмяТаблицыСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = Форма[ИмяТаблицыСтраницРаздела];

	СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	НомерТекущейСтраницы = 0;
	Если СтрТаблицыСтраниц.Количество() > 0 Тогда
		АктивнаяСтраницаРаздела = СтрТаблицыСтраниц[0];
		НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
	КонецЕсли;

	Если Не ПоказатьПоИндексу Тогда
		НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
	Иначе
		НомерСледующейСтраницы = Шаг;
	КонецЕсли;

	КоличествоСтраниц = ТаблицаСтраницРаздела.Количество();

	Если ((НомерСледующейСтраницы + 1) > КоличествоСтраниц)
			ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Сохраняем текущие данные.
	СохранитьДанныеРазделаАЛКО(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = Раздел;
	Форма.ТекущийРаздел = Раздел;

	Если АктивнаяСтраницаРаздела <> Неопределено Тогда
		АктивнаяСтраницаРаздела.АктивнаяСтраница = Ложь;
	КонецЕсли;

	// ДопСтроки сохранятся автоматически - Табличное поле изменяет источник данных при изменении.
	// ДополнительныеДанные сохранятся автоматически, поскольку 
	// ДополнительныеДанныеРаздел1 и 2 привязаны по ссылке к АктивнаяСтраница.ДополнительныеДанные.

	// Сменим признак активной страницы.
	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];

	СтрСледующаяСтраница.АктивнаяСтраница = Истина; // ставим новую активность
	АктивнаяСтраницаРаздела = СтрСледующаяСтраница;

	//////////////////////////////////////////////
	// Выведем новую активную страницу на форму.
	//////////////////////////////////////////////
	Если ТипЗнч(АктивнаяСтраницаРаздела.Данные[0].Значение) <> Тип("Структура") Тогда
		АктивнаяСтраницаРаздела.Данные[0].Значение = Новый Структура;
	КонецЕсли;

	ЭтоВиноградная = Ложь;

	// Подготовим данные для вывода таблицы формы.	
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	// Заполним поля, не относящиеся к строкам таблицы формы.
	Если Раздел <> "Лицензии" Тогда

		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
											АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.СведенияОбОП, 
											Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
		АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);
		Форма.ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;

		Форма.ФлагГоловногоОП = АктивнаяСтраницаРаздела.ФлагГоловногоОП;

		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда

			ЭтоВиноградная = Истина;

			// Видимость будет определена позже в ВидимостьДоступностьКнопокПолейРазделаАЛКО().
			Форма.Элементы.ДобавитьВиноградник.Видимость = Ложь;

			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;
			СтруктураДанных = АктивнаяСтраницаРаздела.Данные[0].Значение;

			ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных, ПодчиненныеЭлементы, ИдГруппы);

		КонецЕсли;

	ИначеЕсли Форма.УказываютсяНомераЛицензии Тогда

		СтруктураДанных = АктивнаяСтраницаРаздела.Данные[0].Значение;

		// Используем то обстоятельство, что поля, которые надо вывести из Данных Лицензии, 
		// имеют реквизиты с П000000000101 по П000000000105.
		Для Инд = 1 По 5 Цикл

			ИмяРеквизита = "П00000000010" + Инд;

			ЗначениеРеквизита = Неопределено;
			СтруктураДанных.Свойство(ИмяРеквизита, ЗначениеРеквизита);

			Форма[ИмяРеквизита] = ЗначениеРеквизита;

		КонецЦикла;

		ИмяРеквизитаЗначенияВидаДеятельности = "П000000000105";
		СформироватьПредставлениеВидаДеятельностиАЛКО(Форма, ИмяРеквизитаЗначенияВидаДеятельности);

	КонецЕсли;

	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;

	Форма.НомерАктивнойСтраницыМногострочногоРаздела = НомерСледующейСтраницы;

	КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, ИдГруппы, Форма.НомерАктивнойСтраницыМногострочногоРаздела);

	ЕстьДопСтроки = (КоличествоСтрок > 0);

	// Текущий номер строки по умолчанию.
	Форма.ТекущийНомерСтрокиТаблицыФормы = ?(ЕстьДопСтроки, 1, 0);

	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Для каждого ЭлементСписка Из СписокИдГрупп Цикл

		ИдГруппыТаблицы = ЭлементСписка.Значение;
		ВывестиТаблицуФормыРазделаАЛКО(Форма, ИдГруппыТаблицы, НомерСледующейСтраницы);

	КонецЦикла;

	УстановитьВидимостьРазделовАЛКО(Форма, Раздел, Форма.НомерАктивнойСтраницыМногострочногоРаздела);
	
КонецПроцедуры

// Выводит в форме отчета ФСРАР нужную страницу НЕ многостраничного раздела.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Раздел				- Строка - имя раздела отчета, страницу которого необходимо вывести.
//
Процедура ПоказатьСтраницуНеМногостраничногоРазделаАЛКО(Форма, Раздел) Экспорт

// Даже если раздел не Титульный лист, поскольку он без страниц и статичен,
	// заполнять его имеет смысл в ЗаполнитьТитульныйАЛКО().
	ЗаполнитьТитульныйАЛКО(Форма);
	УстановитьВидимостьРазделовАЛКО(Форма, Раздел);

КонецПроцедуры

// Выводит в форме отчета ФСРАР итоги по данным в подвале таблицы формы, ранее сформированной 
// функцией ВывестиТаблицуФормыРазделаАЛКО().
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		ИдГруппы			- Строка - идентификатор многострочной группы.
//		СтруктураИтогов		- Структура - Необязательный. Структура, ключи которой соответствуют именам
//							полей таблицы формы, по которым считается Итог, значения - значения Итога.
//
Процедура ВывестиИтогиТаблицыФормыРазделаАЛКО(Форма, ИдГруппы,
		СтруктураИтогов = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИдГруппы) Тогда
		Возврат;
	КонецЕсли;

	ФорматИтогов = Форма["ФорматИтогов" + ИдГруппы];

	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	ТаблицаФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
	ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
	АктивнаяСтраница = ТаблицаСтраницРаздела[Форма.НомерАктивнойСтраницыМногострочногоРаздела];

	Если СтруктураИтогов = Неопределено Тогда
		СтруктураИтогов = АктивнаяСтраница.ДополнительныеДанные[0].Значение;
	КонецЕсли;

	// ФорматИтогов имеет те же представления в виде имен колонок по которым считается Итог, что и БуферИтогов.
	Для Каждого ФорматКонтролируемогоПоля Из ФорматИтогов Цикл

		ИмяКонтролируемогоПоля = ФорматКонтролируемогоПоля.Представление;

		Поле = ТаблицаФормы.ПодчиненныеЭлементы[ИмяКонтролируемогоПоля];

		ЗначениеИтога = 0;
		Если НЕ СтруктураИтогов.Свойство(ИмяКонтролируемогоПоля, ЗначениеИтога) Тогда
			ЗначениеИтога = 0;
		КонецЕсли;

		// Если пришла структура с данными итогов - запишем.
		АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);

		// Нужно привести Итог к типу значения колонки табличного поля,
		// чтобы все смотрелось органично.		
		ФорматнаяСтрокаИтога = ФорматКонтролируемогоПоля.Значение;

		СтрИтога = Формат(ЗначениеИтога, ФорматнаяСтрокаИтога);

		// Выводим в подвал.
		Поле.ТекстПодвала = СтрИтога;

	КонецЦикла;

	// Обычно все работает и без обновления, но для раздела Лицензий, 
	// в которых нет подвала у таблицы, эта строчка необходима - иначе не обновляется
	// строка после пометки на удаление, и пометка визуально не выставляется/снимается.
	ТаблицаФормы.Обновить();

КонецПроцедуры

// Модифицирует меню таблицы формы многострочного раздела.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		Раздел				- Строка - имя многострочного раздела отчета, страница которого выводится.
//
Процедура УправлениеМенюТаблицыФормыАЛКО(Форма, Раздел) Экспорт

	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Для каждого ЭлементСписка Из СписокИдГрупп Цикл

		ИдГруппы = ЭлементСписка.Значение;

		УправлениеМенюТаблицыФормыПоГруппеАЛКО(Форма, ИдГруппы);

	КонецЦикла;

КонецПроцедуры

// Устанавливает видимость групп страниц разделов, заголовок ОП 
// и положение переключателя ФлагГоловногоОППереключатель.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		НаименованиеРаздела	- Строка - имя многострочного раздела отчета, страница которого выводится.
//		ИндексСтраницы		- Число - индекс страницы, которая выводится.
//		ЗаголовокОП_ИП		- Строка - Необязательный. Заголовок ОП для ИП.
//		ЗаголовокОП_ЮЛ		- Строка - Необязательный. Заголовок ОП для ЮрЛица.
//
Процедура УстановитьВидимостьРазделовАЛКО(Форма, НаименованиеРаздела,
		ИндексСтраницы = Неопределено) Экспорт

		// Выставим признаки.
	ЭтоТитульный = (НаименованиеРаздела = "Титульный");
	ЭтоРазделЛицензии = (НаименованиеРаздела = "Лицензии");
	ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено);
	
		// Доступность и заголовки ОП и Флаг ОП головной офис.
	Если НЕ (ЭтоТитульный или ЭтоРазделЛицензии) Тогда

		Если ИндексСтраницы = Неопределено Тогда

			ВызватьИсключение "В УстановитьВидимостьРазделовАЛКО() 
				|не передан ИндексСтраницы для многостраничного раздела";

		КонецЕсли;

		Форма.ФлагГоловногоОПЗначенияПереключателя = ?(Форма.ФлагГоловногоОП, 0, 1);

		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП"
			+ НаименованиеРаздела;
		НомерСтраницыФлагГоловногоОП = Форма[ИмяНомерСтраницыФлагГоловногоОП];

		Если НЕ ЭтоВиноградная Тогда

			Форма.Элементы.ФлагГоловногоОППереключатель.Доступность = (НомерСтраницыФлагГоловногоОП = 0)
				или (НомерСтраницыФлагГоловногоОП = ИндексСтраницы + 1);

		КонецЕсли;

		Форма.Элементы.ОбособленноеПодразделение.Доступность = НЕ Форма.ФлагГоловногоОП;

		ОбновитьЦветСсылкиОП_АЛКО(Форма);

	КонецЕсли;

	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	мСтруктураИдГрупп = СтруктураРеквизитовФормы.мСтруктураИдГрупп;

	// Видимость разделов.
	Форма.Элементы.СтраницаОтчетаТитульный.Видимость = ЭтоТитульный;
	// Группу таблиц показываем для разделов, для которых зарегистрированы многострочные группы.
	Форма.Элементы.ГруппаТаблицы.Видимость = мСтруктураИдГрупп.Свойство(НаименованиеРаздела);

	Если Форма.Элементы.Найти("СтраницаОтчетаЛицензии") <> Неопределено Тогда
		Форма.Элементы.СтраницаОтчетаЛицензии.Видимость = ЭтоРазделЛицензии;
	КонецЕсли;

	Форма.Элементы.СтраницаОтчетаМногострочная.Видимость = НЕ (ЭтоТитульный
		или ЭтоРазделЛицензии);

		// Установим видимость только для нужной таблицы раздела.
	Для каждого Элемент Из мСтруктураИдГрупп Цикл

		Раздел = Элемент.Ключ;
		Форма.Элементы["ГруппаТаблицы"
			+ Раздел].Видимость = (Раздел = НаименованиеРаздела);

	КонецЦикла;

	ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма, НаименованиеРаздела, Форма.ЭтоРазделОтчета, Форма.ЭтоЛицензируемаяДеятельность);

КонецПроцедуры

// Устанавливает доступность и цвет фона полей раздела Лицензии.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ЭтоЛицензируемаяДеятельность	- Булево - Флаг, Если Истина - необходимо наличие лицензии.
//
Процедура ОбработкаПолейСтраницыЛицензийАЛКО(Форма,
		ЭтоЛицензируемаяДеятельность) Экспорт

	Если НЕ Форма.УказываютсяНомераЛицензии Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ ЭтоЛицензируемаяДеятельность)
			и (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101') Тогда

			// Нужно сделать невидимой группу сведений лицензии.
		Форма.Элементы.РеквизитыЛицензии.Видимость = Ложь;
		// Нужно запретить ввод и сделать фон белым.
		Форма.Элементы.П000000000101.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000101.Доступность = Ложь;
		Форма.Элементы.П000000000102.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000102.Доступность = Ложь;
		Форма.Элементы.П000000000103.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000103.Доступность = Ложь;
		Форма.Элементы.П000000000104.ЦветФона = Форма.мСтруктураЦветовРаскраски._5;
		Форма.Элементы.П000000000104.Доступность = Ложь;

		// И очистить значения.		
		АктивнаяСтрРаздела = Форма.ТаблицаСтраницыЛицензии[Форма.НомерАктивнойСтраницыМногострочногоРаздела];

		// Используем то обстоятельство, что поля Данных Лицензии, 
		// имеют реквизиты с П000000000101 по П000000000105.
		// Но П000000000105 очищать не будем.
		Для Инд = 1 По 4 Цикл

			ИмяРеквизита = "П00000000010" + Инд;

			Форма[ИмяРеквизита] = Неопределено;

			АктивнаяСтрРаздела.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);

		КонецЦикла;

		АктивнаяСтрРаздела.Данные[0].Пометка = Ложь;

	Иначе

	// Разрешаем.

	// Нужно сделать видимой группу сведений лицензии.
		Форма.Элементы.РеквизитыЛицензии.Видимость = Истина;

		Форма.Элементы.П000000000101.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000101.Доступность = Истина;
		Форма.Элементы.П000000000102.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000102.Доступность = Истина;
		Форма.Элементы.П000000000103.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000103.Доступность = Истина;
		Форма.Элементы.П000000000104.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
		Форма.Элементы.П000000000104.Доступность = Истина;

	КонецЕсли;

	// Поле выбора вида деятельности всегда желтым.
	Форма.Элементы.П000000000105.ЦветФона = Форма.мСтруктураЦветовРаскраски._0;
	Форма.Элементы.П000000000105.Доступность = Истина;

КонецПроцедуры

// Устанавливает обработчик действия для таблицы РазделыОтчета формы отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		Действие				- Строка - определяет Действие, обработчик которого назначается.
//		ИмяПроцедурыДействия    - Строка - имя процедуры-обработчика действия.
//
Процедура УстановитьДействиеТаблицыРазделыОтчетаАЛКО(Форма, Действие,
		ИмяПроцедурыДействия) Экспорт

	Элемент = Форма.Элементы.РазделыОтчета;

	ТекущееИмяПроцедурыДействия = Элемент.ПолучитьДействие(Действие);

	Если ТекущееИмяПроцедурыДействия <> ИмяПроцедурыДействия Тогда
		Элемент.УстановитьДействие(Действие, ИмяПроцедурыДействия);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсИнициализация

// Первоначальная инициализация многостраничных разделов отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ИнициализацияМногостраничныхРазделовАЛКО(Форма, ЭтоОчистка = Ложь) Экспорт

// Перед инициализацией нужно определить  МаксИндексСтраницы.
	Если Форма.МаксИндексСтраницы = Неопределено Тогда
		Форма.МаксИндексСтраницы = 0;
	КонецЕсли;

	Для каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;
		ТаблицаРаздела = Форма[ИмяТаблицыРаздела];

		СтрПерваяСтраница = ТаблицаРаздела.Добавить();

		СтрПерваяСтраница.Представление = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;

		// Обособленное подразделение не нужно для раздела Лицензии, но мешать не будет.
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");

		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда

			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;

			Для каждого Элемент Из ПодчиненныеЭлементы Цикл

				ИмяРеквизита = Элемент.Имя;
				Если СтрНайти(ИмяРеквизита, "П0000100003") = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтрПерваяСтраница.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);

			КонецЦикла;

		КонецЕсли;

		СтрПерваяСтраница.Данные[0].Пометка = Ложь;

		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;

		// Структура СведенияОбОП не нужна для раздела Лицензии, но мешать не будет.
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(НазваниеРаздела, Форма.СтруктураРеквизитовФормы);

		БезОткрытияФормы = Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы;
		БезОткрытияФормы = ?(БезОткрытияФормы = Неопределено, Ложь, БезОткрытияФормы);

		Для каждого ЭлементСписка Из СписокИдГрупп Цикл

			ИдГруппы = ЭлементСписка.Значение;

			Если НЕ ИдГруппы = Неопределено Тогда

			// Очистка многострочных разделов.
				ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы);

				СервисРегистров = Форма["СервисРегистров" + ИдГруппы];

				// Добавим по одной страничке.
				НоваяСтраница = СервисРегистров.Добавить();
				НоваяСтраница.КоличествоСтрок = 0;

				// Нужно определить текущий максимальный индекс страницы в регистре по Группе
				// до очистки, физически регистр не очищаем - это может
				// потребовать много времени.
				Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
				НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;

				// При создании на сервере этот блок не работает.
				//Если НЕ ((Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
				//		или БезОткрытияФормы) Тогда
				Если ЭтоОчистка Тогда
				
					ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

					Ресурсы = Новый Структура;
					Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Окончание инициализации отчета ФСРАР перед открытием.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОкончаниеИнициализацииАЛКО(Форма) Экспорт

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);

	Если НЕ Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Форма.Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;

	Если НЕ Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда

		Форма.Элементы.Расшифровать.Видимость = Ложь;
		Форма.СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;

	КонецЕсли;

	РегламентированнаяОтчетностьАЛКОКлиентСервер.ПоказатьПериодАЛКО(Форма.СтруктураРеквизитовФормы, Форма.СтруктураДанныхТитульный);

	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
			Или Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
			ИЛИ Форма.СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда

		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);

	КонецЕсли;

	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);

	Форма.СтруктураРеквизитовФормы.НаимОрганизации = Форма.СтруктураРеквизитовФормы.Организация.Наименование;

	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(Форма);

	// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
	// сделана группа - оболочка панели отправки. 
	// Видимость включается после завершения открытия отчета на Клиенте, в процессе сохранения,
	// которое происходит всегда после открытия, в процедуре РегламентированнаяОтчетностьАЛКОКлиент.ПослеСохраненияАЛКО().	
	Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Ложь;

	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(Форма, "ФСРАР");

	РегламентированнаяОтчетностьАЛКОКлиентСервер.ИнициализацияЗаголовкаАЛКО(Форма.Заголовок, Форма.ИмяФормы, Форма.СтруктураРеквизитовФормы);

	ЗаполнитьТитульныйАЛКО(Форма);

КонецПроцедуры

// Считывает настройки из макета СоставПоказателей в реквизиты формы мТаблицаНастроекТабличныхПолей,
// мТаблицаСоставПоказателей и Форма["ТаблицаВариантыЗаполнения" + <ИмяСтраницы>]
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
//
Процедура СчитатьНастройкиИзМакетаСоставПоказателейАЛКО(Форма,
		ОбъектЭтогоОтч = Неопределено) Экспорт

	НаДату = Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ИмяФормыОбъекта = Форма.ИмяФормы;
	ИмяМакета = ИмяДействующегоМакета(ИмяФормыОбъекта, "СоставПоказателей", НаДату, , ОбъектЭтогоОтч);
													
	Если НЕ ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат;
	КонецЕсли;

	МакетСоставаПоказателей = ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтч);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//

		// Здесь же читается информация для заполнения шапки и подвала Табличного поля
		// для разделов с многострочной частью.
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

		// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);

			Если (НЕ ЗначениеЗаполнено(КодПоказателя))
					или (Лев(КодПоказателя, 2) = "//") Тогда // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);

			// Признак многострочности определяется по третьей колонке макета.
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);

			// По четвертой колонке определяется тип данных реквизита.
			ТипДанныхРеквизита = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);

			// По колонке 5 определяется исходное количество строк многострочного раздела.


			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// ДопОписание			 в СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст).

			// Признак обязательности заполнения показателя.
			// Обязательность  	 в СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст).

			// Код показателя по структуре, берется из колонки 9.
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			//////////////////////////////////////////////////////////////
			// Информация для заполнения шапки и подвала Табличного поля.
			//////////////////////////////////////////////////////////////

			// ИДТабличногоПоля - Идентификатор табличного поля в разделе, на случай если 
			// табличных полей несколько.
			ИДТабличногоПоля = СокрЛП(МакетСоставаПоказателей.Область(Ном, 10).Текст);

			// Полное наименование колонки - подсказка по колонке.
			ПолноеНаименованиеКолонки = СокрЛП(МакетСоставаПоказателей.Область(Ном, 11).Текст);

			// Краткое наименование Колонки - текст шапки по колонке.
			КраткоеНаименованиеКолонки = СокрЛП(МакетСоставаПоказателей.Область(Ном, 12).Текст);

			// Считать итоги по колонке - признак необходимости считать итоги.
			СчитатьИтогиПоКолонке = СокрЛП(МакетСоставаПоказателей.Область(Ном, 13).Текст);
			СчитатьИтогиПоКолонке = ?(ПустаяСтрока(СчитатьИтогиПоКолонке), 0, Число(СчитатьИтогиПоКолонке));

			// Текст подвала - текст подвала колонки.
			ТекстПодвала = СокрЛП(МакетСоставаПоказателей.Область(Ном, 14).Текст);

			// Квалификатор типа - Длина, Точность.
			КвалификаторТипа = СокрЛП(МакетСоставаПоказателей.Область(Ном, 15).Текст);

			// Ширина колонки табличного поля.
			ШиринаКолонки = СокрЛП(МакетСоставаПоказателей.Область(Ном, 16).Текст);
			ШиринаКолонки = ?(ПустаяСтрока(ШиринаКолонки), 0, Число(ШиринаКолонки));

			// При выборе ячейки колонки - выбор из списка.
			// При выводе таблицы учитывается состояние флажка ФлОтклВыборЗначений.
			// Если редактирование строки целиком во внешней форме, значения не имеет. Например в форме записи регистра.
			ВыборИзСписка = СокрЛП(МакетСоставаПоказателей.Область(Ном, 17).Текст);
			ВыборИзСписка = ?(ПустаяСтрока(ВыборИзСписка), 0, Число(ВыборИзСписка));

			// При выборе ячейки колонки - вызов внешней формы.
			// Запрещено редактирование в ячейке при любых настройках,
			// например ввод адреса в форме ввода адреса.
			// Если редактирование строки целиком во внешней форме, значения не имеет. Например в форме записи регистра.
			ВызовФормЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 18).Текст);
			ВызовФормЗаполнения = ?(ПустаяСтрока(ВызовФормЗаполнения), 0, Число(ВызовФормЗаполнения));

			// Признак фиксации колонки таблицы слева.			
			ФиксироватьВТаблицеСлева = СокрЛП(МакетСоставаПоказателей.Область(Ном, 19).Текст);
			ФиксироватьВТаблицеСлева = ?(ПустаяСтрока(ФиксироватьВТаблицеСлева), 0, Число(ФиксироватьВТаблицеСлева));

			// Признак фиксации колонки таблицы справа.
			ФиксироватьВТаблицеСправа = СокрЛП(МакетСоставаПоказателей.Область(Ном, 20).Текст);
			ФиксироватьВТаблицеСправа = ?(ПустаяСтрока(ФиксироватьВТаблицеСправа), 0, Число(ФиксироватьВТаблицеСправа));

			// Признак видимости колонки.
			ВидимостьКолонки = СокрЛП(МакетСоставаПоказателей.Область(Ном, 21).Текст);
			ВидимостьКолонки = ?(ПустаяСтрока(ВидимостьКолонки), 0, Число(ВидимостьКолонки));

			// Растягивать по горизонтали.
			Растягивать = СокрЛП(МакетСоставаПоказателей.Область(Ном, 22).Текст);
			Растягивать = ?(ПустаяСтрока(Растягивать), 0, Число(Растягивать));

			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// Формируем таблицу значений, содержащей состав показателей отчета.
			НоваяСтрока = Форма.мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
			// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения.
				НоваяСтрока = Форма["ТаблицаВариантыЗаполнения"
					+ ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
			КонецЕсли;

			///////////////////////////////////////////////////////////////////////////////
			// Заполним таблицу настроек табличных полей.
			Если ИДТабличногоПоля <> "" Тогда

				НоваяСтрокаНастроек = Форма.мТаблицаНастроекТабличныхПолей.Добавить();
				НоваяСтрокаНастроек.КодПоказателя = ?(Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				// Информация для заполнения шапки и подвала Табличного поля.
				НоваяСтрокаНастроек.ИДТабличногоПоля = ИДТабличногоПоля;
				НоваяСтрокаНастроек.ПолноеНаименованиеКолонки = ПолноеНаименованиеКолонки;
				НоваяСтрокаНастроек.КраткоеНаименованиеКолонки = КраткоеНаименованиеКолонки;
				НоваяСтрокаНастроек.СчитатьИтогиПоКолонке = (СчитатьИтогиПоКолонке > 0);
				НоваяСтрокаНастроек.ТекстПодвала = ТекстПодвала;
				НоваяСтрокаНастроек.ТипДанныхРеквизита = ТипДанныхРеквизита;
				НоваяСтрокаНастроек.КвалификаторТипа = КвалификаторТипа;
				НоваяСтрокаНастроек.ШиринаКолонки = ШиринаКолонки;
				НоваяСтрокаНастроек.ВыборИзСписка = (ВыборИзСписка > 0);
				НоваяСтрокаНастроек.ВызовФормЗаполнения = (ВызовФормЗаполнения > 0);
				НоваяСтрокаНастроек.ФиксироватьВТаблицеСлева = (ФиксироватьВТаблицеСлева > 0);
				НоваяСтрокаНастроек.ФиксироватьВТаблицеСправа = (ФиксироватьВТаблицеСправа > 0);
				НоваяСтрокаНастроек.ВидимостьКолонки = (ВидимостьКолонки > 0);
				НоваяСтрокаНастроек.Растягивать = (Растягивать > 0);

			КонецЕсли;

		КонецЦикла;

		Если Форма["ТаблицаВариантыЗаполнения"
				+ ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда

				// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа и значения используется имя страницы основной панели формы, содержащей
			// табличный документ с автоматически заполняемыми показателями.
			Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

		Конецесли;

	КонецЦикла;

КонецПроцедуры

// Считывает списки выбора из макета Списки и возвращает в виде таблицы значений.
//
// Параметры:
// 		НаДату				- Дата. Необязательный. Дата окончания отчета.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
//		ИмяМакета			- Строка. Необязателен. Имя макета, как он определен в Конфигураторе.
//							Если не определен, возвращается опеределенное значение.
// Должны быть определены либо НаДату, либо ИмяМакета.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, колонки
//			*Код
//			*Название
//			Ширина колонок соответствует ширине в макете.
//
Функция СчитатьКоллекциюСписковВыбораАЛКО(НаДату = Неопределено, ИмяФормы,
		ОбъектЭтогоОтч = Неопределено, ИмяМакета = Неопределено) Экспорт

	Если ИмяМакета = Неопределено И НаДату = Неопределено Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.СчитатьКоллекциюСписковВыбораАЛКО
			|не переданы оба параметра НаДату и ИмяМакета";	
	КонецЕсли;
	
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = ИмяДействующегоМакета(ИмяФормы, "Списки", НаДату, , ОбъектЭтогоОтч);
	КонецЕсли; 
	
	МакетСписков = ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормы, ОбъектЭтогоОтч);

	КоллекцияСписковВыбора = Новый Соответствие;

	Для Каждого Область Из МакетСписков.Области Цикл

		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда

			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;

			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСписков.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название", , , МакетСписков.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);

			Для НомСтр = ВерхОбласти По НизОбласти Цикл

				КодПоказателя = СокрП(МакетСписков.Область(НомСтр, 1).Текст);

				Если (НЕ ЗначениеЗаполнено(КодПоказателя))
						или (Лев(КодПоказателя, 2) = "//") Тогда // пропускаем комментарии
					Продолжить;
				КонецЕсли;

				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = КодПоказателя;
				НовСтрока.Название = СокрП(МакетСписков.Область(НомСтр, 2).Текст);

			КонецЦикла;

			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);

		КонецЕсли;

	КонецЦикла;

	Возврат КоллекцияСписковВыбора;

КонецФункции

// Формирует массив, состоящий из кодов, перечисленных в нужной области макета Списки отчета ФСРАР.
// При этом пустые коды исключаются.
//
// Параметры:
//		ИмяОбластиКодовМакета - Строка. Имя области макета, в которой содержаться нужные коды.
// 		НаДату				- Дата. Дата окончания отчета.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
//		ИмяМакета			- Строка. Необязателен. Имя макета, как он определен в Конфигураторе.
//							Если не определен, возвращается опеределенное значение.
//		КоллекцияСписковВыбора - ТаблицаЗначений. Необязательный. Возвращается определенное значение.
//
// Должен быть определен хотя бы один из параметров НаДату, ИмяМакета, КоллекцияСписковВыбора.
//
// Возвращаемое значение:
// 		Массив.
//
Функция ТЗКодовИзМакетаСписки(ИмяОбластиКодовМакета, НаДату = Неопределено, ИмяФормы,
		ОбъектЭтогоОтч = Неопределено, ИмяМакета = Неопределено, КоллекцияСписковВыбора = Неопределено) Экспорт

	Если ИмяМакета = Неопределено И НаДату = Неопределено И КоллекцияСписковВыбора = Неопределено Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ТЗКодовИзМакетаСписки
			|не переданы все три параметра НаДату и ИмяМакета и КоллекцияСписковВыбора";	
	КонецЕсли;
	
	Если КоллекцияСписковВыбора = Неопределено Тогда
		КоллекцияСписковВыбора = СчитатьКоллекциюСписковВыбораАЛКО(НаДату, ИмяФормы, ОбъектЭтогоОтч, ИмяМакета);
	КонецЕсли;
	
	ТаблицаВыбора = КоллекцияСписковВыбора[ИмяОбластиКодовМакета];

	ТЗКодов = ТаблицаВыбора.СкопироватьКолонки("Код");

	// Удаляем пустые значения.
	СписокУдаленияПустых = Новый СписокЗначений;
	Индекс = -1;
	Для каждого СтрокаТаблицы Из ТЗКодов Цикл

		Индекс = Индекс + 1;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Код) Тогда
		// Поскольку вставляем вверх, список всегда отсортирован по убыванию Индекса.
			СписокУдаленияПустых.Вставить(0, Индекс);
		КонецЕсли;

	КонецЦикла;

	// Список отсортирован по убыванию Индекса, нет опасности нарушения индексов после удаления элемента.
	Для каждого ЭлементСписка Из СписокУдаленияПустых Цикл

		Индекс = ЭлементСписка.Значение;
		ТЗКодов.Удалить(Индекс);

	КонецЦикла;

	Возврат ТЗКодов;

КонецФункции

// Формирует массив, состоящий из кодов, перечисленных в нужной области макета Списки отчета ФСРАР.
// При этом пустые коды исключаются.
//
// Параметры:
//		ИмяОбластиКодовМакета - Строка. Имя области макета, в которой содержаться нужные коды.
// 		НаДату				- Дата. Дата окончания отчета.
// 		ИмяФормы			- Строка. Имя формы отчета.
//		ОбъектЭтогоОтч		- ОтчетОбъект.<Имяотчета> или Неопределено. Необязательный. 
//							Если не определен, возвращается опеределенное значение.
//		ИмяМакета			- Строка. Имя макета, как он определен в Конфигураторе.
//		КоллекцияСписковВыбора - ТаблицаЗначений. Необязательный. Возвращается определенное значение.
//
// Должен быть определен хотя бы один из параметров НаДату, ИмяМакета, КоллекцияСписковВыбора.
//
// Возвращаемое значение:
// 		Массив.
//
Функция МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, НаДату = Неопределено, ИмяФормы,
		ОбъектЭтогоОтч = Неопределено, ИмяМакета = Неопределено, КоллекцияСписковВыбора = Неопределено) Экспорт

	Если ИмяМакета = Неопределено И НаДату = Неопределено И КоллекцияСписковВыбора = Неопределено Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки
			|не переданы все три параметра НаДату и ИмяМакета и КоллекцияСписковВыбора";
	КонецЕсли;
	
	Если КоллекцияСписковВыбора = Неопределено Тогда
		КоллекцияСписковВыбора = СчитатьКоллекциюСписковВыбораАЛКО(НаДату, ИмяФормы, ОбъектЭтогоОтч, ИмяМакета);
	КонецЕсли; 
	
	ТаблицаВыбора = КоллекцияСписковВыбора[ИмяОбластиКодовМакета];

	СписокКодов = ТаблицаВыбора.ВыгрузитьКолонку("Код");

	// Удаляем пустые значения.
	СписокУдаленияПустых = Новый СписокЗначений;
	Индекс = -1;
	Для каждого ЭлементМассива Из СписокКодов Цикл

		Индекс = Индекс + 1;
		Если НЕ ЗначениеЗаполнено(ЭлементМассива) Тогда
		// Поскольку вставляем вверх, список всегда отсортирован по убыванию Индекса.
			СписокУдаленияПустых.Вставить(0, Индекс);
		КонецЕсли;

	КонецЦикла;

	// Список отсортирован по убыванию Индекса, нет опасности нарушения индексов после удаления элемента.
	Для каждого ЭлементСписка Из СписокУдаленияПустых Цикл

		Индекс = ЭлементСписка.Значение;
		СписокКодов.Удалить(Индекс);

	КонецЦикла;

	Возврат СписокКодов;

КонецФункции

Процедура ПриСозданииНаСервереАЛКО(Форма,
		НомерАлкоОтчета = Неопределено, ЕстьАдресаВСтрокахТаблиц = Неопределено) Экспорт

	СформироватьСтруктуруРеквизитовФормыАЛКО(Форма.СтруктураРеквизитовФормы);

	Форма.УстановитьПараметрыДекларации();

	СформироватьВспомогательныеСтруктурыОтчетаАЛКО(Форма, НомерАлкоОтчета, ЕстьАдресаВСтрокахТаблиц);

	ИнициализацияЭлементовТаблицыФормыАЛКО(Форма);

	ИнициализацияНаСервереАЛКО(Форма, Форма.Параметры.БезОткрытияФормы);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(Форма.ЭтотОбъект,
		?(ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСохраненныйДок),
			Форма.СтруктураРеквизитовФормы.мСохраненныйДок,
			Форма.СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиТаблицыФормы

// Пересчитывает итоги таблицы формы отчета ФСРАР, и выводит подвал таблицы при необходимости.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ИнформацияДляПересчетаИтогов    - Структура.
//			*ИмяРегистра				- Строка - имя регистра сведений.
//			*ИдГруппы					- Строка - идентификатор многострочной группы.
//										Должно быть определено либо значение ИмяРегистра либо ИдГруппы.
//			*ИндексСтраницы				- Число - индекс страницы отчета (номер страницы - 1).
//			*НачальноеЗначение			- Структура или массив - значения строки таблицы до изменения.
//			*КонечноеЗначение			- Структура или массив - значения строки таблицы после изменения.
//
Процедура ПересчитатьТекущиеИтогиТаблицыФормыАЛКО(Форма,
		ИнформацияДляПересчетаИтогов) Экспорт

	Перем ИмяРегистра, ИдГруппы, ИндексСтраницы,
		НачальноеЗначениеСтруктураДанных, КонечноеЗначениеСтруктураДанных;

	ИнформацияДляПересчетаИтогов.Свойство("ИмяРегистра", ИмяРегистра);
	ИнформацияДляПересчетаИтогов.Свойство("ИдГруппы", ИдГруппы);
	ИнформацияДляПересчетаИтогов.Свойство("ИндексСтраницы", ИндексСтраницы);

	ИнформацияДляПересчетаИтогов.Свойство("НачальноеЗначение", НачальноеЗначениеСтруктураДанных);
	ИнформацияДляПересчетаИтогов.Свойство("КонечноеЗначение", КонечноеЗначениеСтруктураДанных);

	Если ИдГруппы = Неопределено Тогда

		Если НЕ ИмяРегистра = Неопределено Тогда

			ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоИмениРегистраАЛКО(ИмяРегистра, Форма.СтруктураРеквизитовФормы);
		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если (ИндексСтраницы = Неопределено)
			или (НЕ ТипЗнч(ИндексСтраницы) = Тип("Число")) Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ ТипЗнч(НачальноеЗначениеСтруктураДанных) = Тип("Структура"))
			и (НЕ ТипЗнч(НачальноеЗначениеСтруктураДанных) = Тип("Массив")) Тогда
		Возврат;
	КонецЕсли;
	Если (НЕ ТипЗнч(КонечноеЗначениеСтруктураДанных) = Тип("Структура"))
			и (НЕ ТипЗнч(КонечноеЗначениеСтруктураДанных) = Тип("Массив")) Тогда
		Возврат;
	КонецЕсли;

	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	ТаблицаРаздела = Форма["ТаблицаСтраницы" + Раздел];
	СтраницаРаздела = ТаблицаРаздела[ИндексСтраницы];

	// Расчет Итогов.
	БуферИтогов = Форма["БуферИтогов" + ИдГруппы];

	Для Каждого БуферКонтролируемогоПоля Из БуферИтогов Цикл

		ИмяКонтролируемогоПоля = БуферКонтролируемогоПоля.Представление;
		ЗначениеДоРедактирования = НачальноеЗначениеСтруктураДанных[ИмяКонтролируемогоПоля];
		ЗначениеПослеРедактирования = КонечноеЗначениеСтруктураДанных[ИмяКонтролируемогоПоля];

		РазницаЗначений = ЗначениеПослеРедактирования - ЗначениеДоРедактирования;

		// Нужно прибавить разницу к итогу.
		ЗначениеИтога = 0;
		Если НЕ СтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяКонтролируемогоПоля, ЗначениеИтога) Тогда
			СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, РазницаЗначений);
		Иначе
			СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога
				+ РазницаЗначений);
		КонецЕсли;

	КонецЦикла;

	СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

	// Если текущая страница в отчете та, по которой пересчитали итог, 
	// нужно перерисовать подвал таблицы формы с итогами.
	Если (Форма.ТекущийИдГруппы = ИдГруппы)
			и (Форма.НомерАктивнойСтраницыМногострочногоРаздела = ИндексСтраницы) Тогда

		ВывестиИтогиТаблицыФормыРазделаАЛКО(Форма, Форма.ТекущийИдГруппы, СтраницаРаздела.ДополнительныеДанные[0].Значение);

	КонецЕсли;

КонецПроцедуры

// Устанавливает или снимает "пометку удаления" на строку таблицы формы отчета ФСРАР,
// в зависимости от текущего состояния на обратное.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//		ТекущиеДанные       - ДанныеФормыСтруктура - текущие данные таблицы формы.
//		Раздел				- Строка - имя многострочного раздела отчета, страница которого выводится.
//		КоличествоСтрок		- Число - количество строк в таблице формы на странице.
//
Процедура АктивацияДеактивацияАЛКО(Форма, ТекущиеДанные, Раздел,
		КоличествоСтрок) Экспорт

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяПоля = "Активно";

	НовоеЗначениеПоля = НЕ ТекущиеДанные[ИмяПоля];

	НужноДобавитьИтоги = НовоеЗначениеПоля; //Если Активно - прибавляем, иначе убавляем.

	// Уменьшаем КоличествоПомеченныхНаУдаление если снята пометка удаления,
	// увеличиваем если установлена.
	Дельта = ?(НужноДобавитьИтоги, -1, 1);

	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	ИндексСтроки = ТекущиеДанные.ИндексСтроки;

	ИзменитьЗаписьРегистраСведенийАЛКО(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы, ИндексСтроки, ИмяПоля, НовоеЗначениеПоля, КоличествоСтрок);

	// Изменим КолвоСтрокПомНаУдаление.	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ИзменитьКоличествоПомеченныхНаУдалениеСтрокПоТекущейСтранице(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы, Дельта);

	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(Форма.ТекущийИдГруппы, Форма.СтруктураРеквизитовФормы);

	ИнформацияДляПересчетаИтогов = Новый Структура;
	ИнформацияДляПересчетаИтогов.Вставить("ИмяРегистра", ИмяРегистра);
	ИнформацияДляПересчетаИтогов.Вставить("ИдГруппы", Форма.ТекущийИдГруппы);
	ИнформацияДляПересчетаИтогов.Вставить("ИндексСтраницы", ИндексСтраницы);

	ПустоеЗначениеСтруктураДанных = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
	ТекущиеДанныеСтруктураДанных = Неопределено;
	ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(ТекущиеДанные, ИмяРегистра, ТекущиеДанныеСтруктураДанных);

	Если НужноДобавитьИтоги Тогда

		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", ПустоеЗначениеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", ТекущиеДанныеСтруктураДанных);

	Иначе

		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", ТекущиеДанныеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", ПустоеЗначениеСтруктураДанных);

	КонецЕсли;

	ПересчитатьТекущиеИтогиТаблицыФормыАЛКО(Форма, ИнформацияДляПересчетаИтогов);

	// Обновляем данные.
	Форма.Модифицированность = Истина;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОчистка

// Серверная часть очистки всех разделов формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, удаляются все страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и добавляется по одной новой странице.
// Поскольку МаксИндексСтраницы отчета при этом не очищается, добавленные страницы имеют ИндексСтраницыРегистра
// всегда больше, чем все существующие - и в отчете табличные данные "очищаются".
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма				- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОчиститьНаСервереАЛКО(Форма) Экспорт

	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лицензии" Тогда
	// Очистим реквизиты.
		Если Форма.УказываютсяНомераЛицензии Тогда
		// Используем то обстоятельство, что поля Данных Лицензии, 
			// имеют реквизиты с П000000000101 по П000000000105.
			Для Инд = 1 По 5 Цикл

				ИмяРеквизита = "П00000000010" + Инд;

				Форма[ИмяРеквизита] = Неопределено;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Форма.НомерАлкоОтчета = 0 Тогда

	// Для Заявления о корректировке очищаем Титульный.
		Форма.ИсходящийНомер = "";
		Форма.СтруктураДанныхТитульный.Вставить("ИсходящийНомер", Форма.ИсходящийНомер);

		Форма.КудаПредставляется = "";
		Форма.СтруктураДанныхТитульный.Вставить("ОргИМНС", Форма.КудаПредставляется);

		Форма.ОрганизацияЭлектронныйАдрес = "";
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);

		Форма.ДатаПодписи = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);

		Форма.СданныйАлкоОтчетПредставление = "";

		Если НЕ ЗначениеЗаполнено(Форма.УдаленныйСданныйАлкоОтчет) Тогда
		// Чтобы при повторной очистке без сохранения не затерлось изначальное значение.
			Форма.УдаленныйСданныйАлкоОтчет = Форма.СданныйАлкоОтчет;
		КонецЕсли;

		Форма.СданныйАлкоОтчет = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("СданныйАлкоОтчет", Форма.СданныйАлкоОтчет);
		Форма.СтруктураРеквизитовФормы.Вставить("СданныйАлкоОтчет", Форма.СданныйАлкоОтчет);

		Форма.Обоснования = "";
		Форма.СтруктураДанныхТитульный.Вставить("Обоснования", Форма.Обоснования);

		Форма.Перечень.Очистить();

		// Обновляем Титульный в соответствии с датой.
		ОбновитьНаСервереАЛКО(Форма, Истина);

	ИначеЕсли Форма.НомерАлкоОтчета = 1000 Тогда

	// Для Уведомления о выездной торговле очищаем Титульный.
		Форма.КудаПредставляется = "";
		Форма.СтруктураДанныхТитульный.Вставить("ОргИМНС", Форма.КудаПредставляется);

		Форма.АдресВыездногоОбслуживания = ПолучитьПустуюСтруктуруАдреса();
		Форма.СтруктураДанныхТитульный.Вставить("АдресВыездногоОбслуживания", Форма.АдресВыездногоОбслуживания);
		Форма.ОрганизацияМестоОсуществленияДеятельности = "Заполнить";

		Форма.ОрганизацияЭлектронныйАдрес = "";
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);

		Форма.ДатаПодписи = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);

		Форма.ДатаНачалаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаНачалаУведомления", Форма.ДатаНачалаУведомления);

		Форма.ДатаКонцаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаКонцаУведомления", Форма.ДатаКонцаУведомления);

		Форма.ВремяНачалаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ВремяНачалаУведомления", Форма.ВремяНачалаУведомления);

		Форма.ВремяКонцаУведомления = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ВремяКонцаУведомления", Форма.ВремяКонцаУведомления);

		Форма.НомерКонтактногоТелефона = "";
		Форма.СтруктураДанныхТитульный.Вставить("НомерКонтактногоТелефона", Форма.НомерКонтактногоТелефона);

		Форма.ДобНомер = "";
		Форма.СтруктураДанныхТитульный.Вставить("ДобНомер", Форма.ДобНомер);

		Форма.ПереключательПредставителя = 2;
		Форма.СтруктураДанныхТитульный.Вставить("ПереключательПредставителя", Форма.ПереключательПредставителя);

		Форма.Представитель = "";
		Форма.СтруктураДанныхТитульный.Вставить("Представитель", Форма.Представитель);

		Форма.НаименованиеДокумента = "";
		Форма.СтруктураДанныхТитульный.Вставить("НаименованиеДокумента", Форма.НаименованиеДокумента);

		Форма.НомерКорректировкиУведомления = 0;
		Форма.СтруктураДанныхТитульный.Вставить("НомерКорректировкиУведомления", Форма.НомерКорректировкиУведомления);

		Форма.ЭтоОтмена = Ложь;
		Форма.СтруктураДанныхТитульный.Вставить("ЭтоОтмена", Форма.ЭтоОтмена);

		Форма.КоличествоСтраницПодтверждающихДокументов = 0;
		Форма.СтруктураДанныхТитульный.Вставить("Прил", Форма.КоличествоСтраницПодтверждающихДокументов);

		Форма.НомерЛицензии = "";
		Форма.СтруктураДанныхТитульный.Вставить("НомерЛицензии", Форма.НомерЛицензии);

		Форма.КПП_ОП = "";
		Форма.СтруктураДанныхТитульный.Вставить("КПП_ОП", Форма.КПП_ОП);

		Форма.Комментарий = "";
		Форма.СтруктураДанныхТитульный.Вставить("Комментарий", Форма.Комментарий);

	КонецЕсли;

	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;

		Форма[ИмяТаблицыРаздела].Очистить();

		ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
		Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда

			ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;

			Для каждого Элемент Из ПодчиненныеЭлементы Цикл

				ИмяРеквизита = Элемент.Имя;
				Если СтрНайти(ИмяРеквизита, "П0000100003") = 0 Тогда
					Продолжить;
				КонецЕсли;

				Форма[ИмяРеквизита] = Неопределено;

			КонецЦикла;

		КонецЕсли;

		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(НазваниеРаздела, Форма.СтруктураРеквизитовФормы);

		Для каждого ЭлементСписка Из СписокИдГрупп Цикл

			ИдГруппы = ЭлементСписка.Значение;
			ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы);

		КонецЦикла;

	КонецЦикла;

	ИнициализацияМногостраничныхРазделовАЛКО(Форма, Истина);

	// Индекс единственной страницы всегда 0.
	Форма.НомерАктивнойСтраницыМногострочногоРаздела = 0;

	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма);

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);

	Если НЕ Форма.Элементы.РазделыОтчета.ТекущийЭлемент = Неопределено Тогда	
		Форма.ТекущийЭлемент = Форма.Элементы.РазделыОтчета.ТекущийЭлемент;	
	КонецЕсли; 
	
КонецПроцедуры

// Серверная часть очистки текущей страницы раздела формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, очищаются реквизиты страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и назначается новый ИндексСтраницыРегистра.
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма											- Управляемая форма - Форма отчета ФСРАР.
//		Раздел                                     		- Строка - имя многострочного раздела отчета, 
//														страница которого выводится.
//		ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста	- Наследуемый из 
//									РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов()
//									параметр.
//		РежимОчистки									- Наследуемый из 
//									РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов()
//									параметр.
//
Процедура ОчисткаРегламентированногоОтчетаАЛКО(Форма, Раздел,
		ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки) Экспорт

	Если СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда

		Если НЕ (Раздел = "Титульный") Тогда

			СтраницыРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, СтраницыРаздела);
			СтраницыРаздела = Форма[СтраницыРаздела];
			АктивнаяСтраница = СтраницыРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

			Если АктивнаяСтраница.Количество() > 0 Тогда
				АктивнаяСтраница = АктивнаяСтраница[0];
				ИндексСтраницы = СтраницыРаздела.Индекс(АктивнаяСтраница);
			Иначе
				Возврат;
			КонецЕсли;

			// Очищаем Данные и ДополнительныеДанные.
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				АктивнаяСтраница.Данные[0].Значение = Новый Структура;
			Иначе
				АктивнаяСтраница.Данные.Добавить(Новый Структура);
			КонецЕсли;

			Если АктивнаяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
				АктивнаяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
			Иначе
				АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
			КонецЕсли;

			Если НЕ Раздел = "Лицензии" Тогда

				АктивнаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");

				СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

				АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
				// Очищаем данныеОбОП на форме.
				Форма.ОбособленноеПодразделениеРаздела = "";

				АктивнаяСтраница.ФлагГоловногоОП = Ложь;

				ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;
				Если Форма[ИмяНомерСтраницыФлагГоловногоОП] = ИндексСтраницы + 1 Тогда
					Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;
				КонецЕсли;

				Если НЕ Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено Тогда

					АктивныеДанные = АктивнаяСтраница.Данные[0].Значение;

					Если ТипЗнч(АктивныеДанные) = Тип("Структура") Тогда

						Для каждого ЭлементСтруктуры Из АктивныеДанные Цикл

							ИмяРеквизита = ЭлементСтруктуры.Ключ;
							Если СтрНайти(ИмяРеквизита, "П0000100003") = 0 Тогда
								Продолжить;
							КонецЕсли;

							Форма[ИмяРеквизита] = Неопределено;
							АктивныеДанные.Вставить(ИмяРеквизита, Неопределено);

						КонецЦикла;

					КонецЕсли;

				КонецЕсли;

			Иначе
			// Раздел Лицензии,
			// очистим реквизиты.
				Если Форма.УказываютсяНомераЛицензии Тогда
				// Используем то обстоятельство, что поля Данных Лицензии, 
					// имеют реквизиты с П000000000101 по П000000000105.
					Для Инд = 1 По 5 Цикл

						ИмяРеквизита = "П00000000010" + Инд;

						Форма[ИмяРеквизита] = Неопределено;

					КонецЦикла;

					АктивнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("П000000000105", Неопределено);

				КонецЕсли;

			КонецЕсли;

			// Принудительно заставим платформу обновить значения СпискаЗначений.
			АктивнаяСтраница.Данные[0].Пометка = НЕ АктивнаяСтраница.Данные[0].Пометка;
			АктивнаяСтраница.ДополнительныеДанные[0].Пометка = НЕ АктивнаяСтраница.ДополнительныеДанные[0].Пометка;

			// Очищаем СервисРегистров.			
			СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

			Для каждого ЭлементСписка Из СписокИдГрупп Цикл

				ИдГруппы = ЭлементСписка.Значение;

				Если ЗначениеЗаполнено(ИдГруппы) Тогда

					СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

					// Сначала запишем в удаленные.
					СервисРегистровГруппыУдаленные = Форма["СервисРегистров" + ИдГруппы
						+ "Удаленные"];
					СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
					СтрокаТЗУдаленные.КоличествоСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;
					СтрокаТЗУдаленные.ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

					// Фиксируем удаление в журнале.
					ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", СтрокаТЗУдаленные.КоличествоСтрок);
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, СтрокаТЗУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);

					// Обнуляем поля текущей строки.
					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = 0;
					СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление = 0;

					Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
					СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;

					// Фиксируем добавление новой страницы.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

					ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если Раздел = "Титульный" Тогда

		Форма.НомерКорректировки = 0;
		Форма.СтруктураДанныхТитульный.Вставить("НомКорр", Форма.НомерКорректировки);
		Форма.СтруктураРеквизитовФормы.ВидДокумента = 0;

		Форма.КоличествоСтраницПодтверждающихДокументов = 0;
		Форма.СтруктураДанныхТитульный.Вставить("Прил", Форма.КоличествоСтраницПодтверждающихДокументов);

		Форма.КудаПредставляется = "";
		Форма.СтруктураДанныхТитульный.Вставить("ОргИМНС", Форма.КудаПредставляется);

		Форма.ОрганизацияЭлектронныйАдрес = "";
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Форма.ОрганизацияЭлектронныйАдрес);

		Форма.ДатаПодписи = Неопределено;
		Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);

		// Обновляем Титульный в соответствии с датой.
		ОбновитьНаСервереАЛКО(Форма, Истина);

	КонецЕсли;

	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(Форма, Раздел, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);

	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(Форма);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсДобавитьУдалитьСтраницу

// Серверная часть механизма удаления текущей страницы многостраничного раздела формы отчета ФСРАР.
// При этом физической очистки регистров сведений не происходит - просто очищаются сервисные данные
// в реквизитах формы, очищаются реквизиты страницы с добавлением информации о удаленных страницах
// в СервисРегистров<ИдГруппы>Удаленные и назначается новый ИндексСтраницыРегистра.
// Для физического удаления информации из регистров сведений отчета необходимо использовать
// ОчиститьРегистрыОтМусора из меню Сервис отчета.
//
// Параметры:
//
//	 	Форма			- Управляемая форма - Форма отчета ФСРАР.
//		Раздел			- Строка - Необязательный. Имя многострочного раздела отчета, 
//						страница которого выводится.
//
Процедура УдалитьСтраницуОтчетаАЛКО(Форма, Раздел = Неопределено,
		ИндексСтраницы = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если Раздел = Неопределено Тогда
		Раздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
	// Одна страница всегда должна быть.
		Возврат;
	КонецЕсли;

	Если ИндексСтраницы = Неопределено Тогда

	// Удаляем по умолчанию активную.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если СтрТаблицаСтраницы.Количество() > 0 Тогда

			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

		Иначе
			Возврат;
		КонецЕсли;

	Иначе

		ИндексТекСтрока = ИндексСтраницы;
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела[ИндексТекСтрока];

	КонецЕсли;

	ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
	
	// На случай если был выставлен признак Головного ОП.
	Если НЕ Раздел = "Лицензии" Тогда

		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;
		
		Если Форма[ИмяНомерСтраницыФлагГоловногоОП] = ИндексТекСтрока + 1 Тогда
			// Стоит признак головного ОП на удаляемой странице - надо очистить.
			Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;
		ИначеЕсли Форма[ИмяНомерСтраницыФлагГоловногоОП] > ИндексТекСтрока + 1 Тогда
			// Страница с признаком головного ОП находится за удаляемой страницей,
			// нужно уменьшить на единицу, так как после удаления индексы страниц уменьшаться на 1.
			Форма[ИмяНомерСтраницыФлагГоловногоОП] = Форма[ИмяНомерСтраницыФлагГоловногоОП] - 1;
		КонецЕсли;

	КонецЕсли;
	
	// Удаляем строку таблицы СервисРегистров.
	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Для каждого ЭлементСписка Из СписокИдГрупп Цикл

		ИдГруппы = ЭлементСписка.Значение;

		Если НЕ ИдГруппы = Неопределено Тогда

			СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

			СервисРегистровГруппыУдаленные = Форма["СервисРегистров" + ИдГруппы
				+ "Удаленные"];
			СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
			СтрокаТЗУдаленные.КоличествоСтрок = СервисРегистровГруппы[ИндексТекСтрока].КоличествоСтрок;
			СтрокаТЗУдаленные.ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексТекСтрока].ИндексСтраницыРегистра;

			ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", СтрокаТЗУдаленные.КоличествоСтрок);
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, СтрокаТЗУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);

			СервисРегистровГруппы.Удалить(ИндексТекСтрока);

		КонецЕсли;

	КонецЦикла;

	Форма.Модифицированность = Истина;

КонецПроцедуры

// Серверная часть механизма добавления текущей страницы многостраничного раздела формы отчета ФСРАР.
//
// Параметры:
//
//	 	Форма			- Управляемая форма - Форма отчета ФСРАР.
//		Раздел			- Строка - Необязательный. Имя многострочного раздела отчета, 
//						страница которого выводится.
//
Процедура ВставитьСтраницуОтчетаАЛКО(Форма, Раздел = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если Раздел = Неопределено Тогда
		Раздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(Раздел, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Раздел, "МаксКолвоЭкз", 0);
	Если МаксКолвоЭкз <> 0
			И ТаблицаСтраницРаздела.Количество() >= МаксКолвоЭкз Тогда

		ЗаголовокСтраницы = Раздел;

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), 
							ЗаголовокСтраницы, МаксКолвоЭкз);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецЕсли;

	// Нужно сохранить данные текущей страницы. 
	СохранитьДанныеРазделаАЛКО(Форма, Раздел);

	// Добавляем новую страницу.
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

	// Присваиваем представление по умолчанию.
	СтрНоваяСтраница.Представление = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

	// Инициируем Данные.
	Если СтрНоваяСтраница.Данные.Количество() > 0 Тогда
		СтрНоваяСтраница.Данные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.Данные.Добавить(Новый Структура);
	КонецЕсли;

	// Инициируем ДопДанные.
	Если СтрНоваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
		СтрНоваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
	Иначе
		СтрНоваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;

	СтрНоваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");

	ЭтоВиноградная = Ложь;
	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда

		ЭтоВиноградная = Истина;
		ПодчиненныеЭлементыВиноградныхДанных = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;

		СтруктураДанныхИсточник = Новый Структура; // Источник пустой.
		СтруктураДанныхПриемник = СтрНоваяСтраница.Данные[0].Значение;

		ВосстановитьДанныеПодчиненныхЭлементовФормы(СтруктураДанныхПриемник, СтруктураДанныхИсточник, ПодчиненныеЭлементыВиноградныхДанных, ИдГруппы);

	КонецЕсли;

	СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

	ТекущийФлагГоловногоОП = Неопределено;
	Если ЭтоВиноградная
			и (Форма.ТекущееСостояние = "ДобавлениеВиноградника") Тогда

		Если ТипЗнч(Форма.ОбщийПараметрПроцедур) = Тип("Структура") Тогда

			ТекущиеСведенияОбОП = Неопределено;
			Если Форма.ОбщийПараметрПроцедур.Свойство("ТекущиеСведенияОбОП", ТекущиеСведенияОбОП) Тогда

				СтруктураСведенияОбОП = ОбщегоНазначения.СкопироватьРекурсивно(ТекущиеСведенияОбОП);
				Форма.ОбщийПараметрПроцедур.Удалить("ТекущиеСведенияОбОП");

			КонецЕсли;

			Если Форма.ОбщийПараметрПроцедур.Свойство("ТекущийФлагГоловногоОП", ТекущийФлагГоловногоОП) Тогда
				Форма.ОбщийПараметрПроцедур.Удалить("ТекущийФлагГоловногоОП");
			КонецЕсли;

		КонецЕсли;

		Форма.ТекущееСостояние = "";

	КонецЕсли;

	СтрНоваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);

	// Актуально для виноградных.
	Если НЕ ТекущийФлагГоловногоОП = Неопределено Тогда
		СтрНоваяСтраница.ФлагГоловногоОП = ТекущийФлагГоловногоОП;
	КонецЕсли;

	// Заставляем принудительно платформу обновить СписокЗначений.
	СтрНоваяСтраница.Данные[0].Пометка = НЕ СтрНоваяСтраница.Данные[0].Пометка;
	СтрНоваяСтраница.ДополнительныеДанные[0].Пометка = НЕ СтрНоваяСтраница.ДополнительныеДанные[0].Пометка;

	// Нужно добавить таблицу в СервисРегистров.
	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Для каждого ЭлементСписка Из СписокИдГрупп Цикл

		ИдГруппы = ЭлементСписка.Значение;

		СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе.
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница = СервисРегистровГруппы.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;
		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;

		Форма.Модифицированность = Истина;

		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, НоваяСтраница.ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);

	КонецЦикла;

	// Вносим новую строку в Разделы Отчета.
	ПослеДобавленияДопСтрМногострочногоРазделаАЛКО(Форма, Раздел);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсСохранение

// Определяет возможность сохранения формы отчета ФСРАР без дополнительных вопросов или необходимость дополнительных вопросов.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		СтруктураПараметров		- Структура.
//			*КодИФНС					- Строка. Код ИФНС.
//			*КПП						- Строка. Код КПП.
//			*ПодобныйОтчетСуществует 	- Булево. Возвращается признак наличия подобного отчета.
//			*Вариант					- Число.
//			*ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки - Булево. 
//										Возвращается признак необходимости задать вопрос при изменении
//										номера корректировки отчета.
//			*МожноСохранять				- Булево. Возвращается признак возможности сохранения без вопросов.
//			*Автосохранение				- Булево. Необязательный. Признак автосохранения отчета.
//			*НаимТекРаздела				- Строка. Текущий активный раздел отчета.
//
Процедура ПередСохранениемАЛКО(Форма, СтруктураПараметров) Экспорт

	Перем КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
		МожноСохранять, Автосохранение, НаимТекРаздела;

		// Извлекаем параметры.
	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Свойство("МожноСохранять", МожноСохранять);

	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	Автосохранение = ?(Автосохранение = Неопределено, Ложь, Автосохранение);

	СтруктураПараметров.Свойство("НаимТекРаздела", НаимТекРаздела);

	Если НЕ (Форма.ПользовательСохранилОтчет
			или Форма.ПользовательНажалСохранитьОтчет) Тогда

			// Временное сохранение.
		СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
		СтруктураПараметров.Вставить("КПП", КПП);
		СтруктураПараметров.Вставить("ПодобныйОтчетСуществует", Ложь);
		СтруктураПараметров.Вставить("Вариант", 500 + Вариант);
		СтруктураПараметров.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Ложь);
		СтруктураПараметров.Вставить("МожноСохранять", Истина);
		СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
		СтруктураПараметров.Вставить("НаимТекРаздела", НаимТекРаздела);

		Возврат;

	КонецЕсли;

	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	МожноСохранять = Ложь;

	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП)
			И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС) Тогда

		ПодобныйОтчетСуществует = Истина;

	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);

	Если (Вариант <> Неопределено)
			И ((Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
			ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
			ИЛИ (Вариант <> Форма.СтруктураРеквизитовФормы.мВариант)) Тогда

		Если (Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
				ИЛИ (Форма.СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) Тогда

		ИначеЕсли Вариант <> Форма.СтруктураРеквизитовФормы.мВариант Тогда

			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;

		КонецЕсли;

	КонецЕсли;

	// Отчет Заявление о корректировке и все формы заявлений-уведомлений всегда сохраняем как первичный.
	Если Форма.НомерАлкоОтчета = 0 ИЛИ Форма.НомерАлкоОтчета >= 1000 Тогда

		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
		ПодобныйОтчетСуществует = Ложь;

	КонецЕсли;

	МожноСохранять = НЕ (ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);

		// Сохраняем измененные параметры.
	СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Вставить("Вариант", Вариант);
	СтруктураПараметров.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Вставить("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
	СтруктураПараметров.Вставить("НаимТекРаздела", НаимТекРаздела);

КонецПроцедуры

// Сохраняет форму отчета ФСРАР, за исключением регистров сведений.
// Как таковые регистры сведений не сохраняются - после отработки СохранитьДанныеОтчетаАЛКО()
// вызывается длительная операция СохранитьРегистрыСведений() в модуле формы отчета,
// которая очищает Журнал от записей редактирования отчета.
//
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//		СтруктураПараметров		- Структура.
//			*КодИФНС					- Строка. Код ИФНС.
//			*КПП						- Строка. Код КПП.
//			*Вариант					- Число.
//			*ВидДокументаНомерКорректировкиИзменен - Булево. 
//										Признак  изменения номера корректировки отчета.
//			*Автосохранение				- Булево. Необязательный. Признак автосохранения отчета.
//			*НаимТекРаздела				- Строка. Текущий активный раздел отчета.
//
Функция СохранитьДанныеОтчетаАЛКО(Форма, СтруктураПараметров) Экспорт

	Перем Автосохранение, КодИФНС, КПП, Вариант,
		ВидДокументаНомерКорректировкиИзменен, НаимТекРаздела;

	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ВидДокументаНомерКорректировкиИзменен", ВидДокументаНомерКорректировкиИзменен);
	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	СтруктураПараметров.Свойство("НаимТекРаздела", НаимТекРаздела);

	Автосохранение = ?(Автосохранение = Неопределено, Ложь, Автосохранение);

	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;

	ИдетЗаписьНовогоДокументаСНовымНомеромКорректировки = Ложь;

	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено)
			и ВидДокументаНомерКорректировкиИзменен Тогда

			// Будет запись нового документа с новым номером корректировки.		
		РазблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, Форма.УникальныйИдентификатор);

		// Выставляем как источник текущий документ, позже мСохраненныйДок изменится на новый документ.
		СтруктураРеквизитовФормы.мДокументИсточник = СтруктураРеквизитовФормы.мСохраненныйДок;

		ИдетЗаписьНовогоДокументаСНовымНомеромКорректировки = Истина;

	КонецЕсли;

	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;

	// В процессе работы ПриЗаписиРегламентированногоОтчетаНаСервере 
	// если передано СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено,
	// создается новый документ.	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(Форма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда

		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;

		Возврат Ложь;

	КонецЕсли;

	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено)
			и ВидДокументаНомерКорректировкиИзменен Тогда

			// Это будет другой отчет.
		Форма.УникальностьФормы = Новый УникальныйИдентификатор;
		// Необходимо, чтобы в новом отчете с другим номером корректировки
		// при Очистке от мусора не стерли случайно страницы, 
		// имевшие отношение к исходному отчету.
		// Кроме того, в новом отчете не было удаления страниц - логично их почистить.
		ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма);

	КонецЕсли;

	// Для Заявления о корректировке проверяем, не назначена ли декларация-основание
	// уже другому заявлению - такое возможно, если два раза подряд нажать в декларации-основании
	// ссылку Заполнить заявление и не сохранять заявления между щелчками по ссылке Заполнить.
	Если (Форма.ПользовательСохранилОтчет
			или Форма.ПользовательНажалСохранитьОтчет)
			И Форма.НомерАлкоОтчета = 0 Тогда

		Если ЗначениеЗаполнено(Форма.СданныйАлкоОтчет) Тогда

			ЗаявлениеОКорректировке = ПолучитьЗаявлениеОКорректировкеПоЖурналу(Форма.СданныйАлкоОтчет);

			Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда

				Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка = ЗаявлениеОКорректировке Тогда

					ТекстСообщения = НСтр("ru='Очищена ссылка на ""Отчет, корректировка сведений которого необходима""
						|поскольку указанная в ссылке декларация уже используется в другом 
						|Заявлении о предоставлении корректирующих деклараций после установленного срока.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

					Форма.СданныйАлкоОтчет = Неопределено;
					Форма.СданныйАлкоОтчетПредставление = "Заполнить";
					Форма.СтруктураДанныхТитульный.Вставить("СданныйАлкоОтчет", Неопределено);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Форма.ПользовательСохранилОтчет
			или Форма.ПользовательНажалСохранитьОтчет Тогда
		СтруктураРеквизитовФормы.ВидДокумента = ?(Форма.НомерКорректировки = 0, 0, 1);
		Вариант = СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	Иначе
	// Вариант, если пользователь не сохранил отчет,
	// определяется в ПередСохранениемАЛКО().
		СтруктураРеквизитовФормы.ВидДокумента = 1;

	КонецЕсли;

	// Установим текущие значения реквизитов документа.	
	// Для внешнего отчета ничего делать не надо.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Форма.ИмяОбъектаФормы].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Форма.ИмяОбъектаФормы].ОсновнаяФорма.Синоним;

	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	Комментарий = СокрЛП(Форма.Комментарий);

	СтрокаНовойВременнойМеткиКомментария = СтрокаВременногоОтчета();
	Комментарий = СокрЛП(СтрЗаменить(Комментарий, СтрокаНовойВременнойМеткиКомментария, ""));

	// Для Заявления о корректировке - фиксируем в комментарии номер Приложения.
	Если Форма.НомерАлкоОтчета = 0
			И ЗначениеЗаполнено(Форма.НомерПриложенияПредставление) Тогда
		Комментарий = СокрЛП(СтрЗаменить(Комментарий, СокрЛП(Форма.НомерПриложенияПредставление), ""));
	КонецЕсли;

	// Проверяем наличие старого варианта метки и удаляем.
	ПозицияСтаройВременнойМеткиКомментария = СтрНайти(Комментарий, "(Временный");

	Если НЕ ПозицияСтаройВременнойМеткиКомментария = 0 Тогда
	// Возможно старый вариант метки.
		ПозицияЗакрывающейСкобки = СтрНайти(Комментарий, ")", , ПозицияСтаройВременнойМеткиКомментария, 1);
		Если НЕ ПозицияЗакрывающейСкобки = 0 Тогда

			ДлинаВременнойМеткиКомментария = ПозицияЗакрывающейСкобки
				- ПозицияСтаройВременнойМеткиКомментария + 1;
			Если ДлинаВременнойМеткиКомментария = 14 Тогда
			// Это старый вариант временной метки комментария.
				ВременнаяМеткаКомментария = Сред(Комментарий, ПозицияСтаройВременнойМеткиКомментария, ДлинаВременнойМеткиКомментария);
				Комментарий = СокрЛП(СтрЗаменить(Комментарий, ВременнаяМеткаКомментария, ""));
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Форма.Комментарий = Комментарий;

	Если НЕ (Форма.ПользовательСохранилОтчет
			или Форма.ПользовательНажалСохранитьОтчет) Тогда
		Комментарий = СтрокаНовойВременнойМеткиКомментария + " " + Комментарий;
	КонецЕсли;

	// Для Заявления о корректировке - фиксируем в комментарии номер Приложения.
	Если Форма.НомерАлкоОтчета = 0
		И ЗначениеЗаполнено(Форма.НомерПриложенияПредставление) Тогда
		Комментарий = СокрЛП(СокрЛП(Форма.НомерПриложенияПредставление) + " "
			+ Комментарий);
	КонецЕсли;

	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий = Комментарий;

	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи = Форма.ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	СохранитьДанныеРазделаАЛКО(Форма, НаимТекРаздела, Ложь, Ложь);

	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = ЗаполнитьПоказателиОтчетаАЛКО(Форма);

	// Формируем список сохранения.
	СписокСохранения = Новый Структура();

	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// Титульный. Для Заявления о Корректировке.
	Если Форма.НомерАлкоОтчета = 0 Тогда
		СписокСохранения.Вставить("ТаблицаПеречень", ДанныеФормыВЗначение(Форма.Перечень, Тип("ТаблицаЗначений")));
	КонецЕсли;

	ДанныеМногостраничныхРазделов = Новый Структура;

	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);

	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(Форма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));

		ТаблЗнач = Неопределено;

		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда

			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда

				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);

				Ном = 0;

				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл

					СтрокаТаблЗнач.Данные = Форма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;

					Ном = Ном + 1;

				КонецЦикла;

			КонецЕсли;

			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда

				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);

				Ном = 0;

				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл

					СтрокаТаблЗнач.ДополнительныеДанные = Форма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;

					Ном = Ном + 1;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Вставляем данные многостраничных разделов.
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

	ДанныеВариантовАвтоЗаполнения = Новый Структура;

	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураВариантыЗаполнения Цикл

		МассивТаблЗнач = Новый Массив;

		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);

		Для Каждого ЭлементМассива Из Форма["ТаблицаВариантыЗаполнения"
			+ ЭлементСтруктуры.Ключ] Цикл

			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));

		КонецЦикла;

	КонецЦикла;

	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// Вствляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);

	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда

		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;

	КонецЕсли;

	// Вствляем флажок пересчета страниц.
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// Вствляем флажок отключения.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ДополнительныеДанные", Форма.ДополнительныеДанные);

	ВсегоСтрокСохранено = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма);
	// Количество строк которые будут сохранены в регистрах сведений.
	СписокСохранения.Вставить("ВсегоСтрокСохранено", ВсегоСтрокСохранено);

	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ИмяРаздела = Раздел.Ключ;

		Если ИмяРаздела = "Лицензии" Тогда
			Продолжить;
		КонецЕсли;

		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП"
			+ ИмяРаздела;

		СписокСохранения.Вставить(ИмяНомерСтраницыФлагГоловногоОП, Форма[ИмяНомерСтраницыФлагГоловногоОП]);

	КонецЦикла;

	СписокСохранения.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);

	СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, , Истина);
	СписокСохранения.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);

	СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина, Истина);
	СписокСохранения.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);

	СписокСохранения.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

	// Сохраняем версию платформы.
	// Необходимо для определения необходимости пересчета строк в случае,
	// если ранее была платформа ниже 8.3.3, а стала выше,
	// изза разницы в методах кеширования - выше 8.3.3 используется SHA256 платформы, 
	// а до 8.3.3 - алгоритм хеширования ГОСТР3411_94, реализованный на языке 1С в РО (БП2).
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы     = СистемнаяИнформация.ВерсияПриложения;
	СписокСохранения.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	
	// Чтобы избежать ошибки присвоения ИдДок документа источника
	// при копировании и сохранении "как новый" - восстанавливаем всегда
	// из сохраненного документа, а не из СтруктураРеквизитовФормы.
	ИДДок = Неопределено;
	Если (НЕ Форма.ЭтоНовыйДокумент) И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка) Тогда
	
		СписокСохраненияСохраненный = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		СписокСохраненияСохраненный.Свойство("ИДДок", ИДДок);
		СписокСохраненияСохраненный = Неопределено;
		
	КонецЕсли; 
	СписокСохранения.Вставить("ИДДок", ИДДок);
	СтруктураРеквизитовФормы.Вставить("ИДДок", ИДДок);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	МодульРегламентированнаяОтчетность = ОбщегоНазначения.ОбщийМодуль("РегламентированнаяОтчетность");

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(Форма.ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Записываем документ, хранящий данные отчета.
	Попытка

		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		Если ВышеБРО_1_1_11_0 Тогда
			МодульРегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(Форма);
		КонецЕсли;
		
		Если Форма.ЭтоНовыйДокумент ИЛИ (НЕ ЗначениеЗаполнено(ИДДок)) Тогда
		
			// Для нового документа сразу после основного сохранения
			// фиксируем идентификатор документа и записываем.
			// Это необходимо, чтобы при миграции в случае изменения идентификатора,
			// можно было прочесть данные регистров сведений со строками таблиц.
			
			ИДДок = ПолучитьИдДок(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
			СтруктураРеквизитовФормы.Вставить("ИДДок", ИДДок);
			
			СписокСохранения.Вставить("ИДДок", ИДДок);
			
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			
			Попытка

				СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
				
			Исключение

				Если НЕ Автосохранение Тогда

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
										РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

				КонецЕсли;

				СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;

				Возврат Ложь;

			КонецПопытки;
	
		КонецЕсли;

	Исключение

		Если НЕ Автосохранение Тогда

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		КонецЕсли;

		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;

		Возврат Ложь;

	КонецПопытки;

	СохранитьДеревоСтраницОтчетаАЛКО(Форма, СтруктураРеквизитовФормы.мСохраненныйДок);

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(Форма.ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	Форма.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;

	Если Форма.НомерАлкоОтчета = 0 Тогда

		Если ЗначениеЗаполнено(Форма.СданныйАлкоОтчет) И (Вариант = 0) Тогда

		// Проверяем есть ли запись.
			ЗаявлениеОКорректировке = ПолучитьЗаявлениеОКорректировкеПоЖурналу(Форма.СданныйАлкоОтчет);

			Если НЕ ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда

				Ресурсы = Новый Структура;
				Ресурсы.Вставить("ЗаявлениеОКорректировке", СтруктураРеквизитовФормы.мСохраненныйДок);

				// Пишем в Журнал для сданного отчета по "регистру" ЗаявлениеОКорректировке в ресурс НачальноеЗначение,
				// преобразование производится в ДобавитьВРегистрЖурнала(). 
				ДобавитьВРегистрЖурнала(Форма.СданныйАлкоОтчет, "ЗаявлениеОКорректировке", 0, 0, "Сервис", Ресурсы);

			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(Форма.УдаленныйСданныйАлкоОтчет)
				И (Вариант = 0) Тогда

				// Надо удалить запись из Журнала, если есть.
			ОчиститьРегистрЖурнала(Форма.УдаленныйСданныйАлкоОтчет, "ЗаявлениеОКорректировке", 0, 0, "Сервис");
			Форма.УдаленныйСданныйАлкоОтчет = Неопределено;

		КонецЕсли;

	ИначеЕсли Форма.НомерАлкоОтчета < 1000 Тогда // Все заявления, уведомления имеют номер 1000 и больше.

		// Для корректной работы в режиме Сохранить с новой корректировкой как новый и переписать.
		Форма.ЗаявлениеОКорректировке = Неопределено;
		Форма.ЗаявлениеОКорректировкеПредставление = "";

		Если СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета >= '20170701' Тогда

			ЗаявлениеОКорректировке = ПолучитьЗаявлениеОКорректировкеПоЖурналу(СтруктураРеквизитовФормы.мСохраненныйДок);

			Форма.ЗаявлениеОКорректировке = ЗаявлениеОКорректировке;

			Если ЗначениеЗаполнено(ЗаявлениеОКорректировке) Тогда
				Форма.ЗаявлениеОКорректировкеПредставление = Строка(ЗаявлениеОКорректировке);
			Иначе
				Форма.ЗаявлениеОКорректировкеПредставление = "Заполнить";
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы)
			И (НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
			И (ИдетЗаписьНовогоДокументаСНовымНомеромКорректировки
			ИЛИ Форма.ЭтоНовыйДокумент) Тогда

		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , Форма.УникальныйИдентификатор);

	КонецЕсли;

	Возврат Истина;

КонецФункции

Процедура ОтменаКопированияДанныхПриЗаписиСНовымНомеромКорректировки(Форма) Экспорт

	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;

	УдаляемыйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок;
	РазблокироватьДанныеДляРедактирования(УдаляемыйДокумент, Форма.УникальныйИдентификатор);

	// Поскольку копирование прервано - документ по новому отчету надо удалить.
	УдаляемыйДокумент = УдаляемыйДокумент.ПолучитьОбъект();

	Если НЕ УдаляемыйДокумент = Неопределено Тогда
	// Длительная операция не нужна,
		// поскольку данные регистров пишутся в транзакции,
		// и при отмене операции копирования ничего в регистры не попадет.
		УдаляемыйДокумент.Удалить();
	КонецЕсли;

	// Документ отчета до сохранения с новым значением корректировки 
	// хранится в СтруктураРеквизитовФормы.мДокументИсточник.	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мДокументИсточник;
	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , Форма.УникальныйИдентификатор);

	// Очищаем источник отчета и признак копирования.
	СтруктураРеквизитовФормы.мДокументИсточник = Неопределено;
	СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;

	// Нужно вернуть номер варианта.
	СохраненныйВид = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	СтруктураРеквизитовФормы.мВариант = ?(СохраненныйВид = 0, 0, СохраненныйВид);

	// Поскольку сохранение прервано, возвращаем признак модифицированности.
	Форма.Модифицированность = Истина;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсВосстановление

// Данная процедура после восстановления регистров сведений определяет необходимость загрузки основных данных отчета,
// и загружает основные данные либо из результатов восстановления данных регистров сведений, либо из данных отчета.
// Позже эти данные используются при восстановлении всех данных отчета в процедуре
// ВосстановитьДанныеОтчетаАЛКО(), вызываемой из этой процедуры.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		АдресВоВременномХранилище	- Строка - Адрес во временном хранилище, по которому лежит результат 
//									восстановления данных регистров сведений.
//
Процедура ПродолжениеВосстановленияДанныхАЛКО(Форма,
		АдресВоВременномХранилище) Экспорт

	НужноЗагрузитьДанные = Ложь;

	Если НЕ ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		НужноЗагрузитьДанные = Истина;
	КонецЕсли;

	Если НЕ НужноЗагрузитьДанные Тогда

		СтруктураРезультата = ПолучитьИзвременногоХранилища(АдресВоВременномХранилище);
		УдалитьИзВременногоХранилища(АдресВоВременномХранилище);

		Если НЕ ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
			НужноЗагрузитьДанные = Истина;
		КонецЕсли;

	КонецЕсли;

	Форма.БылИмпорт = Ложь;

	Если НужноЗагрузитьДанные Тогда

		СписокСохранения = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		СтруктураСервисРегистров = СписокСохранения.СтруктураСервисРегистров;
		СтруктураСервисРегистровУдаленные = СписокСохранения.СтруктураСервисРегистровУдаленные;
		Форма.МаксИндексСтраницы = СписокСохранения.МаксИндексСтраницы;

		Форма.БылоВосстановление = Ложь;
		
	Иначе

		СписокСохранения = СтруктураРезультата.СписокСохранения;
		Форма.БылИмпорт = СтруктураРезультата.БылИмпорт;
		ВозвращаемаяСтруктура = СтруктураРезультата.ВозвращаемаяСтруктура;

		СтруктураСервисРегистров = ВозвращаемаяСтруктура.СервисРегистров;
		СтруктураСервисРегистровУдаленные = ВозвращаемаяСтруктура.СервисРегистровУдаленные;
		Форма.МаксИндексСтраницы = ВозвращаемаяСтруктура.МаксИндексСтраницы;
		
		НужноСохранитьОтчет = Неопределено;
		ВозвращаемаяСтруктура.Свойство("НужноСохранитьОтчет", НужноСохранитьОтчет);
		НужноСохранитьОтчет = ?(НужноСохранитьОтчет = Неопределено, Ложь, НужноСохранитьОтчет);
		Форма.БылоВосстановление = НужноСохранитьОтчет;

	КонецЕсли;

	БылоКопирование = ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма);

	// Необходимо сохранить данные в новом формате, если был импорт или копирование.
	Форма.Модифицированность = Форма.БылИмпорт или БылоКопирование;

	ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистров);
	ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистровУдаленные, Истина);

	ВосстановитьДанныеОтчетаАЛКО(Форма, СписокСохранения);

КонецПроцедуры

// Пост обработка на сервере после восстановления данных отчета ФСРАР.
// Проверяет при копировании отчетов, не отличаются ли виды деятельности по лицензиям
// для отчетов за разные периоды и блокируются данные для редактирования во всех случаях.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ОбработкаПослеВосстановленияАЛКО(Форма) Экспорт

	Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
	// Из-за смены формата выгрузки изменились коды видов деятельности.
		ДатаКопируемогоОтчета = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
		ДатаЭтогоОтчета = Форма.СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
		РазныеСпискиВидовДеятельности = (ДатаКопируемогоОтчета >= '20131101'
			И ДатаЭтогоОтчета < '20131101') Или (ДатаКопируемогоОтчета < '20131101'
			И ДатаЭтогоОтчета >= '20131101');

		Если РазныеСпискиВидовДеятельности Тогда

			Если Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда

				Если Форма.УказываютсяНомераЛицензии Тогда

					Для Каждого Страница Из Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии] Цикл

						Если Страница.Данные[0].Значение.Свойство("П000000000105") Тогда

							Страница.Данные[0].Значение.П000000000105 = "";
							Страница.Данные[0].Пометка = Ложь;

						КонецЕсли;

						Если Страница.ДополнительныеДанные[0].Значение.Свойство("П000000000105") Тогда

							Страница.ДополнительныеДанные[0].Значение.П000000000105 = "";
							Страница.ДополнительныеДанные[0].Пометка = Ложь;

						КонецЕсли;

					КонецЦикла;

					ТекстСообщения = НСтр("ru='При копировании были очищены виды деятельности в разделе лицензий.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// После восстановления при копировании данные таблиц новые.
		Форма.Модифицированность = Истина;

	КонецЕсли;

	// На всякий случай проверим МаксИндекс.
	Если НЕ ЗначениеЗаполнено(Форма.МаксИндексСтраницы) Тогда

		Форма.МаксИндексСтраницы = ПолучитьМаксИндексСтраницыПоЖурналу(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

		Если НЕ ЗначениеЗаполнено(Форма.МаксИндексСтраницы) Тогда

			Форма.МаксИндексСтраницы = ОпределитьМаксИндексСтраницы(Форма);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Восстанавливает все необходимые данные отчета ФСРАР в режиме работы формы отчета без открытия на Клиенте.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ВосстановитьДанныеБезОткрытияФормыАЛКО(Форма) Экспорт

	ДлОперВосстановление = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление;

	// Восстановление работает в режиме длительной операции только при копировании
	// или при открытии отчета с данными, сохраненными в старом формате.
	// Поскольку при открытии без открытия формы эти случаи исключены - длительная 
	// операция отработает как обычная процедура.
	ПараметрыДлОперации = ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ДлОперВосстановление);
	НачатьВыполнениеДлительнойОперацииАЛКО(ДлОперВосстановление, ПараметрыДлОперации);

	ПродолжениеВосстановленияДанныхАЛКО(Форма, ПараметрыДлОперации.АдресВоВременномХранилище);

	ЗаполнитьТитульныйАЛКО(Форма);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсДлительныеОперации

// Отменяет выполнение фонового задания.
// Если задание уже выполнено, возвращает Ложь,
// в противном случае отменяет задание и возвращает Истину.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
// Возвращаемое значение:
// 		Булево - Истина, если задание успешно отменено.	
//
Функция ОтменитьФоновоеЗадание(Знач ИдентификаторЗадания) Экспорт

	СообщениеОбОшибке = Неопределено;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда
		Возврат Ложь;
	Иначе
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Выполняет любую длительную операцию отчета ФСРАР, предварительно собрав для нее необходимые для выполнения
// данные.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидДлОперации				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ВидПечати 					- Строка - Необязательный. Задает вид печати отчета при длительных
//									операцях печати.
// Возвращаемое значение:
//		Булево.						- Истина, если длительная операция выполнена.
//
Функция ВыполнитьДлительнуюОперациюАЛКО(Форма, ВидДлОперации,
		ВидПечати = Неопределено) Экспорт

	ПараметрыДлительнойОперации = ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ВидДлОперации, ВидПечати);
	Результат = НачатьВыполнениеДлительнойОперацииАЛКО(ВидДлОперации, ПараметрыДлительнойОперации);

	// нужно внести изменения в СтруктураРеквизитовФормы	
	Форма.СтруктураРеквизитовФормы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДлительнойОперации.СтруктураРеквизитовФормы);

	Возврат Результат;

КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания,
		СообщениеОбОшибке) Экспорт

	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка

		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";

	Исключение
	// что-то произошло, нужно сообщить
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
			|Подробности см. в Журнале регистрации.
			|" + ОписаниеОшибки() + "'");
		Выполнено = Истина;

	КонецПопытки;

	Возврат Выполнено;

КонецФункции
#КонецОбласти

#Область ПрограммныйИнтерфейсРедактированиеОП

// Заполняет обособленное подразделение реквизитами организации - декларанта, т.е реквизитами головного офиса.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		Раздел                      - Строка - имя многострочного раздела отчета, 
//									ОП которого нужно заполнить.
//		ИндексСтраницы				- Число - индекс страницы раздела, которую нужно заполнить.
//
Процедура ЗаполнитьОПРеквизитамиОрганизацииАЛКО(Форма, Раздел,
		ИндексСтраницы) Экспорт

	ТаблицаСтраницы = Форма["ТаблицаСтраницы" + Раздел];
	НужнаяСтраница = ТаблицаСтраницы[ИндексСтраницы];

	АдресОрганизации = Форма.ДополнительныеДанные.Титульный.АдресОрганизации;
	
	ПроверитьАдрес = Истина;
	АдресСтруктура = ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(АдресОрганизации, ПроверитьАдрес, Истина);
	
	СведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ОбъединитьСтруктурыИлиСоответствия(СведенияОбОП, АдресСтруктура);
	
	СведенияОбОП.Наименование = Форма.СтруктураДанныхТитульный.ОргНазвСокращ;
	СведенияОбОП.КПП = Форма.СтруктураДанныхТитульный.КПП1;

	НужнаяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СведенияОбОП);

	СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);
	НужнаяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

	Форма.Модифицированность = Истина;

	Если (Форма.ТекущийРаздел = Раздел)
			и (ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела) Тогда

		Форма.ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;
		Форма.Элементы.ОбособленноеПодразделение.Доступность = Ложь;
		ОбновитьЦветСсылкиОП_АЛКО(Форма);

	КонецЕсли;

	НужнаяСтраница.Данные[0].Пометка = Ложь;
	НужнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

КонецПроцедуры

// Вносит результаты ввода формы редактирования реквизитов обособленого подразделения в данные отчета ФСРАР.
// Форма ввода ОбщаяФорма.АЛКОВводРеквизитовОП.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		РезультатВвода              - Структура - совпадает со структурой, возвращаемой 
//									функцией ПолучитьПустуюСтруктуруСведенийОбОП().
//		ДополнительныеПараметры		- Структура.
//			*ИмяЭлементаСтруктуры	- Строка - имя Ключа сведений об ОП в дополнительных данных.
//			*СведенияОбОП			- Структура - совпадает со структурой, возвращаемой 
//									функцией ПолучитьПустуюСтруктуруСведенийОбОП(), заполнена 
//									данными до редактирования.
//
Процедура ВводРеквизитовОПЗавершениеАЛКО(Форма, РезультатВвода,
		ДополнительныеПараметры) Экспорт

	ТекущийРаздел = Форма.ТекущийРаздел;
	НомерАктивнойСтраницыМногострочногоРаздела = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	ТаблицаРаздела = Форма["ТаблицаСтраницы" + ТекущийРаздел];
	АктивнаяСтраницаРаздела = ТаблицаРаздела[НомерАктивнойСтраницыМногострочногоРаздела];

	БылоСтрОбособленноеПодразделение = Форма.ОбособленноеПодразделениеРаздела;

	ИмяЭлементаСтруктуры = ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП = ДополнительныеПараметры.СведенияОбОП;

	Если РезультатВвода <> Неопределено Тогда
		
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ОбъединитьСтруктурыИлиСоответствия(СведенияОбОП, РезультатВвода);

		// Организация всегда российская.
		СведенияОбОП.Вставить("КодСтраны", "643");
		СведенияОбОП.Вставить("Страна", "РОССИЯ");

		АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, СведенияОбОП);

		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);

		АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		Форма.ОбособленноеПодразделениеРаздела = СтрОбособленноеПодразделение;
		Форма.Модифицированность = (БылоСтрОбособленноеПодразделение <> Форма.ОбособленноеПодразделениеРаздела)
			или Форма.Модифицированность;

		ОбновитьЦветСсылкиОП_АЛКО(Форма);

	КонецЕсли;

	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

	ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма, ТекущийРаздел, Форма.ЭтоРазделОтчета, Форма.ЭтоЛицензируемаяДеятельность);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсВосстановитьУдаленныеСтраницы

Процедура ВосстановитьУдаленныеСтраницыАЛКО(Форма) Экспорт

// Сохраняем данные текущего раздела.
	ТекущийРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Если ТекущийРаздел = Неопределено Тогда
		ТекущийРаздел = "Титульный";
	КонецЕсли;

	// Нужно сохранить данные текущей страницы, текущую таблицу раздела удаляем. 
	СохранитьДанныеРазделаАЛКО(Форма, ТекущийРаздел, Истина);

	Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементСтруктуры.Ключ;

		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		Если Раздел = "Лицензии" Тогда
			Продолжить;
		КонецЕсли;

		СервисРегистровУдаленные = Форма["СервисРегистров" + ИдГруппы
			+ "Удаленные"];
		СервисРегистров = Форма["СервисРегистров" + ИдГруппы];

		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];

		Для каждого Удаленнаястраница Из СервисРегистровУдаленные Цикл

		// Убираем из удаленных и добавляем в действующие.
			ИндексСтраницыРегистраУдаленной = Удаленнаястраница.ИндексСтраницыРегистра;

			НайденнаяСтрока = СервисРегистров.НайтиСтроки(Новый Структура("ИндексСтраницыРегистра", ИндексСтраницыРегистраУдаленной));
			// Предотвращаем добавление уже имеющейся страницы.
			// В норме это не требуется - страховка на всякий непредвиденный случай.
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				Продолжить;
			КонецЕсли;

			СтрокаСервисРегистров = СервисРегистров.Добавить();
			СтрокаСервисРегистров.КоличествоСтрок = Удаленнаястраница.КоличествоСтрок;
			СтрокаСервисРегистров.ИндексСтраницыРегистра = ИндексСтраницыРегистраУдаленной;

			КоличествоСтраницПоСервисРегистров = СервисРегистров.Количество();

			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", СтрокаСервисРегистров.КоличествоСтрок);
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, СтрокаСервисРегистров.ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);

			/////////////////////////////////////////
			// Добавляем страницу в таблицу раздела.
			/////////////////////////////////////////

			// Если ИдГрупп на странице несколько, возможно добавление лишних страниц,
			// поэтому сначала смотрим по количеству, возможно уже добавлена страница раздела.
			КоличествоСтраницТаблицеРаздела = ТаблицаСтраницРаздела.Количество();

			Если КоличествоСтраницТаблицеРаздела < КоличествоСтраницПоСервисРегистров Тогда

				СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

				// Присваиваем представление по умолчанию.
				СтрНоваяСтраница.Представление = "Новая страница";
				СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

				// Инициируем Данные.
				Если СтрНоваяСтраница.Данные.Количество() > 0 Тогда
					СтрНоваяСтраница.Данные[0].Значение = Новый Структура;
				Иначе
					СтрНоваяСтраница.Данные.Добавить(Новый Структура);
				КонецЕсли;

				// Инициируем ДопДанные.
				Если СтрНоваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
					СтрНоваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
				Иначе
					СтрНоваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
				КонецЕсли;

				СтрНоваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");

				ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
				Если НЕ ГруппаВиноградныхДанных = Неопределено Тогда

					ПодчиненныеЭлементы = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;

					Для каждого Элемент Из ПодчиненныеЭлементы Цикл

						ИмяРеквизита = Элемент.Имя;
						Если СтрНайти(ИмяРеквизита, "П0000100003") = 0 Тогда
							Продолжить;
						КонецЕсли;

						СтрНоваяСтраница.Данные[0].Значение.Вставить(ИмяРеквизита, Неопределено);

					КонецЦикла;

				КонецЕсли;

				СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

				СтрНоваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);

				// Заставляем принудительно платформу обновить СписокЗначений.
				СтрНоваяСтраница.Данные[0].Пометка = Ложь;
				СтрНоваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

			КонецЕсли;

		КонецЦикла;

		СервисРегистровУдаленные.Очистить();

	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсПослеВыполненияЗадания

// Пост обработка на сервере после выполнения длительной операции печати отчета ФСРАР.
// Проверяет успешность операции печати и проставляет номера листов в готовых табличных документах печати.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидПечати 					- Строка. Задает вид печати отчета при длительных
//									операцях печати.
// Возвращаемое значение:
//		Булево.						- Истина, если длительная печать успешна.
//
Функция ПослеВыполненияЗадания_ПечатьАЛКО(Форма, ВидПечати) Экспорт

	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	РезультатПечати = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);

	ПечатьУспешна = Истина;

	Если НЕ ТипЗнч(РезультатПечати) = Тип("Структура") Тогда
		ПечатьУспешна = Ложь;
	Иначе
		Если НЕ РезультатПечати.Свойство("мПечатныеФормы") Тогда
			ПечатьУспешна = Ложь;
		ИначеЕсли НЕ ТипЗнч(РезультатПечати.мПечатныеФормы) = Тип("СписокЗначений") Тогда
			ПечатьУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПечатьУспешна Тогда

		Если ВидПечати = "ПечатьФайлZIP" Тогда
		// Все уже сделано в ПослеВыполненияЗадания_ПечатьФайлZIP().							
			Возврат Истина;

		КонецЕсли;

		Форма.СтруктураРеквизитовФормы = РезультатПечати;

		РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(Форма, , Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);

		КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Пост обработка на сервере после выполнения длительной операции очистки от мусора регистров сведений отчета ФСРАР.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//		ВидПечати 					- Строка. Задает вид печати отчета при длительных
//									операцях печати.
//
Процедура ПослеВыполненияЗадания_ОчисткаОтМусораАЛКО(Форма) Экспорт

	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	// Содержимое для данного случая значения не имеет.
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);

	// После очистки необходимо обнулить количество строк помеченных на удаление.
	УдалятьПомеченныеНаУдаление = Форма.ОбщийПараметрПроцедур.УдалятьПомеченныеНаУдаление;

	Если УдалятьПомеченныеНаУдаление Тогда

		ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма);

	КонецЕсли;

	// После очистки нет в регистре удаленных страниц, поэтому СервисРегистровГруппыУдаленные надо очистить.
	ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма);

	Форма.Модифицированность = Истина;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОбновить

// Обновляет Титульный лист отчета ФСРАР в соответствии с установленной в отчете датой подписи.
//
// Параметры:
//
//	 	Форма							- Управляемая форма - Форма отчета ФСРАР.
//		ВПрограммеИзмененаДатаПодписи	- Булево - Необязательный. Флаг изменения даты подписи.
//										Параметр оставлен для совместимости с общими механизмами 
//										регламентированной отчетности, информация обновляется всегда
//										на установленную в отчете дату подписи.
//
Процедура ОбновитьНаСервереАЛКО(Форма,
		ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт

	Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	// Всегда заполняются данные на дату в поле ДатаПодписи.
	ЗаполнитьСведенияОбОрганизацииАЛКО(Форма);

	Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);

	Форма.Модифицированность = Истина;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсРегистры

// Определяет, было ли уже редактирование записи регистра в сеансе работы с отчетом.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений СведенияРеглОтчетАлкоЖурнал).
//	 		ИмяРегистра					- Строка - имя регистра сведений, запись которого проверяется
//										(измерение ИмяРегистра регистра сведений СведенияРеглОтчетАлкоЖурнал).
//			ИндексСтраницыРегистра		- Число - индекс страницы регистра (измерение ИндексСтраницыРегистра). 
//			ИндексСтроки				- Число - индекс строки (измерение ИндексСтроки).
//
// Возвращаемое значение:
//		Булево.							- Истина, если редактирования еще не было.
//
Функция ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет,
		ИмяРегистра, ИндексСтраницыРегистра, ИндексСтроки) Экспорт

	НабЗаписейЖурРедактирование = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, ИндексСтроки, "Редактирование");

	Возврат (НабЗаписейЖурРедактирование.Количество() = 0);

КонецФункции

// Возвращает признак наличия записи в регистре с текущими измерениями, установленными в Записи.
//
// Параметры
//		
//		Запись 			- Запись регистра сведений, записанная или не записанная в регистр.
//		ИмяРегистра 	- Строка. Имя регистра сведений.
//
// Результат
//		Булево. Истина если запись с измерениями, переданными в Запись, уже существует в регистре сведений.
//
Функция СуществуетЗапись(Запись, ИмяРегистра, СтруктураИзмерений = Неопределено) Экспорт

	Если СтруктураИзмерений = Неопределено Тогда
	
		СписокСоставаРегистра = Новый СписокЗначений;
		СписокСоставаРегистра.Добавить("Измерения");
		СтруктураИзмерений = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра, СписокСоставаРегистра);	
	
	КонецЕсли; 
	
	Регистр = РегистрыСведений[ИмяРегистра];
	НаборЗаписей = Регистр.СоздатьНаборЗаписей();

	Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл

		Измерение = ЭлементИзмерения.Ключ;

		НаборЗаписей.Отбор[Измерение].Установить(Запись[Измерение]);

	КонецЦикла;

	НаборЗаписей.Прочитать();

	Возврат (НаборЗаписей.Количество() > 0);

КонецФункции

Функция КоличествоСтрокСтраницыОтчетаПоРегистру(ИДДокИндСтраницы,
		ИмяРегистраСведений, КоличествоСтрок) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|	МАКСИМУМ(РегистрСведенийОтчета.ИндексСтроки) КАК МаксНомерСтроки
		|ИЗ
		|	#ИмяРегистраСведенийАЛКО КАК РегистрСведенийОтчета
		|ГДЕ
		|	РегистрСведенийОтчета.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийОтчета.ИндексСтроки > &КоличествоСтрок";

	ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистраСведенийАЛКО", ИмяРегистраСведенийАЛКО);

	ЗапросМаксНомераСтроки = Новый Запрос;
	ЗапросМаксНомераСтроки.Текст = ТекстЗапроса;
	ЗапросМаксНомераСтроки.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
	ЗапросМаксНомераСтроки.Параметры.Вставить("КоличествоСтрок", КоличествоСтрок
		- 1);

	РезультатЗапроса = ЗапросМаксНомераСтроки.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда

		ТекстЗапроса = "ВЫБРАТЬ
			|	МАКСИМУМ(РегистрСведенийОтчета.ИндексСтроки) КАК МаксНомерСтроки
			|ИЗ
			|	#ИмяРегистраСведенийАЛКО КАК РегистрСведенийОтчета
			|ГДЕ
			|	РегистрСведенийОтчета.ИДДокИндСтраницы = &ИДДокИндСтраницы";

		ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистраСведенийАЛКО", ИмяРегистраСведенийАЛКО);

		ЗапросМаксНомераСтроки = Новый Запрос;
		ЗапросМаксНомераСтроки.Текст = ТекстЗапроса;
		ЗапросМаксНомераСтроки.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);

		РезультатЗапроса = ЗапросМаксНомераСтроки.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		Иначе
			Возврат РезультатЗапроса.Выгрузить()[0].МаксНомерСтроки;
		КонецЕсли;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].МаксНомерСтроки;
	КонецЕсли;

КонецФункции

// Формирует строку, представляющую структуру данных определенной записи регистра сведений 
// в виде внутреннего представления.
//
// Параметры:
//
//			Запись						- запись регистра сведений.
//	 		ИмяРегистра					- Строка - имя регистра сведений.
//			СтруктураДанныхЗаписи		- Необязательный. В этом параметре возвращается структура записи
//										регистра сведений, ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - значения записи по этим измерениям, ресурсам
//										и реквизитам.
//
// Возвращаемое значение:
//		Строка.							- внутреннее представление структуры СтруктураДанныхЗаписи.
//
Функция ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(Запись,
		ИмяРегистра, СтруктураДанныхЗаписи = Неопределено) Экспорт

	СтруктураДанныхЗаписи = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЗаписи, Запись);

	Возврат ЗначениеВСтрокуВнутр(СтруктураДанныхЗаписи);

КонецФункции

// Формирует структуру данных регистра сведений, с ключами, соответствующими стандартным реквизитам,
// измерениям, ресурсам и реквизитам регистра, значения пустые.
//
// Параметры:
//
//	 		ИмяРегистра					- Строка - имя регистра сведений.
//			СписокСоставаРегистра		- СписокЗначений - Список, содержащий состав сведений - 
//										"СтандартныеРеквизиты"
//										"Измерения"
//										"Ресурсы"
//										"Реквизиты"
//										В случае передачи этого параметра, в структуру попадают только данные,
//										перечисленные в составе сведений.
//
// Возвращаемое значение:
//			Структура					Ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - Неопределено или пустые значения для чисел и строк.
//
Функция ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра,
		СписокСоставаРегистра = Неопределено, ФильтрПоТипу = Неопределено) Экспорт

	Результат = Новый Структура;

	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];

	// Выставляем флаги сбора необходимой информации.
	ПроверятьПоСписку = (ТипЗнч(СписокСоставаРегистра) = Тип("СписокЗначений"));

	ФлагСтандартныеРеквизиты = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("СтандартныеРеквизиты") = Неопределено)));

	ФлагИзмерения = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Измерения") = Неопределено)));

	ФлагРесурсы = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Ресурсы") = Неопределено)));

	ФлагРеквизиты = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Реквизиты") = Неопределено)));

	ЕстьФильтрПоТипу = (НЕ (ФильтрПоТипу = Неопределено))
		И (ТипЗнч(ФильтрПоТипу) = Тип("Тип"));

	Если ФлагСтандартныеРеквизиты Тогда

		СтандартныеРеквизиты = МетаданныеРегистра.СтандартныеРеквизиты;
		Для Каждого СтдРеквизит Из СтандартныеРеквизиты Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ СтдРеквизит.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(СтдРеквизит.Имя);

			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если СтдРеквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(СтдРеквизит.Имя, 0);
			КонецЕсли;

			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если СтдРеквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(СтдРеквизит.Имя, "");
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ФлагИзмерения Тогда

		ИзмеренияРегистра = МетаданныеРегистра.Измерения;
		Для Каждого Измерение Из ИзмеренияРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Измерение.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Измерение.Имя);

			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Измерение.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Измерение.Имя, 0);
			КонецЕсли;

			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Измерение.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Измерение.Имя, "");
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ФлагРесурсы Тогда

		РесурсыРегистра = МетаданныеРегистра.Ресурсы;
		Для Каждого Ресурс Из РесурсыРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Ресурс.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Ресурс.Имя);

			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Ресурс.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Ресурс.Имя, 0);
			КонецЕсли;

			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Ресурс.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Ресурс.Имя, "");
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ФлагРеквизиты Тогда

		РеквизитыРегистра = МетаданныеРегистра.Реквизиты;
		Для Каждого Реквизит Из РеквизитыРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Реквизит.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Реквизит.Имя);

			// Для числовых данных вставляем 0.
			ПроверяемыйТип = Тип("Число");
			Если Реквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Реквизит.Имя, 0);
			КонецЕсли;

			// Для строковых данных вставляем пустую строку.
			ПроверяемыйТип = Тип("Строка");
			Если Реквизит.Тип.СодержитТип(ПроверяемыйТип) Тогда
				Результат.Вставить(Реквизит.Имя, "");
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует структуру синонимов регистра сведений, с ключами, соответствующими стандартным реквизитам,
// измерениям, ресурсам и реквизитам регистра, значения пустые.
//
// Параметры:
//
//	 		ИмяРегистра					- Строка - имя регистра сведений.
//			СписокСоставаРегистра		- СписокЗначений - Список, содержащий состав сведений - 
//										"СтандартныеРеквизиты"
//										"Измерения"
//										"Ресурсы"
//										"Реквизиты"
//										В случае передачи этого параметра, в структуру попадают только данные,
//										перечисленные в составе сведений.
//
// Возвращаемое значение:
//			Структура					Ключи структуры - имена измерений, ресурсов и реквизитов
//										регистра сведений, значения - Синонимы измерений, ресурсов и т.д.
//
Функция ПолучитьСтруктуруСинонимовЗаписиРегистраСведений(ИмяРегистра,
		СписокСоставаРегистра = Неопределено, ФильтрПоТипу = Неопределено) Экспорт

	Результат = Новый Структура;

	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];

	// Выставляем флаги сбора необходимой информации.
	ПроверятьПоСписку = (ТипЗнч(СписокСоставаРегистра) = Тип("СписокЗначений"));

	ФлагСтандартныеРеквизиты = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("СтандартныеРеквизиты") = Неопределено)));

	ФлагИзмерения = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Измерения") = Неопределено)));

	ФлагРесурсы = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Ресурсы") = Неопределено)));

	ФлагРеквизиты = (НЕ ПроверятьПоСписку) или (ПроверятьПоСписку
		и (НЕ (СписокСоставаРегистра.НайтиПоЗначению("Реквизиты") = Неопределено)));

	ЕстьФильтрПоТипу = (НЕ (ФильтрПоТипу = Неопределено))
		И (ТипЗнч(ФильтрПоТипу) = Тип("Тип"));

	Если ФлагСтандартныеРеквизиты Тогда

		СтандартныеРеквизиты = МетаданныеРегистра.СтандартныеРеквизиты;
		Для Каждого СтдРеквизит Из СтандартныеРеквизиты Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ СтдРеквизит.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(СтдРеквизит.Имя, СтдРеквизит.Синоним);

		КонецЦикла;

	КонецЕсли;

	Если ФлагИзмерения Тогда

		ИзмеренияРегистра = МетаданныеРегистра.Измерения;
		Для Каждого Измерение Из ИзмеренияРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Измерение.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Измерение.Имя, Измерение.Синоним);

		КонецЦикла;

	КонецЕсли;

	Если ФлагРесурсы Тогда

		РесурсыРегистра = МетаданныеРегистра.Ресурсы;
		Для Каждого Ресурс Из РесурсыРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Ресурс.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Ресурс.Имя, Ресурс.Синоним);

		КонецЦикла;

	КонецЕсли;

	Если ФлагРеквизиты Тогда

		РеквизитыРегистра = МетаданныеРегистра.Реквизиты;
		Для Каждого Реквизит Из РеквизитыРегистра Цикл

			Если ЕстьФильтрПоТипу Тогда
				Если НЕ Реквизит.Тип.СодержитТип(ФильтрПоТипу) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Результат.Вставить(Реквизит.Имя, Реквизит.Синоним);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует структуру модифицированности записи регистра сведений по сравнению с первоначальными
// значениями измерений, ресурсов и реквизитов, возвращая общий признак модифицированности записи.
//
// Параметры:
//
//	 		Запись								- Запись регистра сведений
//			НачальноеЗначениеСтруктураДанных	- Структура - Структура первоначальных значений записи до
//												начала изменений.
//			ДоПервого							- Булево - Истина, если проверять надо до нахождения первого
//												отличия от первоначальных значений.
//			СтруктураМодифицированности			- в этом параметре возвращается структура, ключи которой
//												совпадают с именами измерений, ресурсов и реквизитов регистра,
//												а значения имеют тип Булево и соответствуют модифицированности
//												записи по ключу. Имеет смысл только если ДоПервого = Ложь.
//
// Возвращаемое значение:
//			Булево					Истина, если запись модифицированна.
//
Функция ЗаписьИзменилась(Запись, НачальноеЗначениеСтруктураДанных,
		ДоПервого = Истина, СтруктураМодифицированности = Неопределено) Экспорт

	Результат = Ложь;

	СтруктураМодифицированности = Новый Структура;

	Для Каждого ЭлементСтруктуры Из НачальноеЗначениеСтруктураДанных Цикл

		ИмяПоля = ЭлементСтруктуры.Ключ;

		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Строка") Тогда

			Если СокрЛП(Запись[ИмяПоля]) <> СокрЛП(ЭлементСтруктуры.Значение) Тогда
				Результат = Истина;
				СтруктураМодифицированности.Вставить(ИмяПоля, Истина);
			КонецЕсли;

		Иначе

			Если Запись[ИмяПоля] <> ЭлементСтруктуры.Значение Тогда
				Результат = Истина;
				СтруктураМодифицированности.Вставить(ИмяПоля, Истина);
			КонецЕсли;

		КонецЕсли;

		Если НЕ СтруктураМодифицированности.Свойство(ИмяПоля) Тогда
			СтруктураМодифицированности.Вставить(ИмяПоля, Ложь);
		КонецЕсли;

		Если ДоПервого и Результат Тогда
			Возврат Результат;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Производит запись в регистр сведений СведенияРеглОтчетАлкоЖурнал.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений СведенияРеглОтчетАлкоЖурнал).
//	 		ИмяРегистра					- Строка - имя регистра сведений, к которому имеет отношение запись Журнала.
//										(измерение ИмяРегистра регистра сведений СведенияРеглОтчетАлкоЖурнал).
//			ИндексСтраницыРегистра		- Число - индекс страницы регистра (измерение ИндексСтраницыРегистра). 
//			ИндексСтроки				- Число - индекс строки (измерение ИндексСтроки).
//			Действие					- Число или Строка - 
//										Если Число - должно соответствовать одному из значений, возвращаемых
//										ПолучитьСоответствиеДействийЖуранала(Ложь)
//                                       										
// 										10 - удаление страницы
// 										11 - добавление страницы
// 										15 - сервис (внесение сервисных данных по ресурсам)
// 										16 - автозаполнение.
//	 
// 										3 - при добавлении строки, 
// 										4 - при редактировании (изменении).
//
//										Если Строка - должно соответствовать одному из значений, возвращаемых
//										ПолучитьСоответствиеДействийЖуранала(Истина)
//
//										"УдалениеСтраницы"
//										"ДобавлениеСтраницы"
//										"Сервис"
//										"Автозаполнение"
//
//										"ДобавлениеСтроки"
//										"Редактирование"
//
//			Ресурсы						- Структура - Необязательный. Возможные свойства:
//				* МаксИндексСтраницы	- Число - максимальный когда либо использованный индекс регистра в отчете.
//				* НачальноеЗначение		- Строка - содержит структуру начальных значений записи 
//										во внутреннем представлении .
//				* КоличествоСтрок 		- Число - количество строк (включая помеченные на удаление) 
//										на странице по регистру.
//
//			Переданные в Ресурсах значения записываются каждое по отдельности.
//			Если передаются Ресурсы, для значений МаксИндексСтраницы и КоличествоСтрок при записи принудительно
//			выставляется индекс строки 0.
//
// Возвращаемое значение:
//			Булево					Истина, если запись добавлена в журнал.
//
Функция ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра,
		ИндексСтраницыРегистра, ИндексСтроки, Действие,
		Ресурсы = Неопределено) Экспорт

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	ЧислоИндексСтраницыРегистра = Число(ИндексСтраницыРегистра);
	ЧислоИндексСтроки = Число(ИндексСтроки);

	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	Если ТипЗнч(Действие) = Тип("Число") Тогда

		ЧислоДействие = Действие;

	ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда

		ЧислоДействие = СоответствиеДействий.Получить(Действие);

		Если НЕ ЧислоДействие = Неопределено Тогда

		Иначе
			Возврат Ложь;
		КонецЕсли;

	Иначе

		Возврат Ложь;

	КонецЕсли;

	ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);

	Если ОбратноеСоответствиеДействий.Получить(ЧислоДействие) = Неопределено Тогда
	// Передано неверное число Действия.
		Возврат Ложь;
	КонецЕсли;

	Результат = Истина;

	// Для действий кроме Сервис и Редактирование ресурсы необязательны.
	Если НЕ (ЧислоДействие = СоответствиеДействий.Получить("Сервис")
			или ЧислоДействие = СоответствиеДействий.Получить("Редактирование")) Тогда

			// Для остальных действий в любом случае фиксируем само действие.
		Результат = Результат
			и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ЧислоИндексСтраницыРегистра, ЧислоИндексСтроки, ЧислоДействие);
	КонецЕсли;

	Если НЕ Результат Тогда
		Возврат Результат;
	КонецЕсли;

	// Анализируем Ресурсы.	
	Если НЕ Ресурсы = Неопределено Тогда

		Если НЕ (ТипЗнч(Ресурсы) = Тип("Структура")
				или ТипЗнч(Ресурсы) = Тип("ФиксированнаяСтруктура")) Тогда
			Возврат Результат;
		КонецЕсли;

		// Если есть поле МаксИндексСтраницы, нужно записать имя регистра "ОбщиеСведения" и действие "Сервис",
		// остальные ресурсы и измерения нулевые, исключая  измерение Документ.
		Если Ресурсы.Свойство("МаксИндексСтраницы") Тогда

			РесурсыОбщиеСведения = Новый Структура;
			РесурсыОбщиеСведения.Вставить("МаксИндексСтраницы", Ресурсы.МаксИндексСтраницы);
			Результат = Результат
				и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, "ОбщиеСведения", 0, 0, СоответствиеДействий.Получить("Сервис"), РесурсыОбщиеСведения);

		КонецЕсли;

		Если Ресурсы.Свойство("ЗаявлениеОКорректировке") Тогда

			РесурсыОбщиеСведения = Новый Структура;

			РесурсыОбщиеСведения.Вставить("НачальноеЗначение", ЗначениеВСтрокуВнутр(Ресурсы.ЗаявлениеОКорректировке));
			Результат = Результат
				и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, "ЗаявлениеОКорректировке", 0, 0, СоответствиеДействий.Получить("Сервис"), РесурсыОбщиеСведения);

		КонецЕсли;

		Если НЕ Результат Тогда
			Возврат Результат;
		КонецЕсли;

		// Если есть поле НачальноеЗначение, нужно записать действие "Редактирование",
		// ИндексСтроки при этом не может быть нулевым.
		Если Ресурсы.Свойство("НачальноеЗначение") Тогда

			Если (ЧислоИндексСтроки = 0) или (ЧислоИндексСтроки = -1) Тогда
				Результат = Ложь;
			Иначе

				РесурсыНачальноеЗначение = Новый Структура;
				РесурсыНачальноеЗначение.Вставить("НачальноеЗначение", Ресурсы.НачальноеЗначение);
				Результат = Результат
					и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ЧислоИндексСтраницыРегистра, ЧислоИндексСтроки, СоответствиеДействий.Получить("Редактирование"), РесурсыНачальноеЗначение);

			КонецЕсли;

		КонецЕсли;

		Если НЕ Результат Тогда
			Возврат Результат;
		КонецЕсли;

		// Если есть поле КоличествоСтрок, нужно записать действие "Сервис",
		// ИндексСтроки при этом должен быть нулевым.
		Если Ресурсы.Свойство("КоличествоСтрок") Тогда

			РесурсыСервис = Новый Структура;

			Если Ресурсы.Свойство("КоличествоСтрок") Тогда
				РесурсыСервис.Вставить("КоличествоСтрок", Ресурсы.КоличествоСтрок);
			КонецЕсли;

			Результат = Результат
				и ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра, ЧислоИндексСтраницыРегистра, 0, СоответствиеДействий.Получить("Сервис"), РесурсыСервис);

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Производит запись в регистр сведений данных из таблицы значений, с привязкой к конкретному отчету.
// При этом данные дописываются, начиная с номера строки, переданного как номер последней записанной
// строки.
//
// Параметры:
//
//			ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - документ отчета
//										(измерение Документ регистра сведений).
//			ИмяФормыОбъекта				- Строка - имя формы отчета.
//	 		ИмяРегистраСведений			- Строка - имя регистра сведений, в который производится запись данных.
//										
//			ИндексСтраницы				- Число - индекс страницы регистра (измерение ИндексСтраницы). 
//			ТЗ							- ТаблицаЗначений - таблица значений, данные которой заносятся в регистр.
//			КоличествоТекСтрок			- Число - последний использованный индекс строки для данной страницы регистра.
//
//
Процедура ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
		ИмяФормыОбъекта, ИмяРегистраСведений, ИндексСтраницыРегистра, ТЗ,
		КоличествоТекСтрок) Экспорт

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко() 
				|передана ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	КолВБлокеЗаписей = 1000;

	Если ТранзакцияАктивна() Тогда
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
				+ ИмяРегистраСведений);
			ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'РегистрСведений."
				+ ИмяРегистраСведений + "
				|- ошибка блокировки при добавлении записей из таблицы значений.'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение ТекстСообщения;

		КонецПопытки;
	КонецЕсли;

	РегистрСведенийГруппы = РегистрыСведений[ИмяРегистраСведений];

	// Определим состав ресурсов по регистру.
	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Ресурсы");
	СтруктураРесурсов = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений, СписокСоставаРегистра);

	КолонкиТЗ = ТЗ.Колонки;
	Для каждого ЭлементСтруктуры Из СтруктураРесурсов Цикл

		Если КолонкиТЗ.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
			КолонкиТЗ.Добавить(ЭлементСтруктуры.Ключ);
		КонецЕсли;

	КонецЦикла;

	НаборЗаписей = РегистрСведенийГруппы.СоздатьНаборЗаписей();

	ИДДок = Неопределено;
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра, ИДДок);
	
	// Если количество уже записанных строк 0 - перед началом записи в регистр на всякий случай
	// есть смысл удалить записи по индексу страницы.
	// В нормальном варианте работы - там и так будет пусто и удалять нечего.
	// Но при ошибках - возможно наличие записанных записей при предыдущей попытке.
	Если КоличествоТекСтрок = 0 Тогда

		НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);
		// Удаляем записывая пустой набор в режиме замещения.
		НаборЗаписей.Записать(Истина);

		// Очистим от отбора, просто создав новый набор.
		НаборЗаписей = РегистрСведенийГруппы.СоздатьНаборЗаписей();

	КонецЕсли;

	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	// Блок обработки таблиц в зависимости от отчета.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, ТЗ);
	
	ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокументСсылкаАлкоОтчет);
	Если НЕ ОписаниеРегОтчета = Неопределено Тогда	
		ДатаКонцаПериодаОтчета = ОписаниеРегОтчета.ДатаКонцаПериодаОтчета;
	Иначе
		ДатаКонцаПериодаОтчета = Неопределено;
	КонецЕсли; 
	
	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");

	Для Каждого СтрокаТЗ Из ТЗ Цикл

	// Сначала проверяем - заполнена ли строка.
		СтрокаЗаполнена = Ложь;
		Для каждого ЭлементСтруктуры Из СтруктураРесурсов Цикл

			Если ЗначениеЗаполнено(СтрокаТЗ[ЭлементСтруктуры.Ключ]) Тогда

				СтрокаЗаполнена = Истина;
				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если НЕ СтрокаЗаполнена Тогда

		// Не заполненные строки игнорируем.
			Продолжить;

		КонецЕсли;

		// Добавление новой записи.
		КоличествоТекСтрок = КоличествоТекСтрок + 1;

		НоваяЗапись = НаборЗаписей.Добавить();

		// Обработка заключается в вычислении хеш сумм по необходимым полям,
		// и удалении ведущих и оконечных пробелов из строковых полей.
		ОбъектОтчета.ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистраСведений, СтрокаТЗ, ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);

		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЗ);

		НоваяЗапись.Документ = ДокументСсылкаАлкоОтчет;

		Если ВышеБРО_1_1_11_0 Тогда
			НоваяЗапись.Организация = ДокументСсылкаАлкоОтчет.Организация;
		КонецЕсли;

		НоваяЗапись.ИндексСтроки = КоличествоТекСтрок;

		НоваяЗапись.ИДДокИндСтраницы = ИДДокИндСтраницы;

		НоваяЗапись.Активно = Истина;

		// Пишем, чтобы не раздувать использование оперативной памяти сервера.
		Если КоличествоТекСтрок % КолВБлокеЗаписей = 0 Тогда

		// В режиме дописывания.
			НаборЗаписей.Записать(Ложь);
			НаборЗаписей.Очистить();

		КонецЕсли;

	КонецЦикла;

	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры

// Определяет регистр сведений по идентификатору многострочной группы и возвращает его.
//
// Параметры:
//
//	 		ИдГруппы						- Строка.  Идентификатор многострочной группы отчета.
//			СтруктураРеквизитовФормы		- Структура - стандартный реквизит формы регламентированной отчетности.
//
// Возвращаемое значение:
//			РегистрыСведений.<Имя регистра> или Неопределено.
//
Функция ПолучитьРегистрСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы) Экспорт

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	Если НЕ ИмяРегистраСведений = Неопределено Тогда

		Возврат РегистрыСведений[ИмяРегистраСведений];

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Активизирует нужную строку нужной многострочной группы текущей страницы отчета ФСРАР.
// Предполагается что переход на нужную страницу многострочного раздела уже произведен.
//
// Параметры:
//
//	 	Форма						- Управляемая форма - Форма отчета ФСРАР.
//	 	ИдГруппы					- Строка - Идентификатор многострочной группы отчета.
//		НомерСтроки					- Число - Номер активизируемой строки.
//		ИмяПоля						- Строка - Необязательный. Имя поля таблицы, столбец которой нужно сделать активным.
//
// Возвращаемое значение:
//		Булево					Истина, если переход на строку прошел без ошибок.
//
Функция ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, НомерСтроки,
		ИмяПоля = Неопределено) Экспорт

	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;
	КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, ИдГруппы, ИндексСтраницы);

	Если КоличествоСтрок = 0 Тогда
	//Ничего не делаем.	    
		Возврат Ложь;
	КонецЕсли;

	ТаблицаФормыРаздела = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];

	ПодчиненныеЭлементыТаблицы = ТаблицаФормыРаздела.ПодчиненныеЭлементы;

	ИмяТекущегоЭлементаДоПерехода = Неопределено;
	Если ТаблицаФормыРаздела.ТекущийЭлемент <> Неопределено Тогда

		Поле = ПодчиненныеЭлементыТаблицы.Найти(ТаблицаФормыРаздела.ТекущийЭлемент.Имя);
		Если Поле <> Неопределено Тогда
			ИмяТекущегоЭлементаДоПерехода = ТаблицаФормыРаздела.ТекущийЭлемент.Имя;
		КонецЕсли;

	КонецЕсли;

	НомерСтроки = Число(НомерСтроки);

	Если НомерСтроки < 1 Тогда
		НомерСтроки = 1;
	КонецЕсли;

	Если НомерСтроки > КоличествоСтрок Тогда	
		НомерСтроки = КоличествоСтрок;
	КонецЕсли;

	СтараяТекущаяСтрока = ТаблицаФормыРаздела.ТекущаяСтрока;

	// Номер строки не превышает количества записей.
	// Нужно получить ключ нужной записи.
	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
	КлючНужнойЗаписи = ПолучитьКлючЗаписиРегистраСведенийАлко(Форма, ИмяРегистраСведений, ИдГруппы, ИндексСтраницы, НомерСтроки);

	ТаблицаФормыРаздела.ТекущаяСтрока = КлючНужнойЗаписи;

	// Нужно убедится что переход прошел успешно.
	Если ТаблицаФормыРаздела.ТекущаяСтрока = Неопределено Тогда

	// Никуда не перешли - текущая строка вне ограничений вывода.
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Строка № "
			+ НомерСтроки
			+ " вне диапазона вывода. Возможно включен отбор по поиску.'"));

		ТаблицаФормыРаздела.ТекущаяСтрока = СтараяТекущаяСтрока;

		Возврат Ложь;

	КонецЕсли;

	Если ИмяПоля <> Неопределено Тогда

		Поле = ПодчиненныеЭлементыТаблицы.Найти(ИмяПоля);

		Если Поле <> Неопределено Тогда

			ТаблицаФормыРаздела.ТекущийЭлемент = Поле;
			Форма.ТекущийЭлемент = Поле;

		КонецЕсли;

	ИначеЕсли ИмяТекущегоЭлементаДоПерехода <> Неопределено Тогда

		Поле = ПодчиненныеЭлементыТаблицы.Найти(ИмяТекущегоЭлементаДоПерехода);

		Если Поле <> Неопределено Тогда

			ТаблицаФормыРаздела.ТекущийЭлемент = Поле;
			Форма.ТекущийЭлемент = Поле;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции

// Выгружает в таблицу значений данные регистра сведений, в котором храняться строки табличных разделов алкоотчетов.
//
// Параметры:
//
//	 	ИдГруппы					- Строка - Идентификатор многострочной группы отчета.
//      ИндексСтраницы				- Число - Индекс страницы отчета в реквизите формы отчета таблице значений
//									ТаблицаСтраницы<ИмяРаздела>.
//		СтруктураРеквизитовФормы	- Структура - стандартный реквизит формы регламентированной отчетности.
//		СтруктураСервисРегистров	- Структура. Необязательный. Результат работы функции 
//									ПолучитьСтруктуруСервисРегистровАЛКО().
//		ИДДокИндСтраницы			- Строка. Необязательный. Значение измерения ИДДокИндСтраницы регистра.
//
//      Должен быть определен либо параметр СтруктураСервисРегистров, либо ИДДокИндСтраницы.
//
//		ДляПечати					- Булево - флаг контекста использования функции.
//		СтруктураНастроекНеДляПечати - Структура. Необязательный. Содержит информацию для отбора из регистров.
//			* КоличествоПервых 		- Число. Необязательный. - Количество первых записей в запросе, 
//									указываемые в языке запросов инструкцией "ВЫБРАТЬ ПЕРВЫЕ.."
//			* ТекущийИндексСтроки	- Число. Необязательный. - Значение измерения ИндексСтроки, если установлено,
//									отбираются записи с большим индексом, чем ТекущийИндексСтроки.
//
// Возвращаемое значение:
//		ТаблицаЗначений.
//
Функция ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы,
		СтруктураРеквизитовФормы, СтруктураСервисРегистров = Неопределено,
		ИДДокИндСтраницы = Неопределено, ДляПечати = Истина,
		СтруктураНастроекНеДляПечати = Неопределено) Экспорт

	Перем КоличествоПервых, ТекущийИндексСтроки, ЕстьСтранаРегистрации,
		СписокПолейКонтрагентов;

	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

	ЕстьСтранаРегистрации = Ложь;
	
	Если НЕ ДляПечати Тогда

		Если ТипЗнч(СтруктураНастроекНеДляПечати) = Тип("Структура") Тогда

			СтруктураНастроекНеДляПечати.Свойство("КоличествоПервых", КоличествоПервых);
			СтруктураНастроекНеДляПечати.Свойство("ТекущийИндексСтроки", ТекущийИндексСтроки);
			СтруктураНастроекНеДляПечати.Свойство("ЕстьСтранаРегистрации", ЕстьСтранаРегистрации);
			СтруктураНастроекНеДляПечати.Свойство("СписокПолейКонтрагентов", СписокПолейКонтрагентов);

			Если ТипЗнч(СписокПолейКонтрагентов) = Тип("Массив")
				И СписокПолейКонтрагентов.Количество() > 0 Тогда
			
				ЕстьСтранаРегистрации = ?(ТипЗнч(ЕстьСтранаРегистрации) = Тип("Булево"), ЕстьСтранаРегистрации, Неопределено);
				Если ЕстьСтранаРегистрации = Неопределено Тогда

					МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
					ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

				КонецЕсли;	
			Иначе
				ЕстьСтранаРегистрации = ?(ТипЗнч(ЕстьСтранаРегистрации) = Тип("Булево"), ЕстьСтранаРегистрации, Ложь);
			КонецЕсли; 
			
		КонецЕсли;

	Иначе
		КоличествоПервых = Неопределено;
		ТекущийИндексСтроки = Неопределено;
		СписокПолейКонтрагентов = Неопределено;
	КонецЕсли;

	ИДДок = Неопределено;
	СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	
	Если ИндексСтраницы >= 0 Тогда

		Если НЕ ЗначениеЗаполнено(ИДДокИндСтраницы) Тогда

			Если ТипЗнч(СтруктураСервисРегистров) = Тип("Структура") Тогда

				СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
				ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

				ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокОтчета, ИндексСтраницыРегистра, ИДДок);
				
			Иначе
				ВызватьИсключение "В функцию ЗаполнитьПоСтраницеРазделаАЛКО() модуля РегламентированнаяОтчетностьАЛКО
					|не передан хотя бы один из параметров СтруктураСервисРегистров или ИДДокИндСтраницы.";
			КонецЕсли;

		КонецЕсли;

		ТекстЗапроса = "ВЫБРАТЬ #СтрокаПервые
			|	АлкоПрилДанные.* #ДополнительныеПоля
			|
			|ИЗ
			|	#РегистрСведенийАЛКО КАК АлкоПрилДанные
			|
			|ГДЕ 
			|	(АлкоПрилДанные.ИДДокИндСтраницы = &ИДДокИндСтраницы) 
			|	И (АлкоПрилДанные.Активно = Истина)
			|	И &УсловиеПоИндексуСтроки
			|
			|УПОРЯДОЧИТЬ ПО ИндексСтроки
			|";

		СтрокаПервые = ?(НЕ КоличествоПервых = Неопределено, " ПЕРВЫЕ "
			+ СтрокаЧГ0(КоличествоПервых), "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " #СтрокаПервые", СтрокаПервые);

		Если ЕстьСтранаРегистрации И ТипЗнч(СписокПолейКонтрагентов) = Тип("Массив")
				И СписокПолейКонтрагентов.Количество() > 0 Тогда

			ДополнительныеПоля = "";

			ЗапятаяИНачалоСтроки = ",
				|	";
			Для каждого ИмяПоляКонтрагента Из СписокПолейКонтрагентов Цикл

				ДополнительныеПоля = ДополнительныеПоля + ЗапятаяИНачалоСтроки
					+ "АлкоПрилДанные." + ИмяПоляКонтрагента
					+ ".СтранаРегистрации КАК СтранаРегистрации" + ИмяПоляКонтрагента;

			КонецЦикла;

		Иначе
			ДополнительныеПоля = "";
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " #ДополнительныеПоля", ДополнительныеПоля);

		ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

		УсловиеПоИндексуСтроки = ?(НЕ ТекущийИндексСтроки = Неопределено, "(АлкоПрилДанные.ИндексСтроки > &ТекущийИндексСтроки)", "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИндексуСтроки", УсловиеПоИндексуСтроки);

		ЗапросСтрокДанныхРаздела = Новый Запрос;
		ЗапросСтрокДанныхРаздела.Текст = ТекстЗапроса;
		ЗапросСтрокДанныхРаздела.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);

		Если НЕ ТекущийИндексСтроки = Неопределено Тогда
			ЗапросСтрокДанныхРаздела.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		КонецЕсли;

		Результат = ЗапросСтрокДанныхРаздела.Выполнить().Выгрузить();

	Иначе

	// Выдаем пустую таблицу со структурой регистра.
		СтруктураРесурсов = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений);

		Результат = Новый ТаблицаЗначений;

		Для каждого ЭлементСтруктуры Из СтруктураРесурсов Цикл

			ИмяКолонки = ЭлементСтруктуры.Ключ;

			Результат.Колонки.Добавить(ИмяКолонки);

		КонецЦикла;

	КонецЕсли;

	//Если ДляПечати Тогда

	//// В любом случае нужно исключить колонки, НЕ относящиеся к ресурсам регистра,
	//	// в измерениях и реквизитах вспомогательная информация.
	//	СписокСоставаРегистра = Новый СписокЗначений;
	//	СписокСоставаРегистра.Добавить("Ресурсы");
	//	СтруктураРесурсов = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений, СписокСоставаРегистра);

	//	СписокУдаляемыхКолонок = Новый СписокЗначений;

	//	Для каждого Колонка Из Результат.Колонки Цикл

	//	// Удаляем колонки, НЕ относящиеся к ресурсам регистра,
	//	// в измерениях и реквизитах вспомогательная информация.
	//		Если НЕ СтруктураРесурсов.Свойство(Колонка.Имя) Тогда
	//			СписокУдаляемыхКолонок.Добавить(Колонка.Имя);
	//		КонецЕсли;

	//	КонецЦикла;

	//	Для каждого ЭлементСписка Из СписокУдаляемыхКолонок Цикл
	//		Результат.Колонки.Удалить(ЭлементСписка.Значение);
	//	КонецЦикла;

	//КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ОтобратьСтрокиПоГрафам(ИДДокИндСтраницы, ИмяРегистра, ИдГруппы,
		СписокГраф) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
		|  АлкоПрилДанные.*
		|
		|ИЗ
		|	#РегистрСведенийАЛКО КАК АлкоПрилДанные
		|
		|ГДЕ 
		|	(АлкоПрилДанные.ИДДокИндСтраницы = &ИДДокИндСтраницы) 
		|	И (АлкоПрилДанные.Активно = Истина)
		|	#УсловиеПоГрафам
		|
		|УПОРЯДОЧИТЬ ПО ИндексСтроки
		|";

	ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистра;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

	УсловиеПоГрафам = "";

	МассивГраф = Новый Массив;
	Если НЕ ПустаяСтрока(СписокГраф) Тогда
		МассивГраф = СтрРазделить(СписокГраф, ",", Ложь);
	КонецЕсли;

	РазделительУсловия = "";

	// Нужно преобразовать номера колонок в колонки таблицы,
	// и сформировать выборку и условие выборки по графам - 
	// чтобы не попадали незаполненные по нужным графам строки.
	Счетчик = 0;
	Для каждого ЭлементМассива Из МассивГраф Цикл

		Счетчик = Счетчик + 1;

		ИмяКолонки = ИдГруппы + ЭлементМассива;

		Если Счетчик = 1 Тогда
			РазделительУсловия = "И (" + Символы.ПС;
		Иначе
			РазделительУсловия = Символы.ПС + " ИЛИ ";
		КонецЕсли;

		УсловиеПоГрафам = УсловиеПоГрафам + РазделительУсловия + "АлкоПрилДанные."
			+ ИмяКолонки + " > 0";

	КонецЦикла;

	УсловиеПоГрафам = УсловиеПоГрафам + ")";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоГрафам", УсловиеПоГрафам);

	ЗапросСтрокДанныхРаздела = Новый Запрос;
	ЗапросСтрокДанныхРаздела.Текст = ТекстЗапроса;
	ЗапросСтрокДанныхРаздела.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);

	РезультатЗапроса = ЗапросСтрокДанныхРаздела.Выполнить();

	Возврат РезультатЗапроса;

КонецФункции

Функция НайтиСданныйАлкоОтчетОпределенногоИсточникаПоОбразцу(ОбразецДокументСсылкаАлкоОтчет,
		ИсточникОтчета) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ДокументСсылкаАлкоОтчет");
	Результат.Вставить("ВариантОтчета");
	Результат.Вставить("СостояниеСдачиОтчетности");
	Результат.Вставить("ДатаПодписи");
	
	ДокументСсылка = ПривестиДокументКСсылке(ОбразецДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.НайтиСданныйАлкоОтчетОпределенногоИсточникаПоОбразцу() 
				|передан ОбразецДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ОбразецДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ОбразецДокументСсылкаАлкоОтчет);

	ОрганизацияОтчета = ОписаниеОтчета.Организация;

	ДатаКонцаПериодаОтчета = ОписаниеОтчета.ДатаКонцаПериодаОтчета;

	ТекстЗапроса = "ВЫБРАТЬ
		|	ЖурналОтчетовСтатусы.Ссылка КАК РегОтчет,
		|	ЖурналОтчетовСтатусы.ВариантОтчета КАК ВариантОтчета,
		|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
		|	ЖурналОтчетовСтатусы.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|ГДЕ
		|	ЖурналОтчетовСтатусы.Организация = &Организация
		|	И ЖурналОтчетовСтатусы.Ссылка.ИсточникОтчета = &ИсточникОтчета
		|	И ЖурналОтчетовСтатусы.ПометкаУдаления = ЛОЖЬ
		|	И ЖурналОтчетовСтатусы.ДатаОкончания = &ДатаОкончания
		|	И ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФСРАР)";

	ЗапросСданныхДокументов = Новый Запрос;
	ЗапросСданныхДокументов.Текст = ТекстЗапроса;

	ЗапросСданныхДокументов.Параметры.Вставить("Организация", ОрганизацияОтчета);
	ЗапросСданныхДокументов.Параметры.Вставить("ИсточникОтчета", ИсточникОтчета);
	ЗапросСданныхДокументов.Параметры.Вставить("ДатаОкончания", ДатаКонцаПериодаОтчета);

	УстановитьПривилегированныйРежим(Истина);
	// Результат запроса в принципе не может быть большим, поэтому вопросом оптимизации скорости можно не заниматься.
	РезультатЗапроса = ЗапросСданныхДокументов.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	// Сначала отбираем сданные отчеты. Если их нет - те что пытались сдать. Если и их нет - те что выгружались.
	СписокОтправленных = Новый ТаблицаЗначений;
	СписокОтправленных.Колонки.Добавить("ДокументСсылкаАлкоОтчет");
	СписокОтправленных.Колонки.Добавить("ВариантОтчета");
	СписокОтправленных.Колонки.Добавить("СостояниеСдачиОтчетности");
	СписокОтправленных.Колонки.Добавить("ДатаПодписи");

	СписокПодготовленных = СписокОтправленных.СкопироватьКолонки();

	ЕстьСданныйОтчет = Ложь;

	Если РезультатЗапроса.Количество() > 0 Тогда

		Для каждого СтрокаРезультата Из РезультатЗапроса Цикл

			Если СокрЛП(СтрокаРезультата.Статус) = "Сдано" Тогда

				НоваяСтрокаОтправленных = СписокОтправленных.Добавить();
				НоваяСтрокаОтправленных.ДокументСсылкаАлкоОтчет = СтрокаРезультата.РегОтчет;
				НоваяСтрокаОтправленных.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
				НоваяСтрокаОтправленных.ВариантОтчета = СтрокаРезультата.РегОтчет.Вид;
				НоваяСтрокаОтправленных.ДатаПодписи = СтрокаРезультата.РегОтчет.ДатаПодписи;

			ИначеЕсли СтрокаРезультата.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат Тогда

				НоваяСтрокаОтправленных = СписокОтправленных.Добавить();
				НоваяСтрокаОтправленных.ДокументСсылкаАлкоОтчет = СтрокаРезультата.РегОтчет;
				НоваяСтрокаОтправленных.СостояниеСдачиОтчетности = СтрокаРезультата.СостояниеСдачиОтчетности;
				НоваяСтрокаОтправленных.ВариантОтчета = СтрокаРезультата.РегОтчет.Вид;
				НоваяСтрокаОтправленных.ДатаПодписи = СтрокаРезультата.РегОтчет.ДатаПодписи;

			ИначеЕсли СокрЛП(СтрокаРезультата.Статус) = "Подготовлено" Тогда

				НоваяСтрокаОтправленных = СписокПодготовленных.Добавить();
				НоваяСтрокаОтправленных.ДокументСсылкаАлкоОтчет = СтрокаРезультата.РегОтчет;
				НоваяСтрокаОтправленных.СостояниеСдачиОтчетности = "подготовленной";
				НоваяСтрокаОтправленных.ВариантОтчета = СтрокаРезультата.РегОтчет.Вид;
				НоваяСтрокаОтправленных.ДатаПодписи = СтрокаРезультата.РегОтчет.ДатаПодписи;

			КонецЕсли;

		КонецЦикла;

		Если СписокОтправленных.Количество() > 0 Тогда

			СписокОтправленных.Сортировать("ВариантОтчета Убыв, ДатаПодписи Убыв");

			ЗаполнитьЗначенияСвойств(Результат, СписокОтправленных[0]);

			ЕстьСданныйОтчет = Истина;

		КонецЕсли;

	КонецЕсли;

	Если ЕстьСданныйОтчет Тогда

		Если Результат.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
			Результат.СостояниеСдачиОтчетности = "сданной";
		ИначеЕсли Результат.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат Тогда
			Результат.СостояниеСдачиОтчетности = "отправленной (сдача пока не подтверждена)";
		КонецЕсли;

	Иначе

	// Организация не подключена к сдаче отчетности, имеет смысл считать сданным последний выгруженный отчет.
		ТекстЗапроса = "ВЫБРАТЬ
			|	ВыгрузкаРегламентированныхОтчетов.Основная.(
			|		Основание КАК РегОтчет
			|	) КАК ОсновнаяТаблица
			|ИЗ
			|	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
			|ГДЕ
			|	ВыгрузкаРегламентированныхОтчетов.Организация = &Организация
			|	И ВыгрузкаРегламентированныхОтчетов.ПериодПо = &ДатаОкончания
			|	И ВыгрузкаРегламентированныхОтчетов.Основная.Основание.ИсточникОтчета = &ИсточникОтчета";

		ЗапросВыгруженныхДокументов = Новый Запрос;
		ЗапросВыгруженныхДокументов.Текст = ТекстЗапроса;

		ЗапросВыгруженныхДокументов.Параметры.Вставить("Организация", ОрганизацияОтчета);
		ЗапросВыгруженныхДокументов.Параметры.Вставить("ИсточникОтчета", ИсточникОтчета);
		ЗапросВыгруженныхДокументов.Параметры.Вставить("ДатаОкончания", ДатаКонцаПериодаОтчета);

		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = ЗапросВыгруженныхДокументов.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);

		Если РезультатЗапроса.Количество() > 0 Тогда

			Для каждого СтрокаРезультата Из РезультатЗапроса Цикл

				ОсновнаяТаблица = СтрокаРезультата.ОсновнаяТаблица;
				Для каждого СтрокаОсновнойТаблицы Из ОсновнаяТаблица Цикл

					РегОтчет = СтрокаОсновнойТаблицы.РегОтчет;
					Если РегОтчет.ИсточникОтчета = ИсточникОтчета Тогда

						НоваяСтрокаВыгруженных = СписокПодготовленных.Добавить();
						НоваяСтрокаВыгруженных.ДокументСсылкаАлкоОтчет = РегОтчет;
						НоваяСтрокаВыгруженных.СостояниеСдачиОтчетности = "выгруженной";
						НоваяСтрокаВыгруженных.ВариантОтчета = РегОтчет.Вид;
						НоваяСтрокаВыгруженных.ДатаПодписи = РегОтчет.ДатаПодписи;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

		Если СписокПодготовленных.Количество() > 0 Тогда

			СписокПодготовленных.Сортировать("ВариантОтчета Убыв, ДатаПодписи Убыв");

			ЗаполнитьЗначенияСвойств(Результат, СписокПодготовленных[0]);

			ЕстьСданныйОтчет = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьСтруктуруСведенийГрафПоОПФармацевтическихДеклараций(ДокументСсылкаАлкоОтчета,
		ТаблицаСтраницыРаздела, СервисРегистровРаздела, ИмяРегистра, ИдГруппы,
		СписокГраф) Экспорт

	Результат = Новый Структура;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчета);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруСведенийГрафПоОПФармацевтическихДеклараций() 
				|передан ДокументСсылкаАлкоОтчета, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчета = ДокументСсылка;
	
	НомерЛиста = 0;
	Для каждого ЛистРаздела Из ТаблицаСтраницыРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		ДанныеЛиста = ЛистРаздела.Данные;
		ДанныеЛиста = ?(ТипЗнч(ДанныеЛиста) = Тип("СписокЗначений"), ДанныеЛиста[0].Значение, ДанныеЛиста);

		ДанныеОП = ДанныеЛиста.ОбособленноеПодразделение;

		Если (НЕ ПустаяСтрока(ДанныеОП)) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда

			СведенияОбОП = Неопределено;
			ДополнительныеДанные = ЛистРаздела.ДополнительныеДанные;
			ДополнительныеДанные = ?(ТипЗнч(ДополнительныеДанные) = Тип("СписокЗначений"), ДополнительныеДанные[0].Значение, ДополнительныеДанные);
			Если ТипЗнч(ДополнительныеДанные) = Тип("Структура")
					И ДополнительныеДанные.Свойство("СведенияОбОП", СведенияОбОП) Тогда

				ИдОП = ИдентификаторОП_АЛКО(СведенияОбОП);
				СведенияОбОП.Вставить("НомерЛиста", НомерЛиста);

				СтруктураСведенийПООП = Новый Структура;

				// Теперь надо заполнить структуру строк по графам.
				МассивГраф = Новый Массив;
				Если НЕ ПустаяСтрока(СписокГраф) Тогда
					МассивГраф = СтрРазделить(СписокГраф, ",", Ложь);
				КонецЕсли;

				ИндексСтраницыРегистра = СервисРегистровРаздела[НомерЛиста
					- 1].ИндексСтраницыРегистра;
				ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчета, ИндексСтраницыРегистра);

				РезультатЗапроса = ОтобратьСтрокиПоГрафам(ИДДокИндСтраницы, ИмяРегистра, ИдГруппы, СписокГраф);

				Если РезультатЗапроса.Пустой() Тогда
				// Нет заполненнных по нужным графам строк.
					Продолжить;
				КонецЕсли;

				// Формируем структуру сведений граф.
				Для каждого ЭлементМассива Из МассивГраф Цикл
					СтруктураСведенийПООП.Вставить("СтруктураГрафы"
						+ ЭлементМассива, Новый Структура);
				КонецЦикла;

				ТаблицаЗапроса = РезультатЗапроса.Выгрузить();

				Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл

				// Для фармацевтических всегда колонки совпадают.
					ИдКодПродПроцСпирта = "Х" + СтрокаТаблицы.ХешИдКодПродПроцСпирта;

					Для каждого ЭлементМассива Из МассивГраф Цикл

						ИмяКолонки = ИдГруппы + ЭлементМассива;
						ИмяКолонкиПроцентСпирта = ИдГруппы + "03";

						Если СтрокаТаблицы[ИмяКолонки] > 0 Тогда

							Если НЕ СтруктураСведенийПООП["СтруктураГрафы"
									+ ЭлементМассива].Свойство(ИдКодПродПроцСпирта) Тогда
								СтруктураСведенийПООП["СтруктураГрафы"
									+ ЭлементМассива].Вставить(ИдКодПродПроцСпирта, Новый Структура);
							КонецЕсли;

							СтруктураСведенийГрафы = СтруктураСведенийПООП["СтруктураГрафы"
								+ ЭлементМассива][ИдКодПродПроцСпирта];

							СтруктураСведенийГрафы.Вставить("НомерСтроки", СтрокаТаблицы.ИндексСтроки);
							СтруктураСведенийГрафы.Вставить("ПроцентСпирта", СтрокаТаблицы[ИмяКолонкиПроцентСпирта]);
							СтруктураСведенийГрафы.Вставить("Графа", СтрокаТаблицы[ИмяКолонки]);

						КонецЕсли;

					КонецЦикла;

				КонецЦикла;

				СтруктураСведенийПООП.Вставить("СведенияОбОП", СведенияОбОП);

				Результат.Вставить(ИдОП, СтруктураСведенийПООП);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ПроверитьКонтрольныеСоотношенияФармацевтическихДеклараций(ДокументСсылкаАлкоОтчет,
		ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтруктураПараметров, РежимОтладки = Неопределено) Экспорт

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ПроверитьКонтрольныеСоотношенияФармацевтическихДеклараций() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;
	// Комментарии соответствуют случаю проверки Фармацевтического Приложения №1 и сверки его с Приложением №2.
	ИдГруппы = СтруктураПараметров.ИдГруппы;
	СтрВКакомРазделе = СтруктураПараметров.СтрВКакомРазделе;
	НомерДекларации = СтруктураПараметров.НомерДекларации;
	НомерСверяемойДекларации = СтруктураПараметров.НомерСверяемойДекларации;
	НомерКолонкиДекларации = СтруктураПараметров.НомерКолонкиДекларации;
	НомерКолонкиСверяемойДекларации = СтруктураПараметров.НомерКолонкиСверяемойДекларации;
	ТипОшибкиНеверногоСоотношения = СтруктураПараметров.ТипОшибкиНеверногоСоотношения;

	НомерДекларации = Формат(НомерДекларации, "ЧН=; ЧГ=0");
	НомерСверяемойДекларации = Формат(НомерСверяемойДекларации, "ЧН=; ЧГ=0");

	НомерКолонкиДекларацииСтр = Строка(НомерКолонкиДекларации);
	НомерКолонкиДекларации = Формат(НомерКолонкиДекларации, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");

	НомерКолонкиСверяемойДекларацииСтр = Строка(НомерКолонкиСверяемойДекларации);
	НомерКолонкиСверяемойДекларации = Формат(НомерКолонкиСверяемойДекларации, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");
			
	ТаблицаСтраницыДекларация = Неопределено;
	СтруктураПараметров.Свойство("ТаблицаСтраницыДекларация", ТаблицаСтраницыДекларация);

	СтруктураСервисРегистров = Неопределено;
	СтруктураПараметров.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
	
	// Контрольное соотношение.
	ИсточникСверяемойДекларации = "РегламентированныйОтчетАлкоПриложение"
		+ НомерСверяемойДекларации;
	СтруктураИнформацииСверяемойДекларации = НайтиСданныйАлкоОтчетОпределенногоИсточникаПоОбразцу(ДокументСсылкаАлкоОтчет, ИсточникСверяемойДекларации);

	Если ЗначениеЗаполнено(СтруктураИнформацииСверяемойДекларации.ДокументСсылкаАлкоОтчет) Тогда

		СостояниеСверяемойДекларации = СтруктураИнформацииСверяемойДекларации.СостояниеСдачиОтчетности;

		// Есть сданное Приложение 2.
		ДокументСверяемойДекларации = СтруктураИнформацииСверяемойДекларации.ДокументСсылкаАлкоОтчет;

		ПредставлениеДокументаСверяемойДекларации = Строка(ДокументСверяемойДекларации);
		СписокСохраненияСверяемойДекларации = ДокументСверяемойДекларации.ДанныеОтчета.Получить();

		ДанныеМногостраничныхРазделовСверяемойДекларации = СписокСохраненияСверяемойДекларации.ДанныеМногостраничныхРазделов;
		ТаблицаСтраницыСверяемойДекларации = ДанныеМногостраничныхРазделовСверяемойДекларации.Декларация;

		СтруктураСервисРегистровСверяемойДекларации = СписокСохраненияСверяемойДекларации.СтруктураСервисРегистров;
		ИмяРегистраСверяемойДекларации = "СведенияРеглОтчетАлкоПрил"
			+ НомерСверяемойДекларации + "Декларация";
		СервисРегистровРазделаСверяемойДекларации = СтруктураСервисРегистровСверяемойДекларации[ИмяРегистраСверяемойДекларации];

		Если ТаблицаСтраницыДекларация = Неопределено
				ИЛИ СтруктураСервисРегистров = Неопределено Тогда

			СписокСохраненияДекларации = ДокументСсылкаАлкоОтчет.ДанныеОтчета.Получить();

			ДанныеМногостраничныхРазделовДекларации = СписокСохраненияДекларации.ДанныеМногостраничныхРазделов;
			ТаблицаСтраницыДекларация = ДанныеМногостраничныхРазделовДекларации.Декларация;

			СтруктураСервисРегистров = СписокСохраненияДекларации.СтруктураСервисРегистров;

		КонецЕсли;

		ИмяРегистраДекларации = "СведенияРеглОтчетАлкоПрил" + НомерДекларации
			+ "Декларация";
		СервисРегистровРазделаДекларации = СтруктураСервисРегистров[ИмяРегистраДекларации];

		СтруктураГрафыСверяемойДекларации = ПолучитьСтруктуруСведенийГрафПоОПФармацевтическихДеклараций(ДокументСверяемойДекларации, ТаблицаСтраницыСверяемойДекларации, СервисРегистровРазделаСверяемойДекларации, ИмяРегистраСверяемойДекларации, ИдГруппы, НомерКолонкиСверяемойДекларации);

		СтруктураГрафыДекларации = ПолучитьСтруктуруСведенийГрафПоОПФармацевтическихДеклараций(ДокументСсылкаАлкоОтчет, ТаблицаСтраницыДекларация, СервисРегистровРазделаДекларации, ИмяРегистраДекларации, ИдГруппы, НомерКолонкиДекларации);

		// Сверяем по ОП.
		Для каждого ЭлементСтруктуры Из СтруктураГрафыДекларации Цикл

			ИдОПДекларации = ЭлементСтруктуры.Ключ;
			СтруктураСведенийПООПДекларации = ЭлементСтруктуры.Значение;

			СведенияОбОПДекларации = СтруктураСведенийПООПДекларации.СведенияОбОП;
			Наименование_ОП = СведенияОбОПДекларации.Наименование;
			КПП_ОП = СведенияОбОПДекларации.КПП;
			ПредставлениеАдресаОПДекларации = СведенияОбОПДекларации.ПредставлениеАдреса;
			НомерЛистаОПДекларации = СведенияОбОПДекларации.НомерЛиста;

			НомерЛистаОПДекларацииСтроковый = СтрокаЧГ0(НомерЛистаОПДекларации);

			СтрокаОПДекларации = Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП "
				+ КПП_ОП + ")", "") + " адрес: " + ПредставлениеАдресаОПДекларации;

			СтруктураГрафыПоОПДекларации = СтруктураСведенийПООПДекларации["СтруктураГрафы"
				+ НомерКолонкиДекларации];

			СтруктураГрафыПоОПСверяемойДекларации = Неопределено;
			СтруктураСведенийПООПСверяемойДекларации = Неопределено;

			Если НЕ СтруктураГрафыСверяемойДекларации.Свойство(ИдОПДекларации, СтруктураСведенийПООПСверяемойДекларации) Тогда

			// Есть данные по ОП в Приложении 1 но нет данных по этому ОП в Приложении 2.
				ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе "
					+ НомерЛистаОПДекларацииСтроковый + ", по обособленному подразделению 
					|" + СтрокаОПДекларации + "
					|есть заполненные строки по Графе " + НомерКолонкиДекларацииСтр
					+ " ""израсходовано на собственное производство.."", 
					|но в ранее " + СостояниеСверяемойДекларации + " декларации "
					+ ПредставлениеДокументаСверяемойДекларации + "
					|нет строк с заполненной Графой " + НомерКолонкиСверяемойДекларацииСтр
					+ " на странице по этому же ОП!
					|Согласно правилам заполнения Графа 19 Приложения №1 должна соответствовать значению Графы 8 "
					+ "Приложения №2 по каждому обособленному подразделению организации!";

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Декларация");
				СтруктураОшибки.Вставить("Показатель", Неопределено);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаОПДекларации);
				СтруктураОшибки.Вставить("ТипОшибки", ТипОшибкиНеверногоСоотношения);

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
							СтруктураПараметров.МаксимальноеКоличествоПредупреждений, СтруктураПараметров.ТекущееКоличествоПредупреждений);

			Иначе

				СтруктураГрафыПоОПСверяемойДекларации = СтруктураСведенийПООПСверяемойДекларации["СтруктураГрафы"
					+ НомерКолонкиСверяемойДекларации];

				Для каждого ЭлементСтруктурыГрафыДекларации Из СтруктураГрафыПоОПДекларации Цикл

					ИдКодПродПроцСпирта = ЭлементСтруктурыГрафыДекларации.Ключ;
					СведенияГрафыДекларации = ЭлементСтруктурыГрафыДекларации.Значение;

					НомерСтроки = СведенияГрафыДекларации.НомерСтроки;
					НомерСтрокиСтроковый = СтрокаЧГ0(НомерСтроки);
					ЗначениеГрафыДекларации = СведенияГрафыДекларации.Графа;
					ЗначениеГрафыДекларацииСтроковый = Формат(СведенияГрафыДекларации.Графа, "ЧЦ=15; ЧДЦ=2");
					ПроцентСпирта = Формат(СведенияГрафыДекларации.ПроцентСпирта, "ЧЦ=15; ЧДЦ=2");

					// Проверяем наличие данных по графе 8 для того же процента спирта.
					СведенияГрафыСверяемойДекларации = Неопределено;
					Если НЕ СтруктураГрафыПоОПСверяемойДекларации.Свойство(ИдКодПродПроцСпирта, СведенияГрафыСверяемойДекларации) Тогда

						ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе "
							+ НомерЛистаОПДекларацииСтроковый + ", по обособленному подразделению 
							|" + СтрокаОПДекларации + ",
							|в строке " + НомерСтрокиСтроковый
							+ ", для значения ""Содержание этилового спирта в объеме готовой продукции"" "
							+ ПроцентСпирта + " заполнена Графа " + НомерКолонкиДекларацииСтр + ",
							|но в ранее " + СостояниеСверяемойДекларации + " декларации "
							+ ПредставлениеДокументаСверяемойДекларации + "
							|для этого же значения содержания спирта " + ПроцентСпирта + "
							|нет строк с заполненной Графой " + НомерКолонкиСверяемойДекларацииСтр
							+ " на странице по этому же ОП!
							|Согласно правилам заполнения Графа 19 Приложения №1 должна соответствовать значению Графы 8 "
							+ "Приложения №2 по каждому обособленному подразделению организации!";

						ИмяПоказателя = ИдГруппы + НомерКолонкиДекларации + "_"
							+ НомерСтрокиСтроковый;

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Декларация");
						СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаОПДекларации);
						СтруктураОшибки.Вставить("ТипОшибки", ТипОшибкиНеверногоСоотношения);

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
								СтруктураПараметров.МаксимальноеКоличествоПредупреждений, СтруктураПараметров.ТекущееКоличествоПредупреждений);

					Иначе

						НомерСтрокиСверяемойДекларацииСтроковый = СтрокаЧГ0(СведенияГрафыСверяемойДекларации.НомерСтроки);
						СведенияГрафыСверяемойДекларацииСтроковый = Формат(СведенияГрафыСверяемойДекларации.Графа, "ЧЦ=15; ЧДЦ=2");

						Если СведенияГрафыСверяемойДекларации.Графа <> ЗначениеГрафыДекларации Тогда

							ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе "
								+ НомерЛистаОПДекларацииСтроковый + ", по обособленному подразделению 
								|" + СтрокаОПДекларации + ",
								|в строке " + НомерСтрокиСтроковый
								+ ", для значения ""Содержание этилового спирта в объеме готовой продукции"" "
								+ ПроцентСпирта + " 
								|значение Графы " + НомерКолонкиДекларацииСтр + " "
								+ ЗначениеГрафыДекларацииСтроковый + ",
								|но в ранее " + СостояниеСверяемойДекларации + " декларации "
								+ ПредставлениеДокументаСверяемойДекларации + "
								|в строке " + НомерСтрокиСверяемойДекларацииСтроковый
								+ ", для этого же значения содержания спирта " + ПроцентСпирта + " 
								|значение Графы " + НомерКолонкиСверяемойДекларацииСтр + " "
								+ СведенияГрафыСверяемойДекларацииСтроковый + "
								|на странице по этому же ОП!
								|Согласно правилам заполнения Графа 19 Приложения №1 должна соответствовать значению Графы 8 "
								+ "Приложения №2 по каждому обособленному подразделению организации!";

							ИмяПоказателя = ИдГруппы + НомерКолонкиДекларации + "_"
								+ НомерСтрокиСтроковый;

							СтруктураОшибки = Новый Структура;
							СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
							СтруктураОшибки.Вставить("Раздел", "Декларация");
							СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
							СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаОПДекларации);
							СтруктураОшибки.Вставить("ТипОшибки", ТипОшибкиНеверногоСоотношения);

							СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
									СтруктураПараметров.МаксимальноеКоличествоПредупреждений, СтруктураПараметров.ТекущееКоличествоПредупреждений);

						КонецЕсли;

						// Удаляем отработанное.
						СтруктураГрафыПоОПСверяемойДекларации.Удалить(ИдКодПродПроцСпирта);

					КонецЕсли;

				КонецЦикла;

				// Отработали все строки из Приложения №1.
				// Если остались записи в СтруктураГрафыПоОПСверяемойДекларации - значит в Приложении № 2 заполнена графа 8 по
				// строкам со значением содержания спирта, которых нет в Приложении № 1.
				Если СтруктураГрафыПоОПСверяемойДекларации.Количество() > 0 Тогда

					СтрокаПроцентСпирта = "";
					Для каждого ЭлементСтруктурыГрафыСверяемойДекларации Из СтруктураГрафыПоОПСверяемойДекларации Цикл

						СведенияГрафыСверяемойДекларации = ЭлементСтруктурыГрафыСверяемойДекларации.Значение;
						СтрокаПроцентСпирта = СтрокаПроцентСпирта
							+ ?(СтрокаПроцентСпирта = "", "", Символы.ПС)
							+ Формат(СведенияГрафыСверяемойДекларации.ПроцентСпирта, "ЧЦ=15; ЧДЦ=2");

					КонецЦикла;

					ТекстОписанияОшибки = СтрВКакомРазделе + ", на листе "
						+ НомерЛистаОПДекларацииСтроковый + ", по обособленному подразделению 
						|" + СтрокаОПДекларации + "
						|нет заполненных строк по Графе " + НомерКолонкиДекларацииСтр
						+ " ""израсходовано на собственное производство.."", 
						|для значений(я) ""Содержание этилового спирта в объеме готовой продукции"": 
						|" + СтрокаПроцентСпирта + "
						|но в ранее " + СостояниеСверяемойДекларации + " декларации "
						+ ПредставлениеДокументаСверяемойДекларации + "
						|есть строки, заполненные в Графе " + НомерКолонкиСверяемойДекларацииСтр
						+ "
						|на странице по этому же ОП для указанных выше значений содержания спирта!
						|Согласно правилам заполнения Графа 19 Приложения №1 должна соответствовать значению Графы 8 "
						+ "Приложения №2 по каждому обособленному подразделению организации!";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Декларация");
					СтруктураОшибки.Вставить("Показатель", Неопределено);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаОПДекларации);
					СтруктураОшибки.Вставить("ТипОшибки", ТипОшибкиНеверногоСоотношения);

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
							СтруктураПараметров.МаксимальноеКоличествоПредупреждений, СтруктураПараметров.ТекущееКоличествоПредупреждений);

				КонецЕсли;

				СтруктураГрафыСверяемойДекларации.Удалить(ИдОПДекларации);

			КонецЕсли;

		КонецЦикла;

		Если СтруктураГрафыСверяемойДекларации.Количество() > 0 Тогда

		// В Приложении № 2 есть заполненные строки с данными по Графе 8 на листах по ОП,
			// по которым в Приложении №1 нет заполненных строк по Графе 19.
			СтрокаСпискаОП = "";
			Для каждого ЭлементСтруктурыГрафыСверяемойДекларации Из СтруктураГрафыСверяемойДекларации Цикл

				СтруктураСведенийПООПСверяемойДекларации = ЭлементСтруктурыГрафыСверяемойДекларации.Значение;

				СведенияОбОПСверяемойДекларации = СтруктураСведенийПООПСверяемойДекларации.СведенияОбОП;
				Наименование_ОП = СведенияОбОПСверяемойДекларации.Наименование;
				КПП_ОП = СведенияОбОПСверяемойДекларации.КПП;
				ПредставлениеАдресаОПСверяемойДекларации = СведенияОбОПСверяемойДекларации.ПредставлениеАдреса;
				НомерЛистаОПСверяемойДекларации = СведенияОбОПСверяемойДекларации.НомерЛиста;

				СтрокаОПСверяемойДекларации = Наименование_ОП
					+ ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "") + " адрес: "
					+ ПредставлениеАдресаОПСверяемойДекларации + " - лист "
					+ НомерЛистаОПСверяемойДекларации;

				СтрокаСпискаОП = СтрокаСпискаОП + ?(СтрокаСпискаОП = "", "", Символы.ПС)
					+ СтрокаОПСверяемойДекларации;

			КонецЦикла;

			ТекстОписанияОшибки = СтрВКакомРазделе + " в ранее "
				+ СостояниеСверяемойДекларации + " декларации "
				+ ПредставлениеДокументаСверяемойДекларации + "
				|по обособленным подразделениям:
				|" + СтрокаСпискаОП + "
				|имеются строки с заполненной Графой "
				+ НомерКолонкиСверяемойДекларацииСтр + ",
				|но в проверяемой декларации нет строк по этим же обособленным подразделениям с заполненной Графой "
				+ НомерКолонкиДекларацииСтр + "!				
				|Согласно правилам заполнения Графа 19 Приложения №1 должна соответствовать значению Графы 8 "
				+ "Приложения №2 по каждому обособленному подразделению организации!";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Декларация");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛистаОПДекларации);
			СтруктураОшибки.Вставить("ТипОшибки", ТипОшибкиНеверногоСоотношения);

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, РежимОтладки,
					СтруктураПараметров.МаксимальноеКоличествоПредупреждений, СтруктураПараметров.ТекущееКоличествоПредупреждений);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсПечать

// Универсальная печать Титульного листа алкоотчетов.
// Результат печати помещается в СтруктураРеквизитовФормы.мПечатныеФормы.
//
// Параметры:
//
//	 	СтруктураПараметровСтраницы	- Структура.
//			* НаименованиеЛиста 		- Строка. Представление печатаемого листа.
//			* ИмяФормыОбъекта			- Строка. Имя формы объекта печатаемого отчета.
//			* ВерсияМакетаПечати		- Строка. Необязательный. Версия печати обычно строка даты формы, если есть.
//			* СтруктураДанныхТитульный  - Структура. Реквизит СтруктураДанныхТитульный формы печатаемого отчета.
//			* НастройкиСтраницы			- Структура. Необязательный. Содержит настройки печатных полей страницы.
// 										Если не передана, заполняется настройками по умолчанию.
//				** ОтображатьЗаголовки 		- Булево. Всегда Ложь на практике.
//				** ОтображатьСетку			- Булево. Всегда Ложь на практике.
//				** ЧерноБелыйПросмотр		- Булево. Всегда Истина на практике.
//				** ЧерноБелаяПечать			- Булево. Всегда Истина на практике.
//				** Автомасштаб				- Булево.
//				** ОриентацияСтраницы		- Системное перечисление ОриентацияСтраницы. 
//											Всегда ОриентацияСтраницы.Портрет на практике.
//				** ПолеСверху				- Число.
//				** ПолеСнизу				- Число.
//				** ПолеСлева				- Число.
//				** ПолеСправа				- Число.
//
//		СтруктураРеквизитовФормы	- Структура. Реквизит СтруктураРеквизитовФормы формы печатаемого отчета.
//									Состав структуры в целом соответствует результату работы
//									СформироватьСтруктуруРеквизитовФормыАЛКО().
//		ОбъектОтчета				- Объект отчета, Титульный лист которого печатается.
//									или Неопределено.
//
Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы,
		СтруктураРеквизитовФормы, ОбъектОтчета = Неопределено) Экспорт

	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	СтруктураДанныхТитульный = СтруктураПараметровСтраницы.СтруктураДанныхТитульный;

	НастройкиСтраницы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НастройкиСтраницы", СтруктураПараметровСтраницы);
	Если НЕ ТипЗнч(НастройкиСтраницы) = Тип("Структура") Тогда

	// Установим обычно подходящие настройки по умолчанию.
		НастройкиСтраницы = Новый Структура;

		НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
		НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
		НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
		НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
		НастройкиСтраницы.Вставить("Автомасштаб", Истина);
		НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
		НастройкиСтраницы.Вставить("ПолеСверху", 10);
		НастройкиСтраницы.Вставить("ПолеСнизу", 5);
		НастройкиСтраницы.Вставить("ПолеСлева", 5);
		НастройкиСтраницы.Вставить("ПолеСправа", 5);

	КонецЕсли;

	ИмяРаздела = "Титульный";
	
	ДокументСсылкаАлкоОтчет = СтруктураПараметровСтраницы.ДокументСсылкаАлкоОтчет;
	ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылкаАлкоОтчет);
	ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		
	ИмяПечатнойФормыРаздела = ИмяДействующегоМакета(ИмяФормыОбъекта, "ПечатнаяФормаОтчета", 
													ДатаКонцаОтчета, ИмяРаздела, ОбъектОтчета);
	МакетПечати = ПолучитьМакетИзОбъектаАЛКО(ИмяПечатнойФормыРаздела, ИмяФормыОбъекта, ОбъектОтчета);
	
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	Область_Ограничители = МакетПечати.ПолучитьОбласть("Ограничители");

	ИНН = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИНН1", СтруктураДанныхТитульный);
	Если СтрДлина(ИНН) = 10 Тогда
		ИНН = "00" + ИНН;
	КонецЕсли;

	КПП = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КПП1", СтруктураДанныхТитульный);

	ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

	Область_ОсновнаяЧасть = МакетПечати.ПолучитьОбласть("ОсновнаяЧасть");

	// Выводим ИНН, КПП.
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИНН", ИНН);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "КПП", КПП);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИНН1", ИНН);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "КПП1", КПП);

	НомерКорректировки = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НомКорр", СтруктураДанныхТитульный);
	НомерКорректировки = ?(НомерКорректировки = Неопределено, 0, НомерКорректировки);

	// Вид документа и номер корректировки.	
	Если НомерКорректировки > 0 Тогда
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ВидДокументаКорректирующий", "V");
	Иначе
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ВидДокументаПервичный", "V");
	КонецЕсли;

	СтрНомерКорректировки = Формат(НомерКорректировки, "ЧЦ=2; ЧВН=");
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "НомКорр", СтрНомерКорректировки);

	// Отчетный период.
	Для Кв = 1 По 4 Цикл

		ТекОтчетныйПериод = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОтчетныйПериод"
			+ Кв + "Кв", СтруктураДанныхТитульный);
		Если ТекОтчетныйПериод = "V" Тогда
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОтчетныйПериод" + Кв
				+ "Кв", "V");
		КонецЕсли;

	КонецЦикла;

	// Отчетный Год, хранится уже в виде строки, форматировать не надо. (4 клетки).
	ОтчетныйГод = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОтчетныйГод", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОтчетныйГод", ОтчетныйГод);

	// ОргИМНС.
	ОрганизацияИМНС = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргИМНС", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргИМНС", ОрганизацияИМНС);

	// ОргНазв.
	ОрганизацияНазв = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргНазв", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргНазв", ОрганизацияНазв);

	// ОргНазвСокращ.
	ОрганизацияНазвСокращенное = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргНазвСокращ", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "СокрОргНазв", ОрганизацияНазвСокращенное);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргНазвСокращ", ОрганизацияНазвСокращенное);

	// ПочтовыйИндекс (6 клеток).
	ОргПочтовыйИндекс = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ПочтовыйИндекс", СтруктураДанныхТитульный);
	ОргПочтовыйИндекс = ?(ЗначениеЗаполнено(ОргПочтовыйИндекс), ОргПочтовыйИндекс, 0);
	ОрганизацияПочтовыйИндекс = Формат(Число(ОргПочтовыйИндекс), "ЧЦ=6; ЧГ=; ЧВН=");

	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ПочтовыйИндекс", ОрганизацияПочтовыйИндекс);

	// КодРегиона (2 клетки).
	ОргКодРегиона = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("КодРегиона", СтруктураДанныхТитульный);
	ОргКодРегиона = ?(ЗначениеЗаполнено(ОргКодРегиона), ОргКодРегиона, 0);
	ОрганизацияКодРегиона = Формат(Число(ОргКодРегиона), "ЧЦ=2; ЧГ=; ЧВН=");

	ВывестиПолеМакета(Область_ОсновнаяЧасть, "КодРегиона", ОрганизацияКодРегиона);

	// АдресРайон.
	ОрганизацияАдресРайон = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("АдресРайон", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресРайон", ОрганизацияАдресРайон);

	// АдресГород.
	ОрганизацияАдресГород = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("АдресГород", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресГород", ОрганизацияАдресГород);

	// АдресУлица.
	ОрганизацияАдресУлица = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("АдресУлица", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресУлица", ОрганизацияАдресУлица);

	// АдресДом.
	ОрганизацияАдресДом = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("АдресДом", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресДом", ОрганизацияАдресДом);

	// ПоМестуИндивидуальногоПредпринимателя - ПоМестуОрганизации.
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ПоМестуИндивидуальногоПредпринимателя", "V");
	Иначе
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ПоМестуОрганизации", "V");
	КонецЕсли;

	// Адреса одной строкой.

	// Адрес организации.
	ПредставлениеАдресаОрганизации = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ПредставлениеАдресаОрганизации", СтруктураДанныхТитульный);
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		АдресВыведен = ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресИндивидуальногоПредпринимателя", ПредставлениеАдресаОрганизации);
		АдресВыведен = АдресВыведен
			ИЛИ ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресМестаЖительстваИП", ПредставлениеАдресаОрганизации);
		Если НЕ АдресВыведен Тогда
		// Пробуем стандартные поля для организации.
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресОрганизации", ПредставлениеАдресаОрганизации);
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресФактОрг", ПредставлениеАдресаОрганизации);
		КонецЕсли;
	Иначе
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресОрганизации", ПредставлениеАдресаОрганизации);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресФактОрг", ПредставлениеАдресаОрганизации);
	КонецЕсли;

	// Адрес места деятельности организации.
	ПредставлениеАдресаМестаДеятельности = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("МестоДеятельности", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресМестаДеят", ПредставлениеАдресаМестаДеятельности);

	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "МестоДеятельностиИП", ПредставлениеАдресаМестаДеятельности);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресМестаДеятИП", ПредставлениеАдресаМестаДеятельности);
	Иначе
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "МестоДеятельностиОрганизации", ПредставлениеАдресаМестаДеятельности);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "АдресМестаДеятОрг", ПредставлениеАдресаМестаДеятельности);
	КонецЕсли;

	// Номер лицензии.
	НомерЛицензии = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("НомерЛицензии", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "НомерЛицензии", НомерЛицензии);

	// ТелОрганизации.
	ТелОрганизации = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ТелОрганизации", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ТелОрганизации", ТелОрганизации);

	// НомерКонтактногоТелефона.
	НомерКонтактногоТелефона = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("НомерКонтактногоТелефона", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "КонтактныйТел", НомерКонтактногоТелефона);

	// Добавочный Номер.
	ДобНомер = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ДобНомер", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДобТел", ДобНомер);

	// Наименование удостоверяющего документа.
	ДокПолномочий = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("НаименованиеДокумента", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДокПолномочий", ДокПолномочий);

	// ЭлектроннаяПочта.
	ЭлектроннаяПочта = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ЭлектроннаяПочта", СтруктураДанныхТитульный);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ЭлектроннаяПочта", ЭлектроннаяПочта);

	// Количество приложений Прил (3 клетки).
	КолПрил = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("Прил", СтруктураДанныхТитульный);
	КолПрил = ?(ЗначениеЗаполнено(КолПрил), КолПрил, 0);
	СтрокаКолПрил = Формат(Число(КолПрил), "ЧЦ=3; ЧГ=; ЧВН=");

	ВывестиПолеМакета(Область_ОсновнаяЧасть, "Прил", СтрокаКолПрил);

	ДатаПодписи = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ДатаПодписи", СтруктураДанныхТитульный);
	СтрДатаПодписи = Строка(ДатаПодписи);

	ДатаПодписиПрописью = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ДеньДатыПодписи = Формат(ДатаПодписи, "ДФ=""дд""");
	ПолныйГодДатыПодписи = Формат(ДатаПодписи, "ДФ=""гггг""");
	ГодДатыПодписи = Формат(ДатаПодписи, "ДФ=""гг""");

	МесяцЧисломДатыПодписи = Формат(ДатаПодписи, "ДФ=""ММ""");
	МесяцПрописьюДатыПодписи = Формат(ДатаПодписи, "ДФ=""ММММ""");

	// Поскольку нужен родительный падеж - лучше вытащить из ДатаПодписиПрописью.
	МесяцПрописьюРодПадежДатыПодписи = СтрЗаменить(ДатаПодписиПрописью, ПолныйГодДатыПодписи
		+ " г.", "");
	МесяцПрописьюРодПадежДатыПодписи = СокрЛП(СтрЗаменить(МесяцПрописьюРодПадежДатыПодписи, ДеньДатыПодписи, ""));

	НомерАлкоОтчета = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НомерАлкоОтчета", СтруктураРеквизитовФормы);
	// Уведомление о выездной торговле.
	Если Число(НомерАлкоОтчета) = 1000 Тогда

	// Надо перезаполнить, поскольку в общем случае для 10 значных ИНН добавляются 00 слева.
		ИНН = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИНН1", СтруктураДанныхТитульный);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИНН1", ИНН);

		ЭтоОтмена = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ЭтоОтмена", СтруктураДанныхТитульный);
		Если НЕ ЗначениеЗаполнено(ЭтоОтмена) Тогда
			ЭтоОтмена = Ложь;
		КонецЕсли;

		НомерКорректировкиУведомления = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НомерКорректировкиУведомления", СтруктураДанныхТитульный);
		НомерКорректировкиУведомления = ?(НомерКорректировкиУведомления = Неопределено, 0, НомерКорректировкиУведомления);

		Если ЭтоОтмена Тогда

			Первичное = "--";
			Отмена = "ДА";

		Иначе

			Отмена = "--";
			Первичное = ?(НомерКорректировкиУведомления = 0, "ДА", "--");

		КонецЕсли;

		СтрНомерКорректировкиУведомления = ?(НомерКорректировкиУведомления = 0, "--", Формат(НомерКорректировкиУведомления, "ЧЦ=2; ЧВН="));

		ВывестиПолеМакета(Область_ОсновнаяЧасть, "Первичное", Первичное);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "НомКоррУведомления", СтрНомерКорректировкиУведомления);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "Отмена", Отмена);

		КПП_ОП = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КПП_ОП", СтруктураДанныхТитульный);
		Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
			КПП_ОП = "---------";
		КонецЕсли;
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "КПП_ОП", КПП_ОП);

		// Дата начала уведомления.
		ДатаНачалаУведомления = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ДатаНачалаУведомления", СтруктураДанныхТитульный);
		Если НЕ ДатаНачалаУведомления = Неопределено Тогда

			СтрДатаНачалаУведомления = Строка(ДатаНачалаУведомления);
			СтрДатаНачалаУведомления = Лев(СтрЗаменить(СтрДатаНачалаУведомления, ".", ""), 8);
			СтрДатаНачалаУведомления = ?(СтрДатаНачалаУведомления = "01010001", "        ", СтрДатаНачалаУведомления);

			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаНачалаУведомления", СтрДатаНачалаУведомления);

		КонецЕсли;

		// Дата окончания уведомления.
		ДатаКонцаУведомления = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ДатаКонцаУведомления", СтруктураДанныхТитульный);
		Если НЕ ДатаКонцаУведомления = Неопределено Тогда

			СтрДатаКонцаУведомления = Строка(ДатаКонцаУведомления);
			СтрДатаКонцаУведомления = Лев(СтрЗаменить(СтрДатаКонцаУведомления, ".", ""), 8);
			СтрДатаКонцаУведомления = ?(СтрДатаКонцаУведомления = "01010001", "        ", СтрДатаКонцаУведомления);

			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаКонцаУведомления", СтрДатаКонцаУведомления);

		КонецЕсли;

		// Время начала уведомления.
		ВремяНачалаУведомления = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ВремяНачалаУведомления", СтруктураДанныхТитульный);
		Если НЕ ВремяНачалаУведомления = Неопределено Тогда

			СтрВремяНачалаУведомления = Строка(ВремяНачалаУведомления);
			СтрВремяНачалаУведомления = Прав(СтрЗаменить(СтрВремяНачалаУведомления, ":", ""), 6);
			СтрВремяНачалаУведомления = Лев(СтрВремяНачалаУведомления, 4);
			СтрВремяНачалаУведомления = СтрЗаменить(СтрВремяНачалаУведомления, " ", "0");

			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ВремяНачала", СтрВремяНачалаУведомления);

		КонецЕсли;

		// Время окончания уведомления.
		ВремяКонцаУведомления = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ВремяКонцаУведомления", СтруктураДанныхТитульный);
		Если НЕ ВремяКонцаУведомления = Неопределено Тогда

			СтрВремяКонцаУведомления = Строка(ВремяКонцаУведомления);
			СтрВремяКонцаУведомления = Прав(СтрЗаменить(СтрВремяКонцаУведомления, ":", ""), 6);
			СтрВремяКонцаУведомления = Лев(СтрВремяКонцаУведомления, 4);
			СтрВремяКонцаУведомления = СтрЗаменить(СтрВремяКонцаУведомления, " ", "0");

			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ВремяКонца", СтрВремяКонцаУведомления);

		КонецЕсли;

		Представитель = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("Представитель", СтруктураДанныхТитульный);
		ПереключательПредставителя = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ПереключательПредставителя", СтруктураДанныхТитульный);

		ЭтоРуководитель = "";
		ЭтоПредставитель = "";
		Если ПереключательПредставителя = 1 Тогда
			ЭтоРуководитель = "V";
		Иначе
			ЭтоПредставитель = "V";
		КонецЕсли;
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ЭтоРуководитель", ЭтоРуководитель);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ЭтоПредставитель", ЭтоПредставитель);

		ФИО_Представителя = РегламентированнаяОтчетность.РазложитьФИО(Представитель);
		СтрПредставитель = ФИО_Представителя.Фамилия;

		// Блок представителя в Уведомлении о выездной торговле - 3 строки по 19 символов.
		// Распологаем ФИО по возможности по строкам.
		КолСимволовВСтроке = 19;

		Пока СтрДлина(СтрПредставитель) < КолСимволовВСтроке Цикл
			СтрПредставитель = СтрПредставитель + " ";
		КонецЦикла;

		Если СтрДлина(СтрПредставитель) = КолСимволовВСтроке Тогда
			СтрПредставитель = СтрПредставитель + ФИО_Представителя.Имя;
		Иначе
		// Фамилия больше 19 символов.
			СтрПредставитель = СтрПредставитель + " " + ФИО_Представителя.Имя;
		КонецЕсли;

		Пока СтрДлина(СтрПредставитель) < 2 * КолСимволовВСтроке Цикл
			СтрПредставитель = СтрПредставитель + " ";
		КонецЦикла;

		Если СтрДлина(СтрПредставитель) = 2 * КолСимволовВСтроке Тогда
			СтрПредставитель = СтрПредставитель + ФИО_Представителя.Отчество;
		Иначе
		// Фамилия с именем больше 38 символов.
			СтрПредставитель = СтрПредставитель + " " + ФИО_Представителя.Отчество;
		КонецЕсли;

		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ФИО_Представителя", СтрПредставитель);

	КонецЕсли;

	НомерПриложения = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НомерПриложения", СтруктураДанныхТитульный);

	Если НЕ НомерПриложения = Неопределено Тогда

		// Для "виноградных" деклараций отчетный период Год, поэтому для
		// Заявления о корректировке, в котором есть квадратики кварталов и отчетный год,
		// нужно убрать "галочку" из квадратика квартала.
		МассивВиноградных = МассивНомеровВиноградныхДеклараций();
	
		Если МассивВиноградных.Найти(Число(НомерПриложения)) <> Неопределено Тогда
		
			Очистить = Истина;

			Для Кв = 1 По 4 Цикл
				ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОтчетныйПериод" + Кв
					+ "Кв", "V", Очистить);
			КонецЦикла;

		КонецЕсли;

		// Специфические поля Заявления о предоставлении корректирующих деклараций после установленного срока.
		ЭтоОтчет2019года = (Число(НомерПриложения) > 18);						
		СтрокаНомерПриложения = ?(ЭтоОтчет2019года, Строка(Число(НомерПриложения) - 18), Строка(НомерПриложения));
			
		СтрокаНомерПриложения = "Приложение № " + СтрокаНомерПриложения;
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "НомерПриложения", СтрокаНомерПриложения);

		// Исходящий номер внутри обработки Номера приложения,
		// потому что если это Заявление о корректировке - Исх номер надо выводить в любом
		// случае, независимо - заполнен он или нет.
		ИсходящийНомер = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ИсходящийНомер", СтруктураДанныхТитульный);

		Если ЗначениеЗаполнено(ИсходящийНомер) Тогда
			ИсходящийНомер = Строка(ИсходящийНомер);
		Иначе
			ИсходящийНомер = "____________________";
		КонецЕсли;

		ИсходящийНомер = "Исх. № " + ИсходящийНомер + " от "
			+ Формат(ДатаПодписи, "ДЛФ=ДД");
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИсходящийНомер", ИсходящийНомер);

	КонецЕсли;

	Обоснования = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("Обоснования", СтруктураДанныхТитульный);

	Если НЕ Обоснования = Неопределено Тогда

		Обоснования = Строка(Обоснования);
		Если СтрЧислоСтрок(Обоснования) < 2 Тогда
			Обоснования = Обоснования + Символы.ПС;
		КонецЕсли;

		ВывестиПолеМакета(Область_ОсновнаяЧасть, "Обоснования", Обоснования);

	КонецЕсли;

	ТаблицаПеречень = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ТаблицаПеречень", СтруктураПараметровСтраницы);

	Если НЕ ТаблицаПеречень = Неопределено Тогда

		ТаблицаПереченьПредставление = "";

		Если ТипЗнч(ТаблицаПеречень) = Тип("ТаблицаЗначений") Тогда

			НомерСтрокиПеречня = 0;
			Для каждого СтрокаТаблицы Из ТаблицаПеречень Цикл

				НомерСтрокиПеречня = НомерСтрокиПеречня + 1;
				ТаблицаПереченьПредставление = ТаблицаПереченьПредставление
					+ Строка(НомерСтрокиПеречня) + ". " + СтрокаТаблицы.ОписаниеДокумента
					+ Символы.ПС;

			КонецЦикла;

		КонецЕсли;

		Если СтрЧислоСтрок(ТаблицаПереченьПредставление) < 2 Тогда
			ТаблицаПереченьПредставление = ТаблицаПереченьПредставление + Символы.ПС;
		КонецЕсли;

		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ПереченьДокументов", ТаблицаПереченьПредставление);

	КонецЕсли;
	// Конец специфических полей Заявления о предоставлении корректирующих деклараций.

	// Директор и Бухгалтер. 

	// Дата подписи  ДатаПодписиРук и ДатаПодписиБух (8 клеток).
	СтрДатаПодписи = Лев(СтрЗаменить(СтрДатаПодписи, ".", ""), 8);
	СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);

	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда

	// ОргДиректор для ИП.
		// Вначале проверяем наличие специфических полей для ИП.
		ОргДиректор = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргДиректор", СтруктураДанныхТитульный);

		ЕстьПоле = ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргФиоИП", ОргДиректор);

		Если НЕ ЕстьПоле Тогда
			ЕстьПоле = ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргИндивидуальныйПредприниматель", ОргДиректор);
		КонецЕсли;

		Если НЕ ЕстьПоле Тогда
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргДиректор", ОргДиректор);
		КонецЕсли;

		Если ЗначениеЗаполнено(ОргДиректор) Тогда

			ЕстьПоле = ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаПодписиИП", СтрДатаПодписи);
			Если НЕ ЕстьПоле Тогда
				ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаПодписиРук", СтрДатаПодписи);
			КонецЕсли;

		КонецЕсли;

	Иначе

	// ОргДиректор.
		ОргДиректор = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргДиректор", СтруктураДанныхТитульный);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргДиректор", ОргДиректор);

		// ОргБухгалтер.
		ОргБухгалтер = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргБухгалтер", СтруктураДанныхТитульный);
		ВывестиПолеМакета(Область_ОсновнаяЧасть, "ОргБухгалтер", ОргБухгалтер);

		Если ЗначениеЗаполнено(ОргДиректор) Тогда
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаПодписиРук", СтрДатаПодписи);
		КонецЕсли;

		Если ЗначениеЗаполнено(ОргБухгалтер) Тогда
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаПодписиБух", СтрДатаПодписи);
		КонецЕсли;

	КонецЕсли;

	// На случай наличия даты подписи прописью.
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДатаПодписиПрописью", ДатаПодписиПрописью);

	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ДеньДатыПодписи", ДеньДатыПодписи);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ПолныйГодДатыПодписи", ПолныйГодДатыПодписи);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "ГодДатыПодписи", ГодДатыПодписи);

	ВывестиПолеМакета(Область_ОсновнаяЧасть, "МесяцЧисломДатыПодписи", МесяцЧисломДатыПодписи);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "МесяцПрописьюДатыПодписи", МесяцПрописьюДатыПодписи);
	ВывестиПолеМакета(Область_ОсновнаяЧасть, "МесяцПрописьюРодПадежДатыПодписи", МесяцПрописьюРодПадежДатыПодписи);

	// Вывод сформированного листа.
	ВывестиВПечатнуюФорму(Область_ОсновнаяЧасть, ПечатнаяФорма);
	ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
	ВывестиВПечатнуюФорму(Область_Ограничители, ПечатнаяФорма);

	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

КонецПроцедуры

// Универсальная печать раздела Лицензии алкоотчетов.
//
// Параметры:
//
//	 	СтруктураПараметровСтраницы	- Структура.
//			* НаименованиеЛиста 		- Строка. Представление печатаемого листа.
//			* ИмяФормыОбъекта			- Строка. Имя формы объекта печатаемого отчета.
//			* ВерсияМакетаПечати		- Строка. Необязательный. Версия печати обычно строка даты формы, если есть.
//			* СтруктураДанныхТитульный  - Структура. Реквизит СтруктураДанныхТитульный формы печатаемого отчета.
//			* СтруктураСервисРегистров	- Структура. 
//				Ключ 		- Строка. Имя регистра сведений содержащих данные разделов отчета.
//				Значение  	- ТаблицаЗначений. Реквизит СервисРегистров формы отчета по табличной группе, 
//										которой соответствует регистр сведений, указанный в ключе.
//
//			* ТаблицаСтраницыЛицензии	- ТаблицаЗначений. Реквизит ТаблицаСтраницыЛицензии формы печатаемого отчета.
//			* НастройкиСтраницы			- Структура. Необязательный. Содержит настройки печатных полей страницы.
// 										Если не передана, заполняется настройками по умолчанию.
//				** ОтображатьЗаголовки 		- Булево. Всегда Ложь на практике.
//				** ОтображатьСетку			- Булево. Всегда Ложь на практике.
//				** ЧерноБелыйПросмотр		- Булево. Всегда Истина на практике.
//				** ЧерноБелаяПечать			- Булево. Всегда Истина на практике.
//				** Автомасштаб				- Булево.
//				** ОриентацияСтраницы		- Системное перечисление ОриентацияСтраницы. 
//											Всегда ОриентацияСтраницы.Портрет на практике.
//				** ПолеСверху				- Число.
//				** ПолеСнизу				- Число.
//				** ПолеСлева				- Число.
//				** ПолеСправа				- Число.
//
//			* НужноОбработатьСтрок				- Число. Общее количество строк отчета, которые надо напечатать.
//			* ПроцентБезКонвертацииАрхивации	- Число. Процент, соответсвующий моменту завершения формирования
//												печатных листов, от общей продолжительности печати, которая включает
//												конвертацию в выбранный формат представления, архивацию результата.
//												Если отчет печатается без получения архива в нужном представлении - 100%.
//												Иначе - зависит от выбранного формата представления файлов в ZIP архиве:
//													PDF - 14%, HTML - 20%, XLSX - 55%, MXL - 95%.
//
//		СтруктураРеквизитовФормы	- Структура. Реквизит СтруктураРеквизитовФормы формы печатаемого отчета.
//									Состав структуры в целом соответствует результату работы
//									СформироватьСтруктуруРеквизитовФормыАЛКО().
//		ОбработаноСтрок				- Число. Количество обработанных (напечатанных) строк печатаемого отчета.
//		ОбъектОтчета				- Объект отчета, Титульный лист которого печатается.
//									или Неопределено.
//
Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы,
		СтруктураРеквизитовФормы, ОбработаноСтрок, ОбъектОтчета = Неопределено,
		РежимОтладки = Неопределено) Экспорт

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	СтруктураДанныхТитульный = СтруктураПараметровСтраницы.СтруктураДанныхТитульный;
	СтруктураСервисРегистров = СтруктураПараметровСтраницы.СтруктураСервисРегистров;
	ТаблицаСтраницыЛицензии = СтруктураПараметровСтраницы.ТаблицаСтраницыЛицензии;
	НужноОбработатьСтрок = СтруктураПараметровСтраницы.НужноОбработатьСтрок;
	ПроцентБезКонвертацииАрхивации = СтруктураПараметровСтраницы.ПроцентБезКонвертацииАрхивации;

	НастройкиСтраницы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НастройкиСтраницы", СтруктураПараметровСтраницы);
	Если НЕ ТипЗнч(НастройкиСтраницы) = Тип("Структура") Тогда

	// Установим обычно подходящие настройки по умолчанию.
		НастройкиСтраницы = Новый Структура;

		НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
		НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
		НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
		НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
		НастройкиСтраницы.Вставить("Автомасштаб", Истина);
		НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
		НастройкиСтраницы.Вставить("ПолеСверху", 10);
		НастройкиСтраницы.Вставить("ПолеСнизу", 5);
		НастройкиСтраницы.Вставить("ПолеСлева", 5);
		НастройкиСтраницы.Вставить("ПолеСправа", 5);

	КонецЕсли;

	ИмяРаздела = "Лицензии";
	
	ДокументСсылкаАлкоОтчет = СтруктураПараметровСтраницы.ДокументСсылкаАлкоОтчет;
	ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылкаАлкоОтчет);
	ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		
	ИмяПечатнойФормыРаздела = ИмяДействующегоМакета(ИмяФормыОбъекта, "ПечатнаяФормаОтчета", 
													ДатаКонцаОтчета, ИмяРаздела, ОбъектОтчета);
	МакетПечати = ПолучитьМакетИзОбъектаАЛКО(ИмяПечатнойФормыРаздела, ИмяФормыОбъекта, ОбъектОтчета);

	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	Область_Ограничители = МакетПечати.ПолучитьОбласть("Ограничители");

	КолДопСтрокНаПечатномЛисте = 6;

	ИНН = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИНН1", СтруктураДанныхТитульный);
	Если СтрДлина(ИНН) = 10 Тогда
		ИНН = "00" + ИНН;
	КонецЕсли;

	КПП = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КПП1", СтруктураДанныхТитульный);

	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяРаздела, СтруктураРеквизитовФормы);
	ИндексЛиста = -1;
	Для Каждого ЛистЛицензий Из ТаблицаСтраницыЛицензии Цикл

		ИндексЛиста = ИндексЛиста + 1;

		ТаблицаДопСтрок = ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексЛиста, СтруктураРеквизитовФормы, СтруктураСервисРегистров);

		ОбработаноСтрок = ОбработаноСтрок + ТаблицаДопСтрок.Количество();

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			СообщитьПроцентВыполнения("Печать раздела Лицензии.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

		КонецЕсли;

		СтруктураДанныеЛиста = ЛистЛицензий.Данные[0].Значение;

		// На каждой печатной странице - только 6 строк многострочной части.
		КолДопСтрок = ТаблицаДопСтрок.Количество();
		КолПечатныхЛистов = Цел(КолДопСтрок / КолДопСтрокНаПечатномЛисте)
			+ ?(КолДопСтрок % КолДопСтрокНаПечатномЛисте = 0, 0, 1);
			// Минимум всегда хотя бы 1 лист.			
		КолПечатныхЛистов = ?(КолПечатныхЛистов = 0, 1, КолПечатныхЛистов);

		ОсталосьДопСтрок = КолДопСтрок;

		Для ИндПечЛиста = 1 По КолПечатныхЛистов Цикл

			ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

			Область_ОсновнаяЧасть = МакетПечати.ПолучитьОбласть("ОсновнаяЧасть");

			// Выводим ИНН, КПП.
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИНН", ИНН);
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "КПП", КПП);
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "ИНН1", ИНН);
			ВывестиПолеМакета(Область_ОсновнаяЧасть, "КПП1", КПП);

			// Выводим сведения по лицензии.
			// Их может не быть, например в 12 алкодекларации, 
			// в этом случае будет попытка вывода, но поскольку в макете не будет нужных полей
			// и значения реквизитов будут пустые - вывода не будет, ошибки выдаваться не будут.
			Для Ном = 1 По 5 Цикл

				ИмяРеквизита = "П00000000010" + Ном;

				ЗначениеРеквизита = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(ИмяРеквизита, СтруктураДанныеЛиста);

				ВывестиПолеМакета(Область_ОсновнаяЧасть, ИмяРеквизита, ЗначениеРеквизита);

			КонецЦикла;

			// Выводим строки таблицы местоположений ОП, их на Печатном листе 6.
			Для НомПечСтроки = 1 По КолДопСтрокНаПечатномЛисте Цикл

				Если ОсталосьДопСтрок > 0 Тогда

					ТекущийИндексДопСтроки = КолДопСтрок - ОсталосьДопСтрок;
					ТекущаяСтрока = ТаблицаДопСтрок[ТекущийИндексДопСтроки];

					// В строке 7 полей.
					Для Ном = 1 По 7 Цикл

						ИмяРеквизита = "П00000000020" + Ном;
						ЗначениеРеквизита = ТекущаяСтрока[ИмяРеквизита];

						// ИмяОбласти вида П000000000201_3
						// где П000000000201 имя поля, _3 - номер ДопСтроки на печатном листе.
						ИмяОбласти = ИмяРеквизита + "_" + НомПечСтроки;

						// Первые 3 поля - вывод в квадратики.
						ВывестиПолеМакета(Область_ОсновнаяЧасть, ИмяОбласти, ЗначениеРеквизита);

					КонецЦикла;

					ОсталосьДопСтрок = ОсталосьДопСтрок - 1;

					ОбработаноСтрок = ОбработаноСтрок + 1;

				КонецЕсли;

			КонецЦикла;

			Если НужноОбработатьСтрок > 0 Тогда

				СообщитьПроцентВыполнения("Печать раздела Лицензии.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

			КонецЕсли;

			// Вывод сформированного листа
			ВывестиВПечатнуюФорму(Область_ОсновнаяЧасть, ПечатнаяФорма);
			ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
			ВывестиВПечатнуюФорму(Область_Ограничители, ПечатнаяФорма);

			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
			// Вывод следующего печатного листа, относящегося к текущему листу раздела Лицензий.		
		КонецЦикла;

		// Вывод следующего листа раздела Лицензий.	
	КонецЦикла;

КонецПроцедуры

// Универсальная печать раздела алкоотчетов.
//
// Параметры:
//
//	 	СтруктураПараметровСтраницы	- Структура.
//
//			* НаименованиеЛиста 		- Строка. Представление печатаемого листа.
//			* ИмяРаздела				- Строка. Имя раздела, выводимого на печать.
//			* ИмяФормыОбъекта			- Строка. Имя формы объекта печатаемого отчета.
//			* ВерсияМакетаПечати		- Строка. Необязательный. Версия печати обычно строка даты формы, если есть.
//			* СтруктураДанныхТитульный  - Структура. Реквизит СтруктураДанныхТитульный формы печатаемого отчета.
//			* СтруктураСервисРегистров	- Структура. 
//				Ключ 		- Строка. Имя регистра сведений содержащих данные разделов отчета.
//				Значение  	- ТаблицаЗначений. Реквизит СервисРегистров формы отчета по табличной группе, 
//										которой соответствует регистр сведений, указанный в ключе.
//
//			* ДополнительныеДанные		- Структура. Реквизит ДополнительныеДанные формы печатаемого отчета.
//			* ТаблицаСтраницыРаздела	- ТаблицаЗначений. Реквизит ТаблицаСтраницы<ИмяРаздела> формы печатаемого отчета.
//			* НастройкиСтраницы			- Структура. Необязательный. Содержит настройки печатных полей страницы.
// 										Если не передана, заполняется настройками по умолчанию.
//				** ОтображатьЗаголовки 		- Булево. Всегда Ложь на практике.
//				** ОтображатьСетку			- Булево. Всегда Ложь на практике.
//				** ЧерноБелыйПросмотр		- Булево. Всегда Истина на практике.
//				** ЧерноБелаяПечать			- Булево. Всегда Истина на практике.
//				** Автомасштаб				- Булево.
//				** ОриентацияСтраницы		- Системное перечисление ОриентацияСтраницы. 
//											Чаще всего ОриентацияСтраницы.Ландшафт на практике.
//				** ПолеСверху				- Число.
//				** ПолеСнизу				- Число.
//				** ПолеСлева				- Число.
//				** ПолеСправа				- Число.
//
//			* СтруктураВысот			- Структура. Значения в стандартных строках 
//										(сколько помещается строк с галочкой АвтовысотаСтроки = Истина).
//				** ВысотаСтраницыВСтроках			- Высота печатной страницы в стандартных строках при текущей
//													орьентации страницы и настройке автомасштаба
//													(сколько помещается строк, устанавливается эмпирически).
//				** Высота_НомерСтраницыВСтроках		- Высота области НомерСтраницы.
//				** Высота_ЗаголовокЛистаВСтроках	- Высота заголовка листа.
//				** Высота_ПустаяСтрокаВСтроках		- Высота пустой строки - всегда 1 на практике.
//				** Высота_ЗаголовокТаблицыВСтроках	- Высота заголовка таблицы.
//				** Высота_СтрокаОПВСтроках			- Высота строки с реквизитами организации или обособленного
//													подразделения (ОП). На практике обычно 2.
//				** Высота_ПодвалВСтроках			- Высота подвала печатной формы (примечания, подписи).
//
//			* СписокПереносимыхПолей	- СписокЗначений. Значения которого - количество стандартных символов, 
//										помещающихся в в одну строчку по длине поля ,при шрифте и величине шрифта, 
//										установленных для поля в макете в области "СтрокаТаблицы" или аналогичном.	
// 										В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, 
//										т.е поля, в котором слова могут переносится на следующую строку, 
//										если не хватает длины, или номера колонок, т.е
//										в представлении можно указывать либо полное имя поля регистра сведений вида 
//										ИдГруппы + НомерКолонки, либо просто НомерКолонки.
// 										Строка "СтрокаТаблицы" или аналогичная должна иметь настройку 
//										АвтовысотаСтроки = Истина, ячейка с именем ИмяПоляПереносимойСтроки должно
//										иметь свойство Размещение равным "Переносить".
//										Используется в процедуре ВывестиНаПечатьСтроки().
//
//			* НастройкиАлгоритмаПечати	- Структура.
//
//				** ИмяОбластиНомерСтраницы 		- Строка. Обычно "НомерСтраницы".	
//				** ИмяОбластиЗаголовокЛиста 	- Строка. Обычно "ЗаголовокЛиста".	
//				** ИмяОбластиЗаголовокТаблицы 	- Строка. Обычно "ЗаголовокТаблицы".	
//				** ИмяОбластиПустаяСтрока 		- Строка. Обычно "ПустаяСтрока".
//				** ИмяОбластиСтрокаОП 			- Строка. Обычно "СтрокаОП", "РеквизитыОрганизации".
//				** ИмяОбластиЗаголовокРеквизитовОП - Строка.Обычно "ЗаголовокРеквизитов".
//				** ЗаголовокРеквизитовОП 		- Строка. Обычно 
//											"Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)".
//				** ИмяОбластиРеквизитовОП		- Строка. Обычно "Реквизиты" или "ОП".
//				** ИмяОбластиПодвал				- Строка. Обычно "Подвал".
//              ** ИмяОбластиОргДиректор		- Строка.
//				** ИмяОбластиОргБухгалтер		- Строка.
//				** ВыводитьСводнуюТаблицуПоОрганизацииВЦелом - Булево.
//				** ВыводитьВозвратыЗаДекларацией - Булево. Необязательно. При отсутствии значение по умолчанию Ложь.
//
//				** НастройкиАлгоритмаПечатиВозвраты - Структура.
//					*** ИмяРазделаВозвраты			- Строка. Обычно "Возвраты".
//					*** ТаблицаСтраницыВозвраты		- ТаблицаЗначений. 
//													Реквизит ТаблицаСтраницы<ИмяРазделаВозвраты> формы печатаемого отчета.
//					*** ИмяОбластиСтрокаОПВозвраты	- Строка. Обычно "СтрокаОП", "РеквизитыОрганизации".
//					*** ИмяОбластиЗаголовокРеквизитовОПВозвраты - Строка. Обычно "ЗаголовокРеквизитов".
//					*** ЗаголовокРеквизитовОПВозвраты 	- Строка. 
//									Обычно "Возвраты по обособленному подразделению (с указанием ИНН, КПП и адреса)".
//					*** ИмяОбластиРеквизитовОПВозвраты 	- Строка. Обычно "Реквизиты" или "ОП".
// 
//				** НастройкиАлгоритмаПечатиОрганизация 	- Структура.
//					*** ИмяОбластиСтрокаОрг 		- Строка. Обычно "СтрокаОрганизации" или "СтрокаОП".
//					*** ЗаголовокРеквизитовОрг	- Строка. Обычно пустая строка 
//									(если отдельная строка под организацию) или "Сведения по организации".
//					*** ИмяОбластиЗаголовокРеквизитовОрг	- Строка. Обычно пустая строка 
//									(если отдельная строка под организацию) или "ЗаголовокРеквизитов".
//					*** ИмяОбластиРеквизитовОрг		- Строка. Обычно "Реквизиты" или "ОП".
//					*** КолонкиГруппировокОрг		- Строка. Имена колонок через запятую.
//					*** КолонкиСуммированияОрг		- Строка. Имена колонок через запятую.
//					*** КолонкиНеВыводитьОрг		- Строка. Имена колонок через запятую.
// 
//					*** ИмяОбластиСтрокаОргВозвраты 		- Строка. Обычно совпадает с ИмяОбластиСтрокаОрг, 
//														если не сделано в макете отдельной строкой.	
//					*** ИмяОбластиЗаголовокРеквизитовОргВозвраты	- Строка. Обычно совпадает с ИмяОбластиЗаголовокРеквизитовОрг.
//					*** ЗаголовокРеквизитовОргВозвраты 	- Строка. Обычно "Возвраты по организации" 
//														или пустая строка, если сделано в макете отдельной строкой. 
//					*** ИмяОбластиРеквизитовОргВозвраты		- Строка. Обычно совпадает с ИмяОбластиРеквизитовОрг.
//
//			* НастройкиАлгоритмаПечатиСтрок - Структура.
//				** ИдГруппыОбластиСтрокаМакета - Строка. ИдГруппы области "Строка" макета - обычно "П0000100003".
//				** ИмяОбластиНомера - Строка. ИмяОбластиНомера области "Строка" макета - обычно "П000010000300".				
//				** ИмяОбластиСтрокаТаблицы - Строка. Обычно "СтрокаТаблицы" или "Строка".
//				** СписокСтруктурИнформацииИтогов - СписокЗначений. 	
// 							Значениями элементов списка СписокСтруктурИнформацииИтогов являются структуры, 
//							каждая имеет свойства:
// 								*** ИдГруппыОбластейМакетаИтоги - например "П0000100004". Обычно одинаково для всех итогов.
// 								*** ИмяОбластиСтрокаИтогов - например "СтрокаИтого". Обычно одинаково для всех итогов.
// 								*** ТекстПояснения - например "Итого по коду, производителю",
// 										может содержать %#ИмяКолонки#% из КолонкиГруппировок, 
//										например "Итого по производителю/импортеру %#03#% и коду %#02#%",
//										в этом случае вместо %#03#% подставляется соответствующее значение 
//										поля из СтрокаДанных[ИдГруппыТаблицы + "03"], например  
//										СтрокаДанных.П000010000303. 
// 								*** ИмяОбластиРазмещенияПояснения - например "ОписаниеИтого". Обычно одинаково для всех итогов.
// 								*** КолонкиГруппировок - текст колонок группировок при сворачивании таблицы 
//										для получения итога.
// 								*** КолонкиСуммирования - текст колонок суммирования при сворачивании таблицы 
//										для получения итога.
// 							Представления элементов списка СписокСтруктурИнформацииИтогов - числа, порядок которых 
//							определяет порядок вывода разных групп итогов.
//
//			* НужноОбработатьСтрок				- Число. Общее количество строк отчета, которые надо напечатать.
//			* ПроцентБезКонвертацииАрхивации	- Число. Процент, соответсвующий моменту завершения формирования
//												печатных листов, от общей продолжительности печати, которая включает
//												конвертацию в выбранный формат представления, архивацию результата.
//												Если отчет печатается без получения архива в нужном представлении - 100%.
//												Иначе - зависит от выбранного формата представления файлов в ZIP архиве:
//													PDF - 14%, HTML - 20%, XLSX - 55%, MXL - 95%.
//
//		СтруктураРеквизитовФормы	- Структура. Реквизит СтруктураРеквизитовФормы формы печатаемого отчета.
//									Состав структуры в целом соответствует результату работы
//									СформироватьСтруктуруРеквизитовФормыАЛКО().
//		ОбработаноСтрок				- Число. Количество обработанных (напечатанных) строк печатаемого отчета.
//		ОбъектОтчета				- Объект отчета, Титульный лист которого печатается.
//									или Неопределено.
//
Процедура ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы,
		СтруктураРеквизитовФормы, ОбработаноСтрок, ОбъектОтчета = Неопределено,
		РежимОтладки = Неопределено) Экспорт

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	СтруктураДанныхТитульный = СтруктураПараметровСтраницы.СтруктураДанныхТитульный;
	СтруктураСервисРегистров = СтруктураПараметровСтраницы.СтруктураСервисРегистров;
	ДополнительныеДанные = СтруктураПараметровСтраницы.ДополнительныеДанные;

	ИмяРаздела = СтруктураПараметровСтраницы.ИмяРаздела;
	ТаблицаСтраницыРаздела = СтруктураПараметровСтраницы.ТаблицаСтраницыРаздела;
	
	ИдГруппыРаздела = "";
	СтруктураПараметровСтраницы.Свойство("ИдГруппыРаздела", ИдГруппыРаздела);
	
	НаименованиеЛиста = СтруктураПараметровСтраницы.НаименованиеЛиста;

	НужноОбработатьСтрок = СтруктураПараметровСтраницы.НужноОбработатьСтрок;
	ПроцентБезКонвертацииАрхивации = СтруктураПараметровСтраницы.ПроцентБезКонвертацииАрхивации;
	
	ДокументСсылкаАлкоОтчет = СтруктураПараметровСтраницы.ДокументСсылкаАлкоОтчет;
	ДатыОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьНачалоКонецОтчета(ДокументСсылкаАлкоОтчет);
	ДатаКонцаОтчета = ДатыОтчета.ДатаКонцаОтчета;
		
	ИмяПечатнойФормыРаздела = ИмяДействующегоМакета(ИмяФормыОбъекта, "ПечатнаяФормаОтчета", 
													ДатаКонцаОтчета, ИмяРаздела, ОбъектОтчета);
	МакетПечати = ПолучитьМакетИзОбъектаАЛКО(ИмяПечатнойФормыРаздела, ИмяФормыОбъекта, ОбъектОтчета);
	
	// Используется в процедуре ВывестиНаПечатьСтроки().
	СтруктураПараметровСтраницы.Вставить("МакетПечати", МакетПечати);

	НастройкиСтраницы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НастройкиСтраницы", СтруктураПараметровСтраницы);
	Если НЕ ТипЗнч(НастройкиСтраницы) = Тип("Структура") Тогда

	// Установим обычно подходящие настройки по умолчанию.
		НастройкиСтраницы = Новый Структура;

		НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
		НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
		НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
		НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
		НастройкиСтраницы.Вставить("Автомасштаб", Истина);
		НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
		НастройкиСтраницы.Вставить("ПолеСверху", 10);
		НастройкиСтраницы.Вставить("ПолеСнизу", 5);
		НастройкиСтраницы.Вставить("ПолеСлева", 5);
		НастройкиСтраницы.Вставить("ПолеСправа", 5);

	КонецЕсли;

	СтруктураВысот = СтруктураПараметровСтраницы.СтруктураВысот;

	ВысотаСтраницыВСтроках = СтруктураВысот.ВысотаСтраницыВСтроках;
	Высота_НомерСтраницыВСтроках = СтруктураВысот.Высота_НомерСтраницыВСтроках;
	Высота_ЗаголовокЛистаВСтроках = СтруктураВысот.Высота_ЗаголовокЛистаВСтроках;
	Высота_ПустаяСтрокаВСтроках = СтруктураВысот.Высота_ПустаяСтрокаВСтроках;
	Высота_ЗаголовокТаблицыВСтроках = СтруктураВысот.Высота_ЗаголовокТаблицыВСтроках;
	Высота_СтрокаОПВСтроках = СтруктураВысот.Высота_СтрокаОПВСтроках;

	// Получим необходимые данные для работы алгоритма.
	НастройкиАлгоритмаПечати = СтруктураПараметровСтраницы.НастройкиАлгоритмаПечати;

	// Обычно Истина текщих отчетов.
	ВыводитьСводнуюТаблицуПоОрганизацииВЦелом = НастройкиАлгоритмаПечати.ВыводитьСводнуюТаблицуПоОрганизацииВЦелом;

	НастройкиАлгоритмаПечатиСтрокОП = НастройкиАлгоритмаПечати.НастройкиАлгоритмаПечатиСтрокОП;
	НастройкиАлгоритмаПечатиСтрокОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечати);

	// Обычно "ПустаяСтрока".
	ИмяОбластиПустаяСтрока = НастройкиАлгоритмаПечати.ИмяОбластиПустаяСтрока;
	// Обычно "Подвал".
	ИмяОбластиПодвал = НастройкиАлгоритмаПечати.ИмяОбластиПодвал;

	// Имена областей подписи.
	ИмяОбластиОргДиректор = НастройкиАлгоритмаПечати.ИмяОбластиОргДиректор;
	ИмяОбластиОргБухгалтер = НастройкиАлгоритмаПечати.ИмяОбластиОргБухгалтер;

	// Если в отчете имеется раздел Возвраты, часто его надо печатать не отдельно, а сразу за данными
	// раздела Декларация. На этот случай - отдельный флажок.
	ВыводитьВозвратыЗаДекларацией = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ВыводитьВозвратыЗаДекларацией", НастройкиАлгоритмаПечати);
	Если НЕ ЗначениеЗаполнено(ВыводитьВозвратыЗаДекларацией) Тогда
		ВыводитьВозвратыЗаДекларацией = Ложь;
	КонецЕсли;

	// Описание заголовка и шапки таблицы.
	// Обычно "НомерСтраницы".	
	ИмяОбластиНомерСтраницы = НастройкиАлгоритмаПечати.ИмяОбластиНомерСтраницы;
	// Обычно "ЗаголовокЛиста".	
	ИмяОбластиЗаголовокЛиста = НастройкиАлгоритмаПечати.ИмяОбластиЗаголовокЛиста;
	// Обычно "ЗаголовокТаблицы".
	ИмяОбластиЗаголовокТаблицы = НастройкиАлгоритмаПечати.ИмяОбластиЗаголовокТаблицы;

	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = НастройкиАлгоритмаПечати.СписокПереносимыхПолей;
	
	// СоответствиеСоставныхПолей -  
	// Значения - массив номеров колонок или окончаний имен ресурсов и реквизитов регистров после ИдГруппы,
	// которые нужно выводить. Значение элемента с нулевом индексом - разделительный символ между полями.
	// Ключ - номер колонки в которой нужно выводить несколько полей регистра сведений.
	СоответствиеСоставныхПолей = Неопределено;
	НастройкиАлгоритмаПечати.Свойство("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);

	// Описание областей макета, выводящих строки общей информации по ОП и организации.

	// Обычно "СтрокаОП", "РеквизитыОрганизации".
	ИмяОбластиСтрокаОП = НастройкиАлгоритмаПечати.ИмяОбластиСтрокаОП;
	// Обычно "СтрокаОП", "РеквизитыОрганизации".
	ИмяОбластиСтрокаОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИмяОбластиСтрокаОрг", НастройкиАлгоритмаПечати);

	// Обычно "ЗаголовокРеквизитов".
	ИмяОбластиЗаголовокРеквизитовОП = НастройкиАлгоритмаПечати.ИмяОбластиЗаголовокРеквизитовОП;
	// Обычно "ЗаголовокРеквизитов".
	ИмяОбластиЗаголовокРеквизитовОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИмяОбластиЗаголовокРеквизитовОрг", НастройкиАлгоритмаПечати);

	// Текст пояснения к общим сведениям по ОП и организации.

	// Обычно "Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)".
	ЗаголовокРеквизитовОП = НастройкиАлгоритмаПечати.ЗаголовокРеквизитовОП;
	// Обычно "Сведения по организации".
	ЗаголовокРеквизитовОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ЗаголовокРеквизитовОрг", НастройкиАлгоритмаПечати);

	// Имя области в которой выводится общая информация по ОП и Организации.

	// Обычно "Реквизиты" или "ОП".
	ИмяОбластиРеквизитовОП = НастройкиАлгоритмаПечати.ИмяОбластиРеквизитовОП;
	// Обычно "Реквизиты" или "ОП".
	ИмяОбластиРеквизитовОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ИмяОбластиРеквизитовОрг", НастройкиАлгоритмаПечати);

	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	КолонкиГруппировокОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КолонкиГруппировокОрг", НастройкиАлгоритмаПечати);
	КолонкиСуммированияОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КолонкиСуммированияОрг", НастройкиАлгоритмаПечати);
	КолонкиНеВыводитьОрг = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("КолонкиНеВыводитьОрг", НастройкиАлгоритмаПечати);

	Если НЕ ЗначениеЗаполнено(ИдГруппыРаздела) Тогда	
		ИдГруппыРаздела = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяРаздела, СтруктураРеквизитовФормы);		
	КонецЕсли; 
	
	Если ВыводитьВозвратыЗаДекларацией Тогда

		НастройкиАлгоритмаПечатиВозвраты = НастройкиАлгоритмаПечати.НастройкиАлгоритмаПечатиВозвраты;

		// Обычно "Возвраты"
		ИмяРазделаВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяРазделаВозвраты;

		ТаблицаСтраницыВозвраты = НастройкиАлгоритмаПечатиВозвраты.ТаблицаСтраницыВозвраты;

		ИдГруппыРазделаВозвраты = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяРазделаВозвраты, СтруктураРеквизитовФормы);
		// Обычно "СтрокаОП", "РеквизитыОрганизации".
		ИмяОбластиСтрокаОргВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиСтрокаОргВозвраты;
		// Обычно "СтрокаОП", "РеквизитыОрганизации".
		ИмяОбластиСтрокаОПВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиСтрокаОПВозвраты;

		// Обычно "ЗаголовокРеквизитов".
		ИмяОбластиЗаголовокРеквизитовОргВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиЗаголовокРеквизитовОргВозвраты;
		// Обычно "ЗаголовокРеквизитов".
		ИмяОбластиЗаголовокРеквизитовОПВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиЗаголовокРеквизитовОПВозвраты;

		// Обычно "Возвраты по организации".
		ЗаголовокРеквизитовОргВозвраты = НастройкиАлгоритмаПечатиВозвраты.ЗаголовокРеквизитовОргВозвраты;
		// Обычно "Возвраты по обособленному подразделению (с указанием ИНН, КПП и адреса)".
		ЗаголовокРеквизитовОПВозвраты = НастройкиАлгоритмаПечатиВозвраты.ЗаголовокРеквизитовОПВозвраты;

		// Обычно "Реквизиты" или "ОП".
		ИмяОбластиРеквизитовОргВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиРеквизитовОргВозвраты;
		// Обычно "Реквизиты" или "ОП".
		ИмяОбластиРеквизитовОПВозвраты = НастройкиАлгоритмаПечатиВозвраты.ИмяОбластиРеквизитовОПВозвраты;

	КонецЕсли;

	ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

	ОсталосьСтрок = ВысотаСтраницыВСтроках;

	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть(ИмяОбластиПустаяСтрока);

	Область_НомерСтраницы = МакетПечати.ПолучитьОбласть(ИмяОбластиНомерСтраницы);
	ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);

	Область_ЗаголовокЛиста = МакетПечати.ПолучитьОбласть(ИмяОбластиЗаголовокЛиста);
	ВывестиВПечатнуюФорму(Область_ЗаголовокЛиста, ПечатнаяФорма);

	ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокЛистаВСтроках
		- Высота_НомерСтраницыВСтроках;

		////////////////////////////////
	// По организации.
	////////////////////////////////
	ИНН = СтруктураДанныхТитульный.ИНН1;
	КПП = СтруктураДанныхТитульный.КПП1;
	ЭтоПБОЮЛ = СтруктураДанныхТитульный.ЭтоПБОЮЛ;

	Если ВыводитьСводнуюТаблицуПоОрганизацииВЦелом Тогда

		Область_ЗаголовокТаблицы = МакетПечати.ПолучитьОбласть(ИмяОбластиЗаголовокТаблицы);
		ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

		ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках;

		ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
		ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;

		Область_ЗаголовокПоОрганизации = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаОрг);
		ВывестиПолеМакета(Область_ЗаголовокПоОрганизации, ИмяОбластиЗаголовокРеквизитовОрг, ЗаголовокРеквизитовОрг);

		// Определяем реквизиты организации.
		Наименование = СокрЛП(СтруктураДанныхТитульный.ОргНазв);
		АдресОрганизации = Неопределено;
		Адрес = Неопределено;
		ДополнительныеДанные.Титульный.Свойство("АдресОрганизации", АдресОрганизации);
		Если АдресОрганизации <> Неопределено Тогда
			АдресОрганизации.Свойство("Адрес", Адрес);
		КонецЕсли;

		Если Адрес = Неопределено Тогда
			Сведения = "АдрЮР";
			ДатаПодписи = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ДатаПодписи", СтруктураДанныхТитульный);
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
			Адрес = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮр);
		КонецЕсли;

		ТекстРеквизитовОрганизации = Наименование + ", ИНН " + ИНН
			+ ?(ЗначениеЗаполнено(КПП), ", КПП " + КПП, "") + "
			|" + Адрес;

		ВывестиПолеМакета(Область_ЗаголовокПоОрганизации, ИмяОбластиРеквизитовОрг, ТекстРеквизитовОрганизации);

		ВывестиВПечатнуюФорму(Область_ЗаголовокПоОрганизации, ПечатнаяФорма);

		ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;

		ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизации(ИдГруппыРаздела, СтруктураРеквизитовФормы, СтруктураСервисРегистров, КолонкиГруппировокОрг, КолонкиСуммированияОрг, КолонкиНеВыводитьОрг);

		ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
				+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

		КонецЕсли;

		// Готовим структуру параметров для вывода на печать строк.
		СтруктураПараметров = Новый Структура;

		СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

		СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураПараметров.Вставить("МакетПечати", МакетПечати);
		СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
		СтруктураПараметров.Вставить("ИмяОбластиЗаголовокТаблицы", ИмяОбластиЗаголовокТаблицы);
		СтруктураПараметров.Вставить("ИмяОбластиНомерСтраницы", ИмяОбластиНомерСтраницы);
		СтруктураПараметров.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
		СтруктураПараметров.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);
		СтруктураПараметров.Вставить("НастройкиСтраницы", НастройкиСтраницы);
		СтруктураПараметров.Вставить("СтруктураВысот", СтруктураВысот);

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТаблицаСтрок", ДанныеПоОрганизации);
		СтруктураДанных.Вставить("ИдГруппыПолейТаблицы", ИдГруппыРаздела);

		СтруктураПараметров.Вставить("СтруктураДанных", СтруктураДанных);
		СтруктураПараметров.Вставить("НастройкиАлгоритмаПечатиСтрок", НастройкиАлгоритмаПечатиСтрокОрг);

		СтруктураПараметров.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
		СтруктураПараметров.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

		ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок);

		// Если в отчете имеется раздел Возвраты, часто его надо печатать не отдельно, а сразу за данными
		// раздела Декларация. На этот случай - добавим небольшой кусок.
		Если ВыводитьВозвратыЗаДекларацией Тогда

		////////////////////////////////
			// Возвраты по организации.
			////////////////////////////////
			Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках
					+ 3) Тогда

					// Переходим на новый лист, если места меньше чем на заголовок ОП и строку.
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

				ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

				ОсталосьСтрок = ВысотаСтраницыВСтроках;

				// Выводим заголовок таблицы и номер.
				ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
				ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

				ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
					- Высота_НомерСтраницыВСтроках;

			КонецЕсли;

			ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
			ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;

			Область_ЗаголовокПоОрганизацииВозвраты = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаОргВозвраты);

			ВывестиПолеМакета(Область_ЗаголовокПоОрганизацииВозвраты, ИмяОбластиЗаголовокРеквизитовОргВозвраты, ЗаголовокРеквизитовОргВозвраты);

			ВывестиПолеМакета(Область_ЗаголовокПоОрганизацииВозвраты, ИмяОбластиРеквизитовОргВозвраты, ТекстРеквизитовОрганизации);

			ВывестиВПечатнуюФорму(Область_ЗаголовокПоОрганизацииВозвраты, ПечатнаяФорма);

			ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;

			// Коллонки группировки и суммирования для возвратов те же, что для основного раздела.
			ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизации(ИдГруппыРазделаВозвраты, СтруктураРеквизитовФормы, СтруктураСервисРегистров, КолонкиГруппировокОрг, КолонкиСуммированияОрг, КолонкиНеВыводитьОрг);

			ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();

			// Информируем о ходе выполнения.
			Если НужноОбработатьСтрок > 0 Тогда

				СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
					+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

			КонецЕсли;

			// Готовим структуру параметров для вывода на печать строк.
			СтруктураПараметров = Новый Структура;

			СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

			СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураПараметров.Вставить("МакетПечати", МакетПечати);
			СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
			СтруктураПараметров.Вставить("ИмяОбластиЗаголовокТаблицы", ИмяОбластиЗаголовокТаблицы);
			СтруктураПараметров.Вставить("ИмяОбластиНомерСтраницы", ИмяОбластиНомерСтраницы);
			СтруктураПараметров.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
			СтруктураПараметров.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);
			СтруктураПараметров.Вставить("НастройкиСтраницы", НастройкиСтраницы);
			СтруктураПараметров.Вставить("СтруктураВысот", СтруктураВысот);

			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТаблицаСтрок", ДанныеПоОрганизации);
			СтруктураДанных.Вставить("ИдГруппыПолейТаблицы", ИдГруппыРазделаВозвраты);

			СтруктураПараметров.Вставить("СтруктураДанных", СтруктураДанных);
			СтруктураПараметров.Вставить("НастройкиАлгоритмаПечатиСтрок", НастройкиАлгоритмаПечатиСтрокОрг);

			СтруктураПараметров.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
			СтруктураПараметров.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

			ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок);

		КонецЕсли;

	КонецЕсли;

	////////////////////////////////
	// Печать по ОП.
	////////////////////////////////

	// Нужно собрать информацию по ОП с разных листов.
	// Допускается повторение данных ОП на разных листах одного раздела - не всегда это ошибка,
	// например в "виноградных" декларациях.
	// И если даже ошибка - надо позволить печатать что угодно, это не выгрузка.
	ДанныеОП_Раздела = СтруктураСобратьДанныеПоОП(ИдГруппыРаздела, ИмяРаздела, ТаблицаСтраницыРаздела, ЭтоПБОЮЛ, ИНН);

	КоличествоВозвратовБезДекларации = 0;

	Если ВыводитьВозвратыЗаДекларацией Тогда

		ДанныеОП_Возвраты = СтруктураСобратьДанныеПоОП(ИдГруппыРазделаВозвраты, ИмяРазделаВозвраты, ТаблицаСтраницыВозвраты, ЭтоПБОЮЛ, ИНН);

		Для Каждого Лист Из ДанныеОП_Раздела Цикл

			ИдОП = Лист.Ключ;
			СтруктураОП = Лист.Значение;

			Если ДанныеОП_Возвраты.Свойство(ИдОП) Тогда

				СтруктураОПВозвратов = ДанныеОП_Возвраты[ИдОП];

				Для каждого СведОрг Из СтруктураОП.СведОрг Цикл

					ПодробныеСведения = СведОрг.Значение;

					Если ЗначениеЗаполнено(ПодробныеСведения.НомерЛистаДругогоРаздела) Тогда
						Продолжить;
					КонецЕсли;

					// Определили первый пока не синхронизированный с возвратами лист по ОП.
					// Теперь определим первый несинхронизированный лист возвратов.
					Для каждого СведОргВозвратов Из СтруктураОПВозвратов.СведОрг Цикл

						ПодробныеСведенияВозвратов = СведОргВозвратов.Значение;
						Если ЗначениеЗаполнено(ПодробныеСведенияВозвратов.НомерЛистаДругогоРаздела) Тогда
							Продолжить;
						КонецЕсли;

						// Нашли. Выставляем соответсвие.
						ПодробныеСведения.НомерЛистаДругогоРаздела = ПодробныеСведенияВозвратов.НомерЛистаДекларация;
						ПодробныеСведенияВозвратов.НомерЛистаДругогоРаздела = ПодробныеСведения.НомерЛистаДекларация;

					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		Для Каждого Лист Из ДанныеОП_Возвраты Цикл

			СтруктураОПВозвратов = Лист.Значение;

			Для каждого СведОргВозвратов Из СтруктураОПВозвратов.СведОрг Цикл

				ПодробныеСведенияВозвратов = СведОргВозвратов.Значение;
				Если ЗначениеЗаполнено(ПодробныеСведенияВозвратов.НомерЛистаДругогоРаздела) Тогда
					Продолжить;
				КонецЕсли;

				// Есть страницы раздела Возвратов, не имеющие связи по ОП с разделом Декларации.
				КоличествоВозвратовБезДекларации = КоличествоВозвратовБезДекларации + 1;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// В большинстве случаев, когда ОП не повторяются на разных листах,
	// Всего листов равно ДанныеОП_Раздела.Количество(), но если есть повторы это будет неверно.
	ВсегоЛистов = 0;

	Для Каждого Лист Из ДанныеОП_Раздела Цикл

		СтруктураОП = Лист.Значение;

		Для каждого СведОрг Из СтруктураОП.СведОрг Цикл
			ВсегоЛистов = ВсегоЛистов + 1;
		КонецЦикла;

	КонецЦикла;

	ТекЛист = 0;
	Для Каждого Лист Из ДанныеОП_Раздела Цикл

		ИдОП = Лист.Ключ;
		СтруктураОП = Лист.Значение;

		Для каждого СведОрг Из СтруктураОП.СведОрг Цикл

			ТекЛист = ТекЛист + 1;

			ПодробныеСведения = СведОрг.Значение;

			////////////////////////////////
			// Декларация по ОП.
			////////////////////////////////
			Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках
					+ 3) Тогда

					// Переходим на новый лист, если места меньше чем на заголовок ОП и строку.
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

				ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

				ОсталосьСтрок = ВысотаСтраницыВСтроках;

				// Выводим заголовок таблицы и номер.
				ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
				ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

				ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
					- Высота_НомерСтраницыВСтроках;

			КонецЕсли;

			ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
			ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;

			Область_СтрокаОП = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаОП);

			ВывестиПолеМакета(Область_СтрокаОП, ИмяОбластиЗаголовокРеквизитовОП, ЗаголовокРеквизитовОП);

			СтрокаОбособленноеПодразделение = СтруктураОП.Представление;
			ВывестиПолеМакета(Область_СтрокаОП, ИмяОбластиРеквизитовОП, СтрокаОбособленноеПодразделение);

			ВывестиВПечатнуюФорму(Область_СтрокаОП, ПечатнаяФорма);

			ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;

			ИндексСтраницы = ПодробныеСведения.НомерЛистаДекларация - 1;

			ДанныеДвиженийДекларация = ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппыРаздела, ИндексСтраницы, СтруктураРеквизитовФормы, СтруктураСервисРегистров);

			КолСтрокДанных = ДанныеДвиженийДекларация.Количество();

			ОбработаноСтрок = ОбработаноСтрок + КолСтрокДанных;

			// Информируем о ходе выполнения.
			Если НужноОбработатьСтрок > 0 Тогда

				СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
					+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

			КонецЕсли;

			// Готовим структуру параметров для вывода на печать строк.
			СтруктураПараметров = Новый Структура;

			СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

			СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураПараметров.Вставить("МакетПечати", МакетПечати);
			СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
			СтруктураПараметров.Вставить("ИмяОбластиЗаголовокТаблицы", ИмяОбластиЗаголовокТаблицы);
			СтруктураПараметров.Вставить("ИмяОбластиНомерСтраницы", ИмяОбластиНомерСтраницы);
			СтруктураПараметров.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
			СтруктураПараметров.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);
			СтруктураПараметров.Вставить("НастройкиСтраницы", НастройкиСтраницы);
			СтруктураПараметров.Вставить("СтруктураВысот", СтруктураВысот);

			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТаблицаСтрок", ДанныеДвиженийДекларация);
			СтруктураДанных.Вставить("ИдГруппыПолейТаблицы", ИдГруппыРаздела);

			СтруктураПараметров.Вставить("СтруктураДанных", СтруктураДанных);
			СтруктураПараметров.Вставить("НастройкиАлгоритмаПечатиСтрок", НастройкиАлгоритмаПечатиСтрокОП);

			СтруктураПараметров.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
			СтруктураПараметров.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

			ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок);

			Если ВыводитьВозвратыЗаДекларацией Тогда

			////////////////////////////////
				// Возвраты по ОП.
				////////////////////////////////
				Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках + Высота_СтрокаОПВСтроках
						+ 3) Тогда

						// Переходим на новый лист, если места меньше чем на заголовок ОП и строку
					СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

					ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

					ОсталосьСтрок = ВысотаСтраницыВСтроках;

					// Выводим заголовок таблицы и номер.
					ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
					ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

					ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
						- Высота_НомерСтраницыВСтроках;

				КонецЕсли;

				ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
				ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;

				Область_СтрокаОПВозвраты = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаОПВозвраты);

				ВывестиПолеМакета(Область_СтрокаОПВозвраты, ИмяОбластиЗаголовокРеквизитовОПВозвраты, ЗаголовокРеквизитовОПВозвраты);

				СтрокаОбособленноеПодразделение = СтруктураОП.Представление;
				ВывестиПолеМакета(Область_СтрокаОПВозвраты, ИмяОбластиРеквизитовОПВозвраты, СтрокаОбособленноеПодразделение);

				ВывестиВПечатнуюФорму(Область_СтрокаОПВозвраты, ПечатнаяФорма);

				ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;

				Если ЗначениеЗаполнено(ПодробныеСведения.НомерЛистаДругогоРаздела) Тогда

					ИндексСтраницыВозвратов = ПодробныеСведения.НомерЛистаДругогоРаздела - 1;

					ДанныеДвиженийДекларация = ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппыРазделаВозвраты, ИндексСтраницыВозвратов, СтруктураРеквизитовФормы, СтруктураСервисРегистров);
				Иначе
				// Передаем отрицательный индекс - получим пустую таблицу с нужными колонками.								
					ДанныеДвиженийДекларация = ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппыРазделаВозвраты, -1, СтруктураРеквизитовФормы, СтруктураСервисРегистров);
				КонецЕсли;

				КолСтрокДанных = ДанныеДвиженийДекларация.Количество();

				ОбработаноСтрок = ОбработаноСтрок + КолСтрокДанных;

				// Информируем о ходе выполнения.
				Если НужноОбработатьСтрок > 0 Тогда

					СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
						+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

				КонецЕсли;

				// Готовим структуру параметров для вывода на печать строк.
				СтруктураПараметров = Новый Структура;

				СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

				СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
				СтруктураПараметров.Вставить("МакетПечати", МакетПечати);
				СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
				СтруктураПараметров.Вставить("ИмяОбластиЗаголовокТаблицы", ИмяОбластиЗаголовокТаблицы);
				СтруктураПараметров.Вставить("ИмяОбластиНомерСтраницы", ИмяОбластиНомерСтраницы);
				СтруктураПараметров.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
				СтруктураПараметров.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);
				СтруктураПараметров.Вставить("НастройкиСтраницы", НастройкиСтраницы);
				СтруктураПараметров.Вставить("СтруктураВысот", СтруктураВысот);

				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ТаблицаСтрок", ДанныеДвиженийДекларация);
				СтруктураДанных.Вставить("ИдГруппыПолейТаблицы", ИдГруппыРазделаВозвраты);

				СтруктураПараметров.Вставить("СтруктураДанных", СтруктураДанных);
				СтруктураПараметров.Вставить("НастройкиАлгоритмаПечатиСтрок", НастройкиАлгоритмаПечатиСтрокОП);

				СтруктураПараметров.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
				СтруктураПараметров.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

				Если КоличествоВозвратовБезДекларации = 0 Тогда

				// Значит последний лист по декларации будет последним вообще.						
					ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок, ТекЛист, ВсегоЛистов);

				Иначе

				// Будут еще отдельно только возвраты. Анализ на последний лист не нужен.						
					ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	////////////////////////////////
	// Возвраты по ОП без соответствия в разделе Декларация.
	////////////////////////////////
	Если НЕ КоличествоВозвратовБезДекларации = 0 Тогда

	// Если КоличествоВозвратовБезДекларации не нуль - точно печатаются возвраты,
		// нет смысла дополнительно проверять.
		ТекЛист = 0;
		Для каждого Лист Из ДанныеОП_Возвраты Цикл

			СтруктураОПВозвратов = Лист.Значение;

			Для каждого СведОргВозвратов Из СтруктураОПВозвратов.СведОрг Цикл

				ПодробныеСведенияВозвратов = СведОргВозвратов.Значение;

				Если ПодробныеСведенияВозвратов.НомерЛистаДругогоРаздела = Неопределено Тогда

				// Нужно вывести отдельно.
					ТекЛист = ТекЛист + 1;

					Если ОсталосьСтрок < (Высота_ПустаяСтрокаВСтроках
							+ Высота_СтрокаОПВСтроках + 3) Тогда
							// переходим на новый лист, если места меньше чем на заголовок ОП и строку
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

						ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

						ОсталосьСтрок = ВысотаСтраницыВСтроках;

						// Выводим заголовок таблицы и номер.
						ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
						ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

						ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
							- Высота_НомерСтраницыВСтроках;

					КонецЕсли;

					ВывестиВПечатнуюФорму(Область_ПустаяСтрока, ПечатнаяФорма);
					ОсталосьСтрок = ОсталосьСтрок - Высота_ПустаяСтрокаВСтроках;

					Область_СтрокаОПВозвраты = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаОПВозвраты);

					ВывестиПолеМакета(Область_СтрокаОПВозвраты, ИмяОбластиЗаголовокРеквизитовОПВозвраты, ЗаголовокРеквизитовОПВозвраты);

					СтрокаОбособленноеПодразделение = СтруктураОПВозвратов.Представление;
					ВывестиПолеМакета(Область_СтрокаОПВозвраты, ИмяОбластиРеквизитовОПВозвраты, СтрокаОбособленноеПодразделение);

					ВывестиВПечатнуюФорму(Область_СтрокаОПВозвраты, ПечатнаяФорма);

					ОсталосьСтрок = ОсталосьСтрок - Высота_СтрокаОПВСтроках;

					ИндексСтраницыВозвратов = ПодробныеСведенияВозвратов.НомерЛистаДекларация
						- 1;

					ДанныеДвиженийДекларация = ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппыРазделаВозвраты, ИндексСтраницыВозвратов, СтруктураРеквизитовФормы, СтруктураСервисРегистров);

					КолСтрокДанных = ДанныеДвиженийДекларация.Количество();

					ОбработаноСтрок = ОбработаноСтрок + КолСтрокДанных;

					// Информируем о ходе выполнения.
					Если НужноОбработатьСтрок > 0 Тогда

						СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
							+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

					КонецЕсли;

					// Готовим структуру параметров для вывода на печать строк.
					СтруктураПараметров = Новый Структура;

					СтруктураПараметров.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

					СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
					СтруктураПараметров.Вставить("МакетПечати", МакетПечати);
					СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
					СтруктураПараметров.Вставить("ИмяОбластиЗаголовокТаблицы", ИмяОбластиЗаголовокТаблицы);
					СтруктураПараметров.Вставить("ИмяОбластиНомерСтраницы", ИмяОбластиНомерСтраницы);
					СтруктураПараметров.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
					СтруктураПараметров.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);
					СтруктураПараметров.Вставить("НастройкиСтраницы", НастройкиСтраницы);
					СтруктураПараметров.Вставить("СтруктураВысот", СтруктураВысот);

					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("ТаблицаСтрок", ДанныеДвиженийДекларация);
					СтруктураДанных.Вставить("ИдГруппыПолейТаблицы", ИдГруппыРазделаВозвраты);

					СтруктураПараметров.Вставить("СтруктураДанных", СтруктураДанных);
					СтруктураПараметров.Вставить("НастройкиАлгоритмаПечатиСтрок", НастройкиАлгоритмаПечатиСтрокОП);

					СтруктураПараметров.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
					СтруктураПараметров.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

					ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма, ОсталосьСтрок, ОбработаноСтрок, ТекЛист, КоличествоВозвратовБезДекларации);

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// Вывод подвала печатной формы.
	Если ЗначениеЗаполнено(ИмяОбластиПодвал) Тогда

		Область_Подвал = МакетПечати.ПолучитьОбласть(ИмяОбластиПодвал);

		// ОргДиректор.
		ОргДиректор = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргДиректор", СтруктураДанныхТитульный);

		// ОргБухгалтер.
		ОргБухгалтер = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрЗначениеПоКлючуСтруктуры("ОргБухгалтер", СтруктураДанныхТитульный);

		ВывестиПолеМакета(Область_Подвал, ИмяОбластиОргДиректор, ОргДиректор);
		ВывестиПолеМакета(Область_Подвал, ИмяОбластиОргБухгалтер, ОргБухгалтер);

		ВывестиВПечатнуюФорму(Область_Подвал, ПечатнаяФорма);

	КонецЕсли;

	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсЗагрузкаИзФайлаВыгрузки

// Обработка значений свойств адресной структуры, общих для структуры адресной информации БСП и стандартной выгрузки.
// Это поля
// 		* КодСтраны
//		* Индекс
//		* КодРегион
//		* Район
//		* Город
//		* НаселенныйПункт
//		* Улица
//
// Свойства структуры выгрузки, уже обработанные в ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
//		* Дом
//		* Корпус - вся инфа из массива Корпуса в виде строки, может быть разделена запятой или нет.
//		* Литера - из массива Корпус, если есть.
//		* Квартира
//
// Параметры:
// 		СтруктураАдреса	- См. возвращаемое значение ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
// Возвращаемое значение:
// 		Структура - См. возвращаемое значение ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
Функция СтруктураАдресаВыгрузкиИзСтруктурыАдреса(СтруктураАдреса) Экспорт

	// Поля структуры адреса контактной информации,
	// которые могут пригодиться.
	// 
	// Структура
	
	// * "КодСтраны"
	// * "Индекс"   
	
	// * "КодРегиона"                               
	// * "Район" 	
	// * "Город" 	
	// * "Поселение"                                	
	// * "НаселенныйПункт"                          
	
	// * "Территория"               уровень где то между насел пунктом и улицей.
	// 								Если нет насел пункта - то насел пункт.
	//								Если нет улицы - то улица.
	//								Если есть и то и другое - игнорируем территорию.
	
	// Ниже - обработано в ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON()
	
	// * "Улица" 	
	// * "Здание" Структура
	//		** "ТипЗдания"
	//		** "Номер"	
	// * "Корпуса"   Массив
	// * "Помещения" Массив
	// * "НомерЗемельногоУчастка" - может быть на уровне улицы или дома. 
	//								Не бывает одновременно с указанием дома.
	
	
	// Структура адресной информации выгрузки, которую надо заполнить.
	//		* КодСтраны
	//		* Индекс
	//		* КодРегион
	//		* Район
	//		* Город
	//		* НаселенныйПункт
	//		* Улица
	//		* Дом
	//		* Корпус - вся инфа из массива Корпуса в виде строки, может быть разделена запятой или нет.
	//		* Литера - из массива Корпус, если ТипКорпуса Литера.
	//		* Квартира  - вся инфа из массива Помещения в виде строки, может быть разделена запятой или нет.
	
	СтруктураАдресаВыгрузки = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураАдреса);
	
	Если СтруктураАдреса.Свойство("Поселение") 
		И ЗначениеЗаполнено(СтруктураАдреса.Поселение) Тогда
		
		Если НЕ (СтруктураАдреса.Свойство("НаселенныйПункт") 
			И ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт)) Тогда
			
			СтруктураАдресаВыгрузки.Вставить("НаселенныйПункт", СтруктураАдреса.Поселение)
		КонецЕсли
			
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("Территория") 
		И ЗначениеЗаполнено(СтруктураАдреса.Территория) Тогда
		
		Если НЕ (СтруктураАдреса.Свойство("Улица") 
			И ЗначениеЗаполнено(СтруктураАдреса.Улица)) Тогда
			
			СтруктураАдресаВыгрузки.Вставить("Улица", "Терр. " + СтруктураАдреса.Территория)
			
		ИначеЕсли НЕ (СтруктураАдреса.Свойство("НаселенныйПункт") 
			И ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт)) Тогда
			
			СтруктураАдресаВыгрузки.Вставить("НаселенныйПункт", "Терр. " + СтруктураАдреса.Территория)		
				
		КонецЕсли
		
	КонецЕсли;
	
	ЕстьЗемУчасток = (СтруктураАдреса.Свойство("НомерЗемельногоУчастка") 
					И ЗначениеЗаполнено(СтруктураАдреса.НомерЗемельногоУчастка));
	Если ЕстьЗемУчасток Тогда
		
		НомерЗемУчастка = СтрокаЧГ0(СтруктураАдреса.НомерЗемельногоУчастка);
		// Земельный участок не может быть одновременно с домом.
		Если НЕ (СтруктураАдреса.Свойство("Дом") 
			И ЗначениеЗаполнено(СтруктураАдреса.Дом)) Тогда
			
			СтруктураАдресаВыгрузки.Вставить("Дом", "зем. уч. " 
				+ НомерЗемУчастка)
		Иначе
			// Но если все таки Дом есть - добавляем к улице.	
			СтруктураАдресаВыгрузки.Вставить("Улица", СтруктураАдреса.Улица +
				?(ЗначениеЗаполнено(СтруктураАдреса.Улица), ", ", "") + "зем. уч. " 
				+ НомерЗемУчастка)	
		КонецЕсли			
	КонецЕсли; 
	
	Возврат СтруктураАдресаВыгрузки
	
КонецФункции 

Функция АдресИзВыгрузки(УзелАдреса, СтруктураАдреса = Неопределено, 
						ПредставлениеАдреса = Неопределено) Экспорт

	СтруктураАдреса = ПолучитьПустуюСтруктуруАдреса();
	
	Если НЕ СтруктураАдреса.Свойство("Идентификаторы") Тогда	
		СтруктураАдреса.Вставить("Идентификаторы", Новый Структура)
	ИначеЕсли НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоСтруктура(СтруктураАдреса.Идентификаторы) Тогда
		СтруктураАдреса.Вставить("Идентификаторы", Новый Структура)
	КонецЕсли;
	
	ПредставлениеАдреса = "";
		
	Для Каждого УзелПолеАдреса Из УзелАдреса.Строки Цикл
		
		КодПоляАдреса = ВРег(УзелПолеАдреса.Код);
		
		Если КодПоляАдреса = "КОДСТРАНЫ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			
			КодСтраны = УзелПолеАдреса.Значение;
			Если СтрДлина(КодСтраны) = 3 Тогда
				
				// Результат возвращаемый УправлениеКонтактнойИнформацией.ДанныеСтраныМира(КодСтраны)
				// Структура
				//	*	"Ссылка"
				//	*	"Код"
				//	*	"Наименование"
				//	*	"НаименованиеПолное"
				//	*	"МеждународноеНаименование"
				//	*	"КодАльфа2"
				//	*	"КодАльфа3"
				//	*	"УчастникЕАЭС" Булево
	
				ДанныеСтраныМира = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
				НазваниеСтраны = ДанныеСтраныМира.Наименование;
				Если ЗначениеЗаполнено(НазваниеСтраны) Тогда				
					СтруктураАдреса.Вставить("Страна", НазваниеСтраны)			
				КонецЕсли 
			ИначеЕсли ПустаяСтрока(КодСтраны) Тогда
				КодСтраны = "643";
				СтруктураАдреса.Вставить("Страна", "РОССИЯ")
			Иначе
				КодСтраны = ""
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(КодСтраны) Тогда			
				СтруктураАдреса.Вставить("КодСтраны", КодСтраны)			
			КонецЕсли; 
			
		ИначеЕсли КодПоляАдреса = "ИНДЕКС" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Индекс", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "КОДРЕГИОН" И ЗначениеЗаполнено(УзелПолеАдреса.Значение)
			И СтрДлина(УзелПолеАдреса.Значение) <= 2
			Тогда
			КодРегиона = СокрЛП(УзелПолеАдреса.Значение);
			
			Если СтрДлина(КодРегиона) = 1 Тогда				
				КодРегиона = "0" + КодРегиона				
			КонецЕсли; 
			СтруктураАдреса.Вставить("КодРегиона", КодРегиона);
			
			Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(КодРегиона);
			СтруктураАдреса.Вставить("Регион", Регион)
			
		ИначеЕсли КодПоляАдреса = "РАЙОН" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Район", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "ГОРОД" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Город", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "НАСЕЛПУНКТ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("НаселенныйПункт", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "УЛИЦА" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Улица", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "КОРПУС" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Корпус", УзелПолеАдреса.Значение)
									
		ИначеЕсли КодПоляАдреса = "ЛИТЕРА" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Литера", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "ДОМ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Дом", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = "КВАРТ" И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("Квартира", УзелПолеАдреса.Значение)
			
		// Случай адресного формата GUID ФИАС.
		ИначеЕсли КодПоляАдреса = ВРег("КодРегион") И ЗначениеЗаполнено(УзелПолеАдреса.Значение)
			И СтрДлина(УзелПолеАдреса.Значение) > 2
			Тогда
			СтруктураАдреса.Идентификаторы.Вставить("Регион", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = ВРег("КодРайон") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Идентификаторы.Вставить("Район", УзелПолеАдреса.Значение)
			
		ИначеЕсли КодПоляАдреса = ВРег("КодГород") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Идентификаторы.Вставить("Город", УзелПолеАдреса.Значение)
					
		ИначеЕсли КодПоляАдреса = ВРег("КодНаселПункт") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Идентификаторы.Вставить("НаселенныйПункт", УзелПолеАдреса.Значение)
					
		ИначеЕсли КодПоляАдреса = ВРег("КодУлица") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Идентификаторы.Вставить("Улица", УзелПолеАдреса.Значение)
					
		ИначеЕсли КодПоляАдреса = ВРег("КодДом") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("ИдентификаторДома", УзелПолеАдреса.Значение)
					
		ИначеЕсли КодПоляАдреса = ВРег("КодКварт") И ЗначениеЗаполнено(УзелПолеАдреса.Значение) Тогда
			СтруктураАдреса.Вставить("КодКварт", УзелПолеАдреса.Значение)
						
		КонецЕсли
	КонецЦикла;	
		
	СтруктураАдреса = ВосстановитьСтруктуруАдресаИзСтруктурыАдресаВыгрузки(СтруктураАдреса);
	ПредставлениеАдреса = СтруктураАдреса.Представление;
	// Отдаем в формате хранения адресной информации в алкоотчетах.
	ПолеСтруктурыАдреса = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
	
	Возврат ПолеСтруктурыАдреса
	
КонецФункции

Процедура ПостОбработкаПриЗагрузкеИзФайлаВыгрузкиАЛКО(ПараметрыЗагрузки, ПараметрыПроцедуры) Экспорт

	Перем ИмяОтчета, ИмяУзлаДанныхПоОП, ИмяУзлаДанных;
	Перем СчитатьКаждыйУзелДанныхСтраницейПоОП, ЕстьЛицензии;
	Перем КоличествоРазделовПоРегистрам, КоличествоРазделовПоОтчету;
	Перем ИмяРегРаздел, ИмяРазделаПоОтчету;
	
	ПараметрыПроцедуры.Свойство("ИмяОтчета", 						ИмяОтчета);
	ПараметрыПроцедуры.Свойство("ЕстьЛицензии", 					ЕстьЛицензии);
	ПараметрыПроцедуры.Свойство("КоличествоРазделовПоРегистрам", 	КоличествоРазделовПоРегистрам);
	ПараметрыПроцедуры.Свойство("ИмяРегРаздел", 					ИмяРегРаздел);
	ПараметрыПроцедуры.Свойство("КоличествоРазделовПоОтчету", 		КоличествоРазделовПоОтчету);
	ПараметрыПроцедуры.Свойство("ИмяРазделаПоОтчету", 				ИмяРазделаПоОтчету);
	ПараметрыПроцедуры.Свойство("ИмяУзлаДанныхПоОП", 				ИмяУзлаДанныхПоОП);
	ПараметрыПроцедуры.Свойство("ИмяУзлаДанных", 					ИмяУзлаДанных);
	ПараметрыПроцедуры.Свойство("СчитатьКаждыйУзелДанныхСтраницейПоОП", СчитатьКаждыйУзелДанныхСтраницейПоОП);
	
	УзелДокумент     = УзлыПоXPath(ПараметрыЗагрузки.ДеревоДляЗагрузки, "Документ")[0];
	УзелОрганизация  = УзлыПоXPath(УзелДокумент, 		"Организация")[0];	
		
	УзелСправочники  = УзлыПоXPath(ПараметрыЗагрузки.ДеревоДляЗагрузки, "Справочники");
	Если УзелСправочники.Количество() > 0 Тогда	
		УзелСправочники = УзелСправочники[0]
	Иначе
		УзелСправочники  = УзлыПоXPath(УзелДокумент, "Справочники");
		Если УзелСправочники.Количество() > 0 Тогда	
			УзелСправочники = УзелСправочники[0]
		Иначе
			// Узел Справочники есть не всегда.
			УзелСправочники = Неопределено
		КонецЕсли
	КонецЕсли;
		
	ИмяРегЛицензии = "СведенияРеглОтчетАлкоЛицензии";
	
	ДокументОтчета        = ПараметрыЗагрузки.ДанныеОтчета.ДокументОтчета;
	СтруктураДанныхОтчета = ПараметрыЗагрузки.ДанныеОтчета.СтруктураДанныхОтчета;
	ИмяФормыОтчета = "Отчет." + ИмяОтчета + ".Форма." + ДокументОтчета.ВыбраннаяФорма;
	
	НаДату = ДокументОтчета.ДатаОкончания;
	ОбъектОтчета = Неопределено;			
	ИмяМакета = Неопределено;
	КоллекцияСписковВыбора = СчитатьКоллекциюСписковВыбораАЛКО(
						НаДату, ИмяФормыОтчета, ОбъектОтчета, ИмяМакета); // здесь возвращается ОбъектОтчета
	
	ВерсияФормата = Неопределено;
	ПараметрыЗагрузки.ПараметрыОтчета.Свойство("ВерсФорм", ВерсияФормата);
	
	СхемаЗагрузки  = СхемаЗагрузкиАЛКО(ВерсияФормата, НаДату, ИмяФормыОтчета, ОбъектОтчета);
	
	СхемаЗагрузкиДанных = Неопределено;
	СоответствиеУзловОчистки = Новый Соответствие;
	СхемаЗагрузки.Свойство("Данные", СхемаЗагрузкиДанных);
	СхемаЗагрузки.Свойство("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
	
	СхемаЗагрузкиСправочников = Неопределено;
	СхемаЗагрузки.Свойство("Справочники", СхемаЗагрузкиСправочников);
	
	
	УзелЗагрузкиДанных     = УзлыПоXPath(СхемаЗагрузкиДанных, "//" + ИмяУзлаДанных)[0];
	
	ТабРегЛицензии = Новый ТаблицаЗначений;
	
	ТабРегРаздел = Новый Массив(КоличествоРазделовПоРегистрам + 1); // Чтобы обращаться по номеру раздела.
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл	
		ТабРегРаздел[НомерРаздела] = Новый ТаблицаЗначений	
	КонецЦикла; 
		
	// Добавляем в таблицы значений все необходимые колонки.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегЛицензии, ТабРегЛицензии);
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл	
		ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегРаздел[НомерРаздела],  ТабРегРаздел[НомерРаздела])
	КонецЦикла; 
		
	ИННОрг = Неопределено;
	КППОрг = Неопределено;
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
						ПараметрыЗагрузки.ДанныеОтчета.ДокументОтчетаОбъект.Организация, 
						ПараметрыЗагрузки.ДанныеОтчета.ДокументОтчетаОбъект.ДатаПодписи, Сведения);
	ОргСведения.Свойство("ИННЮЛ", ИННОрг);
	ОргСведения.Свойство("КППЮЛ", КППОрг);
	
	ОрганизацияИНН = "";
	ОрганизацияКПП = "";
	ЭтоПБОЮЛ = Ложь;
	
	ИННЮЛ = Неопределено;
	ИННФЛ = Неопределено;
	КППЮЛ = Неопределено;
	ПараметрыЗагрузки.ПараметрыОтчета.Свойство("ИННЮЛ", ИННЮЛ);
	ПараметрыЗагрузки.ПараметрыОтчета.Свойство("ИННФЛ", ИННФЛ);
	ПараметрыЗагрузки.ПараметрыОтчета.Свойство("КППЮЛ", КППЮЛ);
	
	Если ЗначениеЗаполнено(КППОрг) Тогда
		КППЮЛ = КППОрг;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННФЛ) И НЕ ЗначениеЗаполнено(КППЮЛ) Тогда
		ЭтоПБОЮЛ = Истина;
		ОрганизацияИНН = ИННФЛ;
	Иначе
		ОрганизацияИНН = ИННЮЛ;
		ОрганизацияКПП = КППЮЛ;
	КонецЕсли;
	
	МаксИндексСтраницы  = 0;
	ВсегоСтрокСохранено = 0;
	
	Титульный = Неопределено;
	ПараметрыЗагрузки.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		Титульный.Вставить("НомКорр", ПараметрыЗагрузки.ПараметрыОтчета.НомерКорректировки);
	КонецЕсли;
	
	// Обработка раздела "Лицензии".
	Если ЕстьЛицензии Тогда	
		ОбработкаРазделаЛицензииПриЗагрузке(ПараметрыЗагрузки, УзелОрганизация, 
											СтруктураДанныхОтчета, КоллекцияСписковВыбора, 
											МаксИндексСтраницы)	
	КонецЕсли;
	
	// Подготовка данных для составного раздела "Декларация".
	
	УзлыДанныхПоОП = ЗагрузкаДанныхОПизВыгрузки(ПараметрыЗагрузки, УзелДокумент, 
												ИмяУзлаДанныхПоОП, ИмяУзлаДанных);
			
	// Обработка страниц раздела "Декларация".
	РазделПоОтчету = Новый Массив(КоличествоРазделовПоОтчету + 1);
	Для НомерРаздела = 1 По КоличествоРазделовПоОтчету Цикл
	
		РазделПоОтчету[НомерРаздела] = Неопределено;
		ПараметрыЗагрузки.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство(ИмяРазделаПоОтчету[НомерРаздела], 
																РазделПоОтчету[НомерРаздела]);
	
	КонецЦикла; 
	
	Если РазделПоОтчету[1] <> Неопределено Тогда
						
		РазделСведения 			= Новый Массив(КоличествоРазделовПоРегистрам + 1);
		РазделСведенияУдаленные = Новый Массив(КоличествоРазделовПоРегистрам + 1);
		
		Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл
		
			РазделСведения[НомерРаздела] 
				= СтруктураДанныхОтчета.СтруктураСервисРегистров[ИмяРегРаздел[НомерРаздела]];
			РазделСведенияУдаленные[НомерРаздела] 
				= СтруктураДанныхОтчета.СтруктураСервисРегистровУдаленные[ИмяРегРаздел[НомерРаздела]];
		
		КонецЦикла;
		
		КэшУзловСправочников = Неопределено;
		
		// Параметры для процедуры ЗаполнитьДанныеПоУзлуДанныхПоОП(), в той части, которая неизменна.
		ПараметрыПроцедуры = Новый Структура;
		
		ПараметрыПроцедуры.Вставить("ДокументОтчета", 			ДокументОтчета);
		ПараметрыПроцедуры.Вставить("УзелЗагрузкиДанных", 		УзелЗагрузкиДанных);
		ПараметрыПроцедуры.Вставить("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
		ПараметрыПроцедуры.Вставить("УзелСправочники", 			УзелСправочники);
		ПараметрыПроцедуры.Вставить("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
		ПараметрыПроцедуры.Вставить("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
		
		ПараметрыПроцедуры.Вставить("ИмяФормыОтчета", 			ИмяФормыОтчета);
		ПараметрыПроцедуры.Вставить("ИмяРегРаздел", 			ИмяРегРаздел);
		ПараметрыПроцедуры.Вставить("ТабРегРаздел", 			ТабРегРаздел);
		
		ПараметрыПроцедуры.Вставить("КоличествоРазделовПоРегистрам", 	КоличествоРазделовПоРегистрам);
		ПараметрыПроцедуры.Вставить("КоличествоРазделовПоОтчету", 		КоличествоРазделовПоОтчету);
		
		КоличествоПервичныхСтраниц = РазделПоОтчету[1].Количество();
		
		Для ПервичныйИндекс = 0 По КоличествоПервичныхСтраниц - 1 Цикл
			
			СтраницаРаздела = РазделПоОтчету[1][ПервичныйИндекс];
						
			ДанныеРаздела = СтраницаРаздела.Данные;
			ДопДанныеРаздела = СкопированнаяСтруктура(СтраницаРаздела.ДополнительныеДанные, Истина);
			ДанныеПоОП = УзлыДанныхПоОП[ПервичныйИндекс];
			
			СтраницаРаздела.ДополнительныеДанные = ДопДанныеРаздела;
			
			СведенияОбОП = Неопределено;
			ПредставлениеОП = "";
			Если ДанныеРаздела.Свойство("ОбособленноеПодразделение", СведенияОбОП) Тогда
								
				СведенияОбОП = ЗначениеИзСтрокиВнутр(СведенияОбОП);
				
				КПП = СведенияОбОП.КПП;
				
				ДопДанныеРаздела.Вставить("СведенияОбОП", СведенияОбОП);
				
				ПредставлениеОП 
					= РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(
								СведенияОбОП, ПустаяСтрока(КПП), ОрганизацияИНН);
				ДанныеРаздела.ОбособленноеПодразделение = ПредставлениеОП;					
				
				// При загрузке из файла нет смысла определять головное ОП или нет.
				СтраницаРаздела.ФлагГоловногоОП = Ложь;
				
			КонецЕсли;
			
			Если СчитатьКаждыйУзелДанныхСтраницейПоОП Тогда
				// Например для виноградных алкодеклараций.
				СчетчикПоОП = 0;
				Для каждого УзелДанныхПоОП Из ДанныеПоОП Цикл
					
					СчетчикПоОП = СчетчикПоОП + 1;
					
					Если СчетчикПоОП > 1 Тогда
						
						// Для первой уже добавили выше.
						СтраницаПоОП = РазделПоОтчету[1].Добавить();
						
						ИндексСтраницы = РазделПоОтчету[1].Количество() - 1;
						
						СтраницаПоОП.Представление = "Лист N " + Формат(ИндексСтраницы + 1, "ЧН=; ЧГ=");
						СтраницаПоОП.АктивнаяСтраница = Ложь;
						СтраницаПоОП.АвтоматическоеПредставление = Истина;
						СтраницаПоОП.ФлагГоловногоОП = СтраницаРаздела.ФлагГоловногоОП;
						
						СтраницаПоОП.Данные = СкопированнаяСтруктура(ДанныеРаздела, Истина);
						СтраницаПоОП.ДополнительныеДанные = СкопированнаяСтруктура(ДопДанныеРаздела, Истина);
						
						ДанныеРазделаПоОП = СтраницаПоОП.Данные;
						ДопДанныеРазделаПоОП = СтраницаПоОП.ДополнительныеДанные;
						
						ДопДанныеРазделаПоОП.Вставить("СведенияОбОП", СведенияОбОП);				
						ДанныеРазделаПоОП.Вставить("ОбособленноеПодразделение",	ПредставлениеОП);
										
					Иначе
						
						ИндексСтраницы  = ПервичныйИндекс;
						ДанныеРазделаПоОП = СтраницаРаздела.Данные;
						ДопДанныеРазделаПоОП = СтраницаРаздела.ДополнительныеДанные;
						
					КонецЕсли; 
					
					ПараметрыПроцедуры.Вставить("ИндексСтраницы", 	ИндексСтраницы);
					ПараметрыПроцедуры.Вставить("УзелДанных", 		УзелДанныхПоОП);
					ПараметрыПроцедуры.Вставить("ДанныеРаздела", 	ДанныеРазделаПоОП);
					ПараметрыПроцедуры.Вставить("ДопДанныеРаздела", ДопДанныеРазделаПоОП);
					
					ЗаполнитьДанныеПоУзлуДанныхПоОП(ПараметрыПроцедуры,
										  РазделСведения, РазделПоОтчету,
										  ВсегоСтрокСохранено,
										  МаксИндексСтраницы, КэшУзловСправочников);
										  
									
				КонецЦикла; 
				
			Иначе
				
				// Обычный режим.
				ИндексСтраницы  = ПервичныйИндекс;
				
				ПараметрыПроцедуры.Вставить("ИндексСтраницы", 	ИндексСтраницы);
				ПараметрыПроцедуры.Вставить("УзелДанных", 		ДанныеПоОП);
				ПараметрыПроцедуры.Вставить("ДанныеРаздела", 	ДанныеРаздела);
				ПараметрыПроцедуры.Вставить("ДопДанныеРаздела", ДопДанныеРаздела);
				
				ЗаполнитьДанныеПоУзлуДанныхПоОП(ПараметрыПроцедуры,
										РазделСведения, РазделПоОтчету,
										ВсегоСтрокСохранено,
										МаксИндексСтраницы, КэшУзловСправочников);
				
					
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЕсли;
	
	СтруктураДанныхОтчета.МаксИндексСтраницы  = МаксИндексСтраницы;  // общее количество страниц отчета
	СтруктураДанныхОтчета.ВсегоСтрокСохранено = ВсегоСтрокСохранено; // общее количество строк отчета
	
КонецПроцедуры
 
// Отладка алгоритмов из макетов "НастройкиЗагрузкиXML" - и любых алгоритмов выполняемых инструкцией
// "Выполнить АлгоритмИзМакета" или "Выполнить АлгоритмИзФайла" или "Выполнить АлгоритмИзТекста". 
// Позволяет получить доступ к тестируемому значению внутри текста кода. 
// При отладке нужно вставить вызов этой процедуры в нужное место алгоритма, 
// и установить точку останова внутри процедуры.
//
// Пареметры:
// 	ТестируемоеЗначение - Произвольное значение
//	МеткаИзКода - Строка. Передаваемая из кода метка, определяющая место вызова.
Процедура ОтладкаЗагрузки(ТестируемоеЗначение, МеткаИзКода = "") Экспорт

	ТипЗначения = ТипЗнч(ТестируемоеЗначение);	

КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Общие

Функция ЕстьЦифра(Стр)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЕстьЦифра(Стр)

КонецФункции
 
Функция СтрокаЧГ0(ИсходноеЧисло)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ИсходноеЧисло)

КонецФункции

Функция ВозможныеДлиныИНН(Вариант)

	// РФ 		  - ИНН - 10 или 12 цифр
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
	
	Если ТипЗнч(Вариант) = Тип("Строка") Тогда
	
		Если Вариант = "РФ" Тогда
		
			ДлиныИНН_РФ = Новый Массив(2);
			ДлиныИНН_РФ.Добавить(10);
			ДлиныИНН_РФ.Добавить(12);
			
			Возврат ДлиныИНН_РФ;
			
		ИначеЕсли Вариант = "ЕАЭС" Тогда
			
			ДлиныИНН_ЕАЭС = Новый Массив(5);
			ДлиныИНН_ЕАЭС.Добавить(8);
			ДлиныИНН_ЕАЭС.Добавить(9);
			ДлиныИНН_ЕАЭС.Добавить(10);
			ДлиныИНН_ЕАЭС.Добавить(12);
			ДлиныИНН_ЕАЭС.Добавить(14);
			
			Возврат ДлиныИНН_ЕАЭС;
			
		ИначеЕсли Вариант = "ЕАЭС_БезРФ" Тогда
			
			ДлиныИНН_ЕАЭС_БезРФ = Новый Массив(4);
			ДлиныИНН_ЕАЭС_БезРФ.Добавить(8);
			ДлиныИНН_ЕАЭС_БезРФ.Добавить(9);
			ДлиныИНН_ЕАЭС_БезРФ.Добавить(12);
			ДлиныИНН_ЕАЭС_БезРФ.Добавить(14);
			
			Возврат ДлиныИНН_ЕАЭС_БезРФ;
			
		ИначеЕсли СтрДлина(Вариант) = 3 Тогда
			
			// Считаем, что передан код страны.
			ДлиныИНН_ЕАЭС_ПоСтранам = Новый Соответствие;	
			ДлиныИНН_ЕАЭС_ПоСтранам.Вставить("643", ВозможныеДлиныИНН("РФ")); // РФ.
			ДлиныИНН_ЕАЭС_ПоСтранам.Вставить("051", 8); // Армения.
			ДлиныИНН_ЕАЭС_ПоСтранам.Вставить("112", 9); // Беларусь.
			ДлиныИНН_ЕАЭС_ПоСтранам.Вставить("398", 12); // Казахстан.
			ДлиныИНН_ЕАЭС_ПоСтранам.Вставить("417", 14); // Киргизия.
			
			Возврат ДлиныИНН_ЕАЭС_ПоСтранам.Получить(Вариант);
			
		Иначе
			// По умолчанию - возвращаем длины ИНН России.
			Возврат ВозможныеДлиныИНН("РФ");
		КонецЕсли; 
	
	КонецЕсли; 
	
	// По умолчанию - возвращаем длины ИНН России.
	Возврат ВозможныеДлиныИНН("РФ");
	
КонецФункции
 
Функция ПолучитьИмяОбщегоМодуляВычислитьВыполнить(ВерсияБСПЧислом = Неопределено)

	Если ВерсияБСПЧислом = Неопределено Тогда
		ВерсияБСПЧислом = ПолучитьВерсиюБСПЧислом();
	КонецЕсли;

	ЧислоВерсияБСП2_4_1 = ПолучитьВерсиюЧислом("2.4.1");

	СтаршеБСП2_4_1 = (ВерсияБСПЧислом >= ЧислоВерсияБСП2_4_1);

	ИмяОбщегоМодуля = ?(СтаршеБСП2_4_1, "ОбщегоНазначения", "РаботаВБезопасномРежиме");

	Возврат ИмяОбщегоМодуля;

КонецФункции

Функция ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы = "")

	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;

КонецФункции

Функция ПолучитьДопустимуюСтроку(Стр)

	Результат = Строка(Стр);

	Результат = Врег(Результат);
	Результат = СокрЛП(Результат);
	Результат = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(Результат, ".,""'«»");
	
	// Убираем пробелы так чтобы из нескольких подряд остался только один.
	Результат = РегламентированнаяОтчетностьАЛКОКлиентСервер.УбратьЛишниеПробелы(Результат);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьИдДанных(Данные, Разделитель = "_")

	Результат = "";

	Индекс = -1;

	// Данные - Список значений.
	Для каждого ЭлементСписка Из Данные Цикл

		Индекс = Индекс + 1;

		ЗначениеДанных = ЭлементСписка.Значение;

		ПреобразованнаяСтрокаДанных = ЗначениеДанных;
		ПреобразованнаяСтрокаДанных = ?(ПреобразованнаяСтрокаДанных = Неопределено, "", ПреобразованнаяСтрокаДанных);
		ПреобразованнаяСтрокаДанных = ПолучитьДопустимуюСтроку(ПреобразованнаяСтрокаДанных);

		Результат = Результат + ?(Индекс = 0, "", Разделитель)
			+ ПреобразованнаяСтрокаДанных;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьИдОрганизации(Наименование = Неопределено, ИНН = Неопределено,
		КПП = Неопределено, ПредставлениеАдреса = Неопределено)

	Данные = Новый СписокЗначений;
	Данные.Добавить(ИНН);
	Данные.Добавить(КПП);
	Данные.Добавить(ПредставлениеАдреса);
	Данные.Добавить(Наименование);

	Возврат ПолучитьИдДанных(Данные, "_");

КонецФункции

Функция ПолучитьХешИдОрганизации(Наименование = Неопределено,
		ИНН = Неопределено, КПП = Неопределено, ПредставлениеАдреса = Неопределено)

	ИдОрганизации = ПолучитьИдОрганизации(Наименование, ИНН, КПП, ПредставлениеАдреса);
	Возврат ПолучитьХешSHA256(ИдОрганизации);

КонецФункции

Функция ПолучитьИдЛицензии(ХешИдПоставщика = Неопределено,
		Номер = Неопределено, Серия = Неопределено, ДатаВыдачи = Неопределено,
		ДатаОкончания = Неопределено, КемВыдана = Неопределено)

	ПреобразованнаяСтрокаХешИдПоставщика = ХешИдПоставщика;
	ПреобразованнаяСтрокаХешИдПоставщика = ?(ПреобразованнаяСтрокаХешИдПоставщика = Неопределено, "", ПреобразованнаяСтрокаХешИдПоставщика);
	ПреобразованнаяСтрокаНомер = Номер;
	ПреобразованнаяСтрокаНомер = ?(ПреобразованнаяСтрокаНомер = Неопределено, "", ПреобразованнаяСтрокаНомер);
	ПреобразованнаяСтрокаСерия = Серия;
	ПреобразованнаяСтрокаСерия = ?(ПреобразованнаяСтрокаСерия = Неопределено, "", ПреобразованнаяСтрокаСерия);
	ПреобразованнаяСтрокаСерияНомер = ПреобразованнаяСтрокаНомер
		+ ПреобразованнаяСтрокаСерия;

	ПреобразованнаяСтрокаДатаВыдачи = ?(ДатаВыдачи = Неопределено, "", Строка(ДатаВыдачи));
	ПреобразованнаяСтрокаДатаОкончания = ?(ДатаОкончания = Неопределено, "", Строка(ДатаОкончания));

	ПреобразованнаяСтрокаКемВыдана = КемВыдана;
	ПреобразованнаяСтрокаКемВыдана = ?(ПреобразованнаяСтрокаКемВыдана = Неопределено, "", ПреобразованнаяСтрокаКемВыдана);
	ПреобразованнаяСтрокаКемВыдана = ПолучитьДопустимуюСтроку(ПреобразованнаяСтрокаКемВыдана);

	Результат = ПреобразованнаяСтрокаХешИдПоставщика + "_"
		+ ПреобразованнаяСтрокаСерияНомер + "_" + ПреобразованнаяСтрокаДатаВыдачи
		+ "_" + ПреобразованнаяСтрокаДатаОкончания + "_"
		+ ПреобразованнаяСтрокаКемВыдана;

	Возврат Результат;

КонецФункции

Функция ПолучитьХешИдЛицензии(ХешИдПоставщика = Неопределено,
		Номер = Неопределено, Серия = Неопределено, ДатаВыдачи = Неопределено,
		ДатаОкончания = Неопределено, КемВыдана = Неопределено)

	ИдЛицензии = ПолучитьИдЛицензии(ХешИдПоставщика, Номер, Серия, ДатаВыдачи, ДатаОкончания, КемВыдана);
	Возврат ПолучитьХешSHA256(ИдЛицензии);

КонецФункции

Процедура ОбновитьОППоМестуНахожденияАЛКО(Форма)

	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

		НазваниеРаздела = Раздел.Ключ;
		ИмяТаблицыРаздела = Раздел.Значение;

		// В разделе Лицензии нет флага головного ОП.
		Если НазваниеРаздела = "Лицензии" Тогда
			Продолжить;
		КонецЕсли;

		ИндексСтраницы = -1;
		Для Каждого Страница Из Форма[ИмяТаблицыРаздела] Цикл

			ИндексСтраницы = ИндексСтраницы + 1;

			Если Страница.ФлагГоловногоОП Тогда

			// Нужно обновить.
				ЗаполнитьОПРеквизитамиОрганизацииАЛКО(Форма, НазваниеРаздела, ИндексСтраницы);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьВсеСервисРегистровУдаленныеОтчетаАЛКО(Форма)

// Используется при записи отчета как нового при изменении номера корректировки.
	Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаСервисРегистровУдаленные = Форма["СервисРегистров" + ИдГруппы
			+ "Удаленные"];
		ТаблицаСервисРегистровУдаленные.Очистить();

	КонецЦикла;

	// В Журнал ничего не пишем - для нового отчета истории удаленных страниц нет.
КонецПроцедуры

Процедура ОчиститьСервисРегистровОтчетаАЛКО(Форма, ИдГруппы)

	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ТаблицаСервисРегистров = Форма["СервисРегистров" + ИдГруппы];
	ТаблицаСервисРегистровУдаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	Для Каждого СтрокаСервисРегистровГруппы Из ТаблицаСервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = ТаблицаСервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);

		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);

	КонецЦикла;

	ТаблицаСервисРегистров.Очистить();

КонецПроцедуры

Функция ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Удаленные = Ложь,
		НужноВерифицировать = Ложь)

	Результат = Новый Структура;

	Для каждого Элемент Из Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр Цикл

		ИдГруппы = Элемент.Ключ;
		ИмяРегистра = Элемент.Значение;

		Если (НЕ Удаленные) И НужноВерифицировать Тогда
			ВерифицироватьТаблицуСервисРегистров(Форма["СервисРегистров" + ИдГруппы
				+ ?(Удаленные, "Удаленные", "")], Форма, ИмяРегистра);
		КонецЕсли;

		ТаблицаСервисРегистров = ПолучитьСервисРегистровКакТаблицуЗначений(Форма, ИдГруппы, Удаленные);

		Результат.Вставить(ИмяРегистра, ТаблицаСервисРегистров);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ВерифицироватьТаблицуСервисРегистров(ТаблицаСервисРегистров, Форма,
		ИмяРегистра)

	ДокументАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;

	Если НЕ (ТипЗнч(ДокументАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			ИЛИ ТипЗнч(ДокументАлкоОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет")) Тогда
		Возврат;
	КонецЕсли;

	ДокументСсылкаАлкоОтчет = ДокументАлкоОтчет.Ссылка;
	
	ИДДок = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);

	Для каждого СтрокаСервисРегистров Из ТаблицаСервисРегистров Цикл

		ИндексСтраницыРегистра = СтрокаСервисРегистров.ИндексСтраницыРегистра;
		КоличествоСтрок = СтрокаСервисРегистров.КоличествоСтрок;

		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра, ИДДок);
		
		СтрокаСервисРегистров.КоличествоСтрок = КоличествоСтрокСтраницыОтчетаПоРегистру(ИДДокИндСтраницы, ИмяРегистра, КоличествоСтрок);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма)

	Результат = Новый Структура;

	Для каждого Элемент Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = Элемент.Ключ;
		Результат.Вставить(ИдГруппы, Форма["БуферИтогов" + ИдГруппы]);

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы,
		СтруктураРеквизитовФормы)

	Таб = Новый ТаблицаЗначений;

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

	// Добавляем в таблицу значений все необходимые колонки.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, Таб);

	Возврат Таб;

КонецФункции

Функция ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма)

	ПараметрыФормы = Новый Структура;

	Для каждого ЭлементРаздела Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ИмяТаблицыРаздела = ЭлементРаздела.Значение;
		ТаблицаРаздела = Форма[ИмяТаблицыРаздела];
		ПараметрыФормы.Вставить(ИмяТаблицыРаздела, ТаблицаРаздела.Выгрузить());

	КонецЦикла;

	Для каждого ЭлементРаздела Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементРаздела.Ключ;
		ТабГруппы = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		ПараметрыФормы.Вставить("Таб" + ИдГруппы, ТабГруппы);

	КонецЦикла;

	СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, , Истина);

	ПараметрыФормы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);

	ПараметрыФормы.Вставить("СтруктураРеквизитовФормы", Форма.СтруктураРеквизитовФормы);

	ПараметрыФормы.Вставить("СтруктураДанныхТитульный", Форма.СтруктураДанныхТитульный);

	ПараметрыФормы.Вставить("мДеревоВыбранныхСтраниц", Форма.РеквизитФормыВЗначение("мДеревоВыбранныхСтраниц"));

	ПараметрыФормы.Вставить("НомерКорректировки", Форма.НомерКорректировки);
	ПараметрыФормы.Вставить("ДополнительныеДанные", Форма.ДополнительныеДанные);
	ПараметрыФормы.Вставить("ДатаПодписи", Форма.ДатаПодписи);

	Возврат ПараметрыФормы;

КонецФункции

Процедура ИзменитьЗаписьРегистраСведенийАЛКО(Форма, ИдГруппы, ИндексСтраницы,
		ИндексСтроки, ИмяПоля, НовоеЗначениеПоля, КоличествоСтрок)

	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
	РегистрСведенийГруппы = РегистрыСведений[ИмяРегистра];

	НаборЗаписей = РегистрСведенийГруппы.СоздатьНаборЗаписей();

	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);

	ИДДок = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра, ИДДок);

	НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);

	НаборЗаписей.Отбор.ИндексСтроки.Установить(ИндексСтроки);

	// Запись будет только одна.
	НаборЗаписей.Прочитать();

	НайденнаяЗапись = НаборЗаписей[0];

	// Нужно записать первоначальные данные Записи регистра в журнал.
	// Но сделать это надо только для случая первого изменения Записи после последнего сохранения отчета,
	// чтобы была информация о данных до изменения в случае отката внесенных изменений, если
	// отказался пользователь от сохранения отчета.
	ЭтоПервоеРедактирование = Ложь;
	ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, ИндексСтраницыРегистра, ИндексСтроки);

	Ресурсы = Новый Структура;

	Если ЭтоПервоеРедактирование Тогда

		НачальноеЗначение = ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(НайденнаяЗапись, ИмяРегистра);

		// Будет занесено действие "Редактирование" в Журнал помимо переданного действия.
		Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);

	КонецЕсли;

	НайденнаяЗапись[ИмяПоля] = НовоеЗначениеПоля;

	НаборЗаписей.Записать();

	// Пишем количество строк по странице,
	// будет занесено действие "Сервис" в Журнал помимо переданного действия.
	Ресурсы.Вставить("КоличествоСтрок", КоличествоСтрок);
	Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

	ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, ИндексСтраницыРегистра, ИндексСтроки, "Редактирование", Ресурсы);

КонецПроцедуры

Функция ПолучитьСтруктуруРесурсовАЛКО(СтруктураРеквизитовФормы,
		СтруктураМногострочныхРазделов)

	СтруктураРесурсов = Новый Структура;

	Для каждого Элемент Из СтруктураМногострочныхРазделов Цикл

		ИдГруппы = Элемент.Ключ;
		СтруктураРесурсовПоГруппе = ПолучитьСтруктуруРесурсовПоГруппеАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
		СтруктураРесурсов.Вставить(ИдГруппы, СтруктураРесурсовПоГруппе);

	КонецЦикла;

	Возврат СтруктураРесурсов;

КонецФункции

Функция ПолучитьКлючЗаписиРегистраСведенийАлко(Форма, ИмяРегистраСведений,
		ИдГруппы, ИндексСтраницы, НомерСтроки)

	РегистрСведенийАЛКО = РегистрыСведений[ИмяРегистраСведений];

	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Измерения");
	ОтборПоИзмерениям = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений, СписокСоставаРегистра);

	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	НаборЗаписей = РегистрСведенийАЛКО.СоздатьНаборЗаписей();

	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);
	
	ИДДок = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра, ИДДок);

	НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);
	НаборЗаписей.Отбор.ИндексСтроки.Установить(НомерСтроки);

	// Запись будет только одна, если вообще есть.
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда

	// Переданы неверные значения измерений.
		// Сформируем тем не менее ключ записи.
		НайденнаяЗапись = Новый Структура;
		НайденнаяЗапись.Вставить("Документ", ДокументСсылкаАлкоОтчет);

		Если ВышеБРО_1_1_11_0 Тогда
			НайденнаяЗапись.Вставить("Организация", ДокументСсылкаАлкоОтчет.Организация);
		КонецЕсли;

		НайденнаяЗапись.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		НайденнаяЗапись.Вставить("ИндексСтроки", НомерСтроки);

	Иначе
		НайденнаяЗапись = НаборЗаписей[0];
	КонецЕсли;

	// Гарантируем наличие и заполнение всех измерений для существующей записи,
	// и генерируем ключ записи, по которому можно спозиционировать таблицу на этой записи.	
	// Для несуществующей - возвращаем сгенерированный ключ, 
	// таблица не будет спозиционирована на нужной строке, но и ошибки не будет.
	ЗаполнитьЗначенияСвойств(ОтборПоИзмерениям, НайденнаяЗапись);

	КлючЗаписи = РегистрСведенийАЛКО.СоздатьКлючЗаписи(ОтборПоИзмерениям);

	Возврат КлючЗаписи;

КонецФункции

Функция СформироватьСтруктуруПоказателейИСтруктуруПараметровАЛКО(Форма)

	ПоказателиТитульный = Форма.СтруктураДанныхТитульный;

	НомерГода = Формат(Форма.СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг");

	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("НомерАлкоОтчета", Форма.НомерАлкоОтчета);
	ПараметрыВыгрузки.Вставить("НаимПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));

	КодКвартала = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКодКвартала(ПоказателиТитульный);
	ПараметрыВыгрузки.Вставить("ПризПериодОтч", КодКвартала);

	Вариант = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	ЭтоПервичнаяОтчетность = (Вариант = 0);

	ПараметрыВыгрузки.Вставить("ГодПериодОтч", НомерГода);

	ПараметрыВыгрузки.Вставить("Первичная", ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("Корректирующая", НЕ ЭтоПервичнаяОтчетность);
	ПараметрыВыгрузки.Вставить("НомерКорр", Вариант);

	НазваниеОрганизации = СокрЛП(ПоказателиТитульный.ОргНазв);
	НазваниеОрганизацииСокр = СокрЛП(ПоказателиТитульный.ОргНазвСокращ);
	ИНН = СокрЛП(ПоказателиТитульный.ИНН1);
	Если Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред(ИНН, 3); // Удаление нулей, добавленных в соответствии с порядком заполнения.
	КонецЕсли;
	КПП = СокрЛП(ПоказателиТитульный.КПП1);

	ТелефонОрганизации = СокрЛП(ПоказателиТитульный.ТелОрганизации);
	ЭлектроннаяПочтаОрганизации = СокрЛП(ПоказателиТитульный.ЭлектроннаяПочта);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НаимЮЛ", НазваниеОрганизации);
	ПараметрыВыгрузки.Вставить("НаимСокр", НазваниеОрганизацииСокр);
	
	Если Форма.ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", ИНН);
	Иначе
		ПараметрыВыгрузки.Вставить("ИННЮЛ", ИНН);
		ПараметрыВыгрузки.Вставить("КППЮЛ", КПП);
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ТелОрг", ТелефонОрганизации);
	ПараметрыВыгрузки.Вставить("EmailОтпр", ЭлектроннаяПочтаОрганизации);

	АдресОрганизации = Форма.ДополнительныеДанные.Титульный.АдресОрганизации;
	
	ПараметрыВыгрузки.Вставить("АдресОрганизации", Новый Структура);

	Если ТипЗнч(АдресОрганизации) = Тип("Структура") Тогда

		ПараметрыВыгрузки.АдресОрганизации = ОбщегоНазначения.СкопироватьРекурсивно(АдресОрганизации);

		Если АдресОрганизации.Свойство("УникальныйНомерФИАС")
				и (СтрДлина(АдресОрганизации.УникальныйНомерФИАС) = 36) Тогда

			ПараметрыВыгрузки.АдресОрганизации.Вставить("КодОбъект", АдресОрганизации.УникальныйНомерФИАС);

		КонецЕсли;

	Иначе
		ПараметрыВыгрузки.АдресОрганизации.Вставить("КодСтраны", "");
		ПараметрыВыгрузки.АдресОрганизации.Вставить("КодРегиона", "");
	КонецЕсли;
	
	КодыФИАС = КодыФИАС(ПараметрыВыгрузки.АдресОрганизации);
	Для каждого КлючЗначение Из КодыФИАС Цикл	
		ПараметрыВыгрузки.АдресОрганизации.Вставить(КлючЗначение.Ключ, Строка(КлючЗначение.Значение))	
	КонецЦикла; 

	Если Форма.ДополнительныеДанные.Титульный.Свойство("АдресМестаДеятельности") Тогда

		АдресМестаДеятельности = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;
		
		ПараметрыВыгрузки.Вставить("АдресМестаДеятельности", Новый Структура);

		// Адрес обязан быть российским.
		Если ТипЗнч(АдресМестаДеятельности) = Тип("Структура") Тогда

			ПараметрыВыгрузки.АдресМестаДеятельности = ОбщегоНазначения.СкопироватьРекурсивно(АдресМестаДеятельности);

			Если АдресМестаДеятельности.Свойство("УникальныйНомерФИАС")
					и (СтрДлина(АдресМестаДеятельности.УникальныйНомерФИАС) = 36) Тогда

				ПараметрыВыгрузки.АдресМестаДеятельности.Вставить("КодОбъект", АдресМестаДеятельности.УникальныйНомерФИАС);

			КонецЕсли;

		Иначе
			ПараметрыВыгрузки.АдресМестаДеятельности.Вставить("КодСтраны", "");
			ПараметрыВыгрузки.АдресМестаДеятельности.Вставить("КодРегиона", "");
		КонецЕсли;

		КодыФИАСМестаДеятельности = КодыФИАС(ПараметрыВыгрузки.АдресМестаДеятельности);
		Для каждого КлючЗначение Из КодыФИАСМестаДеятельности Цикл	
			ПараметрыВыгрузки.АдресМестаДеятельности.Вставить(КлючЗначение.Ключ, Строка(КлючЗначение.Значение))	
		КонецЦикла; 
	
	КонецЕсли;

	ФИОРуководителя = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргДиректор);
	ФИОГлавбуха = РегламентированнаяОтчетность.РазложитьФИО(ПоказателиТитульный.ОргБухгалтер);

	ПараметрыВыгрузки.Вставить("РуководительФамилия", ФИОРуководителя.Фамилия);
	ПараметрыВыгрузки.Вставить("РуководительИмя", ФИОРуководителя.Имя);
	ПараметрыВыгрузки.Вставить("РуководительОтчество", ФИОРуководителя.Отчество);

	ПараметрыВыгрузки.Вставить("ГлавбухФамилия", ФИОГлавбуха.Фамилия);
	ПараметрыВыгрузки.Вставить("ГлавбухИмя", ФИОГлавбуха.Имя);
	ПараметрыВыгрузки.Вставить("ГлавбухОтчество", ФИОГлавбуха.Отчество);

	Если Форма.ЭтоПБОЮЛ Тогда

		Если Форма.СтруктураДанныхТитульный.Свойство("ЭтоЛичноеХозяйство")
				и Форма.СтруктураДанныхТитульный.ЭтоЛичноеХозяйство Тогда

			ПараметрыВыгрузки.Вставить("ГражданинФамилия", ФИОРуководителя.Фамилия);
			ПараметрыВыгрузки.Вставить("ГражданинИмя", ФИОРуководителя.Имя);
			ПараметрыВыгрузки.Вставить("ГражданинОтчество", ФИОРуководителя.Отчество);

		КонецЕсли;

	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	Форма.ФайлВыгрузкиИмя = СформироватьИдФайлАЛКО(ПараметрыВыгрузки);
	ПараметрыВыгрузки.Вставить("ИдФайл", Форма.ФайлВыгрузкиИмя);

	Возврат ПараметрыВыгрузки;

КонецФункции

Функция СформироватьИдФайлАЛКО(ПараметрыВыгрузки)

	Если ПараметрыВыгрузки.НомерАлкоОтчета = 11 Тогда
		ПрефиксИмениФайлаВыгрузки = "R1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 12 Тогда
		ПрефиксИмениФайлаВыгрузки = "R2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 13 Тогда
		ПрефиксИмениФайлаВыгрузки = "V1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 14 Тогда
		ПрефиксИмениФайлаВыгрузки = "V2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 15 Тогда
		ПрефиксИмениФайлаВыгрузки = "V3";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 16 Тогда
		ПрефиксИмениФайлаВыгрузки = "F1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 17 Тогда
		ПрефиксИмениФайлаВыгрузки = "F2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 18 Тогда
		ПрефиксИмениФайлаВыгрузки = "F3";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 1 Тогда
		ПрефиксИмениФайлаВыгрузки = "D1";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 2 Тогда
		ПрефиксИмениФайлаВыгрузки = "D2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 3 Тогда
		ПрефиксИмениФайлаВыгрузки = "D3";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 4 Тогда
		ПрефиксИмениФайлаВыгрузки = "D4";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 5 Тогда
		ПрефиксИмениФайлаВыгрузки = "D5";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 6 Тогда
		ПрефиксИмениФайлаВыгрузки = "D6";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 7 Тогда
		ПрефиксИмениФайлаВыгрузки = "D7";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 9 Тогда
		ПрефиксИмениФайлаВыгрузки = "N2";
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета = 10 Тогда
		ПрефиксИмениФайлаВыгрузки = "N3";
		
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета >= 19 И ПараметрыВыгрузки.НомерАлкоОтчета <= 29 Тогда
		// АлкоДекларации с 2021 года.
		НомерПриложения2021 = ПараметрыВыгрузки.НомерАлкоОтчета - 18;
		ПрефиксИмениФайлаВыгрузки = Формат(НомерПриложения2021, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 01, 02,.. 10, 11.
		
	ИначеЕсли ПараметрыВыгрузки.НомерАлкоОтчета >= 30 И ПараметрыВыгрузки.НомерАлкоОтчета <= 31 Тогда
		// Фармацевтические с 2021 года.
		НомерПриложения2021 = ПараметрыВыгрузки.НомерАлкоОтчета - 26; // 4,5, .. 8.
		ПрефиксИмениФайлаВыгрузки = "F" + НомерПриложения2021; //F4, F5.
		
	КонецЕсли;

	ИдентификаторОтправителя = ?(ПараметрыВыгрузки.Свойство("ИННФЛ"), ПараметрыВыгрузки.ИННФЛ, ПараметрыВыгрузки.ИННЮЛ);

	МассивВиноградных = МассивНомеровВиноградныхДеклараций();
	
	Если МассивВиноградных.Найти(ПараметрыВыгрузки.НомерАлкоОтчета) <> Неопределено Тогда
		// Z - информация о периоде декларации состоит из 2-разрядного номера квартала 
		// (для 1 квартала - 03, для 2 квартала - 06, для 3 квартала - 09, для 4 квартала – 00) 
		// и последней цифры года, за который передается информация.
		// Для виноградных годовых деклараций квартал всегда 4й.
		ПериодДекларации = "00" + Прав(ПараметрыВыгрузки.ГодПериодОтч, 1);
		
	Иначе
	
		// Z - информация о периоде декларации состоит из 2-разрядного номера квартала 
		// (для 1 квартала - 03, для 2 квартала - 06, для 3 квартала - 09, для 4 квартала – 00) 
		// и последней цифры года, за который передается информация.
		ПериодДекларации = "0" + ПараметрыВыгрузки.ПризПериодОтч
			+ Прав(ПараметрыВыгрузки.ГодПериодОтч, 1);
	КонецЕсли;

	ДеньФормированияДекларации = Формат(ТекущаяДатаСеанса(), "ДФ=ддММгггг");
	УникальныйИдентификаторФайла = Врег(Строка(Новый УникальныйИдентификатор));

	Возврат ПрефиксИмениФайлаВыгрузки + "_" + ИдентификаторОтправителя + "_"
		+ ПериодДекларации + "_" + ДеньФормированияДекларации + "_"
		+ УникальныйИдентификаторФайла;

КонецФункции

Функция МассивНомеровВиноградныхДеклараций()

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.МассивНомеровВиноградныхДеклараций();

КонецФункции
 
Процедура ПослеДобавленияДопСтрМногострочногоРазделаАЛКО(Форма,
		ИмяТекущейСтраницыПанели)

	ТекущийИдентификатор = Форма.Элементы.РазделыОтчета.ТекущаяСтрока;
	ТекущийЭлементРазделыОтчета = Форма.РазделыОтчета.НайтиПоИдентификатору(ТекущийИдентификатор);

	Родитель = ТекущийЭлементРазделыОтчета.ПолучитьРодителя();

	Если НЕ Родитель = Неопределено Тогда
		ТекущийЭлементРазделыОтчета = Родитель;
	КонецЕсли;

	НомерДобавляемойСтраницы = ТекущийЭлементРазделыОтчета.ПолучитьЭлементы().Количество()
		+ 1;

	ДобавляемаяСтраница = ТекущийЭлементРазделыОтчета.ПолучитьЭлементы().Добавить();
	ДобавляемаяСтраница.КолонкаРазделыОтчета = "Стр. "
		+ НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.КолонкаРазделыОтчетаСокрНаим = ТекущийЭлементРазделыОтчета.КолонкаРазделыОтчетаСокрНаим;
	ДобавляемаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерДобавляемойСтраницы;
	ДобавляемаяСтраница.ИндексКартинки = 1;
	ДобавляемаяСтраница.РазделМногостраничный = ТекущийЭлементРазделыОтчета.РазделМногостраничный;
	ДобавляемаяСтраница.РазделМногострочный = ТекущийЭлементРазделыОтчета.РазделМногострочный;

	Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ДобавляемаяСтраница.ПолучитьИдентификатор();

КонецПроцедуры

Функция ПолучитьСервисРегистровКакТаблицуЗначений(Форма, ИдГруппы,
		Удаленные = Ложь)

	Результат = ДанныеФормыВЗначение(Форма["СервисРегистров" + ИдГруппы
		+ ?(Удаленные, "Удаленные", "")], Тип("ТаблицаЗначений"));
	Возврат Результат;

КонецФункции

Функция ПолучитьСтруктуруРесурсовПоГруппеАЛКО(ИдГруппы,
		СтруктураРеквизитовФормы)

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	СтруктураРесурсовПоГруппе = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений);

	Возврат СтруктураРесурсовПоГруппе;

КонецФункции

Функция ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапроса,
		ПолноеИлиКраткоеНаименование = Неопределено,
		ИмяКолонкиКонтрагент = "Контрагент", СтрогийПоиск = Ложь)

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьНаименованиеПолное = ОбщегоНазначения.ЕстьРеквизитОбъекта("НаименованиеПолное", МетаданныеКонтрагенты);

	РеквизитНаименованиеПолное = ?(ЕстьНаименованиеПолное, "НаименованиеПолное", "Наименование");

	Если (НЕ СтрогийПоиск) И (ТаблицаРезультатаЗапроса.Количество() > 0) Тогда
	// Фиксируем первого, если не найдем по наименованию.
		Контрагент = ТаблицаРезультатаЗапроса[0][ИмяКолонкиКонтрагент];
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПолноеИлиКраткоеНаименование) Тогда

		ПреобразованнаяСтрокаНаименование = ПолучитьДопустимуюСтроку(ПолноеИлиКраткоеНаименование);

		Для каждого СтрокаТЗ Из ТаблицаРезультатаЗапроса Цикл

			ТекущийКонтрагент = СтрокаТЗ[ИмяКолонкиКонтрагент];

			ПреобразованнаяТекущаяСтрокаНаименование = ПолучитьДопустимуюСтроку(ТекущийКонтрагент[РеквизитНаименованиеПолное]);

			Если ПреобразованнаяТекущаяСтрокаНаименование = ПреобразованнаяСтрокаНаименование Тогда

				Контрагент = ТекущийКонтрагент;
				Прервать;

			КонецЕсли;

			ПреобразованнаяТекущаяСтрокаНаименование = ПолучитьДопустимуюСтроку(ТекущийКонтрагент.Наименование);

			Если ПреобразованнаяТекущаяСтрокаНаименование = ПреобразованнаяСтрокаНаименование Тогда

				Контрагент = ТекущийКонтрагент;
				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Контрагент;

КонецФункции

Функция ОпределитьКонтрагентаИзЗапросаАЛКО(ТаблицаРезультатаЗапроса, ИНН, КПП,
		ПолноеИлиКраткоеНаименование = Неопределено,
		ИмяКолонкиКонтрагент = "Контрагент", ЕстьСтранаРегистрации = Неопределено)

	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	
	РеквизитНаименованиеПолное = "Наименование";

	Если ЕстьСтранаРегистрации = Неопределено Тогда

		ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);

	КонецЕсли;

	СтранаРоссия = ?(ЕстьСтранаРегистрации, ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Неопределено);

	Контрагент = Неопределено;

	КПП = СокрЛП(КПП);
	НачальныйКПП = КПП;

	ИНН = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	Если ДлинаИНН <> 10 Тогда
		КПП = "";
	КонецЕсли;

	Если НЕ (ЗначениеЗаполнено(КПП) И (СтрДлина(КПП) = 9)) Тогда
		КПП = "";
	КонецЕсли;

	Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда

		Если ЗначениеЗаполнено(КПП) Тогда

		// Отбор по КПП.
			ТаблицаРезультатаЗапросаКПП = ТаблицаРезультатаЗапроса.СкопироватьКолонки();
			ТаблицаРезультатаЗапросаКППСтрогая = ТаблицаРезультатаЗапроса.СкопироватьКолонки();

			Для каждого СтрокаТЗ Из ТаблицаРезультатаЗапроса Цикл
			// Ищем контрагентов с КПП и не иностранцев.
				Если СокрЛП(СтрокаТЗ[ИмяКолонкиКонтрагент].КПП) = КПП Тогда

					Если (НЕ ЕстьСтранаРегистрации) ИЛИ (ЕстьСтранаРегистрации
							И СтрокаТЗ[ИмяКолонкиКонтрагент].СтранаРегистрации = СтранаРоссия) Тогда

						СтрокаТЗКПП = ТаблицаРезультатаЗапросаКППСтрогая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗКПП, СтрокаТЗ);
					Иначе
						СтрокаТЗКПП = ТаблицаРезультатаЗапросаКПП.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗКПП, СтрокаТЗ);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			Если ТаблицаРезультатаЗапросаКППСтрогая.Количество() > 0 Тогда

				Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапросаКППСтрогая, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Истина);
			Иначе

				Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапросаКПП, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Истина);
			КонецЕсли;

		КонецЕсли;

		Если (Контрагент = Неопределено) И ЗначениеЗаполнено(НачальныйКПП) Тогда

		// Отбор по КПП.
			ТаблицаРезультатаЗапросаКПП = ТаблицаРезультатаЗапроса.СкопироватьКолонки();
			ТаблицаРезультатаЗапросаКППСтрогая = ТаблицаРезультатаЗапроса.СкопироватьКолонки();

			Для каждого СтрокаТЗ Из ТаблицаРезультатаЗапроса Цикл
			// Ищем контрагентов с КПП и не иностранцев.
				Если СокрЛП(СтрокаТЗ[ИмяКолонкиКонтрагент].КПП) = НачальныйКПП Тогда

					Если (НЕ ЕстьСтранаРегистрации) ИЛИ (ЕстьСтранаРегистрации
							И СтрокаТЗ[ИмяКолонкиКонтрагент].СтранаРегистрации = СтранаРоссия) Тогда

						СтрокаТЗКПП = ТаблицаРезультатаЗапросаКППСтрогая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗКПП, СтрокаТЗ);
					Иначе
						СтрокаТЗКПП = ТаблицаРезультатаЗапросаКПП.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗКПП, СтрокаТЗ);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			Если ТаблицаРезультатаЗапросаКППСтрогая.Количество() > 0 Тогда

				Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапросаКППСтрогая, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Истина);
			Иначе

				Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапросаКПП, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Истина);
			КонецЕсли;

		КонецЕсли;

		Если (Контрагент = Неопределено) И (НЕ ЗначениеЗаполнено(КПП)) Тогда

		// Пробуем искать без КПП.
			ТаблицаРезультатаЗапросаБезКПП = ТаблицаРезультатаЗапроса.СкопироватьКолонки();

			Для каждого СтрокаТЗ Из ТаблицаРезультатаЗапроса Цикл
			// Ищем контрагентов без КПП или иностранцев.
				Если (НЕ ЗначениеЗаполнено(СтрокаТЗ[ИмяКолонкиКонтрагент].КПП))
						ИЛИ (ЕстьСтранаРегистрации
						И (НЕ СтрокаТЗ[ИмяКолонкиКонтрагент].СтранаРегистрации = СтранаРоссия)) Тогда

					СтрокаТЗБезКПП = ТаблицаРезультатаЗапросаБезКПП.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗБезКПП, СтрокаТЗ);

				КонецЕсли;

			КонецЦикла;

			Если ТаблицаРезультатаЗапросаБезКПП.Количество() > 0 Тогда

				Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапросаБезКПП, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Истина);

			КонецЕсли;

		КонецЕсли;

		Если Контрагент = Неопределено Тогда
		// Ищем по наименованию в исходной таблице результата запроса.
			Контрагент = ОпределитьКонтрагентаИзЗапросаПоНаименованию(ТаблицаРезультатаЗапроса, ПолноеИлиКраткоеНаименование, ИмяКолонкиКонтрагент, Ложь);

		КонецЕсли;

		Если Контрагент = Неопределено Тогда
		// Выдаем хоть что-то.
			Контрагент = ТаблицаРезультатаЗапроса[0][ИмяКолонкиКонтрагент];
		КонецЕсли;

	КонецЕсли;

	// Обрабатываем поведение по КПП и наименованию.
	Если НЕ Контрагент = Неопределено Тогда

		ЭтоРоссийскоеЮрЛицо = (ЕстьСтранаРегистрации
			И (СтрокаТЗ[ИмяКолонкиКонтрагент].СтранаРегистрации = СтранаРоссия)
			И (ДлинаИНН = 10)) ИЛИ ((ДлинаИНН = 10) И (НЕ ЕстьСтранаРегистрации));

		КПП_Контрагента = ?(ЭтоРоссийскоеЮрЛицо, Контрагент.КПП, "");

		Если ЭтоРоссийскоеЮрЛицо И (СтрДлина(КПП_Контрагента) = 9)
				И (СтрДлина(НачальныйКПП) = 0) Тогда
				// Заполняем незаполненный КПП.
			КПП = КПП_Контрагента;
		ИначеЕсли ЭтоРоссийскоеЮрЛицо Тогда
			КПП = НачальныйКПП;
		Иначе
			КПП = "";
		КонецЕсли;

		Если КПП <> КПП_Контрагента Тогда

		// В базе есть контрагент с нужным ИНН, но КПП не тот.
			// Показываем что не нашли ничего.
			Контрагент = Неопределено;

		КонецЕсли;

		Если (НЕ Контрагент = Неопределено)
				И (НЕ ЗначениеЗаполнено(ПолноеИлиКраткоеНаименование)) Тогда

			ПолноеИлиКраткоеНаименование = Контрагент[РеквизитНаименованиеПолное];
		КонецЕсли;

	КонецЕсли;

	Возврат Контрагент;

КонецФункции

Функция НомерАлкоПриложения(Форма = Неопределено,
		ИмяФормыОбъекта = Неопределено)

	Если (Форма = Неопределено) И (НЕ ЗначениеЗаполнено(ИмяФормыОбъекта)) Тогда

		ВызватьИсключение "В функцию НомерАлкоПриложения() не переданы параметры!";

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИмяФормыОбъекта) Тогда
		Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(Форма) Тогда
			ИмяФормыОбъекта = Форма.ИмяФормы;
		Иначе
			ВызватьИсключение "В функцию НомерАлкоПриложения() 
				|в параметре Форма передана не управляемая форма!";
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(ВРег(ИмяФормыОбъекта), ВРег("РегламентированныйОтчетАлко")) = 0 Тогда

		ВызватьИсключение "В функцию НомерАлкоПриложения() 
			|в параметре ИмяФормыОбъекта передано не имя формы алкоотчета!";

	КонецЕсли;

	// Т.е например РегламентированныйОтчетАлкоПриложение7.
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормыОбъекта);

	СтрокаНомераПриложения = СтрЗаменить(ВРег(ИмяОбъектаМетаданных), ВРег("РегламентированныйОтчетАлкоПриложение"), "");

	// Убираем ведущие нули, если они есть.
	Пока Лев(СтрокаНомераПриложения, 1) = "0" Цикл
		СтрокаНомераПриложения = Сред(СтрокаНомераПриложения, 2);
	КонецЦикла;

	// Проверяем на всякий случай, что у нас только цифры.
	Если НЕ ВСтрокеВсеЦифры(СтрокаНомераПриложения) Тогда

	// Это Заявление о корректировке.
		Возврат 0;

	Иначе
		Возврат Число(СтрокаНомераПриложения);
	КонецЕсли;

КонецФункции

Функция ЕстьАдресаВСтрокахТаблицОтчетаАЛКО(НомерАлкоОтчета)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЕстьАдресаВСтрокахТаблицОтчетаАЛКО(НомерАлкоОтчета);

КонецФункции
 
Функция УказанаЛицензия(ДанныеЛиста,
		ИмяПоляКодВидаДеятельности = "П000000000105") Экспорт

	ИндексПоляКодВидаДеятельности = Число(Прав(ИмяПоляКодВидаДеятельности, 2));
	ИдГруппыЛицензии = Лев(ИмяПоляКодВидаДеятельности, 11);

	ЕстьСведения = Ложь;

	Для Индекс = 1 По 5 Цикл

		ИндексПоля = ИндексПоляКодВидаДеятельности - Индекс + 1;
		СтрокаИндексПоля = Формат(ИндексПоля, "ЧЦ=2; ЧВН=; ЧН=; ЧГ=0");

		ЗаполненоПоле = ЗначениеЗаполнено(РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(ИдГруппыЛицензии
			+ СтрокаИндексПоля, ДанныеЛиста));

		ЕстьСведения = ЕстьСведения ИЛИ ЗаполненоПоле;

		Если ЕстьСведения Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьСведения;

КонецФункции

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)

	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СтрокаТаблицыКонтактнойИнформацииОбъекта(знач Ссылка, 
		СписокИменВидовКонтактнойИнформации = Неопределено,
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина,
		знач ДатаАдреса = Неопределено, ВидКонтактнойИнформации = Неопределено)

	// Если дата не передана - получаем самую свежую по времени информацию.
	Если ДатаАдреса = Неопределено Тогда
		ДатаАдреса = ТекущаяДатаСеанса();
	КонецЕсли;

	Если ТипЗнч(ДатаАдреса) = Тип("Строка") Тогда

		Попытка
			ДатаАдреса = Дата(ДатаАдреса);
		Исключение
			ДатаАдреса = ТекущаяДатаСеанса();
		КонецПопытки;

	КонецЕсли;

	Если НЕ ТипЗнч(ДатаАдреса) = Тип("Дата") Тогда
		ДатаАдреса = ТекущаяДатаСеанса();
	КонецЕсли;

	СтруктураДоступныхВидовКонтактнойИнформации = СтруктураПредопределенныхВидовКонтактнойИнформацииАдреса();
	СписокДоступныхАдресныхВидов = СтруктураДоступныхВидовКонтактнойИнформации.Адрес;

	СписокРабочихВидовКонтактнойИнформации = Новый СписокЗначений;

	Если ТипЗнч(СписокИменВидовКонтактнойИнформации) = Тип("СписокЗначений") Тогда

		Для каждого ЭлементСпискаВидов Из СписокИменВидовКонтактнойИнформации Цикл

			ТекущееИмяВидаКонтактнойИнформации = ЭлементСпискаВидов.Значение;

			Если ТипЗнч(ТекущееИмяВидаКонтактнойИнформации) = Тип("Строка")
					И ЗначениеЗаполнено(ТекущееИмяВидаКонтактнойИнформации) Тогда

				Если СписокДоступныхАдресныхВидов.НайтиПоЗначению(ТекущееИмяВидаКонтактнойИнформации) = Неопределено Тогда
					Продолжить;
				Иначе
					СписокРабочихВидовКонтактнойИнформации.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."
						+ ТекущееИмяВидаКонтактнойИнформации));
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если СписокРабочихВидовКонтактнойИнформации.Количество() = 0 Тогда
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина;
	КонецЕсли;

	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);

	ВерсияБСПЧислом = ПолучитьВерсиюБСПЧислом();
	ЧислоВерсияБСП2_4_1 = ПолучитьВерсиюЧислом("2.4.1");

	ЕстьДата = (ВерсияБСПЧислом >= ЧислоВерсияБСП2_4_1);

	Если ЕстьДата Тогда

		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
						МассивОбъектов, Перечисления.ТипыКонтактнойИнформации.Адрес, , ДатаАдреса);

		//    Таблица значений - результат. Колонки:
		//        * Объект        - Ссылка - владелец КИ.
		//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
		//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
		//        * ЗначенияПолей - Строка - данные значений полей.
		//        * Представление - Строка - представление КИ.

		// Начиная с БСП 2.4.1 
		//		  * Дата		  - Дата - дата, с которой действует запись.
	Иначе

		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
						МассивОбъектов, Перечисления.ТипыКонтактнойИнформации.Адрес);

		//    Таблица значений - результат. Колонки:
		//        * Объект        - Ссылка - владелец КИ.
		//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
		//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
		//        * ЗначенияПолей - Строка - данные значений полей.
		//        * Представление - Строка - представление КИ.
	КонецЕсли;

	ТаблицаКонтактнойИнформации.Сортировать("Вид Убыв, Тип Убыв");

	СтрокаТаблицаКонтактнойИнформации = Неопределено;
	ВидКонтактнойИнформации = Неопределено;

	Для каждого ЭлементСпискаВидов Из СписокРабочихВидовКонтактнойИнформации Цикл

		ТекущееИмяВидаКонтактнойИнформации = ЭлементСпискаВидов.Значение;
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ТекущееИмяВидаКонтактнойИнформации, "Вид, Тип");

		Если (НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено)
				И ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей) Тогда

			ВидКонтактнойИнформации = ТекущееИмяВидаКонтактнойИнформации;
			Прервать;

		КонецЕсли;
	КонецЦикла;

	Если (СтрокаТаблицаКонтактнойИнформации = Неопределено)
			И ВыдаватьЛюбойЕслиНетНужногоВида Тогда

		Если ТаблицаКонтактнойИнформации.Количество() > 0 Тогда

			ИндексСтроки = -1;
			ИндексНайденнойСтроки = -1;
			ВидКонтактнойИнформацииНайденнойСтроки = Неопределено;
			
			Для Каждого СтрокаТаблицы Из ТаблицаКонтактнойИнформации Цикл

				ИндексСтроки = ИндексСтроки + 1;
				
				СтрокаТаблицаКонтактнойИнформации = СтрокаТаблицы;
				ВидКонтактнойИнформации = СтрокаТаблицаКонтактнойИнформации.Вид;

				Если ВидКонтактнойИнформации.Предопределенный Тогда

					НаименованиеВидаКонтактнойИнформации = ВРег(ВидКонтактнойИнформации.ИмяПредопределенныхДанных);

					Если (СтрНайти(НаименованиеВидаКонтактнойИнформации, "АДРЕС") > 0)
							И ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.Представление) Тогда

						Прервать;

					Иначе
						СтрокаТаблицаКонтактнойИнформации = Неопределено;
						ВидКонтактнойИнформации = Неопределено;
					КонецЕсли;

				Иначе
										
					НаименованиеВидаКонтактнойИнформации = ВРег(ВидКонтактнойИнформации.Наименование);
					
					Если (СтрНайти(НаименованиеВидаКонтактнойИнформации, "АДРЕС") > 0)
							И ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.Представление) Тогда

						ИндексНайденнойСтроки = ИндексСтроки;
						ВидКонтактнойИнформацииНайденнойСтроки = ВидКонтактнойИнформации;
					КонецЕсли;
					
					СтрокаТаблицаКонтактнойИнформации = Неопределено;
					ВидКонтактнойИнформации = Неопределено;
						
				КонецЕсли;

			КонецЦикла;
						
			// Ищем не только среди предопределенных.
			Если СтрокаТаблицаКонтактнойИнформации = Неопределено И (НЕ ИндексНайденнойСтроки = -1) Тогда
				
				СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[ИндексНайденнойСтроки];
				ВидКонтактнойИнформации = ВидКонтактнойИнформацииНайденнойСтроки;
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
	Возврат СтрокаТаблицаКонтактнойИнформации;

КонецФункции

// Получить значение определенного вида контактной информации у объекта в формате XML.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//	   ПредставлениеАдреса		- Необязательный. Строка. В этом параметре передается представление адреса,
//								рассчитанное по представлению в XML.
//     ИмяВидКонтактнойИнформацииОсновной - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного - Необязательный.	
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного2 - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//	   ВыдаватьЛюбойЕслиНетНужногоВида - Булево.
//
// Возвращаемое значение:
//		Строка - строка XML значения полей адреса.
//		Неопределено - если не найдено.
//
Функция ПолучитьАдресXMLОбъекта(знач Ссылка, ПредставлениеАдреса = Неопределено,
		СписокИменВидовКонтактнойИнформации = Неопределено,
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина,
		знач ДатаАдреса = Неопределено)
		
	ПредставлениеАдреса = Неопределено;
	ВидКонтактнойИнформации = Неопределено;
	
	СтрокаТаблицаКонтактнойИнформации = СтрокаТаблицыКонтактнойИнформацииОбъекта(Ссылка, СписокИменВидовКонтактнойИнформации, 
											ВыдаватьЛюбойЕслиНетНужногоВида, ДатаАдреса, ВидКонтактнойИнформации);

	Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
	// В поле ЗначенияПолей содержится представление XML,
		// но ранее хранилась строка внутреннего представления структуры.
		СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
	Иначе
		СтрокаXML = Неопределено;
	КонецЕсли;

	Если НЕ СтрокаXML = Неопределено Тогда

		Если НЕ УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаXML) Тогда
		// Это старый формат.
			СтрокаXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаXML, , ВидКонтактнойИнформации);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтрокаXML = Неопределено Тогда
		
		Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.XMLилиJSONНеПуст(СтрокаXML) Тогда
			СтрокаXML = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ СтрокаXML = Неопределено Тогда
	
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаXML);

		Если ПустаяСтрока(ПредставлениеАдреса) Тогда
			СтрокаXML = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтрокаXML;

КонецФункции
 
// Получить значение определенного вида контактной информации у объекта в формате JSON.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//	   ПредставлениеАдреса		- Необязательный. Строка. В этом параметре передается представление адреса,
//								рассчитанное по представлению в XML.
//     ИмяВидКонтактнойИнформацииОсновной - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного - Необязательный.	
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//     ИмяВидКонтактнойИнформацииЕслиНетОсновного2 - Необязательный.
//								- Строка - ИмяПредопределенныхДанных Справочника ВидыКонтактнойИнформации.
//								- СправочникСсылка.ВидыКонтактнойИнформации.
//								- ПеречислениеСсылка.ТипыКонтактнойИнформации.
//	   ВыдаватьЛюбойЕслиНетНужногоВида - Булево.
//
// Возвращаемое значение:
//		Строка - строка JSON значения адреса.
//		Неопределено - если не найдено.
//
Функция ПолучитьАдресJSONОбъекта(знач Ссылка, ПредставлениеАдреса = Неопределено,
		СписокИменВидовКонтактнойИнформации = Неопределено,
		ВыдаватьЛюбойЕслиНетНужногоВида = Истина,
		знач ДатаАдреса = Неопределено)

	ПредставлениеАдреса = Неопределено;
	ВидКонтактнойИнформации = Неопределено;
	
	СтрокаТаблицаКонтактнойИнформации = СтрокаТаблицыКонтактнойИнформацииОбъекта(Ссылка, СписокИменВидовКонтактнойИнформации, 
											ВыдаватьЛюбойЕслиНетНужногоВида, ДатаАдреса, ВидКонтактнойИнформации);
		
	Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
	// В поле Значение содержится представление JSON.
		СтрокаJSON = СтрокаТаблицаКонтактнойИнформации.Значение;
	Иначе
		СтрокаJSON = Неопределено;
	КонецЕсли;

	Если НЕ СтрокаJSON = Неопределено Тогда

		Если НЕ УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(СтрокаJSON) Тогда		
			СтрокаJSON = Неопределено;		 
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ СтрокаJSON = Неопределено Тогда
		Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.XMLилиJSONНеПуст(СтрокаJSON) Тогда
			СтрокаJSON = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаJSON = Неопределено Тогда
	
		// Пробуем преобразовать другой формат.
		Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
		// В поле ЗначенияПолей содержится представление XML,
			// но ранее хранилась строка внутреннего представления структуры.
			СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
		Иначе
			СтрокаXML = Неопределено;
		КонецЕсли;

		Если НЕ СтрокаXML = Неопределено Тогда
			
			СтрокаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
													СтрокаXML, ВидКонтактнойИнформации);
													
			Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.XMLилиJSONНеПуст(СтрокаJSON) Тогда
				СтрокаJSON = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ СтрокаJSON = Неопределено Тогда
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаJSON);
		Если ПустаяСтрока(ПредставлениеАдреса) Тогда
			СтрокаJSON = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаJSON;

КонецФункции

Функция ПривестиДокументКСсылке(Документ)

	ТипЗначенияДокумент = ТипЗнч(Документ);
	
	Если ТипЗначенияДокумент = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Документ;
	ИначеЕсли ТипЗначенияДокумент = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		Возврат Документ.Ссылка;
	ИначеЕсли ТипЗначенияДокумент = Тип("ДокументВыборка.РегламентированныйОтчет") Тогда
		Возврат Документ.Ссылка;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция НеобходимостьПроверкиАдреса(АдресСтруктура)

	ДатаПроверки = Неопределено;
	АдресСтруктура.Свойство("ДатаПроверки", ДатаПроверки);
	
	ПроверенАдрес = Ложь;
	
	Если ЗначениеЗаполнено(ДатаПроверки) Тогда
		
		// Если Дата не нулевая, значит адрес уже проверялся.
		ПроверенАдрес = АдресСтруктура["ПроверенАдрес"];
		
		РезультатПроверкиАдреса = АдресСтруктура["РезультатПроверкиАдреса"];
		
		ПериодПроверкиПроблемныхАдресов = 30; // 30 дней.
		ПериодПроверкиУспешныхАдресов = 120; // 120 дней, на случай изменения в классификаторе.
		МиллисекундВСутках = 86400000; // 24*60*60*1000. 
		Если ПроверенАдрес И РезультатПроверкиАдреса = "Успех" Тогда
		
			Если ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаПроверки > 
						ПериодПроверкиУспешныхАдресов * МиллисекундВСутках  Тогда
			
				ПроверенАдрес = Ложь;
			
			КонецЕсли;	
			
		ИначеЕсли ПроверенАдрес Тогда
			Если ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаПроверки > 
						ПериодПроверкиПроблемныхАдресов * МиллисекундВСутках  Тогда
			
				ПроверенАдрес = Ложь;
			
			КонецЕсли;
		КонецЕсли; 
			
	КонецЕсли;
	
	Возврат ПроверенАдрес;

КонецФункции

Процедура УдалитьНастройкиОкнаФормыИзСтандартногоХранилищаНастроек(Хранилище, Форма)

	Отбор = Новый Структура;
	ИмяПользователя = ИмяПользователя();
	Отбор.Вставить("Пользователь", ИмяПользователя);
		
	Выборка = Хранилище.Выбрать(Отбор);

	Пока Выборка.Следующий() Цикл
		
		КлючОбъекта = Выборка.КлючОбъекта;
		
		Если СтрНайти(КлючОбъекта, Форма.ИмяФормы) > 0 Тогда
		
			Хранилище.Удалить(КлючОбъекта, Неопределено, ИмяПользователя);
			Прервать;
		
		КонецЕсли; 
				
	КонецЦикла;

КонецПроцедуры

Функция СтрокаВременногоОтчета()

	СтрВремОтчета = НСтр("ru = '(Временный отчет, используемый для технических целей.)'");
	
	Возврат СтрВремОтчета
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеЗагрузкаОтчетаИзXMLВыгрузки

Функция ЗагрузкаДанныхОПизВыгрузки(ПараметрыЗагрузки, УзелДокумент, 
									ИмяУзлаДанныхПоОП, ИмяУзлаДанных)
	
	// Узлы раздела "Декларация".
	УзлыДанныхПоОП = УзлыПоXPath(УзелДокумент, ИмяУзлаДанныхПоОП);
	
	Для НомСтраницы = 1 По УзлыДанныхПоОП.Количество() Цикл
		СтраницаРаздела = УзлыДанныхПоОП[НомСтраницы - 1];
		
		НаличиеОборота = Истина;
		УзлыДанных = Новый Массив;
		УзелНаименование = Неопределено;
		
		СтруктураОП = ПолучитьПустуюСтруктуруСведенийОбОП();
		СтруктураАдреса = Неопределено;
		
		Для Каждого ПодчиненныйУзел Из СтраницаРаздела.Строки Цикл
			
			КодУзла = ВРег(ПодчиненныйУзел.Код);
			
			Если КодУзла = "НАИМ" ИЛИ КодУзла = "НАИМЮЛ" Тогда
			
				СтруктураОП.Вставить("Наименование", ПодчиненныйУзел.Значение);
				УзелНаименование = ПодчиненныйУзел
				
			ИначеЕсли КодУзла = "КППЮЛ" Тогда
				СтруктураОП.Вставить("КПП", ПодчиненныйУзел.Значение)			
			ИначеЕсли КодУзла = "АДРОРГ" Тогда
			
				УзелАдреса = ПодчиненныйУзел;
				АдресИзВыгрузки(УзелАдреса, СтруктураАдреса);
				ЗаполнитьЗначенияСвойств(СтруктураОП, СтруктураАдреса)
				
			ИначеЕсли КодУзла = ВРег(ИмяУзлаДанных) Тогда
				УзлыДанных.Добавить(ПодчиненныйУзел)
			КонецЕсли;
			
		КонецЦикла;
		
		Если УзелНаименование <> Неопределено Тогда
			// Просто присвоить структуру нельзя - в дальнейшей обработке значение приводится к строке.
			УзелНаименование.Значение = ЗначениеВСтрокуВнутр(СтруктураОП);
		КонецЕсли;
		
		РегламентированнаяОтчетностьЗагрузка.ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(
			СтраницаРаздела, ПараметрыЗагрузки.ДанныеОтчета, ПараметрыЗагрузки.ПараметрыОтчета, , НомСтраницы);
		// После завершения цикла массив "УзлыДанныхПоОП" содержит массивы узлов данных.
		УзлыДанныхПоОП[НомСтраницы - 1] = УзлыДанных; 
	КонецЦикла;
	
	Возврат УзлыДанныхПоОП

КонецФункции

Процедура ЗаполнитьДанныеПоУзлуДанныхПоОП(ПараметрыПроцедуры,
										  РазделСведения, РазделПоОтчету, 
										  ВсегоСтрокСохранено,
										  МаксИндексСтраницы, КэшУзловСправочников)
										  
	Перем ИмяРегРаздел, ТабРегРаздел;
	Перем КоличествоРазделовПоРегистрам, КоличествоРазделовПоОтчету;
	Перем ИмяФормыОтчета;
	Перем ИндексСтраницы;
	
	Перем ДокументОтчета;
	Перем УзелДанныхПоОП, УзелСправочники;
	Перем СхемаЗагрузкиСправочников, СоответствиеУзловОчистки, УзелЗагрузкиДанных;
	Перем КоллекцияСписковВыбора;
	Перем ДанныеРаздела, ДопДанныеРаздела;
	

	ПараметрыПроцедуры.Свойство("ДокументОтчета", 			ДокументОтчета);
	ПараметрыПроцедуры.Свойство("УзелДанных", 				УзелДанныхПоОП);
	ПараметрыПроцедуры.Свойство("УзелЗагрузкиДанных", 		УзелЗагрузкиДанных);
	ПараметрыПроцедуры.Свойство("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
	ПараметрыПроцедуры.Свойство("УзелСправочники", 			УзелСправочники);
	ПараметрыПроцедуры.Свойство("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
	ПараметрыПроцедуры.Свойство("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
	
	ПараметрыПроцедуры.Свойство("ИмяФормыОтчета", 			ИмяФормыОтчета);
	ПараметрыПроцедуры.Свойство("ИмяРегРаздел", 			ИмяРегРаздел);
	ПараметрыПроцедуры.Свойство("ТабРегРаздел", 			ТабРегРаздел);
	ПараметрыПроцедуры.Свойство("ИндексСтраницы", 			ИндексСтраницы);
	ПараметрыПроцедуры.Свойство("ДанныеРаздела", 			ДанныеРаздела);
	ПараметрыПроцедуры.Свойство("ДопДанныеРаздела", 		ДопДанныеРаздела);
	ПараметрыПроцедуры.Свойство("КоличествоРазделовПоРегистрам", 	КоличествоРазделовПоРегистрам);
	ПараметрыПроцедуры.Свойство("КоличествоРазделовПоОтчету", 		КоличествоРазделовПоОтчету);
	
	
	РазделСведенияСтрока = Новый Массив(КоличествоРазделовПоРегистрам + 1);
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл
						
		Пока РазделСведения[НомерРаздела].Количество() - 1 < ИндексСтраницы Цикл							
			РазделСведения[НомерРаздела].Добавить()
		КонецЦикла;						
		
		РазделСведенияСтрока[НомерРаздела] = РазделСведения[НомерРаздела][ИндексСтраницы];
		
	КонецЦикла;
				
	// Заполнение таблиц для переноса данных в регистры разделов.
	
	КвоСтрок = Новый Массив(КоличествоРазделовПоРегистрам + 1);
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл
		КвоСтрок[НомерРаздела] = 0
	КонецЦикла;
				
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл
		ТабРегРаздел[НомерРаздела].Очистить()
	КонецЦикла;
				 
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументОтчета", 			ДокументОтчета);
	Параметры.Вставить("УзелДанных", 				УзелДанныхПоОП);
	Параметры.Вставить("УзелЗагрузкиДанных", 		УзелЗагрузкиДанных);
	Параметры.Вставить("СоответствиеУзловОчистки",	СоответствиеУзловОчистки);
	Параметры.Вставить("УзелСправочники", 			УзелСправочники);
	Параметры.Вставить("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
	Параметры.Вставить("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
	Параметры.Вставить("КэшУзловСправочников", 		КэшУзловСправочников);
	
	ЗаполнитьДанныеПриЗагрузке(Параметры,
								КвоСтрок, ТабРегРаздел, ДопДанныеРаздела, ДанныеРаздела);
	Параметры.Свойство("КэшУзловСправочников", 		КэшУзловСправочников);
								
	// Добавляем страницу других разделов по тому же ОП.
	Если КоличествоРазделовПоОтчету > 1 Тогда
	
		Для НомерРаздела = 2 По КоличествоРазделовПоОтчету Цикл
		
			Пока РазделПоОтчету[НомерРаздела].Количество() - 1 < ИндексСтраницы Цикл							
				РазделПоОтчету[НомерРаздела].Добавить()
			КонецЦикла;
			
			СтраницаРаздела2 = РазделПоОтчету[НомерРаздела][ИндексСтраницы];
			
			СтраницаРаздела2.Представление = "Лист N " + Формат(ИндексСтраницы + 1, "ЧН=; ЧГ=");
			СтраницаРаздела2.АктивнаяСтраница = Ложь;
			СтраницаРаздела2.АвтоматическоеПредставление = Истина;
			СтраницаРаздела2.ФлагГоловногоОП = Ложь;
			
			СтраницаРаздела2.Данные = СкопированнаяСтруктура(ДанныеРаздела);
			СтраницаРаздела2.ДополнительныеДанные = СкопированнаяСтруктура(ДопДанныеРаздела);
		
		КонецЦикла; 
	
	КонецЕсли; 
						
	// Заполнение регистров разделов 1, 2 и 3.
	Для НомерРаздела = 1 По КоличествоРазделовПоРегистрам Цикл
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если КвоСтрок[НомерРаздела] > 0 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru='
				|Заполнение отчета данными (раздел %1, стр. %2)'"), 
				Формат(НомерРаздела, "ЧГ="), Формат(ИндексСтраницы + 1, "ЧГ="));
				
			ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
																	
			ДобавитьТаблицуЗначенийВРегистрСведенийАлко(
				ДокументОтчета, ИмяФормыОтчета, ИмяРегРаздел[НомерРаздела], 
				МаксИндексСтраницы, ТабРегРаздел[НомерРаздела], 0);
			
			ВсегоСтрокСохранено = ВсегоСтрокСохранено + КвоСтрок[НомерРаздела];
		КонецЕсли;
		
		РазделСведенияСтрока[НомерРаздела].КоличествоСтрок = КвоСтрок[НомерРаздела];
		РазделСведенияСтрока[НомерРаздела].ИндексСтраницыРегистра = МаксИндексСтраницы;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует структуру адреса выгрузки в структуру адреса подсистемы ОтчетностьПоАлкогольнойПродукции,
// основанной на структуре данных подсистемы КонтактнаяИнформация БСП РаботаСАдресамиКлиентСервер.Поля(),
// плюс служебные поля алкоотчетов и представление адреса в JSON и XML 
// (JSON и XML - форматы хранения адресной информации в БСП, JSON более свежий формат).
//
// Пареметры:
//	СтруктурыАдресаВыгрузки - Структура
//		поля структуры
//		* КодСтраны
//		* Индекс
//		* КодРегион
//		* Район
//		* Город
//		* НаселПункт
//		* Улица
//		* Дом
//		* Корпус - вся инфа из массива Корпуса в виде строки, может быть разделена запятой или нет.
//		* Литера
//		* Кварт  - вся инфа из массива Помещения в виде строки, может быть разделена запятой или нет.
Функция ВосстановитьСтруктуруАдресаИзСтруктурыАдресаВыгрузки(СтруктураАдресаВыгрузки)

	// Значимые поля структуры адреса контактной информации,
	// которые нужно постараться заполнить
	// 
	// 
	// Структура
	
	// * "КодСтраны"
	// * "Индекс"   
	
	// * "КодРегиона"                               
	// * "Район" 	
	// * "Город" 	
	// * "Поселение"                                	
	// * "НаселенныйПункт"                          
	
	// * "Территория"               уровень где то между насел пунктом и улицей.
	// 								Распознать Территорию из информации полей
	//								НаселенныйПункт или Улица сложно.
	//								Поэтому информация о территории, если есть будет
	//								распознана или как Улица или как НаселенныйПункт.
	
	// * "Улица" 	
	// * "Здание" Структура
	//		** "ТипЗдания"
	//		** "Номер"	
	// * "Корпуса"   Массив
	// * "Помещения" Массив
	// * "НомерЗемельногоУчастка" - может быть на уровне дома. 
	//								Не бывает одновременно с указанием дома. 
	
	СтруктураАдреса = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураАдресаВыгрузки);
	Разделитель = " ";
	РазделительОднотипныхЗначений = ",";
	
	ЕстьКвартира = Ложь;
	
	Для каждого КлючЗначение Из СтруктураАдресаВыгрузки Цикл
	
		ИмяПоля = КлючЗначение.Ключ;
		ЗначениеПоля = КлючЗначение.Значение;
		
		Если ИмяПоля = "Литера" и ЗначениеЗаполнено(ЗначениеПоля) Тогда
		
			ПолеЛитера = РаспознатьПолеЛитера(ЗначениеПоля, Разделитель);	
			
			Если НЕ СтруктураАдреса.Свойство("Корпуса") Тогда				
				СтруктураАдреса.Вставить("Корпуса", Новый Массив)
			ИначеЕсли 
				НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоМассив(СтруктураАдреса.Корпуса) Тогда
				СтруктураАдреса.Вставить("Корпуса", Новый Массив)
			КонецЕсли;
			
			СтруктураАдреса.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", 
											ПолеЛитера.ТипЛитеры, ПолеЛитера.НомерЛитеры));
			
			Продолжить
			
		КонецЕсли; 
		
		Если ИмяПоля = "Корпус" и ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			// Может быть несколько значений, например Корп.2 Стр.7.
			МассивЗначенийКорпусов = РаспознатьПоле(ЗначениеПоля, ИмяПоля, Разделитель, РазделительОднотипныхЗначений);
			
			Если НЕ СтруктураАдреса.Свойство("Корпуса") Тогда				
				СтруктураАдреса.Вставить("Корпуса", Новый Массив)
			ИначеЕсли 
				НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоМассив(СтруктураАдреса.Корпуса) Тогда
				СтруктураАдреса.Вставить("Корпуса", Новый Массив)
			КонецЕсли;
			
			Для каждого ЭлМассива Из МассивЗначенийКорпусов Цикл
			
				СтруктураАдреса.Корпуса.Добавить(ЭлМассива)	
			
			КонецЦикла;			
											
			Продолжить
			
		КонецЕсли;
		
		Если ИмяПоля = "Дом" и ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			// Для поля Дом ТипДома и Номер могут быть только 
			// в единственном числе в структуре адресной информации БСП.
			// Но в поле Дом структуры выгрузки может быть информация о НомерЗемельногоУчастка.
			МассивЗначенийДомов = РаспознатьПоле(ЗначениеПоля, ИмяПоля, Разделитель, РазделительОднотипныхЗначений);
			
			Если НЕ СтруктураАдреса.Свойство("Здание") Тогда				
				СтруктураАдреса.Вставить("Здание", Новый Структура)
			ИначеЕсли 
				НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоСтруктура(СтруктураАдреса.Здание) Тогда
				СтруктураАдреса.Вставить("Здание", Новый Структура)
			КонецЕсли;
			
			// Проверяем наличие земельного участка
			ИндексЭлтаЗемельногоУчастка = Неопределено;
			Для каждого ЭлМассива Из МассивЗначенийДомов Цикл
				
				Если ЭлМассива.ТипЗдания = "Земельный участок" Тогда
				
					СтруктураАдреса.Вставить("НомерЗемельногоУчастка", ЭлМассива.Номер);
					ИндексЭлтаЗемельногоУчастка = МассивЗначенийДомов.Найти(ЭлМассива);
					
					Прервать
				
				КонецЕсли
							
			КонецЦикла;
			// Если нашли земельный участок - удаляем его.
			Если НЕ ИндексЭлтаЗемельногоУчастка = Неопределено Тогда			
				МассивЗначенийДомов.Удалить(ИндексЭлтаЗемельногоУчастка)			
			КонецЕсли; 
			
			// Выставляем структуру "Здание"
			Если МассивЗначенийДомов.Количество() > 0 Тогда
			
				СтруктураАдреса.Вставить("Здание", Новый Структура("ТипЗдания, Номер"));
				СтруктураАдреса.Здание.ТипЗдания = МассивЗначенийДомов[0].ТипЗдания;
				СтруктураАдреса.Здание.Номер = МассивЗначенийДомов[0].Номер;
			
			КонецЕсли; 
											
			Продолжить
			
		КонецЕсли;
		
		Если ИмяПоля = "Квартира" и ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ЕстьКвартира = Истина;
			// Может быть несколько значений, например Корп.2 Стр.7.
			МассивЗначенийКвартир = РаспознатьПоле(ЗначениеПоля, ИмяПоля, Разделитель, РазделительОднотипныхЗначений);
			
			Если НЕ СтруктураАдреса.Свойство("Помещения") Тогда				
				СтруктураАдреса.Вставить("Помещения", Новый Массив)
			ИначеЕсли 
				НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоМассив(СтруктураАдреса.Помещения) Тогда
				СтруктураАдреса.Вставить("Помещения", Новый Массив)
			КонецЕсли;
			
			Для каждого ЭлМассива Из МассивЗначенийКвартир Цикл			
				СтруктураАдреса.Помещения.Добавить(ЭлМассива)			
			КонецЦикла;			
											
			Продолжить
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ВерсияБСПЧислом = Неопределено;
	ИмяОбщегоМодуляРаботаСАдресами = ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом);

	Попытка
		ОбщийМодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляРаботаСАдресами);
	Исключение

		ТекстСообщения = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат Неопределено;

	КонецПопытки;
	
	
	// На случай кодов GUID ФИАС.
	Если СтруктураАдреса.Идентификаторы.Свойство("Регион") 
		И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Регион) Тогда
		
		// Смотрим самый нижний заполненный GUID.
		Если СтруктураАдреса.Свойство("КодКварт") 
			И ЗначениеЗаполнено(СтруктураАдреса.КодКварт)
			И (НЕ ЕстьКвартира)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.КодКварт
		ИначеЕсли СтруктураАдреса.Свойство("ИдентификаторДома") 
			И ЗначениеЗаполнено(СтруктураАдреса.ИдентификаторДома)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.ИдентификаторДома
		ИначеЕсли СтруктураАдреса.Идентификаторы.Свойство("Улица") 
			И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Улица)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.Идентификаторы.Улица
		ИначеЕсли СтруктураАдреса.Идентификаторы.Свойство("НаселенныйПункт") 
			И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.НаселенныйПункт)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.Идентификаторы.НаселенныйПункт
		ИначеЕсли СтруктураАдреса.Идентификаторы.Свойство("Город") 
			И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Город)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.Идентификаторы.Город
		ИначеЕсли СтруктураАдреса.Идентификаторы.Свойство("Район") 
			И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Район)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.Идентификаторы.Район
		ИначеЕсли СтруктураАдреса.Идентификаторы.Свойство("Регион") 
			И ЗначениеЗаполнено(СтруктураАдреса.Идентификаторы.Регион)
			Тогда
			ИдентификаторАдреса = СтруктураАдреса.Идентификаторы.Регион
		КонецЕсли;
		
		БезопасныйРежим = БезопасныйРежим();
		Если ТипЗнч(БезопасныйРежим) = Тип("Булево") И (НЕ БезопасныйРежим) Тогда
		
			ДополнительнаяИнформацияАдреса = Новый Структура;
			ДополнительнаяИнформацияАдреса.Вставить("АдресВJSON", Истина);
			ДополнительнаяИнформацияАдреса.Вставить("Страна", СтруктураАдреса.Страна);
			
			АдресВJSON = ОбщийМодульРаботаСАдресами.АдресПоИдентификатору(ИдентификаторАдреса, ДополнительнаяИнформацияАдреса);
			
			Если АдресВJSON <> Неопределено Тогда
			
				СтруктураАдресаИзGUID = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресВJSON, Ложь);
				
				// Там должно быть все кроме уровня квартиры.
				Если ЕстьКвартира Тогда
				
					Помещения = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураАдреса.Помещения);
					СтруктураАдресаИзGUID.Вставить("Помещения", Помещения);
					СтруктураАдресаИзGUID.Вставить("Квартира", СтруктураАдреса.Квартира);
					
				КонецЕсли; 
				
			КонецЕсли; 
		Иначе
			// Не будем грузить адрес.
			СтруктураАдресаИзGUID = ПолучитьПустуюСтруктуруАдреса()
		КонецЕсли; 
				
		// Заполняем поля исходной структуры.
		// Заменить нельзя - это может быть Структура ОП с адресом, 
		// при замене вся информация об ОП затрется.
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, СтруктураАдресаИзGUID);
				
	КонецЕсли;
	

	// Преобразуем в формат адресной информации JSON, чтобы получить возможность
	// задействовать штатные средства БСП для восполнения недостающей информации
	// при вызове РаботаСАдресами.СведенияОбАдресе() - вызывается в 
	// ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON().
	АдресВJSON = ОбщийМодульРаботаСАдресами.ПоляАдресаВJSON(СтруктураАдреса);
	
	// Проверим исправлена ли ошибка БСП с потерей "земельного участка" при преобразовании в JSON.
	Если СтруктураАдреса.Свойство("НомерЗемельногоУчастка") 
		И ЗначениеЗаполнено(СтруктураАдреса.НомерЗемельногоУчастка) Тогда
	
		Если СтрНайти(АдресВJSON, """stead"": """"") > 0 Тогда
		
			СтрокаЗамены = """stead"": """ 
				+ СтрокаЧГ0(СтруктураАдреса.НомерЗемельногоУчастка) 
				+ """";
			АдресВJSON = СтрЗаменить(АдресВJSON, """stead"": """"", СтрокаЗамены)
		
		КонецЕсли; 
	
	КонецЕсли;
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресВJSON, Ложь);
	
	Возврат СтруктураАдреса

КонецФункции

Процедура ОбработкаРазделаЛицензииПриЗагрузке(ПараметрыЗагрузки, УзелОрганизация, 
		СтруктураДанныхОтчета, КоллекцияСписковВыбора, МаксИндексСтраницы)

	ЕстьНелицензируемая = Ложь;
	// узлы раздела "Лицензии" (нелицензируемая деятельность).
	УзлыЛицензии = УзлыПоXPath(УзелОрганизация, "Деятельность/Нелицензируемая"); 
		
	Если ЗначениеЗаполнено(УзлыЛицензии) Тогда
		
		МассивУзелВидДеят = УзлыПоXPath(УзлыЛицензии[0], "@ВидДеят");
		Если МассивУзелВидДеят.Количество() = 0 Тогда		
			МассивУзелВидДеят = УзлыПоXPath(УзлыЛицензии[0], "ВидДеят");
			УзелВидДеят = МассивУзелВидДеят[0];
			УзелЛицензииОрганизации = УзелВидДеят;
		Иначе
			УзелВидДеят = МассивУзелВидДеят[0];
			УзелЛицензииОрганизации = УзлыЛицензии[0];
		КонецЕсли;
				
		Если ЗначениеЗаполнено(УзелВидДеят.Значение) Тогда
			ЕстьНелицензируемая = Истина;
			УзелВидДеят.Раздел = "Лицензии";
			УзелВидДеят.Ключ = "ОбособленноеПодразделение";
			РегламентированнаяОтчетностьЗагрузка.ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(
				УзелВидДеят, ПараметрыЗагрузки.ДанныеОтчета, ПараметрыЗагрузки.ПараметрыОтчета, , 1);
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЕстьНелицензируемая Тогда
		// Узлы раздела "Лицензии" (лицензируемая деятельность).
		УзлыЛицензии = УзлыПоXPath(УзелОрганизация, "Деятельность/Лицензируемая/Лицензия");
		Для НомСтраницы = 1 По УзлыЛицензии.Количество() Цикл
			СтраницаРаздела = УзлыЛицензии[НомСтраницы - 1];
			
			МассивУзелВидДеят = УзлыПоXPath(СтраницаРаздела, "@ВидДеят");
			Если МассивУзелВидДеят.Количество() = 0 Тогда		
				МассивУзелВидДеят = УзлыПоXPath(СтраницаРаздела, "ВидДеят")			
			КонецЕсли;
			УзелВидДеят = МассивУзелВидДеят[0];
		
			МассивУзелСерНомЛиц = УзлыПоXPath(СтраницаРаздела, "@СерНомЛиц");
			Если МассивУзелСерНомЛиц.Количество() = 0 Тогда		
				МассивУзелСерНомЛиц = УзлыПоXPath(СтраницаРаздела, "СерНомЛиц")			
			КонецЕсли;
			УзелСерНомЛиц = МассивУзелСерНомЛиц[0];
			
			МассивУзелДатаНачЛиц = УзлыПоXPath(СтраницаРаздела, "@ДатаНачЛиц");
			Если МассивУзелДатаНачЛиц.Количество() = 0 Тогда		
				МассивУзелДатаНачЛиц = УзлыПоXPath(СтраницаРаздела, "ДатаНачЛиц")			
			КонецЕсли;
			УзелДатаНачЛиц = МассивУзелДатаНачЛиц[0];
			
			МассивУзелДатаОконЛиц = УзлыПоXPath(СтраницаРаздела, "@ДатаОконЛиц");
			Если МассивУзелДатаОконЛиц.Количество() = 0 Тогда		
				МассивУзелДатаОконЛиц = УзлыПоXPath(СтраницаРаздела, "ДатаОконЛиц")			
			КонецЕсли;
			УзелДатаОконЛиц = МассивУзелДатаОконЛиц[0];
			
			ЗначениеУзла = "" + УзелВидДеят.Значение + "~" + УзелСерНомЛиц.Значение + "~" + УзелДатаНачЛиц.Значение + "~" + УзелДатаОконЛиц.Значение;
			
			УзелВидДеят.Раздел = "Лицензии";
			УзелВидДеят.Ключ = "ОбособленноеПодразделение";
			УзелВидДеят.Значение = ЗначениеУзла;
			
			РегламентированнаяОтчетностьЗагрузка.ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(
				УзелВидДеят, ПараметрыЗагрузки.ДанныеОтчета, ПараметрыЗагрузки.ПараметрыОтчета, , НомСтраницы);
		КонецЦикла;
	КонецЕсли;
	
	ИндексСтраницы = 0;
	РазделЛицензии = Неопределено;
	ПараметрыЗагрузки.ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство("Лицензии", РазделЛицензии);
	Если РазделЛицензии <> Неопределено Тогда
		ЛицензииСведения = СтруктураДанныхОтчета.СтруктураСервисРегистров.СведенияРеглОтчетАлкоЛицензии;
		ЛицензииСведенияУдаленные = СтруктураДанныхОтчета.СтруктураСервисРегистровУдаленные.СведенияРеглОтчетАлкоЛицензии;
		
		ТабВидыДеятельности = КоллекцияСписковВыбора["ВидыДеятельности"];
		
		Для Каждого СтраницаРаздела Из РазделЛицензии Цикл
			ДанныеРаздела = СтраницаРаздела.Данные;
			ДопДанныеРаздела = СкопированнаяСтруктура(СтраницаРаздела.ДополнительныеДанные, Истина);
			
			СтраницаРаздела.ДополнительныеДанные = ДопДанныеРаздела;
			
			ЗначениеПоказателя = "";
			Если ДанныеРаздела.Свойство("ОбособленноеПодразделение", ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = "" + ЗначениеПоказателя;
				МассивЗначенийПоказателей = СтрРазделить(ЗначениеПоказателя, "~");
				
				ДанныеРаздела.Вставить("П000000000105", МассивЗначенийПоказателей[0]);
				ДанныеРаздела.Вставить("П000000000101",
					?(МассивЗначенийПоказателей.ВГраница() > 0, МассивЗначенийПоказателей[1], ""));
				ДанныеРаздела.Вставить("П000000000102", "");
				ДанныеРаздела.Вставить("П000000000103", 
					ДатаИзСтрокиЛюбогоФормата(
						?(МассивЗначенийПоказателей.ВГраница() > 1, МассивЗначенийПоказателей[2], "")));
				ДанныеРаздела.Вставить("П000000000104", 
					ДатаИзСтрокиЛюбогоФормата(
						?(МассивЗначенийПоказателей.ВГраница() > 2, МассивЗначенийПоказателей[3], "")));
				
				МассивСерияНомер = СтрРазделить(ДанныеРаздела.П000000000101, " ");
				ДанныеРаздела.П000000000101 = МассивСерияНомер[0];
				ДанныеРаздела.П000000000102 = ?(МассивСерияНомер.ВГраница() > 0, МассивСерияНомер[1], "");
				
				ВидДеятельности = ТабВидыДеятельности.Найти(МассивЗначенийПоказателей[0], "Код");
				Если ВидДеятельности <> Неопределено Тогда
					ДанныеРаздела.П000000000105 = ВидДеятельности[1];
				КонецЕсли;
				
				ДопДанныеРаздела.Вставить("П000000000105", МассивЗначенийПоказателей[0]);
				
				ДанныеРаздела.Удалить("ОбособленноеПодразделение");
			КонецЕсли;
			
			ЛицензииСведенияСтрока = ?(ИндексСтраницы < ЛицензииСведения.Количество(),
				ЛицензииСведения[ИндексСтраницы], ЛицензииСведения.Добавить());
				
			ИндексСтраницы     = ИндексСтраницы + 1;
			МаксИндексСтраницы = МаксИндексСтраницы + 1;
			
			ЛицензииСведенияСтрока.КоличествоСтрок = 0;
			ЛицензииСведенияСтрока.ИндексСтраницыРегистра = ИндексСтраницы;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СхемаЗагрузкиАЛКО(ВерсияФормата, НаДату, ИмяФормыОтчета, ОбъектОтчета = Неопределено)

	Результат = Новый Структура;
	
	ДеревоСтруктурыСправочников = Новый ДеревоЗначений;
	ДеревоСтруктурыСправочников.Колонки.Добавить("Код");
	ДеревоСтруктурыСправочников.Колонки.Добавить("ВременнаяПеременная");
	ДеревоСтруктурыСправочников.Колонки.Добавить("Тип");
	
	ДеревоСтруктурыДанных = Новый ДеревоЗначений;
	ДеревоСтруктурыДанных.Колонки.Добавить("Код");
	ДеревоСтруктурыДанных.Колонки.Добавить("НачалоНовойСтрокиРаздела");
	ДеревоСтруктурыДанных.Колонки.Добавить("НомерРаздела");
	ДеревоСтруктурыДанных.Колонки.Добавить("Справочник");
	ДеревоСтруктурыДанных.Колонки.Добавить("РесурсРегистра");
	ДеревоСтруктурыДанных.Колонки.Добавить("ВременнаяПеременная");
	ДеревоСтруктурыДанных.Колонки.Добавить("ИмяДанных");
	ДеревоСтруктурыДанных.Колонки.Добавить("ИмяДопДанных");
	ДеревоСтруктурыДанных.Колонки.Добавить("Тип");
	
	СоответствиеУзловОчистки = Новый Соответствие;
	
	ДействующийФормат = "";
	ПозицияТочки = СтрНайти(ВерсияФормата, ".");
	Если ПозицияТочки = 0 Тогда	
		ДействующийФормат = ВерсияФормата + "00";
	Иначе
		Если ПозицияТочки + 1 <= СтрДлина(ВерсияФормата) Тогда		
			МинорнаяВерсия = Сред(ВерсияФормата, ПозицияТочки + 1)	
		Иначе 
			МинорнаяВерсия = "00"
		КонецЕсли; 
		
		Пока СтрДлина(МинорнаяВерсия) < 2 Цикл		
			МинорнаяВерсия = МинорнаяВерсия + "0";		
		КонецЦикла;
		
		Если ПозицияТочки > 1 Тогда		
			МажорнаяВерсия = Лев(ВерсияФормата, ПозицияТочки - 1)	
		Иначе
			МажорнаяВерсия = "0";
		КонецЕсли; 
		
		ДействующийФормат = МажорнаяВерсия + МинорнаяВерсия
	КонецЕсли; 
	
	ИмяМакета = "СхемаЗагрузки" + ДействующийФормат;
	ПолноеИмяМакета = ИмяДействующегоМакета(ИмяФормыОтчета, ИмяМакета, НаДату, , ОбъектОтчета);
	
	Если НЕ ЗначениеЗаполнено(ПолноеИмяМакета) Тогда
		
		// Любой подходящий по времени.
		ИмяМакета = "СхемаЗагрузки"; 
		ПолноеИмяМакета = ИмяДействующегоМакета(ИмяФормыОтчета, ИмяМакета, НаДату, , ОбъектОтчета);
		
		Если ЗначениеЗаполнено(ПолноеИмяМакета) Тогда
			
			ПозПодчеркивания = СтрНайти(ПолноеИмяМакета, "_");
			ФорматМакетаЗагрузки = СтрЗаменить(Лев(ПолноеИмяМакета, ПозПодчеркивания - 1), ИмяМакета, "");
			
			ФорматМакетаЗагрузки = Формат(Число(ФорматМакетаЗагрузки)/100, "ЧН=; ЧГ=0; ЧЦ=5; ЧДЦ=2; ЧРД='.'");
			ФорматФайлаЗагрузки = Формат(Число(ДействующийФормат)/100, "ЧН=; ЧГ=0; ЧЦ=5; ЧДЦ=2; ЧРД='.'");
			
			ТекстСообщения = НСтр("ru='В файле загрузки обнаружен формат схемы выгрузки " + ФорматФайлаЗагрузки 
										+ ",
										|но для данного формата нет макета схемы загрузки в данных отчета.
										|Будет предпринята попытка использования подходящего на дату отчета " 
										+ НаДату + " макета загрузки.
										|Возможно появление плохо читаемых техногенных ошибок.
										|
										|При наличии ошибок или неверной загрузке данных (сравните исходный файл с результатом),
										|необходимо предоставить для загрузки файл, выгруженный по формату "
										+ ФорматМакетаЗагрузки + ".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			ВызватьИсключение "Отсутствует макет ""СхемаЗагрузки"" в метаданных " + Строка(ОбъектОтчета)
		КонецЕсли; 
		 
	
	КонецЕсли; 
	
	МакетЗагрузки = ПолучитьМакетИзОбъектаАЛКО(ПолноеИмяМакета, ИмяФормыОтчета, ОбъектОтчета);
	
	// Справочники.
	ОбластьСправочники = МакетЗагрузки.Области.Найти("Справочники");
	Если НЕ ОбластьСправочники = Неопределено Тогда

		Если ОбластьСправочники.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			ВерхОбласти = ОбластьСправочники.Верх;
			НизОбласти = ОбластьСправочники.Низ;

			УчтенныеГруппы = Новый Соответствие;
			
			Для Уровень = 0 По МакетЗагрузки.КоличествоУровнейГруппировокСтрок() - 1 Цикл
				
				МакетЗагрузки.ПоказатьУровеньГруппировокСтрок(Уровень);
				
				Для НомерСтроки = ВерхОбласти По НизОбласти Цикл
					
					// Идем снизу вверх, чтобы родительские узлы правильно находились.
					НомСтр = НизОбласти - НомерСтроки + ВерхОбласти;	
					
					Если МакетЗагрузки.Область(НомСтр, 0, НомСтр, 0).Видимость
						И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
					
						РодительскийУзел = ДеревоСтруктурыСправочников;
						
						Если Уровень <> 0 Тогда
							
							Для Инд = 1 По НомСтр - ВерхОбласти Цикл
								
								Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
								
								Если Узел <> Неопределено Тогда
									РодительскийУзел = Узел;
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						// Если код строки не заполнен - пропускаем.
						Если СокрЛП(МакетЗагрузки.Область(НомСтр, 1, НомСтр, 1).Текст) = "" Тогда				
							Продолжить;				
						КонецЕсли; 

						// Идем снизу вверх, поэтому не добавляем, а вставляем.
						НовСтр = РодительскийУзел.Строки.Вставить(0);
						НовСтр.Код = СокрЛП(МакетЗагрузки.Область(НомСтр, 1, НомСтр, 1).Текст);
						
						НовСтр.ВременнаяПеременная = СокрЛП(МакетЗагрузки.Область(НомСтр, 5, НомСтр, 5).Текст);
						
						НовСтр.Тип = СокрЛП(МакетЗагрузки.Область(НомСтр, 9, НомСтр, 9).Текст);
						
						УчтенныеГруппы.Вставить(НомСтр, НовСтр);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Результат.Вставить("Справочники", ДеревоСтруктурыСправочников)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные.
	ОбластьДанные = МакетЗагрузки.Области.Найти("Данные");
	Если НЕ ОбластьДанные = Неопределено Тогда

		Если ОбластьДанные.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			ВерхОбласти = ОбластьДанные.Верх;
			НизОбласти = ОбластьДанные.Низ;

			УчтенныеГруппы = Новый Соответствие;
			
			Для Уровень = 0 По МакетЗагрузки.КоличествоУровнейГруппировокСтрок() - 1 Цикл
				
				МакетЗагрузки.ПоказатьУровеньГруппировокСтрок(Уровень);
				
				Для НомерСтроки = ВерхОбласти По НизОбласти Цикл
					
					// Идем снизу вверх, чтобы родительские узлы правильно находились.
					НомСтр = НизОбласти - НомерСтроки + ВерхОбласти;	
					
					Если МакетЗагрузки.Область(НомСтр, 0, НомСтр, 0).Видимость
						И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда

						РодительскийУзел = ДеревоСтруктурыДанных;
						
						Если Уровень <> 0 Тогда
							
							Для Инд = 1 По НомСтр - ВерхОбласти Цикл
								
								Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
								
								Если Узел <> Неопределено Тогда
									РодительскийУзел = Узел;
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						// Если код строки не заполнен - пропускаем.
						Если СокрЛП(МакетЗагрузки.Область(НомСтр, 1, НомСтр, 1).Текст) = "" Тогда				
							Продолжить;				
						КонецЕсли; 

						// Идем снизу вверх, поэтому не добавляем, а вставляем.
						НовСтр = РодительскийУзел.Строки.Вставить(0);
						НовСтр.Код = СокрЛП(МакетЗагрузки.Область(НомСтр, 1, НомСтр, 1).Текст);
						
						НовСтр.НачалоНовойСтрокиРаздела = СокрЛП(МакетЗагрузки.Область(НомСтр, 2, НомСтр, 2).Текст);
						НовСтр.Справочник = СокрЛП(МакетЗагрузки.Область(НомСтр, 3, НомСтр, 3).Текст);
						
						НовСтр.РесурсРегистра = СокрЛП(МакетЗагрузки.Область(НомСтр, 4, НомСтр, 4).Текст);
						
						ВременнаяПеременная = СокрЛП(МакетЗагрузки.Область(НомСтр, 5, НомСтр, 5).Текст);
						НовСтр.ВременнаяПеременная = ВременнаяПеременная;
						
						
						КодУзлаОчистки = СокрЛП(МакетЗагрузки.Область(НомСтр, 6, НомСтр, 6).Текст);
						
						Если ЗначениеЗаполнено(КодУзлаОчистки) И ЗначениеЗаполнено(ВременнаяПеременная) Тогда
						
							СписокПоУзлуОчистки = СоответствиеУзловОчистки.Получить(КодУзлаОчистки);
							Если НЕ ТипЗнч(СписокПоУзлуОчистки) = Тип("СписокЗначений") Тогда							
								СписокПоУзлуОчистки = Новый СписокЗначений							
							КонецЕсли;
							
							СписокПоУзлуОчистки.Добавить(ВременнаяПеременная);
							
							СоответствиеУзловОчистки.Вставить(КодУзлаОчистки, СписокПоУзлуОчистки)
						
						КонецЕсли; 
						
						
						НовСтр.ИмяДанных = СокрЛП(МакетЗагрузки.Область(НомСтр, 7, НомСтр, 7).Текст);
						НовСтр.ИмяДопДанных = СокрЛП(МакетЗагрузки.Область(НомСтр, 8, НомСтр, 8).Текст);
						
						НовСтр.Тип = СокрЛП(МакетЗагрузки.Область(НомСтр, 9, НомСтр, 9).Текст);
						
						УчтенныеГруппы.Вставить(НомСтр, НовСтр);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Результат.Вставить("Данные", 					ДеревоСтруктурыДанных);
			Результат.Вставить("СоответствиеУзловОчистки", 	СоответствиеУзловОчистки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат

КонецФункции

Функция УзелСправочникаВыгрузкиПоИд(Ид, УзелСправочники, ИмяСправочника, ИмяИдСправочника, КэшУзловСправочника)

	УзелСправочника = "";
	
	Если ЗначениеЗаполнено(Ид) Тогда
		
		УзелСправочника = КэшУзловСправочника[Ид];
		
		Если УзелСправочника = Неопределено Тогда
			
			УзлыСправочника = УзлыПоXPath(УзелСправочники, 
									ИмяСправочника + "[@" + ИмяИдСправочника + "='" + Ид + "']");
			Если ЗначениеЗаполнено(УзлыСправочника) Тогда
				УзелСправочника = УзлыСправочника[0]				
			Иначе
				
				ТекстСообщения = НСтр("ru='Либо в данных файла загрузки не установлено значение Ид для элемента справочника "
									+ ИмяСправочника + " в разделе Справочники файла загрузки,
									|либо в данных файла загрузки имеется ссылка по Ид = " + Ид + " на элемент справочника "
									+ ИмяСправочника + ", который отсутствует в разделе Справочники файла загрузки.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				УзелСправочника = ""
			КонецЕсли;
			
			КэшУзловСправочника.Вставить(Ид, УзелСправочника)
			
		КонецЕсли;
		
	Иначе
		
		// Передан пустой Ид.
		ТекстСообщения = НСтр("ru='В файле загрузки присутствует пустой Ид в ссылке на справочник " 
									+ ИмяСправочника + " из файла загрузки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		
	КонецЕсли;
	
	Возврат УзелСправочника

КонецФункции
 
Процедура ЗаполнитьДанныеПриЗагрузке(Параметры,
									КвоСтрок, ТабРегРаздел, 
									ДопДанныеРаздела, ДанныеРаздела)
					
	Перем ДокументОтчета;
	Перем УзелДанных, УзелЗагрузкиДанных, СоответствиеУзловОчистки;
	Перем УзелСправочники, СхемаЗагрузкиСправочников;
	Перем КоллекцияСписковВыбора;
	
	Перем СписокСправочников, ВременныеПеременные, КэшУзловСправочников;
	Перем НомерРаздела, ИндексНовойСтроки;
	
	Параметры.Свойство("ДокументОтчета", 			ДокументОтчета);
	Параметры.Свойство("УзелДанных", 				УзелДанных);
	Параметры.Свойство("УзелЗагрузкиДанных", 		УзелЗагрузкиДанных);
	Параметры.Свойство("СоответствиеУзловОчистки", 	СоответствиеУзловОчистки);
	Параметры.Свойство("УзелСправочники", 			УзелСправочники);
	Параметры.Свойство("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
	Параметры.Свойство("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
	
	Параметры.Свойство("СписокСправочников", 		СписокСправочников);
	Параметры.Свойство("ВременныеПеременные", 		ВременныеПеременные);
	Параметры.Свойство("НомерРаздела", 				НомерРаздела);
	Параметры.Свойство("ИндексНовойСтроки", 		ИндексНовойСтроки);
	Параметры.Свойство("КэшУзловСправочников", 		КэшУзловСправочников);

	Если ВременныеПеременные = Неопределено Тогда	
		ВременныеПеременные = Новый Соответствие	
	КонецЕсли; 
	
	Если СписокСправочников = Неопределено Тогда	
		СписокСправочников = Новый Соответствие	
	КонецЕсли;
	
	Если КэшУзловСправочников = Неопределено Тогда	
		КэшУзловСправочников = Новый Соответствие	
	КонецЕсли;
	
	НоваяСтрока = Неопределено;
	Если НЕ НомерРаздела = Неопределено Тогда	
		НоваяСтрока = ТабРегРаздел[НомерРаздела][ИндексНовойСтроки]	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(УзелЗагрузкиДанных) Тогда		
		ВызватьИсключение "Не считана схема загрузки данных! В схеме загрузки нет области Данные, вероятно."		
	КонецЕсли;
		
	// Получаем список подчиненных узлов по схеме Загрузки.
	СписокТекущегоУровня = Новый Соответствие;
	
	СписокТекущегоУровня.Вставить(УзелЗагрузкиДанных.Код, УзелЗагрузкиДанных);
	
	Для Каждого УзелДанныхПодч Из УзелЗагрузкиДанных.Строки Цикл
		Если НЕ ЗначениеЗаполнено(УзелДанныхПодч.Код) Тогда		
			Продолжить		
		КонецЕсли; 
		СписокТекущегоУровня.Вставить(УзелДанныхПодч.Код, УзелДанныхПодч)
	КонецЦикла;
		
	Если ТипЗнч(УзелДанных) = Тип("Массив") Тогда
						
		Для Каждого УзелДанныхПодч Из УзелДанных Цикл
			
			СписТекУровня = ОбщегоНазначения.СкопироватьРекурсивно(СписокТекущегоУровня);
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ДокументОтчета", 			ДокументОтчета);
			ПараметрыОбработки.Вставить("УзелДанных", 				УзелДанныхПодч);
			ПараметрыОбработки.Вставить("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
			ПараметрыОбработки.Вставить("УзелСправочники", 			УзелСправочники);
			ПараметрыОбработки.Вставить("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
			ПараметрыОбработки.Вставить("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
			
			ПараметрыОбработки.Вставить("СписокСправочников", 		СписокСправочников);
			ПараметрыОбработки.Вставить("ВременныеПеременные", 		ВременныеПеременные);
			ПараметрыОбработки.Вставить("НомерРаздела", 			НомерРаздела);
			ПараметрыОбработки.Вставить("ИндексНовойСтроки", 		ИндексНовойСтроки);
			ПараметрыОбработки.Вставить("КэшУзловСправочников", 	КэшУзловСправочников);

			ОбработатьУзелДанныхЗагрузки(ПараметрыОбработки,
										 КвоСтрок, ТабРегРаздел, 
										 ДопДанныеРаздела, ДанныеРаздела, 
										 СписТекУровня);
				
			ПараметрыОбработки.Свойство("СписокСправочников", 		СписокСправочников);
			ПараметрыОбработки.Свойство("ВременныеПеременные", 		ВременныеПеременные);
			ПараметрыОбработки.Свойство("НомерРаздела", 			НомерРаздела);
			ПараметрыОбработки.Свойство("ИндексНовойСтроки", 		ИндексНовойСтроки);
			ПараметрыОбработки.Свойство("КэшУзловСправочников", 	КэшУзловСправочников);
			
		КонецЦикла;
		
	Иначе
		
		СписТекУровня = ОбщегоНазначения.СкопироватьРекурсивно(СписокТекущегоУровня);
		
		Для Каждого УзелДанныхПодчиненный Из УзелДанных.Строки Цикл
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ДокументОтчета", 			ДокументОтчета);
			ПараметрыОбработки.Вставить("УзелДанных", 				УзелДанныхПодчиненный);
			ПараметрыОбработки.Вставить("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
			ПараметрыОбработки.Вставить("УзелСправочники", 			УзелСправочники);
			ПараметрыОбработки.Вставить("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
			ПараметрыОбработки.Вставить("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
			
			ПараметрыОбработки.Вставить("СписокСправочников", 		СписокСправочников);
			ПараметрыОбработки.Вставить("ВременныеПеременные", 		ВременныеПеременные);
			ПараметрыОбработки.Вставить("НомерРаздела", 			НомерРаздела);
			ПараметрыОбработки.Вставить("ИндексНовойСтроки", 		ИндексНовойСтроки);
			ПараметрыОбработки.Вставить("КэшУзловСправочников", 	КэшУзловСправочников);

			ОбработатьУзелДанныхЗагрузки(ПараметрыОбработки,
										 КвоСтрок, ТабРегРаздел, 
										 ДопДанныеРаздела, ДанныеРаздела,
										 СписТекУровня);
				
			ПараметрыОбработки.Свойство("СписокСправочников", 		СписокСправочников);
			ПараметрыОбработки.Свойство("ВременныеПеременные", 		ВременныеПеременные);
			ПараметрыОбработки.Свойство("НомерРаздела", 			НомерРаздела);
			ПараметрыОбработки.Свойство("ИндексНовойСтроки", 		ИндексНовойСтроки);
			ПараметрыОбработки.Свойство("КэшУзловСправочников", 	КэшУзловСправочников);
						
		КонецЦикла;
				
		// Отработка переменных.
		ОбработкаПеременныхЗагрузки(СписТекУровня, ВременныеПеременные, 
									НоваяСтрока, КоллекцияСписковВыбора,
									ДопДанныеРаздела, ДанныеРаздела)		
				
	КонецЕсли;
	
	Параметры.Вставить("СписокСправочников", 		СписокСправочников);
	Параметры.Вставить("ВременныеПеременные", 		ВременныеПеременные);
	Параметры.Вставить("НомерРаздела", 				НомерРаздела);
	Параметры.Вставить("ИндексНовойСтроки", 		ИндексНовойСтроки);
	Параметры.Вставить("КэшУзловСправочников", 		КэшУзловСправочников);
	
КонецПроцедуры

Функция ЗначениеИзКолонкиКод(ВременныеПеременные, Код, Тип = "", ДопОбработкаСправочника = Ложь)

	// Если значение останется пустым,
	// это необязательный элемент, которого нет в данных.
	Значение = "";
	
	Код = СокрЛП(Код);
	Тип = СокрЛП(Тип);
	ДлинаКода = СтрДлина(Код);
	
	Если СтрНачинаетсяС(Код, "ВП.") Тогда
		Значение = ЗначениеВременнойПеременной(ВременныеПеременные, Код)
	ИначеЕсли СтрНачинаетсяС(Код, "ФУНК.") Тогда
		Значение = ВыполнитьФункциюПриЗагрузке(ВременныеПеременные, Код)
	ИначеЕсли СтрНачинаетсяС(Код, "КОНСТ.") Тогда
		// Это константа.
		Значение = Сред(Код, 7)
	ИначеЕсли ДопОбработкаСправочника Тогда
		Возврат "$ЭтоНеСтрокаДопОбработки"
	КонецЕсли; 
	
	// Если тип определен - приводим к нему.
	Если (	Тип = "Число"
		ИЛИ Тип = "Дата"
		ИЛИ Тип = "Булево"
		ИЛИ Тип = "Строка") Тогда
	
		ПроверятьНаПростыеТипы = Истина;
		Значение = ПривестиКНужномуТипу(Значение, Тип, Код, ПроверятьНаПростыеТипы)		
	КонецЕсли; 
	
	Возврат Значение

КонецФункции
 
Процедура ОбработкаПеременныхЗагрузки(СписокТекущегоУровня, ВременныеПеременные, 
									  НоваяСтрока, КоллекцияСписковВыбора,
									  ДопДанныеРаздела, ДанныеРаздела)

	Для каждого КлючЗначение Из СписокТекущегоУровня Цикл
			
		УзелЗагрузки = КлючЗначение.Значение;
			
		Если УзелЗагрузки.Тип = "С" 
			ИЛИ УзелЗагрузки.Тип = "М"
			ИЛИ УзелЗагрузки.Тип = "ВнТаблица"
			Тогда
			// Группы пропускаем.
			Продолжить		
		КонецЕсли;
		
		Код = УзелЗагрузки.Код;		 
		Тип = УзелЗагрузки.Тип;
		ЗначениеПеременной = ЗначениеИзКолонкиКод(ВременныеПеременные, Код, Тип);
		
		// Возможна промежуточная переменная или необязательный элемент с переменной.
		ИмяВременнойПеременной = УзелЗагрузки.ВременнаяПеременная;
		
		Если ЗначениеЗаполнено(ИмяВременнойПеременной) Тогда		
			// Возможны необязательные элементы не простых типов.
			Если Тип = "Идентификатор" И (НЕ ЗначениеЗаполнено(ЗначениеПеременной)) Тогда
				// Необязательный идентификатор справочника.
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, Неопределено);
				
			ИначеЕсли Тип = "Адрес" И (НЕ ЗначениеЗаполнено(ЗначениеПеременной)) Тогда
				// Необязательная группа адреса. Вставляем пустой Адрес.
				СтруктураАдреса = ПолучитьПустуюСтруктуруАдреса();
				АдресXML = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
				
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, СтруктураАдреса);
				ВременныеПеременные.Вставить(ИмяВременнойПеременной + "XML", АдресXML);
				ВременныеПеременные.Вставить(ИмяВременнойПеременной + "Представление", "");
				
			Иначе
				
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, ЗначениеПеременной);
				
				ДлинаИмени = СтрДлина(ИмяВременнойПеременной);
				
				Если ДлинаИмени > 2 И Лев(ИмяВременнойПеременной, 3) = "Код" Тогда
					// Нужно определить Вид.
					Если ДлинаИмени > 3 Тогда
						Суффикс = Сред(ИмяВременнойПеременной, 4)
					Иначе
						Суффикс = ""
					КонецЕсли; 
					
					ИмяВременнойПеременнойВида = "Вид" + Суффикс;
					
					ИмяСпискаВыбора = УзелЗагрузки.Справочник;
					ТабВыбора = КоллекцияСписковВыбора[ИмяСпискаВыбора];
					
					ВидВыбора = ТабВыбора.Найти(ЗначениеПеременной, "Код");
					Если ВидВыбора = Неопределено Тогда
						ВременныеПеременные.Вставить(ИмяВременнойПеременнойВида, 
												НСтр("ru = 'Нет такого кода в списке выбора'"));
					Иначе
						ВременныеПеременные.Вставить(ИмяВременнойПеременнойВида, ВидВыбора[1])					
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Отрабатываем запись в строку таблицы регистра.
		ИмяРесурса = УзелЗагрузки.РесурсРегистра;
		Если ЗначениеЗаполнено(ИмяРесурса) Тогда
		
			// Есть смысл проверять наличие, если есть что вносить в нее.
			Если НоваяСтрока = Неопределено Тогда				
				ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ОбработкаПеременныхЗагрузки() 
								|не передан параметр НоваяСтрока!"				
			КонецЕсли;
			
			НоваяСтрока[ИмяРесурса] = ЗначениеПеременной	
		
		КонецЕсли;
		
		ИмяДанных = УзелЗагрузки.ИмяДанных;
		Если ЗначениеЗаполнено(ИмяДанных) Тогда
			ДанныеРаздела.Вставить(ИмяДанных, ЗначениеПеременной)								
		КонецЕсли;
		
		ИмяДопДанных = УзелЗагрузки.ИмяДопДанных;
		Если ЗначениеЗаполнено(ИмяДопДанных) Тогда
			ДопДанныеРаздела.Вставить(ИмяДопДанных, ЗначениеПеременной)				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПривестиКНужномуТипу(Значение, Тип, Код, ПроверятьНаПростыеТипы = Ложь)

	Код = СокрЛП(Код);
	Тип = СокрЛП(Тип);
	
	// Если тип определен - приводим к нему.
	Если ЗначениеЗаполнено(Тип) Тогда
	
		// Должен быть лишь простой тип.
		Если НЕ
			(	Тип = "Число"
			ИЛИ Тип = "Дата"
			ИЛИ Тип = "Булево"
			ИЛИ Тип = "Строка")
			Тогда
			Если ПроверятьНаПростыеТипы Тогда
			
				ВызватьИсключение "В строке схемы загрузки с кодом " + Код + ", 
							|указан неверный тип " + Тип + ", 
							|тип должен быть простым - Строка, Число, Дата, Булево
							|или отсутствовать - для случая записи промежуточной временной переменной
							|из переменной или константы, указанной в колонке Код"	
			Иначе
				Возврат Значение			
			КонецЕсли; 
			
		
		КонецЕсли;
		
		Если ТипЗнч(Значение) <> Тип(Тип) Тогда
			
			// Сначала приводим к строке.
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Значение = СтрокаЧГ0(Значение);
			Иначе
				Значение = Строка(Значение);
			КонецЕсли;
			
			Если Тип = "Число" Тогда
				Значение = ЧислоИзСтроки(Значение)
			ИначеЕсли Тип = "Дата" Тогда
				Значение = ДатаИзСтрокиЛюбогоФормата(Значение)
			ИначеЕсли Тип = "Булево" Тогда
				Значение = БулевоИзСтроки(Значение)
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Значение

КонецФункции

Процедура ОчиститьВременныеПеременные(ВременныеПеременные, СоответствиеУзловОчистки, КодУзла)

	СписокПоУзлуОчистки = СоответствиеУзловОчистки[КодУзла];
	
	Если ТипЗнч(СписокПоУзлуОчистки) = Тип("СписокЗначений") Тогда
	
		Для каждого ЭлементСписка Из СписокПоУзлуОчистки Цикл
		
			ИмяОчищаемойВременнойПеременной = ЭлементСписка.Значение;
			
			ВременныеПеременные.Вставить(ИмяОчищаемойВременнойПеременной, Неопределено)
		
		КонецЦикла; 
	
	КонецЕсли; 

КонецПроцедуры
 
Функция ЗначениеВременнойПеременной(ВременныеПеременные, Знач ПутьКЗначению, 
										ПромежуточноеЗначение = Неопределено)

	Если ПромежуточноеЗначение = Неопределено Тогда	
		ПромежуточноеЗначение = ВременныеПеременные	
	КонецЕсли;
	
	ПутьКЗначению = СокрЛП(ПутьКЗначению);
	
	// ПутьКЗначению - это строка вида ВП.Ключ1.{Выражение1}...КлючN.{ВыражениеN}
	// т.е либо ВП.Ключ либо ВП.{Выражение}
	Если СтрНачинаетсяС(ПутьКЗначению, "ВП.") Тогда
		ПутьКЗначению = СокрЛП(Сред(ПутьКЗначению, 4))	
	КонецЕсли; 
	
	Если Лев(ПутьКЗначению, 1) = "{" Тогда
		// Нужно сначала вычислить значение после "{".
		// Ищем закрывающую скобку.
		КолЛевыхСкобок = 1;
		ДлинаПутьКЗначению = СтрДлина(ПутьКЗначению);
		
		ТекущийКлюч = "";
		ОставшийсяПутьКЗначению = "";
		
		Для НомерСимвола = 2 По ДлинаПутьКЗначению Цикл
		
			Символ = Сред(ПутьКЗначению, НомерСимвола, 1);
			Если Символ = "{" Тогда			
				КолЛевыхСкобок = КолЛевыхСкобок + 1
			ИначеЕсли Символ = "}" Тогда
				КолЛевыхСкобок = КолЛевыхСкобок - 1			
			КонецЕсли; 
			
			Если КолЛевыхСкобок = 0 Тогда
				// Нашли закрывающую скобку.
				ТекущийКлюч = Лев(ПутьКЗначению, НомерСимвола);
				// После закрывающей скобки должна быть точка или это крайнее справа выражение.
				Если НЕ НомерСимвола = ДлинаПутьКЗначению Тогда					
					// Пропускаем точку и копируем остаток.
					ОставшийсяПутьКЗначению = СокрЛП(Сред(ПутьКЗначению, НомерСимвола + 2))
				КонецЕсли; 
				
				Прервать
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Убираем скобки по краям.
		ТекущийКлюч = Лев(ТекущийКлюч, СтрДлина(ТекущийКлюч) - 1);
		ТекущийКлюч = СокрЛП(Сред(ТекущийКлюч, 2));
		
		// Вычисляем текущий Ключ.
		ТекущийКлюч = ЗначениеИзКолонкиКод(ВременныеПеременные, ТекущийКлюч, "");
		
		Если ПромежуточноеЗначение[ТекущийКлюч] = Неопределено Тогда
			Возврат Неопределено
		Иначе
			Если ЗначениеЗаполнено(ОставшийсяПутьКЗначению) Тогда
			
				Возврат ЗначениеВременнойПеременной(ВременныеПеременные, 
							ОставшийсяПутьКЗначению, ПромежуточноеЗначение[ТекущийКлюч])
			Иначе
				Возврат ПромежуточноеЗначение[ТекущийКлюч]
			КонецЕсли; 
			
		КонецЕсли;
	
	Иначе
		// Обычный ключ
		ПозицияТочки = СтрНайти(ПутьКЗначению, ".");
		
		Если ПозицияТочки = 0 Тогда
			// Это крайний справа ключ.
			Возврат ПромежуточноеЗначение[ПутьКЗначению]
		Иначе
			
			ТекущийКлюч = СокрЛП(Лев(ПутьКЗначению, ПозицияТочки - 1));
			
			Если ПромежуточноеЗначение[ТекущийКлюч] = Неопределено Тогда
				Возврат Неопределено
			Иначе
				ОставшийсяПутьКЗначению = СокрЛП(Сред(ПутьКЗначению, ПозицияТочки + 1));
				Возврат ЗначениеВременнойПеременной(ВременныеПеременные, 
							ОставшийсяПутьКЗначению, ПромежуточноеЗначение[ТекущийКлюч])
			КонецЕсли; 
			
		КонецЕсли
		
	КонецЕсли; 
	
КонецФункции

Функция ВыполнитьФункциюПриЗагрузке(ВременныеПеременные, СтрокаКода)

	Если СтрНачинаетсяС(СокрЛП(СтрокаКода), "ФУНК.") Тогда	
		ИмяПроцедурыСПараметрами = СокрЛП(Сред(СокрЛП(СтрокаКода), 6))	
	КонецЕсли; 
	
	ПозицияЛевойСкобки = СтрНайти(ИмяПроцедурыСПараметрами, "(");
	
	Если ПозицияЛевойСкобки < 2 Тогда		
		ВызватьИсключение "В выражении " + СтрокаКода + " в макете загрузки не указано имя процедуры или пропущены скобки!"	
	КонецЕсли;
	
	ИмяПроцедуры = СокрЛП(Лев(ИмяПроцедурыСПараметрами, ПозицияЛевойСкобки - 1));
	
	СтрокаПараметров = "";
	Если СтрДлина(ИмяПроцедурыСПараметрами) > ПозицияЛевойСкобки Тогда	
		
		СтрокаПараметров = СокрЛП(Сред(ИмяПроцедурыСПараметрами, ПозицияЛевойСкобки + 1));
		Если Прав(СтрокаПараметров, 1)= ")" Тогда
			Если СтрДлина(СтрокаПараметров) > 1 Тогда			
				СтрокаПараметров = СокрЛП(Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров) - 1))
			Иначе
				СтрокаПараметров = ""
			КонецЕсли;					
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПозицияТочки = СтрНайти(ИмяПроцедуры, ".");
	Если ПозицияТочки = 0 Тогда	
		ИмяПроцедуры = "РегламентированнаяОтчетностьАЛКО." + ИмяПроцедуры	
	КонецЕсли; 
	
	ПараметрыПроцедуры = Новый Массив;
	
	СтрПараметры = СтрРазделить(СтрокаПараметров, ",", Истина);
	Для каждого СтрПараметр Из СтрПараметры Цикл
		
		Параметр = Неопределено;
		
		Если ЗначениеЗаполнено(СтрПараметр) Тогда		
			Параметр = ЗначениеИзКолонкиКод(ВременныеПеременные, СокрЛП(СтрПараметр), "")		
		КонецЕсли; 
		
		ПараметрыПроцедуры.Добавить(Параметр)
		
	КонецЦикла;
	
	Результат = Неопределено;
	ПараметрыПроцедуры.Добавить(Результат);
	
	ВыполнитьМетодКонфигурацииАЛКО(ИмяПроцедуры, ПараметрыПроцедуры);
	
	Результат = ПараметрыПроцедуры[ПараметрыПроцедуры.ВГраница()];
	
	Возврат Результат

КонецФункции 
 
Процедура ОбработатьУзелДанныхЗагрузки(Параметры,
									   КвоСтрок, ТабРегРаздел, 
									   ДопДанныеРаздела, ДанныеРаздела,
									   СписокТекущегоУровня)

	Перем ДокументОтчета;
	Перем УзелДанных, СоответствиеУзловОчистки;
	Перем УзелСправочники, СхемаЗагрузкиСправочников;
	Перем КоллекцияСписковВыбора;
	
	Перем СписокСправочников, ВременныеПеременные, КэшУзловСправочников;
	Перем НомерРаздела, ИндексНовойСтроки;
	
	Параметры.Свойство("ДокументОтчета", 			ДокументОтчета);
	Параметры.Свойство("УзелДанных", 				УзелДанных);
	Параметры.Свойство("УзелСправочники", 			УзелСправочники);
	Параметры.Свойство("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
	Параметры.Свойство("СоответствиеУзловОчистки", 	СоответствиеУзловОчистки);
	Параметры.Свойство("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
	
	Параметры.Свойство("СписокСправочников", 		СписокСправочников);
	Параметры.Свойство("ВременныеПеременные", 		ВременныеПеременные);
	Параметры.Свойство("НомерРаздела", 				НомерРаздела);
	Параметры.Свойство("ИндексНовойСтроки", 		ИндексНовойСтроки);
	Параметры.Свойство("КэшУзловСправочников", 		КэшУзловСправочников);
	
	ТекКодУзла = УзелДанных.Код;
	УзелЗагрузки = СписокТекущегоУровня.Получить(ТекКодУзла);
	
	Если УзелЗагрузки = Неопределено Тогда
		//Например, ТекКодУзла "ПN". Т.е узел не используется в загрузке.
		Возврат	
	КонецЕсли;
	
	Если УзелЗагрузки.Тип = "С" ИЛИ УзелЗагрузки.Тип = "C" Тогда
		
		ОчиститьВременныеПеременные(ВременныеПеременные, СоответствиеУзловОчистки, ТекКодУзла);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ДокументОтчета", 			ДокументОтчета);
		ПараметрыЗаполнения.Вставить("УзелДанных", 				УзелДанных);
		ПараметрыЗаполнения.Вставить("УзелЗагрузкиДанных", 		УзелЗагрузки);
		ПараметрыЗаполнения.Вставить("СоответствиеУзловОчистки", СоответствиеУзловОчистки);
		ПараметрыЗаполнения.Вставить("УзелСправочники", 		УзелСправочники);
		ПараметрыЗаполнения.Вставить("СхемаЗагрузкиСправочников", СхемаЗагрузкиСправочников);
		ПараметрыЗаполнения.Вставить("КоллекцияСписковВыбора", 	КоллекцияСписковВыбора);
		
		ПараметрыЗаполнения.Вставить("СписокСправочников", 		СписокСправочников);
		ПараметрыЗаполнения.Вставить("ВременныеПеременные", 	ВременныеПеременные);
		ПараметрыЗаполнения.Вставить("НомерРаздела", 			НомерРаздела);
		ПараметрыЗаполнения.Вставить("ИндексНовойСтроки", 		ИндексНовойСтроки);
		ПараметрыЗаполнения.Вставить("КэшУзловСправочников", 	КэшУзловСправочников);
		
		НачалоНовойСтроки = Ложь;
		// Узел со строками.
		Если ВСтрокеВсеЦифры(УзелЗагрузки.НачалоНовойСтрокиРаздела) Тогда
		
			// Начало новой строки раздела.
			
			НачалоНовойСтроки = Истина;
			
			НомерРазделаНовойСтроки = Число(УзелЗагрузки.НачалоНовойСтрокиРаздела);
			КвоСтрок[НомерРазделаНовойСтроки] = КвоСтрок[НомерРазделаНовойСтроки] + 1;
			НоваяСтрока = ТабРегРаздел[НомерРазделаНовойСтроки].Добавить();
			НоваяСтрока.Документ = ДокументОтчета;
			НоваяСтрока.ИндексСтроки = КвоСтрок[НомерРазделаНовойСтроки];
			ИндексНовойСтрокиРаздела = ТабРегРаздел[НомерРазделаНовойСтроки].Количество() - 1;
			
			ПараметрыЗаполнения.Вставить("НомерРаздела", 			НомерРазделаНовойСтроки);
			ПараметрыЗаполнения.Вставить("ИндексНовойСтроки", 		ИндексНовойСтрокиРаздела);
			
		КонецЕсли;	
		
		ЗаполнитьДанныеПриЗагрузке(	ПараметрыЗаполнения,
									КвоСтрок, ТабРегРаздел, 
									ДопДанныеРаздела, ДанныеРаздела);
										
		ПараметрыЗаполнения.Свойство("СписокСправочников", 		СписокСправочников);
		ПараметрыЗаполнения.Свойство("ВременныеПеременные", 	ВременныеПеременные);
		ПараметрыЗаполнения.Свойство("НомерРаздела", 			НомерРаздела);
		ПараметрыЗаполнения.Свойство("ИндексНовойСтроки", 		ИндексНовойСтроки);
		ПараметрыЗаполнения.Свойство("КэшУзловСправочников", 	КэшУзловСправочников);
			
		Если НачалоНовойСтроки Тогда
		
			// Заполняем итоги.
			НоваяСтрока = ТабРегРаздел[НомерРазделаНовойСтроки][ИндексНовойСтрокиРаздела];
			Колонки = ТабРегРаздел[НомерРазделаНовойСтроки].Колонки;
			Для каждого Колонка Из Колонки Цикл
			
				Если ТипЗнч(НоваяСтрока[Колонка.Имя]) = Тип("Число") Тогда
					
					ЗначениеПоказателя = 0;
					Если ДопДанныеРаздела.Свойство(Колонка.Имя, ЗначениеПоказателя) Тогда
						ДопДанныеРаздела[Колонка.Имя] = НоваяСтрока[Колонка.Имя] + ЗначениеПоказателя;
					Иначе
						ДопДанныеРаздела.Вставить(Колонка.Имя, НоваяСтрока[Колонка.Имя]);
					КонецЕсли;
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЕсли; 
			
	Иначе
		
		ИмяВременнойПеременной = УзелЗагрузки.ВременнаяПеременная;
		ИмяРесурса = УзелЗагрузки.РесурсРегистра;
		ИмяДанных = УзелЗагрузки.ИмяДанных;
		ИмяДопДанных = УзелЗагрузки.ИмяДопДанных;
		
		// Иногда в Узле содержатся данные, которых быть не должно.
		// Например в взаимоисключающие группы, которые
		// одновременно присутствовать не должны в данных.
		// Но как выяснилось при отладке, РегламентированнаяОтчетностьЗагрузка.УзлыПоXPath
		// могут выдать в данных группу, которой быть не должно, и тогда помимо
		// "правильной" группы с реальными данными, есть еще "неправильная", с пустыми данными.
		// Без проверки, которая ниже - затираются правильные данные.
		ПеременнаяНеЗаполнена = Истина;
		НоваяСтрокаНеЗаполнена = Истина;
		
		Если ЗначениеЗаполнено(ИмяРесурса) Тогда
			
			Если НомерРаздела = Неопределено ИЛИ ИндексНовойСтроки = Неопределено Тогда				
				ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ОбработатьУзелДанныхЗагрузки() 
								|не переданы параметры НомерРаздела и/или ИндексНовойСтроки!"
			Иначе
				НоваяСтрока = ТабРегРаздел[НомерРаздела][ИндексНовойСтроки];
				Если ЗначениеЗаполнено(НоваяСтрока[ИмяРесурса])
					И (НЕ ТипЗнч(НоваяСтрока[ИмяРесурса])= Тип("Булево")) Тогда
				
					НоваяСтрокаНеЗаполнена = Ложь
				
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
				
		// Не группа.
		Если УзелЗагрузки.Тип = "Идентификатор"  Тогда
						
			// Читаем справочник.
			Идентификатор = УзелДанных.Значение;
			СтрИдентификатор = ?(ТипЗнч(Идентификатор) = Тип("Число"), 
								СтрокаЧГ0(Идентификатор), Строка(Идентификатор));
								
			Если ЗначениеЗаполнено(СтрИдентификатор) Тогда
			
				ИмяСправочника = УзелЗагрузки.Справочник;
				
				Если КэшУзловСправочников.Получить(ИмяСправочника) = Неопределено Тогда				
					КэшУзловСправочников.Вставить(ИмяСправочника, Новый Соответствие)				
				КонецЕсли;
				
				НовыйЭлемент = Ложь;
				СоответствиеЭлементаСправочника = КэшУзловСправочников[ИмяСправочника].Получить(Идентификатор);
				Если СоответствиеЭлементаСправочника = Неопределено Тогда
					
					// Ищем имя идентификатора справочника.
					СписокСправочника = СписокСправочников.Получить(ИмяСправочника);
					Если СписокСправочника = Неопределено Тогда
						
						Если ЗначениеЗаполнено(СхемаЗагрузкиСправочников) Тогда
						
							УзелЗагрузкиСправочника = УзлыПоXPath(СхемаЗагрузкиСправочников, "//" + ИмяСправочника)[0];
							СписокСправочника = СписокСправочника(УзелЗагрузкиСправочника);						
							СписокСправочников.Вставить(ИмяСправочника, СписокСправочника);
							
						Иначе
							ВызватьИсключение "Не считана схема загрузки справочников! В схеме загрузки нет области Справочники, вероятно." 
						КонецЕсли; 
												
					КонецЕсли; 
					
					ИмяИдентификатора = "";
					Для каждого КлючЗначение Из СписокСправочника Цикл				
						Если КлючЗначение.Значение.Тип = "Идентификатор" Тогда					
							ИмяИдентификатора = КлючЗначение.Ключ;
							Прервать					
						КонецЕсли				
					КонецЦикла; 
					
					УзелЭлементаСправочника = УзелСправочникаВыгрузкиПоИд(
										Идентификатор, УзелСправочники, ИмяСправочника, 
										ИмяИдентификатора, Новый Соответствие);
										
					// Читаем в соответствие.
					СоответствиеЭлементаСправочника = ЭлементСправочникаВСоответствие(
													УзелЭлементаСправочника, СписокСправочника);
													
					// Фиксируем во временных переменных для возможности дополнительной обработки.								
					ВременныеПеременные.Вставить(ИмяВременнойПеременной, СоответствиеЭлементаСправочника);
					
					// Смотрим что осталось заполнить, и если есть дополнительная обработка
					// через ВП, КОНСТ или ФУНК - обработаем.
					СписокСправочникаДопОбработки = ОбщегоНазначения.СкопироватьРекурсивно(СписокСправочника);
					ДопОбработкаСправочника(СоответствиеЭлементаСправочника, 
											СписокСправочникаДопОбработки,
											ВременныеПеременные);
										
					КэшУзловСправочников[ИмяСправочника].Вставить(
										Идентификатор, СоответствиеЭлементаСправочника);				
				КонецЕсли;
								 
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, СоответствиеЭлементаСправочника);
											
			КонецЕсли;	
						
		ИначеЕсли УзелЗагрузки.Тип = "Адрес" Тогда
						
			СтруктураАдреса = Неопределено;
			ПредставлениеАдреса = "";
			АдресXML = АдресИзВыгрузки(УзелДанных, СтруктураАдреса, ПредставлениеАдреса);
			ВременныеПеременные.Вставить(ИмяВременнойПеременной, СтруктураАдреса);
			ВременныеПеременные.Вставить(ИмяВременнойПеременной + "XML", АдресXML);
			ВременныеПеременные.Вставить(ИмяВременнойПеременной + "Представление", ПредставлениеАдреса);
			
		ИначеЕсли УзелЗагрузки.Тип = "ВнТаблица" Тогда
			
			Если НЕ ТипЗнч(ВременныеПеременные[ИмяВременнойПеременной]) = Тип("ТаблицаЗначений") Тогда			
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, Новый ТаблицаЗначений)
			КонецЕсли;
			
			ДобавитьСтрокуВнутреннейТаблицы(УзелДанных, УзелЗагрузки,
											ВременныеПеременные[ИмяВременнойПеременной]);
						
		Иначе
			
			ЗначениеДанных = УзелДанных.Значение;
			
			ПроверятьНаПростыеТипы = Истина;			
			ЗначениеДанных = ПривестиКНужномуТипу(ЗначениеДанных, УзелЗагрузки.Тип, УзелЗагрузки.Код, ПроверятьНаПростыеТипы);
			
			Если ЗначениеЗаполнено(ИмяВременнойПеременной) Тогда
				
				ВременныеПеременные.Вставить(ИмяВременнойПеременной, ЗначениеДанных);
				
				Если Лев(ИмяВременнойПеременной, 3) = "Код" Тогда
					// Нужно определить Вид.
					Суффикс = Сред(ИмяВременнойПеременной, 4);
					ИмяВременнойПеременнойВида = "Вид" + Суффикс;
					
					ИмяСпискаВыбора = УзелЗагрузки.Справочник;
					ТабВыбора = КоллекцияСписковВыбора[ИмяСпискаВыбора];
					
					ВидВыбора = ТабВыбора.Найти(ЗначениеДанных, "Код");
					Если ВидВыбора = Неопределено Тогда
						ВременныеПеременные.Вставить(ИмяВременнойПеременнойВида, 
												НСтр("ru = 'Нет такого кода в списке выбора'"));
					Иначе
						ВременныеПеременные.Вставить(ИмяВременнойПеременнойВида, ВидВыбора[1])					
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяРесурса) И НоваяСтрокаНеЗаполнена Тогда
				НоваяСтрока[ИмяРесурса] = ЗначениеДанных				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяДанных) Тогда
				ДанныеРаздела.Вставить(ИмяДанных, ЗначениеДанных)								
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяДопДанных) Тогда
				ДопДанныеРаздела.Вставить(ИмяДопДанных, ЗначениеДанных)				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(УзелДанных.Обязательность, "М") = 0
			И СтрНайти(УзелДанных.Обязательность, "M") = 0 Тогда
			// Убираем для не множественных узлов,
			// чтобы не обрабатывать потом в ОбработкаПеременныхЗагрузки().
			СписокТекущегоУровня.Удалить(ТекКодУзла)
		
		КонецЕсли; 
		
		
	КонецЕсли; 
	
	Параметры.Вставить("СписокСправочников", 		СписокСправочников);
	Параметры.Вставить("ВременныеПеременные", 		ВременныеПеременные);
	Параметры.Вставить("НомерРаздела", 				НомерРаздела);
	Параметры.Вставить("ИндексНовойСтроки", 		ИндексНовойСтроки);
	Параметры.Вставить("КэшУзловСправочников", 		КэшУзловСправочников);
		
КонецПроцедуры
 
Функция СписокСправочника(УзелЗагрузкиСправочника, Список = Неопределено)

	Если Список = Неопределено Тогда	
		Список = Новый Соответствие	
	КонецЕсли; 
	
	Список.Вставить(УзелЗагрузкиСправочника.Код, УзелЗагрузкиСправочника);
	
	Для каждого УзелЗагрузкиСправочникаПодчиненный Из УзелЗагрузкиСправочника.Строки Цикл					
				
		Если УзелЗагрузкиСправочникаПодчиненный.Тип = "С" 
			ИЛИ УзелЗагрузкиСправочникаПодчиненный.Тип = "C" 
			ИЛИ УзелЗагрузкиСправочникаПодчиненный.Тип = "М" 
			ИЛИ УзелЗагрузкиСправочникаПодчиненный.Тип = "M"
			Тогда		
			Список = СписокСправочника(УзелЗагрузкиСправочникаПодчиненный, Список)
		Иначе
			Список.Вставить(УзелЗагрузкиСправочникаПодчиненный.Код, УзелЗагрузкиСправочникаПодчиненный);
		КонецЕсли; 
							
	КонецЦикла;
	
	Возврат Список

КонецФункции
 
Функция ЭлементСправочникаВСоответствие(УзелЭлементаСправочника, СписокСправочника, 
											СоответствиеЭлементаСправочника = Неопределено)
	Если СоответствиеЭлементаСправочника = Неопределено Тогда	
		СоответствиеЭлементаСправочника = Новый Соответствие	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелЭлементаСправочника) Тогда	
		Возврат	СоответствиеЭлементаСправочника	
	КонецЕсли;
	
	КодУзла = УзелЭлементаСправочника.Код;
	УзелЗагрузки = СписокСправочника.Получить(КодУзла);
	
	Если УзелЗагрузки = Неопределено Тогда
		// Т.е узел не используется в загрузке.
		Возврат	СоответствиеЭлементаСправочника
	КонецЕсли;
	
	Если УзелЗагрузки.Тип = "М" 
		ИЛИ УзелЗагрузки.Тип = "M" Тогда
		
		Если СоответствиеЭлементаСправочника.Получить(УзелЗагрузки.Код) = Неопределено Тогда		
			СоответствиеЭлементаСправочника.Вставить(УзелЗагрузки.Код, Новый Соответствие)		
		КонецЕсли; 
				
		Для каждого УзелСправочника Из УзелЭлементаСправочника.Строки Цикл
			// УзелСправочника - "Лицензия".
			// Определим Ид.
			Ид = "";
			Для каждого УзелПодч Из УзелСправочника.Строки Цикл
				
				УзелЗагрузкиИд = СписокСправочника.Получить(УзелПодч.Код);
				Если УзелЗагрузкиИд = Неопределено Тогда
					// Т.е узел не используется в загрузке.
					Продолжить
				КонецЕсли;
				
				Если УзелЗагрузкиИд.Тип = "ВнутИдентиф" Тогда					
					Ид = УзелПодч.Значение;
					Прервать					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ид) Тогда
			
				СоответствиеЭлементаСправочника[УзелЗагрузки.Код].Вставить(Ид, Новый Соответствие);
				ОбработатьУзелДанныхЗагрузкиСправочника(УзелСправочника, СписокСправочника, 
							СоответствиеЭлементаСправочника[УзелЗагрузки.Код][Ид])
			
			КонецЕсли; 
						
		КонецЦикла;
		
	Иначе	
		
		Для каждого Узел Из УзелЭлементаСправочника.Строки Цикл
			ОбработатьУзелДанныхЗагрузкиСправочника(Узел, СписокСправочника, 
											СоответствиеЭлементаСправочника)
		КонецЦикла;
		
	КонецЕсли; 
			
	Возврат СоответствиеЭлементаСправочника

КонецФункции

Процедура ОбработатьУзелДанныхЗагрузкиСправочника(Узел, СписокСправочника, 
											СоответствиеЭлементаСправочника)

	КодУзла = Узел.Код;
	УзелЗагрузки = СписокСправочника.Получить(КодУзла);
	
	Если УзелЗагрузки = Неопределено Тогда
		// Т.е узел не используется в загрузке.
		Возврат
	КонецЕсли;
	
	Если НЕ УзелЗагрузки = Неопределено Тогда
	
		Если УзелЗагрузки.Тип = "С" 
			ИЛИ УзелЗагрузки.Тип = "C"  
			ИЛИ УзелЗагрузки.Тип = "М" 
			ИЛИ УзелЗагрузки.Тип = "M" 
			Тогда		
			СоответствиеЭлементаСправочника = ЭлементСправочникаВСоответствие(
													Узел, СписокСправочника, 
													СоответствиеЭлементаСправочника)
		Иначе
			
			ИмяВременнойПеременной = УзелЗагрузки.ВременнаяПеременная;
			
			// Иногда в Узле содержатся данные, которых быть не должно.
			// Например в справочнике Контрагенты есть группа ЮЛ и ФЛ, которые
			// одновременно присутствовать не должны в данных.
			// Но как выяснилось при отладке, РегламентированнаяОтчетностьЗагрузка.УзлыПоXPath
			// могут выдать в данных группу, которой быть не должно, и тогда есть и группа ЮЛ и ФЛ,
			// поле ИНН в обеих и без проверки, 
			// которая ниже - затираются правильные данные, в частности ИНН.
			Если НЕ ЗначениеЗаполнено(СоответствиеЭлементаСправочника[ИмяВременнойПеременной]) Тогда
			
				Если УзелЗагрузки.Тип = "Адрес"  Тогда
					
					СтруктураАдреса = Неопределено;
					ПредставлениеАдреса = "";
					АдресXML = АдресИзВыгрузки(Узел, СтруктураАдреса, ПредставлениеАдреса);
					СоответствиеЭлементаСправочника.Вставить(ИмяВременнойПеременной, СтруктураАдреса);
					СоответствиеЭлементаСправочника.Вставить(ИмяВременнойПеременной + "XML", АдресXML);
					СоответствиеЭлементаСправочника.Вставить(ИмяВременнойПеременной + "Представление", 
																				ПредставлениеАдреса);
			
				Иначе
					
					ЗначениеУзла = Узел.Значение;
					
					ПроверятьНаПростыеТипы = Ложь;
					ЗначениеУзла = ПривестиКНужномуТипу(ЗначениеУзла, УзелЗагрузки.Тип, УзелЗагрузки.Код, ПроверятьНаПростыеТипы);
										
					СоответствиеЭлементаСправочника.Вставить(ИмяВременнойПеременной, ЗначениеУзла)
					
				КонецЕсли;	
			
			КонецЕсли; 
						
		КонецЕсли;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДопОбработкаСправочника(СоответствиеЭлементаСправочника, 
								  СписокСправочника, ВременныеПеременные)

	ДопОбработкаСправочника = Истина;
	Для каждого КлючЗначение Из СписокСправочника Цикл
	
		УзелЗагрузки = КлючЗначение.Значение;
		
		Код = УзелЗагрузки.Код;
		Тип = УзелЗагрузки.Тип;
		ИмяВременнойПеременной = УзелЗагрузки.ВременнаяПеременная;
		
		Если ЗначениеЗаполнено(ИмяВременнойПеременной) Тогда
		
			Значение = ЗначениеИзКолонкиКод(ВременныеПеременные, Код, Тип, ДопОбработкаСправочника);
			Если ТипЗнч(Значение) = Тип("Строка") И Значение = "$ЭтоНеСтрокаДопОбработки" Тогда			
				Продолжить			
			КонецЕсли; 
			
			СоответствиеЭлементаСправочника.Вставить(ИмяВременнойПеременной, Значение)
			
		КонецЕсли; 
			
	КонецЦикла; 

КонецПроцедуры
 
Функция УзлыПоXPath(УзелДерева, ВыражениеXPath)

	Возврат РегламентированнаяОтчетностьЗагрузка.УзлыПоXPath(УзелДерева, ВыражениеXPath)

КонецФункции

Функция СкопированныйУзел(Родитель, Узел, ПолеПоиска = "", ЗначениеПоиска = Неопределено)
	
	УзелРодитель = Узел.Родитель;
	Если УзелРодитель = Неопределено Тогда
		УзелРодитель = Узел.Владелец();
	КонецЕсли;
	
	ИндексКопируемогоУзла = УзелРодитель.Строки.Индекс(Узел);
	
	Если ЗначениеПоиска <> Неопределено Тогда
		// Используем поиск единственного значения для ускорения
		// при добавлении большого количества одинаковых узлов.
		СтрокиСТемЖеКодом = Новый Массив;
		НайденнаяСтрока = Родитель.Строки.Найти(ЗначениеПоиска, ПолеПоиска, Ложь);
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Код = Узел.Код Тогда
			СтрокиСТемЖеКодом.Добавить(НайденнаяСтрока);
		КонецЕсли;
	Иначе
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	КонецЕсли;
	
	МаксИндекс = -1;
	
	// Находим узел в максимальным индексом с тем же кодом,
	// что и у копируемого и добавляем его сразу после найденного элемента.
	МаксИндексМассиваСтрок = СтрокиСТемЖеКодом.ВГраница();
	Если МаксИндексМассиваСтрок >= 0 Тогда
		ИндексПоследнейСтроки = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[МаксИндексМассиваСтрок]);
		Если ИндексПоследнейСтроки >= (МаксИндексМассиваСтрок + ИндексКопируемогоУзла) Тогда
			МаксИндекс = ИндексПоследнейСтроки;
		Иначе
			Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
				ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
				Если ТекИндекс > МаксИндекс Тогда
					МаксИндекс = ТекИндекс;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	
	// Если аналогичный узел не найден или найденный узел - последний.
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки, Значение");
	НовыйУзел.Значение = Неопределено;
	
	Для Каждого Стр Из Узел.Строки Цикл
		СкопированныйУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопированныйУзелМУР(Родитель, Узел, ОчищатьЗначения = Истина)
	
	НовыйУзел = Родитель.Строки.Добавить();
	
	// Копируем узел многоуровневого раздела.
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	КоличествоКолонок = НовыйУзел.Владелец().Колонки.Количество();
	Для Инд = 0 По КоличествоКолонок - 1 Цикл
		
		ЗначениеКолонкиУзла = НовыйУзел[Инд];
		
		Если ТипЗнч(ЗначениеКолонкиУзла) = Тип("Структура") Тогда
			НовыйУзел[Инд] = СкопированнаяСтруктура(ЗначениеКолонкиУзла, ОчищатьЗначения);
		ИначеЕсли ТипЗнч(ЗначениеКолонкиУзла) = Тип("ДеревоЗначений") Тогда
			СкопированноеДерево = СкопироватьКолонкиДерева(Узел);
			Для Каждого УзелПервогоУровня Из ЗначениеКолонкиУзла.Строки Цикл
				СкопированныйУзелМУР(СкопированноеДерево, УзелПервогоУровня, ОчищатьЗначения);
			КонецЦикла;
			НовыйУзел[Инд] = СкопированноеДерево;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПодчиненныйУзел Из Узел.Строки Цикл
		
		СкопированныйУзелМУР(НовыйУзел, ПодчиненныйУзел, ОчищатьЗначения);
		
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопированнаяСтруктура(Источник, ОчищатьЗначения = Ложь) 
	
	Приемник = Новый Структура;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Источник Цикл
			Если Элемент.Значение = Неопределено Тогда
				Приемник.Вставить(Элемент.Ключ);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДеревоЗначений") Тогда
				СкопированноеДерево = СкопироватьКолонкиДерева(Элемент.Значение);
				Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
					СкопированныйУзелМУР(СкопированноеДерево, СтрокаДерева, ОчищатьЗначения);
				КонецЦикла;
				Приемник.Вставить(Элемент.Ключ, СкопированноеДерево);
			Иначе
				ЗначениеЭлемента = Элемент.Значение;
				Если ОчищатьЗначения Тогда
					Типы = Новый Массив;
					Типы.Добавить(ТипЗнч(ЗначениеЭлемента));
					ОписаниеТиповЗначения = Новый ОписаниеТипов(Типы);
					ЗначениеЭлемента = ОписаниеТиповЗначения.ПривестиЗначение();
				КонецЕсли;
				Приемник.Вставить(Элемент.Ключ, ЗначениеЭлемента);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Функция СкопироватьКолонкиДерева(Источник)
	
	Приемник = Новый ДеревоЗначений;
	
	Если ТипЗнч(Источник) = Тип("ДеревоЗначений") Тогда
		КолонкиИсточника = Источник.Колонки;
	Иначе
		КолонкиИсточника = Источник.Владелец().Колонки;
	КонецЕсли;
	
	Для Каждого КолонкаИсточника Из КолонкиИсточника Цикл
		Приемник.Колонки.Добавить(КолонкаИсточника.Имя,
								  КолонкаИсточника.ТипЗначения,
								  КолонкаИсточника.Заголовок,
								  КолонкаИсточника.Ширина);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

Процедура ЗначениеЗаполненоПриЗагрузке(Значение, Результат) Экспорт

	Результат = ЗначениеЗаполнено(Значение)

КонецПроцедуры
 
Процедура ВыборНаименованияПриЗагрузке(Фамилия, Имя,  Отчество, НаименованиеОтправителя, Результат) Экспорт

	Результат = "";
	
	Если ЗначениеЗаполнено(Фамилия) Тогда
	
		Результат = Строка(Фамилия) + ?(ЗначениеЗаполнено(Имя), " " + Строка(Имя), "")
					+ ?(ЗначениеЗаполнено(Отчество), " " + Строка(Отчество), "")
					
	ИначеЕсли ЗначениеЗаполнено(НаименованиеОтправителя) Тогда
		
		Результат = Строка(НаименованиеОтправителя)
	
	КонецЕсли; 

КонецПроцедуры
 
// Выбор адреса из выгрузки при загрузке, когда в схеме данных есть российский и иностранный адрес,
// но заполнено должно быть только что то одно.
Процедура ВыборАдресаПриЗагрузке(АдресXML, АдресПредставление,  
								КодСтраны, ИностранныйАдрес, Результат) Экспорт
	Результат = Новый Соответствие;
		
	Если ЗначениеЗаполнено(ИностранныйАдрес) Тогда
		// Это иностранный адрес.
		СтруктураАдреса = ПолучитьПустуюСтруктуруАдреса();
		
		Если ТипЗнч(КодСтраны) = Тип("Число") Тогда		
			СтрКодСтраны = СтрокаЧГ0(КодСтраны)
		Иначе
			СтрКодСтраны = Строка(КодСтраны)
		КонецЕсли;
		
		Если СтрДлина(СтрКодСтраны) = 3 Тогда
				
			// Результат возвращаемый УправлениеКонтактнойИнформацией.ДанныеСтраныМира(КодСтраны)
			// Структура
			//	*	"Ссылка"
			//	*	"Код"
			//	*	"Наименование"
			//	*	"НаименованиеПолное"
			//	*	"МеждународноеНаименование"
			//	*	"КодАльфа2"
			//	*	"КодАльфа3"
			//	*	"УчастникЕАЭС" Булево

			ДанныеСтраныМира = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СтрКодСтраны);
			НазваниеСтраны = ДанныеСтраныМира.Наименование;
			Если ЗначениеЗаполнено(НазваниеСтраны) Тогда				
				СтруктураАдреса.Вставить("Страна", НазваниеСтраны)			
			КонецЕсли 
		
		КонецЕсли; 
		
		СтруктураАдреса.Вставить("КодСтраны", КодСтраны);			
		
		СтруктураАдреса.Вставить("Представление", ИностранныйАдрес);
		СтруктураАдреса.Вставить("Адрес", ИностранныйАдрес);
		СтруктураАдреса.Вставить("ПредставлениеАдреса", ИностранныйАдрес);
		СтруктураАдреса.Вставить("МуниципальноеПредставление", ИностранныйАдрес);
		//
		//СтруктураАдреса.Удалить("ТипАдреса", "ВСвободнойФорме");
		//		
		ВерсияБСПЧислом = Неопределено;
		ИмяОбщегоМодуляРаботаСАдресами = ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом);

		Попытка
			ОбщийМодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляРаботаСАдресами);
		Исключение

			ТекстСообщения = НСтр("ru='Не найден общий модуль "
				+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			Возврат

		КонецПопытки;
		
		// Преобразуем в формат адресной информации JSON, чтобы получить возможность
		// задействовать штатные средства БСП для восполнения недостающей информации
		// при вызове РаботаСАдресами.СведенияОбАдресе() - вызывается в 
		// ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON().
		АдресВJSON = ОбщийМодульРаботаСАдресами.ПоляАдресаВJSON(СтруктураАдреса);
		АдресВJSON = СтрЗаменить(АдресВJSON, """addressType"": ""Административно-территориальный""",
								"""addressType"": ""ВСвободнойФорме""");
		СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресВJSON, Ложь);
		
		ПолеСтруктурыАдреса = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
		
		Результат.Вставить("СтруктураАдреса", 	СтруктураАдреса);
		Результат.Вставить("XML", 				ПолеСтруктурыАдреса);
		Результат.Вставить("Представление", 	СтруктураАдреса.Представление);
		
	Иначе
		
		// Российский адрес.
		Если ТипЗнч(АдресXML) = Тип("Строка") Тогда		
			// Это строка структуры хранения.
			СтруктураАдреса = СтруктураАдресаИзСтрокиСтруктурыХранения(АдресXML);
			
			Результат.Вставить("СтруктураАдреса", 	СтруктураАдреса);
			Результат.Вставить("XML", 				Строка(АдресXML));
			Результат.Вставить("Представление", 	СтруктураАдреса.Представление);
			
		ИначеЕсли РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоСтруктура(АдресXML) Тогда
			
			СтруктураАдреса = ОбщегоНазначения.СкопироватьРекурсивно(АдресXML);
			
			АдресВJSON = ОбщийМодульРаботаСАдресами.ПоляАдресаВJSON(СтруктураАдреса);
		
			СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(АдресВJSON, Ложь);
			
			ПолеСтруктурыАдреса = СтруктураАдресаВСтрокуСтруктурыХранения(СтруктураАдреса);
			
			Результат.Вставить("СтруктураАдреса", 	СтруктураАдреса);
			Результат.Вставить("XML", 				ПолеСтруктурыАдреса);
			Результат.Вставить("Представление", 	СтруктураАдреса.Представление);
			
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаписатьВнТаблицу(ВнТаблица, Результат) Экспорт

	ПрефиксХранения = РегламентированнаяОтчетностьАЛКО.ПрефиксСтрокиСтруктурыХраненияАдреса();
	
	СтрокаВнутрСтруктурыТаблицы = ЗначениеВСтрокуВнутр(ВнТаблица);	
	Результат = ПрефиксХранения + СтрокаВнутрСтруктурыТаблицы;

КонецПроцедуры
 
Процедура ДобавитьСтрокуВнутреннейТаблицы(УзелДанных, УзелЗагрузки, ТЗ);
	
	Если НЕ ТипЗнч(ТЗ)= Тип("ТаблицаЗначений") Тогда	
		ТЗ = Новый ТаблицаЗначений	
	КонецЕсли; 
	// Получаем список подчиненных узлов по схеме Загрузки.
	СписокТекущегоУровня = Новый Соответствие;
	
	СписокТекущегоУровня.Вставить(УзелЗагрузки.Код, УзелЗагрузки);
	
	Для Каждого УзелЗагрузкиПодч Из УзелЗагрузки.Строки Цикл
		Если НЕ ЗначениеЗаполнено(УзелЗагрузкиПодч.Код) Тогда		
			Продолжить		
		КонецЕсли; 
		СписокТекущегоУровня.Вставить(УзелЗагрузкиПодч.Код, УзелЗагрузкиПодч)
	КонецЦикла;
	
	Если ТЗ.Колонки.Количество() = 0 Тогда
	
		Для каждого УзелЗагрузкиПодч Из УзелЗагрузки.Строки Цикл
		
			Если ЗначениеЗаполнено(УзелЗагрузкиПодч.ВременнаяПеременная) Тогда			
				ТЗ.Колонки.Добавить(УзелЗагрузкиПодч.ВременнаяПеременная)			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 

	НоваяСтрока = ТЗ.Добавить();
	
	// На всякий случай, вдруг в будущем будут не только простые.
	ПроверятьНаПростыеТипы = Ложь; 
	
	Для каждого УзелДанныхПодчиненный Из УзелДанных.Строки Цикл
	
		ТекУзелУзелЗагрузки = СписокТекущегоУровня.Получить(УзелДанныхПодчиненный.Код);
		Если ЗначениеЗаполнено(ТекУзелУзелЗагрузки) Тогда
		
			ИмяКолонки = ТекУзелУзелЗагрузки.ВременнаяПеременная;
			
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда
				
				ЗначениеДанных = УзелДанныхПодчиненный.Значение;
				ЗначениеДанных = ПривестиКНужномуТипу(	ЗначениеДанных, 
														ТекУзелУзелЗагрузки.Тип, ТекУзелУзелЗагрузки.Код, 
														ПроверятьНаПростыеТипы);
				НоваяСтрока[ИмяКолонки] = ЗначениеДанных;
			
			КонецЕсли; 
					
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПоляАдреснойИнформации

Функция РаспознатьПолеЛитера(ЗначениеПоля, Разделитель)

	// Приводим Лит.Б к Лит Б .
	ЗначениеПоляЛитера = СтрЗаменить(ЗначениеПоля, ".", " ");
	
	МассивТипНомерЛитера = СтрРазделить(ЗначениеПоляЛитера, Разделитель, Ложь);
	
	Если МассивТипНомерЛитера.Количество() = 1 Тогда			
		НомерЛитера = МассивТипНомерЛитера[0]
	Иначе
		
		НомерЛитера = МассивТипНомерЛитера[МассивТипНомерЛитера.Количество() - 1];
		
		СловоПередНомером = МассивТипНомерЛитера[МассивТипНомерЛитера.Количество() - 2];
		Если ЕстьЦифра(СловоПередНомером) Тогда		
			НомерЛитера = СловоПередНомером + Разделитель + НомерЛитера		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипЛитеры, НомерЛитеры", "Литера", НомерЛитера)

КонецФункции

Функция РаспознатьПоле( знач ЗначениеПоля, ТипПоля, Разделитель = " ", РазделительОднотипныхЗначений = ",")
	
	// В массиве значения по умолчанию в порядке предпочтения.
	// Используется в случае, еслив исходной строке поле Тип поля не задан.
	// Например вместо дом 3 просто 3. Или вместо корп 4 просто 4.
	СтруктураЗначениеПоУмолчанию = МассивЗначенийПоУмолчаниюТипаАдресногоПоля(ТипПоля); 
	ЗначениеПоУмолчанию = СтруктураЗначениеПоУмолчанию.ЗначениеПоУмолчанию;
	КлючТипа = СтруктураЗначениеПоУмолчанию.КлючТипа;
	
	МассивПоля = РаспознатьМассивПоля(ЗначениеПоля, КлючТипа, Разделитель, РазделительОднотипныхЗначений);
	
	МассивСтандартныхЗначенийТипаПоля = МассивСтандартныхЗначенийТипаАдресногоПоля(ТипПоля);
		
	СокращенияПоля = СокращенияПоля(ТипПоля);
	СписокСокращений = СокращенияПоля.СписокСокращений;
	СписокСоставаБуквСокращений = СокращенияПоля.СписокСоставаБуквСокращений;
	СоотвСокращенийСтандартТипам = СокращенияПоля.СоответствиеСокращенийСтандартнымТипам;
	СоотвОдносимвСокращСтандартнымТипам = СокращенияПоля.СоответствиеОдносимвольныхСокращенийСтандартнымТипам;
	
	МассивОпределенныхСтандартныхТипов = Новый Массив;
	
	// Обработаем Типы со значением default.
	Для каждого СтруктураПоля Из МассивПоля Цикл
		
		Если СтруктураПоля[КлючТипа] = "default" Тогда
			
			Если ЗначениеПоУмолчанию.Количество() > 0 Тогда
			
				СтруктураПоля[КлючТипа] = ЗначениеПоУмолчанию[0];
				// Не может быть двух типов "корпус", 
				// убираем и получаем по индексу 0 следующее значение по умлчанию.
				ЗначениеПоУмолчанию.Удалить(0);
				
				Если ЗначениеПоУмолчанию.Количество() = 0 Тогда					
					// Нет смысла проверять дальше.
					Прервать				
				КонецЕсли 
			
			КонецЕсли			
		
		КонецЕсли		
	
	КонецЦикла;
	
	// Присвоим значениям ТипКорпуса, ТипЗдания, ТипПомещения стандартные значения вместо сокращений.
	// Если сокращение не нашли - ставляем как есть.
	Для каждого СтруктураПоля Из МассивПоля Цикл
		
		НайденСтандартныйТип = Ложь;
		ЗначениеПоКлючуТипа = НРег(СтруктураПоля[КлючТипа]);
		
		ДлинаЗначенияПоКлючуТипа = СтрДлина(ЗначениеПоКлючуТипа);
		ЗначениеПоКлючуТипаСПрописной = "";
		
		Если ДлинаЗначенияПоКлючуТипа > 1 Тогда		
			ЗначениеПоКлючуТипаСПрописной = ВРег(Лев(ЗначениеПоКлючуТипа, 1)) + Сред(ЗначениеПоКлючуТипа, 2)
		ИначеЕсли ДлинаЗначенияПоКлючуТипа = 1 Тогда
			ЗначениеПоКлючуТипаСПрописной = ВРег(ЗначениеПоКлючуТипа)
		КонецЕсли; 
		
		// Проверяем по стандартным значениям.
		ИндексМассиваСтандартныхЗначений = МассивСтандартныхЗначенийТипаПоля.Найти(ЗначениеПоКлючуТипаСПрописной);
		Если НЕ ИндексМассиваСтандартныхЗначений = Неопределено Тогда
		
			СтруктураПоля[КлючТипа] = МассивСтандартныхЗначенийТипаПоля[ИндексМассиваСтандартныхЗначений];
			МассивОпределенныхСтандартныхТипов.Добавить(СтруктураПоля[КлючТипа]);
			
			Продолжить
		
		КонецЕсли; 
		
		// Сначала ищем среди сокращений по ключам сокращений, 
		// с которых должно начинаться сокращение.
		Для каждого Сокращение Из СписокСокращений Цикл
						
			Если СтрНайти(ЗначениеПоКлючуТипа, Сокращение) = 1 Тогда
			
				СтандартныйТип = СоотвСокращенийСтандартТипам.Получить(Сокращение);
				Если НЕ СтандартныйТип = Неопределено Тогда
				
					Если СтрНайти(СтандартныйТип, ",")= 0 Тогда
						
						Если МассивОпределенныхСтандартныхТипов.Найти(СтандартныйТип) = Неопределено Тогда
							
							СтруктураПоля[КлючТипа] = СтандартныйТип;
							МассивОпределенныхСтандартныхТипов.Добавить(СтандартныйТип);
							НайденСтандартныйТип = Истина;
							Прервать
							
						КонецЕсли
						
					Иначе
						
						МассивСтандартныхТипов = СтрРазделить(СтандартныйТип, ",", Ложь);
						Для каждого СтандТип Из МассивСтандартныхТипов Цикл
						
							Если МассивОпределенныхСтандартныхТипов.Найти(СтандТип) = Неопределено Тогда
							
								СтруктураПоля[КлючТипа] = СтандТип;
								МассивОпределенныхСтандартныхТипов.Добавить(СтандТип);
								НайденСтандартныйТип = Истина;
								Прервать
							
							КонецЕсли 
						
						КонецЦикла; 
						
						Если НайденСтандартныйТип Тогда					
							Прервать					
						КонецЕсли 
						
					КонецЕсли				
					
				КонецЕсли				
			
			КонецЕсли
			
		КонецЦикла;
		
		// Если не нашли - ищем по наличию в однобуквенных сокращениях.
		
		Если НЕ НайденСтандартныйТип Тогда
			
			ЗначениеПоКлючуТипаБезТочки = СтрЗаменить(ЗначениеПоКлючуТипа, ".", ""); // д. - д
			
			Если СтрДлина(ЗначениеПоКлючуТипаБезТочки) = 1 Тогда
		
				СтандартныйТип = СоотвОдносимвСокращСтандартнымТипам.Получить(ЗначениеПоКлючуТипаБезТочки);
				Если НЕ СтандартныйТип = Неопределено Тогда
					
					Если СтрНайти(СтандартныйТип, ",")= 0 Тогда
						
						Если МассивОпределенныхСтандартныхТипов.Найти(СтандартныйТип) = Неопределено Тогда
							
							СтруктураПоля[КлючТипа] = СтандартныйТип;
							МассивОпределенныхСтандартныхТипов.Добавить(СтандартныйТип);
							НайденСтандартныйТип = Истина;
							Прервать
							
						КонецЕсли
						
					Иначе
						
						МассивСтандартныхТипов = СтрРазделить(СтандартныйТип, ",", Ложь);
						Для каждого СтандТип Из МассивСтандартныхТипов Цикл
						
							Если МассивОпределенныхСтандартныхТипов.Найти(СтандТип) = Неопределено Тогда
							
								СтруктураПоля[КлючТипа] = СтандТип;
								МассивОпределенныхСтандартныхТипов.Добавить(СтандТип);
								НайденСтандартныйТип = Истина;
								Прервать
							
							КонецЕсли 
						
						КонецЦикла; 
						
						Если НайденСтандартныйТип Тогда					
							Прервать					
						КонецЕсли 
						
					КонецЕсли				
					
				КонецЕсли
				
			КонецЕсли
			
		КонецЕсли;
		
		// Если не нашли - ищем по наличию в сокращении букв.
		Если НЕ НайденСтандартныйТип Тогда
		
			Для каждого СоставБукв Из СписокСоставаБуквСокращений Цикл
				
				ТекЗначениеПоКлючуТипа = ЗначениеПоКлючуТипа;
				
				ЕстьБуквы = Истина;
				МассивБукв = СтрРазделить(СоставБукв, ",", Ложь);
				ИндексБуквы = -1;
				Для каждого Буква Из МассивБукв Цикл
					
					ИндексБуквы = ИндексБуквы + 1;
					
					Если ПустаяСтрока(ТекЗначениеПоКлючуТипа) Тогда
						// Строка уже пустая, а буквы для поиска еще есть.
						ЕстьБуквы = Ложь;
						Прервать					
					КонецЕсли;
					
					ПозБуквы = СтрНайти(ТекЗначениеПоКлючуТипа, Буква); 
					Если ПозБуквы = 0 Тогда	
						ЕстьБуквы = Ложь;
						Прервать					
					КонецЕсли; 
					
					// Первая буква в массиве букв должна быть первой в сокращении.
					Если ИндексБуквы = 0 И ПозБуквы <> 1 Тогда					
						ЕстьБуквы = Ложь;
						Прервать					
					КонецЕсли; 
					
					// Убираем найденную букву, чтобы если указано несколько одинаковых букв,
					// корректно найти другие вхождения.
					ДлинаТекЗначениеПоКлючуТипа = СтрДлина(ТекЗначениеПоКлючуТипа);
					Если ДлинаТекЗначениеПоКлючуТипа = 1 Тогда					
						ТекЗначениеПоКлючуТипа = ""
					Иначе
						
						Если ПозБуквы = 1 Тогда						
							ТекЗначениеПоКлючуТипа = Сред(ТекЗначениеПоКлючуТипа, ПозБуквы + 1)
						ИначеЕсли ПозБуквы = ДлинаТекЗначениеПоКлючуТипа Тогда
							ТекЗначениеПоКлючуТипа = Лев(ТекЗначениеПоКлючуТипа, ПозБуквы - 1)
						Иначе
							ТекЗначениеПоКлючуТипа = Лев(ТекЗначениеПоКлючуТипа, ПозБуквы - 1) 
													+ Сред(ТекЗначениеПоКлючуТипа, ПозБуквы + 1)
						КонецЕсли
												
					КонецЕсли
										
				КонецЦикла; 
				
				Если ЕстьБуквы Тогда
					// Нашли.
					СтандартныйТип = СоотвСокращенийСтандартТипам.Получить(СоставБукв);
					Если НЕ СтандартныйТип = Неопределено Тогда
					
						Если СтрНайти(СтандартныйТип, ",")= 0 Тогда
							
							Если МассивОпределенныхСтандартныхТипов.Найти(СтандартныйТип) = Неопределено Тогда
								
								СтруктураПоля[КлючТипа] = СтандартныйТип;
								МассивОпределенныхСтандартныхТипов.Добавить(СтандартныйТип);
								НайденСтандартныйТип = Истина;
								Прервать
								
							КонецЕсли
							
						Иначе
							
							МассивСтандартныхТипов = СтрРазделить(СтандартныйТип, ",", Ложь);
							Для каждого СтандТип Из МассивСтандартныхТипов Цикл
							
								Если МассивОпределенныхСтандартныхТипов.Найти(СтандТип) = Неопределено Тогда
								
									СтруктураПоля[КлючТипа] = СтандТип;
									МассивОпределенныхСтандартныхТипов.Добавить(СтандТип);
									НайденСтандартныйТип = Истина;
									Прервать
								
								КонецЕсли 
							
							КонецЦикла; 
							
							Если НайденСтандартныйТип Тогда					
								Прервать					
							КонецЕсли 
							
						КонецЕсли				
						
					КонецЕсли	
					
				КонецЕсли;
					
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат МассивПоля	
	
КонецФункции

Функция РаспознатьМассивПоля( знач ЗначениеПоля, КлючТипа = "ТипКорпуса", 
							Разделитель = " ", РазделительОднотипныхЗначений = ",")

	Результат = Новый Массив;
	
	// Для ясности будем считать что это массив корпусов.
	// Отличий для массива помещений нет.
	
	ЗначениеПоляКорпус = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗаменитьСимволНаРазделительЕслиСимволПередЦифрой(
																						ЗначениеПоля, ".", Разделитель);
	
	// Может быть несколько значений, например Корп 2 Стр 7 или Корп 2,Стр 7
	// Сначала пробуем разделить значения по запятой.
	МассивЗначенийКорпусов = СтрРазделить(ЗначениеПоляКорпус, РазделительОднотипныхЗначений, Ложь);
	
	Если МассивЗначенийКорпусов.Количество() > 1 Тогда
	
		Для каждого ЗначениеКорпуса Из МассивЗначенийКорпусов Цикл
		
			ТекМассивКорпуса = РаспознатьМассивПоля(ЗначениеКорпуса, КлючТипа, Разделитель, РазделительОднотипныхЗначений);
			
			Для каждого Корпус Из ТекМассивКорпуса Цикл			
				Результат.Добавить(Корпус)			
			КонецЦикла; 
		
		КонецЦикла; 
		
		Возврат Результат
		
	КонецЕсли;
	
	МассивСлов = СтрРазделить(ЗначениеПоляКорпус, Разделитель, Ложь);
	КолСлов = МассивСлов.Количество();
	МассивЭтоНомер = Новый Массив(КолСлов);
	
	// Пойдем от конца, в конце всегда номер.
	Для Номер = 1 По КолСлов Цикл
	
		ТекИндексМассива = КолСлов - Номер;
		ТекСлово = МассивСлов[ТекИндексМассива];
		
		ЭтоНомер = "0";
		Если Номер = 1 Тогда
			// В конце всегда номер.
			ЭтоНомер = "1"			
		ИначеЕсли ЕстьЦифра(ТекСлово) Тогда
			// Это точно номер.
			ЭтоНомер = "1"
		ИначеЕсли СтрНайти(ТекСлово, ".") > 0 Тогда
			// Это точно НЕ номер.
			ЭтоНомер = "0"
		ИначеЕсли ТекИндексМассива + 1 <= КолСлов - 1 Тогда
			
			Если СтрДлина(ТекСлово) = 1 И МассивЭтоНомер[ТекИндексМассива + 1] = "0" Тогда
				// Это буква и дальше не номер. Например Корп 2 К Стр 3 - буква К.
				ЭтоНомер = "1"
			ИначеЕсли СтрДлина(ТекСлово) = 1 И МассивЭтоНомер[ТекИндексМассива + 1] = "1" Тогда
				// Это буква, после нее номер, нужно смотреть что перед ней.
				// Если перед ней Не номер - это номер, например Корп К 2, 
				// если перед ней номер и уже знаем что после нее номер, то это НЕ номер.
				// Пока ставим "?". Потому что идем с конца и что перед ней неизвестно.
				ЭтоНомер = "?";
				// Но для первого символа очевидно это не номер.
				Если Номер = КолСлов Тогда			
					ЭтоНомер = "0"			
				КонецЕсли
				
			ИначеЕсли СтрДлина(ТекСлово) = 1 И МассивЭтоНомер[ТекИндексМассива + 1] = "?" Тогда
				// Это буква, после нее тоже буква, которая пока не ясно номер или нет.
				// Считаем Не номером.
				ЭтоНомер = "0";
				// Сразу устанавливаем букву под вопросом.
				МассивЭтоНомер.Установить(ТекИндексМассива + 1, "0")
			ИначеЕсли СтрДлина(ТекСлово) > 1 И МассивЭтоНомер[ТекИндексМассива + 1] = "?" Тогда
				// Это слово, после него буква, которая пока не ясно номер или нет.
				ЭтоНомер = "0";
				// Сразу устанавливаем букву под вопросом.
				МассивЭтоНомер.Установить(ТекИндексМассива + 1, "1")			
			КонецЕсли;
		
			Если ЭтоНомер = "1" И МассивЭтоНомер[ТекИндексМассива + 1] = "?" Тогда		
				МассивЭтоНомер.Установить(ТекИндексМассива + 1, "0")		
			КонецЕсли
			
		КонецЕсли;
				
		МассивЭтоНомер.Установить(ТекИндексМассива, ЭтоНомер)
	
	КонецЦикла; 
		
	// Разбиваем на пары ТипКорпуса-Номер, запятыми.
	НовоеЗначениеПоляКорпус = "";
	РазделительВнутриНомера = "-";
	Для Номер = 1 По КолСлов Цикл
		
		
		Если МассивЭтоНомер[Номер - 1] = "1" Тогда 
			// Это номер.
			ТекРазделитель = "";
			Если Номер < КолСлов Тогда
			
				СледующееСловоНомер = (МассивЭтоНомер[Номер] = "1");
				Если НЕ СледующееСловоНомер Тогда				
					ТекРазделитель = РазделительОднотипныхЗначений
				Иначе
					// Два номера подряд быть не может, это один номер.
					ТекРазделитель = РазделительВнутриНомера
				КонецЕсли; 
			
			КонецЕсли; 
			
			НовоеЗначениеПоляКорпус = НовоеЗначениеПоляКорпус + МассивСлов[Номер-1] + ТекРазделитель
			
		Иначе
			// Это типКорпуса. Тип корпуса приводим к нижнему регистру.
			НовоеЗначениеПоляКорпус = НовоеЗначениеПоляКорпус + НРег(МассивСлов[Номер-1]) + Разделитель
		КонецЕсли;  
	
	КонецЦикла;
	
	// Имеем строку, четко разделенную запятыми после номеров.
	// Корп 2,Стр 7 например. Или 2,Стр 7
	// Если пар ТипКорпуса-Номер несколько - выполняем рекурсивно. 
	МассивЗначенийКорпусов = СтрРазделить(НовоеЗначениеПоляКорпус, РазделительОднотипныхЗначений, Ложь);
	
	Если МассивЗначенийКорпусов.Количество() > 1 Тогда
	
		Для каждого ЗначениеКорпуса Из МассивЗначенийКорпусов Цикл
		
			ТекМассивКорпуса = РаспознатьМассивПоля(ЗначениеКорпуса, КлючТипа, Разделитель, РазделительОднотипныхЗначений);
			
			Для каждого Корпус Из ТекМассивКорпуса Цикл			
				Результат.Добавить(Корпус)			
			КонецЦикла; 
		
		КонецЦикла; 
		
		Возврат Результат
		
	КонецЕсли;
	
	// Имеем лишь одну пару ТипКорпуса-Номер в массиве МассивЗначенийКорпусов 
	// и в строке НовоеЗначениеПоляКорпус.	
	НовоеЗначениеПоляКорпус = МассивЗначенийКорпусов[0];
	МассивСлов = СтрРазделить(НовоеЗначениеПоляКорпус, Разделитель, Ложь);
	// Номер в любом случае последний.
	Номер = МассивСлов[МассивСлов.ВГраница()];
	// Удаляем номер.
	МассивСлов.Удалить(МассивСлов.ВГраница());
	
	ТипКорпуса = СтрСоединить(МассивСлов, Разделитель);
	
	Если ПустаяСтрока(ТипКорпуса) Тогда		
		// Первый идет номер, без типа корпуса.
		// Вставляем тип по умолчанию.
		ТипКорпуса = "default"
	КонецЕсли;
	
	Результат.Добавить(Новый Структура(КлючТипа + ", Номер", ТипКорпуса, Номер));
	
	Возврат Результат
	
КонецФункции

Функция СокращенияПоля(ТипПоля)

	Результат = РегламентированнаяОтчетностьАЛКОПовтИсп.СокращенияПоля(ТипПоля);
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Результат)
	
КонецФункции

Функция МассивЗначенийПоУмолчаниюТипаАдресногоПоля(ТипАдресногоПоля)

	// Фиксированный массив нельзя, значения далее при обработке будут удаляться.
	Результат = 
		РегламентированнаяОтчетностьАЛКОПовтИсп.МассивЗначенийПоУмолчаниюТипаАдресногоПоля(ТипАдресногоПоля);

	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Результат)
	
КонецФункции
 
Функция МассивСтандартныхЗначенийТипаАдресногоПоля(ТипАдресногоПоля)

	Результат = РегламентированнаяОтчетностьАЛКОПовтИсп.МассивСтандартныхЗначенийТипаАдресногоПоля(ТипАдресногоПоля);
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(Результат)
	
КонецФункции

Функция СократитьПолеАдреса(Поле, ИмяПоля, МаксимальнаяДлина)

	Если СтрДлина(Поле) < МаксимальнаяДлина Тогда	
		Возврат Поле;	
	КонецЕсли;
	
	Поле = РегламентированнаяОтчетностьАЛКОКлиентСервер.УбратьЛишниеПробелы(Поле);
	
	Если СтрДлина(Поле) < МаксимальнаяДлина Тогда	
		Возврат Поле;	
	КонецЕсли;
	
	СоответствиеСокращаемыхСлов = СокращенияОбъектовАдресацииАдресаРФ();		
			
	Для каждого КлючЗначение Из СоответствиеСокращаемыхСлов Цикл
		
		// Просто использовать СтрЗаменить нельзя,
		// например применение замен "дом" и "владение" на "д." и "вл." для слова домовладение
		// даст "д.овл." при простой замене, а правильная замена "домовл." или "дмвл.".
		Если КлючЗначение.Ключ = "№" Тогда		
			Поле = СтрЗаменить(Поле, КлючЗначение.Ключ, КлючЗначение.Значение);
		Иначе
			Поле = ПолеСтрЗаменить(Поле, КлючЗначение.Ключ, КлючЗначение.Значение);		
		КонецЕсли; 
			
	КонецЦикла; 
	
	Если СтрДлина(Поле) < МаксимальнаяДлина Тогда	
		Возврат Поле;	
	КонецЕсли;
	
	// Повторно уберутся сокращения сокращений,
	// например 
	// при первом проходе 'домовладение' -> 'домовл.'
	// при втором проходе 'домовл.' -> 'дмвл.'
	Для каждого КлючЗначение Из СоответствиеСокращаемыхСлов Цикл
		
		// Просто использовать СтрЗаменить нельзя,
		// например применение замен "дом" и "владение" на "д." и "вл." для слова домовладение
		// даст "д.овл." при простой замене, а правильная замена "домовл." или "дмвл.".
		Если КлючЗначение.Ключ = "№" Тогда		
			Поле = СтрЗаменить(Поле, КлючЗначение.Ключ, КлючЗначение.Значение);
		Иначе
			Поле = ПолеСтрЗаменить(Поле, КлючЗначение.Ключ, КлючЗначение.Значение);		
		КонецЕсли;
	
	КонецЦикла;
	
	Если СтрДлина(Поле) < МаксимальнаяДлина Тогда	
		Возврат Поле;	
	КонецЕсли;
	
	Поле = СтрЗаменить(Поле, ". ", ".");
	
	Если СтрДлина(Поле) < МаксимальнаяДлина Тогда	
		Возврат Поле;	
	КонецЕсли;
	
	Поле = СтрЗаменить(Поле, ", ", ",");
		
	// Все что могли сделали.
	
	Возврат Поле;

КонецФункции

Функция ПолеСтрЗаменить(знач Поле, Подстрока, Замена)
	
	Поле = НРег(Поле);
	ДлинаПодстроки = СтрДлина(Подстрока);
	
	Позиция = СтрНайти(Поле, Подстрока);
	
	ОтработаннаяСтрока = "";
	
	Пока Позиция > 0 Цикл
		
		МожноЗаменить = Истина;
		ИскатьКонецСлова = Ложь;
		
		ПозицияПредыдущегоСимвола = Позиция - 1;
		ПозицияСледующегоСимвола = Позиция + ДлинаПодстроки;
		
		ДлинаПоля = СтрДлина(Поле);
		
		Если Позиция = 1 Тогда // начало строки
		
			// Смотрим следующий символ.
						
			Если ДлинаПоля >= ПозицияСледующегоСимвола Тогда
			
				СледующийСимвол = Сред(Поле, ПозицияСледующегоСимвола, 1);
				
				Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоБуква(СледующийСимвол) Тогда				
					// Значит часть другого слова.
					МожноЗаменить = Ложь;
					ИскатьКонецСлова = Истина;
				КонецЕсли; 
			
			КонецЕсли; 
			
		Иначе
			
			// Смотрим предыдущий и последующий символы.
			
			ПредыдущийСимвол = Сред(Поле, ПозицияПредыдущегоСимвола, 1);
			
			Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоБуква(ПредыдущийСимвол) Тогда				
				// Значит часть другого слова.
				МожноЗаменить = Ложь;				
			КонецЕсли;
			
			Если ДлинаПоля >= ПозицияСледующегоСимвола Тогда
			
				СледующийСимвол = Сред(Поле, ПозицияСледующегоСимвола, 1);
				
				Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоБуква(СледующийСимвол) Тогда				
					// Значит часть другого слова.
					МожноЗаменить = Ложь;
					ИскатьКонецСлова = Истина;
				КонецЕсли; 
			
			КонецЕсли; 
			
		КонецЕсли;
		
		Если МожноЗаменить ИЛИ (НЕ ИскатьКонецСлова) Тогда
		
			ПозицияКонцаСлова = ПозицияСледующегоСимвола - 1;
			
			СтрокаВКоторойМеняем = Лев(Поле, ПозицияКонцаСлова);
			
			Если ДлинаПоля >= ПозицияСледующегоСимвола Тогда
				Поле = Сред(Поле, ПозицияСледующегоСимвола);
			Иначе
				Поле = "";
			КонецЕсли;
			
			Если МожноЗаменить Тогда
				СтрокаВКоторойМеняем = СтрЗаменить(СтрокаВКоторойМеняем, Подстрока, Замена);
			КонецЕсли;
			
			ОтработаннаяСтрока = ОтработаннаяСтрока + СтрокаВКоторойМеняем;
			
		Иначе
			
			// Заменять нельзя, нужно найти все слово, перенести все в ОтработаннаяСтрока,
			// и искать дальше в оставшейся строке.
			ПозицияКонцаСлова = ПозицияСледующегоСимвола;
			
			Для ПозицияКонца = ПозицияСледующегоСимвола + 1 По ДлинаПоля Цикл
			
				СледующийСимвол = Сред(Поле, ПозицияКонца, 1);
				Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоБуква(СледующийСимвол) Тогда					
					ПозицияКонцаСлова = ПозицияКонца;
				Иначе
					ПозицияКонцаСлова = ПозицияКонца - 1;
					Прервать;				
				КонецЕсли; 
			
			КонецЦикла; 
			
			СтрокаВКоторойМеняем = Лев(Поле, ПозицияКонцаСлова);
			
			Если ДлинаПоля >= ПозицияКонцаСлова + 1 Тогда
				Поле = Сред(Поле, ПозицияКонцаСлова + 1);
			Иначе
				Поле = "";
			КонецЕсли;
			
			ОтработаннаяСтрока = ОтработаннаяСтрока + СтрокаВКоторойМеняем;
			
		КонецЕсли; 
		
		Позиция = СтрНайти(Поле, Подстрока);		
	
	КонецЦикла; 
	
	Результат = ОтработаннаяСтрока + Поле;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеОбновлениеИБ

// Обработчик обновления ИБ, заполняющий измерения Организация регистров сведений 
// отчетов подсистемы ОтчетностьПоАлкогольнойПродукции.
// Уникальный идентификатор "559a5d02-e3cd-7777-a06b-c1980bebebbf".
Процедура ПриОбновленииИБЗаполнитьИзмерениеОрганизацияАлко(Параметры = Неопределено) Экспорт

// Неизвестны права пользователя, под которым проходит обновление.
	УстановитьПривилегированныйРежим(Истина);

	СписокРегистров = СписокРегистровСведенийАлкоОтчетов();

	ОбщийРезультат = Новый СписокЗначений;
	Для каждого ЭлементСписка Из СписокРегистров Цикл

		ИмяРегистра = ЭлементСписка.Значение;
		Результат = ЗаполнитьИзмерениеОрганизацияАлко(ИмяРегистра);

		Если ЗначениеЗаполнено(Результат) Тогда
			ОбщийРезультат.Добавить(Результат);
		КонецЕсли;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

	Если ОбщийРезультат.Количество() > 0 Тогда

	// Были ошибки блокировки регистров, надо вызвать исключение,
		// чтобы обработчик был запущен позже еще раз.
		ИтоговаяИнформацияОбОшибке = "";
		Для каждого ЭлементСписка Из ОбщийРезультат Цикл
			ИтоговаяИнформацияОбОшибке = ИтоговаяИнформацияОбОшибке
				+ ЭлементСписка.Значение + "
				|";
		КонецЦикла;

		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение измерения Организация регистров отчетов ФСРАР"
			+ " - ошибка блокировки при заполнении измерения Организация'"), УровеньЖурналаРегистрации.Ошибка, , , ИтоговаяИнформацияОбОшибке);

		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			Параметры.Вставить("ОбработкаЗавершена", Ложь);
		КонецЕсли;

	Иначе

		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			Параметры.Вставить("ОбработкаЗавершена", Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьИзмерениеОрганизацияАлко(ИмяРегистра)

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияРеглОтчет.Организация КАК Организация
		|ИЗ
		|	#РегистрСведенийАЛКО КАК СведенияРеглОтчет
		|ГДЕ
		|	(СведенияРеглОтчет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	ИЛИ СведенияРеглОтчет.Организация ЕСТЬ NULL)";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистра);

	ЗапросЗаписей = Новый Запрос;
	ЗапросЗаписей.Текст = ТекстЗапроса;

	РезЗапросаЗаписей = ЗапросЗаписей.Выполнить();
	Если РезЗапросаЗаписей.Пустой() Тогда
	// Все заполнено.
		Возврат Неопределено;
	КонецЕсли;
	РезЗапросаЗаписей = Неопределено;

	Возврат ЗаполнитьИзмерениеОрганизацияРегистраАлко(ИмяРегистра);

КонецФункции

Функция ЗаполнитьИзмерениеОрганизацияРегистраАлко(ИмяРегистра)

	КолВБлокеЗаписей = 5000;
	КолВБлокеНабораЗаписей = 2000;
	КолОтработанных = 0;

	// На всякий случай определим непустую организацию в ИБ,
	// будем ее присваивать измерению организация в случае, 
	// если в измерении документ по значению документа в поле организация
	// пустая ссылка.
	ТекстЗапросаОрганизации = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК ОрганизацияСсылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ(Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ Организации.Ссылка ЕСТЬ NULL)
		|	И Организации.ПометкаУдаления = ЛОЖЬ";

	ЗапросНепустыхОрганизаций = Новый Запрос;
	ЗапросНепустыхОрганизаций.Текст = ТекстЗапросаОрганизации;
	РезЗапросаНепустыхОрганизаций = ЗапросНепустыхОрганизаций.Выполнить();

	Если РезЗапросаНепустыхОрганизаций.Пустой() Тогда

	// Попробуем любые не пустые, пусть и с пометкой удаления.
		ТекстЗапросаОрганизации = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК ОрганизацияСсылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ(Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ИЛИ Организации.Ссылка ЕСТЬ NULL)";

		ЗапросНепустыхОрганизаций = Новый Запрос;
		ЗапросНепустыхОрганизаций.Текст = ТекстЗапросаОрганизации;
		РезЗапросаНепустыхОрганизаций = ЗапросНепустыхОрганизаций.Выполнить();

		Если РезЗапросаНепустыхОрганизаций.Пустой() Тогда

			ЗаписьЖурналаРегистрации(НСтр("ru = '" + ИмяРегистра
				+ " - при заполнении измерения Организация обнаружено что все организации в ИБ пустые.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				// Возвращаем нормальное завершение, нет организаций - значит и измерение заполнять нечем.
			Возврат Неопределено;

		КонецЕсли;

	КонецЕсли;

	ТаблицаНепустыхОрганизаций = РезЗапросаНепустыхОрганизаций.Выгрузить();
	НепустаяОрганизацияСсылка = ТаблицаНепустыхОрганизаций[0].ОрганизацияСсылка;

	// Для случая файловой базы отложенный обработчик обновления выполняется
	// как обычный, в монопольном режиме.
	ЭтоФайловаяБаза = ИнформационнаяБазаФайловая();

	Если НЕ ЭтоФайловаяБаза Тогда

		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(ИмяРегистра);
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Справочники.Организации.ПустаяСсылка());
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = '" + ИмяРегистра
				+ " - ошибка блокировки при заполнении измерения Организация'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Вызывать ВызватьИсключение не будем,
			// позже ПриОбновленииИБЗаполнитьИзмерениеОрганизацияАлко() выставит признак что обновление не завершено.
			Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонецПопытки;

	КонецЕсли;

	КороткоеИмяРегистра = СтрЗаменить(ИмяРегистра, "РегистрСведений.", "");
	РегистрСведенийРеглОтчет = РегистрыСведений[КороткоеИмяРегистра];

	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Измерения");
	Отбор = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(КороткоеИмяРегистра, СписокСоставаРегистра);
	Отбор.Удалить("Организация");

	ТекстЗапроса = "
		|ВЫБРАТЬ #СтрокаПервые
		|	РегистрСведенийАлкоОтчет.*
		|ИЗ
		|	#РегистрСведенийАЛКО КАК РегистрСведенийАлкоОтчет
		|ГДЕ
		|	(РегистрСведенийАлкоОтчет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	ИЛИ РегистрСведенийАлкоОтчет.Организация ЕСТЬ NULL)";

	СтрокаПервые = "ПЕРВЫЕ " + Формат(КолВБлокеЗаписей, "ЧГ=");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаПервые", СтрокаПервые);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистра);

	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапроса;

	Пока Истина Цикл

		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();

		Если РезЗапросаДанных.Пустой() Тогда
			Прервать;
		Иначе
			ВыборкаИсточник = РезЗапросаДанных.Выбрать();
		КонецЕсли;

		НаборЗаписейДляЗаписи = РегистрСведенийРеглОтчет.СоздатьНаборЗаписей();

		Пока ВыборкаИсточник.Следующий() Цикл

			НаборЗаписей = РегистрСведенийРеглОтчет.СоздатьНаборЗаписей();

			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаИсточник);

			Для каждого ЭлементОтбора Из Отбор Цикл

				НаборЗаписей.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);

			КонецЦикла;

			// Удаляем.
			НаборЗаписей.Записать(Истина);

			// Если измерение документ пустое, запись регистра мусор, 
			// поэтому после удаления ничего не делаем.
			Если НЕ ЗначениеЗаполнено(ВыборкаИсточник.Документ) Тогда
				Продолжить;
			КонецЕсли;

			ОбъектДокумента = ВыборкаИсточник.Документ.ПолучитьОбъект();
			Если ОбъектДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			КолОтработанных = КолОтработанных + 1;

			НоваяЗапись = НаборЗаписейДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаИсточник);

			НоваяЗапись.Организация = НоваяЗапись.Документ.Организация;

			// Гарантируем непопадание в следующий результат запроса.
			Если НЕ ЗначениеЗаполнено(НоваяЗапись.Организация) Тогда

				НоваяЗапись.Организация = НепустаяОрганизацияСсылка;

				ОбъектДокумента.Организация = НепустаяОрганизацияСсылка;
				ОбъектДокумента.Записать();

			КонецЕсли;

			ОбъектОрганизации = НоваяЗапись.Организация.ПолучитьОбъект();
			Если ОбъектОрганизации = Неопределено Тогда

				НоваяЗапись.Организация = НепустаяОрганизацияСсылка;

				ОбъектДокумента.Организация = НепустаяОрганизацияСсылка;
				ОбъектДокумента.Записать();

			КонецЕсли;

			Если КолОтработанных % КолВБлокеНабораЗаписей = 0 Тогда

			// В режиме дописывания.
				Если НаборЗаписейДляЗаписи.Количество() > 0 Тогда

					НаборЗаписейДляЗаписи.Записать(Ложь);

				КонецЕсли;

				Если НЕ ЭтоФайловаяБаза Тогда

					ЗафиксироватьТранзакцию();

					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

					Попытка

						БлокировкаДанных.Заблокировать();

					Исключение

						ОтменитьТранзакцию();
						ЗаписьЖурналаРегистрации(НСтр("ru = '" + ИмяРегистра
							+ " - ошибка блокировки при заполнении измерения Организация'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							// Вызывать ВызватьИсключение сейчас не будем,
						// это сделает позже ПриОбновленииИБЗаполнитьИзмерениеОрганизацияАлко().
						Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

					КонецПопытки;

				КонецЕсли;

				НаборЗаписейДляЗаписи.Очистить();

			КонецЕсли;

		КонецЦикла;

		// В режиме дописывания.
		Если НаборЗаписейДляЗаписи.Количество() > 0 Тогда

			НаборЗаписейДляЗаписи.Записать(Ложь);

		КонецЕсли;

		Если НЕ ЭтоФайловаяБаза Тогда

			ЗафиксироватьТранзакцию();

			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

			Попытка

				БлокировкаДанных.Заблокировать();

			Исключение

				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = '" + ИмяРегистра
					+ " - ошибка блокировки при заполнении измерения Организация'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					// Вызывать ВызватьИсключение сейчас не будем,
				// это сделает позже ПриОбновленииИБЗаполнитьИзмерениеОрганизацияАлко().
				Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			КонецПопытки;

		КонецЕсли;

		НаборЗаписейДляЗаписи.Очистить();

	КонецЦикла;

	Если НЕ ЭтоФайловаяБаза Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Возврат Неопределено;

КонецФункции
#КонецОбласти

#Область СлужебныеПечать

Функция ВысотаЯчейкиВСтроках(Область_Строка, ИмяПоля, ПомещаетсяВСтрокуПоля)

	СтрокаПереносимая = "";

	Если НЕ Область_Строка.Области.Найти(ИмяПоля) = Неопределено Тогда

		Если Область_Строка.Области[ИмяПоля].СодержитЗначение Тогда
			СтрокаПереносимая = Область_Строка.Области[ИмяПоля].Значение;
		Иначе
			СтрокаПереносимая = Область_Строка.Области[ИмяПоля].Текст;
		КонецЕсли;

	КонецЕсли;

	МассивСтрок = СтрРазделить(СтрокаПереносимая, Символы.ПС, Истина);
	
	КолСтрокВСтрокеПереносимой = 0;
	
	Для каждого СтрокаСПереводомСтроки Из МассивСтрок Цикл
		
		КолСтрокВОбычнойСтроке = 1;
		МассивОбычныхСтрок = СтрРазделить(СтрокаСПереводомСтроки, " ", Ложь);
		
		ОднаСтрока = "";
		Для каждого ОбычнаяСтрока Из МассивОбычныхСтрок Цикл
			
			Если СтрДлина(ОднаСтрока + " " + ОбычнаяСтрока) <= ПомещаетсяВСтрокуПоля Тогда
				ОднаСтрока = ОднаСтрока + " " + ОбычнаяСтрока;
			Иначе
				
				ДлинаОбычнойСтроки = СтрДлина(ОбычнаяСтрока);
				ДлинаОстатка = ДлинаОбычнойСтроки % ПомещаетсяВСтрокуПоля;
				
				КолСтрокВОбычнойСтроке = КолСтрокВОбычнойСтроке 
						+ Цел(ДлинаОбычнойСтроки / ПомещаетсяВСтрокуПоля) 
						+ ?(ДлинаОстатка > 0, 1, 0);
						
				Если ДлинаОстатка > 0 Тогда				
					ОднаСтрока = Прав(ОбычнаяСтрока, ДлинаОстатка);	
				Иначе
					ОднаСтрока = "";
				КонецЕсли; 		
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		КолСтрокВСтрокеПереносимой = КолСтрокВСтрокеПереносимой + КолСтрокВОбычнойСтроке;
		
	КонецЦикла; 
	
	Возврат КолСтрокВСтрокеПереносимой;

КонецФункции

Функция ВысотаСтрокиВСтроках(Область_Строка, СписокПереносимыхПолей,
		ИдГруппыОбластиСтрокаМакета, ИдГруппыПолейТаблицы)

	КолСтрокВСтрокеПереносимой = 1;

	Для каждого ЭлементСписка Из СписокПереносимыхПолей Цикл

		ИмяПоляПереносимойСтроки = ЭлементСписка.Представление;
		ПомещаетсяВСтрокуПереносимую = ЭлементСписка.Значение;

		Если СтрДлина(ИмяПоляПереносимойСтроки) = 2 Тогда
			// Переданы номера колонок.
			ИмяПоляПереносимойСтроки = ИдГруппыОбластиСтрокаМакета + ИмяПоляПереносимойСтроки;
		Иначе
			// Переданы имена колонок таблицы полностью.
			ИмяПоляПереносимойСтроки = СтрЗаменить(ИмяПоляПереносимойСтроки, ИдГруппыПолейТаблицы, ИдГруппыОбластиСтрокаМакета);
		КонецЕсли; 
		
		ТекКолСтрокВСтрокеПереносимой = ВысотаЯчейкиВСтроках(Область_Строка, ИмяПоляПереносимойСтроки, ПомещаетсяВСтрокуПереносимую);

		КолСтрокВСтрокеПереносимой = Макс(ТекКолСтрокВСтрокеПереносимой, КолСтрокВСтрокеПереносимой);

	КонецЦикла;

	Возврат КолСтрокВСтрокеПереносимой;

КонецФункции

Функция СтрокаШаблонИзАгрегатныхДанных(ТекстШаблона, СтрокаДанных,
		ИдГруппыТаблицы, ОграничительНачало = "%#", ОграничительКонец = "#%")

		// 	ТекстШаблона:
	// 	может содержать %#ИмяКолонки#% из полей СтрокаДанных, 
	//	например "Итого по производителю/импортеру %#03#% и коду %#02#%",
	//	в этом случае вместо %#03#% подставляется соответствующее значение 
	//	поля из СтрокаДанных[ИдГруппыТаблицы + "03"], например  СтрокаДанных.П000010000303.

	// Расчитываем текст пояснения, если там есть элементы шаблона %ИмяПоля
	Результат = "";

	ДлинаОграничителяНачало = СтрДлина(ОграничительНачало);
	ДлинаОграничителяКонец = СтрДлина(ОграничительКонец);

	ПраваяЧасть = ТекстШаблона;
	ПозицияНачала = СтрНайти(ПраваяЧасть, ОграничительНачало);

	Пока ПозицияНачала > 0 Цикл

		ЛеваяЧасть = Лев(ПраваяЧасть, ПозицияНачала - 1);
		Результат = Результат + ЛеваяЧасть;

		Если ПозицияНачала + ДлинаОграничителяНачало > СтрДлина(ПраваяЧасть) Тогда
		// После %# нет имени.
			ТекстИсключения = "В процедуру СтрокаШаблонИзАгрегатныхДанных() 
				|передан неверный шаблон.";
			ВызватьИсключение ТекстИсключения;
		Иначе
			ПраваяЧасть = Сред(ПраваяЧасть, ПозицияНачала + ДлинаОграничителяНачало);
		КонецЕсли;

		// Находим окончание имени поля.
		ПозицияОкончания = СтрНайти(ПраваяЧасть, ОграничительКонец);

		Если ПозицияОкончания = 0 Тогда
		// Есть начало, но нет окончания - ошибка.
			ТекстИсключения = "В процедуру СтрокаШаблонИзАгрегатныхДанных() 
				|передан неверный шаблон.";
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		ИмяПоляШаблона = Лев(ПраваяЧасть, ПозицияОкончания - 1);

		Результат = Результат + СокрЛП(Строка(СтрокаДанных[ИдГруппыТаблицы
			+ ИмяПоляШаблона]));

		Если ПозицияОкончания + ДлинаОграничителяКонец > СтрДлина(ПраваяЧасть) Тогда
		// Конец строки после #%.
			ПраваяЧасть = "";
		Иначе
			ПраваяЧасть = Сред(ПраваяЧасть, ПозицияОкончания + ДлинаОграничителяКонец);
		КонецЕсли;

		ПозицияНачала = СтрНайти(ПраваяЧасть, ОграничительНачало);

	КонецЦикла;

	Результат = Результат + ПраваяЧасть;

	Возврат Результат;

КонецФункции

Процедура ВывестиНаПечатьСтроки(СтруктураПараметров, ПечатнаяФорма,
		ОсталосьСтрок, ОбработаноСтрок, ТекЛист = 0, ВсегоЛистов = 1,
		РежимОтладки = Неопределено)

		// Группа переменных для извлечения данных о высотах из НастройкиАлгоритмаПечати.
	Перем СписокСтруктурИнформацииИтогов, СписокПереносимыхПолей, СоответствиеСоставныхПолей;

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	СтруктураДанных = СтруктураПараметров.СтруктураДанных;
	СтруктураРеквизитовФормы = СтруктураПараметров.СтруктураРеквизитовФормы;

	ИмяРаздела = СтруктураПараметров.ИмяРаздела;
	НаименованиеЛиста = СтруктураПараметров.НаименованиеЛиста;
	МакетПечати = СтруктураПараметров.МакетПечати;

	// Обычно "ЗаголовокТаблицы".
	ИмяОбластиЗаголовокТаблицы = СтруктураПараметров.ИмяОбластиЗаголовокТаблицы;
	// Обычно "НомерСтраницы".	
	ИмяОбластиНомерСтраницы = СтруктураПараметров.ИмяОбластиНомерСтраницы;

	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины.
	// В представлении можно указывать либо полное имя поля регистра сведений вида ИдГруппы + НомерКолонки,
	// либо просто НомерКолонки.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//
	// В списке указываются поля с привязкой к ИДгруппы таблицы раздела (ресурсов в регистре).
	// Действуют и на общую часть по организации и на часть по ОП.	
	СтруктураПараметров.Свойство("СписокПереносимыхПолей", СписокПереносимыхПолей);

	Если СписокПереносимыхПолей = Неопределено Тогда
		СписокПереносимыхПолей = Новый СписокЗначений;
	КонецЕсли;

	// СоответствиеСоставныхПолей -  
	// Значения - массив номеров колонок или окончаний имен ресурсов и реквизитов регистров после ИдГруппы,
	// которые нужно выводить. Значение элемента с нулевом индексом - разделительный символ между полями.
	// Ключ - номер колонки в которой нужно выводить несколько полей регистра сведений.
	СтруктураПараметров.Свойство("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);

	Если СоответствиеСоставныхПолей = Неопределено Тогда
		СоответствиеСоставныхПолей = Новый Соответствие;
	КонецЕсли;
	
	// Настройки страницы - хранят величины отступов, орьентацию страницы, настройки масштаба и т.д.	
	НастройкиСтраницы = СтруктураПараметров.НастройкиСтраницы;

	НужноОбработатьСтрок = СтруктураПараметров.НужноОбработатьСтрок;
	ПроцентБезКонвертацииАрхивации = СтруктураПараметров.ПроцентБезКонвертацииАрхивации;

	// СтруктураВысот - хранит высоту в стандартных строках с установленной настройкой АвтовысотаСтроки = Истина.
	СтруктураВысот = СтруктураПараметров.СтруктураВысот;

	ТаблицаСтрок = СтруктураДанных.ТаблицаСтрок;
	// Переданная таблица ТаблицаСтрок должна иметь колонки с именами вида ИдГруппыПолейТаблицы + НомерКолонки
	// Например  П000010000301, П000010000302, П000010000303, П000010000304 и т.д.
	ИдГруппыПолейТаблицы = СтруктураДанных.ИдГруппыПолейТаблицы;

	ВысотаСтраницыВСтроках = СтруктураВысот.ВысотаСтраницыВСтроках;
	Высота_НомерСтраницыВСтроках = СтруктураВысот.Высота_НомерСтраницыВСтроках;

	Высота_ЗаголовокТаблицыВСтроках = СтруктураВысот.Высота_ЗаголовокТаблицыВСтроках;

	Высота_ПодвалВСтроках = СтруктураВысот.Высота_ПодвалВСтроках;

	НастройкиАлгоритмаПечатиСтрок = СтруктураПараметров.НастройкиАлгоритмаПечатиСтрок;

	// ИдГруппы области "Строка" макета - обычно П0000100003.
	ИдГруппыОбластиСтрокаМакета = НастройкиАлгоритмаПечатиСтрок.ИдГруппыОбластиСтрокаМакета;
	// ИмяОбластиНомера области "Строка" макета - обычно П000010000300.
	ИмяОбластиНомера = НастройкиАлгоритмаПечатиСтрок.ИмяОбластиНомера;
	// Обычно "СтрокаТаблицы".
	ИмяОбластиСтрокаТаблицы = НастройкиАлгоритмаПечатиСтрок.ИмяОбластиСтрокаТаблицы;

	// Структура Итогов - вся информация по формированию Итогов.
	// Их может быть несколько - несколько строк итогов.
	НастройкиАлгоритмаПечатиСтрок.Свойство("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);

	Если СписокСтруктурИнформацииИтогов = Неопределено Тогда
	// Итогов нет.
		СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	ИначеЕсли НЕ ТипЗнч(СписокСтруктурИнформацииИтогов) = Тип("СписокЗначений") Тогда
	// Передали неверные данные.
		// Считаем что итогов нет.
		СписокСтруктурИнформацииИтогов = Новый СписокЗначений;
	КонецЕсли;

	// Значениями элементов списка СписокСтруктурИнформацииИтогов являются структуры, каждая имеет свойства:
	// * ИдГруппыОбластейМакетаИтоги - например "П0000100004".
	// * ИмяОбластиСтрокаИтогов - например "СтрокаИтого".
	// * ТекстПояснения - например "Итого по коду, производителю",
	// 					  может содержать %#ИмяКолонки#% из КолонкиГруппировок, 
	//					  например "Итого по производителю/импортеру %#П000010000303#% и коду %#П000010000302#%",
	//					  в этом случае вместо %#П000010000303#% подставляется соответствующее значение 
	//					  поля группировки таблицы.
	// * ИмяОбластиРазмещенияПояснения - например "ОписаниеИтого".
	// * КолонкиГруппировок - текст колонок группировок при сворачивании таблицы для получения итога,
	//						  колонки должны совпадать с именами колонок таблицы ТаблицаСтрок.
	// * КолонкиСуммирования - текст колонок суммирования при сворачивании таблицы для получения итога,
	//						  колонки должны совпадать с именами колонок таблицы ТаблицаСтрок.

	// Представления элементов списка СписокСтруктурИнформацииИтогов - числа, порядок которых определяет
	// порядок вывода разных групп итогов.
	// Поэтому сортируем по представлению, чтобы получить правильный порядок вывода групп итогов.
	СписокСтруктурИнформацииИтогов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);

	Область_ЗаголовокТаблицы = МакетПечати.ПолучитьОбласть(ИмяОбластиЗаголовокТаблицы);
	Область_НомерСтраницы = МакетПечати.ПолучитьОбласть(ИмяОбластиНомерСтраницы);

	// Выводим строки данных по ОП или по рганизации - нумерация всегда с 1.
	ТекНомерСтрокиДанных = 1;

	Для Каждого СтрокаДанных Из ТаблицаСтрок Цикл

		Если ОсталосьСтрок < 3 Тогда
		// Переходим на новый лист.
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, НаименованиеЛиста);

			ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// Выводим заголовок таблицы и номер страницы.
			ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
			ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
				- Высота_НомерСтраницыВСтроках;

		КонецЕсли;

		Область_Строка = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);

		Для Каждого Колонка Из ТаблицаСтрок.Колонки Цикл

			ИмяКолонки = Колонка.Имя;
			НомерКолонки = СтрЗаменить(ИмяКолонки, ИдГруппыПолейТаблицы, "");
			
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, ИдГруппыПолейТаблицы, ИдГруппыОбластиСтрокаМакета);

			МассивКолонокСоставныхПолей = СоответствиеСоставныхПолей.Получить(НомерКолонки);
			
			Если МассивКолонокСоставныхПолей = Неопределено Тогда
				ЗначениеПоКолонке = СтрокаДанных[ИмяКолонки];
			Иначе
				
				ЗначениеПоКолонке = "";
				СимволРазделитель = "";
				
				Индекс = -1;
				Для каждого ЭлементМассива Из МассивКолонокСоставныхПолей Цикл
				
					Индекс = Индекс + 1;
					
					Если Индекс = 0 Тогда					
						СимволРазделитель = ЭлементМассива;
						Продолжить;
					ИначеЕсли Индекс > 1 Тогда
						ЗначениеПоКолонке = ЗначениеПоКолонке + СимволРазделитель;
					КонецЕсли; 
					
					ЗначениеПоКолонке = ЗначениеПоКолонке + СтрокаДанных[ИдГруппыПолейТаблицы + ЭлементМассива];
					
				КонецЦикла;
				
			КонецЕсли;
			
			ВывестиПолеМакета(Область_Строка, ИмяКолонкиМакета, ЗначениеПоКолонке);
			
		КонецЦикла;

		ВывестиПолеМакета(Область_Строка, ИмяОбластиНомера, ТекНомерСтрокиДанных);

		ВывестиВПечатнуюФорму(Область_Строка, ПечатнаяФорма);

		КолСтрокВСтрокеПереносимой = ВысотаСтрокиВСтроках(Область_Строка, СписокПереносимыхПолей, ИдГруппыОбластиСтрокаМакета, ИдГруппыПолейТаблицы);
		ОсталосьСтрок = ОсталосьСтрок - КолСтрокВСтрокеПереносимой;

		ТекНомерСтрокиДанных = ТекНомерСтрокиДанных + 1;

		ОбработаноСтрок = ОбработаноСтрок + 1;

		Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 1000 = 0) Тогда

			СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
				+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	// Для пустой декларации надо вывести просто пустую форму.
	Если ТекНомерСтрокиДанных = 1 Тогда

		Область_Строка = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаТаблицы);

		ВывестиПолеМакета(Область_Строка, ИмяОбластиНомера, ТекНомерСтрокиДанных);

		ВывестиВПечатнуюФорму(Область_Строка, ПечатнаяФорма);

		ОсталосьСтрок = ОсталосьСтрок - 1;

	КонецЕсли;

	// Выводим Итоги.
	Для каждого ЭлементСписка Из СписокСтруктурИнформацииИтогов Цикл

		СтруктураИтогов = ЭлементСписка.Значение;

		ИдГруппыОбластейМакетаИтоги = СтруктураИтогов.ИдГруппыОбластейМакетаИтоги;
		ИмяОбластиСтрокаИтогов = СтруктураИтогов.ИмяОбластиСтрокаИтогов;
		ТекстПояснения = СтруктураИтогов.ТекстПояснения;
		ИмяОбластиРазмещенияПояснения = СтруктураИтогов.ИмяОбластиРазмещенияПояснения;
		КолонкиГруппировок = СтруктураИтогов.КолонкиГруппировок;
		КолонкиСуммирования = СтруктураИтогов.КолонкиСуммирования;

		МассивКолонокСуммирования = СтрРазделить(КолонкиСуммирования, ",", Ложь);

		СтрокаКолонокСуммирования = "";
		РазделительКолонкиСуммирования = "";

		// Нужно преобразовать номера колонок в колонки таблицы.
		Для каждого ЭлементМассива Из МассивКолонокСуммирования Цикл

			СтрокаКолонокСуммирования = СтрокаКолонокСуммирования
				+ РазделительКолонкиСуммирования + ИдГруппыПолейТаблицы + ЭлементМассива;
			РазделительКолонкиСуммирования = ",";

		КонецЦикла;

		МассивКолонокГруппировок = СтрРазделить(КолонкиГруппировок, ",", Ложь);

		СтрокаКолонокГруппировок = "";
		РазделительКолонкиГруппировок = "";

		// Нужно преобразовать номера колонок в колонки таблицы.
		Для каждого ЭлементМассива Из МассивКолонокГруппировок Цикл

			СтрокаКолонокГруппировок = СтрокаКолонокГруппировок
				+ РазделительКолонкиГруппировок + ИдГруппыПолейТаблицы + ЭлементМассива;
			РазделительКолонкиГруппировок = ",";

		КонецЦикла;

		// Сворачиваем таблицу для текущих Итогов.
		Если ЗначениеЗаполнено(СтрокаКолонокГруппировок) Тогда
			ТаблицаСтрок.Свернуть(СтрокаКолонокГруппировок, СтрокаКолонокСуммирования);
			// Логично отсортировать в порядке колонок группировки.
			ТаблицаСтрок.Сортировать(СтрокаКолонокГруппировок);
		Иначе
		// Свернуть не получится, колонки группировок обязательны.
		// Посчитаем колонки суммирования через Итоги.
			МассивКолонокСуммирования = СтрРазделить(СтрокаКолонокСуммирования, ",", Ложь);

			Если МассивКолонокСуммирования.Количество() = 0 Тогда

			// Нечего суммировать.
				// Очищаем таблицу, вывод итогов осуществляется по строкам свернутой таблицы,
				// в данном случае цикл по строкам не отработает.
				ТаблицаСтрок.Очистить();

			Иначе

			// Создаем новую таблицу с колонками, по которым будет суммирование.
				ВспомогательнаяТаблица = ТаблицаСтрок.СкопироватьКолонки(СтрокаКолонокСуммирования);
				СтрокаТаблицы = ВспомогательнаяТаблица.Добавить();

				// Заполняем строку вспомогательной таблицы итогами по нужным колонкам.
				Для каждого Колонка Из МассивКолонокСуммирования Цикл

					КолонкаСуммирования = СокрЛП(Колонка);

					СтрокаТаблицы[КолонкаСуммирования] = ТаблицаСтрок.Итог(КолонкаСуммирования);

				КонецЦикла;

				ТаблицаСтрок = ВспомогательнаяТаблица;

			КонецЕсли;

		КонецЕсли;

		КоличествоСтрокИтогов = ТаблицаСтрок.Количество();

		Если (ОсталосьСтрок < КоличествоСтрокИтогов + 3)
				и (КоличествоСтрокИтогов > 0) Тогда

				// Переходим на новый лист.
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, НаименованиеЛиста);

			ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

			ОсталосьСтрок = ВысотаСтраницыВСтроках;
			// Выводим заголовок таблицы.
			ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
			ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

			ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
				- Высота_НомерСтраницыВСтроках;

		КонецЕсли;

		Если ТекЛист = ВсегоЛистов Тогда
		// Последний лист.
			Если ОсталосьСтрок < (3 + КоличествоСтрокИтогов
					+ Высота_ПодвалВСтроках) Тогда

					// Переходим на новый лист, чтобы подвал напечатался нормально.
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, НаименованиеЛиста);

				ПечатнаяФорма = НовыйПечатныйЛистДекларации(НастройкиСтраницы);

				ОсталосьСтрок = ВысотаСтраницыВСтроках;
				// Выводим заголовок таблицы.
				ВывестиВПечатнуюФорму(Область_НомерСтраницы, ПечатнаяФорма);
				ВывестиВПечатнуюФорму(Область_ЗаголовокТаблицы, ПечатнаяФорма);

				ОсталосьСтрок = ОсталосьСтрок - Высота_ЗаголовокТаблицыВСтроках
					- Высота_НомерСтраницыВСтроках;

			КонецЕсли;

		КонецЕсли;

		Для Каждого СтрокаДанных Из ТаблицаСтрок Цикл

			Область_СтрокаИтого = МакетПечати.ПолучитьОбласть(ИмяОбластиСтрокаИтогов);

			// Расчитываем текст пояснения, если там есть элементы шаблона %#ИмяПоля#%.
			ТекстПоясненияИтога = СтрокаШаблонИзАгрегатныхДанных(ТекстПояснения, СтрокаДанных, ИдГруппыПолейТаблицы, "%#", "#%");
			ВывестиПолеМакета(Область_СтрокаИтого, ИмяОбластиРазмещенияПояснения, ТекстПоясненияИтога);

			Для Каждого Колонка Из ТаблицаСтрок.Колонки Цикл

				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, ИдГруппыПолейТаблицы, ИдГруппыОбластейМакетаИтоги);

				ВывестиПолеМакета(Область_СтрокаИтого, ИмяКолонкиМакета, СтрокаДанных[ИмяКолонки]);

			КонецЦикла;

			ВывестиВПечатнуюФорму(Область_СтрокаИтого, ПечатнаяФорма);

			ОсталосьСтрок = ОсталосьСтрок - 1;

		КонецЦикла;

	КонецЦикла;

	Если НужноОбработатьСтрок > 0 Тогда

		СообщитьПроцентВыполнения("Печать раздела " + ИмяРаздела
			+ ".", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция НовыйПечатныйЛистДекларации(НастройкиСтраницы)

	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = НастройкиСтраницы.ОтображатьЗаголовки;
	ПечатнаяФорма.ОтображатьСетку = НастройкиСтраницы.ОтображатьСетку;
	ПечатнаяФорма.ЧерноБелыйПросмотр = НастройкиСтраницы.ЧерноБелыйПросмотр;
	ПечатнаяФорма.ЧерноБелаяПечать = НастройкиСтраницы.ЧерноБелаяПечать;
	ПечатнаяФорма.Автомасштаб = НастройкиСтраницы.Автомасштаб;
	ПечатнаяФорма.ОриентацияСтраницы = НастройкиСтраницы.ОриентацияСтраницы;
	ПечатнаяФорма.ПолеСверху = НастройкиСтраницы.ПолеСверху;
	ПечатнаяФорма.ПолеСнизу = НастройкиСтраницы.ПолеСнизу;
	ПечатнаяФорма.ПолеСлева = НастройкиСтраницы.ПолеСлева;
	ПечатнаяФорма.ПолеСправа = НастройкиСтраницы.ПолеСправа;

	Возврат ПечатнаяФорма;

КонецФункции

Функция ВывестиПолеЦеликом(ОбластьМакета, ИмяОбластиВывода, ВыводимоеЗначение,
		Очистить = Ложь)

	ИмяОбласти = СокрЛП(ИмяОбластиВывода);

	Результат = Ложь;

	Если НЕ ((ТипЗнч(ОбластьМакета) = Тип("ТабличныйДокумент"))
			ИЛИ (ТипЗнч(ОбластьМакета) = Тип("ПолеТабличногоДокумента"))) Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ ОбластьМакета.Области.Найти(ИмяОбласти) = Неопределено Тогда

		Результат = Истина;

		Если Очистить Тогда
			Если ОбластьМакета.Области[ИмяОбласти].СодержитЗначение Тогда
				ОбластьМакета.Области[ИмяОбласти].Значение = "";
			Иначе
				ОбластьМакета.Области[ИмяОбласти].Текст = "";
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ВыводимоеЗначение) Тогда
				Если ОбластьМакета.Области[ИмяОбласти].СодержитЗначение Тогда
					ОбластьМакета.Области[ИмяОбласти].Значение = Строка(ВыводимоеЗначение);
				Иначе
					ОбластьМакета.Области[ИмяОбласти].Текст = Строка(ВыводимоеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВывестиВКвадратикиОтдельноеПоле(ОбластьМакета, ИмяОбластиВывода,
		ВыводимоеЗначение, Очистить = Ложь)

	ИмяОбласти = СокрЛП(ИмяОбластиВывода);
	СтрокаВыводимогоЗначения = Строка(ВыводимоеЗначение);
	ДлинаВыводимогоЗначения = СтрДлина(СтрокаВыводимогоЗначения);

	Результат = Ложь;

	Если НЕ ((ТипЗнч(ОбластьМакета) = Тип("ТабличныйДокумент"))
			ИЛИ (ТипЗнч(ОбластьМакета) = Тип("ПолеТабличногоДокумента"))) Тогда
		Возврат Результат;
	КонецЕсли;

	ИмяОбластиМакетаВариант1 = ИмяОбласти + "_1";
	ИмяОбластиМакетаВариант2 = ИмяОбласти + "1";

	Если НЕ ОбластьМакета.Области.Найти(ИмяОбластиМакетаВариант1) = Неопределено Тогда

		Результат = Истина;

		Если Не ДлинаВыводимогоЗначения = 0 Тогда

		// Вывод либо ИНН КПП страницы, либо ИНН, КПП, Почтовый Индекс, КодРегиона.	
			// ИмяОбласти для ИНН КПП страницы - ИНН1, КПП1.
			// Областьмакета имеет именованные области ИНН1_1, ИНН1_2.. ИНН1_10.
			Для Ном = 1 По ДлинаВыводимогоЗначения Цикл
				ВывестиПолеЦеликом(ОбластьМакета, ИмяОбласти + "_"
					+ Ном, Сред(СтрокаВыводимогоЗначения, Ном, 1), Очистить);
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли НЕ ОбластьМакета.Области.Найти(ИмяОбластиМакетаВариант2) = Неопределено Тогда

		Результат = Истина;

		Если Не ДлинаВыводимогоЗначения = 0 Тогда

		// Например вывод дат подписания.
			Для Ном = 1 По ДлинаВыводимогоЗначения Цикл
				ВывестиПолеЦеликом(ОбластьМакета, ИмяОбласти
					+ Ном, Сред(СтрокаВыводимогоЗначения, Ном, 1), Очистить);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВывестиВКвадратикиСтрокуТаблицы(ОбластьМакета, ИмяОбластиВывода,
		ВыводимоеЗначение, Очистить = Ложь)

	ИмяОбласти = СокрЛП(ИмяОбластиВывода);
	СтрокаВыводимогоЗначения = Строка(ВыводимоеЗначение);
	ДлинаВыводимогоЗначения = СтрДлина(СтрокаВыводимогоЗначения);
	ПозицияПодчеркивания = СтрНайти(ИмяОбласти, "_");

	Результат = Ложь;

	Если НЕ ((ТипЗнч(ОбластьМакета) = Тип("ТабличныйДокумент"))
			ИЛИ (ТипЗнч(ОбластьМакета) = Тип("ПолеТабличногоДокумента"))) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ПозицияПодчеркивания < 2 Тогда
	// Что-то не то передали.
		Возврат Результат;
	КонецЕсли;

	ИмяПоляСПодчеркиванием = Лев(ИмяОбласти, ПозицияПодчеркивания);
	НомерСтрокиСПодчеркиванием = Сред(ИмяОбласти, ПозицияПодчеркивания);

	ИмяОбластиМакетаВариант3 = ИмяПоляСПодчеркиванием + "1"
		+ НомерСтрокиСПодчеркиванием;

	Если НЕ ОбластьМакета.Области.Найти(ИмяОбластиМакетаВариант3) = Неопределено Тогда

		Результат = Истина;

		// Передано ИмяОбласти П000000000201_3.
		// Областьмакета имеет именованную область П000000000201_2_3
		// где П000000000201 имя поля, _2 - номер символа, _3 - номер ДопСтроки на печатном листе.
		Если Не ДлинаВыводимогоЗначения = 0 Тогда

			Для Ном = 1 По ДлинаВыводимогоЗначения Цикл

				НомерСимвола = СтрокаЧГ0(Ном);
				ИмяОбластиМакета = ИмяПоляСПодчеркиванием + НомерСимвола
					+ НомерСтрокиСПодчеркиванием;

				ВывестиПолеЦеликом(ОбластьМакета, ИмяОбластиМакета, Сред(СтрокаВыводимогоЗначения, Ном, 1), Очистить);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВывестиВКвадратики(ОбластьМакета, ИмяОбластиВывода, ВыводимоеЗначение,
		Очистить = Ложь)

	ИмяОбласти = СокрЛП(ИмяОбластиВывода);
	СтрокаВыводимогоЗначения = Строка(ВыводимоеЗначение);

	Результат = Ложь;

	Если НЕ ((ТипЗнч(ОбластьМакета) = Тип("ТабличныйДокумент"))
			ИЛИ (ТипЗнч(ОбластьМакета) = Тип("ПолеТабличногоДокумента"))) Тогда
		Возврат Результат;
	КонецЕсли;

	ПозицияПодчеркивания = СтрНайти(ИмяОбласти, "_");

	Если ПозицияПодчеркивания = 0 Тогда

	// Это вероятнее всего отдельное поле, например ИНН1.
		Результат = ВывестиВКвадратикиОтдельноеПоле(ОбластьМакета, ИмяОбластиВывода, СтрокаВыводимогоЗначения, Очистить);

		Если НЕ Результат Тогда
		// Пробуем вариант строки таблицы.
			Результат = ВывестиВКвадратикиСтрокуТаблицы(ОбластьМакета, ИмяОбластиВывода, СтрокаВыводимогоЗначения, Очистить);
		КонецЕсли;

	Иначе
	// Это вероятнее всего строка таблицы.
		Результат = ВывестиВКвадратикиСтрокуТаблицы(ОбластьМакета, ИмяОбластиВывода, СтрокаВыводимогоЗначения, Очистить);

		Если НЕ Результат Тогда
		// Пробуем вариант отдельного поля.
			Результат = ВывестиВКвадратикиОтдельноеПоле(ОбластьМакета, ИмяОбластиВывода, СтрокаВыводимогоЗначения, Очистить);
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВывестиПолеМакета(ОбластьМакета, ИмяОбластиВывода, ВыводимоеЗначение,
		Очистить = Ложь)

		// Для очистки полей, выводимых в "квадратики", необходимо помимо флага Очистить, передать так же 
	// ВыводимоеЗначение нужной длины, используется для определения длины очистки всех клеток.
	Результат = ВывестиПолеЦеликом(ОбластьМакета, ИмяОбластиВывода, ВыводимоеЗначение, Очистить);

	Если НЕ Результат Тогда
		Результат = ВывестиВКвадратики(ОбластьМакета, ИмяОбластиВывода, ВыводимоеЗначение, Очистить);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ВывестиВПечатнуюФорму(ОбластьМакета, ПечатнаяФорма)

	Если НЕ ((ТипЗнч(ОбластьМакета) = Тип("ТабличныйДокумент"))
			ИЛИ (ТипЗнч(ОбластьМакета) = Тип("ПолеТабличногоДокумента"))) Тогда
		Возврат;
	КонецЕсли;

	ПечатнаяФорма.Вывести(ОбластьМакета);

КонецПроцедуры

Функция ЗаполнитьПоВсейОрганизации(ИдГруппы, СтруктураРеквизитовФормы,
		СтруктураСервисРегистров, КолонкиГруппировок = "", КолонкиСуммирования = "",
		КолонкиНеВыводить = "")

		// Если передано КолонкиГруппировок = "Не сворачивать", независимо от значений 
	// КолонкиСуммирования результат не будет сворачиваться.

	// На всякий случай гарантируем тип Строка.
	КолонкиГруппировок = Строка(КолонкиГруппировок);
	КолонкиСуммирования = Строка(КолонкиСуммирования);
	КолонкиНеВыводить = Строка(КолонкиНеВыводить);

	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];

	МассивИндексовСтраниц = СервисРегистровГруппы.ВыгрузитьКолонку("ИндексСтраницыРегистра");

	МассивИДДокИндСтраницы = Новый Массив;

	ИДДок = Неопределено;
	СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	
	Для каждого ИндексСтраницыРегистра Из МассивИндексовСтраниц Цикл

		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокОтчета, ИндексСтраницыРегистра, ИДДок);
		МассивИДДокИндСтраницы.Добавить(ИДДокИндСтраницы);

	КонецЦикла;

	// По умолчанию выгружаем все колонки.							
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	АлкоПрилДанные.*
		|
		|ИЗ
		|	#РегистрСведенийАЛКО КАК АлкоПрилДанные
		|
		|ГДЕ
		|	(АлкоПрилДанные.ИДДокИндСтраницы В (&МассивИДДокИндСтраницы)) 
		|	И (АлкоПрилДанные.Активно = Истина)
		|";

	ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

	ЗапросСтрокДанныхРаздела = Новый Запрос;
	ЗапросСтрокДанныхРаздела.Текст = ТекстЗапроса;
	ЗапросСтрокДанныхРаздела.Параметры.Вставить("МассивИДДокИндСтраницы", МассивИДДокИндСтраницы);

	Результат = ЗапросСтрокДанныхРаздела.Выполнить().Выгрузить();

	МассивКолонокНеВыводить = СтрРазделить(Строка(КолонкиНеВыводить), ",", Ложь);

	// В любом случае нужно исключить колонки, НЕ относящиеся к ресурсам регистра,
	// в измерениях и реквизитах вспомогательная информация.
	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Ресурсы");
	СтруктураРесурсов = ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистраСведений, СписокСоставаРегистра);

	Для каждого ЭлементМассива Из МассивКолонокНеВыводить Цикл
		ЭлементМассива = ВРег(СокрЛП(ЭлементМассива));
	КонецЦикла;

	// Убираем колонки, которые не нужны.
	СписокУдаляемыхКолонок = Новый СписокЗначений;

	Для каждого Колонка Из Результат.Колонки Цикл

		НомерКолонки = СтрЗаменить(Колонка.Имя, ИдГруппы, "");
		Если НЕ МассивКолонокНеВыводить.Найти(ВРег(НомерКолонки)) = Неопределено Тогда
			СписокУдаляемыхКолонок.Добавить(Колонка.Имя);
		КонецЕсли;

		//// Удаляем колонки, НЕ относящиеся к ресурсам регистра,
		//// в измерениях и реквизитах вспомогательная информация.
		//Если НЕ СтруктураРесурсов.Свойство(Колонка.Имя) Тогда
		//	СписокУдаляемыхКолонок.Добавить(Колонка.Имя);
		//КонецЕсли;

	КонецЦикла;

	Для каждого ЭлементСписка Из СписокУдаляемыхКолонок Цикл
		Результат.Колонки.Удалить(ЭлементСписка.Значение);
	КонецЦикла;

	// Предусмотрим возможность явного указания, что не надо ничего сворачивать.
	Если ВРег(КолонкиГруппировок) = ВРег("Не сворачивать")
			ИЛИ ВРег(КолонкиГруппировок) = ВРег("НеСворачивать") Тогда
		Возврат Результат;
	КонецЕсли;

	МассивКолонокСуммирования = СтрРазделить(Строка(КолонкиСуммирования), ",", Ложь);
	Для каждого ЭлементМассива Из МассивКолонокСуммирования Цикл
		ЭлементМассива = СокрЛП(ЭлементМассива);
	КонецЦикла;

	МассивКолонокГруппировок = СтрРазделить(Строка(КолонкиГруппировок), ",", Ложь);
	Для каждого ЭлементМассива Из МассивКолонокГруппировок Цикл
		ЭлементМассива = СокрЛП(ЭлементМассива);
	КонецЦикла;

	НеЗаполненаСтрокаКолонокГруппировок = (МассивКолонокГруппировок.Количество() = 0);
	НеЗаполненаСтрокаКолонокСуммирования = (МассивКолонокСуммирования.Количество() = 0);

	Если НеЗаполненаСтрокаКолонокСуммирования
			или НеЗаполненаСтрокаКолонокГруппировок Тогда

			// Попробуем определить колонки суммирования и группировки по типу значения колонок.
		Если НеЗаполненаСтрокаКолонокСуммирования Тогда

			КолонкиСуммирования = "";
			РазделительКолонкиСуммирования = "";

		КонецЕсли;

		Если НеЗаполненаСтрокаКолонокГруппировок Тогда

			КолонкиГруппировок = "";
			РазделительКолонкиГруппировок = "";

		КонецЕсли;

		Для каждого Колонка Из Результат.Колонки Цикл

			НомерКолонки = СокрЛП(СтрЗаменить(Колонка.Имя, ИдГруппы, ""));
			
			Если НЕ СтруктураРесурсов.Свойство(Колонка.Имя) Тогда
				// Не ресурс, автоматически не добавляем.
				Продолжить;
			КонецЕсли;

			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда

				Если НеЗаполненаСтрокаКолонокСуммирования Тогда

					МассивКолонокСуммирования.Добавить(НомерКолонки);
					КолонкиСуммирования = КолонкиСуммирования
						+ РазделительКолонкиСуммирования + НомерКолонки;

					РазделительКолонкиСуммирования = ",";

				КонецЕсли;

			Иначе

				Если НеЗаполненаСтрокаКолонокГруппировок Тогда

					МассивКолонокГруппировок.Добавить(НомерКолонки);
					КолонкиГруппировок = КолонкиГруппировок + РазделительКолонкиГруппировок
						+ НомерКолонки;

					РазделительКолонкиГруппировок = ",";

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокаКолонокГруппировок = "";
	РазделительКолонкиГруппировок = "";

	// Нужно преобразовать номера колонок в колонки таблицы.
	Для каждого ЭлементМассива Из МассивКолонокГруппировок Цикл

		СтрокаКолонокГруппировок = СтрокаКолонокГруппировок
			+ РазделительКолонкиГруппировок + ИдГруппы + ЭлементМассива;
		РазделительКолонкиГруппировок = ",";

	КонецЦикла;

	СтрокаКолонокСуммирования = "";
	РазделительКолонкиСуммирования = "";

	// Нужно преобразовать номера колонок в колонки таблицы.
	Для каждого ЭлементМассива Из МассивКолонокСуммирования Цикл

		СтрокаКолонокСуммирования = СтрокаКолонокСуммирования
			+ РазделительКолонкиСуммирования + ИдГруппы + ЭлементМассива;
		РазделительКолонкиСуммирования = ",";

	КонецЦикла;

	// Нет смысла делать итог по колонкам суммирования, если нет колонок группировки,
	// поскольку даные по организации в целом - это не одна строка итогов, как показывает практика.
	Если ЗначениеЗаполнено(СтрокаКолонокГруппировок) Тогда
		Результат.Свернуть(СтрокаКолонокГруппировок, СтрокаКолонокСуммирования);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СтруктураСобратьДанныеПоОП(ИдГруппы, ИмяРаздела,
		ТаблицаСтраницыРаздела, ЭтоПБОЮЛ, ИНН)

		// Инициация структуры ОП.				
	ДанныеОП_Раздела = Новый Структура;

	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ТаблицаСтраницыРаздела Цикл

		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = СтрокаЧГ0(НомерЛиста);

		СведенияОбОП = Неопределено;
		ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП);

		Представление = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СведенияОбОП, ЭтоПБОЮЛ, ИНН);

		Если Представление = "Заполнить" Тогда
			Представление = "";
		КонецЕсли;

		ИдОП = ИдентификаторОП_АЛКО(СведенияОбОП);

		// Собираем данные по одному и тому же ОП в одну структуру.
		Если НЕ ДанныеОП_Раздела.Свойство(ИдОП) Тогда

			ДанныеОП_Раздела.Вставить(ИдОП, Новый Структура);
			КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
			ДанныеОП_Раздела[ИдОП].Вставить("ОП", КопияСведенияОбОП);
			ДанныеОП_Раздела[ИдОП].Вставить("Представление", Представление);

			// Фиксируем первый лист с данным ОП.
			ДанныеОП_Раздела[ИдОП].Вставить("НомерЛистаДекларация", НомерЛиста);

			ДанныеОП_Раздела[ИдОП].Вставить("СведОрг", Новый Структура);

		КонецЕсли;

		ДанныеОП_Раздела[ИдОП].СведОрг.Вставить("Х"
			+ НомерЛистаСтроковый, Новый Структура);

		ДанныеПоЛисту = ДанныеОП_Раздела[ИдОП].СведОрг["Х" + НомерЛистаСтроковый];

		// Фиксируем все листы по одному ОП, если повторяются.
		ДанныеПоЛисту.Вставить("НомерЛистаДекларация", НомерЛиста);

		// Тут будем фиксировать листы возвратов, привязанные к тому же ОП, 
		// они так же могут повторяться.
		ДанныеПоЛисту.Вставить("НомерЛистаДругогоРаздела", Неопределено);

		ДанныеОП_Раздела[ИдОП].Вставить("Напечатан", Ложь);

	КонецЦикла;

	Возврат ДанныеОП_Раздела;

КонецФункции
#КонецОбласти

#Область СлужебныеДлительныеОперации

Функция ПолучитьПараметрыДлительнойОперацииАЛКО(Форма, ВидДлОперации,
		ВидПечати = Неопределено)

	ВидыДлитОперацийРеглОтчетов = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов;

	// Удалим предыдущие файлы временного хранилища.
	УдалитьИзВременногоХранилищаАдресаАЛКО(Форма, Истина, Истина, Истина);

	Результат = Новый Структура;
	// Общие данные для всех операций.
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ВспомогательныйАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

	Форма.СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Форма.СтруктураРеквизитовФормы.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
	Форма.СтруктураРеквизитовФормы.Вставить("АдресХранилищаДвоичныхДанных", АдресХранилищаДвоичныхДанных);

	Результат.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Результат.Вставить("ВспомогательныйАдресВоВременномХранилище", ВспомогательныйАдресВоВременномХранилище);
	Результат.Вставить("АдресХранилищаДвоичныхДанных", АдресХранилищаДвоичныхДанных);

	Результат.Вставить("СтруктураРеквизитовФормы", Форма.СтруктураРеквизитовФормы);
	Результат.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	Результат.Вставить("НомерАлкоОтчета", Форма.НомерАлкоОтчета);
	Результат.Вставить("ЕстьАдресаВСтрокахТаблиц", Форма.ЕстьАдресаВСтрокахТаблиц);
	Результат.Вставить("ИмяФормы", Форма.ИмяФормы);

	// Для общего случая. Далее для некоторых операций РежимДлительнойОперации может меняться.
	ВсегоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма);
	РежимДлительнойОперации = (ВсегоСтрок > 500);
	Результат.Вставить("РежимДлительнойОперации", РежимДлительнойОперации);

	Если ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Восстановление Тогда

		СписокИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);

		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

		Результат.Вставить("СтруктураИдГрупп", Форма.СтруктураРеквизитовФормы.мСтруктураИдГрупп);

		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);
		Результат.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);

		СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина);
		Результат.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.СкопироватьТекущиеРегистры Тогда

		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		
		СписокИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);

		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Выгрузка
			или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПроверкаВыгрузки
			или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПроверкаВыгрузкиВИнтернете
			или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ВыгрузкаПакета
			или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ОтправкаВКонтролирующийОрган Тогда
			
		// Поскольку для данных операций важно количество активных, не удаленных строк, считаем именно их.
		ВсегоСтрокБезУдаленных = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма, Истина);
		РежимДлительнойОперации = (ВсегоСтрокБезУдаленных > 500);
		
		Если Результат.ЕстьАдресаВСтрокахТаблиц Тогда
			// После обновления БСП в части работы с адресами (и перехода на ФИАС), выполнение проверок адресов стало
			// достаточно долгой - поэтому для данных операций порог срабатывания выполнения в фоне снижен.
									
			РежимДлительнойОперации = (ВсегоСтрокБезУдаленных > 50);					
		КонецЕсли;
		
		Результат.Вставить("РежимДлительнойОперации", РежимДлительнойОперации);

		ПараметрыВыгрузки = СформироватьСтруктуруПоказателейИСтруктуруПараметровАЛКО(Форма);
		Результат.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);

		ПараметрыФормы = ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма);
		Результат.Вставить("ПараметрыФормы", ПараметрыФормы);

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПересчетИтогов Тогда

		Если Результат.ЕстьАдресаВСтрокахТаблиц Тогда
			// После обновления БСП в части работы с адресами (и перехода на ФИАС), выполнение проверок адресов стало
			// достаточно долгой, при этом для пересчета итогов нет кеширования результата проверки адресов по классификатору
			// - поэтому для операции пересчета итогов, копирования отчета порог режима Длительной операции сильно снижен.
						
			РежимДлительнойОперации = (ВсегоСтрок > 10);
			Результат.Вставить("РежимДлительнойОперации", РежимДлительнойОперации);
		КонецЕсли;
								   
		СтруктураРесурсов = ПолучитьСтруктуруРесурсовАЛКО(Форма.СтруктураРеквизитовФормы, Форма.мСтруктураМногострочныхРазделов);
		Результат.Вставить("СтруктураРесурсов", СтруктураРесурсов);

		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);
		Результат.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);

		СтруктураИдГруппБуферИтогов = ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма);
		Результат.Вставить("СтруктураИдГруппБуферИтогов", СтруктураИдГруппБуферИтогов);

		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Печать
			или ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ПечатьВАрхив Тогда

		ПараметрыФормы = ПолучитьСтруктуруРеквизитовФормыАЛКО(Форма);
		Результат.Вставить("ПараметрыФормы", ПараметрыФормы);

		Результат.Вставить("Заголовок", Форма.Заголовок);
		Результат.Вставить("ОтчетныйПериодСГодом", Форма.ОтчетныйПериодСГодом);
		Результат.Вставить("ВидПечати", ВидПечати);

		Если НЕ Форма.Элементы.Найти("Перечень") = Неопределено Тогда
			Результат.Вставить("ТаблицаПеречень", Форма.Перечень.Выгрузить());
		КонецЕсли;

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ОчисткаРегистровСведенийОтМусора Тогда

		СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
		Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

		СтруктураСервисРегистров = ПолучитьСтруктуруСервисРегистровАЛКО(Форма);
		Результат.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);

		СтруктураСервисРегистровУдаленные = ПолучитьСтруктуруСервисРегистровАЛКО(Форма, Истина);
		Результат.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);

		УдалятьПомеченныеНаУдаление = Форма.ОбщийПараметрПроцедур.УдалятьПомеченныеНаУдаление;
		Результат.Вставить("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);

	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.Сохранение Тогда
	// Используются только общие параметры.
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.УдалениеДокументаОтчета Тогда
	// Используются только общие параметры.	
	ИначеЕсли ВидДлОперации = ВидыДлитОперацийРеглОтчетов.ЗаполнениеПоданнымИБ Тогда

		Если Форма.НомерАлкоОтчета = 11 или Форма.НомерАлкоОтчета = 12 Тогда
			// Заполняются только 11 и 12 алкоприложения - поэтому напрямую обращаемся
			// к данным Раздел 1 и Раздел 2 - они есть в обоих приложениях.
			// ИдГрупп в этих приложениях так же одинаковые.
			СтруктураИдГруппБуферИтогов = ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма);
			Результат.Вставить("СтруктураИдГруппБуферИтогов", СтруктураИдГруппБуферИтогов);

			СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
			Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

			Результат.Вставить("ИмяОбъектаФормы", Форма.ИмяОбъектаФормы);

			Контейнер = Новый Структура();

			// Должна быть без строк, но на всякий случай очистим.		
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
			ТЗ_ХранилищеП0000100003 = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаСервисРегистровП0000100003 = Форма["СервисРегистров" + ИдГруппы];
			ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров"
				+ ИдГруппы + "Удаленные"];

			Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаТаблицаСтраницыРаздел1 = Форма["ТаблицаСтраницы" + Раздел];
			ТЗ_ТаблицаСтраницыРаздел1 = ДанныеФормыВЗначение(ФормаТаблицаСтраницыРаздел1, Тип("ТаблицаЗначений"));
			ТЗ_ТаблицаСтраницыРаздел1.Очистить(); //Оставляем только колонки.

			// Должна быть без строк, но на всякий случай очистим.
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
			ТЗ_ХранилищеП0000200003 = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаСервисРегистровП0000200003 = Форма["СервисРегистров" + ИдГруппы];
			ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров"
				+ ИдГруппы + "Удаленные"];

			Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаТаблицаСтраницыРаздел2 = Форма["ТаблицаСтраницы" + Раздел];
			ТЗ_ТаблицаСтраницыРаздел2 = ДанныеФормыВЗначение(ФормаТаблицаСтраницыРаздел2, Тип("ТаблицаЗначений"));
			ТЗ_ТаблицаСтраницыРаздел2.Очистить(); //Оставляем только колонки.
			
			
			Раздел1_СервисРегистров = ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003, Тип("ТаблицаЗначений"));
			Раздел2_СервисРегистров = ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003, Тип("ТаблицаЗначений"));
			Раздел1_СервисРегистровУдаленные = ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003Удаленные, Тип("ТаблицаЗначений"));
			Раздел2_СервисРегистровУдаленные = ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003Удаленные, Тип("ТаблицаЗначений"));

			Контейнер.Вставить("Раздел1", ТЗ_ТаблицаСтраницыРаздел1);
			Контейнер.Вставить("Раздел2", ТЗ_ТаблицаСтраницыРаздел2);

			Контейнер.Вставить("Раздел1_ТЗ_Хранилище", ТЗ_ХранилищеП0000100003);
			Контейнер.Вставить("Раздел2_ТЗ_Хранилище", ТЗ_ХранилищеП0000200003);

			Контейнер.Вставить("Раздел1_СервисРегистров", Раздел1_СервисРегистров);
			Контейнер.Вставить("Раздел2_СервисРегистров", Раздел2_СервисРегистров);
			Контейнер.Вставить("Раздел1_СервисРегистровУдаленные", Раздел1_СервисРегистровУдаленные);
			Контейнер.Вставить("Раздел2_СервисРегистровУдаленные", Раздел2_СервисРегистровУдаленные);

			Контейнер.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

			Результат.Вставить("Контейнер", Контейнер);
			
			// Не известно заранее количество срок при заполнении, поэтому всегда включен.
			Результат.Вставить("РежимДлительнойОперации", Истина);
			
		КонецЕсли;
		
		Если Форма.НомерАлкоОтчета = 25 или Форма.НомерАлкоОтчета = 26 Тогда
			// Заполняются только 11 и 12 алкоприложения - поэтому напрямую обращаемся
			// к данным Раздел 1 и Раздел 2 - они есть в обоих приложениях.
			// ИдГрупп в этих приложениях так же одинаковые.
			СтруктураИдГруппБуферИтогов = ПолучитьСтруктуруИдГруппБуферИтоговАЛКО(Форма);
			Результат.Вставить("СтруктураИдГруппБуферИтогов", СтруктураИдГруппБуферИтогов);

			СтруктураИдГруппИменРегистровСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСтруктуруИдГруппИменРегистровАЛКО(Форма.СтруктураРеквизитовФормы);
			Результат.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

			Результат.Вставить("ИмяОбъектаФормы", Форма.ИмяОбъектаФормы);

			Контейнер = Новый Структура();

			// Должна быть без строк, но на всякий случай очистим.		
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
			ТЗ_ХранилищеП0000100003 = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаСервисРегистровП0000100003 = Форма["СервисРегистров" + ИдГруппы];
			ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров"
				+ ИдГруппы + "Удаленные"];
			
			// Должна быть без строк, но на всякий случай очистим.
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
			ТЗ_ХранилищеП0000200003 = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаСервисРегистровП0000200003 = Форма["СервисРегистров" + ИдГруппы];
			ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров"
				+ ИдГруппы + "Удаленные"];
				
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы32;
			ТЗ_ХранилищеП0000300003 = ПолучитьТаблицуЗначенийРегистраГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
			ФормаСервисРегистровП0000300003 = Форма["СервисРегистров" + ИдГруппы];
			ФормаСервисРегистровП0000300003Удаленные = Форма["СервисРегистров"
				+ ИдГруппы + "Удаленные"];

			ФормаТаблицаСтраницыДекларация = Форма["ТаблицаСтраницыДекларация"];
			ТЗ_ТаблицаСтраницыДекларация = ДанныеФормыВЗначение(ФормаТаблицаСтраницыДекларация, Тип("ТаблицаЗначений"));
			ТЗ_ТаблицаСтраницыДекларация.Очистить(); //Оставляем только колонки.
			
			
			Раздел1_СервисРегистров = ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003, Тип("ТаблицаЗначений"));
			Раздел2_СервисРегистров = ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003, Тип("ТаблицаЗначений"));
			Раздел3_СервисРегистров = ДанныеФормыВЗначение(ФормаСервисРегистровП0000300003, Тип("ТаблицаЗначений"));
			
			Раздел1_СервисРегистровУдаленные = ДанныеФормыВЗначение(ФормаСервисРегистровП0000100003Удаленные, Тип("ТаблицаЗначений"));
			Раздел2_СервисРегистровУдаленные = ДанныеФормыВЗначение(ФормаСервисРегистровП0000200003Удаленные, Тип("ТаблицаЗначений"));
			Раздел3_СервисРегистровУдаленные = ДанныеФормыВЗначение(ФормаСервисРегистровП0000300003Удаленные, Тип("ТаблицаЗначений"));

			Контейнер.Вставить("Декларация", ТЗ_ТаблицаСтраницыДекларация);
			
			Контейнер.Вставить("Раздел1_ТЗ_Хранилище", ТЗ_ХранилищеП0000100003);
			Контейнер.Вставить("Раздел2_ТЗ_Хранилище", ТЗ_ХранилищеП0000200003);
			Контейнер.Вставить("Раздел3_ТЗ_Хранилище", ТЗ_ХранилищеП0000300003);

			Контейнер.Вставить("Раздел1_СервисРегистров", Раздел1_СервисРегистров);
			Контейнер.Вставить("Раздел2_СервисРегистров", Раздел2_СервисРегистров);
			Контейнер.Вставить("Раздел3_СервисРегистров", Раздел3_СервисРегистров);
			
			Контейнер.Вставить("Раздел1_СервисРегистровУдаленные", Раздел1_СервисРегистровУдаленные);
			Контейнер.Вставить("Раздел2_СервисРегистровУдаленные", Раздел2_СервисРегистровУдаленные);
			Контейнер.Вставить("Раздел3_СервисРегистровУдаленные", Раздел3_СервисРегистровУдаленные);

			Контейнер.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

			Результат.Вставить("Контейнер", Контейнер);
			
			// Не известно заранее количество срок при заполнении, поэтому всегда включен.
			Результат.Вставить("РежимДлительнойОперации", Истина);
			
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ВидДлОперации 				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ПараметрыДлительнойОперации	- Структура - Параметры, передаваемые в длительную операцию.
//									Состав зависит от значения ВидДлОперации.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция выполнена.
//
Функция НачатьВыполнениеДлительнойОперацииАЛКО(ВидДлОперации,
		ПараметрыДлительнойОперации)

	Если ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление Тогда
		Возврат ВосстановитьРегистры(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки Тогда
		Возврат ПроверитьВыгрузкуОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка Тогда
		Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган Тогда
		Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете Тогда
		Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета Тогда
		Возврат ВыгрузкаОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов Тогда
		Возврат ПересчетИтогов(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать Тогда
		Возврат ПечатьОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив Тогда
		Возврат ПечатьОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение Тогда
		Возврат СохранитьРегистры(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ Тогда
		Возврат ЗаполнитьПоДаннымИБ(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора Тогда
		Возврат ОчисткаРегистровСведенийОтМусора(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета Тогда
		Возврат УдалениеДокументаОтчета(ПараметрыДлительнойОперации);

	ИначеЕсли ВидДлОперации = Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры Тогда
	// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		Возврат СкопироватьТекущиеРегистры(ПараметрыДлительнойОперации);

	КонецЕсли;

КонецФункции

Функция ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры,
		ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации,
		УникальныйИдентификаторЗадания)

	ЗаданиеВыполнено = Ложь;

	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()
			ИЛИ (НЕ РежимДлительнойОперации) Тогда

		ВерсияБСПЧислом = ПолучитьВерсиюБСПЧислом();

		ВыполнитьМетодКонфигурацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, ВерсияБСПЧислом);
		ЗаданиеВыполнено = Истина;

	Иначе

	// Режим длительной операции.
		ВремяОжидания = 0.8;

		Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);

		Задание = Задание.ОжидатьЗавершенияВыполнения(ВремяОжидания);

		УникальныйИдентификаторЗадания = Задание.УникальныйИдентификатор;

		// Если операция уже завершилась, то сразу обрабатываем результат.
		СообщениеОбОшибке = Неопределено;
		ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(УникальныйИдентификаторЗадания, СообщениеОбОшибке);

		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда			
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ВыполнитьДлительнуюОперациюСТранзакцией(ПараметрыДокумента,
		АдресХранилища) Экспорт

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	ИмяПроцедурыОперации = ПараметрыДокумента.ИмяПроцедурыОперации;

	Попытка

		Если ИмяПроцедурыОперации = "ВосстановитьДанныеТаблицАЛКО" Тогда

			ВосстановитьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища);

		ИначеЕсли ИмяПроцедурыОперации = "СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО" Тогда

			СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыДокумента, АдресХранилища);

		ИначеЕсли ИмяПроцедурыОперации = "СкопироватьДанныеТаблицАЛКО" Тогда

			СкопироватьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища);

		ИначеЕсли ИмяПроцедурыОперации = "ПересчетИтоговАЛКО" Тогда

			ПересчетИтоговАЛКО(ПараметрыДокумента, АдресХранилища);

		ИначеЕсли ИмяПроцедурыОперации = "ОчиститьРегистрыСведенийАЛКООтМусора" Тогда

			ОчиститьРегистрыСведенийАЛКООтМусора(ПараметрыДокумента, АдресХранилища);

		ИначеЕсли ИмяПроцедурыОперации = "УдалитьДокументОтчета" Тогда

			УдалитьДокументОтчета(ПараметрыДокумента, АдресХранилища);

		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеЖурнала = НСтр("ru = 'При выполнении длительной операции в процедуре "
			+ ИмяПроцедурыОперации + " возникла исключительная ситуация.'");
		ЗаписьЖурналаРегистрации(СообщениеЖурнала, УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);

		// Дальнейшая обработка и выдача сообщению пользователю
		// происходит в модуле РегламентированнаяОтчетностьАЛКОКлиент
		// в ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации() 
		// и ПослеВыполненияДлительнойОперацииПриОшибкеАЛКО().
	КонецПопытки;

КонецПроцедуры

Процедура ВыполнитьДлительнуюОперациюБезТранзакции(ПараметрыДокумента,
		АдресХранилища) Экспорт

	ИмяПроцедурыОперации = ПараметрыДокумента.ИмяПроцедурыОперации;

	Если ИмяПроцедурыОперации = "ПечатьОтчетаАЛКО" Тогда

		ПечатьОтчетаАЛКО(ПараметрыДокумента, АдресХранилища);

	ИначеЕсли ИмяПроцедурыОперации = "ПроверитьВыгрузкуОтчетаАЛКО" Тогда

		ПроверитьВыгрузкуОтчетаАЛКО(ПараметрыДокумента, АдресХранилища);

	ИначеЕсли ИмяПроцедурыОперации = "ВыгрузитьОтчетАЛКО" Тогда

		ВыгрузитьОтчетАЛКО(ПараметрыДокумента, АдресХранилища);

	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьПараметрыОбработчикаОжиданияАЛКО(МаксимальныйИнтервал,
		КоэффициентУвеличенияИнтервала) Экспорт

	БазаФайловая = ИнформационнаяБазаФайловая();

	УстановитьПривилегированныйРежим(Истина);
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	КоличествоСеансов = МассивСеансов.Количество();
	УстановитьПривилегированныйРежим(Ложь);

	// Стартовые стандартные значения для общего случая.
	// Устанавливаются для случая клиент-сервер базы с количеством подключений более 20.
	МаксимальныйИнтервал = 15;
	КоэффициентУвеличенияИнтервала = 1.5;

	// В файловой базе одномоментно может выполняться лишь одно фоновое задание.
	Если КоличествоСеансов < 6 или БазаФайловая Тогда

		МаксимальныйИнтервал = 10;
		КоэффициентУвеличенияИнтервала = 1.4;

	Иначе
	// Клиент - сервер.
		Если КоличествоСеансов < 11 Тогда

			МаксимальныйИнтервал = 10;
			КоэффициентУвеличенияИнтервала = 1.25;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#Область СохранитьВосстановитьКопироватьРегистрыСведенийДлительнаяОперация

Функция СохранитьРегистры(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ЭтоСохранение", Истина);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	РежимДлительнойОперации = НЕ (СтруктураРеквизитовФормы.мБезОткрытияФормы
		или (НЕ РежимДлительнойОперации));
	НаименованиеЗадания = НСтр("ru = 'Сохранение данных отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	// Отключаем режим длительной операции, на данный момент в нем нет необходимости
	// но оставим функционал на будущее, если понадобится.
	РежимДлительнойОперации = Ложь;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыДокумента,
		АдресХранилища = Неопределено, ВозвращаемаяСтруктура = Неопределено,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ДокументСсылкаАлкоОтчетПриемник = ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник = ПараметрыДокумента.ДокументСсылкаИсточник;

	ЭтоСохранение = Ложь;
	Если ПараметрыДокумента.Свойство("ЭтоСохранение") Тогда
		ЭтоСохранение = ПараметрыДокумента.ЭтоСохранение;
	КонецЕсли;

	ЭтоОтменаИзменений = Ложь;
	Если ПараметрыДокумента.Свойство("ЭтоОтменаИзменений") Тогда
		ЭтоОтменаИзменений = ПараметрыДокумента.ЭтоОтменаИзменений;
	КонецЕсли;

	ЭтоКопирование = НЕ (ЭтоСохранение или ЭтоОтменаИзменений);

	СписокИменРегистровСведений = Неопределено;
	Если ПараметрыДокумента.Свойство("СписокИменРегистровСведений") Тогда
		СписокИменРегистровСведений = ПараметрыДокумента.СписокИменРегистровСведений;
	КонецЕсли;

	СтруктураСервисРегистров = Неопределено;
	Если ПараметрыДокумента.Свойство("СтруктураСервисРегистров") Тогда
		СтруктураСервисРегистров = ПараметрыДокумента.СтруктураСервисРегистров;
	КонецЕсли;

	СтруктураСервисРегистровУдаленные = Неопределено;
	Если ПараметрыДокумента.Свойство("СтруктураСервисРегистровУдаленные") Тогда
		СтруктураСервисРегистровУдаленные = ПараметрыДокумента.СтруктураСервисРегистровУдаленные;
	КонецЕсли;

	МаксИндексСтраницы = 0;
	Если ПараметрыДокумента.Свойство("МаксИндексСтраницы") Тогда
		МаксИндексСтраницы = ПараметрыДокумента.МаксИндексСтраницы;
	КонецЕсли;

	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	Если НЕ ЭтоКопирование Тогда
	// При сохранении отличий быть не может. Только при восстановлении, если отчет скопирован.
		ДокументСсылкаАлкоОтчетИсточник = ДокументСсылкаАлкоОтчетПриемник;
	КонецЕсли;

	КолОтработанных = 0;
	
	НужноСохранитьОтчет = Ложь;

	Если ЭтоСохранение Тогда

		ДокументСсылкаАлкоОтчет = ДокументСсылкаАлкоОтчетПриемник;

		// При сохранении требуется просто очистить журнал от записей не относящихся к действию Сервис.
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет);

	ИначеЕсли ЭтоОтменаИзменений Тогда

		ДокументСсылкаАлкоОтчет = ДокументСсылкаАлкоОтчетПриемник;

		НужноСохранитьОтчет = ВосстановитьРегистрыСведенийАЛКО(
														ДокументСсылкаАлкоОтчет, МаксИндексСтраницы, 
														СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные);

	Иначе
	// В режиме копирования из одного отчета в другой.
		СтруктураСведенийОтчета = Новый Структура;

		СтруктураСведенийОтчета.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

		СкопироватьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета);

		КолОтработанных = СтруктураСведенийОтчета.КолОтработанных;
		МаксИндексСтраницы = СтруктураСведенийОтчета.МаксИндексСтраницы;
		СтруктураСервисРегистров = СтруктураСведенийОтчета.СтруктураСервисРегистров;
		СтруктураСервисРегистровУдаленные = СтруктураСведенийОтчета.СтруктураСервисРегистровУдаленные;

		НужноСохранитьОтчет = Истина;
		
	КонецЕсли;

	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", 					МаксИндексСтраницы);
	ВозвращаемаяСтруктура.Вставить("СервисРегистров", 						СтруктураСервисРегистров);
	ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", 				СтруктураСервисРегистровУдаленные);
	ВозвращаемаяСтруктура.Вставить("НужноСохранитьОтчет", НужноСохранитьОтчет);
	
	Если НЕ АдресХранилища = Неопределено Тогда

		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);

		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

	КонецЕсли;

КонецПроцедуры

Процедура СкопироватьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник,
		ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета,
		РежимОтладки = Неопределено)

	Перем СписокИменРегистровСведений, СтруктураСервисРегистров,
		СтруктураСервисРегистровУдаленные, МаксИндексСтраницы, КолОтработанных,
		ВспомогательныйАдрес;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчетИсточник);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СкопироватьРегистрыСведенийАЛКО() 
				|передан ДокументСсылкаАлкоОтчетИсточник, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчетИсточник = ДокументСсылка;
	
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчетПриемник);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СкопироватьРегистрыСведенийАЛКО() 
				|передан ДокументСсылкаАлкоОтчетПриемник, не являющийся ДокументСсылка.РегламентированныйОтчет!";
	КонецЕсли;
	ДокументСсылкаАлкоОтчетПриемник = ДокументСсылка;
	
	ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокументСсылкаАлкоОтчетПриемник);
	
	ИсточникОтчета = ОписаниеРегОтчета.ИсточникОтчета;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(ИсточникОтчета).Создать();
	
	ДатаКонцаПериодаОтчета = ОписаниеРегОтчета.ДатаКонцаПериодаОтчета;
	
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	СтруктураСведенийОтчета.Свойство("СписокИменРегистровСведений", СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", МаксИндексСтраницы);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);

	// Нужно полностью очистить регистр - Журнал  по документу приемнику.
	ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, , , , , Истина);

	// Пробуем вычислить количество строк которое надо обработать,
	// независимо от переданного.
	ВсегоСтрокКопируем = 0;

	Если НЕ СтруктураСервисРегистров = Неопределено Тогда

		Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл

			ИмяРегистра = ИмяРегистраСведений.Значение;

			СервисРегистров = СтруктураСервисРегистров[ИмяРегистра];

			Для Каждого СтрокаСервиса Из СервисРегистров Цикл
				ВсегоСтрокКопируем = ВсегоСтрокКопируем + СтрокаСервиса.КоличествоСтрок
					- СтрокаСервиса.КолвоСтрокПомНаУдаление;
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// Сначала удаляем все строки в приемнике,
	// он в нормальной ситуации должен быть пуст - на всякий случай.		
	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл

		ИмяРегистра = ИмяРегистраСведений.Значение;

		// Попутно заблокируем.
		Если ТранзакцияАктивна() Тогда
			Попытка

				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
					+ ИмяРегистра);
				ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчетПриемник);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();

			Исключение

				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений." + ИмяРегистра + "
					|- ошибка блокировки при удалении записей при копировании.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ВызватьИсключение;

			КонецПопытки;
		КонецЕсли;

		РегистрПриемник = РегистрыСведений[ИмяРегистра];

		НаборЗаписейПриемника = РегистрПриемник.СоздатьНаборЗаписей();
		НаборЗаписейПриемника.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчетПриемник);
		// Удаляем записывая пустой набор.
		НаборЗаписейПриемника.Записать(Истина);

	КонецЦикла;

	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл

		ИмяРегистра = ИмяРегистраСведений.Значение;

		// Попутно заблокируем.
		Если ТранзакцияАктивна() Тогда
			Попытка

				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
					+ ИмяРегистра);
				ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчетИсточник);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();

			Исключение

				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений." + ИмяРегистра + "
					|- ошибка блокировки при удалении записей при копировании.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ВызватьИсключение;

			КонецПопытки;
		КонецЕсли;

		СтруктураСведенийРегистраОтчета = Новый Структура;

		СтруктураСведенийРегистраОтчета.Вставить("ИмяРегистра", ИмяРегистра);
		СтруктураСведенийРегистраОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
		СтруктураСведенийРегистраОтчета.Вставить("ВсегоСтрокКопируем", ВсегоСтрокКопируем);
		СтруктураСведенийРегистраОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		СтруктураСведенийРегистраОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийРегистраОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
		СтруктураСведенийРегистраОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);

		СкопироватьРегистрСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник, ДокументСсылкаАлкоОтчетПриемник, 
														СтруктураСведенийРегистраОтчета, ОбъектОтчета, РежимОтладки);

		СтруктураСведенийРегистраОтчета.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
		СтруктураСведенийРегистраОтчета.Свойство("ВсегоСтрокКопируем", ВсегоСтрокКопируем);
		СтруктураСведенийРегистраОтчета.Свойство("МаксИндексСтраницы", МаксИндексСтраницы);
		СтруктураСведенийРегистраОтчета.Свойство("КолОтработанных", КолОтработанных);

	КонецЦикла;

	// Блок информирования о проценте выполнения.
	Если ВсегоСтрокКопируем > 0 Тогда

		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрокКопируем, , РежимОтладки);

	КонецЕсли;

	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);

КонецПроцедуры

Процедура СкопироватьРегистрСведенийАЛКО(ДокументСсылкаАлкоОтчетИсточник,
		ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета, 
		ОбъектОтчета = Неопределено, РежимОтладки = Неопределено)

	Перем ИмяРегистра, СтруктураСервисРегистров, МаксИндексСтраницы,
		ВсегоСтрокКопируем, КолОтработанных, ВспомогательныйАдрес, ДатаКонцаПериодаОтчета;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчетИсточник);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СкопироватьРегистрСведенийАЛКО() 
				|передан ДокументСсылкаАлкоОтчетИсточник, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчетИсточник = ДокументСсылка;
	
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчетПриемник);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.СкопироватьРегистрСведенийАЛКО() 
				|передан ДокументСсылкаАлкоОтчетПриемник, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчетПриемник = ДокументСсылка;
	
	СтруктураСведенийОтчета.Свойство("ИмяРегистра", ИмяРегистра);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрокКопируем", ВсегоСтрокКопируем);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", МаксИндексСтраницы);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
	СтруктураСведенийОтчета.Свойство("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);

	Если ОбъектОтчета = Неопределено Тогда
	
		ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокументСсылкаАлкоОтчетПриемник);
		ИсточникОтчета = ОписаниеРегОтчета.ИсточникОтчета;
		ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(ИсточникОтчета).Создать();
	
	КонецЕсли; 
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;
	
	// Количество записей в наборе записей при записи.
	// Писать по одной записи тоже можно, но медленнее, хотя оперативная память используется минимально.
	// поэтому количество записей в блоке не должно быть большим - ради скорости можно немного увеличить расход памяти.								
	КолВБлокеЗаписей = 1000;

	// Получаем менеджеры нужных регистров	
	РегистрПриемник = РегистрыСведений[ИмяРегистра];

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистра];

	НаборЗаписейПриемника = РегистрПриемник.СоздатьНаборЗаписей();

	ТекстЗапроса = "
		|ВЫБРАТЬ #СтрокаПервые
		|	РегистрСведенийАлкоОтчет.*
		|ИЗ
		|	#РегистрСведенийАЛКО КАК РегистрСведенийАлкоОтчет
		|ГДЕ
		|	РегистрСведенийАлкоОтчет.ИДДокИндСтраницы = &ИДДокИндСтраницы
		|	И РегистрСведенийАлкоОтчет.ИндексСтроки > &ТекущийИндексСтроки
		|
		|УПОРЯДОЧИТЬ ПО ИндексСтроки";

	СтрокаПервые = "ПЕРВЫЕ " + Формат(КолВБлокеЗаписей, "ЧГ=");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаПервые", СтрокаПервые);

	ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистра;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапроса;
	
	ИДДокИсточника = Неопределено;

	// Имеем СервисРегистров, т.е точно знаем какие индексы страниц используются в отчете, а какие нет. 
	Для Каждого СтрокаСервиса Из СервисРегистров Цикл

		ИспользуемыйИндексСтраницыИсточника = СтрокаСервиса.ИндексСтраницыРегистра;
		ИспользуемыйИндексСтраницыПриемника = ИспользуемыйИндексСтраницыИсточника;

		// Копируем только данные по этому индексу.
		ИДДокИндСтраницыИсточника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчетИсточник, ИспользуемыйИндексСтраницыИсточника, ИДДокИсточника);
		ТекущийИндексСтроки = 0;

		Пока Истина Цикл

			ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницыИсточника);
			ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);

			РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();

			Если РезЗапросаДанных.Пустой() Тогда
				Прервать;
			Иначе
				ВыборкаИсточник = РезЗапросаДанных.Выбрать();
			КонецЕсли;

			СтруктураСведенийРегистраОтчета = Новый Структура;

			СтруктураСведенийРегистраОтчета.Вставить("ДокументСсылкаАлкоОтчетИсточник", ДокументСсылкаАлкоОтчетИсточник);
			СтруктураСведенийРегистраОтчета.Вставить("ДокументСсылкаАлкоОтчетПриемник", ДокументСсылкаАлкоОтчетПриемник);
			СтруктураСведенийРегистраОтчета.Вставить("ИмяРегистра", ИмяРегистра);
			СтруктураСведенийРегистраОтчета.Вставить("ВсегоСтрок", ВсегоСтрокКопируем);
			СтруктураСведенийРегистраОтчета.Вставить("КолОтработанных", КолОтработанных);
			СтруктураСведенийРегистраОтчета.Вставить("КолВБлокеЗаписей", КолВБлокеЗаписей);
			СтруктураСведенийРегистраОтчета.Вставить("ИспользуемыйИндексСтраницыПриемника", ИспользуемыйИндексСтраницыПриемника);
			СтруктураСведенийРегистраОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
			СтруктураСведенийРегистраОтчета.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
			СтруктураСведенийРегистраОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);

			СкопироватьВыборкуРегистраСведенийАЛКО(ВыборкаИсточник, НаборЗаписейПриемника, 
									СтруктураСведенийРегистраОтчета, ОбъектОтчета, РежимОтладки);

			СтруктураСведенийРегистраОтчета.Свойство("ВсегоСтрок", ВсегоСтрокКопируем);
			СтруктураСведенийРегистраОтчета.Свойство("КолОтработанных", КолОтработанных);
			СтруктураСведенийРегистраОтчета.Свойство("ТекущийИндексСтроки", ТекущийИндексСтроки);

		КонецЦикла;
		
		Если ВсегоСтрокКопируем > 0 Тогда

			СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрокКопируем, , РежимОтладки);

		КонецЕсли;

		// Выставляем как Автозаполнение, поскольку не вносится информация по каждой строке.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", СтрокаСервиса.КоличествоСтрок);
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);

		ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, ИспользуемыйИндексСтраницыПриемника, 0, "Автозаполнение", Ресурсы);

	КонецЦикла;

	СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Вставить("ВсегоСтрокКопируем", ВсегоСтрокКопируем);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);

КонецПроцедуры

Процедура СкопироватьВыборкуРегистраСведенийАЛКО(ВыборкаИсточник,
		НаборЗаписейПриемника, СтруктураСведенийОтчета, 
		ОбъектОтчета = Неопределено, РежимОтладки = Неопределено)

	Перем ДокументСсылкаАлкоОтчетИсточник, ДокументСсылкаАлкоОтчетПриемник,
		ИмяРегистра, ВсегоСтрок, КолОтработанных, КолВБлокеЗаписей,
		ИспользуемыйИндексСтраницыПриемника, ВспомогательныйАдрес,
		ТекущийИндексСтроки, ДатаКонцаПериодаОтчета;

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	СтруктураСведенийОтчета.Свойство("ДокументСсылкаАлкоОтчетИсточник", ДокументСсылкаАлкоОтчетИсточник);
	СтруктураСведенийОтчета.Свойство("ДокументСсылкаАлкоОтчетПриемник", ДокументСсылкаАлкоОтчетПриемник);
	СтруктураСведенийОтчета.Свойство("ИмяРегистра", ИмяРегистра);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("КолВБлокеЗаписей", КолВБлокеЗаписей);
	СтруктураСведенийОтчета.Свойство("ИспользуемыйИндексСтраницыПриемника", ИспользуемыйИндексСтраницыПриемника);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
	СтруктураСведенийОтчета.Свойство("ТекущийИндексСтроки", ТекущийИндексСтроки);
	СтруктураСведенийОтчета.Свойство("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	Если ОбъектОтчета = Неопределено Тогда
	
		ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокументСсылкаАлкоОтчетПриемник);
		ИсточникОтчета = ОписаниеРегОтчета.ИсточникОтчета;
		ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(ИсточникОтчета).Создать();
	
	КонецЕсли;

	НаборЗаписейПриемника.Очистить();
	
	ИДДокИндСтраницыПриемника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчетПриемник, ИспользуемыйИндексСтраницыПриемника);

	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	Пока ВыборкаИсточник.Следующий() Цикл

		КолОтработанных = КолОтработанных + 1;

		ТекущийИндексСтроки = ВыборкаИсточник.ИндексСтроки;

		НоваяЗаписьПриемника = НаборЗаписейПриемника.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗаписьПриемника, ВыборкаИсточник);

		НоваяЗаписьПриемника.Документ = ДокументСсылкаАлкоОтчетПриемник;

		Если ВышеБРО_1_1_11_0 Тогда
			НоваяЗаписьПриемника.Организация = ДокументСсылкаАлкоОтчетПриемник.Организация;
		КонецЕсли;

		НоваяЗаписьПриемника.ИДДокИндСтраницы = ИДДокИндСтраницыПриемника;
		
		ОбъектОтчета.ОбработкаЗаписи(ИмяРегистра, НоваяЗаписьПриемника, 
									ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);

		// Пишем блок информирования о проценте выполнения и запись набора.
		Если КолОтработанных % КолВБлокеЗаписей = 0 Тогда

		// В режиме дописывания.
			НаборЗаписейПриемника.Записать(Ложь);
			НаборЗаписейПриемника.Очистить();

			Если ВсегоСтрок > 0 Тогда

				СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок, , РежимОтладки);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Дописываем остаток, если есть.
	Если НаборЗаписейПриемника.Количество() > 0 Тогда
		НаборЗаписейПриемника.Записать(Ложь);
		НаборЗаписейПриемника.Очистить();
	КонецЕсли;

	СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);

КонецПроцедуры
#КонецОбласти

#Область СкопироватьТекущиеРегистрыДлительнаяОперация

Функция СкопироватьТекущиеРегистры(ПараметрыДлительнойОперации)

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;

	СписокИменРегистровСведений = ПараметрыДлительнойОперации.СписокИменРегистровСведений;
	СтруктураИдГруппИменРегистровСведений = ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ДокументСсылкаИсточник = СтруктураРеквизитовФормы.мДокументИсточник;

	// Данные уже будут сохранены.
	//СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	СписокСохранения = ДокументСсылкаИсточник.ДанныеОтчета.Получить();
	
	СтруктураСервисРегистровИзСписка = СписокСохранения.СтруктураСервисРегистров;

	ВсегоСтрок = 0;
	Для каждого ЭлементСервисРегистров Из СтруктураСервисРегистровИзСписка Цикл

		СервисРегистровИзСписка = ЭлементСервисРегистров.Значение;
		Для каждого СтрокаСервисРегистровИзСписка Из СервисРегистровИзСписка Цикл
			ВсегоСтрок = ВсегоСтрок
				+ СтрокаСервисРегистровИзСписка.КоличествоСтрок;
		КонецЦикла;

	КонецЦикла;

	Если ПараметрыДлительнойОперации.ЕстьАдресаВСтрокахТаблиц Тогда
		// После обновления БСП в части работы с адресами (и перехода на ФИАС), выполнение проверок адресов стало
		// достаточно долгой, при этом для пересчета итогов нет кеширования результата проверки адресов по классификатору
		// - поэтому для операции пересчета итогов, копирования отчета порог режима Длительной операции сильно снижен,
		// поскольку используется ОбработкаЗаписи() модуля отчета, в которой адресная информация при необходимости
		// пересчитывается и приводится к текущему формату 
		// (актуально для старых отчетов с хранением в формате 9 запятых или строкой XML).
		РежимДлительнойОперации = (ВсегоСтрок > 10);
	Иначе
		РежимДлительнойОперации = (ВсегоСтрок > 500);	
	КонецЕсли;
		
	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);

	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", СтруктураРеквизитовФормы.мСохраненныйДок);
	// Если Отчет скопирован - нужно получить данные исходного отчета
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник", ДокументСсылкаИсточник);

	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
	ПараметрыОтчета.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

	ПараметрыОтчета.Вставить("СписокСохранения", СписокСохранения);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "СкопироватьДанныеТаблицАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	НаименованиеЗадания = НСтр("ru = 'Копирование данных таблиц отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура СкопироватьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ДокументСсылкаАлкоОтчетПриемник = ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник = ПараметрыДокумента.ДокументСсылкаИсточник;

	СписокИменРегистровСведений = ПараметрыДокумента.СписокИменРегистровСведений;

	СписокСохранения = ПараметрыДокумента.СписокСохранения;

	СервисРегистров = Неопределено;
	СервисРегистровУдаленные = Неопределено;
	МаксИндексСтраницы = 0;

	СервисРегистров = СписокСохранения.СтруктураСервисРегистров;
	СервисРегистровУдаленные = СписокСохранения.СтруктураСервисРегистровУдаленные;

	// При копировании информация о удаленных страницах не нужна.	
	Для каждого ЭлементСервисРегистровУдаленные Из СервисРегистровУдаленные Цикл

		ТекСервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
		ТекСервисРегистровУдаленные.Очистить();

	КонецЦикла;

	МаксИндексСтраницы = СписокСохранения.МаксИндексСтраницы;

	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	ПараметрыВосстановления = Новый Структура;
	ПараметрыВосстановления.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетПриемник);
	ПараметрыВосстановления.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);

	ПараметрыВосстановления.Вставить("ЭтоСохранение", Ложь);
	ПараметрыВосстановления.Вставить("ЭтоОтменаИзменений", Ложь);

	ПараметрыВосстановления.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);

	ПараметрыВосстановления.Вставить("СтруктураСервисРегистров", СервисРегистров);
	ПараметрыВосстановления.Вставить("СтруктураСервисРегистровУдаленные", СервисРегистровУдаленные);

	ПараметрыВосстановления.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);

	ПараметрыВосстановления.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

	ВозвращаемаяСтруктура = Неопределено;

	СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыВосстановления, , ВозвращаемаяСтруктура);

	СтруктураРезультата = Новый Структура;

	СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
	СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
	СтруктураРезультата.Вставить("БылИмпорт", Ложь);

	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

КонецПроцедуры
#КонецОбласти

#Область ВосстановитьРегистрыДлительнаяОперация

Процедура ИмпортИзДанныхСтарогоФормата(ДокументСсылкаАлкоОтчетПриемник,
		СтруктураСведенийОтчета)

	Перем ИмяФормыОбъекта, НомерАлкоОтчета, СписокСохранения,
		СписокИменРегистровСведений, СтруктураИдГрупп,
		СтруктураИдГруппИменРегистровСведений, СервисРегистров,
		СервисРегистровУдаленные, МаксИндексСтраницы;
	
	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчетПриемник);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ИмпортИзДанныхСтарогоФормата() 
				|передан ДокументСсылкаАлкоОтчетПриемник, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчетПриемник = ДокументСсылка;
	
	СтруктураСведенийОтчета.Свойство("ИмяФормыОбъекта", ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Свойство("НомерАлкоОтчета", НомерАлкоОтчета);

	СтруктураСведенийОтчета.Свойство("СписокСохранения", СписокСохранения);
	СтруктураСведенийОтчета.Свойство("СписокИменРегистровСведений", СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СтруктураИдГрупп", СтруктураИдГрупп);

	СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);

	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", МаксИндексСтраницы);

	Если МаксИндексСтраницы < 5 Тогда
		МаксИндексСтраницы = 5;
	КонецЕсли;

	// На всякий случай удалим все из СервисРегистров в СервисРегистровУдаленные.
	Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл

		ИмяРегистра = ИмяРегистраСведений.Значение;

		СервисРегистровГруппы = СервисРегистров[ИмяРегистра];
		СервисРегистровГруппыУдаленные = СервисРегистровУдаленные[ИмяРегистра];

		Для Каждого СтрокаСервисРегистровГруппы Из СервисРегистровГруппы Цикл

			НоваяСтрокаСервисРегистровГруппыУдаленные = СервисРегистровГруппыУдаленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);

			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.	
			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);

		КонецЦикла;

		СервисРегистровГруппы.Очистить();

	КонецЦикла;

	ИмпортВыполнен = Ложь;

	// Вначале проверяем предыдущий вариант формата.
	ХранилищаДопСтрок = Неопределено;
	Если СписокСохранения.Свойство("ХранилищаДопСтрок", ХранилищаДопСтрок) Тогда

		Для Каждого Хранилище Из ХранилищаДопСтрок Цикл

			ИмяХранилищаКлюч = Хранилище.Ключ;
			ТаблЗнач = Хранилище.Значение;

			Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") Тогда

				ПозицияПодчеркивания = СтрНайти(ИмяХранилищаКлюч, "_");

				Если ПозицияПодчеркивания > 0 Тогда

					ИмяХранилища = Лев(ИмяХранилищаКлюч, ПозицияПодчеркивания - 1);
					ИдГруппы = СтрЗаменить(ИмяХранилища, "Хранилище", "");

					Если СтрДлина(ИмяХранилищаКлюч) > ПозицияПодчеркивания Тогда
						ИндексСтраницы = Число(Сред(ИмяХранилищаКлюч, ПозицияПодчеркивания
							+ 1));
					Иначе
						ИндексСтраницы = 0;
					КонецЕсли;

					// Пишем в регистр.
					ИмяРегистра = СтруктураИдГруппИменРегистровСведений[ИдГруппы];
					СервисРегистровГруппы = СервисРегистров[ИмяРегистра];

					Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл

						НоваяСтрока = СервисРегистровГруппы.Добавить();
						НоваяСтрока.ИндексСтраницыРегистра = 0;
						НоваяСтрока.КоличествоСтрок = 0;
						НоваяСтрока.КолвоСтрокПомНаУдаление = 0;

					КонецЦикла;

					ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

					Если ИндексСтраницыРегистра = 0 Тогда

						МаксИндексСтраницы = МаксИндексСтраницы + 1;
						ИндексСтраницыРегистра = МаксИндексСтраницы;
						СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;

					КонецЕсли;

					КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;

					ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра, ИндексСтраницыРегистра, ТаблЗнач, КоличествоТекСтрок);

					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;

					// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
					Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);

				КонецЕсли;

			ИначеЕсли ТипЗнч(ТаблЗнач) = Тип("СписокЗначений") Тогда

				ПозицияПодчеркивания = СтрНайти(ИмяХранилищаКлюч, "_");

				СписЗнач = ТаблЗнач;

				Если ПозицияПодчеркивания > 0 Тогда

					ИмяХранилища = Лев(ИмяХранилищаКлюч, ПозицияПодчеркивания - 1);
					ИдГруппы = СтрЗаменить(ИмяХранилища, "Хранилище", "");

					Если СтрДлина(ИмяХранилищаКлюч) > ПозицияПодчеркивания Тогда
						ИндексСтраницы = Число(Сред(ИмяХранилищаКлюч, ПозицияПодчеркивания
							+ 1));
					Иначе
						ИндексСтраницы = 0;
					КонецЕсли;

					// Пишем в регистр.
					ИмяРегистра = СтруктураИдГруппИменРегистровСведений[ИдГруппы];
					СервисРегистровГруппы = СервисРегистров[ИмяРегистра];

					Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл

						НоваяСтрока = СервисРегистровГруппы.Добавить();
						НоваяСтрока.ИндексСтраницыРегистра = 0;
						НоваяСтрока.КоличествоСтрок = 0;
						НоваяСтрока.КолвоСтрокПомНаУдаление = 0;

					КонецЦикла;

					ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

					Если ИндексСтраницыРегистра = 0 Тогда

						МаксИндексСтраницы = МаксИндексСтраницы + 1;
						ИндексСтраницыРегистра = МаксИндексСтраницы;
						СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;

					КонецЕсли;

					КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;

					Для Каждого ДиапозонСтрокХранилища Из СписЗнач Цикл

						ТЗДиапозонСтрокХранилища = ДиапозонСтрокХранилища.Значение;

						ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра, ИндексСтраницыРегистра, ТЗДиапозонСтрокХранилища, КоличествоТекСтрок);

					КонецЦикла;

					СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;

					// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
					Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
					// Индекс строки 0 используем для обозначения операций над страницами в целом.
					// В норме индекс строки не меньше 1.
					ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		СписокСохранения.Удалить("ХранилищаДопСтрок");

		ИмпортВыполнен = Истина;

	КонецЕсли;

	Если НЕ ИмпортВыполнен Тогда

		ДанныеМногостраничныхРазделов = Неопределено;
		// Остается вариант самой старой реализации сохранения из поддерживаемых.
		Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

			ИндексыСтраницОтчета = Новый Структура;

			Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл

				ИмяРегистра = Неопределено;
				ИдГруппы = Неопределено;

				// ЭлементСтруктуры.Ключ - Лицензии, Раздел1, Раздел2.
				Раздел = ЭлементСтруктуры.Ключ;

				// Несколько групп в разделе могут быть только в отчетах на новом механизме.
				// При импорте из старого формата на базе табличного документа в разделе всегда одна группа
				// и один регистр сведений ему соответсвует.
				СтруктураИдГруппИменРегистровСведений.Свойство(Раздел, ИмяРегистра);

				Если НЕ ИмяРегистра = Неопределено Тогда

					Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл

						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда

							СписокОтработанныхРегистров = Новый СписокЗначений;

							// Загрузка Хранилищ Допстрок разделов из старого формата хранения.
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл

							// ЭлСтруктуры.Ключ - содержат ИД групп.
								ИдГруппы = ЭлСтруктуры.Ключ;

								// Группы в целом по организации не восстанвливаем,
								// смотрим только по ОП - они есть в СтруктураИдГруппИменРегистровСведений.
								ИмяРегистра = Неопределено;
								СтруктураИдГруппИменРегистровСведений.Свойство(ИдГруппы, ИмяРегистра);

								Если ИмяРегистра = Неопределено Тогда
									Продолжить;
								КонецЕсли;

								// В новом отчете для раздела может быть несколько таблиц, которые
								// в старых отчетах были в одной таблице.
								СписокИдГруппРаздела = Неопределено;
								СтруктураИдГрупп.Свойство(Раздел, СписокИдГруппРаздела);

								// Индекс страницы определяем по одной основной группе раздела.
								Если НЕ ИндексыСтраницОтчета.Свойство(ИмяРегистра) Тогда
									ИндексыСтраницОтчета.Вставить(ИмяРегистра, Новый Массив);
								КонецЕсли;
								ИндексыСтраницОтчета[ИмяРегистра].Добавить(0);

								// Определим Индекс страницы.
								ИндексСтраницы = ИндексыСтраницОтчета[ИмяРегистра].ВГраница();

								Для Каждого ЭлементСпискаИдГруппРаздела Из СписокИдГруппРаздела Цикл

									ИдГруппыРаздела = ЭлементСпискаИдГруппРаздела.Значение;

									ИмяРегистра = Неопределено;
									СтруктураИдГруппИменРегистровСведений.Свойство(ИдГруппыРаздела, ИмяРегистра);

									Если ИмяРегистра = Неопределено Тогда
										Продолжить;
									КонецЕсли;

									Если НЕ СписокОтработанныхРегистров.НайтиПоЗначению(ИмяРегистра) = Неопределено Тогда
										Продолжить;
									Иначе
										СписокОтработанныхРегистров.Добавить(ИмяРегистра);
									КонецЕсли;

									ТаблЗнач = ЭлСтруктуры.Значение;

									// Заменяем префиксы группы старого отчета на префиксы группы нового.
									Для Каждого Колонка Из ТаблЗнач.Колонки Цикл

										ИмяКолонки = Колонка.Имя;
										ИмяКолонки = СтрЗаменить(ИмяКолонки, ИдГруппы, ИдГруппыРаздела);
										Колонка.Имя = ИмяКолонки;

									КонецЦикла;

									СервисРегистровГруппы = СервисРегистров[ИмяРегистра];

									Пока СервисРегистровГруппы.Количество() < ИндексСтраницы + 1 Цикл

										НоваяСтрока = СервисРегистровГруппы.Добавить();
										НоваяСтрока.ИндексСтраницыРегистра = 0;
										НоваяСтрока.КоличествоСтрок = 0;
										НоваяСтрока.КолвоСтрокПомНаУдаление = 0;

									КонецЦикла;

									ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

									Если ИндексСтраницыРегистра = 0 Тогда

										МаксИндексСтраницы = МаксИндексСтраницы + 1;
										ИндексСтраницыРегистра = МаксИндексСтраницы;
										СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра = МаксИндексСтраницы;

									КонецЕсли;

									// Обработка импорта адресной информации из отчетов с адресными полями в таблицах.
									Если НомерАлкоОтчета = 6 или НомерАлкоОтчета = 7
											или НомерАлкоОтчета = 9 Тогда

										МассивСуффиксов = Новый Массив;
										Если НомерАлкоОтчета = 6 или НомерАлкоОтчета = 7 Тогда
											МассивСуффиксов.Добавить("07");
										ИначеЕсли НомерАлкоОтчета = 9 Тогда
											МассивСуффиксов.Добавить("06");
											МассивСуффиксов.Добавить("13");
										КонецЕсли;

										Для каждого СуфиксАдресногоПоля Из МассивСуффиксов Цикл

											ИмяАдресногоПоля = ИдГруппы + СуфиксАдресногоПоля;

											// Для адресной информации нужно наличие поля ИдГруппы + СуфиксАдресногоПоля + "XML",
											// поэтому для таких отчетов дополним сразу таблицу значений полями регистров сведений.									
											ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистра, ТаблЗнач);

											// Нужно достать из дополнительных данных адресную информацию.
											Если НЕ ЭлементСтруктуры.Значение.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда

												ДополнительныеДанныеСтраницы = СтрокаТаблЗнач.ДополнительныеДанные;

												ИмпортАдресныхДанныхТаблицИзДополнительныхДанных(ДополнительныеДанныеСтраницы, ИмяАдресногоПоля, ТаблЗнач);
											КонецЕсли;

										КонецЦикла;

									КонецЕсли;

									КоличествоТекСтрок = СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;

									ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчетПриемник, ИмяФормыОбъекта, ИмяРегистра, ИндексСтраницыРегистра, ТаблЗнач, КоличествоТекСтрок);

									СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок = КоличествоТекСтрок;

									// Выставляем автозаполнение, поскольку не пишем информацию по каждой строке в журнал.
									Ресурсы = Новый Структура;
									Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);
									Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
									// Индекс строки 0 используем для обозначения операций над страницами в целом.
									// В норме индекс строки не меньше 1.
									ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчетПриемник, ИмяРегистра, ИндексСтраницыРегистра, 0, "Автозаполнение", Ресурсы);

									// Возвращаем назад префиксы группы старого отчета, 
									// на случай наличия еще одной группы в новом отчете.
									Для Каждого Колонка Из ТаблЗнач.Колонки Цикл

										ИмяКолонки = Колонка.Имя;
										ИмяКолонки = СтрЗаменить(ИмяКолонки, ИдГруппыРаздела, ИдГруппы);
										Колонка.Имя = ИмяКолонки;

									КонецЦикла;

								КонецЦикла;

							КонецЦикла;

						КонецЕсли;

					КонецЦикла;

					// Удаляем допстроки.
					ЭлементСтруктуры.Значение.Колонки.Удалить("ДанныеДопСтрок");

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	СтруктураСведенийОтчета.Вставить("СписокСохранения", СписокСохранения);
	СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);

КонецПроцедуры

Процедура ИмпортАдресныхДанныхТаблицИзДополнительныхДанных(ДополнительныеДанныеСтраницы,
		ИмяАдресногоПоля, ТаблЗнач, ИмяАдресногоПоляТаблицы = Неопределено,
		ИмяАдресногоПоляXMLТаблицы = Неопределено)

	Если ИмяАдресногоПоляТаблицы = Неопределено Тогда
		ИмяАдресногоПоляТаблицы = ИмяАдресногоПоля;
	КонецЕсли;

	Если ИмяАдресногоПоляXMLТаблицы = Неопределено Тогда
		ИмяАдресногоПоляXMLТаблицы = ИмяАдресногоПоляТаблицы + "XML";
	КонецЕсли;

	СписокУдаляемых = Новый СписокЗначений;

	Для Каждого ЭлементДопДанных Из ДополнительныеДанныеСтраницы Цикл

		ИмяЯчейки = ЭлементДопДанных.Ключ;

		Если СтрНайти(ИмяЯчейки, ИмяАдресногоПоля + "_") = 1 Тогда

		// Это адресная информация.												
			НомерСтроки = Число(СтрЗаменить(ИмяЯчейки, ИмяАдресногоПоля + "_", ""));

			СохраненныйАдресМестаДеятельности = ЭлементДопДанных.Значение;

			АдресМестаДеятельности = ПолучитьПустуюСтруктуруАдреса();
			Если ТипЗнч(СохраненныйАдресМестаДеятельности) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(АдресМестаДеятельности, СохраненныйАдресМестаДеятельности);
			КонецЕсли;

			Если ТипЗнч(АдресМестаДеятельности.КодРегиона) = Тип("Строка")
					И СтрДлина(АдресМестаДеятельности.КодРегиона) = 2
					И (НЕ АдресМестаДеятельности.КодРегиона = "00") Тогда

				АдресМестаДеятельности.Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(АдресМестаДеятельности.КодРегиона);

			Иначе
				Если ТипЗнч(АдресМестаДеятельности.Регион) = Тип("Строка")
						И СтрДлина(АдресМестаДеятельности.Регион) = 2
						И (НЕ АдресМестаДеятельности.Регион = "00") Тогда

					АдресМестаДеятельности.КодРегиона = АдресМестаДеятельности.Регион;
					АдресМестаДеятельности.Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(АдресМестаДеятельности.КодРегиона);

				ИначеЕсли (ТипЗнч(АдресМестаДеятельности.Регион) = Тип("Строка"))
						И (СтрДлина(АдресМестаДеятельности.Регион) > 2) Тогда

					АдресМестаДеятельности.КодРегиона = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресМестаДеятельности.Регион);

				КонецЕсли;
			КонецЕсли;

			Представление = ТаблЗнач[НомерСтроки - 1][ИмяАдресногоПоляТаблицы];
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресМестаДеятельности, Перечисления.ТипыКонтактнойИнформации.Адрес);

			ТаблЗнач[НомерСтроки - 1][ИмяАдресногоПоляТаблицы] = Представление;
			ТаблЗнач[НомерСтроки - 1][ИмяАдресногоПоляXMLТаблицы] = АдресXML;

			СписокУдаляемых.Добавить(ИмяЯчейки);

		КонецЕсли;

	КонецЦикла;

	// Удаляем отработанные данные.
	Для Каждого ЭлементСпискаУдаляемых Из СписокУдаляемых Цикл

		ИмяЯчейки = ЭлементСпискаУдаляемых.Значение;
		ДополнительныеДанныеСтраницы.Удалить(ИмяЯчейки);

	КонецЦикла;

КонецПроцедуры

Функция ВосстановитьРегистры(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;

	СтруктураСервисРегистров = ПараметрыДлительнойОперации.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные = ПараметрыДлительнойОперации.СтруктураСервисРегистровУдаленные;

	СписокИменРегистровСведений = ПараметрыДлительнойОперации.СписокИменРегистровСведений;
	СтруктураИдГруппИменРегистровСведений = ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;
	СтруктураИдГрупп = ПараметрыДлительнойОперации.СтруктураИдГрупп;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	// Имеет смысл либо при копировании отчета, либо при открытии отчета, с сохраненными данными в старом формате
	// либо при открытии отчета с несохраненными данными (отказом от сохранения при закрытии).
	ЭтоКопирование = (НЕ СтруктураРеквизитовФормы.мДокументИсточник = Неопределено);

	ДокументСсылкаИсточник = ?(ЭтоКопирование, СтруктураРеквизитовФормы.мДокументИсточник, СтруктураРеквизитовФормы.мСохраненныйДок);

	ЭтоОтменаИзменений = ЖурналНеПуст(СтруктураРеквизитовФормы.мСохраненныйДок);

	СписокСохранения = ДокументСсылкаИсточник.ДанныеОтчета.Получить();
	Если НЕ ЗначениеЗаполнено(СписокСохранения) Тогда
		// Это новый отчет, еще не сохранялся, восстанавливать нечего.
		Возврат Истина;	
	КонецЕсли;
	
	ЭтоСтарыйФормат = НЕ СписокСохранения.Свойство("СтруктураСервисРегистров");

	РежимДлительнойОперацииПриКопировании = Ложь;
	Если ЭтоКопирование и (НЕ ЭтоСтарыйФормат) Тогда
		
		// Получаем количество строк источника.
		СтруктураСервисРегистровИзСписка = СписокСохранения.СтруктураСервисРегистров;

		ВсегоСтрок = 0;
		Для каждого ЭлементСервисРегистров Из СтруктураСервисРегистровИзСписка Цикл

			СервисРегистровИзСписка = ЭлементСервисРегистров.Значение;
			Для каждого СтрокаСервисРегистровИзСписка Из СервисРегистровИзСписка Цикл
				ВсегоСтрок = ВсегоСтрок
					+ СтрокаСервисРегистровИзСписка.КоличествоСтрок;
			КонецЦикла;

		КонецЦикла;
		
		Если ПараметрыДлительнойОперации.ЕстьАдресаВСтрокахТаблиц Тогда
			// После обновления БСП в части работы с адресами (и перехода на ФИАС), выполнение проверок адресов стало
			// достаточно долгой, при этом для пересчета итогов нет кеширования результата проверки адресов по классификатору
			// - поэтому для операции пересчета итогов, копирования отчета порог режима Длительной операции сильно снижен,
			// поскольку используется ОбработкаЗаписи() модуля отчета, в которой адресная информация при необходимости
			// пересчитывается и приводится к текущему формату 
			// (актуально для старых отчетов с хранением в формате 9 запятых или строкой XML).
			РежимДлительнойОперацииПриКопировании = (ВсегоСтрок > 10);
		Иначе
			РежимДлительнойОперацииПриКопировании = (ВсегоСтрок > 500);	
		КонецЕсли;

	ИначеЕсли ЭтоКопирование Тогда
		РежимДлительнойОперацииПриКопировании = Истина;
	КонецЕсли;

	РежимДлительнойОперации = ЭтоСтарыйФормат
		или РежимДлительнойОперацииПриКопировании;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);

	ПараметрыОтчета.Вставить("ДокументСсылкаПриемник", СтруктураРеквизитовФормы.мСохраненныйДок);
	// Если Отчет скопирован - нужно получить данные исходного отчета
	ПараметрыОтчета.Вставить("ДокументСсылкаИсточник", ДокументСсылкаИсточник);

	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);
	ПараметрыОтчета.Вставить("НомерАлкоОтчета", НомерАлкоОтчета);

	ПараметрыОтчета.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	ПараметрыОтчета.Вставить("СтруктураИдГрупп", СтруктураИдГрупп);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);

	ПараметрыОтчета.Вставить("ЭтоКопирование", ЭтоКопирование);
	ПараметрыОтчета.Вставить("ЭтоСтарыйФормат", ЭтоСтарыйФормат);
	ПараметрыОтчета.Вставить("ЭтоОтменаИзменений", ЭтоОтменаИзменений);

	ПараметрыОтчета.Вставить("СписокСохранения", СписокСохранения);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ВосстановитьДанныеТаблицАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	РежимДлительнойОперации = НЕ (СтруктураРеквизитовФормы.мБезОткрытияФормы
		или (НЕ РежимДлительнойОперации));
	НаименованиеЗадания = НСтр("ru = 'Восстановление данных таблиц отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Функция ВосстановитьРегистрыСведенийАЛКО(ДокументСсылкаАлкоОтчет,
		МаксИндексСтраницы, СтруктураСервисРегистров,
		СтруктураСервисРегистровУдаленные)

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ВосстановитьРегистрыСведенийАЛКО() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	НужноСохранитьОтчет = Ложь;
	// СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные - соответствуют сохраненным.
	// тут ничего делать не надо.

	// Удаленные страницы восстановятся, добавленные страницы "исчезнут" благодаря восстановленным 
	// СтруктураСервисРегистров, СтруктураСервисРегистровУдаленные.

	// Остается удалить добавленные строки и восстановить начальные значения отредактированных.

	// Сначала нужно убрать из журнала всю информацию по добавленным или автозаполненным страницам - редактирование строк
	// этих страниц полезной информации не несет, поскольку эти страницы "исчезнут".

	// Но нужно добавить эти страницы в "удаленные" Сервис регистров - чтобы эти страницы потом можно было почистить при
	// очистке от мусора.
	НаборЗаписейЖурналаАвтозаполнение = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "Автозаполнение");

	Для Каждого ЗаписьЖурналаАвтозаполнение Из НаборЗаписейЖурналаАвтозаполнение Цикл

		ИндексРегистра = ЗаписьЖурналаАвтозаполнение.ИндексСтраницыРегистра;
		ИмяРегистра = ЗаписьЖурналаАвтозаполнение.ИмяРегистра;

		КоличествоСтрокПоСтранице = ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);

		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистра];

		НоваяСтрокаУдаленных = СервисРегистровУдаленные.Добавить();
		НоваяСтрокаУдаленных.КоличествоСтрок = КоличествоСтрокПоСтранице;
		НоваяСтрокаУдаленных.ИндексСтраницыРегистра = ИндексРегистра;

		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
		
		НужноСохранитьОтчет = Истина;
		
	КонецЦикла;
	НаборЗаписейЖурналаАвтозаполнение = Неопределено;

	НаборЗаписейЖурналаДобавление = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "ДобавлениеСтраницы");

	Для Каждого ЗаписьЖурналаДобавление Из НаборЗаписейЖурналаДобавление Цикл

		ИндексРегистра = ЗаписьЖурналаДобавление.ИндексСтраницыРегистра;
		ИмяРегистра = ЗаписьЖурналаДобавление.ИмяРегистра;

		КоличествоСтрокПоСтранице = ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);

		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистра];

		НоваяСтрокаУдаленных = СервисРегистровУдаленные.Добавить();
		НоваяСтрокаУдаленных.КоличествоСтрок = КоличествоСтрокПоСтранице;
		НоваяСтрокаУдаленных.ИндексСтраницыРегистра = ИндексРегистра;

		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра);
		
		НужноСохранитьОтчет = Истина;
		
	КонецЦикла;
	НаборЗаписейЖурналаДобавление = Неопределено;

	СтруктураНаборовЗаписей = Новый Структура;
	ИДДок = Неопределено;

	// Теперь надо удалить все добавленные в последнем сеансе строки.
	НаборЗаписейЖурналаДобавленыхСтрок = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "ДобавлениеСтроки");
	Для Каждого ЗаписьЖурналаДобавлениеСтроки Из НаборЗаписейЖурналаДобавленыхСтрок Цикл

		ИндексРегистра = ЗаписьЖурналаДобавлениеСтроки.ИндексСтраницыРегистра;
		ИмяРегистра = ЗаписьЖурналаДобавлениеСтроки.ИмяРегистра;
		ИндексСтроки = ЗаписьЖурналаДобавлениеСтроки.ИндексСтроки;

		Если ТранзакцияАктивна() Тогда
			Попытка

				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
					+ ИмяРегистра);
				ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();

			Исключение

				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений." + ИмяРегистра + "
					|- ошибка блокировки при удалении добавленных, но не сохраненных записей.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ВызватьИсключение;

			КонецПопытки;
		КонецЕсли;

		// Удаляем из регистров эти строки.
		Если СтруктураНаборовЗаписей.Свойство(ИмяРегистра) Тогда
			НаборЗаписейРегистраУдаления = СтруктураНаборовЗаписей[ИмяРегистра];
		Иначе
			РегистрУдаления = РегистрыСведений[ИмяРегистра];
			НаборЗаписейРегистраУдаления = РегистрУдаления.СоздатьНаборЗаписей();
			СтруктураНаборовЗаписей.Вставить(ИмяРегистра, НаборЗаписейРегистраУдаления);
		КонецЕсли;

		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, Число(ИндексРегистра), ИДДок);

		НаборЗаписейРегистраУдаления.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);
		НаборЗаписейРегистраУдаления.Отбор.ИндексСтроки.Установить(Число(ИндексСтроки));
		// Удаляем записывая пустой набор в режиме замещения.
		НаборЗаписейРегистраУдаления.Записать(Истина);

		// Удаляем из Журнала всю информацию по этим строкам.
		ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексРегистра, ИндексСтроки);
		
		НужноСохранитьОтчет = Истина;
		
	КонецЦикла;
	НаборЗаписейЖурналаДобавленыхСтрок = Неопределено;

	// Осталось восстановить строки, которые редактировали.	
	НаборЗаписейЖурналаРедактирование = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, , , , "Редактирование");
	Для Каждого ЗаписьЖурналаРедактирование Из НаборЗаписейЖурналаРедактирование Цикл

		ИндексРегистра = ЗаписьЖурналаРедактирование.ИндексСтраницыРегистра;
		ИмяРегистра = ЗаписьЖурналаРедактирование.ИмяРегистра;
		ИндексСтроки = ЗаписьЖурналаРедактирование.ИндексСтроки;
		НачальноеЗначение = ЗаписьЖурналаРедактирование.НачальноеЗначение;

		Если ТранзакцияАктивна() Тогда
			Попытка

				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
					+ ИмяРегистра);
				ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();

			Исключение

				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений." + ИмяРегистра + "
					|- ошибка блокировки при восстановлении измененных записей.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ВызватьИсключение;

			КонецПопытки;
		КонецЕсли;

		СтруктураНачальногоЗначения = Неопределено;

		Если НЕ НачальноеЗначение = Неопределено Тогда

			СтруктураНачальногоЗначения = ЗначениеИзСтрокиВнутр(НачальноеЗначение);

		КонецЕсли;

		Если НЕ СтруктураНачальногоЗначения = Неопределено Тогда

		// Позиционируемся на отредактированной строке.
			Если СтруктураНаборовЗаписей.Свойство(ИмяРегистра) Тогда
				НаборЗаписейРегистраРедактирование = СтруктураНаборовЗаписей[ИмяРегистра];
			Иначе
				РегистрРедактирование = РегистрыСведений[ИмяРегистра];
				НаборЗаписейРегистраРедактирование = РегистрРедактирование.СоздатьНаборЗаписей();
				СтруктураНаборовЗаписей.Вставить(ИмяРегистра, НаборЗаписейРегистраРедактирование);
			КонецЕсли;

			ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, Число(ИндексРегистра), ИДДок);

			НаборЗаписейРегистраРедактирование.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);
			НаборЗаписейРегистраРедактирование.Отбор.ИндексСтроки.Установить(Число(ИндексСтроки));

			НаборЗаписейРегистраРедактирование.Прочитать();
			// В наборе может быть только одна запись.
			ЗаписьОтредактированная = НаборЗаписейРегистраРедактирование[0];
			// Возвращаем исходные значения.
			ЗаполнитьЗначенияСвойств(ЗаписьОтредактированная, СтруктураНачальногоЗначения);
			// Записываем в режиме замещения.
			НаборЗаписейРегистраРедактирование.Записать(Истина);
			// Очищаем для следующей итерации.
			НаборЗаписейРегистраРедактирование.Очистить();

		КонецЕсли;
		
		НужноСохранитьОтчет = Истина;
		
	КонецЦикла;
	НаборЗаписейЖурналаРедактирование = Неопределено;

	// Очищаем Журнал, но оставляем записи по действию Сервис.
	ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет);

	Возврат НужноСохранитьОтчет;
	
КонецФункции

Процедура ВосстановитьДанныеТаблицАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ДокументСсылкаАлкоОтчетПриемник = ПараметрыДокумента.ДокументСсылкаПриемник;
	ДокументСсылкаАлкоОтчетИсточник = ПараметрыДокумента.ДокументСсылкаИсточник;
	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	НомерАлкоОтчета = ПараметрыДокумента.НомерАлкоОтчета;

	СписокИменРегистровСведений = ПараметрыДокумента.СписокИменРегистровСведений;
	СтруктураИдГруппИменРегистровСведений = ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;
	СтруктураИдГрупп = ПараметрыДокумента.СтруктураИдГрупп;

	СписокСохранения = ПараметрыДокумента.СписокСохранения;

	ЭтоСтарыйФормат = ПараметрыДокумента.ЭтоСтарыйФормат;
	ЭтоКопирование = ПараметрыДокумента.ЭтоКопирование;
	ЭтоОтменаИзменений = ПараметрыДокумента.ЭтоОтменаИзменений;

	СервисРегистров = Неопределено;
	СервисРегистровУдаленные = Неопределено;
	МаксИндексСтраницы = 0;

	Если НЕ ЭтоСтарыйФормат Тогда
		СервисРегистров = СписокСохранения.СтруктураСервисРегистров;
		СервисРегистровУдаленные = СписокСохранения.СтруктураСервисРегистровУдаленные;

		МаксИндексСтраницы = СписокСохранения.МаксИндексСтраницы;
	Иначе

	// Сервис регистров - пустые структуры, 
	// поскольку при открытии не могут быть заполненны до восстановления данных.
		СервисРегистров = ПараметрыДокумента.СтруктураСервисРегистров;
		СервисРегистровУдаленные = ПараметрыДокумента.СтруктураСервисРегистровУдаленные;
	КонецЕсли;

	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	Если НЕ (ЭтоКопирование или ЭтоОтменаИзменений или ЭтоСтарыйФормат) Тогда
	// Делать нечего.
		СтруктураРезультата = Новый Структура;

		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		ВозвращаемаяСтруктура.Вставить("СервисРегистров", СервисРегистров);
		ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
		ВозвращаемаяСтруктура.Вставить("НужноСохранитьОтчет", Ложь);

		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
		СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
		СтруктураРезультата.Вставить("БылИмпорт", Ложь);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

		Возврат;

	КонецЕсли;

	Если ЭтоКопирование Тогда

	// На всякий случай надо проверить - возможно отчет-источник был закрыт без сохранения изменений.
		// В этом случае сначала надо восстановить регистры отчета источника.
		Если ЖурналНеПуст(ДокументСсылкаАлкоОтчетИсточник) Тогда

			ПараметрыДокИсточника = Новый Структура;

			ПараметрыДокИсточника.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);
			ПараметрыДокИсточника.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетИсточник);

			ПараметрыДокИсточника.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);
			ПараметрыДокИсточника.Вставить("НомерАлкоОтчета", НомерАлкоОтчета);

			ПараметрыДокИсточника.Вставить("СписокСохранения", СписокСохранения);

			ПараметрыДокИсточника.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
			ПараметрыДокИсточника.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

			// Сервис регистров - пустые структуры, 
			// поскольку при открытии не могут быть заполненны до восстановления данных.
			ПараметрыДокИсточника.Вставить("СтруктураСервисРегистров", ПараметрыДокумента.СтруктураСервисРегистров);
			ПараметрыДокИсточника.Вставить("СтруктураСервисРегистровУдаленные", ПараметрыДокумента.СтруктураСервисРегистровУдаленные);

			ПараметрыДокИсточника.Вставить("СтруктураИдГрупп", ПараметрыДокумента.СтруктураИдГрупп);

			ПараметрыДокИсточника.Вставить("ЭтоКопирование", Ложь);
			ПараметрыДокИсточника.Вставить("ЭтоСтарыйФормат", Ложь);
			ПараметрыДокИсточника.Вставить("ЭтоОтменаИзменений", Истина);

			ПараметрыДокИсточника.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

			ВосстановитьДанныеТаблицАЛКО(ПараметрыДокИсточника, АдресХранилища);

			// После восстановления в журнале зафиксирован МаксИндексСтраницы,
			// записывать данные отчета источника не надо.

			// Очищаем хранимые данные в хранилище. 
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
			// Нужно очистить ПараметрыДокумента.СтруктураСервисРегистров - они могли быть изменены
			// На всякий случай удалим все из СервисРегистров в СервисРегистровУдаленные.
			Для Каждого ИмяРегистраСведений Из СписокИменРегистровСведений Цикл

				ИмяРегистра = ИмяРегистраСведений.Значение;

				СервисРегистровГруппы = ПараметрыДокумента.СтруктураСервисРегистров[ИмяРегистра];
				СервисРегистровГруппыУдаленные = ПараметрыДокумента.СтруктураСервисРегистровУдаленные[ИмяРегистра];

				СервисРегистровГруппы.Очистить();
				СервисРегистровГруппыУдаленные.Очистить();

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Если (ЭтоОтменаИзменений или ЭтоКопирование) и (НЕ ЭтоСтарыйФормат) Тогда

		ПараметрыВосстановления = Новый Структура;
		ПараметрыВосстановления.Вставить("ДокументСсылкаПриемник", ДокументСсылкаАлкоОтчетПриемник);
		ПараметрыВосстановления.Вставить("ДокументСсылкаИсточник", ДокументСсылкаАлкоОтчетИсточник);

		ПараметрыВосстановления.Вставить("ЭтоСохранение", Ложь);
		ПараметрыВосстановления.Вставить("ЭтоОтменаИзменений", ЭтоОтменаИзменений);

		ПараметрыВосстановления.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);

		// При копировании информация о удаленных страницах не нужна.
		Если ЭтоКопирование Тогда
			Для каждого ЭлементСервисРегистровУдаленные Из СервисРегистровУдаленные Цикл

				ТекСервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
				ТекСервисРегистровУдаленные.Очистить();

			КонецЦикла;
		КонецЕсли;

		ПараметрыВосстановления.Вставить("СтруктураСервисРегистров", СервисРегистров);
		ПараметрыВосстановления.Вставить("СтруктураСервисРегистровУдаленные", СервисРегистровУдаленные);

		ПараметрыВосстановления.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);

		ПараметрыВосстановления.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

		ВозвращаемаяСтруктура = Неопределено;

		СохранитьВосстановитьКопироватьРегистрыСведенийАЛКО(ПараметрыВосстановления, , ВозвращаемаяСтруктура);

		СтруктураРезультата = Новый Структура;

		СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
		СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
		СтруктураРезультата.Вставить("БылИмпорт", Ложь);

		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

		Возврат;

	КонецЕсли;

	// Нужно импортировать из данных старого формата.
	СтруктураСведенийОтчета = Новый Структура;

	СтруктураСведенийОтчета.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Вставить("НомерАлкоОтчета", НомерАлкоОтчета);

	СтруктураСведенийОтчета.Вставить("СписокСохранения", СписокСохранения);
	СтруктураСведенийОтчета.Вставить("СписокИменРегистровСведений", СписокИменРегистровСведений);
	СтруктураСведенийОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Вставить("СтруктураИдГрупп", СтруктураИдГрупп);
	СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);

	ИмпортИзДанныхСтарогоФормата(ДокументСсылкаАлкоОтчетПриемник, СтруктураСведенийОтчета);

	СтруктураСведенийОтчета.Свойство("СписокСохранения", СписокСохранения);
	СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("МаксИндексСтраницы", МаксИндексСтраницы);

	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
	ВозвращаемаяСтруктура.Вставить("СервисРегистров", СервисРегистров);
	ВозвращаемаяСтруктура.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
	ВозвращаемаяСтруктура.Вставить("НужноСохранитьОтчет", Истина);

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВозвращаемаяСтруктура", ВозвращаемаяСтруктура);
	СтруктураРезультата.Вставить("СписокСохранения", СписокСохранения);
	СтруктураРезультата.Вставить("БылИмпорт", Истина);

	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);

КонецПроцедуры
#КонецОбласти

#Область ПересчетИтоговДлительнаяОперация

Функция ПересчетИтогов(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;
	СтруктураРесурсов = ПараметрыДлительнойОперации.СтруктураРесурсов;
	СтруктураСервисРегистров = ПараметрыДлительнойОперации.СтруктураСервисРегистров;

	СтруктураИдГруппБуферИтогов = ПараметрыДлительнойОперации.СтруктураИдГруппБуферИтогов;
	СтруктураИдГруппИменРегистровСведений = ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);

	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("СтруктураРесурсов", СтруктураРесурсов);

	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

	ПараметрыОтчета.Вставить("СтруктураИдГруппБуферИтогов", СтруктураИдГруппБуферИтогов);

	ПараметрыОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ПересчетИтоговАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	РежимДлительнойОперации = НЕ (СтруктураРеквизитовФормы.мБезОткрытияФормы
		или (НЕ РежимДлительнойОперации));
	НаименованиеЗадания = НСтр("ru = 'Перерасчет отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ПересчетИтоговАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	СтруктураРесурсов = ПараметрыДокумента.СтруктураРесурсов;

	СтруктураИдГруппИменРегистровСведений = ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;

	СтруктураИдГруппБуферИтогов = ПараметрыДокумента.СтруктураИдГруппБуферИтогов;
	
	СтруктураРеквизитовФормы = ПараметрыДокумента.СтруктураРеквизитовФормы;
	
	ДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	СервисРегистров = ПараметрыДокумента.СтруктураСервисРегистров;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	// Посчитаем общее количество обрабатываемых записей.
	ВсегоЗаписей = 0;
	Для Каждого ЭлементСервисРегистров Из СервисРегистров Цикл

		СервисРегистровГруппы = ЭлементСервисРегистров.Значение;
		Для Каждого СтрокаСервисРегистровГруппы Из СервисРегистровГруппы Цикл

			ЗаписейНаСтранице = СтрокаСервисРегистровГруппы.КоличествоСтрок;
			ЗаписейПомНаУдаление = СтрокаСервисРегистровГруппы.КолвоСтрокПомНаУдаление;
			ОбрабатываемыхЗаписей = ЗаписейНаСтранице - ЗаписейПомНаУдаление;

			ВсегоЗаписей = ВсегоЗаписей + ОбрабатываемыхЗаписей;

		КонецЦикла;

	КонецЦикла;

	СтруктураРезультатов = Новый Структура;

	КолОтработанных = 0;
	КолВБлокеЗаписей = 1000;
	Для Каждого ЭлементСтруктуры Из СтруктураИдГруппБуферИтогов Цикл

		ИдГруппы = ЭлементСтруктуры.Ключ;
		СписокБуфферИтоговГруппы = ЭлементСтруктуры.Значение;

		МассивРезультатов = Новый Массив; // массив результатов по страницам

		// Считать будем в один проход сразу по всем полям Итога.
		СтруктураРесурсовПоГруппе = СтруктураРесурсов[ИдГруппы];

		СтруктураСведенийОтчета = Новый Структура;

		СтруктураСведенийОтчета.Вставить("ИдГруппы", ИдГруппы);
		СтруктураСведенийОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
		СтруктураСведенийОтчета.Вставить("СписокБуфферИтоговГруппы", СписокБуфферИтоговГруппы);
		СтруктураСведенийОтчета.Вставить("СтруктураСервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
		СтруктураСведенийОтчета.Вставить("МассивРезультатов", МассивРезультатов);
		СтруктураСведенийОтчета.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);
		СтруктураСведенийОтчета.Вставить("СтруктураРесурсовПоГруппе", СтруктураРесурсовПоГруппе);
		СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоЗаписей);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийОтчета.Вставить("КолВБлокеЗаписей", КолВБлокеЗаписей);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);
		СтруктураСведенийОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);

		ПересчетИтоговПоГруппеАЛКО(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета);

		СтруктураСведенийОтчета.Свойство("МассивРезультатов", МассивРезультатов);
		СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);

		СтруктураРезультатов.Вставить(ИдГруппы, МассивРезультатов);

	КонецЦикла;

	Если ВсегоЗаписей > 0 Тогда
		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоЗаписей, , РежимОтладки);
	КонецЕсли;

	// Поместим в хранилище результат.
	Если НЕ АдресХранилища = Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультатов, АдресХранилища);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчетИтоговПоГруппеАЛКО(ДокументСсылкаАлкоОтчет,
		СтруктураСведенийОтчета, РежимОтладки = Неопределено)

	Перем ИдГруппы, СтруктураИдГруппИменРегистровСведений,
		СписокБуфферИтоговГруппы, СтруктураСервисРегистров, МассивРезультатов,
		ИмяФормыОбъекта, СтруктураРесурсовПоГруппе, ВсегоСтрок, КолОтработанных,
		КолВБлокеЗаписей, ВспомогательныйАдрес, СтруктураРеквизитовФормы, ДатаКонцаПериодаОтчета;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ПересчетИтоговПоГруппеАЛКО() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	СтруктураСведенийОтчета.Свойство("ИдГруппы", ИдГруппы);
	СтруктураСведенийОтчета.Свойство("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	СтруктураСведенийОтчета.Свойство("СписокБуфферИтоговГруппы", СписокБуфферИтоговГруппы);
	СтруктураСведенийОтчета.Свойство("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураСведенийОтчета.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	СтруктураСведенийОтчета.Свойство("МассивРезультатов", МассивРезультатов);
	СтруктураСведенийОтчета.Свойство("ИмяФормыОбъекта", ИмяФормыОбъекта);
	СтруктураСведенийОтчета.Свойство("СтруктураРесурсовПоГруппе", СтруктураРесурсовПоГруппе);
	СтруктураСведенийОтчета.Свойство("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("КолВБлокеЗаписей", КолВБлокеЗаписей);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);
	СтруктураСведенийОтчета.Свойство("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);

	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);

	// Получим имя регистра.
	ИмяРабочегоРегистра = СтруктураИдГруппИменРегистровСведений[ИдГруппы];
	СервисРегистров = СтруктураСервисРегистров[ИмяРабочегоРегистра];

	// Получим номер квартала отчета.
	КварталОтчета = Число(РегламентированнаяОтчетностьАЛКОКлиентСервер.КварталОтчетаСтрокой(
																	СтруктураРеквизитовФормы));

	// Заблокируем.
	Если ТранзакцияАктивна() Тогда
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
				+ ИмяРабочегоРегистра);
			ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений."
				+ ИмяРабочегоРегистра + "
				|- ошибка блокировки при пересчете записей регистра.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;

		КонецПопытки;
	КонецЕсли;

	// Создадим копию структуры ресурсов по группе,
	// в структуре ресурсов - только числовые значения.
	ЗначениеРесурсовДо = Новый Структура;
	ЗначениеРесурсовПосле = Новый Структура;
	Для Каждого ЭлементСтруктуры Из СтруктураРесурсовПоГруппе Цикл
		ЗначениеРесурсовДо.Вставить(ЭлементСтруктуры.Ключ, 0);
		ЗначениеРесурсовПосле.Вставить(ЭлементСтруктуры.Ключ, 0);
	КонецЦикла;

	КоличествоСтраницГруппы = СервисРегистров.Количество();

	// Для каждой страницы создаем элемент массива.
	Для Инд = 1 По КоличествоСтраницГруппы Цикл

		МассивРезультатов.Добавить(Новый СписокЗначений);

		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		// В массиве будут храниться итоги по страницам по данному полю - представлению.
			МассивРезультатов[Инд - 1].Добавить(0, ЭлементСписка.Представление);
		КонецЦикла;

	КонецЦикла;

	// Получаем менеджер нужного регистра.
	РабочийРегистр = РегистрыСведений[ИмяРабочегоРегистра];
	ИндексСтраницы = -1;
	ВышеБРО_1_1_11_0 = Неопределено;
	
	ИДДок = Неопределено;
	СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	
	Для Каждого СтрокаСервиса Из СервисРегистров Цикл

		ИндексСтраницы = ИндексСтраницы + 1;
		ИспользуемыйИндексСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;

		// Копируем только данные по этому индексу.
		ИДДокИндСтраницыИсточника = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИспользуемыйИндексСтраницы, ИДДок);

		ОтборПоИДДокИндСтраницы = Новый Структура("ИДДокИндСтраницы");
		ОтборПоИДДокИндСтраницы.ИДДокИндСтраницы = ИДДокИндСтраницыИсточника;

		Выборка = РабочийРегистр.Выбрать(ОтборПоИДДокИндСтраницы, "ИндексСтроки Возр");

		Пока Выборка.Следующий() Цикл

		// Не активные записи игнорируем - они "удаленные".
			Если НЕ Выборка.Активно Тогда
				Продолжить;
			КонецЕсли;

			ИндексСтроки = Выборка.ИндексСтроки;

			// Расчет по строке.
			ЗаполнитьЗначенияСвойств(ЗначениеРесурсовДо, Выборка);
			ЗаполнитьЗначенияСвойств(ЗначениеРесурсовПосле, Выборка);

			ОбъектОтчета.ОбработкаЗаписи(ИмяРабочегоРегистра, ЗначениеРесурсовПосле, 
										ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);
			ОбъектОтчета.Расчет(ИдГруппы, ЗначениеРесурсовПосле, КварталОтчета, ДатаКонцаПериодаОтчета);

			// Сравним - чтобы не записывать лишний раз, ибо запись регистра требует времени.
			НужноЗаписать = Ложь;
			Для Каждого ЭлементСтруктуры Из ЗначениеРесурсовДо Цикл

				Если ЗначениеРесурсовПосле[ЭлементСтруктуры.Ключ] <> ЭлементСтруктуры.Значение Тогда
					НужноЗаписать = Истина;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если НужноЗаписать Тогда

				Запись = Выборка.ПолучитьМенеджерЗаписи();
				ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет, ИмяРабочегоРегистра, ИспользуемыйИндексСтраницы, ИндексСтроки);
				Если ЭтоПервоеРедактирование Тогда

					НачальноеЗначение = ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(Запись, ИмяРабочегоРегистра);
					// Пишем в журнал как "Редактирование".
					Ресурсы = Новый Структура;
					Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);
					ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРабочегоРегистра, ИспользуемыйИндексСтраницы, ИндексСтроки, "Редактирование", Ресурсы);

				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ЗначениеРесурсовПосле);
				Запись.Записать();

			КонецЕсли;

			// Собственно суммируем итоги.
			Если МассивРезультатов[ИндексСтраницы].Количество() > 0 Тогда
				Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл

					ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;

					КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение
						+ ЗначениеРесурсовПосле[ИмяКонтролируемогоПоля];

				КонецЦикла;
			КонецЕсли;

			КолОтработанных = КолОтработанных + 1;

			// Пишем блок информирования о проценте выполнения и запись набора.
			Если КолОтработанных % КолВБлокеЗаписей = 0 Тогда

				Если ВсегоСтрок > 0 Тогда
					СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок, , РежимОтладки);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если ВсегоСтрок > 0 Тогда
			СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоСтрок, , РежимОтладки);
		КонецЕсли;

	КонецЦикла;

	СтруктураСведенийОтчета.Вставить("МассивРезультатов", МассивРезультатов);
	СтруктураСведенийОтчета.Вставить("ВсегоСтрок", ВсегоСтрок);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);

КонецПроцедуры
#КонецОбласти

#Область ПечатьОтчетаДлительнаяОперация

Функция ПечатьОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор = ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;
	ПараметрыФормы = ПараметрыДлительнойОперации.ПараметрыФормы;

	Заголовок = ПараметрыДлительнойОперации.Заголовок;
	ОтчетныйПериодСГодом = ПараметрыДлительнойОперации.ОтчетныйПериодСГодом;
	ВидПечати = ПараметрыДлительнойОперации.ВидПечати;

	ТаблицаПеречень = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("ТаблицаПеречень", ПараметрыДлительнойОперации);

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;

	АдресВоВременномХранилищеZIP = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеZIP", АдресВоВременномХранилищеZIP);
	ПараметрыДлительнойОперации.Вставить("АдресВоВременномХранилищеZIP", АдресВоВременномХранилищеZIP);

	СтруктураРеквизитовФормы.Вставить("Заголовок", Заголовок);
	СтруктураРеквизитовФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураРеквизитовФормы.Вставить("ОтчетныйПериодСГодом", ОтчетныйПериодСГодом);

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);

	ПараметрыОтчета.Вставить("ВидПечати", ВидПечати);

	ПараметрыОтчета.Вставить("СтруктураСервисРегистров", ПараметрыФормы.СтруктураСервисРегистров);

	Если НЕ ТаблицаПеречень = Неопределено Тогда
		ПараметрыОтчета.Вставить("ТаблицаПеречень", ТаблицаПеречень);
	КонецЕсли;

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ПечатьОтчетаАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюБезТранзакции";

	НаименованиеЗадания = НСтр("ru = 'Печать отчета Алко № " + НомерАлкоОтчета
		+ ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Функция ПослеВыполненияЗадания_ПечатьФайлZIP(РезультатПечати,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ПечатьУспешна = Истина;

	Если НЕ ТипЗнч(РезультатПечати) = Тип("Структура") Тогда
		ПечатьУспешна = Ложь;
	Иначе
		Если НЕ РезультатПечати.Свойство("мПечатныеФормы") Тогда
			ПечатьУспешна = Ложь;
		ИначеЕсли НЕ ТипЗнч(РезультатПечати.мПечатныеФормы) = Тип("СписокЗначений") Тогда
			ПечатьУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПечатьУспешна Тогда

		ТипЭкспорта = РезультатПечати.ТипЭкспорта;

		АдресВоВременномХранилищеZIP = РезультатПечати.АдресВоВременномХранилищеZIP;
		ОтчетныйПериодСГодом = РезультатПечати.ОтчетныйПериодСГодом;

		// Пронумеруем и подготовим.
		// Имитация формы для процедуры.
		Форма = Новый Структура;
		Форма.Вставить("Заголовок", РезультатПечати.Заголовок);
		Форма.Вставить("УникальныйИдентификатор", РезультатПечати.УникальныйИдентификатор);
		Форма.Вставить("СтруктураРеквизитовФормы", РезультатПечати);

		РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(Форма, , РезультатПечати.СписокПечатаемыхЛистов);

		РезультатПечати = Форма.СтруктураРеквизитовФормы;
		// После проставления номеров листы сохранены во временных хранилищах, 
		// а мПечатныеФормы очищены.
		СоответсвиеРасширений = Новый Соответствие;

		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.PDF, ".pdf");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLS, ".xls");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLSX, ".xlsx");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.MXL, ".mxl");
		СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.HTML, ".html");

		Расширение = СоответсвиеРасширений.Получить(ТипЭкспорта);

		// Нужно выгрузить готовые страницы в формат.
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		РазделительПути = ПолучитьРазделительПути();

		Файлы_ZIP = Новый ЗаписьZipФайла();
		СтрОтчПериод = Стрзаменить(ОтчетныйПериодСГодом, " ", "");
		ИмяКонечногоФайла = "ALKO11_" + СтрОтчПериод + "(" + Сред(Расширение, 2)
			+ ").zip";
		ИмяФайлаZIP = ИмяВременнойПапки + РазделительПути + ИмяКонечногоФайла;
		Файлы_ZIP.Открыть(ИмяФайлаZIP);

		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
			ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
		// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли;

		ТекущийПроцентВыполнения = ПроцентБезКонвертацииАрхивации;

		ПроцентНаКонвертациюАрхивацию = 100 - ПроцентБезКонвертацииАрхивации;

		ВесаСтраниц = Новый Массив;
		ОбщийВес = 0;

		Для Каждого Элемент Из РезультатПечати.СписокПечатаемыхЛистов Цикл

		// Читаем табличный документ.
			ТабДок = ПолучитьИзВременногоХранилища(Элемент.Значение[0]);
			// Определяем вес.
			КолСтрок = ТабДок.ВысотаТаблицы;
			ВесаСтраниц.Добавить(КолСтрок);
			ОбщийВес = ОбщийВес + КолСтрок;

		КонецЦикла;

		Для Индекс = 0 по ВесаСтраниц.ВГраница() Цикл

			Если ОбщийВес > 0 Тогда
				ВесаСтраниц[Индекс] = (ВесаСтраниц[Индекс]
					* ПроцентНаКонвертациюАрхивацию) / ОбщийВес;
			Иначе
				ВесаСтраниц[Индекс] = 0;
			КонецЕсли
		КонецЦикла;

		НомерЛиста = 0;
		Для Каждого Элемент Из РезультатПечати.СписокПечатаемыхЛистов Цикл

			НомерЛиста = НомерЛиста + 1;
			// Читаем табличный документ.
			ТабДок = ПолучитьИзВременногоХранилища(Элемент.Значение[0]);
			УдалитьИзВременногоХранилища(Элемент.Значение[0]);

			// Генерируем уникальное имя.
			ПредставлениеЛиста = "List_" + НомерЛиста;

			ИмяФайла = ИмяВременнойПапки + РазделительПути + ПредставлениеЛиста
				+ Расширение;
				// Записываем в формате ТипЭкспорта.
			ТабДок.Записать(ИмяФайла, ТипЭкспорта);
			// Добавляем в архив.
			Файлы_ZIP.Добавить(ИмяФайла, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);

			ТекущийПроцентВыполнения = ТекущийПроцентВыполнения
				+ ВесаСтраниц[НомерЛиста - 1];

			СообщитьПроцентВыполнения("Конвертация в выбранный формат и архивация.", ТекущийПроцентВыполнения, 100, 100, РежимОтладки);

		КонецЦикла;

		Файлы_ZIP.Записать();

		ФайлZIP = Новый ДвоичныеДанные(ИмяФайлаZIP);
		// Помещаем его во временное хранилище.
		ПоместитьВоВременноеХранилище(ФайлZIP, АдресВоВременномХранилищеZIP);

		// Удаляем временную папку.
		УдалитьФайлы(ИмяВременнойПапки);

		Возврат Истина;

	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ПечатьОтчетаАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;

	ВидПечати = ПараметрыДокумента.ВидПечати;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);

	Результат = ОбъектОтчета.ПечатьОтчета(ПараметрыДокумента);

	Если ВидПечати = "ПечатьФайлZIP" Тогда
		ПослеВыполненияЗадания_ПечатьФайлZIP(Результат);
	Конецесли;

	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры
#КонецОбласти

#Область ОчисткаОтМусораДлительнаяОперация

Функция ОчисткаРегистровСведенийОтМусора(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор = ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;

	СтруктураИдГруппИменРегистровСведений = ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;
	СтруктураСервисРегистров = ПараметрыДлительнойОперации.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные = ПараметрыДлительнойОперации.СтруктураСервисРегистровУдаленные;
	УдалятьПомеченныеНаУдаление = ПараметрыДлительнойОперации.УдалятьПомеченныеНаУдаление;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	СтруктураРеквизитовФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

	КоличествоУдаленных = 0;
	Для каждого ЭлементСервисРегистровУдаленные Из СтруктураСервисРегистровУдаленные Цикл

		СервисРегистровУдаленные = ЭлементСервисРегистровУдаленные.Значение;
		Для каждого СтрокаСервисРегистров Из СервисРегистровУдаленные Цикл
			КоличествоУдаленных = КоличествоУдаленных
				+ СтрокаСервисРегистров.КоличествоСтрок;
		КонецЦикла;

	КонецЦикла;

	РежимДлительнойОперации = (КоличествоУдаленных > 500);

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	ПараметрыОтчета.Вставить("СтруктураСервисРегистровУдаленные", СтруктураСервисРегистровУдаленные);
	ПараметрыОтчета.Вставить("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ОчиститьРегистрыСведенийАЛКООтМусора");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	НаименованиеЗадания = НСтр("ru = 'Очистка от мусора регистров отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ОчиститьРегистрыСведенийАЛКООтМусора(ПараметрыДокумента,
		АдресХранилища, РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	СтруктураИдГруппИменРегистровСведений = ПараметрыДокумента.СтруктураИдГруппИменРегистровСведений;

	СтруктураСервисРегистров = ПараметрыДокумента.СтруктураСервисРегистров;
	СтруктураСервисРегистровУдаленные = ПараметрыДокумента.СтруктураСервисРегистровУдаленные;

	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;

	УдалятьПомеченныеНаУдаление = ПараметрыДокумента.УдалятьПомеченныеНаУдаление;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	// Определим общий объем удаляемых строк.
	ВсегоНадоОбработать = 0;
	СписокИменРегистров = Новый Структура;
	Для Каждого ЭлементСтруктуры Из СтруктураИдГруппИменРегистровСведений Цикл

		ИмяРегистраСведений = ЭлементСтруктуры.Значение;
		Если СтрНайти(ИмяРегистраСведений, "П00") = 1 Тогда
			Продолжить;
		КонецЕсли;

		СписокИменРегистров.Вставить(ИмяРегистраСведений, ИмяРегистраСведений);

	КонецЦикла;

	Для Каждого ЭлементСтруктуры Из СписокИменРегистров Цикл

		ИмяРегистраСведений = ЭлементСтруктуры.Значение;

		СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистраСведений];

		// Помеченные на удаление строки в действующих страницах.
		Если УдалятьПомеченныеНаУдаление Тогда

			Для Каждого СтрокаСервиса Из СервисРегистров Цикл
				ВсегоНадоОбработать = ВсегоНадоОбработать
					+ СтрокаСервиса.КолвоСтрокПомНаУдаление;

				Если СтрокаСервиса.КолвоСтрокПомНаУдаление > 0 Тогда
				// Нужно переписать изза перенумерации,
					// для упрощения считаем что будем переписывать все оставшиеся после удаления строки.
					ВсегоНадоОбработать = ВсегоНадоОбработать + (СтрокаСервиса.КоличествоСтрок
						- СтрокаСервиса.КолвоСтрокПомНаУдаление);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		// Строки удаленных страниц.
		Для Каждого СтрокаСервиса Из СервисРегистровУдаленные Цикл
			ВсегоНадоОбработать = ВсегоНадоОбработать + СтрокаСервиса.КоличествоСтрок;
		КонецЦикла;

	КонецЦикла;

	КолОтработанных = 0;
	Для Каждого ЭлементСтруктуры Из СписокИменРегистров Цикл

		ИмяРегистраСведений = ЭлементСтруктуры.Значение;

		СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
		СервисРегистровУдаленные = СтруктураСервисРегистровУдаленные[ИмяРегистраСведений];

		СтруктураСведенийОтчета = Новый Структура;

		СтруктураСведенийОтчета.Вставить("ИмяРегистраСведений", ИмяРегистраСведений);
		СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
		СтруктураСведенийОтчета.Вставить("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);
		СтруктураСведенийОтчета.Вставить("ВсегоНадоОбработать", ВсегоНадоОбработать);
		СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);
		СтруктураСведенийОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдрес);

		ОчиститьРегистрСведенийАЛКООтМусора(ДокументСсылкаАлкоОтчет, СтруктураСведенийОтчета);

		СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
		СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);
		СтруктураСведенийОтчета.Свойство("ВсегоНадоОбработать", ВсегоНадоОбработать);
		СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);

	КонецЦикла;

	// Поместим в хранилище признак того, что процедура успешно отработала.
	Если НЕ АдресХранилища = Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Истина, АдресХранилища);
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьРегистрСведенийАЛКООтМусора(ДокументСсылкаАлкоОтчет,
		СтруктураСведенийОтчета, РежимОтладки = Неопределено)

	Перем ИмяРегистраСведений, СервисРегистров, СервисРегистровУдаленные,
		УдалятьПомеченныеНаУдаление, ВсегоНадоОбработать, КолОтработанных,
		ВспомогательныйАдрес;

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ОчиститьРегистрСведенийАЛКООтМусора() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	СтруктураСведенийОтчета.Свойство("ИмяРегистраСведений", ИмяРегистраСведений);
	СтруктураСведенийОтчета.Свойство("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Свойство("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Свойство("УдалятьПомеченныеНаУдаление", УдалятьПомеченныеНаУдаление);
	СтруктураСведенийОтчета.Свойство("ВсегоНадоОбработать", ВсегоНадоОбработать);
	СтруктураСведенийОтчета.Свойство("КолОтработанных", КолОтработанных);
	СтруктураСведенийОтчета.Свойство("ВспомогательныйАдрес", ВспомогательныйАдрес);

	КолВБлокеЗаписей = 1000;

	// Заблокируем.
	Если ТранзакцияАктивна() Тогда
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений."
				+ ИмяРегистраСведений);
			ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений."
				+ ИмяРегистраСведений + "
				|- ошибка блокировки при очистке от мусора записей регистра.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;

		КонецПопытки;
	КонецЕсли;

	// Сначала удаляем строки, относящиеся к удаленным-неактивным страницам.	
	РегистрСведенийАЛКО = РегистрыСведений[ИмяРегистраСведений];
	НаборЗаписей = РегистрСведенийАЛКО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);

	ИДДок = Неопределено;
	
	Для Каждого СтрокаСервиса Из СервисРегистровУдаленные Цикл

		ИндексРегистраНеактивнойСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;
		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексРегистраНеактивнойСтраницы, ИДДок);

		НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(ИДДокИндСтраницы);

		// Пишем пустой набор в режиме замещения, таким образом удаляя записи.
		НаборЗаписей.Записать(Истина);

		КолОтработанных = КолОтработанных + СтрокаСервиса.КоличествоСтрок;

		// Сообщаем ход процесса.
		СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать, , РежимОтладки);

	КонецЦикла;

	СервисРегистровУдаленные.Очистить();

	// На всякий случай смотрим наличие записей регистра по документу, индекс регистра в которых
	// отличается от перечисленных в СервисРегистров.
	// Таких записей после удаления записей удаленных страниц быть не должно.
	ТекстЗапроса = "ВЫБРАТЬ
		|	РегистрСведенийАлкоОтчет.ИДДокИндСтраницы КАК ИДДокИндСтраницы
		|ИЗ
		|	#РегистрСведенийАЛКО КАК РегистрСведенийАлкоОтчет
		|ГДЕ
		|	РегистрСведенийАлкоОтчет.Документ = &Документ
		|   И НЕ (РегистрСведенийАлкоОтчет.ИДДокИндСтраницы В (&МассивИДДокИндСтраницы))";

	ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

	ЗапросОшибочныхДанных = Новый Запрос;
	ЗапросОшибочныхДанных.Текст = ТекстЗапроса;

	ЗапросОшибочныхДанных.Параметры.Вставить("Документ", ДокументСсылкаАлкоОтчет);

	МассивИндексовСтраниц = СервисРегистров.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	МассивИДДокИндСтраницы = Новый Массив;

	Для каждого ИндексРегистраАктивнойСтраницы Из МассивИндексовСтраниц Цикл

		ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексРегистраАктивнойСтраницы, ИДДок);
		МассивИДДокИндСтраницы.Добавить(ИДДокИндСтраницы);

	КонецЦикла;

	ЗапросОшибочныхДанных.Параметры.Вставить("МассивИДДокИндСтраницы", МассивИДДокИндСтраницы);

	РезультатЗапросаОшибочныхДанных = ЗапросОшибочныхДанных.Выполнить().Выгрузить();

	НаборЗаписей = РегистрСведенийАЛКО.СоздатьНаборЗаписей();

	Для каждого СтрокаРезультата Из РезультатЗапросаОшибочныхДанных Цикл

		УдаляемыйИДДокИндСтраницы = СтрокаРезультата.ИДДокИндСтраницы;
		НаборЗаписей.Отбор.ИДДокИндСтраницы.Установить(УдаляемыйИДДокИндСтраницы);

		// Пишем пустой набор в режиме замещения, таким образом удаляя записи.
		НаборЗаписей.Записать(Истина);

	КонецЦикла;

	Если УдалятьПомеченныеНаУдаление Тогда

		ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	РегистрСведенийАлкоОтчет.*
			|ИЗ
			|	#РегистрСведенийАЛКО КАК РегистрСведенийАлкоОтчет
			|ГДЕ
			|	РегистрСведенийАлкоОтчет.ИДДокИндСтраницы = &ИДДокИндСтраницы
			|   И РегистрСведенийАлкоОтчет.Активно = Ложь
			|
			|УПОРЯДОЧИТЬ ПО ИндексСтроки";

		ИмяРегистраСведенийАЛКО = "РегистрСведений." + ИмяРегистраСведений;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведенийАЛКО", ИмяРегистраСведенийАЛКО);

		ЗапросПервойУдаленнойСтроки = Новый Запрос;
		ЗапросПервойУдаленнойСтроки.Текст = ТекстЗапроса;

		Для Каждого СтрокаСервиса Из СервисРегистров Цикл

			ИндексРегистраСтраницы = СтрокаСервиса.ИндексСтраницыРегистра;
			ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексРегистраСтраницы, ИДДок);

			// Перед удалением помеченных на удаление записей, установим номер первой строки, помеченной на удаление.
			ЗапросПервойУдаленнойСтроки.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
			РезЗапросаДанных = ЗапросПервойУдаленнойСтроки.Выполнить();

			НомерПервойУдаленнойСтроки = 0;
			Если РезЗапросаДанных.Пустой() Тогда
			// Нет помеченных.
				Продолжить;
			Иначе
				ПерваяУдаленнаяСтрока = РезЗапросаДанных.Выгрузить()[0];
				НомерПервойУдаленнойСтроки = ПерваяУдаленнаяСтрока.ИндексСтроки;
			КонецЕсли;

			// Теперь нужно удалить и перенумеровать.
			ОтборПоИДДокИндСтраницы = Новый Структура("ИДДокИндСтраницы");
			ОтборПоИДДокИндСтраницы.ИДДокИндСтраницы = ИДДокИндСтраницы;

			НаборЗаписей = РегистрСведенийАЛКО.СоздатьНаборЗаписей();

			ВыборкаРегистра = РегистрСведенийАЛКО.Выбрать(ОтборПоИДДокИндСтраницы, "ИндексСтроки Возр");

			ТекНомерСтроки = 0;
			Пока ВыборкаРегистра.Следующий() Цикл

				КолОтработанных = КолОтработанных + 1;

				ТекСтарыйНомер = ВыборкаРегистра.ИндексСтроки;

				Если ТекСтарыйНомер < НомерПервойУдаленнойСтроки Тогда

				// Делать пока нечего.
					ТекНомерСтроки = ТекНомерСтроки + 1;
					Продолжить;

				КонецЕсли;

				Если ВыборкаРегистра.Активно Тогда
				// Копируем активные записи.
					ТекНомерСтроки = ТекНомерСтроки + 1;

					ТекЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ТекЗапись, ВыборкаРегистра);

					ТекЗапись.ИндексСтроки = ТекНомерСтроки;

				КонецЕсли;

				// Удаляем все записи подряд, активные будут перезаписаны.
				ВыборкаРегистра.ПолучитьМенеджерЗаписи().Удалить();

				Если НаборЗаписей.Количество() >= КолВБлокеЗаписей Тогда

				// Пишем в режиме дописывания блоками.
					НаборЗаписей.Записать(Ложь);
					НаборЗаписей.Очистить();

					СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать, , РежимОтладки);

				КонецЕсли;

			КонецЦикла;

			Если НаборЗаписей.Количество() > 0 Тогда

			// Пишем в режиме дописывания оставшиеся записи.
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();

				СообщитьПроцентВыполнения(Неопределено, КолОтработанных, ВсегоНадоОбработать, , РежимОтладки);

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтруктураСведенийОтчета.Вставить("СервисРегистров", СервисРегистров);
	СтруктураСведенийОтчета.Вставить("СервисРегистровУдаленные", СервисРегистровУдаленные);
	СтруктураСведенийОтчета.Вставить("ВсегоНадоОбработать", ВсегоНадоОбработать);
	СтруктураСведенийОтчета.Вставить("КолОтработанных", КолОтработанных);

КонецПроцедуры

Процедура ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма,
		ИдГруппы = Неопределено)

	Если ИдГруппы = Неопределено Тогда

		Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл

			ИдГруппы = ЭлементСтруктуры.Ключ;
			ОбнулитьКоличествоСтрокПомНаУдалениеПослеОчисткиАЛКО(Форма, ИдГруппы);

		КонецЦикла;

	Иначе

		СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];

		Для Каждого СтрокаСервиса Из СервисРегистровГруппы Цикл

			СтрокаСервиса.КоличествоСтрок = СтрокаСервиса.КоличествоСтрок
				- СтрокаСервиса.КолвоСтрокПомНаУдаление;
			СтрокаСервиса.КолвоСтрокПомНаУдаление = 0;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ПроверитьВыгрузкуОтчетаДлительнаяОперация

Функция ПроверитьВыгрузкуОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;
	ПараметрыФормы = ПараметрыДлительнойОперации.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДлительнойОперации.ПараметрыВыгрузки;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ПроверитьВыгрузкуОтчетаАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюБезТранзакции";

	НаименованиеЗадания = НСтр("ru = 'Проверка выгрузки отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ПроверитьВыгрузкуОтчетаАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);

	РезультатПроверки = ОбъектОтчета.ПроверитьВыгрузку(ПараметрыДокумента);

	ПредставлениеОшибок = "";
	ПредставлениеСообщенийДляСведения = "";
	РезультатОперации = 0;

	ТаблицаСообщений = РезультатПроверки.ТаблицаСообщений;
	ТаблицаСообщенийДляСведения = РезультатПроверки.ТаблицаСообщенийДляСведения;

	Если ТаблицаСообщений.Количество() > 0 Тогда
		РезультатОперации = РезультатОперации + 10;
	КонецЕсли;

	Если ТаблицаСообщенийДляСведения.Количество() > 0 Тогда
		РезультатОперации = РезультатОперации + 1;
	КонецЕсли;

	СписокРазделов = ОбъектОтчета.СписокРазделовОшибок();
	
	ДатаКонцаОтчета = ПараметрыДокумента.ПараметрыФормы.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	ПредставлениеОшибок = СформироватьПредставлениеОшибокАЛКО(ТаблицаСообщений, 
												ДатаКонцаОтчета, ИмяФормыОбъекта, СписокРазделов);

	ПредставлениеСообщенийДляСведения = СформироватьПредставлениеОшибокАЛКО(ТаблицаСообщенийДляСведения, 
												ДатаКонцаОтчета, ИмяФормыОбъекта, СписокРазделов);

	Результат = Новый Структура;
	// РезультатОперации	- 0 - нет ошибок
	//						- 10 - только критические ошибки
	//      				больше 10 - есть критические ошибки и  сообщения для сведения
	//						меньше 10 - только сообщения для сведения
	Результат.Вставить("РезультатОперации", РезультатОперации);
	Результат.Вставить("ПредставлениеОшибок", ПредставлениеОшибок);
	Результат.Вставить("ПредставлениеСообщенийДляСведения", ПредставлениеСообщенийДляСведения);

	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОбластьМакетаОшибок(ИмяОбласти, ОбщийМакетОформления, МакетОформления)

	Если МакетОформления.Области.Найти(ИмяОбласти) = Неопределено Тогда
		Возврат ОбщийМакетОформления.ПолучитьОбласть(ИмяОбласти);
	Иначе
		Возврат МакетОформления.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;	

КонецФункции
 
Функция СформироватьПредставлениеОшибокАЛКО(ТаблСообщений, ДатаКонцаОтчета,
		ИмяФормыОбъекта, СписокРазделов) Экспорт

	ОбъектЭтогоОтчета = Неопределено;

	ИмяМакетаОшибок = ИмяДействующегоМакета(ИмяФормыОбъекта, "ШаблоныСообщенийОбОшибках", 
													ДатаКонцаОтчета, , ОбъектЭтогоОтчета);
	ИмяОбщегоМакетаОшибок = "ШаблоныСообщенийОбОшибкахАЛКО";
	
	МакетОформления = ПолучитьМакетИзОбъектаАЛКО(ИмяМакетаОшибок, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	ОбщийМакетОформления = ПолучитьОбщийМакет(ИмяОбщегоМакетаОшибок);

	НаименованиеДекларации = ПолучитьНазваниеОтчетаАЛКО(ИмяФормыОбъекта, ОбъектЭтогоОтчета);

	Секция_ВерхнийОтступ = ОбластьМакетаОшибок("ВерхнийОтступ",	ОбщийМакетОформления, МакетОформления);
	Секция_ЗаголовокОтчета = ОбластьМакетаОшибок("ЗаголовокОтчета",	ОбщийМакетОформления, МакетОформления);
	Секция_РазрывСекций = ОбластьМакетаОшибок("РазрывСекций", ОбщийМакетОформления, МакетОформления);
	Секция_ОтступПередОшибками = ОбластьМакетаОшибок("ОтступПередОшибками", ОбщийМакетОформления, МакетОформления);
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);

	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

	КоличествоОшибок = ТаблСообщений.Количество();

	Если КоличествоОшибок = 0 Тогда

		Секция_БезОшибок = ОбластьМакетаОшибок("БезОшибок", ОбщийМакетОформления, МакетОформления);
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);

	Иначе

		// Если есть ошибки разработки - их в первую очередь.
		ТипОшибки = "НеВсяИнформацияПопалаВВыгрузку";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда

			// Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("Заголовок" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = ОбластьМакетаОшибок("Исправление" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);

			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

			ТаблСообщений.Удалить(ОшибкиРазработки[0]);

		КонецЕсли;

		ТипОшибки = "НеУдалосьВычислить";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда

			Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("Заголовок" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);

			Секция_ИсправлениеОшибки = ОбластьМакетаОшибок("Исправление" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);

			ПредставлениеОшибок.НачатьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);

			Секция_СтандартнаяОшибка = ОбластьМакетаОшибок("СтандартнаяОшибка",
												ОбщийМакетОформления, МакетОформления);

			Для каждого Ошибка Из ОшибкиРазработки Цикл

				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);

				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);

				ТаблСообщений.Удалить(Ошибка);

			КонецЦикла;

			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

		КонецЕсли;

		ТипОшибки = "ОшибкаФорматаXML";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда

			Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("Заголовок" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);

			Секция_ИсправлениеОшибки = ОбластьМакетаОшибок("Исправление" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			
			ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);

			ПредставлениеОшибок.НачатьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);

			Секция_СтандартнаяОшибка = ОбластьМакетаОшибок("СтандартнаяОшибка",
												ОбщийМакетОформления, МакетОформления);

			Для каждого Ошибка Из ОшибкиРазработки Цикл

				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);

				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);

				ТаблСообщений.Удалить(Ошибка);

			КонецЦикла;

			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

		КонецЕсли;

		// Отдельно - слишком много ошибок.
		ТипОшибки = "МногоОшибок";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда

		// Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("Заголовок" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = ОбластьМакетаОшибок("Исправление" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
			ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);

			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

			ТаблСообщений.Удалить(ОшибкиРазработки[0]);

		КонецЕсли;

		// Ошибки по разделам.
		Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("ЗаголовокОшибкиРаздела",
												ОбщийМакетОформления, МакетОформления);
		
		Для каждого РазделОшибок Из СписокРазделов Цикл

			ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
			ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);

			Если ОшибкиРаздела.Количество() > 0 Тогда
				
				Секция_ЗаголовокОшибки.Параметры.ИмяРаздела = РазделОшибок;
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);

				ПредставлениеОшибок.НачатьГруппуСтрок();

				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);

				ВывестиОшибки(ОшибкиРаздела, ОбщийМакетОформления, МакетОформления, ПредставлениеОшибок);

				ПредставлениеОшибок.ЗакончитьГруппуСтрок();

				ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

			КонецЕсли;

		КонецЦикла;

		ТаблСообщений.Очистить();

	КонецЕсли;

	Возврат ПредставлениеОшибок;

КонецФункции

Процедура ВывестиОшибки(ТаблОшибок, ОбщийМакетОформления, МакетОформления, ПредставлениеОшибок)

	Секция_СтандартнаяОшибка = ОбластьМакетаОшибок("СтандартнаяОшибка",
												ОбщийМакетОформления, МакетОформления);
	Секция_РазрывСекций = ОбластьМакетаОшибок("РазрывСекций",
												ОбщийМакетОформления, МакетОформления);
	Секция_ОтступПередОшибками = ОбластьМакетаОшибок("ОтступПередОшибками",
												ОбщийМакетОформления, МакетОформления);
	
	Пока ТаблОшибок.Количество() > 0 Цикл

		ТипОшибки = ТаблОшибок[0].ТипОшибки;

		ОшибкиПоТипу = ТаблОшибок.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));

		Секция_ЗаголовокОшибки = ОбластьМакетаОшибок("Заголовок" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);

		// Описание исправления ошибки сворачивается вместе с контрагентами.
		ПредставлениеОшибок.НачатьГруппуСтрок();

		Секция_ИсправлениеОшибки = ОбластьМакетаОшибок("Исправление" + ТипОшибки, 
												ОбщийМакетОформления, МакетОформления);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);

		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);

		Для каждого Ошибка Из ОшибкиПоТипу Цикл

			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
			ПозицияПерехода.Вставить("Страница", Ошибка.Страница);

			Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
			Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода = ПозицияПерехода;
			ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);

			ТаблОшибок.Удалить(Ошибка);

		КонецЦикла;

		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);

	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область ВыгрузкаОтчетаДлительнаяОперация

Функция ВыгрузкаОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор = ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;
	ПараметрыФормы = ПараметрыДлительнойОперации.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДлительнойОперации.ПараметрыВыгрузки;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;
	АдресХранилищаДвоичныхДанных = ПараметрыДлительнойОперации.АдресХранилищаДвоичныхДанных;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресХранилищаДвоичныхДанных", АдресХранилищаДвоичныхДанных);

	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);

	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "ВыгрузитьОтчетАЛКО");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюБезТранзакции";

	НаименованиеЗадания = НСтр("ru = 'Выгрузка отчета Алко № " + НомерАлкоОтчета
		+ ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ВыгрузитьОтчетАЛКО(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;

	АдресХранилищаДвоичныхДанных = ПараметрыДокумента.АдресХранилищаДвоичныхДанных;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	// Определим объект Отчета.
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИдФайл;

	РезультатВыгрузки = ОбъектОтчета.ВыгрузитьОтчет(ПараметрыДокумента);

	ПредставлениеОшибок = "";
	ПредставлениеСообщенийДляСведения = "";
	РезультатОперации = 0;

	ТаблицаСообщений = РезультатВыгрузки.ТаблицаСообщений;
	ТаблицаСообщенийДляСведения = РезультатВыгрузки.ТаблицаСообщенийДляСведения;

	Если ТаблицаСообщений.Количество() > 0 Тогда
		РезультатОперации = РезультатОперации + 10;
	Иначе
		ИмяФайлаXML = РезультатВыгрузки.ИмяФайлаXML;
	КонецЕсли;

	Если ТаблицаСообщенийДляСведения.Количество() > 0 Тогда
		РезультатОперации = РезультатОперации + 1;
	КонецЕсли;

	СписокРазделов = ОбъектОтчета.СписокРазделовОшибок();
	
	ДатаКонцаОтчета = ПараметрыДокумента.ПараметрыФормы.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	ПредставлениеОшибок = СформироватьПредставлениеОшибокАЛКО(ТаблицаСообщений, 
												ДатаКонцаОтчета, ИмяФормыОбъекта, СписокРазделов);

	ПредставлениеСообщенийДляСведения = СформироватьПредставлениеОшибокАЛКО(ТаблицаСообщенийДляСведения, 
												ДатаКонцаОтчета, ИмяФормыОбъекта, СписокРазделов);
	
	РезультатВыгрузки = Неопределено;

	Если (ТипЗнч(ИмяФайлаXML) = Тип("Строка"))
			И ЗначениеЗаполнено(ИмяФайлаXML) Тогда

		ИмяФайлаXML = СокрЛП(ИмяФайлаXML);

		// В случае имени файла нужно поместить файл в хранилище.
		Если Прав(ИмяФайлаXML, 4) = ".tmp" Тогда

		// ИмяФайлаXML имя файла.
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаXML);

			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресХранилищаДвоичныхДанных);

			ДвоичныеДанныеФайла = Неопределено;

			// Считаем текст из файла для формирования документа выгрузки.
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаXML, "windows-1251");

			ТекстВыгрузки = Текст.ПолучитьТекст();

			ДокОбъект = ДокументСсылкаАлкоОтчет.ПолучитьОбъект();

			КодНалоговогоОргана = ДокОбъект.КодНалоговогоОргана;
			ПериодПо = КонецДня(ДокОбъект.ДатаОкончания);
			Организация = ДокОбъект.Организация;

			НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();

			НовыйДок.Дата = ТекущаяДатаСеанса();

			НовыйДок.ПериодПо = ПериодПо;
			НовыйДок.ПредставлениеПериода = РегламентированнаяОтчетность.ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(НовыйДок);
			НовыйДок.Организация = Организация;
			НовыйДок.КодНалоговогоОргана = КодНалоговогоОргана;

			СтрокаОсновная = НовыйДок.Основная.Добавить();
			СтрокаОсновная.Основание = ДокументСсылкаАлкоОтчет;
			СтрокаОсновная.НомерСтрокиТекстаВыгрузки = 1;

			СтрокаВыгрузки = НовыйДок.Выгрузки.Добавить();
			СтрокаВыгрузки.Тип = Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
			СтрокаВыгрузки.ИмяФайла = ИмяФайлаВыгрузки;
			СтрокаВыгрузки.Текст = ТекстВыгрузки;

			Если НЕ НовыйДок.ЭтоНовый() Тогда
				НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
			КонецЕсли;

			Попытка
				НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
			Исключение

			// Запись события в журнал регистрации для системного администратора.
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись документа Выгрузка регламентированного отчета.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			КонецПопытки;

			СчетчикФайловАлко = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(ДокументСсылкаАлкоОтчет.Организация, "СчетчикФайловАлко", ПериодПо);
			РегламентированнаяОтчетностьВызовСервера.УстановитьСчетчикВыгруженныхФайлов(ДокументСсылкаАлкоОтчет.Организация, СчетчикФайловАлко, "СчетчикФайловАлко", ПериодПо);

			УдалитьФайлы(ИмяФайлаXML);

		КонецЕсли;

		РегламентированнаяОтчетность.ОбработатьСобытие1СОтчетности(НСтр("ru = 'Регламентированный отчет. Выгрузка'"), ДокументСсылкаАлкоОтчет);

	КонецЕсли;

	Результат = Новый Структура;
	// РезультатОперации	- 0 - нет ошибок
	//						- 10 - только критические ошибки
	//      				больше 10 - есть критические ошибки и  сообщения для сведения
	//						меньше 10 - только сообщения для сведения
	Результат.Вставить("РезультатОперации", РезультатОперации);
	Результат.Вставить("ПредставлениеОшибок", ПредставлениеОшибок);
	Результат.Вставить("ПредставлениеСообщенийДляСведения", ПредставлениеСообщенийДляСведения);

	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры
#КонецОбласти

#Область ЗаполнитьПоДаннымИБДлительнаяОперация

Функция ЗаполнитьПоДаннымИБ(ПараметрыДлительнойОперации)

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;
	ИмяОбъектаФормы = ПараметрыДлительнойОперации.ИмяОбъектаФормы;

	СтруктураИдГруппБуферИтогов = ПараметрыДлительнойОперации.СтруктураИдГруппБуферИтогов;
	СтруктураИдГруппИменРегистровСведений = ПараметрыДлительнойОперации.СтруктураИдГруппИменРегистровСведений;

	Контейнер = ПараметрыДлительнойОперации.Контейнер;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);

	ПараметрыОтчета.Вставить("АдресХранилища", АдресВоВременномХранилище);

	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);

	ПараметрыОтчета.Вставить("СтруктураИдГруппИменРегистровСведений", СтруктураИдГруппИменРегистровСведений);

	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("СтруктураИдГруппБуферИтогов", СтруктураИдГруппБуферИтогов);

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;

	// для внешнего отчета ничего делать не надо
	ИдОтчета = ИмяОбъектаФормы;
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдОтчета);

	ИдРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца, , 1)
		+ 1);
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдРедакцииОтчета);

	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(Контейнер);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ЗаполнитьОтчет";

	РежимДлительнойОперации = Истина;
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным ИБ отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета,
		Контейнер) Экспорт

	НачатьТранзакцию();
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ЗагрузитьПодготовленныеДанныеАвтоЗаполнения11_12(Форма) 
	
	Контейнер = ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ФормаСервисРегистровП0000100003 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистров, ФормаСервисРегистровП0000100003);
	Контейнер.Раздел1_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистровУдаленные, ФормаСервисРегистровП0000100003Удаленные);
	Контейнер.Раздел1_СервисРегистровУдаленные = Неопределено;

	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	// Нужно обнулить номер страницы с установленным флагом головного ОП.		
	Форма["НомерСтраницыФлагГоловногоОП" + Раздел] = 0;

	ФормаТаблицаСтраницыРаздел1 = Форма["ТаблицаСтраницы" + Раздел];
	ЗначениеВДанныеФормы(Контейнер.Раздел1, ФормаТаблицаСтраницыРаздел1);
	Контейнер.Раздел1 = Неопределено;

	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ФормаСервисРегистровП0000200003 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистров, ФормаСервисРегистровП0000200003);
	Контейнер.Раздел2_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистровУдаленные, ФормаСервисРегистровП0000200003Удаленные);
	Контейнер.Раздел2_СервисРегистровУдаленные = Неопределено;

	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	// Нужно обнулить номер страницы с установленным флагом головного ОП.		
	Форма["НомерСтраницыФлагГоловногоОП" + Раздел] = 0;

	ФормаТаблицаСтраницыРаздел2 = Форма["ТаблицаСтраницы" + Раздел];
	ЗначениеВДанныеФормы(Контейнер.Раздел2, ФормаТаблицаСтраницыРаздел2);
	Контейнер.Раздел2 = Неопределено;

	Форма.МаксИндексСтраницы = Контейнер.МаксИндексСтраницы;

	// Нужно пробежаться по ДопДанным и Заполнить Данные.
	// Раздел 1.
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	Если ФормаТаблицаСтраницыРаздел1.Количество() = 0 Тогда

		СтрПерваяСтраница = ФормаТаблицаСтраницыРаздел1.Добавить();
		СтрПерваяСтраница.Представление = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;

		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

		// Очистка многострочных разделов.
		ФормаСервисРегистровП0000100003.Очистить();

		// Добавим по одной страничке.
		НоваяСтраница = ФормаСервисРегистровП0000100003.Добавить();

		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

	КонецЕсли;

	Инд = -1;
	Для Каждого ТекЛист Из ФормаТаблицаСтраницыРаздел1 Цикл

		Инд = Инд + 1;

		СтруктураСведенияОбОП = ТекЛист.ДополнительныеДанные[0].Значение.СведенияОбОП;
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);

		Если ТипЗнч(ТекЛист.Данные[0].Значение) <> Тип("Структура") Тогда
			ТекЛист.Данные[0].Значение = Новый Структура;
			ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		КонецЕсли;
		ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		// При выходе из процедуры ЗаполнитьАвтоНаСервере() и возврат исполнения НаКлиенте ЗаполнитьАвтоЗавершение()
		// почему то очищаются ДопДанные 0-х строк ТаблицаСтраницыРаздел1 и ТаблицаСтраницыРаздел2
		// а именно структура СведенияОбОП.
		// Поэтому нужна имитация что список точно изменился.
		ТекЛист.Данные[0].Пометка = Ложь;
		ТекЛист.ДополнительныеДанные[0].Пометка = Ложь;

	КонецЦикла;

	// Раздел 2.
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	Если ФормаТаблицаСтраницыРаздел2.Количество() = 0 Тогда

		СтрПерваяСтраница = ФормаТаблицаСтраницыРаздел2.Добавить();
		СтрПерваяСтраница.Представление = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;

		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

		// Очистка многострочных разделов.
		ФормаСервисРегистровП0000200003.Очистить();

		// Добавим по одной страничке.
		НоваяСтраница = ФормаСервисРегистровП0000200003.Добавить();

		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

	КонецЕсли;

	Инд = -1;
	Для Каждого ТекЛист Из ФормаТаблицаСтраницыРаздел2 Цикл

		Инд = Инд + 1;

		СтруктураСведенияОбОП = ТекЛист.ДополнительныеДанные[0].Значение.СведенияОбОП;
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);

		Если ТипЗнч(ТекЛист.Данные[0].Значение) <> Тип("Структура") Тогда
			ТекЛист.Данные[0].Значение = Новый Структура;
			ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		КонецЕсли;
		ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		// При выходе из процедуры ЗаполнитьАвтоНаСервере() и возврат исполнения НаКлиенте ЗаполнитьАвтоЗавершение()
		// почему то очищаются ДопДанные 0-х строк ТаблицаСтраницыРаздел1 и ТаблицаСтраницыРаздел2
		// а именно структура СведенияОбОП.
		// Поэтому нужна имитация что список точно изменился.
		ТекЛист.Данные[0].Пометка = Ложь;
		ТекЛист.ДополнительныеДанные[0].Пометка = Ложь;

	КонецЦикла;

	// Занесем итоги.
	СтруктураИтогов = Контейнер.СтруктураИтогов;
	// Нужно загрузить результаты пересчета ИТОГОВ в Доп.данные.
	Для Каждого Результат Из СтруктураИтогов Цикл

		ИдГруппы = Результат.Ключ;
		МассивРезультата = Результат.Значение;

		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		Если Раздел = Неопределено Тогда
		// На всякий случай. Эта ситуация не должна воспроизводиться.
			Продолжить;
		КонецЕсли;

		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];

		ТекущийИндекс = -1;
		Для Каждого СписокРезультата Из МассивРезультата Цикл

			ТекущийИндекс = ТекущийИндекс + 1;
			СтраницаРаздела = ТаблицаСтраницРаздела[ТекущийИндекс];

			Для Каждого ЭлементСпискаИтогов Из СписокРезультата Цикл

				ИмяКонтролируемогоПоля = ЭлементСпискаИтогов.Представление;
				ЗначениеИтога = ЭлементСпискаИтогов.Значение;
				СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);

			КонецЦикла;
			СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьПодготовленныеДанныеАвтоЗаполнения25_26(Форма) 
	
	Контейнер = ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ФормаСервисРегистровП0000100003 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000100003Удаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистров, ФормаСервисРегистровП0000100003);
	Контейнер.Раздел1_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел1_СервисРегистровУдаленные, ФормаСервисРегистровП0000100003Удаленные);
	Контейнер.Раздел1_СервисРегистровУдаленные = Неопределено;
	
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ФормаСервисРегистровП0000200003 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000200003Удаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистров, ФормаСервисРегистровП0000200003);
	Контейнер.Раздел2_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел2_СервисРегистровУдаленные, ФормаСервисРегистровП0000200003Удаленные);
	Контейнер.Раздел2_СервисРегистровУдаленные = Неопределено;

	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы32;
	ФормаСервисРегистровП0000300003 = Форма["СервисРегистров" + ИдГруппы];
	ФормаСервисРегистровП0000300003Удаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ЗначениеВДанныеФормы(Контейнер.Раздел3_СервисРегистров, ФормаСервисРегистровП0000300003);
	Контейнер.Раздел3_СервисРегистров = Неопределено;
	ЗначениеВДанныеФормы(Контейнер.Раздел3_СервисРегистровУдаленные, ФормаСервисРегистровП0000300003Удаленные);
	Контейнер.Раздел3_СервисРегистровУдаленные = Неопределено;

	Если ФормаСервисРегистровП0000100003.Количество() = 0 Тогда
	
	// Добавим по одной страничке.
		// Раздел 1.
		НоваяСтраница = ФормаСервисРегистровП0000100003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);	
	
	КонецЕсли; 
	
	Если ФормаСервисРегистровП0000200003.Количество() = 0 Тогда
	
	// Добавим по одной страничке.
		// Раздел 1.
		НоваяСтраница = ФормаСервисРегистровП0000200003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);	
	
	КонецЕсли;
	
	Если ФормаСервисРегистровП0000300003.Количество() = 0 Тогда
	
	// Добавим по одной страничке.
		// Раздел 1.
		НоваяСтраница = ФормаСервисРегистровП0000300003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы32;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);	
	
	КонецЕсли;

	// Нужно обнулить номер страницы с установленным флагом головного ОП.		
	Форма["НомерСтраницыФлагГоловногоОПДекларация"] = 0;

	ФормаТаблицаСтраницыДекларация = Форма["ТаблицаСтраницыДекларация"];
	ЗначениеВДанныеФормы(Контейнер.Декларация, ФормаТаблицаСтраницыДекларация);
	Контейнер.Декларация = Неопределено;

	
	Форма.МаксИндексСтраницы = Контейнер.МаксИндексСтраницы;

	// Нужно пробежаться по ДопДанным и Заполнить Данные.
	// Раздел 1.
	ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	Если ФормаТаблицаСтраницыДекларация.Количество() = 0 Тогда

		СтрПерваяСтраница = ФормаТаблицаСтраницыДекларация.Добавить();
		СтрПерваяСтраница.Представление = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

		Если СтрПерваяСтраница.Данные.Количество() > 0 Тогда
			СтрПерваяСтраница.Данные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		СтрПерваяСтраница.Данные[0].Пометка = Ложь;

		СтруктураСведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();

		Если СтрПерваяСтраница.ДополнительныеДанные.Количество() > 0 Тогда
			СтрПерваяСтраница.ДополнительныеДанные[0].Значение = Новый Структура;
		Иначе
			СтрПерваяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		СтрПерваяСтраница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СтруктураСведенияОбОП);
		СтрПерваяСтраница.ДополнительныеДанные[0].Пометка = Ложь;

		// Очистка многострочных разделов.
		ФормаСервисРегистровП0000100003.Очистить();
		ФормаСервисРегистровП0000200003.Очистить();
		ФормаСервисРегистровП0000300003.Очистить();

		// Добавим по одной страничке.
		// Раздел 1.
		НоваяСтраница = ФормаСервисРегистровП0000100003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

		// Раздел 2.
		НоваяСтраница = ФормаСервисРегистровП0000200003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы22;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

		// Раздел 3.
		НоваяСтраница = ФормаСервисРегистровП0000300003.Добавить();
		НоваяСтраница.КоличествоСтрок = 0;

		// Нужно определить текущий максимальный индекс страницы в регистре по Группе
		// до очистки, физически регистр не очищаем - это может
		// потребовать много времени.				
		Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;

		НоваяСтраница.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;
		
		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
		Ресурсы.Вставить("КоличествоСтрок", 0);

		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы32;
		ИмяРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

		ДобавитьВРегистрЖурнала(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, ИмяРегистра, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

	КонецЕсли;

	Инд = -1;
	Для Каждого ТекЛист Из ФормаТаблицаСтраницыДекларация Цикл

		Инд = Инд + 1;

		СтруктураСведенияОбОП = ТекЛист.ДополнительныеДанные[0].Значение.СведенияОбОП;
		СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, Форма.ОрганизацияИНН);

		Если ТипЗнч(ТекЛист.Данные[0].Значение) <> Тип("Структура") Тогда
			ТекЛист.Данные[0].Значение = Новый Структура;
			ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", "");
		КонецЕсли;
		ТекЛист.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

		// При выходе из процедуры ЗаполнитьАвтоНаСервере() и возврат исполнения НаКлиенте ЗаполнитьАвтоЗавершение()
		// почему то очищаются ДопДанные 0-х строк ТаблицаСтраницыРаздел1 и ТаблицаСтраницыРаздел2
		// а именно структура СведенияОбОП.
		// Поэтому нужна имитация что список точно изменился.
		ТекЛист.Данные[0].Пометка = Ложь;
		ТекЛист.ДополнительныеДанные[0].Пометка = Ложь;

	КонецЦикла;

	

	// Занесем итоги.
	СтруктураИтогов = Контейнер.СтруктураИтогов;
	// Нужно загрузить результаты пересчета ИТОГОВ в Доп.данные.
	Для Каждого Результат Из СтруктураИтогов Цикл

		ИдГруппы = Результат.Ключ;
		МассивРезультата = Результат.Значение;

		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницыДекларация"];

		ТекущийИндекс = -1;
		Для Каждого СписокРезультата Из МассивРезультата Цикл

			ТекущийИндекс = ТекущийИндекс + 1;
			СтраницаРаздела = ТаблицаСтраницРаздела[ТекущийИндекс];

			Для Каждого ЭлементСпискаИтогов Из СписокРезультата Цикл

				ИмяКонтролируемогоПоля = ЭлементСпискаИтогов.Представление;
				ЗначениеИтога = ЭлементСпискаИтогов.Значение;
				СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);

			КонецЦикла;
			СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область УдалениеДокументаОтчетаДлительнаяОперация

Функция УдалениеДокументаОтчета(ПараметрыДлительнойОперации)

	РежимДлительнойОперации = ПараметрыДлительнойОперации.РежимДлительнойОперации;

	СтруктураРеквизитовФормы = ПараметрыДлительнойОперации.СтруктураРеквизитовФормы;
	УникальныйИдентификатор = ПараметрыДлительнойОперации.УникальныйИдентификатор;
	НомерАлкоОтчета = ПараметрыДлительнойОперации.НомерАлкоОтчета;

	ИмяФормы = ПараметрыДлительнойОперации.ИмяФормы;

	АдресВоВременномХранилище = ПараметрыДлительнойОперации.АдресВоВременномХранилище;
	ВспомогательныйАдресВоВременномХранилище = ПараметрыДлительнойОперации.ВспомогательныйАдресВоВременномХранилище;

	ПараметрыОтчета = Новый Структура();

	ПараметрыОтчета.Вставить("ВспомогательныйАдрес", ВспомогательныйАдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ДокументСсылка", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыОтчета.Вставить("ИмяФормыОбъекта", ИмяФормы);

	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);

	ПараметрыОтчета.Вставить("ИмяПроцедурыОперации", "УдалитьДокументОтчета");

	//////////////////////////////////////////////////////////////////////////
	// механизм длительных операций
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыОтчета);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресВоВременномХранилище);

	ИмяЭкспортнойПроцедуры = "РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюСТранзакцией";

	НаименованиеЗадания = НСтр("ru = 'Удаление временного документа отчета Алко № "
		+ НомерАлкоОтчета + ".'");
	УникальныйИдентификаторЗадания = Неопределено;

	ЗаданиеВыполнено = ЗапуститьВыполнениеДлительнойОперацииАЛКО(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации, УникальныйИдентификаторЗадания);

	Если НЕ ЗаданиеВыполнено Тогда

		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);
		СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания", УникальныйИдентификаторЗадания);

	КонецЕсли;

	Возврат ЗаданиеВыполнено;

КонецФункции

// Удаляет документ из ИБ.
//
// Параметры:
//		ДокументСсылка 	- ДокументСсылка - Ссылка на удаляемый документ.
//
Процедура УдалитьДокументОтчета(ПараметрыДокумента, АдресХранилища,
		РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	// Индикация начала работы фоновой операции.
	СообщитьПроцентВыполнения(, 0, 100, , РежимОтладки);

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	УдаляемыйДокумент = ДокументСсылкаАлкоОтчет.ПолучитьОбъект();

	УстановитьПривилегированныйРежим(Истина);
	Если НЕ УдаляемыйДокумент = Неопределено Тогда
		УдаляемыйДокумент.Удалить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	АдресХранилища = ПоместитьВоВременноеХранилище("ОК", АдресХранилища);

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область Инициализация

// Первоначальная инициализация дополнительных данных отчета ФСРАР.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
//
Процедура ИнициализироватьДополнительныеДанныеАЛКО(Форма)

	Если ТипЗнч(Форма.ДополнительныеДанные) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные = Новый Структура;
	КонецЕсли;

	Если НЕ Форма.ДополнительныеДанные.Свойство("Титульный")
			ИЛИ ТипЗнч(Форма.ДополнительныеДанные.Титульный) <> Тип("Структура") Тогда
		Форма.ДополнительныеДанные.Вставить("Титульный", Новый Структура);
	КонецЕсли;

	АдресОрганизации = ПолучитьПустуюСтруктуруСведенийОбОП();
	АдресОрганизации.Вставить("Адрес");
	АдресОрганизации.Удалить("Наименование");
	АдресОрганизации.Удалить("КПП");

	Если Форма.ДополнительныеДанные.Титульный.Свойство("АдресОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);
	Иначе

		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(АдресОрганизации.АдресXML) Тогда

	// Сохранено в старом варианте отчета.		
		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, Истина);
		ЗаполнитьЗначенияСвойств(АдресОрганизации, Форма.ДополнительныеДанные.Титульный.АдресОрганизации);

	КонецЕсли;

	// В данных сохраненных старой версией, КодРегиона мог представляться одним символом,
	// что приводит к ошибке выгрузки.
	Если СтрДлина(АдресОрганизации.КодРегиона) = 1 Тогда
		АдресОрганизации.КодРегиона = "0" + АдресОрганизации.КодРегиона;
	КонецЕсли;

	// Организация всегда российская.
	АдресОрганизации.Вставить("КодСтраны", "643");
	АдресОрганизации.Вставить("Страна", "РОССИЯ");

	Форма.ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);

КонецПроцедуры

// Первоначальная инициализация буферов итогов отчета ФСРАР.
// Инициализация происходит на основании данных макета СоставПоказателей,
// считанных в мТаблицаНастроекТабличныхПолей.
//
// Параметры:
//
//	 	Форма					- Управляемая форма - Форма отчета ФСРАР.
// 
Процедура ИнициализироватьБуферыИтоговАЛКО(Форма)

	Для каждого ЭлементРаздела Из Форма.мСтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементРаздела.Ключ;
		ИнициализироватьБуферИтоговГруппыАЛКО(Форма, ИдГруппы);

	КонецЦикла;

КонецПроцедуры

Процедура ИнициализироватьБуферИтоговГруппыАЛКО(Форма, ИдГруппы)

	БуферИтогов = Форма["БуферИтогов" + ИдГруппы];
	БуферИтогов.Очистить();

	// Отберем нужные настройки.	
	ТаблицаНастроекТабличныхПолей = Форма.мТаблицаНастроекТабличныхПолей.Выгрузить();
	ТипЗначенияИДТабличногоПоля = ТаблицаНастроекТабличныхПолей.Колонки["ИДТабличногоПоля"].ТипЗначения;
	ПриведенныйИДТабличногоПоля = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИдГруппы);
	Отбор = Новый Структура("ИДТабличногоПоля", ПриведенныйИДТабличногоПоля);

	СтрокиНужныхНастроек = ТаблицаНастроекТабличныхПолей.НайтиСтроки(Отбор);

	Для Каждого СтрокаНастройки Из СтрокиНужныхНастроек Цикл

		ИмяКолонки = СтрокаНастройки.КодПоказателя;
		СчитатьИтогПоПолю = СтрокаНастройки.СчитатьИтогиПоКолонке;

		Если СчитатьИтогПоПолю Тогда
		// Формируем буфер итогов.
			БуферИтогов.Добавить(0, ИмяКолонки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииАЛКО(Форма, ТолькоАдрес = Ложь)

	РабочаяОрганизация = Форма.СтруктураРеквизитовФормы.Организация;
	Если (РабочаяОрганизация = Неопределено)
			Или (РабочаяОрганизация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	// Составляем список данных, необходимых для вывода в декларацию.
	Сведения = Новый Массив;

	Сведения.Добавить("ИННЮЛ");
	Сведения.Добавить("КППЮЛ");
	Сведения.Добавить("НаимЮЛПол");
	Сведения.Добавить("НаимЮЛСокр");
	Сведения.Добавить("ТелОрганизации");
	Сведения.Добавить("АдресЭлектроннойПочтыОрганизации");
	Сведения.Добавить("ФИОРук");
	Сведения.Добавить("ФИОБух");
	Сведения.Добавить("ПолныйАдрЮР");
	Сведения.Добавить("АдрЮР");
	Сведения.Добавить("АдрЮР_XML");
	Сведения.Добавить("АдрЮР_JSON");
	Сведения.Добавить("АдрПрописки_XML");
	Сведения.Добавить("АдрПрописки_JSON");
	Сведения.Добавить("АдрПрописки");

	Результат = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(РабочаяОрганизация, Форма.ДатаПодписи, Сведения);

	// Сначала пробуем юр. адрес, даже если ИП.
	СтрокаXML = ?(Форма.ЭтоПБОЮЛ, Результат.АдрПрописки_XML, Результат.АдрЮР_XML);
	СтрокаJSON = ?(Форма.ЭтоПБОЮЛ, Результат.АдрПрописки_JSON, Результат.АдрЮР_JSON);

	Если (НЕ ЗначениеЗаполнено(СтрокаXML)) и Форма.ЭтоПБОЮЛ Тогда
		Если ЗначениеЗаполнено(Результат.АдрЮР_XML) Тогда
			СтрокаXML = Результат.АдрЮР_XML;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(СтрокаJSON)) и Форма.ЭтоПБОЮЛ Тогда
		Если ЗначениеЗаполнено(Результат.АдрЮР_JSON) Тогда
			СтрокаJSON = Результат.АдрЮР_JSON;
		КонецЕсли;
	КонецЕсли;

	// Если ничего не получили (возможно не реализовано в переопределяемом модуле возврат XML строк адресной информации)
	// - пытаемся получить альтернативным вариантом.
	ПредставлениеАдреса = Неопределено;
	СтрокаXMLилиJSON = "";
	
	Если НЕ (ЗначениеЗаполнено(СтрокаXML) ИЛИ ЗначениеЗаполнено(СтрокаJSON)) Тогда

		СписокВидовКонтактнойИнформации = Новый СписокЗначений;
		СписокВидовКонтактнойИнформации.Добавить("ЮрАдресОрганизации");
		СписокВидовКонтактнойИнформации.Добавить("ЮрАдресУчреждения");
		СписокВидовКонтактнойИнформации.Добавить("ФактАдресОрганизации");
		СписокВидовКонтактнойИнформации.Добавить("ФактАдресУчреждения");
		СписокВидовКонтактнойИнформации.Добавить("ПочтовыйАдресОрганизации");
		СписокВидовКонтактнойИнформации.Добавить("ПочтовыйАдресУчреждения");

		СтрокаXMLилиJSON = ПолучитьАдресОбъекта(РабочаяОрганизация, ПредставлениеАдреса, СписокВидовКонтактнойИнформации, Ложь, Форма.ДатаПодписи);

		Если (НЕ ЗначениеЗаполнено(СтрокаXMLилиJSON)) и Форма.ЭтоПБОЮЛ Тогда

			МетаданныеОбъекта = РабочаяОрганизация.Метаданные();
			ЕстьРеквизитИндивидуальныйПредприниматель = ОбщегоНазначения.ЕстьРеквизитОбъекта("ИндивидуальныйПредприниматель", МетаданныеОбъекта);
			Если ЕстьРеквизитИндивидуальныйПредприниматель Тогда
				ОбъектОрганизации = РабочаяОрганизация.ИндивидуальныйПредприниматель;
			Иначе
				ОбъектОрганизации = РабочаяОрганизация;
			КонецЕсли;

			// Ищем контактную информацию по физлицу, в режиме "если нет нужных видов контактной информации, любой".
			СписокВидовКонтактнойИнформации = Новый СписокЗначений;
			СписокВидовКонтактнойИнформации.Добавить("АдресПоПропискеФизическиеЛица");
			СписокВидовКонтактнойИнформации.Добавить("АдресМестаПроживанияФизическиеЛица");
			СписокВидовКонтактнойИнформации.Добавить("ЮрАдресОрганизации");
			СписокВидовКонтактнойИнформации.Добавить("ЮрАдресУчреждения");

			СтрокаXMLилиJSON = ПолучитьАдресОбъекта(ОбъектОрганизации, ПредставлениеАдреса, 
									СписокВидовКонтактнойИнформации, Истина, Форма.ДатаПодписи);

		ИначеЕсли (НЕ ЗначениеЗаполнено(СтрокаXMLилиJSON)) и (НЕ Форма.ЭтоПБОЮЛ) Тогда

		// Повторяем поиск контактной информации в режиме "если нет нужных видов контактной информации, любой".
			СписокВидовКонтактнойИнформации = Новый СписокЗначений;
			СписокВидовКонтактнойИнформации.Добавить("ЮрАдресОрганизации");
			СписокВидовКонтактнойИнформации.Добавить("ЮрАдресУчреждения");
			СписокВидовКонтактнойИнформации.Добавить("ФактАдресОрганизации");
			СписокВидовКонтактнойИнформации.Добавить("ФактАдресУчреждения");
			СписокВидовКонтактнойИнформации.Добавить("ПочтовыйАдресОрганизации");
			СписокВидовКонтактнойИнформации.Добавить("ПочтовыйАдресУчреждения");

			СтрокаXMLилиJSON = ПолучитьАдресОбъекта(РабочаяОрганизация, ПредставлениеАдреса, 
									СписокВидовКонтактнойИнформации, Истина, Форма.ДатаПодписи);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаXMLилиJSON) Тогда

			Если НЕ ПустаяСтрока(СтрЗаменить(Результат.АдрЮР, ",", "")) Тогда
				ПредставлениеАдреса = Результат.АдрЮР;
			Иначе
				Если Форма.ЭтоПБОЮЛ Тогда
					ПредставлениеАдреса = Результат.АдрПрописки;
				Иначе
					ПредставлениеАдреса = Результат.ПолныйАдрЮР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Получим структуру адреса из XML или представления, если не смогли получить XML.
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(СтрокаJSON, Истина);
	ИначеЕсли ЗначениеЗаполнено(СтрокаXMLилиJSON) Тогда
		АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(СтрокаXMLилиJSON, Истина);
	ИначеЕсли ЗначениеЗаполнено(СтрокаXML) Тогда
		АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(СтрокаXML, Истина);
	Иначе
		АдресОрганизации = ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXMLИлиJSON(ПредставлениеАдреса, Истина);
	КонецЕсли;

	Если Не АдресОрганизации = Неопределено Тогда

	// Организация всегда российская.
		АдресОрганизации.Вставить("КодСтраны", "643");
		АдресОрганизации.Вставить("Страна", "РОССИЯ");

		ЗаполнитьПоляАдресаОрганизацииАЛКО(Форма, АдресОрганизации);
		Форма.ДополнительныеДанные.Титульный.Вставить("АдресОрганизации", АдресОрганизации);

	КонецЕсли;

	Форма.Модифицированность = Истина;

	// Заполнение реквизитов титульного листа.
	ОрганизацияНаименованиеПолное = Результат.НаимЮЛПол;
	ОрганизацияНаименованиеСокращенное = Результат.НаимЮЛСокр;
	Форма.СтруктураДанныхТитульный.Вставить("ОргНазв", ОрганизацияНаименованиеПолное);
	Форма.СтруктураДанныхТитульный.Вставить("ОргНазвСокращ", ОрганизацияНаименованиеСокращенное);

	ИНН = СокрЛП(Результат.ИННЮЛ);
	КПП = ?(Форма.ЭтоПБОЮЛ, "", СокрЛП(Результат.КППЮЛ));

	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИНН;
	Форма.СтруктураДанныхТитульный.Вставить("ИНН1", ИНН);

	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КПП;
	Форма.СтруктураДанныхТитульный.Вставить("КПП1", КПП);

	Форма.СтруктураРеквизитовФормы.ТелОрганизации = Результат.ТелОрганизации;
	Форма.СтруктураДанныхТитульный.Вставить("ТелОрганизации", Результат.ТелОрганизации);

	ТекущийEmail = "";
	Форма.СтруктураДанныхТитульный.Свойство("ЭлектроннаяПочта", ТекущийEmail);
	Если НЕ ЗначениеЗаполнено(ТекущийEmail) Тогда
		Форма.СтруктураДанныхТитульный.Вставить("ЭлектроннаяПочта", Результат.АдресЭлектроннойПочтыОрганизации);
	КонецЕсли;

	Если Результат <> Неопределено Тогда

		Форма.СтруктураРеквизитовФормы.Руководитель = Результат.ФИОРук;
		Форма.СтруктураРеквизитовФормы.Бухгалтер = Результат.ФИОБух;

		Форма.СтруктураДанныхТитульный.Вставить("ОргДиректор", Результат.ФИОРук);
		Форма.СтруктураДанныхТитульный.Вставить("ОргБухгалтер", Результат.ФИОБух);

		Форма.СтруктураДанныхТитульный.Вставить("ОргНазв", СокрЛП(Результат.НаимЮЛПол));
		Форма.СтруктураДанныхТитульный.Вставить("ОргНазвСокращ", СокрЛП(Результат.НаимЮЛСокр));

	КонецЕсли;

	Форма.СтруктураДанныхТитульный.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);

	Если ТолькоАдрес Тогда
		Возврат;
	КонецЕсли;

	ОбновитьОППоМестуНахожденияАЛКО(Форма);

	ЗаполнитьТитульныйАЛКО(Форма);

КонецПроцедуры

Процедура ЗаполнитьПоляАдресаОрганизацииАЛКО(Форма, Адрес)

	Форма.СтруктураДанныхТитульный.Вставить("ПочтовыйИндекс", Адрес.Индекс);

	Форма.СтруктураДанныхТитульный.Вставить("КодРегиона", Адрес.КодРегиона);
	Форма.СтруктураДанныхТитульный.Вставить("АдресРайон", Адрес.Район);
	Форма.СтруктураДанныхТитульный.Вставить("АдресГород", ?(ПустаяСтрока(Адрес.Город), Адрес.НаселенныйПункт, Адрес.Город
		+ ?(ПустаяСтрока(Адрес.НаселенныйПункт), "", " / "
		+ Адрес.НаселенныйПункт)));
	Форма.СтруктураДанныхТитульный.Вставить("АдресУлица", Адрес.Улица);

	СтрокаДома = Адрес.Дом;
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Корпус), "", ", "
		+ Адрес.Корпус);
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Литера), "", ", "
		+ Адрес.Литера);
	СтрокаДома = СтрокаДома + ?(ПустаяСтрока(Адрес.Квартира), "", ", "
		+ Адрес.Квартира);
	
	Форма.СтруктураДанныхТитульный.Вставить("АдресДом", СтрокаДома);

КонецПроцедуры

Процедура ИнициализацияНаСервереАЛКО(Форма, БезОткрытияФормы = Ложь) Экспорт

	Форма.ЦветСтиляНезаполненныйРеквизит = ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	Форма.ЦветСтиляЦветГиперссылкиБРО = ЦветаСтиля["ЦветГиперссылкиБРО"];

	Форма.ИмяОбъектаФормы = ПолучитьИмяОбъектаМетаданныхПоИмениФормы(Форма.ИмяФормы);

	Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;

	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	ЭтоВиноградная = НЕ (ГруппаВиноградныхДанных = Неопределено);

	ЕстьПереключательОП = НЕ (Форма.Элементы.Найти("ФлагГоловногоОППереключатель") = Неопределено);

	Если НЕ БезОткрытияФормы Тогда

	// В противном случае уже сохранено и будет восстановлено из сохраненных данных.
		Форма.ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация);

		СоответствиеТекстЗаголовкаОПдляИП = ТекстЗаголовкаОПдляИП(Форма);
		
		ЗаголовокОП_ЮЛ = "Обособленное подразделение";
	
		ЗаголовокОП_ИП = СоответствиеТекстЗаголовкаОПдляИП["ЗаголовокОП"];
		
		Форма.Элементы.ОбособленноеПодразделение.Заголовок = ?(Форма.ЭтоПБОЮЛ, ЗаголовокОП_ИП, ЗаголовокОП_ЮЛ);
	
		Если ЕстьПереключательОП Тогда

			СписокВыбораРадиоБаттона = Форма.Элементы.ФлагГоловногоОППереключатель.СписокВыбора;
			СписокВыбораРадиоБаттона.Очистить();
			СписокВыбораРадиоБаттона.Добавить(0, ?(Форма.ЭтоПБОЮЛ, "По месту нахождения ИП", 
													"По месту нахождения головной организации"));

			ЗаголовокРадиоБаттонаОП_ИП = СоответствиеТекстЗаголовкаОПдляИП["Преключатель"];
			СписокВыбораРадиоБаттона.Добавить(1, ?(Форма.ЭтоПБОЮЛ, ЗаголовокРадиоБаттонаОП_ИП, 
																	"По месту нахождения ОП"));
		КонецЕсли;

	КонецЕсли;

	ИнициализироватьДополнительныеДанныеАЛКО(Форма);

	СчитатьНастройкиИзМакетаСоставПоказателейАЛКО(Форма, Форма.ОбъектЭтогоОтчета);

	Форма.ФормироватьСтруктуруСтраницОтчетаНаСервере();
	Форма.ФормироватьСтруктуруСвойствСтраницНаСервере();

	Форма.СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;

	Если Форма.СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мСтараяВерсияФормы = Форма.СтруктураРеквизитовФормы.мВерсияФормы;
	Форма.СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	Форма.СтруктураРеквизитовФормы.ВидДокумента = 0;
	Форма.СтруктураРеквизитовФормы.мВидДеят = "";

	Если Форма.ЕстьСпискиВыбора Тогда
		Форма.СформироватьСпискиВыбораНаСервере();
	КонецЕсли;

	Форма.НужноВосстановитьДанные = Ложь;
	Форма.НужноСкопировать = Ложь;
	Форма.ЭтоНовыйДокумент = Ложь;
	Форма.НужноЗаполнитьАвто = Ложь;

	Форма.ПользовательСохранилОтчет = Истина;
	Форма.ПользовательНажалСохранитьОтчет = Ложь;

	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

	// Поскольку работаем с динамическими списками, которые привязаны к регистрам сведений 
		// обязательно должен быть сохраненный ДокументСсылка.РегламентированныйОтчет.
		Форма.НужноСохранить = Истина;
		Форма.ЭтоНовыйДокумент = Истина;

		Форма.ПользовательСохранилОтчет = Ложь;

	Иначе

		Форма.СтруктураРеквизитовФормы.мДокументИсточник = РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

		Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма) Тогда

		// Документ скопирован.
			Форма.ЭтоНовыйДокумент = Истина;
			Форма.НужноСкопировать = Истина;

			Форма.ПользовательСохранилОтчет = Ложь;

			Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;

		Иначе

			Форма.СтруктураРеквизитовФормы.мДокументИсточник = Неопределено;
			Форма.НужноВосстановитьДанные = Истина;

			Если НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			// Блокировка выставляется для предотвращения открытия отчета другим пользователем.
				// Проверка на блокировку другим пользователем - если отчет открыт где-то,
				// блокировка не сработает, пользователю будет выдана информация о том кто и когда 
				// заблокировал отчет.
				ЗаблокироватьДанныеДляРедактирования(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, , Форма.УникальныйИдентификатор);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Форма.СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		Форма.НужноЗаполнитьАвто = Истина;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаТаблицы = Неопределено;

	ИнициализироватьБуферыИтоговАЛКО(Форма);

КонецПроцедуры

Функция ТекстЗаголовкаОПдляИП(Форма)
	
	// Параметр Форма нужен, чтобы в будущем была возможность менять поведение функции
	// в зависимости от даты отчета и других реквизитов формы.
	
	// Заявление о корректировке.
	СоответствиеЗаголовковНомерамДеклараций = Новый Соответствие;
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(0, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[0].Вставить("Преключатель", "");
	СоответствиеЗаголовковНомерамДеклараций[0].Вставить("ЗаголовокОП", "");
	
	// Уведомление о розничной продаже алкогольной продукции выездного обслуживания.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(1000, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[1000].Вставить("Преключатель", "");
	СоответствиеЗаголовковНомерамДеклараций[1000].Вставить("ЗаголовокОП", "");
	
	// Алкогольные на механизме регистров до 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(11, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[11].Вставить("Преключатель", "По месту нахождения 
																			|объекта торговли");
	СоответствиеЗаголовковНомерамДеклараций[11].Вставить("ЗаголовокОП", "Объект торговли");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(12, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[12].Вставить("Преключатель", "По месту нахождения 
																			|объекта торговли");
	СоответствиеЗаголовковНомерамДеклараций[12].Вставить("ЗаголовокОП", "Объект торговли");
	
	// Алкогольные виноградные до 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(13, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[13].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[13].Вставить("ЗаголовокОП", "Виноградник");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(14, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[14].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[14].Вставить("ЗаголовокОП", "Виноградник");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(15, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[15].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[15].Вставить("ЗаголовокОП", "Виноградник");
	
	// Фармацевтические до 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(16, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[16].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[16].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(17, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[17].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[17].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(18, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[18].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[18].Вставить("ЗаголовокОП", "Обособленное подразделение");
		
	// Алкогольные на механизме регистров с 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(19, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[19].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[19].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(20, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[20].Вставить("Преключатель", "По месту нахождения 
																		|склада вр. хранения");
	СоответствиеЗаголовковНомерамДеклараций[20].Вставить("ЗаголовокОП", "Склад временного хранения");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(21, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[21].Вставить("Преключатель", "По месту нахождения объекта
																		|торговли с/х производителя");
	СоответствиеЗаголовковНомерамДеклараций[21].Вставить("ЗаголовокОП", "Объект торговли");
	
		
	СоответствиеЗаголовковНомерамДеклараций.Вставить(22, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[22].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[22].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(23, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[23].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[23].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(24, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[24].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[24].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(25, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[25].Вставить("Преключатель", "По месту нахождения 
																			|объекта торговли");
	СоответствиеЗаголовковНомерамДеклараций[25].Вставить("ЗаголовокОП", "Объект торговли");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(26, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[26].Вставить("Преключатель", "По месту нахождения 
																			|объекта торговли");
	СоответствиеЗаголовковНомерамДеклараций[26].Вставить("ЗаголовокОП", "Объект торговли");
	
	// Алкогольные виноградные с 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(27, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[27].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[27].Вставить("ЗаголовокОП", "Виноградник");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(28, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[28].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[28].Вставить("ЗаголовокОП", "Виноградник");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(29, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[29].Вставить("Преключатель", "По месту нахождения 
																		|виноградника");
	СоответствиеЗаголовковНомерамДеклараций[29].Вставить("ЗаголовокОП", "Виноградник");
	
	// Фармацевтические с 2019.
	СоответствиеЗаголовковНомерамДеклараций.Вставить(30, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[30].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[30].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(31, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[31].Вставить("Преключатель", "По месту факт. деятельности ИП");
	СоответствиеЗаголовковНомерамДеклараций[31].Вставить("ЗаголовокОП", "Место фактической деятельности");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(32, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[32].Вставить("Преключатель", "По месту факт. деятельности ИП");
	СоответствиеЗаголовковНомерамДеклараций[32].Вставить("ЗаголовокОП", "Место фактической деятельности");
		
	СоответствиеЗаголовковНомерамДеклараций.Вставить(33, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[33].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[33].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(34, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[34].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[34].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(35, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[35].Вставить("Преключатель", "По месту факт. деятельности ИП");
	СоответствиеЗаголовковНомерамДеклараций[35].Вставить("ЗаголовокОП", "Место фактической деятельности");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(36, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[36].Вставить("Преключатель", "По месту факт. деятельности ИП");
	СоответствиеЗаголовковНомерамДеклараций[36].Вставить("ЗаголовокОП", "Место фактической деятельности");
	
	СоответствиеЗаголовковНомерамДеклараций.Вставить(37, Новый Соответствие);
	СоответствиеЗаголовковНомерамДеклараций[37].Вставить("Преключатель", "По месту нахождения ОП");
	СоответствиеЗаголовковНомерамДеклараций[37].Вставить("ЗаголовокОП", "Обособленное подразделение");
	
	
	Возврат СоответствиеЗаголовковНомерамДеклараций[Форма.НомерАлкоОтчета];
	
КонецФункции
 

// Формирует стандартную для всех отчетов ФСРАР структуру реквизитов формы
//
// Параметры:
//      СтруктураРеквизитовФормы - Любой тип - в этом параметре возвращается сформированная структура.
//
Процедура СформироватьСтруктуруРеквизитовФормыАЛКО(СтруктураРеквизитовФормы)

	СтруктураРеквизитовФормы = Новый Структура;

	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мДокументИсточник");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВидДеят");

	СтруктураРеквизитовФормы.Вставить("мИдГруппы01"); // Лицензии Таблица 1.	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12"); // Раздел 1 Таблица 2.	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы22"); // Раздел 2 Таблица 2.
	СтруктураРеквизитовФормы.Вставить("мИдГруппы32"); // Раздел 3 Таблица 2.
	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мСтараяВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КодНО");
	СтруктураРеквизитовФормы.Вставить("КППТек");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ФИОИсп");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("Руководитель");
	СтруктураРеквизитовФормы.Вставить("Бухгалтер");
	СтруктураРеквизитовФормы.Вставить("Исполнитель");
	СтруктураРеквизитовФормы.Вставить("ТелОрганизации");

	СтруктураРеквизитовФормы.Вставить("мСоответствиеИдГруппыРаздел");
	СтруктураРеквизитовФормы.Вставить("мСоответствиеРазделИдГруппы");
	СтруктураРеквизитовФормы.Вставить("мСоответствиеИдГруппыРегистр");
	СтруктураРеквизитовФормы.Вставить("мСоответствиеРегистрИдГруппы");

	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");

	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");

	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ВспомогательныйАдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("АдресХранилищаДвоичныхДанных");

	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаТаблицы");
	СтруктураРеквизитовФормы.Вставить("ТекущееДействие", "");

	СтруктураРеквизитовФормы.Вставить("ИДДок");
	
	СтруктураРеквизитовФормы.Вставить("КлючУникальности", Неопределено);
	СтруктураРеквизитовФормы.Вставить("НужноПересчитатьИтоги", Ложь);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
								Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов

КонецПроцедуры

Процедура ИнициализацияЭлементовТаблицыФормыАЛКО(Форма)

// Ищем Группу ГруппаТаблицы.
	Элементы = Форма.Элементы;

	Если НЕ Форма.УказываютсяНомераЛицензии Тогда

	// На случай наличия в форме раздела описания лицензий,
		// отключим ненужные группы элементов.
		ГруппаВидДеятельностиПоЛицензии = Элементы.Найти("ВидДеятельностиПоЛицензии");
		ГруппаРеквизитыЛицензии = Элементы.Найти("РеквизитыЛицензии");

		Если НЕ ГруппаВидДеятельностиПоЛицензии = Неопределено Тогда
			ГруппаВидДеятельностиПоЛицензии.Видимость = Ложь;
		КонецЕсли;

		Если НЕ ГруппаРеквизитыЛицензии = Неопределено Тогда
			ГруппаРеквизитыЛицензии.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;

	ГруппаТаблицы = Элементы.Найти("ГруппаТаблицы");
	Если ГруппаТаблицы = Неопределено Тогда
	// Нет группы - нечего делать.
		Возврат;
	КонецЕсли;

	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	мСтруктураИдГрупп = СтруктураРеквизитовФормы.мСтруктураИдГрупп;

	Для каждого Элемент Из мСтруктураИдГрупп Цикл

		Раздел = Элемент.Ключ;
		// Создаем Группу под раздел.
		// Нужна для включения видимости только для таблиц конкретного раздела.
		ГруппаТаблицыРаздела = Форма.Элементы.Добавить("ГруппаТаблицы"
			+ Раздел, Тип("ГруппаФормы"), ГруппаТаблицы);
		ГруппаТаблицыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТаблицыРаздела.Видимость = Истина;
		ГруппаТаблицыРаздела.Доступность = Истина;
		ГруппаТаблицыРаздела.Заголовок = Неопределено;
		ГруппаТаблицыРаздела.ОтображатьЗаголовок = Ложь;

		СписокИдГруппРаздела = Элемент.Значение;
		КоличествоГрупп = СписокИдГруппРаздела.Количество();

		Если КоличествоГрупп = 1 Тогда

		// Одна таблица в разделе, создаем группу таблицы формы
			ИмяТаблицыФормы = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(
															СписокИдГруппРаздела[0].Представление);

			ГруппаТаблицыФормыРаздела = Форма.Элементы.Добавить("ГруппаТаблицыФормы"
				+ ИмяТаблицыФормы, Тип("ГруппаФормы"), ГруппаТаблицыРаздела);

			ГруппаТаблицыФормыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТаблицыФормыРаздела.Видимость = Истина;
			ГруппаТаблицыФормыРаздела.Доступность = Истина;
			ГруппаТаблицыФормыРаздела.Заголовок = Неопределено;
			ГруппаТаблицыФормыРаздела.ОтображатьЗаголовок = Ложь;

		ИначеЕсли КоличествоГрупп > 1 Тогда

		// Групп несколько, надо создать группу страниц, разместив группы таблиц форм по разным страницам.
			СтраницыТаблицРаздела = Форма.Элементы.Добавить("СтраницыТаблиц"
				+ Раздел, Тип("ГруппаФормы"), ГруппаТаблицыРаздела);

			СтраницыТаблицРаздела.Вид = ВидГруппыФормы.Страницы;
			СтраницыТаблицРаздела.Видимость = Истина;
			СтраницыТаблицРаздела.Доступность = Истина;
			СтраницыТаблицРаздела.Заголовок = Неопределено;
			СтраницыТаблицРаздела.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;

			// Теперь для каждой группы делаем страницу, и в ней - группу таблицы формы.
			Для каждого ЭлементИдГруппы Из СписокИдГруппРаздела Цикл

				ИмяТаблицыФормы = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(ЭлементИдГруппы.Представление);

				СтраницаТаблицыРаздела = Форма.Элементы.Добавить("СтраницаТаблицы"
					+ ИмяТаблицыФормы, Тип("ГруппаФормы"), СтраницыТаблицРаздела);

				СтраницаТаблицыРаздела.Вид = ВидГруппыФормы.Страница;
				СтраницаТаблицыРаздела.Видимость = Истина;
				СтраницаТаблицыРаздела.Доступность = Истина;
				СтраницаТаблицыРаздела.Заголовок = ЭлементИдГруппы.Представление;

				ГруппаТаблицыФормыРаздела = Форма.Элементы.Добавить("ГруппаТаблицыФормы"
					+ ИмяТаблицыФормы, Тип("ГруппаФормы"), СтраницаТаблицыРаздела);

				ГруппаТаблицыФормыРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаТаблицыФормыРаздела.Видимость = Истина;
				ГруппаТаблицыФормыРаздела.Доступность = Истина;
				ГруппаТаблицыФормыРаздела.Заголовок = Неопределено;
				ГруппаТаблицыФормыРаздела.ОтображатьЗаголовок = Ложь;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Для виноградных деклараций фиксируем высоту, у них большая шапка.
	МассивВиноградных = МассивНомеровВиноградныхДеклараций();
	
	Если МассивВиноградных.Найти(Форма.НомерАлкоОтчета) <> Неопределено Тогда
	
		ВысотаЭкрана = Неопределено;

		МассивИнформацииЭкранов = ПолучитьИнформациюЭкрановКлиента();
		Если (НЕ МассивИнформацииЭкранов = Неопределено)
				и (МассивИнформацииЭкранов.Количество() > 0) Тогда

			ИнформацияЭкранаКлиента = МассивИнформацииЭкранов[0];
			ВысотаЭкрана = ИнформацияЭкранаКлиента.Высота;

			Если (НЕ ВысотаЭкрана = Неопределено) и (ВысотаЭкрана <= 1024) Тогда

			// Чтобы таблица не сливалась с комментарием.
				РегулировочнаяНадпись = Форма.Элементы.Добавить("РегулировочнаяНадпись", Тип("ДекорацияФормы"), ГруппаТаблицы);
				РегулировочнаяНадпись.Вид = ВидДекорацииФормы.Надпись;
				РегулировочнаяНадпись.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
				РегулировочнаяНадпись.Высота = 1;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура СформироватьВспомогательныеСтруктурыОтчетаАЛКО(Форма,
		НомерАлкоОтчета = Неопределено, 
		ЕстьАдресаВСтрокахТаблиц = Неопределено, 
		ПроверятьАдресаПроизводителей = Неопределено)

	Если НомерАлкоОтчета = Неопределено Тогда
		Форма.НомерАлкоОтчета = НомерАлкоПриложения(Форма, Неопределено);
	Иначе
		Форма.НомерАлкоОтчета = НомерАлкоОтчета;
	КонецЕсли;
	НомерАлкоОтчетаСтрока = СтрокаЧГ0(Форма.НомерАлкоОтчета);
	Форма.СтруктураРеквизитовФормы.Вставить("НомерАлкоОтчета", Форма.НомерАлкоОтчета);
	
	Если ЕстьАдресаВСтрокахТаблиц = Неопределено Тогда
		Форма.ЕстьАдресаВСтрокахТаблиц = ЕстьАдресаВСтрокахТаблицОтчетаАЛКО(Форма.НомерАлкоОтчета);
	Иначе
		Форма.ЕстьАдресаВСтрокахТаблиц = ЕстьАдресаВСтрокахТаблиц;
	КонецЕсли;	
	Форма.СтруктураРеквизитовФормы.Вставить("ЕстьАдресаВСтрокахТаблиц", Форма.ЕстьАдресаВСтрокахТаблиц);
	
	// Если адреса производителей включат в выгрузку - нужно выставить в Истину.
	Если ПроверятьАдресаПроизводителей = Неопределено Тогда	
		ПроверятьАдресаПроизводителей = Ложь;	
	КонецЕсли; 
	Форма.СтруктураРеквизитовФормы.Вставить("ПроверятьАдресаПроизводителей", ПроверятьАдресаПроизводителей);

	Форма.УникальностьФормы = Новый УникальныйИдентификатор;

	Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформации = ОпределитьВидыКонтактнойИнформацииДляВводаАдреса();

	Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	Форма.мСтруктураМногостраничныхРазделов = Новый Структура;
	Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРаздел = Новый Соответствие;
	Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр = Новый Соответствие;
	Форма.СтруктураРеквизитовФормы.мСоответствиеРегистрИдГруппы = Новый Соответствие;
	Форма.СтруктураРеквизитовФормы.мСоответствиеРазделИдГруппы = Новый Соответствие;

	Для каждого ЭлементСтруктуры Из Форма.СтруктураРеквизитовФормы.мСтруктураИдГрупп Цикл

		Раздел = ЭлементСтруктуры.Ключ;
		СписокИдГруппРаздела = ЭлементСтруктуры.Значение;

		Форма.мСтруктураМногостраничныхРазделов.Вставить(Раздел, "ТаблицаСтраницы"
			+ Раздел);

		Для каждого ЭлементСписка Из СписокИдГруппРаздела Цикл

			ИдГруппы = ЭлементСписка.Значение;
			
			ИмяТаблицы = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(ЭлементСписка.Представление);

			Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРаздел.Вставить(ИдГруппы, Раздел);

			// Если несколько групп в разделе, основной считается указанная первой в мСоответствиеИдГруппыРаздел.
			// Например 15-й алко.
			Если Форма.СтруктураРеквизитовФормы.мСоответствиеРазделИдГруппы.Получить(Раздел) = Неопределено Тогда
				Форма.СтруктураРеквизитовФормы.мСоответствиеРазделИдГруппы.Вставить(Раздел, ИдГруппы);
			КонецЕсли;
			
			Если ИмяТаблицы = "Лицензии" Тогда
				ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии";
			Иначе
				ИмяРегистра = "СведенияРеглОтчетАлкоПрил" + НомерАлкоОтчетаСтрока
					+ ИмяТаблицы;
			КонецЕсли;

			Форма.СтруктураРеквизитовФормы.мСоответствиеИдГруппыРегистр.Вставить(ИдГруппы, ИмяРегистра);
			Форма.СтруктураРеквизитовФормы.мСоответствиеРегистрИдГруппы.Вставить(ИмяРегистра, ИдГруппы);

		КонецЦикла;

	КонецЦикла;
	
	Форма.СтруктураДанныхТитульный = Новый Структура;

	Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	Форма.СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	Форма.мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	// Структура количества колонок многострочных разделов формы.
	Форма.мСтруктураКолвоКолонокРазделов = Новый Структура;

	Форма.мСтруктураИменаКолонокРазделов = Новый Структура;

	ЦветЗаполняетсяТолькоВручную = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ.
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ.
	ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен.

	// Структура цветов раскраски автозаполняемых ячеек.
	Форма.мСтруктураЦветовРаскраски = Новый Структура;
	Форма.мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	Форма.мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	Форма.мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	Форма.мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	Форма.мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	Форма.мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	Форма.мСтруктураВариантыЗаполнения = Новый Структура;

	ИнициализацияМногостраничныхРазделовАЛКО(Форма);

КонецПроцедуры
#КонецОбласти

#Область Восстановить

Функция ОпределитьМаксИндексСтраницы(Форма)

	СтруктураМногострочныхРазделов = Форма.мСтруктураМногострочныхРазделов;

	МаксИндексСтраницы = 0;

	Для каждого ЭлементСтруктуры Из СтруктураМногострочныхРазделов Цикл

		ИдГруппы = ЭлементСтруктуры.Ключ;
		СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
		СервисРегистровУдаленныеГруппы = Форма["СервисРегистров" + ИдГруппы
			+ "Удаленные"];

		Для каждого СтрокаТаблицы Из СервисРегистровГруппы Цикл

			МаксИндексСтраницы = Макс(МаксИндексСтраницы, СтрокаТаблицы.ИндексСтраницыРегистра);

		КонецЦикла;

		Для каждого СтрокаТаблицы Из СервисРегистровУдаленныеГруппы Цикл

			МаксИндексСтраницы = Макс(МаксИндексСтраницы, СтрокаТаблицы.ИндексСтраницыРегистра);

		КонецЦикла;

	КонецЦикла;

	Возврат МаксИндексСтраницы;

КонецФункции

Процедура ВосстановитьДанныеОтчетаАЛКО(Форма, СписокСохранения)

	Перем ДанныеВариановАвтоЗаполнения, Автозаполнение,
		ДанныеМногостраничныхРазделов;

		// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Форма.СтруктураРеквизитовФормы.Организация <> Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Организация
			И Форма.СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
			И Форма.СтруктураРеквизитовФормы.Организация <> Неопределено Тогда

		Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;

	Иначе
		Форма.СтруктураРеквизитовФормы.Организация = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	// Необходимо для определения необходимости пересчета строк в случае,
	// если ранее была платформа ниже 8.3.3, а стала выше,
	// изза разницы в методах кеширования - выше 8.3.3 используется SHA256 платформы, 
	// а до 8.3.3 - алгоритм хеширования ГОСТР3411_94, реализованный на языке 1С.
	СистемнаяИнформация 	= Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы	= СистемнаяИнформация.ВерсияПриложения;
	
	СохраненнаяВерсияПлатформы = Неопределено;
	СписокСохранения.Свойство("ВерсияПлатформы", СохраненнаяВерсияПлатформы);
	
	Если ЗначениеЗаполнено(СохраненнаяВерсияПлатформы) Тогда
		
		ВерсияПоддержкиSHA256 = "8.3.3.641";
		СохраненнаяВерсияПоддерживаетSHA256 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СохраненнаяВерсияПлатформы, ВерсияПоддержкиSHA256) >= 0);
		ТекущаяВерсияПоддерживаетSHA256 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияПлатформы, ВерсияПоддержкиSHA256) >= 0);
		
		Если ((НЕ СохраненнаяВерсияПоддерживаетSHA256) И ТекущаяВерсияПоддерживаетSHA256)
			ИЛИ
			((НЕ ТекущаяВерсияПоддерживаетSHA256) И СохраненнаяВерсияПоддерживаетSHA256) Тогда
			// Не совпадают методы хеширования, надо пересчитать.
			Форма.СтруктураРеквизитовФормы.Вставить("НужноПересчитатьИтоги", Истина);
		КонецЕсли; 
		
	Иначе
		Форма.НужноСохранить = Истина	
	КонецЕсли;
	
	ИДДок = Неопределено;	
	СписокСохранения.Свойство("ИДДок", ИДДок);
	Форма.СтруктураРеквизитовФормы.Вставить("ИДДок", ИДДок);
	
	ДокументСсылкаИсточник = ?(Форма.НужноСкопировать, Форма.СтруктураРеквизитовФормы.мДокументИсточник, Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

	Форма.ДатаПодписи = ДокументСсылкаИсточник.ДатаПодписи;

	Форма.Комментарий = ДокументСсылкаИсточник.Комментарий;

	Если Форма.Комментарий = СтрокаВременногоОтчета() 
							+ НСтр("ru = ' Данные отчета загружены из файла.'") 
		Тогда	
		Форма.НужноСохранить = Истина
	КонецЕсли; 
	
	Если СписокСохранения.Свойство("ЭтоПБОЮЛ") Тогда
		Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда

			Форма.ЭтоПБОЮЛ = СписокСохранения.ЭтоПБОЮЛ;
			Форма.СтруктураРеквизитовФормы.Вставить("ЭтоПБОЮЛ", Форма.ЭтоПБОЮЛ);
			// В противном случае ЭтоПБОЮЛ будет определено в ИнициализацияНаСервере().
		КонецЕсли;
	КонецЕсли;

	// Список листов, выводимых на печать.
	ДеревоНастройкиСтраниц = ДокументСсылкаИсточник.ДеревоНастройкиСтраниц.Получить();

	// Установим актуальные представления разделов.
	Счетчик = -1;
	Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл

		Счетчик = Счетчик + 1;

		ЭлементмДеревоСтраницОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);

		Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
			Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
				СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;

	КонецЦикла;

	Форма.ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда

		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда

			Форма.мСтруктураВариантыЗаполнения.Очистить();

			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл

				ИмяТаблицыОтчета = ЭлементСтруктуры.Ключ;
				// Проверяем наличие - при импорте из 8.2 или старого формата
				// возможна ситуация отсутствия.
				ЕстьТаблица = Ложь;

				СтруктураИдГрупп = Форма.СтруктураРеквизитовФормы.мСтруктураИдГрупп;
				Для Каждого ЭлементСтруктурыИдГрупп Из СтруктураИдГрупп Цикл

				// РазделОтчета в ЭлементСтруктурыИдГрупп.Ключ.
					СписокИДРазделаОтчета = ЭлементСтруктурыИдГрупп.Значение;

					Для Каждого ЭлементСпискаИДРазделаОтчета Из СписокИДРазделаОтчета Цикл
						
						Представление = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(
																ЭлементСпискаИДРазделаОтчета.Представление);
						Если Представление = ИмяТаблицыОтчета Тогда

							ЕстьТаблица = Истина;
							Прервать;

						КонецЕсли;

					КонецЦикла;

					Если ЕстьТаблица Тогда
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если НЕ ЕстьТаблица Тогда
					Продолжить;
				КонецЕсли;

				Форма.мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				Форма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();

				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = Форма["ТаблицаВариантыЗаполнения"
						+ ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство("ПоказателиОтчета", Форма.ПоказателиОтчета);

	// Титульный. Для Заявления о Корректировке.	
	ТаблицаПеречень = Неопределено;
	СписокСохранения.Свойство("ТаблицаПеречень", ТаблицаПеречень);
	Если НЕ ТаблицаПеречень = Неопределено Тогда
		Форма.ЗначениеВРеквизитФормы(ТаблицаПеречень, "Перечень");
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("ДополнительныеДанные", Форма.ДополнительныеДанные);
	ИнициализироватьДополнительныеДанныеАЛКО(Форма);

	РегламентированнаяОтчетностьАЛКОКлиентСервер.ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаАЛКО(Форма.ПоказателиОтчета, Форма.СтруктураДанныхТитульный, Форма.СтруктураРеквизитовФормы, Форма.ЭтоПБОЮЛ);

	ГруппаВиноградныхДанных = Форма.Элементы.Найти("ГруппаВиноградныхДанных");
	ЭтоВиноградная = (НЕ ГруппаВиноградныхДанных = Неопределено);

	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл

			ИмяНайденноеЗначение = Неопределено;

			Форма.мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ИмяНайденноеЗначение);

			Если НЕ ИмяНайденноеЗначение = Неопределено Тогда

				Если СтрНайти(ИмяНайденноеЗначение, "ТаблицаСтраницы") > 0 Тогда

					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда

						КолонкиТаблицы = ЭлементСтруктуры.Значение.Колонки;

						Если КолонкиТаблицы.Найти("ФлагГоловногоОП") = Неопределено Тогда

							ЭлементСтруктуры.Значение.Колонки.Добавить("ФлагГоловногоОП");

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				НайденноеЗначение = Форма[ИмяНайденноеЗначение];
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);

				Если НайденноеЗначение.Количество() = 0 Тогда
					НайденноеЗначение.Добавить();
					Продолжить;
				КонецЕсли;

				Если НайденноеЗначение[0].Свойство("Данные") Тогда

					ИндСтрокаТаблЗнач = 0;
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл

						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда

							СтрокаТаблЗнач.Данные.Очистить();

							Если ИмяНайденноеЗначение = "ТаблицаСтраницыЛицензии" Тогда
							// Лицензии обработаем позже.
								СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные);

							ИначеЕсли ЭтоВиноградная Тогда

								СтрокаТаблЗнач.Данные.Добавить(Новый Структура);
								СтруктураДанныхИсточник = ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные;

								ПодчиненныеЭлементыВиноградныхДанных = ГруппаВиноградныхДанных.ПодчиненныеЭлементы;

								СтруктураДанныхПриемник = СтрокаТаблЗнач.Данные[0].Значение;

								ВосстановитьДанныеПодчиненныхЭлементовФормы(СтруктураДанныхПриемник, СтруктураДанныхИсточник, ПодчиненныеЭлементыВиноградныхДанных);

							Иначе
							// Информация из данных других разделов не нужна.
								Если ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].Данные.Количество() > 1 Тогда
								// Нужно сохранить изменения. 
									// Больше 1 - потому что Обособленное Подразделение должно быть.
									Форма.Модифицированность = Истина;
								КонецЕсли;
								СтрокаТаблЗнач.Данные.Добавить(Новый Структура);

							КонецЕсли;

						КонецЕсли;

						ИндСтрокаТаблЗнач = ИндСтрокаТаблЗнач + 1;

					КонецЦикла;

				КонецЕсли;
				
				// Подготовим проверочную СтруктураТиповИЗначенийПоУмолчанию для проверки полей СведенияОбОП далее.
							
				СтруктураТиповИЗначенийПоУмолчанию = Новый Структура;
				
				СтруктураОПЭталон = ПолучитьПустуюСтруктуруСведенийОбОП();
				
				Для каждого КлючИЗначение Из СтруктураОПЭталон Цикл
					
					Если КлючИЗначение.Значение = Неопределено Тогда
					
						ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, 
								КлючИЗначение.Ключ, "Неопределено", "Неопределено", "Неопределено", Ложь);
								
					Иначе
								
						ВнестиНастройкиВСтруктуруТиповИЗначенийПоУмолчанию(СтруктураТиповИЗначенийПоУмолчанию, 
							КлючИЗначение.Ключ, Строка(ТипЗнч(КлючИЗначение.Значение)), КлючИЗначение.Значение, КлючИЗначение.Значение, Ложь);
						
					КонецЕсли; 	
					
				КонецЦикла; 
	
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда

					ИндСтрокаТаблЗнач = 0;
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл

						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда

							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();

							// В данных сохраненных старой версией КодРегиона в СведенияОбОП мог представляться 
							// одним символом, что приводит к ошибке выгрузки.							
							Если ТипЗнч(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные) = Тип("Структура") Тогда

								СведенияОбОП = Неопределено;
								Если ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные.Свойство("СведенияОбОП", СведенияОбОП) Тогда
									Если ТипЗнч(СведенияОбОП) = Тип("Структура") Тогда
										
										// ИНН более не используем.
										Если СведенияОбОП.Свойство("ИНН") Тогда
											СведенияОбОП.Удалить("ИНН");
											Форма.Модифицированность = Истина;
										КонецЕсли;

										БылоИсправление = ПравильныеПараметрыВСтруктуре(СведенияОбОП, 
																СтруктураТиповИЗначенийПоУмолчанию, Ложь);
											
										Если БылоИсправление Тогда
											Форма.Модифицированность = Истина;										
										КонецЕсли; 
										
										Если Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
											Если НЕ ПустаяСтрока(СведенияОбОП.КПП) Тогда
												СведенияОбОП.КПП = "";
												Форма.Модифицированность = Истина;
											КонецЕсли;
										КонецЕсли;

										Если СтрДлина(СокрЛП(СведенияОбОП.КодРегиона)) = 1 Тогда
											СведенияОбОП.КодРегиона = "0" + СведенияОбОП.КодРегиона;
											Форма.Модифицированность = Истина;
										КонецЕсли;
										
										СведенияОбОПДо = ОбщегоНазначения.СкопироватьРекурсивно(СведенияОбОП);
										
										Если ПустаяСтрока(СведенияОбОП.АдресXML) 
											ИЛИ 
											СведенияОбОП.АдресXML = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("XML") Тогда
											
											СведенияОбОП.АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
																СведенияОбОП,, Перечисления.ТипыКонтактнойИнформации.Адрес);
											
										КонецЕсли;
										
										Если ПустаяСтрока(СведенияОбОП.АдресJSON) 
											ИЛИ 
											СведенияОбОП.АдресJSON = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("JSON") Тогда
											
											СведенияОбОП.АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
																СведенияОбОП,Перечисления.ТипыКонтактнойИнформации.Адрес);
											
										КонецЕсли;
										
										
										ОбновитьСтруктуруАдресаИзСтрокиJSONилиXMLСтруктурыАдреса(
																	СведенияОбОП, СведенияОбОП.ПроверенАдрес, Ложь);
																	
										Если НЕ Форма.Модифицированность Тогда
										
											Для каждого КлючЗначение Из СведенияОбОПДо Цикл
											
												Если НЕ СведенияОбОП.Свойство(КлючЗначение.Ключ) Тогда
												
													Форма.Модифицированность = Истина;
													Прервать;
												
												КонецЕсли;
												
												СтрТипЗначения = Строка(ТипЗнч(КлючЗначение.Значение));
												
												Если (СтрТипЗначения = "Строка" 
													 ИЛИ СтрТипЗначения = "Число" ИЛИ СтрТипЗначения = "Булево")
													 И
													КлючЗначение.Значение <> СведенияОбОП[КлючЗначение.Ключ] Тогда
												
													Форма.Модифицированность = Истина;
													Прервать;
												
												КонецЕсли; 
											
											КонецЦикла;	
										
										КонецЕсли; 
										
									Иначе
										
										ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные.Вставить("СведенияОбОП", СтруктураОПЭталон);
										Форма.Модифицированность = Истина;
										
									КонецЕсли;

								КонецЕсли;

							КонецЕсли;

							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[ИндСтрокаТаблЗнач].ДополнительныеДанные);

						КонецЕсли;

						ИндСтрокаТаблЗнач = ИндСтрокаТаблЗнач + 1;

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Номера страниц, на которых установлены флаги головных ОП.
	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ИмяРаздела = Раздел.Ключ;

		Если ИмяРаздела = "Лицензии" Тогда
			Продолжить;
		КонецЕсли;

		ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП"
			+ ИмяРаздела;

		Форма[ИмяНомерСтраницыФлагГоловногоОП] = 0;

		Если СписокСохранения.Свойство(ИмяНомерСтраницыФлагГоловногоОП) Тогда
			Форма[ИмяНомерСтраницыФлагГоловногоОП] = СписокСохранения[ИмяНомерСтраницыФлагГоловногоОП];
		КонецЕсли;

	КонецЦикла;

	// Если был импорт из старого формата - нужно восстановить раздел Лицензий.
	Если Форма.БылИмпорт Тогда

		Если Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда

			ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразцаАЛКО(Форма);

			ОбработкаСтраницЛицензийПослеЗагрузкиАЛКО(Форма);

		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);

	Префикс = "ПолеТабличногоДокумента";

	Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл

		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			Форма["СтруктураДанных"
				+ Раздел.ИмяСтраницы] = Форма.ПоказателиОтчета[Префикс
				+ Раздел.ИмяСтраницы];
		КонецЕсли;

	КонецЦикла;

	ОргИНН = "";
	Если НЕ Форма.СтруктураДанныхТитульный.Свойство("ИНН1", ОргИНН) Тогда
		ОргИНН = "";
	КонецЕсли;

	Для Каждого Раздел Из Форма.мСтруктураМногостраничныхРазделов Цикл

	// НазваниеРаздела в  Раздел.Ключ.
		ИмяТаблицыРаздела = Раздел.Значение;

		Для Каждого Страница Из Форма[ИмяТаблицыРаздела] Цикл

		// Уберем все активные страницы.
			Страница.АктивнаяСтраница = Ложь;

			Если СтрНайти(ИмяТаблицыРаздела, "Лицензии") = 0 Тогда

				Если НЕ ТипЗнч(Страница.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда

					Страница.ДополнительныеДанные[0].Значение = Новый Структура;
					Форма.Модифицированность = Истина;

				КонецЕсли;

				Если НЕ Страница.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП") Тогда

					СведенияОбОП = ПолучитьПустуюСтруктуруСведенийОбОП();
					Страница.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", СведенияОбОП);
					Форма.Модифицированность = Истина;

				КонецЕсли;

				СтруктураСведенияОбОП = Страница.ДополнительныеДанные[0].Значение.СведенияОбОП;
				СтрОбособленноеПодразделение = РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьОбособленноеПодразделениеАЛКО(СтруктураСведенияОбОП, Форма.ЭтоПБОЮЛ, ОргИНН);

				Страница.Данные[0].Значение.Вставить("ОбособленноеПодразделение", СтрОбособленноеПодразделение);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Форма.СтруктураДанныхТитульный.Вставить("ДатаПодписи", Форма.ДатаПодписи);

	//Для Заявления о корректировке - отдельно
	Форма.ТекущийРаздел = "Титульный";

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(Форма);

	// Управляем видимостью страниц основной панели формы.
	КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, Форма.мДеревоВыбранныхСтраниц);

	Форма.СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;

	Если Форма.НужноСкопировать или Форма.БылИмпорт Тогда

		ЗаполнитьСведенияОбОрганизацииАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьСведенияОЛицензияхИзЛистаЛицензииСтарогоОбразцаАЛКО(Форма)

	Для Каждого ЭлементТабл Из Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии] Цикл

		ЭлементТабл.АктивнаяСтраница = Ложь;

		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;

		СтруктураДанныхЛицензии = ЭлементТабл.Данные[0].Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл

			ИмяПоказателя = Показатель.Ключ;

			Для Инд = 1 По 6 Цикл

				Если ИмяПоказателя = "П000000000201_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000201_" + Инд);
					Для Ном = 1 По 9 Цикл
						СтруктураДанныхЛицензии["П000000000201_"
							+ Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000201_" + Инд])
							+ ПоказателиТаблПоле["П000000000201_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000201_" + Ном + "_" + Инд);
					КонецЦикла;

				ИначеЕсли ИмяПоказателя = "П000000000202_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000202_" + Инд);
					Для Ном = 1 По 6 Цикл
						СтруктураДанныхЛицензии["П000000000202_"
							+ Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000202_" + Инд])
							+ ПоказателиТаблПоле["П000000000202_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000202_" + Ном + "_" + Инд);
					КонецЦикла;

				ИначеЕсли ИмяПоказателя = "П000000000203_1_" + Инд Тогда
					СтруктураДанныхЛицензии.Вставить("П000000000203_" + Инд);
					Для Ном = 1 По 2 Цикл
						СтруктураДанныхЛицензии["П000000000203_"
							+ Инд] = СокрЛП(СтруктураДанныхЛицензии["П000000000203_" + Инд])
							+ ПоказателиТаблПоле["П000000000203_" + Ном + "_" + Инд];
						СтруктураДанныхЛицензии.Удалить("П000000000203_" + Ном + "_" + Инд);
					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаСтраницЛицензийПослеЗагрузкиАЛКО(Форма)

// Процедура приводит структуру данных Раздела Лицензии в соответствие
	// с новым механизмом работы раздела Лицензии (обычные формы с таблицей формы) в случае,
	// если данные были загружены из старого варианта на базе Табличного документа.
	Если НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство("Лицензии") Тогда
		Возврат;
	КонецЕсли;

	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИмяФормыОбъекта = Форма.ИмяФормы;
	ИмяРаздела = "Лицензии";
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяРаздела, Форма.СтруктураРеквизитовФормы);

	ИмяРегистраСведений = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	СервисРегистровГруппы = Форма["СервисРегистров" + ИдГруппы];
	СервисРегистровГруппыУдаленные = Форма["СервисРегистров" + ИдГруппы
		+ "Удаленные"];

	ТабП0000000002ТЗ = Новый ТаблицаЗначений;
	// Добавляем в таблицу значений все необходимые колонки.
	ОбработкаТаблицыПередЗаписьюВРегистр(ИмяРегистраСведений, ТабП0000000002ТЗ);

	КолонкиТабП0000000002ТЗ = ТабП0000000002ТЗ.Колонки;

	ТаблицаУникальныхЛицензий = Новый ТаблицаЗначений;
	ТаблицаУникальныхЛицензий.Колонки.Добавить("ИдЛицензии");
	ТаблицаУникальныхЛицензий.Колонки.Добавить("ИндексСтраницы");

	УдаляемыеСтраницы = Новый СписокЗначений;

	// Загружаем из Данных в СервисРегистров для раздела Лицензий.
	ИндексСтраницы = -1;

	ТаблСтраницыЛицензии = Форма[Форма.мСтруктураМногостраничныхРазделов.Лицензии];

	Для Каждого Страница Из ТаблСтраницыЛицензии Цикл

		ИндексСтраницы = ИндексСтраницы + 1;

		ТабП0000000002ТЗ.Очистить();

		// Надо убедится, что есть куда писать результат.						
		Пока СервисРегистровГруппы.Количество() - 1 < ИндексСтраницы Цикл

			НоваяСтрокаСервисРегистров = СервисРегистровГруппы.Добавить();
			НоваяСтрокаСервисРегистров.КоличествоСтрок = 0;
			НоваяСтрокаСервисРегистров.КолвоСтрокПомНаУдаление = 0;

			Форма.МаксИндексСтраницы = Форма.МаксИндексСтраницы + 1;
			НоваяСтрокаСервисРегистров.ИндексСтраницыРегистра = Форма.МаксИндексСтраницы;

			Ресурсы = Новый Структура;
			Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений, Форма.МаксИндексСтраницы, 0, "ДобавлениеСтраницы", Ресурсы);

		КонецЦикла;

		ДанныеСтраницы = Страница.Данные; // Это список значений.
		ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные; // Это список значений.
		Если ДанныеСтраницы.Количество() > 0 Тогда

			СтруктураДанных = ДанныеСтраницы[0].Значение; // Должна быть структура.
			СтруктураДополнительныхДанных = ДополнительныеДанныеСтраницы[0].Значение; // Должна быть структура.
			ОбщаяСтрокаЛицензии = "Л"; // Непустая, чтобы строка не была пустой даже для незаполненной лицензии.
			НомерСтроки = 0;

			Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда

				Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл

					ПозицияПодчеркивания = СтрНайти(ЭлСтруктуры.Ключ, "_");

					// Пропускаем значения не относящиеся к ДопСтрокам.
					Если ПозицияПодчеркивания = 0 Тогда
						Продолжить;
					КонецЕсли;

					ИмяКолонки = Лев(ЭлСтруктуры.Ключ, ПозицияПодчеркивания - 1);
					НомерСтроки = Число(Сред(ЭлСтруктуры.Ключ, ПозицияПодчеркивания + 1));

					Если КолонкиТабП0000000002ТЗ.Найти(ИмяКолонки) = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					Если ТабП0000000002ТЗ.Количество() < НомерСтроки Тогда
						СтрокаТаблицы = ТабП0000000002ТЗ.Вставить(НомерСтроки - 1);
					Иначе
						СтрокаТаблицы = ТабП0000000002ТЗ.Получить(НомерСтроки - 1);
					КонецЕсли;

					СтрокаТаблицы[ИмяКолонки] = ЭлСтруктуры.Значение;

					// Удалим из структуры данных загруженные значения
					// для предотвращения сохранения из данных.
					СтруктураДанных.Удалить(ЭлСтруктуры.Ключ);

				КонецЦикла;

				Если ТипЗнч(СтруктураДополнительныхДанных) = Тип("Структура") Тогда

					ИмпортАдресныхДанныхТаблицИзДополнительныхДанных(СтруктураДополнительныхДанных, "АдресМестаДеятельности", ТабП0000000002ТЗ, "П0000000Адрес", "П0000000VNUTR");

				КонецЕсли;

				// Вычислим общую строку - идентификатор лицензии, понадобится для предотвращения задваивания
				// страниц лицензий с одинаковой лицензией.
				// Используем то обстоятельство, что поля Лицензии, которые надо вывести из Данных, 
				// имеют реквизиты с П000000000101 по П000000000105.
				Если Форма.УказываютсяНомераЛицензии Тогда

					Для Инд = 1 По 5 Цикл

						ИмяРеквизита = "П00000000010" + Инд;

						ЗначениеРеквизита = Неопределено;
						СтруктураДанных.Свойство(ИмяРеквизита, ЗначениеРеквизита);

						ОбщаяСтрокаЛицензии = ОбщаяСтрокаЛицензии
							+ СокрЛП(Строка(ЗначениеРеквизита));

					КонецЦикла;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Пробуем найти по лицензии наличие в ТаблицаСтраницыЛицензии в предыдущих страницах.
		ИндексНайденойСтраницы = -1;
		НайденнаяСтрока = ТаблицаУникальныхЛицензий.Найти(ОбщаяСтрокаЛицензии, "ИдЛицензии");

		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаУникальныхЛицензий.Добавить();
			НоваяСтрока.ИдЛицензии = ОбщаяСтрокаЛицензии;
			НоваяСтрока.ИндексСтраницы = ИндексСтраницы;
			ИндексНайденойСтраницы = ИндексСтраницы;
		Иначе
			ИндексНайденойСтраницы = НайденнаяСтрока.ИндексСтраницы;
			// Добавляем в удаляемые из ТаблицаСтраницыЛицензии страницы.
			УдаляемыеСтраницы.Добавить(ИндексСтраницы);
		КонецЕсли;

		// Загрузим в регистр.
		Если ТабП0000000002ТЗ.Количество() > 0 Тогда

		// Надо удалить пустые строки, если есть.			
			СписокУдаляемыхСтрок = Новый СписокЗначений;

			ИндексСтрокиТЗ = -1;

			Для каждого СтрокаТаблицы Из ТабП0000000002ТЗ Цикл

				ИндексСтрокиТЗ = ИндексСтрокиТЗ + 1;
				СтрокаЗаполнена = Ложь;

				Для каждого Колонка Из ТабП0000000002ТЗ.Колонки Цикл

					ИмяКолонки = Колонка.Имя;

					Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
						СтрокаЗаполнена = Истина;
						Прервать;
					КонецЕсли;

				КонецЦикла;

				Если НЕ СтрокаЗаполнена Тогда
					СписокУдаляемыхСтрок.Добавить(ИндексСтрокиТЗ);
				КонецЕсли;

			КонецЦикла;

			Если СписокУдаляемыхСтрок.Количество() > 0 Тогда

			// Удалять будем в порядке убывания индекса, чтобы не сбивалась индексация строк таблиц.
				СписокУдаляемыхСтрок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

				Для Каждого Элемент Из СписокУдаляемыхСтрок Цикл

					УдаляемыйИндекс = Элемент.Значение;
					ТабП0000000002ТЗ.Удалить(УдаляемыйИндекс);

				КонецЦикла;

			КонецЕсли;

			// Если есть что загружать - загрузим.
			Если ТабП0000000002ТЗ.Количество() > 0 Тогда

				КоличествоТекСтрокНаСтранице = СервисРегистровГруппы[ИндексНайденойСтраницы].КоличествоСтрок;
				ИндексСтраницыРегистра = СервисРегистровГруппы[ИндексНайденойСтраницы].ИндексСтраницыРегистра;

				ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, ИмяРегистраСведений, ИндексСтраницыРегистра, ТабП0000000002ТЗ, КоличествоТекСтрокНаСтранице);

				// Обновим количество строк.									
				СервисРегистровГруппы[ИндексНайденойСтраницы].КоличествоСтрок = КоличествоТекСтрокНаСтранице;

				// Зафиксируем в Журнале добавление страницы.
				Ресурсы = Новый Структура;
				Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);
				Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрокНаСтранице);

				ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений, ИндексСтраницыРегистра, 0, "ДобавлениеСтраницы", Ресурсы);

			КонецЕсли;

		КонецЕсли;

		ТабП0000000002ТЗ.Очистить();

	КонецЦикла;

	// Теперь надо удалить строки ТаблицаСтраницыЛицензии и СервисРегистровГруппы,
	// по которым было задваивание лицензии.
	Если УдаляемыеСтраницы.Количество() > 0 Тогда

	// Удалять будем в порядке убывания индекса, чтобы не сбивалась индексация строк таблиц.
		УдаляемыеСтраницы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

		Для Каждого Элемент Из УдаляемыеСтраницы Цикл

			УдаляемыйИндекс = Элемент.Значение;

			ТаблСтраницыЛицензии.Удалить(УдаляемыйИндекс);

			ИндексСтраницыРегистра = СервисРегистровГруппы[УдаляемыйИндекс].ИндексСтраницыРегистра;

			Ресурсы = Новый Структура;
			Ресурсы.Вставить("МаксИндексСтраницы", Форма.МаксИндексСтраницы);

			ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистраСведений, ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);

			СтрокаТЗУдаленные = СервисРегистровГруппыУдаленные.Добавить();
			СтрокаТЗУдаленные.КоличествоСтрок = СервисРегистровГруппы[УдаляемыйИндекс].КоличествоСтрок;
			СтрокаТЗУдаленные.ИндексСтраницыРегистра = СервисРегистровГруппы[УдаляемыйИндекс].ИндексСтраницыРегистра;

			СервисРегистровГруппы.Удалить(УдаляемыйИндекс);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьДанныеПодчиненныхЭлементовФормы(СтруктураДанныхПриемник,
		СтруктураДанныхИсточник, ПодчиненныеЭлементы, ИдГруппы = "")

	Для каждого Элемент Из ПодчиненныеЭлементы Цикл

		ИмяРеквизита = Элемент.Имя;

		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда

			ТекПодчиненныеЭлементы = Элемент.ПодчиненныеЭлементы;
			ВосстановитьДанныеПодчиненныхЭлементовФормы(СтруктураДанныхПриемник, СтруктураДанныхИсточник, ТекПодчиненныеЭлементы, ИдГруппы);
			
			Продолжить;
			
		КонецЕсли;

		// Если ИдГруппы не указано, всегда 1.
		Если СтрНайти(ИмяРеквизита, ИдГруппы) = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеПоля = Неопределено;
		СтруктураДанныхИсточник.Свойство(ИмяРеквизита, ЗначениеПоля);
		СтруктураДанныхПриемник.Вставить(ИмяРеквизита, ЗначениеПоля);

	КонецЦикла;

КонецПроцедуры

Процедура ВосстановитьСервисРегистровАЛКО(Форма, СтруктураСервисРегистров,
		Удаленные = Ложь)

	Для Каждого ЭлСервисРегистров Из СтруктураСервисРегистров Цикл

		ИмяРегистра = ЭлСервисРегистров.Ключ;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоИмениРегистраАЛКО(ИмяРегистра, Форма.СтруктураРеквизитовФормы);

		ТабСервисРегистров = ЭлСервисРегистров.Значение;

		ЗначениеВДанныеФормы(ТабСервисРегистров, Форма["СервисРегистров" + ИдГруппы
			+ ?(Удаленные, "Удаленные", "")]);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОтчетныйПериодСГодомАЛКО(Форма)

	Форма.ОтчетныйПериодСГодом = "";

	РегламентированнаяОтчетностьАЛКОКлиентСервер.ПоказатьПериодАЛКО(Форма.СтруктураРеквизитовФормы, Форма.СтруктураДанныхТитульный, Истина);

	// В алкодекларациях либо квартальная, либо годовая отчетность в виноградных.
	ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено);
	ЭтоЗаявлениеПоВиноградной = Ложь;

	Если Форма.НомерАлкоОтчета = 0 Тогда

		Если ЗначениеЗаполнено(Форма.НомерПриложения) Тогда
			НомерПриложения = Число(Форма.НомерПриложения);
		Иначе
			НомерПриложения = 0;
		КонецЕсли;

		МассивВиноградных = МассивНомеровВиноградныхДеклараций();
	
		ЭтоЗаявлениеПоВиноградной = (МассивВиноградных.Найти(НомерПриложения) <> Неопределено);
		
	КонецЕсли;

	Если ЭтоВиноградная или ЭтоЗаявлениеПоВиноградной Тогда
	// Годовые отчеты.
		Форма.ОтчетныйПериодСГодом = Форма.СтруктураДанныхТитульный.ОтчетныйГод
			+ " год";
	Иначе
		Для Инд = 1 По 4 Цикл

			ТекОтчетныйПериод = Неопределено;
			Если Форма.СтруктураДанныхТитульный.Свойство("ОтчетныйПериод" + Инд
					+ "Кв", ТекОтчетныйПериод) Тогда
				Если ТекОтчетныйПериод = "V" Тогда

					Форма.ОтчетныйПериодСГодом = Строка(Инд) + " квартал "
						+ Форма.СтруктураДанныхТитульный.ОтчетныйГод + " года";
					Прервать;

				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЦветаСсылокТитульногоАЛКО(Форма)

	Форма.Элементы.ИНН.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияИНН, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	Форма.Элементы.КПП.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияКПП, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	Форма.Элементы.ПолныйАдресТелефон.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияПолныйАдресТелефон, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	Форма.Элементы.Руководитель.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияРуководитель, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	Форма.Элементы.ГлавныйБухгалтер.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияГлавБух, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

	Если НЕ Форма.Элементы.Найти("МестоОсуществленияДеятельности") = Неопределено Тогда

	// Заполнение необязательно, поэтому даже если не заполнено - обычная ссылка, кроме Уведомления о выездной торговле.
		Если Форма.НомерАлкоОтчета = 1000 Тогда

			Форма.Элементы.МестоОсуществленияДеятельности.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОрганизацияМестоОсуществленияДеятельности, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

		Иначе
			Форма.Элементы.МестоОсуществленияДеятельности.ЦветТекста = Форма.ЦветСтиляЦветГиперссылкиБРО;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область Сохранить

Процедура СохранитьДанныеРазделаАЛКО(Форма, НаимРаздела,
		УдалятьТаблицуФормы = Истина, ИзменятьАктивнуюСтраницу = Истина)

	Если НЕ ЗначениеЗаполнено(НаимРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Многостраничные и многострочные разделы.
	ТаблицаСтраницРаздела = Неопределено;
	Если Форма.мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела) Тогда

		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

		Если СтрТаблицыСтраниц.Количество() > 0 Тогда

			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];

			ОпределитьПредставлениеДопСтраницАЛКО(Форма, НаимРаздела);

			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;

			// Принудительно заставляем платформу обновить данные списков значений.
			СтрТаблицаСтраницы.ДополнительныеДанные[0].Пометка = НЕ СтрТаблицаСтраницы.ДополнительныеДанные[0].Пометка;
			СтрТаблицаСтраницы.Данные[0].Пометка = НЕ СтрТаблицаСтраницы.Данные[0].Пометка;

			ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(НаимРаздела, Форма.СтруктураРеквизитовФормы);

			Если НЕ ИдГруппы = Неопределено Тогда

			// Сохраним данные Лицензии .
				Если НаимРаздела = "Лицензии" Тогда

					Если Форма.УказываютсяНомераЛицензии Тогда

						СтруктураДанных = Новый Структура;

						// Используем то обстоятельство, что поля, которые надо сохранять в Данные, 
						// имеют реквизиты с П000000000101 по П000000000105.
						Для Инд = 1 По 5 Цикл

							ИмяРеквизита = "П00000000010" + Инд;
							ЗначениеРеквизита = Форма[ИмяРеквизита];

							СтруктураДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);

						КонецЦикла;

						Если СтрТаблицаСтраницы.Данные.Количество() = 0 Тогда
							СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанных);
						Иначе
							СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанных;
						КонецЕсли;
						СтрТаблицаСтраницы.Данные[0].Пометка = НЕ СтрТаблицаСтраницы.Данные[0].Пометка;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Все сохранено, удалим таблицу формы.
		Если УдалятьТаблицуФормы Тогда
			УдалитьТаблицыФормыАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура СохранитьДеревоСтраницОтчетаАЛКО(Форма, Знач мСохраненныйДок)

	Если мСохраненныйДок <> Неопределено Тогда

		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
		// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(Форма.РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьПоказателиОтчетаАЛКО(Форма)

	ПоказателиОтчета = Новый Структура();

	Префикс = "ПолеТабличногоДокумента";

	Для Каждого Раздел Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл

		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс
				+ Раздел.ИмяСтраницы, Форма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;

	КонецЦикла;

	Возврат ПоказателиОтчета;

КонецФункции

Процедура ОпределитьПредставлениеДопСтраницАЛКО(Форма,
		ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);

	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ИмяТекСтраницы = Страница.Ключ;
		ТаблицаСтраницРаздела = Форма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы.
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим ее представление.
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная)
						И (СтрокаТаблицы.АктивнаяСтраница)) Тогда

					ТекущееПредставлениеСтраницы = "Лист N " + Строка(НомерСтраницы);
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область ВыводСтраницыОтчета

Процедура ВывестиТаблицуФормыРазделаАЛКО(Форма, ИдГруппы, НомерСтраницы)

	Если ИдГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяИсточникаДанныхТаблицы = "ДинСписок" + ИдГруппы;
	СоздатьТаблицуФормыРазделаБезПодвалаАЛКО(Форма, ИдГруппы, НомерСтраницы, ИмяИсточникаДанныхТаблицы);

	// Выводим ИТОГИ в подвале.
	ВывестиИтогиТаблицыФормыРазделаАЛКО(Форма, ИдГруппы);

КонецПроцедуры

Процедура СоздатьТаблицуФормыРазделаБезПодвалаАЛКО(Форма, ИдГруппы,
		ИндексСтраницы, ИмяИсточникаДанныхТаблицы)

	Если НЕ ЗначениеЗаполнено(ИдГруппы) Тогда
		Возврат;
	КонецЕсли;

	Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);

	СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);
	ЭлементСпискаГрупп = СписокИдГрупп.НайтиПоЗначению(ИдГруппы);
	Если ЭлементСпискаГрупп = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НазваниеТаблицыФормы = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(ЭлементСпискаГрупп.Представление);
	
	// Определим таблицу настроек для текущей страницы раздела.
	// Используем всегда настройку 0-й страницы - в этом отчете вараинт заполнения для всех страниц один.
	ТаблицаВариантовЗаполнения = Форма["ТаблицаВариантыЗаполнения"
		+ НазваниеТаблицыФормы][0].ТаблицаВариантовЗаполнения.Выгрузить();

	ГруппаТаблицыФормы = Форма.Элементы.Найти("ГруппаТаблицыФормы"
		+ НазваниеТаблицыФормы);
	Если ГруппаТаблицыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Удаляем ранее созданную таблицу.
	// Менять источник данных можно только при создании таблицы формы.
	УдалитьТаблицыФормыАЛКО(Форма, ИдГруппы);

	// Создаем новую таблицу формы.
	ТаблицаФормы = Форма.Элементы.Добавить("ТаблицаФормыРаздела"
		+ ИдГруппы, Тип("ТаблицаФормы"), ГруппаТаблицыФормы);

	ИсточникДанныхТаблицы = Форма[ИмяИсточникаДанныхТаблицы];

	// Инициализация динамического списка.
	ЭтоДинамическийСписок = (ТипЗнч(ИсточникДанныхТаблицы) = Тип("ДинамическийСписок"));
	Если ЭтоДинамическийСписок Тогда
		ИнициализироватьСпискиАЛКО(Форма, ИмяИсточникаДанныхТаблицы, ИдГруппы, ИндексСтраницы);
	КонецЕсли;

	// Устанавливаем источник данных.
	ТаблицаФормы.ПутьКДанным = ИмяИсточникаДанныхТаблицы;

	// Обход ошибки платформы - программное присвоение пустого значения к ПутьКДаннымКартинкиСтроки выдает ошибку.
	// Хотя при очищении этого поля в конфигураторе в отладчике это пуле пустое и все работает.
	// Поэтому в запросе динамического списка добавлено поле ПустаяКартинка, в которое всегда помещается
	// пустая строка.
	ТаблицаФормы.ПутьКДаннымКартинкиСтроки = ТаблицаФормы.ПутьКДанным
		+ ".ПустаяКартинка";

	ТаблицаФормы.АктивизироватьПоУмолчанию = Истина;
	ТаблицаФормы.Видимость = Ложь;

	// Общие настройки таблицы.
	ТаблицаФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаФормы.ПоискПриВводе = ПоискВТаблицеПриВводе.НеИспользовать;
	ТаблицаФормы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Авто;
	ТаблицаФормы.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ТаблицаФормы.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Верх;

	// Командная панель.
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;

	// С данными регистров привязанными к данному отчету никто больше не работает, нет смысла обновлять.
	ТаблицаФормы.АвтоОбновление = Ложь;
	ТаблицаФормы.ОбновлениеПриИзмененииДанных = ОбновлениеПриИзмененииДанных.Авто;

	ТаблицаФормы.РастягиватьПоВертикали = Истина;
	ТаблицаФормы.РастягиватьПоГоризонтали = Истина;

	// Для виноградных деклараций фиксируем высоту, у них большая шапка.
	МассивВиноградных = МассивНомеровВиноградныхДеклараций();
	
	Если МассивВиноградных.Найти(Форма.НомерАлкоОтчета) <> Неопределено Тогда
	
		ВысотаЭкрана = Неопределено;

		МассивИнформацииЭкранов = ПолучитьИнформациюЭкрановКлиента();
		Если (НЕ МассивИнформацииЭкранов = Неопределено)
				и (МассивИнформацииЭкранов.Количество() > 0) Тогда

			ИнформацияЭкранаКлиента = МассивИнформацииЭкранов[0];
			ВысотаЭкрана = ИнформацияЭкранаКлиента.Высота;

			Если (НЕ ВысотаЭкрана = Неопределено) и (ВысотаЭкрана <= 1024) Тогда

			// Для виноградных, там большие группы над таблицей.
				ТаблицаФормы.РастягиватьПоВертикали = Ложь;

				Если Форма.НомерАлкоОтчета = 15 ИЛИ Форма.НомерАлкоОтчета = 29 Тогда
					ТаблицаФормы.ВысотаВСтрокахТаблицы = 3;
				Иначе
					ТаблицаФормы.ВысотаВСтрокахТаблицы = 4;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
	ТаблицаФормы.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;

	ТаблицаФормы.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Ячейка;
	ТаблицаФормы.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	ТаблицаФормы.МножественныйВыбор = Ложь;

	ТаблицаФормы.АвтоВводНовойСтроки = Ложь;
	ТаблицаФормы.ИзменятьПорядокСтрок = Истина;

	// Линии таблицы.
	ТаблицаФормы.ГоризонтальныеЛинии = Истина;
	ТаблицаФормы.ВертикальныеЛинии = Истина;

	// Добавление строк "нормальное", в конец.
	ТаблицаФормы.РежимВводаСтрок = РежимВводаСтрокТаблицы.ВКонецСписка;
	ТаблицаФормы.Отображение = ОтображениеТаблицы.Список;

	// Шапка всегда есть.
	ТаблицаФормы.Шапка = Истина;

	// Подвал есть не всегда.
	Если Раздел <> "Лицензии" Тогда

		ТаблицаФормы.Подвал = Истина;
		ТаблицаФормы.ВысотаПодвала = 1;

	Иначе
		ТаблицаФормы.Подвал = Ложь;
	КонецЕсли;

	// Отберем нужные настройки.
	ТаблицаНастроекТабличныхПолей = Форма.мТаблицаНастроекТабличныхПолей.Выгрузить();

	ТипЗначенияИДТабличногоПоля = ТаблицаНастроекТабличныхПолей.Колонки["ИДТабличногоПоля"].ТипЗначения;
	ПриведенныйИДТабличногоПоля = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИдГруппы);
	Отбор = Новый Структура("ИДТабличногоПоля", ПриведенныйИДТабличногоПоля);

	СтрокиНужныхНастроек = ТаблицаНастроекТабличныхПолей.НайтиСтроки(Отбор);

	КолонкаТекстШапки = "КраткоеНаименованиеКолонки";

	// Определим высоту шапки таблицы.
	МаксКолСтрокШапки = 0;
	Для Каждого СтрокаНастройки Из СтрокиНужныхНастроек Цикл
		ТекстШапки = СтрокаНастройки[КолонкаТекстШапки];
		МаксКолСтрокШапки = Макс(СтрЧислоСтрок(ТекстШапки), МаксКолСтрокШапки);
	КонецЦикла;

	ТаблицаФормы.ВысотаШапки = МаксКолСтрокШапки;

	ФорматИтогов = Форма["ФорматИтогов" + ИдГруппы];
	ФорматИтогов.Очистить();

	// Теперь надо создать колонки.

	// Первая колонка "Активно" - всегда признак активности строки - аналог пометки на удаление,
	// сделаем ее отдельно.
	ИмяКолонки = "Активно";
	Поле = Форма.Элементы.Добавить(ИмяКолонки
		+ ИдГруппы, Тип("ПолеФормы"), ТаблицаФормы);
	Поле.Вид = ВидПоляФормы.ПолеКартинки;

	// Отражаем в таблице как картинку - "крестик" если не активно, т.е помечено на удаление,
	// "пусто" - если активно, рабочая строка.
	Поле.КартинкаЗначений = БиблиотекаКартинок.ПустоИКрестик;

	Поле.АктивизироватьПоУмолчанию = Истина;

	Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;
	Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	Поле.Видимость = Истина;

	Поле.Заголовок = "DEL";
	// Показываем только картинку, заголовок не нужен.
	Поле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

	Поле.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;

	// В заголовке показываем интуитивно понятную картинку.
	Поле.КартинкаШапки = БиблиотекаКартинок.Удалить;

	Поле.Ширина = 2;
	Поле.АвтоМаксимальнаяШирина = Ложь;
	Поле.РастягиватьПоГоризонтали = Ложь;
	Поле.РастягиватьПоВертикали = Ложь;

	Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Поле.Подсказка = НСтр("ru = 'Помеченные крестиком не выгружаются, не печатаются и не учавствуют в итогах,
		|изменяется двойным щелчком, клавишей DEL или действием ""Удалить"".'");

	Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;

	Поле.АвтоВысотаЯчейки = Ложь;

	// Вторая колонка № строки - тоже сделаем отдельно.
	ИмяКолонки = "ИндексСтроки";
	Поле = Форма.Элементы.Добавить(ИмяКолонки
		+ ИдГруппы, Тип("ПолеФормы"), ТаблицаФормы);
	Поле.Вид = ВидПоляФормы.ПолеНадписи;

	Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;

	Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	Поле.Видимость = Истина;
	Поле.Заголовок = "№";

	Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

	Поле.АвтоВысотаЯчейки = Истина;
	Поле.Ширина = 3;
	Поле.АвтоМаксимальнаяШирина = Ложь;
	Поле.РастягиватьПоГоризонтали = Ложь;

	Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Поле.Подсказка = НСтр("ru = 'Номер строки.'");

	Поле.ТолькоПросмотр = Истина;
	
	// Остальные колонки формируем автоматически.
	Для Каждого СтрокаНастройки Из СтрокиНужныхНастроек Цикл

		ИмяКолонки = СтрокаНастройки.КодПоказателя;

		// Спозиционируем ТаблицаВариантовЗаполнения.
		ПриведенныйКодПоказателя = ТипЗначенияИДТабличногоПоля.ПривестиЗначение(ИмяКолонки);
		СтрокаВариантовЗаполнения = ТаблицаВариантовЗаполнения.Найти(ПриведенныйКодПоказателя, "КодПоказателя");

		Поле = Форма.Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);

		Если ЭтоДинамическийСписок Тогда
			Поле.Вид = ВидПоляФормы.ПолеНадписи; // редактировать в таблице все равно не получится
		Иначе
			Поле.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;

		Поле.РастягиватьПоГоризонтали = СтрокаНастройки["Растягивать"];
		Поле.АвтоМаксимальнаяШирина = Ложь;

		Поле.ПутьКДанным = ТаблицаФормы.ПутьКДанным + "." + ИмяКолонки;

		//////////////////////////////////////////////////////////////////////
		// Фиксация колонок.
		ФиксироватьВТаблицеСлева = СтрокаНастройки["ФиксироватьВТаблицеСлева"];
		Если ФиксироватьВТаблицеСлева Тогда
			Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Иначе
			ФиксироватьВТаблицеСправа = СтрокаНастройки["ФиксироватьВТаблицеСправа"];
			Если ФиксироватьВТаблицеСправа Тогда
				Поле.ФиксацияВТаблице = ФиксацияВТаблице.Право;
			КонецЕсли;
		КонецЕсли;

		//////////////////////////////////////////////////////////////////////
		// Видимость колонки.
		Поле.Видимость = СтрокаНастройки["ВидимостьКолонки"];
		
		//////////////////////////////////////////////////////////////////////
		// Шапка колонки.
		ТекстШапки = СокрЛП(СтрокаНастройки[КолонкаТекстШапки]);

		Пока СтрЧислоСтрок(ТекстШапки) <= МаксКолСтрокШапки - 1 Цикл
			ТекстШапки = ТекстШапки + Символы.ПС;
		КонецЦикла;
		
		Поле.Заголовок = НСтр("ru = '" + ТекстШапки + "'");
		
		Поле.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Поле.Подсказка = НСтр("ru = '"
			+ СокрЛП(СтрокаНастройки["ПолноеНаименованиеКолонки"]) + "'");

		Поле.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;

		//////////////////////////////////////////////////////////////////////
		// Ширина колонки.		
		Поле.Ширина = СтрокаНастройки.ШиринаКолонки;

		//////////////////////////////////////////////////////////////////////
		// Высота колонки.		
		Поле.АвтоВысотаЯчейки = Истина;

		//////////////////////////////////////////////////////////////////////
		// Цвет и доступность колонки.
		// Информацию по варианту заполнения берем из ТаблицаВариантовЗаполнения.
		// Для таблиц формы, в отличие от Табличного поля, решено строки не раскрашивать,
		// поэтому КодВариантаЗаполнения определяем только ради понимания - будет 
		// доступно для редактирования или нет.
		Если СтрокаВариантовЗаполнения = Неопределено Тогда
			КодВариантаЗаполнения = 0;
		Иначе
			КодВариантаЗаполнения = СтрокаВариантовЗаполнения.ВариантЗаполнения;
		КонецЕсли;

		//////////////////////////////////////////////////////////////////////
		// Определяем Доступность ячеек колонки для редактирования непосредственно в таблице.

		// Если мАвтоВыборКодов - Ложь то ВыборИзСписка включен, если Истина - отключен.
		ВыборИзСпискаИзНастроек = СтрокаНастройки["ВыборИзСписка"];

		ВыборИзСписка = ВыборИзСпискаИзНастроек
			и (НЕ Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
		ВызовФормЗаполнения = СтрокаНастройки["ВызовФормЗаполнения"];
		// 4- авторасчет поля, 5 - недоступность поля.
		ПолеНедоступноПоЗаполнению = (КодВариантаЗаполнения = 4
			или КодВариантаЗаполнения = 5);

			// Для источника данных в виде динамического списка редактирование всегда во внешней форме.		 
		ТолькоПросмотрПоля = ВыборИзСписка или ВызовФормЗаполнения
			или ПолеНедоступноПоЗаполнению или ЭтоДинамическийСписок;

		Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда

			Поле.АвтоПереносСтрок = Истина;
			//////////////////////////////////////////////////////////////////////
			// Подсказка ввода.
			Поле.ПодсказкаВвода = НСтр("ru = '"
				+ СокрЛП(СтрокаНастройки["ПолноеНаименованиеКолонки"]) + "'");

			Поле.РедактированиеТекста = НЕ ТолькоПросмотрПоля;
			Поле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;

			Поле.ТолькоПросмотр = НЕ Поле.РедактированиеТекста;

		КонецЕсли;

		//////////////////////////////////////////////////////////////////////
		// Подвал.
		Если Раздел <> "Лицензии" Тогда

			Поле.ТекстПодвала = СтрокаНастройки.ТекстПодвала;

			СчитатьИтогПоПолю = СтрокаНастройки.СчитатьИтогиПоКолонке;

			Если СчитатьИтогПоПолю Тогда

				Поле.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
				Поле.ОтображатьВПодвале = Истина;

			Иначе

				Если Не ЗначениеЗаполнено(Поле.ТекстПодвала) Тогда
					Поле.ОтображатьВПодвале = Ложь;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		//////////////////////////////////////////////////////////////////////
		// Выравнивание.
		// Числа справа, все остальное слева.

		// Определяем тип поля.
		ТипЗначенияГрубо = СтрокаНастройки.ТипДанныхРеквизита;
		КвалификаторТипа = СокрЛП(СтрокаНастройки.КвалификаторТипа);

		ПозЗапятой = СтрНайти(КвалификаторТипа, ",");
		ДлинаТипа = 0;
		ТочностьТипа = 0;
		Если ПозЗапятой > 1 Тогда
			ДлинаТипа = Число(СокрЛП(Лев(КвалификаторТипа, ПозЗапятой - 1)));
			ТочностьТипа = Число(СокрЛП(Сред(КвалификаторТипа, ПозЗапятой + 1)));
		Иначе
			ДлинаТипа = ?(ПустаяСтрока(КвалификаторТипа), 0, Число(КвалификаторТипа));
		КонецЕсли;

		Если ТипЗначенияГрубо = "Ч" Тогда

			Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			Поле.Формат = "ЧЦ=" + ДлинаТипа + "; ЧДЦ=" + ТочностьТипа;
			Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
				Поле.ФорматРедактирования = "ЧЦ=" + ДлинаТипа + "; ЧДЦ=" + ТочностьТипа;
			КонецЕсли;

			Если СчитатьИтогПоПолю = 1 Тогда

			// Формируем формат итогов.
				ДлинаТипаИтога = ДлинаТипа + 6;
				ФорматнаяСтрокаИтога = "ЧЦ=" + ДлинаТипаИтога + "; ЧДЦ=" + ТочностьТипа;
				ФорматИтогов.Добавить(ФорматнаяСтрокаИтога, ИмяКолонки);

			КонецЕсли;

		Иначе

			Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

		КонецЕсли;

	КонецЦикла;

	////////////////////////////////////////////////////////////////////
	// ОБРАБОТЧИКИ.
	ТаблицаФормы.УстановитьДействие("Выбор", "Подключаемый_ТаблицаФормыРазделаВыборНаКлиенте");
	ТаблицаФормы.УстановитьДействие("ПередУдалением", "Подключаемый_ТаблицаФормыРазделаПередУдалениемНаКлиенте");
	ТаблицаФормы.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ТаблицаФормыРазделаПередНачаломДобавления");
	ТаблицаФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаФормыРазделаПриИзмененииНаКлиенте");
	ТаблицаФормы.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_ТаблицаФормыРазделаПриАктивизацииСтрокиНаКлиенте");

КонецПроцедуры

Процедура УдалитьТаблицыФормыАЛКО(Форма, ИдГруппы = "")

	Если ИдГруппы = "" Тогда

	// Удаляем все таблицы формы.
		Для каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл

			ИдГруппы = ЭлементСтруктуры.Ключ;

			ТаблицаФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + ИдГруппы);

			Если ТаблицаФормы <> Неопределено Тогда
				Форма.Элементы.Удалить(ТаблицаФормы);
			КонецЕсли;

		КонецЦикла;

	Иначе

	// Удаляем только конкретную таблицу формы.
		ТаблицаФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + ИдГруппы);
		Если ТаблицаФормы <> Неопределено Тогда
			Форма.Элементы.Удалить(ТаблицаФормы);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьСпискиАЛКО(Форма, ИмяИсточникаДанныхТаблицы,
		ИдГруппы, ИндексСтраницы)

		// Пропишем отборы в динамических списках.
	ДинСписок = Форма[ИмяИсточникаДанныхТаблицы];

	ИндексСтраницыРегистра = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, ИдГруппы, ИндексСтраницы);
	ДокументСсылкаАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;

	ИДДок = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ИДДок", ИДДок);
	
	ИДДокИндСтраницы = ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра, ИДДок);

	ДинСписок.Параметры.УстановитьЗначениеПараметра("ИДДокИндСтраницы", ИДДокИндСтраницы);
	ДинСписок.Параметры.УстановитьЗначениеПараметра("ПустаяКартинкаСтрок", "");

КонецПроцедуры

Процедура УправлениеМенюТаблицыФормыПоГруппеАЛКО(Форма, ИдГруппы)

	ТаблицаФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];

	КоманднаяПанельМеню = ТаблицаФормы.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого ЭлМеню Из КоманднаяПанельМеню Цикл

		Имя = ЭлМеню.Имя;
		Имя = СтрЗаменить(Имя, "ТаблицаФормыРаздела" + ИдГруппы, "");

		Если (Имя = "ВывестиСписок") или (Имя = "Настройки") Тогда

		ИначеЕсли (Имя = "Найти") или (Имя = "Обновить")
				или (Имя = "ОтменитьПоиск") Тогда

				// Устанавливаем картинки.
			ЭлМеню.Отображение = ОтображениеКнопки.Картинка;
			ЭлМеню.ТолькоВоВсехДействиях = (СтрНайти(Имя, "Обновить") > 0);

		Иначе

		// Устанавливаем картинки.
			ЭлМеню.Отображение = ОтображениеКнопки.КартинкаИТекст;

			ЭлМеню.ТолькоВоВсехДействиях = (Имя = "Изменить")
				или (Имя = "ПоискПоТекущемуЗначению");

			Если Имя = "Удалить" Тогда
				ЭлМеню.Заголовок = "Установить/снять пометку удаления";
				ЭлМеню.ТолькоВоВсехДействиях = Истина;
			ИначеЕсли Имя = "Создать" Тогда
				ЭлМеню.Заголовок = "Добавить";
			ИначеЕсли Имя = "ПоискПоТекущемуЗначению" Тогда

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	КонтекстноеМеню = ТаблицаФормы.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого ЭлМеню Из КонтекстноеМеню Цикл

		Имя = ЭлМеню.Имя;

		Имя = СтрЗаменить(Имя, "ТаблицаФормыРаздела" + ИдГруппы, "");
		Имя = СтрЗаменить(Имя, "КонтекстноеМеню", "");

		Если (Имя = "ВывестиСписок") или (Имя = "Настройки") Тогда

		ИначеЕсли НЕ ((Имя = "Найти") или (Имя = "Обновить")
				или (Имя = "ОтменитьПоиск") или (Имя = "ПоискПоТекущемуЗначению")) Тогда

			Если Имя = "Удалить" Тогда
				ЭлМеню.Заголовок = "Установить/снять пометку удаления";
				ЭлМеню.ТолькоВоВсехДействиях = Истина;
			ИначеЕсли Имя = "Создать" Тогда
				ЭлМеню.Заголовок = "Добавить";
			Иначе

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Таблица создается в режиме невидимости.
	// Это необходимо для предотвращения "моргания" элементов меню при их изменении.
	// После внесения правок меню - включаем все сразу.
	ТаблицаФормы.Видимость = Истина;

КонецПроцедуры

Процедура ВидимостьДоступностьКнопокПолейРазделаАЛКО(Форма,
		НаименованиеРаздела, ЭтоРазделОтчета, ЭтоЛицензируемаяДеятельность)

	ЭтоТитульный = (НаименованиеРаздела = "Титульный");
	ЭтоРазделЛицензии = (НаименованиеРаздела = "Лицензии");

	Форма.Элементы.Обновить.Доступность = ЭтоТитульный;
	Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;

	// Для многостраничных разделов.
	Если НЕ ЭтоТитульный Тогда

		Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;

		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;

		// В случае если выделена не страница в РазделыОтчета,
		// а выделен сам Раздел - и показывается первая страница (с 0-м индексом),
		// кнопку Удалить в этом случае не показываем.		
		Если ЭтоРазделОтчета Тогда

			Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;

		ИначеЕсли Форма.ОднаСтраницаВРазделе Тогда
		// Нельзя удалить единственную страницу.
			Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;

		КонецЕсли;

		ЭтоВиноградная = НЕ (Форма.Элементы.Найти("ГруппаВиноградныхДанных") = Неопределено);
		Если ЭтоВиноградная Тогда

			СтрокаОП = Форма.ОбособленноеПодразделениеРаздела;
			ЗаполненоОП = НЕ ((НЕ ЗначениеЗаполнено(СтрокаОП))
				или (СтрокаОП = "Заполнить"));
			Форма.Элементы.ДобавитьВиноградник.Заголовок = ?(Форма.ЭтоПБОЮЛ, "Добавить еще один виноградник по этому же месту нахождения", "Добавить еще один виноградник по этому же обособленному подразделению");
			Форма.Элементы.ДобавитьВиноградник.Видимость = ЗаполненоОП;

		КонецЕсли;

		Если ЭтоРазделЛицензии Тогда

			ОбработкаПолейСтраницыЛицензийАЛКО(Форма, ЭтоЛицензируемаяДеятельность);
			Форма.Элементы.КнопкаУдалитьСтраницуЛицензии.Видимость = (НЕ Форма.ОднаСтраницаВРазделе)
				и (НЕ ЭтоРазделОтчета);

			Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101')
					И (Не ЭтоЛицензируемаяДеятельность) Тогда

					// Для НЕ лицензируемой деятельности нет смысла добавлять страницы
				// т.к. Лицензия может быть только одна.
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Ложь;
				Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;

			Иначе
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Истина;
			КонецЕсли;

		Иначе

			Форма.Элементы.КнопкаУдалитьСтраницу.Видимость = (НЕ Форма.ОднаСтраницаВРазделе)
															И (НЕ ЭтоРазделОтчета);
				
			Форма.Элементы.ДекорацияАвтоРасчетВыключен.Видимость 
						= Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;

		КонецЕсли;

	Иначе

		Форма.Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
		Форма.Элементы.Обновить.Доступность = Истина;

		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

Функция ОбновитьЦветСсылкиАЛКО(СтрЗначение, ЦветСтиляНезаполненныйРеквизит,
		ЦветСтиляЦветГиперссылкиБРО)

	ЦветТекста = ?(СтрЗначение = "Заполнить", ЦветСтиляНезаполненныйРеквизит, ЦветСтиляЦветГиперссылкиБРО);

	Возврат ЦветТекста;

КонецФункции

Процедура ОбновитьЦветСсылкиОП_АЛКО(Форма)

	Форма.Элементы.ОбособленноеПодразделение.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ОбособленноеПодразделениеРаздела, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

КонецПроцедуры

Процедура ОбновитьЦветСсылкиВидДеятельностиАЛКО(Форма)

	Форма.Элементы.ВидДеятельности.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ВидДеятельности, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

КонецПроцедуры

Процедура СформироватьПредставлениеВидаДеятельностиАЛКО(Форма,
		ИмяРеквизитаЗначенияВидаДеятельности)

	Форма.ВидДеятельности = ?(ЗначениеЗаполнено(Форма[ИмяРеквизитаЗначенияВидаДеятельности]), Форма[ИмяРеквизитаЗначенияВидаДеятельности], "Заполнить");

	ОбновитьЦветСсылкиВидДеятельностиАЛКО(Форма);

КонецПроцедуры

Процедура ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных,
		ПодчиненныеЭлементы, ИдГруппы)

	Для каждого Элемент Из ПодчиненныеЭлементы Цикл

		ИмяРеквизита = Элемент.Имя;

		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда

			ТекПодчиненныеЭлементы = Элемент.ПодчиненныеЭлементы;
			ВывестиДанныеПодчиненныхЭлементовФормы(Форма, СтруктураДанных, ТекПодчиненныеЭлементы, ИдГруппы);

			Продолжить;
			
		КонецЕсли;

		Если СтрНайти(ИмяРеквизита, ИдГруппы) = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураДанных.Свойство(ИмяРеквизита, Форма[ИмяРеквизита]);

	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область Проверка

Функция ВесаЮЛ()

	ВесаЮЛ = Новый Массив(10);
	ВесаЮЛ[0] = Неопределено;
	ВесаЮЛ[1] = 2;
	ВесаЮЛ[2] = 4;
	ВесаЮЛ[3] = 10;
	ВесаЮЛ[4] = 3;
	ВесаЮЛ[5] = 5;
	ВесаЮЛ[6] = 9;
	ВесаЮЛ[7] = 4;
	ВесаЮЛ[8] = 6;
	ВесаЮЛ[9] = 8;

	Возврат ВесаЮЛ;

КонецФункции

Функция ВесаФЛ11()

	ВесаФЛ11 = Новый Массив(12);
	ВесаФЛ11[0] = Неопределено;
	ВесаФЛ11[1] = 7;
	ВесаФЛ11[2] = 2;
	ВесаФЛ11[3] = 4;
	ВесаФЛ11[4] = 10;
	ВесаФЛ11[5] = 3;
	ВесаФЛ11[6] = 5;
	ВесаФЛ11[7] = 9;
	ВесаФЛ11[8] = 4;
	ВесаФЛ11[9] = 6;
	ВесаФЛ11[10] = 8;
	ВесаФЛ11[11] = 0;

	Возврат ВесаФЛ11;

КонецФункции

Функция ВесаФЛ12()

	ВесаФЛ12 = Новый Массив(12);
	ВесаФЛ12[0] = Неопределено;
	ВесаФЛ12[1] = 3;
	ВесаФЛ12[2] = 7;
	ВесаФЛ12[3] = 2;
	ВесаФЛ12[4] = 4;
	ВесаФЛ12[5] = 10;
	ВесаФЛ12[6] = 3;
	ВесаФЛ12[7] = 5;
	ВесаФЛ12[8] = 9;
	ВесаФЛ12[9] = 4;
	ВесаФЛ12[10] = 6;
	ВесаФЛ12[11] = 8;

	Возврат ВесаФЛ12;

КонецФункции

Функция УсловиеВыполненоАЛКО(ПараметрыВыгрузки, Условие,
		ИмяРаздела = "Титульный", ДокументСсылкаАлкоОтчет, ТаблицаСообщений,
		СтатусПроверки, ВерсияБСПЧислом = Неопределено, РежимОтладки = Неопределено)
	
	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Попытка
		РезультатВычисленияВыражения = ВычислитьАЛКО(СтрЗаменить(Условие, "&", "Параметры."), ПараметрыВыгрузки, ВерсияБСПЧислом);

		Если РезультатВычисленияВыражения <> Неопределено Тогда
			Если РезультатВычисленияВыражения = 1 ИЛИ РезультатВычисленияВыражения = 0
					ИЛИ РезультатВычисленияВыражения = Истина
					ИЛИ РезультатВычисленияВыражения = Ложь Тогда
				Возврат НЕ (Булево(РезультатВычисленияВыражения) = Ложь);
			Иначе

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", "Не удалось вычислить выражение-условие: """
					+ Условие + """!");
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", Неопределено);
				СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУдалосьВычислить");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки);

			КонецЕсли;
		КонецЕсли;

	Исключение

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", "Не удалось вычислить выражение-условие: """
			+ Условие + """!");
		СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеУдалосьВычислить");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки);

		Возврат Истина;

	КонецПопытки;

КонецФункции

Функция УзелПустАЛКО(Узел)

	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0"
		ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПустАЛКО(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;

КонецФункции

Функция ЗначениеСоответствуетФорматуАЛКО(Стр, ДокументСсылкаАлкоОтчет,
		ТаблицаСообщений, СтатусПроверки, РежимОтладки = Неопределено)

	Если РежимОтладки = Неопределено Тогда
		РежимОтладки = ОбщегоНазначения.РежимОтладки();
	КонецЕсли;

	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);

		Если ДлинаЗначения < Стр.МинРазмерность Тогда

			СтатусПроверки = Ложь;
			ТекстОписанияОшибки = "Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ меньше минимально возможной (" + ДлинаЗначения + " < "
				+ Стр.МинРазмерность + ")";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Титульный");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
			СтруктураОшибки.Вставить("ТипОшибки", "ОшибкаФорматаXML");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки);

		КонецЕсли;

		Если ДлинаЗначения > Стр.МаксРазмерность Тогда

			СтатусПроверки = Ложь;
			ТекстОписанияОшибки = "Формирование XML: Длина значения показателя """
				+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
				+ """ больше максимально возможной (" + ДлинаЗначения + " > "
				+ Стр.МаксРазмерность + ")";

			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Титульный");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
			СтруктураОшибки.Вставить("ТипОшибки", "ОшибкаФорматаXML");

			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, РежимОтладки);

		КонецЕсли;

	КонецЕсли;

	Возврат СтатусПроверки;

КонецФункции
#КонецОбласти

#Область ЖурналАЛКО

Функция ПолучитьСоответствиеДействийЖуранала(КлючЭтоСтрока = Истина)

// Заполнение измерения "Действие"
	// для индекса строки 0:
	// 10 - удаление страницы,
	// 11 - добавление страницы,
	// 15 - сервис (внесение сервисных данных по ресурсам),
	// 16 - автозаполнение.

	// Для других индексов строк, 
	// 1 - удаление строки,
	// 2 - отмена удаления,
	// 3 - при добавлении строки, 
	// 4 - при редактировании (изменении).
	СоответствиеДействий = Новый Соответствие;

	Если КлючЭтоСтрока Тогда

		СоответствиеДействий.Вставить("ДобавлениеСтроки", 3);
		СоответствиеДействий.Вставить("Редактирование", 4);

		СоответствиеДействий.Вставить("УдалениеСтраницы", 10);
		СоответствиеДействий.Вставить("ДобавлениеСтраницы", 11);
		СоответствиеДействий.Вставить("Сервис", 15);
		СоответствиеДействий.Вставить("Автозаполнение", 16);

	Иначе

		СоответствиеДействий.Вставить(3, "ДобавлениеСтроки");
		СоответствиеДействий.Вставить(4, "Редактирование");

		СоответствиеДействий.Вставить(10, "УдалениеСтраницы");
		СоответствиеДействий.Вставить(11, "ДобавлениеСтраницы");
		СоответствиеДействий.Вставить(15, "Сервис");
		СоответствиеДействий.Вставить(16, "Автозаполнение");

	КонецЕсли;

	Возврат СоответствиеДействий;

КонецФункции

Функция ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет,
		ИмяРегистра = Неопределено, ИндексСтраницыРегистра = Неопределено,
		ИндексСтроки = Неопределено, Действие = Неопределено)

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ПолучитьНаборЗаписейРегистраЖурнала() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;

	НаборЗаписей = РегистрЖурнала.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);

	Если НЕ ИмяРегистра = Неопределено Тогда
		НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);
	КонецЕсли;

	Если НЕ ИндексСтраницыРегистра = Неопределено Тогда
	// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
		ЧислоИндексСтраницыРегистра = ?(Число(ИндексСтраницыРегистра) = 0, -1, Число(ИндексСтраницыРегистра));
		НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ЧислоИндексСтраницыРегистра);
	КонецЕсли;

	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	Если НЕ Действие = Неопределено Тогда

		Если ТипЗнч(Действие) = Тип("Число") Тогда

			ДействиеЧисло = Действие;

		ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда

			ДействиеЧисло = СоответствиеДействий.Получить(Действие);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ДействиеЧисло = Неопределено Тогда

		ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);
		Если ОбратноеСоответствиеДействий.Получить(ДействиеЧисло) = Неопределено Тогда

			Возврат Ложь;

		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;

	НаборЗаписей.Отбор.Действие.Установить(ДействиеЧисло);

	ЧислоИндексСтроки = Неопределено;
	Если ДействиеЧисло >= 10 Тогда
		ЧислоИндексСтроки = -1;
	КонецЕсли;

	Если ЧислоИндексСтроки = Неопределено Тогда
		Если НЕ ИндексСтроки = Неопределено Тогда
		// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
			ЧислоИндексСтроки = ?(Число(ИндексСтроки) = 0, -1, Число(ИндексСтроки));
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЧислоИндексСтроки = Неопределено Тогда
		НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	КонецЕсли;

	НаборЗаписей.Прочитать();

	Возврат НаборЗаписей;

КонецФункции

Функция ПолучитьМаксИндексСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет)
	
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	НаборЗаписей = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, "ОбщиеСведения", 0, 0, СоответствиеДействий.Получить("Сервис"));

	МаксИндексСтраницыПоЖурналу = 0;

	Если НаборЗаписей.Количество() > 0 Тогда

	// Запись в наборе может быть только одна.
		МаксИндексСтраницыПоЖурналу = НаборЗаписей[0].МаксИндексСтраницы;

		Если МаксИндексСтраницыПоЖурналу = Неопределено Тогда
			МаксИндексСтраницыПоЖурналу = 0;
		КонецЕсли;

	КонецЕсли;

	Возврат МаксИндексСтраницыПоЖурналу;

КонецФункции

Функция ПолучитьКоличествоСтрокСтраницыПоЖурналу(ДокументСсылкаАлкоОтчет,
		ИмяРегистра, ИндексСтраницыРегистра)
	
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	НаборЗаписей = ПолучитьНаборЗаписейРегистраЖурнала(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, 0, СоответствиеДействий.Получить("Сервис"));

	КоличествоСтрокСтраницыПоЖурналу = 0;

	Если НаборЗаписей.Количество() > 0 Тогда

	// Запись в наборе может быть только одна.
		КоличествоСтрокСтраницыПоЖурналу = НаборЗаписей[0].КоличествоСтрок;

		Если КоличествоСтрокСтраницыПоЖурналу = Неопределено Тогда
			КоличествоСтрокСтраницыПоЖурналу = 0;
		КонецЕсли;

	КонецЕсли;

	Возврат КоличествоСтрокСтраницыПоЖурналу;

КонецФункции

Функция ЖурналНеПуст(ДокументСсылкаАлкоОтчет) Экспорт

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ЖурналНеПуст() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	ЗапросЖурнала = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СведенияРеглОтчетАлкоЖурнал.*
		|ИЗ
		|	РегистрСведений.СведенияРеглОтчетАлкоЖурнал КАК СведенияРеглОтчетАлкоЖурнал
		|ГДЕ
		|	СведенияРеглОтчетАлкоЖурнал.Документ = &Документ
		|	И (НЕ СведенияРеглОтчетАлкоЖурнал.Действие = &Действие)";

	ЗапросЖурнала.Текст = ТекстЗапроса;

	// Записи с действием Сервис должны быть, 
	// остальные свидетельствуют о незавершенном редактировании отчета.
	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();
	ЧислоДействиеСервис = СоответствиеДействий.Получить("Сервис");

	ЗапросЖурнала.Параметры.Вставить("Документ", ДокументСсылкаАлкоОтчет);
	ЗапросЖурнала.Параметры.Вставить("Действие", ЧислоДействиеСервис);

	РезультатЗапроса = ЗапросЖурнала.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Процедура ОчиститьРегистрЖурнала(ДокументСсылкаАлкоОтчет,
		ИмяРегистра = Неопределено, ИндексСтраницыРегистра = Неопределено,
		ИндексСтроки = Неопределено, Действие = Неопределено, ОчиститьСервис = Ложь)

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В процедуру РегламентированнаяОтчетностьАЛКО.ОчиститьРегистрЖурнала() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	Если ТранзакцияАктивна() Тогда
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СведенияРеглОтчетАлкоЖурнал");
			ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений.СведенияРеглОтчетАлкоЖурнал - ошибка блокировки при очистке Журнала.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;

		КонецПопытки;
	КонецЕсли;

	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;

	НаборЗаписей = РегистрЖурнала.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);

	Если НЕ ИмяРегистра = Неопределено Тогда
		НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);
	КонецЕсли;

	Если НЕ ИндексСтраницыРегистра = Неопределено Тогда
	// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
		ЧислоИндексСтраницыРегистра = ?(Число(ИндексСтраницыРегистра) = 0, -1, Число(ИндексСтраницыРегистра));
		НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ЧислоИндексСтраницыРегистра);
	КонецЕсли;

	СоответствиеДействий = ПолучитьСоответствиеДействийЖуранала();

	Если НЕ Действие = Неопределено Тогда

		Если ТипЗнч(Действие) = Тип("Число") Тогда

			ДействиеЧисло = Действие;

		ИначеЕсли ТипЗнч(Действие) = Тип("Строка") Тогда

			ДействиеЧисло = СоответствиеДействий.Получить(Действие);

		КонецЕсли;

	КонецЕсли;

	ЧислоИндексСтроки = Неопределено;

	Если НЕ ДействиеЧисло = Неопределено Тогда

		ОбратноеСоответствиеДействий = ПолучитьСоответствиеДействийЖуранала(Ложь);
		Если ОбратноеСоответствиеДействий.Получить(ДействиеЧисло) = Неопределено Тогда

			Возврат;

		КонецЕсли;
		НаборЗаписей.Отбор.Действие.Установить(ДействиеЧисло);

		Если ДействиеЧисло >= 10 Тогда
			ЧислоИндексСтроки = -1;
		КонецЕсли;

	КонецЕсли;

	Если ЧислоИндексСтроки = Неопределено Тогда
		Если НЕ ИндексСтроки = Неопределено Тогда
		// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
			ЧислоИндексСтроки = ?(Число(ИндексСтроки) = 0, -1, Число(ИндексСтроки));
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЧислоИндексСтроки = Неопределено Тогда
		НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	КонецЕсли;

	// Для случая удаления всех записей по документу,
	// анализируем флаг ОчиститьСервис.
	РезультатЗапросаЖурналаПоДействиюСервис = Новый ТаблицаЗначений;

	Если (ИмяРегистра = Неопределено) И (ИндексСтраницыРегистра = Неопределено)
			И (ИндексСтроки = Неопределено) И (Действие = Неопределено) Тогда

		Если НЕ ОчиститьСервис Тогда

			ЗапросЖурналаПоДействиюСервис = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
				|	СведенияРеглОтчетАлкоЖурнал.*
				|ИЗ
				|	РегистрСведений.СведенияРеглОтчетАлкоЖурнал КАК СведенияРеглОтчетАлкоЖурнал
				|ГДЕ
				|	СведенияРеглОтчетАлкоЖурнал.Документ = &Документ
				|	И СведенияРеглОтчетАлкоЖурнал.Действие = &Действие
				|	И СведенияРеглОтчетАлкоЖурнал.ИндексСтраницыРегистра = &ИндексСтраницыРегистра
				|	И СведенияРеглОтчетАлкоЖурнал.ИндексСтроки = &ИндексСтроки";

			ЗапросЖурналаПоДействиюСервис.Текст = ТекстЗапроса;

			// Записи с действием Сервис должны быть, 
			// остальные свидетельствуют о незавершенном редактировании отчета.
			ЧислоДействиеСервис = СоответствиеДействий.Получить("Сервис");

			ЗапросЖурналаПоДействиюСервис.Параметры.Вставить("Документ", ДокументСсылкаАлкоОтчет);
			ЗапросЖурналаПоДействиюСервис.Параметры.Вставить("Действие", ЧислоДействиеСервис);
			ЗапросЖурналаПоДействиюСервис.Параметры.Вставить("ИндексСтраницыРегистра", -1);
			ЗапросЖурналаПоДействиюСервис.Параметры.Вставить("ИндексСтроки", -1);

			РезультатЗапросаЖурналаПоДействиюСервис = ЗапросЖурналаПоДействиюСервис.Выполнить().Выгрузить();

		КонецЕсли;

	КонецЕсли;

	// Пишем пустой набор в режиме замещения - очищаем.
	НаборЗаписей.Записать(Истина);

	НаборЗаписей = РегистрЖурнала.СоздатьНаборЗаписей();
	// Если РезультатЗапросаЖурнала не пуст - добавляем в регистр журнала.
	Для каждого СтрокаТаблицы Из РезультатЗапросаЖурналаПоДействиюСервис Цикл

		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);

	КонецЦикла;

	Если НаборЗаписей.Количество() > 0 Тогда

	// В режиме дописывания.
		НаборЗаписей.Записать(Ложь);

	КонецЕсли;

КонецПроцедуры

Функция ДобавитьВРегистрЖурналаНапрямую(ДокументСсылкаАлкоОтчет, ИмяРегистра,
		ИндексСтраницыРегистра, ИндексСтроки, ЧислоДействие, Ресурсы = Неопределено)

	ДокументСсылка = ПривестиДокументКСсылке(ДокументСсылкаАлкоОтчет);
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение "В функцию РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурналаНапрямую() 
				|передан ДокументСсылкаАлкоОтчет, не являющийся ДокументСсылка.РегламентированныйОтчет!";	
	КонецЕсли;
	ДокументСсылкаАлкоОтчет = ДокументСсылка;
	
	// Поскольку измерение не может быть пустым - нулевые значения заменяем на -1.								
	ИндексСтраницыРегистра = ?(ИндексСтраницыРегистра = 0, -1, ИндексСтраницыРегистра);
	ИндексСтроки = ?(ИндексСтроки = 0, -1, ИндексСтроки);
	ЧислоИндексСтроки = ИндексСтроки;
	// Для действий над страницами в целом индекс строки всегда 0.
	Если ЧислоДействие >= 10 Тогда
		ЧислоИндексСтроки = -1;
	КонецЕсли;

	Если ТранзакцияАктивна() Тогда
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СведенияРеглОтчетАлкоЖурнал");
			ЭлементБлокировкиДанных.УстановитьЗначение("Документ", ДокументСсылкаАлкоОтчет);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();

		Исключение

			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'РегистрСведений.СведенияРеглОтчетАлкоЖурнал - ошибка блокировки при записи в Журнал.'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;

		КонецПопытки;
	КонецЕсли;

	РегистрЖурнала = РегистрыСведений.СведенияРеглОтчетАлкоЖурнал;

	НаборЗаписей = РегистрЖурнала.СоздатьНаборЗаписей();
	НаборЗаписейНовый = РегистрЖурнала.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылкаАлкоОтчет);

	НаборЗаписей.Отбор.ИмяРегистра.Установить(ИмяРегистра);

	НаборЗаписей.Отбор.ИндексСтраницыРегистра.Установить(ИндексСтраницыРегистра);
	НаборЗаписей.Отбор.ИндексСтроки.Установить(ЧислоИндексСтроки);
	НаборЗаписей.Отбор.Действие.Установить(ЧислоДействие);

	НаборЗаписей.Прочитать();

	СтараяЗаписьЖурналаДействие = Неопределено;
	Если НаборЗаписей.Количество() > 0 Тогда
		СтараяЗаписьЖурналаДействие = НаборЗаписей[0];
	КонецЕсли;

	НоваяЗаписьЖурналаДействие = НаборЗаписейНовый.Добавить();

	Если НЕ СтараяЗаписьЖурналаДействие = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяЗаписьЖурналаДействие, СтараяЗаписьЖурналаДействие);
		// Удалим то что нашли.
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	Иначе
		НоваяЗаписьЖурналаДействие.Документ = ДокументСсылкаАлкоОтчет;
		НоваяЗаписьЖурналаДействие.ИмяРегистра = ИмяРегистра;
		НоваяЗаписьЖурналаДействие.ИндексСтраницыРегистра = ИндексСтраницыРегистра;
		НоваяЗаписьЖурналаДействие.ИндексСтроки = ЧислоИндексСтроки;
		НоваяЗаписьЖурналаДействие.Действие = ЧислоДействие;
	КонецЕсли;

	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	Если ВышеБРО_1_1_11_0 Тогда
		НоваяЗаписьЖурналаДействие.Организация = НоваяЗаписьЖурналаДействие.Документ.Организация;
	КонецЕсли;

	// Если ресурсы определены - сначала читаем имеющуюся запись и дописываем переданные значения ресурсов,
	// чтобы не затереть ранее записанные значения ресурсов.
	Если НЕ Ресурсы = Неопределено Тогда

		Если ТипЗнч(Ресурсы) = Тип("Структура")
				или ТипЗнч(Ресурсы) = Тип("ФиксированнаяСтруктура") Тогда

			Если Ресурсы.Свойство("КоличествоСтрок") Тогда
				НоваяЗаписьЖурналаДействие.КоличествоСтрок = Ресурсы.КоличествоСтрок;
			КонецЕсли;

			Если Ресурсы.Свойство("КоличествоСтрокПомеченных") Тогда
				НоваяЗаписьЖурналаДействие.КоличествоСтрокПомеченных = Ресурсы.КоличествоСтрокПомеченных;
			КонецЕсли;

			Если Ресурсы.Свойство("НачальноеЗначение")
					И (НЕ ИмяРегистра = "ЗаявлениеОКорректировке") Тогда
				ЭтоПервоеРедактирование = ЭтоПервоеРедактированиеЗаписиРегистра(ДокументСсылкаАлкоОтчет, ИмяРегистра, ИндексСтраницыРегистра, ЧислоИндексСтроки);
				Если ЭтоПервоеРедактирование Тогда
					НоваяЗаписьЖурналаДействие.НачальноеЗначение = Ресурсы.НачальноеЗначение;
				КонецЕсли;
			ИначеЕсли Ресурсы.Свойство("НачальноеЗначение")
					И (ИмяРегистра = "ЗаявлениеОКорректировке") Тогда
				НоваяЗаписьЖурналаДействие.НачальноеЗначение = Ресурсы.НачальноеЗначение;
			КонецЕсли;

			Если Ресурсы.Свойство("МаксИндексСтраницы") Тогда
				НоваяЗаписьЖурналаДействие.МаксИндексСтраницы = Ресурсы.МаксИндексСтраницы;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	НаборЗаписейНовый.Записать(Ложь);

	Возврат Истина;

КонецФункции
#КонецОбласти

#КонецОбласти
