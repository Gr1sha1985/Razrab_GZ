//ПОСТУПЛЕНИЕ ОБОРУДОВАНИЯ

Процедура СформироватьДвиженияПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ         = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям    = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающий оборудование
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "Количество,"          // <Число,15,3> - количество поступающего оборудования
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется оборудование
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает оборудование
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает оборудование
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает оборудование
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик оборудования
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает оборудование
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ОБЪЕКТОВ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОбъектыСтроительства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ОбъектыСтроительства Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОбъектыСтроительства

	СписокОбязательныхКолонок = ""
	+ "ОбъектСтроительства," // <СправочникСсылка.ОбъектыСтроительства> - объект строительства, на который относятся затраты
	+ "СтатьяЗатрат,"        // <СправочникСсылка.СтатьиЗатрат>
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который относятся затраты
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ОбъектыСтроительства", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОбъектыСтроительства, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает товар
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает товар
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ОСНОВНЫХ СРЕДСТВ

Процедура СформироватьДвиженияПоступлениеОсновныхСредств(ТаблицаОсновныеСредства, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОсновныеСредства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеОсновныхСредств(ТаблицаОсновныеСредства, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойСчетУчетаЗатрат = УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ПриобретениеЗемельныхУчастков = 
		Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков;
	
	Если ПриобретениеЗемельныхУчастков Тогда
		Счет08 = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковБезДопРасходов;
	Иначе
		Счет08 = ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств;
	КонецЕсли;
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	ТаблицаДляСписания.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Для каждого СтрокаТаблицы Из Параметры.ОсновныеСредства Цикл

		НДСУчитываетсяВCтоимости = РаздельныйУчетНДСНаСчете19 
			И СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		
		// Поступление основного средства
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = Счет08;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.МестонахождениеОС;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.МестонахождениеОС;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		// Принятие к учету основного средства
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Принят к учету объект ОС'");

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.МестонахождениеОС;
		КонецЕсли;

		Проводка.СчетКт = Счет08;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.МестонахождениеОС;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
			Если Не ПриобретениеЗемельныхУчастков Тогда
			
				СтоимостьИмуществаНУ = СтрокаТаблицы.СуммаНУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
				Если СтоимостьИмуществаНУ <= ПредельнаяСтоимостьАмортизируемогоИмуществаНУ() Тогда
					// Включение стоимости в состав расходов НУ
					
					СтрокаСписания = ТаблицаДляСписания.Добавить();
					
					СтрокаСписания.ОбъектУчета               = СтрокаТаблицы.ОсновноеСредство;
					СтрокаСписания.НаправлениеАмортизации    = Реквизиты.СпособОтраженияРасходовПоАмортизации;
					СтрокаСписания.СчетНачисленияАмортизации = СтрокаТаблицы.СчетУчета;
					СтрокаСписания.Подразделение             = Реквизиты.МестонахождениеОС;
					СтрокаСписания.СуммаАмортизацииНУ        = СтоимостьИмуществаНУ;
					СтрокаСписания.НомерСтроки               = СтрокаТаблицы.НомерСтроки;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

		// Состояния ОС организаций
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		
		Движение.Период           = Реквизиты.Период;
		Движение.ДатаСостояния    = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Состояние        = Перечисления.СостоянияОС.ПринятоКУчету;

		// События ОС
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.Событие           = 
			ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
		Движение.НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();
		Движение.НомерДокумента    = Реквизиты.НомерВходящегоДокумента;
		Движение.СуммаЗатратБУ     = СтрокаТаблицы.СуммаБУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
		
		Если ОтражатьВНалоговомУчете Или ПлательщикНДФЛ Тогда
			Движение.СуммаЗатратНУ = СтрокаТаблицы.СуммаНУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчетеУСН Тогда
			Движение.СуммаЗатратУСН = СтрокаТаблицы.СуммаБУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
		КонецЕсли;
		
		// Первоначальные сведения ОС (бухгалтерский учет)
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		
		Движение.Период                      = Реквизиты.Период;
		Движение.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                 = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимость     = СтрокаТаблицы.СуммаБУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
		Если ПриобретениеЗемельныхУчастков Тогда
			Движение.ПорядокПогашенияСтоимости   = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается;
		Иначе
			Движение.ПорядокПогашенияСтоимости   = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
			Движение.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		КонецЕсли;
		Движение.СпособПоступления           = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
		Движение.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;

		// Местонахождение ОС (бухгалтерский учет)
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		
		Движение.Период           = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Местонахождение  = Реквизиты.МестонахождениеОС;
		Движение.МОЛ              = Реквизиты.МОЛ;

		// Счета бухгалтерского учета ОС
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		
		Движение.Период                    = Реквизиты.Период;
		Движение.ОсновноеСредство          = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация               = Реквизиты.Организация;
		Движение.СчетУчета                 = СтрокаТаблицы.СчетУчета;
		Если Не ПриобретениеЗемельныхУчастков Тогда
			Движение.СчетНачисленияАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
		КонецЕсли;
		
		// Начисление амортизации ОС (бухгалтерский учет)
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Не ПриобретениеЗемельныхУчастков;
		
		Если Не ПриобретениеЗемельныхУчастков Тогда
		
			// Способы отражения расходов по амортизации ОС (бухгалтерский учет)
			Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
			
			Движение.Период                                = Реквизиты.Период;
			Движение.ОсновноеСредство                      = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация                           = Реквизиты.Организация;
			Движение.СпособыОтраженияРасходовПоАмортизации = Реквизиты.СпособОтраженияРасходовПоАмортизации;

			// Параметры амортизации ОС (бухгалтерский учет)
			Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
			
			Движение.Период                                    = Реквизиты.Период;
			Движение.ОсновноеСредство                          = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация                               = Реквизиты.Организация;
			Движение.СрокПолезногоИспользования                = СтрокаТаблицы.СрокПолезногоИспользования;
			Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаТаблицы.СрокПолезногоИспользования;
			Движение.СтоимостьДляВычисленияАмортизации         = СтрокаТаблицы.СуммаБУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
			
		КонецЕсли;

		Если ОтражатьВНалоговомУчете Или ПлательщикНДФЛ Тогда

			Если ПриобретениеЗемельныхУчастков Тогда
				ПорядокВключенияСтоимостиВСоставРасходов = 
					Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
			ИначеЕсли ОтражатьВНалоговомУчете 
			          И (СтрокаТаблицы.СуммаНУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0)) 
			          <= ПредельнаяСтоимостьАмортизируемогоИмуществаНУ() Тогда
				ПорядокВключенияСтоимостиВСоставРасходов = 
					Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету;
			Иначе
				ПорядокВключенияСтоимостиВСоставРасходов = 
					Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
			КонецЕсли;
			
			// Первоначальные сведения ОС (налоговый учет)
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
			
			Движение.Период = Реквизиты.Период;
			Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация = Реквизиты.Организация;
			Движение.ПорядокВключенияСтоимостиВСоставРасходов = ПорядокВключенияСтоимостиВСоставРасходов;
			Движение.ПервоначальнаяСтоимостьНУ = СтрокаТаблицы.СуммаНУ + ?(НДСУчитываетсяВCтоимости, СтрокаТаблицы.СуммаНДСРуб, 0);
			Если ПорядокВключенияСтоимостиВСоставРасходов = 
			     Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				Движение.СпособОтраженияРасходовПриВключенииВСтоимость = Реквизиты.СпособОтраженияРасходовПоАмортизации;
				Движение.СпособОтраженияРасходовАналогичноАмортизации = Истина;
			КонецЕсли;
			Если  Не ПриобретениеЗемельныхУчастков И ПлательщикНДФЛ Тогда
				Движение.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
			КонецЕсли;
			
			// Параметры амортизации ОС (налоговый учет)
			Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
			
			Движение.Период                     = Реквизиты.Период;
			Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация                = Реквизиты.Организация;
			Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
			
			Если Не ПриобретениеЗемельныхУчастков Тогда
			
				// Начисление амортизации ОС (налоговый учет)
				Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
				
				Движение.Период               = Реквизиты.Период;
				Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
				Движение.Организация          = Реквизиты.Организация;
				Движение.НачислятьАмортизацию = ПорядокВключенияСтоимостиВСоставРасходов = 
					Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;

				// Специальный коэффициент для амортизации ОС (налог. учет)
				Движение = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
				
				Движение.Период                 = Реквизиты.Период;
				Движение.ОсновноеСредство       = СтрокаТаблицы.ОсновноеСредство;
				Движение.Организация            = Реквизиты.Организация;
				
			КонецЕсли;
			
		КонецЕсли;

		Если ОтражатьВНалоговомУчетеУСН Тогда
			
			// Первоначальные сведения ОС (налог. учет УСН)
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Добавить();
			
			Движение.Период                     = Реквизиты.Период;
			Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
			Движение.Организация                = Реквизиты.Организация;
			Движение.ПервоначальнаяСтоимостьУСН = СтрокаТаблицы.СуммаБУ;
			Движение.ДатаПриобретения           = Реквизиты.Период;
			Если ПриобретениеЗемельныхУчастков Тогда
				Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = 
					Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов;
			Иначе
				Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = 
					Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
				Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать                                             = Истина;
	Движения.СостоянияОСОрганизаций.Записывать                                   = Истина;
	Движения.СобытияОСОрганизаций.Записывать                                     = Истина;
	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать                = Истина;
	Движения.МестонахождениеОСБухгалтерскийУчет.Записывать                       = Истина;
	Движения.СчетаБухгалтерскогоУчетаОС.Записывать                               = Истина;
	Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Записывать                 = Истина;
	
	Если Не ПриобретениеЗемельныхУчастков Тогда
		Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
		Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать                  = Истина;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Или ПлательщикНДФЛ Тогда
		Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать                       = Истина;
		Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать                      = Истина;
		
		Если Не ПриобретениеЗемельныхУчастков Тогда
			Движения.ПараметрыАмортизацииОСНалоговыйУчет.Записывать                        = Истина;
			Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;
		КонецЕсли;
		
		Если ТаблицаДляСписания.Количество() > 0 Тогда
			
			ТаблицаЗатратПоАмортизации = 
				УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
					ТаблицаДляСписания, Параметры.Реквизиты, Отказ);
				
			СтатьяЗатрат = Справочники.СтатьиЗатрат.ПредопределенныйЭлемент("НеамортизируемоеИмущество");
				
			Для каждого СтрокаОС Из ТаблицаЗатратПоАмортизации Цикл
				СтрокаОС.СуммаВР = СтрокаОС.СуммаВР - СтрокаОС.СуммаНУ;
				
				Для Сч = 1 По 3 Цикл
					Если ТипЗнч(СтрокаОС["Субконто" + Сч]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
						СтрокаОС["Субконто" + Сч] = СтатьяЗатрат;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
				
			Параметры.Реквизиты.Колонки.Добавить("Содержание");
			Параметры.Реквизиты.ЗаполнитьЗначения(НСтр("ru = 'Включение стоимости в состав расходов (НУ)'"), "Содержание");
				
			УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
				ТаблицаЗатратПоАмортизации,
				Параметры.Реквизиты,
				Движения, Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОсновныхСредств(ТаблицаОсновныеСредства, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОбъектыСтроительства

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "ИнвентарныйНомер,"           // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаВзаиморасчетов,"        // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"                    // <Число,15,2> - сумма в рублях
	+ "СуммаНДСРуб,"                // <Число,15,2> - сумма НДС в рублях
	+ "НомерСтроки,"                // <Число, 5, 0>
	+ "СпособУчетаНДС,"             // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаНУ,"                    // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который поступает ОС
	+ "СчетНачисленияАмортизации,"  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СрокПолезногоИспользования," // <Число, 4, 0>
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ОсновныеСредства", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОсновныеСредства, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "ВидОперации,"                    // <ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг>
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает товар
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ИмяСписка,"                      // <Строка, 0>
	+ "МестонахождениеОС,"
	+ "НомерВходящегоДокумента,"
	+ "МОЛ,"
	+ "СпособОтраженияРасходовПоАмортизации,"
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПредельнаяСтоимостьАмортизируемогоИмуществаНУ()
	
	Возврат 100000;
	
КонецФункции

Процедура УстановитьАмортизационнуюГруппаОС(ТаблицаОС) Экспорт
	
	Если ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	ОсновныеСредства.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	СправочникОсновныеСредства.АмортизационнаяГруппа КАК АмортизационнаяГруппа
	|ИЗ
	|	ОсновныеСредства КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|		ПО ОсновныеСредства.ОсновноеСредство = СправочникОсновныеСредства.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(СправочникОсновныеСредства.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АмортизационнаяГруппа = АмортизационнаяГруппа(Выборка.СрокПолезногоИспользования);
		
		Если АмортизационнаяГруппа = Выборка.АмортизационнаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектОС = Выборка.ОсновноеСредство.ПолучитьОбъект();
		ОбъектОС.АмортизационнаяГруппа = АмортизационнаяГруппа;
		ОбъектОС.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция АмортизационнаяГруппа(СрокПолезногоИспользования)
	
	Если Число(СрокПолезногоИспользования) = 0 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПустаяСсылка();
	ИначеЕсли Число(СрокПолезногоИспользования) < 25 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПерваяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 37 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВтораяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 61 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ТретьяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 85 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 121 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПятаяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 181 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ШестаяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 241 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 301 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа;
	ИначеЕсли Число(СрокПолезногоИспользования) < 361 Тогда
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа;
	Иначе
		АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа;
	КонецЕсли;
	
	Возврат АмортизационнаяГруппа;
	
КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ОБЪЕКТЫ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Принят к учету объект ОС";

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если НЕ ОтражатьВНалоговомУчете Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ Реквизиты.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
		
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.СуммаВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.СуммаВР;
				КонецЕсли;
			КонецЕсли;

		Иначе
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = Реквизиты.ПервоначальнаяСтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРДт = Проводка.Сумма - Проводка.СуммаНУДт - Проводка.СуммаПРДт;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = Реквизиты.ПервоначальнаяСтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРКт = Проводка.Сумма - Проводка.СуммаНУКт - Проводка.СуммаПРКт;
				КонецЕсли;
			КонецЕсли;
			
			КорректировкаСтоимости = СтрокаТаблицы.СуммаНУ - Реквизиты.ПервоначальнаяСтоимостьНУ;
			Если КорректировкаСтоимости = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;

			Проводка.Содержание = "Принят к учету объект ОС";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
			КонецЕсли;

			Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
			КонецЕсли;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = КорректировкаСтоимости;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = 0;
					Проводка.СуммаВРДт = -КорректировкаСтоимости;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = КорректировкаСтоимости;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = 0;
					Проводка.СуммаВРКт = -КорректировкаСтоимости;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"          // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"          // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР";          // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "ОбъектСтроительства,"          // <СправочникСсылка.ОбъектыСтроительства> - объект строительства с которого
	                                  // списывается стоимость ОС
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "СпособПоступления,"            // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "ПервоначальнаяСтоимостьНУ,"    // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "ПодразделениеДт,"              // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"              // <Ссылка на справочник подразделений>
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету ОС
	+ "СчетУчетаВнеоборотногоАктива"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ПО РЕЗУЛЬТАТАМ ИНВЕНТАРИЗАЦИИ

Процедура СформироватьДвиженияПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Принят к учету объект ОС";

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяДоходов);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"          // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР";          // <Число, 15, 2> - ПР в стоимости ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"       // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"       // <Ссылка на справочник подразделений>
	+ "Регистратор,"         // <ДокументСсылка.*>
	+ "СтатьяДоходов,"       // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья, по которой будет отражена выручка по
	                         // оприходванию объекта ОС
	+ "СчетУчета";           // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПИСАНИЕ ОС НА РАСХОДЫ (НУ) ПРИ ПРИНЯТИИ К УЧЕТУ

Функция ПодготовитьТаблицуСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ОтражатьВНалоговомУчете
		ИЛИ Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов 
			<> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	Иначе
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияОС;
	КонецЕсли;
	
	УказанСпособОтраженияРасходовПриВключенииВСтоимость = ЗначениеЗаполнено(Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость);
	
	ТаблицаДляСписания.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	ТаблицаДляСписания.Колонки.СуммаНУ.Имя = "СуммаАмортизацииНУ";
	
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение");
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Если УказанСпособОтраженияРасходовПриВключенииВСтоимость Тогда
		ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость, "НаправлениеАмортизации");
	Иначе
		ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	КонецЕсли;
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СчетУчета, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");

	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаДляСписания, Параметры.Реквизиты, Отказ);
	
	Если Не УказанСпособОтраженияРасходовПриВключенииВСтоимость Тогда
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПредопределенныйЭлемент("НеамортизируемоеИмущество");
	КонецЕсли;
		
	Для каждого СтрокаОС Из ТаблицаЗатратПоАмортизации Цикл
		СтрокаОС.СуммаВР = СтрокаОС.СуммаВР - СтрокаОС.СуммаНУ;
		
		Если УказанСпособОтраженияРасходовПриВключенииВСтоимость Тогда
			Продолжить;
		КонецЕсли;
		
		Для Сч = 1 По 3 Цикл
			Если ТипЗнч(СтрокаОС["Субконто" + Сч]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				СтрокаОС["Субконто" + Сч] = СтатьяЗатрат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - сумма, относимая на расходы (НУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "Подразделение,"                            // <Ссылка на справочник подразделений>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
		// порядок включения стоимости ОС в состав расходов (НУ)
	+ "ПорядокПогашенияСтоимостиБУ,"              // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС> - порядок погашения
		// стоимости ОС
	+ "СпособыОтраженияРасходовПоАмортизации,"    // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
		// отрадения расходов по списанию ОС (НУ)
	+ "СпособОтраженияРасходовПриВключенииВСтоимость," // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
		// отрадения расходов по списанию ОС (НУ)
	+ "Регистратор,"                              // <ДокументСсылка.*>
	+ "СчетУчета,"                                // <ПланСчетовСсылка.Хозрасчетный> - счет на котором формируется
		// стоимость ОС
	+ "Содержание,"                              // <Строка, 150>
	+ "ИмяСписка";                               // <Строка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОВЕРКИ ДАННЫХ ОС НА КОРРЕКТНОСТЬ

Процедура ПроверитьСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в бухгалтерском учете по организации <%3>'");

		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор КАК Регистратор,
	|	СостоянияОСОрганизаций.Состояние КАК Состояние,
	|	СостоянияОСОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|			И (СостоянияОСОрганизаций.Период < &Дата)
	|			И (СостоянияОСОрганизаций.Организация = &Организация)
	|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОС.Регистратор КАК Регистратор,
	|	СостоянияОС.Организация КАК Организация,
	|	СостоянияОС.Состояние КАК Состояние
	|ПОМЕСТИТЬ ПоследниеСостоянияОС
	|ИЗ
	|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ПоследниеСостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	ПоследниеСостоянияОС.Регистратор КАК Регистратор,
	|	ПоследниеСостоянияОС.Организация КАК Организация,
	|	ПоследниеСостоянияОС.Состояние КАК Состояние
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСостоянияОС КАК ПоследниеСостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = ПоследниеСостоянияОС.ОсновноеСредство
	|ГДЕ
	|	(ПоследниеСостоянияОС.Состояние ЕСТЬ NULL
	|			ИЛИ ПоследниеСостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Null Тогда
				ШаблонСообщения = НСтр("ru = 'По состоянию на %4.
					|Основное средство <%1 (%2)> не принято к учету в организации <%3>.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> снято с учета в организации <%3>
					|документом <%4>. Дата состояния: %5'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <ДокументСсылка.*>
	+ "Регистратор"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("МОЛ", Реквизиты.МОЛ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Подразделение
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ МестонахождениеОСБУ.Подразделение <> &Подразделение
	|			ИЛИ &МОЛ <> НЕОПРЕДЕЛЕНО
	|				И МестонахождениеОСБУ.МОЛ <> &МОЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в учете в местонахождении <%3>'");
		ШаблонСообщенияМОЛ = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в учете за МОЛ <%3>'");

		Пока Выборка.Следующий() Цикл
			Если Выборка.Подразделение <> Реквизиты.Подразделение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Подразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;

			Если Реквизиты.МОЛ <> Неопределено И Выборка.МОЛ <> Реквизиты.МОЛ Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияМОЛ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.МОЛ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "МОЛ,"           // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений> - подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаУчетаОС
	|	ПО
	|		ТаблицаОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|ГДЕ
	|	(СчетаУчетаОС.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ СчетаУчетаОС.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> не указан счет учета.'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Выборка.ОсновноеСредство, Выборка.КодОС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьВозможностьПередачиОСВАренду(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозможностьПередачиОСВАренду(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.Контрагент
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ МестонахождениеОСБУ.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru = 'Основное средство <%1 (%2)> уже передано в аренду контрагенту <%3>'");

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
				Выборка.ОсновноеСредство, Выборка.КодОС, Выборка.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьПередачиОСВАренду(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьВозможностьВозвратаОСОтАрендатора(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозможностьВозвратаОСОтАрендатора(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.Контрагент
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ МестонахождениеОСБУ.Контрагент <> &Контрагент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru = 'Основное средство <%1 (%2)> не находится в аренде у контрагента <%3>'");

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
				Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьВозвратаОСОтАрендатора(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Контрагент,"  // <СправочникСсылка.Контрагенты>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОБЫТИЙ ОС

Процедура СформироватьДвиженияРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.Событие           = Реквизиты.СобытиеОС;
		Движение.НазваниеДокумента = НазваниеДокумента;
		Движение.НомерДокумента    = Реквизиты.Номер;
		Движение.СуммаЗатратБУ     = СтрокаТаблицы.СуммаЗатратБУ;
		Движение.СуммаЗатратНУ     = СтрокаТаблицы.СуммаЗатратНУ;
		Движение.СуммаЗатратУСН    = СтрокаТаблицы.СуммаЗатратУСН;
	КонецЦикла;

	Движения.СобытияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаЗатратБУ,"    // <Число, 15, 2> - сумма затрат по бухгалтерскому учету при модернизации ОС
	+ "СуммаЗатратНУ,"    // <Число, 15, 2> - сумма затрат по налоговому учету при модернизации ОС
	+ "СуммаЗатратУСН";   // <Число, 15, 2> - сумма затрат по налоговому учету (УСН) при модернизации ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             // <Дата>
	+ "Номер,"              // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        // <СправочникСсылка.Организации>
	+ "СобытиеОС,"          // <СправочникСсылка.СобытияОС> - событие с ОС
	+ "Регистратор";        // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОСТОЯНИЯ ОС

Процедура ПроверитьВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Регистратор <> &Документ
	|	И СостоянияОСОрганизаций.Состояние = &Состояние
	|	И СостоянияОСОрганизаций.Активность = ИСТИНА
	|	И СостоянияОСОрганизаций.Период <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация );
	Запрос.УстановитьПараметр("Состояние", Реквизиты.СостояниеОС);
	Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);

	Если ТранзакцияАктивна() Тогда

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияОСОрганизаций");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.ИсточникДанных = Параметры.ТаблицаОС;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОсновноеСредство", "ОсновноеСредство");
		Блокировка.Заблокировать();

	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
				Выборка.КодОС, Реквизиты.Организация, Реквизиты.СостояниеОС, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

		Возврат;
	КонецЕсли;

	Если Реквизиты.СостояниеОС = Перечисления.СостоянияОС.ПринятоКУчету Тогда
		Запрос.УстановитьПараметр("Дата", Реквизиты.Период);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	СостоянияОСОрганизаций.Регистратор КАК Регистратор,
		|	СостоянияОСОрганизаций.Состояние КАК Состояние,
		|	СостоянияОСОрганизаций.Организация КАК Организация
		|ПОМЕСТИТЬ СостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
		|			И (СостоянияОСОрганизаций.Период < &Дата)
		|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
		|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
		|ИЗ
		|	СостоянияОС КАК СостоянияОС
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияОС.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОС.ОсновноеСредство.Код КАК КодОС,
		|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
		|	СостоянияОС.НомерСтроки КАК НомерСтроки,
		|	СостоянияОС.Регистратор КАК Регистратор,
		|	СостоянияОС.Организация КАК Организация
		|ИЗ
		|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
		|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
		|ГДЕ
		|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();

			ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> принято к учету в организации <%3>
				|документом <%4>. Дата состояния: %5'");

			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Выборка.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЦикла;

			Возврат;
		КонецЕсли;
	ИначеЕсли Реквизиты.СостояниеОС = Перечисления.СостоянияОС.СнятоСУчета Тогда
		ПроверитьСостояниеОСПринятоКУчету(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "СостояниеОС," // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ДатаСостояния    = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Состояние        = Реквизиты.СостояниеОС;
	КонецЦикла;

	Движения.СостоянияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "СостояниеОС";      // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРВОНАЧАЛЬНЫЕ СВЕДЕНИЯ ОС

Функция ПодготовитьТаблицуОборудование(ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОборудование(ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОтражатьВНалоговомУчете
		И Реквизиты.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга 
		И Реквизиты.ПервоначальнаяСтоимостьНУ <> 0 Тогда
		
		ТаблицаОборудование = Параметры.ТаблицаСписанныеТовары.СкопироватьКолонки();
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаСписанныеТовары Цикл
			
			СуммаСписанияНУ = Реквизиты.ПервоначальнаяСтоимостьНУ;
			КорректировкаСуммыСписанияНУ = СтрокаТаблицы.СуммаСписанияНУ - Реквизиты.ПервоначальнаяСтоимостьНУ;
			СуммаСписанияВР = СтрокаТаблицы.СуммаСписанияВР + КорректировкаСуммыСписанияНУ;
			
			НоваяСтрока = ТаблицаОборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,
				"СуммаСписанияНУ,СуммаСписанияВР,СуммаКорСписанияНУ,СуммаКорСписанияВР");
			НоваяСтрока.СуммаСписанияНУ = СуммаСписанияНУ;
			НоваяСтрока.СуммаСписанияВР = СуммаСписанияВР;
			НоваяСтрока.СуммаКорСписанияНУ = СуммаСписанияНУ;
			НоваяСтрока.СуммаКорСписанияВР = СуммаСписанияВР;
			НоваяСтрока.Себестоимость = СтрокаТаблицы.СуммаСписания;

			Если КорректировкаСуммыСписанияНУ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,
				"Количество,КорСчетСписания,СуммаСписания,
				|СуммаСписанияНУ,СуммаСписанияПР,СуммаСписанияВР,
				|СуммаКорСписанияНУ,СуммаКорСписанияПР,СуммаКорСписанияВР");
			НоваяСтрока.КорСчетСписания = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
			НоваяСтрока.СуммаСписанияНУ = КорректировкаСуммыСписанияНУ;
			НоваяСтрока.СуммаСписанияВР = -КорректировкаСуммыСписанияНУ;
			НоваяСтрока.СуммаКорСписанияНУ = КорректировкаСуммыСписанияНУ;
			НоваяСтрока.СуммаКорСписанияВР = -КорректировкаСуммыСписанияНУ;
			НоваяСтрока.Себестоимость = СтрокаТаблицы.СуммаСписания;
			
		КонецЦикла;
		
		Возврат ТаблицаОборудование;
		
	Иначе
		
		Возврат Параметры.ТаблицаСписанныеТовары;
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьПараметрыОборудование(ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчета,"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия,"           // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписания,"  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконто1,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто2,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконто3,"  // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконто1,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто2,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконто3,"     // - значение субконто счета, на который списывается номенклатура
	+ "КорПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "Подразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияНУ,"// <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаКорСписанияПР,"// <Число,15,2> - сумма постоянных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаКорСписанияВР";// <Число,15,2> - сумма временных разниц (ПБУ 18/02) в стоимости списываемой номенклатуры, определенной по данным остатков
	
	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"               // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Контрагент,"                // <СправочникСсылка.Контрагенты>
	+ "СпособПоступления,"         // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "ПервоначальнаяСтоимостьНУ," // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "Содержание";                // <Строка,150>
	

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ПервоначальныеСведенияОС = Новый ТаблицаЗначений;
	ПервоначальныеСведенияОС.Колонки.Добавить("НомерСтроки");
	ПервоначальныеСведенияОС.Колонки.Добавить("ОсновноеСредство");
	ПервоначальныеСведенияОС.Колонки.Добавить("ИнвентарныйНомер",
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаУСН", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Если Реквизиты.ИспользоватьСуммыСписания Тогда
		Для каждого СтрокаСписания Из Параметры.ТаблицаСписанныеТовары Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = СтрокаСписания.СуммаСписания;
			СтрокаПервоначальнойСтоимости.СуммаПР = СтрокаСписания.СуммаСписанияПР;
			
			Если Реквизиты.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
				СтрокаПервоначальнойСтоимости.СуммаНУ = Реквизиты.СуммаНУ;
				СтрокаПервоначальнойСтоимости.СуммаВР = СтрокаСписания.СуммаСписанияВР + СтрокаСписания.СуммаСписанияНУ - Реквизиты.СуммаНУ;
			Иначе
				СтрокаПервоначальнойСтоимости.СуммаНУ = СтрокаСписания.СуммаСписанияНУ;
				СтрокаПервоначальнойСтоимости.СуммаВР = СтрокаСписания.СуммаСписанияВР;
			КонецЕсли;
			СтрокаПервоначальнойСтоимости.СуммаУСН = Реквизиты.СуммаУСН;//для УСН первоначальная стоимость всегда задается в документе

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, ТаблицаОС[СтрокаСписания.НомерСтроки - 1]);
		КонецЦикла;
	Иначе
		Для каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = Реквизиты.СуммаБУ;
			СтрокаПервоначальнойСтоимости.СуммаНУ  = Реквизиты.СуммаНУ;
			СтрокаПервоначальнойСтоимости.СуммаПР  = Реквизиты.СуммаПР;
			СтрокаПервоначальнойСтоимости.СуммаВР  = Реквизиты.СуммаВР;
			СтрокаПервоначальнойСтоимости.СуммаУСН = Реквизиты.СуммаУСН;

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, СтрокаОС);
		КонецЦикла;
	КонецЕсли;

	Возврат ПервоначальныеСведенияОС;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0> - номер строки табличной части документа
	+ "СуммаСписания,"    // <Число, 15, 2> - стоимость списанной партии по данным бухгалтерского учета
	+ "СуммаСписанияНУ,"  // <Число, 15, 2> - стоимость списанной партии по данным налогового учета
	+ "СуммаСписанияПР,"  // <Число, 15, 2> - постоянные разницы в стоимости списанной партии (ПБУ 18/02)
	+ "СуммаСписанияВР";  // <Число, 15, 2> - временные разницы в стоимости списанной партии (ПБУ 18/02)

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ИспользоватьСуммыСписания,"    // <Булево> - использовать стоимость списанных партий для определения стоимости ОС
	+ "СпособПоступления,"            // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "СуммаБУ,"                      // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"                      // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"                      // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР,"                      // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаУСН";                     // <Число, 15, 2> - стоимость ОС по данным УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОС Цикл
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период                      = Реквизиты.Период;
		Движение.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                 = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимость     = СтрокаТаблицы.СуммаБУ;
		Движение.ПорядокПогашенияСтоимости   = Реквизиты.ПорядокПогашенияСтоимости;
		Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизации;
		Движение.СпособПоступления           = Реквизиты.СпособПоступления;
		Движение.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;
		Движение.ПараметрВыработки           = Реквизиты.ПараметрВыработки;
		Движение.Контрагент                  = Реквизиты.Контрагент;
		Движение.ДоговорКонтрагента          = Реквизиты.ДоговорКонтрагента;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "ПараметрВыработки,"           // <СправочникСсылка.ПараметрыВыработкиОС> - парамтр для определения выработки ОС
		// за месяц
	+ "ПорядокПогашенияСтоимости,"   // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС> - порядок погашения стоимости ОС
		// по бухгалтерскому учету
	+ "СпособНачисленияАмортизации," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС> - способ начисления
		// амортизации ОС по бухгалтерскому учету
	+ "СпособПоступления,"           // <ПеречислениеСсылка.СпособыПоступленияАктивов> - способ поступления ОС
	+ "Контрагент,"                  // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента"           // <СправочникСсылка.ДоговорыКонтрагентов>
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете Тогда
		Если Реквизиты.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
			Параметры.ТаблицаПервоначальныеСведенияОС.ЗаполнитьЗначения(Реквизиты.ПервоначальнаяСтоимостьНУ, "СуммаНУ");
		КонецЕсли;
	Иначе
		Параметры.ТаблицаПервоначальныеСведенияОС.Очистить();
	КонецЕсли;

	Возврат Параметры.ТаблицаПервоначальныеСведенияОС;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ,"          // <Число, 0, 0> - стоимость ОС по данным налогового учета
	+ "СуммаПР";          // <Число, 0, 0> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СпособПоступления,"         // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "ПервоначальнаяСтоимостьНУ"; // <Число, 15, 2> - стоимость ОС по данным налогового учета

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПервоначальныеСведенияОСНУ) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов = 
	     Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		Если ЗначениеЗаполнено(Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость) Тогда
			СпособОтраженияРасходовПриВключенииВСтоимость = Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость;
			СпособОтраженияРасходовАналогичноАмортизации = Ложь;
		Иначе
			СпособОтраженияРасходовПриВключенииВСтоимость = Реквизиты.СпособыОтраженияРасходовПоАмортизации;
			СпособОтраженияРасходовАналогичноАмортизации = Истина;
		КонецЕсли;
	Иначе
		СпособОтраженияРасходовПриВключенииВСтоимость = Неопределено;
		СпособОтраженияРасходовАналогичноАмортизации = Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОСНУ Цикл
		Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
		Движение.Период                                        = Реквизиты.Период;
		Движение.ОсновноеСредство                              = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                                   = Реквизиты.Организация;
		Движение.ПорядокВключенияСтоимостиВСоставРасходов      = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов;
		Движение.ПервоначальнаяСтоимостьНУ                     = СтрокаТаблицы.СуммаНУ;
		Движение.СпособОтраженияРасходовПриВключенииВСтоимость = СпособОтраженияРасходовПриВключенииВСтоимость;
		Движение.СпособОтраженияРасходовАналогичноАмортизации  = СпособОтраженияРасходовАналогичноАмортизации;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСНУ

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСНУ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОСНУ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                        // <Дата>
	+ "Организация,"                                   // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходов,"      // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
	                                                   // порядок включения стоимости ОС в состав расходов по налоговому учету
	+ "СрокПолезногоИспользования,"                    // <Число, 4, 0> - срок полезного использования ОС для целей начисления
	                                                   // амортизации по налоговому учету
	+ "СпособыОтраженияРасходовПоАмортизации,"         // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
	                                                   // отражения расходов по списанию ОС (НУ)
	+ "СпособОтраженияРасходовПриВключенииВСтоимость"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
	                                                   // отражения расходов по списанию ОС (НУ)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	
	Если Не ОтражатьВНалоговомУчетеУСН Тогда
		Параметры.ТаблицаПервоначальныеСведенияОСУСН.Очистить();
	КонецЕсли;

	Возврат Параметры.ТаблицаПервоначальныеСведенияОСУСН;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаУСН";         // <Число, 0, 0> - стоимость ОС по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПервоначальныеСведенияОСУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОСУСН Цикл
		Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Добавить();
		Движение.Период                     = Реквизиты.Период;
		Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимостьУСН = СтрокаТаблицы.СуммаУСН;
		Движение.СрокПолезногоИспользования = Реквизиты.СрокПолезногоИспользованияУСН;
		Движение.ДатаПриобретения           = Реквизиты.ДатаПриобретения;
		Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовУСН;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаУСН";         // <Число, 0, 0> - стоимость ОС по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОСУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

//РЕГИСТРАЦИЯ ОПЛАТЫ ОС УСН

Процедура СформироватьДвиженияРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаРегистрацияОплатыОсновныхСредствДляУСН Цикл
		Движение  = Движения.ОплатыОСДляУСН.Добавить();
		Движение.Период           = СтрокаТаблицы.ДатаОплаты;
		Движение.Организация      = Реквизиты.Организация;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.ДатаОплаты       = СтрокаТаблицы.ДатаОплаты;
		Движение.СуммаОплаты      = СтрокаТаблицы.СуммаОплаты;
	КонецЦикла;
	
	Движения.ОплатыОСДляУСН.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРегистрацииОплатыОсновныхСредствДляУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "ДатаОплаты,"		  // <Дата> - дата оплаты ОС по данным УСН
	+ "СуммаОплаты";      //<Число, 0, 0> - сумма оплаты ОС по данным УСН

	Параметры.Вставить("ТаблицаРегистрацияОплатыОсновныхСредствДляУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОплатыОсновныхСредствДляУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация";                                 // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МЕСТОНАХОЖДЕНИЕ ОС

Процедура СформироватьДвиженияИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Местонахождение  = Реквизиты.Местонахождение;
		Движение.МОЛ              = Реквизиты.МОЛ;
		Движение.Контрагент       = Реквизиты.Контрагент;
	КонецЦикла;

	Движения.МестонахождениеОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "Местонахождение," // <Ссылка на справочник подразделений>
	+ "МОЛ,"             // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Контрагент";      // <СправочникСсылка.Контрагенты>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (БУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата>
	+ "НачислятьАмортизацию," // <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "Организация";          // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (НУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "НачислятьАмортизацию,"      // <Булево> - признак необходимости начисления амортизации по налоговому учету
	+ "Организация";               // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТРАЖЕНИЕ ОС В УЧЕТЕ

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		Движение.Период                    = Реквизиты.Период;
		Движение.ОсновноеСредство          = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация               = Реквизиты.Организация;
		Движение.СчетУчета                 = Реквизиты.СчетУчета;
		Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;
	КонецЦикла;

	Движения.СчетаБухгалтерскогоУчетаОС.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета";                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                = Реквизиты.Период;
		Движение.ОсновноеСредство                      = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                           = Реквизиты.Организация;
		Движение.СпособыОтраженияРасходовПоАмортизации = Реквизиты.СпособыОтраженияРасходовПоАмортизации;
	КонецЦикла;

	Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "СпособыОтраженияРасходовПоАмортизации"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способы
		// отражения расходов по амортизации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (БУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("КоэффициентАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ГодоваяНормаАмортизации, "КоэффициентАмортизации");
	ТаблицаПараметров.Колонки.Добавить("КоэффициентУскорения");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.КоэффициентУскорения, "КоэффициентУскорения");
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРабот");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРабот");
	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");
	ТаблицаПараметров.Колонки.Добавить("СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.СуммаБУ.Имя = "СтоимостьДляВычисленияАмортизации";

	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГодоваяНормаАмортизации,"      // <Число, 4, 2> - годовая норма амортизации для способов начисления амортизации
		// "по ЕНАОФ" и "по ЕНАОФ на 1000 км пробега"
	+ "Период,"                       // <Дата>
	+ "КоэффициентУскорения,"         // <Число, 5, 2> - коэффицент ускорения для способа начисления амортизации
		// "уменьшаемого остатка"
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПредполагаемыйОбъемПродукции," // <Число, 10, 0> - предопологаемый объем продукции для начисления амортизации
		// способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "СрокПолезногоИспользования";   // <Число, 4, 0> - срок полезного использования для начисления амортизации способами
		// "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется  справочно и для других
		// способов

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                      = Реквизиты.Период;
		Движение.ОсновноеСредство                            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                                 = Реквизиты.Организация;
		Движение.КоэффициентАмортизации                      = СтрокаТаблицы.КоэффициентАмортизации;
		Движение.КоэффициентУскорения                        = СтрокаТаблицы.КоэффициентУскорения;
		Движение.ОбъемПродукцииРабот                         = СтрокаТаблицы.ОбъемПродукцииРабот;
		Движение.СрокПолезногоИспользования                  = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТаблицы.СрокИспользованияДляВычисленияАмортизации;
		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТаблицы.СтоимостьДляВычисленияАмортизации;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТаблицы.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                            // <СправочникСсылка.ОсновныеСредства>
	+ "КоэффициентАмортизации,"                      // <Число, 4, 2> - годовая норма амортизации для способов начисления
		// амортизации "по ЕНАОФ" и "по ЕНАОФ на 1000 км пробега"
	+ "КоэффициентУскорения,"                        // <Число, 5, 2> - коэффицент ускорения для способа начисления
		// амортизации "уменьшаемого остатка"
	+ "ОбъемПродукцииРабот,"                         // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации," // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "СрокИспользованияДляВычисленияАмортизации,"   // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СрокПолезногоИспользования,"                  // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СтоимостьДляВычисленияАмортизации";           // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация";                  // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не ЗначениеЗаполнено(Реквизиты.ГрафикАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.ГрафикАмортизации = Реквизиты.ГрафикАмортизации;
	КонецЦикла;

	Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГрафикАмортизации," // <СправочникСсылка.ГодовыеГрафикиАмортизацииОС> - график распределения амортизации по году.
	+ "Период,"            // <Дата>
	+ "Организация";       // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (НУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСНУ(
		ТаблицаПервоначальныеСведенияОС,
		ТаблицаВключенияСтоимостиВРасходы, 
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");
	ТаблицаПараметров.Колонки.СуммаПР.Имя = "ПРДляВычисленияАмортизации";

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат ТаблицаПараметров.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");

	ТаблицаПР = Параметры.ТаблицаВключенияСтоимостиВРасходы;
	ТаблицаПР.Свернуть("ОбъектУчета", "СуммаПР");

	Для каждого СтрокаОС Из ТаблицаПараметров Цикл
		СтрокаТаблицыПР = ТаблицаПР.Найти(СтрокаОС.ОсновноеСредство, "ОбъектУчета");
		Если СтрокаТаблицыПР <> Неопределено Тогда
			СтрокаОС.ПРДляВычисленияАмортизации = СтрокаОС.ПРДляВычисленияАмортизации - СтрокаТаблицыПР.СуммаПР;
		КонецЕсли
	КонецЦикла;
	
	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаПР";          // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаВключенияСтоимостиВРасходы

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаПР";     // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаВключенияСтоимостиВРасходы",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВключенияСтоимостиВРасходы, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата>
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ТипРегистратора = ТипЗнч(Движения.ПараметрыАмортизацииОСНалоговыйУчет.Отбор.Регистратор.Значение);
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) 
	   И Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС") <> ТипРегистратора Тогда		
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период                     = Реквизиты.Период;
		Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                = Реквизиты.Организация;
		Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.ПРДляВычисленияАмортизации = СтрокаТаблицы.ПРДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "ПРДляВычисленияАмортизации," // <Число, 0, 0> -  постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации
		// по налоговому учету

	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
		Движение.Период                 = Реквизиты.Период;
		Движение.ОсновноеСредство       = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация            = Реквизиты.Организация;
		Движение.СпециальныйКоэффициент = СтрокаТаблицы.СпециальныйКоэффициент;
	КонецЦикла;

	Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СпециальныйКоэффициент"; // <Число, 5, 2> - специальный коэффциент для начисления амортизации ОС (НУ)

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТРАЖЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ (проводка на вспомогательный счет)

Функция ПодготовитьТаблицуАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаАмортизационнойПремии = Новый ТаблицаЗначений;
	ТаблицаАмортизационнойПремии.Колонки.Добавить("НомерСтроки");
	ТаблицаАмортизационнойПремии.Колонки.Добавить("ОсновноеСредство");
	ТаблицаАмортизационнойПремии.Колонки.Добавить("Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицаАмортизационнойПремии;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ПроцентАмортизационнойПремии = 0
	 Или Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаАмортизационнойПремии;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаСведений Из Параметры.ТаблицаОС Цикл
		СтрокаПремии = ТаблицаАмортизационнойПремии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПремии, СтрокаСведений);
		СтрокаПремии.Сумма = СтрокаСведений.СуммаНУ * (Реквизиты.ПроцентАмортизационнойПремии / 100);
	КонецЦикла;

	Возврат ТаблицаАмортизационнойПремии;

КонецФункции

Функция ПодготовитьПараметрыАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "Подразделение,"                // <Ссылка на справочник подразделений>
	+ "ПроцентАмортизационнойПремии"; // <Число, 4, 2> - процент от стоимости ОС (НУ) для включения в расходы

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаАмортизационнойПремии) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаАмортизационнойПремии Цикл

		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Амортизационная премия";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",
			СтрокаТаблицы.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии",
			Реквизиты.Регистратор);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаАмортизационнойПремии

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Сумма";            // <Число, 15, 2> - сумма амортизационной премии

	Параметры.Вставить("ТаблицаАмортизационнойПремии",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаАмортизационнойПремии, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ

Функция ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаАмортизации)
	 Или ТаблицаАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы") = 0 Тогда
		// Включение амортизационной премии в состав расходов.
		ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		ОписаниеТипаЧисло     = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);

		ТаблицаНачисленияАмортизационнойПремии = Новый ТаблицаЗначений;
		Колонки = ТаблицаНачисленияАмортизационнойПремии.Колонки;
		Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Колонки.Добавить("ДокументАмортизационнойПремии", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии.ТипЗначения);
		Колонки.Добавить("СчетУчетаЗатратПоАмортизационнойПремии", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Колонки.Добавить("ПодразделениеПоАмортизационнойПремии", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
		Колонки.Добавить("СубконтоПоАмортизационнойПремии1", ОписаниеТиповСубконто);
		Колонки.Добавить("СубконтоПоАмортизационнойПремии2", ОписаниеТиповСубконто);
		Колонки.Добавить("СубконтоПоАмортизационнойПремии3", ОписаниеТиповСубконто);
		Колонки.Добавить("СуммаНУ", ОписаниеТипаЧисло);
		Колонки.Добавить("СуммаПР", ОписаниеТипаЧисло);
		Колонки.Добавить("СуммаВР", ОписаниеТипаЧисло);
		Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());

		Возврат ТаблицаНачисленияАмортизационнойПремии;

	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаОС = Новый ТаблицаЗначений;
	ТаблицаОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для каждого СтрокаТабАмортизации Из Параметры.ТаблицаАмортизации Цикл
		Если СтрокаТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы > 0 Тогда
			СтрокаОС = ТаблицаОС.Добавить();
			СтрокаОС.ОсновноеСредство = СтрокаТабАмортизации.ОбъектУчета;
		КонецЕсли;
	КонецЦикла;

	СубконтоКВ = Новый Массив();
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Новый Граница(НачалоМесяца(Реквизиты.Период), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СубконтоКВ",  СубконтоКВ);
	Запрос.УстановитьПараметр("ТаблицаОС",   ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОсновныеСредства).Код КАК ОсновноеСредствоКод,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеОрганизацииПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК Сумма
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|			&СубконтоКВ,
	|			Организация = &Организация
	|				И Субконто1 В (&ТаблицаОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ОсновноеСредствоКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ТаблицаОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
	|	ХозрасчетныйОстатки.ДокументАмортизационнойПремии КАК ДокументАмортизационнойПремии,
	|	ХозрасчетныйОстатки.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	ХозрасчетныйОстатки.Сумма КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	-ХозрасчетныйОстатки.Сумма КАК СуммаВР,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|	ПО
	|		ХозрасчетныйОстатки.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО
	|		ХозрасчетныйОстатки.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.ОсновноеСредствоКод";
	Если ТранзакцияАктивна() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, КонецМесяца(Реквизиты.Период)));
		ЭлементБлокировки.УстановитьЗначение("Счет",        ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
		ЭлементБлокировки.ИсточникДанных = ТаблицаОС;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,
			"ОсновноеСредство");
		Блокировка.Заблокировать();
		
	КонецЕсли;

	ТаблицаНачисленияАмортизационнойПремии = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаНачисленияАмортизационнойПремии;

КонецФункции

Функция ПодготовитьПараметрыСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаАмортизации

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета,"                                // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаКапитальныхВложенийВключаемыхВРасходы"; // <Число, 15, 2> - сумма амортизационной премии по ОС

	Параметры.Вставить("ТаблицаАмортизации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаАмортизации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаНачисленияАмортизационнойПремии) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Проверим полноту заполнения аналитики затрат
	ПроверитьСчетАналитикуОтнесенияАмортизационнойПремии(
		Параметры.ТаблицаНачисленияАмортизационнойПремии,
		Отказ,
		Реквизиты.Регистратор);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоддержкаПБУ18               = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);
	
	// Запомним предопределенные значения в переменных для повышения производительности.
	
	СчетРасходыНаКапитальныеВложения          = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
	СвойстваСчетаРасходыНаКапитальныеВложения = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасходыНаКапитальныеВложения);
	
	ВидСубконтоОсновныеСредства               = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	ВидСубконтоДокументыАмортизационнойПремии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии;
	ВидСубконтоНематериальныеАктивы           = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
	
	// С целью оптимизации производительности напрямую (а не через функции с повторно используемыми значениями) кешируем
	// свойства счетов. При заполнении субконто исключаем лишние проверки на значения субконто (наличие субконто на счете
	// и т.п. существующие в алгоритме как предусловия).
	СвойстваСчетовКеш = Новый Соответствие;
	СчетКтПредыдущий = ПланыСчетов.Хозрасчетный.ПустаяСсылка(); // хранит значение счета из предыдущей проводки
	СчетКтИспользуемоеСубконто = Неопределено;                  // хранит субконто счета из предыдущей проводки
	
	// Сформируем проводки
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаНачисленияАмортизационнойПремии Цикл

		Если СтрокаТаблицы.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Списываем амортизационную премию со счета КВ.

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание   = "Амортизационная премия";

		Проводка.СчетКт = СчетРасходыНаКапитальныеВложения; // всегда счет КВ
		Проводка.СубконтоКт[ВидСубконтоОсновныеСредства]               = СтрокаТаблицы.ОсновноеСредство;
		Проводка.СубконтоКт[ВидСубконтоДокументыАмортизационнойПремии] = СтрокаТаблицы.ДокументАмортизационнойПремии;

		Если СвойстваСчетаРасходыНаКапитальныеВложения.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;

		// Начисляем амортизационную премию.

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Амортизационная премия";

		// Заполнение Дт.
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаЗатратПоАмортизационнойПремии;
		СвойстваСчетаДт = БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			СвойстваСчетовКеш,
			СтрокаТаблицы.СубконтоПоАмортизационнойПремии1,
			СтрокаТаблицы.СубконтоПоАмортизационнойПремии2,
			СтрокаТаблицы.СубконтоПоАмортизационнойПремии3);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеПоАмортизационнойПремии;
		КонецЕсли;

		// Заполнение Кт.
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		Если Проводка.СчетКт <> СчетКтПредыдущий Тогда   // первое использование счета
			
			// ТаблицаНачисленияАмортизационнойПремии может содержать лишь несколько разных счетов учета ОС.
			// На основании этого запоминаем свойства только предыдущего использованного счета, а не всех ранее использованных.
			// Это быстрее, чем для каждой строки искать в кеше. Предполагаем, что функция ПолучитьСвойстваСчета() будет вызываться
			// редко, т.к. ОС по одному счету идут подряд.
			
			СчетКтПредыдущий = Проводка.СчетКт;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.ВидСубконто1 <> ВидСубконтоОсновныеСредства
			   И СвойстваСчетаКт.ВидСубконто2 <> ВидСубконтоОсновныеСредства
			   И СвойстваСчетаКт.ВидСубконто3 <> ВидСубконтоОсновныеСредства Тогда
				СчетКтИспользуемоеСубконто = Неопределено;
			Иначе
				СчетКтИспользуемоеСубконто = ВидСубконтоОсновныеСредства;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СчетКтИспользуемоеСубконто = ВидСубконтоОсновныеСредства Тогда // не заполняем субконто ОсновныеСредства, если его нет на счете
			Проводка.СубконтоКт.Вставить(СчетКтИспользуемоеСубконто, СтрокаТаблицы.ОсновноеСредство);
		КонецЕсли;
		
        Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРДт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРКт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для возможности отражения дополнительных движений.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНачисленияАмортизационнойПремии

	СписокОбязательныхКолонок = ""
	+ "ДокументАмортизационнойПремии,"          // <ДокументСсылка.*> - документ отражения амортизационной премии
	+ "ОсновноеСредство,"                       // <СправочникСсылка.ОсновныеСредства>
	+ "Подразделение,"                          // <Ссылка на справочник подразделений> - подразделение, в котором
		// учитывается ОС
	+ "ПодразделениеПоАмортизационнойПремии,"   // <Ссылка на справочник подразделений> - подразделение, в котором
		// требуется учесть расходы по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии1,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии2,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии3,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СуммаНУ,"                                // <Число, 15, 2> - сумма амортизационной премии
	+ "СуммаПР,"                                // <Число, 15, 2> - постоянные разницы в оценке суммы амортизационной
		// премии (ПБУ 18/02)
	+ "СуммаВР,"                                // <Число, 15, 2> - временные разницы в оценке суммы амортизационной
		// премии (ПБУ 18/02)
	+ "СчетУчета,"                              // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС
	+ "СчетУчетаЗатратПоАмортизационнойПремии"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета расходов по амортизационной
		// премии

	Параметры.Вставить("ТаблицаНачисленияАмортизационнойПремии",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНачисленияАмортизационнойПремии, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проверяет полноту заполнения счета и аналитики, на которую относится амортизационная премия
//
// Параметры:
//  ТаблицаНачисленияАмортизационнойПремии  
//               - ТаблицаЗначений - сведения о начисленной амортизационной премии, 
//                 структура таблицы описана в УчетОС.ПодготовитьПараметрыНачислениеАмортизационнойПремии()
//  ДокументНачисленияАмортизационнойПремии 
//              - ДокументСсылка, ДокументОбъект - документ, при проведении которого выполняется проверка
//
// Возвращаемые параметры:
//  Отказ       - Булево - устанавливается в Истина, если обнаружена ошибка
// 
Процедура ПроверитьСчетАналитикуОтнесенияАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, Отказ, ДокументНачисленияАмортизационнойПремии)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонтрольЗатрат.СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверяемыеДанные.ДокументАмортизационнойПремии КАК Документ,
	|	ПроверяемыеДанные.ОсновноеСредство КАК ОсновноеСредство,
	|	ПроверяемыеДанные.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчета,
	|	ПроверяемыеДанные.ПодразделениеПоАмортизационнойПремии КАК Подразделение,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии1 КАК Субконто1,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии2 КАК Субконто2,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии3 КАК Субконто3
	|ПОМЕСТИТЬ ПроверяемыеДанные
	|ИЗ
	|	&ТаблицаНачисленияАмортизационнойПремии КАК ПроверяемыеДанные
	|ГДЕ
	|	ПроверяемыеДанные.СуммаНУ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДанные.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(ПроверяемыеДанные.ОсновноеСредство),
	|	ПроверяемыеДанные.Документ,
	|	ПРЕДСТАВЛЕНИЕ(ПроверяемыеДанные.Документ),
	|	ПроверяемыеДанные.СчетУчета,
	|	ПроверяемыеДанные.Подразделение,
	|	ПроверяемыеДанные.Субконто1,
	|	ПроверяемыеДанные.Субконто2,
	|	ПроверяемыеДанные.Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаГдеОбязательныПодразделения.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаПодразделение,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат
	|ИЗ
	|	ПроверяемыеДанные КАК ПроверяемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныПодразделения КАК СчетаГдеОбязательныПодразделения
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныПодразделения.Счет
	|			И (ПроверяемыеДанные.Подразделение = &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныСтатьиЗатрат.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		// Проверяем, что заполнены счет и аналитика затрат
		Если НЕ ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
		
			ТекстОшибки = НСтр("ru = 'В документе %Документ% не заполнен счет учета затрат амортизационной премии для основного средства ""%ОсновноеСредство%"".
        	|Заполните счет в документе'");
		
        	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОсновноеСредство%", Выборка.ОсновноеСредство);
        	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",         Выборка.Документ);
		
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, Выборка.Документ, Отказ, ДокументНачисленияАмортизационнойПремии);
			
		Иначе
		
			НеЗаполненаАналитика = Новый Массив;
			
			// Проверим заполнение аналитики учета затрат
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныСтатьиЗатрат) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныСтатьиЗатрат]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
		
			Если Выборка.ОшибкаПодразделение Тогда
				НеЗаполненаАналитика.Добавить("Подразделение");
			КонецЕсли;
		
			Если НеЗаполненаАналитика.Количество() > 0 Тогда
		
				// Приготовим сообщение об ошибке
			
				ТекстОшибки = НСтр("ru = 'В документе [Документ] не [Заполнены] [Реквизиты] расходов по амортизационной премии для основного средства ""[ОсновноеСредство]"".
        		|Заполните аналитику учета расходов в документе'");
			
				ПараметрыТекста = Новый Структура;
        		ПараметрыТекста.Вставить("ОсновноеСредство", Выборка.ОсновноеСредство);
        		ПараметрыТекста.Вставить("Документ",         Выборка.Документ);
			
				СловаДляСклонения = Новый Структура;
				СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
				КонтрольЗатрат.ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
			
				// [Реквизиты]
				КонтрольЗатрат.ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,  ПараметрыТекста);
				
				БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, Выборка.Документ, Отказ, ДокументНачисленияАмортизационнойПремии);
				
			КонецЕсли;			
			
		КонецЕсли; // Проверка ошибок
		
	КонецЦикла;
	
КонецПроцедуры

// РАСЧЕТ АМОРТИЗАЦИИ ОС

Функция ПодготовитьРасчетАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты, Отказ, РежимСправкиРасчета = Ложь) Экспорт

	ДокументОбъект = Неопределено;

	Параметры = ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииОС();
	СправкаРасчет = УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации");
	СправкаРасчет.Колонки.Удалить("Период");

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	Результат.Вставить("СправкаРасчет", СправкаРасчет);
	
	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если Не ЗначениеЗаполнено(МетодНачисленияАмортизацииНУ) Тогда
		МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	НачалоФинансовогоГода = БухгалтерскийУчет.НачалоОтчетногоГода(Реквизиты.ДатаРасчета, Реквизиты.Организация);
	Если Не ЗначениеЗаполнено(НачалоФинансовогоГода) Тогда
		// Период, за который никаких данных не должно быть
		НачалоФинансовогоГода = НачалоГода(Реквизиты.ДатаРасчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоФинансовогоГода",        НачалоФинансовогоГода);
	Запрос.УстановитьПараметр("НачалоПериодаДата",            НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(Реквизиты.ДатаРасчета), ВидГраницы.Исключая));
	Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.РегламентнаяОперация") Тогда
		Запрос.УстановитьПараметр("КонецПериодаДата",         Реквизиты.ДатаРасчета);
		МоментДокумента = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
		Запрос.УстановитьПараметр("КонецПериода",             Новый Граница(МоментДокумента, ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериодаДата",         КонецМесяца(Реквизиты.ДатаРасчета));
		Запрос.УстановитьПараметр("КонецПериода",             КонецМесяца(Реквизиты.ДатаРасчета));
	КонецЕсли;
	Запрос.УстановитьПараметр("Период",                       Реквизиты.ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(Реквизиты.ДатаРасчета, Реквизиты.Организация));

	// Получим список основных средств для расчета амортизации
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе();
	КонецЕсли;
	Запрос.Выполнить();

	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации();
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ";
	ТаблицаОСНачислениеАмортизации = Запрос.Выполнить().Выгрузить();

	// Получим признак возможности начисления амортизации по НУ только линейным методом
	ТаблицаПризнаков = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(ТаблицаОСНачислениеАмортизации, Отказ);

	Запрос.УстановитьПараметр("ТаблицаПризнаков", ТаблицаПризнаков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПризнаков.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПризнаков.ТолькоЛинейный
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	&ТаблицаПризнаков КАК ТаблицаПризнаков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// Получим дополнительные параметры из регистров сведений
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()
		+ ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры();

	Запрос.Выполнить();

	// Установим параметры запроса-списки счетов
	УстановитьСпискиСчетовУчета(Запрос);

	// Получим таблицу графиков амортизации
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации
	|ИЗ
	|	ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ";
	СписокГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков = ПолучитьТаблицуГрафиковАмортизации(СписокГрафиков);

	// Соберем все параметры в одну таблицу
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(НачислениеАмортизацииБУ.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода.СчетУчета КАК СчетУчетаНачалоПериода,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК СчетУчетаНачалоГода,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНачалоГода,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБУ.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияОСБУ.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБУ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.ПРДляВычисленияАмортизации, 0) КАК ПРДляВычисленияАмортизации,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	СписокОС.ТолькоЛинейный КАК ТолькоЛинейныйМетодНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСНУ.ДатаПринятияКУчету, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(СпециальныйКоэффициентНУ.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	МестонахождениеОСБУ.Подразделение КАК Подразделение,
	|	СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду,
	|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009
	|ПОМЕСТИТЬ СписокОССПараметрами
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБУ КАК ПараметрыАмортизацииОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовБУ КАК СпособыОтраженияРасходовБУ
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОСНачалоПериода КАК СчетаБухгалтерскогоУчетаОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС КАК ВыработкаОС
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОСНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУ КАК ПервоначальныеСведенияОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСНУ КАК ПараметрыАмортизацииОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ
	|		ПО СписокОС.ОсновноеСредство = СпециальныйКоэффициентНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСПринятоКУчету КАК СостоянияОСПринятоКУчету
	|		ПО СписокОС.ОсновноеСредство = СостоянияОСПринятоКУчету.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// Получим амортизацию ранее начисленную документом
	Если ЗначениеЗаполнено(Реквизиты.Регистратор) Тогда
		Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу();
		Запрос.Выполнить();
	Иначе
		ПустаяТаблицаОборотов = Новый ТаблицаЗначений;
		ПустаяТаблицаОборотов.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияОборот", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияНУОборот", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

		Запрос.УстановитьПараметр("ПустаяТаблицаОборотов", ПустаяТаблицаОборотов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПустаяТаблицаОборотов.ОсновноеСредство КАК ОсновноеСредство,
		|	ПустаяТаблицаОборотов.АмортизацияОборот КАК АмортизацияОборот,
		|	ПустаяТаблицаОборотов.АмортизацияНУОборот КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСДокумента
		|ИЗ
		|	&ПустаяТаблицаОборотов КАК ПустаяТаблицаОборотов";
		Запрос.Выполнить();
	КонецЕсли;

	Если ТранзакцияАктивна() Тогда

		// Блокировка регистра бухгалтерии.
		ТаблицаСчетовНачисленияАмортизации = Новый ТаблицаЗначений;
		ТаблицаСчетовНачисленияАмортизации.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		
        ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаСчетовНачисленияАмортизации, Запрос.Параметры.СчетаНачисленияАмортизацииБУ, "Счет");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаСчетовНачисленияАмортизации, Запрос.Параметры.СчетаНачисленияАмортизацииБУНачалоГода, "Счет");
		СтрокаСчета = ТаблицаСчетовНачисленияАмортизации.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
		
		ТаблицаСчетовНачисленияАмортизации.Свернуть("Счет");

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, КонецМесяца(Реквизиты.ДатаРасчета)));
		ЭлементБлокировки.ИсточникДанных = ТаблицаСчетовНачисленияАмортизации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		Блокировка.Заблокировать();
		
	КонецЕсли;

	// Получим суммы из регистра бухгалтерии
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок(РежимСправкиРасчета);
	Запрос.Выполнить();

	// Сформируем основную таблицу для расчета
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	СписокОС.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокОС.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
	|	СписокОС.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
	|	СписокОС.Количество КАК Количество,
	|	СписокОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	СписокОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	СписокОС.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	СписокОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	СписокОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	СписокОС.КоэффициентУскорения КАК КоэффициентУскорения,
	|	СписокОС.Период КАК Период,
	|	СписокОС.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СписокОС.СчетУчета КАК СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СписокОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СписокОС.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	СписокОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	СписокОС.СпособПоступления КАК СпособПоступления,
	|	СписокОС.Контрагент КАК Контрагент,
	|	СписокОС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СписокОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	СписокОС.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	СписокОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	СписокОС.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	|	СписокОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	СписокОС.ТолькоЛинейныйМетодНУ КАК ТолькоЛинейныйМетодНУ,
	|	СписокОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	СписокОС.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	|	СписокОС.Подразделение КАК Подразделение,
	|	СписокОС.ФактическийСрокПриПереходеКЛинейномуМетоду КАК ФактическийСрокПриПереходеКЛинейномуМетоду,
	|	СписокОС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаПРОстатокДт, 0) КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаПРОстатокКт, 0) КАК АмортизацияПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаНУОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаПРОстатокДт, 0) КАК СтоимостьПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаНУОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаПРОстатокКт, 0) КАК АмортизацияПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(АмортизационнаяПремия.СуммаНУОстатокДт, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(СписокОС.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОСПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокОССПараметрами КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|			И (СтоимостьОСНачалоПериода.Счет = СписокОС.СчетУчетаНачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|			И (СтоимостьОСКонецПериода.Счет = СписокОС.СчетУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|			И (АмортизацияОСНачалоПериода.Счет = СписокОС.СчетНачисленияАмортизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|			И (АмортизацияОСКонецПериода.Счет = СписокОС.СчетНачисленияАмортизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|			И (СтоимостьНаНачалоГода.Счет = СписокОС.СчетУчетаНачалоГода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|			И (АмортизацияНаНачалоГода.Счет = СписокОС.СчетНачисленияАмортизацииНачалоГода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК АмортизационнаяПремия
	|		ПО СписокОС.ОсновноеСредство = АмортизационнаяПремия.ОсновноеСредство
	|			И (АмортизационнаяПремия.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСПриПереходеКЛинейномуМетоду КАК АмортизацияОСПриПереходеКЛинейномуМетоду
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСПриПереходеКЛинейномуМетоду.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		СуммаАмортизацииБУ                         = 0;
		СуммаАмортизацииНУ                         = 0;
		СуммаАмортизацииПР                         = 0;
		СуммаАмортизацииВР                         = 0;
		СуммаАмортизацииПРДоОкругления             = 0;
		СуммаКапитальныхВложенийВключаемыхВРасходы = 0;
		НормаАмортизации                           = 0;
		КоэффициентПериода                         = 0;
		СуммаЧиселЛет                              = 0;
		ЧислоЛетОставшихся                         = 0;
		СтоимостьДляВычисленияАмортизацииНУ        = 0;
		СтоимостьИтоговая                          = 0;
		МетодНачисленияАмортизации                 = Перечисления.МетодыНачисленияАмортизации.ПустаяСсылка();
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указан счет для начисления амортизации'"), 
					Реквизиты.Регистратор, Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Пропустить = Ложь;

		Если ВыборкаПоОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			И ВыборкаПоОС.НачислятьАмортизациюБУ Тогда

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указан способ начисления амортизации'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток = 0 Тогда
				Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
			КонецЕсли;

			Если ВыборкаПоОС.АмортизацияОборот <> 0 Тогда
				Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Стоимость для начисления амортизации равна нулю'"),
						Реквизиты.Регистратор, Отказ, Ложь);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
				И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда

				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Срок использования равен нулю'"), Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда

				Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда

					СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					Иначе
						КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
						СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения = Истина Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Объем продукции для вычисления не определен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе
						СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения = Истина Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент амортизации не определен'"),
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе

						СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;

					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент амортизации не определен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе
						СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / 1000 * ВыборкаПоОС.КоэффициентАмортизации / 100 ;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

					Если Год(ВыборкаПоОС.Период) = Год(Реквизиты.ДатаРасчета) Тогда
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
					Иначе
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
					КонецЕсли;

					СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					Иначе
						КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
						СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
					КонецЕсли;

					КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
						КоэффициентУскорения = 1;
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент ускорения не заполнен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
					КонецЕсли;

					СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

					//Дата последнего изменения параметров
					Если ВыборкаПоОС.Период = NULL Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, 
							НСтр("ru = 'Не определилась дата начала использования (изменения параметров)'"), Реквизиты.Регистратор, Отказ, Ложь);
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе

						ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период, 1));

						ЧислоЛетПользования = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
						ЧислоЛетПользования = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) > 0, 1, 0);
						ЧислоЛетПрошедших   = Цел(УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаНачалаРасчета, Реквизиты.ДатаРасчета) / 12);
						ЧислоЛетОставшихся  = ЧислоЛетПользования - ЧислоЛетПрошедших;

						// Формула суммы чисел от 1 до N
						//		S = (N + 1) * N / 2
						СуммаЧиселЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;

						ПроцентГодовойАмортизации = ЧислоЛетОставшихся / СуммаЧиселЛет;
						СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток;
				СуммаАмортизацииБУ   = Окр(Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать)), 2);

				ВсегоОсталосСписатьПР = ВыборкаПоОС.СтоимостьПРНачальныйОстаток - ВыборкаПоОС.АмортизацияПРНачальныйОстаток;
				РасчетнаяСуммаАмортизацииПР = ВыборкаПоОС.ПРДляВычисленияАмортизации * (СуммаАмортизации / ВыборкаПоОС.СтоимостьДляВычисленияАмортизации);
				Если РасчетнаяСуммаАмортизацииПР >= 0 Тогда
					СуммаАмортизацииПРДоОкругления = Макс(0, Мин(РасчетнаяСуммаАмортизацииПР, ВсегоОсталосСписатьПР));	
				Иначе
					СуммаАмортизацииПРДоОкругления = Мин(0, Макс(РасчетнаяСуммаАмортизацииПР, ВсегоОсталосСписатьПР));	
				КонецЕсли;
				СуммаАмортизацииПР = Окр(СуммаАмортизацииПРДоОкругления, 2);

			КонецЕсли;

		КонецЕсли;

		Пропустить = Ложь;

		Если ОтражатьВНалоговомУчете Тогда

			Если ВыборкаПоОС.ПорядокВключенияСтоимостиВСоставРасходов = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
				И ВыборкаПоОС.НачислятьАмортизациюНУ Тогда

				Если (ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток) = 0 Тогда
					Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
				КонецЕсли;

				Если НЕ (ВыборкаПоОС.АмортизацияНУОборот = 0) Тогда
					Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНУНачальныйОстаток) Тогда
					//Стоимость на начало месяца = 0.
					Пропустить = Истина;
				КонецЕсли;

				Если ВыборкаПоОС.ТолькоЛинейныйМетодНУ Тогда
					МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
				Иначе
					МетодНачисленияАмортизации = МетодНачисленияАмортизацииНУ;
				КонецЕсли;

				Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользованияНУ) Тогда

					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Срок использования равен нулю'"), 
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Продолжить;

				ИначеЕсли МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.АмортизационнаяГруппа) Тогда

					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указана амортизационная группа'"), 
							Реквизиты.Регистратор, Отказ, ВыборкаПоОС.ОсновноеСредство);
					КонецЕсли;
					Продолжить;

				КонецЕсли;

				Если НЕ Пропустить Тогда

					СуммаАмортизации = 0;

					СтоимостьДляВычисленияАмортизацииНУ = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользованияНУ);

					СпециальныйКоэффициент = ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

					Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

						СтоимостьДляВычисленияАмортизацииНУ = СтоимостьДляВычисленияАмортизацииНУ - ВыборкаПоОС.АмортизацияПриПереходеКЛинейномуМетоду;
						
						Если Не ВыборкаПоОС.ТолькоЛинейныйМетодНУ Тогда
							ФактическийСрокПриПереходеКЛинейномуМетоду = Макс(ВыборкаПоОС.ФактическийСрокПриПереходеКЛинейномуМетоду, 0);
							СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ФактическийСрокПриПереходеКЛинейномуМетоду;
						КонецЕсли;

						Если СрокИспользованияДляВычисления <= 0 Тогда 
							//ошибка в первоначальных данных
							СуммаАмортизации = 0;
						Иначе 
							СуммаАмортизации = СтоимостьДляВычисленияАмортизацииНУ / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						КонецЕсли;

					ИначеЕсли МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

						НормаАмортизации = УправлениеВнеоборотнымиАктивами.ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоОС.АмортизационнаяГруппа);

						Если НЕ (НормаАмортизации = Неопределено) Тогда

							СуммаАмортизации = (СтоимостьДляВычисленияАмортизацииНУ - ВыборкаПоОС.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100
							* СпециальныйКоэффициент;

						КонецЕсли;

					КонецЕсли;

					ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;

					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);

					Если СуммаАмортизацииНУ > 0 Тогда
						СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;
			
			Если (СуммаАмортизацииВР = 0.01 ИЛИ СуммаАмортизацииВР = -0.01) 
				И СуммаАмортизацииПРДоОкругления - СуммаАмортизацииПР > 0.001 Тогда
				
				СуммаАмортизацииПР = СуммаАмортизацииБУ - СуммаАмортизацииНУ;
				СуммаАмортизацииВР = 0;
			КонецЕсли;

		КонецЕсли;

		Если СуммаАмортизацииБУ > 0
			ИЛИ СуммаАмортизацииНУ > 0
			ИЛИ СуммаАмортизацииПР <> 0
			ИЛИ СуммаАмортизацииВР <> 0 Тогда

			СтрокаАмортизации = Результат.ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.ОбъектУчета               = ВыборкаПоОС.ОсновноеСредство;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоОС.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоОС.СчетНачисленияАмортизации;
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.СуммаАмортизацииБУ        = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			Если ПоддержкаПБУ18 Тогда
				СтрокаАмортизации.СуммаАмортизацииПР        = СуммаАмортизацииПР;
				СтрокаАмортизации.СуммаАмортизацииВР        = СуммаАмортизацииВР;
			КонецЕсли;
			СтрокаАмортизации.Подразделение      = ВыборкаПоОС.Подразделение;
			СтрокаАмортизации.СпособПоступления  = ВыборкаПоОС.СпособПоступления;
			СтрокаАмортизации.Контрагент         = ВыборкаПоОС.Контрагент;
			СтрокаАмортизации.ДоговорКонтрагента = ВыборкаПоОС.ДоговорКонтрагента;
			
			СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = СуммаКапитальныхВложенийВключаемыхВРасходы;
			
			//Данные для справки-расчета
			СтрокаСправкаРасчет = Результат.СправкаРасчет.Добавить();
			
			ОстаточнаяСтоимостьБУ = ВыборкаПоОС.СтоимостьНачальныйОстаток   - ВыборкаПоОС.АмортизацияНачальныйОстаток;
			ОстаточнаяСтоимостьНУ = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;
			
			ФактическийСрокИспользованияБУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоОС.ДатаВводаВЭксплуатацию, Реквизиты.ДатаРасчета) - 1;
			ФактическийСрокИспользованияНУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоОС.ДатаВводаВЭксплуатацию, Реквизиты.ДатаРасчета) - 1;
				
			ОстатокСрокаПолезногоИспользованияБУ = Макс(ВыборкаПоОС.СрокПолезногоИспользования   - ФактическийСрокИспользованияБУ, 0);
			ОстатокСрокаПолезногоИспользованияНУ = Макс(ВыборкаПоОС.СрокПолезногоИспользованияНУ - ФактическийСрокИспользованияНУ, 0);
			
			Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
				СтоимостьДляВычисленияАмортизацииБУ = СтоимостьИтоговая;
			Иначе
				СтоимостьДляВычисленияАмортизацииБУ = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
			
			КоэффициентАмортизацииНУ = ?(ЗначениеЗаполнено(ВыборкаПоОС.СпециальныйКоэффициент), ВыборкаПоОС.СпециальныйКоэффициент, 1);
			
			СтрокаСправкаРасчет.ПериодРасчета                         = КонецМесяца(Реквизиты.ДатаРасчета);
			СтрокаСправкаРасчет.Объект                                = ВыборкаПоОС.ОсновноеСредство;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииБУ         = ВыборкаПоОС.СпособНачисленияАмортизации;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииНУ         = МетодНачисленияАмортизации;
			СтрокаСправкаРасчет.АмортизационнаяГруппа                 = ВыборкаПоОС.АмортизационнаяГруппа;
			СтрокаСправкаРасчет.ИнвентарныйНомер                      = ВыборкаПоОС.ИнвентарныйНомер;
			СтрокаСправкаРасчет.ДатаВводаВЭксплуатацию                = ВыборкаПоОС.ДатаВводаВЭксплуатацию;
			СтрокаСправкаРасчет.НачислятьАмортизациюБУ                = ВыборкаПоОС.НачислятьАмортизациюБУ;
			СтрокаСправкаРасчет.НачислятьАмортизациюНУ                = ВыборкаПоОС.НачислятьАмортизациюНУ;
			СтрокаСправкаРасчет.НормаАмортизации                      = НормаАмортизации;
			СтрокаСправкаРасчет.СтоимостьБУ                           = ВыборкаПоОС.СтоимостьНачальныйОстаток;
			СтрокаСправкаРасчет.СтоимостьНУ                           = ВыборкаПоОС.СтоимостьНУНачальныйОстаток;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьБУ                 = ОстаточнаяСтоимостьБУ;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьНУ                 = ОстаточнаяСтоимостьНУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииБУ             = СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииНУ             = СтоимостьДляВычисленияАмортизацииНУ;
			СтрокаСправкаРасчет.СуммаАмортизацииБУ                    = СуммаАмортизацииБУ;
			СтрокаСправкаРасчет.СуммаАмортизацииНУ                    = СуммаАмортизацииНУ;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияБУ          = ВыборкаПоОС.СрокПолезногоИспользования;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияНУ          = ВыборкаПоОС.СрокПолезногоИспользованияНУ;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияБУ  = ОстатокСрокаПолезногоИспользованияБУ;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияНУ  = ОстатокСрокаПолезногоИспользованияНУ;
			СтрокаСправкаРасчет.КоэффициентАмортизации                = ВыборкаПоОС.КоэффициентАмортизации;
			СтрокаСправкаРасчет.КоэффициентАмортизацииНУ              = КоэффициентАмортизацииНУ;
			СтрокаСправкаРасчет.СпособыОтраженияРасходовПоАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
			СтрокаСправкаРасчет.КоэффициентПериода                    = КоэффициентПериода;
			СтрокаСправкаРасчет.КоэффициентУскорения                  = ВыборкаПоОС.КоэффициентУскорения;
			СтрокаСправкаРасчет.ОбъемПродукцииРабот                   = ВыборкаПоОС.Количество;
			СтрокаСправкаРасчет.ОбъемПродукцииРаботДляАмортизации     = ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			СтрокаСправкаРасчет.ЧислоЛетОставшихсяДоКонцаСПИ          = ЧислоЛетОставшихся;
			СтрокаСправкаРасчет.СуммаЧиселЛетСПИ                      = СуммаЧиселЛет;
			
			Если ПоддержкаПБУ18 Тогда
				
				СтоимостьВРНачальныйОстаток = ВыборкаПоОС.СтоимостьНачальныйОстаток
					- ВыборкаПоОС.СтоимостьНУНачальныйОстаток
					- ВыборкаПоОС.СтоимостьПРНачальныйОстаток;
				
				ОстаточнаяСтоимостьПР = ВыборкаПоОС.СтоимостьПРНачальныйОстаток - ВыборкаПоОС.АмортизацияПРНачальныйОстаток;
				ОстаточнаяСтоимостьВР = ОстаточнаяСтоимостьБУ - ОстаточнаяСтоимостьНУ - ОстаточнаяСтоимостьПР;
				
				СтрокаСправкаРасчет.СтоимостьПР               = ВыборкаПоОС.СтоимостьПРНачальныйОстаток;
				СтрокаСправкаРасчет.СтоимостьВР               = СтоимостьВРНачальныйОстаток;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьПР     = ОстаточнаяСтоимостьПР;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьВР     = ОстаточнаяСтоимостьВР;
				СтрокаСправкаРасчет.СтоимостьДляАмортизацииПР = ВыборкаПоОС.ПРДляВычисленияАмортизации;
				СтрокаСправкаРасчет.СуммаАмортизацииПР        = СуммаАмортизацииПР;
				СтрокаСправкаРасчет.СуммаАмортизацииВР        = СуммаАмортизацииВР;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "ДатаРасчета,"       // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор,"       // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ДатаСостояния < &Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОС.ДатаСостояния
	|ГДЕ
	|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации()

	ТекстЗапрос =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ
	|ПОМЕСТИТЬ НачислениеАмортизацииБУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииБУ
	|ГДЕ
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию КАК НачислятьАмортизациюНУ
	|ПОМЕСТИТЬ НачислениеАмортизацииНУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|ГДЕ
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапрос;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБУ.ПараметрВыработки КАК ПараметрВыработки,
	|	ПервоначальныеСведенияОСБУ.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияОСБУ.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБУ.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБУ
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияОСНУ.Период КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСНУ
	|ГДЕ
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	|	ВыработкаОСОбороты.КоличествоОборот КАК ОбъемВыработки
	|ПОМЕСТИТЬ ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И (ОсновноеСредство, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						ПервоначальныеСведенияОСБУ.ОсновноеСредство,
	|						ПервоначальныеСведенияОСБУ.ПараметрВыработки
	|					ИЗ
	|						ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ)) КАК ВыработкаОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНУ.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальныйКоэффициентНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	СпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ СпециальныйКоэффициентНУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпециальныйКоэффициентНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ГрафикиАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпособыОтраженияРасходовБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОСНачалоПериода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОСНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСПринятоКУчету.ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОСПринятоКУчету.ДатаСостояния) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияОСПринятоКУчету
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСПринятоКУчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СостоянияОСПринятоКУчету.ОсновноеСредство = СписокОС.ОсновноеСредство
	|			И (СостоянияОСПринятоКУчету.Организация = &Организация)
	|			И (СостоянияОСПринятоКУчету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСПринятоКУчету.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.Сумма,
	|	Хозрасчетный.СуммаНУКт,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Регистратор
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериодаДата И &КонецПериодаДата
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетКт В(&СчетаНачисленияАмортизацииБУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение КАК ОсновноеСредство,
	|	СУММА(Проводки.Сумма) КАК АмортизацияОборот,
	|	СУММА(Проводки.СуммаНУКт) КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСДокумента
	|ИЗ
	|	Проводки КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Проводки.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Проводки.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса ;

КонецФункции

// Процедура формирует массивы счетов учёта ОС и устанавливает их как параметры запроса.
//
// Параметры:
//  Запрос       - Запрос - имеет менеджер временных таблиц, содержащий таблицы-источники для списков счетов.
//
Процедура УстановитьСпискиСчетовУчета(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК Счет
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода.СчетУчета КАК Счет
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода КАК СчетаБухгалтерскогоУчетаОСНачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК Счет
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК Счет
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК Счет
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	СчетаУчетаБУ                           = Результаты[0].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаУчетаБУНачалоПериода              = Результаты[1].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаУчетаБУНачалоГода                 = Результаты[2].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаНачисленияАмортизацииБУ           = Результаты[3].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаНачисленияАмортизацииБУНачалоГода = Результаты[4].Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Создаём производные массивы счетов.
	
	СчетаНачалоПериода = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СчетаНачисленияАмортизацииБУ);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаНачалоПериода, СчетаУчетаБУНачалоПериода, Истина);
	Если СчетаНачалоПериода.Найти(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения) = Неопределено Тогда
		СчетаНачалоПериода.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
	КонецЕсли;
	
	СчетаКонецПериода = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СчетаНачисленияАмортизацииБУ);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаКонецПериода, СчетаУчетаБУ, Истина);
	
	СчетаНачалоГода = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СчетаНачисленияАмортизацииБУНачалоГода);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаНачалоГода, СчетаУчетаБУНачалоГода, Истина);
	
	// Устанавливаем параметры запроса.
	
	Запрос.УстановитьПараметр("СчетаУчетаБУ",                           СчетаУчетаБУ);
	Запрос.УстановитьПараметр("СчетаУчетаБУНачалоПериода",              СчетаУчетаБУНачалоПериода);
	Запрос.УстановитьПараметр("СчетаУчетаБУНачалоГода",                 СчетаУчетаБУНачалоГода);
	Запрос.УстановитьПараметр("СчетаНачисленияАмортизацииБУ",           СчетаНачисленияАмортизацииБУ);
	Запрос.УстановитьПараметр("СчетаНачисленияАмортизацииБУНачалоГода", СчетаНачисленияАмортизацииБУНачалоГода);
	Запрос.УстановитьПараметр("СчетаНачалоПериода",                     СчетаНачалоПериода);
	Запрос.УстановитьПараметр("СчетаКонецПериода",                      СчетаКонецПериода);
	Запрос.УстановитьПараметр("СчетаНачалоГода",                        СчетаНачалоГода);
	
КонецПроцедуры // УстановитьСпискиСчетовУчета()

Функция ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок(РежимСправкиРасчета)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНачалоПериода.Счет КАК Счет,
	|	ОстаткиНачалоПериода.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ОстаткиНачалоПериода.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокКт КАК СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаНачалоПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиКонецПериода.Счет КАК Счет,
	|	ОстаткиКонецПериода.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ОстаткиКонецПериода.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ОстаткиКонецПериода.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ОстаткиКонецПериода.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ОстаткиКонецПериода.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ОстаткиКонецПериода.СуммаПРОстатокКт КАК СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В (&СчетаКонецПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиКонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНаНачалоГода.Счет КАК Счет,
	|	ОстаткиНаНачалоГода.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ОстаткиНаНачалоГода.СуммаОстатокКт КАК СуммаОстатокКт
	|ПОМЕСТИТЬ ОстаткиНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоФинансовогоГода,
	|			Счет В (&СчетаНачалоГода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНаНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОСПриПереходеКЛинейномуМетоду.Субконто1 КАК ОсновноеСредство,
	|	АмортизацияОСПриПереходеКЛинейномуМетоду.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В (&СчетаНачисленияАмортизацииБУ),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС
	|					ГДЕ
	|						СписокОС.ТолькоЛинейный = ЛОЖЬ)) КАК АмортизацияОСПриПереходеКЛинейномуМетоду
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если РежимСправкиРасчета Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка) КАК ОсновноеСредство,
		|	0 КАК АмортизацияОборот,
		|	0 КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСОбороты";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОсновноеСредство,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.Сумма < 0
		|				ТОГДА 0
		|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.Сумма
		|		КОНЕЦ) КАК АмортизацияОборот,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт < 0
		|				ТОГДА 0
		|			ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУКт
		|		КОНЕЦ) КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСЗаПериод
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериодаДата,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СубконтоКт1 В
		|					(ВЫБРАТЬ
		|						СписокОС.ОсновноеСредство
		|					ИЗ
		|						СписокОС КАК СписокОС)
		|				И СчетКт В
		|					(ВЫБРАТЬ
		|						СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|					ИЗ
		|						РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|					ГДЕ
		|						СчетаБухгалтерскогоУчетаОС.Организация = &Организация
		|						И СчетаБухгалтерскогоУчетаОС.ОсновноеСредство В
		|							(ВЫБРАТЬ
		|								СписокОС.ОсновноеСредство
		|							ИЗ
		|								СписокОС КАК СписокОС))
		|				И Активность,
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаПериод.ОсновноеСредство КАК ОсновноеСредство,
		|	ЗаПериод.АмортизацияОборот - ЕСТЬNULL(ПоДокументу.АмортизацияОборот, 0) КАК АмортизацияОборот,
		|	ЗаПериод.АмортизацияНУОборот - ЕСТЬNULL(ПоДокументу.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСОбороты
		|ИЗ
		|	АмортизацияОСЗаПериод КАК ЗаПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСДокумента КАК ПоДокументу
		|		ПО ЗаПериод.ОсновноеСредство = ПоДокументу.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТаблицуГрафиковАмортизации(Графики)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Графики", Графики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГодовыеГрафикиАмортизацииОС.Ссылка КАК График,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент2,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент3,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент4,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент5,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент6,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент7,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент8,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент9,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент10,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент11,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент12,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1 + ГодовыеГрафикиАмортизацииОС.Коэффициент2 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент3 + ГодовыеГрафикиАмортизацииОС.Коэффициент4 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент5 + ГодовыеГрафикиАмортизацииОС.Коэффициент6 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент7 + ГодовыеГрафикиАмортизацииОС.Коэффициент8 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент9 + ГодовыеГрафикиАмортизацииОС.Коэффициент10 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент11 + ГодовыеГрафикиАмортизацииОС.Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";
	ТаблицаГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков.Индексы.Добавить("График");

	Возврат ТаблицаГрафиков;

КонецФункции

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАмортизации = 0;

	СтрокаТаблицы = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	СуммаВсех = СтрокаТаблицы.СуммаКоэффициентов;
	Если СуммаВсех = 0 Тогда
		КоэффициентАмортизации = 1;
	Иначе
		СуммаОдного = СтрокаТаблицы["Коэффициент" + Месяц(ДатаРасчета)];
		КоэффициентАмортизации = СуммаОдного / СуммаВсех;
	КонецЕсли;

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru = '%1 для основного средства %2 (%3), инвентарный номер %4.'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.ОсновноеСредствоПредставление, Выборка.Код, Выборка.ИнвентарныйНомер);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.'");
		Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(РегОперация) Тогда
			СсылкаСообщения = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаЖурналДокументыПоОС();
		Иначе 
			СсылкаСообщения = РегОперация;
		КонецЕсли;
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

Функция ПодготовитьТаблицуТолькоЛинейныйМетодНУ(ТаблицаОС, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТолькоЛинейныйМетодНУ(ТаблицаОС);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ТаблицаОС.ОсновноеСредство.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|					И ТаблицаОС.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))
	|				ИЛИ ТаблицаОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоЛинейный
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС";
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПризнаков;

КонецФункции

Функция ПодготовитьПараметрыТолькоЛинейныйМетодНУ(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьПустуюТаблицуАмортизацииОС()
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета",                                Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",                              БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                                ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаАмортизации.Колонки.Добавить("СпособПоступления",                          Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПоступленияАктивов"));
	ТаблицаАмортизации.Колонки.Добавить("Контрагент",                          		  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАмортизации.Колонки.Добавить("ДоговорКонтрагента",                         Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

// РАСЧЕТ И НАЧИСЛЕНИЕ ИЗНОСА

Функция ПодготовитьТаблицуИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	ДокументОбъект = Неопределено;

	Параметры = ПодготовитьПараметрыИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецПериода", ?(ДокументОбъект = Неопределено, Реквизиты.ДатаРасчета,
		Новый Граница(Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Реквизиты.ДатаРасчета));
	// Не учитываем требования по расширению первого отчетного периода, так как в программе начисление износа поддерживается
	// только для объектов, введенных в эксплуатацию давно, а значит, для организаций, зарегистрированных давно.
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());

	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();

		УсловиеОС = " И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)";
	Иначе
		УсловиеОС = "";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОСНачислениеИзноса.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация" + УсловиеОС + ") КАК СписокОСНачислениеИзноса
	|ГДЕ
	|	СписокОСНачислениеИзноса.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)";
	РезультатЗапроса = Запрос.Выполнить();

	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ТаблицаОС";
		Запрос.Выполнить();
	КонецЕсли;
	ТаблицаОСНачислениеИзноса = РезультатЗапроса.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОСНачислениеИзноса);

	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетИзноса
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетИзноса
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеСнятыеСУчета КАК СписокОС
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СписокОС.ОсновноеСредство
	|			И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
	|			И (СчетаБухгалтерскогоУчетаОС.Период МЕЖДУ &НачалоГода И &Период)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Счета           = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаУчетаЗаГод = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Счет");
	Запрос.УстановитьПараметр("Счета",           Счета);
	Запрос.УстановитьПараметр("СчетаУчетаЗаГод", СчетаУчетаЗаГод);

	Если ТранзакцияАктивна() Тогда

		// Блокировка регистра бухгалтерии.

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаУчетаОС.СчетИзноса КАК Счет
		|ИЗ
		|	СчетаУчетаОС КАК СчетаУчетаОС
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеСнятыеСУчета КАК СписокОС
		|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СписокОС.ОсновноеСредство
		|			И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
		|			И (СчетаБухгалтерскогоУчетаОС.Период МЕЖДУ &НачалоГода И &Период)";
		РезультатЗапроса = Запрос.Выполнить();

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, КонецМесяца(Реквизиты.ДатаРасчета)));
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		Блокировка.Заблокировать();

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В (&Счета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер,
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ВосстановительнаяСтоимость
	|		ПО СчетаУчетаОС.ОсновноеСредство = ВосстановительнаяСтоимость.ОсновноеСредство
	|			И СчетаУчетаОС.СчетУчета = ВосстановительнаяСтоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Износ
	|		ПО СчетаУчетаОС.ОсновноеСредство = Износ.ОсновноеСредство
	|			И СчетаУчетаОС.СчетИзноса = Износ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО СчетаУчетаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	ТекстЗапросаВременныеТаблицы = "";
	ТекстЗапросаОбъединение = "";

	ШаблонТекстаЗапросаВременныеТаблицы =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС_Месяц_
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК НачислениеАмортизацииОС
	|ГДЕ
	|	НачислениеАмортизацииОС.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетИзноса
	|ПОМЕСТИТЬ СчетаУчетаОС_Месяц_
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС_Месяц_
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|	НормыАмортизацииОС.КоэффициентАмортизации КАК НормаАмортизации
	|ПОМЕСТИТЬ НормыАмортизацииОС_Месяц_
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК НормыАмортизацииОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК ВосстановительнаяСтоимость
	|ПОМЕСТИТЬ ХозрасчетныйОстатки_Месяц_
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоМесяца_Месяц_,
	|			Счет В (&СчетаУчетаЗаГод),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет";

	ШаблонТекстаЗапросаОбъединение =
	"ВЫБРАТЬ
	|	СчетаУчетаОС_Месяц_.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС_Месяц_.СчетИзноса КАК СчетИзноса,
	|	ВЫРАЗИТЬ(&НачалоМесяца_Месяц_ КАК ДАТА) КАК НачалоМесяца,
	|	ЕСТЬNULL(ХозрасчетныйОстатки_Месяц_.ВосстановительнаяСтоимость, 0) КАК ВосстановительнаяСтоимость,
	|	ЕСТЬNULL(ПодразделенияОС_Месяц_.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(НормыАмортизацииОС_Месяц_.НормаАмортизации, 0) КАК НормаАмортизации
	|//ПОМЕСТИТЬ
	|ИЗ
	|	СчетаУчетаОС_Месяц_ КАК СчетаУчетаОС_Месяц_
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки_Месяц_ КАК ХозрасчетныйОстатки_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = ХозрасчетныйОстатки_Месяц_.ОсновноеСредство
	|			И СчетаУчетаОС_Месяц_.СчетУчета = ХозрасчетныйОстатки_Месяц_.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС_Месяц_ КАК ПодразделенияОС_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = ПодразделенияОС_Месяц_.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ НормыАмортизацииОС_Месяц_ КАК НормыАмортизацииОС_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = НормыАмортизацииОС_Месяц_.ОсновноеСредство";

	Для НомерМесяца = 1 По Месяц(Реквизиты.ДатаРасчета) Цикл

		НомерМесяцаСтр = СокрЛП(НомерМесяца);

		Запрос.УстановитьПараметр("НачалоМесяца" + НомерМесяцаСтр, ДобавитьМесяц(НачалоГода(Реквизиты.ДатаРасчета), НомерМесяца - 1));

		Если НЕ ПустаяСтрока(ТекстЗапросаВременныеТаблицы) Тогда
			ТекстЗапросаВременныеТаблицы = ТекстЗапросаВременныеТаблицы + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;

		ТекстЗапросаВременныеТаблицы = ТекстЗапросаВременныеТаблицы + СтрЗаменить(ШаблонТекстаЗапросаВременныеТаблицы,
			"_Месяц_", НомерМесяцаСтр);


		Если НЕ ПустаяСтрока(ТекстЗапросаОбъединение) Тогда
			ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		ТекстДляВставки = СтрЗаменить(ШаблонТекстаЗапросаОбъединение, "_Месяц_", НомерМесяцаСтр);
		Если НомерМесяца = 1 Тогда
			ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ СтоимостьЗаГод");
		КонецЕсли;

		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + ТекстДляВставки;

	КонецЦикла;
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Запрос.Текст = ТекстЗапросаВременныеТаблицы + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
		+ ТекстЗапросаОбъединение;
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	СписокОС.ИнвентарныйНомер,
	|	СписокОС.ОстаточнаяСтоимость,
	|	СтоимостьЗаГод.СчетИзноса,
	|	СтоимостьЗаГод.НачалоМесяца КАК НачалоМесяца,
	|	СтоимостьЗаГод.ВосстановительнаяСтоимость,
	|	СтоимостьЗаГод.Подразделение,
	|	СтоимостьЗаГод.НормаАмортизации
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтоимостьЗаГод КАК СтоимостьЗаГод
	|		ПО СписокОС.ОсновноеСредство = СтоимостьЗаГод.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	НачалоМесяца";

	ТаблицаИзноса = Запрос.Выполнить().Выгрузить();

	ТаблицаИзноса.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	СписокКолонок = "ОсновноеСредствоПредставление,Код,ИнвентарныйНомер";
	ТаблицаИзносаБезНормАмортизации = ТаблицаИзноса.СкопироватьКолонки(СписокКолонок);
	
	// Расчет износа по объектам ОС
	Для каждого СтрокаОС Из ТаблицаИзноса Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаОС.НормаАмортизации) Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТаблицаИзносаБезНормАмортизации.Добавить(), СтрокаОС);
			Продолжить;
		КонецЕсли;

		Если Не Отказ Тогда
			СтрокаОС.Сумма = СтрокаОС.ВосстановительнаяСтоимость * СтрокаОС.НормаАмортизации / 1200;
		КонецЕсли;

	КонецЦикла;

	ТаблицаИзносаБезНормАмортизации.Свернуть(СписокКолонок);
	Если Отказ И Реквизиты.ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Не определена годовая норма амортизационных отчислений для основного средства '");
		Для Каждого СтрокаОС Из ТаблицаИзносаБезНормАмортизации Цикл
			СообщитьОбОшибкеПриНачисленииАмортизации(СтрокаОС, ТекстСообщения, Реквизиты.Регистратор, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	// Сворачиваем таблицу по ОС и счету начисления износа
	ТаблицаИзноса.Свернуть("ОсновноеСредство, СчетИзноса, Подразделение, ОстаточнаяСтоимость", "Сумма");

	// Проверяем, не превышает ли рассчитанный износ остаточную стоимость ОС
	Для каждого СтрокаОС Из ТаблицаИзноса Цикл

		СтрокаОС.Сумма = Мин(СтрокаОС.Сумма, СтрокаОС.ОстаточнаяСтоимость);

	КонецЦикла;

	ТаблицаИзноса.Свернуть("ОсновноеСредство, СчетИзноса, Подразделение", "Сумма");

	Возврат ТаблицаИзноса;

КонецФункции

Функция ПодготовитьПараметрыИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаИзноса) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаИзноса Цикл

		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Износ основных средств";

		Проводка.СчетДт = СтрокаТаблицы.СчетИзноса;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаИзноса

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "Подразделение,"              // <Ссылка на справочник подразделений>
	+ "Сумма,"                      // <Число, 15, 2> - сумма износа к начислению
	+ "СчетИзноса";                 // <ПланСчетовСсылка.Хозрасчетный> - счет начисления износа ОС

	Параметры.Вставить("ТаблицаИзноса",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаИзноса, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВЫБЫТИЕ ОС

// Структура ПараметрыВыбытия может быть досрочно возвращена из ПодготовитьТаблицыСведенийПоВыбытиюОС,
// и чтобы "ПодготовитьПараметры*" не выдавали ошибки, надо заранее проинициализировать структуру
// всеми возможными значениями (пустыми таблицами значений с колонками и т.п.)
//
Функция ПолучитьИнициализированнуюСтруктуруПараметровВыбытия()

	ПараметрыВыбытия = Новый Структура;

	// СуммаКапитальныхВложенийВключаемыхВРасходы, число
	ПараметрыВыбытия.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходы", 0);

	// НачислениеАмортизации, структура из двух таблиц: ТаблицаЗатрат и ТаблицаРеквизиты
	СтруктураТаблицаЗатрат = Новый Структура("ОбъектУчета, ПодразделениеЗатрат, Подразделение,
				|Субконто1, Субконто2, Субконто3, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СчетЗатрат, СчетАмортизации");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Содержание");
	ПараметрыВыбытия.Вставить("НачислениеАмортизации",
		Новый Структура("ТаблицаЗатрат, ТаблицаРеквизиты, СправкаРасчет",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаЗатрат), // ТаблицаЗатрат
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты),  // ТаблицаРеквизиты
			УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации")
		)
	);

	// АмортизационнаяПремия, структура из двух таблиц: ТаблицаНачисленияАмортизационнойПремии и ТаблицаРеквизиты
	СтруктураТаблицаНачисленияАмортизационнойПремии = Новый Структура("ДокументАмортизационнойПремии, ОсновноеСредство,
				|Подразделение, ПодразделениеПоАмортизационнойПремии,
				|СубконтоПоАмортизационнойПремии1, СубконтоПоАмортизационнойПремии2, СубконтоПоАмортизационнойПремии3,
				|СуммаНУ, СуммаПР, СуммаВР, СчетУчета, СчетУчетаЗатратПоАмортизационнойПремии");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Регистратор");
	ПараметрыВыбытия.Вставить("АмортизационнаяПремия",
		Новый Структура("ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаНачисленияАмортизационнойПремии), // ТаблицаНачисленияАмортизационнойПремии
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);

	// НачислениеИзноса, структура из двух таблиц: ТаблицаИзноса и ТаблицаРеквизиты
	СтруктураТаблицаИзноса = Новый Структура("ОсновноеСредство, Подразделение, Сумма, СчетИзноса");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Регистратор");
	ПараметрыВыбытия.Вставить("НачислениеИзноса",
		Новый Структура("ТаблицаИзноса, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаИзноса), // ТаблицаИзноса
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)  // ТаблицаРеквизиты
		)
	);

	// СобытияОС, структура из двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство, СуммаЗатратБУ, СуммаЗатратНУ, СуммаЗатратУСН");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Номер, Организация, СобытиеОС, Регистратор");
	ПараметрыВыбытия.Вставить("СобытияОС",
		Новый Структура("ТаблицаОС, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)  // ТаблицаРеквизиты
		)
	);

	// НачислениеАмортизацииОСБУ, структура из булево НачислятьАмортизацию и двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, НачислятьАмортизацию, Организация");
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСБУ",
		Новый Структура("НачислятьАмортизацию, ТаблицаОС, ТаблицаРеквизиты",
			Ложь,
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);

	// НачислениеАмортизацииОСНУ, структура из булево НачислятьАмортизацию и двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, НачислятьАмортизацию, Организация");
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСНУ",
		Новый Структура("НачислятьАмортизацию, ТаблицаОС, ТаблицаРеквизиты",
			Ложь,
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);
	
	// РасходыПоАреднымПлатежамНУ
	СтруктураТаблицаКорректировкаАмортизации = Новый Структура("ДоговорКонтрагента, Контрагент, КорректировкаАмортизацииНУ,
		|ОсновноеСредство, Подразделение, ПодразделениеЗатрат, СпособПоступления, Субконто1, Субконто2, Субконто3,
		|СуммаБУ, СуммаВР, СуммаНУ, СуммаПР, СчетАмортизации, СчетЗатрат");
	СтруктураТаблицаРасходыПоАренднымПлатежамНУ = Новый Структура("АмортизацияБУ, АмортизацияВР, АмортизацияНУ, АмортизацияПР,
		|ВалютаВзаиморасчетов, ДоговорКонтрагента, ДокументРасчетовСКонтрагентом, Контрагент, КорректировкаАмортизацииНУ,
		|ОсновноеСредство, Подразделение, ПодразделениеРасходовПоАренднымПлатежам, СубконтоРасходовПоАренднымПлатежам1,
		|СубконтоРасходовПоАренднымПлатежам2, СубконтоРасходовПоАренднымПлатежам3, СуммаПлатежаБезНДС, СуммаПлатежаНУ,
		|СчетЗадолженностиПоАренде, СчетРасходовПоАренднымПлатежам, СчетРасчетовСКонтрагентом");
	СтруктураТаблицаРеквизиты = Новый Структура("ВыдаватьСообщения, ДатаРасчета, ИмяСписка, Организация, Период, Регистратор, Содержание");
	
	ПараметрыВыбытия.Вставить("РасходыПоАреднымПлатежамНУ",
		Новый Структура("ТаблицаКорректировкаАмортизации, ТаблицаРасходыПоАренднымПлатежамНУ, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаКорректировкаАмортизации),
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРасходыПоАренднымПлатежамНУ),
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)
		)
	);

	// ТаблицаПараметрыСписания, таблица значений
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", Новый ТаблицаЗначений); // Достаточно указать ТЗ без строк, колонки прописывать не нужно

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты, Отказ, ВыдаватьСообщения = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Проинициализируем структуру, чтобы в случае "досрочного" выхода в структуре были все таблицы, хоть и пустые
	ПараметрыВыбытия = ПолучитьИнициализированнуюСтруктуруПараметровВыбытия();

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ВыдаватьСообщения = Истина, "ВыдаватьСообщения");
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииОС();
		СправкаРасчет = УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации");
	Иначе
		РасчетАмортизацииОС = ПодготовитьРасчетАмортизацииОС(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
		ТаблицаАмортизации = РасчетАмортизацииОС.ТаблицаАмортизации;
		СправкаРасчет = РасчетАмортизацииОС.СправкаРасчет;
		Если Отказ Тогда
			Возврат ПараметрыВыбытия;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТабАмортизации", ТаблицаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТабАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТабАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТабАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТабАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР,
	|	ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ ТабАмортизации
	|ИЗ
	|	&ТабАмортизации КАК ТабАмортизации";
	Запрос.Выполнить();

	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	ПараметрыРасходыПоАреднымПлатежамНУ = ПодготовитьТаблицыРасходовПоАренднымПлатежамНУ(Параметры.ТаблицаОС, Параметры.Реквизиты, ТаблицаЗатрат, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;
	
	ТабРасходыПоАренднымПлатежамНУ = ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ.Скопировать();
	ТабРасходыПоАренднымПлатежамНУ.Свернуть("ОсновноеСредство", "СуммаПлатежаНУ");
	
	Запрос.УстановитьПараметр("ТабРасходыПоАренднымПлатежамНУ", ТабРасходыПоАренднымПлатежамНУ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПоАренднымПлатежамНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	РасходыПоАренднымПлатежамНУ.СуммаПлатежаНУ КАК СуммаПлатежаНУ
	|ПОМЕСТИТЬ ТабРасходыПоАренднымПлатежамНУ
	|ИЗ
	|	&ТабРасходыПоАренднымПлатежамНУ КАК РасходыПоАренднымПлатежамНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	ТабКорректировкаАмортизации = ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаКорректировкаАмортизации.Скопировать();
	ТабКорректировкаАмортизации.Свернуть("ОсновноеСредство", "КорректировкаАмортизацииНУ");
	
	Запрос.УстановитьПараметр("ТабКорректировкаАмортизации", ТабКорректировкаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	КорректировкаАмортизации.КорректировкаАмортизацииНУ КАК СуммаНУ
	|ПОМЕСТИТЬ ТабКорректировкаАмортизации
	|ИЗ
	|	&ТабКорректировкаАмортизации КАК КорректировкаАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	ПараметрыВыбытия.Вставить("РасходыПоАреднымПлатежамНУ", ПараметрыРасходыПоАреднымПлатежамНУ);
	
	ПараметрыНачисленияАмортизации = Новый Структура;
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаЗатрат", ТаблицаЗатрат);
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("СправкаРасчет", СправкаРасчет);

	// Параметры для процедуры СформироватьДвиженияНачислениеАмортизации
	ПараметрыВыбытия.Вставить("НачислениеАмортизации", ПараметрыНачисленияАмортизации);

	ТаблицаНачисленияАмортизационнойПремии = ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	АмортизационнаяПремия = Новый Структура;
	АмортизационнаяПремия.Вставить("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	АмортизационнаяПремия.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачисленияАмортизационнойПремии
	ПараметрыВыбытия.Вставить("АмортизационнаяПремия", АмортизационнаяПремия);

	// Параметры для восстановления амортизационной премии
	ПараметрыВыбытия.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходы", ТаблицаАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы"));

	ТаблицаИзноса = ПодготовитьТаблицуИзносаБухРегл(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	НачислениеИзноса = Новый Структура;
	НачислениеИзноса.Вставить("ТаблицаИзноса", ТаблицаИзноса);
	НачислениеИзноса.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачислениеИзноса
	ПараметрыВыбытия.Вставить("НачислениеИзноса", НачислениеИзноса);

	Запрос.УстановитьПараметр("ТабИзноса", ТаблицаИзноса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабИзноса.ОсновноеСредство КАК ОсновноеСредство,
	|	ТабИзноса.Сумма КАК СуммаИзноса
	|ПОМЕСТИТЬ ТабИзноса
	|ИЗ
	|	&ТабИзноса КАК ТабИзноса";
	Запрос.Выполнить();

	ТаблицаТолькоЛинейный = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(Параметры.ТаблицаОС, Отказ);

	Запрос.УстановитьПараметр("Дата", Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаТолькоЛинейный", ТаблицаТолькоЛинейный);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТолькоЛинейный.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаТолькоЛинейный.ТолькоЛинейный КАК ТолькоЛинейный
	|ПОМЕСТИТЬ ПризнакТолькоЛинейный
	|ИЗ
	|	&ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчетаУчетаОС
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПервоначальныеСведенияОСНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение,
	|	ПодразделенияОС.Контрагент
	|ПОМЕСТИТЬ ПодразделенияОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() Тогда
		// Блокировка регистра бухгалтерии.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, КонецМесяца(Реквизиты.Период)));
		
		Запрос.Текст = "ВЫБРАТЬ РазличныеСчетаУчетаОС.Счет ИЗ РазличныеСчетаУчетаОС";
		ЭлементБлокировки.ИсточникДанных = Запрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		
		Блокировка.Заблокировать();
		
	КонецЕсли;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
	|	СтоимостьОС.Счет КАК Счет,
	|	СтоимостьОС.СуммаОстатокДт КАК СуммаОстатокДт,
	|	СтоимостьОС.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьОС.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьОС.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьОС.СуммаОстатокКт КАК СуммаОстатокКт,
	|	СтоимостьОС.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьОС.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьОС.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ СтоимостьОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчетаУчетаОС.Счет
	|				ИЗ
	|					РазличныеСчетаУчетаОС КАК РазличныеСчетаУчетаОС),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СтоимостьОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаСтоимости.Субконто1 КАК ОсновноеСредство,
	|	КорректировкаСтоимости.СуммаОстатокДт КАК СуммаОстатокДт,
	|	КорректировкаСтоимости.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	КорректировкаСтоимости.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	КорректировкаСтоимости.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	КорректировкаСтоимости.СуммаОстатокКт КАК СуммаОстатокКт,
	|	КорректировкаСтоимости.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	КорректировкаСтоимости.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	КорректировкаСтоимости.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ КорректировкаСтоимости
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК КорректировкаСтоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.НомерСтроки КАК НомерСтроки,
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Подразделение КАК Подразделение,
	|	ПодразделенияОС.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьОС,
	|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) - ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСНУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьОСПР,
	|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияОС,
	|	ЕСТЬNULL(АмортизацияОС.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) + ЕСТЬNULL(ТабКорректировкаАмортизации.СуммаНУ, 0) КАК АмортизацияОСНУ,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияОСПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) - ЕСТЬNULL(ТабКорректировкаАмортизации.СуммаНУ, 0) КАК АмортизацияОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокДт, 0) + ЕСТЬNULL(ТабИзноса.СуммаИзноса, 0) КАК ИзносОС,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ПризнакТолькоЛинейный.ТолькоЛинейный,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|				ИЛИ ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекратитьНачислениеАмортизацииБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекратитьНачислениеАмортизацииНУ,
	|	ЕСТЬNULL(КорректировкаСтоимости.СуммаНУОстатокДт, 0) - ЕСТЬNULL(ТабРасходыПоАренднымПлатежамНУ.СуммаПлатежаНУ, 0) КАК КорректировкаСтоимостиНУ,
	|	ЕСТЬNULL(КорректировкаСтоимости.СуммаПРОстатокДт, 0) КАК КорректировкаСтоимостиПР,
	|	ЕСТЬNULL(КорректировкаСтоимости.СуммаВРОстатокДт, 0) - ЕСТЬNULL(-ТабРасходыПоАренднымПлатежамНУ.СуммаПлатежаНУ, 0) КАК КорректировкаСтоимостиВР
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУ КАК ПервоначальныеСведенияОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК СтоимостьОС
	|		ПО (СчетаУчетаОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство)
	|			И (СчетаУчетаОС.СчетУчета = СтоимостьОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК АмортизацияОС
	|		ПО (СчетаУчетаОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство)
	|			И (СчетаУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС КАК ПодразделенияОС
	|		ПО СписокОС.ОсновноеСредство = ПодразделенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО СписокОС.ОсновноеСредство = ТабАмортизации.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабИзноса КАК ТабИзноса
	|		ПО СписокОС.ОсновноеСредство = ТабИзноса.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакТолькоЛинейный КАК ПризнакТолькоЛинейный
	|		ПО СписокОС.ОсновноеСредство = ПризнакТолькоЛинейный.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабРасходыПоАренднымПлатежамНУ КАК ТабРасходыПоАренднымПлатежамНУ
	|		ПО СписокОС.ОсновноеСредство = ТабРасходыПоАренднымПлатежамНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабКорректировкаАмортизации КАК ТабКорректировкаАмортизации
	|		ПО СписокОС.ОсновноеСредство = ТабКорректировкаАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаСтоимости КАК КорректировкаСтоимости
	|		ПО СписокОС.ОсновноеСредство = КорректировкаСтоимости.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаПараметрыСписания = Запрос.Выполнить().Выгрузить();

	// Параметры для процедуры СформироватьДвиженияРегистрацияСобытияОС
	ПараметрыСобытияОС = Новый Структура;
	ПараметрыСобытияОС.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратУСН", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ПараметрыСобытияОС.Вставить("ТаблицаОС", Параметры.ТаблицаОС);

	ПараметрыВыбытия.Вставить("СобытияОС", ПараметрыСобытияОС);

	// Параметры для процедуры СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ
	ПараметрыНачислениеАмортизацииОСБУ = Новый Структура;
	Параметры.Реквизиты.Колонки.Добавить("НачислятьАмортизацию", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "НачислятьАмортизацию");
	ПараметрыНачислениеАмортизацииОСБУ.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ТаблицаНачислениеАмортизацииОСБУ = ТаблицаПараметрыСписания.Скопировать(
		Новый Структура("ПрекратитьНачислениеАмортизацииБУ", Истина), "ОсновноеСредство");
	ПараметрыНачислениеАмортизацииОСБУ.Вставить("ТаблицаОС", ТаблицаНачислениеАмортизацииОСБУ);

	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСБУ", ПараметрыНачислениеАмортизацииОСБУ);

	// Параметры для процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);
	
	ПараметрыНачислениеАмортизацииОСНУ = Новый Структура;
	ПараметрыНачислениеАмортизацииОСНУ.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	
	Если ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
		Отбор = Новый Структура("ПрекратитьНачислениеАмортизацииНУ, ТолькоЛинейный", Истина, Истина);
	Иначе
		Отбор = Новый Структура("ПрекратитьНачислениеАмортизацииНУ", Истина);
	КонецЕсли;
	ТаблицаНачислениеАмортизацииОСНУ = ТаблицаПараметрыСписания.Скопировать(Отбор, "ОсновноеСредство");
		
	ПараметрыНачислениеАмортизацииОСНУ.Вставить("ТаблицаОС", ТаблицаНачислениеАмортизацииОСНУ);
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСНУ", ПараметрыНачислениеАмортизацииОСНУ);

	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Регистратор";      // <ДокументСсылка.*>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "Номер,"         // <Строка, 0> - номер документа-выбытия
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "СобытиеОС,"     // <СправочникСсылка.СобытияОС> - событие с ОС, которым отражается выбытие
	+ "Содержание,"    // <Строка, 150>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВыбытиеОС(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыбытиеОС(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;
	Если ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты.Количество() > 0 Тогда
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты[0].Содержание = "";
	КонецЕсли;
	Если ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты.Количество() > 0 Тогда
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты[0].Содержание = "";
	КонецЕсли;

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыВыбытия.НачислениеАмортизации.СправкаРасчет,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		"РасчетАмортизации");

	СформироватьДвиженияРасходыПоАренднымПлатежамНУиКорректировкиАмортизации(
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ,
		Движения, Отказ);

	СформироватьДвиженияРасчетРасходовПоАренде(
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ, 
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияНачислениеАмортизационнойПремии(
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии,
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияНачислениеИзноса(
		ПараметрыВыбытия.НачислениеИзноса.ТаблицаИзноса,
		ПараметрыВыбытия.НачислениеИзноса.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыВыбытия.СобытияОС.ТаблицаОС,
		ПараметрыВыбытия.СобытияОС.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(
		ПараметрыВыбытия.НачислениеАмортизацииОСБУ.ТаблицаОС,
		ПараметрыВыбытия.НачислениеАмортизацииОСБУ.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(
		ПараметрыВыбытия.НачислениеАмортизацииОСНУ.ТаблицаОС,
		ПараметрыВыбытия.НачислениеАмортизацииОСНУ.ТаблицаРеквизиты,
		Движения, Отказ);

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	СписыватьТолькоЛинейный = Реквизиты.СписыватьТолькоЛинейныйНУ
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтрокаТаблицы.СчетУчета, ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ) Тогда
			СчетВыбытия = ПланыСчетов.Хозрасчетный.ВыбытиеМЦ;
		Иначе
			СчетВыбытия = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		КонецЕсли;
		
		СписыватьТолькоБУ = СписыватьТолькоЛинейный И НЕ СтрокаТаблицы.ТолькоЛинейный;

		// Списание амортизации Дт 02.01 Кт 01.09
		СуммаПроводки   = СтрокаТаблицы.АмортизацияОС;
		СуммаПроводкиНУ = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.АмортизацияОСНУ);
		СуммаПроводкиПР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.АмортизацияОСПР);
		СуммаПроводкиВР = ?(СписыватьТолькоБУ, СуммаПроводки, СтрокаТаблицы.АмортизацияОСВР);

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Списание износа Кт 010
		СуммаПроводки = СтрокаТаблицы.ИзносОС;

		Если СуммаПроводки <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

		КонецЕсли;

		// Списание балансовой стоимости Дт 01.09 Кт 01.01
		СуммаПроводки   = СтрокаТаблицы.СтоимостьОС;
		СуммаПроводкиНУ = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.СтоимостьОСНУ);
		СуммаПроводкиПР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.СтоимостьОСПР);
		СуммаПроводкиВР = ?(СписыватьТолькоБУ, СуммаПроводки, СтрокаТаблицы.СтоимостьОСВР);

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			
			Проводка.СчетДт = СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
		// Корректировка стоимости Дт 01.09 Кт 01.К
		Если ОтражатьВНалоговомУчете Тогда
			
			КорректировкаСтоимостиНУ = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.КорректировкаСтоимостиНУ);
			КорректировкаСтоимостиПР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.КорректировкаСтоимостиПР);
			КорректировкаСтоимостиВР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.КорректировкаСтоимостиВР);

			Если КорректировкаСтоимостиНУ > 0
				ИЛИ КорректировкаСтоимостиПР <> 0
				ИЛИ КорректировкаСтоимостиВР <> 0 Тогда

				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = Реквизиты.Содержание;

				Проводка.СчетДт = СчетВыбытия;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = ПодразделениеПроводки;
				КонецЕсли;

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = ПодразделениеПроводки;
				КонецЕсли;

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = КорректировкаСтоимостиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = КорректировкаСтоимостиПР;
						Проводка.СуммаВРДт = КорректировкаСтоимостиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = КорректировкаСтоимостиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = КорректировкаСтоимостиПР;
						Проводка.СуммаВРКт = КорректировкаСтоимостиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВыбытиеОС(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Содержание,"                // <Строка, 150>
	+ "СписыватьТолькоЛинейныйНУ"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты, ПараметрыВыбытия, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

		ТаблицаОС = ПараметрыВыбытия.ТаблицаПараметрыСписания.Скопировать(Новый Структура("ТолькоЛинейный", Истина), "НомерСтроки, ОсновноеСредство");
	Иначе
		ТаблицаОС = ПараметрыВыбытия.ТаблицаПараметрыСписания.Скопировать(, "НомерСтроки, ОсновноеСредство");
	КонецЕсли;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьПараметрыОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "Организация";      // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПИСАНИЕ ОСТАТОЧНОЙ СТОИМОСТИ ОС

Функция ПодготовитьТаблицуОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты, ПараметрыВыбытия, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	СписыватьТолькоЛинейныйНУ = Реквизиты.СписыватьТолькоЛинейныйНУ И ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.СубконтоНУ,
	|	ТаблицаОС.СчетСписанияНУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Если ТаблицаПараметрыСписания.Количество() > 0 Тогда
		// Получим остаточную стоимость по результатам выбытия
		Запрос.УстановитьПараметр("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.СчетУчета,
		|	ТаблицаПараметрыСписания.ТолькоЛинейный,
		|	ТаблицаПараметрыСписания.СтоимостьОС,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСПР,
		|	ТаблицаПараметрыСписания.СтоимостьОСВР,
		|	ТаблицаПараметрыСписания.АмортизацияОС,
		|	ТаблицаПараметрыСписания.АмортизацияОСНУ,
		|	ТаблицаПараметрыСписания.АмортизацияОСПР,
		|	ТаблицаПараметрыСписания.АмортизацияОСВР,
		|	ТаблицаПараметрыСписания.КорректировкаСтоимостиНУ,
		|	ТаблицаПараметрыСписания.КорректировкаСтоимостиПР,
		|	ТаблицаПараметрыСписания.КорректировкаСтоимостиВР
		|ПОМЕСТИТЬ ТаблицаПараметрыСписания
		|ИЗ
		|	&ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.ТолькоЛинейный,
		|	ТаблицаПараметрыСписания.СтоимостьОС - ТаблицаПараметрыСписания.АмортизацияОС КАК СтоимостьБУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ + ТаблицаПараметрыСписания.КорректировкаСтоимостиНУ - ТаблицаПараметрыСписания.АмортизацияОСНУ КАК СтоимостьНУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСПР + ТаблицаПараметрыСписания.КорректировкаСтоимостиПР - ТаблицаПараметрыСписания.АмортизацияОСПР КАК СтоимостьПР,
		|	ТаблицаПараметрыСписания.СтоимостьОСВР + ТаблицаПараметрыСписания.КорректировкаСтоимостиВР - ТаблицаПараметрыСписания.АмортизацияОСВР КАК СтоимостьВР,
		|	ВЫБОР
		|		КОГДА ТаблицаПараметрыСписания.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМЦ)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС)
		|	КОНЕЦ КАК СчетВыбытия
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	Иначе
		// получим остаточную стоимость из регистра бухгалтерии, со счета выбытия
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		ТаблицаТолькоЛинейный = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(Параметры.ТаблицаОС, Отказ);
		Запрос.УстановитьПараметр("ТаблицаТолькоЛинейный", ТаблицаТолькоЛинейный);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСумм.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаОстатокДт, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаВРОстатокДт, 0) КАК СтоимостьВР,
		|	ТаблицаСумм.Счет КАК СчетВыбытия
		|ПОМЕСТИТЬ ТаблицаСумм
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ТаблицаСумм
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСумм.Субконто1,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаОстатокДт, 0),
		|	ЕСТЬNULL(ТаблицаСумм.СуммаНУОстатокДт, 0),
		|	ЕСТЬNULL(ТаблицаСумм.СуммаПРОстатокДт, 0),
		|	ЕСТЬNULL(ТаблицаСумм.СуммаВРОстатокДт, 0),
		|	ТаблицаСумм.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМЦ),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ТаблицаСумм
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТолькоЛинейный.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаТолькоЛинейный.ТолькоЛинейный
		|ПОМЕСТИТЬ ТаблицаТолькоЛинейный
		|ИЗ
		|	&ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтоимости.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаТолькоЛинейный.ТолькоЛинейный,
		|	ТаблицаСтоимости.СтоимостьБУ,
		|	ТаблицаСтоимости.СтоимостьНУ,
		|	ТаблицаСтоимости.СтоимостьПР,
		|	ТаблицаСтоимости.СтоимостьВР,
		|	ТаблицаСтоимости.СчетВыбытия
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаСумм КАК ТаблицаСтоимости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
		|		ПО ТаблицаСтоимости.ОсновноеСредство = ТаблицаТолькоЛинейный.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.СубконтоНУ,
	|	ТаблицаОС.СчетСписанияНУ,
	|	ТаблицаСтоимости.ТолькоЛинейный,
	|	ТаблицаСтоимости.СтоимостьБУ,
	|	ТаблицаСтоимости.СтоимостьНУ,
	|	ТаблицаСтоимости.СтоимостьПР,
	|	ТаблицаСтоимости.СтоимостьВР,
	|	ТаблицаСтоимости.СчетВыбытия
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСтоимости КАК ТаблицаСтоимости
	|		ПО ТаблицаОС.ОсновноеСредство = ТаблицаСтоимости.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	ТаблицаСтоимости = Запрос.Выполнить().Выгрузить();

	Если НЕ ОтражатьВНалоговомУчете ИЛИ СписыватьТолькоЛинейныйНУ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСтоимости Цикл
			Если НЕ ОтражатьВНалоговомУчете Тогда
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = 0;
			ИначеЕсли Реквизиты.СписыватьТолькоЛинейныйНУ И НЕ СтрокаТаблицы.ТолькоЛинейный Тогда
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = СтрокаТаблицы.СтоимостьБУ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСтоимости;

КонецФункции

Функция ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания,"     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС
	+ "СубконтоНУ,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС для НУ
	+ "СчетСписанияНУ";   // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС для НУ

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "СписыватьТолькоЛинейныйНУ," // <Булево> - списывать остаточную стоимость ОС по налоговому учету только по ОС,
		// по которым амортизация всегда начисляется линейным методом
	+ "Регистратор";               // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Субконто КАК Субконто,
	|	ТаблицаОС.СчетСписания КАК СчетСписания,
	|	ТаблицаОС.Субконто КАК СубконтоНУ,
	|	ТаблицаОС.СчетСписания КАК СчетСписанияНУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// получим остаточную стоимость из регистра бухгалтерии, со счета выбытия
	ВидыСубконтоПереданныеОС = Новый Массив;
    ВидыСубконтоПереданныеОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
    ВидыСубконтоПереданныеОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("Период", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ВидыСубконтоПереданныеОС", ВидыСубконтоПереданныеОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости),
	|			&ВидыСубконтоПереданныеОС,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)
	|				И Субконто2 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьВР, 0) КАК СтоимостьВР,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.Субконто
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|		ПО ТаблицаОС.ОсновноеСредство = ХозрасчетныйОстатки.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	ТаблицаСтоимости = Запрос.Выполнить().Выгрузить();

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Для каждого СтрокаТаблицы Из ТаблицаСтоимости Цикл
			СтрокаТаблицы.СтоимостьНУ = 0;
			СтрокаТаблицы.СтоимостьПР = 0;
			СтрокаТаблицы.СтоимостьВР = 0;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСтоимости;

КонецФункции

Функция ПодготовитьПараметрыОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Контрагент,"                // <СправочникСсылка.Контрагенты> - покупатель ОС
	+ "Регистратор";               // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтоимости) Тогда
		Возврат;
	КонецЕсли;	

	Параметры = ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из  Параметры.ТаблицаСтоимости Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Субконто       = СтрокаТаблицы.Субконто;
		СубконтоНУ     = СтрокаТаблицы.СубконтоНУ;
		СчетСписания   = СтрокаТаблицы.СчетСписания;
		СчетСписанияНУ = СтрокаТаблицы.СчетСписанияНУ;
		
		// Списание остаточной стоимости 
		// Дт 91.02 (45.04) Кт 01.09 (03.09), в зависимости от установки флага "Право собсвенности переходит после гос.регистрации" 
		// Дт 91.02 Кт 45.04, для НУ после 01.01.13 
		СуммаПроводки = СтрокаТаблицы.СтоимостьБУ;
		Если НЕ ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		Иначе
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьВР;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = Реквизиты.Содержание;

			Проводка.СчетДт = СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
			Субконто = СтрокаТаблицы.Субконто;
			Если ЗначениеЗаполнено(Субконто) 
				И ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
				И НЕ Субконто.ПринятиеКналоговомуУчету 
				И Проводка.СуммаНУДт <> 0 Тогда 
				
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
					Проводка.СуммаНУДт = 0;
				Иначе
					Проводка.СуммаНУДт = 0;
				КонецЕсли;
				
			КонецЕсли;

			Если ОтражатьВНалоговомУчете И СчетСписания <> СчетСписанияНУ Тогда  // Счет списания 45.04, счет списания НУ 91.02
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = Реквизиты.Содержание;
				
				Проводка.СчетДт = СчетСписанияНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = ПодразделениеПроводки;
				КонецЕсли;
				
				Проводка.СчетКт = СчетСписания;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.ОсновноеСредство);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = ПодразделениеПроводки;
				КонецЕсли;
				
				Проводка.Сумма = 0;
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = 0;
						Проводка.СуммаВРДт = - СуммаПроводкиНУ;
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = 0;
						Проводка.СуммаВРКт = -СуммаПроводкиНУ;
					КонецЕсли;
				КонецЕсли;
				
				
				Субконто = СтрокаТаблицы.Субконто;
				Если ЗначениеЗаполнено(Субконто) 
					И ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
					И НЕ Субконто.ПринятиеКналоговомуУчету 
					И Проводка.СуммаНУДт <> 0 Тогда 
					
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
						Проводка.СуммаНУДт = 0;
					Иначе
						Проводка.СуммаНУДт = 0;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для выполнения дополнительных действий при списании ОС.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСтоимости

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьБУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным бухгалтерского учета
	+ "СтоимостьНУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным налогового учета
	+ "СтоимостьПР,"      // <Число, 15, 2> - постоянные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "СтоимостьВР,"      // <Число, 15, 2> - временные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания,"     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС
	+ "СубконтоНУ,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС для НУ
	+ "СчетСписанияНУ,"   // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС для НУ
	+ "СчетВыбытия";      // <ПланСчетовСсылка.Хозрасчетный> - счет выбытия ОС
	
	Параметры.Вставить("ТаблицаСтоимости",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСтоимости, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Содержание";    // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из  Параметры.ТаблицаСтоимости Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Субконто = СтрокаТаблицы.Субконто;
		СчетСписания = СтрокаТаблицы.СчетСписания;

		// Списание остаточной стоимости Дт 91.02 Кт 01.09
		СуммаПроводки = СтрокаТаблицы.СтоимостьБУ;
		Если НЕ ОтражатьВНалоговомУчете Тогда
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		Иначе
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьВР;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = Реквизиты.Содержание;

			Проводка.СчетДт = СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСтоимости

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьБУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным бухгалтерского учета
	+ "СтоимостьНУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным налогового учета
	+ "СтоимостьПР,"      // <Число, 15, 2> - постоянные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "СтоимостьВР,"      // <Число, 15, 2> - временные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаСтоимости",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСтоимости, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты> - покупатель ОС
	+ "Содержание";    // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВОССТАНОВЛЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ

Процедура СформироватьДвиженияВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.ВосстановитьАмортизационнуюПремию Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПоддержкаПБУ18               = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	СписокОбъектов = Параметры.ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", Реквизиты.Период);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Реквизиты.Организация));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Период), ДАТАВРЕМЯ(2006, 1, 1)) КАК Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&ТекущаяДата,
	|			(Организация = &Организация ИЛИ Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|				И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДатаНачала = РезультатЗапроса.Выгрузить()[0].Период;
	Иначе
		ДатаНачала = '20060101';
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Если Реквизиты.Период < Дата('20130101') Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			(Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация ИЛИ Организация = &Организация)
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК ХозрасчетныйОбороты";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СуммаАморПремии = РезультатЗапроса.Выгрузить()[0].СуммаОборотКт;
		Иначе
			СуммаАморПремии = 0;
		КонецЕсли;

		СуммаАморПремии = СуммаАморПремии + Реквизиты.СуммаКапитальныхВложенийВключаемыхВРасходы;

		Если СуммаАморПремии = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, , "Объект", Ложь);
			Возврат;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Передача ОС";

		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СтатьяДляВосстановленияАмортизационнойПремии);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаАморПремии;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = -СуммаАморПремии;
			КонецЕсли;
		КонецЕсли;

	Иначе
	
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаСтоимости);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК Объект,
		|	ТаблицаОС.СчетСписания КАК СчетУчетаРасходов,
		|	ТаблицаОС.СчетВыбытия КАК СчетВыбытия,
		|	ТаблицаОС.Субконто КАК Субконто
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК СуммаАморПремии,
		|	ХозрасчетныйОбороты.Субконто1 КАК ОсновноеСредство,
		|	ОсновныеСредства.СчетУчетаРасходов КАК СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто КАК Субконто,
		|	ОсновныеСредства.СчетВыбытия КАК СчетВыбытия
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			(Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|				ИЛИ Организация = &Организация)
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеСредства КАК ОсновныеСредства
		|		ПО ХозрасчетныйОбороты.Субконто1 = ОсновныеСредства.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1,
		|	ОсновныеСредства.СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто,
		|	ОсновныеСредства.СчетВыбытия";
		ТаблицаАмортПремий = Запрос.Выполнить().Выгрузить();
		СуммаАморПремии = ТаблицаАмортПремий.Итог("СуммаАморПремии");

		СуммаАморПремии = СуммаАморПремии + Реквизиты.СуммаКапитальныхВложенийВключаемыхВРасходы;

		Если СуммаАморПремии = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, , "Объект", Ложь);
			Возврат;
		КонецЕсли;
		
		Для Каждого ОбъектАмортПремии Из ТаблицаАмортПремий Цикл
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "Передача ОС";
			
			Проводка.СчетДт = ОбъектАмортПремии.СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ОбъектАмортПремии.ОсновноеСредство);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СтатьяДляВосстановленияАмортизационнойПремии);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РеализуемыеАктивы",ОбъектАмортПремии.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = ОбъектАмортПремии.СуммаАморПремии;
				Проводка.СуммаНУКт = ОбъектАмортПремии.СуммаАморПремии;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = -ОбъектАмортПремии.СуммаАморПремии;
					Проводка.СуммаПРКт = -ОбъектАмортПремии.СуммаАморПремии;
				КонецЕсли;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "Передача ОС";
			
			Проводка.СчетДт = ОбъектАмортПремии.СчетУчетаРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ОбъектАмортПремии.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РеализуемыеАктивы",ОбъектАмортПремии.ОсновноеСредство);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = ОбъектАмортПремии.СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",ОбъектАмортПремии.ОсновноеСредство);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = ОбъектАмортПремии.СуммаАморПремии;
				Проводка.СуммаНУКт = ОбъектАмортПремии.СуммаАморПремии;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = -ОбъектАмортПремии.СуммаАморПремии;
					Проводка.СуммаПРКт = -ОбъектАмортПремии.СуммаАморПремии;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВосстановитьАмортизационнуюПремию,"            // <Булево> - необходимость восстановления амортизационной премии
	+ "Период,"                                       // <Дата>
	+ "ДоговорКонтрагента,"                           // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому
		// производится реализация ОС
	+ "Контрагент,"                                   // <СправочникСсылка.Контрагенты> - контрагент-покупатель ОС
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "Подразделение,"                                // <Ссылка на справочник подразделений>
	+ "Регистратор,"                                  // <ДокументСсылка.*>
	+ "СтатьяДляВосстановленияАмортизационнойПремии," // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья доходов,
		// по которой будет признан доход от восстановления амортизационной премии
	+ "СуммаКапитальныхВложенийВключаемыхВРасходы,"   // <Число, 15, 2> - сумма амортизационной премии к восстановлению
	+ "СчетУчетаРасчетовСКонтрагентом";               // <ПланСчетовСсылка.Хозрасчетный> - счет учет расчетов с
		// контрагентом по реализации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС

Процедура СформироватьДвиженияПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты, ПараметрыНачисленияАмортизации, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Выборка остатков по основным средствам в регистрах бухгалтерии.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ПараметрыНачисленияАмортизации.Амортизация.ТаблицаАмортизации);
	Запрос.УстановитьПараметр("ТаблицаАмортизационнойПремии",
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизации.ОбъектУчета КАК ОсновноеСредство,
	|	ТаблицаАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТаблицаАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТаблицаАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТаблицаАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТаблицаАмортизации
	|ИЗ
	|	&ТаблицаАмортизации КАК ТаблицаАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизационнойПремии.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаАмортизационнойПремии.СуммаНУ КАК СуммаНУ,
	|	ТаблицаАмортизационнойПремии.СуммаПР КАК СуммаПР,
	|	ТаблицаАмортизационнойПремии.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ТаблицаАмортизационнойПремии
	|ИЗ
	|	&ТаблицаАмортизационнойПремии КАК ТаблицаАмортизационнойПремии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	СчетУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетУчетаОС.СчетУчета,
	|	СчетУчетаОС.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(ПодразделенияОС.Подразделение, &ПустоеПодразделение) КАК Подразделение
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС КАК ПодразделенияОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ПодразделенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчета
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетУчета КАК Счет
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетНачисленияАмортизации
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС";
		РезультатЗапроса = Запрос.Выполнить();

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,
			"ОсновноеСредство");
		Блокировка.Заблокировать();
		
	КонецЕсли;

	ВидыСубконтоКапитальныеВложения = Новый Массив;
	ВидыСубконтоКапитальныеВложения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	ВидыСубконтоКапитальныеВложения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКапитальныеВложения", ВидыСубконтоКапитальныеВложения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчета.Счет
	|				ИЗ
	|					РазличныеСчета КАК РазличныеСчета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументАмортизационнойПремии,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт
	|ПОМЕСТИТЬ КапитальныеВложения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|			&ВидыСубконтоКапитальныеВложения,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК КорректировкаСтоимостиНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК КорректировкаСтоимостиПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК КорректировкаСтоимостиВР
	|ПОМЕСТИТЬ КорректировкаСтоимости
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(Стоимость.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУОстатокДт, 0) - ЕСТЬNULL(ИзменениеСтоимости.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПРОстатокДт, 0) - ЕСТЬNULL(ИзменениеСтоимости.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВРОстатокДт, 0) - ЕСТЬNULL(ИзменениеСтоимости.СуммаВР, 0) КАК СтоимостьВР,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(Амортизация.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(Амортизация.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(Амортизация.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияВР,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокДт, 0) КАК Износ,
	|	ЕСТЬNULL(КапитальныеВложения.ДокументАмортизационнойПремии, НЕОПРЕДЕЛЕНО) КАК ДокументАмортизационнойПремии,
	|	ЕСТЬNULL(КапитальныеВложения.СуммаНУОстатокДт, 0) КАК КапитальныеВложения,
	|	ЕСТЬNULL(КорректировкаСтоимости.КорректировкаСтоимостиНУ, 0) КАК КорректировкаСтоимостиНУ,
	|	ЕСТЬNULL(КорректировкаСтоимости.КорректировкаСтоимостиПР, 0) КАК КорректировкаСтоимостиПР,
	|	ЕСТЬNULL(КорректировкаСтоимости.КорректировкаСтоимостиВР, 0) КАК КорректировкаСтоимостиВР
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Стоимость
	|		ПО СписокОС.ОсновноеСредство = Стоимость.ОсновноеСредство
	|			И СписокОС.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Амортизация
	|		ПО СписокОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизационнойПремии КАК ИзменениеСтоимости
	|		ПО СписокОС.ОсновноеСредство = ИзменениеСтоимости.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизации КАК ИзменениеАмортизации
	|		ПО СписокОС.ОсновноеСредство = ИзменениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ КапитальныеВложения КАК КапитальныеВложения
	|		ПО СписокОС.ОсновноеСредство = КапитальныеВложения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаСтоимости КАК КорректировкаСтоимости
	|		ПО СписокОС.ОсновноеСредство = КорректировкаСтоимости.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокОС.НомерСтроки";
	ТаблицаОстатковПоОС = Запрос.Выполнить().Выгрузить();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	// Движения по регистрам бухгалтерии.
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковПоОС Цикл

		// Перемещение стоимости
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И (СтрокаТаблицы.СтоимостьБУ > 0
				ИЛИ СтрокаТаблицы.СтоимостьНУ > 0
				ИЛИ СтрокаТаблицы.СтоимостьПР <> 0
				ИЛИ СтрокаТаблицы.СтоимостьВР <> 0) Тогда

			СчетДт = ?(ЗначениеЗаполнено(Реквизиты.СчетУчета), Реквизиты.СчетУчета, СтрокаТаблицы.СчетУчета);
			СчетКт = СтрокаТаблицы.СчетУчета;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
			
			Если СчетДт = СчетКт 
			   И (Не СвойстваСчетаКт.УчетПоПодразделениям 
			      ИЛИ Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель) Тогда
				
				Продолжить;
			КонецЕсли;
				
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.СтоимостьБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СтоимостьПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.СтоимостьВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СтоимостьПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.СтоимостьВР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		// Перемещение амортизации
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации)
			И (СтрокаТаблицы.АмортизацияБУ > 0
				ИЛИ СтрокаТаблицы.АмортизацияНУ > 0
				ИЛИ СтрокаТаблицы.АмортизацияПР <> 0
				ИЛИ СтрокаТаблицы.АмортизацияВР <> 0) Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.АмортизацияБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.АмортизацияНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.АмортизацияПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.АмортизацияВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.АмортизацияНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.АмортизацияПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.АмортизацияВР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		// Перемещение износа
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации) И СтрокаТаблицы.Износ > 0 Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.Износ;

		КонецЕсли;

		Если НЕ ОтражатьВНалоговомУчете Тогда
			Продолжить;
		КонецЕсли;
		
		// Перемещение амортизационной премии
		Если СтрокаТаблицы.КапитальныеВложения > 0 И 
			ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии.Количество() = 0 Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);	
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"ДокументыАмортизационнойПремии", СтрокаТаблицы.ДокументАмортизационнойПремии);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ДокументыАмортизационнойПремии", СтрокаТаблицы.ДокументАмортизационнойПремии);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СуммаНУДт = СтрокаТаблицы.КапитальныеВложения;
			Проводка.СуммаНУКт = СтрокаТаблицы.КапитальныеВложения;

		КонецЕсли;
		
		// Перемещение корректировки стоимости арендованного имущества
		Если СтрокаТаблицы.КорректировкаСтоимостиНУ <> 0 
			ИЛИ СтрокаТаблицы.КорректировкаСтоимостиПР <> 0
			ИЛИ СтрокаТаблицы.КорректировкаСтоимостиВР <> 0 Тогда

			СчетУчета = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
			
			Если Не СвойстваСчета.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
				"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Проводка.СчетКт = СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
				"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СуммаНУДт = СтрокаТаблицы.КорректировкаСтоимостиНУ;
			Проводка.СуммаНУКт = СтрокаТаблицы.КорректировкаСтоимостиНУ;

			Если ПоддержкаПБУ18 Тогда
				
				Проводка.СуммаПРДт = СтрокаТаблицы.КорректировкаСтоимостиПР;
				Проводка.СуммаВРДт = СтрокаТаблицы.КорректировкаСтоимостиВР;
				Проводка.СуммаПРКт = СтрокаТаблицы.КорректировкаСтоимостиПР;
				Проводка.СуммаВРКт = СтрокаТаблицы.КорректировкаСтоимостиВР;

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;
	
	Если ЗначениеЗаполнено(Реквизиты.СчетУчета) Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаОстатковПоОС Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) 
			   И СтрокаТаблицы.СчетУчета <> Реквизиты.СчетУчета Тогда
			
				Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
				Движение.Период                    = Реквизиты.Период;
				Движение.ОсновноеСредство          = СтрокаТаблицы.ОсновноеСредство;
				Движение.Организация               = Реквизиты.Организация;
				Движение.СчетУчета                 = Реквизиты.СчетУчета;
				Движение.СчетНачисленияАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
			
			КонецЕсли;
		КонецЦикла;
		
		Движения.СчетаБухгалтерскогоУчетаОС.Записывать = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение-сдачик
	+ "ПодразделениеПолучатель," // <Ссылка на справочник подразделений> - подразделение-получатель
	+ "Регистратор,"             // <ДокументСсылка.*>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "СчетУчета";               // <ПланСчетовСсылка.Хозрасчетный>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МОДЕРНИЗАЦИЯ ОС

// Изменение параметров амортизации ОС
Функция ПодготовитьТаблицыИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицыИзмененияПараметровАмортизацииОС = Новый Структура("БухгалтерскийУчет, НалоговыйУчет");
	
	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		
		ТаблицыИзмененияПараметровАмортизацииОС.БухгалтерскийУчет =  
			РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		ТаблицыИзмененияПараметровАмортизацииОС.НалоговыйУчет = 
			РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			
		Возврат ТаблицыИзмененияПараметровАмортизацииОС;
		
	КонецЕсли;

	Параметры = ПодготовитьПараметрыМодернизацияОСИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокОС = Параметры.ТаблицаОС.Скопировать(, "НомерСтроки, ОсновноеСредство");
	
	ПараметрыАмортизации = Новый ТаблицаЗначений;
	ПараметрыАмортизации.Колонки.Добавить("Организация");
	ПараметрыАмортизации.Колонки.Добавить("ДатаРасчета");
	ПараметрыАмортизации.Колонки.Добавить("Период");
	ПараметрыАмортизации.Колонки.Добавить("Регистратор");
	ПараметрыАмортизации.Колонки.Добавить("ВыдаватьСообщения");
	ПараметрыАмортизации.Колонки.Добавить("Содержание");

	СтрокаПараметра = ПараметрыАмортизации.Добавить();
	СтрокаПараметра.Организация = Реквизиты.Организация;
	СтрокаПараметра.ДатаРасчета = Реквизиты.Период;
	СтрокаПараметра.Период = Реквизиты.Период;
	СтрокаПараметра.Регистратор = Реквизиты.Регистратор;
	СтрокаПараметра.ВыдаватьСообщения = Ложь;
	СтрокаПараметра.Содержание = "Модернизация ОС";

	РасчетАмортизацииОС = ПодготовитьРасчетАмортизацииОС(СписокОС, ПараметрыАмортизации, Неопределено);
	ТаблицаАмортизацииБух = РасчетАмортизацииОС.ТаблицаАмортизации;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаАмортизацииБух", ТаблицаАмортизацииБух);
	Запрос.УстановитьПараметр("Период", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СуммаМодернизацииБУ,
	|	ТаблицаОС.СуммаМодернизацииПР,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ,
	|	ТаблицаОС.СрокПолезногоИспользованияНУ,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ
	|ПОМЕСТИТЬ ВТ_МодернизацияОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизацииБух.ОбъектУчета КАК ОсновноеСредство,
	|	ТаблицаАмортизацииБух.СуммаАмортизацииБУ КАК АмортизацияЗаМесяцБУ,
	|	ТаблицаАмортизацииБух.СуммаАмортизацииПР КАК АмортизацияЗаМесяцПР
	|ПОМЕСТИТЬ ВТ_ТаблицаАмортизацииБух
	|ИЗ
	|	&ТаблицаАмортизацииБух КАК ТаблицаАмортизацииБух
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ ВТ_СостоянияОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_МодернизацияОС КАК ТаблицаОС)
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			
	|				ОБЪЕДИНИТЬ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	|	ВыработкаОСОбороты.КоличествоОборот
	|ПОМЕСТИТЬ ВТ_ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(
	|			,
	|			&Период,
	|			,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ВыработкаОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МодернизацияОС.НомерСтроки, 0) КАК НомерСтроки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(МодернизацияОС.СуммаМодернизацииБУ, 0) КАК СуммаМодернизацииБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости В (ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ), ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса))
	|			ТОГДА ЕСТЬNULL(ИзносОС.СуммаОстатокДт, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0)
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ЕСТЬNULL(ТаблицаАмортизацииБух.АмортизацияЗаМесяцБУ, 0) КАК АмортизацияЗаМесяцБУ,
	|	ЕСТЬNULL(ТаблицаАмортизацииБух.АмортизацияЗаМесяцПР, 0) КАК АмортизацияЗаМесяцПР,
	|	ЕСТЬNULL(ВыработкаОС.КоличествоОборот, 0) КАК ФактОбъемПродукцииРаботБУ,
	|	ВЫБОР
	|		КОГДА СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию, &Дата, МЕСЯЦ)
	|	КОНЕЦ КАК ФактСрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчет.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчет.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	ЕСТЬNULL(МодернизацияОС.СрокПолезногоИспользованияБУ, 0) КАК СрокПолезногоИспользованияБУ,
	|	ЕСТЬNULL(МодернизацияОС.ОбъемПродукцииРаботБУ, 0) КАК ОбъемПродукцииРаботБУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(МодернизацияОС.СрокПолезногоИспользованияНУ, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(МодернизацияОС.СуммаМодернизацииПР, 0) КАК СуммаМодернизацииПР
	|ПОМЕСТИТЬ ВТ_ТаблицаОС
	|ИЗ
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииБухгалтерскийУчет КАК ПараметрыАмортизацииБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыработкаОС КАК ВыработкаОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|			И ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК СтоимостьОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК АмортизацияОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ИзносОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ИзносОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = ИзносОС.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаАмортизацииБух КАК ТаблицаАмортизацииБух
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ТаблицаАмортизацииБух.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МодернизацияОС КАК МодернизацияОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = МодернизацияОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаОС.ОсновноеСредство,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияБУ - ВТ_ТаблицаОС.ФактСрокИспользованияБУ КАК СрокИспользованияДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.СтоимостьБУ + ВТ_ТаблицаОС.СуммаМодернизацииБУ - ВТ_ТаблицаОС.АмортизацияБУ - ВТ_ТаблицаОС.АмортизацияЗаМесяцБУ КАК СтоимостьДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.ОбъемПродукцииРаботБУ - ВТ_ТаблицаОС.ФактОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	|	ВТ_ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения,
	|	ВТ_ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРабот
	|ИЗ
	|	ВТ_ТаблицаОС КАК ВТ_ТаблицаОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаОС.ОсновноеСредство,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользования,
	|	ВТ_ТаблицаОС.СтоимостьПР + ВТ_ТаблицаОС.СуммаМодернизацииПР - ВТ_ТаблицаОС.АмортизацияПР - ВТ_ТаблицаОС.АмортизацияЗаМесяцПР КАК ПРДляВычисленияАмортизации
	|ИЗ
	|	ВТ_ТаблицаОС КАК ВТ_ТаблицаОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыИзмененияПараметровАмортизацииОС.БухгалтерскийУчет = Результат[9].Выгрузить(); 
	ТаблицыИзмененияПараметровАмортизацииОС.НалоговыйУчет = Результат[10].Выгрузить();
		
	Возврат ТаблицыИзмененияПараметровАмортизацииОС;
	
КонецФункции

Функция ПодготовитьПараметрыМодернизацияОСИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	"НомерСтроки,"					// <Число, 5, 0>
	"ОсновноеСредство,"				// <СправочникСсылка.ОсновныеСредства>
	"СуммаМодернизацииБУ,"          // <Число, 15, 2>
	"СуммаМодернизацииПР,"          // <Число, 15, 2>
	"СрокПолезногоИспользованияБУ,"	// <Число, 4, 0>
	"СрокПолезногоИспользованияНУ," // <Число, 4, 0>
	"ОбъемПродукцииРаботБУ";        // <Число, 10, 0>
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата>
	+ "Организация,"	// <СправочникСсылка.Организации>
	+ "Регистратор,";	// <ДокументСсылка.МодернизацияОС>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

// Формирование движений БУ
Процедура СформироватьДвиженияМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМодернизации) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаМодернизации", Параметры.ТаблицаМодернизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	0 КАК СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	-ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ КАК СуммаКапитальныхВложенийВключаемыхВРасходыВР
	|ПОМЕСТИТЬ ТаблицаМодернизации
	|ИЗ
	|	&ТаблицаМодернизации КАК ТаблицаМодернизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаМодернизации.ОсновноеСредство
	|					ИЗ
	|						ТаблицаМодернизации КАК ТаблицаМодернизации)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыВР,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаМодернизации КАК ТаблицаМодернизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ТаблицаМодернизации.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаПараметровМодернизации = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТаблицы Из ТаблицаПараметровМодернизации Цикл

		// Списание модернизации Дт 01.01 Кт 08.03
		СуммаПроводки = СтрокаТаблицы.СуммаМодернизацииБУ;

		Если ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = СтрокаТаблицы.СуммаМодернизацииНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СуммаМодернизацииПР;
			СуммаПроводкиВР = СтрокаТаблицы.СуммаМодернизацииВР;
		Иначе
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;

		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Модернизация ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеВнеоборотногоАктива;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТаблицаАмортизационнойПремии = ТаблицаПараметровМодернизации.Скопировать(, "НомерСтроки, ОсновноеСредство, СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	ТаблицаАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Имя = "Сумма";
	СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, Параметры.Реквизиты, Движения, Отказ);

	ТаблицаНачисленияАмортизационнойПремии = ТаблицаПараметровМодернизации.Скопировать(, "НомерСтроки, ОсновноеСредство, СчетУчета, "
		+ "СуммаКапитальныхВложенийВключаемыхВРасходыНУ, СуммаКапитальныхВложенийВключаемыхВРасходыПР,"
		+ "СуммаКапитальныхВложенийВключаемыхВРасходыВР");
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Имя = "СуммаНУ";
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыПР.Имя = "СуммаПР";
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыВР.Имя = "СуммаВР";

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("ДокументАмортизационнойПремии",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии.ТипЗначения);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Регистратор, "ДокументАмортизационнойПремии");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СчетУчетаЗатратПоАмортизационнойПремии",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СчетУчетаЗатратПоАмортизационнойПремии,
		"СчетУчетаЗатратПоАмортизационнойПремии");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("ПодразделениеПоАмортизационнойПремии",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.ПодразделениеПоАмортизационнойПремии,
		"ПодразделениеПоАмортизационнойПремии");

	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии1", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии1,
		"СубконтоПоАмортизационнойПремии1");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии2", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии2,
		"СубконтоПоАмортизационнойПремии2");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии3", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии3,
		"СубконтоПоАмортизационнойПремии3");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Подразделение,
		"Подразделение");

	СформироватьДвиженияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, Параметры.Реквизиты, Движения, Отказ);

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМодернизации

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                                  // <Число, 5, 0>
	+ "ОсновноеСредство,"                             // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаКапитальныхВложенийВключаемыхВРасходыНУ," // <Число, 15, 2> - сумма амортизационной премии
	+ "СуммаМодернизацииБУ,"                          // <Число, 15, 2> - сумма модернизации по данным бухгалтерского учета
	+ "СуммаМодернизацииНУ,"                          // <Число, 15, 2> - сумма модернизации по данным налогового учета
	+ "СуммаМодернизацииПР,"                          // <Число, 15, 2> - постоянные разницы в оценке модернизации (ПБУ 18/02)
	+ "СуммаМодернизацииВР";                          // <Число, 15, 2> - временные разницы в оценке модернизации (ПБУ 18/02)


	Параметры.Вставить("ТаблицаМодернизации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМодернизации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                 // <Дата>
	+ "ОбъектСтроительства,"                    // <СправочникСсылка.ОбъектыСтроительства> - объект строительства,
		// стоимость с которого нужно списать на модернизацию ОС
	+ "Организация,"                            // <СправочникСсылка.Организации>
	+ "Подразделение,"                          // <Ссылка на справочник подразделений>
	+ "ПодразделениеВнеоборотногоАктива,"       // <Ссылка на справочник подразделений>
	+ "ПодразделениеПоАмортизационнойПремии,"   // <Ссылка на справочник подразделений> - подразделение,
		// на котороео нужно отнести затраты по отражению амортизационной премии
	+ "Регистратор,"                            // <ДокументСсылка.*>
	+ "СубконтоПоАмортизационнойПремии1,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СубконтоПоАмортизационнойПремии2,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СубконтоПоАмортизационнойПремии3,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СчетУчетаВнеоборотногоАктива,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства
	+ "СчетУчетаЗатратПоАмортизационнойПремии"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат по амортизационной
		// премии

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ И АМОРТИЗАЦИОННОЙ ПРЕМИИ

Функция ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Содержание = "Амортизация ОС";

	ПараметрыНачисленияАмортизации = Новый Структура;

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета");
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("Содержание");
	Параметры.Реквизиты.ЗаполнитьЗначения(Содержание, "Содержание");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения");
	Параметры.Реквизиты.ЗаполнитьЗначения(истина, "ВыдаватьСообщения");
	
	РасчетАмортизацииОС = ПодготовитьРасчетАмортизацииОС(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	ТаблицаАмортизации = РасчетАмортизацииОС.ТаблицаАмортизации;

	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("СправкаРасчет", РасчетАмортизацииОС.СправкаРасчет);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);

	Параметры.Реквизиты.ЗаполнитьЗначения("", "ИмяСписка");

	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);

	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);

	ТаблицаНачисленияАмортизационнойПремии = ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации,
		Параметры.Реквизиты, Отказ);

	ПараметрыАмортизационнойПремии = Новый Структура;
	ПараметрыАмортизационнойПремии.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	ПараметрыАмортизационнойПремии.Вставить("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	ПараметрыНачисленияАмортизации.Вставить("АмортизационнаяПремия", ПараметрыАмортизационнойПремии);

	Возврат ПараметрыНачисленияАмортизации;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизацииИАмортизационнойПремии(
					ПараметрыНачисленияАмортизации,
					Движения, Отказ) Экспорт

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат,
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СформироватьДвиженияНачислениеАмортизационнойПремии(
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии,
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаРеквизиты,
		Движения, Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыНачисленияАмортизации.Амортизация.СправкаРасчет,
		ПараметрыНачисленияАмортизации.Амортизация.ТаблицаРеквизиты,
		"РасчетАмортизации");

КонецПроцедуры

Процедура УдалитьИзТаблицыНачисленияАмортизацииНенужноеПриПеремещенииОС(ПараметрыНачисленияАмортизации, Отказ) Экспорт 
	
	//при перемещении ОС когда не ведется учет по подразделениям начислять амортизацию не нужно
	Таблица = ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат;
	ВсегоСтрок = Таблица.Количество();
	Пока ВсегоСтрок > 0 Цикл 
		ВсегоСтрок = ВсегоСтрок-1;
		СтрокаТаблицы = Таблица[ВсегоСтрок];
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетАмортизации);	
		Если Не СвойстваСчета.УчетПоПодразделениям Тогда 
			Таблица.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Таблица = ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии;
	ВсегоСтрок = Таблица.Количество();
	Пока ВсегоСтрок > 0 Цикл 
		ВсегоСтрок = ВсегоСтрок-1;
		СтрокаТаблицы = Таблица[ВсегоСтрок];
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);	
		Если Не СвойстваСчета.УчетПоПодразделениям Тогда 
			Таблица.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// ОПЛАТА ОС ДЛЯ УСН

Процедура СформироватьДвиженияОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ПрименяетсяУСН
	 Или Не Реквизиты.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОплатыОСДляУСН.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.Организация          = Реквизиты.Организация;
		Движение.ДокументМодернизации = Реквизиты.ДокументМодернизации;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.ДатаОплаты           = СтрокаТаблицы.ДатаОплаты;
		Движение.СуммаОплаты          = СтрокаТаблицы.СуммаОплаты;
	КонецЦикла;

	Движения.ОплатыОСДляУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"     // <СправочникСсылка.ОсновныеСредства> - 
	+ "ДатаОплаты,"           // <Дата> - 
	+ "СуммаОплаты";          // <Число, 15, 2> - 

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата>
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ДокументМодернизации,"             // <ДокументСсылка.МодернизацияОС>
	+ "ПрименяетсяУСН,"                   // <Булево>
	+ "ПрименяетсяУСНДоходыМинусРасходы"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ПРЕДМЕТОВ ЛИЗИНГА

Процедура СформироватьДвиженияПоступлениеПредметыЛизинга(ТаблицаПредметыЛизинга, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПредметыЛизинга) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПредметыЛизинга(ТаблицаПредметыЛизинга, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	СпособОценкиМПЗ      = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
    
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПредметыЛизинга Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.КорСчет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПредметыЛизинга(ТаблицаПредметыЛизинга, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПредметыЛизинга

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число> - номер строки в списке
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающий товар
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "СуммаБезНДСРуб,"      // <Число,15,2> - сумма без НДС в рублях
	+ "Количество,"          // <Число,15,3> - количество поступающего товара
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется товар
	+ "КорСчет,"             // <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого поступает товар
	+ "ВидКорСубконто1,"     // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета,
		// с которого поступает товар
	+ "ВидКорСубконто2,"     // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета,
		// с которого поступает товар
	+ "КорСубконто1,"        // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "КорСубконто2,"        // <Характеристика.ВидыСубконтоХозрасчетные> - значение субконто счета, с которого поступает товар
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаПредметыЛизинга",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПредметыЛизинга, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает товар
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПОСОБЫ ОТРАЖЕНИЯ РАСХОДОВ ПО АРЕНДНЫМ ПЛАТЕЖАМ (НУ)

Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАренднымПлатежамОСНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) 
	 Или Реквизиты.СпособПоступления <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАренднымПлатежамОСНУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.Добавить();
		Движение.Период                                = Реквизиты.Период;
		Движение.ОсновноеСредство                      = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                           = Реквизиты.Организация;
		Движение.СпособОтраженияРасходовПоАренднымПлатежам = Реквизиты.СпособОтраженияРасходовПоАренднымПлатежам;
	КонецЦикла;

	Движения.СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАренднымПлатежамОСНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "СпособПоступления,"                     // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "СпособОтраженияРасходовПоАренднымПлатежам"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способы
		// отражения расходов по арендным платежам ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ В СОСТАВ СОБСТВЕННЫХ ОС

Функция ПодготовитьТаблицуАмортизационнаяПремияПриВыкупе(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыАмортизационнаяПремияПриВыкупе(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете И Реквизиты.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ <> 0 Тогда
		ТаблицаАмортизационнойПремии = Параметры.ТаблицаОС;
	Иначе
		ТаблицаАмортизационнойПремии = Параметры.ТаблицаОС.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаАмортизационнойПремии.Колонки.Добавить("Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаАмортизационнойПремии Цикл
		СтрокаТаблицы.Сумма = Реквизиты.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100 
			* (СтрокаТаблицы.СтоимостьОСНУ + СтрокаТаблицы.КорректировкаСтоимостиНУ - СтрокаТаблицы.АмортизацияОСНУ);
	КонецЦикла;

	Возврат ТаблицаАмортизационнойПремии;

КонецФункции

Функция ПодготовитьПараметрыАмортизационнаяПремияПриВыкупе(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"         // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьОСНУ,"            // <Число, 15, 2>
	+ "КорректировкаСтоимостиНУ," // <Число, 15, 2>
	+ "АмортизацияОСНУ";          // <Число, 15, 2>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                         // <Дата>
	+ "Организация,"                                    // <СправочникСсылка.Организации>
	+ "ПроцентКапитальныхВложенийВключаемыхВРасходыНУ"; // <Число, 4, 2> - процент от стоимости ОС (НУ) для включения в расходы

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуСписаниеНаРасходыНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете И Реквизиты.ВключитьВРасходыНУ Тогда
		ТаблицаДляСписания = Параметры.ТаблицаПараметрыСписания;
	Иначе
		ТаблицаДляСписания = Параметры.ТаблицаПараметрыСписания.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаДляСписания.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииНУ",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));

	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость, "НаправлениеАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ВыбытиеОС, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляСписания Цикл
		СтрокаТаблицы.СуммаАмортизацииНУ = 
			СтрокаТаблицы.СтоимостьОСНУ + СтрокаТаблицы.КорректировкаСтоимостиНУ - СтрокаТаблицы.АмортизацияОСНУ;
		СтрокаТаблицы.СуммаАмортизацииВР = -СтрокаТаблицы.СуммаАмортизацииНУ;
	КонецЦикла;
	
	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = 
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаДляСписания, Параметры.Реквизиты, Отказ);

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"         // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьОСНУ,"            // <Число, 15, 2>
	+ "АмортизацияОСНУ,"          // <Число, 15, 2>
	+ "КорректировкаСтоимостиНУ"; // <Число, 15, 2>

	Параметры.Вставить("ТаблицаПараметрыСписания",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметрыСписания, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                        // <Дата>
	+ "Организация,"                                   // <СправочникСсылка.Организации>
	+ "Подразделение,"                                 // <Ссылка на справочник подразделений>
	+ "ВключитьВРасходыНУ,"                            // <Булево>
	+ "СпособОтраженияРасходовПриВключенииВСтоимость," // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "Регистратор,"                                   // <ДокументСсылка.*>
	+ "ИмяСписка";                                     // <Строка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияПеремещениеВСоставСобственныхОС(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеВСоставСобственныхОС(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;
	Если ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты.Количество() > 0 Тогда
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты[0].Содержание = "";
	КонецЕсли;

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);

	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыВыбытия.НачислениеАмортизации.СправкаРасчет,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		"РасчетАмортизации");

	СформироватьДвиженияРасходыПоАренднымПлатежамНУиКорректировкиАмортизации(
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ,
		Движения, Отказ);

	СформироватьДвиженияРасчетРасходовПоАренде(
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ, 
		ПараметрыВыбытия.РасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыВыбытия.СобытияОС.ТаблицаОС,
		ПараметрыВыбытия.СобытияОС.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(
		ПараметрыВыбытия.НачислениеАмортизацииОСНУ.ТаблицаОС,
		Параметры.Реквизиты,
		Движения, Отказ);

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл

		ПодразделениеПроводки = СтрокаТаблицы.Подразделение;

		// Перенос балансовой стоимости
		Если Реквизиты.ВключитьВРасходыНУ Тогда
			СуммаПроводки   = СтрокаТаблицы.СтоимостьОС;
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьОСПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьОС - СтрокаТаблицы.СтоимостьОСПР;
		Иначе
			СуммаПроводки   = СтрокаТаблицы.СтоимостьОС;
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьОСНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьОСПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьОСВР;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = Реквизиты.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Перенос амортизации БУ
		СуммаПроводки   = СтрокаТаблицы.АмортизацияОС;
		СуммаПроводкиНУ = 0;
		СуммаПроводкиПР = СтрокаТаблицы.АмортизацияОСПР;
		СуммаПроводкиВР = СуммаПроводки - СуммаПроводкиПР;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = Реквизиты.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если Не ОтражатьВНалоговомУчете Тогда
			Продолжить;
		КонецЕсли;
		
		// Перенос балансовой стоимости НУ
		Если Реквизиты.ВключитьВРасходыНУ Тогда
			СуммаПроводки   = 0;
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьОСНУ;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = -СтрокаТаблицы.СтоимостьОСНУ;
			СчетУчета = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		Иначе
			СуммаПроводки   = 0;
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
			СчетУчета = Реквизиты.СчетУчета;
		КонецЕсли;

		Если СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
		// Перенос амортизации НУ
		СуммаПроводки   = 0;
		СуммаПроводкиНУ = СтрокаТаблицы.АмортизацияОСНУ;
		СуммаПроводкиПР = 0;
		СуммаПроводкиВР = -СтрокаТаблицы.АмортизацияОСНУ;

		Если СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Перенос корректировки стоимости
		Если ОтражатьВНалоговомУчете Тогда
			
			КорректировкаСтоимостиНУ = СтрокаТаблицы.КорректировкаСтоимостиНУ;
			КорректировкаСтоимостиПР = СтрокаТаблицы.КорректировкаСтоимостиПР;
			КорректировкаСтоимостиВР = СтрокаТаблицы.КорректировкаСтоимостиВР;

			Если КорректировкаСтоимостиНУ <> 0
				ИЛИ КорректировкаСтоимостиПР <> 0
				ИЛИ КорректировкаСтоимостиВР <> 0 Тогда

				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = Реквизиты.Содержание;

				Проводка.СчетДт = СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = ПодразделениеПроводки;
				КонецЕсли;

				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = ПодразделениеПроводки;
				КонецЕсли;

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = КорректировкаСтоимостиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = КорректировкаСтоимостиПР;
						Проводка.СуммаВРДт = КорректировкаСтоимостиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = КорректировкаСтоимостиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = КорректировкаСтоимостиПР;
						Проводка.СуммаВРКт = КорректировкаСтоимостиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеВСоставСобственныхОС(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "СчетУчета,"                 // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный>
	+ "Содержание,"                // <Строка, 150>
	+ "ВключитьВРасходыНУ,"        // <Булево>
	+ "НачислятьАмортизацию";      // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Функция ПодготовитьТаблицуПервоначальныеСведенияОСНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете Тогда
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС;
	Иначе
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаПервоначальныеСведенияОСНУ.Колонки.Добавить("СуммаНУ",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПервоначальныеСведенияОСНУ.Колонки.Добавить("СуммаПР",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Для Каждого СтрокаТаблицы Из ТаблицаПервоначальныеСведенияОСНУ Цикл

		СтрокаТаблицы.СуммаНУ = 
			СтрокаТаблицы.СтоимостьОСНУ + СтрокаТаблицы.КорректировкаСтоимостиНУ - СтрокаТаблицы.АмортизацияОСНУ;
		СтрокаТаблицы.СуммаПР = 
			СтрокаТаблицы.СтоимостьОСПР + СтрокаТаблицы.КорректировкаСтоимостиПР;

	КонецЦикла;

	Возврат ТаблицаПервоначальныеСведенияОСНУ;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСНУПриВыкупе(ТаблицаПараметрыСписания, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"         // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьОСНУ,"            // <Число, 15, 2>
	+ "КорректировкаСтоимостиНУ," // <Число, 15, 2>
	+ "АмортизацияОСНУ,"          // <Число, 15, 2>
	+ "СтоимостьОСПР,"            // <Число, 15, 2>
	+ "КорректировкаСтоимостиПР"; // <Число, 15, 2>

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметрыСписания, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                        // <Дата>
	+ "Организация,"                                   // <СправочникСсылка.Организации>
	+ "СпособОтраженияРасходовПриВключенииВСтоимость"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// АРЕНДНЫЕ ПЛАТЕЖИ (НУ)

Функция ПодготовитьТаблицыРасходовПоАренднымПлатежамНУ(ТаблицаОС, ТаблицаРеквизиты, ТаблицаЗатрат, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыРасходовПоАренднымПлатежамНУ(ТаблицаОС, ТаблицаРеквизиты, ТаблицаЗатрат);

	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаРасходыПоАренднымПлатежамНУ = ПолучитьПустуюТаблицуРасходыПоАренднымПлатежамНУ();
	ТаблицаЗатратПоАмортизации = Параметры.ТаблицаЗатрат;
	
	ПараметрыРасходовПоАренднымПлатежам = Новый Структура;
	
	ПараметрыРасходовПоАренднымПлатежам.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРасходовПоАренднымПлатежам.Вставить("ТаблицаРасходыПоАренднымПлатежамНУ", ТаблицаРасходыПоАренднымПлатежамНУ);
	ПараметрыРасходовПоАренднымПлатежам.Вставить("ТаблицаКорректировкаАмортизации", ТаблицаЗатратПоАмортизации);

	Если Не ПлательщикНалогаНаПрибыль Тогда
		Возврат ПараметрыРасходовПоАренднымПлатежам;
	КонецЕсли;
	
	ТаблицаАрендныхПлатежей = ПодготовитьТаблицуАрендныхПлатежей(Параметры.ТаблицаОС, Реквизиты, Отказ);
	
	Если Отказ Тогда 
		Возврат ПараметрыРасходовПоАренднымПлатежам;
	КонецЕсли;

	// Оставим в таблице затрат по амортизации только строки, 
	// относящиеся к ОС, полученным в аренду, т.е. учитываемые на субсчетах по аренде.
	Счет02_03 = ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества;
	
	Инд = ТаблицаЗатратПоАмортизации.Количество() - 1;
	Пока Инд >= 0 Цикл
		МожноУдалить = Истина;
		СтрокаТаблицы = ТаблицаЗатратПоАмортизации[Инд];
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтрокаТаблицы.СчетАмортизации, Счет02_03) Тогда
			МожноУдалить = Ложь;
		КонецЕсли;
		
		Если МожноУдалить Тогда
			ТаблицаЗатратПоАмортизации.Удалить(Инд);
		КонецЕсли;
		Инд = Инд - 1;
	КонецЦикла;

	// Если нет арендованных ОС, то больше ничего не делаем.
	Если ТаблицаЗатратПоАмортизации.Количество() + ТаблицаАрендныхПлатежей.Количество() = 0 Тогда
		Возврат ПараметрыРасходовПоАренднымПлатежам;
	КонецЕсли;

	// Амортизация по некоторым объектам ОС могла быть рассчитана ранее в течение месяца 
	// при перемещениях ОС, эти суммы необходимо объединить с текущим расчетом.
	МассивОСвАренде = ТаблицаАрендныхПлатежей.ВыгрузитьКолонку("ОсновноеСредство");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОСвАренде);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Регистратор",     Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("МассивОСвАренде", МассивОСвАренде);
	
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&МассивОСвАренде)) КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			ОсновноеСредство В (&МассивОСвАренде)
	|				И Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанееНачисленнаяАмортизация.СчетКт КАК СчетАмортизации,
	|	РанееНачисленнаяАмортизация.СубконтоКт1 КАК ОсновноеСредство,
	|	РанееНачисленнаяАмортизация.ПодразделениеКт КАК Подразделение,
	|	РанееНачисленнаяАмортизация.СчетДт КАК СчетЗатрат,
	|	РанееНачисленнаяАмортизация.ПодразделениеДт КАК ПодразделениеЗатрат,
	|	РанееНачисленнаяАмортизация.СубконтоДт1 КАК Субконто1,
	|	РанееНачисленнаяАмортизация.СубконтоДт2 КАК Субконто2,
	|	РанееНачисленнаяАмортизация.СубконтоДт3 КАК Субконто3,
	|	СУММА(РанееНачисленнаяАмортизация.Сумма) КАК СуммаБУ,
	|	СУММА(РанееНачисленнаяАмортизация.СуммаНУКт) КАК СуммаНУ,
	|	СУММА(РанееНачисленнаяАмортизация.СуммаВРКт) КАК СуммаВР,
	|	СУММА(РанееНачисленнаяАмортизация.СуммаПРКт) КАК СуммаПР
	|ПОМЕСТИТЬ ВТ_РанееНачисленнаяАмортизация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
	|					ИЗ
	|						СчетаБухгалтерскогоУчетаОС)
	|				И НЕ СчетДт В
	|						(ВЫБРАТЬ
	|							СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
	|						ИЗ
	|							СчетаБухгалтерскогоУчетаОС)
	|				И Регистратор <> &Регистратор
	|				И СубконтоКт1 В (&МассивОСвАренде),
	|			,
	|			) КАК РанееНачисленнаяАмортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	РанееНачисленнаяАмортизация.СчетКт,
	|	РанееНачисленнаяАмортизация.СубконтоКт1,
	|	РанееНачисленнаяАмортизация.ПодразделениеКт,
	|	РанееНачисленнаяАмортизация.СчетДт,
	|	РанееНачисленнаяАмортизация.ПодразделениеДт,
	|	РанееНачисленнаяАмортизация.СубконтоДт1,
	|	РанееНачисленнаяАмортизация.СубконтоДт2,
	|	РанееНачисленнаяАмортизация.СубконтоДт3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РанееНачисленнаяАмортизация.СчетАмортизации,
	|	ВТ_РанееНачисленнаяАмортизация.ОсновноеСредство,
	|	ВТ_ПервоначальныеСведенияОС.Контрагент,
	|	ВТ_ПервоначальныеСведенияОС.ДоговорКонтрагента,
	|	ВТ_РанееНачисленнаяАмортизация.Подразделение,
	|	ВТ_РанееНачисленнаяАмортизация.СчетЗатрат,
	|	ВТ_РанееНачисленнаяАмортизация.ПодразделениеЗатрат,
	|	ВТ_РанееНачисленнаяАмортизация.Субконто1,
	|	ВТ_РанееНачисленнаяАмортизация.Субконто2,
	|	ВТ_РанееНачисленнаяАмортизация.Субконто3,
	|	ВТ_РанееНачисленнаяАмортизация.СуммаБУ,
	|	ВТ_РанееНачисленнаяАмортизация.СуммаНУ,
	|	ВТ_РанееНачисленнаяАмортизация.СуммаВР,
	|	ВТ_РанееНачисленнаяАмортизация.СуммаПР
	|ИЗ
	|	ВТ_РанееНачисленнаяАмортизация КАК ВТ_РанееНачисленнаяАмортизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОС КАК ВТ_ПервоначальныеСведенияОС
	|		ПО ВТ_РанееНачисленнаяАмортизация.ОсновноеСредство = ВТ_ПервоначальныеСведенияОС.ОсновноеСредство";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗатратПоАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	// Определим направления списания расходов по арендным платежам.
	МассивСпособовОтраженияРасходов = ТаблицаАрендныхПлатежей.ВыгрузитьКолонку("СпособОтраженияРасходовПоАренднымПлатежам");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСпособовОтраженияРасходов);
	Запрос.УстановитьПараметр("МассивСпособовОтраженияРасходов", МассивСпособовОтраженияРасходов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧСпособы.Ссылка,
	|	ТЧСпособы.НомерСтроки,
	|	ТЧСпособы.СчетЗатрат,
	|	ТЧСпособы.ПодразделениеОрганизации,
	|	ТЧСпособы.Субконто1,
	|	ТЧСпособы.Субконто2,
	|	ТЧСпособы.Субконто3,
	|	ТЧСпособы.Коэффициент
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК ТЧСпособы
	|ГДЕ
	|	ТЧСпособы.Ссылка В(&МассивСпособовОтраженияРасходов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧСпособы.Ссылка,
	|	ТЧСпособы.НомерСтроки";
	
	ТаблицаСпособовОтраженияРасходов = Запрос.Выполнить().Выгрузить();
	ТаблицаСпособовОтраженияРасходов.Индексы.Добавить("Ссылка");
	
	// Проверим корректность настроек отражения в учете
	Справочники.СпособыОтраженияРасходовПоАмортизации.ПроверитьПриВыполненииРегламентнойОперации(
		Реквизиты.Регистратор, 
		Отказ, 
		ТаблицаСпособовОтраженияРасходов.ВыгрузитьКолонку("Ссылка"));
	
	// Определим общую сумму платежа в разрезе объекта ОС.
	ТаблицаАрендныхПлатежейПоОС = ТаблицаАрендныхПлатежей.Скопировать(, 
		"ОсновноеСредство, Контрагент, ДоговорКонтрагента,
		|СуммаПлатежаБезНДС, ВалютнаяСуммаНачальныйОстаток, ВалютнаяСуммаОборотКт");
	
	// Добавим в таблицу все ОС из таблицы затрат по амортизации для получения полного списка ОС.
	Для Каждого СтрокаТаблицы Из ТаблицаЗатратПоАмортизации Цикл
		НоваяСтрока = ТаблицаАрендныхПлатежейПоОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ТаблицаАрендныхПлатежейПоОС.Свернуть("ОсновноеСредство, Контрагент, ДоговорКонтрагента", 
		"СуммаПлатежаБезНДС, ВалютнаяСуммаНачальныйОстаток, ВалютнаяСуммаОборотКт");
	
	ТаблицаЗатратПоАмортизации.Индексы.Добавить("ОсновноеСредство");
	ТаблицаАрендныхПлатежей.Индексы.Добавить("ОсновноеСредство");
		
	СтруктураПоискаОС = Новый Структура("ОсновноеСредство");
	СтруктураПоискаСпособовОтражения = Новый Структура("Ссылка");
	МассивБазы = Новый Массив;
	
	Для Каждого СтрокаТаблицыАрендныхПлатежейПоОС Из ТаблицаАрендныхПлатежейПоОС Цикл
	
		СтруктураПоискаОС.ОсновноеСредство = СтрокаТаблицыАрендныхПлатежейПоОС.ОсновноеСредство;
		
		НайденныеСтрокиАмортизации = ТаблицаЗатратПоАмортизации.НайтиСтроки(СтруктураПоискаОС);
		МассивБазы.Очистить();
		СуммаПлатежаНУ = 0;
		АмортизацияБУ = 0;
		АмортизацияНУ = 0;
		АмортизацияВР = 0;
		АмортизацияПР = 0;
		КорректировкаАмортизацииНУ = 0;
		
		Для Каждого НайденнаяСтрокаАмортизации Из НайденныеСтрокиАмортизации Цикл
			АмортизацияБУ = АмортизацияБУ + НайденнаяСтрокаАмортизации.СуммаБУ;
			АмортизацияНУ = АмортизацияНУ + НайденнаяСтрокаАмортизации.СуммаНУ;
			АмортизацияВР = АмортизацияВР + НайденнаяСтрокаАмортизации.СуммаВР;
			АмортизацияПР = АмортизацияПР + НайденнаяСтрокаАмортизации.СуммаПР;
			МассивБазы.Добавить(НайденнаяСтрокаАмортизации.СуммаНУ);
		КонецЦикла;
		
		СуммаЗадолженностиПоАренде = СтрокаТаблицыАрендныхПлатежейПоОС.ВалютнаяСуммаНачальныйОстаток 
			+ СтрокаТаблицыАрендныхПлатежейПоОС.ВалютнаяСуммаОборотКт;
			
		// Чтобы совокупная величина расходов НУ, состоящая из арендных платежей
		// и амортизации предметов лизинга, не превысила общей суммы выплат по договору, проверяем:
		//  - расходы в НУ относим только в период действия договора (пока задолженность по аренде > 0)
		//  - если амортизация превышает платежи текущего месяца, то суммы превышения относим на ВР или ПР.
		Если ПлательщикНалогаНаПрибыль Тогда
			Если СуммаЗадолженностиПоАренде > 0 Тогда
				СуммаПлатежаНУ = СтрокаТаблицыАрендныхПлатежейПоОС.СуммаПлатежаБезНДС - АмортизацияНУ;
				
				Если СуммаПлатежаНУ < 0 Тогда
					Если СтрокаТаблицыАрендныхПлатежейПоОС.СуммаПлатежаБезНДС < 0 Тогда
						// Корректировка арендных платежей в течение месяца, учитываем только ее.
						СуммаПлатежаНУ = СтрокаТаблицыАрендныхПлатежейПоОС.СуммаПлатежаБезНДС;
					Иначе
						// Превышение амортизации НУ над суммой арендных платежей.
						// Надо скорректировать сумму амортизации НУ на величину превышения.
						КорректировкаАмортизацииНУ = СуммаПлатежаНУ;

						МассивРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПлатежаНУ, МассивБазы);
						Если МассивРаспределения <> Неопределено Тогда
							Для Инд = 0 По НайденныеСтрокиАмортизации.ВГраница() Цикл
								НайденныеСтрокиАмортизации[Инд].КорректировкаАмортизацииНУ = МассивРаспределения[Инд];
							КонецЦикла;
						КонецЕсли;
						СуммаПлатежаНУ = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// На начало месяца задолженности по аренде не было и в течение месяца
				// задолженность не увеличивалась (ОборотКт), поэтому сумму такой амортизации в НУ не признаем,
				// относим на ПР.
				КорректировкаАмортизацииНУ = - АмортизацияНУ;
				Для Инд = 0 По НайденныеСтрокиАмортизации.ВГраница() Цикл
					НайденныеСтрокиАмортизации[Инд].КорректировкаАмортизацииНУ = - НайденныеСтрокиАмортизации[Инд].СуммаНУ;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		МассивБазы.Очистить();
		НайденныеСтрокиПлатежей = ТаблицаАрендныхПлатежей.НайтиСтроки(СтруктураПоискаОС);
		
		СуммаПлатежейБезНДС = 0;
		Для Каждого НайденнаяСтрокаПлатежа Из НайденныеСтрокиПлатежей Цикл
			СуммаПлатежейБезНДС = СуммаПлатежейБезНДС + НайденнаяСтрокаПлатежа.СуммаПлатежаБезНДС;
		КонецЦикла;
		
		Если НайденныеСтрокиПлатежей.Количество() = 0 ИЛИ СуммаПлатежейБезНДС = 0 Тогда
		
			// Платежи по предмету аренды уже закончились, осталась только амортизация.
			// Заполняем данные в таблице для последущей записи в регистр сведений РасчетРасходовПоАренде.
 			НоваяСтрокаРасходов = ТаблицаРасходыПоАренднымПлатежамНУ.Добавить();
 			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, СтрокаТаблицыАрендныхПлатежейПоОС);
			
			НоваяСтрокаРасходов.СуммаПлатежаБезНДС 	= 0;
			НоваяСтрокаРасходов.СуммаПлатежаНУ 	= 0;
			НоваяСтрокаРасходов.АмортизацияБУ 	= АмортизацияБУ;
			НоваяСтрокаРасходов.АмортизацияНУ 	= АмортизацияНУ;
			НоваяСтрокаРасходов.АмортизацияВР 	= АмортизацияВР;
			НоваяСтрокаРасходов.АмортизацияПР 	= АмортизацияПР;
			НоваяСтрокаРасходов.КорректировкаАмортизацииНУ = КорректировкаАмортизацииНУ;
		
		Иначе

			// Распределим вычисленную сумму расходов и амортизации между строками платежей.
			Для Каждого НайденнаяСтрокаПлатежа Из НайденныеСтрокиПлатежей Цикл
				МассивБазы.Добавить(НайденнаяСтрокаПлатежа.СуммаПлатежаБезНДС);
			КонецЦикла;
			
			МассивСуммаПлатежаНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПлатежаНУ, МассивБазы);
			МассивАмортизацияБУ	 = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(АмортизацияБУ, МассивБазы);
			МассивАмортизацияНУ	 = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(АмортизацияНУ, МассивБазы);
			МассивАмортизацияВР	 = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(АмортизацияВР, МассивБазы);
			МассивАмортизацияПР	 = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(АмортизацияПР, МассивБазы);
			МассивКорректировкаАмортизацииНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				КорректировкаАмортизацииНУ, МассивБазы);

			Для Инд = 0 По НайденныеСтрокиПлатежей.ВГраница() Цикл
				НайденныеСтрокиПлатежей[Инд].СуммаПлатежаНУ = ?(МассивСуммаПлатежаНУ = Неопределено, 0, МассивСуммаПлатежаНУ[Инд]);
				НайденныеСтрокиПлатежей[Инд].АмортизацияБУ 	= ?(МассивАмортизацияБУ = Неопределено, 0, МассивАмортизацияБУ[Инд]);
				НайденныеСтрокиПлатежей[Инд].АмортизацияНУ 	= ?(МассивАмортизацияНУ = Неопределено, 0, МассивАмортизацияНУ[Инд]);
				НайденныеСтрокиПлатежей[Инд].АмортизацияВР 	= ?(МассивАмортизацияВР = Неопределено, 0, МассивАмортизацияВР[Инд]);
				НайденныеСтрокиПлатежей[Инд].АмортизацияПР 	= ?(МассивАмортизацияПР = Неопределено, 0, МассивАмортизацияПР[Инд]);
				НайденныеСтрокиПлатежей[Инд].КорректировкаАмортизацииНУ = ?(МассивКорректировкаАмортизацииНУ = Неопределено, 
					0, МассивКорректировкаАмортизацииНУ[Инд]);
			КонецЦикла;
		
			// Относим платежи на расходы пропорционально коэффициентам.
			Для Каждого НайденнаяСтрокаПлатежа Из НайденныеСтрокиПлатежей Цикл
			
				СтруктураПоискаСпособовОтражения.Ссылка = НайденнаяСтрокаПлатежа.СпособОтраженияРасходовПоАренднымПлатежам;
				
				НайденныеСтрокиСпособовОтражения = ТаблицаСпособовОтраженияРасходов.НайтиСтроки(СтруктураПоискаСпособовОтражения);
				Если НайденныеСтрокиСпособовОтражения.Количество() = 0 Тогда
					// Способы не найдены (например, для организаций на УСН их в принципе нет)
					// создадим одну строку на общую сумму.
					НоваяСтрокаРасходов = ТаблицаРасходыПоАренднымПлатежамНУ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, НайденнаяСтрокаПлатежа);

					Продолжить;
				КонецЕсли;
				
				МассивБазы.Очистить();
				Для Каждого НайденнаяСтрокаСпособаОтражения Из НайденныеСтрокиСпособовОтражения Цикл
					МассивБазы.Добавить(НайденнаяСтрокаСпособаОтражения.Коэффициент);
				КонецЦикла;

				МассивСуммаПлатежаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.СуммаПлатежаБезНДС, МассивБазы);
				МассивСуммаПлатежаНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.СуммаПлатежаНУ, МассивБазы);
				МассивАмортизацияБУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.АмортизацияБУ, МассивБазы);
				МассивАмортизацияНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.АмортизацияНУ, МассивБазы);
				МассивАмортизацияВР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.АмортизацияВР, МассивБазы);
				МассивАмортизацияПР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.АмортизацияПР, МассивБазы);
				МассивКорректировкаАмортизацииНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					НайденнаяСтрокаПлатежа.КорректировкаАмортизацииНУ, МассивБазы);
				
				Для Инд = 0 По НайденныеСтрокиСпособовОтражения.ВГраница() Цикл
					НоваяСтрокаРасходов = ТаблицаРасходыПоАренднымПлатежамНУ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, НайденнаяСтрокаПлатежа);
					НоваяСтрокаРасходов.СчетРасходовПоАренднымПлатежам 			= НайденныеСтрокиСпособовОтражения[Инд].СчетЗатрат;
					НоваяСтрокаРасходов.ПодразделениеРасходовПоАренднымПлатежам = НайденныеСтрокиСпособовОтражения[Инд].ПодразделениеОрганизации;
					НоваяСтрокаРасходов.СубконтоРасходовПоАренднымПлатежам1		= НайденныеСтрокиСпособовОтражения[Инд].Субконто1;
					НоваяСтрокаРасходов.СубконтоРасходовПоАренднымПлатежам2		= НайденныеСтрокиСпособовОтражения[Инд].Субконто2;
					НоваяСтрокаРасходов.СубконтоРасходовПоАренднымПлатежам3		= НайденныеСтрокиСпособовОтражения[Инд].Субконто3;
					
					НоваяСтрокаРасходов.СуммаПлатежаБезНДС 	= ?(МассивСуммаПлатежаБезНДС = Неопределено, 0, МассивСуммаПлатежаБезНДС[Инд]);
					НоваяСтрокаРасходов.СуммаПлатежаНУ 	= ?(МассивСуммаПлатежаНУ = Неопределено, 0, МассивСуммаПлатежаНУ[Инд]);
					НоваяСтрокаРасходов.АмортизацияБУ 	= ?(МассивАмортизацияБУ = Неопределено, 0, МассивАмортизацияБУ[Инд]);
					НоваяСтрокаРасходов.АмортизацияНУ 	= ?(МассивАмортизацияНУ = Неопределено, 0, МассивАмортизацияНУ[Инд]);
					НоваяСтрокаРасходов.АмортизацияВР 	= ?(МассивАмортизацияВР = Неопределено, 0, МассивАмортизацияВР[Инд]);
					НоваяСтрокаРасходов.АмортизацияПР 	= ?(МассивАмортизацияПР = Неопределено, 0, МассивАмортизацияПР[Инд]);
					НоваяСтрокаРасходов.КорректировкаАмортизацииНУ = ?(МассивКорректировкаАмортизацииНУ = Неопределено, 0, 
						МассивКорректировкаАмортизацииНУ[Инд]);
				КонецЦикла; // Для Инд = 0 По НайденныеСтрокиСпособовОтражения.ВГраница() Цикл
				
			КонецЦикла; // Для Каждого НайденнаяСтрокаПлатежа Из НайденныеСтрокиПлатежей Цикл
		
		КонецЕсли; // Если НайденныеСтрокиПлатежей.Количество() = 0 Тогда
		
	КонецЦикла;	
	
	Возврат ПараметрыРасходовПоАренднымПлатежам;

КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоАренднымПлатежамНУ(ТаблицаОС, ТаблицаРеквизиты, ТаблицаЗатрат)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаЗатратПоАмортизации
	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета,"         // <СправочникСсылка.ОсновныеСредства>
	+ "СчетАмортизации,"     // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетЗатрат,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"           // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"           // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"           // <ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные>
	+ "Подразделение,"       // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПодразделениеЗатрат," // <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СпособПоступления,"   // <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "Контрагент,"          // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"  // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СуммаБУ,"             // <Число(15, 2)>
	+ "СуммаНУ,"             // <Число(15, 2)>
	+ "СуммаВР,"             // <Число(15, 2)>
	+ "СуммаПР";             // <Число(15, 2)>
	
	Параметры.Вставить("ТаблицаЗатрат",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗатрат, СписокОбязательныхКолонок));
		
	Параметры.ТаблицаЗатрат.Колонки.ОбъектУчета.Имя = "ОсновноеСредство";
	Параметры.ТаблицаЗатрат.Колонки.Добавить("КорректировкаАмортизацииНУ",
		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "ИмяСписка,"        // <Строка, 0>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "Регистратор,"      // <ДокументСсылка.*>
	+ "ДатаРасчета,"      // <Дата>
	+ "Содержание,"       // <Строка, 0>
	+ "ВыдаватьСообщения" // <Булево>
	; 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьПустуюТаблицуРасходыПоАренднымПлатежамНУ()

	ОписаниеТиповЧисло15_2     = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТиповСубконто      = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ОписаниеТиповПодразделения = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ОписаниеТиповХозрасчетный  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");

	ТаблицаРасходыПоАренднымПлатежамНУ = Новый ТаблицаЗначений;
	
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("ОсновноеСредство",
		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("Контрагент",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("ДоговорКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("Подразделение",
		ОписаниеТиповПодразделения);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("ВалютаВзаиморасчетов",
		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СчетРасходовПоАренднымПлатежам",
		ОписаниеТиповХозрасчетный);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СчетРасчетовСКонтрагентом",
		ОписаниеТиповХозрасчетный);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СчетЗадолженностиПоАренде",
		ОписаниеТиповХозрасчетный);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("ПодразделениеРасходовПоАренднымПлатежам",
		ОписаниеТиповПодразделения);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СубконтоРасходовПоАренднымПлатежам1", 
		ОписаниеТиповСубконто);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СубконтоРасходовПоАренднымПлатежам2",
		ОписаниеТиповСубконто);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СубконтоРасходовПоАренднымПлатежам3",
		ОписаниеТиповСубконто);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("ДокументРасчетовСКонтрагентом",
		ОписаниеТиповСубконто);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("АмортизацияБУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("АмортизацияНУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("АмортизацияВР",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("АмортизацияПР",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("КорректировкаАмортизацииНУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СуммаПлатежаБезНДС",
		ОписаниеТиповЧисло15_2);
	ТаблицаРасходыПоАренднымПлатежамНУ.Колонки.Добавить("СуммаПлатежаНУ",
		ОписаниеТиповЧисло15_2);
		
	Возврат ТаблицаРасходыПоАренднымПлатежамНУ;
	
КонецФункции

Функция ПодготовитьТаблицуАрендныхПлатежей(ТаблицаОС, Реквизиты, Отказ)

	ТаблицаАрендныхПлатежей = ПолучитьПустуюТаблицуАрендныхПлатежей();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Если ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("Период", Реквизиты.Период);
		Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Иначе
		Запрос.УстановитьПараметр("Период", КонецМесяца(Реквизиты.Период));
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе();
	КонецЕсли;
	Запрос.Выполнить();

	// Определяем суммы арендных платежей без НДС из проводок вида Дт 76.07.1,76.27.1,76.37.1 - Кт 60,76 (с поставщиком)
	// по одному и тому же контрагенту и договору в Дт и Кт.
	
	МассивСчетовАрендныеОбязательства = Новый Массив;
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);    // 76.07.1
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал); // 76.27.1
	МассивСчетовАрендныеОбязательства.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);  // 76.37.1
	
	МассивСчетовЛизинговыеПлатежи = Новый Массив;
	МассивСчетовЛизинговыеПлатежи.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);     // 60
	МассивСчетовЛизинговыеПлатежи.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // 76
	
	МассивСчетовНДСпоАренднымОбязательствам = Новый Массив;
	МассивСчетовНДСпоАренднымОбязательствам.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);   // 76.07.9
	МассивСчетовНДСпоАренднымОбязательствам.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ); // 76.37.9
	
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("МассивСчетовАрендныеОбязательства", МассивСчетовАрендныеОбязательства);
	Запрос.УстановитьПараметр("МассивСчетовЛизинговыеПлатежи", МассивСчетовЛизинговыеПлатежи);
	Запрос.УстановитьПараметр("МассивСчетовНДСпоАренднымОбязательствам", МассивСчетовНДСпоАренднымОбязательствам);
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	
	Если ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("КонецПериода", Реквизиты.Период);
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СуммаНУКт,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Регистратор
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение КАК ОсновноеСредство,
	|	СУММА(Проводки.СуммаНУКт) КАК Сумма
	|ПОМЕСТИТЬ ПризнаноРасходовПоДокументу
	|ИЗ
	|	Проводки КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Проводки.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Проводки.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Проводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПризнаноРасходовОбороты.Субконто1 КАК ОсновноеСредство,
	|	ПризнаноРасходовОбороты.СуммаНУОборотКт КАК Сумма
	|ПОМЕСТИТЬ ПризнаноРасходовЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета),
	|			,
	|			) КАК ПризнаноРасходовОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаПериод.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗаПериод.Сумма - ЕСТЬNULL(ПоДокументу.Сумма, 0) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПризнаноРасходов
	|ИЗ
	|	ПризнаноРасходовЗаПериод КАК ЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнаноРасходовПоДокументу КАК ПоДокументу
	|		ПО ЗаПериод.ОсновноеСредство = ПоДокументу.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПризнаноРасходовПоДокументу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПризнаноРасходовЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаРасчетовСПоставщиком
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовЛизинговыеПлатежи)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовНДСпоАренднымОбязательствам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Хозрасчетный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК СчетЗадолженностиПоАренде,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
	|	КОНЕЦ КАК ВалютнаяСуммаНачальныйОстаток,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|	КОНЕЦ КАК ВалютнаяСуммаОборотДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|	КОНЕЦ КАК ВалютнаяСуммаОборотКт
	|ПОМЕСТИТЬ ВТ_ЗадолженностьПоАренде
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериодаГраница, , , Счет В (&МассивСчетовАрендныеОбязательства), &ВидыСубконтоКонтрагентыДоговоры, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетЗадолженностиПоАренде,
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетРасчетовСКонтрагентом,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОборотыДтКт.ПодразделениеКт КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК ДокументРасчетовСКонтрагентом,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаПлатежаБезНДС,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СчетКт.Валютный
	|			ТОГДА ХозрасчетныйОборотыДтКт.ВалютаКт
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_АрендныеПлатежи
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериодаГраница,
	|			,
	|			СчетДт В (&МассивСчетовАрендныеОбязательства),
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			СчетКт В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаРасчетовСПоставщиком.Ссылка
	|				ИЗ
	|					ВТ_СчетаРасчетовСПоставщиком КАК ВТ_СчетаРасчетовСПоставщиком),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|	И ХозрасчетныйОборотыДтКт.СубконтоДт2 = ХозрасчетныйОборотыДтКт.СубконтоКт2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	СчетЗадолженностиПоАренде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ДоговорКонтрагента,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ ВТ_ОСвАренде
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)
	|				И СпособПоступления = ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга)) КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.СпособОтраженияРасходовПоАренднымПлатежам
	|ПОМЕСТИТЬ ВТ_СпособыОтраженияРасходовПоАренднымПлатежамНалоговыйУчет
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗадолженностьПоАренде.СчетЗадолженностиПоАренде КАК СчетЗадолженностиПоАренде,
	|	ВТ_ЗадолженностьПоАренде.Контрагент КАК Контрагент,
	|	ВТ_ЗадолженностьПоАренде.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ВТ_ЗадолженностьПоАренде.ВалютнаяСуммаНачальныйОстаток, 0) КАК ВалютнаяСуммаНачальныйОстаток,
	|	ЕСТЬNULL(ВТ_ЗадолженностьПоАренде.ВалютнаяСуммаОборотДт, 0) КАК ВалютнаяСуммаОборотДт,
	|	ЕСТЬNULL(ВТ_ЗадолженностьПоАренде.ВалютнаяСуммаОборотКт, 0) КАК ВалютнаяСуммаОборотКт,
	|	ВТ_АрендныеПлатежи.СчетРасчетовСКонтрагентом КАК СчетРасчетовСКонтрагентом,
	|	ВТ_АрендныеПлатежи.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВТ_АрендныеПлатежи.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВТ_АрендныеПлатежи.ДокументРасчетовСКонтрагентом, Значение(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)) КАК ДокументРасчетовСКонтрагентом,
	|	ВТ_ОСвАренде.ОсновноеСредство КАК ОсновноеСредство,
	|	ВТ_ОСвАренде.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ВТ_ОСвАренде.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ВТ_АрендныеПлатежи.СуммаПлатежаБезНДС, 0) КАК СуммаПлатежаБезНДС,
	|	ЕСТЬNULL(ВТ_СпособыОтраженияРасходовПоАренднымПлатежамНалоговыйУчет.СпособОтраженияРасходовПоАренднымПлатежам, ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)) КАК СпособОтраженияРасходовПоАренднымПлатежам,
	|	ЕСТЬNULL(ВТ_ПризнаноРасходов.Сумма, 0) КАК ПризнаноРасходовСумма
	|ИЗ
	|	ВТ_ЗадолженностьПоАренде КАК ВТ_ЗадолженностьПоАренде
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АрендныеПлатежи КАК ВТ_АрендныеПлатежи
	|		ПО ВТ_ЗадолженностьПоАренде.СчетЗадолженностиПоАренде = ВТ_АрендныеПлатежи.СчетЗадолженностиПоАренде
	|			И ВТ_ЗадолженностьПоАренде.Контрагент = ВТ_АрендныеПлатежи.Контрагент
	|			И ВТ_ЗадолженностьПоАренде.ДоговорКонтрагента = ВТ_АрендныеПлатежи.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОСвАренде КАК ВТ_ОСвАренде
	|		ПО ВТ_ЗадолженностьПоАренде.Контрагент = ВТ_ОСвАренде.Контрагент
	|			И ВТ_ЗадолженностьПоАренде.ДоговорКонтрагента = ВТ_ОСвАренде.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпособыОтраженияРасходовПоАренднымПлатежамНалоговыйУчет КАК ВТ_СпособыОтраженияРасходовПоАренднымПлатежамНалоговыйУчет
	|		ПО (ВТ_ОСвАренде.ОсновноеСредство = ВТ_СпособыОтраженияРасходовПоАренднымПлатежамНалоговыйУчет.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПризнаноРасходов КАК ВТ_ПризнаноРасходов
	|		ПО (ВТ_ОСвАренде.ОсновноеСредство = ВТ_ПризнаноРасходов.ОсновноеСредство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	СчетЗадолженностиПоАренде,
	|	ВТ_АрендныеПлатежи.ВалютаВзаиморасчетов,
	|	Подразделение,
	|	СчетРасчетовСКонтрагентом,
	|	ДокументРасчетовСКонтрагентом,
	|	ОсновноеСредство";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаАрендныхПлатежей;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЕстьДанные = Выборка.Следующий();
	
	ВременнаяТаблицаАрендныхПлатежей = ТаблицаАрендныхПлатежей.СкопироватьКолонки();

	Пока ЕстьДанные Цикл
		
		ТекущийСчетЗадолженностиПоАренде     = Выборка.СчетЗадолженностиПоАренде;
		ТекущийКонтрагент                    = Выборка.Контрагент;
		ТекущийДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		ТекущаяВалютаВзаиморасчетов          = Выборка.ВалютаВзаиморасчетов;
		ТекущееПодразделение                 = Выборка.Подразделение;
		ТекущийСчетРасчетовСКонтрагентом     = Выборка.СчетРасчетовСКонтрагентом;
		ТекущийДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		СуммаПлатежаБезНДС                   = Выборка.СуммаПлатежаБезНДС;
		ВалютнаяСуммаНачальныйОстаток        = Выборка.ВалютнаяСуммаНачальныйОстаток;
		ВалютнаяСуммаОборотКт                = Выборка.ВалютнаяСуммаОборотКт;
	
		Если Выборка.ПризнаноРасходовСумма <> 0 Тогда
			ЕстьДанные = Выборка.Следующий();
			Продолжить;
		КонецЕсли;
		
		// Проверка заполнения таблицы
		Если НЕ ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
			
			Если ТаблицаОС.Количество() = 0 Тогда
			
				ШаблонСообщения = НСтр("ru = 'Не определен предмет аренды для отражения расходов "
					+ " по арендным платежам в налоговом учете для ""%1"" по ""%2"". "
					+ "Расходы не будут отражены в налоговом учете.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
					Выборка.Контрагент, 
					Выборка.ДоговорКонтрагента);

				// Выводим сообщение пользователю по текущему объекту, 
				// но не прерываем выполнение всей процедуры.
				БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, 
					Выборка.ДоговорКонтрагента, , Неопределено);
					
			КонецЕсли;
				
			ЕстьДанные = Выборка.Следующий();
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.СпособОтраженияРасходовПоАренднымПлатежам) Тогда
			ШаблонСообщения = НСтр("ru = 'Не определен способ отражения расходов "
				+ " по арендным платежам в налоговом учете для ""%1"" по ""%2"", "
				+ " предмет аренды ""%3"" (инвентарный номер ""%4""). "
				+ "Расходы не будут отражены в налоговом учете.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
				Выборка.Контрагент, 
				Выборка.ДоговорКонтрагента, 
				Выборка.ОсновноеСредство, 
				Выборка.ИнвентарныйНомер);

			// Выводим сообщение пользователю по текущему объекту, 
			// но не прерываем выполнение всей процедуры.
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, 
				Выборка.ОсновноеСредство, , Неопределено);
				
			ЕстьДанные = Выборка.Следующий();
			Продолжить;
		КонецЕсли;
		
		Если (ВалютнаяСуммаНачальныйОстаток + ВалютнаяСуммаОборотКт = 0)
			И СуммаПлатежаБезНДС <> 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'По договору ""%1"" c ""%2"" отражено начисление"
				+ " арендного платежа в сумме %3 руб., но кредиторской задолженности по счету %4"
				+ " на начало месяца и кредитового оборота в течение месяца нет."
				+ " Расходы по арендному платежу не будут отражены в налоговом учете.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
				Выборка.ДоговорКонтрагента, 
				Выборка.Контрагент,
				Выборка.СуммаПлатежаБезНДС, 
				Выборка.СчетЗадолженностиПоАренде);

			// Выводим сообщение пользователю по текущему объекту, 
			// но не прерываем выполнение всей процедуры.
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, 
				Выборка.ДокументРасчетовСКонтрагентом, , Неопределено);
			ЕстьДанные = Выборка.Следующий();
			Продолжить;
			
		КонецЕсли;
		
		// Распределим сумма платежа между предметами аренды по договору 
		// пропорционально их первоначальной стоимости.
		ВременнаяТаблицаАрендныхПлатежей.Очистить();
		
		Пока ЕстьДанные
			И Выборка.СчетЗадолженностиПоАренде     = ТекущийСчетЗадолженностиПоАренде
			И Выборка.Контрагент                    = ТекущийКонтрагент
			И Выборка.ДоговорКонтрагента            = ТекущийДоговорКонтрагента
			И Выборка.ВалютаВзаиморасчетов          = ТекущаяВалютаВзаиморасчетов
			И Выборка.Подразделение                 = ТекущееПодразделение
			И Выборка.СчетРасчетовСКонтрагентом     = ТекущийСчетРасчетовСКонтрагентом
			И Выборка.ДокументРасчетовСКонтрагентом = ТекущийДокументРасчетовСКонтрагентом Цикл
			
			СтрокаТаблицы = ВременнаяТаблицаАрендныхПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			
			ЕстьДанные = Выборка.Следующий();
		КонецЦикла;
		
		Если ВременнаяТаблицаАрендныхПлатежей.Количество() > 1 Тогда
			МассивПервоначальныхСтоимостей = ВременнаяТаблицаАрендныхПлатежей.ВыгрузитьКолонку("ПервоначальнаяСтоимость");
			МассивСуммаПлатежаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПлатежаБезНДС, 
				МассивПервоначальныхСтоимостей);
			МассивВалютнаяСуммаНачальныйОстаток = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВалютнаяСуммаНачальныйОстаток, 
				МассивПервоначальныхСтоимостей);
			МассивВалютнаяСуммаОборотКт = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ВалютнаяСуммаОборотКт, 
				МассивПервоначальныхСтоимостей);

			Для Инд = 0 По ВременнаяТаблицаАрендныхПлатежей.Количество() - 1 Цикл
				СтрокаТаблицы = ВременнаяТаблицаАрендныхПлатежей[Инд];
				СтрокаТаблицы.СуммаПлатежаБезНДС = ?(МассивСуммаПлатежаБезНДС = Неопределено, 
					0, МассивСуммаПлатежаБезНДС[Инд]);
				СтрокаТаблицы.ВалютнаяСуммаНачальныйОстаток = ?(МассивВалютнаяСуммаНачальныйОстаток = Неопределено,
					0, МассивВалютнаяСуммаНачальныйОстаток[Инд]);
				СтрокаТаблицы.ВалютнаяСуммаОборотКт = ?(МассивВалютнаяСуммаОборотКт = Неопределено,
					0, МассивВалютнаяСуммаОборотКт[Инд]);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ВременнаяТаблицаАрендныхПлатежей Цикл
			НоваяСтрока = ТаблицаАрендныхПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла; 

	Возврат ТаблицаАрендныхПлатежей;

КонецФункции

Функция ПолучитьПустуюТаблицуАрендныхПлатежей()

	ТаблицаАрендныхПлатежей = Новый ТаблицаЗначений;

	ОписаниеТиповЧисло15_2 = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);

	ТаблицаАрендныхПлатежей.Колонки.Добавить("Контрагент",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ДоговорКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ОсновноеСредство",
		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАрендныхПлатежей.Колонки.Добавить("СчетЗадолженностиПоАренде",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("СчетРасчетовСКонтрагентом",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ДокументРасчетовСКонтрагентом",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ВалютаВзаиморасчетов",
		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ПервоначальнаяСтоимость",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ВалютнаяСуммаНачальныйОстаток",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("ВалютнаяСуммаОборотКт", 
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("СуммаПлатежаБезНДС",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("СуммаПлатежаНУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("АмортизацияБУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("АмортизацияНУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("АмортизацияВР",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("АмортизацияПР",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("КорректировкаАмортизацииНУ",
		ОписаниеТиповЧисло15_2);
	ТаблицаАрендныхПлатежей.Колонки.Добавить("СпособОтраженияРасходовПоАренднымПлатежам",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));

	Возврат ТаблицаАрендныхПлатежей;

КонецФункции

Процедура СформироватьДвиженияРасходыПоАренднымПлатежамНУиКорректировкиАмортизации(
				ПараметрыРасходыПоАреднымПлатежамНУ, Движения, Отказ) Экспорт

	СформироватьДвиженияРасходыПоАренднымПлатежамНУ(
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРасходыПоАренднымПлатежамНУ,
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты,
		Движения,
		Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СформироватьДвиженияКорректировкиАмортизацииПоАренднымПлатежамНУ(
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаКорректировкаАмортизации,
		ПараметрыРасходыПоАреднымПлатежамНУ.ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияРасходыПоАренднымПлатежамНУ(ТаблицаРасходыПоАренднымПлатежамНУ, 
			ТаблицаРеквизиты, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаРасходыПоАренднымПлатежамНУ) Тогда
		Возврат;
	КонецЕсли;			
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасходыПоАренднымПлатежамНУ(ТаблицаРасходыПоАренднымПлатежамНУ, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаРасходыПоАренднымПлатежамНУ Цикл

		Если СтрокаТаблицы.СуммаПлатежаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      	= Реквизиты.Период;
		Проводка.Организация 	= Реквизиты.Организация;

		Проводка.Содержание  	= "Признание в расходах лизинговых платежей";

		Проводка.СчетДт 		= СтрокаТаблицы.СчетРасходовПоАренднымПлатежам;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, 
			СтрокаТаблицы.СубконтоРасходовПоАренднымПлатежам1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, 
			СтрокаТаблицы.СубконтоРасходовПоАренднымПлатежам2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, 
			СтрокаТаблицы.СубконтоРасходовПоАренднымПлатежам3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеРасходовПоАренднымПлатежам;
		КонецЕсли;

		Проводка.СчетКт 		= ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", 
			СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаПлатежаНУ;
			Проводка.СуммаВРДт = - СтрокаТаблицы.СуммаПлатежаНУ;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.СуммаПлатежаНУ;
			Проводка.СуммаВРКт = - СтрокаТаблицы.СуммаПлатежаНУ;
		КонецЕсли;
	
		ОпределитьПостоянныеРазницыВРасходах(Проводка, ПоддержкаПБУ18);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
				
КонецПроцедуры

Функция ПодготовитьПараметрыРасходыПоАренднымПлатежамНУ(ТаблицаРасходыПоАренднымПлатежамНУ, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "ИмяСписка,"        // <Строка, 0>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "Регистратор,"      // <ДокументСсылка.*>
	+ "ДатаРасчета,"      // <Дата>
	+ "Содержание,"       // <Строка, 0>
	+ "ВыдаватьСообщения" // <Булево>
	; 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.ТаблицаРасходыПоАренднымПлатежамНУ

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                              // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"                      // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "Подразделение,"                           // <Ссылка на справочник подразделений>
	+ "СчетРасходовПоАренднымПлатежам,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетРасчетовСКонтрагентом,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетЗадолженностиПоАренде,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "ОсновноеСредство,"                        // <СправочникСсылка.ОсновныеСредства>
	+ "ВалютаВзаиморасчетов,"                    // <Справочник.Валюты>
	+ "ПодразделениеРасходовПоАренднымПлатежам," // <Ссылка на справочник подразделений>
	+ "СубконтоРасходовПоАренднымПлатежам1,"     // субконто
	+ "СубконтоРасходовПоАренднымПлатежам2,"     // субконто
	+ "СубконтоРасходовПоАренднымПлатежам3,"     // субконто
	+ "ДокументРасчетовСКонтрагентом,"           // <ДокументСсылка.*>
	+ "СуммаПлатежаНУ"                           // <Число(15, 2)>
	; 

	Параметры.Вставить("ТаблицаРасходыПоАренднымПлатежамНУ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасходыПоАренднымПлатежамНУ, 
			СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКорректировкиАмортизацииПоАренднымПлатежамНУ(ТаблицаКорректировкиАмортизации, 
				ТаблицаРеквизиты, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаКорректировкиАмортизации) Тогда
		Возврат;
	КонецЕсли;
				
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкиАмортизацииПоАренднымПлатежамНУ(ТаблицаКорректировкиАмортизации, 
		ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаКорректировкиАмортизации Цикл

		Если СтрокаТаблицы.КорректировкаАмортизацииНУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Дт <Счет затрат> - Кт <Счет амортизации> на суммы НУ и ВР.
		// Корректируем только отражение расходов по амортизации (Дт), 
		// а не саму накопленную амортизацию (НУ), чтобы остатки по НУ, ВР, ПР
		// по 01 и 02 взаимно закрывались.

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      	= Реквизиты.Период;
		Проводка.Организация 	= Реквизиты.Организация;

		Проводка.Содержание  	= "Коррректировка расходов по амортизации на величину превышения над лизинговыми платежами";

		Проводка.СчетДт 		= СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, 
			СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, 
			СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, 
			СтрокаТаблицы.Субконто3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;

		Проводка.СчетКт 		= СтрокаТаблицы.СчетАмортизации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", 
			СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.КорректировкаАмортизацииНУ;
			Проводка.СуммаВРДт = - СтрокаТаблицы.КорректировкаАмортизацииНУ;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.КорректировкаАмортизацииНУ;
			Проводка.СуммаВРКт = - СтрокаТаблицы.КорректировкаАмортизацииНУ;
		КонецЕсли;
		
		ОпределитьПостоянныеРазницыВРасходах(Проводка, ПоддержкаПБУ18);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
				
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкиАмортизацииПоАренднымПлатежамНУ(ТаблицаКорректировкиАмортизации, 
				ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      	// <Дата>
	+ "ИмяСписка,"   	// <Строка, 0>
	+ "Организация," 	// <СправочникСсылка.Организации>
	+ "Регистратор," 	// <ДокументСсылка.*>
	+ "ДатаРасчета," 	// <Дата>
	+ "Содержание," 	// <Строка, 0>
	+ "ВыдаватьСообщения" 	// <Булево>
	; 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаКорректировкиАмортизации

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"      		// <СправочникСсылка.ОсновныеСредства>
	+ "СчетЗатрат,"   				// <ПланСчетовСсылка.Хозрасчетный>
	+ "ПодразделениеЗатрат," 		// <Ссылка на справочник подразделений>
	+ "Субконто1," 					// субконто
	+ "Субконто2," 					// субконто
	+ "Субконто3," 					// субконто
	+ "СчетАмортизации," 			// <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение," 				// <Ссылка на справочник подразделений>
	+ "КорректировкаАмортизацииНУ" 	// <Число(15, 2)>
	; 

	Параметры.Вставить("ТаблицаКорректировкиАмортизации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаКорректировкиАмортизации, 
			СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРасчетРасходовПоАренде(ТаблицаРасходыПоАренднымПлатежамНУ, 
				ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходыПоАренднымПлатежамНУ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
				
	Параметры = ПодготовитьПараметрыРасчетРасходовПоАренде(ТаблицаРасходыПоАренднымПлатежамНУ, 
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаРасходыПоАренднымПлатежамНУ.Свернуть(
		"ОсновноеСредство, Контрагент, ДоговорКонтрагента",
		"АмортизацияБУ, АмортизацияНУ, АмортизацияВР, АмортизацияПР, КорректировкаАмортизацииНУ,
		|СуммаПлатежаБезНДС, СуммаПлатежаНУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасходыПоАренднымПлатежамНУ Цикл
	
		Если СтрокаТаблицы.АмортизацияБУ = 0
			И СтрокаТаблицы.АмортизацияНУ = 0
			И СтрокаТаблицы.АмортизацияВР = 0
			И СтрокаТаблицы.АмортизацияПР = 0
			И СтрокаТаблицы.КорректировкаАмортизацииНУ = 0
			И СтрокаТаблицы.СуммаПлатежаБезНДС = 0
			И СтрокаТаблицы.СуммаПлатежаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Движение = Движения.РасчетРасходовПоАренде.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.ПериодРасчета 	= Реквизиты.ДатаРасчета;
		Движение.Организация	= Реквизиты.Организация;
		
	КонецЦикла;
				
	Движения.РасчетРасходовПоАренде.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасчетРасходовПоАренде(ТаблицаРасходыПоАренднымПлатежамНУ, 
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      	// <Дата>
	+ "Организация," 	// <СправочникСсылка.Организации>
	+ "Регистратор," 	// <ДокументСсылка.*>
	+ "ДатаРасчета" 	// <Дата>
	; 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));


	// Подготовка таблицы Параметры.ТаблицаРасходыПоАренднымПлатежамНУ

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"      	// <СправочникСсылка.Контрагенты>
	+ "Контрагент,"      		// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"   	// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "АмортизацияБУ," 			// <Число(15, 2)>
	+ "АмортизацияНУ," 			// <Число(15, 2)>
	+ "АмортизацияВР," 			// <Число(15, 2)>
	+ "АмортизацияПР," 			// <Число(15, 2)>
	+ "СуммаПлатежаБезНДС," 	// <Число(15, 2)>
	+ "СуммаПлатежаНУ," 		// <Число(15, 2)>
	+ "КорректировкаАмортизацииНУ" // <Число(15, 2)>
	; 

	Параметры.Вставить("ТаблицаРасходыПоАренднымПлатежамНУ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасходыПоАренднымПлатежамНУ, 
			СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#Область СчетаУчетаАрендныхОбязательств

Функция СчетаУчетаАрендныхОбязательств() Экспорт
	
	МассивСчетов = Новый Массив;
	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);
	
	Возврат МассивСчетов;
	
КонецФункции

Функция СчетУчетаАрендныхОбязательств(Счет) Экспорт
	
	Если Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательства
	 ИЛИ Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал
	 ИЛИ Счет = ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// ПРОЧЕЕ

Процедура ОпределитьСчетаУчетаОС(ТаблицаОС, Период, Организация, ИмяКолонки = "Номенклатура") Экспорт

	Если ТаблицаОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС", ТаблицаОС.ВыгрузитьКолонку(ИмяКолонки));
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОС";
	РезультатЗапрос = Запрос.Выполнить();
	ТаблицаСчетов = РезультатЗапрос.Выгрузить();
	ТаблицаСчетов.Индексы.Добавить("ОсновноеСредство");
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		НайденнаяСтрока = ТаблицаСчетов.Найти(СтрокаОС[ИмяКолонки], "ОсновноеСредство");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаОС.СчетУчета = НайденнаяСтрока.СчетУчета;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то сумма НУ по дебету преобразуется в сумму ПР по дебету
//
Функция ОпределитьПостоянныеРазницыВРасходах(Проводка, ПоддержкаПБУ18) Экспорт
	
	Если ПоддержкаПБУ18 Тогда

		СчетДт = Проводка.СчетДт;
		Если ЗначениеЗаполнено(СчетДт) И СчетДт.НалоговыйУчет Тогда
			ЭтоНепринимаемыеРасходы = НалоговыйУчет.ОпределитьНеПринимаемыеРасходы(Проводка);

			Если ЭтоНепринимаемыеРасходы Тогда

				Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
				Проводка.СуммаНУДт = 0;
				
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецФункции

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа,
//  ИмяТабличнойЧасти - строка, имя табличной части,
//  СтруктураПолей    - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей) Экспорт

	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.НомерСтроки " + ТекстЗапроса + "
	|
	|ИЗ
	|	Документ." + ДокументОбъект.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Возваращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если Метаданные.Документы.Найти("АвизоОСВходящее") <> Неопределено Тогда 
		ДопУсловие = " И НЕ СостоянияОСОрганизаций.Регистратор ССЫЛКА Документ.АвизоОСВходящее";
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СостояниеОС", 		Состояние);
	Запрос.УстановитьПараметр("ОС",					ОсновноеСредство);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизаций.Регистратор КАК Документ,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизаций.Организация В 
		|		(ВЫБРАТЬ
		|				Организации.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.Организации КАК Организации
		|			ГДЕ
		|				(Организации.Ссылка = &ГоловнаяОрганизация
		|					ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|					ИЛИ Организации.Ссылка = &Организация)) И
		|	СостоянияОСОрганизаций.Состояние = &СостояниеОС" + ДопУсловие + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

// Функция возвращает таблицу значений с инвентарными номерами ОС.
//
// Параметры
//  ТаблицаОС   - Таблица значений со списком ОС, для которой нужно получить инвентарные номера.
//                Обязательные колонки: НомерСтроки, ОсновноеСредство
//  Организация - Организация, по которой требуется получить инвентарные номера.
//  Дата        - Дата, на которую требуется получить инвентарные номера.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с инвентарными номерами. Колонки: НомерСтроки, ОсновноеСредство, ИнвентарныйНомер
//
Функция ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС, Организация, Дата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОС", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&МассивОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();;
	
	ТаблицаРезультата = ТаблицаОС.Скопировать();
	Если ТаблицаРезультата.Колонки.Найти("ИнвентарныйНомер") = Неопределено Тогда 
		ТаблицаРезультата.Колонки.Добавить("ИнвентарныйНомер", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	КонецЕсли;
	ТаблицаРезультата.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаРезультата.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрокаЗапроса.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРезультата.ИнвентарныйНомер 	= СтрокаЗапроса.ИнвентарныйНомер;
			СтрокаРезультата.Период 			= СтрокаЗапроса.Период;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПолучитьТаблицуИнвентарныхНомеровОС()

// Функция возвращает структуру сведений об инвентарном номере ОС.
//
// Параметры
//  ОсновноеСредство - Объект основных средств, для которого требуется получить инвентарный номер.
//  Организация      - Организация, по которой требуется получить инвентарный номер.
//  Дата             - Дата, на которую требуется получить инвентарный номер.
//
// Возвращаемое значение:
//  Структура
//		ИнвентарныйНомер 	-	Инвентарный номер переданного ОС
//		Период				-   Дата и время установки 
//
Функция СведенияОбИнвентарномНомереОС(Знач ОсновноеСредство, Знач Организация, Знач Дата) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИнвентарныйНомер", 	"");
	Результат.Вставить("Период", 			'0001-01-01');

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК Период
	|	
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ИнвентарныйНомер", 	Выборка.ИнвентарныйНомер);
		Результат.Вставить("Период",			Выборка.Период);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СведенияОбИнвентарномНомереОС()

//  Функция дозаполняет табличную часть основных средств документа основными средствами
// с наименованием совпадающим с заданным основным средством. В случае отсутствия основных
// средств с подходящим наименованием, выдает сообщение об ошибке.
//
// Параметры
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС"
//  	ПолучатьИнвентарныйНомерИзКода - Флаг необходимости получения основного средства из кода 
//  		справочника (в противном случае, по данным регистра сведений). Значение по умолчанию Ложь.
//  
//  ОсновноеСредство - Основное средство по наименованию которого требуется дозаполнить табличную часть.
//
// Возвращаемое значение:
//   Булево - Истина - в табличную часть добавлены строки с подходящими ОС, Ложь - подходящих ОС не найдено
//
Функция ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(ПараметрыФормы, ОсновноеСредство) Экспорт
	
	Форма = ПараметрыФормы.Форма;
	Объект = ПараметрыФормы.Объект;
	Если ПараметрыФормы.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = ПараметрыФормы.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	Если ПараметрыФормы.Свойство("ПолучатьИнвентарныйНомерИзКода") Тогда
		ПолучатьИнвентарныйНомерИзКода = ПараметрыФормы.ПолучатьИнвентарныйНомерИзКода;
	Иначе
		ПолучатьИнвентарныйНомерИзКода = Ложь;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = Объект[ИмяТабличнойЧасти].Выгрузить(, "ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК Код
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И (НЕ ОсновныеСредства.Ссылка В (&СписокОС))
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	Если НЕ ПолучатьИнвентарныйНомерИзКода Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
		|ПОМЕСТИТЬ ИнвентарныеНомера
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	" + ?(ПолучатьИнвентарныйНомерИзКода, "ТаблицаОС.Код", "ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, """")") + " КАК ИнвентарныйНомер
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" + ?(ПолучатьИнвентарныйНомерИзКода, "", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ТаблицаОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ИнвентарныйНомер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Другие элементы справочника с наименованием ""%1"" в справочнике ""Основные средства"" отсутствуют.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОсновноеСредствоНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции // ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию()

//  Процедура перезаполняет переданную коллекцию формы подобранными основными средствами.
// По основным средствам присутствовавшим в коллекции изначально, данные колонок 
// дополняются исходными.
//
// Параметр:
//  КоллекцияОС - ДанныеФормыКоллекция, отображение табличной части с основными средствами
//  	в реквизит управляемой формы. Обязатлеьно должна присутствовать колонка ОсновноеСредство.
//  
//  ВыбранноеЗначение - Структура, значение из обработчика ОбработкаВыбора полученное в результате
//  	подбора
//..
//  Вовзвращаемое значение:
//    Массив - Массив новых строк коллекции.
//
Функция ОбработатьПодборОсновныхСредств(Знач КоллекцияОС, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОСВХранилище);
	
	ИсходныеДанные = КоллекцияОС.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("ОсновноеСредство");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияОС.Очистить();
	Для каждого СтрокаТаблицыОС Из ТаблицаОС Цикл
		ЭлементКоллекции = КоллекцияОС.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицыОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицыОС);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе создает новый элемент справочника событий ОС
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытияОС.Ссылка,
	|	СобытияОС.ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|ГДЕ
	|	СобытияОС.ВидСобытияОС = &ВидСобытияОС
	|	И НЕ СобытияОС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Ссылка;
		
	Иначе
		
		НовыйОбъект = Справочники.СобытияОС.СоздатьЭлемент();
		
		НовыйОбъект.УстановитьНовыйКод();
		
		НовыйОбъект.Наименование = Строка(ВидСобытия);
		НовыйОбъект.ВидСобытияОС = ВидСобытия;
		
		НовыйОбъект.Записать();
		
		Результат = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

Функция СпособОтраженияРасходовПоАмортизации(Подразделение, Организация, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетЗатрат = УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(Организация, Период);
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	
	УчетПоНоменклатурнымГруппам = Ложь;
	Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			УчетПоНоменклатурнымГруппам = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	Если УчетПоНоменклатурнымГруппам И Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
		УчетПоНоменклатурнымГруппам = Ложь;
	КонецЕсли;
	
	УчетПоПодразделениям = Ложь;
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	Если ВестиУчетЗатратПоПодразделениям И СвойстваСчета.УчетПоПодразделениям Тогда
		УчетПоПодразделениям = Истина;
		ПодразделениеОрганизации = Подразделение;
	Иначе
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетЗатрат", СчетЗатрат);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("УчетПоНоменклатурнымГруппам", УчетПоНоменклатурнымГруппам);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Организации = Новый Массив;
	Организации.Добавить(Организация);
	Если Не УчетПоПодразделениям Тогда
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки) КАК КоличествоСтрок,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СпособыОтражения
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Организация В(&Организации)
	|	И СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат = &СчетЗатрат
	|	И СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_СпособыОтражения.Ссылка
	|ИЗ
	|	ВТ_СпособыОтражения КАК ВТ_СпособыОтражения,
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	ВТ_СпособыОтражения.КоличествоСтрок = 1
	|	И ВТ_СпособыОтражения.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация)
	|	И ВЫБОР
	|			КОГДА &УчетПоНоменклатурнымГруппам
	|				ТОГДА ВТ_СпособыОтражения.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация)";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтатьяЗатрат = Результат.СтатьяЗатрат;
		Иначе
			НоваяСтатья = Справочники.СтатьиЗатрат.СоздатьЭлемент();
	
			НоваяСтатья.УстановитьНовыйКод();
			НоваяСтатья.Наименование = НСтр("ru='Амортизация'");
			НоваяСтатья.ВидДеятельностиДляНалоговогоУчетаЗатрат =
				Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
			НоваяСтатья.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.Амортизация;
			
			НоваяСтатья.Записать();

			СтатьяЗатрат = НоваяСтатья.Ссылка;
		КонецЕсли;

		НовыйСпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		Если УчетПоПодразделениям Тогда
			НовыйСпособОтраженияРасходов.Организация = Организация;
		КонецЕсли;
		
		Наименование = НСтр("ru='Счет'");
		Способ = НовыйСпособОтраженияРасходов.Способы.Добавить();
		
		Способ.СчетЗатрат = СчетЗатрат;
		Наименование = Наименование + " " + СвойстваСчета.Код;
		
		Способ.ПодразделениеОрганизации = ПодразделениеОрганизации;
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ТекстСтроки  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеОрганизации, "Наименование");
			Наименование = Наименование + ", " + ТекстСтроки;
		Иначе
			Если ВестиУчетЗатратПоПодразделениям И СвойстваСчета.УчетПоПодразделениям Тогда
				Наименование = Наименование + ", <...>";
			КонецЕсли;
		КонецЕсли;
		
		Способ.Коэффициент = 1;
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				Способ["Субконто" + Ном] = НоменклатурнаяГруппа;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Способ["Субконто" + Ном] = СтатьяЗатрат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Способ["Субконто" + Ном]) Тогда
				Если Не (СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы 
					И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
				
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Способ["Субконто" + Ном], "Представление");
					Наименование = Наименование + ", " + ПредставлениеСубконто;
				КонецЕсли;
			Иначе
				Наименование = Наименование + ", <...>";
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйСпособОтраженияРасходов.Наименование = Наименование;
		
		НовыйСпособОтраженияРасходов.Записать();
		
		СпособОтраженияРасходов = НовыйСпособОтраженияРасходов.Ссылка;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СпособОтраженияРасходов = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
	
КонецФункции

// ЕДИНОВРЕМЕННОЕ НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ПРИ ПРИНЯТИИ К УЧЕТУ

Функция ПодготовитьТаблицуНачислениеАмортизацииПриПринятииКУчету(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизацииПриПринятииКУчету(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
		ТаблицаАмортизации = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	Иначе
		ТаблицаАмортизации = Параметры.ТаблицаПервоначальныеСведенияОС;
	КонецЕсли;
	
	ТаблицаАмортизации.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	ТаблицаАмортизации.Колонки.СуммаБУ.Имя = "СуммаАмортизацииБУ";
	ТаблицаАмортизации.Колонки.СуммаПР.Имя = "СуммаАмортизацииПР";
	
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.ЗаполнитьЗначения(
		Реквизиты.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.ЗаполнитьЗначения(
		Реквизиты.СчетНачисленияАмортизации, "СчетНачисленияАмортизации");
	
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));

	Для Каждого СтрокаОС Из ТаблицаАмортизации Цикл
		СтрокаОС.СуммаАмортизацииВР = СтрокаОС.СуммаАмортизацииБУ - СтрокаОС.СуммаАмортизацииПР;
	КонецЦикла;
	
	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = 
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
			ТаблицаАмортизации, Параметры.Реквизиты, Отказ);

	Возврат ТаблицаЗатратПоАмортизации;
	
КонецФункции

Функция ПодготовитьПараметрыНачислениеАмортизацииПриПринятииКУчету(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"  // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ,         "  // <Число, 15, 2>
	+ "СуммаПР          "; // <Число, 15, 2>

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "Подразделение,"                         // <Ссылка на справочник подразделений>
	+ "СпособНачисленияАмортизации,"           // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС> 
	+ "СпособыОтраженияРасходовПоАмортизации," // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "Регистратор,"                           // <ДокументСсылка.*>
	+ "СчетНачисленияАмортизации,"             // <ПланСчетовСсылка.Хозрасчетный>
	+ "Содержание,"                            // <Строка, 150>
	+ "ИмяСписка";                             // <Строка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура ПроверитьВозможностьПримененияСпособаНачисленияАмортизацииБУ(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозможностьПримененияСпособаНачисленияАмортизацииБУ(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		Если СтрокаОС.ГруппаОС <> Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь Тогда
			
			ТекстСообщения = НСтр("ru = 'Единовременно начислять амортизацию при принятии к бухгалтерскому учету можно только по производственному и хозяйственному инвентарю. Выберите другой способ начисления амортизации или укажите другую группу учета в основном средстве.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, Реквизиты.Регистратор, "СпособНачисленияАмортизацииБУ", "Объект", Отказ);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьПримененияСпособаНачисленияАмортизацииБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ГруппаОС,"          // <ПеречислениеСсылка.ГруппыОС>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                 // <ДокументСсылка.*>
	+ "СпособНачисленияАмортизации"; // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции
