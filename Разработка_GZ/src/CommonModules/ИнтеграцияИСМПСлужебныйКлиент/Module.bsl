#Область СлужебныйПрограммныйИнтерфейс

Процедура ПродолжитьВыполнениеОбмена(Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ПродолжитьВыполнениеОбмена(
		Неопределено, Форма.АдресРезультатаОбменаВоВременномХранилище);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст, ОповещениеПриЗавершении, ВыводитьОкноОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обмен

Процедура ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	Если РезультатОбмена.ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru='Выполняется обмен с ИС МП'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			ПараметрыОжидания.Интервал = РезультатОбмена.Ожидать;
		КонецЕсли;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
		ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ИнтеграцияИСМПСлужебныйКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	Иначе
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			
			Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОбмена);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметрыДлительнойОперации) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОбмена = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Форма                                     = ДополнительныеПараметрыДлительнойОперации.Форма;
		ОповещениеПриЗавершении                   = ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении;
		АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
		
		Если РезультатОбмена.ИзвлекатьДанныеЛогаЗапросов Тогда
			ИнтеграцияИСМПВызовСервера.ИзвлечьЛогЗапросовИзПараметровОбмена(АдресРезультатаОбменаВоВременномХранилище);
		КонецЕсли;
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			
			Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
			
		Иначе
			
			НаборДанныхДляПодписанияПоОрганизациям = Новый Соответствие;
			ДанныеДляОбновленияКлючаСессии         = ДанныеДляОбновленияКлючаСессии(РезультатОбмена);
			
			Для Каждого ЭлементДанныхОбновления Из ДанныеДляОбновленияКлючаСессии Цикл
				
				Организация          = ЭлементДанныхОбновления.Организация;
				ПараметрыЗапроса     = ЭлементДанныхОбновления.ПараметрыЗапроса;
				ПараметрыАвторизации = ЭлементДанныхОбновления.ПараметрыАвторизации;
				
				Описание = СтрШаблон(
					НСтр("ru = 'Авторизация в %1 для %2'"),
					ПараметрыЗапроса.ПредставлениеСервиса,
					ПараметрыЗапроса.Организация);
				
				Сообщение = ИнтерфейсАвторизацииИСМПСлужебныйКлиент.РезультатПодписания(
					ПараметрыЗапроса,
					Описание,
					ПараметрыАвторизации);
				
				// Для авторизации требуется прикрепленная подпись
				ПараметрыCMS = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
				ПараметрыCMS.Открепленная = Ложь;
				
				Данные = Новый Структура;
				Данные.Вставить("Данные",       ПараметрыАвторизации.Данные);
				Данные.Вставить("Сообщение",    Сообщение);
				Данные.Вставить("ПараметрыCMS", ПараметрыCMS);
				
				ПредставлениеДанных = Новый Структура;
				ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ИнтерфейсАвторизацииИСМПСлужебныйКлиент, Сообщение));
				ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Данные",        Данные);
				СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
				
				Если НаборДанныхДляПодписанияПоОрганизациям[Организация] = Неопределено Тогда
					НаборДанныхДляПодписанияПоОрганизациям.Вставить(Организация, Новый Массив);
				КонецЕсли;
				
				НаборДанныхДляПодписанияПоОрганизациям[Организация].Добавить(СтруктураДанные);
				
			КонецЦикла;
			
			Если РезультатОбмена.ТребуетсяПодписание <> Неопределено Тогда
				
				Для Каждого КлючИЗначение Из РезультатОбмена.ТребуетсяПодписание Цикл
					
					Организация = КлючИЗначение.Ключ;
					Сообщения   = КлючИЗначение.Значение;
					
					Для Каждого Сообщение Из Сообщения Цикл
						
						// Для подписания документов требуется открепленная подпись
						ПараметрыCMS = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
						ПараметрыCMS.Открепленная = Истина;
						
						Данные = Новый Структура;
						Данные.Вставить("Данные",       Сообщение.ТекстСообщенияJSON);
						Данные.Вставить("Сообщение",    Сообщение);
						Данные.Вставить("ПараметрыCMS", ПараметрыCMS);
						
						ПредставлениеДанных = Новый Структура;
						ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ИнтерфейсАвторизацииИСМПСлужебныйКлиент, Сообщение));
						ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
						
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Данные",        Данные);
						СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
						
						Если НаборДанныхДляПодписанияПоОрганизациям[Организация] = Неопределено Тогда
							НаборДанныхДляПодписанияПоОрганизациям.Вставить(Организация, Новый Массив);
						КонецЕсли;
						
						НаборДанныхДляПодписанияПоОрганизациям[Организация].Добавить(СтруктураДанные);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
				
				Для Каждого КлючИЗначение Из НаборДанныхДляПодписанияПоОрганизациям Цикл
					
					Организация              = КлючИЗначение.Ключ;
					НаборДанныхДляПодписания = КлючИЗначение.Значение;
					
					Контекст = Новый Структура;
					Контекст.Вставить("Форма",                                  Форма);
					Контекст.Вставить("Организация",                            Организация);
					Контекст.Вставить("ОповещениеПриЗавершении",                ОповещениеПриЗавершении);
					
					Контекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    НаборДанныхДляПодписанияПоОрганизациям);
					Контекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Новый Соответствие);
					Контекст.Вставить("ДоступныеСертификаты",                      РезультатОбмена.ДоступныеСертификаты);
					Контекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", АдресРезультатаОбменаВоВременномХранилище);
					
					ДоступныеСертификаты = РезультатОбмена.ДоступныеСертификаты.Получить(Организация);
					
					Подписать(
						НаборДанныхДляПодписания,
						Организация,
						ДоступныеСертификаты,
						Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
					
					Прервать;
					
				КонецЦикла;
				
			Иначе
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма",                   Форма);
				ДополнительныеПараметры.Вставить("Контекст",                Неопределено);
				ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
				
				ИнтеграцияИСМПСлужебныйКлиент.ПослеЗавершенияОбмена(
					РезультатОбмена.Изменения,
					ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

//Только для внутреннего использования.
// Вызывается из: ПослеЗавершенияОбмена.
Процедура ОткрытьРезультатВыполненияОбмена(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена.
Процедура ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	СоответствиеДокументыОснования  = Новый Соответствие;
	СоответствиеДокументыСтатусы    = Новый Соответствие;
	СоответствиеИзмененныеДокументы = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			УникальныйИдентификатор = Неопределено;
			Если ДополнительныеПараметры.Свойство("Форма") Тогда
				УникальныйИдентификатор = ДополнительныеПараметры.Форма.УникальныйИдентификатор;
			КонецЕсли;
			
			ИнтеграцияИСКлиент.СообщитьПользователюВФорму(УникальныйИдентификатор, ЭлементДанных.ТекстОшибки);
		КонецЕсли;
		
		СоответствиеДокументыОснования.Вставить(ЭлементДанных.Объект, ЭлементДанных.ДокументОснование);
		СоответствиеДокументыСтатусы.Вставить(ЭлементДанных.Объект, ЭлементДанных.НовыйСтатус);
		Если ЭлементДанных.ОбъектИзменен Тогда
			СоответствиеИзмененныеДокументы.Вставить(ЭлементДанных.Объект, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
		
		ОбъектИзменен = СоответствиеИзмененныеДокументы.Получить(КлючИЗначение.Ключ);
		Если ОбъектИзменен = Неопределено Тогда
			ОбъектИзменен = Ложь;
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",        КлючИЗначение.Ключ);
		ПараметрОповещения.Вставить("Основание",     КлючИЗначение.Значение);
		ПараметрОповещения.Вставить("ОбъектИзменен", ОбъектИзменен);
		
		Оповестить(ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(
			ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы()), ПараметрОповещения);
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры.Контекст) = Тип("ТаблицаФормы") Тогда
		
		// Выполнено действие из динамического списка
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для %1 из %2 выделенных в списке документов выполнено действие: %3'"),
			СоответствиеДокументыСтатусы.Количество(),
			ДополнительныеПараметры.Контекст.ВыделенныеСтроки.Количество(),
			ДополнительныеПараметры.ДальнейшееДействие);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие'"),,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.Контекст) Тогда
		
		// Выполнено действие из формы документа
		Для Каждого КлючИЗначение Из СоответствиеДокументыСтатусы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для документа %1 изменен статус ИС МП: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выполнено действие'"),
				ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	Иначе
		
		// Выполнен обмен с ЕГАИС
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыОснования", СоответствиеДокументыОснования);
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыСтатусы",   СоответствиеДокументыСтатусы);
		ДополнительныеПараметрыОповещения.Вставить("Изменения",                      Изменения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменено объектов: %1'"), СоответствиеДокументыСтатусы.Количество());
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнен обмен с ИС МП'"),
			Новый ОписаниеОповещения("ОткрытьРезультатВыполненияОбмена", ИнтеграцияИСМПСлужебныйКлиент, ДополнительныеПараметрыОповещения),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	//ПараметрыПриложения.Удалить("ЕГАИС.ДанныеСеансаОбмена");
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗавершенияДлительнойОперации() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма");
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Функция ПараметрыЗавершенияОбмена() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМП";
	
КонецФункции

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат "ИС МП";
	
КонецФункции

Функция ДанныеДляОбновленияКлючаСессии(РезультатОбмена)
	
	ВозвращаемоеЗначение = Новый Массив();
	
	Если РезультатОбмена.ТребуетсяОбновлениеКлючаСессии = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Для Каждого КлючОрганизацияЗначениеПоНазначению Из РезультатОбмена.ТребуетсяОбновлениеКлючаСессии Цикл
		
		Для Каждого КлючНазначениеЗначениеСоответствиеПараметров Из КлючОрганизацияЗначениеПоНазначению.Значение Цикл
		
			Для Каждого КлючПроизоводственныйОбъектЗначениеПараметры Из КлючНазначениеЗначениеСоответствиеПараметров.Значение Цикл
				
				ПараметрыОбновления = КлючПроизоводственныйОбъектЗначениеПараметры.Значение;
				
				ДанныеДляОбновления = Новый Структура();
				ДанныеДляОбновления.Вставить("Организация",          КлючОрганизацияЗначениеПоНазначению.Ключ);
				ДанныеДляОбновления.Вставить("ПараметрыЗапроса",     ПараметрыОбновления.ПараметрыЗапроса);
				ДанныеДляОбновления.Вставить("ПараметрыАвторизации", ПараметрыОбновления.ПараметрыАвторизации);
				
				ВозвращаемоеЗначение.Добавить(ДанныеДляОбновления);
				
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Подпись

Процедура Подписать(НаборДанныхДляПодписания, Организация, ДоступныеСертификаты, ОповещениеПриЗавершении)
	
	КоличествоСообщений = НаборДанныхДляПодписания.Количество();
	Если КоличествоСообщений = 1 Тогда
		ЗаголовокДанных = НСтр("ru = 'Сообщение'");
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Сообщения'");
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Обмен с ИС МП'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	
	Если ДоступныеСертификаты.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов",   ДоступныеСертификаты);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2.'"),
				ПользователиКлиент.АвторизованныйПользователь(), Организация));
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Неопределено);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанныхДляПодписания);
	ОписаниеДанных.Вставить("ПредставлениеНабора", СтрШаблон(НСтр("ru = 'Показать (%1)'"), КоличествоСообщений));
	
	ДанныеДляОповещения = Новый Структура;
	ДанныеДляОповещения.Вставить("ОповещениеПриЗавершении",  ОповещениеПриЗавершении);
	ДанныеДляОповещения.Вставить("Организация",              Организация);
	ДанныеДляОповещения.Вставить("НаборДанныхДляПодписания", НаборДанныхДляПодписания);
	
	ЭлектроннаяПодписьКлиент.Подписать(
		ОписаниеДанных,
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОповещениеПриЗавершении.ДополнительныеПараметры, "Форма", Новый УникальныйИдентификатор),
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ДанныеДляОповещения));
	
КонецПроцедуры

// Обработчик завершения подписи при непосредственном получении входящих документов, по ранее полученному списку
// документов к загрузке.
//
// Параметры:
//  Сообщения                - Массив - содержит передаваемые сообщения.
//  ДополнительныеПараметры  - Структура - содержит дополнительные параметры обработчика.
//
Процедура ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи(ПодписанныеСообщенияПоОрганизациям, Контекст) Экспорт
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.ПодписанныеСообщенияПоОрганизациям.Вставить(Контекст.Организация, ПодписанныеСообщенияПоОрганизациям);
	Контекст.НаборДанныхДляПодписанияПоОрганизациям.Удалить(Контекст.Организация);
	
	Если Контекст.НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
		
		Для Каждого КлючИЗначение Из Контекст.НаборДанныхДляПодписанияПоОрганизациям Цикл
			
			Организация              = КлючИЗначение.Ключ;
			НаборДанныхДляПодписания = КлючИЗначение.Значение;
			
			НовыйКонтекст = Новый Структура;
			НовыйКонтекст.Вставить("Форма",                                  Контекст.Форма);
			НовыйКонтекст.Вставить("Организация",                            Организация);
			НовыйКонтекст.Вставить("ОповещениеПриЗавершении",                Контекст.ОповещениеПриЗавершении);
			
			НовыйКонтекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    Контекст.НаборДанныхДляПодписанияПоОрганизациям);
			НовыйКонтекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Контекст.ПодписанныеСообщенияПоОрганизациям);
			НовыйКонтекст.Вставить("ДоступныеСертификаты",                      Контекст.ДоступныеСертификаты);
			НовыйКонтекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", Контекст.АдресРезультатаОбменаВоВременномХранилище);
			
			ДоступныеСертификаты = Контекст.ДоступныеСертификаты.Получить(Организация);
			
			Подписать(
				НаборДанныхДляПодписания,
				Организация,
				ДоступныеСертификаты,
				Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, НовыйКонтекст));
			
			Прервать;
			
		КонецЦикла;
		
	Иначе
		
		РезультатОбмена = ИнтеграцияИСМПВызовСервера.ПродолжитьВыполнениеОбмена(
			Контекст.ПодписанныеСообщенияПоОрганизациям,
			Контекст.АдресРезультатаОбменаВоВременномХранилище);
		
		ОбработатьРезультатОбмена(
			РезультатОбмена,
			Контекст.Форма, Контекст, Контекст.ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			
			Сообщение = ТекущийЭлементНабораДанных.Данные.Сообщение;
			Сообщение.Вставить("СвойстваПодписи", СвойстваПодписи);
			
			Сообщения.Добавить(Сообщение);
			
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти