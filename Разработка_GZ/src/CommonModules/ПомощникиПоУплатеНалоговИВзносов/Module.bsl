#Область ПрограммныйИнтерфейс

Функция ПоказыватьКомандыОплаты() Экспорт
	
	Возврат Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком()
		Или ПолучитьФункциональнуюОпцию("ПоказыватьОплатуНалогаВПомощникахИнтерфейсИнтеграцииСБанком");
	
КонецФункции

// Возвращает таблицу со списком документов уплаты налогов и взносов.
//
// Параметры:
//  Организация	  - СправочникСсылка.Организации - организация-налогоплательщик.
//  НачалоПериода - Дата - начало периода, за который будут отбираться платежи.
//  КонецПериода  - Дата - окончание периода, за который будут отбираться платежи.
//  ПараметрыНалогов - Структура - Параметры налогов, для которых будут отбираться платежи. См.НовыеПараметрыУплатыНалогов()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со списком документов оплаты налога.
//
Функция ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыНалогов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ВидыНалогов",   ПараметрыНалогов.ВидыНалогов);
	Запрос.УстановитьПараметр("ВидыНалоговыхОбязательств", ПараметрыНалогов.ВидыНалоговыхОбязательств);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Ссылка,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога КАК ВидНалога
	|ПОМЕСТИТЬ ОтборНалог
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|ГДЕ
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалогов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка,
	|	ЗадачиБухгалтераНалоговыеПлатежи.Правило КАК Правило
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &УсловиеПоПравилу
	|	И &УсловиеПоТипамДокументов
	|	И &УсловиеПоОплатеЗадолженности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено)) КАК Состояние,
	|	ВЫБОР
	|		КОГДА СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оплачено,
	|	ОтборНалог.ВидНалога КАК ВидНалога,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПравило КАК ОтборПравило
	|		ПО ПлатежноеПоручение.Ссылка = ОтборПравило.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНалог КАК ОтборНалог
	|		ПО ПлатежноеПоручение.Налог = ОтборНалог.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО (СостоянияБанковскихДокументов.Организация = &Организация)
	|			И ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И ПлатежноеПоручение.ВидНалоговогоОбязательства В(&ВидыНалоговыхОбязательств)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидНалоговогоОбязательства,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка),
	|	РасходныйКассовыйОрдер.Проведен,
	|	ОтборНалог.ВидНалога,
	|	РасходныйКассовыйОрдер.ПоказательПериода
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПравило КАК ОтборПравило
	|		ПО РасходныйКассовыйОрдер.Ссылка = ОтборПравило.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНалог КАК ОтборНалог
	|		ПО РасходныйКассовыйОрдер.Налог = ОтборНалог.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.ВидНалоговогоОбязательства В(&ВидыНалоговыхОбязательств)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Дата,
	|	СписаниеСРасчетногоСчета.Номер,
	|	СписаниеСРасчетногоСчета.ВидНалоговогоОбязательства,
	|	СписаниеСРасчетногоСчета.СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка),
	|	СписаниеСРасчетногоСчета.Проведен,
	|	ОтборНалог.ВидНалога,
	|	""""
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПравило КАК ОтборПравило
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ОтборПравило.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборНалог КАК ОтборНалог
	|		ПО СписаниеСРасчетногоСчета.Налог = ОтборНалог.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Организация = &Организация
	|	И НЕ СписаниеСРасчетногоСчета.ПометкаУдаления
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.ВидНалоговогоОбязательства В(&ВидыНалоговыхОбязательств)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Если ЗначениеЗаполнено(ПараметрыНалогов.Правило) Тогда
		Запрос.УстановитьПараметр("Правило", ПараметрыНалогов.Правило);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПравилу", "ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило");
	Иначе
		Запрос.УстановитьПараметр("КодыЗадач", ПараметрыНалогов.КодыЗадач);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПравилу", "ЗадачиБухгалтераНалоговыеПлатежи.Правило.Владелец.Код В(&КодыЗадач)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыНалогов.ТипыДокументов) Тогда
		Запрос.УстановитьПараметр("ТипыДокументов", ПараметрыНалогов.ТипыДокументов);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипамДокументов",
			"ТИПЗНАЧЕНИЯ(ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение) В (&ТипыДокументов)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипамДокументов", "ИСТИНА");
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНалогов.ОтборОплатаЗадолженности) = Тип("Булево") Тогда
		ТекстУсловия = ?(ПараметрыНалогов.ОтборОплатаЗадолженности,
			"ЗадачиБухгалтераНалоговыеПлатежи.ОплатаЗадолженности",
			"НЕ ЗадачиБухгалтераНалоговыеПлатежи.ОплатаЗадолженности");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОплатеЗадолженности", ТекстУсловия);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОплатеЗадолженности", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Платежи = Запрос.Выполнить().Выгрузить();
	Платежи.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки()));
	Для Каждого Платеж Из Платежи Цикл
		Платеж.ПредставлениеДокумента = ПредставлениеДокументаОплаты(Платеж);
	КонецЦикла;
	
	Возврат Платежи;
	
КонецФункции

Функция ДополнитьТаблицуПлатежейСостояниямиОплаты(КоллекцияПлатежей) Экспорт
	
	Для Каждого Платеж Из КоллекцияПлатежей Цикл
		Если ТипЗнч(Платеж.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Платеж.Состояние = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Платеж.Ссылка);
			Платеж.Оплачено  = Платеж.Состояние = Перечисления.СостоянияБанковскихДокументов.Оплачено;
		Иначе
			Платеж.Состояние = Перечисления.СостоянияБанковскихДокументов.ПустаяСсылка();
			Платеж.Оплачено  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж.Ссылка, "Проведен");
		КонецЕсли;
		Платеж.ПредставлениеДокумента = ПредставлениеДокументаОплаты(Платеж);
	КонецЦикла;
	
КонецФункции

// Возвращает структуру параметров для передачи в процедуру ДокументыУплатыНалогов
//
Функция НовыеПараметрыУплатыНалогов() Экспорт
	
	ТипПравило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
	
	ПараметрыУплатыНалогов = Новый Структура;
	ПараметрыУплатыНалогов.Вставить("ВидыНалогов",               Новый Массив); // Массив видов налогов.
	ПараметрыУплатыНалогов.Вставить("ВидыНалоговыхОбязательств", Новый Массив); // Массив видов налогов.
	ПараметрыУплатыНалогов.Вставить("Правило",                   ТипПравило);   // Правило, по которому оплачивались налоги и взносы.
	ПараметрыУплатыНалогов.Вставить("КодыЗадач",                 Новый Массив); // Массив кодов задач.
	ПараметрыУплатыНалогов.Вставить("ТипыДокументов",            Новый Массив); // Массив типов платежных документов.
	ПараметрыУплатыНалогов.Вставить("ОтборОплатаЗадолженности",  Неопределено); // По умолчанию отбора нет; если Ложь - только текущие платежи, если Истина - только погашение долга
	
	Возврат ПараметрыУплатыНалогов;
	
КонецФункции

Функция ПредставлениеДокументаОплаты(СтрокаКоллекцииПлатежей, РасчетСуммыВзноса = Ложь) Экспорт
	
	СвойстваПлатежа = Новый Структура("Ссылка, Дата, Номер, Сумма, Оплачено, Состояние, НомерВходящегоДокумента");
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СтрокаКоллекцииПлатежей);
	
	Если Не ЗначениеЗаполнено(СвойстваПлатежа.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	Если ЭтоИнтерфейсИнтеграцииСБанком И РасчетСуммыВзноса Тогда
		НомерДокумента = СвойстваПлатежа.НомерВходящегоДокумента;
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваПлатежа.Номер, Истина, Ложь);
	КонецЕсли;
	
	ДатаДокумента = Формат(СвойстваПлатежа.Дата, "ДЛФ=D");
	
	ПредставлениеСуммы = ?(РасчетСуммыВзноса Или СвойстваПлатежа.Сумма = 0, "", 
		СтрШаблон(НСтр("ru = ' на сумму %1'"), ОбщегоНазначенияБПВызовСервера.ФорматСумм(СвойстваПлатежа.Сумма)));
		
	ТипДокумента = ТипЗнч(СвойстваПлатежа.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ШаблонПредставления = НСтр("ru = 'Платежное поручение %1 от %2%3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НомерДокумента, ДатаДокумента, ПредставлениеСуммы);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ШаблонПредставления = НСтр("ru = 'Списание с расчетного счета %1 от %2%3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НомерДокумента, ДатаДокумента, ПредставлениеСуммы);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
			ШаблонПредставления = НСтр("ru = 'Оплата наличными от %1%2'");
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
				ДатаДокумента, ПредставлениеСуммы);
		Иначе
			ШаблонПредставления = НСтр("ru = 'Выдача наличных %1 от %2%3'");
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
				НомерДокумента, ДатаДокумента, ПредставлениеСуммы);
		КонецЕсли;
	Иначе
		ШаблонПредставления = НСтр("ru = '%1 %2 от %3%4'");
		СинонимДокумента = СвойстваПлатежа.Ссылка.Метаданные().Синоним;
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			СинонимДокумента, НомерДокумента, ДатаДокумента, ПредставлениеСуммы);
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

// Устанавливает свойства декораций формы, отображающих платежи с суммой в тексте вместе с документом платежа.
// Добавляет элементы, если платежей больше, чем задано декораций в конфигураторе.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   КоллекцияПлатежей - ТаблицаЗначений, ДанныеФормыКоллекция - коллекция со свойствами платежей
//     * Ссылка - ДокументСсылка - ссылка на документ
//     * Дата - Дата - дата документа
//     * Номер - Строка - номер документа
//     * Оплачено - Булево - Истина, если платежное поручение подтверждено выпиской
//     * Сумма - Число(15, 2) - Сумма документа
//   ПрефиксИмени - Строка - префикс имени декорации (например, "ДекорацияПлатеж")
//
Процедура ОтобразитьПлатежи(Форма, КоллекцияПлатежей, ПрефиксИмени) Экспорт
	
	Элементы = Форма.Элементы;
	
	КоличествоПредопределенных = КоличествоПредопределенныхЭлементов(Форма, ПрефиксИмени);
	Для Индекс = КоличествоПредопределенных По КоллекцияПлатежей.Количество() - 1 Цикл
		ДобавитьПредставление(Форма, Индекс, ПрефиксИмени);
	КонецЦикла;
	
	Для Индекс = 0 По КоллекцияПлатежей.Количество() - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Заголовок = ПредставлениеПлатежа(КоллекцияПлатежей[Индекс], Истина);
	КонецЦикла;
	
	Для Индекс = КоллекцияПлатежей.Количество() По КоличествоПредопределенных - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает свойства декораций формы, отображающих документы в списке.
// Добавляет элементы, если документов больше, чем задано декораций в конфигураторе
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  КоллекцияДокументов - ДанныеФормыКоллекция - коллекция со свойствами документов
//   * Ссылка - ДокументСсылка.УведомлениеОСпецрежимахНалогообоожения - ссылка на уведомление
//   * Дата - Дата - дата уведомления
//   * Сумма - Число - сумма уменьшения налога по данным уведомления
//   * Сдано - Булево - используется для регламентированных уведомлений, признак того, что уведомление сдано
//   * СтатусПредставление - Строка - представление статуса документа
//   * Представление - Строка - представление документа для отображения в списке
//  ПрефиксИмени - Строка - префикс имени декорации (например, "Уведомление")
//
Процедура ОтобразитьДокументы(Форма, КоллекцияДокументов, ПрефиксИмени) Экспорт
	
	Элементы = Форма.Элементы;
	
	КоличествоПредопределенных = КоличествоПредопределенныхЭлементов(Форма, ПрефиксИмени);
	Для Индекс = КоличествоПредопределенных По КоллекцияДокументов.Количество() - 1 Цикл
		ДобавитьПредставление(Форма, Индекс, ПрефиксИмени);
	КонецЦикла;
	
	Для Индекс = 0 По КоллекцияДокументов.Количество() - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Заголовок = ПредставлениеУведомления(КоллекцияДокументов[Индекс]);
	КонецЦикла;
	
	Для Индекс = КоллекцияДокументов.Количество() По КоличествоПредопределенных - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает свойства декораций формы, отображающих платежи с суммой в отдельной колонке.
// Добавляет элементы, если платежей больше, чем задано декораций в конфигураторе.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   КоллекцияПлатежей - ДанныеФормыКоллекция - коллекция со свойствами платежей
//     * Ссылка - ДокументСсылка - ссылка на документ
//     * Дата - Дата - дата документа
//     * Номер - Строка - номер документа
//     * Оплачено - Булево - Истина, если платежное поручение подтверждено выпиской
//     * Сумма - Число(15, 2) - Сумма документа
//   ПрефиксИмени - Строка - префикс имени декорации (например, "ДекорацияПлатеж")
//
Процедура ОтобразитьПлатежиССуммойВОтдельнойКолонке(Форма, КоллекцияПлатежей, ПрефиксИмени) Экспорт
	
	Элементы = Форма.Элементы;
	
	КоличествоПредопределенных = КоличествоПредопределенныхЭлементов(Форма, ПрефиксИмени);
	Для Индекс = КоличествоПредопределенных По КоллекцияПлатежей.Количество() - 1 Цикл
		ДобавитьПредставлениеПлатежаССуммойВОтдельнойКолонке(Форма, Индекс, ПрефиксИмени);
	КонецЦикла;
	
	Для Индекс = 0 По КоллекцияПлатежей.Количество() - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Заголовок = ПредставлениеПлатежа(КоллекцияПлатежей[Индекс], Ложь);
		
		ЭлементФормы = Элементы[ИмяЭлементаПредставлениеСуммыПлатежа(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Заголовок = Формат(КоллекцияПлатежей[Индекс].Сумма, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	КонецЦикла;
	
	Для Индекс = КоллекцияПлатежей.Количество() По КоличествоПредопределенных - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПредставления(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Ложь;
		
		ЭлементФормы = Элементы[ИмяЭлементаПредставлениеСуммыПлатежа(Индекс, ПрефиксИмени)];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьПолнотуУплаты(СуммаКУплате, КоллекцияПлатежей) Экспорт
	
	РезультатПроверки = Новый Структура();
	РезультатПроверки.Вставить("НалогУплаченНеВерно",           Ложь);
	РезультатПроверки.Вставить("СообщениеОбОшибкеУплатыНалога", "");
	
	СуммаПлатежей = КоллекцияПлатежей.Итог("Сумма");
	
	Если СуммаПлатежей <> 0 И СуммаПлатежей <> СуммаКУплате Тогда
		
		РезультатПроверки.НалогУплаченНеВерно = Истина;
		
		ЧастиСообщения = Новый Массив;
		
		ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма оплаты (%1) отличается от рассчитанной (%2)'"),
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаПлатежей),
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКУплате, , НСтр("ru = '0,00'"))));
		
		Разница = СуммаКУплате - СуммаПлатежей;
		
		Если Разница > 0 Тогда
			ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'не оплачено %1'"),
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(Разница)));
		Иначе
			ЧастиСообщения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'переплата %1'"),
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(-Разница)));
		КонецЕсли;
		
		РезультатПроверки.СообщениеОбОшибкеУплатыНалога = СтрСоединить(ЧастиСообщения, ", ");
		
	КонецЕсли;
	
	РезультатПроверки.Вставить("НалогОплаченПолностью", СуммаПлатежей >= СуммаКУплате);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция СуммаОплаты(КоллекцияПлатежей) Экспорт
	
	СуммаОплачено = 0;
	
	Если КоллекцияПлатежей = Неопределено Тогда
		Возврат СуммаОплачено;
	КонецЕсли;
	
	Для Каждого Платеж Из КоллекцияПлатежей Цикл
		
		Если Платеж.Оплачено Тогда
			СуммаОплачено = СуммаОплачено + Платеж.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаОплачено;
	
КонецФункции

Функция ПоказыватьПереплатуПоНалогуВзносу(Организация, Период) Экспорт
	
	Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	Возврат НачалоГода(ДатаРегистрации) < НачалоГода(Период);
	
КонецФункции

// Возвращает структуру параметров, используемых в процедурах изменения остатков расчетов по налогам и взносам.
//
Функция НовыеПараметрыИзмененияОстатковРасчетовПоНалогамВзносамИП() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("ПериодСобытия",           Дата(1,1,1));
	СтруктураПараметров.Вставить("ТаблицаОстатков",         Неопределено);
	СтруктураПараметров.Вставить("Комментарий",             "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает описание таблицы для изменения остатков расчетов по налогам и взносам.
//
Функция НоваяТаблицаИзмененияРасчетовПоНалогамВзносамИП() Экспорт
	
	ТаблицаИзмененияРасчетов = Обработки.ВводНачальныхОстатков.НоваяТаблицаВводаОстатков("НалогиИВзносы");
	ТаблицаИзмененияРасчетов.Колонки.Добавить("СуммаИзмененияПереплаты", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаИзмененияРасчетов;
	
КонецФункции

// Изменяет остатки расчетов по налогам и взносам документом "ОперацияБух".
//
// Параметры:
//  Параметры - Структура - структура параметров выполнения операции. 
//                          см. НовыеПараметрыИзмененияОстатковРасчетовПоНалогамВзносамИП()
//  АдресРезультата - Строка - не используется.
//
Процедура СохранитьПереплатуПоНалогамВзносамИнтеграцияСБанком(Параметры, АдресРезультата) Экспорт
	
	Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокумента = НачалоГода(Параметры.ПериодСобытия) - 1;
	
	ОперацияБух = Документы.ОперацияБух.СоздатьДокумент();
	ОперацияБух.Организация = Параметры.Организация;
	ОперацияБух.Дата = ДатаДокумента;
	ОперацияБух.Комментарий = Параметры.Комментарий;
	
	ОперацияБух.Записать(РежимЗаписиДокумента.Запись);
	
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБух.Ссылка, Истина);
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОстатков Цикл
		
		Проводка = Набор.Добавить();
		
		Проводка.Активность  = Истина;
		Проводка.Организация = Параметры.Организация;
		Проводка.Период      = ДатаДокумента;
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет",
			СтрокаТаблицы.ВидПлатежаВБюджет);
		
		Проводка.Сумма       = СтрокаТаблицы.СуммаИзмененияПереплаты;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция ПлатежиДляОтображения(КоллекцияПлатежей, СостоянияИнтеграцииДокументов) Экспорт
	
	ПлатежиДляОтображения = КоллекцияПлатежей.Выгрузить();
	
	Если ЗначениеЗаполнено(СостоянияИнтеграцииДокументов) Тогда
		РегистрыСведений.ДокументыИнтеграцииСБанком.УдалитьИзТаблицыПлатежейДокументыКОтправке(
			ПлатежиДляОтображения, СостоянияИнтеграцииДокументов);
	КонецЕсли;
	
	Возврат ПлатежиДляОтображения;
	
КонецФункции

// Проверяет, является ли данный отчетный период самым первым с даты начала деятельности организации.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - проверяемая организация.
//  Период          - Дата - проверяемый период.
//  ДанныеПравила   - Структура - сведения об особенностях отчета/налога.
//                       Ключи структуры:
//                        * ФинансовыйПериод - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета / уплаты налога.
//                        * РасширенныйПервыйНалоговыйПериод - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                             вариант особенностей законодательства для первого налогового/отчетного периода.
//                  - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов -
//                       правило, описывающее отчет/налог. Особенности отчета/налога будут определены из реквизитов правила.
//  ДатаРегистрации - Дата - дата регистрации проверяемой организации; если не передана - будет получена в данной функции.
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это первый отчетный период.
//
Функция ЭтоПервыйОтчетныйПериод(Организация, Период, ДанныеПравила, ДатаРегистрации = Неопределено) Экспорт
	
	ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
	
	ТипДанныхПравила = ТипЗнч(ДанныеПравила);
	
	Если ТипДанныхПравила = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, ДанныеПравила);
	ИначеЕсли ТипДанныхПравила = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		ОсобенностиОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПравила, ОсобенностиОтчета);
	Иначе
		// Невозможно получить данные об отчетном периоде без особенностей отчета, описанных в правиле.
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйОтчетныйПериод = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(
		ОсобенностиОтчета, Организация, ДатаРегистрации);
	
	НачалоПроверяемогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ОсобенностиОтчета.ФинансовыйПериод, Период);
	
	Возврат НачалоПроверяемогоПериода <= ПервыйОтчетныйПериод;
	
КонецФункции

// Определяет границу периода, в котором отчетность в программе
// не заполняется автоматически, т.к. пользователь не вел учет в программе. Если такой границы нет,
// например, пользователь начал вести учет сразу после того, как зарегистрировался, то возвращается
// Неопределено.
//
// Параметры:
//  Организация	 - СправочникСсылка.Органиации - организация, для которой нужно определить границу.
// 
// Возвращаемое значение:
//   - Дата, Неопределено - граница отчетности прошлых лет. Если отчетности прошлых лет в программе
//                          быть не может, возвращается Неопределено.
//
Функция ГраницаОтчетностиПрошлыхПериодов(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоВеденияУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	Если Не ЗначениеЗаполнено(НачалоВеденияУчета) Тогда
		// Пользователь не ввел начальные остатки и не провел ни одного документа.
		// В этом случае считаем, что он начнет вести учет в этом году.
		Возврат НачалоГода(ТекущаяДатаСеанса()) - 1;
	КонецЕсли;
	
	// Если пользователь начал вести учет в том же году, что и зарегистрировался - то у него нет
	// отчетности прошлых лет и ему возвращается Неопределено.
	// Если пользователь начал вести учет в последующих годах - то период отчетности
	// прошлых лет заканчивается 31 декабря года, который идет перед годом начала ведения учета.
	ГодНачалаВеденияУчета = НачалоГода(НачалоВеденияУчета);
	Если ГодНачалаВеденияУчета > КалендарьБухгалтера.ДатаНачалаДеятельности(Организация) Тогда
		Возврат ГодНачалаВеденияУчета - 1;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ОписаниеОтчетов

// Возвращает структуру для вывода описания отчета в формах помощников.
// Структура описывается в НовыйОписаниеОтчета()
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - Организация, для которой нужно вывести описание отчета.
//  Правило			 - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило, по которому нужно вывести описание отчета.
//  ПериодСобытия	 - Дата - Период отчета.
// 
// Возвращаемое значение:
//   - Структура - Структура с описанием отчета. См. НовыйОписаниеОтчета
//
Функция ОписаниеОтчета(Организация, Правило, ПериодСобытия) Экспорт
	
	Описание = НовыйОписаниеОтчета();
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат Описание;
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРеквизитов.Вставить("ИдентификаторЗадачи", "Владелец.Код");
	ОписаниеРеквизитов.Вставить("ФинансовыйПериод");
	ОписаниеРеквизитов.Вставить("РасширенныйПервыйНалоговыйПериод");
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило, ОписаниеРеквизитов);
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(РеквизитыПравила.ИдентификаторЗадачи, Организация);
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация,
		ВидНалога, ПериодСобытия, Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
		
	Если Порядок = Неопределено Тогда
		Возврат Описание;
	КонецЕсли;
	
	НачалоВыполнения   = Порядок.Отчет.НачалоВыполнения;
	Срок               = Порядок.Отчет.Срок;
	НаименованиеОтчета = Порядок.Отчет.Наименование;
	
	ЭтоПервыйОтчет = ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация, ПериодСобытия, РеквизитыПравила, ДатаНачалаДеятельности);
	
	ПорядокСдачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '%1 отчет сдается с %2 по %3'"),
			?(ЭтоПервыйОтчет, НСтр("ru = 'Первый'"), НСтр("ru = 'Следующий'")),
			Формат(НачалоВыполнения, НСтр("ru = 'ДФ=''d MMMM'''")),
			Формат(Срок, НСтр("ru = 'ДФ=''d MMMM yyyy ""года""'''")));
	
	ЧастиОписания = Новый Массив;
	
	ЧастиОписания.Добавить(ПорядокСдачи);
	ЧастиОписания.Добавить(СтрШаблон("(%1)", НаименованиеОтчета));
	
	Описание.ПредставлениеОтчета = СтрСоединить(ЧастиОписания, Символы.ПС);
	
	Если Не ЭтоПервыйОтчет Тогда
		Возврат Описание;
	КонецЕсли;
	
	ПропущенныйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
		РеквизитыПравила.РасширенныйПервыйНалоговыйПериод,
		Организация,
		ДатаНачалаДеятельности);
	
	Если НЕ ЗначениеЗаполнено(ПропущенныйПериод) Тогда
		Возврат Описание;
	КонецЕсли;
	
	НачалоПропущенногоПериода = ДатаНачалаДеятельности;
	КонецПропущенногоПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		РеквизитыПравила.ФинансовыйПериод, ДатаНачалаДеятельности);
	
	ПериодПослеПропущенного = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПропущенныйПериод,
		РеквизитыПравила.ФинансовыйПериод, 1);
	
	НачалоПервогоПериодаОтчета = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		РеквизитыПравила.ФинансовыйПериод, ПериодПослеПропущенного);
	КонецПервогоПериодаОтчета = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		РеквизитыПравила.ФинансовыйПериод, ПериодПослеПропущенного);
	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Период с даты регистрации %1 по %2 включается в отчет за %3'"),
			Формат(НачалоПропущенногоПериода, "ДЛФ=D"),
			Формат(КонецПропущенногоПериода, "ДЛФ=D"),
			ПредставлениеПериода(НачалоПервогоПериодаОтчета, КонецПервогоПериодаОтчета, "ФП = Истина"));
	
	Описание.ОтчетныйПериодРасширен = Истина;
	Описание.РасширенныйПериодТекстПояснения = ТекстПояснения;
	Описание.РасширенныйПериодТекстПодсказки = ТекстПодсказкиПоРасширенномуПервомуОтчетномуПериоду(
		РеквизитыПравила.ИдентификаторЗадачи);
	
	Возврат Описание;
	
КонецФункции

Функция ТекстПодсказкиПоРасширенномуПервомуОтчетномуПериоду(ИдентификаторЗадачи) Экспорт
	
	ТекстПодсказки = "";
	
	Если ИдентификаторЗадачи = "УСН" Тогда
		
		ТекстПодсказки = НСтр("ru = 'У организаций и ИП, зарегистрированных в декабре, первый налоговый период по УСН длится с даты регистрации до конца следующего года (п.2 ст. 55 НК РФ). Декларация сдается по истечении первого налогового периода.'");
		
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

// Конструктор описания отчетов для вывода в помощник.
// 
// Возвращаемое значение:
//   - Структура - описание отчета
//
Функция НовыйОписаниеОтчета() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПредставлениеОтчета", "");
	Результат.Вставить("ОтчетныйПериодРасширен", Ложь);
	Результат.Вставить("РасширенныйПериодТекстПояснения", "");
	Результат.Вставить("РасширенныйПериодТекстПодсказки", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ГосударственныеОрганы

Функция ОписаниеГосорганаПолучателяОтчетности(Госорган) Экспорт
	
	Если Госорган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		Возврат НСтр("ru = 'В налоговую инспекцию:'");
	ИначеЕсли Госорган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		Возврат НСтр("ru = 'В пенсионный фонд:'");
	ИначеЕсли Госорган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		Возврат НСтр("ru = 'В фонд социального страхования:'");
	ИначеЕсли Госорган = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		Возврат НСтр("ru = 'В Росстат:'");
	Иначе
		// Отчеты, предоставляемые в другие госорганы, не обслуживаются.
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет декорацию на форму
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   Индекс - Число - индекс декорации
//   ПрефиксИмени - Строка - префикс имени декорации (например, "ДекорацияПлатеж")
//
Процедура ДобавитьПредставление(Форма, Индекс, ПрефиксИмени)
	
	Элементы = Форма.Элементы;
	
	Родитель = Элементы["Группа" + ПрефиксИмени];
	
	Декорация = Элементы.Добавить(ИмяЭлементаПредставления(Индекс, ПрефиксИмени), Тип("ДекорацияФормы"), Родитель);
	Декорация.УстановитьДействие("ОбработкаНавигационнойСсылки", СтрШаблон("Подключаемый_%1ОбработкаНавигационнойСсылки", ПрефиксИмени));
	Декорация.РастягиватьПоГоризонтали = Истина;
	Декорация.АвтомаксимальнаяШирина   = Ложь;
	Декорация.Высота = 1;
	
КонецПроцедуры

// Добавляет группу элементов для отображения платежа с суммой в отдельной колонке.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   Индекс - Число - индекс декорации
//   ПрефиксИмени - Строка - префикс имени декорации (например, "ДекорацияПлатеж")
//
Процедура ДобавитьПредставлениеПлатежаССуммойВОтдельнойКолонке(Форма, Индекс, ПрефиксИмени)
	
	Элементы = Форма.Элементы;
	
	Родитель = Элементы["Группа" + ПрефиксИмени];
	
	ГруппаПлатежа = Элементы.Добавить(ИмяЭлементаПредставлениеГруппыПлатежа(Индекс, ПрефиксИмени), Тип("ГруппаФормы"), Родитель);
	ГруппаПлатежа.Вид          = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПлатежа.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаПлатежа.ОтображатьЗаголовок = Ложь;
	ГруппаПлатежа.Отображение  = ОтображениеОбычнойГруппы.Нет;
	ГруппаПлатежа.Заголовок    = СтрШаблон(ПрефиксИмени + " " + "%1", Индекс);
	ГруппаПлатежа.Объединенная = Ложь;
	
	Декорация = Элементы.Добавить(ИмяЭлементаПредставления(Индекс, ПрефиксИмени), Тип("ДекорацияФормы"), ГруппаПлатежа);
	Декорация.УстановитьДействие("ОбработкаНавигационнойСсылки", СтрШаблон("Подключаемый_%1ОбработкаНавигационнойСсылки", ПрефиксИмени));
	Декорация.РастягиватьПоГоризонтали = Истина;
	Декорация.АвтомаксимальнаяШирина   = Ложь;
	Декорация.Высота = 1;
	
	Декорация = Элементы.Добавить(ИмяЭлементаПредставлениеСуммыПлатежа(Индекс, ПрефиксИмени), Тип("ДекорацияФормы"), ГруппаПлатежа);
	Декорация.Высота = 1;
	Декорация.РастягиватьПоГоризонтали = Истина;
	Декорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
КонецПроцедуры

// Возвращает представление гиперссылки
//
Функция ПредставлениеПлатежа(СтрокаКоллекцииПлатежей, ВключатьСостояниеДокумента)
	
	СвойстваПлатежа = Новый Структура("Ссылка, Дата, Номер, Сумма, Оплачено, Состояние, ПредставлениеДокумента");
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СтрокаКоллекцииПлатежей);
	
	Если Не ЗначениеЗаполнено(СвойстваПлатежа.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	СтатусДокумента = "";
	Если ВключатьСостояниеДокумента Тогда
	
		ТипДокумента = ТипЗнч(СвойстваПлатежа.Ссылка);
		Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СостояниеДокумента = СвойстваПлатежа.Состояние;
		Иначе
			СостояниеДокумента = ?(СвойстваПлатежа.Оплачено, Перечисления.СостоянияБанковскихДокументов.Оплачено,
				Перечисления.СостоянияБанковскихДокументов.Подготовлено);
		КонецЕсли;
		СтатусДокумента = СтрШаблон(" (%1)", Строка(СостояниеДокумента));
		
	КонецЕсли;
	
	ПредставлениеПлатежа = Новый Массив;
	
	ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1%2",
		СвойстваПлатежа.ПредставлениеДокумента, СтатусДокумента), , , , "ОткрытьДокумент"));
	
	Если СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И СвойстваПлатежа.Состояние <> Перечисления.СостоянияБанковскихДокументов.Отправлено
		И ПравоДоступа("Изменение", СвойстваПлатежа.Ссылка.Метаданные()) Тогда
		ПредставлениеПлатежа.Добавить("  ");
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	
КонецФункции

Функция ПредставлениеУведомления(Реквизиты)
	
	Если Не ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеСтатуса = СтрШаблон(НСтр("ru = '(%1)'"), Реквизиты.СтатусПредставление);
	
	СтрокаПредставления = Новый Массив;
	
	СтрокаПредставления.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1 %2",
		Реквизиты.ПредставлениеДокумента, ПредставлениеСтатуса),,,, "ОткрытьДокумент"));
	
	Если Не Реквизиты.Сдано И ПравоДоступа("Изменение", Реквизиты.Ссылка.Метаданные()) Тогда
		СтрокаПредставления.Добавить("  ");
		СтрокаПредставления.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника,,,, "УдалитьДокумент"));
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	СтрокаПредставления.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(СтрокаПредставления);
	
КонецФункции

// Возвращает имя группы формы для платежи, соответствующей индексу
//
Функция ИмяЭлементаПредставлениеГруппыПлатежа(Индекс, ПрефиксИмени)
	
	Возврат СтрШаблон("Группа" + ПрефиксИмени + "%1", Формат(Индекс, "ЧН=0; ЧГ=0"));
	
КонецФункции

// Возвращает имя элемента формы, соответствующего индексу
//
Функция ИмяЭлементаПредставления(Индекс, ПрефиксИмени)
	
	Возврат СтрШаблон("Декорация" + ПрефиксИмени + "%1", Формат(Индекс, "ЧН=0; ЧГ=0"));
	
КонецФункции

// Возвращает имя элемента формы, соответствующего индексу
//
Функция ИмяЭлементаПредставлениеСуммыПлатежа(Индекс, ПрефиксИмени)
	
	Возврат СтрШаблон("Декорация" + ПрефиксИмени + "%1Сумма", Формат(Индекс, "ЧН=0; ЧГ=0"));
	
КонецФункции

// Возвращает количество декораций для отображения платежей заданных в конфигураторе
//
Функция КоличествоПредопределенныхЭлементов(Форма, ПрефиксИмени)
	
	Элементы = Форма.Элементы;
	
	Количество = 0;
	Пока Истина Цикл
		Если Элементы.Найти(ИмяЭлементаПредставления(Количество, ПрефиксИмени)) <> Неопределено Тогда
			Количество = Количество + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти