
#Область СлужебныйПрограммныйИнтерфейс

// Обновляет классификатор ошибок криптографии.
//
Процедура ОбновитьКлассификаторОшибокКриптографии(ПутьКФайлу = "") Экспорт
	
	ДатаПоследнегоИзменения = ДатаПоследнегоИзмененияКлассификатораОшибокКриптографии();
	
	Если ПутьКФайлу = "" Тогда
		АдресКлассификатораОшибок = ОбменСКонтрагентамиВнутренний.АдресОблачногоХранилищаНастроек() + "/ErrorClassifier/";
		Если Не СтрЗаканчиваетсяНа(АдресКлассификатораОшибок, "/") Тогда
			АдресКлассификатораОшибок = АдресКлассификатораОшибок + "/";
		КонецЕсли;
		
		РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресКлассификатораОшибок + "classifier.json");
		
		Если РезультатЗагрузки.Статус Тогда
			ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатЗагрузки.Путь);
			УдалитьИзВременногоХранилища(РезультатЗагрузки.Путь);
			
			ОбработатьФайлКлассификатораОшибок(ДанныеФайла, ДатаПоследнегоИзменения);
		Иначе
			ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
			РезультатЗагрузки.СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
	Иначе 
		ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
		ОбработатьФайлКлассификатораОшибок(ДанныеФайла, ДатаПоследнегоИзменения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату последнего изменения классификатора ошибок криптографии.
// 
// Возвращаемое значение:
// Дата - дата последнего изменения классификатора ошибок криптографии
//
Функция ДатаПоследнегоИзмененияКлассификатораОшибокКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ДатаЗагрузкиКлассификатораОшибокКриптографии.Получить();
	
КонецФункции

#Область ВидыОшибок

// Возвращает идентификатор неизвестной ошибки.
// 
// Возвращаемое значение:
//  Строка - вид ошибки.
//
Функция ВидОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
КонецФункции

#КонецОбласти

// Выполняет диагностику и записывает результат в журнал регистрации. Вызывается после завершения операции.
//
// Параметры:
//  КонтекстДлительнойОперации - Структура - контекст операции, см. ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации.
//
Процедура ОбработатьОшибки(КонтекстОперации) Экспорт
	
	ВидыДиагностики = Новый Массив;
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ОшибкиДиагностируются(КонтекстОперации.Диагностика.Ошибки,
		ВидыДиагностики) Тогда
		ПараметрыВыполненияДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
		
		ПараметрыВыполненияДиагностики.ВидыДиагностики = ВидыДиагностики;
		РезультатДиагностики = ВыполнитьДиагностику(ПараметрыВыполненияДиагностики);
		
		ТекстыОтчетов = Новый Массив;
		Для каждого КлючИЗначение Из РезультатДиагностики.Результаты Цикл
			Отчет = КлючИЗначение.Значение.ОтчетДляАдминистратора;
			ТекстыОтчетов.Добавить(Отчет.Текст);
		КонецЦикла;
		
		ТекстОтчета = СтрСоединить(ТекстыОтчетов, Символы.ПС);
		
		ШаблонСообщения = НСтр("ru = 'Результат диагностики ЭДО:
									 |%1'");
		ТекстСообщения = Символы.ПС + СтрШаблон(ШаблонСообщения, ТекстОтчета);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Диагностика ЭДО'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДиагностикаИнтернетСоединения

Процедура ДиагностикаИнтернетСоединения(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст)
	
	ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение();
	РезультатДиагностикиИнтернетСоединения = Неопределено;
	Если Не ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, РезультатДиагностикиИнтернетСоединения) Тогда
		Возврат;
	КонецЕсли;
	Результаты = РезультатДиагностикиИнтернетСоединения.Результаты;
	НаличиеИнтернетСоединения = Результаты.НаличиеИнтернетСоединения;
	ПроверитьИнтернетСоединение(НаличиеИнтернетСоединения);
	
	Если НаличиеИнтернетСоединения.Результат Тогда
		Если РезультатДиагностики.ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			ЗаполнитьДоступныеУчетныеЗаписи(РезультатДиагностики, ПараметрыВыполненияДиагностики);
		КонецЕсли;
		УчетныеЗаписи = РезультатДиагностики.ДоступныеУчетныеЗаписи;
		ПроверяемыеСервисы = ПроверяемыеСервисыИнтернетСоединение(УчетныеЗаписи);
		ПроверитьАктивностьСервисов(Результаты.АктивностьСервисов, ПроверяемыеСервисы);
		ПроверитьДоступностьСервисов(Результаты, ПроверяемыеСервисы);
		ПроверитьКорневыеСертификаты(Результаты.НаличиеКорневыхСертификатов, ПроверяемыеСервисы, Контекст);
	КонецЕсли;
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
	КонецЦикла;
	РезультатДиагностикиИнтернетСоединения.Результат = ОбщийРезультат;
	РезультатДиагностикиИнтернетСоединения.ОтчетДляАдминистратора = 
		ОтчетДляАдминистратораИнтернетСоединение(РезультатДиагностикиИнтернетСоединения,
			ПараметрыВыполненияДиагностики);
	
КонецПроцедуры

Процедура ПроверитьИнтернетСоединение(НаличиеИнтернетСоединения) 
	
	АдресРесурса = "https://1c.com"; 
	НаличиеИнтернетСоединения.Результат = ИнтернетРесурсДоступен(АдресРесурса);
	НаличиеИнтернетСоединения.Рекомендация.Краткая = НСтр("ru = 'Обратитесь к администратору'");
	НаличиеИнтернетСоединения.Рекомендация.Подробная = НСтр("ru = 'Проверьте доступ к сети интернет'");
	 
КонецПроцедуры

Процедура ПроверитьАктивностьСервисов(АктивностьСервисов, ПроверяемыеСервисы) 
	
	РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере("https://reputils.1c.ru/static/online_stats.json");
	Ошибка = Неопределено;
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка проверки активности сервисов:
										|%1
										|%2'");
	ТекстОшибкиЧтениеJSON = СтрШаблон(ШаблонСообщенияОбОшибке,
		НСтр("ru = 'Чтение JSON:'"), 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	Если РезультатПолученияФайла.Статус Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(РезультатПолученияФайла.Путь);
		Попытка
			ОбщийРезультат = Истина;
			СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Ложь);
			ОбработанныеСервисы = Новый Массив;
			Если СтруктураJSON.Свойство("error") Тогда 
				Ошибка = ТекстОшибкиЧтениеJSON;
			ИначеЕсли СтруктураJSON.Свойство("result") Тогда 
				Если ТипЗнч(СтруктураJSON.result) = Тип("Массив") Тогда 
					Для каждого Сервис Из СтруктураJSON.result Цикл
						ПредставлениеСервиса = ПроверяемыеСервисы.Получить(Сервис.qu);
						Если ПредставлениеСервиса <> Неопределено Тогда
							ДобавитьИнформациюОбАктивностиСервиса(АктивностьСервисов,
								ПредставлениеСервиса, Сервис.online);
							ОбщийРезультат = ОбщийРезультат И Сервис.online;
							ОбработанныеСервисы.Добавить(Сервис.qu);
						КонецЕсли;
					КонецЦикла;
				Иначе 
					Ошибка = ТекстОшибкиЧтениеJSON;
				КонецЕсли;
			КонецЕсли;
			// Считаем, что сервисы, отсутствующие в результатах проверок всегда доступны.
			Для каждого ПроверяемыйСервис Из ПроверяемыеСервисы Цикл
				Если ОбработанныеСервисы.Найти(ПроверяемыйСервис.Ключ) = Неопределено Тогда
					ДобавитьИнформациюОбАктивностиСервиса(АктивностьСервисов,
						ПроверяемыйСервис.Значение, Истина);
				КонецЕсли;
			КонецЦикла; 
			АктивностьСервисов.Результат = ОбщийРезультат;
		Исключение
			АктивностьСервисов.Результат = Ложь;
			Ошибка = ТекстОшибкиЧтениеJSON;
		КонецПопытки;
	Иначе
		Ошибка = СтрШаблон(ШаблонСообщенияОбОшибке,
			НСтр("ru = 'Получение файла из интернета:'"),
			РезультатПолученияФайла.СообщениеОбОшибке);
	КонецЕсли;
	Если Ошибка <> Неопределено Тогда
		ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(), Ошибка);
	КонецЕсли;
	АктивностьСервисов.Рекомендация.Краткая = НСтр("ru = 'Повторите действие позднее.'");
	АктивностьСервисов.Рекомендация.Подробная = НСтр("ru = 'Повторите действие позднее.'");
	
КонецПроцедуры

Процедура ДобавитьИнформациюОбАктивностиСервиса(АктивностьСервисов, Адрес, Активность) 
	
	ОписаниеСервиса = Новый Структура;
	ОписаниеСервиса.Вставить("Адрес", Адрес);
	ОписаниеСервиса.Вставить("Результат", Активность);
	АктивностьСервисов.Сервисы.Добавить(ОписаниеСервиса);
	
КонецПроцедуры

Процедура ДобавитьИнформациюОКорневомСертификатеСервиса(НаличиеКорневыхСертификатов, Адрес, Результат, Сертификаты) 
	
	ОписаниеСервиса = Новый Структура;
	ОписаниеСервиса.Вставить("Адрес", Адрес);
	ОписаниеСервиса.Вставить("Результат", Результат);
	ОписаниеСервиса.Вставить("Сертификаты", Сертификаты);
	НаличиеКорневыхСертификатов.Сервисы.Добавить(ОписаниеСервиса);
	
КонецПроцедуры

Процедура ПроверитьДоступностьСервисов(РезультатыДиагностикиСоединения, ПроверяемыеСервисы)
	
	ДоступностьСервисов = РезультатыДиагностикиСоединения.ДоступностьСервисов;
	ОбщийРезультат = Истина;
	Для каждого Сервис Из ПроверяемыеСервисы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Сервис.Ключ);
		ОписаниеСервера = Новый Структура;
		ОписаниеСервера.Вставить("Адрес", СтруктураURI.ИмяСервера);
		Если АктивностьСервиса(РезультатыДиагностикиСоединения, СтруктураURI.ИмяСервера) = Ложь Тогда
			// Если сервис неактивен, считаем, что он доступен.
			ОписаниеСервера.Вставить("Результат", Истина);
		Иначе 
			ОписаниеСервера.Вставить("Результат", ИнтернетРесурсДоступен(СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера));
		КонецЕсли;
		ОбщийРезультат = ОбщийРезультат И ОписаниеСервера.Результат <> Ложь;
		РезультатыДиагностикиСоединения.ДоступностьСервисов.Сервисы.Добавить(ОписаниеСервера);
	КонецЦикла;
	ДоступностьСервисов.Результат = ОбщийРезультат;
	ДоступностьСервисов.Рекомендация.Краткая = НСтр("ru = 'Обратитесь к администратору'");
	ТекстПодробнойОшибки = НСтр("ru = 'На сервере ""%1"" нет доступа к сервисам.
		|Возможно, заблокированы порты для доступа к серверам 1С и/или Такском.
		|Их доступность необходимо проверить. Также рекомендуем проверить
		|правильность настроек прокси-сервера, если он используется
		|в сети предприятия.'");
	ДоступностьСервисов.Рекомендация.Подробная = СтрШаблон(ТекстПодробнойОшибки, ИмяКомпьютера());
		
КонецПроцедуры

Процедура ПроверитьКорневыеСертификаты(НаличиеКорневыхСертификатов, ПроверяемыеСервисы, Контекст) 
	
	Если ОбщегоНазначения.КлиентПодключенЧерезВебСервер()
		Или Контекст.ДанныеКорневыхСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", Ложь);
	
	Если МенеджерКриптографии = Неопределено И Не ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		Возврат; 
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеМенеджераКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.ОписаниеМенеджераКриптографииWindows();
		МенеджерКриптографии = Новый МенеджерКриптографии(ОписаниеМенеджераКриптографии.ИмяПрограммы,
			ОписаниеМенеджераКриптографии.ПутьКПрограмме, ОписаниеМенеджераКриптографии.ТипПрограммы);
	КонецЕсли;
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.КорневыеСертификаты);
	ОбщийРезультат = Истина;
	Для каждого ПроверяемыйСервис Из ПроверяемыеСервисы Цикл
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПроверяемыйСервис.Ключ);
		СервисБезПути = СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера;
		Сервис = Контекст.ДанныеКорневыхСертификатов["Services"].Получить(СервисБезПути);
		Если Сервис <> Неопределено Тогда
			Сертификаты = Новый Массив;
			РезультатДляСервиса = Истина;
			Для каждого Отпечаток Из Сервис["Thumbprints"] Цикл
				ОписаниеСертификата = Новый Структура;
				ОписаниеСертификата.Вставить("Результат", Хранилище.НайтиПоОтпечатку(ПолучитьДвоичныеДанныеИзHexСтроки(Отпечаток)) <> Неопределено);
				РезультатДляСервиса = РезультатДляСервиса И ОписаниеСертификата.Результат;
				Если Не ОписаниеСертификата.Результат Тогда
					АдресСертификата = АдресСертификатаПоОтпечатку(Отпечаток);
					РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресСертификата);
					Если РезультатЗагрузки.Статус Тогда
						Сертификат = ПолучитьИзВременногоХранилища(РезультатЗагрузки.Путь);
						УдалитьИзВременногоХранилища(РезультатЗагрузки.Путь);
					Иначе 
						ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(),
						РезультатЗагрузки.СообщениеОбОшибке);
						Сертификат = Неопределено;
					КонецЕсли;
				Иначе
					Сертификат = Неопределено; 
				КонецЕсли;
				ОписаниеСертификата.Вставить("Сертификат", Сертификат);
				Сертификаты.Добавить(ОписаниеСертификата);
			КонецЦикла;
			ДобавитьИнформациюОКорневомСертификатеСервиса(НаличиеКорневыхСертификатов,
				ПредставлениеСервисаЭДО(СервисБезПути), РезультатДляСервиса, Сертификаты);
		Иначе 
			// Считаем, что сертификаты сервисов, отсутствующих в результатах проверок всегда установлены.
			РезультатДляСервиса = Истина;
			ДобавитьИнформациюОКорневомСертификатеСервиса(НаличиеКорневыхСертификатов,
				ПредставлениеСервисаЭДО(СервисБезПути), РезультатДляСервиса, Новый Массив);
		КонецЕсли;
		ОбщийРезультат = ОбщийРезультат И РезультатДляСервиса;
	КонецЦикла;
	НаличиеКорневыхСертификатов.Результат = ОбщийРезультат;
	
	Если ДоступнаУстановкаСертификатов() Тогда
		КраткаяРекомендация = НСтр("ru = 'Необходимо установить корневые сертификаты.'");
	Иначе
		КраткаяРекомендация = НСтр("ru = 'Обратитесь к администратору.'");
	КонецЕсли;
	
	ПодробнаяРекомендация = НСтр("ru = 'Необходимо установить корневые сертификаты.
	|Инструкция по установке: http://1c-edo.ru/handbook/24/2516/'");
	НаличиеКорневыхСертификатов.Рекомендация.Краткая = КраткаяРекомендация;
	
	НаличиеКорневыхСертификатов.Рекомендация.Подробная = ПодробнаяРекомендация;
	
КонецПроцедуры

Функция ИнтернетРесурсДоступен(АдресРесурса)
	
	Попытка
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
		Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
		Соединение = Новый HTTPСоединение(СтруктураURI.Хост,,,, Прокси, 7,
			?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено));
		HTTPЗапрос = Новый HTTPЗапрос("");
		Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
		Результат = Истина; 
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции 

Функция ОтчетДляАдминистратораИнтернетСоединение(РезультатВидаДиагностики, ПараметрыВыполнения)
	
	ПредставленияПроверок = Новый Массив;
	ДобавитьПроверку(ПредставленияПроверок, "НаличиеИнтернетСоединения", НСтр("ru = '* Проверка интернет-соединения'"));
	
	ШаблонТекстСервис = Символы.Таб + НСтр("ru = '%1'");
	
	ВложенныеПроверки = Новый Массив;
	Для каждого Сервис Из РезультатВидаДиагностики.Результаты.АктивностьСервисов.Сервисы Цикл
		ДобавитьПроверку(ВложенныеПроверки, "АктивностьСервисов", СтрШаблон(ШаблонТекстСервис, Сервис.Адрес),);
	КонецЦикла;
	ДобавитьПроверку(ПредставленияПроверок, "АктивностьСервисов",
		НСтр("ru = '* Проверка активности сервиса'"),, ВложенныеПроверки, "Сервисы");
		
	ВложенныеПроверки = Новый Массив;
	Для каждого Сервис Из РезультатВидаДиагностики.Результаты.ДоступностьСервисов.Сервисы Цикл
		ДобавитьПроверку(ВложенныеПроверки, "ДоступностьСервисов", СтрШаблон(ШаблонТекстСервис, Сервис.Адрес));
	КонецЦикла;
	ДобавитьПроверку(ПредставленияПроверок, "ДоступностьСервисов", НСтр("ru = '* Проверка доступа к сервису'"),, ВложенныеПроверки, "Сервисы");
	
	Если РезультатВидаДиагностики.Результаты.НаличиеКорневыхСертификатов.Результат <> Неопределено Тогда
		ВложенныеПроверки = Новый Массив;
		Для каждого Сервис Из РезультатВидаДиагностики.Результаты.НаличиеКорневыхСертификатов.Сервисы Цикл
			ДобавитьПроверку(ВложенныеПроверки, "НаличиеКорневыхСертификатов", СтрШаблон(ШаблонТекстСервис, Сервис.Адрес));
		КонецЦикла;
		ДобавитьПроверку(ПредставленияПроверок, "НаличиеКорневыхСертификатов",
			НСтр("ru = '* Проверка наличия корневого сертификата
			|в хранилище операционной системы'"),, ВложенныеПроверки, "Сервисы");
	КонецЕсли;
	
	Возврат ОтчетДляАдминистратора(РезультатВидаДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(), ПараметрыВыполнения, ПредставленияПроверок);
	
КонецФункции

Функция АктивностьСервиса(РезультатыДиагностикиСоединения, ИмяСервера)
	
	Активность = Неопределено;
	Для каждого Сервис Из РезультатыДиагностикиСоединения.АктивностьСервисов.Сервисы Цикл
		Если ВРег(Сервис.Адрес) = ВРег(ИмяСервера) Тогда
			Активность = Сервис.Результат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Активность;
	
КонецФункции 

#КонецОбласти

#Область ДиагностикаКриптографии

Процедура ДиагностикаКриптографии(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст)
	
	ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография();
	
	РезультатДиагностикиКриптографии = Неопределено;
	Если Не ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, РезультатДиагностикиКриптографии) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОбновленияКлассификатораОшибокКриптографии();
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", Ложь);
	Если ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаСервере = Истина;
	КонецЕсли;
	
	ОпределитьНаличиеКорневогоСертификатаГУЦ(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст);
	УчетныеЗаписи = УчетныеЗаписиИзОтбора(ПараметрыВыполненияДиагностики.Отбор.УчетнаяЗапись);
	ОпределитьНеполученныеСертификаты(РезультатДиагностики, УчетныеЗаписи);
	ОпределитьНепривязанныеСертификатыИНаличиеСертификатов(РезультатДиагностики, ПараметрыВыполненияДиагностики);
	ЗаполнитьПаролиСертификатов(РезультатДиагностики, ПараметрыВыполненияДиагностики);
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из РезультатДиагностикиКриптографии.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
	КонецЦикла;
	РезультатДиагностикиКриптографии.Результат = ОбщийРезультат;
	
	Если Не ЗначениеЗаполнено(ПараметрыВыполненияДиагностики.ИмяКомпьютераКлиент) Тогда
		РезультатДиагностикиКриптографии.ОтчетДляАдминистратора =
			ОтчетДляАдминистратораКриптография(РезультатДиагностикиКриптографии, ПараметрыВыполненияДиагностики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНаличиеКорневогоСертификатаГУЦ(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст)
	
	Если Контекст.ДанныеКорневыхСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатКриптография = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		
	Для каждого АдресЗагрузки Из Контекст.ДанныеКорневыхСертификатов["MainCertificationCenterCertificates"] Цикл
		
		РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресЗагрузки);
		Если РезультатЗагрузки.Статус Тогда
			ContentType = РезультатЗагрузки.Заголовки["Content-Type"];
			Если ContentType <> Неопределено И СтрНайти(НРег(ContentType), "text/html") > 0 Тогда // Загрузилась страница с ошибкой
				СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить корневой сертификат по адресу %1'");
				ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
					СтрШаблон(СообщениеОбОшибке, АдресЗагрузки));
			Иначе 
				ДвоичныеДанныеСертификатГУЦ = ПолучитьИзВременногоХранилища(РезультатЗагрузки.Путь);
				УдалитьИзВременногоХранилища(РезультатЗагрузки.Путь);
				Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификатГУЦ);
				Отпечаток = Сертификат.Отпечаток;
				ОписаниеСертификата = Новый Структура;
				ОписаниеСертификата.Вставить("Сертификат", ДвоичныеДанныеСертификатГУЦ);
				ОписаниеСертификата.Вставить("Отпечаток", Отпечаток);
				ОписаниеСертификата.Вставить("Результат", Неопределено);
				РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер.Сертификаты.Добавить(ОписаниеСертификата);
				Если ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаСервере И ПараметрыВыполненияДиагностики.ЕстьКриптографияНаСервере Тогда
					МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", Ложь);
					ХранилищеКорневыхСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.КорневыеСертификаты);
					СертификатГУЦ = ХранилищеКорневыхСертификатов.НайтиПоОтпечатку(Отпечаток);
					ОписаниеСертификата.Вставить("Результат", ТипЗнч(СертификатГУЦ) = Тип("СертификатКриптографии"));
				КонецЕсли;
			КонецЕсли;
		Иначе 
			ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
				РезультатЗагрузки.СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаСервере И ПараметрыВыполненияДиагностики.ЕстьКриптографияНаСервере Тогда
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ЗаполнитьРезультатПроверкиКорневыхСертификатовГУЦ(РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер);
	КонецЕсли;
	
	РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер.Рекомендация.Подробная = НСтр("ru = 'Установите корневой сертификат ГУЦ
	|Инструкция: http://1c-edo.ru/handbook/28/2655/'");
	
КонецПроцедуры

Процедура ОпределитьНепривязанныеСертификатыИНаличиеСертификатов(РезультатДиагностики, ПараметрыВыполненияДиагностики)
	
	ЕстьКриптографияНаСервере = ПараметрыВыполненияДиагностики.ЕстьКриптографияНаСервере;
	ЕстьКриптографияНаКлиенте = ПараметрыВыполненияДиагностики.ЕстьКриптографияНаКлиенте;
	ЕстьМенеджерКриптографииНаСервере = ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаСервере;
	ЕстьМенеджерКриптографииНаКлиенте = ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаКлиенте;
	
	МассивОтпечатковСертификатов = ОтпечаткиСертификатовКлиентаИСервера(ПараметрыВыполненияДиагностики);
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхСертификатов(ПараметрыВыполненияДиагностики);
	ПривязанныеКУчетнымЗаписямСертификаты = ТаблицаДоступныхСертификатов.Скопировать(Новый Структура("ПривязанКУчетнойЗаписи", Истина));
	
	РезультатКриптография = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
	
	Для каждого СтрокаТЗ Из ТаблицаДоступныхСертификатов Цикл
		Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.Отпечаток) = Неопределено Тогда
			РезультатКриптография.СертификатыОтсутствующиеВЛичномХранилище.Добавить(СтрокаТЗ.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДоступныхСертификатов.Количество() = 0 Тогда
		РезультатКриптография.УчетныеЗаписиБезСертификатов = УчетныеЗаписиБезСертификатов(МассивОтпечатковСертификатов);
	КонецЕсли;
	
	Если РезультатДиагностики.ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ЗаполнитьДоступныеУчетныеЗаписи(РезультатДиагностики, ПараметрыВыполненияДиагностики, ТаблицаДоступныхСертификатов);
	КонецЕсли;
	
	Отпечатки = Новый Структура;
	Если ЕстьКриптографияНаСервере И ЕстьМенеджерКриптографииНаСервере Тогда
		МассивОтпечатковСертификатовСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов(Ложь);
		Отпечатки.Вставить("МассивОтпечатковСервер", МассивОтпечатковСертификатовСервер);
	КонецЕсли;
	Отпечатки.Вставить("МассивОтпечатковКлиент", ПараметрыВыполненияДиагностики.МассивОтпечатковСертификатовКлиент);
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
	НастройкиЭДОИСертификатыАвторизации = ОбменСКонтрагентамиСлужебный.НастройкиЭДОИСертификатыАвторизации(РезультатДиагностики.ДоступныеУчетныеЗаписи,
		КонтекстОперации,, Отпечатки, Ложь);
	
	РезультатКриптография.ИспользоватьЭлектроннуюПодписьВМоделиСервиса = ОбменСКонтрагентамиСлужебный.ИспользоватьЭлектроннуюПодписьВМоделиСервиса();
	
	НеоблачныеСертификаты = Новый Массив;
	СвойстваСертификатов = ОбменСКонтрагентамиСлужебный.ЭтоСертификатыОблачногоСервиса(ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Ссылка"));
	Для каждого КлючИЗначение Из СвойстваСертификатов Цикл
		Если КлючИЗначение.Значение Тогда
			РезультатКриптография.ОблачныеСертификаты.Добавить(КлючИЗначение.Ключ);
		Иначе 
			НеоблачныеСертификаты.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	РезультатКриптография.ЕстьНеоблачныеСертификаты = НеоблачныеСертификаты.Количество() > 0;
	
	Если (ЕстьКриптографияНаСервере И ЕстьМенеджерКриптографииНаСервере)
		Или (ЕстьКриптографияНаКлиенте И ЕстьМенеджерКриптографииНаКлиенте) Тогда
		РезультатКриптография.Результаты.НаличиеСертификатов.Результат = ТаблицаДоступныхСертификатов.Количество() > 0;
		Если РезультатКриптография.Результаты.НаличиеСертификатов.Результат = Ложь
			И РезультатДиагностики.Результаты.Криптография.Результаты.НеполученныеСертификаты.Результат = Ложь Тогда
			РезультатДиагностики.Результаты.Криптография.Результаты.НеполученныеСертификаты.Результат = Неопределено;
			РезультатКриптография.Результаты.НаличиеСертификатов.ВариантСостояния = "ОжидаетсяВыпуск";
		КонецЕсли;
	КонецЕсли;
	РезультатКриптография.Результаты.НаличиеСертификатов.Сертификаты = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Ссылка");
	РезультатКриптография.ПривязанныеКУчетнымЗаписямСертификаты = ПривязанныеКУчетнымЗаписямСертификаты.ВыгрузитьКолонку("Ссылка");
	НепривязанныеСертификаты = ТаблицаДоступныхСертификатов.НайтиСтроки(Новый Структура("ТребуетсяПривязкаКУчетнойЗаписи", Истина));
	
	Если НастройкиЭДОИСертификатыАвторизации.Свойство("УчетныеЗаписиБезДоступныхСертификатов")
		И НастройкиЭДОИСертификатыАвторизации.УчетныеЗаписиБезДоступныхСертификатов.Количество() Тогда
		Для каждого СтрокаТЗ Из НепривязанныеСертификаты Цикл
			РезультатКриптография.Результаты.НепривязанныеСертификаты.Сертификаты.Добавить(СтрокаТЗ.Ссылка);
		КонецЦикла;
		Если ТаблицаДоступныхСертификатов.Количество() > 0 Тогда
			РезультатКриптография.Результаты.НепривязанныеСертификаты.Результат = НепривязанныеСертификаты.Количество() = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПаролиСертификатов(РезультатДиагностики, ПараметрыВыполненияДиагностики)
	
	МассивОтпечатковСертификатов = ОтпечаткиСертификатовКлиентаИСервера(ПараметрыВыполненияДиагностики);
	
	РезультатКриптография = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		
	СоответствиеДоступныхСертификатов = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(МассивОтпечатковСертификатов,,, Ложь);
	Для каждого ДанныеСертификата Из СоответствиеДоступныхСертификатов Цикл
		Если ДанныеСертификата.Значение.ПарольПолучен Тогда
			РезультатКриптография.ПаролиСертификатов.Вставить(ДанныеСертификата.Ключ, ДанныеСертификата.Значение.ПарольПользователя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтпечаткиСертификатовКлиентаИСервера(ПараметрыВыполненияДиагностики) 
	
	ЕстьКриптографияНаСервере = ПараметрыВыполненияДиагностики.ЕстьКриптографияНаСервере;
	ЕстьКриптографияНаКлиенте = ПараметрыВыполненияДиагностики.ЕстьКриптографияНаКлиенте;
	ЕстьМенеджерКриптографииНаСервере = ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаСервере;
	ЕстьМенеджерКриптографииНаКлиенте = ПараметрыВыполненияДиагностики.ЕстьМенеджерКриптографииНаКлиенте;
	
	МассивОтпечатковСертификатов = Новый Массив;
	МассивОтпечатковСертификатовСервер = Неопределено; 
	Если ЕстьКриптографияНаСервере И ЕстьМенеджерКриптографииНаСервере Тогда
		МассивОтпечатковСертификатовСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов(Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСертификатовСервер);
	КонецЕсли;
	Если ЕстьКриптографияНаКлиенте И ЕстьМенеджерКриптографииНаКлиенте Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, ПараметрыВыполненияДиагностики.МассивОтпечатковСертификатовКлиент);
	КонецЕсли;
	
	Возврат МассивОтпечатковСертификатов;
	
КонецФункции 

Процедура ЗаполнитьДоступныеУчетныеЗаписи(РезультатДиагностики, ПараметрыВыполненияДиагностики, ТаблицаДоступныхСертификатов = Неопределено) 
	
	ОтборУчетнаяЗапись = ПараметрыВыполненияДиагностики.Отбор.УчетнаяЗапись;
	Если ЗначениеЗаполнено(ОтборУчетнаяЗапись) Тогда
		РезультатДиагностики.ДоступныеУчетныеЗаписи = УчетныеЗаписиИзОтбора(ОтборУчетнаяЗапись);
	Иначе 
		Если ТаблицаДоступныхСертификатов = Неопределено Тогда
			ТаблицаДоступныхСертификатов = ТаблицаДоступныхСертификатов(ПараметрыВыполненияДиагностики);
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	СертификатыУчетныхЗаписейЭДО.Сертификат В(&Сертификаты)";
		
		Запрос.УстановитьПараметр("Сертификаты", ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Ссылка"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РезультатДиагностики.ДоступныеУчетныеЗаписи.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция УчетныеЗаписиБезСертификатов(Отпечатки)
	
	ПользователиДоступныхСертификатов = Новый Массив;
	ПользователиДоступныхСертификатов.Добавить(Пользователи.АвторизованныйПользователь());
	ПользователиДоступныхСертификатов.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПользователиДоступныхСертификатов.Добавить(Пользователи.СсылкаНеуказанногоПользователя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь КАК Пользователь,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО (СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка)
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток В(&Отпечатки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|ГДЕ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО ЕСТЬ NULL
		|ИТОГИ ПО
		|	ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("Отпечатки", Отпечатки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторЭДО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УчетныеЗаписиБезСертификатов = Новый Массив;
	Пока ВыборкаИдентификаторЭДО.Следующий() Цикл
	
		ВыборкаДетальныеЗаписи = ВыборкаИдентификаторЭДО.Выбрать();
		ЕстьСертификат = Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ПользователиДоступныхСертификатов.Найти(ВыборкаДетальныеЗаписи.Пользователь) <> Неопределено
				И Не ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				ЕстьСертификат = Истина;
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьСертификат Тогда
			УчетныеЗаписиБезСертификатов.Добавить(ВыборкаИдентификаторЭДО.ИдентификаторЭДО);
		КонецЕсли;
	КонецЦикла;
	
	Возврат УчетныеЗаписиБезСертификатов;
	
КонецФункции

Процедура ОпределитьНеполученныеСертификаты(РезультатДиагностики, УчетныеЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = УчетныеЗаписиЭДО.Организация
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.СостояниеЗаявления = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявленияНаВыпускСертификата.Отправлено)
		|	И (НЕ &ЕстьОтборПоИдентификаторам
		|			ИЛИ УчетныеЗаписиЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО))";
	
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", УчетныеЗаписи);
	Запрос.УстановитьПараметр("ЕстьОтборПоИдентификаторам", УчетныеЗаписи.Количество() > 0);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатДиагностики.Результаты.Криптография.Результаты.НеполученныеСертификаты.Сертификаты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	РезультатДиагностики.Результаты.Криптография.Результаты.НеполученныеСертификаты.Результат =
		РезультатДиагностики.Результаты.Криптография.Результаты.НеполученныеСертификаты.Сертификаты.Количество() = 0;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияКлассификатораОшибокКриптографии()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКлассификаторОшибокКриптографии();
	
КонецПроцедуры

#Область ОтчетДляАдминистратораКриптография

Функция ОтчетДляАдминистратораКриптография(РезультатДиагностикиКриптографии, ПараметрыВыполнения) Экспорт
	
	ПредставленияПроверок = Новый Массив;
	ВложенныеПроверки = Новый Массив;
	
	МассивРезультатовПроверок = Новый Массив;
	Для каждого КлючИЗначение Из РезультатДиагностикиКриптографии.Результаты.ПроверкиСертификатов.Сертификаты Цикл
		МассивРезультатовПроверок.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	ВыборкаКлассификатораОшибок = ВыборкаКлассификатораОшибокКриптографии(МассивРезультатовПроверок);
	Для каждого КлючИЗначение Из РезультатДиагностикиКриптографии.Результаты.ПроверкиСертификатов.Сертификаты Цикл
		
		ДобавитьПроверкиСертификата(ВложенныеПроверки, КлючИЗначение.Значение.ПроверкиНаКлиенте,
			КлючИЗначение.Ключ, Истина, ВыборкаКлассификатораОшибок);
		ДобавитьПроверкиСертификата(ВложенныеПроверки, КлючИЗначение.Значение.ПроверкиНаСервере,
			КлючИЗначение.Ключ, Ложь, ВыборкаКлассификатораОшибок);
			
	КонецЦикла;

	ДобавитьПроверку(ПредставленияПроверок, "НаличиеПрограммыКриптографииКлиент",
		НСтр("ru = '* Проверка программы криптографии (клиент)'"));
	ДобавитьПроверку(ПредставленияПроверок, "НаличиеПрограммыКриптографииСервер",
		НСтр("ru = '* Проверка программы криптографии (сервер)'"));
	ДобавитьПроверку(ПредставленияПроверок, "НаличиеКорневогоСертификатаГУЦКлиент",
		НСтр("ru = '* Проверка наличия корневого сертификата ГУЦ
				   |в хранилище операционной системы (клиент)'"));
	ДобавитьПроверку(ПредставленияПроверок,"НаличиеКорневогоСертификатаГУЦСервер",
		НСтр("ru = '* Проверка наличия корневого сертификата ГУЦ
				   |в хранилище операционной системы (сервер)'"));
	ДобавитьПроверку(ПредставленияПроверок, "НаличиеСертификатов",
		НСтр("ru = '* Проверка наличия сертификатов'"));
	ДобавитьПроверку(ПредставленияПроверок, "НеполученныеСертификаты",
		НСтр("ru = '* Проверка наличия неполученных сертификатов'"));
	ДобавитьПроверку(ПредставленияПроверок, "НепривязанныеСертификаты",
		НСтр("ru = '* Проверка наличия сертификатов, непривязанных к учетным записям'"));
	ДобавитьПроверку(ПредставленияПроверок, "ПроверкиСертификатов",
		НСтр("ru = '* Проверка наличия ошибок сертификатов'"),, ВложенныеПроверки, "Сертификаты");
		
	Возврат ОтчетДляАдминистратора(РезультатДиагностикиКриптографии,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
		ПараметрыВыполнения, ПредставленияПроверок);
	
КонецФункции

Процедура ДобавитьПроверкиСертификата(ВложенныеПроверки, КоллекцияПроверок, Сертификат, КлиентскиеПроверки, ВыборкаКлассификатораОшибок)
	
	Если КоллекцияПроверок <> Неопределено Тогда
		Если КлиентскиеПроверки Тогда
			ШаблонПервойПроверки = НСтр("ru = '%1 * %2
			|%3 На клиенте'");
		Иначе 
			ШаблонПервойПроверки = НСтр("ru = '%1 * %2
			|%3 На сервере'");
		КонецЕсли;
		ПредставлениеПервойПроверки = СтрШаблон(ШаблонПервойПроверки, Символы.ПС + Символы.Таб, Сертификат, Символы.Таб);
		Сч = 0;
		
		Для каждого КлючИЗначениеПроверка Из КоллекцияПроверок Цикл
			Если СтрЗаканчиваетсяНа(КлючИЗначениеПроверка.Ключ, "Ошибка") Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеПроверки = ПредставлениеПроверкиСертификата(КлючИЗначениеПроверка.Ключ);
			Если Сч = 0 Тогда
				ПредставлениеПроверки = ПредставлениеПервойПроверки + Символы.ПС + ПредставлениеПроверки
			КонецЕсли;
			Рекомендация = НоваяРекомендация();
			Рекомендация.Отступ = ОтступПроверокСертификата() + "  ";
			Если ВыборкаКлассификатораОшибок.НайтиСледующий(КоллекцияПроверок[КлючИЗначениеПроверка.Ключ + "Ошибка"], "ТекстОшибки") Тогда
				Если ЗначениеЗаполнено(ВыборкаКлассификатораОшибок.Решение) Тогда
					Рекомендация.Подробная = ВыборкаКлассификатораОшибок.Решение;
				КонецЕсли;
				ВыборкаКлассификатораОшибок.Сбросить();
			КонецЕсли;
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("Результат", КлючИЗначениеПроверка.Значение);
			РезультатПроверки.Вставить("Рекомендация", Рекомендация);
			ДобавитьПроверку(ВложенныеПроверки, "ОшибкиСертификатов", ПредставлениеПроверки,
				РезультатПроверки);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПредставлениеПроверкиСертификата(ЗначениеПроверки)
	
	ПредставленияПроверок = Новый Соответствие;
	ПредставленияПроверок.Вставить("НаличиеСертификата", НСтр("ru = 'Проверка наличия сертификата в личном списке'"));
	ПредставленияПроверок.Вставить("ДанныеСертификата",  НСтр("ru = 'Проверка корректности данных сертификата'"));
	ПредставленияПроверок.Вставить("НаличиеПрограммы",   НСтр("ru = 'Проверка наличия программы для подписания и расшифровки'"));
	ПредставленияПроверок.Вставить("Подписание",         НСтр("ru = 'Проверка подписания данных'"));
	ПредставленияПроверок.Вставить("ПроверкаПодписи",    НСтр("ru = 'Проверка созданной подписи'"));
	ПредставленияПроверок.Вставить("Шифрование",         НСтр("ru = 'Проверка шифрования данных'"));
	ПредставленияПроверок.Вставить("Расшифровка",        НСтр("ru = 'Проверка расшифровки данных'"));
	ПредставленияПроверок.Вставить("ЗаконныйСертификат", НСтр("ru = 'Проверка наличия в описании субъекта сертификата поля ""SN""'"));
	
	ПредставлениеПроверки = ПредставленияПроверок[ЗначениеПроверки];
	Если Не ЗначениеЗаполнено(ПредставлениеПроверки) Тогда
		ПредставлениеПроверки = ЗначениеПроверки;
	КонецЕсли;
	
	Возврат ОтступПроверокСертификата() + ПредставлениеПроверки;
	
КонецФункции

Функция ОтступПроверокСертификата()
		
	Возврат Символы.Таб + Символы.Таб;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДиагностикаИнтернетПоддержки

Процедура ДиагностикаИнтернетПоддержки(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст) 
	
	ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка();
	
	РезультатДиагностикиИнтернетПоддержки = Неопределено;
	Если Не ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, РезультатДиагностикиИнтернетПоддержки) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВнедрениеБИП(РезультатДиагностики, ПараметрыВыполненияДиагностики);
	ПроверитьПравильностьЛогинаПароля(РезультатДиагностики, ПараметрыВыполненияДиагностики);	
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из РезультатДиагностикиИнтернетПоддержки.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат;
	КонецЦикла;
	РезультатДиагностикиИнтернетПоддержки.Результат = ОбщийРезультат;
	РезультатДиагностикиИнтернетПоддержки.ОтчетДляАдминистратора = 
		ОтчетДляАдминистратораИнтернетПоддержка(РезультатДиагностикиИнтернетПоддержки, ПараметрыВыполненияДиагностики);
	
КонецПроцедуры

Процедура ПроверитьВнедрениеБИП(РезультатДиагностики, ПараметрыВыполненияДиагностики) 
	
	РезультатИнтернетПоддержка = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка());
			
	РезультатИнтернетПоддержка.Результаты.ВнедрениеБИП.Результат = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей");
	РезультатИнтернетПоддержка.Результаты.ВнедрениеБИП.Рекомендация.Подробная = НСтр("ru = 'Внедрите в конфигурацию библиотеку интернет-поддержки.
		|Инструкция: https://its.1c.ru/db/uisldoc'");
	
КонецПроцедуры

Процедура ПроверитьПравильностьЛогинаПароля(РезультатДиагностики, ПараметрыВыполненияДиагностики) 
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатИнтернетПоддержка = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1C-EDO");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) И Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		РезультатИнтернетПоддержка.Результаты.КорректностьДанныхИнтернетПоддержки.Результат = Ложь;
		РезультатИнтернетПоддержка.Результаты.КорректностьДанныхИнтернетПоддержки.Рекомендация.Подробная = НСтр("ru = 'Введите корректные данные интернет-поддержки.
			|Инструкция: https://its.1c.ru/db/uisldoc#content:172:hdoc:issogl2_подключение_интернет-поддержки'");
	Иначе 
		РезультатИнтернетПоддержка.Результаты.КорректностьДанныхИнтернетПоддержки.Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтчетДляАдминистратораИнтернетПоддержка(РезультатВидаДиагностики, ПараметрыВыполнения)
	
	ПредставленияПроверок = Новый Массив;
	ДобавитьПроверку(ПредставленияПроверок, "ВнедрениеБИП", НСтр("ru = '* Проверка наличия библиотеки интернет-поддержки в конфигурации'"));
	ДобавитьПроверку(ПредставленияПроверок, "КорректностьДанныхИнтернетПоддержки",
		НСтр("ru = '* Проверка правильности логина/пароля интернет-поддержки'"));
	
	Возврат ОтчетДляАдминистратора(РезультатВидаДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка(),
		ПараметрыВыполнения, ПредставленияПроверок);
	
КонецФункции 

#КонецОбласти

#Область ДиагностикаРаботыСФайлами

Процедура ДиагностикаРаботыСФайлами(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст) 
	
	ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами();
	
	РезультатДиагностикиРаботыСФайлами = Неопределено;
	Если Не ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, РезультатДиагностикиРаботыСФайлами) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьДлинуПутиКаталогаВременныхФайлов(РезультатДиагностики, ПараметрыВыполненияДиагностики);
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из РезультатДиагностикиРаботыСФайлами.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат;
	КонецЦикла;
	РезультатДиагностикиРаботыСФайлами.Результат = ОбщийРезультат;
	РезультатДиагностикиРаботыСФайлами.ОтчетДляАдминистратора = 
		ОтчетДляАдминистратораРаботаСФайлами(РезультатДиагностикиРаботыСФайлами, ПараметрыВыполненияДиагностики);
	
КонецПроцедуры

Процедура ПроверитьДлинуПутиКаталогаВременныхФайлов(РезультатДиагностики, ПараметрыВыполненияДиагностики) 
	
	РезультатРаботаСФайлами = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами());
			
	ДлинаПутиКФайлу = РезультатРаботаСФайлами.Результаты.ДлинаПутиКФайлу;
	Если ПараметрыВыполненияДиагностики.ДиагностикаРаботыСФайламиВРежимеОтображенияРезультата Тогда
		ДлинаПутиКФайлу.Результат = Ложь;
	Иначе 
		ДлинаПутиКФайлу.Результат = СтрДлина(КаталогВременныхФайлов()) < 104;
		// Величина 104 рассчитана по формуле:
		// 256 - 152 = 104, где 152 - максимально возможная длина имени файла, на примере: 
		// ON_KORSCHFDOPPOKMARK_2AEA1A8BC27-E950-4E6A-AA04-D54BF4DFCBCA_2AE4DF1667F-1E85-4E3D-8D2F-C10B9A232503_20190801_e2296ada-b46c-11e9-87e2-b06ebf2faeb9-1.p7s
	КонецЕсли;
	ДлинаПутиКФайлу.Рекомендация.Подробная = НСтр("ru = 'Путь к файлам в каталоге временных файлов должен быть короче 256 символов.
														 |В настройках операционной системы, в переменных среды, измените путь
														 |к временным файлам на более короткий.'");
	
КонецПроцедуры

Функция ОтчетДляАдминистратораРаботаСФайлами(РезультатВидаДиагностики, ПараметрыВыполнения)
	
	ПредставленияПроверок = Новый Массив;
	ДобавитьПроверку(ПредставленияПроверок, "ДлинаПутиКФайлу", НСтр("ru = '* Проверка длины пути к файлу в каталоге временных файлов'"));
	
	Возврат ОтчетДляАдминистратора(РезультатВидаДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами(), ПараметрыВыполнения, ПредставленияПроверок);
	
КонецФункции

#КонецОбласти

#Область ТестАутентификации

Процедура ТестАутентификации(РезультатДиагностики, ПараметрыВыполненияДиагностики, Контекст) 
	
	ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации();
	РезультатДиагностикиТестАутентификации = Неопределено;
	Если Не ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, РезультатДиагностикиТестАутентификации) Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДанныеУчетныхЗаписей(РезультатДиагностики, ПараметрыВыполненияДиагностики);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчетныхЗаписей(РезультатДиагностики, ПараметрыВыполненияДиагностики)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК НаименованиеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО В(&ИдентификаторыЭДО)";
	
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", РезультатДиагностики.ДоступныеУчетныеЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеУчетнойЗаписи = Новый Структура;
		ДанныеУчетнойЗаписи.Вставить("НаименованиеУчетнойЗаписи");
		ДанныеУчетнойЗаписи.Вставить("СпособОбменаЭД");
		ДанныеУчетнойЗаписи.Вставить("ЭтоПрямойОбмен",
			ОбменСКонтрагентамиСлужебный.ЭтоПрямойОбмен(ВыборкаДетальныеЗаписи.СпособОбменаЭД));
		ЗаполнитьЗначенияСвойств(ДанныеУчетнойЗаписи, ВыборкаДетальныеЗаписи);
		
		РезультатДиагностики.ДанныеУчетныхЗаписей.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО, ДанныеУчетнойЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтчетДляАдминистратораТестАутентификации(РезультатВидаДиагностики, ПараметрыВыполнения) Экспорт
	
	ПредставленияПроверок = Новый Массив;
	
	Если РезультатВидаДиагностики.Результаты.ТестАутентификации.Результат Тогда
		ДобавитьПроверку(ПредставленияПроверок, "ТестАутентификации", НСтр("ru = '* Тест аутентификации'"));
	Иначе 
		Для каждого ОписаниеУчетнойЗаписи Из РезультатВидаДиагностики.Результаты.ТестАутентификации.УчетныеЗаписи Цикл
			ШаблонПроверки = НСтр("ru = '* Тест аутентификации %1'");
			ПредставлениеПроверки = СтрШаблон(ШаблонПроверки, ОписаниеУчетнойЗаписи.УчетнаяЗапись);
			ДобавитьПроверку(ПредставленияПроверок, "ТестАутентификации", ПредставлениеПроверки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтчетДляАдминистратора(РезультатВидаДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации(), ПараметрыВыполнения, ПредставленияПроверок);
	
КонецФункции

#КонецОбласти

#Область РезультатДиагностики

// Возвращает результат диагностики электронного документооборота.
//
// Параметры:
//  ВидыДиагностики - Массив из Строка - виды диагностики, см. область ВидыДиагностики общего
//                             модуля ОбменСКонтрагентамиДиагностикаКлиентСервер.
// 
// Возвращаемое значение:
//  Структура - с ключами:
//    * Результат - Булево - истина, если все виды диагностики выполнены успешно.
//    * Результаты - Структура - результаты диагностики:
//      ** Ключ - Строка - вид диагностики.
//      ** Значение - Структура - результат вида диагностики, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатВидаДиагностики.
//
Функция НовыйРезультатДиагностики(ВидыДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	
	Результаты = Новый Структура;
	
	Для каждого ВидДиагностики Из ПоддерживаемыеВидыДиагностики() Цикл
		Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ВидыДиагностики, ВидДиагностики) Тогда
			Результаты.Вставить(ВидДиагностики, НовыйРезультатВидаДиагностики(ВидДиагностики));
		КонецЕсли;
	КонецЦикла; 
	
	Результат.Вставить("Результаты", Результаты);
	Результат.Вставить("ДоступныеУчетныеЗаписи", Новый Массив);
	Результат.Вставить("ДанныеУчетныхЗаписей", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции 

// Возвращает результат вида диагностики электронного документооборота.
//
// Параметры:
//  ВидыДиагностики - Массив из Строка - виды диагностики, см. область ВидыДиагностики общего
//                             модуля ОбменСКонтрагентамиДиагностикаКлиентСервер.
// 
// Возвращаемое значение:
//  - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностикиСоединения.
//  - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностикиКриптографии.
//  - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностикиИнтернетПоддержки.
//  - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностикиРаботыСФайлами.
//
Функция НовыйРезультатВидаДиагностики(ВидДиагностики) 
	
	Если ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение() Тогда
		Возврат НовыйРезультатДиагностикиСоединения();
	ИначеЕсли ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография() Тогда
		Возврат НовыйРезультатДиагностикиКриптографии();
	ИначеЕсли ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка() Тогда
		Возврат НовыйРезультатДиагностикиИнтернетПоддержки();
	ИначеЕсли ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами() Тогда
		Возврат НовыйРезультатДиагностикиРаботыСФайлами();
	ИначеЕсли ВидДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации() Тогда
		Возврат НовыйРезультатДиагностикиТестАутентификации();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает результат диагностики интернет-соединения.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - истина, если диагностика интернет-соединения выполнена успешно.
//    * Результаты - Структура - где:
//        ** Ключ - Строка - вид выполненной проверки.
//        ** Значение - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатНаличиеИнтернетСоединения.
//        ** - // -   - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностикиСервисов.
//    * ОтчетДляАдминистратора - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйОтчетДляАдминистратора.
//
Функция НовыйРезультатДиагностикиСоединения() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОтчетДляАдминистратора", НовыйОтчетДляАдминистратора());
	
	Результаты = Новый Структура;
	Результаты.Вставить("НаличиеИнтернетСоединения", НовыйРезультатНаличиеИнтернетСоединения());
	Результаты.Вставить("АктивностьСервисов", НовыйРезультатДиагностикиСервисов());
	Результаты.Вставить("ДоступностьСервисов", НовыйРезультатДиагностикиСервисов());
	Результаты.Вставить("НаличиеКорневыхСертификатов", НовыйРезультатДиагностикиСервисов());
	
	Результат.Вставить("Результаты", Результаты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат диагностики криптографии.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - истина, если диагностика криптографии выполнена успешно.
//    * Результаты - Структура - где:
//        ** Ключ - Строка - вид выполненной проверки.
//        ** Значение - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатНаличиеПрограммыКриптографии.
//        ** - // -   - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатНаличиеКорневогоСертификатаГУЦ.
//        ** - // -   - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовоеОписаниеРезультатаССертификатами.
//    * ОтчетДляАдминистратора - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйОтчетДляАдминистратора.
//
Функция НовыйРезультатДиагностикиКриптографии() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОтчетДляАдминистратора", НовыйОтчетДляАдминистратора());
	Результат.Вставить("СертификатыСУстановленнымиПаролями", Новый Массив);
	Результат.Вставить("УчетныеЗаписиБезСертификатов", Новый Массив);
	Результат.Вставить("СертификатыОтсутствующиеВЛичномХранилище", Новый Массив);
	Результат.Вставить("ИспользоватьЭлектроннуюПодписьВМоделиСервиса", Ложь);
	Результат.Вставить("ЕстьНеоблачныеСертификаты", Ложь);
	Результат.Вставить("ОблачныеСертификаты", Новый Массив);
	Результат.Вставить("ПаролиСертификатов", Новый Соответствие);
	Результат.Вставить("ПривязанныеКУчетнымЗаписямСертификаты", Новый Массив);
	
	Результаты = Новый Структура;
	Результаты.Вставить("НаличиеПрограммыКриптографииКлиент", НовыйРезультатНаличиеПрограммыКриптографии());
	Результаты.Вставить("НаличиеПрограммыКриптографииСервер", НовыйРезультатНаличиеПрограммыКриптографии());
	Результаты.Вставить("НаличиеКорневогоСертификатаГУЦКлиент", НовыйРезультатНаличиеКорневогоСертификатаГУЦ());
	Результаты.Вставить("НаличиеКорневогоСертификатаГУЦСервер", НовыйРезультатНаличиеКорневогоСертификатаГУЦ());
	НаличиеСертификатов = НовоеОписаниеРезультатаССертификатами();
	НаличиеСертификатов.Вставить("ВариантСостояния", "");
	НаличиеСертификатов.Вставить("УчетныеЗаписиБезОграниченияПоПользователюСертификата", Новый Массив);
	Результаты.Вставить("НаличиеСертификатов", НаличиеСертификатов);
	Результаты.Вставить("НеполученныеСертификаты", НовоеОписаниеРезультатаССертификатами());
	Результаты.Вставить("НепривязанныеСертификаты", НовоеОписаниеРезультатаССертификатами());
	Результаты.Вставить("ПроверкиСертификатов", НовоеОписаниеРезультатаССертификатами(Истина));
	
	Результат.Вставить("Результаты", Результаты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат диагностики работы с файлами.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - истина, если диагностика работы с файлами выполнена успешно.
//    * Результаты - Структура - где:
//        ** Ключ - Строка - вид выполненной проверки.
//        ** Значение - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатПроверки.
//    * ОтчетДляАдминистратора - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйОтчетДляАдминистратора.
//
Функция НовыйРезультатДиагностикиРаботыСФайлами()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОтчетДляАдминистратора", НовыйОтчетДляАдминистратора());
	
	Результаты = Новый Структура;
	Результаты.Вставить("ДлинаПутиКФайлу", НовыйРезультатПроверки());
	
	Результат.Вставить("Результаты", Результаты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат диагностики интернет-поддержки.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - истина, если диагностика интернет-поддержки выполнена успешно.
//    * Результаты - Структура - где:
//        ** Ключ - Строка - вид выполненной проверки.
//        ** Значение - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатПроверки.
//    * ОтчетДляАдминистратора - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйОтчетДляАдминистратора.
//
Функция НовыйРезультатДиагностикиИнтернетПоддержки() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОтчетДляАдминистратора", НовыйОтчетДляАдминистратора());
	
	Результаты = Новый Структура;
	Результаты.Вставить("ВнедрениеБИП", НовыйРезультатПроверки());
	Результаты.Вставить("КорректностьДанныхИнтернетПоддержки", НовыйРезультатПроверки());
	
	Результат.Вставить("Результаты", Результаты);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат теста аутентификации.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * Результат - Булево - истина, если тест аутентификации выполнен успешно.
//    * Результаты - Структура - где:
//        ** Ключ - Строка - вид выполненной проверки.
//        ** Значение - Структура - результат выполненной проверки, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатПроверки.
//    * ОтчетДляАдминистратора - Структура - см. ОбменСКонтрагентамиДиагностика.НовыйОтчетДляАдминистратора.
//
Функция НовыйРезультатДиагностикиТестАутентификации() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОтчетДляАдминистратора", НовыйОтчетДляАдминистратора());
	
	Результаты = Новый Структура;
	РезультатПроверки = НовыйРезультатПроверки();
	РезультатПроверки.Вставить("УчетныеЗаписи", Новый Массив);
	Результаты.Вставить("ТестАутентификации", РезультатПроверки);
	
	Результат.Вставить("Результаты", Результаты);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует результат проверки.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат выполнения проверки. Если Неопределено - проверка не выполнялась.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовыйРезультатПроверки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Результат", Неопределено);
	РезультатПроверки.Вставить("Рекомендация", НоваяРекомендация());
	
	Возврат РезультатПроверки;
	
КонецФункции

// Инициализирует результат проверки наличия интернет-соединения.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат выполнения проверки. Если Неопределено - проверка не выполнялась.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовыйРезультатНаличиеИнтернетСоединения() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Рекомендация", НоваяРекомендация());
	Возврат Результат;
	
КонецФункции

// Инициализирует результат диагностики сервисов.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат диагностики проверки. Если Неопределено - диагностика не выполнялась.
//  * Сервисы - Массив из Структура - описание проверяемых сервисов.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовыйРезультатДиагностикиСервисов() 
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Сервисы", Новый Массив);
	Результат.Вставить("Рекомендация", НоваяРекомендация());
	Возврат Результат;
	
КонецФункции

// Инициализирует результат проверки наличия программы криптографии.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат выполнения проверки. Если Неопределено - проверка не выполнялась.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовыйРезультатНаличиеПрограммыКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Рекомендация", НоваяРекомендация());
	
	Возврат Результат;
	
КонецФункции

// Инициализирует результат проверки наличия корневого сертификата головного удостоверяющего центра.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат выполнения проверки. Если Неопределено - проверка не выполнялась.
//  * Сертификат - ДвоичныеДанные, Неопределено - корневой сертификат головного удостоверяющего центра.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовыйРезультатНаличиеКорневогоСертификатаГУЦ()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Сертификаты", Новый Массив);
	Результат.Вставить("Рекомендация", НоваяРекомендация());
	
	Возврат Результат;
	
КонецФункции

// Инициализирует описание результата проверки.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Результат - Булево, Неопределено - результат выполнения проверки. Если Неопределено - проверка не выполнялась.
//  * Сертификаты - Соответствие, Массив из ДвоичныеДанные - сертификаты.
//  * Рекомендация - Структура - см. ОбменСКонтрагентамиДиагностика.НоваяРекомендация.
//
Функция НовоеОписаниеРезультатаССертификатами(ИспользоватьСоответствие = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Сертификаты", ?(ИспользоватьСоответствие, Новый Соответствие, Новый Массив));
	Результат.Вставить("Рекомендация", НоваяРекомендация());
	
	Возврат Результат;
	
КонецФункции

// Возвращает рекомендацию.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Краткая -   Строка - краткая рекомендация для пользователя.
//  * Подробная - Строка - подробная рекомендация для администратора.
//  * Отступ -    Строка - будет добавлен в отчет перед заголовком и текстом рекомендации.
//
Функция НоваяРекомендация() 
	
	Рекомендация = Новый Структура;
	Рекомендация.Вставить("Краткая", "");
	Рекомендация.Вставить("Подробная", "");
	Рекомендация.Вставить("Отступ", "");
	
	Возврат Рекомендация;
	
КонецФункции

// Возвращает отчет для администратора.
// 
// Возвращаемое значение:
// Структура - с ключами:
//  * Текст - Строка - подробный отчет с результатами диагностики.
//  * Заголовок - Строка - заголовок отчета.
//
Функция НовыйОтчетДляАдминистратора() 
	
	Возврат Новый Структура("Текст, Заголовок");
	
КонецФункции

#КонецОбласти

#Область ОтчетДляАдминистратора

Функция ОтчетДляАдминистратора(РезультатВидаДиагностики, ВидДиагностики, ПараметрыВыполнения, ПредставленияПроверок)
	
	ПредставлениеВидаДиагностики = ОбменСКонтрагентамиДиагностикаКлиентСервер.ПолучитьСклонение(ВидДиагностики, "Родительный");
	
	Отчет = Новый ТекстовыйДокумент;
	
	Если ПараметрыВыполнения.ИнформационнаяБазаФайловая И ЗначениеЗаполнено(ПараметрыВыполнения.ИмяКомпьютераКлиент) Тогда
		ПредставлениеКомпьютера = СтрШаблон(НСтр("ru = 'на компьютере ""%1""'"), ПараметрыВыполнения.ИмяКомпьютераКлиент);
	Иначе
		ИмяКомпьютера = ИмяКомпьютера();
		ПредставлениеКомпьютера = СтрШаблон(НСтр("ru = 'на сервере ""%1""'"), ИмяКомпьютера);
	КонецЕсли;
	
	Шапка = СтрШаблон(НСтр("ru = 'Результаты диагностики %1 %2'"), ПредставлениеВидаДиагностики, ПредставлениеКомпьютера);
	
	Результаты = РезультатВидаДиагностики.Результаты;
	
	Отчет.ДобавитьСтроку(Шапка);
	Отчет.ДобавитьСтроку("");
	
	МаксимальнаяДлинаСтроки = 0;
	Для каждого Проверка Из ПредставленияПроверок Цикл
		МаксимальнаяДлинаСтроки = Макс(МаксимальнаяДлинаСтроки, ДлинаПоследнейСтрокиТекста(Проверка.ПредставлениеПроверки));
		ВложенныеПроверки = Неопределено;
		Если Проверка.Свойство("ВложенныеПроверки", ВложенныеПроверки) И ЗначениеЗаполнено(ВложенныеПроверки) Тогда
			Для каждого ВложеннаяПроверка Из ВложенныеПроверки Цикл
				МаксимальнаяДлинаСтроки = Макс(МаксимальнаяДлинаСтроки, ДлинаПоследнейСтрокиТекста(ВложеннаяПроверка.ПредставлениеПроверки));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проверка Из ПредставленияПроверок Цикл
		ВложенныеПроверки = Неопределено;
		Проверка.Свойство("ВложенныеПроверки", ВложенныеПроверки);
		ДобавитьСтрокуВОтчет(Отчет, Проверка.ПредставлениеПроверки, Результаты[Проверка.НазваниеПроверки], МаксимальнаяДлинаСтроки,
			Не ЗначениеЗаполнено(ВложенныеПроверки));
		Если ЗначениеЗаполнено(ВложенныеПроверки) Тогда
			Сч = 0;
			ИндексПоследнегоЭлемента = ВложенныеПроверки.ВГраница();
			Для каждого ВложеннаяПроверка Из Проверка.ВложенныеПроверки Цикл
				Если Сч > Результаты[Проверка.НазваниеПроверки][Проверка.ИмяКоллекцииВложенныхПроверок].Количество() - 1 Тогда
					РезультатВложеннойПроверки = Неопределено;
				Иначе 
					РезультатВложеннойПроверки = Результаты[Проверка.НазваниеПроверки][Проверка.ИмяКоллекцииВложенныхПроверок][Сч];
				КонецЕсли;
				Если РезультатВложеннойПроверки = Неопределено Тогда
					ВложеннаяПроверка.Свойство("РезультатПроверки", РезультатВложеннойПроверки);
				КонецЕсли;
				ДобавитьСтрокуВОтчет(Отчет, ВложеннаяПроверка.ПредставлениеПроверки, РезультатВложеннойПроверки,
					МаксимальнаяДлинаСтроки, Сч = ИндексПоследнегоЭлемента);
				ДобавитьРекомендациюВОтчет(Отчет, РезультатВложеннойПроверки);
				Сч = Сч + 1;
			КонецЦикла; 
		КонецЕсли;
		Если ДобавитьРекомендациюВОтчет(Отчет, Результаты[Проверка.НазваниеПроверки]) Тогда
			Отчет.ДобавитьСтроку("");
		КонецЕсли;
	КонецЦикла;
	
	ОтчетДляАдминистратора = Новый Структура;
	ОтчетДляАдминистратора.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Диагностика %1. Отчет для администратора'"), ПредставлениеВидаДиагностики));
	ОтчетДляАдминистратора.Вставить("Текст", Отчет.ПолучитьТекст());
	
	Возврат ОтчетДляАдминистратора;
	
КонецФункции

Процедура ДобавитьПроверку(ПредставленияПроверок, НазваниеПроверки, ПредставлениеПроверки,
	РезультатПроверки = Неопределено, ВложенныеПроверки = Неопределено, ИмяКоллекцииВложенныхПроверок = "")
	
	Проверка = Новый Структура;
	Проверка.Вставить("НазваниеПроверки", НазваниеПроверки);
	Проверка.Вставить("ПредставлениеПроверки", ПредставлениеПроверки);
	Если РезультатПроверки <> Неопределено Тогда
		Проверка.Вставить("РезультатПроверки", РезультатПроверки);
	КонецЕсли;
	Если ВложенныеПроверки <> Неопределено Тогда
		Проверка.Вставить("ВложенныеПроверки", ВложенныеПроверки);
		Проверка.Вставить("ИмяКоллекцииВложенныхПроверок", ИмяКоллекцииВложенныхПроверок);
	КонецЕсли;
	
	ПредставленияПроверок.Добавить(Проверка);
	
КонецПроцедуры

Функция ДобавитьРекомендациюВОтчет(Отчет, РезультатОперацииДиагностики) 

	Если РезультатОперацииДиагностики.Результат <> Ложь
		Или (РезультатОперацииДиагностики.Свойство("Сервисы")
		И РезультатОперацииДиагностики.Сервисы.Количество() = 0) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Рекомендация = Неопределено;
	Если Не РезультатОперацииДиагностики.Свойство("Рекомендация", Рекомендация)
		Или Не ЗначениеЗаполнено(Рекомендация.Подробная) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отчет.ДобавитьСтроку(Рекомендация.Отступ + СтрШаблон(ШаблонРекомендации(), Рекомендация.Отступ + Рекомендация.Подробная));
	
	Возврат Истина;
	
КонецФункции

Функция ДлинаСтроки(Текст) 
	
	Возврат СтрДлина(Текст) + СтрЧислоВхождений(Текст, Символы.Таб) * 3;
	
КонецФункции

Процедура ДобавитьСтрокуВОтчет(Отчет, ПредставлениеРезультата, РезультатПроверки, МаксимальнаяДлинаСтроки,
		ДобавлятьПустуюСтроку = Истина)
	
	ДлинаПоследнейСтроки = ДлинаПоследнейСтрокиТекста(ПредставлениеРезультата);
	
	ДлинаДополнения = (МаксимальнаяДлинаСтроки - ДлинаПоследнейСтроки) + 1;
	
	Отчет.ДобавитьСтроку(ПредставлениеРезультата + ":"
		+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДлинаДополнения)
		+ ПредставлениеРезультатаПроверки(РезультатПроверки.Результат));
	
	Если ДобавлятьПустуюСтроку Тогда
		Отчет.ДобавитьСтроку("");
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеРезультатаПроверки(Результат)
	
	Если Результат = Истина Тогда
		Возврат НСтр("ru = 'успешно'");
	ИначеЕсли Результат = Ложь Тогда
		Возврат НСтр("ru = 'неуспешно'");
	Иначе 
		Возврат НСтр("ru = 'не выполнялась'");
	КонецЕсли;
	
КонецФункции

Функция ДлинаПоследнейСтрокиТекста(МногострочнаяСтрока) 
	
	МассивСтрок = СтрРазделить(МногострочнаяСтрока, Символы.ПС);
	ДлинаПоследнейСтроки = ДлинаСтроки(МассивСтрок[МассивСтрок.ВГраница()]);
	
	Возврат ДлинаПоследнейСтроки;
	
КонецФункции

Функция ШаблонРекомендации() 
	
	Возврат НСтр("ru = 'Рекомендации:
	|%1'");
	
КонецФункции

#КонецОбласти

#Область Прочее

// Выполняет диагностику обмена электронными документами.
// Виды выполняемых проверок:
//      * Интернет-соединение
//          ** Наличие интернет-соединения
//          ** Активность сервисов: работоспособны ли ресурсы: https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//          ** Доступность сервисов: доступны ли из клиентского приложения ресурсы: https://1c-edo.ru,
//             https://1c-api.taxcom.ru, и т.п.
//          ** Наличие корневых сертификатов сервисов: установлены ли в хранилище сертификатов корневые сертификаты ресурсов:
//             https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//      * Криптография
//          ** Наличие программы криптографии: установлена ли программа для защиты информации.
//          ** Наличие корневого сертификата ГУЦ: установлен ли в хранилище сертификатов сертификат
//             головного удостоверяющего центра.
//          ** Наличие сертификатов: имеются ли в программе сертификаты для работы с электронным документооборотом.
//          ** Неполученные сертификаты: имеются ли заказанные, но не полученные сертификаты для работы
//             с электронным документооборотом.
//          ** Непривязанные сертификаты: имеются ли сертификаты, не привязанные к учетным записям (требующие
//             регистрации в сервисе).
//          ** Проверки сертификатов:
//              *** Наличие сертификата в личном списке: установлен ли сертификат в личный список (личное хранилище)
//                  на компьютере.
//              *** Корректность данных сертификата: проверка данных сертификата с помощью программы электронной подписи
//                  и шифрования.
//                  Данные сертификата, загруженные из файла сертификата или другим путем, могут быть некорректны по разным
//                  причинам, но самые частые следующие:
//                  - закончился срок действия сертификата;
//                  - сертификат в списке отозванных.
//              *** Наличие программы для подписания и расшифровки: имеется ли на компьютере программа, указанная в сертификате
//                  для закрытого ключа, которая позволяет подписывать и расшифровывать данные.
//              *** Подписание данных: возможно ли подписать данные закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//              *** Проверка созданной подписи: возможна ли проверка имеющейся подписи открытым ключом сертификата с помощью
//                  программы электронной подписи и шифрования.
//              *** Шифрование данных: возможно ли шифрование данных открытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования.
//              *** Расшифровка данных: возможна ли расшифровка данных закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//      * Работа с файлами
//          ** Длина пути к файлу: не превышает ли длина пути к файлу 256 символов.
//      * Интернет-поддержка
//          ** Внедрение БИП: внедрена ли в конфигурацию библиотека интернет-поддержки.
//          ** Корректность данных интернет-поддержки: верно ли указаны логин и пароль от сервиса интернет-поддержки.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры выполнения диагностики,
//                        см. ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики.
// 
// Возвращаемое значение:
//   - Структура - Результат диагностики, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностики.
//
// Пример:
//  //Вариант 1
//  ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
//  ПараметрыВыполнения.ВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение());
//  РезультатДиагностики = ОбменСКонтрагентамиДиагностика.ВыполнитьДиагностику(ПараметрыВыполнения);
//  //Вариант 2
//  РезультатДиагностики = ОбменСКонтрагентамиДиагностика.ВыполнитьДиагностику();
//
Функция ВыполнитьДиагностику(ПараметрыВыполнения = Неопределено)
	
	Перем ВидыДиагностики;
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	КонецЕсли;
	
	Если ПараметрыВыполнения.ИнформационнаяБазаФайловая = Неопределено Тогда
		ПараметрыВыполнения.ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
	ПараметрыВыполнения.ИмяКомпьютераСервер = ИмяКомпьютера();
	ПараметрыВыполнения.Свойство("ВидыДиагностики", ВидыДиагностики);
	Если ВидыДиагностики = Неопределено Тогда
		ВидыДиагностики = Новый Массив;
	КонецЕсли;
	
	РезультатДиагностики = НовыйРезультатДиагностики(ВидыДиагностики);
	
	Если ЕстьВидДиагностики(РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(), Неопределено)
		Или ЕстьВидДиагностики(РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(), Неопределено) Тогда
		ДанныеКорневыхСертификатов = ДанныеКорневыхСертификатов();
	Иначе 
		ДанныеКорневыхСертификатов = Неопределено;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеКорневыхСертификатов", ДанныеКорневыхСертификатов);
	
	ДиагностикаКриптографии(РезультатДиагностики, ПараметрыВыполнения, Контекст);
	ДиагностикаИнтернетСоединения(РезультатДиагностики, ПараметрыВыполнения, Контекст);
	ДиагностикаИнтернетПоддержки(РезультатДиагностики, ПараметрыВыполнения, Контекст);
	ДиагностикаРаботыСФайлами(РезультатДиагностики, ПараметрыВыполнения, Контекст);
	ТестАутентификации(РезультатДиагностики, ПараметрыВыполнения, Контекст);
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из РезультатДиагностики.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат;
	КонецЦикла;
	РезультатДиагностики.Результат = ОбщийРезультат;
	
	Возврат РезультатДиагностики;
	
КонецФункции

Функция ПоддерживаемыеВидыДиагностики()
	
	ПоддерживаемыеВидыДиагностики = Новый Массив;
	ПоддерживаемыеВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение());
	ПоддерживаемыеВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
	ПоддерживаемыеВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка());
	ПоддерживаемыеВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами());
	ПоддерживаемыеВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
	
	Возврат ПоддерживаемыеВидыДиагностики;
	
КонецФункции

Процедура ПолучитьРезультатыДиагностики(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ВыполнитьДиагностику(Параметры.ПараметрыВыполненияДиагностики), АдресРезультата);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(ВидДиагностики, Ошибка) 
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(ВидДиагностики),
		УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ВидДиагностики) 
	
	ИмяСобытия = НСтр("ru = 'ДиагностикаБЭД.%1'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат СтрШаблон(ИмяСобытия, ВидДиагностики); 
	
КонецФункции

Функция ПроверяемыеСервисыИнтернетСоединение(УчетныеЗаписи)
	
	Сервисы = Новый Соответствие;
	
	Сервис = ОбменСКонтрагентамиВнутренний.СтруктураНастроекСервисаНастроек1С().АдресВебСервиса;
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
	Сервис = ОбменСКонтрагентамиВнутренний.АдресОблачногоХранилищаНастроек();
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
	Если УчетныеЗаписи.Количество() = 0 Тогда
		ДобавитьСервисы1СЭДО(Сервисы);
		ДобавитьСервисыТакском(Сервисы);
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО В(&ИдентификаторыЭДО)";
		
		Запрос.УстановитьПараметр("ИдентификаторыЭДО", УчетныеЗаписи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				ДобавитьСервисы1СЭДО(Сервисы);
			ИначеЕсли ВыборкаДетальныеЗаписи.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				ДобавитьСервисыТакском(Сервисы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат Сервисы;
	
КонецФункции

Процедура ДобавитьСервисы1СЭДО(Сервисы) 
	
	Сервис = "https://1c-edo.ru/API/GetInfo/1";
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
	Сервис = "https://login.1c.ru/";
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
КонецПроцедуры 

Процедура ДобавитьСервисыТакском(Сервисы) 
	
	Сервис = "https://1c-api.taxcom.ru/v1.2/";
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
	Сервис = "https://webits.1c.ru/services/WebItsSimpleService";
	Сервисы.Вставить(Сервис, ПредставлениеСервисаЭДО(Сервис));
	
КонецПроцедуры

Функция ДоступнаУстановкаСертификатов() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И ОбщегоНазначения.ЭтоWindowsКлиент()
		И Не ОбщегоНазначения.ЭтоВебКлиент();
	
КонецФункции

Функция ЕстьВидДиагностики(РезультатДиагностики, ВидДиагностики, ЗначениеВидаДиагностики) 
	
	Возврат РезультатДиагностики.Результаты.Свойство(ВидДиагностики, ЗначениеВидаДиагностики);
	
КонецФункции

Функция ПредставлениеСервисаЭДО(Сервис) Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Сервис);
	ИмяСервера = СтруктураURI.ИмяСервера;
	Возврат ИмяСервера;
	
КонецФункции

Функция СформироватьТекстМетодикУстраненияОшибокКриптографии(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураМетодик = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ФорматированныеСтроки = Новый Массив;
	
	МетодикиУстранения = СтруктураМетодик.МетодикиУстранения;
	Для каждого Методика Из МетодикиУстранения Цикл
		Если Методика = "УстановкаСпискаОтзываСертификатов" Тогда
			Шаблон = НСтр("ru = '<a href = ""%1"">Установите</a> список отзыва сертификата'");
			ФорматированныеСтроки.Добавить(СтрШаблон(Шаблон, Методика));
		ИначеЕсли Методика = "УстановкаКорневогоСертификатаГУЦ" Тогда
			Шаблон = НСтр("ru = 'Установите корневой сертификат головного удостоверяющего центра'");
			ФорматированныеСтроки.Добавить(Шаблон);
			ДанныеКорневыхСертификатов = ДанныеКорневыхСертификатов();
			Разделитель = ОбменСКонтрагентамиДиагностикаКлиентСервер.РазделительПараметровМетодикиУстраненияОшибок();
			Для каждого АдресКорневогоСертификата Из ДанныеКорневыхСертификатов["MainCertificationCenterCertificates"] Цикл
				СоставляющиеГиперссылкиУстановить = Новый Массив;
				СоставляющиеГиперссылкиУстановить.Добавить(Методика);
				СоставляющиеГиперссылкиУстановить.Добавить("Установка");
				СоставляющиеГиперссылкиУстановить.Добавить(АдресКорневогоСертификата);
				
				СоставляющиеГиперссылкиПосмотреть = Новый Массив;
				СоставляющиеГиперссылкиПосмотреть.Добавить(Методика);
				СоставляющиеГиперссылкиПосмотреть.Добавить("Просмотр");
				СоставляющиеГиперссылкиПосмотреть.Добавить(АдресКорневогоСертификата);
				
				Шаблон = НСтр("ru = '<a style=""font: ЖирныйШрифтБЭД"" href = ""%1"">Установить</a>   <a href = ""%2"">Посмотреть сертификат</a>'");
				ТекстГиперссылки = СтрШаблон(Шаблон,
					СтрСоединить(СоставляющиеГиперссылкиУстановить, Разделитель),
					СтрСоединить(СоставляющиеГиперссылкиПосмотреть, Разделитель));
				ФорматированныеСтроки.Добавить(ТекстГиперссылки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ФорматированныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(ФорматированныеСтроки, Символы.ПС));
	
КонецФункции

Функция ПараметрыКриптографии() Экспорт
	
	ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере();
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();
	
	ПараметрыКриптографии = Новый Структура;
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаСервере", ПроверятьЭлектронныеПодписиНаСервере Или СоздаватьЭлектронныеПодписиНаСервере);
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаКлиенте", Не ПроверятьЭлектронныеПодписиНаСервере Или Не СоздаватьЭлектронныеПодписиНаСервере);
	
	Возврат ПараметрыКриптографии;
	
КонецФункции

Функция ВыборкаКлассификатораОшибокКриптографии(Знач РезультатыПроверок) Экспорт
	
	Если ТипЗнч(РезультатыПроверок) <> Тип("Массив") Тогда
		РезультатыПроверок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатыПроверок);
	КонецЕсли;
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	Ошибки.Колонки.Добавить("Причина", Новый ОписаниеТипов("Строка"));
	Ошибки.Колонки.Добавить("Решение", Новый ОписаниеТипов("Строка"));
	
	Для каждого РезультатПроверки Из РезультатыПроверок Цикл
		
		Если РезультатПроверки.ПроверкиНаСервере <> Неопределено Тогда
			Для каждого КлючИЗначение Из РезультатПроверки.ПроверкиНаСервере Цикл
				Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка")
					И КлючИЗначение.Значение = Ложь Тогда
					НоваяСтрока = Ошибки.Добавить();
					НоваяСтрока.ТекстОшибки = РезультатПроверки.ПроверкиНаСервере[КлючИЗначение.Ключ + "Ошибка"];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РезультатПроверки.ПроверкиНаКлиенте <> Неопределено Тогда
			Для каждого КлючИЗначение Из РезультатПроверки.ПроверкиНаКлиенте Цикл
				Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка")
					И КлючИЗначение.Значение = Ложь Тогда
					НоваяСтрока = Ошибки.Добавить();
					НоваяСтрока.ТекстОшибки = РезультатПроверки.ПроверкиНаКлиенте[КлючИЗначение.Ключ + "Ошибка"];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ошибки.ТекстОшибки КАК ТекстОшибки,
	|	Ошибки.Причина КАК Причина,
	|	Ошибки.Решение КАК Решение
	|ПОМЕСТИТЬ Ошибки
	|ИЗ
	|	&Ошибки КАК Ошибки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.ТекстОшибки КАК ТекстОшибки,
	|	КлассификаторОшибокКриптографии.Причина КАК Причина,
	|	КлассификаторОшибокКриптографии.Решение КАК Решение,
	|	КлассификаторОшибокКриптографии.МетодикиУстранения КАК МетодикиУстранения
	|ИЗ
	|	Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлассификаторОшибокКриптографии КАК КлассификаторОшибокКриптографии
	|		ПО (Ошибки.ТекстОшибки ПОДОБНО ""%"" + КлассификаторОшибокКриптографии.ТекстОшибки + ""%"")";
	
	Запрос.УстановитьПараметр("Ошибки", Ошибки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлассификаторОшибок = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаКлассификаторОшибок;
	
КонецФункции

Функция УчетныеЗаписиИзОтбора(ЗначениеОтбора) 
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат Новый Массив;
	ИначеЕсли ТипЗнч(ЗначениеОтбора[0]) = Тип("РегистрСведенийКлючЗаписи.УчетныеЗаписиЭДО") Тогда
		МассивУчетныхЗаписей = Новый Массив;
		Для каждого КлючЗаписи Из ЗначениеОтбора Цикл
			МассивУчетныхЗаписей.Добавить(КлючЗаписи.ИдентификаторЭДО);
		КонецЦикла; 
	Иначе 
		МассивУчетныхЗаписей = ЗначениеОтбора;
	КонецЕсли;
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции 

Функция ТаблицаДоступныхСертификатов(ПараметрыВыполненияДиагностики) 
	
	Отбор = ОбменСКонтрагентамиСлужебный.НовыйОтборДоступныхСертификатов();
	Отбор.ТолькоДействительные = Ложь;
	Отбор.ТолькоНепомеченныеНаУдаление = Ложь;
	
	ОтборСертификат = Неопределено;
	ОтборПоОтпечаткам = Неопределено;
	Если ПараметрыВыполненияДиагностики.Отбор.Свойство("Сертификат", ОтборСертификат)
		И ЗначениеЗаполнено(ОтборСертификат) Тогда
		Если ТипЗнч(ОтборСертификат) = Тип("Массив") Тогда
			ОтборПоОтпечаткам = ОтборСертификат;
		Иначе 
			ОтборПоОтпечаткам = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборСертификат);
		КонецЕсли;
	КонецЕсли;
	
	ОтборУчетнаяЗапись = Неопределено;
	Если ПараметрыВыполненияДиагностики.Отбор.Свойство("УчетнаяЗапись", ОтборУчетнаяЗапись)
		И ЗначениеЗаполнено(ОтборУчетнаяЗапись)Тогда
		Отбор.УчетнаяЗапись = УчетныеЗаписиИзОтбора(ОтборУчетнаяЗапись);
	КонецЕсли;
	
	Возврат ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(ОтборПоОтпечаткам, Отбор, Истина);
	
КонецФункции

Процедура ОбработатьФайлКлассификатораОшибок(ДанныеФайла, ДатаПоследнегоИзменения) 
	
	НачатьТранзакцию();
	Попытка 
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(ДанныеФайла.ОткрытьПотокДляЧтения());
		КлассификаторОшибок = ПрочитатьJSON(ЧтениеJSON,, "LastChangeDate");
		ЧтениеJSON.Закрыть();
		
		Если КлассификаторОшибок.LastChangeDate <> ДатаПоследнегоИзменения Тогда
			ДатаПоследнегоИзменения = КлассификаторОшибок.LastChangeDate;
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей = РегистрыСведений.КлассификаторОшибокКриптографии.СоздатьНаборЗаписей();
			Для каждого ОписаниеОшибки Из КлассификаторОшибок.Classifier Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Идентификатор = Новый УникальныйИдентификатор;
				Запись.ТекстОшибки = ОписаниеОшибки.ErrorText;
				Запись.Причина = ОписаниеОшибки.Reason;
				Запись.Решение = ОписаниеОшибки.Solution;
				Запись.МетодикиУстранения = ОписаниеОшибки.RepairMethods;
			КонецЦикла;
			НаборЗаписей.Записать();
			Константы.ДатаЗагрузкиКлассификатораОшибокКриптографии.Установить(ДатаПоследнегоИзменения);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеКорневыхСертификатов() 
	
	АдресКаталога = АдресКаталогаССертификатами();
	
	РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресКаталога + "files_structure.json");
	Если РезультатЗагрузки.Статус Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатЗагрузки.Путь);
		УдалитьИзВременногоХранилища(РезультатЗагрузки.Путь);
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(ДанныеФайла.ОткрытьПотокДляЧтения());
		ДанныеКорневыхСертификатов = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
	Иначе
		ЗаписатьОшибкуВЖурналРегистрации(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(),
			РезультатЗагрузки.СообщениеОбОшибке);
		ДанныеКорневыхСертификатов = Неопределено;
	КонецЕсли;
	
	Возврат ДанныеКорневыхСертификатов;
	
КонецФункции 

Функция АдресКаталогаССертификатами() 
	
	АдресКаталогаССертификатами = ОбменСКонтрагентамиВнутренний.АдресОблачногоХранилищаНастроек() + "/ServiceCertificates/";
	Если Не СтрЗаканчиваетсяНа(АдресКаталогаССертификатами, "/") Тогда
		АдресКаталогаССертификатами = АдресКаталогаССертификатами + "/";
	КонецЕсли;
	
	Возврат АдресКаталогаССертификатами;
	
КонецФункции

Функция АдресСертификатаПоОтпечатку(Отпечаток) 
	
	Возврат АдресКаталогаССертификатами() + Отпечаток + ".cer";
	
КонецФункции

#КонецОбласти

#КонецОбласти
