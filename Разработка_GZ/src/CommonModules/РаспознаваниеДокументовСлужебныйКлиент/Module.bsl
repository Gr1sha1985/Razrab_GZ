#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция ЭтоПеречисление(Тип)
	
	ОписаниеТипов = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПеречисленияТипВсеСсылки();
	Возврат ОписаниеТипов.СодержитТип(Тип);
	
КонецФункции

#КонецОбласти

#Область ПроверкаАвторизации

Процедура ПослеАвторизации(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		РезультатАвторизации = Ложь;
	ИначеЕсли Контекст.ТипАвторизации = "ПоТикетуИТС" Тогда
		ПринудительноИТС = Истина;
		РезультатАвторизации = РаспознаваниеДокументовСлужебныйВызовСервера.ПодключеноКСервисуРаспознавания(ПринудительноИТС);
	ИначеЕсли Контекст.ТипАвторизации = "ПоЛогинуПаролю" Тогда
		РезультатАвторизации = (Результат = "АвторизацияВыполнена");
	Иначе
		РезультатАвторизации = Ложь;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатАвторизации);
	
КонецПроцедуры

#КонецОбласти

#Область СохранитьФайл

Процедура СохранитьФайл(РаспознанныйДокументСсылка, ИмяФайла) Экспорт
	
	Если Не ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Местоположение = ПолучитьНавигационнуюСсылку(РаспознанныйДокументСсылка, "ИсходноеИзображение");
	ИмяФайла = ИмяФайла + ".jpeg";
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, Местоположение, ИмяФайла);
	
КонецПроцедуры

Процедура СохранитьФайлыДокумента(РаспознанныйДокумент, ИдентификаторФормы) Экспорт
	
	Если Не ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ФайлыРаспознанногоДокумента(РаспознанныйДокумент, ИдентификаторФормы);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);
	
	Если Не ФайлыДокумента.Количество() Тогда
		Текст =
			НСтр("ru = 'Не удалось сохранить файлы. Возможно они были удалены.
			           |Обратитесь к администратору приложения или техническому специалисту'");
		ВызватьИсключение Текст;
	ИначеЕсли ФайлыДокумента.Количество() = 1 Тогда
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	Иначе
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	КонецЕсли;
	
	// Сохранение параметров БСП для последующего восстановления и установка параметров не вызывающих вопрос об использовании
	// расширения для работы с файлами в веб-клиенте. См. ПослеСохраненияФайла.
	//
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ИсходноеЗначение = ПараметрыПриложения[ИмяПараметра];
	ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
	ПараметрыПриложения.Вставить("РаспознаваниеДокументов.ПредлагатьУстановкуРасширенияРаботыСФайлами", ИсходноеЗначение);
	
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, ФайлыДокумента, ПараметрыСохранения);
	
КонецПроцедуры

Процедура ПослеСохраненияФайла(ПолученныеФайлы, Контекст) Экспорт
	
	// Восстановление параметров БСП использования расширения работы с файлами.
	//
	ИсходноеЗначение = ПараметрыПриложения["РаспознаваниеДокументов.ПредлагатьУстановкуРасширенияРаботыСФайлами"];
	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами", ИсходноеЗначение);
	
	Если ПолученныеФайлы <> Неопределено Тогда
		
		Если ПолученныеФайлы.Количество() = 1 Тогда
			ТекстОповещения = НСтр("ru = 'Распознаваемый документ успешно сохранен в файл'");
		Иначе
			ТекстОповещения = НСтр("ru = 'Файлы сохранены в выбранную папку'");
		КонецЕсли;
		
		Заголовок = НСтр("ru = 'Сохранение файлов'");
		ПоказатьОповещениеПользователя(Заголовок, , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспознанныйДокумент

Процедура ПоказатьРаспознанныйДокумент(Ссылка, ТипДокумента, ИдентификаторРезультата, Отбор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(ТипДокумента);
	Если Не ПустаяСтрока(ИмяФормыОбработчика) Тогда
		КлючеваяОперация = "РаспознаваниеДокументов.ОткрытиеФормы." + ИмяФормыОбработчика;
		Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		
		Комментарий = Новый Структура;
		Комментарий.Вставить("ИдентификаторРезультата", ИдентификаторРезультата);
		
		ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
		
		ПараметрыФормы = Новый Структура("Ключ, ОтборИзСписка", Ссылка, Отбор);
		ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьТипДокумента(Форма) Экспорт 
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияТипаДокумента", ЭтотОбъект, Форма);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Записать", НСтр("ru = 'Записать'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	Параметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	Параметры.Заголовок = НСтр("ru = 'Записать документ'");
	Параметры.КнопкаПоУмолчанию = "Записать";
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Обработчик,
		НСтр("ru = 'Для изменения типа документа требуется его записать.
		           |Записать?'"),
		Кнопки,
		Параметры
	);
	
КонецПроцедуры

Процедура ПослеПодтвержденияИзмененияТипаДокумента(РезультатВопроса, Форма) Экспорт
	
	Если ТипЗнч(РезультатВопроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса.Значение = "Записать" Тогда 
		
		// Тип будет пересчитан ПередЗаписью документа.
		
		Ссылка = Форма.Объект.Ссылка;
		ТипДокумента = Форма.Объект.ТипДокумента;
		ИдентификаторРезультата = Форма.Объект.ИдентификаторРезультата;
		
		Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
		Форма.Записать();
		Форма.Закрыть();
		
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьРаспознанныйДокумент(
			Ссылка,
			ТипДокумента,
			ИдентификаторРезультата
		);
	Иначе
		
		Форма.Объект.ТипДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ТипРаспознанногоДокумента(
			Форма.Объект.Ссылка
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияЭлемента(
		ИмяЭлемента,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		Элемент,
		ЗначениеПодходящейСтроки
	) Экспорт
	
	КлючеваяОперация = "РаспознаваниеДокументов.ОткрытиеФормы.СозданиеЭлементаСОтображениемКартинки";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыОткрытия.Вставить("НаборДанных", НаборДанных);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("ТипДокумента", Объект.ТипДокумента);
	ПараметрыОткрытия.Вставить("Направление", Объект.Направление);
	ПараметрыОткрытия.Вставить("СоздаваемыйОбъект", ЗначениеПодходящейСтроки);
	
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.СозданиеЭлементаСОтображениемКартинки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

Функция НаборДанныхСозданияЭлемента(НаборДанных) Экспорт
	
	Строка = Новый Структура;
	Строка.Вставить("ИмяРеквизита");
	Строка.Вставить("РаспознанныйТекст");
	Строка.Вставить("АдресКартинки");
	Строка.Вставить("СтрокВИзображении");
	Строка.Вставить("Координаты");
	Строка.Вставить("Значение");
	
	Результат = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборДанных Цикл
		
		ЗаполнитьЗначенияСвойств(Строка, СтрокаНабора);
		Строка.Координаты = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(СтрокаНабора);
		Результат.Вставить(Строка.ИмяРеквизита, Новый ФиксированнаяСтруктура(Строка));
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

Функция ДанныеЗаполненияДляНовогоЭлемента(ИсточникДанных)Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	Для Каждого СвойствоИсточника Из ИсточникДанных Цикл
		Если СвойствоИсточника.ИмяРеквизита = "Номенклатура" Тогда
			ДанныеЗаполнения.Вставить("Наименование", СвойствоИсточника.РаспознанныйТекст);
		Иначе
			ДанныеЗаполнения.Вставить(СвойствоИсточника.ИмяРеквизита, СвойствоИсточника.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ОткрытьФормуОбратнойСвязи(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Комментарий", Форма.Объект.Комментарий);
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ОбработкаВыбораОбратнойСвязи(Форма, ВыбранноеЗначение) Экспорт
	
	Форма.Объект.Комментарий = ВыбранноеЗначение.Комментарий;
	Форма.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьКартинкуПоАдресу(ЭлементФормы, АдресКартинки) Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресКартинки);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	DataImage = Base64Строка(ДвоичныеДанные);
	DataImage = СтрЗаменить(DataImage, Символы.ВК, "");
	DataImage = СтрЗаменить(DataImage, Символы.ПС, "");
	
	ЭлементКартинкиПоляHTML = ЭлементФормы.Документ.getElementById("image_setter");
	ЭлементКартинкиПоляHTML.setAttribute("data-img", DataImage);
	ЭлементКартинкиПоляHTML.click();
	
КонецПроцедуры

#КонецОбласти

#Область НечеткийПоиск

Процедура ЗапросСохраненияСопоставленийТекстаСОбъектом(ПараметрыСохранения) Экспорт
	
	Если СтрДлина(ПараметрыСохранения.РаспознанныйТекст) > 3
		И ЗначениеЗаполнено(ПараметрыСохранения.ВыбранныйОбъект)
		И НЕ ПараметрыСохранения.РаспознанныйТекст = Строка(ПараметрыСохранения.ВыбранныйОбъект) Тогда
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Всегда использовать ""%1""
								|для текста ""%2""?'"), ПараметрыСохранения.ВыбранныйОбъект, ПараметрыСохранения.РаспознанныйТекст);
		Если ПараметрыСохранения.ВариантСохраненияСоответствий = ПредопределенноеЗначение("Перечисление.ВариантыСохраненияСоответствийБРД.ЗадаватьВопрос") Тогда
			ПоказатьВопрос(ПараметрыСохранения.Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		ИначеЕсли ПараметрыСохранения.ВариантСохраненияСоответствий = ПредопределенноеЗначение("Перечисление.ВариантыСохраненияСоответствийБРД.НеСохранятьИНеЗадаватьВопрос") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСохранения.Оповещение, КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(ПараметрыСохранения.Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначенияСпискаВыбора(Текст, ТипЗначения, ВозможныеВарианты) Экспорт
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗначения);
	Если ЭтоПримитивныйТип Тогда
		КартинкаСоздание = 0;
	Иначе
		Если ЭтоПеречисление(ТипЗначения) Тогда
			КартинкаСоздание = 0;
		Иначе
			КартинкаСоздание = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(Текст, ВозможныеВарианты, КартинкаСоздание);
	
КонецФункции

Процедура ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяЭлемента,
		НомерСтроки = Неопределено,
		ПереданноеЗначение = Неопределено,
		Свойства = Неопределено
	) Экспорт
	
	Контекст = СоответствиеПереданногоРаспознанногоЗначения(
		Объект,
		ИмяЭлемента,
		НомерСтроки,
		ПереданноеЗначение,
		Свойства
	);
	Контекст.Вставить("НаборСоответствийРаспознанныхСтрок", НаборСоответствийРаспознанныхСтрок);
	
	Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Контекст.ПереданноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСоответствиеРаспознаваемыхСтрокЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыСохранения = Новый Структура();
	ПараметрыСохранения.Вставить("РаспознанныйТекст", Контекст.РаспознанныйТекст);
	ПараметрыСохранения.Вставить("ВыбранныйОбъект", Контекст.ПереданноеЗначение);
	ПараметрыСохранения.Вставить("Оповещение", Оповещение);
	ПараметрыСохранения.Вставить("ВариантСохраненияСоответствий", ВариантСохраненияСоответствий);
	
	ЗапросСохраненияСопоставленийТекстаСОбъектом(ПараметрыСохранения);
	
КонецПроцедуры

Функция СоответствиеПереданногоРаспознанногоЗначения(
		Объект,
		ИмяЭлемента,
		НомерСтроки = Неопределено,
		ПереданноеЗначение = Неопределено,
		Свойства = Неопределено
	)
	
	РаспознанныйТекст = Неопределено;
	
	Если НомерСтроки = Неопределено Тогда
		Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПереданноеЗначение = НайденныеСтроки[0].Значение;
			РаспознанныйТекст = НайденныеСтроки[0].РаспознанныйТекст;
		КонецЕсли;
	ИначеЕсли Свойства <> Неопределено Тогда
		
		РаспознанныйТекст = Свойства.РаспознанныйТекст;
	Иначе
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", ИмяЭлемента, НомерСтроки);
		НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			РаспознанныйТекст = НайденныеСтроки[0].РаспознанныйТекст;
		КонецЕсли;
	КонецЕсли;
	
	КлючеваяОперация = 
		?(НомерСтроки = Неопределено, 
			"РаспознаваниеДокументов.ИзменениеЗначенияПоля",
			"РаспознаваниеДокументов.ИзменениеЗначенияКолонки"
		);
	
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("ИмяЭлемента", ИмяЭлемента);
	Комментарий.Вставить("НомерСтроки", НомерСтроки);
	Комментарий.Вставить("ЗначениеПредставление", Строка(ПереданноеЗначение));
	Комментарий.Вставить("РаспознанныйТекст", Строка(РаспознанныйТекст));
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Возврат Новый Структура("РаспознанныйТекст, ПереданноеЗначение", РаспознанныйТекст, ПереданноеЗначение);
	
КонецФункции

Процедура ДобавитьСоответствиеРаспознаваемыхСтрокЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТипЗначенияЗаписи = ПолучитьТипЗначенияСтрокой(ТипЗнч(Контекст.ПереданноеЗначение));
		
		Отбор = Новый Структура("ТипЗначения, РаспознаннаяСтрока", ТипЗначенияЗаписи, Контекст.РаспознанныйТекст);
		
		Записи = Контекст.НаборСоответствийРаспознанныхСтрок.НайтиСтроки(Отбор);
		Если Записи.Количество() = 0 Тогда
			Запись = Контекст.НаборСоответствийРаспознанныхСтрок.Добавить();
		Иначе
			Запись = Записи[0];
		КонецЕсли;
		
		Если Контекст.ПереданноеЗначение.Пустая() Тогда
			Контекст.НаборСоответствийРаспознанныхСтрок.Удалить(Запись);
		Иначе
			Запись.ТипЗначения = ТипЗначенияЗаписи;
			Запись.РаспознаннаяСтрока = Контекст.РаспознанныйТекст;
			Запись.СоответствующееЗначение = Контекст.ПереданноеЗначение;
			Запись.КоличествоПовторений = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипЗначенияСтрокой(Тип) Экспорт
	
	Возврат "Справочник." + Строка(Тип);
	
КонецФункции

#КонецОбласти

#Область Биллинг

Процедура ПоказатьТребованиеВключитьИТС(Обработчик) Экспорт
	
	ИмяПараметра = "РаспознаваниеДокументов.ПриВыполненииСтандартныхПериодическихПроверок";
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса =
		НСтр("ru = 'Пилотная программа 1С:Распознавание Документов завершена.
		           |
		           |Выполните переход на авторизацию через интернет-поддержку для дальнейшей работы.'");
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Подключить", НСтр("ru = 'Перейти'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		КнопкиВопроса,
		,
		"Подключить",
		КлиентскоеПриложение.ПолучитьЗаголовок()
	);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеНулевойБаланс(Обработчик, ДатаОтключения) Экспорт
	
	ИмяПараметра = "РаспознаваниеДокументов.ПриВыполненииСтандартныхПериодическихПроверок";
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'У Вас закончились оплаченные страницы распознавания в сервисе ""1С:Распознавание документов"".
		           |
		           |Необходимо пополнить счет до %1, иначе работа в сервисе будет заблокирована'"),
		Формат(ДатаОтключения, "ДЛФ=DD")
	);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Пополнить", НСтр("ru = 'Пополнить'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		КнопкиВопроса,
		,
		"Пополнить",
		КлиентскоеПриложение.ПолучитьЗаголовок()
	);
	
КонецПроцедуры

Процедура ПослеОтветаНаВопрос(Результат, Контекст) Экспорт
	
	Если Результат = "Подключить" Тогда
		Обработчик = Новый ОписаниеОповещения();
		РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Обработчик);
	ИначеЕсли Результат = "НеСегодня" Тогда
		ИмяПараметра = "РаспознаваниеДокументов.ПриВыполненииСтандартныхПериодическихПроверок";
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Обработчик, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Функция ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Экспорт
	
	Если РаспознаваниеДокументовСлужебныйВызовСервера.ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Тогда
		Возврат Истина;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Данные может просматривать и скачивать только автор загруженного файла.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти