
Процедура ПриЗаписиСправочникаФизическиеЛицаОбновитьОтветственныхЛиц(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", Источник.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляУдаленияДвиженийПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ Источник.ДополнительныеСвойства.ЭтоНовый 
		И Источник.Проведен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Дата КАК Дата
		|ИЗ
		|	Документ." + Источник.Метаданные().Имя + " КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Источник.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Источник.Дата > Выборка.Дата);
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает реквизит РучнаяКорректировка при копировании отредактированных вручную документов
//
Процедура ПриКопированииДокументаСВозможностьюРучногоРедактированияПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.РучнаяКорректировка = Ложь;
	
КонецПроцедуры

Функция КорректныйПериодВводаДокументов() Экспорт
	
	// Контролируем ошибку на один разряд. Например, 0017 вместо 2017; 2071 вместо 2017.
	// Допустимым считаем ввод документов на 9 лет в будущем. Например, в 2020 году разрешаем
	// вводить даты в интервале с января 2000 по декабрь 2029.
	
	КонецКорректногоПериода = ДобавитьМесяц(КонецГода(ТекущаяДатаСеанса()), 9 * 12);
	
	КорректныйПериод = Новый Структура;
	КорректныйПериод.Вставить("НачалоКорректногоПериода", Дата(2000, 01, 01));
	КорректныйПериод.Вставить("КонецКорректногоПериода",  КонецКорректногоПериода);
	Возврат КорректныйПериод;
	
КонецФункции

// Список реквизитов, которые при наличии их в документе необходимо проверить на вхождение в корректный период.
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных:Документ - для анализа наличия реквизитов.
//
// Возвращаемое значение:
//   Структура   - список реквизитов, заполнение которых будет проверяться.
//
Функция КонтролируемыеРеквизитыТипаДата(МетаданныеДокумента)
	
	КонтролируемыеРеквизиты = Новый Массив;
	КонтролируемыеРеквизиты.Добавить("ПериодРегистрации");
	КонтролируемыеРеквизиты.Добавить("ДатаОперации");
	КонтролируемыеРеквизиты.Добавить("ОтчетныйПериод");
	КонтролируемыеРеквизиты.Добавить("Месяц");
	КонтролируемыеРеквизиты.Добавить("МесяцНачисления");
	КонтролируемыеРеквизиты.Добавить("МесяцРасчетногоПериода");
	КонтролируемыеРеквизиты.Добавить("МесяцПерерасчета");
	
	КоличествоКонтролируемых = КонтролируемыеРеквизиты.Количество();
	Для Инд = 1 По КоличествоКонтролируемых Цикл
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(КонтролируемыеРеквизиты[КоличествоКонтролируемых - Инд], МетаданныеДокумента) Тогда
			КонтролируемыеРеквизиты.Удалить(КоличествоКонтролируемых - Инд);
		КонецЕсли;
	КонецЦикла;
	
	КонтролируемыеРеквизиты.Добавить("Дата");
	
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

// Обработчик для подписки на событие ПроверитьКорректностьДаты
Процедура ПроверитьКорректностьДатыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
	 Или ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Источник.Метаданные();
	КорректныйПериод = КорректныйПериодВводаДокументов();
	ЕстьОшибкиВКонтролируемыхРеквизитах = Ложь;
	
	// Проверим корректность даты, задающей период движений документа.
	КонтролируемыеРеквизиты = КонтролируемыеРеквизитыТипаДата(МетаданныеДокумента);
	Для каждого КонтролируемыйРеквизит Из КонтролируемыеРеквизиты Цикл
	
		Если Источник[КонтролируемыйРеквизит] < КорректныйПериод.НачалоКорректногоПериода Тогда
			ГраницаКорректности = Формат(КорректныйПериод.НачалоКорректногоПериода, "ДФ=гггг");
			ШаблонОшибки = НСтр("ru = '%1 должна быть не ранее %2 года'");
			ЕстьОшибкиВКонтролируемыхРеквизитах = Истина;
		ИначеЕсли Источник[КонтролируемыйРеквизит] > КорректныйПериод.КонецКорректногоПериода Тогда
			ГраницаКорректности = Формат(КорректныйПериод.КонецКорректногоПериода, "ДФ=гггг");
			ШаблонОшибки = НСтр("ru = '%1 должна быть не позже %2 года'");
			ЕстьОшибкиВКонтролируемыхРеквизитах = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкиВКонтролируемыхРеквизитах Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не ЕстьОшибкиВКонтролируемыхРеквизитах Тогда
		// Некорректных дат не найдено.
		Возврат;
	КонецЕсли;
	
	// Сообщаем о некорректном документе.
	Если КонтролируемыйРеквизит = "Дата" Тогда // пытаемся вывести сообщение в форме рядом с датой
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = 'Дата документа'"), ГраницаКорректности);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, Источник, "Дата", , Отказ);
	Иначе // выводит сообщение только в панели сообщений формы объекта
		ОписаниеОшибки = СтрШаблон(ШаблонОшибки, НСтр("ru = 'Дата движений документа'"), ГраницаКорректности);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, Источник, , , Отказ);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Даты запрета изменения.Некорректный год'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		Источник.Метаданные(),
		Источник.Ссылка,
		ОписаниеОшибки,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

// РЕГИСТРАЦИЯ РЕКВИЗИТОВ ДОКУМЕНТОВ ПОСТУПЛЕНИЯ И ОПЛАТЫ

// Обработчик подписки на событие ПриЗаписиДокументаРегистрацияДанныхПервичныхДокументовИП
Процедура ПриЗаписиДокументаРегистрацияДанныхПервичныхДокументов(Источник, Отказ) Экспорт
	
	Перем НомерДокумента, ДатаДокумента;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И Источник.ДополнительныеСвойства.Свойство("РегистрироватьДанныеПервичныхДокументов")
		И Источник.ДополнительныеСвойства.РегистрироватьДанныеПервичныхДокументов = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеПервичныхДокументов(Источник);
	
КонецПроцедуры

Процедура ЗаписатьДанныеПервичныхДокументов(Источник, НомерСчетаФактуры = "") Экспорт
	
	Ссылка = Источник.Ссылка;
	ТипДокумента = ТипЗнч(Ссылка);
	
	ИменаРеквизитов = "Организация, Номер, Дата";
	
	МетаданныеДокумента = Источник.Метаданные();

	Если МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", НомерВходящегоДокумента";
		Если МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено Тогда
			ИменаРеквизитов = ИменаРеквизитов + ", ДатаВходящегоДокумента";
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ЭтоУниверсальныйДокумент") <> Неопределено Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", ЭтоУниверсальныйДокумент";
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", ИнвентаризацияТоваровНаСкладе";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИменаРеквизитов = ИменаРеквизитов + ", ВидОперации";
	КонецЕсли;
	
	Реквизиты = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Реквизиты, Источник);
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеПервичныхДокументов");
	ЭлементБлокировки.УстановитьЗначение("Документ", Ссылка);
	Блокировка.Заблокировать();
	
	НомерДокумента = "";
	ДатаДокумента  = '00010101';
	ЭтоУниверсальныйДокумент = Ложь;
	ЭтоКорректировочныйДокумент = Ложь;
	
	Если Реквизиты.Свойство("ЭтоУниверсальныйДокумент") Тогда
		ЭтоУниверсальныйДокумент = Реквизиты.ЭтоУниверсальныйДокумент;
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")
		И ЗначениеЗаполнено(Реквизиты.ИнвентаризацияТоваровНаСкладе) Тогда
		
		РеквизитыИнвентаризации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ИнвентаризацияТоваровНаСкладе, "Номер, Дата");
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИнвентаризации.Номер, Истина, Ложь);
		ДатаДокумента  = РеквизитыИнвентаризации.Дата;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			НомерДокумента = СокрЛП(Реквизиты.НомерВходящегоДокумента);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Ложь);
		КонецЕсли;
		
		ДатаДокумента  = Реквизиты.Дата;
		
	ИначеЕсли Реквизиты.Свойство("НомерВходящегоДокумента") Тогда
		
		НомерДокумента = СокрЛП(Реквизиты.НомерВходящегоДокумента);
		
		Если Реквизиты.Свойство("ДатаВходящегоДокумента") Тогда
			ДатаДокумента = Реквизиты.ДатаВходящегоДокумента;
		Иначе
			ДатаДокумента = Реквизиты.Дата;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоУниверсальныйДокумент Тогда
			
			Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
				НомерДокумента = НомерСчетаФактуры;
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Ложь);
			КонецЕсли;
			
			Если ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				РеквизитыКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ВидОперации,ДокументПоступления");
				ЭтоКорректировочныйДокумент = Документы.КорректировкаПоступления.ЭтоКорректировка(
					РеквизитыКорректировки.ВидОперации, РеквизитыКорректировки.ДокументПоступления);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				РеквизитыКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ВидОперации,ДокументРеализации");
				ЭтоКорректировочныйДокумент = Документы.КорректировкаРеализации.ЭтоКорректировка(
					РеквизитыКорректировки.ВидОперации, РеквизитыКорректировки.ДокументРеализации);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
				ЭтоКорректировочныйДокумент = Истина;
			КонецЕсли;
			
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Ложь);
		КонецЕсли;
		
		ДатаДокумента  = Реквизиты.Дата;
		
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Документ.Установить(Ссылка);
	
	МенеджерЗаписиРегистра = НаборЗаписейРегистра.Добавить();
	МенеджерЗаписиРегистра.Организация                 = Реквизиты.Организация;
	МенеджерЗаписиРегистра.Документ                    = Ссылка;
	МенеджерЗаписиРегистра.Номер                       = НомерДокумента;
	МенеджерЗаписиРегистра.Дата                        = ДатаДокумента;
	МенеджерЗаписиРегистра.НомерРегистратора           = Реквизиты.Номер;
	МенеджерЗаписиРегистра.ДатаРегистратора            = Реквизиты.Дата;
	МенеджерЗаписиРегистра.ЭтоУниверсальныйДокумент    = ЭтоУниверсальныйДокумент;
	МенеджерЗаписиРегистра.ЭтоКорректировочныйДокумент = ЭтоКорректировочныйДокумент;
	
	// Запись данных первичного документа разрешена всем пользователям,
	// которые вправе изменять этот документ.
	ВыполнитьПроверкуПравДоступа("Изменение", Ссылка.Метаданные());
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписейРегистра.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// При необходимости изменяем значение функциональной опции "ИспользоватьВалютныйУчет", от которой зависит активность
// регламетного задания "ЗагрузкаКурсовВалют".
//
// Параметры:
//  Источник     - КонстантаМенеджерЗначения.ИспользоватьВалютныйУчет, СправочникОбъект.Валюты - или напрямую устанавливаем
//					значение функциональной опции, или оно устанавливается при записи валюты.
//  Отказ        - Булево - признак отказа от записи.
//
Процедура ПриИзмененииФункциональнойОпцииВалютныйУчет(Источник, Отказ) Экспорт
    
    Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
	
	ФункциональнаяОпцияИзменена = Ложь;
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВалютныйУчет") Тогда
		
		// Проверим, что валютный учет можно отключить.
		Если Не Источник.Значение И ОбщегоНазначенияБП.ИспользуетсяВалютныйУчет() Тогда
			
			ТекстСообщенияОбОШибке = НСтр("ru = 'Нельзя отключать валютный учет. Валюты используются в проводках или справочниках.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОШибке, , , , Отказ);
			
			ЗаписьЖурналаРегистрации("ИспользоватьВалютныйУчет",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Константы.ИспользоватьВалютныйУчет,
				,
				ТекстСообщенияОбОШибке);
			
		Иначе
			
			ФункциональнаяОпцияИзменена = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Валюты") Тогда
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

		// Изменение валюты регламентированного учета не учитываем.
		Если Источник.Ссылка = ВалютаРегламентированногоУчета ИЛИ Источник.Код = "643" Тогда
			// В некоторых случаях рубль может создаваться из кода библиотек до того момента,
			// пока будет заполнена константа БП, поэтому проверяем в том числе по коду валюты.
			Возврат;
		КонецЕсли;
	
		Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
			// В базе настроены обмены, по которым может прийти валюта.
			ИспользуетсяВалютныйУчет = Истина;

		ИначеЕсли Источник.ПометкаУдаления Тогда
		   	// Единственная валюта помечается на удаление.
			ЗапросСостояния = Новый Запрос;
			ЗапросСостояния.УстановитьПараметр("Ссылка", Источник.Ссылка);
			ЗапросСостояния.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
			ЗапросСостояния.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Ссылка <> &Ссылка
			|	И Валюты.Ссылка <> &ВалютаРегламентированногоУчета";
			ИспользуетсяВалютныйУчет = Не ЗапросСостояния.Выполнить().Пустой();
			
		Иначе
			// Записывается актуальная валюта.
			ИспользуетсяВалютныйУчет = Истина;
			
		КонецЕсли;
		
		ФункциональнаяОпцияИзменена = (ИспользуетсяВалютныйУчет <> Константы.ИспользоватьВалютныйУчет.Получить());
		Если ФункциональнаяОпцияИзменена Тогда
			
			// Проверим, что валютный учет можно отключить.
			Если Не ИспользуетсяВалютныйУчет И ОбщегоНазначенияБП.ИспользуетсяВалютныйУчет(Истина) Тогда
				
				ТекстСообщенияОбОШибке = НСтр("ru = 'Необходимо оставить хотя бы одну валюту, т.к. валюты уже использовались в проводках или справочниках.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОШибке, Источник.Ссылка, , , Отказ);
				
				ЗаписьЖурналаРегистрации("ИспользоватьВалютныйУчет",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьВалютныйУчет,
					,
					ТекстСообщенияОбОШибке);

				ФункциональнаяОпцияИзменена = Ложь;
				
			Иначе
				
				Константы.ИспользоватьВалютныйУчет.Установить(ИспользуетсяВалютныйУчет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФункциональнаяОпцияИзменена Тогда	
		
		Если Константы.ИспользоватьВалютныйУчет.Получить() Тогда
			
			КлассификаторыДоходовРасходов.ОбеспечитьФункциональность(Справочники.ПрочиеДоходыИРасходы, "ИспользоватьФакторинг");
			
			РегистрироватьСчетаФактурыНаСуммовыеРазницы = (Константы.ИспользуетсяОСНО.Получить()
														Или Константы.ИспользуетсяНДФЛИП.Получить());
			Константы.РегистрироватьСчетаФактурыНаСуммовыеРазницы.Установить(РегистрироватьСчетаФактурыНаСуммовыеРазницы);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

Процедура ПриИзмененииФункциональнойОпцииИспользуетсяСинхронизацияДанных(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Для АРМ не требуется устанавливать опции при изменении синхронизации данных,
	// т.к. эта константа устанавливается автоматически при создании АРМ
	// и возможности изменить ее интерактивно нет.
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	Если ГлавныйУзел <> Неопределено
		И ГлавныйУзел.Метаданные().Имя = ОбменДаннымиПовтИсп.ПланОбменаАвтономнойРаботы() Тогда
		Возврат;
	КонецЕсли;
	
	Обработки.ФункциональностьПрограммы.УстановитьКонстантыЗависимыеОтОбменов();
	
КонецПроцедуры

Процедура ПриИзмененииФункциональнойОпцииВедетсяРозничнаяТорговля(Источник, Отказ) Экспорт
    
    Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
    
	Справочники.СтатьиДвиженияДенежныхСредств.СоздатьУстановитьПредопределенныеЭлементыРозничнаяТорговля();

КонецПроцедуры

Процедура ПриИзмененииФункциональнойОпцииВестиУчетИндивидуальногоПредпринимателя(Источник, Отказ) Экспорт
    
    Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
    
	Справочники.СтатьиДвиженияДенежныхСредств.СоздатьУстановитьПредопределенныеЭлементыИП();

КонецПроцедуры

Процедура ПриИзмененииФункциональнойОпцииИспользоватьСтатьиДДС(Источник, Отказ) Экспорт
    
    Если Источник.ОбменДанными.Загрузка Тогда
    	Возврат;
    КонецЕсли;
    
	Справочники.СтатьиДвиженияДенежныхСредств.СоздатьУстановитьПредопределенныеЭлементыИСпользоватьСтатьиДДС();
	
КонецПроцедуры
