////////////////////////////////////////////////////////////////////////////////
// АКТУАЛИЗАЦИЯ ДАННЫХ

// Возвращает свойства выполняемого фонового задания по актуализации.
// Если ни одного задания не найдено, возвращается значение Неопределено.
//
// Параметры:
//  Организация                  - СправочникСсылка.Организации - Организация, 
//                                 по которой будет производиться поиск фонового
//                                 задания по актуализации.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы, из
//                                 которой вызывается поиск фонового задания.
//
// Возвращаемое значение:
//   Структура - всегда содержит ключ УникальныйИдентификатор.
//               Если задание выполняется, но его свойства получить не удалось,
//               в значении ключа УникальныйИдентификатор возвращается пустая строка.
//               Другие ключи структуры:
//               * Ключ         - Строка - Ключ фонового задания.
//               * Наименование - Строка - Наименование фонового задания.
//               * Организация  - СправочникСсылка.Организация - Организация, 
//               по которой выполняется задание.
//               * Пользователь - СправочникСсылка.Пользователи - Пользователь,
//               запустивший задание.
//
Функция НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Знач Организация, Знач УникальныйИдентификаторФормы) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);

	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Ключ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФоновоеЗадание.Ключ, ":");
		Если Ключ.Количество() > 1 Тогда
			
			ПрефиксКлючаЗадания = Ключ[0];
			ОрганизацияЗадания = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[1]));
			ПользовательЗадания = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[2]));
			
			Если ПрефиксКлючаЗадания = ЗакрытиеМесяцаКлиентСервер.ПрефиксКлючаЗаданияАктуализации()
					И ОрганизацияЗадания = Организация Тогда
					
				СвойстваВыполняемогоЗадания = Новый Структура("УникальныйИдентификатор, Ключ, Наименование");
				ЗаполнитьЗначенияСвойств(СвойстваВыполняемогоЗадания, ФоновоеЗадание);
				СвойстваВыполняемогоЗадания.Вставить("Организация", ОрганизацияЗадания);
				СвойстваВыполняемогоЗадания.Вставить("Пользователь", ПользовательЗадания);
				Результат = СвойстваВыполняемогоЗадания;
				
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// Если не найдено ни одного задания в файловом режиме работы, это еще не значит, 
	// что никто не актуализирует данные.
	Если Результат = Неопределено И ИБФайловая Тогда 
		
		УспехБлокировки = Ложь;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
			УспехБлокировки = Истина;
		Исключение
			Результат = Новый Структура("УникальныйИдентификатор", "");
		КонецПопытки;
		
		Если УспехБлокировки Тогда
			РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПроверитьАктуальность(Знач ПараметрыЗадания) Экспорт
	
	ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыЗадания.УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка актуальности данных'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне",
		ПараметрыЗадания,
		ПараметрыВыполнения);

	Возврат РезультатВыполнения;
	
КонецФункции

// Перепроводит документы и перевыполняет регламетные операции закрытия месяца до требуемого периода.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//  ВФоне            - Булево    - Признак, выполнять расчет в фоновом задании или непосредственно.
//                                 По умолчанию = Истина.
// Возвращаемое значение:
//   Структура   - см. ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации().
//
Функция АктуализироватьДанные(Знач ПараметрыЗадания, ВФоне = Истина) Экспорт
	
	АктуализацияДляРасчетаНалога = ПараметрыЗадания.АктуализацияДляРасчетаНалога;
	
	Если АктуализацияДляРасчетаНалога Тогда // востребована частичная актуализация
		
		АктуализацияДляРасчетаНалога = ВозможенПрямойРасчетНалога(ПараметрыЗадания);
		Если Не АктуализацияДляРасчетаНалога Тогда
			// Только сообщаем вариант актуализации (АктуализацияДляРасчетаНалога = Ложь), не выполняя её.
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
			АдресХранилища = ПоместитьВоВременноеХранилище(РезультатАктуализации, ПараметрыЗадания.УникальныйИдентификаторФормы);
			
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("АдресХранилища",       АдресХранилища);
			РезультатВыполнения.Вставить("ЗаданиеВыполнено",     Истина);
			РезультатВыполнения.Вставить("ИдентификаторЗадания", Неопределено);
			Возврат РезультатВыполнения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВФоне Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);
		
		НаименованиеЗадания = НСтр("ru='Актуализация данных: %1 (%2)'");
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания,
			ПараметрыЗадания.Организация,
			ПользователиКлиентСервер.ТекущийПользователь());
		
		КлючЗадания = "%1:%2:%3";
		КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючЗадания,
			ЗакрытиеМесяцаКлиентСервер.ПрефиксКлючаЗаданияАктуализации(),
			ПараметрыЗадания.Организация.УникальныйИдентификатор(),
			ПользователиКлиентСервер.ТекущийПользователь().УникальныйИдентификатор());
		
		ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);

		ИмяЭкспортнойПроцедуры = ?(АктуализацияДляРасчетаНалога,
			"Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога", "Обработки.ЗакрытиеМесяца.АктуализироватьВФоне");

		РезультатВыполнения = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
			ПараметрыЗадания.УникальныйИдентификаторФормы,
			ИмяЭкспортнойПроцедуры,
			ПараметрыЗадания,
			НаименованиеЗадания,
			КлючЗадания);
		
	Иначе
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыЗадания.УникальныйИдентификаторФормы);
		
		Если АктуализацияДляРасчетаНалога Тогда
			Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога(ПараметрыЗадания, АдресХранилища);
		Иначе
			Обработки.ЗакрытиеМесяца.АктуализироватьВФоне(ПараметрыЗадания, АдресХранилища);
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("АдресХранилища",       АдресХранилища);
		РезультатВыполнения.Вставить("ЗаданиеВыполнено",     Истина);
		РезультатВыполнения.Вставить("ИдентификаторЗадания", Неопределено);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет актуализацию данных перед публикацией отчетов и помощников через внешний программный интерфейс.
// Актуализация выполняется по "быстрому" алгоритму - проводятся только регламентные операции, влияющие на расчет налогов.
// В случае невозможности быстрой актуализации возвращается сообщение об ошибке.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой данные должны стать актуальными.
//  Период      - Дата - на какую дату данные должны стать актуальными.
//
Функция АктуализироватьДанныеПередПубликацией(Организация, Период, СообщениеОбОшибке) Экспорт
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация = Организация;
	ПараметрыАктуализации.Период      = Период;
	
	// Актуализация при публикации данных всегда выполняется по быстрому алгоритму.
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = Истина;
	
	Если НЕ ВозможенПрямойРасчетНалога(ПараметрыАктуализации) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Данные неактуальны. Требуется выполнить операции закрытия месяца в приложении 1С.'");
		Возврат Ложь;
	КонецЕсли;
	
	АдресХранилища = "";
	Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога(ПараметрыАктуализации, АдресХранилища);
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не РезультатВыполнения.Выполнено ИЛИ РезультатВыполнения.ВывестиИнформациюУведомлений Тогда
		
		ТекстОшибки = НСтр("ru = 'Данные неактуальны. При выполнении актуализации возникли ошибки.'");
		Если РезультатВыполнения.Свойство("ВидОперации") И РезультатВыполнения.Свойство("ПериодРегистрации") Тогда
			
			ТекстШаблона = НСтр("ru = '""%1"" за %2'");
			ТекстОшибки = ТекстОшибки + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, РезультатВыполнения.ВидОперации, Формат(РезультатВыполнения.ПериодРегистрации, "ДФ='ММММ гггг'"));
			
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("РегламентнаяОперацияСОшибками") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(РезультатВыполнения.РегламентнаяОперацияСОшибками);
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("СообщенияПользователю") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрСоединить(РезультатВыполнения.СообщенияПользователю, Символы.ПС);
		КонецЕсли;
		
		СообщениеОбОшибке = ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатВыполнения.ВывестиИнформациюУведомлений Тогда
		
		ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(
			НСтр("ru = 'Ошибка актуализации данных для публикации'", ОбщегоНазначения.КодОсновногоЯзыка())); // Строка записывается в журнал
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Обработки.ЗакрытиеМесяца, ,
			ТекстОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения.Выполнено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

Функция ПроверятьАктуальность() Экспорт
	
	Возврат Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	
КонецФункции

// Определяет, можно ли рассчитать налог, не закрывая месяц.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//                                Используются только поля Организация и Период. 
//
Функция ВозможенПрямойРасчетНалога(ПараметрыЗадания)
	
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Если КонецКвартала(ПараметрыЗадания.Период) > КорректныйПериод.КонецКорректногоПериода Тогда
		// ошибочно широкий интервал
		Возврат Ложь;
	КонецЕсли;
	
	ВариантУсловийПрямогоРасчета = 0;
	Если УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 1; // ИП на особой системе налогообложения
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 2; // ИП применяет УСН (доходы)
	КонецЕсли;
	Если ВариантУсловийПрямогоРасчета = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ИП на особой системе налогообложения (ЕНВД или патент)
	Если ВариантУсловийПрямогоРасчета = 1 Тогда
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности не было смены учётной политики.
		ИмяРесурса = "ПрименяетсяОсобыйПорядокНалогообложения";
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			ИмяРесурса,
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1             // были изменения в учетной политике
		   И (ВариантыУчета.Найти(Ложь) <> Неопределено  // был период без особой системы налогообложения
			// УСН + особая система налогообложения
			Или УчетнаяПолитика.ПрименяетсяУСНЗаПериод(ПараметрыЗадания.Организация, ГраницаАктуализации, ПараметрыЗадания.Период)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыЗадания.ГраницаАктуализацииНачало = ГраницаАктуализации;
		
		Возврат Истина;
		
	ИначеЕсли ВариантУсловийПрямогоРасчета = 2 Тогда // УСН (доходы)
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности всегда использовалась УСН.
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			"ПрименяетсяУСНДоходы",
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1                 // были изменения в учетной политике
		   И ВариантыУчета.Найти(Ложь) <> Неопределено Тогда // был период без УСН доходы
			Возврат Ложь;
		КонецЕсли;
		
		ПрямойРасчетНалога = УчетУСН.ДоходыЗаПериодНеЗависятОтПоследовательности(
			ПараметрыЗадания.Организация, ГраницаАктуализации, КонецМесяца(ПараметрыЗадания.Период));
		
		Если ПрямойРасчетНалога Тогда
			ПараметрыЗадания.ГраницаАктуализацииНачало = ГраницаАктуализации;
		КонецЕсли;
		
		Возврат ПрямойРасчетНалога;
				
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОНОВЫМИ ЗАДАНИЯМИ

Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

// Читает сообщение от длительной операции о ее текущем состоянии.
//
// Возвращаемое значение:
//   Структура   - всегда содержит ключ ЗаданиеВыполнено. Ложь, если существует фоновое задание с ИдентификаторЗадания.
//                 Иные ключи структуры см. ДлительныеОперации.СообщитьПрогресс()
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрогрессЗадания = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
	// Добавляем флаг "ЗаданиеВыполнено", чтобы различать случаи: когда отсутствуют сообщения и когда завершено задание.
	Если ПрогрессЗадания = Неопределено
	 Или ТипЗнч(ПрогрессЗадания) <> Тип("Структура") Тогда // или нет задания, или нет сообщений
		ПрогрессЗадания = Новый Структура;
	КонецЕсли;
	
	Попытка
		ПрогрессЗадания.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания));
	Исключение
		// Исключение при попытке проверить статус задания означает, что фоновое задание было удалено после отмены операции
		// закрытия месяца пользователем.
		ПрогрессЗадания.Вставить("ЗаданиеВыполнено", Истина);
	КонецПопытки;
	
	Возврат ПрогрессЗадания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

Функция ПолучитьПредупреждающийЦвет() Экспорт
	
	Возврат ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
	
КонецФункции

Функция ПоказатьПредупреждениеАктуализацияДанных(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций(Организация);
	
КонецФункции

Процедура ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания)

	Если Не ПараметрыЗадания.Свойство("АдресХранилищаДанныеРасшифровки")
	 Или Не ЭтоАдресВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки) Тогда
		Возврат;
	КонецЕсли;
		
	// В фоновое задание передаем не адрес временного хранилища, а само значение,
	// т.к. внутри фонового задания недоступны данные временного хранилища родительского сеанса.
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки);
	СжатыеДанныеРасшифровки = Новый ХранилищеЗначения(ДанныеРасшифровки, Новый СжатиеДанных(9));
	ПараметрыЗадания.Вставить("ДанныеРасшифровки", СжатыеДанныеРасшифровки);
	
	ПараметрыЗадания.Удалить("АдресХранилищаДанныеРасшифровки");
	
КонецПроцедуры

Функция НачалоНеактуальностиДляПрямогоРасчетаНалога(Организация, Период)
	
	// Определяем дату, до которой нам важно отсутствие взаимозависимостей учета.
	ГраницаАктуализации = КонецМесяца(Период);
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                               = Организация;
	ПараметрыПроверки.Период                                    = ГраницаАктуализации;
	ПараметрыПроверки.ТребуетсяПолнаяАктуализация               = Истина;
	ПараметрыПроверки.АктуализироватьВесьПериод                 = Истина;
	РезультатПроверкиАктуальности = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
	Если Не РезультатПроверкиАктуальности.ТребуетсяАктуализация Тогда
		ГраницаАктуализации = НачалоКвартала(ГраницаАктуализации);
	Иначе
		ГраницаАктуализации = НачалоКвартала(РезультатПроверкиАктуальности.ДатаАктуальности);
	КонецЕсли;
		
	Возврат ГраницаАктуализации;
	
КонецФункции

// Возвращает количество документов, которые требуется перепровести для актуализации данных.
// Параметры:
//  Организация - СправочникСсылка.Организации - организация по которой необходимо получить количество документов.
//  Период - Дата актуализации.
//
// Возвращаемое значение:
//   Число - количество документов для перепроведения.
//
Функция КоличествоДокументовДляПерепроведения(Организация, Период) Экспорт
	
	КоличествоДокументовДляПерепроведения = 0;
	Если Не ЗначениеЗаполнено(Период)
		ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат КоличествоДокументовДляПерепроведения;
	КонецЕсли;
	
	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(Организация, Период);
	Если МоментНарушения <> Неопределено 
		И МоментНарушения.Дата <= Период Тогда
		КоличествоДокументовДляПерепроведения = РаботаСПоследовательностями.ОценкаКоличестваДокументовДляПерепроведения(
			Организация,
			МоментНарушения.Дата,
			Период,
			МоментНарушения);
	КонецЕсли;
	
	Возврат КоличествоДокументовДляПерепроведения;
	
КонецФункции

// Получает порядок актуализации отчета описанный в общем макете "ТребованияКАктуальностиОтчетов"
// Параметры:
//  ИмяФормы - полное наименование формы отчета
//
// Возвращаемое значение:
//   Число - порядок актуализации:
//   0 - актуализация БУ;
//   1 - ссылка на НДС;
//   2 - актуализация БУ или ссылка на НДС;
//   3 - актуализация БУ и ссылка на НДС.
//
Функция ПорядокАктуализацииОтчета(ИмяФормы) Экспорт
	
	МакетТребованийКАктуализации = ПолучитьОбщийМакет("ТребованияКАктуальностиОтчетов");
	ТаблицаДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетТребованийКАктуализации.ПолучитьТекст());
	ТаблицаДанных.Индексы.Добавить("Отчет");
	
	ЧастиИмениФормы = СтрРазделить(ИмяФормы, ".");
	Имяобъекта = "";
	Если ЧастиИмениФормы.Количество() > 1 Тогда 
		Имяобъекта = ЧастиИмениФормы[1];
	Иначе
		Имяобъекта = ИмяФормы;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Отчет", Имяобъекта);
	
	СтрокиДанных = ТаблицаДанных.НайтиСтроки(Отбор);
	ПорядокАктуализации = 0;
	Если СтрокиДанных.Количество() = 1 Тогда
		ПорядокАктуализации = Число(СтрокиДанных[0].ПорядокАктуализации);
	КонецЕсли;
	
	Возврат ПорядокАктуализации;
	
КонецФункции
