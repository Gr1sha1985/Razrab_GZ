#Область СлужебныйПрограммныйИнтерфейс

#Область Криптография

Процедура ИнициализацияСервисаКриптографиииЗавершение(РезультатПодписания, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Результат.Выполнено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПодписания, "Выполнено", Ложь);
	
	ИнформацияОбОшибке = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПодписания, "ИнформацияОбОшибке", Неопределено);
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);

КонецПроцедуры

Функция АлгоритмПубличногоКлючаАктуален(АлгоритмПодписи)
	
	Если ТекущаяДата() < '20200101' Тогда
		Возврат Истина;
	КонецЕсли;      
	
	ГОСТ2012 = (СтрНайти(АлгоритмПодписи, "-2012-") <> 0);

	Возврат ГОСТ2012;
	
КонецФункции

Функция ТекущийСертификат1СОтчетности(КонтекстЭДО, Организация) Экспорт
	
	Сертификаты = КонтекстЭДО.СертификатыУчетнойЗаписиПриОбменеЧерезОператора(Организация);
	СертификатАбонентаОтпечаток = Сертификаты.ОтпечатокСертификатаРуководителя;
	
	Возврат СертификатАбонентаОтпечаток;
	
КонецФункции

Функция ЭтоОблачныйСертификатПользователя(Отпечаток) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиВызовСервера.ЭтоОблачныйСертификатПользователя(Отпечаток);
	
КонецФункции

// После поиска КонтекстаЭДО продолжаем поиск сертификата: сначала облачного от 1С-Отчетность, затем локального.
//
// Параметры:
//  РезультатПоиска - Структура - см. параметр ВыполняемоеОповещение в ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО()
//  ПараметрыПоиска - Структура - см. НайтиСертификат()
//
Процедура ПодобратьСертификатОрганизацииПослеПолученияКонтекстаЭДО(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	Если РезультатПоиска.КонтекстЭДО <> Неопределено Тогда // есть программный интерфейс
	
		ОтпечатокСертификата = ТекущийСертификат1СОтчетности(
			РезультатПоиска.КонтекстЭДО, ДополнительныеПараметры.Организация);
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда // есть сертификат 1С-Отчетности
			
			ДоступнаОблачнаяКриптография = УниверсальныйОбменСБанкамиВызовСервера.ДоступнаОблачнаяКриптография();
			Если ДоступнаОблачнаяКриптография И ЭтоОблачныйСертификатПользователя(ОтпечатокСертификата) Тогда
				// Используется облачный сертификат.
				РезультатПоиска = РезультатПоискаСертификата();
				ДанныеСертификата = УниверсальныйОбменСБанкамиВызовСервера.НайтиОблачныйСертификатВХранилище(ОтпечатокСертификата);
				Если ДанныеСертификата <> Неопределено Тогда
					#Если ВебКлиент Тогда
						// Помещаем структуру, чтобы не создавать объект СертификатКриптографии,
						// он требует расширения на веб-клиенте.
						РезультатПоиска.Сертификат =
							УниверсальныйОбменСБанкамиВызовСервера.
								СтруктураДанныхСертификатаИзДвоичныхДанных(ДанныеСертификата.Сертификат);
					#Иначе 
						РезультатПоиска.Сертификат = Новый СертификатКриптографии(ДанныеСертификата.Сертификат);
					#КонецЕсли
					РезультатПоиска.СертификатНайден = Истина;
				КонецЕсли;
				ПодобратьСертификатОрганизацииПослеПоискаСертификатаЗавершение(РезультатПоиска, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			ОповещениеОПолученииСертификата = Новый ОписаниеОповещения(
				"ПодобратьСертификатОрганизацииПослеПоискаСертификатаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			НайтиСертификатПоОтпечатку(ОповещениеОПолученииСертификата,
				ОтпечатокСертификата,
				,
				ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	// Сертификат из 1С-Отчетность подобрать не удалось.
	ДополнительныеПараметры.РезультатПоискаСертификата.ОписаниеОшибки = РезультатПоиска.ТекстОшибки;
	
	РезультатПоиска = РезультатПоискаСертификата();
	
	// Переходим к поиску среди всех локальных сертификатов.
	ОповещениеОПолученииСертификата = Новый ОписаниеОповещения(
		"ПодобратьСертификатОрганизацииПослеПоискаСертификатаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОповещениеОПолученииСертификата, РезультатПоиска);
	
КонецПроцедуры

// По отпечатку сертификата 1С-Отчетности ищем сертификат и проверяем, подходит ли он нам.
//
// Параметры:
//  РезультатПоиска - Структура - см. УниверсальныйОбменСБанкамиСлужебныйКлиент.РезультатПоискаСертификата()
//  ПараметрыПоиска - Структура - см. НайтиСертификат()
//
Процедура ПодобратьСертификатОрганизацииПослеПоискаСертификатаЗавершение(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ПараметрыОтбора = ДополнительныеПараметры.ПараметрыОтбора;
	Если РезультатПоиска.СертификатНайден Тогда
		
		// Дата для проверки сертификата может передаваться в параметрах отбора.
		Если ПараметрыОтбора = Неопределено Тогда
			ТекущаяДата = УниверсальныйОбменСБанкамиВызовСервера.ТекущаяДатаНаСервере();
		Иначе
			ТекущаяДата = ПараметрыОтбора.Дата;
		КонецЕсли;
		
		Сертификат = РезультатПоиска.Сертификат;
		Если Сертификат.ИспользоватьДляПодписи
		   И Сертификат.ДатаОкончания >= ТекущаяДата
		   И Сертификат.ДатаНачала <= ТекущаяДата
		   И УниверсальныйОбменСБанкамиКлиентСервер.
		   		СертификатСоответствуетОтборуПриПодбореДляОрганизации(Сертификат, ПараметрыОтбора).ПризнакСоответствия
		   Тогда // актуальность алгоритма подписи не проверяем, считая что в 1С-Отчетность он всегда актуален
			РезультатПодбораСертификата = ДополнительныеПараметры.РезультатПоискаСертификата;
			РезультатПодбораСертификата.ОтпечатокСертификата = ДвоичныеДанныеВСтроку(Сертификат.Отпечаток);
			РезультатПодбораСертификата.ЭтоЭлектроннаяПодписьВМоделиСервиса = 
				ЭтоОблачныйСертификатПользователя(РезультатПодбораСертификата.ОтпечатокСертификата);
			РезультатПодбораСертификата.Выполнено = Истина;
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОПодбореСертификата, РезультатПодбораСертификата);
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Сертификат из 1С-Отчетность подобрать не удалось.
	Если Не ПустаяСтрока(РезультатПоиска.ОписаниеОшибки) Тогда
		ДополнительныеПараметры.РезультатПоискаСертификата.ОписаниеОшибки = РезультатПоиска.ОписаниеОшибки;
	КонецЕсли;
	
	// Ищем локальный сертификат.
	ОповещениеОПолученииСпискаСертификатов = Новый ОписаниеОповещения(
		"ПодобратьСертификатОрганизацииПослеПоискаВЛокальномХранилище", ЭтотОбъект, ДополнительныеПараметры);
	
	УниверсальныйОбменСБанкамиСлужебныйКлиент.ПолучитьСертификаты(ОповещениеОПолученииСпискаСертификатов, Новый Структура);
	
КонецПроцедуры

// После поиска списка локальных сертификатов выбираем из них подходящий.
//
// Параметры:
//  РезультатПоиска - Структура - см. УниверсальныйОбменСБанкамиСлужебныйКлиент.РезультатПолучитьСертификаты()
//  ПараметрыПоиска - Структура - см. НайтиСертификат()
//
Процедура ПодобратьСертификатОрганизацииПослеПоискаВЛокальномХранилище(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ПараметрыОтбора = ДополнительныеПараметры.ПараметрыОтбора;
	
	Если Не РезультатПоиска.Выполнено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОПодбореСертификата,
									 ДополнительныеПараметры.РезультатПоискаСертификата);
		Возврат;
		
	КонецЕсли;
	
	// Подбираем первый подходящий сертификат.
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДополнительныеСвойстваСертификатов = РезультатПоиска.ДополнительныеСвойстваСертификатов;
	Для каждого Сертификат Из РезультатПоиска.Сертификаты Цикл
		
		Если Не Сертификат.ИспользоватьДляПодписи Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ УниверсальныйОбменСБанкамиКлиентСервер.
				СертификатСоответствуетОтборуПриПодбореДляОрганизации(Сертификат, ПараметрыОтбора).ПризнакСоответствия Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить;
		КонецЕсли;
		
		АлгоритмПубличногоКлюча = ДополнительныеСвойстваСертификатов[Сертификат.Отпечаток].АлгоритмПубличногоКлюча;
		Если Не АлгоритмПубличногоКлючаАктуален(АлгоритмПубличногоКлюча) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПоискаСертификата = ДополнительныеПараметры.РезультатПоискаСертификата;
		РезультатПоискаСертификата.ОтпечатокСертификата = ДвоичныеДанныеВСтроку(Сертификат.Отпечаток);
		РезультатПоискаСертификата.ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭтоОблачныйСертификатПользователя(РезультатПоискаСертификата.ОтпечатокСертификата);
		РезультатПоискаСертификата.Выполнено = Истина;
		
		Прервать;
	
	КонецЦикла; 
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОПодбореСертификата, ДополнительныеПараметры.РезультатПоискаСертификата);
	
КонецПроцедуры

Процедура ОпределитьСвойстваПрограммыМенеджераКриптографии(ОповещениеОбратногоВызова, МенеджерКриптографии)
	
	Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОпределитьСвойстваПрограммыМенеджераКриптографииПослеПолученияИнформацииМодуля",
		ЭтотОбъект,
		ДополнительныеПараметры);
	МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	
КонецПроцедуры

Процедура ОпределитьСвойстваПрограммыМенеджераКриптографииПослеПолученияИнформацииМодуля(
		ИнформацияМодуля,
		ДополнительныеПараметры) Экспорт
		
	Результат = ДополнительныеПараметры.Результат;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	ИмяМодуля = ИнформацияМодуля.Имя;
	
	СвойстваПрограммы = Неопределено;
	
	ПровайдерыКриптоПро = УниверсальныйОбменСБанкамиКлиентСервер.
			КриптопровайдерCryptoPro(Неопределено);
	Провайдеры = Новый Массив;
	Для каждого Провайдер Из ПровайдерыКриптоПро Цикл
		Провайдеры.Добавить(Провайдер);
	КонецЦикла;
	
	ПровайдерыВиПНет = УниверсальныйОбменСБанкамиКлиентСервер.
			КриптопровайдерViPNet(Неопределено);
	Для каждого Провайдер Из ПровайдерыВиПНет Цикл
		Провайдеры.Добавить(Провайдер);
	КонецЦикла;
	
	Для каждого Провайдер Из Провайдеры Цикл
		Если ИмяМодуля = Провайдер.Имя Тогда
			СвойстваПрограммы = Провайдер;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СвойстваПрограммы <> Неопределено Тогда
		Результат.Свойства = СвойстваПрограммы;
	Иначе
		Результат.ОписаниеОшибки = НСтр("ru='Не удалось определить свойства менеджера криптографии.'");;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографии(ОповещениеОбратногоВызова,
	Сертификат = Неопределено,
	УниверсальныйКриптопровайдер = Ложь) Экспорт
	
	Если Сертификат <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"УниверсальныйОбменСБанкамиСлужебныйКлиент.ПолучитьСвойстваПрограммыМенеджераКриптографии", 
			"Сертификат",
			Сертификат, 
			Новый ОписаниеТипов("СертификатКриптографии"));
	КонецЕсли;

	Если УниверсальныйКриптопровайдер Тогда
		Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
		Результат.Свойства = УниверсальныйОбменСБанкамиКлиентСервер.
			КриптопровайдерMicrosoftBaseCryptographicProvider();
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОпределитьУстановленныеКрипторовайдеры(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров(
	КриптоПровайдеры,
	ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сертификат = ДополнительныеПараметры.Сертификат;
	
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", КриптоПровайдеры);
	
	Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
	
	КриптопровайдерПоУмолчанию = Неопределено;
	Если КриптоПровайдеры.Количество() = 0 Тогда
		// криптопровайдеры не найдены
		Результат.ОписаниеОшибки = НСтр("ru='Не обнаружено установленных криптопровайдеров.'");
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	ИначеЕсли КриптоПровайдеры.Количество() >= 1 Тогда
		КриптопровайдерПоУмолчанию = КриптоПровайдеры[0];
		Результат.Свойства = КриптопровайдерПоУмолчанию;
		Результат.КонфликтКриптопровайдеров = КриптоПровайдеры.Количество() > 1;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("КриптопровайдерПоУмолчанию", КриптопровайдерПоУмолчанию);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	
	// пытаемся определить алгоритм сертификата
	КриптоПровайдерСертификата = Неопределено;
	Если Сертификат <> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		Сертификат.НачатьВыгрузку(Оповещение);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата(
	ДанныеСертификата,
	ДополнительныеПараметры) Экспорт
	
	Результат = ДополнительныеПараметры.Результат;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сертификат = ДополнительныеПараметры.Сертификат;
	КриптоПровайдеры = ДополнительныеПараметры.КриптоПровайдеры;
	КриптопровайдерПоУмолчанию = ДополнительныеПараметры.КриптопровайдерПоУмолчанию;
	
	КриптоПровайдерСертификата = УниверсальныйОбменСБанкамиСлужебныйВызовСервера.ИзвлечьКриптопровайдер(ДанныеСертификата);
	АлгоритмСертификата = УниверсальныйОбменСБанкамиСлужебныйВызовСервера.ПолучитьСвойстваСертификата(ДанныеСертификата).АлгоритмПубличногоКлюча;
	ПоддерживаемыеАлгоритмы = УниверсальныйОбменСБанкамиКлиентСервер.ПоддерживаемыеАлгоритмы();
	АлгоритмСертификатаПоддерживается = ПоддерживаемыеАлгоритмы.Найти(АлгоритмСертификата) <> Неопределено;
	
	Если КриптоПровайдерСертификата <> Неопределено Тогда
		
		// в сертификате есть данные по криптопровайдеру
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// в сертификате есть даннные по алгоритму
			КриптоПровайдерСертификатаНайденСредиУстановленных = Ложь;
			Для каждого КриптоПровайдер Из КриптоПровайдеры Цикл
				
				// ищем криптопровайдер сертификата среди установленных
				Если КриптоПровайдерСертификата.Представление = КриптоПровайдер.Представление Тогда

					Если КриптоПровайдерСертификата.Представление =
						УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда

						КриптоПровайдерСертификата = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
						КриптоПровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;
						
					ИначеЕсли КриптоПровайдерСертификата.Представление =
						УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерViPNet().Представление Тогда

						КриптоПровайдерСертификата = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);
						КриптоПровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;

					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ КриптоПровайдерСертификатаНайденСредиУстановленных Тогда
				КриптоПровайдерСертификата = Неопределено;
			КонецЕсли;

		КонецЕсли;
	Иначе
		
		// криптопровайдер в сертификате не задан
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// используем алгоритм для провайдера по умолчанию
			Если КриптопровайдерПоУмолчанию.Представление =
				УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда

				КриптоПровайдерСертификата = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
				
			ИначеЕсли КриптопровайдерПоУмолчанию.Представление =
				УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерViPNet().Представление Тогда

				КриптоПровайдерСертификата = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КриптоПровайдерСертификата <> Неопределено Тогда
		Результат.Свойства = КриптоПровайдерСертификата;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);

КонецПроцедуры

Процедура ВыбратьСертификат(ОповещениеОЗавершении, НачальноеЗначениеВыбора, ПараметрыОтбора) Экспорт
	
	ПараметрыФормы = Новый Структура("НачальноеЗначениеВыбора, ПараметрыОтбора",
									НачальноеЗначениеВыбора,
									ПараметрыОтбора);
	
	Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеВыбора", ЭтотОбъект, Контекст);
		
	ОткрытьФорму(
		"ОбщаяФорма.ВыборСертификатаДляОбменаСБанками",
		ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыбратьСертификатПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("Выполнено", Ложь);
	РезультатВыбора.Вставить("ВыбранноеЗначение", Неопределено);
	
	Если Результат <> Неопределено Тогда
		РезультатВыбора.Выполнено = Истина;
		РезультатВыбора.ВыбранноеЗначение = Результат;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию(ДополнительныеПараметры)
	
	ТекстПодсказкиПоСертификату = ДополнительныеПараметры.ТекстПодсказкиПоСертификату;
	
	Если ТекстПодсказкиПоСертификату = Неопределено Тогда
		ТекстПодсказки = НСтр("ru='Для подписания можно использовать любой действующий квалифицированный сертификат'");
	Иначе
		ТекстПодсказки = ТекстПодсказкиПоСертификату;
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстПодсказкиПоСертификату, Режим, Цвет",
		ТекстПодсказки,
		ОтображениеПодсказки.Кнопка,
		Новый Цвет);

КонецФункции

Процедура ОтобразитьПредставлениеСертификата(
		ВыполняемоеОповещение,
		Параметры
		) Экспорт
		
	Сертификат = Параметры.Сертификат;
	ПолеВвода = Параметры.ПолеВвода;
	Форма = Параметры.Форма;
	ИмяРеквизитаПредставлениеСертификата = Параметры.ИмяРеквизитаПредставлениеСертификата;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиКлиент.ОтобразитьПредставлениеСертификата", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("Строка, Структура, Соответствие, СертификатКриптографии"));
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",						ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ПолеВвода",									Параметры.ПолеВвода);
	ДополнительныеПараметры.Вставить("Форма",										Параметры.Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставлениеСертификата",		Параметры.ИмяРеквизитаПредставлениеСертификата);
	ДополнительныеПараметры.Вставить("ЭтоОблачныйСертификат",						Параметры.ЭтоОблачныйСертификат);
	ДополнительныеПараметры.Вставить("Сертификат",									Параметры.Сертификат);
	ДополнительныеПараметры.Вставить("СвойстваСертификата",							Неопределено);
	ДополнительныеПараметры.Вставить("ТекстПодсказкиПоСертификату",					Параметры.ТекстПодсказкиПоСертификату);
	ДополнительныеПараметры.Вставить("Отпечаток", "");
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = "";
		ПолеВвода.ПодсказкаВвода = НСтр("ru = 'Выберите сертификат'");
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию(ДополнительныеПараметры);
		ОтобразитьПодсказкуДляСертификата(ПолеВвода, ПараметрыПодсказки);

		Результат = РезультатОтобразитьПредставлениеСертификата();
		Результат.Выполнено = Истина;
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры)
	
	Сертификат				= ДополнительныеПараметры.Сертификат;
	ЭтоОблачныйСертификат	= ДополнительныеПараметры.ЭтоОблачныйСертификат;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиСлужебныйКлиент.ОтобразитьОдинСертификатВПолеВвода", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("Строка, Структура, Соответствие, СертификатКриптографии"));
		
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	
	ДополнительныеПараметры.Сертификат = Неопределено;
	
	Если ТипЗнчСертификат = Тип("Строка") Тогда
		
		// передан отпечаток в виде строки
		ДополнительныеПараметры.Отпечаток = Сертификат;
		
		Если ЭтоОблачныйСертификат Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОтобразитьОдинСертификатВПолеВводаПослеПоискаОблачногоСертификата", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
				
			ХранилищеСертификатовКлиент.НайтиСертификат(ОписаниеОповещения, Новый Структура("Отпечаток", Сертификат));
			Возврат;
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
			
			НайтиСертификатПоОтпечатку(ОписаниеОповещения, Сертификат);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		// передана структура или соответствие со свойствами
		ДополнительныеПараметры.Отпечаток  = Сертификат.Отпечаток;
		ДополнительныеПараметры.Сертификат = Сертификат;
		
		РезультатПоиска = РезультатПоискаСертификата();
		РезультатПоиска.СертификатНайден = Истина;
		РезультатПоиска.Сертификат = Сертификат;
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Сертификат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеВвода 								= ДополнительныеПараметры.ПолеВвода;
	Форма 									= ДополнительныеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ДополнительныеПараметры.ИмяРеквизитаПредставлениеСертификата;
	Сертификат 								= ДополнительныеПараметры.Сертификат;
	Отпечаток								= ДополнительныеПараметры.Отпечаток;
	ВыполняемоеОповещение					= ДополнительныеПараметры.ВыполняемоеОповещение;
	ЭтоОблачныйСертификат					= ДополнительныеПараметры.ЭтоОблачныйСертификат;
	
	Если Результат.СертификатНайден Тогда
		
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Результат.Сертификат, ДополнительныеПараметры);
		Возврат;
		
	Иначе
		
		// Сертификат не найден в локальном хранилище.
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = Отпечаток;
		ПолеВвода.РасширеннаяПодсказка.Заголовок	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов'"), ,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		Результат = РезультатОтобразитьПредставлениеСертификата();
		Результат.Выполнено = Истина;
		Результат.СертификатНеНайденВХранилище = Истина;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
		Возврат;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПоискаОблачногоСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ПолеВвода 								= ДополнительныеПараметры.ПолеВвода;
	Форма 									= ДополнительныеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ДополнительныеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ВыполняемоеОповещение					= ДополнительныеПараметры.ВыполняемоеОповещение;
	Отпечаток								= ДополнительныеПараметры.Отпечаток;
	
	Если НЕ РезультатПоиска.Выполнено Тогда
		Результат = РезультатОтобразитьПредставлениеСертификата();
		Результат.ОписаниеОшибки = РезультатПоиска.ОписаниеОшибки;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатПоиска.Сертификат = Неопределено Тогда
		
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = Отпечаток;
		ПолеВвода.РасширеннаяПодсказка.Заголовок	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в хранилище облачных сертификатов'"), ,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		Результат = РезультатОтобразитьПредставлениеСертификата();
		Результат.Выполнено = Истина;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Сертификат = РезультатПоиска.Сертификат;
	
	ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(РезультатПоиска.Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Знач СвойстваСертификата, ДополнительныеПараметры)
	
	ДополнительныеПараметры.СвойстваСертификата = СвойстваСертификата;
	
	ИмяРеквизитаПредставлениеСертификата 	= ДополнительныеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ДополнительныеПараметры.ПолеВвода;
	Форма 									= ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение					= ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(СвойстваСертификата);
	
	ТекДата = УниверсальныйОбменСБанкамиВызовСервера.ТекущаяДатаНаСервере();
	Если ТекДата > СвойстваСертификата.ДатаОкончания Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата истек'"), ,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	ИначеЕсли ТекДата < СвойстваСертификата.ДатаНачала Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата еще не наступил'"), ,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию(ДополнительныеПараметры);
		ОтобразитьПодсказкуДляСертификата(ПолеВвода, ПараметрыПодсказки);
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		Результат = РезультатОтобразитьПредставлениеСертификата();
		Результат.Выполнено = Истина;
		Результат.СвойстваСертификата = СвойстваСертификата;
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПолучитьСертификаты()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Сертификаты", Новый Массив);
	Результат.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСертификаты(ОписаниеОповещения, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);

	УниверсальныйКриптопровайдер = Истина;
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещенияПродолжения, ,УниверсальныйКриптопровайдер);

КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(
			НСтр(СтрШаблон("ru = 'Ошибка получения сертификатов по причине: %1'", РезультатПолученияСвойств.ОписаниеОшибки)));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СоздатьМенеджерКриптографии(ОписаниеОповещенияПродолжения,
		РезультатПолученияСвойств.Свойства);
		
КонецПроцедуры

Процедура ПолучитьСертификатыПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ТипХранилища = ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты;
	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
		
	Если НЕ Результат.Выполнено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(
			НСтр("ru = 'Ошибка создания менеджера криптографии при получении списка сертификатов.'"));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияХранилищаСертификатов",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);

КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияХранилищаСертификатов(Хранилище, ДополнительныеПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Хранилище.НачатьПолучениеВсех(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Сертификаты", Результат);
	ДополнительныеПараметры.Вставить("ИндексСертификата", 0);
	
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОписаниеОповещения;
	ДополнительныеСвойстваСертификатов =ДополнительныеПараметры.ДополнительныеСвойстваСертификатов;
	
	Если ИндексСертификата = Сертификаты.Количество() Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		РезультатВыполнения.Выполнено = Истина;
		РезультатВыполнения.Сертификаты = Сертификаты;
		РезультатВыполнения.ДополнительныеСвойстваСертификатов = ДополнительныеСвойстваСертификатов;
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, РезультатВыполнения);
	Иначе
		ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
		Сертификат = Сертификаты[ИндексСертификата];
		Сертификат.НачатьВыгрузку(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	
	ДополнительныеСвойства = УниверсальныйОбменСБанкамиСлужебныйВызовСервера.ПолучитьСвойстваСертификата(Результат);
	ДополнительныеПараметры.ДополнительныеСвойстваСертификатов.Вставить(
		Сертификаты[ИндексСертификата].Отпечаток,
		ДополнительныеСвойства);
	
	ИндексСертификата = ИндексСертификата + 1;
	ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	СертификатДействителенС = Сертификат.ДатаНачала;
	СертификатДействителенПо = Сертификат.ДатаОкончания;
	
	ФорматДаты = "Л=ru_RU; ДФ=dd.MM.yyyy";
	
	Если ТипЗнч(СертификатДействителенС) = Тип("Строка") Тогда 
		СертификатДействителенС = СтрЗаменить(СертификатДействителенС, Символ(10), "");
	Иначе
		СертификатДействителенС = Формат(СертификатДействителенС, ФорматДаты);
	КонецЕсли;
		
	Если ТипЗнч(СертификатДействителенПо) = Тип("Строка") Тогда 
		СертификатДействителенПо = СтрЗаменить(СертификатДействителенПо, Символ(10), "");
	Иначе
		СертификатДействителенПо = Формат(СертификатДействителенПо, ФорматДаты);
	КонецЕсли;
	
	Если Сертификат.Субъект.Свойство("T") Тогда
		Должность = Сертификат.Субъект.T;
	Иначе
		Должность = "";
	КонецЕсли;
	
	Если Сертификат.Субъект.Свойство("OID1_2_643_3_131_1_1") Тогда
		ИНН = Сертификат.Субъект.OID1_2_643_3_131_1_1;
	Иначе
		ИНН = "";
	КонецЕсли;
	
	Наименование = УниверсальныйОбменСБанкамиКлиентСервер.НаименованиеСертификата(Сертификат);
	
	ШаблонНаименования = НСтр("ru='%1 (%2 - %3) %4 %5'");
	Результат = СтрШаблон(ШаблонНаименования, Наименование, СертификатДействителенС, СертификатДействителенПо, Должность, ИНН);
	
	Возврат Результат;
	
КонецФункции

Процедура ПоказатьСертификат(Сертификат, ФормаВладелец = Неопределено) Экспорт
		
	Контекст = Новый Структура("ФормаВладелец", ФормаВладелец);
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьСертификатПослеПоиска", ЭтотОбъект, Контекст);
	НайтиСертификатПоОтпечатку(Оповещение, Сертификат.Отпечаток);
		
КонецПроцедуры

Процедура ПоказатьСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.СертификатНайден Тогда
		ОписаниеСертификата = УниверсальныйОбменСБанкамиКлиентСервер.СертификатКриптографииВСтуктуру(Результат.Сертификат);
		ПоказатьСертификатПослеВыбораСертификата(
			Новый Структура("Значение", ОписаниеСертификата), ВходящийКонтекст);
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибкиНеУдалосьОткрытьСертификат());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификатПослеВыбораСертификата(ВыбранныйЭлемент, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ТипЗнч(ВходящийКонтекст.ФормаВладелец) = Тип("ФормаКлиентскогоПриложения")
			И ВходящийКонтекст.ФормаВладелец.Открыта() Тогда
			ФормаВладелец = ВходящийКонтекст.ФормаВладелец;
		Иначе
			ФормаВладелец = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Сертификат", ВыбранныйЭлемент.Значение);
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСертификатаОбменаСБанками", ПараметрыФормы,
			ФормаВладелец, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

Функция ОписаниеОшибкиНеУдалосьОткрытьСертификат()

	Возврат НСтр("ru = 'Не удалось открыть сертификат.'");
	
КонецФункции

Функция СертификатКриптографииВСтуктуру(СертификатКриптографии) Экспорт
	
	ОписаниеСертификата = Новый Структура;
	ОписаниеСертификата.Вставить("Версия");
	ОписаниеСертификата.Вставить("ДатаНачала");
	ОписаниеСертификата.Вставить("ДатаОкончания");
	ОписаниеСертификата.Вставить("Издатель");
	ОписаниеСертификата.Вставить("ИспользоватьДляПодписи");
	ОписаниеСертификата.Вставить("ИспользоватьДляШифрования");
	ОписаниеСертификата.Вставить("ОткрытыйКлюч");
	ОписаниеСертификата.Вставить("Отпечаток");
	ОписаниеСертификата.Вставить("РасширенныеСвойства");
	ОписаниеСертификата.Вставить("СерийныйНомер");
	ОписаниеСертификата.Вставить("Субъект");
	
	ОписаниеСертификата.Вставить("Наименование", УниверсальныйОбменСБанкамиКлиентСервер.НаименованиеСертификата(СертификатКриптографии));
	
	ЗаполнитьЗначенияСвойств(ОписаниеСертификата, СертификатКриптографии);
	
	Возврат ОписаниеСертификата;
	
КонецФункции

Процедура ОпределитьУстановленныеКрипторовайдеры(ОповещениеОбратногоВызова) Экспорт
	
	АлгоритмПоУмолчанию = УниверсальныйОбменСБанкамиКлиентСервер.АлгоритмПоУмолчанию();
	Криптопровайдеры = Новый Массив;
	Криптопровайдеры.Добавить(УниверсальныйОбменСБанкамиКлиентСервер.
		КриптопровайдерCryptoPro(АлгоритмПоУмолчанию));
	Криптопровайдеры.Добавить(УниверсальныйОбменСБанкамиКлиентСервер.
		КриптопровайдерViPNet(АлгоритмПоУмолчанию));
	
	ТекущийКриптопровайдер = 0;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", Криптопровайдеры);
	ДополнительныеПараметры.Вставить("ТекущийКриптопровайдер", ТекущийКриптопровайдер);
	ДополнительныеПараметры.Вставить("УстановленныеКриптопровайдеры", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОпределитьУстановленныеКрипторовайдерыПослеСозданияМенеджераКриптографииЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
	
КонецПроцедуры

Процедура ОпределитьУстановленныеКрипторовайдерыПослеСозданияМенеджераКриптографииЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	УстановленныеКриптопровайдеры = ДополнительныеПараметры.УстановленныеКриптопровайдеры;
	ТекущийКриптопровайдер = ДополнительныеПараметры.ТекущийКриптопровайдер;
	КриптоПровайдеры = ДополнительныеПараметры.КриптоПровайдеры;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если НЕ Результат.Выполнено И Результат.РасширениеНеПодключено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, УстановленныеКриптопровайдеры);
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		// Могут создаваться криптопровайдеры с другим именем, например,
		// вместо КриптоПро создается ViPNet, поэтому определяем по имени модуля.
		Если Результат.ИмяМодуля = КриптоПровайдеры[ТекущийКриптопровайдер].Имя Тогда
			УстановленныеКриптопровайдеры.Добавить(КриптоПровайдеры[ТекущийКриптопровайдер]);
		КонецЕсли;
	КонецЕсли;
	
	Если КриптоПровайдеры.Количество() - 1 = ТекущийКриптопровайдер Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, УстановленныеКриптопровайдеры);
		Возврат;
	Иначе
		ТекущийКриптопровайдер  = ТекущийКриптопровайдер + 1; 
		ДополнительныеПараметры.ТекущийКриптопровайдер = ТекущийКриптопровайдер;
		Оповещение = Новый ОписаниеОповещения("ОпределитьУстановленныеКрипторовайдерыПослеСозданияМенеджераКриптографииЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

// Создает и возвращает менеджер криптографии (на клиенте) для указанной программы.
Процедура СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммы, Алгоритмы = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеВозвратаМенеджерКриптографии", Оповещение);
	Контекст.Вставить("СвойстваПрограммы", СвойстваПрограммы);
	Контекст.Вставить("БылаПопыткаУстановкиРасширения", Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеУстановкиРасширения",
		ЭтотОбъект,
		Контекст);
	
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиРасширения(Подключено, Контекст) Экспорт
	
	ВыполняемоеОповещение = Контекст.ОповещениеВозвратаМенеджерКриптографии;
	
	Если НЕ Подключено Тогда
		// расширение не подключено
		ТекстОшибки = НСтр("ru='Расширение для работы с файлами не подключено.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			УниверсальныйОбменСБанкамиКлиентСервер.СобытиеЖурналаРегистрации(),
			"Ошибка",
			ТекстОшибки, ,
			Истина);
		Результат = РезультатСоздатьМенеджерКриптографии();
		Результат.РасширениеНеПодключено = Истина;
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		Возврат;
	КонецЕсли;
	
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографии
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	СвойстваПрограммы = Контекст.СвойстваПрограммы;
	
	Если НЕ Подключено Тогда
		Если Контекст.БылаПопыткаУстановкиРасширения Тогда
			РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией",
				ЭтотОбъект,
				Контекст
			);
			НачатьУстановкуРасширенияРаботыСКриптографией(ОписаниеОповещения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	Контекст.МенеджерКриптографии = Новый МенеджерКриптографии;
	
	// Начиная с версии платформы 8.3.13 ввод пароля может выполняеться средствами ОС.
	Контекст.МенеджерКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение", 
			ЭтотОбъект, 
			Контекст,
			"СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации", 
			ЭтотОбъект),
		СвойстваПрограммы.Имя,
		СвойстваПрограммы.Путь,
		СвойстваПрограммы.Тип,
		ИспользованиеИнтерактивногоРежимаКриптографии.Использовать);
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией
Процедура СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией(Контекст) Экспорт

	Контекст.БылаПопыткаУстановкиРасширения = Истина;
	// пытаемся ещё раз подключить расширение
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));

КонецПроцедуры
 
// Продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией, ошибка.
Процедура СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение(Результат, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле",
		ЭтотОбъект,
		Контекст);
		
	Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле(ИнформацияМодуля, Контекст) Экспорт
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	РезультатВыполнения.Выполнено = Истина;
	РезультатВыполнения.ИмяМодуля = ИнформацияМодуля.Имя;
	РезультатВыполнения.АлгоритмыПодписи = ИнформацияМодуля.АлгоритмыПодписи;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

// В структуре результатов в поле Сертификат возвращается сертификат.
Процедура НайтиСертификатПоОтпечатку(ОписаниеОповещениеВозврата,
	Отпечаток,
	МенеджерКриптографии = Неопределено,
	ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата, Отпечаток, "ПоОтпечатку", МенеджерКриптографии, ТипХранилища);
	
КонецПроцедуры

// В структуре результатов в поле Сертификат возвращается массив сертификатов.
Процедура НайтиСертификатПоСерийномуНомеру(ОписаниеОповещениеВозврата,
	СерийныйНомер,
	МенеджерКриптографии = Неопределено,
	ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата, СерийныйНомер, "ПоСерийномуНомеру", МенеджерКриптографии, ТипХранилища);
	
КонецПроцедуры

Процедура НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата,
		Идентификатор,
		ВидПоиска = "ПоОтпечатку",
		МенеджерКриптографии = Неопределено,
		ТипХранилища = Неопределено) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещениеВозврата);
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.Вставить("ТипХранилища", ТипХранилища);
	ДополнительныеПараметры.Вставить("ВидПоиска", ВидПоиска);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиСлужебныйКлиент.НайтиСертификатПоИдентификатору", 
		"Идентификатор",
		Идентификатор, 
		Новый ОписаниеТипов("Строка, ДвоичныеДанные"));
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Если ПустаяСтрока(Идентификатор) Тогда
			ВызватьИсключение НСтр("ru='Передано пустое значение идентификатора сертификата.'");
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("Идентификатор", УниверсальныйОбменСБанкамиВызовСервера.СтрокаОтпечаткаВДвоичныеДанные(Идентификатор));
	Иначе 
		ДополнительныеПараметры.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, , Истина);
		Возврат;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Сертификат криптографии не найден по причине: %1.'");
		РезультатПоиска = РезультатПоискаСертификата();
		РезультатПоиска.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, Результат.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СвойстваПрограммы = Результат.Свойства;
	СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ТипХранилища = ДополнительныеПараметры.ТипХранилища;

	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
	
	Если НЕ Результат.Выполнено Тогда
		РезультатПоиска = РезультатПоискаСертификата();
		РезультатПоиска.ОписаниеОшибки = НСтр("ru = 'Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры.МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияХранилищаСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПолученияХранилищаСертификатов(Хранилище, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПоискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Если ДополнительныеПараметры.ВидПоиска = "ПоОтпечатку" Тогда
		Хранилище.НачатьПоискПоОтпечатку(Оповещение, ДополнительныеПараметры.Идентификатор);
	ИначеЕсли ДополнительныеПараметры.ВидПоиска = "ПоСерийномуНомеру" Тогда
		Хранилище.НачатьПоискПоСерийномуНомеру(Оповещение, ДополнительныеПараметры.Идентификатор);
	Иначе
		ВызватьИсключение "Неизвестный вид поиска сертификата.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПоискаЗавершение(Сертификат, ДополнительныеПараметры) Экспорт 
	
	ВидПоиска = ДополнительныеПараметры.ВидПоиска;
	
	РезультатПоиска = РезультатПоискаСертификата();
	РезультатПоиска.Сертификат = Сертификат;
	
	Если ВидПоиска = "ПоОтпечатку" Тогда
		РезультатПоиска.СертификатНайден = Сертификат <> Неопределено;
	Иначе
		// В случае поиска по серийному номеру возвращается массив.
		РезультатПоиска.СертификатНайден = Сертификат.Количество() > 0;
	КонецЕсли;
	
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		Если ВидПоиска = "ПоОтпечатку" Тогда
			ОписаниеОшибки = НСтр("ru='Сертификат с отпечатком %1 не найден в хранилище.'");
		Иначе
			ОписаниеОшибки = НСтр("ru='Сертификат с серийным номером %1 не найден в хранилище.'");
		КонецЕсли;
		РезультатПоиска.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
	
	РезультатПоиска.МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПоиска);
	
КонецПроцедуры

// Проверяет сертификат средствами менеджера криптографии.
//
// Параметры:
//  РежимПроверки - РежимПроверкиСертификатаКриптографии, Массив. - Указывает режим проверки.
//                     Содержит один объект или массив объектов режимов проверки.
//
Процедура ПроверитьСертификат(ОповещениеОЗавершении, СертификатИлиОтпечаток, Параметры = Неопределено, ВыводитьСообщения = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОповещениеОЗавершении);
	Если Параметры <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("РежимПроверки", Параметры.РежимПроверки);
	Иначе
		ДополнительныеПараметры.Вставить("РежимПроверки", Неопределено);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	ДополнительныеПараметры.Вставить("СертификатИлиОтпечаток", СертификатИлиОтпечаток);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ОписаниеОшибки", РезультатПолученияСвойств.ОписаниеОшибки);
		Результат.Вставить("Валиден", Неопределено);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	УниверсальныйОбменСБанкамиКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатИлиОтпечаток = ДополнительныеПараметры.СертификатИлиОтпечаток;
	
	Если НЕ Результат.Выполнено Тогда
		ОписаниеОшибки = НСтр("ru = 'Менеджер криптографии не создан'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Создание менеджера криптографии'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Если ТипЗнч(СертификатИлиОтпечаток) = Тип("СертификатКриптографии") Тогда
		Результат = РезультатПоискаСертификата();
		Результат.СертификатНайден = Истина;
		Результат.Сертификат = СертификатИлиОтпечаток;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	Иначе
		УниверсальныйОбменСБанкамиКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, СертификатИлиОтпечаток, МенеджерКриптографии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
		
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	РежимПроверки = ДополнительныеПараметры.РежимПроверки;
		
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		ОписаниеОшибки = НСтр("ru = 'Сертификат не найден'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Проверка сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	РежимПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	
	Сертификат = РезультатПоиска.Сертификат;
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПроверкиСертификатаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПроверитьСертификатПослеПроверкиСертификатаОшибка",
		ЭтотОбъект);
	МенеджерКриптографии.НачатьПроверкуСертификата(ОписаниеОповещения, Сертификат, РежимПроверки);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаЗавершение(ДополнительныеПараметры) Экспорт
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Истина;
	РезультатПроверки.Валиден = Истина;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание + ".";

	Если ВыводитьСообщения Тогда
		УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Ложь;
	РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
	РезультатПроверки.Валиден = Ложь;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайл(ОповещениеОЗавершении, Сертификат, ИмяФайлаИлиРасширение, 
										ВыводитьСоообщения) Экспорт
		
	ДополнительныеПараметры = Новый Структура("ИмяФайлаИлиРасширение,
											   |ВыводитьСоообщения,
											   |ОписаниеОповещения", 
											   ИмяФайлаИлиРасширение,
											   ВыводитьСоообщения,
											   ОповещениеОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкспортироватьСертификатВФайлПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	УниверсальныйОбменСБанкамиКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, Сертификат);
		
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		Если ВыводитьСоообщения Тогда
			УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат не найден.'"));
		КонецЕсли; 
		РезультатЭкспорта = Новый Структура;
		РезультатЭкспорта.Вставить("Выполнено", Ложь);
		РезультатЭкспорта.Вставить("ИмяФайлаСертификата", "");
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатКриптографии", РезультатПоиска.Сертификат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога",
		ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", ИмяКаталогаВременныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СертификатКриптографии.НачатьВыгрузку(Оповещение);
		
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт 
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИмяФайлаИлиРасширение = ДополнительныеПараметры.ИмяФайлаИлиРасширение;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПолноеИмяФайла = ИмяКаталогаВременныхФайлов + ИмяФайлаИлиРасширение;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	ВыгруженныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	
	РезультатЭкспорта = Новый Структура;
	РезультатЭкспорта.Вставить("Выполнено", Истина);
	РезультатЭкспорта.Вставить("ИмяФайлаСертификата", ПолноеИмяФайла);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
	
КонецПроцедуры

#Область Расшифровать

// Считается, что данные зашифрованы на единственный сертификат.
Процедура Расшифровать(ОповещениеОбратногоВызова, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Данные", Параметры.Данные);
	ДополнительныеПараметры.Вставить("МенеджерыКриптографии", Параметры.МенеджерыКриптографии);
	ДополнительныеПараметры.Вставить("ЭтоОблачныйСертификат", Параметры.ЭтоОблачныйСертификат);
	ДополнительныеПараметры.Вставить("Форма", Параметры.Форма);
	ДополнительныеПараметры.Вставить("ВозвращатьОшибкуПриОтменеВводаПароля", Параметры.ВозвращатьОшибкуПриОтменеВводаПароля);
	ДополнительныеПараметры.Вставить("КэшСертификатов", Параметры.КэшСертификатов);
	ДополнительныеПараметры.Вставить("ПопыткаПослеПодменыАлгоритмов", Ложь);
	ДополнительныеПараметры.Вставить("СвойстваПрограммыКриптографии", Неопределено);
	ДополнительныеПараметры.Вставить("Сертификат", Неопределено);
	
	// извлекаем серийный номер из сообщения
	Настройки = Новый Структура;
	Настройки.Вставить("ПрочитатьПодписанныеДанные", Ложь);
	
	СвойстваКриптоСообщения = Параметры.СвойстваКриптоСообщения;
	Если СвойстваКриптоСообщения = Неопределено Тогда
		СвойстваКриптоСообщения = УниверсальныйОбменСБанкамиСлужебныйВызовСервера.
			ПолучитьСвойстваКриптосообщения(Параметры.Данные, Настройки);
	КонецЕсли;
	
	Если СвойстваКриптоСообщения.Тип <> "EnvelopedData" Тогда
		Результат = РезультатРасшифровать();
		Результат.ОписаниеОшибки = НСтр("ru='Неверный формат криптосообщения.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	// Считаем, что получатель только один.
	Получатель = СвойстваКриптоСообщения.Получатели[0];
	СерийныйНомер = Получатель.СерийныйНомер;
	
	ЭтоОблачныйСертификат = Параметры.ЭтоОблачныйСертификат;
	Если ЭтоОблачныйСертификат Тогда
		// Cообщение зашифровано на облачный сертификат
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиВОблакеЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СервисКриптографииКлиент.Расшифровать(ОписаниеОповещения, ДополнительныеПараметры.Данные);
		Возврат;
	КонецЕсли;
	
	ДанныеСертификата = ДополнительныеПараметры.КэшСертификатов.Получить(СерийныйНомер);
	Если ДанныеСертификата <> Неопределено Тогда
		// Сертификат был найден в кэше.
		РезультатПоискаСертификата = РезультатПоискаСертификата();
		РезультатПоискаСертификата.СертификатНайден = Истина;
		РезультатПоискаСертификата.Сертификат = Новый Массив;
		РезультатПоискаСертификата.Сертификат.Добавить(ДанныеСертификата.Сертификат);
		РасшифроватьПослеПоискаСертификата(РезультатПоискаСертификата, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Поиск сертификата.
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НайтиСертификатПоСерийномуНомеру(ОписаниеОповещения, СерийныйНомер);
	
КонецПроцедуры

Процедура РасшифроватьПослеРасшифровкиВОблакеЗавершение(РезультатРасшифровки, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Результат = РезультатРасшифровать();
	
	Если НЕ РезультатРасшифровки.Выполнено Тогда
		ТекстОшибки = НСтр("ru='Ошибка расшифровки данных в облаке.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.РасшифрованныеДанные = РезультатРасшифровки.РасшифрованныеДанные;
	Результат.ОписаниеОшибки = "";
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура РасшифроватьПослеПоискаСертификата(РезультатПоискаСертификата, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	
	Если РезультатПоискаСертификата.СертификатНайден Тогда
		// Сертификат был найден по серийному номеру. Считаем, что он единственный.
		Сертификат = РезультатПоискаСертификата.Сертификат[0];
		ДополнительныеПараметры.Сертификат = Сертификат;
	Иначе
		// Сертификат не найден в хранилище.
		Результат = РезультатРасшифровать();
		ТекстОшибки = НСтр("ru='Ошибка поиска сертификата: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатПоискаСертификата.ОписаниеОшибки);
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	КэшСертификатов.Вставить(Сертификат.СерийныйНомер,
		НовоеЗначениеКэшаСертификатов(Сертификат));
		
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	МенеджерКриптографии = МенеджерКриптографииСертификата(МенеджерыКриптографии,
		КэшСертификатов,
		Сертификат);
	Если МенеджерКриптографии <> Неопределено Тогда
		ОпределитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, МенеджерКриптографии);
	Иначе
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, Сертификат);
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	Сертификат = ДополнительныеПараметры.Сертификат;
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатРасшифровать();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	ДополнительныеПараметры.СвойстваПрограммыКриптографии = СвойстваПрограммы;
	
	КэшСертификатов[Сертификат.СерийныйНомер].КлючСвойствПрограммы = УниверсальныйОбменСБанкамиКлиентСервер.
		ИдентификаторПрограммыКриптографии(СвойстваПрограммы);
		
	МенеджерКриптографии = МенеджерКриптографииСертификата(МенеджерыКриптографии,
		КэшСертификатов,
		Сертификат);
		
	Если МенеджерКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("РасшифроватьПослеСозданияМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммы);
	Иначе
		Результат = РезультатСоздатьМенеджерКриптографии();
		Результат.Выполнено = Истина;
		Результат.МенеджерКриптографии = МенеджерКриптографии;
		РасшифроватьПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	Сертификат = ДополнительныеПараметры.Сертификат;
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатРасшифровать();
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	МенеджерыКриптографии.Вставить(
		КлючСвойствПрограммыКриптографии(КэшСертификатов, Сертификат),
		МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"РасшифроватьПослеРасшифровкиОшибка",
		ЭтотОбъект);
	
	МенеджерКриптографии.НачатьРасшифровку(Оповещение,
		ДополнительныеПараметры.Данные
		);

КонецПроцедуры

Процедура РасшифроватьПослеРасшифровкиЗавершение(РасшифрованныеДанные, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатРасшифровать();
	Результат.Выполнено = Истина;
	Результат.РасшифрованныеДанные = РасшифрованныеДанные;
	Результат.ОписаниеОшибки = "";
	Результат.КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	Результат.МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	Результат.Сертификат = ДополнительныеПараметры.Сертификат;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура РасшифроватьПослеРасшифровкиОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	Сертификат = ДополнительныеПараметры.Сертификат;
	ВозвращатьОшибкуПриОтменеВводаПароля = ДополнительныеПараметры.ВозвращатьОшибкуПриОтменеВводаПароля;
	
	Результат = РезультатРасшифровать();
	Результат.МенеджерыКриптографии = МенеджерыКриптографии;
	Результат.КэшСертификатов = КэшСертификатов;
	Результат.Сертификат = Сертификат;
	
	ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.
		ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
		
	ЗаписатьСобытия = Истина;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		СтрШаблон(НСтр("ru = '%1. УниверсальныйОбменСБанкамиСлужебныйКлиент.Расшифровать()'"),
			УниверсальныйОбменСБанкамиКлиентСервер.СобытиеЖурналаРегистрации()),
		"Ошибка",
		СтрШаблон("%1: %2", НСтр("ru='Ошибка при расшифровке документа.'"), ОписаниеОшибки),
		"",
		ЗаписатьСобытия
		);
		
	Если СтрНайти(ОписаниеОшибки, КодОшибкиОтменыВводаПароля()) > 0 Тогда
		// Пользователь отменил ввод пароля.
		Если  ВозвращатьОшибкуПриОтменеВводаПароля Тогда
			Результат.ОтмененоПользователем = Истина;
			ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = МенеджерКриптографииСертификата(МенеджерыКриптографии,
		КэшСертификатов,
		Сертификат);
	РезультатПодмены = ПодменаТипаКриптопровайдераВСлучаеНеобходимости(
		ОписаниеОшибки,
		ДополнительныеПараметры,
		"РасшифроватьПослеСозданияМенеджераКриптографии",
		МенеджерКриптографии);
		
	Если РезультатПодмены.ВыполненаПодменаТипаКриптопровайдера Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = ДополнитьИнформациюПоОшибкеКриптографии(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Зашифровать

Процедура Зашифровать(ОповещениеОбратногоВызова, ПараметрыШифрования) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Сертификаты", ПараметрыШифрования.Сертификаты);
	ДополнительныеПараметры.Вставить("Данные", ПараметрыШифрования.Данные);
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", ПараметрыШифрования.МенеджерКриптографии);
	
	Если ДополнительныеПараметры.МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗашифроватьПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеСозданияМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("МенеджерКриптографии", ДополнительныеПараметры.МенеджерКриптографии);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатЗашифровать();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ЗашифроватьПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = "Ошибка создания менеджера криптографии.";
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	ДополнительныеПараметры.МенеджерКриптографии = МенеджерКриптографии;
	
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ЗашифроватьПослеШифрованияОшибка",
		ЭтотОбъект);
	
	МенеджерКриптографии.НачатьШифрование(Оповещение,
		ДополнительныеПараметры.Данные,
		ДополнительныеПараметры.Сертификаты
		);
	
КонецПроцедуры

Процедура ЗашифроватьПослеШифрованияЗавершение(ЗашифрованныеДанные, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатЗашифровать();
	Результат.Выполнено = Истина;
	Результат.ЗашифрованныеДанные = ЗашифрованныеДанные;
	Результат.ОписаниеОшибки = "";
	Результат.МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура ЗашифроватьПослеШифрованияОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = РезультатЗашифровать();
	Результат.Выполнено = Ложь;
	Результат.МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	ОписаниеОшибки = ДополнитьИнформациюПоОшибкеКриптографии(ОписаниеОшибки);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

Процедура Подписать(ОповещениеОбратногоВызова, ПараметрыПодписи) Экспорт
	
	// проверка параметров
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиСлужебныйКлиент.Подписать", 
		"Сертификат",
		ПараметрыПодписи.Сертификат, 
		Новый ОписаниеТипов("СертификатКриптографии, Строка"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиСлужебныйКлиент.Подписать", 
		"Данные",
		ПараметрыПодписи.Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
		
	МенеджерКриптографии = ПараметрыПодписи.МенеджерКриптографии;
	Сертификат = ПараметрыПодписи.Сертификат;
	ЭтоОблачныйСертификат = ПараметрыПодписи.ЭтоОблачныйСертификат;
	Данные = ПараметрыПодписи.Данные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершенияПодписи", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
	ДополнительныеПараметры.Вставить("Данные", Данные);
	ДополнительныеПараметры.Вставить("ВключениеСертификатовВПодпись", ПараметрыПодписи.ВключениеСертификатовВПодпись);
	ДополнительныеПараметры.Вставить("ПопыткаПослеПодменыАлгоритмов", Ложь);
	ДополнительныеПараметры.Вставить("СвойстваПрограммыКриптографии", Неопределено);
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		Отпечаток = Сертификат;
	Иначе
		Отпечаток = УниверсальныйОбменСБанкамиКлиентСервер.
			ДвоичныеДанныеВСтроку(Сертификат.Отпечаток);
	КонецЕсли;
	
	// подпись в облаке
	Если ЭтоОблачныйСертификат Тогда
		ДанныеСертификата = Новый Структура;
		ДанныеСертификата.Вставить("Отпечаток", Отпечаток);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеФормированияОблачнойПодписи", ЭтотОбъект, ДополнительныеПараметры);
		
		СервисКриптографииКлиент.Подписать(ОписаниеОповещения, Данные, ДанныеСертификата, "GOST3410");
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		// Был передан отпечаток, ищем сертификат.
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПоискаСертификата",
			ЭтотОбъект,
			ДополнительныеПараметры);
		НайтиСертификатПоОтпечатку(ОписаниеОповещения,
			Отпечаток,
			МенеджерКриптографии,
			ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
		Возврат;
	КонецЕсли;
	
	// Передан сертификат криптографии, определяем свойства менеджера криптографии.
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	Если МенеджерКриптографии <> Неопределено Тогда
		// Получаем свойства по менеджеру криптографии.
		ОпределитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, МенеджерКриптографии);
	Иначе
		// Получаем свойства по сертификату.
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, Сертификат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПоискаСертификата(РезультатПоискаСертификата, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатПоискаСертификата.СертификатНайден Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = РезультатПоискаСертификата.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Сертификат = РезультатПоискаСертификата.Сертификат;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, ДополнительныеПараметры.Сертификат);
	
КонецПроцедуры

Процедура ПодписатьПослеФормированияОблачнойПодписи(РезультатПодписывания, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатПодписать();
	Если НЕ РезультатПодписывания.Выполнено Тогда
		// ошибка подписания
		Результат.ОписаниеОшибки = РезультатПодписывания.ИнформацияОбОшибке;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
		
	// подпись сформирована
	Результат.ПодписьВыполнена = Истина;
	Результат.ПодписанныеДанные = РезультатПодписывания.Подпись;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);

КонецПроцедуры
	
Процедура ПодписатьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	ДополнительныеПараметры.СвойстваПрограммыКриптографии = СвойстваПрограммы;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммы);
		Возврат;
	Иначе
		Результат = РезультатСоздатьМенеджерКриптографии();
		Результат.Выполнено = Истина;
		Результат.МенеджерКриптографии = МенеджерКриптографии;
		ПодписатьПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ВключениеСертификатовВПодпись = ДополнительныеПараметры.ВключениеСертификатовВПодпись;
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	ДополнительныеПараметры.МенеджерКриптографии = МенеджерКриптографии;
	
	Если ВключениеСертификатовВПодпись <> Неопределено Тогда
		МенеджерКриптографии.ВключениеСертификатовВПодпись = ВключениеСертификатовВПодпись;
	Иначе
		// По умолчанию включаем цепочку без корневого.
		МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьЦепочкуБезКорневого;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПодписатьЗавершениеОшибка",
		ЭтотОбъект);
		
	МенеджерКриптографии.НачатьПодписывание(Оповещение,
		ДополнительныеПараметры.Данные,
		ДополнительныеПараметры.Сертификат
		);
	
КонецПроцедуры

Процедура ПодписатьЗавершение(ПодписанныеДанные, ДополнительныеПараметры) Экспорт 
	
	Результат = РезультатПодписать();
	Результат.ПодписьВыполнена = Истина;
	Результат.ПодписанныеДанные = ПодписанныеДанные;
	Результат.ОписаниеОшибки = "";
	Результат.МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
	
КонецПроцедуры

Процедура ПодписатьЗавершениеОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	СтандартнаяОбработка = Ложь;
	Результат = РезультатПодписать();
	Результат.МенеджерКриптографии = МенеджерКриптографии;
	
	ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
	РезультатПодмены = ПодменаТипаКриптопровайдераВСлучаеНеобходимости(
		ОписаниеОшибки,
		ДополнительныеПараметры,
		"ПодписатьПослеСозданияМенеджераКриптографии",
		МенеджерКриптографии);
		
	Если РезультатПодмены.ВыполненаПодменаТипаКриптопровайдера Тогда
		Возврат;
	КонецЕсли;
	
	АнализОшибок = АнализОшибкиКриптографии(ОписаниеОшибки);
	Если АнализОшибок.ПользовательОтменилОперацию Тогда
		Результат.ОтмененоПользователем = Истина;
	КонецЕсли;
	
	ОписаниеОшибки = ДополнитьИнформациюПоОшибкеКриптографии(ОписаниеОшибки);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Подписание'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершенияПодписи, Результат);
	
КонецПроцедуры

Процедура ПроверитьПодпись(Оповещение, ИсходныеДанные, Подпись, МенеджерКриптографии = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыполняемоеОповещение", Оповещение);
	Контекст.Вставить("ИсходныеДанные", ИсходныеДанные);
	Контекст.Вставить("Подпись", Подпись);
	Контекст.Вставить("ПроверкаВыполнена", Ложь);
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			Контекст);
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, Контекст) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатПроверитьПодпись();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеСозданияМенеджераКриптографии", 
		ЭтотОбъект,
		Контекст);
		
	СвойстваПрограммыКриптографии = РезультатПолученияСвойств.Свойства;
	СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
		
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПроверитьПодпись();
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеПроверкиЗавершение", 
		ЭтотОбъект, 
		Контекст,
		"ПроверитьПодписьПослеПроверкиОшибка",
		ЭтотОбъект);
		
	МенеджерКриптографии.НачатьПроверкуПодписи(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПроверкиОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка проверки подписи.
                                     |%1'"),
						УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание);
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Проверка подписи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			
	Результат = РезультатПроверитьПодпись();
	Результат.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	Результат.ОписаниеОшибки = ОписаниеОшибки;
	
	ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПроверкиЗавершение(Сертификат, Контекст) Экспорт
	
	Результат = РезультатПроверитьПодпись();
	Результат.Выполнено = Истина;
	Результат.Сертификат = Сертификат;
	Результат.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

// В параметр ОповещениеОбратногоВызова можно передавать Неопределено.
Процедура РасшифроватьНерасшифрованныеТранзакции(ОповещениеОбратногоВызова, Параметры) Экспорт
	
	Сервис = Параметры.Сервис;
	Организация = Параметры.Организация;
	ТранзакцииДляРасшифровки = Параметры.ТранзакцииДляРасшифровки;
	ФормаВладелец = Параметры.ФормаВладелец;
	РасшифровкаВПроцессеОбмена = Параметры.РасшифровкаВПроцессеОбмена;
	
	Если ТранзакцииДляРасшифровки = Неопределено Тогда
		ТранзакцииДляРасшифровки = УниверсальныйОбменСБанкамиКлиент.
			ТранзакцииТребующиеРасшифровки(Сервис, Организация);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сервис", Сервис);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("ТранзакцииДляРасшифровки", ТранзакцииДляРасшифровки);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("РасшифровкаВПроцессеОбмена", РасшифровкаВПроцессеОбмена);
	ДополнительныеПараметры.Вставить("ИндексТекущейТранзакции", 0);
	ДополнительныеПараметры.Вставить("РасшифрованныеТранзакции", Новый Массив);
	ДополнительныеПараметры.Вставить("Предупреждения", Новый Массив);
	ДополнительныеПараметры.Вставить("КэшСертификатов", Новый Соответствие);
	ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	ДополнительныеПараметры.Вставить("ФормаДлительнойОперации", Неопределено);
	ДополнительныеПараметры.Вставить("МенеджерыКриптографии", Новый Соответствие);
	
	ПараметрыФормыДлительнойОперации = ДлительныеОперацииОбменаСБанкамиКлиент.
		ПараметрыРасшифровки();
	ПараметрыФормыДлительнойОперации.ОбщееКоличествоЭтапов = ТранзакцииДляРасшифровки.Количество();
	ПараметрыФормыДлительнойОперации.Организации = Организация;
	
	Если НЕ РасшифровкаВПроцессеОбмена Тогда
		ФормаДлительнойОперации = ДлительныеОперацииОбменаСБанкамиКлиент.ПоказатьФормуРасшифровки(
			Сервис, ПараметрыФормыДлительнойОперации);
		ДополнительныеПараметры.ФормаДлительнойОперации = ФормаДлительнойОперации;
	КонецЕсли;
	
	РасшифроватьНерасшифрованныеТранзакцииЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура РасшифроватьНерасшифрованныеТранзакцииЦикл(ДополнительныеПараметры) Экспорт
	
	ИндексТекущейТранзакции = ДополнительныеПараметры.ИндексТекущейТранзакции;
	ТранзакцииДляРасшифровки = ДополнительныеПараметры.ТранзакцииДляРасшифровки;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	РасшифрованныеТранзакции = ДополнительныеПараметры.РасшифрованныеТранзакции;
	Предупреждения = ДополнительныеПараметры.Предупреждения;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	ФормаДлительнойОперации = ДополнительныеПараметры.ФормаДлительнойОперации;
	ФормаВладелец = ДополнительныеПараметры.ФормаВладелец;
	РасшифровкаВПроцессеОбмена = ДополнительныеПараметры.РасшифровкаВПроцессеОбмена;
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	
	Если ФормаВладелец = Неопределено Тогда
		ФормаВладелец = ФормаДлительнойОперации;
	КонецЕсли;
	
	Если ИндексТекущейТранзакции > ТранзакцииДляРасшифровки.Количество() - 1 Тогда
		
		// Все транзакции расшифрованы.
		Результат = РезультатРасшифроватьНерасшифрованныеТранзакции();
		Результат.РасшифрованныеТранзакции = РасшифрованныеТранзакции;
		
		Если Предупреждения.Количество() > 0 Тогда
			Результат.Предупреждения = СтрСоединить(Предупреждения, Символы.ПС);
		КонецЕсли;
		
		// Оповещаем форму длительной операции о завершении расшифровки.
		Если НЕ РасшифровкаВПроцессеОбмена Тогда
			ПараметрыЗавершения = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыЗавершенияРасшифровки();
			ПараметрыЗавершения.Всего = ТранзакцииДляРасшифровки.Количество();
			ПараметрыЗавершения.КоличествоРасшифрованных = РасшифрованныеТранзакции.Количество();
			ПараметрыЗавершения.КоличествоНеРасшифрованных = ПараметрыЗавершения.Всего - ПараметрыЗавершения.КоличествоРасшифрованных;
			
			ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОЗавершенииРасшифровки(ПараметрыЗавершения);
		КонецЕсли;
		
		Результат.Выполнено = Истина;
		Если ОповещениеОбратногоВызова <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
		
	Транзакция = ТранзакцииДляРасшифровки[ИндексТекущейТранзакции];
	
	// Обновление формы длительной операции.
	Если РасшифровкаВПроцессеОбмена Тогда
		ПараметрыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыСменыЭтапаОбмена();
		ПараметрыЭтапа.Имя = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаРасшифровкаСообщений();
		ПараметрыЭтапа.Организация = УниверсальныйОбменСБанкамиВызовСервера.ОрганизацияТранзакции(Транзакция);
		Если ИндексТекущейТранзакции = 0 Тогда
			ПараметрыЭтапа.ДлительностьПаузы = ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВызватьОбработчикБезПаузы();
		КонецЕсли;
		ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаОбмена(ПараметрыЭтапа);
	Иначе
		ПараметрыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.НовыеПараметрыЭтаповРасшифровки();
		ПараметрыЭтапа.КоличествоПройденныхЭтапов = ИндексТекущейТранзакции;
		ПараметрыЭтапа.ОбщееКоличествоЭтапов = ТранзакцииДляРасшифровки.Количество();
		ПараметрыЭтапа.ТекущаяОрганизация = УниверсальныйОбменСБанкамиВызовСервера.ОрганизацияТранзакции(Транзакция);
		ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаРасшифровки(ПараметрыЭтапа);
	КонецЕсли;
	
	// Расшифровка следующей транзакции.
	Оповещение = Новый ОписаниеОповещения(
		"РасшифроватьНерасшифрованныеТранзакцииПослеРасшифровкиЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	РасшифроватьДанныеТранзакции(Оповещение,
		Транзакция,
		КэшСертификатов,
		ФормаВладелец,
		Истина,
		МенеджерыКриптографии);
	
КонецПроцедуры

Процедура РасшифроватьНерасшифрованныеТранзакцииПослеРасшифровкиЦикл(РезультатРасшифровки, ДополнительныеПараметры) Экспорт
	
	ИндексТекущейТранзакции = ДополнительныеПараметры.ИндексТекущейТранзакции;
	ТранзакцииДляРасшифровки = ДополнительныеПараметры.ТранзакцииДляРасшифровки;
	РасшифрованныеТранзакции = ДополнительныеПараметры.РасшифрованныеТранзакции;
	ФормаДлительнойОперации = ДополнительныеПараметры.ФормаДлительнойОперации;
	РасшифровкаВПроцессеОбмена = ДополнительныеПараметры.РасшифровкаВПроцессеОбмена;
	
	Если РезультатРасшифровки.Выполнено ИЛИ РезультатРасшифровки.ОтмененоПользователем Тогда
		
		Если РезультатРасшифровки.ОтмененоПользователем Тогда
			ОписаниеОшибки1 = НСтр("ru='Ошибка при расшифровке файлов сообщения:'");
			ОписаниеОшибки2 = НСтр("ru='Ввод пароля контейнера ключа отменен пользователем.'");
			
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(ОписаниеОшибки1
				+ Символы.ПС 
				+ ОписаниеОшибки2);
		Иначе
			РасшифрованныеТранзакции.Добавить(ТранзакцииДляРасшифровки[ИндексТекущейТранзакции]);
		КонецЕсли;
		
	Иначе
		
		// Произошла ошибка расшифровки.
		ЗаписатьСобытиеВЖурнал(РезультатРасшифровки.ОписаниеОшибки,
			НСтр("ru = 'Расшифровать транзакции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(РезультатРасшифровки.ОписаниеОшибки);
		
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущейТранзакции = ИндексТекущейТранзакции + 1;
	
	Предупреждения = РезультатРасшифровки.Предупреждения;
	Если НЕ ПустаяСтрока(Предупреждения) Тогда
		ДополнительныеПараметры.Предупреждения.Добавить(Предупреждения);
		// Выводим предупреждения.
		ЗаголовокПредупреждений = НСтр("ru='Предупреждения при расшифровке файлов сообщения:'");
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(ЗаголовокПредупреждений);
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(Предупреждения);
	КонецЕсли;
	
	РасшифроватьНерасшифрованныеТранзакцииЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

#Область РасшифроватьНерасшифрованныеТранзакции

Процедура РасшифроватьДанныеТранзакции(ОповещениеОбратногоВызова,
		Транзакция,
		КэшСертификатов = Неопределено,
		ФормаВладелец = Неопределено,
		ВозвращатьОшибкуПриОтменеВводаПароля = Истина,
		МенеджерыКриптографии = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ИндексТекущегоФайла", 0);
	ДополнительныеПараметры.Вставить("Транзакция", Транзакция);
	ДополнительныеПараметры.Вставить("Форма", ФормаВладелец);
	ДополнительныеПараметры.Вставить("Сервис", УниверсальныйОбменСБанкамиВызовСервера.СервисТранзакции(Транзакция));
	ДополнительныеПараметры.Вставить("ИдентификаторЖурналаОперацийСФайлами", "");
	ДополнительныеПараметры.Вставить("Вложения", Неопределено);
	ДополнительныеПараметры.Вставить("ПомещаемыеФайлы", Неопределено);
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", "");
	ДополнительныеПараметры.Вставить("Предупреждения", Новый Массив);
	ДополнительныеПараметры.Вставить("ПодписьНеДействительна", Ложь);
	ДополнительныеПараметры.Вставить("НеизвестныйСертификатПодписи", Ложь);
	ДополнительныеПараметры.Вставить("ДанныеДляПроверкиПодписи", Неопределено);
	ДополнительныеПараметры.Вставить("ВозвращатьОшибкуПриОтменеВводаПароля", ВозвращатьОшибкуПриОтменеВводаПароля);
	ДополнительныеПараметры.Вставить("Сертификат", Неопределено);
	Если КэшСертификатов = Неопределено Тогда
		ДополнительныеПараметры.Вставить("КэшСертификатов", Новый Соответствие);
	Иначе
		ДополнительныеПараметры.Вставить("КэшСертификатов", КэшСертификатов);
	КонецЕсли;
	Если МенеджерыКриптографии = Неопределено Тогда
		ДополнительныеПараметры.Вставить("МенеджерыКриптографии", Новый Соответствие);
	Иначе
		ДополнительныеПараметры.Вставить("МенеджерыКриптографии", МенеджерыКриптографии);
	КонецЕсли;
	
	// Помещаем во временный регистр.
	РезультатПомещения = УниверсальныйОбменСБанкамиВызовСервера.
		ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция);
	Если НЕ РезультатПомещения.Выполнено Тогда
		Результат = РезультатРасшифроватьДанныеТранзакции();
		Результат.ОписаниеОшибки = РезультатПомещения.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами = РезультатПомещения.Идентификатор;
	
	// Криптография в облаке расшифровывается в отдельной ветке.
	Если РезультатПомещения.ЭтоОблачныйСертификатПользователя Тогда
		// Расшифровываем данные на сервере, предварительно запросив маркер безопасности.
		Оповещение = Новый ОписаниеОповещения("РасшифроватьДанныеТранзакцииПослеИнициализацииОблачнойКриптографии",
			ЭтотОбъект,
			ДополнительныеПараметры);
		УниверсальныйОбменСБанкамиКлиент.
			ИнициализироватьСервисКриптографии(РезультатПомещения.ОблачныйСертификат.Отпечаток, Оповещение);
		Возврат;
	КонецЕсли;
	
	// Расшифровка локальными ключами.
	ДополнительныеПараметры.Вставить("ДанныеДляРасшифровки", РезультатПомещения.ДокументыКонтейнера);
	
	Оповещение = Новый ОписаниеОповещения(
		"РасшифроватьДанныеТранзакцииПослеУстановкиРасширенияДляКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	// Установка расширения работы с криптографией.
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Оповещение);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеИнициализацииОблачнойКриптографии(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Идентификатор = ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Транзакция = ДополнительныеПараметры.Транзакция;
	
	Результат = РезультатРасшифроватьДанныеТранзакции();
	
	// Расшифровываем в журнале операций с файлами.
	РезультатРасшифровки = УниверсальныйОбменСБанкамиВызовСервера.
		РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция);
	Если НЕ РезультатРасшифровки.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатРасшифровки.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, Ложь);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		Результат,
		РезультатРасшифровки,
		"Предупреждения, ПодписьНеДействительна, НеизвестныйСертификатПодписи");
	
	РезультатСохранения = УниверсальныйОбменСБанкамиВызовСервера.ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(
		Транзакция, Идентификатор);
	Если НЕ РезультатСохранения.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатСохранения.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, Ложь);
		Возврат;
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиВызовСервера.ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки);
	
	Результат.Выполнено = Истина;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеУстановкиРасширенияДляКриптографии(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Результат = РезультатРасшифроватьДанныеТранзакции();
		ТекстОшибки = НСтр("ru='Расширение для работы с криптографией не было установлено.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"РасшифроватьДанныеТранзакцииПослеПодготовкиРасширенияДляРаботыСФайлами",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПодготовитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеПодготовкиРасширенияДляРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	Идентификатор = ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами;
	Сервис = ДополнительныеПараметры.Сервис;
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатРасшифроватьДанныеТранзакции();
		ТекстОшибки = НСтр("ru='Расширение для работы с файлами не было установлено.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасшифроватьДанныеТранзакцииПослеПолученияФайлов",
		ЭтотОбъект,
		ДополнительныеПараметры);
	РежимРасшифровки = Истина;
	ПолучитьВременныеФайлыТранзакции(Оповещение, Сервис, Идентификатор, , РежимРасшифровки);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеПолученияФайлов(РезультатПолученияФайлов, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатПолученияФайлов.Выполнено Тогда
		Результат = РезультатРасшифроватьДанныеТранзакции();
		ТекстОшибки = РезультатПолученияФайлов.ОписаниеОшибки;
		Результат.ОписаниеОшибки = ТекстОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Вложения = РезультатПолученияФайлов.Вложения;
	
	ДополнительныеПараметры.Вложения = Вложения;
	ДополнительныеПараметры.ПомещаемыеФайлы = РезультатПолученияФайлов.ПомещаемыеФайлы;
	ДополнительныеПараметры.ИмяКаталогаВременныхФайлов =
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РезультатПолученияФайлов.ИмяКаталогаВременныхФайлов);
		
	// Криптография локальным ключом.
	РасшифроватьДанныеТранзакцииЦикл(Истина, ДополнительныеПараметры);
		
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ДанныеДляРасшифровки = ДополнительныеПараметры.ДанныеДляРасшифровки;
	Транзакция = ДополнительныеПараметры.Транзакция;
	Вложения = ДополнительныеПараметры.Вложения;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	ПомещаемыеФайлы = ДополнительныеПараметры.ПомещаемыеФайлы;
	Форма = ДополнительныеПараметры.Форма;
	ВозвращатьОшибкуПриОтменеВводаПароля = ДополнительныеПараметры.ВозвращатьОшибкуПриОтменеВводаПароля;
	
	Результат = РезультатРасшифроватьДанныеТранзакции();
	
	Если ИндексТекущегоФайла > Вложения.Количество() - 1 Тогда
		// Завершаем обработку вложений.
		РасшифроватьДанныеТранзакцииПослеОбработкиФайловЗавершение(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ДанныеДляПроверкиПодписи = Неопределено;
	
	Вложение = Вложения[ИндексТекущегоФайла];
	
	Если НЕ Вложение.Зашифровать Тогда
		Если Вложение.Сжать Тогда
			РасшифроватьДанныеТранзакцииРаспаковкаНезашифрованногоФайла(ДополнительныеПараметры);
		Иначе
			РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СвойстваКриптоСообщения = Вложение.СвойстваКриптоСообщения;
	
	Параметры = ПараметрыРасшифровать();
	Параметры.Данные = ИмяКаталогаВременныхФайлов
		+ ИмяФайлаВложенияВоВременнойПапке(Вложение);
	Параметры.МенеджерыКриптографии = МенеджерыКриптографии;
	Параметры.КэшСертификатов = КэшСертификатов;
	Параметры.СвойстваКриптоСообщения = СвойстваКриптоСообщения;
	Параметры.ЭтоОблачныйСертификат = Ложь;
	Параметры.Форма = Форма;
	Параметры.ВозвращатьОшибкуПриОтменеВводаПароля = ВозвращатьОшибкуПриОтменеВводаПароля;
	
	Оповещение = Новый ОписаниеОповещения(
		"РасшифроватьДанныеТранзакцииПослеРасшифровкиФайлаЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Расшифровать(Оповещение, Параметры);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеОбработкиФайловЗавершение(ДополнительныеПараметры) Экспорт
	
	ИдентификаторЖурналаОперацийСФайлами = ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Транзакция = ДополнительныеПараметры.Транзакция;
	ПодписьНеДействительна = ДополнительныеПараметры.ПодписьНеДействительна;
	НеизвестныйСертификатПодписи = ДополнительныеПараметры.НеизвестныйСертификатПодписи;
	Вложения = ДополнительныеПараметры.Вложения;
	
	Предупреждения = СтрСоединить(ДополнительныеПараметры.Предупреждения, Символы.ПС);
	Результат = РезультатРасшифроватьДанныеТранзакции();
	Результат.ПодписьНеДействительна = ПодписьНеДействительна;
	Результат.НеизвестныйСертификатПодписи = НеизвестныйСертификатПодписи;
	Результат.Предупреждения = Предупреждения;
	
	// Обновляем данные транзакции.
	РезультатОбновленияДанныхТранзакции = УниверсальныйОбменСБанкамиВызовСервера.
		ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, ИдентификаторЖурналаОперацийСФайлами);
	Если НЕ РезультатОбновленияДанныхТранзакции.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОбновленияДанныхТранзакции.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииРаспаковкаНезашифрованногоФайла(ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	Вложения = ДополнительныеПараметры.Вложения;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Вложение = Вложения[ИндексТекущегоФайла];
	
	Если Вложение.Сжать Тогда
		ИмяФайлаАрхива = ИмяФайлаВложенияВоВременнойПапке(Вложение);
		// Распаковка сжатых данных.
		Если ДоступнаРаботаСZIPАрхивом() Тогда
			// Распаковка на клиенте.
			РезультатИзвлечения = ИзвлечьДокументИзАрхива(ИмяКаталогаВременныхФайлов,
				ИмяФайлаАрхива,
				ИмяФайлаВложенияВоВременнойПапке(Вложение));
			Если НЕ РезультатИзвлечения.Выполнено Тогда
				Результат = РезультатРасшифроватьДанныеТранзакции();
				Результат.ОписаниеОшибки = РезультатИзвлечения.ОписаниеОшибки;
				РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры);
		Иначе
			// Распаковка на сервере.
			Оповещение = Новый ОписаниеОповещения(
				"РасшифроватьДанныеТранзакцииПослеСозданияДвоичныхДанныхАрхиваЦикл",
				ЭтотОбъект,
				ДополнительныеПараметры);
			НачатьСозданиеДвоичныхДанныхИзФайла(Оповещение, ИмяКаталогаВременныхФайлов + ИмяФайлаАрхива);
		КонецЕсли;
	Иначе
		РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеСозданияДвоичныхДанныхАрхиваЦикл(ДвоичныеДанные, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЖурналаОперацийСФайлами = ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами;
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	Вложения = ДополнительныеПараметры.Вложения;
	Вложение = Вложения[ИндексТекущегоФайла];
	
	// Распаковка и закладка в регистр.
	РезультатРаспаковки =
		УниверсальныйОбменСБанкамиВызовСервера.РаспаковатьДвоичныеДанные(
			ДвоичныеДанные,
			Вложение.ИсходноеИмяФайла,
			ИдентификаторЖурналаОперацийСФайлами);
		
	Если НЕ РезультатРаспаковки.Выполнено Тогда
		
		ЗаписатьСобытиеВЖурнал(РезультатРаспаковки.ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

		Результат = РезультатРасшифроватьДанныеТранзакции();
		Результат.ОписаниеОшибки = РезультатРаспаковки.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ДанныеДляПроверкиПодписи = РезультатРаспаковки.РаспакованныеДанные;
	РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеРасшифровкиФайлаЦикл(РезультатРасшифровки, ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ДанныеДляРасшифровки = ДополнительныеПараметры.ДанныеДляРасшифровки;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	Вложения = ДополнительныеПараметры.Вложения;
	Вложение = Вложения[ИндексТекущегоФайла];
	ИдентификаторЖурналаОперацийСФайлами = ДополнительныеПараметры.ИдентификаторЖурналаОперацийСФайлами;
	
	Если НЕ РезультатРасшифровки.Выполнено Тогда
		ЗаписатьСобытиеВЖурнал(РезультатРасшифровки.ОписаниеОшибки,
			НСтр("ru = 'Расшифровка файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		Результат = РезультатРасшифроватьДанныеТранзакции();
		Результат.ОтмененоПользователем = РезультатРасшифровки.ОтмененоПользователем;
		Результат.ОписаниеОшибки = РезультатРасшифровки.ОписаниеОшибки;
		РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.МенеджерыКриптографии = РезультатРасшифровки.МенеджерыКриптографии;
	ДополнительныеПараметры.Сертификат = РезультатРасшифровки.Сертификат;
	
	// Отправка результатов расшифровки на сервер.
	РезультатОбновления = УниверсальныйОбменСБанкамиВызовСервера.
		ОбновитьДанныеРесурсаВЖурналеОперацийСФайлами(
			ИдентификаторЖурналаОперацийСФайлами,
			Вложение.ИсходноеИмяФайла,
			"",
			"Результат",
			РезультатРасшифровки.РасшифрованныеДанные,
			Вложение.Сжать);
			
	Если НЕ РезультатОбновления.Выполнено Тогда
		ОписаниеОшибкиШаблон = НСтр("ru = 'Произошла ошибка при помещении расшифрованных данных в БД.
			|%1");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, Результат.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Расшифровка данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Если Вложение.Сжать Тогда
		ДополнительныеПараметры.ДанныеДляПроверкиПодписи = РезультатОбновления.РаспакованныеДанные;
	Иначе
		ДополнительныеПараметры.ДанныеДляПроверкиПодписи = РезультатРасшифровки.РасшифрованныеДанные;
	КонецЕсли;
	
	РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры);
		
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеЗаписиРаспакованныхДанныхЦикл(ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	Вложения = ДополнительныеПараметры.Вложения;
	Вложение = Вложения[ИндексТекущегоФайла];
	МенеджерыКриптографии = ДополнительныеПараметры.МенеджерыКриптографии;
	ДанныеДляПроверкиПодписи = ДополнительныеПараметры.ДанныеДляПроверкиПодписи;
	Сертификат = ДополнительныеПараметры.Сертификат;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	
	МенеджерКриптографии = МенеджерКриптографииСертификата(МенеджерыКриптографии,
		КэшСертификатов,
		Сертификат);
		
	Если Вложение.Подписать Тогда
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьДанныеТранзакцииПослеПроверкиПодписиЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		ИмяФайлаПодписи = ИмяКаталогаВременныхФайлов
			+ ИмяФайлаВложенияВоВременнойПапке(Вложение)
			+ УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаПодписи();
			
		Если ДанныеДляПроверкиПодписи = Неопределено Тогда
			// Данные в виде файла на диске.
			ИмяФайлаДанных = ИмяКаталогаВременныхФайлов + ИмяФайлаВложенияВоВременнойПапке(Вложение);
			ПроверитьПодпись(Оповещение, ИмяФайлаДанных, ИмяФайлаПодписи, МенеджерКриптографии);
		Иначе
			// Данные в виде двоичных данных.
			ПроверитьПодпись(Оповещение, ДанныеДляПроверкиПодписи, ИмяФайлаПодписи, МенеджерКриптографии);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла + 1;
		РасшифроватьДанныеТранзакцииЦикл(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииПослеПроверкиПодписиЦикл(РезультатПроверкиПодписи, ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Транзакция = ДополнительныеПараметры.Транзакция;
	Вложения = ДополнительныеПараметры.Вложения;
	
	Вложение = Вложения[ИндексТекущегоФайла];
	
	Если НЕ РезультатПроверкиПодписи.Выполнено Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В файле %1 подпись не действительна.
                                         |%2'"),
							Вложение.ИсходноеИмяФайла, РезультатПроверкиПодписи.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Проверка подписи банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ДополнительныеПараметры.Предупреждения.Добавить(ОписаниеОшибки);
		ДополнительныеПараметры.ПодписьНеДействительна = Истина;
	Иначе
		СертификатНайден = УниверсальныйОбменСБанкамиВызовСервера.
			НайтиСертификатБанкаТранзакцииПоОтпечатку(Транзакция, РезультатПроверкиПодписи.Сертификат.Отпечаток);
		Если НЕ СертификатНайден Тогда
			
			ОписаниеОшибки = СтрШаблон(НСтр("ru='В файле %1 подпись выполнена неизвестным сертификатом'"),
								Вложение.ИсходноеИмяФайла);
			ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
				НСтр("ru = 'Проверка подписи банка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				"Предупреждение");

			ДополнительныеПараметры.Предупреждения.Добавить(ОписаниеОшибки);
			ДополнительныеПараметры.НеизвестныйСертификатПодписи = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла + 1;
	РасшифроватьДанныеТранзакцииЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииЗавершение(Результат, ДополнительныеПараметры, УдалятьФайлы = Истина)
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Транзакция = ДополнительныеПараметры.Транзакция;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	
	ДополнительныеПараметры.Вставить("Результат", Результат);
	УниверсальныйОбменСБанкамиВызовСервера.ОбработатьРезультатРасшифровкиТранзакции(Транзакция, Результат);
	
	Если УдалятьФайлы Тогда
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьДанныеТранзакцииЗавершениеПослеУдаленияФайлов",
			ЭтотОбъект,
			ДополнительныеПараметры,
			"РасшифроватьДанныеТранзакцииЗавершениеОшибкаУдаленияФайлов",
			ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ИмяКаталогаВременныхФайлов);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииЗавершениеПослеУдаленияФайлов(ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура РасшифроватьДанныеТранзакцииЗавершениеОшибкаУдаленияФайлов(
		ИнформацияОбОшибке,
		СтандартнаяОбработка,
		ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	
	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Произошла ошибка при удалении файлов.
                                     |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Завершение расшифровки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодготовитьТранзакцию

Процедура ПодготовитьТранзакцию(ОповещениеОбратногоВызова, Параметры) Экспорт
	
	// проверка параметров
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"УниверсальныйОбменСБанкамиСлужебныйКлиент.ПодготовитьТранзакцию", 
		"СертификатПодписи",
		Параметры.СертификатПодписи, 
		Новый ОписаниеТипов("СертификатКриптографии, Строка"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Параметры.Форма);
	ДополнительныеПараметры.Вставить("Сервис", Параметры.Сервис);
	ДополнительныеПараметры.Вставить("Организация", Параметры.Организация);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Вложения", Новый Массив);
	ДополнительныеПараметры.Вставить("СертификатПодписи", Параметры.СертификатПодписи);
	ДополнительныеПараметры.Вставить("ИдентификаторВременногоХранилища", Параметры.ИдентификаторВременногоХранилища);
	ДополнительныеПараметры.Вставить("ПараметрыПроверкиСертификата",Параметры.ПараметрыПроверкиСертификата);
	ДополнительныеПараметры.Вставить("ИндексТекущегоВложения", 0);
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", Неопределено);
	ДополнительныеПараметры.Вставить("КэшСертификатов", Новый Соответствие); // Сертификаты шифрования.
	ДополнительныеПараметры.Вставить("Получатели", Новый Массив);
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", "");
	ДополнительныеПараметры.Вставить("ПомещаемыеФайлы", Новый Массив);
	ДополнительныеПараметры.Вставить("ЭтоОблачныйСертификат", Ложь);
	Если Параметры.Свойство("ОповещениеОПрогрессеВыполнения") Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОПрогрессеВыполнения", Параметры.ОповещениеОПрогрессеВыполнения);
	Иначе
		ДополнительныеПараметры.Вставить("ОповещениеОПрогрессеВыполнения", Неопределено);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ФормироватьОтветноеСообщениеБанка", Ложь);
	Если Параметры.Свойство("ФормироватьОтветноеСообщениеБанка") Тогда
		ДополнительныеПараметры.ФормироватьОтветноеСообщениеБанка = Параметры.ФормироватьОтветноеСообщениеБанка;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторыСоздаваемыхАрхивов", Неопределено);
	ИдентификаторыСоздаваемыхАрхивов = УниверсальныйОбменСБанкамиВызовСервера.ИдентификаторыСоздаваемыхАрхивов(
										Параметры.ИдентификаторВременногоХранилища);
	Если ИдентификаторыСоздаваемыхАрхивов.Количество() > 0 Тогда		
		ДополнительныеПараметры.Вставить("ИдентификаторыСоздаваемыхАрхивов", ИдентификаторыСоздаваемыхАрхивов);
	КонецЕсли;
	
	СертификатПодписи = Параметры.СертификатПодписи;
	
	// проверяем указан ли сертификат
	Если ТипЗнч(СертификатПодписи) = Тип("Строка") И ПустаяСтрока(СертификатПодписи) Тогда
		Результат = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Не задан сертификат подписи.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	// на клиенте подписываем только локальными ключами
	Если ТипЗнч(СертификатПодписи) = Тип("Строка") Тогда
		ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиКлиент.ЭтоОблачныйСертификатПользователя(СертификатПодписи);
	Иначе
		Отпечаток = УниверсальныйОбменСБанкамиКлиентСервер.ДвоичныеДанныеВСтроку(СертификатПодписи.Отпечаток);
		ЭтоОблачныйСертификат = УниверсальныйОбменСБанкамиКлиент.ЭтоОблачныйСертификатПользователя(Отпечаток);
	КонецЕсли;
	ДополнительныеПараметры.ЭтоОблачныйСертификат = ЭтоОблачныйСертификат;
	Если ЭтоОблачныйСертификат Тогда
		Результат = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Был передан облачный сертификат пользователя. Ожидается локальный сертификат.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ОповещениеОПрогрессеВыполнения  = Параметры.ОповещениеОПрогрессеВыполнения;
	Если ОповещениеОПрогрессеВыполнения <> Неопределено Тогда
		
		РезультатПрогресса = ПараметрыОповещенияПрогресса(ОповещениеОПрогрессеВыполнения);
		Прогресс = РезультатПрогресса.Прогресс;
		Прогресс.Процент = 1;
		Прогресс.Текст = НСтр("ru='Получение данных из БД...'");
		ВыполнитьОбработкуОповещения(ОповещениеОПрогрессеВыполнения, РезультатПрогресса);
		
		Если ЗначениеЗаполнено(ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры)
			И ИдентификаторыСоздаваемыхАрхивов.Количество() > 0 Тогда
			ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры.Вставить("КоличествоСоздаваемыхАрхивов",
				ИдентификаторыСоздаваемыхАрхивов.Количество());
			ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры.Вставить("НомерСоздаваемогоАрхива", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодготовитьТранзакциюПослеУстановкиРасширенияДляКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	// Установка расширения работы с криптографией.
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Оповещение);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеУстановкиРасширенияДляКриптографии(Подключено, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если НЕ Подключено Тогда
		Результат = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Расширение для работы с криптографией не было установлено.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	// Расширение требуется для получения каталога временных файлов и работы с файлами
	Оповещение = Новый ОписаниеОповещения(
		"ПодготовитьТранзакциюПослеПодготовкиРасширенияДляРаботыСФайлами",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПодготовитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеПодготовкиРасширенияДляРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сервис = ДополнительныеПараметры.Сервис;
	Организация = ДополнительныеПараметры.Организация;
	СертификатПодписи = ДополнительныеПараметры.СертификатПодписи;
	Идентификатор = ДополнительныеПараметры.ИдентификаторВременногоХранилища;
	Форма = ДополнительныеПараметры.Форма;

	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Расширение для работы с файлами не было установлено.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СертификатПодписи) = Тип("Строка") Тогда
		// передан отпечаток сертификата в виде строки
		Оповещение = Новый ОписаниеОповещения(
				"ПодготовитьТранзакциюПослеПоискаСертификатаПодписи",
				ЭтотОбъект,
				ДополнительныеПараметры);
				
		НайтиСертификатПоОтпечатку(Оповещение, СертификатПодписи);
		Возврат;
	Иначе
		// передан сертификат криптографии
		Результат = РезультатПоискаСертификата();
		Результат.Сертификат = СертификатПодписи;
		Результат.СертификатНайден = Истина;
		ПодготовитьТранзакциюПослеПоискаСертификатаПодписи(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеВводаПараметровКриптографии(ПараметрыКриптографии, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если ПараметрыКриптографии.ОтмененоПользователем Тогда
		// нажата кнопка Отмена
		ПараметрыКриптографии = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Пользователь отменил формирование транзакции.'");
		ПараметрыКриптографии.ОписаниеОшибки = ТекстОшибки;
		ПараметрыКриптографии.ПользовательОтменилПодготовкуТранзакции = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, ПараметрыКриптографии);
		Возврат;
	КонецЕсли;
	
	// пользователь выбрал облачный сертификат
	ЭтоОблачныйСертификат = ПараметрыКриптографии.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	Если ЭтоОблачныйСертификат Тогда
		ПараметрыКриптографии = РезультатПодготовитьТранзакцию();
		ТекстОшибки = НСтр("ru='Был передан облачный сертификат пользователя. Ожидается локальный сертификат.'");
		ПараметрыКриптографии.ОписаниеОшибки = ТекстОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, ПараметрыКриптографии);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатПодписи", ПараметрыКриптографии.ОтпечатокСертификата);
	
	Если ТипЗнч(ДополнительныеПараметры.СертификатПодписи) = Тип("Строка") Тогда
		// передан отпечаток сертификата на компьютере пользоателя
		Оповещение = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеПоискаСертификатаПодписи",
				ЭтотОбъект,
				ДополнительныеПараметры);
		НайтиСертификатПоОтпечатку(Оповещение, ДополнительныеПараметры.СертификатПодписи);
	Иначе
		// был передан СертификатКриптографии
		Результат = РезультатПоискаСертификата();
		Результат.Сертификат = ДополнительныеПараметры.СертификатПодписи;
		Результат.СертификатНайден = Истина;
		ПодготовитьТранзакциюПослеПоискаСертификатаПодписи(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеПоискаСертификатаПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ПараметрыПроверкиСертификата = ДополнительныеПараметры.ПараметрыПроверкиСертификата;
	Организация = ДополнительныеПараметры.Организация;
	
	Сертификат = Результат.Сертификат;
	
	Если Результат.СертификатНайден Тогда
		ДополнительныеПараметры.СертификатПодписи = Сертификат;
	Иначе

		ОписаниеОшибки = НСтр("ru='Сертификат для подписи не найден.'");
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Поиск сертификата подписи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				
		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	// Проверка сертификата на соответсвие параметрам сервиса.
	РезультатПроверки = УниверсальныйОбменСБанкамиКлиентСервер.
		СертификатСоответствуетОтборуПередКриптооперацией(Сертификат, ПараметрыПроверкиСертификата);
	Если НЕ РезультатПроверки.ПризнакСоответствия Тогда
		ОписаниеОшибки = РезультатПроверки.СообщениеДляПользователя;
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Поиск сертификата подписи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеПроверкиСертификатаПодписи",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПроверитьСертификат(Оповещение, Результат.Сертификат);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеПроверкиСертификатаПодписи(РезультатПроверкиСертификата, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 	     = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ОповещениеОПрогрессеВыполнения   = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	Сервис                           = ДополнительныеПараметры.Сервис;
	Идентификатор                    = ДополнительныеПараметры.ИдентификаторВременногоХранилища;
	ИдентификаторыСоздаваемыхАрхивов = ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов;
		
	Если НЕ РезультатПроверкиСертификата.Выполнено Тогда
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка проверки сертификата.
                                         |%1'"), РезультатПроверкиСертификата.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Проверка сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеПолученияФайлов",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьВременныеФайлыТранзакции(Оповещение, Сервис, Идентификатор, ОповещениеОПрогрессеВыполнения, , ИдентификаторыСоздаваемыхАрхивов);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеПолученияФайлов(РезультатПолученияФайлов, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ОповещениеОПрогрессеВыполнения = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	
	Если НЕ РезультатПолученияФайлов.Выполнено Тогда
		ЗаписатьСобытиеВЖурнал(РезультатПолученияФайлов.ОписаниеОшибки);

		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = РезультатПолученияФайлов.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Вложения = РезультатПолученияФайлов.Вложения;
	
	ДополнительныеПараметры.Получатели = РезультатПолученияФайлов.Получатели;
	ДополнительныеПараметры.Вложения = Вложения;
	ДополнительныеПараметры.ПомещаемыеФайлы = РезультатПолученияФайлов.ПомещаемыеФайлы;
	ДополнительныеПараметры.ИмяКаталогаВременныхФайлов =
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РезультатПолученияФайлов.ИмяКаталогаВременныхФайлов);
		
	ПодготовитьТранзакциюОбработатьВложенияЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюОбработатьВложенияЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоВложения = ДополнительныеПараметры.ИндексТекущегоВложения;
	Вложения = ДополнительныеПараметры.Вложения;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Получатели = ДополнительныеПараметры.Получатели;
	ПомещаемыеФайлы = ДополнительныеПараметры.ПомещаемыеФайлы;
	ОповещениеОПрогрессеВыполнения = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	
	Если ИндексТекущегоВложения = Вложения.Количество() Тогда
		// Завершили обработку вложений.
		ПодготовитьТранзакциюПослеОбработкиВложений(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
		
	// Подготовка вложений.
	Вложение = Вложения.Получить(ИндексТекущегоВложения);
	
	Если ОповещениеОПрогрессеВыполнения <> Неопределено И Вложения.Количество() > 0 Тогда
		РезультатПрогресса = ПараметрыОповещенияПрогресса(ОповещениеОПрогрессеВыполнения);
		Прогресс = РезультатПрогресса.Прогресс;
		Если ЗначениеЗаполнено(ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры)
			И ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры.Свойство("НомерСоздаваемогоАрхива") Тогда
			// Нужно учесть предвательный этап создания архивов.
			ПараметрыПрогресса = ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры;
			Если ПараметрыПрогресса.НомерСоздаваемогоАрхива > ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов Тогда
				// Это сводная обработка, которой предшествовало создание архивов.
				// Прошло уже 73% всего процесса отправки транзакции. Они состояли из 61% на предварительную обработку и 12% как первый
				// из трех шагов финальной обработки. Сейчас идет второй из трех шагов, занимающий 60% от 39% финальной обработки.
				Прогресс.Процент = Окр(73 + 0.39 * (90 - 30) * ИндексТекущегоВложения / Вложения.Количество()) + 1;

			Иначе
				// Это предварительная обработка, в результате которой будет создан архив.
				// Преварительная обработка занимает 61% всего прогресса. Она поделена на прогрессы отдельных архивов.
				// Прошел первый из трех шагов создания архива, продолжавшийся 30% от доли прогресса текущего архива.
				// Сейчас идет второй из трех шагов, занимающий 60% от прогресса текущего архива.
				ДоляПрогрессаСозданныхАрхивов = (ПараметрыПрогресса.НомерСоздаваемогоАрхива - 1) / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				ДоляПрогрессаСоздаваемогоАрхива = (0.31 + (0.9 - 0.3)) * ИндексТекущегоВложения / Вложения.Количество() / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				Прогресс.Процент = Окр(61 * (ДоляПрогрессаСозданныхАрхивов + ДоляПрогрессаСоздаваемогоАрхива)) + 1;
				
			КонецЕсли;
		Иначе
			// Предварительной обработки для создания архивов не требовалось.
			// Прошел первый из трех шагов обработки файлов, продолжавшийся 31% времени прогресса. Сейчас идет второй из трех шагов, занимающий 60%.
			Прогресс.Процент = Окр(31 + (90 - 30) * ИндексТекущегоВложения / Вложения.Количество());
		КонецЕсли;
		Прогресс.Текст = НСтр("ru='Подписывание и шифрование файлов...'");
		ВыполнитьОбработкуОповещения(ОповещениеОПрогрессеВыполнения, РезультатПрогресса);
	КонецЕсли;
	
	// Список операций, которые будут выполняться с файлами.
	Операции = Новый Массив;
	
	// Приоритет операций: подписывание, шифрование.
	// Операции сжать нет, так как данные в сжатом виде приходят с сервера.
	Если Вложение.Подписать И НЕ Вложение.ПодписьВыполнена Тогда
		Операции.Добавить("Подписать");
	КонецЕсли;
	
	Если Вложение.Зашифровать Тогда
		Операции.Добавить("Зашифровать");
	КонецЕсли;
	
	Вложение.Вставить("Операции", Операции);
	
	Если Операции.Количество() > 0 Тогда
		ПодготовитьТранзакциюВыполнитьОперациюЦикл(ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.ИндексТекущегоВложения = ДополнительныеПараметры.ИндексТекущегоВложения + 1;
		ПодготовитьТранзакциюОбработатьВложенияЦикл(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеОбработкиВложений(ДополнительныеПараметры) Экспорт
	
	ОповещениеОПрогрессеВыполнения = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	Вложения = ДополнительныеПараметры.Вложения;
	
	Если ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов <> Неопределено Тогда
		// Обработаны вложения по одному архиву. Переходим к следующему архиву.
		Если ОповещениеОПрогрессеВыполнения <> Неопределено Тогда
			РезультатПрогресса = ПараметрыОповещенияПрогресса(ОповещениеОПрогрессеВыполнения);
			Прогресс = РезультатПрогресса.Прогресс;
			ПараметрыПрогресса = ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры;
			Если ЗначениеЗаполнено(ПараметрыПрогресса)
			   И ПараметрыПрогресса.Свойство("НомерСоздаваемогоАрхива") Тогда // предварительно создаются архивы
				// Это предварительная обработка, в результате которой будет создан архив.
				// Преварительная обработка занимает 61% всего прогресса. Она поделена на прогрессы отдельных архивов.
				// Прошли все шаги создания текущего архива.
				ДоляПрогрессаСозданныхАрхивов = (ПараметрыПрогресса.НомерСоздаваемогоАрхива - 1) / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				ДоляПрогрессаСоздаваемогоАрхива = 0.95 / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				Прогресс.Процент = Окр(61 * (ДоляПрогрессаСозданныхАрхивов + ДоляПрогрессаСоздаваемогоАрхива)) + 1;
			Иначе // по-умолчанию сюда не должны попасть
				Прогресс.Процент = 60;
			КонецЕсли;
			Прогресс.Текст = НСтр("ru='Завершение подготовки архива...'");
			ВыполнитьОбработкуОповещения(ОповещениеОПрогрессеВыполнения, РезультатПрогресса);
		КонецЕсли;
		
		// Удаляем временные файлы на клиенте.
		Оповещение = Новый ОписаниеОповещения(
			"ПодготовитьТранзакциюЗавершениеПослеУдаленияФайлов",
			ЭтотОбъект,
			ДополнительныеПараметры,
			"ПодготовитьТранзакциюОшибкаУдаленияФайлов",
			ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ДополнительныеПараметры.ИмяКаталогаВременныхФайлов);
			
	Иначе
		// Обработаны все вложения.
		Если ОповещениеОПрогрессеВыполнения <> Неопределено Тогда
			РезультатПрогресса = ПараметрыОповещенияПрогресса(ОповещениеОПрогрессеВыполнения);
			Прогресс = РезультатПрогресса.Прогресс;
			Прогресс.Процент = 95;
			Прогресс.Текст = НСтр("ru='Завершение подготовки транзакций...'");
			ВыполнитьОбработкуОповещения(ОповещениеОПрогрессеВыполнения, РезультатПрогресса);
		КонецЕсли;
		
		Результат = РезультатПодготовитьТранзакцию();
		Результат.Выполнено = Истина;
		Результат.Вложения = ДополнительныеПараметры.Вложения;
		Результат.Получатели = ДополнительныеПараметры.Получатели;
		
		ПодготовитьТранзакциюЗавершение(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюВыполнитьОперациюЦикл(ДополнительныеПараметры) Экспорт
	
	Вложение = ДополнительныеПараметры.Вложения.Получить(ДополнительныеПараметры.ИндексТекущегоВложения);
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	Сервис = ДополнительныеПараметры.Сервис;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодготовитьТранзакциюПослеПолученияСертификатовПолучателейЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьСертификатыБанковПолучателей(Оповещение,
		Сервис,
		Вложение.БанкиПолучатели,
		КэшСертификатов,
		ИмяКаталогаВременныхФайлов);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеПолученияСертификатовПолучателейЦикл(РезультатПоискаСертификатов, ДополнительныеПараметры) Экспорт
	
	Вложение = ДополнительныеПараметры.Вложения.Получить(ДополнительныеПараметры.ИндексТекущегоВложения);
	Операция = Вложение.Операции[0];
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	СертификатПодписи = ДополнительныеПараметры.СертификатПодписи;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	ЭтоОблачныйСертификат = ДополнительныеПараметры.ЭтоОблачныйСертификат;
	
	ИмяФайлаАрхиваСДанными = ИмяКаталогаВременныхФайлов
			+ ИмяФайлаВложенияВоВременнойПапке(Вложение)
			+ УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаАрхива();
	
	Если Операция = "Подписать" Тогда
		// подписываем данные
		Данные = ИмяКаталогаВременныхФайлов + ИмяФайлаВложенияВоВременнойПапке(Вложение);
		
		ПараметрыПодписи = ПараметрыПодписать();

		Если ДополнительныеПараметры.ФормироватьОтветноеСообщениеБанка Тогда // для тестирования
			// Подписываем сертификатом банка.
			ПараметрыПодписи.Сертификат = РезультатПоискаСертификатов.Сертификаты[0];
		Иначе
			ПараметрыПодписи.Сертификат = СертификатПодписи;
		КонецЕсли;
		ПараметрыПодписи.Данные = Данные;
		ПараметрыПодписи.МенеджерКриптографии = МенеджерКриптографии;
		ПараметрыПодписи.ЭтоОблачныйСертификат = ЭтоОблачныйСертификат;
		
		Оповещение = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеПодписыванияЦикл",
				ЭтотОбъект,
				ДополнительныеПараметры);
		Подписать(Оповещение, ПараметрыПодписи);
	ИначеЕсли Операция = "Зашифровать" Тогда
		// Шифрование.
		Если НЕ РезультатПоискаСертификатов.Выполнено Тогда
			// Не найдены сертификаты
			Результат = РезультатПодготовитьТранзакцию();
			Если РезультатПоискаСертификатов.БанкиБезСертификата.Количество() > 1 Тогда
				СписокБанков = СтрСоединить(РезультатПоискаСертификатов.БанкиБезСертификата, ", ");
				ТекстОшибки = НСтр("ru='Не найдены сертификаты банков: %1.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, СписокБанков);
			Иначе
				ТекстОшибки = НСтр("ru='Не найден сертификат банка %1.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатПоискаСертификатов.БанкиБезСертификата[0]);
			КонецЕсли;
			Результат.ОписаниеОшибки = ТекстОшибки;
			ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
			Возврат;
		КонецЕсли;

		Если ДополнительныеПараметры.ФормироватьОтветноеСообщениеБанка Тогда // для тестирования
			// шифруем на сертификат пользователя
			СертификатыШифрования = Новый Массив;
			СертификатыШифрования.Добавить(СертификатПодписи);
		Иначе
			СертификатыШифрования = РезультатПоискаСертификатов.Сертификаты;
		КонецЕсли;
		ПараметрыШифрования = Новый Структура;
		ПараметрыШифрования.Вставить("Сертификаты", СертификатыШифрования);
		Если Вложение.Сжать Тогда
			Данные = ИмяФайлаАрхиваСДанными;
		Иначе
			Данные = ИмяКаталогаВременныхФайлов
				+ ИмяФайлаВложенияВоВременнойПапке(Вложение);
		КонецЕсли;
		ПараметрыШифрования.Вставить("Данные", Данные);
		ПараметрыШифрования.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеШифрованияЦикл",
				ЭтотОбъект,
				ДополнительныеПараметры);
		Зашифровать(Оповещение, ПараметрыШифрования);
	КонецЕсли;
	
	// Удаляем операцию.
	Вложение.Операции.Удалить(0);
	
КонецПроцедуры

// После подписи локальным криптопровайдером.
Процедура ПодготовитьТранзакциюПослеПодписыванияЦикл(РезультатПодписывания, ДополнительныеПараметры) Экспорт
	
	Вложение = ДополнительныеПараметры.Вложения.Получить(ДополнительныеПараметры.ИндексТекущегоВложения);
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Операции = Вложение.Операции;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИдентификаторВременногоХранилища = ДополнительныеПараметры.ИдентификаторВременногоХранилища;
	ТекущийИдентификаторАрхива = ?(ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено,
		"", ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов[0]);

	Результат = РезультатПодготовитьТранзакцию();
	
	Если РезультатПодписывания.ОтмененоПользователем Тогда
		// Нажата кнопка Отмена при вводе пароля.
		ТекстОшибки = НСтр("ru='Пользователь отменил формирование транзакции.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		Результат.ПользовательОтменилПодготовкуТранзакции = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатПодписывания.ПодписьВыполнена Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Произошла ошибка при подписывании файла.
                                         |%1'"), РезультатПодписывания.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Подписывание данных транзакции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.МенеджерКриптографии = РезультатПодписывания.МенеджерКриптографии;
	
	РезультатОбновления = УниверсальныйОбменСБанкамиВызовСервера.
		ОбновитьДанныеРесурсаВЖурналеОперацийСФайлами(
			ИдентификаторВременногоХранилища,
			Вложение.ИсходноеИмяФайла,
			ТекущийИдентификаторАрхива,
			"Подпись",
			РезультатПодписывания.ПодписанныеДанные);
			
	Если НЕ РезультатОбновления.Выполнено Тогда
		ОписаниеОшибкиШаблон = НСтр("ru = 'Произошла ошибка при помещении данных подписи в БД.
			|%1");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, РезультатОбновления.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Помещение данных в БД'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Если Операции.Количество() > 0 Тогда
		ПодготовитьТранзакциюВыполнитьОперациюЦикл(ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.ИндексТекущегоВложения = ДополнительныеПараметры.ИндексТекущегоВложения + 1;
		ПодготовитьТранзакциюОбработатьВложенияЦикл(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюПослеШифрованияЦикл(РезультатШифрования, ДополнительныеПараметры) Экспорт
	
	Вложение = ДополнительныеПараметры.Вложения.Получить(ДополнительныеПараметры.ИндексТекущегоВложения);
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Операции = Вложение.Операции;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИдентификаторВременногоХранилища = ДополнительныеПараметры.ИдентификаторВременногоХранилища;
	ТекущийИдентификаторАрхива = ?(ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено,
		"", ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов[0]);
	
	Если НЕ РезультатШифрования.Выполнено Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Произошла ошибка при шифровании файла.
                                         |%1'"), РезультатШифрования.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Шифрование данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.МенеджерКриптографии = РезультатШифрования.МенеджерКриптографии;
	
	РезультатОбновления = УниверсальныйОбменСБанкамиВызовСервера.
		ОбновитьДанныеРесурсаВЖурналеОперацийСФайлами(
			ИдентификаторВременногоХранилища,
			Вложение.ИсходноеИмяФайла,
			ТекущийИдентификаторАрхива,
			"Результат",
			РезультатШифрования.ЗашифрованныеДанные);
			
	Если НЕ РезультатОбновления.Выполнено Тогда
		ОписаниеОшибкиШаблон = НСтр("ru = 'Произошла ошибка при помещении зашифрованных данных в БД.
			|%1");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, Результат.ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Шифрование данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат = РезультатПодготовитьТранзакцию();
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Если Операции.Количество() > 0 Тогда
		ПодготовитьТранзакциюВыполнитьОперациюЦикл(ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.ИндексТекущегоВложения = ДополнительныеПараметры.ИндексТекущегоВложения + 1;
		ПодготовитьТранзакциюОбработатьВложенияЦикл(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюЗавершение(Результат, ДополнительныеПараметры, УдалятьФайлы = Истина)
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.МенеджерКриптографии = Неопределено;
	
	Если УдалятьФайлы Тогда
		// Удаляем временные файлы на клиенте.
		Оповещение = Новый ОписаниеОповещения(
			"ПодготовитьТранзакциюЗавершениеПослеУдаленияФайлов",
			ЭтотОбъект,
			ДополнительныеПараметры,
			"ПодготовитьТранзакциюОшибкаУдаленияФайлов",
			ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ИмяКаталогаВременныхФайлов);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюЗавершениеПослеУдаленияФайлов(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено Тогда
		// Операции по созданию транзакции завершены.
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, ДополнительныеПараметры.Результат);
		Возврат;
		
	КонецЕсли;
		
	// Необходимо перейти к следующей итерации.
	ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов.Удалить(0);
	Если ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов.Количество() = 0 Тогда
		// Все файлы для создания архивов подготовлены. Создаем сами архивы.
		РезультатПодготовки = УниверсальныйОбменСБанкамиВызовСервера.ПодготовитьАрхивыВЖурналеОперацийСФайлами(
			ДополнительныеПараметры.ИдентификаторВременногоХранилища,
			ПараметрыОповещенияПрогресса(ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения));
		ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено;
		
		Если Не РезультатПодготовки.Выполнено Тогда
			
			ДополнительныеПараметры.МенеджерКриптографии = Неопределено;
			
			Результат = РезультатПодготовитьТранзакцию();
			Результат.Выполнено      = Ложь;
			Результат.ОписаниеОшибки = РезультатПодготовки.ОписаниеОшибки;
			Результат.Вложения       = ДополнительныеПараметры.Вложения;
			Результат.Получатели     = ДополнительныеПараметры.Получатели;
			ДополнительныеПараметры.Вставить("Результат", Результат);
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбратногоВызова, ДополнительныеПараметры.Результат);
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	ДополнительныеПараметры.Вложения.Очистить();
	ДополнительныеПараметры.ИндексТекущегоВложения = 0;
	ОповещениеОбратногоВызова = Новый ОписаниеОповещения("ПодготовитьТранзакциюПослеПолученияФайлов", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьВременныеФайлыТранзакции(
		ОповещениеОбратногоВызова,
		ДополнительныеПараметры.Сервис,
		ДополнительныеПараметры.ИдентификаторВременногоХранилища,
		ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения,
		,
		ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов);
	
КонецПроцедуры

Процедура ПодготовитьТранзакциюОшибкаУдаленияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Произошла ошибка при удалении файлов.
                                     |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Завершение подготовки транзакции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Результат = ДополнительныеПараметры.Результат;
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

Процедура ОтправитьТранзакцииВБанк(ОповещениеОбратногоВызова, Сервис, Транзакции) Экспорт
	
	Результат = УниверсальныйОбменСБанкамиВызовСервера.ОтправитьТранзакцииВБанк(Сервис, Транзакции);
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Процедура ВводПароляДоступаКЗакрытомуКлючуПриРасшифровке(ОповещениеОбратногоВызова, ОтпечатокСертификата, ФормаВладелец) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ПараметрыФормы.Вставить("ВозможностьВыбораСертификата", Ложь);
	ПараметрыФормы.Вставить("ТекстПодсказкиПоСертификату", "Сертификат был определен на основании анализа контейнера с зашифрованными данными.");
	
	Оповещение = Новый ОписаниеОповещения("ВводПароляДоступаКЗакрытомуКлючуПослеВводаПараметровКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Если ФормаВладелец <> Неопределено Тогда
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Иначе
		РежимОткрытия = Неопределено;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ВводПараметровКриптографииОбменаСБанками", 
		ПараметрыФормы,
		ФормаВладелец,
		,
		,
		,
		Оповещение,
		РежимОткрытия);
	
КонецПроцедуры

Процедура ВводПароляДоступаКЗакрытомуКлючуПослеВводаПараметровКриптографии(РезультатВводаПароля, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Результат = РезультатВводПароляДоступаКЗакрытомуКлючу();
	
	Если РезультатВводаПароля = Неопределено Тогда
		// Нажата кнопка Отмена.
		Результат.ОтмененоПользователем = Истина;
		ТекстОшибки = НСтр("ru='Пользователь отменил ввод пароля доступа к закрытому ключу.'");
		Результат.ОписаниеОшибки = ТекстОшибки;
		ЗаписатьСобытиеВЖурнал(ТекстОшибки,
			НСтр("ru = 'Ввод пароля доступа к закрытому ключу'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			"Предупреждение");
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#Область ПодготовитьРасширениеДляРаботыСФайлами

Процедура ПодготовитьРасширениеДляРаботыСФайлами(ОповещениеОбратногоВызова) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	
	// Расширение требуется для получения каталога временных файлов и работы с файлами
	Оповещение = Новый ОписаниеОповещения(
		"ПодготовитьРасширениеДляРаботыСФайламиПослеПодключения",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура ПодготовитьРасширениеДляРаботыСФайламиПослеПодключения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ПодготовитьРасширениеДляРаботыСФайламиПослеПовторногоПодключенияЗавершение(Истина, ДополнительныеПараметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПодготовитьРасширениеДляРаботыСФайламиПослеУстановки",
			ЭтотОбъект,
			ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьРасширениеДляРаботыСФайламиПослеУстановки(ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодготовитьРасширениеДляРаботыСФайламиПослеПовторногоПодключенияЗавершение", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура ПодготовитьРасширениеДляРаботыСФайламиПослеПовторногоПодключенияЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	Иначе
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = НСтр("ru='Не удалось подключить расширение для работы с файлами.'");
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьФайл

Процедура ОткрытьФайл(ПолноеИмяФайлаИлиАдрес, ИмяФайла, ВыводитьСообщения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайлаИлиАдрес", ПолноеИмяФайлаИлиАдрес);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ВозможноПродолжениеБезУстановки = ЭтоАдресВоВременномХранилище(ПолноеИмяФайлаИлиАдрес);
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ОткрытьФайлПослеПодключенияРасширенияРаботыСФайлами", ДополнительныеПараметры, ВозможноПродолжениеБезУстановки);
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Если ЭтоАдресВоВременномХранилище(ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ОткрытьФайлПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, ДополнительныеПараметры);
			НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
		Иначе
			ОткрытьФайлЗапуститьПриложение(ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Если ЭтоАдресВоВременномХранилище(ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес) Тогда
			ПолучитьФайл(ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес, ДополнительныеПараметры.ИмяФайла, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФайлПослеПолученияФайлов", ЭтотОбъект, ДополнительныеПараметры,
		, ЭтотОбъект);
		
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеПередаваемогоФайла.Хранение = ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес;
	
	GUID = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяФайла) Тогда
		
		ИмяПревышает260 = СтрДлина(ИмяКаталогаВременныхФайлов + ДополнительныеПараметры.ИмяФайла) > 260;
		Если ИмяПревышает260 Тогда
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДополнительныеПараметры.ИмяФайла);
			ОписаниеПередаваемогоФайла.Имя = GUID + "." + РасширениеБезТочки;
		Иначе
			ОписаниеПередаваемогоФайла.Имя = ДополнительныеПараметры.ИмяФайла;
		КонецЕсли;
	Иначе
		ОписаниеПередаваемогоФайла.Имя = GUID;
	КонецЕсли;
		
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);
	
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ИмяКаталогаВременныхФайлов, Ложь);
	
КонецПроцедуры

Процедура ОткрытьФайлПослеПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		ОткрытьФайлЗапуститьПриложение(ПолученныеФайлы[0].Имя, ДополнительныеПараметры);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл.'");
		УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайлЗапуститьПриложение(ПолноеИмяФайла, ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФайлПослеЗапускаПриложения", ЭтотОбъект, ДополнительныеПараметры,
		"ОткрытьФайлПриОшибкеЗапускаПриложения", ЭтотОбъект);
	ЗапуститьПриложениеНаКлиенте(Оповещение, ПолноеИмяФайла, "", Ложь, Истина);
	
КонецПроцедуры

Процедура ОткрытьФайлПослеЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("КодВозврата", КодВозврата);

КонецПроцедуры

Процедура ОткрытьФайлПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось открыть файл %1.
                                     |%2'"),
						ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ДополнительныеПараметры.ПолноеИмяФайлаИлиАдрес);
	УниверсальныйОбменСБанкамиКлиентСервер.ВывестиОшибку(ОписаниеОшибки);

КонецПроцедуры

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

Процедура ЗапуститьПриложениеНаКлиенте(ОповещениеОЗавершении, СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокаКоманды", СтрокаКоманды);
	ДополнительныеПараметры.Вставить("ТекущийКаталог", ТекущийКаталог);
	ДополнительныеПараметры.Вставить("ДождатьсяЗавершения", ДождатьсяЗавершения);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(
		"ЗапуститьПриложениеНаКлиентеПослеПодключенияРасширенияРаботыСФайлами", ДополнительныеПараметры, Ложь);
	
КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект, ДополнительныеПараметры,
			"ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(
			Оповещение, ДополнительныеПараметры.СтрокаКоманды, 
			ДополнительныеПараметры.ТекущийКаталог, ДополнительныеПараметры.ДождатьсяЗавершения);
	Иначе
		Результат = РезультатЗапуститьПриложениеНаКлиенте();
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось запустить приложение,
                               |т.к. расширение для работы с файлами не подключено.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатЗапуститьПриложениеНаКлиенте();
	Результат.Выполнено = Истина;
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		Результат);

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось открыть файл %1.
                                     |%2'"),
						ДополнительныеПараметры.СтрокаКоманды,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
		НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				
	Результат = РезультатЗапуститьПриложениеНаКлиенте();
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ДополнительныеПараметры.СтрокаКоманды);
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		Результат);

КонецПроцедуры

#КонецОбласти

#Область ПоказатьОшибку

Процедура ПоказатьОшибкуПослеВыбораТранзакции(ЭлементСпискаИлиТранзакция, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСпискаИлиТранзакция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСпискаИлиТранзакция) = Тип("СправочникСсылка.ТранзакцииОбменаСБанками") Тогда
		Транзакция = ЭлементСпискаИлиТранзакция;
	Иначе
		Транзакция = ЭлементСпискаИлиТранзакция.Значение;
	КонецЕсли;
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипыДокументовОбменаСБанками.ОписаниеОшибок"));
	
	// Определяем протокол по предмету.
	РезультатПолученияПротокола = УниверсальныйОбменСБанкамиВызовСервера.
		ПротоколОбработкиОтчетностиБанком(Транзакция,
			ТипыДокументов);
	
	ДополнительныеПараметры.РезультатПолученияПротокола = РезультатПолученияПротокола;
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		Если РезультатПолученияПротокола.ДанныеНеРасшифрованы Тогда
			Оповещение = Новый ОписаниеОповещения("ПоказатьОшибкуПослеВопросаОРасшифровке",
				ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, НСтр("ru='Данные сообщения не расшифрованы. Расшифровать?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПоказатьОшибкуЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПоказатьОшибкуПослеВопросаОРасшифровке(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПолученияПротокола = ДополнительныеПараметры.РезультатПолученияПротокола;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьОшибкуПослеРасшифровки",
		ЭтотОбъект,
		ДополнительныеПараметры);
	РасшифроватьДанныеТранзакции(Оповещение,
		РезультатПолученияПротокола.Транзакция, ,
		ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ПоказатьОшибкуПослеРасшифровки(РезультатРасшифровки, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатРасшифровки.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОшибкуЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПоказатьОшибкуЗавершение(ДополнительныеПараметры) Экспорт
	
	РезультатПолученияПротокола = ДополнительныеПараметры.РезультатПолученияПротокола;
	ЗаголовокПредмета = ДополнительныеПараметры.ЗаголовокПредмета;
	ПоказыватьГиперссылкуЭтаповОтправки = ДополнительныеПараметры.ПоказыватьГиперссылкуЭтаповОтправки;
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовОбменаСБанками.ОписаниеОшибок"));
	Если РезультатПолученияПротокола.ДанныеНеРасшифрованы Тогда
		РезультатПолученияПротокола = УниверсальныйОбменСБанкамиВызовСервера.
			ПротоколОбработкиОтчетностиБанком(РезультатПолученияПротокола.Транзакция,
				ТипыДокументов);
		Если НЕ РезультатПолученияПротокола.Выполнено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"РезультатПолученияПротокола, ЗаголовокПредмета, ПоказыватьГиперссылкуЭтаповОтправки",
		РезультатПолученияПротокола,
		ЗаголовокПредмета,
		ПоказыватьГиперссылкуЭтаповОтправки);
	
	ИмяФормы = "ОбщаяФорма.ПротоколОшибкиОбменаСБанками";
	
	ОткрытьФорму(
		ИмяФормы,
		ПараметрыФормы,
		ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.УникальныйИдентификатор,
		, , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СоздатьСертификатыБанков

Функция ИмяФайлаСертификатаБанка(ДанныеСертификата)
	
	Возврат ДанныеСертификата.БанкИдентификатор + ".cert";
	
КонецФункции

Процедура СоздатьСертификатыБанков(ОповещениеОбратногоВызова, ДанныеБанков, КаталогВременныхФайлов)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("СертификатыБанков", Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ДанныеБанков", ДанныеБанков);
	ДополнительныеПараметры.Вставить("ИндексТекущегоБанка", 0);
	ДополнительныеПараметры.Вставить("СертификатыБанков", Новый Соответствие);
	ДополнительныеПараметры.Вставить("КаталогВременныхФайлов", КаталогВременныхФайлов);
	ДополнительныеПараметры.Вставить("ИмяФайлаСертификата", "");
	
	СоздатьСертификатыБанковЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СоздатьСертификатыБанковЦикл(ДополнительныеПараметры) Экспорт
	
	ИндексТекущегоБанка = ДополнительныеПараметры.ИндексТекущегоБанка;
	ДанныеБанков = ДополнительныеПараметры.ДанныеБанков;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	СертификатыБанков = ДополнительныеПараметры.СертификатыБанков;
	КаталогВременныхФайлов = ДополнительныеПараметры.КаталогВременныхФайлов;
	
	Если ИндексТекущегоБанка = ДанныеБанков.Количество() Тогда
		
		// Завершили создание сертификатов.
		Результат = ДополнительныеПараметры.Результат;
		Результат.Выполнено = Истина;
		Результат.СертификатыБанков = СертификатыБанков;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
		
	КонецЕсли;
	
	ДанныеБанка = ДанныеБанков[ИндексТекущегоБанка];
	
	Сертификат = Новый СертификатКриптографии;
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьСертификатыБанковЦиклПослеИнициализацииСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	Сертификат.НачатьИнициализацию(Оповещение, КаталогВременныхФайлов + ИмяФайлаСертификатаБанка(ДанныеБанка));
	
КонецПроцедуры

Процедура СоздатьСертификатыБанковЦиклПослеИнициализацииСертификата(Сертификат, ДополнительныеПараметры) Экспорт
	
	ДанныеБанков = ДополнительныеПараметры.ДанныеБанков;
	
	ДанныеБанка = ДанныеБанков[ДополнительныеПараметры.ИндексТекущегоБанка];
	ДополнительныеПараметры.СертификатыБанков.Вставить(ДанныеБанка.Банк, Сертификат);
	ДополнительныеПараметры.ИндексТекущегоБанка = ДополнительныеПараметры.ИндексТекущегоБанка + 1;
	СоздатьСертификатыБанковЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСертификатыБанковПолучателей

Процедура ПолучитьСертификатыБанковПолучателей(ОповещениеОбратногоВызова, Сервис, Банки, КэшСертификатов, КаталогВременныхФайлов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сертификаты", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("БанкиБезСертификата", Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ДанныеБанков", Неопределено);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("КэшСертификатов", КэшСертификатов);
	ДополнительныеПараметры.Вставить("Банки", Банки);
	
	БанкиБезСертификата = Новый Массив;
	СертификатыБанков = Новый Массив;
	
	// ищем сертификты в кэше
	Для каждого Банк Из Банки Цикл
		Сертификат = КэшСертификатов.Получить(Банк);
		Если Сертификат = Неопределено Тогда
			БанкиБезСертификата.Добавить(Банк);
		Иначе
			СертификатыБанков.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	Если БанкиБезСертификата.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Результат.Сертификаты = СертификатыБанков;
		Результат.БанкиБезСертификата = БанкиБезСертификата;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеБанков = УниверсальныйОбменСБанкамиВызовСервера.СертификатШифрованияБанков(Сервис, БанкиБезСертификата);
	ДополнительныеПараметры.ДанныеБанков = ДанныеБанков;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыБанковПолучателейПослеСозданияСертификатов",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СоздатьСертификатыБанков(Оповещение, ДанныеБанков, КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ПолучитьСертификатыБанковПолучателейПослеСозданияСертификатов(РезультатСоздания, ДополнительныеПараметры) Экспорт
	
	ДанныеБанков = ДополнительныеПараметры.ДанныеБанков;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	КэшСертификатов = ДополнительныеПараметры.КэшСертификатов;
	Банки = ДополнительныеПараметры.Банки;
	
	Результат = ДополнительныеПараметры.Результат;
	
	Если НЕ РезультатСоздания.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатСоздания.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	СозданныеСертификаты = РезультатСоздания.СертификатыБанков;
	
	СертификатыБанков = Новый Массив;
	БанкиБезСертификата = Новый Массив;
	
	// Обновляем кэш.
	Для каждого ДанныеБанка Из ДанныеБанков Цикл
		Сертификат = СозданныеСертификаты.Получить(ДанныеБанка.Банк);
		КэшСертификатов.Вставить(ДанныеБанка.Банк, Сертификат);
	КонецЦикла;
	
	// Повторно ищем сертификаты в кэше.
	БанкиБезСертификата.Очистить();
	Для каждого Банк Из Банки Цикл
		Сертификат = КэшСертификатов.Получить(Банк);
		Если Сертификат = Неопределено Тогда
			БанкиБезСертификата.Добавить(Банк);
		Иначе
			СертификатыБанков.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	Если БанкиБезСертификата.Количество() > 0 Тогда
		// Сертификаты отсутствуют в БД, возвращаем ошибку.
		Результат.Сертификаты = СертификатыБанков;
		Результат.БанкиБезСертификата = БанкиБезСертификата;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Результат.Сертификаты = СертификатыБанков;
	Результат.Выполнено = Истина;
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

// Попытка изменения типа криптопровайдера в случае неправильной установки сертификата.
// При подмене тип криптопровайдера меняется, а алгоритмы остаются прежними, в соответствии с данными сертификата.
// В структуре ДополнительныеПараметры должны быть свойства СвойстваПрограммыКриптографии, 
// ПопыткаПослеПодменыАлгоритмов, МенеджерКриптографии.
Функция ПодменаТипаКриптопровайдераВСлучаеНеобходимости(Знач ОписаниеОшибки, ДополнительныеПараметры, Знач ИмяФункцииОповещения, МенеджерКриптографии)
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненаПодменаТипаКриптопровайдера", Ложь);
	
	Если Найти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		// Нарушение стандарта № 499 пункт 3.2
		// Делаем подмену типа криптопровайдера в случе неправильной установки сертификата.
		
		// Запоминаем нужные алгоритмы.
		Алгоритмы = Новый Структура("АлгоритмПодписи, АлгоритмШифрования, АлгоритмХеширования");
		Алгоритмы.АлгоритмПодписи = МенеджерКриптографии.АлгоритмПодписи;
		Алгоритмы.АлгоритмШифрования = МенеджерКриптографии.АлгоритмШифрования;
		Алгоритмы.АлгоритмХеширования = МенеджерКриптографии.АлгоритмХеширования;
		
		// Определяем имя криптопровайдера.
		Подстрока = "Сертификат связан с модулем криптографии """;
		ПозицияНачало = Найти(ОписаниеОшибки, Подстрока) + СтрДлина(Подстрока);
		Подстрока = """ с типом ";
		ПозицияКонец = Найти(ОписаниеОшибки, Подстрока);
		Имя = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		// Определяем тип криптопровайдера.
		ПозицияНачало = Найти(ОписаниеОшибки, Подстрока)+ СтрДлина(Подстрока); 
		ПозицияКонец = СтрДлина(ОписаниеОшибки);
		Тип = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		Тип = Число(Тип);
		
		НеизвестныйКриптопровайдер = Ложь;
		ТребуетсяДругойКриптопровайдер = Ложь;
		
		Если Найти(Имя, "Infotecs") > 0 Тогда
			Свойства = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерViPNet();
		ИначеЕсли Найти(Имя, "Crypto-Pro") > 0 Тогда
			Свойства = УниверсальныйОбменСБанкамиКлиентСервер.КриптопровайдерCryptoPro();
		Иначе
			НеизвестныйКриптопровайдер = Истина;
		КонецЕсли;
		
		Если Свойства.ТипКриптопровайдера <> ДополнительныеПараметры.СвойстваПрограммыКриптографии.ТипКриптопровайдера Тогда
			ТребуетсяДругойКриптопровайдер = Истина;
		КонецЕсли;
		
		Если НеизвестныйКриптопровайдер
			ИЛИ ТребуетсяДругойКриптопровайдер
			ИЛИ ДополнительныеПараметры.ПопыткаПослеПодменыАлгоритмов Тогда
			Возврат Результат;
		КонецЕсли;
		
		ДополнительныеПараметры.ПопыткаПослеПодменыАлгоритмов = Истина;
		
		// Подменяем тип криптопровайдера.
		СвойстваПрограммыКриптографии = Новый Структура(Свойства);
		СвойстваПрограммыКриптографии.Тип = Тип;
		СвойстваПрограммыКриптографии.Имя = Имя;
		
		СвойстваПрограммыКриптографии = Новый ФиксированнаяСтруктура(СвойстваПрограммыКриптографии);
		
		// Переходим к функции создания менеджера криптографии с возвратом в заданную функцию.
		Оповещение = Новый ОписаниеОповещения(ИмяФункцииОповещения, ЭтотОбъект, ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии, Алгоритмы);
		Результат.ВыполненаПодменаТипаКриптопровайдера = Истина;
		
		ТекстСобытия = СтрШаблон(НСтр("ru = 'Выполнена подмена типа криптопровайдера.
                                       |%1'"), ОписаниеОшибки);
		ЗаписатьСобытиеВЖурнал(ТекстСобытия,
			НСтр("ru = 'Подмена криптопровайдера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			"Предупреждение");
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак доступности работы с объектами ЧтениеZIPФайла и ЗаписьZIPФайла из клиентского контекста.
//
// Возвращаемое значение:
//	Булево - Истина, если работа с объектами ZIP доступна.
//
Функция ДоступнаРаботаСZIPАрхивом() Экспорт

#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВнешнееСоединение Тогда
	Возврат Истина;
#Иначе
	Возврат Ложь;
#КонецЕсли

КонецФункции

Функция РезультатПолучитьВременныеФайлыТранзакции()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Вложения", Неопределено);
	Результат.Вставить("ПомещаемыеФайлы", Неопределено);
	Результат.Вставить("ИмяКаталогаВременныхФайлов", "");
	Результат.Вставить("Получатели", Неопределено);
	Возврат Результат;
	
КонецФункции

#Область СкачатьФайлыССервера

Процедура СкачатьФайлыССервера(ОповещениеОбратногоВызова,
									ПолучаемыеФайлы,
									КаталогВременныхФайлов,
									ИсходныеИменаФайлов,
									ОповещениеОПрогрессеВыполнения = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ПолучаемыеФайлы", ПолучаемыеФайлы);
	ДополнительныеПараметры.Вставить("КаталогВременныхФайлов", КаталогВременныхФайлов);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ИсходныеИменаФайлов", ИсходныеИменаФайлов);
	ДополнительныеПараметры.Вставить("ИндексТекущегоФайла", 0);
	ДополнительныеПараметры.Вставить("ОповещениеОПрогрессеВыполнения", ОповещениеОПрогрессеВыполнения);
	
	СкачатьФайлыССервераЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СкачатьФайлыССервераЦикл(ДополнительныеПараметры)
	
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ПолучаемыеФайлы = ДополнительныеПараметры.ПолучаемыеФайлы;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	КаталогВременныхФайлов = ДополнительныеПараметры.КаталогВременныхФайлов;
	ИсходныеИменаФайлов = ДополнительныеПараметры.ИсходныеИменаФайлов;
	
	КоличествоФайлов = ПолучаемыеФайлы.Количество();
	
	Если ИндексТекущегоФайла = ПолучаемыеФайлы.Количество() Тогда
		Результат.Выполнено = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ПолучаемыеФайлы[ИндексТекущегоФайла];
	ТекущиеПолучаемыеФайлы = Новый Массив;
	ТекущиеПолучаемыеФайлы.Добавить(ТекущийФайл);
	
	ОповещениеОПрогрессеВыполнения  = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	Если ОповещениеОПрогрессеВыполнения <> Неопределено Тогда
		РезультатПрогресса = ПараметрыОповещенияПрогресса(ОповещениеОПрогрессеВыполнения);
		Прогресс = РезультатПрогресса.Прогресс;
		Если ЗначениеЗаполнено(ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры)
			И ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры.Свойство("НомерСоздаваемогоАрхива") Тогда
			// Нужно учесть предвательный этап создания архивов.
			ПараметрыПрогресса = ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры;
			Если ПараметрыПрогресса.НомерСоздаваемогоАрхива > ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов Тогда
				// Это сводная обработка, которой предшествовало создание архивов.
				// Прошла предварительная обработка, которая длилась 61% всего процесса отправки транзакции.
				// Сейчас идет первый из трех шагов финальной обработки, занимающий 30% от оставшихся 39%.
				Прогресс.Процент = Окр(61 + 0.39 * 30 * ИндексТекущегоФайла / КоличествоФайлов) + 1;

			Иначе
				// Это предварительная обработка, в результате которой будет создан архив.
				// Преварительная обработка занимает 61% всего прогресса. Она поделена на прогрессы отдельных архивов.
				// Сейчас идет первый из трех шагов, занимающий 30% от прогресса текущего архива.
				ДоляПрогрессаСозданныхАрхивов = (ПараметрыПрогресса.НомерСоздаваемогоАрхива - 1) / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				ДоляПрогрессаСоздаваемогоАрхива = 0.3 * ИндексТекущегоФайла / КоличествоФайлов / ПараметрыПрогресса.КоличествоСоздаваемыхАрхивов;
				Прогресс.Процент = Окр(61 * (ДоляПрогрессаСозданныхАрхивов + ДоляПрогрессаСоздаваемогоАрхива)) + 1;

			КонецЕсли;
		Иначе
			// Предварительной обработки для создания архивов не требовалось.
			// Идет первый из трех шагов обработки файлов, занимающий 30% от всего времени прогресса.
			Прогресс.Процент = Окр(30 * ИндексТекущегоФайла / КоличествоФайлов) + 1;
		КонецЕсли;
		Текст = НСтр("ru='Получение файлов...'");
		Прогресс.Текст = Текст;
		ВыполнитьОбработкуОповещения(ОповещениеОПрогрессеВыполнения, РезультатПрогресса);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СкачатьФайлыССервераЦиклПослеПолученияФайла",
			ЭтотОбъект,
			ДополнительныеПараметры);
	НачатьПолучениеФайлов(Оповещение, ТекущиеПолучаемыеФайлы, КаталогВременныхФайлов, Ложь);
	
КонецПроцедуры

Процедура СкачатьФайлыССервераЦиклПослеПолученияФайла(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	ИсходныеИменаФайлов = ДополнительныеПараметры.ИсходныеИменаФайлов;
	ИндексТекущегоФайла = ДополнительныеПараметры.ИндексТекущегоФайла;
	ПолучаемыеФайлы = ДополнительныеПараметры.ПолучаемыеФайлы;
	ТекущийФайл = ПолучаемыеФайлы[ИндексТекущегоФайла];
	
	Если ПолученныеФайлы = Неопределено Тогда
		Шаблон = НСтр("ru='При передаче файла ""%1"" на клиент произошла ошибка. Исходное имя файла ""%2"".'");
		ОписаниеОшибки = СтрШаблон(Шаблон, ТекущийФайл.Имя, ИсходныеИменаФайлов.Получить(ТекущийФайл.Имя));
		ЗаписатьСобытиеВЖурнал(ОписаниеОшибки,
			НСтр("ru = 'Передача файлов с сервера на клиент'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ИндексТекущегоФайла = ИндексТекущегоФайла + 1;
	ДополнительныеПараметры.ИндексТекущегоФайла = ИндексТекущегоФайла;
	
	СкачатьФайлыССервераЦикл(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти 

#Область ПолучитьВременныеФайлыТранзакции

Процедура ПолучитьВременныеФайлыТранзакции(
		ОповещениеОбратногоВызова,
		Сервис,
		Идентификатор,
		ОповещениеОПрогрессеВыполнения = Неопределено,
		РежимРасшифровки = Ложь,
		ИдентификаторыСоздаваемыхАрхивов = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сервис", Сервис);
	ДополнительныеПараметры.Вставить("Идентификатор", Идентификатор);
	ДополнительныеПараметры.Вставить("РежимРасшифровки", РежимРасшифровки);
	ДополнительныеПараметры.Вставить("Вложения", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", "");
	ДополнительныеПараметры.Вставить("ИмяПодкаталогаВКаталогеВременныхФайлов", Строка(Новый УникальныйИдентификатор));
	ДополнительныеПараметры.Вставить("ПолучаемыеФайлы", Новый Массив);
	ДополнительныеПараметры.Вставить("ПомещаемыеФайлы", Новый Массив);
	ДополнительныеПараметры.Вставить("Получатели", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеОПрогрессеВыполнения", ОповещениеОПрогрессеВыполнения);
	ДополнительныеПараметры.Вставить("ИсходныеИменаФайлов", Новый Соответствие);
	ДополнительныеПараметры.Вставить("АдресаСертификатовБанков", Новый Массив);
	ДополнительныеПараметры.Вставить("ИдентификаторыСоздаваемыхАрхивов", ИдентификаторыСоздаваемыхАрхивов);
	
	// Расширение требуется для получения каталога временных файлов и работы с файлами
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьВременныеФайлыТранзакцииПослеПодготовкиРасширенияДляРаботыСФайлами",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПодготовитьРасширениеДляРаботыСФайлами(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииПослеПодготовкиРасширенияДляРаботыСФайлами(РезультатПодготовки, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если НЕ РезультатПодготовки.Выполнено Тогда
		Результат = РезультатПолучитьВременныеФайлыТранзакции();
		Результат.ОписаниеОшибки = РезультатПодготовки.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьВременныеФайлыТранзакцииПослеПолученияКаталогаВременныхФайлов",
			ЭтотОбъект,
			ДополнительныеПараметры);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииПослеПолученияКаталогаВременныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Вложения = ДополнительныеПараметры.Вложения;
	Идентификатор = ДополнительныеПараметры.Идентификатор;
	Получатели = ДополнительныеПараметры.Получатели;
	РежимРасшифровки = ДополнительныеПараметры.РежимРасшифровки;
	ИмяПодкаталогаВКаталогеВременныхФайлов = ДополнительныеПараметры.ИмяПодкаталогаВКаталогеВременныхФайлов;
	ИсходныеИменаФайлов = ДополнительныеПараметры.ИсходныеИменаФайлов;
	Сервис = ДополнительныеПараметры.Сервис;
	
	// Формируем имя уникального каталога.
	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
	ИмяКаталогаВременныхФайлов = ИмяКаталогаВременныхФайлов + ИмяПодкаталогаВКаталогеВременныхФайлов;
	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	ДополнительныеПараметры.ИмяКаталогаВременныхФайлов = ИмяКаталогаВременныхФайлов;
	
	Если ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения <> Неопределено Тогда
		ПараметрыОповещенияОПрогрессе = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения.ДополнительныеПараметры;
		Если ЗначениеЗаполнено(ПараметрыОповещенияОПрогрессе) 
			И ПараметрыОповещенияОПрогрессе.Свойство("НомерСоздаваемогоАрхива") Тогда
				ПараметрыОповещенияОПрогрессе.НомерСоздаваемогоАрхива = ПараметрыОповещенияОПрогрессе.НомерСоздаваемогоАрхива + 1;
		КонецЕсли;
	КонецЕсли;
	
	// получаем временные файлы из хранилища
	Если ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено Тогда
		// Основная итерация, когда все архивы в журнале уже подготовлены.
		Вложения = УниверсальныйОбменСБанкамиКлиент.ВременныеДанныеТранзакции(Идентификатор);

	Иначе
		// Обрабатываем файлы очередного архива.
		ТекущийИдентификаторАрхива = ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов[0];
		Вложения = УниверсальныйОбменСБанкамиКлиент.ВременныеДанныеТранзакции(Идентификатор, ТекущийИдентификаторАрхива);
		
	КонецЕсли;
	Если Вложения.Количество() = 0 Тогда
		Результат = РезультатПолучитьВременныеФайлыТранзакции();
		Результат.ОписаниеОшибки = НСтр("ru='Отсутствуют временные данные для формирования сообщения.'");
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.Вложения = Вложения;
	
	// Удаляем вложения, не требующие криптоопераций.
	Индекс = Вложения.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Вложение = Вложения[Индекс];
		Если НЕ Вложение.Зашифровать И НЕ Вложение.Подписать Тогда
			Вложения.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Готовим спискок файлов для получения разрешений.
	Интерактивно = Ложь;
	Методы = Новый Массив;
	ПолучаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы = Новый Массив;
	Для каждого Вложение Из Вложения Цикл
		// Формируем получателей.
		Для каждого БанкПолучатель Из Вложение.БанкиПолучатели Цикл
			Если Получатели.Найти(БанкПолучатель) = Неопределено Тогда
				Получатели.Добавить(БанкПолучатель);
			КонецЕсли;
		КонецЦикла;
		// Формируем списки для получение файлов с сервера и отправки на сервер.
		Если Вложение.Подписать ИЛИ Вложение.Зашифровать Тогда
			// Исходные данные.
			// Скачиваем не сжатые исходные данные только если клиент не умеет работать с архивами
			// и требуются операции подписи или шифрования без сжатия.
			Если НЕ ДоступнаРаботаСZIPАрхивом()
					И ((Вложение.Подписать И НЕ Вложение.ПодписьВыполнена)
						ИЛИ (НЕ РежимРасшифровки И НЕ Вложение.Сжать И Вложение.Зашифровать)
						ИЛИ (РежимРасшифровки И Вложение.Зашифровать)) Тогда
				// Исходные данные.
				ИмяФайла = ИмяФайлаВложенияВоВременнойПапке(Вложение);
				Описание = Новый ОписаниеПередаваемогоФайла(
					ИмяФайла,
					Вложение.АдресИсходныеДанные);
				ПолучаемыеФайлы.Добавить(Описание);
				ИсходныеИменаФайлов.Вставить(ИмяФайла, Вложение.ИсходноеИмяФайла);
			КонецЕсли;
			Если ДоступнаРаботаСZIPАрхивом() ИЛИ (НЕ РежимРасшифровки И Вложение.Сжать И НЕ ДоступнаРаботаСZIPАрхивом()) Тогда
				// Скачиваем сжатые данные.
				ИмяФайла = ИмяФайлаВложенияВоВременнойПапке(Вложение)
						+ УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаАрхива();
				Описание = Новый ОписаниеПередаваемогоФайла(
					ИмяФайла,
					Вложение.АдресСжатыеИсходныеДанные);
				ПолучаемыеФайлы.Добавить(Описание);
				ИсходныеИменаФайлов.Вставить(ИмяФайла,
					Вложение.ИсходноеИмяФайла +
						УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаАрхива());
			КонецЕсли;
			// Загрузка файла подписи в случае расшифровки.
			Если РежимРасшифровки И Вложение.Подписать Тогда
				ИмяФайла = 
					ИмяФайлаВложенияВоВременнойПапке(Вложение)
						+ УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаПодписи();
				Описание = Новый ОписаниеПередаваемогоФайла(
					ИмяФайла,
					Вложение.АдресПодпись);
				ПолучаемыеФайлы.Добавить(Описание);
				ИсходныеИменаФайлов.Вставить(ИмяФайла,
					Вложение.ИсходноеИмяФайла +
						УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаПодписи());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РежимРасшифровки Тогда
		// Получаем сертификаты банков.
		СертификатыБанков = УниверсальныйОбменСБанкамиВызовСервера.СертификатШифрованияБанков(Сервис, Получатели);
		Для каждого ДанныеСертификата Из СертификатыБанков Цикл
			ИмяФайла = ИмяФайлаСертификатаБанка(ДанныеСертификата);
			Адрес = ДанныеСертификата.АдресСодержимого;
			ДополнительныеПараметры.АдресаСертификатовБанков.Добавить(Адрес);
			Описание = Новый ОписаниеПередаваемогоФайла(
				ИмяФайла,
				Адрес);
			ПолучаемыеФайлы.Добавить(Описание);
			ИсходныеИменаФайлов.Вставить(ИмяФайла,
				ДанныеСертификата.БанкНаименование + ".cer");
		КонецЦикла;
	КонецЕсли;
	
	// Формируем разрешений сразу для всех для методов.
	Если ПолучаемыеФайлы.Количество() > 0 Тогда
		
		Метод = Новый Массив;
		Метод.Добавить("НачатьСозданиеКаталога");
		Метод.Добавить(ИмяКаталогаВременныхФайлов);
		Методы.Добавить(Метод);
		
		Для каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			Метод = Новый Массив;
			ПолучаемыеФайлыМетода = Новый Массив;
			ПолучаемыеФайлыМетода.Добавить(ПолучаемыйФайл);
			Метод.Добавить("НачатьПолучениеФайлов");
			Метод.Добавить(ПолучаемыеФайлыМетода);
			Метод.Добавить(ИмяКаталогаВременныхФайлов);
			Метод.Добавить(Интерактивно);
			Методы.Добавить(Метод);
		КонецЦикла;
		
		Метод = Новый Массив;
		Метод.Добавить("НачатьУдалениеФайлов");
		Метод.Добавить(ИмяКаталогаВременныхФайлов);
		Методы.Добавить(Метод);
		
		ДополнительныеПараметры.ПолучаемыеФайлы = ПолучаемыеФайлы;
		ДополнительныеПараметры.ПомещаемыеФайлы = ПомещаемыеФайлы;
		
		// Запрашиваем разрешение на выполенение операций с файлами.
		Оповещение = Новый ОписаниеОповещения(
				"ПолучитьВременныеФайлыТранзакцииПослеПолученияРазрешенийПользователя",
				ЭтотОбъект,
				ДополнительныеПараметры,
				"ПолучитьВременныеФайлыТранзакцииОшибкаПриЗапросеРазрешенияПользователя",
				ЭтотОбъект);
		НачатьЗапросРазрешенияПользователя(Оповещение, Методы);
		Возврат;
	Иначе
		// Обработка файлов на клиенте не требуется.
		Результат = РезультатПолучитьВременныеФайлыТранзакции();
		Результат.Выполнено = Истина;
		Результат.Вложения = Вложения;
		Результат.ПомещаемыеФайлы = ПомещаемыеФайлы;
		Результат.ИмяКаталогаВременныхФайлов = ИмяКаталогаВременныхФайлов;
		Результат.Получатели = Получатели;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииОшибкаПриЗапросеРазрешенияПользователя(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПолучитьВременныеФайлыТранзакцииПослеПолученияРазрешенийПользователя(Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииПослеПолученияРазрешенийПользователя(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ПолучаемыеФайлы = ДополнительныеПараметры.ПолучаемыеФайлы;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	
	Если НЕ РазрешенияПолучены Тогда
		Результат = РезультатПолучитьВременныеФайлыТранзакции();
		Результат.ОписаниеОшибки = НСтр("ru='Не были получены разрешения пользователя.'");
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьВременныеФайлыТранзакцииПослеСозданияКаталога",
			ЭтотОбъект,
			ДополнительныеПараметры);
	
	НачатьСозданиеКаталога(Оповещение, ИмяКаталогаВременныхФайлов);
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииПослеСозданияКаталога(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ПолучаемыеФайлы = ДополнительныеПараметры.ПолучаемыеФайлы;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИсходныеИменаФайлов = ДополнительныеПараметры.ИсходныеИменаФайлов;
	ОповещениеОПрогрессеВыполнения = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьВременныеФайлыТранзакцииПослеПолучениеФайлов",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
	СкачатьФайлыССервера(Оповещение, ПолучаемыеФайлы, ИмяКаталогаВременныхФайлов, ИсходныеИменаФайлов, ОповещениеОПрогрессеВыполнения);
	
КонецПроцедуры

Процедура ПолучитьВременныеФайлыТранзакцииПослеПолучениеФайлов(РезультатПолучения, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Вложения = ДополнительныеПараметры.Вложения;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	Получатели = ДополнительныеПараметры.Получатели;
	ОповещениеОПрогрессеВыполнения = ДополнительныеПараметры.ОповещениеОПрогрессеВыполнения;
	АдресаСертификатовБанков = ДополнительныеПараметры.АдресаСертификатовБанков;
	
	Если ДополнительныеПараметры.ИдентификаторыСоздаваемыхАрхивов = Неопределено Тогда // новых действий с сертификатами не потребуется
		Для каждого Адрес Из АдресаСертификатовБанков Цикл
			УдалитьИзВременногоХранилища(Адрес);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезультатПолучения.Выполнено Тогда
		Результат = РезультатПолучитьВременныеФайлыТранзакции();
		Результат.ОписаниеОшибки = РезультатПолучения.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	// Распаковка сжатых данных.
	Если ДоступнаРаботаСZIPАрхивом() Тогда
		Для каждого Вложение Из Вложения Цикл
			// Распаковываем сжатые исходные данные.
			ИмяАрхива = ИмяФайлаВложенияВоВременнойПапке(Вложение)
				+ УниверсальныйОбменСБанкамиКлиентСервер.СуффиксИмениФайлаАрхива();
			РезультатИзвлечения = ИзвлечьДокументИзАрхива(ИмяКаталогаВременныхФайлов,
				ИмяАрхива,
				ИмяФайлаВложенияВоВременнойПапке(Вложение));
			Если НЕ РезультатИзвлечения.Выполнено Тогда
				Результат = РезультатПолучитьВременныеФайлыТранзакции();
				Результат.ОписаниеОшибки = РезультатИзвлечения.ОписаниеОшибки;
				ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = РезультатПолучитьВременныеФайлыТранзакции();
	Результат.Выполнено = Истина;
	Результат.Вложения = Вложения;
	Результат.ПомещаемыеФайлы = ДополнительныеПараметры.ПомещаемыеФайлы;
	Результат.ИмяКаталогаВременныхФайлов = ИмяКаталогаВременныхФайлов;
	Результат.Получатели = Получатели;
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

#КонецОбласти

Функция НовоеЗначениеКэшаСертификатов(Сертификат)
	
	Результат = Новый Структура(
		"Сертификат, Пароль, КлючСвойствПрограммы",
		Сертификат,
		"",
		Неопределено);
		
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОповещенияПрогресса(ОповещениеОПрогрессе)
	
	Результат = Новый Структура;
	Результат.Вставить("Процент", 0);
	Результат.Вставить("Текст", "");
	Результат.Вставить("ДополнительныеПараметры", ОповещениеОПрогрессе.ДополнительныеПараметры); // имя шага
	Результат = Новый Структура("Прогресс", Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПодписать()
	
	Возврат УниверсальныйОбменСБанкамиКлиент.ПараметрыПодписать();
	
КонецФункции

Функция ПараметрыРасшифровать()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", Неопределено);
	// Соответствие свойств программы менеджерам криптографии.
	Параметры.Вставить("МенеджерыКриптографии", Новый Соответствие);
	Параметры.Вставить("ЭтоОблачныйСертификат", Ложь);
	Параметры.Вставить("Форма", Неопределено);
	// Соответсвие серийных номеров сертификатов паролям и свойствам программы.
	Параметры.Вставить("КэшСертификатов", Новый Соответствие);
	Параметры.Вставить("СвойстваКриптоСообщения", Неопределено);
	Параметры.Вставить("ВозвращатьОшибкуПриОтменеВводаПароля", Истина);
	
	Возврат Параметры;
	
КонецФункции

Функция КлючСвойствПрограммыКриптографии(КэшСертификатов, Сертификат)
	
	ДанныеСертификата = КэшСертификатов[Сертификат.СерийныйНомер];
	
	Если ДанныеСертификата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеСертификата.КлючСвойствПрограммы;
	
КонецФункции

Функция МенеджерКриптографииСертификата(Менеджеры, КэшСертификатов, Сертификат)
	
	Ключ = КлючСвойствПрограммыКриптографии(КэшСертификатов, Сертификат);
	
	Если Ключ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Менеджеры[Ключ];
	
КонецФункции

Функция АнализОшибкиКриптографии(ОписаниеОшибки)
	
	Результат = Новый Структура;
	Результат.Вставить("ПользовательОтменилОперацию", Ложь);
	
	// Нарушение стандарта № 499 пункт 3.2.
	// Анализируем текст ошибки для более гибкой их обработки.
	Если СтрНайти(ОписаниеОшибки, КодОшибкиОтменыВводаПароля()) > 0 Тогда
		// Возникает при отмене ввода пароля контейнера закрытого ключа.
		Результат.ПользовательОтменилОперацию = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьИнформациюПоОшибкеКриптографии(Знач ОписаниеОшибки)
	
	// Нарушение стандарта № 499 пункт 3.2.
	// Для того чтобы вывести пользователю возможную причину возникновения ошибки,
	// ищем ошибки криптопровайдера ViPNet и добавляем осмысленные комментарии.
	Если СтрНайти(ОписаниеОшибки, "Модуль криптографии не может выполнить требуемое действие, т.к. контекст был получен в ограниченном режиме") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, не указан пароль контейнера закрытого ключа.'");
	ИначеЕсли СтрНайти(ОписаниеОшибки, "Ошибка при формировании данных подписи (0x00000056)") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, указан неверный пароль контейнера закрытого ключа.'");
	ИначеЕсли СтрНайти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, сертификат криптографии был установлен неправильно.'");
	ИначеЕсли СтрНайти(ОписаниеОшибки, КодОшибкиОтменыВводаПароля()) > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, пользователь отменил ввод пароля.'");
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция КодОшибкиОтменыВводаПароля()
	
	Возврат "0x8010006E";
	
КонецФункции

Функция ДвоичныеДанныеВСтроку(Данные) Экспорт 
	
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.ДвоичныеДанныеВСтроку(Данные);
	
КонецФункции

Функция ИмяФайлаВложенияВоВременнойПапке(Вложение)
	
	Возврат Вложение.ИдентификаторФайла;
	
КонецФункции

Функция ИзвлечьДокументИзАрхива(ИмяКаталогаВременныхФайлов, ИмяАрхива, ИмяВыходногоФайла)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВнешнееСоединение Тогда
	ПолныйПутьКАрхиву = ИмяКаталогаВременныхФайлов + ИмяАрхива;
	Файл = Новый Файл(ПолныйПутьКАрхиву);
	Если Файл.Существует() Тогда
		ЧтениеZip = Новый ЧтениеZipФайла(ПолныйПутьКАрхиву);
		// считается, что в архиве содержится только один файл с данными.
		Попытка
			ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0],
				ИмяКаталогаВременныхФайлов);
			// Переименовываем исходный файл.
			// Предполагается, что код исполняется в тонком клиенте.
			ПереместитьФайл(
				ИмяКаталогаВременныхФайлов + ЧтениеZip.Элементы[0].Имя,
				ИмяКаталогаВременныхФайлов + ИмяВыходногоФайла);
			ЧтениеZip.Закрыть();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка извлечения файла из архива.
                                   |%1'");
			Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
				НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			Возврат Результат;
		КонецПопытки;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Файл архива не существует.
                               |%1'");
		Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ПолныйПутьКАрхиву);
		ЗаписатьСобытиеВЖурнал(Результат.ОписаниеОшибки,
			НСтр("ru = 'Работа с архивом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
#Иначе

	Результат.ОписаниеОшибки = НСтр("ru='На клиенте не предусмотрена работа с ZIP-архивами.'");
	
#КонецЕсли

	Возврат Результат;

КонецФункции

Функция ЭтоАдресВоВременномХранилище(Адрес)
	
	Если СтрНайти(Адрес, "e1cib/tempstorage/") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ИмяМетода, Контекст, ВозможноПродолжениеБезУстановки)
	
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, Контекст);
	
	Если ВозможноПродолжениеБезУстановки Тогда
		ТекстСообщения = ТекстСообщенияДляНеобязательнойУстановкиРасширенияРаботыСФайлами();
	Иначе
		ТекстСообщения = НСтр("ru = 'Для продолжения работы требуется установить расширение для работы с файлами.
                               |'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения, ВозможноПродолжениеБезУстановки);
	
КонецПроцедуры

Функция ТекстСообщенияДляНеобязательнойУстановкиРасширенияРаботыСФайлами() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Для удобной загрузки файлов рекомендуется установить расширение работы с файлами.
                           |'");
	
	Возврат ТекстСообщения;
	
КонецФункции

// Фиксирует событие в журнале регистрации, заполняя часть параметров по-умолчанию.
// Использует кеширование сообщений на клиенте.
//
// Параметры:
//  Комментарий  - Строка или ИнформацияОбОшибке - комментарий к событию.
//  ВариантСобытия - Строка - должна быть получена с использованием НСтр("", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
//  Уровень      - Строка - если не заполнено, то "Ошибка"; иначе варианты имен перечисления УровеньЖурналаРегистрации.
//  ЗаписатьСобытие - Булево - признак, что необходимо сейчас же обратиться на сервер и зафиксировать событие.
//
Процедура ЗаписатьСобытиеВЖурнал(Знач Комментарий = "", Знач ВариантСобытия = "", Знач Уровень = "", ЗаписатьСобытие = Истина)
	
	УниверсальныйОбменСБанкамиКлиент.ЗаписатьСобытиеВЖурнал(Комментарий, ВариантСобытия, Уровень, ЗаписатьСобытие);
	
КонецПроцедуры

Процедура ОтобразитьПодсказкуДляСертификата(ПолеВвода, ПараметрыПодсказки)
	
	Если НЕ ПустаяСтрока(ПараметрыПодсказки.ТекстПодсказкиПоСертификату) Тогда
		Подсказка = Новый ФорматированнаяСтрока(
			ПараметрыПодсказки.ТекстПодсказкиПоСертификату, ,
			ПараметрыПодсказки.Цвет);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ПараметрыПодсказки.Режим;
	КонецЕсли;
	
КонецПроцедуры

#Область РезультатыВыполненияПроцедур

Функция РезультатПроверитьПодпись()
	
	Результат = Новый Структура;
	Результат.Вставить("Сертификат", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатРасшифроватьНерасшифрованныеТранзакции()
	
	Результат = Новый Структура;
	Результат.Вставить("РасшифрованныеТранзакции", Новый Массив);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Предупреждения", "");
	Результат.Вставить("ОтмененоПользователем", Ложь);

	Возврат Результат;
	
КонецФункции

Функция РезультатПолучитьСвойстваПрограммыМенеджераКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("КриптоПровайдеры", Неопределено);
	Результат.Вставить("Свойства", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КонфликтКриптопровайдеров", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатСоздатьМенеджерКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	Результат.Вставить("РасширениеНеПодключено", Ложь);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИмяМодуля", Неопределено);
	Результат.Вставить("АлгоритмыПодписи", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатРасшифровать()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("РасшифрованныеДанные", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтмененоПользователем", Ложь);
	Результат.Вставить("МенеджерыКриптографии", Новый Соответствие);
	Результат.Вставить("КэшСертификатов", Новый Соответствие);
	Результат.Вставить("Сертификат", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверитьСертификат()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Валиден", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВводПароляДоступаКЗакрытомуКлючу()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ПарольДоступаКЗакрытомуКлючу", Неопределено);
	Результат.Вставить("ОписаниеОшибки", Ложь);
	Результат.Вставить("ОтмененоПользователем", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатЗашифровать()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ЗашифрованныеДанные", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПодписать()
	
	Результат = Новый Структура;
	Результат.Вставить("ПодписьВыполнена", Ложь);
	Результат.Вставить("ПодписанныеДанные", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	Результат.Вставить("ОтмененоПользователем", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПодготовитьТранзакцию()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Вложения", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Получатели", Неопределено);
	Результат.Вставить("ПользовательОтменилПодготовкуТранзакции", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОтобразитьПредставлениеСертификата()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("СертификатНеНайденВХранилище", Ложь);
	Результат.Вставить("СвойстваСертификата", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПоискаСертификата()
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Сертификат", Неопределено);
	РезультатПоиска.Вставить("СертификатНайден", Ложь);
	РезультатПоиска.Вставить("МенеджерКриптографии", Неопределено);
	РезультатПоиска.Вставить("ОписаниеОшибки");
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция РезультатРасшифроватьДанныеТранзакции()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтмененоПользователем", Ложь);
	Результат.Вставить("Предупреждения", "");
	Результат.Вставить("ПодписьНеДействительна", Ложь);
	Результат.Вставить("НеизвестныйСертификатПодписи", Ложь);
	Возврат Результат;
	
КонецФункции

Функция РезультатЗапуститьПриложениеНаКлиенте()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти 
