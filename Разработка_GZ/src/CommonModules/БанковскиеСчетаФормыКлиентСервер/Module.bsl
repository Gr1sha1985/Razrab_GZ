////////////////////////////////////////////////////////////////////////////////
// СправочникБанковскиеСчетаФормыКлиентСервер: клиентские и серверные процедуры и 
// функции, вызываемые из форм справочников, содержащих банковский счет.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует текст сообщения для поля подсказки номера счета.
//
// Параметры:
//  НомерСчета          - Строка - номер проверяемого счета.
//  БИК                 - Строка - БИК проверяемого банка.
//  ЯвляетсяБанкомРФ    - Булево - признак российского банка.
//  Цвет                - Цвет   - цвет подсказки.
//  НомерСчетаКорректен - Строка - исходящий, признак корректности проверяемого номера счета.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - форматированный текст подсказки.
//
Функция ПодсказкаПоляНомерСчета(НомерСчета, БИК, ЯвляетсяБанкомРФ, Цвет, НомерСчетаКорректен = Ложь) Экспорт
	
	ПодсказкаПоля = Новый ФорматированнаяСтрока("");
	
	Если ПропуститьПроверкуРеквизитовСчета(НомерСчета, БИК, ЯвляетсяБанкомРФ) Тогда
		Возврат ПодсказкаПоля;
	КонецЕсли;
	
	ТекущийНомерСчета = СтрЗаменить(НомерСчета," ","");
	ТекстСообщения = "";
	
	НомерСчетаКорректен = НомерСчетаКорректен(ТекущийНомерСчета, БИК, ЯвляетсяБанкомРФ, ТекстСообщения);
	Если Не НомерСчетаКорректен Тогда
		ПодсказкаПоля = Новый ФорматированнаяСтрока(ТекстСообщения,, Цвет);
	КонецЕсли;
		
	Возврат ПодсказкаПоля;
	
КонецФункции

// Формирует текст сообщения для поля подсказки банка.
//
// Параметры:
//  ДеятельностьБанкаПрекращена - Булево - признак того, что банк недействующий.
// 
// Возвращаемое значение:
//  Строка - текст подсказки.
//
Функция ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена) Экспорт 
	
	ТекстСообщения = "";
	
	Если ДеятельностьБанкаПрекращена Тогда
		ТекстСообщения = Новый ФорматированнаяСтрока(НСтр("ru = 'БИК банка не найден в классификаторе банков ЦБ РФ'"));
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Проверяет правильность заполнения номера счета и возвращает в параметре текст сообщения.
//
// Параметры:
//  НомерСчета     - Строка - номер проверяемого счета.
//  КодБанка       - Строка - клиринговый код банка для проверяемого счета.
//  ЯвляетсяБанкомРФ      - Булево - признак российского банка.
//  ТекстСообщения - Строка - в параметр передается текст сообщения об ошибке, если проверка не пройдена.
// 
// Возвращаемое значение:
//  Булево - Результат проверки номера счета, если Ложь тогда счет некорректный.
//
Функция НомерСчетаКорректен(НомерСчета, КодБанка, ЯвляетсяБанкомРФ, ТекстСообщения = "") Экспорт
	
	Если ПропуститьПроверкуРеквизитовСчета(НомерСчета, КодБанка, ЯвляетсяБанкомРФ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	НомерСчетаКорректен = Ложь;
	
	Если ЯвляетсяБанкомРФ Тогда
		
		Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'Номер счета должен состоять из 20 цифр'");
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'В номере счета должны быть только цифры'");
		ИначеЕсли Не ПустаяСтрока(КодБанка) И Не ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерСчета, КодБанка) Тогда
			ТекстСообщения = НСтр("ru = 'Номер счета или банк введен некорректно'");
		Иначе
			НомерСчетаКорректен = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Не БанковскиеПравила.ПроверитьРазрешенныеСимволыСчета(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'Разрешены только буквы от A до Z и цифры'");
		Иначе
			
			КодСтраныВСчете = БанковскиеПравила.КодСтраныIBAN(НомерСчета);
			КодСтраныВБанке = БанковскиеПравила.КодСтраныSWIFT(КодБанка);
			
			Если БанковскиеПравила.СтранаПрименяетФорматIBAN(КодСтраныВСчете) Тогда
				Если Не БанковскиеПравила.ПроверитьКонтрольныйКлючIBAN(НомерСчета) Тогда
					ТекстСообщения = НСтр("ru = 'Номер счета введен некорректно'");
				ИначеЕсли ЗначениеЗаполнено(КодСтраныВБанке) И КодСтраныВСчете <> КодСтраныВБанке Тогда
					ТекстСообщения = НСтр("ru = 'IBAN должен соответствовать банку'");
				Иначе
					НомерСчетаКорректен = Истина;
				КонецЕсли;
			Иначе
				НомерСчетаКорректен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСчетаКорректен;
	
КонецФункции

// Проверяет допустимо ли производить проверки банковского счета по переданным параметрам.
// Для иностранных банков наличие кода банка необязательно.
//
// Параметры:
//  НомерСчета       - Строка - номер проверяемого счета.
//  КодБанка         - Строка - код банка проверяемого счета.
//  ЯвляетсяБанкомРФ - Булево - признак российского банка.
// 
// Возвращаемое значение:
//  Булево - признак того, что проверки счета допустимы.
//
Функция ПропуститьПроверкуРеквизитовСчета(НомерСчета, КодБанка, ЯвляетсяБанкомРФ) Экспорт
	
	Если ЯвляетсяБанкомРФ Тогда
		ПропуститьПроверку = ПустаяСтрока(НомерСчета) Или ПустаяСтрока(КодБанка);
	Иначе
		ПропуститьПроверку = ПустаяСтрока(НомерСчета);
	КонецЕсли;
	
	Возврат ПропуститьПроверку;
	
КонецФункции

#КонецОбласти

#Область ПредставленияИспользуемыеВИнтерфейсе

// Функция формирует текст наименования для элемента счета.
//
// Параметры:
//  БанковскийСчет - ДанныеФормыСтруктура - банковский счет, для которого требуется сформировать наименование.
//  НаименованиеБанка - Строка - наименование банка, которое будет присвоено банковскому счету.
//
// Возвращаемое значение:
//  Строка -  сформированый текст наименования счета.
//
Функция НаименованиеБанковскогоСчета(БанковскийСчет, НаименованиеБанка) Экспорт
	
	БанковскийСчетНаименование = СокрЛП(БанковскийСчет.НомерСчета);
	Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БанковскийСчетНаименование = БанковскийСчетНаименование + ", " + НаименованиеБанка;
	КонецЕсли;
	Если БанковскийСчет.Валютный Тогда
		БанковскийСчетНаименование = БанковскийСчетНаименование + ", " + БанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;
	
	Возврат Лев(БанковскийСчетНаименование, 100);
	
КонецФункции

// Функция формирует заголовок для свернутой группы основного банковского счета.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма, на которой требуется разместить заголовок.
//  БанковскийСчет - ДанныеФормыСтруктура - банковский счет, для которого требуется сформировать заголовок.
// 
// Возвращаемое значение:
//  Строка -  сформированый текст заголовка группы.
//
Процедура УстановитьЗаголовокГруппыРеквизитовСчета(Форма, БанковскийСчет) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Основной банковский счет'");
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		ТекстЗаголовка = ТекстЗаголовка +": " + НаименованиеБанковскогоСчета(БанковскийСчет, БанковскийСчет.Банк);
	КонецЕсли;
	
	Форма.Элементы.ГруппаОсновнойБанковскийСчет.ЗаголовокСвернутогоОтображения =  ТекстЗаголовка;
	
КонецПроцедуры

// Процедура изменяет длину номера счета, в зависимости от того, 
// является ли счет иностранным или российским.
//
// Параметры:
//  Форма            - ДанныеФормыСтруктура - форма на которой размещен номер счета.
//  ЯвляетсяБанкомРФ - Булево -  признак российского банка.
//
Процедура ИзменитьДлинуНомераСчета(Форма, ЯвляетсяБанкомРФ) Экспорт
	
	ПолеНомераСчета = Форма.Элементы.НомерСчета;
	
	Если ЯвляетсяБанкомРФ Тогда
		ПолеНомераСчета.ОграничениеТипа = БанковскиеПравила.ТипНомерСчета();
	Иначе
		ПолеНомераСчета.ОграничениеТипа = БанковскиеПравила.ТипМеждународныйНомерСчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерСчета, БИК)
	
	// На веб-клиенте для повышения скорости выполнения процедуры передаем исполнение кода на сервер.
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат БанковскиеСчетаВызовСервера.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерСчета, БИК);
	Иначе
		Возврат БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(НомерСчета, БИК)
	КонецЕсли;
	
КонецФункции

#КонецОбласти
