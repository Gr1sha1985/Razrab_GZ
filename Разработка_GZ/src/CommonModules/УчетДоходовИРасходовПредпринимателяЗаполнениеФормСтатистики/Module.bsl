
#Область ПрограммныйИнтерфейс

Функция ВыручкаИППоВидамДеятельности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ВыручкаПоВидамДеятельности = НовыйВыручкаПоВидамДеятельности();
	
	НаименованиеОсновногоВидаДеятельности = ""; // для всех налоговых режимов, кроме случая, когда для НДФЛ указан свой основной вид деятельности
	НаименованиеОсновногоВидаДеятельностиНДФЛ = "";
	ОКВЭДОсновногоВидаДеятельности = ""; // для всех налоговых режимов, кроме случая, когда для НДФЛ указан свой основной вид деятельности
	ОКВЭДОсновногоВидаДеятельностиНДФЛ = "";
	
	РеквизитыОрганизации = "ЮридическоеФизическоеЛицо, КодОКВЭД2, НаименованиеОКВЭД2";
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитыОрганизации);
	
	НаименованиеОсновногоВидаДеятельности = РеквизитыОрганизации.НаименованиеОКВЭД2;
	ОКВЭДОсновногоВидаДеятельности = РеквизитыОрганизации.КодОКВЭД2;
	
	НаименованиеОсновногоВидаДеятельностиНДФЛ = НаименованиеОсновногоВидаДеятельности;
	ОКВЭДОсновногоВидаДеятельностиНДФЛ = ОКВЭДОсновногоВидаДеятельности;
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо 
		И УчетнаяПолитика.СистемаНалогообложения(Организация, КонецПериода) = Перечисления.СистемыНалогообложения.Общая Тогда
		
		ОсновнойВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, КонецПериода);
		
		Если ТипЗнч(ОсновнойВидДеятельности) = Тип("СправочникСсылка.ВидыДеятельностиПредпринимателей")
			И НЕ ОсновнойВидДеятельности.Пустая() Тогда
			
			НаименованиеОсновногоВидаДеятельностиНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидДеятельности, "Наименование");
			ОКВЭДОсновногоВидаДеятельностиНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидДеятельности, "КодОКВЭД");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для ИП на ОСНО получим доходы из КУДиР
	Если УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		
		#Область ПодготовкаДанныхДляКУДиР
		
		СписокТаблиц = Новый ТаблицаЗначений;
		СписокТаблиц.Колонки.Добавить("КодТаблицы",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
		СписокТаблиц.Колонки.Добавить("Формировать",        Новый ОписаниеТипов("Булево"));
		СписокТаблиц.Колонки.Добавить("АдресХранилища",     Новый ОписаниеТипов("Строка"));
		СписокТаблиц.Колонки.Добавить("ИмяМакета",          ОбщегоНазначения.ОписаниеТипаСтрока(20));
		СписокТаблиц.Колонки.Добавить("ЗаголовокТаблицы",   ОбщегоНазначения.ОписаниеТипаСтрока(15));
		СписокТаблиц.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
		СписокТаблиц.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
		
		НоваяСтрока 				= СписокТаблиц.Добавить();
		НоваяСтрока.КодТаблицы		= 61;
		НоваяСтрока.Формировать		= Истина;
		НоваяСтрока.АдресХранилища	= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		НоваяСтрока.ИмяМакета		= "Т61";
		
		ПараметрыЗаполненияОтчета = Новый Структура();
		
		ПараметрыЗаполненияОтчета.Вставить("Организация",		Организация);
		ПараметрыЗаполненияОтчета.Вставить("НачалоПериода",		НачалоПериода);
		ПараметрыЗаполненияОтчета.Вставить("КонецПериода",		КонецПериода);
		ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности"	);
		ПараметрыЗаполненияОтчета.Вставить("ОблагаетсяНДС",		НЕ УчетнаяПолитика.ПлательщикНДС(Организация, КонецПериода));
		ПараметрыЗаполненияОтчета.Вставить("ВыводитьРеквизиты",	Ложь);
		ПараметрыЗаполненияОтчета.Вставить("СписокТаблиц",		СписокТаблиц);
		
		#КонецОбласти
		
		#Область ПолучениеДанныхИзКУДиР
		
		Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, КонецПериода) Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
				|	ВидыДеятельностиПредпринимателей.Ссылка КАК ВидДеятельности,
				|	ВидыДеятельностиПредпринимателей.КодОКВЭД,
				|	ВидыДеятельностиПредпринимателей.Наименование КАК Наименование
				|ИЗ
				|	Справочник.ВидыДеятельностиПредпринимателей КАК ВидыДеятельностиПредпринимателей
				|ГДЕ
				|	ВидыДеятельностиПредпринимателей.Ссылка <> &ОсновнойВидДеятельности";
			
			Запрос.УстановитьПараметр("ОсновнойВидДеятельности", ОсновнойВидДеятельности);
			ВыборкаВидов = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаВидов.Следующий() Цикл 
				
				ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", ВыборкаВидов.ВидДеятельности); 
				
				АдресХранилища	= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.СформироватьОтчет(ПараметрыЗаполненияОтчета, АдресХранилища);
				
				ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
				Если ВыборкаОбщие.Следующий() Тогда
					ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
					ВыручкаПоВидуДеятельности.Выручка	= ВыборкаОбщие.Доходы;
					ВыручкаПоВидуДеятельности.ПрочиеДоходы = ВыборкаОбщие.ПрочиеДоходы;
					ВыручкаПоВидуДеятельности.Аналитика	= ВыборкаВидов.Наименование;
					ВыручкаПоВидуДеятельности.КодОКВЭД	= ВыборкаВидов.КодОКВЭД;
				КонецЕсли;
				
			КонецЦикла;
			
			// Отдельно обрабатываем основной вид деятельности
			ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", Неопределено); 
			
			АдресХранилища	= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.СформироватьОтчет(ПараметрыЗаполненияОтчета, АдресХранилища);
			
			ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
			Если ВыборкаОбщие.Следующий() Тогда
				ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
				ВыручкаПоВидуДеятельности.Выручка	= ВыборкаОбщие.Доходы - ВыручкаПоВидамДеятельности.Итог("Выручка");
				ВыручкаПоВидуДеятельности.ПрочиеДоходы = ВыборкаОбщие.ПрочиеДоходы - ВыручкаПоВидамДеятельности.Итог("ПрочиеДоходы");
				ВыручкаПоВидуДеятельности.Аналитика	= НаименованиеОсновногоВидаДеятельностиНДФЛ;
				ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭДОсновногоВидаДеятельностиНДФЛ;
			КонецЕсли;
			
		Иначе
			
			ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", Неопределено); 
			
			АдресХранилища	= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.СформироватьОтчет(ПараметрыЗаполненияОтчета, АдресХранилища);
			
			ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
			
			Если ВыборкаОбщие.Следующий() Тогда
				ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
				ВыручкаПоВидуДеятельности.Выручка	= ВыборкаОбщие.Доходы;
				ВыручкаПоВидуДеятельности.ПрочиеДоходы = ВыборкаОбщие.ПрочиеДоходы;
				ВыручкаПоВидуДеятельности.Аналитика	= НаименованиеОсновногоВидаДеятельностиНДФЛ;
				ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭДОсновногоВидаДеятельностиНДФЛ;
			КонецЕсли;
			
		КонецЕсли;
		
		#КОнецОбласти
		
	КонецЕсли;
	
	// Получим доходы на УСН и ЕНВД
	//
	#Область ВыручкаУСН_ЕНВД_Патент

	НачалоПериодаИлиРегистрации = НачалоПериода;
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Если ДатаРегистрации <= КонецПериода И ДатаРегистрации > НачалоПериода Тогда
			НачалоПериодаИлиРегистрации = ДатаРегистрации;
		КонецЕсли;
	КонецЕсли;
	
	// Выручка УСН
	ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
	ВыручкаПоВидуДеятельности.Выручка	= УчетУСН.СуммаДохода(Организация, НачалоПериодаИлиРегистрации, КонецПериода);
	ВыручкаПоВидуДеятельности.Аналитика	= НаименованиеОсновногоВидаДеятельности;
	ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭДОсновногоВидаДеятельности;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ХозрасчетныйОбороты_Выручка.СуммаОборотКт) КАК Выручка
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты_Выручка";
	
	ДоходыЕНВД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если ДоходыЕНВД.Следующий() Тогда
		// Выручка ЕНВД
		ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
		ВыручкаПоВидуДеятельности.Выручка	= ДоходыЕНВД.Выручка;
		ВыручкаПоВидуДеятельности.Аналитика	= НаименованиеОсновногоВидаДеятельности + " (ЕНВД)";
		ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭДОсновногоВидаДеятельности;
	КонецЕсли;
	
	// Выручка Патент
	ПатентыИП = Справочники.Патенты.ПатентыОрганизации(Организация, КонецПериода);
	
	Для Каждого Патент Из ПатентыИП Цикл
		
		ПараметрыОтчета = Отчеты.КнигаУчетаДоходовПатент.ПустыеПараметрыКомпоновкиОтчета();
		ПараметрыОтчета.Организация   = Организация;
		ПараметрыОтчета.Патент        = Патент;
		ПараметрыОтчета.НачалоПериода = НачалоПериода;
		ПараметрыОтчета.КонецПериода  = КонецПериода;
		
		Отчеты.КнигаУчетаДоходовПатент.ПодготовитьОтчет(ПараметрыОтчета);
		
		КнигаУчетаДоходовПатент = ПараметрыОтчета.КнигаУчетаДоходовПатент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		
		Если КнигаУчетаДоходовПатент.Следующий() Тогда
			
			ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
			ВыручкаПоВидуДеятельности.Выручка	= КнигаУчетаДоходовПатент.Графа4;
			ВыручкаПоВидуДеятельности.Аналитика	= Патент.Наименование;
			ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭДОсновногоВидаДеятельности;

		КонецЕсли;
	
	КонецЦикла;
	
	#КонецОбласти
	
	// Выручка НПД
	ЗаполнитьВыручкуПоНПД(
		ВыручкаПоВидамДеятельности, 
		Организация, 
		НачалоПериода, 
		КонецПериода,  
		ОКВЭДОсновногоВидаДеятельности,
		НаименованиеОсновногоВидаДеятельности);
			
	СтрокиСНулевойВыручкой = Новый Массив;
	
	Для Каждого СтрокаВыручки Из ВыручкаПоВидамДеятельности Цикл
		
		Если СтрокаВыручки.Выручка <= 0 Тогда
			СтрокиСНулевойВыручкой.Добавить(СтрокаВыручки);
			Продолжить;
		Иначе
		СтрокаВыручки.Процент = СтрокаВыручки.Выручка*100/ВыручкаПоВидамДеятельности.Итог("Выручка");
		
		ПроцентСтрокой = Формат(СтрокаВыручки.Процент, "ЧЦ=3; ЧДЦ=");
		
		Если СтрокаВыручки.Процент = 100 Тогда
			СтрокаВыручки.Процент1 = "0";
			СтрокаВыручки.Процент2 = "0";
			СтрокаВыручки.Процент3 = "1";
		ИначеЕсли СтрокаВыручки.Процент >= 10 Тогда
			СтрокаВыручки.Процент1 = Прав(ПроцентСтрокой, 1);
			СтрокаВыручки.Процент2 = Лев(ПроцентСтрокой, 1);
			СтрокаВыручки.Процент3 = "";
		Иначе
			СтрокаВыручки.Процент1 = Прав(ПроцентСтрокой, 1);
			СтрокаВыручки.Процент2 = "";
			СтрокаВыручки.Процент3 = "";
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиСНулевойВыручкой Цикл
		
		ВыручкаПоВидамДеятельности.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	ВыручкаПоВидамДеятельности.Сортировать("Процент Убыв");
	
	Возврат ВыручкаПоВидамДеятельности;
	
КонецФункции

Процедура ПолучитьСведенияОПоказателяхОтчета1ИПсведФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000001000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000001000201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000003000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000004000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000004000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000004000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000004000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000005000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000005000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000005000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000005000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000005000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000006000103", Истина, Ложь);

КонецПроцедуры

Функция ТекстБаннераЗадачи1Предприниматель() Экспорт 

	СоставСтроки = Новый Массив;
	
	// Переводы строки для читаемости при разработке. Перед выводом будут удалены.
	ТекстПодсказки = СтрШаблон(НСтр("ru = 'Все индивидуальные предприниматели до 1 апреля 2021 года
		|обязаны предоставить информацию в орган Росстата своего региона.'"));
		
	СоставСтроки.Добавить(СтрЗаменить(ТекстПодсказки, Символы.ПС, " "));
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
		СтрШаблон("<a href='https://buh.ru/articles/documents/121431/'>%1</a>", НСтр("ru = 'Подробнее про сплошное статистическое наблюдение'")))); 
	
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);

КонецФункции

Функция ТекстБаннераЗадачиМПСП() Экспорт 

	СоставСтроки = Новый Массив;
	
	// Переводы строки для читаемости при разработке. Перед выводом будут удалены.
	ТекстПодсказки = СтрШаблон(НСтр("ru = 'Все организации, относящиеся к малым предприятиям, до 1 апреля 2021 года
		|обязаны предоставить информацию в орган Росстата своего региона.'"));
		
	СоставСтроки.Добавить(СтрЗаменить(ТекстПодсказки, Символы.ПС, " "));
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(Символы.ПС);
	СоставСтроки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(
		СтрШаблон("<a href='https://buh.ru/articles/documents/121431/'>%1</a>", НСтр("ru = 'Подробнее про сплошное статистическое наблюдение'"))));  
	
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВыручкуПоНПД(ВыручкаПоВидамДеятельности, Организация, НачалоПериода, КонецПериода, ОКВЭД, НаименованиеВидаДеятельности)
	
	Если НЕ УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем сумму выручки по данным сервиса Мой налог
	
	СостояниеПодключения = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьСостояниеПодключения(Организация);
		
	Если Не СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Невозможно получить сумму выручки по налогу на профессиональный доход:
			|приложение не подключено к сервису Мой налог.'"));
		Возврат;	
	КонецЕсли;
	
	ПараметрыВзаимодействия = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СписокДоходов");
	ПараметрыВзаимодействия.Организация = Организация;
	ПараметрыВзаимодействия.НачалоПериода = НачалоПериода;
	ПараметрыВзаимодействия.КонецПериода = КонецПериода;
		
	ОтветСервиса = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыВзаимодействия);
	
	Если ОтветСервиса.Ошибка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='При обращении к сервису Мой налог возникла ошибка:
			|%1'"),
			ОтветСервиса.Сообщение));
		Возврат;
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Для Повтор = 1 По 15 Цикл
		ОтветРезультат = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ОтветСервиса);
		Если ОтветРезультат.Статус = СтатусыЗапросов.Выполняется Тогда
			ОбщегоНазначенияБТС.Пауза(Повтор);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	

	Если ОтветРезультат.Статус = СтатусыЗапросов.Выполняется Тогда
		// Результат так и не получен в заданное время
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не удалось получить ответ от сервиса Мой налог в заданное время'"));
		Возврат;
	ИначеЕсли ОтветРезультат.Статус = СтатусыЗапросов.Ошибка Тогда	
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Не удалось получить ответ от сервиса Мой налог:
			|%1'"),
			ОтветРезультат.Сообщение));
		Возврат;
	КонецЕсли;
	
	Если ОтветРезультат.Результат = Неопределено
		 Или ТипЗнч(ОтветРезультат.Результат) <> Тип("Структура") 
		 Или Не ОтветРезультат.Результат.Свойство("СписокЧеков") Тогда
		// Возникла исключительная ошибка обработки запроса
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не удалось получить ответ от сервиса Мой налог:
			|Получен некорректный результат.'"));
		Возврат;
	КонецЕсли;
		
	СписокЧеков = Отчеты.ДоходыНПД.НоваяТаблицаЗарегистрированногоДохода();
	Отчеты.ДоходыНПД.ЗаполнитьТаблицуДоходов(СписокЧеков, ОтветРезультат.Результат.СписокЧеков);
		
	ВыручкаПоВидуДеятельности			= ВыручкаПоВидамДеятельности.Добавить();
	ВыручкаПоВидуДеятельности.Выручка	= СписокЧеков.Итог("СуммаПоДаннымФНС");
	ВыручкаПоВидуДеятельности.Аналитика	= НаименованиеВидаДеятельности;
	ВыручкаПоВидуДеятельности.КодОКВЭД	= ОКВЭД;
			
КонецПроцедуры
 
Функция НовыйВыручкаПоВидамДеятельности()
	
	ОдинСимволСтрокой = Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(1));
	
	ВыручкаПоВидамДеятельности = Новый ТаблицаЗначений;
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Выручка", 			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Неотрицательный)));
	ВыручкаПоВидамДеятельности.Колонки.Добавить("ПрочиеДоходы", 	Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Неотрицательный)));
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Аналитика",		Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255)));
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Процент",			Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0)));
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Процент1",			ОдинСимволСтрокой);
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Процент2",			ОдинСимволСтрокой);
	ВыручкаПоВидамДеятельности.Колонки.Добавить("Процент3",			ОдинСимволСтрокой);
	ВыручкаПоВидамДеятельности.Колонки.Добавить("КодОКВЭД",			Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(12)));
	
	Возврат ВыручкаПоВидамДеятельности;

	
КонецФункции

#КонецОбласти