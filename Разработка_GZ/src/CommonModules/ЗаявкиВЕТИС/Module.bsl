////////////////////////////////////////////////////////////////////////////////
//
// Заявки:
//  * Подготовка сообщений для сервиса ВетИС в формате XML
//  * Подготовка пакетов сообщений по измененным объектам
//  * Передача и получение ответов
//
//////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Загрузка

// Получить результат заявки.
//
// Параметры:
//  ЭлементОчереди  - (См. ИнтеграцияВЕТИСКлиентСервер.СтруктураОчередиПередачиДанных).
//  ПараметрыОбмена - Соответствие - Настройки обмена с ВЕТИС.
//
Процедура ЗагрузитьРезультатОбработкиЗаявки(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса = Ложь;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ЗаявкиВЕТИС.ЗагрузитьРезультатОбработкиЗаявки");
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ЭлементОчереди.ХозяйствующийСубъект);
	СообщенияXML = ЗапросПолученияРезультатаОбработкиЗаявкиXML(
		ЭлементОчереди.ХозяйствующийСубъект,
		ЭлементОчереди.ИдентификаторЗаявки,
		НастройкаОбмена);
	
	Для Каждого СообщениеXML Из СообщенияXML Цикл
		
		ДополнительныеПараметры = Новый Структура;
		
		Если Не ЗначениеЗаполнено(СообщениеXML.ТекстОшибки) Тогда
			
			ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(
				ЭлементОчереди.Операция,
				НастройкаОбмена.ФорматОбмена);
			Операция = ПараметрыЗапросаВЕТИС.ОтветНаЗапрос.Операция;
			ТипВЕТИС = ПараметрыЗапросаВЕТИС.ОтветНаЗапрос.ТипВЕТИС;
			
			РезультатОбработкиЗаявки = ПолучитьРезультатОбработкиЗаявки(СообщениеXML, НастройкаОбмена, Операция, ПараметрыОбмена);
			
			Если (ПараметрыОбмена.КоличествоПовторныхЗапросов < 0
				Или ЭлементОчереди.КоличествоИтераций < ПараметрыОбмена.КоличествоПовторныхЗапросов)
				И (РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния  = 408        // Таймаут
				Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429) Тогда // Слишком много запросов
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = "";
			Если РезультатОбработкиЗаявки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаПоиска Тогда
				Если ЗначениеЗаполнено(РезультатОбработкиЗаявки.РезультатОбработкиОтвета.ТекстОшибки) Тогда
					ТекстОшибки = РезультатОбработкиЗаявки.РезультатОбработкиОтвета.ТекстОшибки;
				ИначеЕсли ЗначениеЗаполнено(РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
					ТекстОшибки = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ТекстОшибки = СообщениеXML.ТекстОшибки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ПредставлениеХС          = НСтр("ru = '<не указан>'");
			ПредставлениеПредприятия = НСтр("ru = '<не указано>'");
			Если ЗначениеЗаполнено(ЭлементОчереди.ХозяйствующийСубъект) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ЭлементОчереди.ХозяйствующийСубъект, "Наименование, Идентификатор");
				ПредставлениеХС = СтрШаблон(
					"%1(%2)",
					ЗначенияРеквизитов.Наименование,
					ЗначенияРеквизитов.Идентификатор);
				Если ЗначениеЗаполнено(ЭлементОчереди.Предприятие) Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ЭлементОчереди.Предприятие, "Наименование, Идентификатор");
					ПредставлениеПредприятия = СтрШаблон(
						"%1(%2)",
						ЗначенияРеквизитов.Наименование,
						ЗначенияРеквизитов.Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Получен ""%1"" (id=%2)
				           |Хозяйствующий субъект: %3
				           |Предприятие: %4
				           |%5:
				           |%6'"),
				Операция,
				ЭлементОчереди.ИдентификаторЗаявки,
				ПредставлениеХС,
				ПредставлениеПредприятия,
				?(РезультатОбработкиЗаявки <> Неопределено,
				  РезультатОбработкиЗаявки.СтатусОбработки,
				  Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка),
				ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Объект");
		ДанныеДокумента.Вставить("Ошибки");
		ДанныеДокумента.Вставить("СтатусОбработки",       РезультатОбработкиЗаявки.СтатусОбработки);
		ДанныеДокумента.Вставить("ФорматОбмена",          НастройкаОбмена.ФорматОбмена);
		ДанныеДокумента.Вставить("ИдентификаторЗаявки",   ЭлементОчереди.ИдентификаторЗаявки);
		ДанныеДокумента.Вставить("ПараметрыЗапроса",      ЭлементОчереди.ПараметрыЗапроса);
		ДанныеДокумента.Вставить("ИсходящееСообщение",    ЭлементОчереди.Сообщение);
		ДанныеДокумента.Вставить("Документ",              ЭлементОчереди.Документ);
		ДанныеДокумента.Вставить("ДокументОснование",     ЭлементОчереди.ДокументОснование);
		ДанныеДокумента.Вставить("ВходящаяОперация",      Операция);
		ДанныеДокумента.Вставить("ИсходящаяОперация",     СообщениеXML.Операция);
		ДанныеДокумента.Вставить("ВходящееСообщениеXML",  РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
		ДанныеДокумента.Вставить("ИсходящееСообщениеXML", СообщениеXML.ТекстСообщенияXML);
		
		ДанныеВыполненияЗаявки = РезультатОбработкиЗаявки.РезультатОбработкиОтвета.Результат;
		ДополнительныеПараметры.Вставить("ДанныеВыполненияЗаявки", ДанныеВыполненияЗаявки);
		ДополнительныеПараметры.Вставить("ВремяВыполнения",        Неопределено);
		ДополнительныеПараметры.Вставить("ЕстьОшибкиСервиса",      Ложь);
		ДополнительныеПараметры.Вставить("ЭлементОчереди",         ЭлементОчереди);
		
		Если ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена Тогда
			
			НоваяСтрока = ПараметрыОбмена.ВремяВыполнения.Добавить();
			НоваяСтрока.Операция           = ЭлементОчереди.Операция;
			НоваяСтрока.КоличествоСекунд   = ДанныеВыполненияЗаявки.prdcRsltDate - ДанныеВыполненияЗаявки.rcvDate;
			НоваяСтрока.КоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
			
			Если РезультатОбработкиЗаявки.Данные <> Неопределено
				И РезультатОбработкиЗаявки.Данные.Свойство(ТипВЕТИС) Тогда
				
				ДанныеДокумента.Объект = РезультатОбработкиЗаявки.Данные[ТипВЕТИС];
				
				// В некоторых случаях из Меркурия приходит некорректный ответ на запрос измененных ВСД:
				//<?xml version="1.0" encoding="UTF-8"?>
				//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
				//<soap:Body>
				//<receiveApplicationResultResponse xmlns="http://api.vetrf.ru/schema/cdm/application/ws-definitions">
				// <application xmlns="http://api.vetrf.ru/schema/cdm/application">
				//  <applicationId>a3044a18-665a-47cb-93a2-d7b0e57d61ea</applicationId>
				//   <status>COMPLETED</status>
				//   <serviceId>mercury-g2b.service</serviceId>
				//   <issuerId>191d7678-a8d0-40ba-9e87-662a1e68a546</issuerId>
				//   <issueDate>2019-09-12T11:25:54+03:00</issueDate>
				//   <rcvDate>2019-09-12T11:39:02+03:00</rcvDate>
				//   <prdcRsltDate>2019-09-12T11:39:37+03:00</prdcRsltDate>
				//   <result>
				//     <ns2:getVetDocumentChangesListResponse xmlns:ns2="http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2" xmlns:ns1="http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"/>
				//   </result>
				// </application>
				//</receiveApplicationResultResponse>
				//</soap:Body>
				//</soap:Envelope>
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийВетИС.ЗапросИзмененныхВСД Тогда
					
					ПараметрыСписка = ДанныеДокумента.Объект.vetDocumentList;
					Если ПараметрыСписка = Неопределено Тогда
						
						ЭлементОчереди.ИдентификаторЗаявки = Неопределено; // Старый идентификатор более не актуален
						Если ИнтеграцияВЕТИС.ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
							ИнтеграцияВЕТИС.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, Ложь);
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийВетИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
					
					ПараметрыСписка = ДанныеДокумента.Объект.stockEntryList;
					Если ПараметрыСписка = Неопределено Тогда
						
						ЭлементОчереди.ИдентификаторЗаявки = Неопределено; // Старый идентификатор более не актуален
						Если ИнтеграцияВЕТИС.ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
							ИнтеграцияВЕТИС.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, Ложь);
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
				ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДанныеДокумента.Документ);
				ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", ДанныеДокумента.ВходящееСообщениеXML);
				ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
					НСтр("ru = '[ВОЗМОЖНО ДУБЛИРОВАНИЕ] При обработке ответа потерялись данные'"),
					ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
				
				ИнтеграцияВЕТИС.ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена);
				ДополнительныеПараметры.ЕстьОшибкиСервиса = Истина;
				
			КонецЕсли;
			
			ДополнительныеПараметры.ВремяВыполнения = НоваяСтрока;
			
		ИначеЕсли ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена Тогда
			
			ЕстьОшибкиТребующиеПовторногоЗапроса = Ложь;
			
			Ошибки = Новый Массив;
			errors = РезультатОбработкиЗаявки.РезультатОбработкиОтвета.Результат.errors;
			Если errors <> Неопределено Тогда
				Для Каждого СтрокаТЧ Из errors.error Цикл
					
					Ошибка = Новый Структура;
					Ошибка.Вставить("Код",         СтрокаТЧ.code);
					Ошибка.Вставить("ТекстОшибки", СтрокаТЧ.__content);
					
					Ошибки.Добавить(Ошибка);
					
					Если СтрНайти(ВРег(СтрокаТЧ.code), "APLM0012")
						Или СтрНайти(ВРег(СтрокаТЧ.code), "APLM0017") Тогда
						
						ЕстьОшибкиТребующиеПовторногоЗапроса = Истина;
						ДополнительныеПараметры.ЕстьОшибкиСервиса = Истина; // Ошибка регистрируется для документов и для запросов списков!
						
						ОперацииСОшибкойСервиса = Новый Массив;
						ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеВходящейПартии);
						ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеРезультатовИнвентаризации);
						ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеТранспортнойПартии);
						ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
						ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеПроизводственнойПартии);
						
						Если ОперацииСОшибкойСервиса.Найти(ЭлементОчереди.Операция) <> Неопределено Тогда
							
							ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
							ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДанныеДокумента.Документ);
							ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", ДанныеДокумента.ВходящееСообщениеXML);
							ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
								СтрШаблон(
									НСтр("ru = '[ВОЗМОЖНО ДУБЛИРОВАНИЕ] При обработке ответа возникла ошибка %1, номер попытки: %2'"),
									ВРег(СтрокаТЧ.code), ЭлементОчереди.КоличествоИтераций),
								ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
							
							ИнтеграцияВЕТИС.ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьОшибкиТребующиеПовторногоЗапроса И Не ЭлементОчереди.ЕстьОшибкиСервиса
				И (
					ПараметрыОбмена.КоличествоПовторныхЗапросов < 0
					Или ЭлементОчереди.КоличествоИтераций < ПараметрыОбмена.КоличествоПовторныхЗапросов) Тогда
				
				ЭлементОчереди.ИдентификаторЗаявки = Неопределено; // Старый идентификатор более не актуален
				Если ИнтеграцияВЕТИС.ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
					ИнтеграцияВЕТИС.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, Ложь);
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеДокумента.Ошибки = Ошибки;
			
		ИначеЕсли ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаПоиска Тогда
			
			// Если запрашивать результат по заявке отправленной в ВетИС более чем 3 дня назад - возникает ошибка поиска.
			// Результат по таким документам необходимо восстанавливать по аналогии с ошибками сервиса.
			ОперацииСОшибкойСервиса = Новый Массив;
			ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеВходящейПартии);
			ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеРезультатовИнвентаризации);
			ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеТранспортнойПартии);
			ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
			ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеПроизводственнойПартии);
			
			Если ОперацииСОшибкойСервиса.Найти(ЭлементОчереди.Операция) <> Неопределено Тогда
				
				ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
				ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДанныеДокумента.Документ);
				ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", ДанныеДокумента.ВходящееСообщениеXML);
				ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
					НСтр("ru = '[ВОЗМОЖНО ДУБЛИРОВАНИЕ] Потерян результат по заявке, отправленной в ВетИС более чем 3 дней назад'"),
					ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
				
				ИнтеграцияВЕТИС.ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена);
				ДополнительныеПараметры.ЕстьОшибкиСервиса = Истина;
				
			Иначе
				
				Ошибки = Новый Массив;
				Ошибка = Новый Структура;
				Ошибка.Вставить("Код", "1С-Timeout");
				Ошибка.Вставить("ТекстОшибки", СтрШаблон(
					НСтр("ru = '%2 по заявке %1 не получен, поскольку обмен не выполнялся длительное время (более 3-х дней):
					           |Результат обработки заявки уже удален. Выполните операцию повторно.'"),
					ДанныеДокумента.ИдентификаторЗаявки,
					ДанныеДокумента.ВходящаяОперация));
				Ошибки.Добавить(Ошибка);
				
				ДанныеДокумента.Ошибки          = Ошибки;
				ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается Тогда
			
			ДанныеФормированияРезультата = ИнтеграцияВЕТИС.ДатаФормированияРезультата(ЭлементОчереди, ПараметрыОбмена, ДанныеВыполненияЗаявки);
			
			ВремяОжидания = ТекущаяУниверсальнаяДата() - ДанныеФормированияРезультата.Дата;
			Если ПараметрыОбмена.ВремяОжиданияОбработкиЗаявки < 0
				Или ВремяОжидания < ПараметрыОбмена.ВремяОжиданияОбработкиЗаявки Тогда
				
				Продолжить;
				
			Иначе
				
				ОперацииСОшибкойСервиса = Новый Массив;
				ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеВходящейПартии);
				ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеРезультатовИнвентаризации);
				ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеТранспортнойПартии);
				ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
				ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВетИС.ЗапросНаОформлениеПроизводственнойПартии);
				
				Если ОперацииСОшибкойСервиса.Найти(ЭлементОчереди.Операция) <> Неопределено Тогда
					
					ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
					ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДанныеДокумента.Документ);
					ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", ДанныеДокумента.ВходящееСообщениеXML);
					
					ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
						СтрШаблон(
							НСтр("ru = '[ВОЗМОЖНО ДУБЛИРОВАНИЕ] Превышено время ожидания результата по заявке.
							            |Время ожидания составило %1 секунд.
							            |Источник начала отсчета времени: %2'"),
							ВремяОжидания, ДанныеФормированияРезультата.Источник),
						ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
					
					ИнтеграцияВЕТИС.ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена);
					ДополнительныеПараметры.ЕстьОшибкиСервиса = Истина;
					
				ИначеЕсли ПараметрыОбмена.ОтправлятьЗависшиеЗапросыПовторно
					И ИнтеграцияВЕТИС.ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
					
					ЭлементОчереди.ИдентификаторЗаявки = Неопределено; // Старый идентификатор более не актуален
					ИнтеграцияВЕТИС.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, Ложь);
					Продолжить;
					
				Иначе
					
					Ошибки = Новый Массив;
					Ошибка = Новый Структура;
					Ошибка.Вставить("Код", "1С-Timeout");
					Ошибка.Вставить("ТекстОшибки", СтрШаблон(
						НСтр("ru = '%2 по заявке %1 не получен в течении 30 минут.
						           |С большой долей вероятности результат выполнения заявки - это ошибка APLM0012.
						           |Ожидание результата выполнения заявки прекращено.'"),
						ДанныеДокумента.ИдентификаторЗаявки,
						ДанныеДокумента.ВходящаяОперация));
					Ошибки.Добавить(Ошибка);
					
					ДанныеДокумента.Ошибки          = Ошибки;
					ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
			ВсеВСДЗагружены = Истина;
			Для каждого СтрокаВСД Из ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы.ВетеринарноСопроводительныйДокументВЕТИС Цикл
				Если Не ЗначениеЗаполнено(СтрокаВСД.Значение) Тогда
					
					ВсеВСДЗагружены = Ложь;
					
					СообщениеВСД = ЗаявкиВЕТИС.ПодготовитьЗапросВетеринарноСопроводительногоДокументаПоUUID(
						ЭлементОчереди.ХозяйствующийСубъект,
						ЭлементОчереди.Предприятие,
						СтрокаВСД.Ключ,
						ПараметрыОбмена);
					
					НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
					НоваяЗависимость.Сообщение1 = ЭлементОчереди.Сообщение;
					НоваяЗависимость.Сообщение2 = СообщениеВСД;
					НоваяЗависимость.Загрузка   = Ложь;
					НоваяЗависимость.Передача   = Ложь;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Не ВсеВСДЗагружены Тогда
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
		
		НайденныеСсылкиПриОткатеТранзакции = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки, Ложь);
		
		ТранзакцияЗафиксирована = Неопределено;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийВЕТИС.Измерения.Сообщение.Тип);
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийВЕТИС");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
			НаборЗаписей.Прочитать();
			
			Если Не НаборЗаписей.Выбран() Тогда
				
				ОтменитьТранзакцию();
				
				// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
				ИнтеграцияВЕТИС.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				
				ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
					ОписаниеЗамера, 1, ТипВЕТИС);
				
				Продолжить;
				
			КонецЕсли;
			
			// Первое чтение ссылок произошло вне транзакции для уменьшения количества блокируемых объектов.
			// Теперь получаем не существующие объекты, выполняем блокировку по данным ссылкам и выполняем повторное
			// ответственное чтение
			Если ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты.Количество() > 0 Тогда
				
				Блокировка = Новый БлокировкаДанных;
				
				ТаблицыБлокируемыхСсылок = Новый Структура;
				
				Для каждого ИмяОбъектаМетаданныхИОбъекты Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
					
					ИмяТаблицы = ИмяОбъектаМетаданныхИОбъекты.Ключ;
					ИмяПространстваБлокировки = "";
					Если Метаданные.Справочники.Найти(ИмяТаблицы) <> Неопределено Тогда
						ИмяПространстваБлокировки = "Справочник." + ИмяТаблицы;
						ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка." + ИмяТаблицы);
						Менеджер = Справочники[ИмяТаблицы];
					ИначеЕсли Метаданные.Документы.Найти(ИмяТаблицы) <> Неопределено Тогда
						ИмяПространстваБлокировки = "Документ." + ИмяТаблицы;
						ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка." + ИмяТаблицы);
						Менеджер = Документы[ИмяТаблицы];
					КонецЕсли;
					ТаблицыБлокируемыхСсылок.Вставить(ИмяТаблицы, Новый ТаблицаЗначений);
					ТаблицыБлокируемыхСсылок[ИмяТаблицы].Колонки.Добавить("Ссылка", ОписаниеТипов);
					
					Для каждого ИдентификаторИДанныеОбъекта Из ИмяОбъектаМетаданныхИОбъекты.Значение Цикл
						СсылкаНаОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторИДанныеОбъекта.Ключ));
						ТаблицыБлокируемыхСсылок[ИмяТаблицы].Добавить().Ссылка = СсылкаНаОбъект;
					КонецЦикла;
					
					ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировки);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
					ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок[ИмяТаблицы];
					
				КонецЦикла;
				
				Блокировка.Заблокировать();
				
				// Ответственное чтение для проверки существования ссылок
				ИнтеграцияВЕТИС.СсылкиПоИдентификаторам(
					ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты,
					ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки);
				
			КонецЕсли;
			
			ДанныеЗагруженногоДокумента = Неопределено;
			
			Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияПредприятия Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатРегистрацииИзмененияПредприятия(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияХозяйствующегоСубъекта Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатРегистрацииИзмененияХозяйствующегоСубъекта(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИзмененияПродукции Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатРегистрацииИзмененияПродукции(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросСозданияИзмененияСвязиСПлощадкой Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатСозданияИзмененияСвязиСПлощадкой(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаИзмененныхВСД(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВСД Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаВСД(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросНаАннулированиеВСД Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаНаАннулированиеВСД(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВсехВСД Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаВсехВСД(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
					
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписиСкладскогоЖурнала Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаЗаписиСкладскогоЖурнала(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписейСкладскогоЖурнала Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаАктуальныхЗаписейСкладскогоЖурнала(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаИзмененныхЗаписейСкладскогоЖурнала(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПользователейХозяйствующегоСубъекта Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаПользователейХозяйствующегоСубъекта(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросДоступныхДляНазначенияПрав Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаДоступныхДляНазначенияПрав(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросДанныхПользователя Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаДанныхПользователя(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияПравПользователей Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаИзмененияПравПользователей(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияЗонОтветственностиПользователей Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаИзмененияЗонОтветственностиПользователей(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИПривязкиПользователейХозяйствующегоСубъекта Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаРегистрацииИПривязкиПользователейХозяйствующегоСубъекта(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросУдаленияСвязиПользователейСХозяйствующимСубъектом Тогда
				
				ДанныеЗагруженногоДокумента = ПользователиВЕТИС.ОбработатьРезультатЗапросаУдаленияСвязиПользователейСХозяйствующимСубъектом(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
				
				ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
				
				ДанныеЗагруженногоДокумента = МенеджерОбъекта.ОбработатьОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВнесенияСведенийОВетеринарныхМероприятиях Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатЗапросаИзмененныхСведенийОВетеринарныхОперациях(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств Тогда
				
				ДанныеЗагруженногоДокумента = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ОбработатьРезультатЗапросаНаВнесениеНомеровТранспортныхСредствВПунктахПерегрузки(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияРезультатовИнвентаризации Тогда
				
				ДанныеЗагруженногоДокумента = ИнтеграцияВЕТИС.ОбработатьРезультатИнвентаризацияПродукции(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияПроизводственнойПартии Тогда
				
				ДанныеЗагруженногоДокумента = Документы.ПроизводственнаяОперацияВЕТИС.ОбработатьРезультатЗапросаНаОформлениеПроизводственнойПартии(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОбъединенияЗаписейСкладскогоЖурнала Тогда
				
				ДанныеЗагруженногоДокумента = Документы.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.ОбработатьРезультатЗапросаНаОбъединениеЗаписейСкладскогоЖурнала(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияТранспортнойПартии Тогда
				
				ДанныеЗагруженногоДокумента = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ОбработатьРезультатЗапросаНаОформлениеТранспортнойПартии(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии
				Или Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПакетногоГашенияВСД Тогда
				
				ДанныеЗагруженногоДокумента = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ОбработатьРезультатЗапросаНаОформлениеВходящейПартии(
					ДанныеДокумента,
					ЭлементОчереди.ХозяйствующийСубъект,
					ЭлементОчереди.Предприятие,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неизвестная операция'");
				
			КонецЕсли;
			
			ТранзакцияЗафиксирована = Истина;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипВЕТИС);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭлементОчереди.ХозяйствующийСубъект, "Наименование, Идентификатор");
			ПредставлениеХС = СтрШаблон(
				"%1(%2)",
				ЗначенияРеквизитов.Наименование,
				ЗначенияРеквизитов.Идентификатор);
			Если ЗначениеЗаполнено(ЭлементОчереди.Предприятие) Тогда
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ЭлементОчереди.Предприятие, "Наименование, Идентификатор");
				ПредставлениеПредприятия = СтрШаблон(
					"%1(%2)",
					ЗначенияРеквизитов.Наименование,
					ЗначенияРеквизитов.Идентификатор);
			Иначе
				ПредставлениеПредприятия = НСтр("ru = '<не указано>'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При загрузке документа с типом %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Хозяйствующий субъект: %3
				           |Предприятие: %4
				           |Текст XML см. в журнале регистрации.'"),
				ТипВЕТИС,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПредставлениеХС,
				ПредставлениеПредприятия);
			
			ТекстОшибкиЖурналРегистрации = СтрШаблон(
				НСтр("ru = 'При загрузке документа с типом %1 возникла ошибка:
				           |Текст ошибки: %2
				           |Хозяйствующий субъект: %3
				           |Предприятие: %4
				           |Текст XML:
				           |%5'"),
				ТипВЕТИС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПредставлениеХС,
				ПредставлениеПредприятия,
				РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
				
			ОбъектМетаданных = Неопределено;
			Если ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
				ОбъектМетаданных = ДанныеДокумента.Документ.Метаданные();
			КонецЕсли;
			
			ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ДанныеДокумента.Документ);
			
			// Для того, чтобы в структуре не было битых ссылок, возвращаем предыдущее значение найденных ссылок
			ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки = НайденныеСсылкиПриОткатеТранзакции;
			
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована
			И (ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена
			   Или ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена
			   Или ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаПоиска)
			И Не ЭлементОчереди.ЕстьОшибкиСервиса Тогда
			
			ИнтеграцияВЕТИС.УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		ИначеЕсли Не ТранзакцияЗафиксирована Тогда
			
			СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
			СтрокаРезультата.Предприятие          = ЭлементОчереди.Предприятие;
			СтрокаРезультата.Операция             = ДанныеДокумента.ВходящаяОперация;
			СтрокаРезультата.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Истина;
			
			СтрокаРезультата.ИсходящееСообщение = Неопределено;
			СтрокаРезультата.ВходящееСообщение  = Неопределено;
			
			СтрокаРезультата.Объект            = ДанныеДокумента.Документ;
			СтрокаРезультата.ДокументОснование = ДанныеДокумента.ДокументОснование;
			СтрокаРезультата.НовыйСтатус       = Неопределено;
			СтрокаРезультата.ОбъектИзменен     = Ложь;
			
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
			СтрокаСтопЛист = ПараметрыОбмена.СтопЛист.Добавить();
			СтрокаСтопЛист.ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
			СтрокаСтопЛист.Предприятие          = ЭлементОчереди.Предприятие;
			
			// Изменение даты обмена в регистре СинхронизацияКлассификаторовВЕТИС.
			Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала
				Или Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
				Попытка
					ИнтеграцияВЕТИС.УстановитьДатуВыполненияСинхронизации(
						Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
						Неопределено, Неопределено,
						ЭлементОчереди.ХозяйствующийСубъект,
						ЭлементОчереди.Предприятие);
				Исключение
					ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
						ПодробноеПредставлениеОшибки(
							ИнформацияОбОшибке())); 
				КонецПопытки;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
		Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
			
			Если ТипЗнч(ДанныеЗагруженногоДокумента) = Тип("Массив") Тогда
				Для Каждого Данные Из ДанныеЗагруженногоДокумента Цикл
					ПараметрыОбмена.Изменения.Добавить(Данные);
				КонецЦикла;
			Иначе
				ПараметрыОбмена.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Функция ЗапросПолученияРезультатаОбработкиЗаявкиXML(ХозяйствующийСубъект, ИдентификаторЗаявки, НастройкаОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ПолучениеРезультатаЗапроса;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ЗапросКвитанции = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	ЗапросКвитанции.apiKey        = НастройкаОбмена.КлючAPI;
	ЗапросКвитанции.issuerId      = НастройкаОбмена.Идентификатор;
	ЗапросКвитанции.applicationId = ИдентификаторЗаявки;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(ЗапросКвитанции, ПространствоИмен, ИмяТипа);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ПолучитьРезультатОбработкиЗаявки(Сообщение, НастройкаОбмена, Операция, ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Результат");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Данные");
	ВозвращаемоеЗначение.Вставить("СтатусОбработки");
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "receiveApplicationResult";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.ОбработкаЗаявок;
	ПараметрыЗапроса.ИмяЭлемента      = "application";
	ПараметрыЗапроса.Представление    = Сообщение.Описание;
	ПараметрыЗапроса.ФорматОбмена     = Перечисления.ФорматыОбменаВЕТИС.V2_1;
	
	РезультатОтправкиЗапроса = Неопределено;
	ИнтеграцияВЕТИСПереопределяемый.ПередОтправкойЗапроса(Сообщение.ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса);
	Если РезультатОтправкиЗапроса = Неопределено Тогда
		РезультатОтправкиЗапроса = ИнтеграцияВЕТИСВызовСервера.ОтправитьЗапрос(
			Сообщение.ТекстСообщенияXML,
			ПараметрыЗапроса.Сервис, ПараметрыЗапроса.ИмяМетода, НастройкаОбмена);
	КонецЕсли;
	ИнтеграцияВЕТИСПереопределяемый.ПослеОтправкиЗапроса(Сообщение.ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ДанныеОбработки = ИнтеграцияВЕТИС.ОбработатьОтветНаПередачуДанных(РезультатОтправкиЗапроса, ПараметрыЗапроса, Операция, ПараметрыОбмена);
		
		Если ДанныеОбработки.Результат <> Неопределено Тогда
			ВозвращаемоеЗначение.Данные = ДанныеОбработки.Результат.result;
		КонецЕсли;
		
		ВозвращаемоеЗначение.СтатусОбработки                      = ДанныеОбработки.СтатусОбработки;
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.Результат   = ДанныеОбработки.Результат;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Выгрузка

Процедура ПодготовитьЗапросыДляЗагрузкиИзмененныхДанных(ПараметрыОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПредприятияЗонОтветственностиВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	КОЛИЧЕСТВО(ПредприятияЗонОтветственностиВЕТИС.Предприятие) КАК КоличествоПредприятий,
	|	0 КАК КоличествоАдресовЗонОтветственности
	|ПОМЕСТИТЬ втЗоныОтветственностиПользователяВЕТИС
	|ИЗ
	|	РегистрСведений.ПредприятияЗонОтветственностиВЕТИС КАК ПредприятияЗонОтветственностиВЕТИС
	|ГДЕ
	|	ПредприятияЗонОтветственностиВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредприятияЗонОтветственностиВЕТИС.ХозяйствующийСубъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АдресаЗонОтветственностиВЕТИС.ХозяйствующийСубъект,
	|	0,
	|	СУММА(1)
	|ИЗ
	|	РегистрСведений.АдресаЗонОтветственностиВЕТИС КАК АдресаЗонОтветственностиВЕТИС
	|ГДЕ
	|	АдресаЗонОтветственностиВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	АдресаЗонОтветственностиВЕТИС.ХозяйствующийСубъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗоныОтветственностиПользователяВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СУММА(втЗоныОтветственностиПользователяВЕТИС.КоличествоПредприятий) КАК КоличествоПредприятий,
	|	СУММА(втЗоныОтветственностиПользователяВЕТИС.КоличествоАдресовЗонОтветственности) КАК КоличествоАдресовЗонОтветственности
	|ПОМЕСТИТЬ ЗоныОтветственностиПользователяВЕТИС
	|ИЗ
	|	втЗоныОтветственностиПользователяВЕТИС КАК втЗоныОтветственностиПользователяВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗоныОтветственностиПользователяВЕТИС.ХозяйствующийСубъект
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ХозяйствующийСубъект,
	|	Т.Предприятие
	|ПОМЕСТИТЬ ХСПредприятияОжидающиеВСД
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК Т
	|ГДЕ
	|	ВЫБОР КОГДА Т.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ПустаяСсылка) ТОГДА
	|		Т.Сообщение.Операция
	|	ИНАЧЕ
	|		Т.Операция
	|	КОНЕЦ В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросВсехВСД))
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ХозяйствующийСубъект,
	|	Т.Предприятие
	|ПОМЕСТИТЬ ХСПредприятияОжидающиеЗаписиСкладскогоЖурнала
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК Т
	|ГДЕ
	|	ВЫБОР КОГДА Т.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ПустаяСсылка) ТОГДА
	|		Т.Сообщение.Операция
	|	ИНАЧЕ
	|		Т.Операция
	|	КОНЕЦ В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК ХозяйствующийСубъект,
	|	Таблица.Предприятие КАК Предприятие,
	|	ВЫБОР КОГДА ХСПредприятияОжидающиеВСД.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьИзмененныеВСД,
	|	ВЫБОР КОГДА ХСПредприятияОжидающиеЗаписиСкладскогоЖурнала.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьИзмененныеЗаписиСкладскогоЖурнала
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗоныОтветственностиПользователяВЕТИС КАК ЗоныОтветственностиПользователяВЕТИС
	|		ПО ЗоныОтветственностиПользователяВЕТИС.ХозяйствующийСубъект = Таблица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредприятияЗонОтветственностиВЕТИС КАК ПредприятияЗонОтветственностиВЕТИС
	|		ПО (ПредприятияЗонОтветственностиВЕТИС.Предприятие = Таблица.Предприятие)
	|			И (ПредприятияЗонОтветственностиВЕТИС.ХозяйствующийСубъект = Таблица.Ссылка)
	|			И (ПредприятияЗонОтветственностиВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХСПредприятияОжидающиеВСД
	|		ПО ХСПредприятияОжидающиеВСД.Предприятие = Таблица.Предприятие
	|			И ХСПредприятияОжидающиеВСД.ХозяйствующийСубъект = Таблица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХСПредприятияОжидающиеЗаписиСкладскогоЖурнала
	|		ПО ХСПредприятияОжидающиеЗаписиСкладскогоЖурнала.Предприятие = Таблица.Предприятие
	|			И ХСПредприятияОжидающиеЗаписиСкладскогоЖурнала.ХозяйствующийСубъект = Таблица.Ссылка
	|ГДЕ
	|	Не Таблица.НеИспользовать
	|	И Таблица.Ссылка В(&ХозяйствующиеСубъекты)
	|	И (ЕСТЬNULL(ЗоныОтветственностиПользователяВЕТИС.КоличествоПредприятий, 0) = 0
	|				И ЕСТЬNULL(ЗоныОтветственностиПользователяВЕТИС.КоличествоАдресовЗонОтветственности, 0) = 0
	|			ИЛИ НЕ ПредприятияЗонОтветственностиВЕТИС.Предприятие ЕСТЬ NULL)");
	
	Запрос.УстановитьПараметр("ХозяйствующиеСубъекты", ПараметрыОбмена.ХозяйствующиеСубъекты);
	Запрос.УстановитьПараметр("ПользовательВЕТИС",     ПользователиВЕТИС.ПользовательВЕТИС(Пользователи.ТекущийПользователь()));
	
	РазмерПорции = ПараметрыОбмена.РазмерПорции;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПараметрыОбмена.Предприятия <> Неопределено Тогда
			ПредприятияДляОбмена = ПараметрыОбмена.Предприятия.Получить(Выборка.ХозяйствующийСубъект);
			Если ПредприятияДляОбмена <> Неопределено
				И ПредприятияДляОбмена.Найти(Выборка.Предприятие) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЗапрашиватьИзмененныеВСД Тогда
			ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(
				Выборка.ХозяйствующийСубъект,
				Выборка.Предприятие, РазмерПорции, ПараметрыОбмена);
		КонецЕсли;
		
		Если Выборка.ЗапрашиватьИзмененныеЗаписиСкладскогоЖурнала И ПараметрыОбмена.ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала Тогда
			ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(
				Выборка.ХозяйствующийСубъект,
				Выборка.Предприятие, РазмерПорции, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПередатьСообщениеВСервисОбработкиЗаявок(ЭлементОчереди, РеквизитыСообщения, НастройкаОбмена, ПараметрыОбмена) Экспорт
	
	ИсходящееСообщение = ЭлементОчереди.Сообщение;
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	// Для обработки очереди в фоне
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса");
	ВозвращаемоеЗначение.Вставить("ПараметрыЗапроса");
	ВозвращаемоеЗначение.Вставить("ДатаСоздания");
	ВозвращаемоеЗначение.Вставить("РеквизитыВходящегоСообщения");
	
	ДокументСсылка       = РеквизитыСообщения.Документ;
	ДокументОснование    = РеквизитыСообщения.ДокументОснование;
	Операция             = РеквизитыСообщения.Операция;
	ФорматОбмена         = РеквизитыСообщения.ФорматОбмена;
	ХозяйствующийСубъект = РеквизитыСообщения.ХозяйствующийСубъект;
	Предприятие          = РеквизитыСообщения.Предприятие;
	
	ВозвращаемоеЗначение.Документ          = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "submitApplication";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.ОбработкаЗаявок;
	ПараметрыЗапроса.ИмяЭлемента      = "application";
	ПараметрыЗапроса.Представление    = НСтр("ru = 'заявка'");
	
	РеквизитыИсходящегоСообщения = Неопределено;
	Если РеквизитыСообщения.РеквизитыИсходящегоСообщения <> Неопределено Тогда
		РеквизитыИсходящегоСообщения = РеквизитыСообщения.РеквизитыИсходящегоСообщения.Получить();
		ТекстСообщенияXML = РеквизитыИсходящегоСообщения.ТекстСообщенияXML;
	ИначеЕсли ТипЗнч(ИсходящееСообщение) <> Тип("Строка") Тогда
		ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ИсходящееСообщение);
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	РезультатОтправкиЗапроса = Неопределено;
	ИнтеграцияВЕТИСПереопределяемый.ПередОтправкойЗапроса(ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса);
	Если РезультатОтправкиЗапроса = Неопределено Тогда
		РезультатОтправкиЗапроса = ИнтеграцияВЕТИСВызовСервера.ОтправитьЗапрос(
			ТекстСообщенияXML,
			ПараметрыЗапроса.Сервис, ПараметрыЗапроса.ИмяМетода, НастройкаОбмена);
	КонецЕсли;
	ИнтеграцияВЕТИСПереопределяемый.ПослеОтправкиЗапроса(ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса);
	ТекущаяДатаОтправки = МестноеВремя(ТекущаяУниверсальнаяДата());
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.КодСостояния = 408 Тогда
		
		ТипыОперацийСОшибкойСервиса = Новый Массив;
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД);
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
		ТипыОперацийСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
		
		Если ТипыОперацийСОшибкойСервиса.Найти(Операция) <> Неопределено Тогда
			
			ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
			ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДокументСсылка);
			ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", ТекстСообщенияXML);
			ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
				НСтр("ru = '[ВОЗМОЖНО ДУБЛИРОВАНИЕ] Передача сообщения прервана по таймауту'"),
				ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
			
			ИнтеграцияВЕТИС.ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЕстьОшибкиСервиса", Истина);
			
			ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
				ДокументСсылка,
				Операция,
				Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка,
				ДополнительныеПараметры);
			
			ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(
				ЭлементОчереди.Сообщение,
				Истина);
			
			Если ЗначениеЗаполнено(РезультатОтправкиЗапроса.ТекстОшибки) Тогда
				ТекстОшибки = РезультатОтправкиЗапроса.ТекстОшибки;
			Иначе
				ТекстОшибки = НСтр("ru = 'При отправке запроса возникла ошибка HTTP 408: Timeout'");
			КонецЕсли;
			
			РеквизитыВходящегоСообщения = Новый Структура;
			РеквизитыВходящегоСообщения.Вставить("ТипСообщения",                Перечисления.ТипыЗапросовИС.Входящий);
			РеквизитыВходящегоСообщения.Вставить("Операция",                    Операция);
			РеквизитыВходящегоСообщения.Вставить("Документ",                    ДокументСсылка);
			РеквизитыВходящегоСообщения.Вставить("СообщениеОснование",          ИсходящееСообщение);
			РеквизитыВходящегоСообщения.Вставить("Описание",                    ТекстОшибки);
			РеквизитыВходящегоСообщения.Вставить("ИдентификаторЗапроса",        Неопределено);
			РеквизитыВходящегоСообщения.Вставить("ФорматОбмена",                ФорматОбмена);
			РеквизитыВходящегоСообщения.Вставить("ХозяйствующийСубъект",        ХозяйствующийСубъект);
			РеквизитыВходящегоСообщения.Вставить("Предприятие",                 Предприятие);
			РеквизитыВходящегоСообщения.Вставить("СтатусОбработки",             Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаОтправки);
			РеквизитыВходящегоСообщения.Вставить("ДатаФормированияРезультата",  ТекущаяУниверсальнаяДата());
			
			РеквизитыВходящегоСообщенияВХранилищеЗначения = Новый ХранилищеЗначения(РеквизитыВходящегоСообщения);
			
			ВозвращаемоеЗначение.РеквизитыВходящегоСообщения = РеквизитыВходящегоСообщенияВХранилищеЗначения;
			
			ВходящееСообщение = ИнтеграцияВЕТИС.ДобавитьЗаписьВПротоколОбмена(
				ТекстОшибки, РеквизитыВходящегоСообщения, Истина).Ссылка;
			
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP;
		
		ДанныеОбработки = ИнтеграцияВЕТИС.ОбработатьОтветНаПередачуДанных(РезультатОтправкиЗапроса, ПараметрыЗапроса, Неопределено, ПараметрыОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято ВетИС:
					           |Текст ошибки: %2'"),
					ДокументСсылка,
					ДанныеОбработки.ТекстОшибки);
				Возврат ВозвращаемоеЗначение;
			Иначе
				ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ВетИС:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
				Возврат ВозвращаемоеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка Тогда
			ИдентификаторЗапроса = "";
		Иначе
			
			ПараметрыОбмена.ОтклонениеВремениМеждуСерверами = ДанныеОбработки.Результат.rcvDate - ТекущаяДатаОтправки;
			ИдентификаторЗапроса = ДанныеОбработки.Результат.applicationId;
			
		КонецЕсли;
		
		РеквизитыВходящегоСообщения = Новый Структура;
		РеквизитыВходящегоСообщения.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
		РеквизитыВходящегоСообщения.Вставить("Операция",             Операция);
		РеквизитыВходящегоСообщения.Вставить("Документ",             ДокументСсылка);
		РеквизитыВходящегоСообщения.Вставить("СообщениеОснование",   ИсходящееСообщение);
		РеквизитыВходящегоСообщения.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
		РеквизитыВходящегоСообщения.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		РеквизитыВходящегоСообщения.Вставить("ФорматОбмена",         ФорматОбмена);
		РеквизитыВходящегоСообщения.Вставить("ХозяйствующийСубъект",        ХозяйствующийСубъект);
		РеквизитыВходящегоСообщения.Вставить("Предприятие",                 Предприятие);
		РеквизитыВходящегоСообщения.Вставить("СтатусОбработки",             ДанныеОбработки.СтатусОбработки);
		РеквизитыВходящегоСообщения.Вставить("ДатаФормированияРезультата",  УниверсальноеВремя(ДанныеОбработки.Результат.rcvDate));
		
		РеквизитыВходящегоСообщенияВХранилищеЗначения = Новый ХранилищеЗначения(РеквизитыВходящегоСообщения);
		
		РезультатДобавленияВОчередь = ИнтеграцияВЕТИС.ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			ИсходящееСообщение,
			ИдентификаторЗапроса, РеквизитыВходящегоСообщенияВХранилищеЗначения);
		
		ВозвращаемоеЗначение.РеквизитыВходящегоСообщения = РеквизитыВходящегоСообщенияВХранилищеЗначения;
		
		Если ТипЗнч(ИсходящееСообщение) <> Тип("Строка") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			ИсходящееСообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
			ИсходящееСообщениеОбъект.ИдентификаторЗапроса = ИдентификаторЗапроса;
			ИсходящееСообщениеОбъект.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ВходящееСообщение = ИнтеграцияВЕТИС.ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				РеквизитыВходящегоСообщения).Ссылка;
			
		КонецЕсли;
		
		// Новый статус возвращается документом если операция - не попытка восстановления.
		Если ЗначениеЗаполнено(ДокументСсылка)
			И Операция <> Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД
			И Операция <> Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
			
			ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, ДанныеОбработки.СтатусОбработки);
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
		ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
		
		ВозвращаемоеЗначение.ИдентификаторЗапроса = ИдентификаторЗапроса;
		ВозвращаемоеЗначение.ДатаСоздания         = РезультатДобавленияВОчередь.ДатаСоздания;
		
	Иначе
		
		Если РеквизитыИсходящегоСообщения <> Неопределено Тогда
			ОписаниеОперации = РеквизитыИсходящегоСообщения.Описание;
		ИначеЕсли ТипЗнч(ИсходящееСообщение) <> Тип("Строка") Тогда
			ОписаниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Описание");
		Иначе
			ОписаниеОперации = НСтр("ru = '<нет описания>'");
		КонецЕсли;
		
		ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
			НСтр("ru='Данные не переданы в ВетИС:
						|%1
						|По причине:
						|%2'"),
			ОписаниеОперации,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ВетеринарноСопроводительныеДокументы

Функция ПодготовитьЗапросВетеринарноСопроводительногоДокументаПоUUID(ХозяйствующийСубъект, Предприятие, Идентификатор, ПараметрыОбмена) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("Предприятие",   Предприятие);
	
	СообщенияXML = ЗапросВетеринарноСопроводительногоДокументаПоUUIDXML(
		ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена);
	
	Возврат ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Ложь, ПараметрыОбмена);

КонецФункции

Функция ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(ХозяйствующийСубъект, Предприятие,
	КоличествоЭлементов, ПараметрыОбмена, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Или Не ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
		
		ПустаяДата = '00010101';
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, &ПустаяДата) КАК ДатаСинхронизации,
		|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.Смещение, 0)                    КАК Смещение
		|ИЗ
		|	РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
		|ГДЕ
		|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = &ТипВЕТИС
		|	И СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И СинхронизацияКлассификаторовВЕТИС.Предприятие = &Предприятие
		|");
		
		Запрос.УстановитьПараметр("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Запрос.УстановитьПараметр("Предприятие",          Предприятие);
		Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НачалоПериода = Выборка.ДатаСинхронизации;
			Смещение      = Выборка.Смещение;
			
			Если ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных <> 0
				И НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных < МестноеВремя(ТекущаяУниверсальнаяДата()) Тогда
				КонецПериода = НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных;
			Иначе
				КонецПериода = Неопределено;
			КонецЕсли;
			
		Иначе
			
			НачалоПериода = ПустаяДата;
			Смещение      = 0;
			
			КонецПериода  = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		НачалоПериода = ДополнительныеПараметры.НачалоПериода;
		
		Если ДополнительныеПараметры.Свойство("Смещение") Тогда
			Смещение  = ДополнительныеПараметры.Смещение;
		Иначе
			Смещение  = 0;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("КонецПериода") Тогда
			КонецПериода  = ДополнительныеПараметры.КонецПериода;
		Иначе
			КонецПериода  = Неопределено;
		КонецЕсли;
		
		Если КонецПериода = Неопределено
			И ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных <> 0
			И НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных < МестноеВремя(ТекущаяУниверсальнаяДата()) Тогда
			
			КонецПериода = НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ХозяйствующийСубъект);
		ПараметрыЗапроса.Вставить("Предприятие",            Предприятие);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора",        Неопределено);
		ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
		ПараметрыЗапроса.Вставить("Смещение",               Смещение);
		ПараметрыЗапроса.Вставить("Интервал",               ИнтеграцияВЕТИСКлиентСервер.СтруктураИнтервала(НачалоПериода, КонецПериода));
		ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Истина);
		ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        Ложь);
		ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", Смещение);
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("ПопыткаВосстановления") Тогда
			ПараметрыЗапроса.Вставить("Документ",              ДополнительныеПараметры.Документ);
			ПараметрыЗапроса.Вставить("ПопыткаВосстановления", ДополнительныеПараметры.ПопыткаВосстановления);
		КонецЕсли;
		
		Возврат ЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(
			ПараметрыЗапроса.ХозяйствующийСубъект,
			ПараметрыЗапроса, ПараметрыОбмена);
		
	Иначе
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтатусВСД", Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Оформлен);
		ПараметрыОтбора.Вставить("ТипВСД",    Перечисления.ТипыВетеринарныхДокументовВЕТИС.Входящий);
		ПараметрыОтбора.Вставить("Интервал",  ИнтеграцияВЕТИСКлиентСервер.СтруктураИнтервала(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ХозяйствующийСубъект);
		ПараметрыЗапроса.Вставить("Предприятие",            Предприятие);
		ПараметрыЗапроса.Вставить("ПараметрыОтбора",        ПараметрыОтбора);
		ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
		ПараметрыЗапроса.Вставить("Смещение",               0);
		ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Истина);
		ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        Ложь);
		ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", 0);
		
		Возврат ЗапросВетеринарноСопроводительныхДокументовXML(
			ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(ХозяйствующийСубъект, Предприятие,
	КоличествоЭлементов, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	СообщенияXML = ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(
		ХозяйствующийСубъект,
		Предприятие,
		КоличествоЭлементов,
		ПараметрыОбмена,
		ДополнительныеПараметры);
	
	ЗагружатьПосле = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ЗагружатьПосле") Тогда
		ЗагружатьПосле = ДополнительныеПараметры.ЗагружатьПосле;
	КонецЕсли;
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов2(КоличествоЭлементов, Смещение, ПараметрыПервогоЗапроса, ПараметрыОбмена, ЗагружатьПосле, ПоследнийЗапрос = Ложь) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ПараметрыПервогоЗапроса.ХозяйствующийСубъект);
	ПараметрыЗапроса.Вставить("Предприятие",            ПараметрыПервогоЗапроса.Предприятие);
	ПараметрыЗапроса.Вставить("ПараметрыОтбора",        ПараметрыПервогоЗапроса.ПараметрыОтбора);
	ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
	ПараметрыЗапроса.Вставить("Смещение",               Смещение);
	ПараметрыЗапроса.Вставить("Интервал",               ПараметрыПервогоЗапроса.Интервал);
	ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Ложь);
	ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        ПоследнийЗапрос);
	ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", ПараметрыПервогоЗапроса.СмещениеПервогоЗапроса);
	
	СообщенияXML = ЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(
		ПараметрыЗапроса.ХозяйствующийСубъект,
		ПараметрыЗапроса, ПараметрыОбмена);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.Изменения[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросВетеринарноСопроводительныхДокументов2(КоличествоЭлементов, Смещение, ПараметрыПервогоЗапроса, ПараметрыОбмена, ЗагружатьПосле, ПоследнийЗапрос = Ложь) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ПараметрыПервогоЗапроса.ХозяйствующийСубъект);
	ПараметрыЗапроса.Вставить("Предприятие",            ПараметрыПервогоЗапроса.Предприятие);
	ПараметрыЗапроса.Вставить("ПараметрыОтбора",        ПараметрыПервогоЗапроса.ПараметрыОтбора);
	ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
	ПараметрыЗапроса.Вставить("Смещение",               Смещение);
	ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Ложь);
	ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        ПоследнийЗапрос);
	ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", ПараметрыПервогоЗапроса.СмещениеПервогоЗапроса);
	
	СообщенияXML = ЗапросВетеринарноСопроводительныхДокументовXML(
		ПараметрыЗапроса.ХозяйствующийСубъект,
		ПараметрыЗапроса, ПараметрыОбмена);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.Изменения[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаписиСкладскогоЖурнала

Функция ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурналаXML(ХозяйствующийСубъект, Предприятие, КоличествоЭлементов,
	ПараметрыОбмена, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Или Не ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
		
		ПустаяДата = '00010101';
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, &ПустаяДата) КАК ДатаСинхронизации,
		|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.Смещение, 0)                    КАК Смещение
		|ИЗ
		|	РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
		|ГДЕ
		|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = &ТипВЕТИС
		|	И СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И СинхронизацияКлассификаторовВЕТИС.Предприятие = &Предприятие
		|");
		
		Запрос.УстановитьПараметр("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Запрос.УстановитьПараметр("Предприятие",          Предприятие);
		Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НачалоПериода = Выборка.ДатаСинхронизации;
			Смещение      = Выборка.Смещение;
			
			Если ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных <> 0
				И НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных < МестноеВремя(ТекущаяУниверсальнаяДата()) Тогда
				КонецПериода = НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных;
			Иначе
				КонецПериода = Неопределено;
			КонецЕсли;
			
		Иначе
			
			НачалоПериода = ПустаяДата;
			Смещение      = 0;
			
			КонецПериода  = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		НачалоПериода = ДополнительныеПараметры.НачалоПериода;
		
		Если ДополнительныеПараметры.Свойство("Смещение") Тогда
			Смещение  = ДополнительныеПараметры.Смещение;
		Иначе
			Смещение  = 0;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("КонецПериода") Тогда
			КонецПериода  = ДополнительныеПараметры.КонецПериода;
		Иначе
			КонецПериода  = Неопределено;
		КонецЕсли;
		
		Если КонецПериода = Неопределено
			И ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных <> 0
			И НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных < МестноеВремя(ТекущаяУниверсальнаяДата()) Тогда
			
			КонецПериода = НачалоПериода + ПараметрыОбмена.ИнтервалЗапросаИзмененныхДанных;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ХозяйствующийСубъект);
		ПараметрыЗапроса.Вставить("Предприятие",            Предприятие);
		ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
		ПараметрыЗапроса.Вставить("Смещение",               Смещение);
		ПараметрыЗапроса.Вставить("Интервал",               ИнтеграцияВЕТИСКлиентСервер.СтруктураИнтервала(НачалоПериода, КонецПериода));
		ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Истина);
		ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        Ложь);
		ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", Смещение);
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("ПопыткаВосстановления") Тогда
			ПараметрыЗапроса.Вставить("Документ",              ДополнительныеПараметры.Документ);
			ПараметрыЗапроса.Вставить("ПопыткаВосстановления", ДополнительныеПараметры.ПопыткаВосстановления);
		КонецЕсли;
		
		Возврат ЗапросИзмененныхЗаписейСкладскогоЖурналаXML(
			ПараметрыЗапроса.ХозяйствующийСубъект,
			ПараметрыЗапроса, ПараметрыОбмена);
		
	Иначе
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ХозяйствующийСубъект);
		ПараметрыЗапроса.Вставить("Предприятие",            Предприятие);
		ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
		ПараметрыЗапроса.Вставить("Смещение",               0);
		ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Истина);
		ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        Ложь);
		ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", Смещение);
		ПараметрыЗапроса.Вставить("Документ",               Неопределено);
		ПараметрыЗапроса.Вставить("Версия",                 0);
		
		Возврат ЗапросЗаписейСкладскогоЖурналаXML(
			ПараметрыЗапроса.ХозяйствующийСубъект,
			ПараметрыЗапроса, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(ХозяйствующийСубъект, Предприятие, КоличествоЭлементов,
	ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	СообщенияXML = ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурналаXML(
		ХозяйствующийСубъект,
		Предприятие,
		КоличествоЭлементов,
		ПараметрыОбмена,
		ДополнительныеПараметры);
	
	ЗагружатьПосле = Неопределено;
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ЗагружатьПосле") Тогда
		ЗагружатьПосле = ДополнительныеПараметры.ЗагружатьПосле;
	КонецЕсли; 
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.ОчередьСообщений.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.ОчередьСообщений[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала2(КоличествоЭлементов, Смещение, ПараметрыПервогоЗапроса, ПараметрыОбмена, ЗагружатьПосле, ПоследнийЗапрос = Ложь) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ПараметрыПервогоЗапроса.ХозяйствующийСубъект);
	ПараметрыЗапроса.Вставить("Предприятие",            ПараметрыПервогоЗапроса.Предприятие);
	ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
	ПараметрыЗапроса.Вставить("Смещение",               Смещение);
	ПараметрыЗапроса.Вставить("Интервал",               ПараметрыПервогоЗапроса.Интервал);
	ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Ложь);
	ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        ПоследнийЗапрос);
	ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", ПараметрыПервогоЗапроса.СмещениеПервогоЗапроса);
	
	СообщенияXML = ЗапросИзмененныхЗаписейСкладскогоЖурналаXML(
		ПараметрыЗапроса.ХозяйствующийСубъект,
		ПараметрыЗапроса, ПараметрыОбмена);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.Изменения[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросЗаписейСкладскогоЖурнала2(КоличествоЭлементов, Смещение, ПараметрыПервогоЗапроса, ПараметрыОбмена, ЗагружатьПосле, ПоследнийЗапрос = Ложь) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХозяйствующийСубъект",   ПараметрыПервогоЗапроса.ХозяйствующийСубъект);
	ПараметрыЗапроса.Вставить("Предприятие",            ПараметрыПервогоЗапроса.Предприятие);
	ПараметрыЗапроса.Вставить("КоличествоЭлементов",    КоличествоЭлементов);
	ПараметрыЗапроса.Вставить("Смещение",               Смещение);
	ПараметрыЗапроса.Вставить("ПервыйЗапрос",           Ложь);
	ПараметрыЗапроса.Вставить("ПоследнийЗапрос",        ПоследнийЗапрос);
	ПараметрыЗапроса.Вставить("СмещениеПервогоЗапроса", ПараметрыПервогоЗапроса.СмещениеПервогоЗапроса);
	ПараметрыЗапроса.Вставить("Документ",               ПараметрыПервогоЗапроса.Документ);
	ПараметрыЗапроса.Вставить("Версия",                 ПараметрыПервогоЗапроса.Версия);
	
	СообщенияXML = ЗапросЗаписейСкладскогоЖурналаXML(
		ПараметрыЗапроса.ХозяйствующийСубъект,
		ПараметрыЗапроса, ПараметрыОбмена);
	
	КоличествоДоВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена, ЗагружатьПосле);
	КоличествоПослеВыполненияОперации = ПараметрыОбмена.Изменения.Количество();
	
	Индекс = КоличествоДоВыполненияОперации;
	Если Индекс < КоличествоПослеВыполненияОперации Тогда
		Возврат ПараметрыОбмена.Изменения[Индекс];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗапросЗаписиСкладскогоЖурналаПоИдентификатору(ХозяйствующийСубъект, Предприятие, Идентификатор, ПараметрыОбмена) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
	ПараметрыЗапроса.Вставить("Предприятие",          Предприятие);
	ПараметрыЗапроса.Вставить("Идентификатор",        Идентификатор);
	
	СообщенияXML = ЗаявкиВЕТИС.ЗапросЗаписиСкладскогоЖурналаПоИдентификаторуXML(
		ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена);
	
	Возврат ИнтеграцияВЕТИС.ПодготовитьСообщенияКПередаче(СообщенияXML, Ложь, ПараметрыОбмена);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Структуры

Функция ДополнительныеПараметрыЗапросаИзмененныхДанных() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НачалоПериода");
	ДополнительныеПараметры.Вставить("Смещение");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗаявками

// Возвращает сформированную заявку для сервиса ВетИС в формате XML
//
// Параметры:
//  Запрос                - ОбъектXDTO   - сформированный запрос данных для сервиса в формате XDTO
//  НастройкаОбмена       - Структура    - настройка обмена
//  ХранилищеВременныхДат - Соответствие - хранилище временных дат
// 
// Возвращаемое значение:
//  Строка - сформированное сообщение для сервиса в формате XML
//
Функция ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат) Экспорт
	
	Если НастройкаОбмена.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V1_4 Тогда
		serviceId = "mercury-g2b.service";
	ИначеЕсли НастройкаОбмена.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_0 Тогда
		serviceId = "mercury-g2b.service:2.0";
	ИначеЕсли НастройкаОбмена.ФорматОбмена = Перечисления.ФорматыОбменаВЕТИС.V2_1 Тогда
		serviceId = "mercury-g2b.service:2.1";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Внутренняя ошибка формирования текста сообщения XML. Формат обмена %1 не поддерживается.'"),
			НастройкаОбмена.ФорматОбмена);
	КонецЕсли;
	
	ИмяМетода        = "submitApplication";
	ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Заявка = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	Заявка.apiKey = НастройкаОбмена.КлючAPI;
	
	Заявка.application = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Заявка, "application");
	Заявка.application.serviceId = serviceId;
	Заявка.application.issuerId  = НастройкаОбмена.Идентификатор;
	
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
		Заявка.application, "issueDate",
		ТекущаяДатаСеанса(), ХранилищеВременныхДат);
	
	Заявка.application.data = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Заявка.application, "data");
	
	// Перевод имя типа в camelCase;
	ИмяТипа = Запрос.Тип().Имя;
	ИмяТипа = НРег(Лев(ИмяТипа, 1)) + Прав(ИмяТипа, СтрДлина(ИмяТипа) - 1);
	
	Заявка.application.data.Добавить(ФормаXML.Элемент, Запрос.Тип().URIПространстваИмен, ИмяТипа, Запрос);
	
	ПространстваИмен = Новый Массив;
	ПространстваИмен.Добавить(ПространствоИмен);
	ПространстваИмен.Добавить(Запрос.Тип().URIПространстваИмен);
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Заявка, ПространстваИмен, ИмяПакета);
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

#Область Запросы

Функция ЗапросНаРегистрациюИзменениеПредприятияXML(ХозяйствующийСубъект, ДанныеПредприятия, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПредприятия;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Если ДанныеПредприятия.Свойство("Ссылка")
		И ЗначениеЗаполнено(ДанныеПредприятия.Ссылка) Тогда
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Изменить);
	Иначе
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Создать);
	КонецЕсли;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.modificationOperation = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "modificationOperation");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation, "type", КодСпособаИзмененияВерсионногоОбъекта, СообщениеXML);
	
	Запрос.modificationOperation.resultingList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation, "resultingList");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "count",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "total",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "offset", 0, СообщениеXML);
	
	#Область Предприятие
	
	enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation.resultingList, "enterprise");
	
	Если ДанныеПредприятия.Свойство("Ссылка")
		И ЗначениеЗаполнено(ДанныеПредприятия.Ссылка) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПредприятия.Ссылка, "Идентификатор, ИдентификаторВерсии");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise, "uuid", Реквизиты.ИдентификаторВерсии, СообщениеXML);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise, "name", ДанныеПредприятия.Наименование, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise, "type", ИнтеграцияВЕТИС.КодТипаПредприятия(ДанныеПредприятия.Тип), СообщениеXML);
	
	ИнтеграцияВЕТИС.УстановитьАдрес(enterprise, ДанныеПредприятия.ДанныеАдреса);
	
	enterprise.activityList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(enterprise, "activityList");
	
	Для Каждого ВидДеятельности Из ДанныеПредприятия.ВидыДеятельности Цикл
		
		activity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(enterprise.activityList, "activity");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(activity, "name", ВидДеятельности, СообщениеXML);
		
		enterprise.activityList.activity.Добавить(activity);
		
	КонецЦикла;
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise.activityList, "count",  enterprise.activityList.activity.Количество(), СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise.activityList, "total",  enterprise.activityList.activity.Количество(), СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(enterprise.activityList, "offset", 0, СообщениеXML);
	
	Если ДанныеПредприятия.Свойство("СобственникПредприятия")
		И ЗначениеЗаполнено(ДанныеПредприятия.СобственникПредприятия) Тогда
		
		Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПредприятия.СобственникПредприятия, "Идентификатор");
		
		enterprise.owner = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(enterprise, "owner");
		enterprise.owner.guid = Идентификатор;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.modificationOperation.resultingList.enterprise.Добавить(enterprise);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation, "reason", ДанныеПредприятия.Комментарий, СообщениеXML);

	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ДанныеПредприятия;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаРегистрациюИзменениеХозяйствующегоСубъектаXML(ХозяйствующийСубъект, ДанныеХозяйствующегоСубъекта, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеХозяйствующегоСубъекта;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Если ДанныеХозяйствующегоСубъекта.Свойство("Ссылка")
		И ЗначениеЗаполнено(ДанныеХозяйствующегоСубъекта.Ссылка) Тогда
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Изменить);
	Иначе
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.НайтиИлиСоздать);
	КонецЕсли;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.modificationOperation = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "modificationOperation");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation, "type", КодСпособаИзмененияВерсионногоОбъекта, СообщениеXML);
	
	Запрос.modificationOperation.resultingList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation, "resultingList");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "count",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "total",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "offset", 0, СообщениеXML);
	
	#Область Предприятие
	
	businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation.resultingList, "businessEntity");
	
	Если ДанныеХозяйствующегоСубъекта.Свойство("Ссылка")
		И ЗначениеЗаполнено(ДанныеХозяйствующегоСубъекта.Ссылка) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеХозяйствующегоСубъекта.Ссылка, "Идентификатор, ИдентификаторВерсии");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "uuid", Реквизиты.ИдентификаторВерсии, СообщениеXML);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "type", ИнтеграцияВЕТИС.КодТипаХозяйствующегоСубъекта(ДанныеХозяйствующегоСубъекта.Тип), СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "name", ДанныеХозяйствующегоСубъекта.Наименование, СообщениеXML);
	
	businessEntity.incorporationForm = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(businessEntity, "incorporationForm");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity.incorporationForm, "uuid", ДанныеХозяйствующегоСубъекта.ОрганизационноПравоваяФормаИдентификатор, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "fullName", ДанныеХозяйствующегоСубъекта.НаименованиеПолное, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "fio", ДанныеХозяйствующегоСубъекта.ФИО, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "inn", ДанныеХозяйствующегоСубъекта.ИНН, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "kpp", ДанныеХозяйствующегоСубъекта.КПП, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(businessEntity, "ogrn", ДанныеХозяйствующегоСубъекта.ОГРН, СообщениеXML);
	
	ИнтеграцияВЕТИС.УстановитьАдрес(businessEntity, ДанныеХозяйствующегоСубъекта.ДанныеАдреса, "juridicalAddress");
	
	#КонецОбласти
	
	Запрос.modificationOperation.resultingList.businessEntity.Добавить(businessEntity);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation, "reason", ДанныеХозяйствующегоСубъекта.Комментарий, СообщениеXML);

	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ДанныеХозяйствующегоСубъекта;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаСозданиеУдалениеСвязиМеждуХозяйствующимСубъектомИПредприятиемXML(ХозяйствующийСубъект, Предприятие, СпособИзменения, GLN, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаСозданиеИзменениеСвязиСПлощадкой;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(СпособИзменения);
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.modificationOperation = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "modificationOperation");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation, "type", КодСпособаИзмененияВерсионногоОбъекта, СообщениеXML);
	
	Запрос.modificationOperation.businessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation, "businessEntity");
	Запрос.modificationOperation.businessEntity.guid = НастройкаОбмена.Идентификатор;
	
	activityLocation = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation, "activityLocation");
	
	Если ТипЗнч(GLN) = Тип("Строка")
		И Не ПустаяСтрока(GLN) Тогда
		activityLocation.globalID.Добавить(GLN);
	ИначеЕсли ТипЗнч(GLN) = Тип("Массив") Тогда
		Для Каждого ЗначениеGLN Из GLN Цикл
			Если Не ПустаяСтрока(ЗначениеGLN) Тогда
				activityLocation.globalID.Добавить(ЗначениеGLN);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	activityLocation.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(activityLocation, "enterprise");
	activityLocation.enterprise.guid = Предприятие.Идентификатор;
	activityLocation.enterprise.name = Предприятие.Наименование;
	
	Запрос.modificationOperation.activityLocation.Добавить(activityLocation);
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросВетеринарноСопроводительногоДокументаПоUUIDXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросВСД;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.uuid           = ПараметрыЗапроса.Идентификатор;
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросЗаписиСкладскогоЖурналаПоИдентификаторуXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписиСкладскогоЖурнала;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.guid           = ПараметрыЗапроса.Идентификатор;
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаАннулированиеВетеринарноСопроводительногоДокументаПоUUIDXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаАннулированиеВСД;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.vetDocumentId  = ПараметрыЗапроса.Идентификатор;
	Запрос.withdrawReason = ПараметрыЗапроса.ПричинаАннулирования;
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
		Запрос, "withdrawDate",
		ТекущаяДатаСеанса(), ХранилищеВременныхДат);
	
	Запрос.specifiedPerson = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.specifiedPerson, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, ПараметрыЗапроса.Интервал, ХранилищеВременныхДат);
	
	Если ПараметрыЗапроса.Свойство("ПараметрыОтбора")
		И ПараметрыЗапроса.ПараметрыОтбора <> Неопределено Тогда
		
		ПараметрыОтбора = ПараметрыЗапроса.ПараметрыОтбора;
		
		Если ПараметрыОтбора.Свойство("ТипВСД")
			И ЗначениеЗаполнено(ПараметрыОтбора.ТипВСД) Тогда
			Запрос.vetDocumentType = ИнтеграцияВЕТИСПовтИсп.ТипВетеринарноСопроводительногоДокумента(ПараметрыОтбора.ТипВСД);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("СтатусВСД")
			И ЗначениеЗаполнено(ПараметрыОтбора.СтатусВСД) Тогда
			Запрос.vetDocumentStatus = ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ПараметрыОтбора.СтатусВСД);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	
	Если ПараметрыЗапроса.Свойство("Документ") Тогда
		СообщениеXML.Документ = ПараметрыЗапроса.Документ;
	Иначе
		СообщениеXML.Документ = Неопределено;
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ДокументОснование") Тогда
		СообщениеXML.ДокументОснование = ПараметрыЗапроса.ДокументОснование;
	Иначе
		СообщениеXML.ДокументОснование = Неопределено;
	КонецЕсли;
	
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросВетеринарноСопроводительныхДокументовXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросВсехВСД;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	Если ПараметрыЗапроса.ПараметрыОтбора <> Неопределено Тогда
		ПараметрыОтбора = ПараметрыЗапроса.ПараметрыОтбора;
		
		Если ПараметрыОтбора.Свойство("ТипВСД") И ЗначениеЗаполнено(ПараметрыОтбора.ТипВСД) Тогда
			Запрос.vetDocumentType = ИнтеграцияВЕТИСПовтИсп.ТипВетеринарноСопроводительногоДокумента(ПараметрыОтбора.ТипВСД);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("СтатусВСД") И ЗначениеЗаполнено(ПараметрыОтбора.СтатусВСД) Тогда
			Запрос.vetDocumentStatus = ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ПараметрыОтбора.СтатусВСД);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Интервал") И ТипЗнч(ПараметрыОтбора.Интервал) = Тип("Структура") Тогда
			Запрос.issueDateInterval = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "issueDateInterval");
			
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(Запрос.issueDateInterval, "beginDate",
				ПараметрыОтбора.Интервал.НачалоПериода, ХранилищеВременныхДат);
			
			Если ПараметрыОтбора.Интервал.КонецПериода <> Неопределено Тогда
				ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(Запрос.issueDateInterval, "endDate",
					ПараметрыОтбора.Интервал.КонецПериода, ХранилищеВременныхДат);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("ГрузоотправительПредприятие") И ЗначениеЗаполнено(ПараметрыОтбора.ГрузоотправительПредприятие) Тогда
			ЭлементConsignor  = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "consignor");
			ЭлементEnterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементConsignor, "enterprise");
			
			Если ПараметрыОтбора.Свойство("ГрузоотправительХозяйствующийСубъект")
			   И ЗначениеЗаполнено(ПараметрыОтбора.ГрузоотправительХозяйствующийСубъект) Тогда
				ЭлементBusinessEntity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементConsignor, "businessEntity");
				
				ОтправительХозяйствующийСубъект = ПараметрыОтбора.ГрузоотправительХозяйствующийСубъект;
				ОтправительИдентификатор        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтправительХозяйствующийСубъект, "Идентификатор");
				
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементBusinessEntity, "GUID", ОтправительИдентификатор, СообщениеXML);
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементConsignor, "businessEntity", ЭлементBusinessEntity, СообщениеXML);
			КонецЕсли;
			
			ОтправительПредприятие   = ПараметрыОтбора.ГрузоотправительПредприятие;
			ОтправительИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтправительПредприятие, "Идентификатор");
			
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементEnterprise, "GUID", ОтправительИдентификатор, СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементConsignor, "enterprise", ЭлементEnterprise, СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "consignor", ЭлементConsignor, СообщениеXML);
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("СвязанныйДокумент") И ТипЗнч(ПараметрыОтбора.СвязанныйДокумент) = Тип("Структура") Тогда
			Запрос.referencedDocument = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "referencedDocument");
			Запрос.referencedDocument.issueNumber = ПараметрыОтбора.СвязанныйДокумент.ИсходящийНомер;
			Запрос.referencedDocument.issueDate   = Формат(ПараметрыОтбора.СвязанныйДокумент.ИсходящаяДата, "ДФ=yyyy-MM-dd");
			Запрос.referencedDocument.type        = ПараметрыОтбора.СвязанныйДокумент.ТипДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросЗаписейСкладскогоЖурналаXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	Запрос.searchPattern = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, "searchPattern", Запрос);
	Запрос.searchPattern.blankFilter = "NOT_BLANK";
	
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ПараметрыЗапроса.ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = ПараметрыЗапроса.Документ;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	СообщениеXML.Версия               = ПараметрыЗапроса.Версия;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросИзмененныхЗаписейСкладскогоЖурналаXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УстановитьИнтервалЗапросаИзменений(Запрос, ПараметрыЗапроса.Интервал, ХранилищеВременныхДат);
	
	Запрос.enterpriseGuid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор");
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	
	Если ПараметрыЗапроса.Свойство("Документ") Тогда
		СообщениеXML.Документ = ПараметрыЗапроса.Документ;
	Иначе
		СообщениеXML.Документ = Неопределено;
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ДокументОснование") Тогда
		СообщениеXML.ДокументОснование = ПараметрыЗапроса.ДокументОснование;
	Иначе
		СообщениеXML.ДокументОснование = Неопределено;
	КонецЕсли;
	
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаСозданиеИзменениеПродукцииXML(ХозяйствующийСубъект, ДанныеПродукции, ПараметрыОбмена) Экспорт
	
	МассивСсылок = Новый Массив;
	МассивТипов = Новый Массив;
	
	МассивСсылок.Добавить(ДанныеПродукции.Продукция);
	МассивСсылок.Добавить(ДанныеПродукции.ВидПродукции);
	
	МассивТипов.Добавить(ДанныеПродукции.Продукция.Метаданные().ПолноеИмя());
	МассивТипов.Добавить(ДанныеПродукции.ВидПродукции.Метаданные().ПолноеИмя());
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Идентификатор,
	|	Т.ИдентификаторВерсии
	|ИЗ
	|	&ИмяТаблицы КАК Т
	|ГДЕ
	|	Т.Ссылка В (&МассивСсылок)
	|
	|";
	
	ШаблонЗапросаУпаковкиВЕТИС = "
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Идентификатор,
	|	"""" КАК ИдентификаторВерсии
	|ИЗ
	|	Справочник.УпаковкиВЕТИС КАК Т
	|ГДЕ
	|	Т.Ссылка В (&МассивСсылок)
	|
	|";
	
	Если ЗначениеЗаполнено(ДанныеПродукции.Ссылка) Тогда
		МассивСсылок.Добавить(ДанныеПродукции.Ссылка);
		МассивТипов.Добавить(ДанныеПродукции.Ссылка.Метаданные().ПолноеИмя());
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПродукции.ХозяйствующийСубъектПроизводитель) Тогда
		МассивСсылок.Добавить(ДанныеПродукции.ХозяйствующийСубъектПроизводитель);
		МассивТипов.Добавить(ДанныеПродукции.ХозяйствующийСубъектПроизводитель.Метаданные().ПолноеИмя());
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМарки) Тогда
		МассивСсылок.Добавить(ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМарки);
		МассивТипов.Добавить(ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМарки.Метаданные().ПолноеИмя());
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПродукции.ФасовкаУпаковка) Тогда
		МассивСсылок.Добавить(ДанныеПродукции.ФасовкаУпаковка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПродукции.ФасовкаЕдиницаИзмерения) Тогда
		МассивСсылок.Добавить(ДанныеПродукции.ФасовкаЕдиницаИзмерения);
		МассивТипов.Добавить(ДанныеПродукции.ФасовкаЕдиницаИзмерения.Метаданные().ПолноеИмя());
	КонецЕсли;
	Для Каждого Производитель Из ДанныеПродукции.Производители Цикл
		МассивСсылок.Добавить(Производитель);
	КонецЦикла;
	Если ДанныеПродукции.Производители.Количество() > 0 Тогда
		МассивТипов.Добавить(ДанныеПродукции.Производители[0].Метаданные().ПолноеИмя());
	КонецЕсли;
	
	ТекстЗапроса = "";
	ТекстЗапросаОбъединение = "";
	Для Каждого ТипМетаданных Из МассивТипов Цикл
		ШаблонЗапросаСТипом = СтрЗаменить(ШаблонЗапроса, "&ИмяТаблицы", ТипМетаданных);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаОбъединение + ШаблонЗапросаСТипом;
		Если НЕ ЗначениеЗаполнено(ТекстЗапросаОбъединение) Тогда
			ТекстЗапросаОбъединение = " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеПродукции.ФасовкаУпаковка) Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаОбъединение + ШаблонЗапросаУпаковкиВЕТИС;
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура("Идентификатор, ИдентификаторВерсии");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПродукции;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Если ДанныеПродукции.Свойство("Ссылка")
		И ЗначениеЗаполнено(ДанныеПродукции.Ссылка) Тогда
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Изменить);
	Иначе
		КодСпособаИзмененияВерсионногоОбъекта = ИнтеграцияВЕТИС.КодСпособаИзмененияВерсионногоОбъекта(
			Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Создать);
	КонецЕсли;

	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.modificationOperation = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "modificationOperation");
	Запрос.modificationOperation.type = КодСпособаИзмененияВерсионногоОбъекта;
	Запрос.modificationOperation.resultingList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation, "resultingList");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "count",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "total",  1, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.modificationOperation.resultingList, "offset", 0, СообщениеXML);
	
	#Область НаименованиеПродукции
	
	productItem = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.modificationOperation.resultingList, "productItem");
	
	Если ЗначениеЗаполнено(ДанныеПродукции.Ссылка) Тогда
		ИдентификаторВерсии = ?(ЗначениеЗаполнено(ДанныеПродукции.ИдентификаторВерсии),
			ДанныеПродукции.ИдентификаторВерсии,
			ЗначенияРеквизитов[ДанныеПродукции.Ссылка].ИдентификаторВерсии);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "uuid", ИдентификаторВерсии, СообщениеXML);
	КонецЕсли;
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "globalID", ДанныеПродукции.GTIN,         СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "name",     ДанныеПродукции.Наименование, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "code",     ДанныеПродукции.Артикул,      СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "productType", ПродукцияВЕТИСВызовСервера.ТипПродукции(ДанныеПродукции.ТипПродукции), СообщениеXML);
	
	productItem.product    = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "product");
	productItem.subProduct = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "subProduct");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.product, "guid", ЗначенияРеквизитов[ДанныеПродукции.Продукция].Идентификатор, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.subProduct, "guid", ЗначенияРеквизитов[ДанныеПродукции.ВидПродукции].Идентификатор, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "correspondsToGost", ДанныеПродукции.СоответствуетГОСТ, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem, "gost", ДанныеПродукции.ГОСТ, СообщениеXML);
	
	Если ЗначениеЗаполнено(ДанныеПродукции.ХозяйствующийСубъектПроизводитель) Тогда
		productItem.producer = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "producer");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.producer, "guid", ЗначенияРеквизитов[ДанныеПродукции.ХозяйствующийСубъектПроизводитель].Идентификатор, СообщениеXML);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМарки) Тогда
		productItem.tmOwner = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "tmOwner");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.tmOwner, "guid", ЗначенияРеквизитов[ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМарки].Идентификатор, СообщениеXML);
	КонецЕсли;
	
	Для Каждого Производитель Из ДанныеПродукции.Производители Цикл
		
		ЭлементДанных = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "producing");
		ЭлементДанных.location = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементДанных, "location");
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементДанных.location, "guid", ЗначенияРеквизитов[Производитель].Идентификатор, СообщениеXML);
		
		productItem.producing.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	productItem.packaging = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem, "packaging");
	
	Если ЗначениеЗаполнено(ДанныеПродукции.ФасовкаУпаковка) Тогда
		productItem.packaging.packagingType = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem.packaging, "packagingType");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.packaging.packagingType, "guid", ЗначенияРеквизитов[ДанныеПродукции.ФасовкаУпаковка].Идентификатор, СообщениеXML);
	КонецЕсли;
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.packaging, "quantity", ДанныеПродукции.ФасовкаКоличествоУпаковок, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.packaging, "volume", ДанныеПродукции.ФасовкаКоличествоЕдиницВУпаковке, СообщениеXML);
	
	Если ЗначениеЗаполнено(ДанныеПродукции.ФасовкаЕдиницаИзмерения) Тогда
		productItem.packaging.unit = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(productItem.packaging, "unit");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(productItem.packaging.unit, "guid", ЗначенияРеквизитов[ДанныеПродукции.ФасовкаЕдиницаИзмерения].Идентификатор, СообщениеXML);
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.modificationOperation.resultingList.productItem.Добавить(productItem);

	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросПользователейХозяйствующегоСубъектаXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросПользователейХозяйствующегоСубъекта;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросДоступныхДляНазначенияПравXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросДоступныхДляНазначенияПрав;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Если ПараметрыЗапроса.Свойство("НомерСтраницы") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(
			Запрос,
			ПараметрыЗапроса.НомерСтраницы,
			ПараметрыЗапроса.КоличествоЭлементовНаСтранице);
	ИначеЕсли ПараметрыЗапроса.Свойство("Смещение") Тогда
		ИнтеграцияВЕТИС.УстановитьПараметрыСмещения(
			Запрос,
			ПараметрыЗапроса.Смещение,
			ПараметрыЗапроса.КоличествоЭлементов);
	КонецЕсли;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросДанныхПользователяXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросДанныхПользователя;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.user = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "user");
	Если ПараметрыЗапроса.Свойство("Логин") Тогда
		Запрос.user.login = ПараметрыЗапроса.Логин;
	ИначеЕсли ПараметрыЗапроса.Свойство("ИдентификаторВерсии") Тогда
		Запрос.user.uuid = ПараметрыЗапроса.ИдентификаторВерсии;
	КонецЕсли;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаИзменениеПравПользователей(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ЭлементUser = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "user");
	
	Для Каждого ДанныеПользователя Из ПараметрыЗапроса.ДанныеПользователей Цикл
		УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПользователя.ПользовательВЕТИС, "УчетнаяЗапись");
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "login", УчетнаяЗапись, СообщениеXML);
		
		ЭлементAuthorityList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементUser, "authorityList");
		
		Для Каждого ПравоДоступаВЕТИС Из ДанныеПользователя.ПраваДоступа Цикл
			ИдентификаторРоли = ПользователиВЕТИС.ИдентификаторРоли(ПравоДоступаВЕТИС);
			
			Если ИдентификаторРоли <> Неопределено Тогда
				ЭлементAuthority = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементAuthorityList, "authority");
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементAuthority, "ID", ИдентификаторРоли, СообщениеXML);
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементAuthorityList, "authority", ЭлементAuthority, СообщениеXML);
			КонецЕсли;
		КонецЦикла;
		
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "authorityList", ЭлементAuthorityList, СообщениеXML);
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "user", ЭлементUser, СообщениеXML);
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаИзменениеЗонОтветственностиПользователейXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ЭлементUser = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "user");
	
	Для Каждого ДанныеПользователя Из ПараметрыЗапроса.ДанныеПользователей Цикл
		УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПользователя.ПользовательВЕТИС, "УчетнаяЗапись");
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "login", УчетнаяЗапись, СообщениеXML);
		
		Если ДанныеПользователя.Предприятия.Количество() > 0
			ИЛИ   ДанныеПользователя.Адреса.Количество() > 0 Тогда
			ЭлементWorkingAreaList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементUser, "workingAreaList");
			
			Для Каждого Предприятие Из ДанныеПользователя.Предприятия Цикл
				ПредприятиеИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предприятие, "Идентификатор");
				
				ЭлементWorkingArea = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементWorkingAreaList, "workingArea");
				ЭлементWorkingArea.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементWorkingArea, "enterprise");
				
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементWorkingArea.enterprise, "GUID", ПредприятиеИдентификатор, СообщениеXML);
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементWorkingAreaList, "workingArea", ЭлементWorkingArea, СообщениеXML);
			КонецЦикла;
			
			Для Каждого Адрес Из ДанныеПользователя.Адреса Цикл
				ЭлементWorkingArea = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементWorkingAreaList, "workingArea");
				ИнтеграцияВЕТИС.УстановитьАдрес(ЭлементWorkingArea, Адрес, "area");
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементWorkingAreaList, "workingArea", ЭлементWorkingArea, СообщениеXML);
			КонецЦикла;
			
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "workingAreaList", ЭлементWorkingAreaList, СообщениеXML);
		КонецЕсли;
		
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "user", ЭлементUser, СообщениеXML);
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъектаXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ЭлементUser = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "user");
	
	Для Каждого ДанныеПользователя Из ПараметрыЗапроса.ДанныеПользователей Цикл
		
		Если ЗначениеЗаполнено(ДанныеПользователя.УчетнаяЗапись) Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "login", ДанныеПользователя.УчетнаяЗапись, СообщениеXML);
			
		Иначе
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "firstName",  ДанныеПользователя.Имя,          СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "middleName", ДанныеПользователя.Отчество,     СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "lastName",   ДанныеПользователя.Фамилия,      СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "birthDate",  ДанныеПользователя.ДатаРождения, СообщениеXML);
			
			ЭлементIdentity = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементUser, "identity");
			ДокументКод     = ИнтеграцияВЕТИСПовтИсп.КодДокумента(ДанныеПользователя.ДокументТип);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементIdentity, "issueSeries", ДанныеПользователя.ДокументСерия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементIdentity, "issueNumber", ДанныеПользователя.ДокументНомер, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементIdentity, "type",        ДокументКод,                      СообщениеXML);
			
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser,    "identity",    ЭлементIdentity,                   СообщениеXML);
			
			ЭлементCitizenship = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементUser, "citizenship");
			ЭлементCountry     = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементCitizenship, "country");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементCountry,      "GUID",        ДанныеПользователя.СтранаИдентификатор, СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементCitizenship, "country",     ЭлементCountry,                         СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser,        "citizenship", ЭлементCitizenship,                     СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "snils",     ДанныеПользователя.СНИЛС,          СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "phone",     ДанныеПользователя.ЛичныйТелефон,  СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "workPhone", ДанныеПользователя.РабочийТелефон, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "email",     ДанныеПользователя.ЛичныйEmail,    СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "workEmail", ДанныеПользователя.РабочийEmail,   СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЭлементUser, "post",      ДанныеПользователя.Должность,      СообщениеXML);
			
		КонецЕсли;
		
		ЭлементAuthorityList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементUser, "authorityList");
		
		Для Каждого ПравоДоступаВЕТИС Из ДанныеПользователя.ПраваДоступа Цикл
			ИдентификаторРоли = ПользователиВЕТИС.ИдентификаторРоли(ПравоДоступаВЕТИС);
			
			Если ИдентификаторРоли <> Неопределено Тогда
				ЭлементAuthority = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЭлементAuthorityList, "authority");
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементAuthority, "ID", ИдентификаторРоли, СообщениеXML);
				ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементAuthorityList, "authority", ЭлементAuthority, СообщениеXML);
			КонецЕсли;
		КонецЦикла;
		
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "authorityList", ЭлементAuthorityList, СообщениеXML);
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "user", ЭлементUser, СообщениеXML);
		
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаУдалениеСвязиПользователейСХозяйствующимСубъектомXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаУдалениеСвязиПользователейСХозяйствующимСубъектом;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ЭлементUser = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "user");
	
	Для Каждого ПользовательВЕТИС Из ПараметрыЗапроса.ПользователиВЕТИС Цикл
		УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательВЕТИС, "УчетнаяЗапись");
		
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ЭлементUser, "login", УчетнаяЗапись, СообщениеXML);
		ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(Запрос, "user", ЭлементUser, СообщениеXML);
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Неопределено;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаВнесениеСведенийОВетеринарныхОперацияхXML(ХозяйствующийСубъект, ПараметрыЗапроса, ПараметрыОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаВнесениеСведенийОВетеринарныхМероприятиях;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция);
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, , , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	#Область ТекстСообщенияXML
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	Запрос.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос, "localTransactionId", Строка(Новый УникальныйИдентификатор), СообщениеXML);
	
	Запрос.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "enterprise");
	Если ПараметрыЗапроса.Свойство("Предприятие")
	   И ЗначениеЗаполнено(ПараметрыЗапроса.Предприятие) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.Предприятие, "Идентификатор, ИдентификаторВерсии");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Запрос.enterprise, "guid", Реквизиты.Идентификатор, СообщениеXML);
	КонецЕсли;
	
	Для каждого СведенияОЗаписиЖурнала Из ПараметрыЗапроса.ЗаписиСкладскогоЖурнала Цикл
		
		stockEntry = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "stockEntry");
		
		stockEntry.guid = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОЗаписиЖурнала.ЗаписьСкладскогоЖурнала, "Идентификатор");
		
		Если (СведенияОЗаписиЖурнала.Свойство("ЛабораторныеИсследования")
		    И СведенияОЗаписиЖурнала.ЛабораторныеИсследования <> Неопределено
		    И СведенияОЗаписиЖурнала.ЛабораторныеИсследования.Количество() > 0)
		 ИЛИ (СведенияОЗаписиЖурнала.Свойство("Иммунизации")
		    И СведенияОЗаписиЖурнала.Иммунизации <> Неопределено
		    И СведенияОЗаписиЖурнала.Иммунизации.Количество() > 0) Тогда
		
			stockEntry.vetEventList = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(stockEntry, "vetEventList");
			
			Если СведенияОЗаписиЖурнала.Свойство("ЛабораторныеИсследования")
			   И СведенияОЗаписиЖурнала.ЛабораторныеИсследования <> Неопределено
			   И СведенияОЗаписиЖурнала.ЛабораторныеИсследования.Количество() > 0 Тогда
			
				Для каждого СведенияОЛабораторномИсследовании Из СведенияОЗаписиЖурнала.ЛабораторныеИсследования Цикл
					
					laboratoryResearch = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(stockEntry.vetEventList, "laboratoryResearch");
					
					Если СведенияОЛабораторномИсследовании.Свойство("Идентификатор")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.Идентификатор) Тогда
						laboratoryResearch.ID = СведенияОЛабораторномИсследовании.Идентификатор;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("ДатаПолученияРезультата")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.ДатаПолученияРезультата) Тогда
						laboratoryResearch.actualDateTime = СведенияОЛабораторномИсследовании.ДатаПолученияРезультата;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("НаименованиеЛаборатории")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.НаименованиеЛаборатории) Тогда
						laboratoryResearch.operator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(laboratoryResearch, "operator");
						laboratoryResearch.operator.name = СведенияОЛабораторномИсследовании.НаименованиеЛаборатории;
					КонецЕсли;
					
					referencedDocument = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(laboratoryResearch, "referencedDocument");
					
					Если СведенияОЛабораторномИсследовании.Свойство("НомерАктаОтбораПроб")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.НомерАктаОтбораПроб) Тогда
						referencedDocument.issueNumber = СведенияОЛабораторномИсследовании.НомерАктаОтбораПроб;
					КонецЕсли;
					Если СведенияОЛабораторномИсследовании.Свойство("ДатаОтбораПроб")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.ДатаОтбораПроб) Тогда
						referencedDocument.issueDate = СведенияОЛабораторномИсследовании.ДатаОтбораПроб;
					КонецЕсли;
					
					referencedDocument.type = 9; // Акт отбора проб
					
					laboratoryResearch.referencedDocument.Добавить(referencedDocument);
					
					Если СведенияОЛабораторномИсследовании.Свойство("ДополнительныеСведения")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.ДополнительныеСведения) Тогда
						laboratoryResearch.notes = СведенияОЛабораторномИсследовании.ДополнительныеСведения;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("НомерЭкспертизы")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.НомерЭкспертизы) Тогда
						laboratoryResearch.expertiseID = СведенияОЛабораторномИсследовании.НомерЭкспертизы;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("НаименованиеПоказателя")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.НаименованиеПоказателя)
					   И СведенияОЛабораторномИсследовании.ТипПоказателя = "Показатель" Тогда
						laboratoryResearch.indicator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(laboratoryResearch, "indicator");
						laboratoryResearch.indicator.name = СведенияОЛабораторномИсследовании.НаименованиеПоказателя;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("НаименованиеПоказателя")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.НаименованиеПоказателя)
					   И СведенияОЛабораторномИсследовании.ТипПоказателя = "Болезнь" Тогда
						laboratoryResearch.disease = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(laboratoryResearch, "disease");
						laboratoryResearch.disease.name = СведенияОЛабораторномИсследовании.НаименованиеПоказателя;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("МетодИсследования")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.МетодИсследования) Тогда
						laboratoryResearch.method = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(laboratoryResearch, "method");
						laboratoryResearch.method.name = СведенияОЛабораторномИсследовании.МетодИсследования;
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("РезультатИсследования")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.РезультатИсследования) Тогда
						laboratoryResearch.result = ИнтеграцияВЕТИСПовтИсп.РезультатЛабораторныхИсследований(СведенияОЛабораторномИсследовании.РезультатИсследования);
					КонецЕсли;
					
					Если СведенияОЛабораторномИсследовании.Свойство("Заключение")
					   И ЗначениеЗаполнено(СведенияОЛабораторномИсследовании.Заключение) Тогда
						laboratoryResearch.conclusion = СведенияОЛабораторномИсследовании.Заключение;
					КонецЕсли;
					
					stockEntry.vetEventList.laboratoryResearch.Добавить(laboratoryResearch);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СведенияОЗаписиЖурнала.Свойство("Иммунизации")
			   И СведенияОЗаписиЖурнала.Иммунизации <> Неопределено
			   И СведенияОЗаписиЖурнала.Иммунизации.Количество() > 0 Тогда
				
				Для каждого СведенияОбИммунизации Из СведенияОЗаписиЖурнала.Иммунизации Цикл
					
					immunization = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(stockEntry.vetEventList, "immunization");
					
					Если СведенияОбИммунизации.Свойство("Идентификатор")
					   И ЗначениеЗаполнено(СведенияОбИммунизации.Идентификатор) Тогда
						immunization.ID = СведенияОбИммунизации.Идентификатор;
					КонецЕсли;
					
					immunization.actualDateTime = СведенияОбИммунизации.ДатаПроведенияИммунизацииОбработки;
					
					Если СведенияОбИммунизации.Свойство("ДополнительныеСведения")
					   И ЗначениеЗаполнено(СведенияОбИммунизации.ДополнительныеСведения) Тогда
						immunization.notes = СведенияОбИммунизации.ДополнительныеСведения;
					КонецЕсли;
					
					immunization.disease = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(immunization, "disease");
					immunization.disease.name = СведенияОбИммунизации.НаименованиеБолезниПаразита;
					
					Если (СведенияОбИммунизации.Свойство("НазваниеИПроизводительВакциныПрепарата")
					    И ЗначениеЗаполнено(СведенияОбИммунизации.НазваниеИПроизводительВакциныПрепарата))
					 ИЛИ (СведенияОбИммунизации.Свойство("НомерСерииВакциныПрепарата")
					    И ЗначениеЗаполнено(СведенияОбИммунизации.НомерСерииВакциныПрепарата)) Тогда
						
						immunization.medicinalDrug = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(immunization, "medicinalDrug");
						
						Если СведенияОбИммунизации.Свойство("НазваниеИПроизводительВакциныПрепарата")
						   И ЗначениеЗаполнено(СведенияОбИммунизации.НазваниеИПроизводительВакциныПрепарата) Тогда
							immunization.medicinalDrug.name = СведенияОбИммунизации.НазваниеИПроизводительВакциныПрепарата;
						КонецЕсли;
						Если СведенияОбИммунизации.Свойство("НомерСерииВакциныПрепарата")
						   И ЗначениеЗаполнено(СведенияОбИммунизации.НомерСерииВакциныПрепарата) Тогда
							immunization.medicinalDrug.series = СведенияОбИммунизации.НомерСерииВакциныПрепарата;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СведенияОбИммунизации.Свойство("ДатаОкончанияДействияВакциныПрепарата")
					   И ЗначениеЗаполнено(СведенияОбИммунизации.ДатаОкончанияДействияВакциныПрепарата) Тогда
						immunization.effectiveBeforeDate = СведенияОбИммунизации.ДатаОкончанияДействияВакциныПрепарата;
					КонецЕсли;
					
					stockEntry.vetEventList.immunization.Добавить(immunization);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.stockEntry.Добавить(stockEntry);
		
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкаXML(Запрос, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = ПараметрыЗапроса.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = Неопределено;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти