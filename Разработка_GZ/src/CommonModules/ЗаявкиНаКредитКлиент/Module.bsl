////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции сервиса заявок на кредит.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПодписаниеИОтправка

// Возвращает структуру параметров для подписания и отправки заявки на кредит.
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция ПараметрыПодписанияИОтправки() Экспорт

	Результат = Новый Структура();
	// Входящие параметры, указываются вызывающей процедурой.
	Результат.Вставить("ЗаявкаНаКредит", ПредопределенноеЗначение("Документ.ЗаявкаНаКредит.ПустаяСсылка"));
	Результат.Вставить("Организация",    ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("Банки",          Новый Массив); // Массив из элементов справочника БанкиУниверсальногоОбмена, в которые отправить заявку.
	Результат.Вставить("ДокументооборотыПолучателей", Неопределено); // ключ = банк; значение = документооборот для него
	Результат.Вставить("ТипТранзакции",  ПредопределенноеЗначение("Перечисление.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ПустаяСсылка"));
	Результат.Вставить("ПараметрыОтбораСертификата", ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата());
	
	// Значения, которые доступны только на клиенте (не могут передаваться на сервер).
	Результат.Вставить("ПараметрыНаКлиенте", Новый Структура());
	Результат.ПараметрыНаКлиенте.Вставить("ВладелецФормы");         // Форма-владелец
	Результат.ПараметрыНаКлиенте.Вставить("ОповещениеОЗавершении"); // Оповещение, которое необходимо вызвать после завершения всего процесса (необязательное).
	
	// Служебные значения, заполняются в процессе вызовов вложенных функций.
	Результат.Вставить("ПараметрыКриптографии"); // Результат УниверсальныйОбменСБанкамиКлиент.ПараметрыКриптографии() 

	Возврат Результат;

КонецФункции

// Инициирует процесс подписания и отправки подготовленной заявки на кредит в указанные банки.
// Заявка на кредит должна быть полностью заполненной, в отношении нее должны быть проведены 
// все необходимые проверки заполнения и т.п.
//
// Параметры:
//	ПараметрыПодписанияИОтправки - Структура - см. результат функции ПараметрыПодписанияИОтправки().
// 
Процедура НачатьПодписаниеИОтправку(ПараметрыПодписанияИОтправки) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыПодписанияИОтправки.ЗаявкаНаКредит)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодписанияИОтправки.Банки) Тогда
		// Нечего или некому отправлять.
		Возврат;
	КонецЕсли;

	// Сначала определим, каким сертификатом будем подписывать заявку.
	//
	// Если это облачный сертификат, то запустим фоновое задание и все действия выполняем на сервере,
	// предварительно прислав пользователю sms-пароль для получения сеансового ключа крипосервиса.
	//
	// Если это локальный сертификат:
	// 	- формируем файлы для заявки и отчетности на сервере;
	// 	- там их сжимаем (в веб-клиенте zip не доступен);
	//	- передаем на клиент исходный файл для подписания и его zip-архив для шифрования;
	//	- после подписания и шифрования передаем назад на сервер файл подписи (отсоединенный) и шифрованный zip-файл,
	//	  которые вкладываются в транспортный контейнер;
	//	- запускаем фоновое задание для отправки сформированных контейнеров в сервис обмена с банками.
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСертификатаДляПодписи", ЭтотОбъект, ПараметрыПодписанияИОтправки);
	
	// В качестве дополнительных параметров передаем условия для отбора доступных сертификатов.
	ДополнительныеПараметрыКриптографии = Новый Структура();
	ДополнительныеПараметрыКриптографии.Вставить("ПараметрыОтбора", ПараметрыПодписанияИОтправки.ПараметрыОтбораСертификата);
	
	УниверсальныйОбменСБанкамиКлиент.ПараметрыКриптографии(
		ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит"),
		ПараметрыПодписанияИОтправки.Организация,
		ОписаниеОповещения,
		ЭтотОбъект,
		ДополнительныеПараметрыКриптографии);

КонецПроцедуры

#КонецОбласти

#Область СообщенияПоЗаявкамНаКредит

Процедура ПослеНачалаРаботыСистемы() Экспорт
		
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаКредит", 15, Истина);
	
КонецПроцедуры

Процедура ПерезапуститьПроверкуСообщенийОтБанков() Экспорт
	
	// Регл.задание по проверке ответов от банков первый раз запускается через 15 мин,
	// поэтому показ оповещения включим сначала через 20 мин, чтобы рег.задание успело отработать.
	ОтключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаКредит");
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьОНовыхСообщенияхПоЗаявкамНаКредит", 1200, Истина);
	
КонецПроцедуры

// Выводит оповещения пользователю по массиву сообщений
//
// Параметры:
//  НовыеСообщенияОтБанков - Массив	- массив структур, содержащих описание нового состояния заявки на кредит
//										см. РегистрыСведений.СостояниеЗаявокНаКредит.НовыеСообщенияОтБанков()
//
Процедура ОповеститьОНовыхСообщенияхОтБанков(НовыеСообщенияОтБанков) Экспорт 
	
	Для	Каждого ОписаниеСообщения Из НовыеСообщенияОтБанков Цикл
		
		Картинка = БиблиотекаКартинок.СервисПоКредитамОдобрено;
		Пояснение = НСтр("ru='Новое сообщение от сервиса 1С:Кредит'");
		
		Если ОписаниеСообщения.ЕстьОшибки Тогда
			Картинка = БиблиотекаКартинок.ОшибкаОтправки;
			Пояснение = НСтр("ru='Ошибка при обмене данными по заявке'");
		ИначеЕсли ОписаниеСообщения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Одобрено") Тогда 
			Пояснение = НСтр("ru='Заявка одобрена!'");
		ИначеЕсли ОписаниеСообщения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Отказано") Тогда 	
			Пояснение = НСтр("ru='Отказ по заявке'");
			Картинка = БиблиотекаКартинок.СервисПоКредитамОтказано;
		ИначеЕсли ОписаниеСообщения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Готово") Тогда
			Пояснение = НСтр("ru='Подтверждение условий'");
		КонецЕсли;	
				
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("ЗаявкаНаКредит", ОписаниеСообщения.ЗаявкаНаКредит);
		ЗначенияКлюча.Вставить("Организация", ОписаниеСообщения.Организация);
		ЗначенияКлюча.Вставить("Банк", ОписаниеСообщения.Банк);
		
		Действие = Новый ОписаниеОповещения("ОткрытьИнформациюПоЗаявке", ЗаявкиНаКредитКлиент, ЗначенияКлюча);  
		
		ШаблонИдентификатораОповещения = "%1-%2-%3";
		ИдентификаторОповещения = СтрШаблон(
			ШаблонИдентификатораОповещения,
			ОписаниеСообщения.ЗаявкаНаКредит.УникальныйИдентификатор(),
			ОписаниеСообщения.Организация.УникальныйИдентификатор(),
			ОписаниеСообщения.Банк.УникальныйИдентификатор());
		
		ПоказатьОповещениеПользователя(
			ОписаниеСообщения.Банк,
			Действие,
			Пояснение,
			Картинка,
			СтатусОповещенияПользователя.Важное,
			ИдентификаторОповещения);
						
	КонецЦикла;
	
	Если НовыеСообщенияОтБанков.Количество() > 0 Тогда
		Оповестить("СервисПоКредитам_НовыеСообщенияОтБанков");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьИнформациюПоЗаявке(ЗначенияКлюча) Экспорт 
	
	Транзакция = Неопределено;
	Если ЗаявкиНаКредитВызовСервера.ТребуетсяРасшифровкаСообщения(ЗначенияКлюча, Транзакция) Тогда
		ОбработкаОкончанияРасшифровки = Новый ОписаниеОповещения(
			"ПослеРасшифровкиСообщения", 
			ЗаявкиНаКредитКлиент, 
			Новый Структура("Банк, ЗначенияКлюча", ЗначенияКлюча.Банк, ЗначенияКлюча));
		УниверсальныйОбменСБанкамиКлиент.РасшифроватьДанныеТранзакции(ОбработкаОкончанияРасшифровки, Транзакция);
	Иначе	
		ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаКредит.Форма.ИнформацияПоЗаявкеНаКредит", 
			Новый Структура("Ключ", ЗаявкиНаКредитВызовСервера.КлючЗаписиСостоянияЗаявки(ЗначенияКлюча))); 
	КонецЕсли; 

КонецПроцедуры

Процедура ПослеРасшифровкиСообщения(Результат, ДополнительныеПараметры) Экспорт 
		
	Если Результат.ОтмененоПользователем Тогда
		// Пользователь отказался от расшифровки, ничего не делаем.
		Возврат;
	КонецЕсли;

	Если НЕ Результат.Выполнено Тогда
		// В случае неудачи запись не открываем.
		ТекстСообщения = НСтр("ru='При расшифровке сообщения от %1 возникла ошибка: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДополнительныеПараметры.Банк, Результат.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеПараметры.Свойство("КлючЗаписи") Тогда
		КлючЗаписи = ДополнительныеПараметры.КлючЗаписи;
	Иначе
		КлючЗаписи = ЗаявкиНаКредитВызовСервера.КлючЗаписиСостоянияЗаявки(ДополнительныеПараметры.ЗначенияКлюча);
	КонецЕсли;	
	
	ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаКредит.Форма.ИнформацияПоЗаявкеНаКредит", Новый Структура("Ключ", КлючЗаписи)); 
	
	// Уведомляем форму списка об изменениях.
	ОповеститьОбИзменении(КлючЗаписи);
	
	Оповестить("СервисПоКредитам_НовыеСообщенияОтБанков");
	
КонецПроцедуры

Процедура ПодключитьИнтернетПоддержкуПользователей() Экспорт

	// Открываем форму подключения ИПП не сразу, а через таймер,
	// чтобы можно было вызывать из другой формы в обработчике ПриОткрытии() с параметром Отказ.
	ПодключитьОбработчикОжидания("Подключаемый_НачатьПодключениеИнтернетПоддержкиИзЗаявкиНаКредит", 0.5, Истина);
	
КонецПроцедуры

Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		// Откроем основную форму новой заявки.
		ОткрытьФорму("Документ.ЗаявкаНаКредит.ФормаОбъекта");
	Иначе
		// Пользователь отказался от подключения либо у него не хватило прав.
		ТекстСообщения = НСтр("ru = 'Для отправки заявок 1С:Кредит необходимо подключение Интернет-поддержки'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодписаниеИОтправка

Процедура ПослеВыбораСертификатаДляПодписи(Результат, ПараметрыПодписанияИОтправки) Экспорт

	Если НЕ ПроверитьРезультатВыполнения(Результат, ПараметрыПодписанияИОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписанияИОтправки.ПараметрыКриптографии = Результат;
	
	Если Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		// Инициализируем сервис криптографии для работы с ЭП в облаке.
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИнициализацииСервисаКриптографии",
			ЭтотОбъект,
			ПараметрыПодписанияИОтправки);
	
		УниверсальныйОбменСБанкамиКлиент.ИнициализироватьСервисКриптографии(Результат.ОтпечатокСертификата, ОписаниеОповещения);
	Иначе
		ОткрытьФормуПодписанияИОтправки(ПараметрыПодписанияИОтправки);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеИнициализацииСервисаКриптографии(Результат, ПараметрыПодписанияИОтправки) Экспорт

	Если НЕ ПроверитьРезультатВыполнения(Результат, ПараметрыПодписанияИОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПодписанияИОтправки(ПараметрыПодписанияИОтправки);

КонецПроцедуры

Процедура ОткрытьФормуПодписанияИОтправки(ПараметрыПодписанияИОтправки) Экспорт

	ПараметрыФормы = Новый Структура();

	// Передаем в форму все исходные параметры, кроме доступных только на клиенте.
	Для каждого КлючИЗначение Из ПараметрыПодписанияИОтправки Цикл
		Если КлючИЗначение.Ключ <> "ПараметрыНаКлиенте" Тогда
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписаниеИОтправкаЗавершение", ЭтотОбъект, ПараметрыПодписанияИОтправки);
	
	ОткрытьФорму("Документ.ЗаявкаНаКредит.Форма.ПодписаниеИОтправка",
		ПараметрыФормы,
		ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.ВладелецФормы,
		, , ,
		ОповещениеОЗавершении);

КонецПроцедуры

Процедура ПодписаниеИОтправкаЗавершение(Результат, ПараметрыПодписанияИОтправки) Экспорт
	Перем Транзакции;
	
	Если НЕ ПроверитьРезультатВыполнения(Результат, ПараметрыПодписанияИОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("Транзакции", Транзакции);
	ОповеститьОЗавершенииПодписанияИОтправки(Истина, ПараметрыПодписанияИОтправки, Транзакции);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодписаниеИОтправка

Функция ПроверитьРезультатВыполнения(Результат, ПараметрыПодписанияИОтправки)

	Выполнено      = Ложь;
	ОписаниеОшибки = "";

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Выполнено") Тогда
			Выполнено      = Результат.Выполнено;
		КонецЕсли;
		Если Результат.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = Результат.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Покажем текст ошибки пользователю.
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Выполнено Тогда
		ОповеститьОЗавершенииПодписанияИОтправки(Ложь, ПараметрыПодписанияИОтправки);
	КонецЕсли;
	
	Возврат Выполнено;

КонецФункции

Процедура ОповеститьОЗавершенииПодписанияИОтправки(Выполнено, ПараметрыПодписанияИОтправки, Транзакции = Неопределено)
	
	Перем ОповещениеОЗавершении;
	
	Если Не (ЗначениеЗаполнено(ПараметрыПодписанияИОтправки)
		И ПараметрыПодписанияИОтправки.Свойство("ПараметрыНаКлиенте")
		И ПараметрыПодписанияИОтправки.ПараметрыНаКлиенте.Свойство("ОповещениеОЗавершении", ОповещениеОЗавершении)
		И ОповещениеОЗавершении <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено",  Выполнено);
	Результат.Вставить("Транзакции", Транзакции);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
