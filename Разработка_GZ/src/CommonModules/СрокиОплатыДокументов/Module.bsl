#Область ПрограммныйИнтерфейс

// Возвращает срок оплаты для документа, срок должен содержаться в регистре
//   Параметры:
//   Организация - СправочникСсылка.Организации - Организация по которой нужны данные
//   Ссылка      - ДокументСсылка.* - документ, для которого нужно получить срок оплаты
//
// Возвращаемое значение:
//   СрокОплаты - Дата - если срока нет в регистре, то возвращается Неопределено
//
Функция УстановленныйСрокОплаты(Ссылка, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ",    Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СрокиОплатыДокументов.СрокОплаты
	|ИЗ
	|	РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|ГДЕ
	|	СрокиОплатыДокументов.Организация = &Организация
	|	И СрокиОплатыДокументов.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.СрокОплаты;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру со сроком оплаты документа расчетов и признаком срок был рассчитан или взят из регистра.
// Параметры:
//   Ссылка             - ДокументСсылка.* - документ, для которого нужно получить срок оплаты
//   ДатаДокумента      - Дата - Дата документа, может отличаться от даты, которая содержится в объекте БД
//   ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор, условия расчетов которого используются 
//                        для расчета срока оплаты документа.
//
// Возвращаемое значение:
//   Структура - содержит значения:
//     АвторасчетСрокаОплаты - Булево - Срок оплаты рассчитан или задан пользователем вручную
//     СрокОплаты - Дата
//
Функция СрокОплатыДокументаРасчетов(Организация, Ссылка, ДатаДокумента, ДоговорКонтрагента) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("АвторасчетСрокаОплаты", Истина);
	Результат.Вставить("СрокОплаты",            Дата(1,1,1));
	
	Если Ссылка.Пустая() Тогда // Новый документ
		
		Результат.СрокОплаты = СрокОплатыДокументаРасчетовАвторасчет(Ссылка, ДатаДокумента, ДоговорКонтрагента);
		Возврат Результат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",    Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СрокиОплатыДокументов.СрокОплаты
	|ИЗ
	|	РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|ГДЕ СрокиОплатыДокументов.Организация = &Организация и
	|	СрокиОплатыДокументов.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.АвторасчетСрокаОплаты = Ложь;
		Результат.СрокОплаты = Выборка.СрокОплаты;
		
	Иначе
		
		Результат.СрокОплаты = СрокОплатыДокументаРасчетовАвторасчет(Ссылка, ДатаДокумента, ДоговорКонтрагента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает срок оплаты для счета покупателю
// Параметры:
//   Ссылка        - ДокументСсылка.СчетНаОплатуПокупателю - документ, для которого нужно получить срок оплаты
//   ДатаДокумента - Дата - Дата документа
//
// Возвращаемое значение:
//   СрокОплаты - Дата или Неопределено
//
Функция СрокОплатыСчетаПокупателю(Ссылка, ДатаДокумента) Экспорт
	
	Если Ссылка.Пустая() Тогда // Новый документ
		
		Возврат СрокОплатыНовогоСчетаПокупателю(ДатаДокумента);
		
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СрокиОплатыДокументов) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СрокиОплатыДокументов.СрокОплаты
	|ИЗ
	|	РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|ГДЕ
	|	СрокиОплатыДокументов.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СрокОплаты = Выборка.СрокОплаты;
		
	Иначе
		
		СрокОплаты = Неопределено
		
	КонецЕсли;
	
	Возврат СрокОплаты;
	
КонецФункции

// Возвращает срок оплаты, рассчитанный на основании выбранного договора и даты документа.
// Параметры:
//   Ссылка - ДокументСсылка - документ для которого рассчитывается срок оплаты
//   ДатаДокумента - Дата - Дата документа
//   ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Договор
//
// Возвращаемое значение:
//   СрокОплаты
//
Функция СрокОплатыДокументаРасчетовАвторасчет(Ссылка, ДатаДокумента, ДоговорКонтрагента) Экспорт
	
	ДлинаСуток = 86400;
	СрокОплаты = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		Возврат СрокОплаты;
	КонецЕсли;
	
	Если Обработки.ОжидаемаяОплатаОтПокупателей.ТипыДокументовРасчетов().Найти(ТипЗнч(Ссылка)) <> Неопределено Тогда
		ОтсрочкаПоУмолчанию = Константы.СрокОплатыПокупателей.Получить();
	Иначе
		ОтсрочкаПоУмолчанию = Константы.СрокОплатыПоставщикам.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СрокОплаты = НачалоДня(ДатаДокумента) + ОтсрочкаПоУмолчанию*ДлинаСуток;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтсрочкаПоУмолчанию", ОтсрочкаПоУмолчанию);
		Запрос.УстановитьПараметр("ДатаДокумента",       ДатаДокумента);
		Запрос.УстановитьПараметр("Договор",             ДоговорКонтрагента);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.УстановленСрокОплаты
		|				И ДоговорыКонтрагентов.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДоговорыКонтрагентов.ДатаОплаты
		|		КОГДА ДоговорыКонтрагентов.УстановленСрокОплаты
		|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ), ДЕНЬ, ДоговорыКонтрагентов.СрокОплаты)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ), ДЕНЬ, &ОтсрочкаПоУмолчанию)
		|	КОНЕЦ КАК СрокОплаты
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СрокОплаты = Выборка.СрокОплаты;
		
	КонецЕсли;
	
	Возврат СрокОплаты;
	
КонецФункции

// Возвращает срок оплаты для нового счета покупателю
// Параметры:
//   ДатаДокумента - Дата - Дата документа
//
// Возвращаемое значение:
//   СрокОплаты - Дата или Неопределено, если нельзя определить дату по календарю
//
Функция СрокОплатыНовогоСчетаПокупателю(ДатаДокумента) Экспорт
	
	КоличествоРабочихДнейОтсрочки = Константы.СрокОплатыСчетовПокупателю.Получить();
	
	Если КоличествоРабочихДнейОтсрочки = 0 Тогда
		Возврат Дата(1,1,1); // Не заполнять автоматически
	КонецЕсли;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Отбор = Новый Структура;
	Отбор.Вставить("Год",                       Год(ДатаДокумента));
	Отбор.Вставить("Дата",                      ДатаДокумента);
	Отбор.Вставить("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	ДанныеДня = РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить(Отбор);
	
	ДатаДокументаЭтоВыходной = (ДанныеДня.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий И 
								ДанныеДня.ВидДня <> Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если ДатаДокументаЭтоВыходной Тогда
		
		Если КоличествоРабочихДнейОтсрочки = 1 Тогда
			// Срок оплаты - следующий рабочий день
			ДлинаСуток = 86400;
			
			СрокОплаты = КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь, ДатаДокумента, 1, Ложь);
			
			Если СрокОплаты <> Неопределено Тогда
				СрокОплаты = СрокОплаты - ДлинаСуток;
			КонецЕсли;
		
		Иначе
			// Отсрочка меньше на один день
			СрокОплаты = КалендарныеГрафики.ДатаПоКалендарю(
				ПроизводственныйКалендарь, ДатаДокумента, КоличествоРабочихДнейОтсрочки - 1, Ложь);
		КонецЕсли;
	Иначе
		СрокОплаты = КалендарныеГрафики.ДатаПоКалендарю(
			ПроизводственныйКалендарь, ДатаДокумента, КоличествоРабочихДнейОтсрочки, Ложь);
	КонецЕсли;
		
	Возврат СрокОплаты;
	
КонецФункции

// Обновляет срок оплаты: удаляет особый срок, если установлен авторасчет, или записывает новый срок в регистр
// Параметры:
//   СрокОплаты - Дата - Срок оплаты документа
//
//   Документ - документ, для которого будет записан срок оплаты
//   АвторасчетСрокаОплаты - Булево - Срок оплаты рассчитан или задан пользователем вручную
//
Процедура ОбновитьСрокОплаты(Документ, СрокОплаты, АвторасчетСрокаОплаты) Экспорт
	
	Если АвторасчетСрокаОплаты Тогда
		СрокиОплатыДокументов.УдалитьСрокОплаты(Документ);
	Иначе
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(Документ, СрокОплаты);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие у текущего пользователя права на редактирование сроков оплаты из связанных форм (документов, обработок и т.п.)
//
// Возвращаемое значение:
//  Булево - Истина, если есть право редактирования.
//
Функция ПравоРедактирования() Экспорт
	
	// Регистр содержит служебный реквизит организация, а его данные редактируются в формах документов,
	// обработок - то есть, вне форм регистра.
	//
	// Для того, чтобы уменьшить вероятность записи неконсистентных данных,
	// редактирование данных регистра в формах регистра большинству пользователей запрещено -
	// им предоставлено право Изменение, а не Редактирование.
	// 
	// Поэтому принято локальное соглашение: право на изменение данных означает возможность
	// интерактивного редактирования в формах документов, обработок и т.п.
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СрокиОплатыДокументов);
	
КонецФункции

// Записывает срок оплаты одного документа
//
// Параметры:
//   Документ - ДокументСсылка.ПоступлениеТоваровУслуг или Массив 
//            - документ или массив документов, для которых будет записан срок оплаты
//
//   СрокОплаты - Дата - Срок оплаты документа
//
// Возвращаемое значение:
//   ИзмененияЗаписаны - Булево
//
Процедура ЗаписатьСрокОплатыДокумента(Документ, СрокОплаты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
		
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	
	ЗаписатьСрокОплатыДокументов(МассивДокументов, СрокОплаты);
	
КонецПроцедуры

// Записывает срок оплаты массива документов
//
// Параметры:
//   МассивДокументов - Массив - массив документов, для которых будет записан срок оплаты
//   СрокОплаты       - Дата   - Срок оплаты документа
//
Процедура ЗаписатьСрокОплатыДокументов(МассивДокументов, СрокОплаты) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРедактирования() Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Документ КАК Документ,
	|	ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, НЕОПРЕДЕЛЕНО) КАК СрокОплаты
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО ТаблицаДокументов.Документ = СрокиОплатыДокументов.Документ
	|			И ТаблицаДокументов.Организация = СрокиОплатыДокументов.Организация
	|ГДЕ
	|	ТаблицаДокументов.Документ В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СрокОплаты = СрокОплаты Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СрокиОплатыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Значение = Выборка.Документ;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Выборка.Организация;
		Запись.Документ    = Выборка.Документ;
		Запись.СрокОплаты  = СрокОплаты;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет установленный пользователем срок оплаты документа, если он есть в базе
//
// Параметры:
//   Ссылка - ДокументСсылка.ПоступлениеТоваровУслуг - документ, для которого будет удален особый срок оплаты
//
Процедура УдалитьСрокОплаты(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.СрокиОплатыДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Записать();
	
КонецПроцедуры

// Возвращает таблицу с просроченной задолженностью поставщикам
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность().
//
Функция ПросроченнаяЗадолженностьПоставщикам(Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения = Ложь, РазрешеноИспользоватьТекущиеИтоги = Ложь) Экспорт
	
	Возврат ПросроченнаяЗадолженность(
				2,
				Организация,
				ДатаЗадолженности,
				ВключатьОбособленныеПодразделения,
				РазрешеноИспользоватьТекущиеИтоги);

КонецФункции

// Возвращает таблицу с просроченной задолженностью покупателей
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//   РазрешеноИспользоватьТекущиеИтоги - Булево - Если Истина, то при совпадении даты задолженности с текущим днем, 
//				будут использованы текущие итоги регистра бухгалтерии.
//   РазрешеноИспользоватьТекущиеИтоги - Булево - Если Истина, то при совпадении даты задолженности с текущим днем, 
//				будут использованы текущие итоги регистра бухгалтерии.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность().
//
Функция ПросроченнаяЗадолженностьПокупателей(Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения = Ложь, РазрешеноИспользоватьТекущиеИтоги = Ложь) Экспорт
	
	Возврат ПросроченнаяЗадолженность(
				1,
				Организация,
				ДатаЗадолженности,
				ВключатьОбособленныеПодразделения,
				РазрешеноИспользоватьТекущиеИтоги);
	
КонецФункции

// Возвращает таблицу с просроченной задолженностью поставщикам
// Параметры:
//   Тип         - Число - определяет для кого надо получить данные: 1 - покупатель, 2 - поставщик
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность
//   ВключатьОбособленныеПодразделения - Булево - признак добавления данных обособленных подразделений.
//   РазрешеноИспользоватьТекущиеИтоги - Булево - Если Истина, то при совпадении даты задолженности с текущим днем, 
//				будут использованы текущие итоги регистра бухгалтерии.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//     *Организация                    - СправочникСсылка.Организации
//     *ОрганизацияГоловнаяОрганизация - СправочникСсылка.Организации
//     *Подразделение                  - СправочникСсылка.ПодразделенияОрганизаций
//     *Контрагент                     - СправочникСсылка.Контрагенты
//     *Договор                        - СправочникСсылка.ДоговорыКонтрагентов
//     *Документ                       - Документ расчетов с контрагентом
//     *ПросроченнаяЗадолженность      - Число
//
Функция ПросроченнаяЗадолженность(Тип, Организация, ДатаЗадолженности, ВключатьОбособленныеПодразделения, РазрешеноИспользоватьТекущиеИтоги)
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация, ВключатьОбособленныеПодразделения);
	
	Запрос = НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности, РазрешеноИспользоватьТекущиеИтоги);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПросроченнаяЗадолженность = РезультатЗапроса[3].Выгрузить(); // учтены сроки оплаты документов
	
	СрокиОплаты = РезультатЗапроса[4].Выгрузить().ВыгрузитьКолонку("СрокОплаты"); // сроки оплаты долгов без документов
	
	// Не для всех задолженностей можно определить документ расчетов, и, как следствие - дату возникновения долга.
	// Поэтому для долгов без документов используется следующая методика:
	// Получаем сумму долга на дату задолженности, из этой суммы вычитаем сумму увеличения долга за период отсрочки.
	// Например, долг, который был вчера, это долг, который есть сегодня, минус увеличение долга за этот один день.
	// Таким образом, получаем сумму просроченной задолженностью.
	Если СрокиОплаты.Количество() > 0 Тогда
		
		ДлинаСуток = 86400;
		ТекстЗапросаУвеличениеДолга = "";
		
		Для Индекс = 0 По СрокиОплаты.ВГраница() Цикл
			
			СрокОплаты = СрокиОплаты[Индекс];
			Если ТипЗнч(СрокОплаты) = Тип("Число") Тогда
				ДатаНачалаИнтервала = НачалоДня(ДатаЗадолженности - ДлинаСуток * СрокОплаты);
			Иначе
				// Срок оплаты задан в договоре датой
				ДатаНачалаИнтервала = СрокОплаты;
			КонецЕсли;
			ГраницаНачалаИнтервала = Новый Граница(ДатаНачалаИнтервала, ВидГраницы.Включая);
			
			Запрос.УстановитьПараметр("НачалоИнтервала" + (Индекс+1), ГраницаНачалаИнтервала);
			Запрос.УстановитьПараметр("СрокОплаты"      + (Индекс+1), СрокОплаты);
			
			Если НЕ ПустаяСтрока(ТекстЗапросаУвеличениеДолга) Тогда
				ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга + ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс+1);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаУвеличениеДолга + ОбщегоНазначения.РазделительПакетаЗапросов()
					 + ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов();
		
		ОстальнаяПросроченнаяЗадолженность = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстальнаяПросроченнаяЗадолженность, ПросроченнаяЗадолженность);
		
	КонецЕсли;
	
	Возврат ПросроченнаяЗадолженность;
	
КонецФункции

Функция ПредставлениеСрокаОплаты(СрокОплаты) Экспорт
	
	ТекстСрокОплаты = НСтр("ru = 'Срок %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокОплаты, Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	
КонецФункции

// Возвращает срок оплаты выставленного счета по умолчанию
// Возвращаемое значение:
//   СрокОплаты - Число
//
Функция СрокОплатыСчетаПокупателюПоУмолчанию() Экспорт
	
	Возврат 3;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности, РазрешеноИспользоватьТекущиеИтоги)
	
	Если Тип = 1 Тогда
		
		ВидыДоговоров            = БухгалтерскиеОтчеты.ВидыДоговоровПокупателей();
		СчетаУчетаРасчетов       = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
		СрокОплатыПараметрыУчета = Константы.СрокОплатыПокупателей.Получить();
		ИспользуютсяСрокиОплаты  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейОтПокупателей");
		
	ИначеЕсли Тип = 2 Тогда
		
		ВидыДоговоров            = БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков();
		СчетаУчетаРасчетов       = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПоставщиков();
		СрокОплатыПараметрыУчета = Константы.СрокОплатыПоставщикам.Получить();
		ИспользуютсяСрокиОплаты  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
		
	КонецЕсли;
	
	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКД.Добавить(ВидСубконтоДоговоры);
	
	ВидыСубконтоКДД = Новый СписокЗначений;
	ВидыСубконтоКДД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКДД.Добавить(ВидСубконтоДоговоры);
	ВидыСубконтоКДД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций",         СписокОрганизаций);
	Запрос.УстановитьПараметр("ВидыДоговоров",             ВидыДоговоров);
	Запрос.УстановитьПараметр("КонецИнтервала",            КонецДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("ВидыСубконтоКД",            ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ВидыСубконтоКДД",           ВидыСубконтоКДД);
	Если РазрешеноИспользоватьТекущиеИтоги И КонецДня(ДатаЗадолженности) = КонецДня(ТекущаяДатаСеанса()) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("ГраницаОстатков",       Неопределено);
	Иначе
		Запрос.УстановитьПараметр("ГраницаОстатков",       Новый Граница(КонецДня(ДатаЗадолженности), ВидГраницы.Включая));
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаЗадолженности",         НачалоДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("СтандартныйСрокОплаты",     СрокОплатыПараметрыУчета);
	Запрос.УстановитьПараметр("СчетаСДокументомРасчетов",  СчетаУчетаРасчетов.СчетаСДокументомРасчетов);
	Запрос.УстановитьПараметр("СчетаБезДокументаРасчетов", СчетаУчетаРасчетов.СчетаБезДокументаРасчетов);
	Запрос.УстановитьПараметр("ИспользуютсяСрокиОплаты",   ИспользуютсяСрокиОплаты);
	
	Запрос.Текст = ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип);
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация КАК Организация,
	|	ВзаиморасчетыОстатки.Организация.ГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ВзаиморасчетыОстатки.Подразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплаты
	|	КОНЕЦ КАК СрокОплаты,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты КАК ДатаОплатыИзДоговора,
	|	ВзаиморасчетыОстатки.Субконто3 КАК Документ,
	|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаПоДокументам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаСДокументомРасчетов),
	|			&ВидыСубконтоКДД,
	|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (&ВидыДоговоров)
	|				И Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация КАК Организация,
	|	ВзаиморасчетыОстатки.Организация.ГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ВзаиморасчетыОстатки.Подразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплаты
	|	КОНЕЦ КАК СрокОплаты,
	|	ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты КАК ДатаОплатыИзДоговора,
	|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаБезДокументовБезГруппировки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаБезДокументаРасчетов),
	|			&ВидыСубконтоКД,
	|			ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (&ВидыДоговоров)
	|				И Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиДолгаПоДокументам.Организация,
	|	ОстаткиДолгаПоДокументам.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаПоДокументам.Подразделение,
	|	ОстаткиДолгаПоДокументам.Контрагент,
	|	ОстаткиДолгаПоДокументам.Договор,
	|	ОстаткиДолгаПоДокументам.СрокОплаты,
	|	ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора,
	|	ОстаткиДолгаПоДокументам.ОстатокДолга
	|ИЗ
	|	ОстаткиДолгаПоДокументам КАК ОстаткиДолгаПоДокументам
	|ГДЕ
	|	ОстаткиДолгаПоДокументам.Документ = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументовБезГруппировки.Организация КАК Организация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ОрганизацияГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ЕСТЬNULL(ОстаткиДолгаБезДокументовБезГруппировки.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Контрагент КАК Контрагент,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Договор КАК Договор,
	|	ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты КАК СрокОплаты,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ДатаОплатыИзДоговора КАК ДатаОплатыИзДоговора,
	|	СУММА(ОстаткиДолгаБезДокументовБезГруппировки.ОстатокДолга) КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолгаБезДокументов
	|ИЗ
	|	ОстаткиДолгаБезДокументовБезГруппировки КАК ОстаткиДолгаБезДокументовБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиДолгаБезДокументовБезГруппировки.Договор,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Организация,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Контрагент,
	|	ОстаткиДолгаБезДокументовБезГруппировки.Подразделение,
	|	ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты,
	|	ОстаткиДолгаБезДокументовБезГруппировки.ДатаОплатыИзДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаПоДокументам.Организация КАК Организация,
	|	ОстаткиДолгаПоДокументам.ОрганизацияГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация,
	|	ЕСТЬNULL(ОстаткиДолгаПоДокументам.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ОстаткиДолгаПоДокументам.Контрагент КАК Контрагент,
	|	ОстаткиДолгаПоДокументам.Договор КАК Договор,
	|	ОстаткиДолгаПоДокументам.Документ КАК Документ,
	|	ОстаткиДолгаПоДокументам.ОстатокДолга КАК ПросроченнаяЗадолженность
	|ИЗ
	|	ОстаткиДолгаПоДокументам КАК ОстаткиДолгаПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО (&ИспользуютсяСрокиОплаты)
	|			И ОстаткиДолгаПоДокументам.Организация = СрокиОплатыДокументов.Организация
	|			И ОстаткиДолгаПоДокументам.Документ = СрокиОплатыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОстаткиДолгаПоДокументам.Организация = ДанныеПервичныхДокументов.Организация
	|			И ОстаткиДолгаПоДокументам.Документ = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ОстаткиДолгаПоДокументам.Документ <> НЕОПРЕДЕЛЕНО
	|	И ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ДОБАВИТЬКДАТЕ(ДанныеПервичныхДокументов.ДатаРегистратора, ДЕНЬ, ОстаткиДолгаПоДокументам.СрокОплаты)) < &ДатаЗадолженности
	|			И ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиДолгаПоДокументам.Организация,
	|	ОстаткиДолгаПоДокументам.ОрганизацияГоловнаяОрганизация,
	|	ЕСТЬNULL(ОстаткиДолгаПоДокументам.Подразделение, НЕОПРЕДЕЛЕНО),
	|	ОстаткиДолгаПоДокументам.Контрагент,
	|	ОстаткиДолгаПоДокументам.Договор,
	|	ОстаткиДолгаПоДокументам.Документ,
	|	ОстаткиДолгаПоДокументам.ОстатокДолга
	|ИЗ
	|	ОстаткиДолгаПоДокументам КАК ОстаткиДолгаПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО (&ИспользуютсяСрокиОплаты)
	|			И ОстаткиДолгаПоДокументам.Организация = СрокиОплатыДокументов.Организация
	|			И ОстаткиДолгаПоДокументам.Документ = СрокиОплатыДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОстаткиДолгаПоДокументам.Организация = ДанныеПервичныхДокументов.Организация
	|			И ОстаткиДолгаПоДокументам.Документ = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ОстаткиДолгаПоДокументам.Документ <> НЕОПРЕДЕЛЕНО
	|	И ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора) < &ДатаЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументов.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолгаБезДокументов КАК ОстаткиДолгаБезДокументов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументов.ДатаОплатыИзДоговора
	|ИЗ
	|	ОстаткиДолгаБезДокументов КАК ОстаткиДолгаБезДокументов";
	
	Если Тип = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаРазвернутыйОстатокДт", "СуммаРазвернутыйОстатокКт");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	&ПолеУвеличениеДолга КАК УвеличениеДолга"
	+
	?(Индекс = 1, Символы.ПС + "ПОМЕСТИТЬ УвеличениеДолгаБезГруппировки" + Символы.ПС, Символы.ПС)
	+
	"ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала0,
	|			&ГраницаОстатков,
	|			,
	|			Счет В (&СчетаБезДокументаРасчетов),
	|			&ВидыСубконтоКД,
	|			ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты <> ДатаВремя(1, 1, 1)
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|					ИНАЧЕ &СтандартныйСрокОплаты
	|				КОНЕЦ = &СрокОплаты0
	|				И Организация В(&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, НЕОПРЕДЕЛЕНО),
	|	ВзаиморасчетыОбороты.Субконто1,
	|	ВзаиморасчетыОбороты.Субконто2,
	|	&ПолеУвеличениеДолга
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала0,
	|			&ГраницаОстатков,
	|			,
	|			Счет В (&СчетаСДокументомРасчетов),
	|			&ВидыСубконтоКДД,
	|			ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты <> ДатаВремя(1, 1, 1)
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|					ИНАЧЕ &СтандартныйСрокОплаты
	|				КОНЕЦ = &СрокОплаты0
	|				И Субконто3 = НЕОПРЕДЕЛЕНО
	|				И Организация В(&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если Тип = 1 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	ИначеЕсли Тип = 2 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеУвеличениеДолга", ТекстПоляУвеличениеДолга);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоИнтервала0"    , "НачалоИнтервала" + Индекс);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СрокОплаты0"         , "СрокОплаты"      + Индекс);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов()
	
	Возврат
	"ВЫБРАТЬ
	|	УвеличениеДолгаБезГруппировки.Организация КАК Организация,
	|	УвеличениеДолгаБезГруппировки.Подразделение КАК Подразделение,
	|	УвеличениеДолгаБезГруппировки.Контрагент КАК Контрагент,
	|	УвеличениеДолгаБезГруппировки.Договор КАК Договор,
	|	СУММА(УвеличениеДолгаБезГруппировки.УвеличениеДолга) КАК УвеличениеДолга
	|ПОМЕСТИТЬ УвеличениеДолгаДляВсехСроков
	|ИЗ
	|	УвеличениеДолгаБезГруппировки КАК УвеличениеДолгаБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	УвеличениеДолгаБезГруппировки.Подразделение,
	|	УвеличениеДолгаБезГруппировки.Договор,
	|	УвеличениеДолгаБезГруппировки.Организация,
	|	УвеличениеДолгаБезГруппировки.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	УвеличениеДолгаБезГруппировки.Подразделение,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДолгаБезДокументов.Организация,
	|	ОстаткиДолгаБезДокументов.ОрганизацияГоловнаяОрганизация,
	|	ОстаткиДолгаБезДокументов.Подразделение КАК Подразделение,
	|	ОстаткиДолгаБезДокументов.Контрагент,
	|	ОстаткиДолгаБезДокументов.Договор,
	|	ВЫБОР
	|		КОГДА ОстаткиДолгаБезДокументов.ОстатокДолга > ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
	|			ТОГДА ОстаткиДолгаБезДокументов.ОстатокДолга - ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПросроченнаяЗадолженность
	|ИЗ
	|	ОстаткиДолгаБезДокументов КАК ОстаткиДолгаБезДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ УвеличениеДолгаДляВсехСроков КАК УвеличениеДолгаДляВсехСроков
	|		ПО ОстаткиДолгаБезДокументов.Организация = УвеличениеДолгаДляВсехСроков.Организация
	|			И ОстаткиДолгаБезДокументов.Контрагент = УвеличениеДолгаДляВсехСроков.Контрагент
	|			И ОстаткиДолгаБезДокументов.Договор = УвеличениеДолгаДляВсехСроков.Договор
	|			И ОстаткиДолгаБезДокументов.Подразделение = УвеличениеДолгаДляВсехСроков.Подразделение";
	
КонецФункции

#Область ПроцедурыОбновленияИБ

// Заполняет начальные наcтройки ИБ
//
Процедура УстановитьСрокиОплатыСчетов() Экспорт 
	
	Константы.СрокОплатыСчетовПокупателю.Установить(СрокОплатыСчетаПокупателюПоУмолчанию());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
