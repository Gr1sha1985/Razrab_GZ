////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетКлиент: методы кадрового учета, работающие на стороне клиента.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает формы выбора физических лиц, работающих в организации.
//
// Параметры:
//		ЭлементФормы						- ФормаКлиентскогоПриложения или элемент управляемой формы, являющийся владельцем формы подбора.
//		Организация							- СправочникСсылка.Организации
//		МножественныйВыбор					- Булево
//		ФиксированныеНастройки 				- НастройкаКомпоновкиДанных (параметр, расширения динамического списка).
//		АдресСпискаПодобранныхСотрудников 	- Строка
//		ОтбиратьПоГоловнойОрганизации		- Булево, если передать Истина в список войдут сотрудники головной организации.
//		ПараметрыОткрытияФормы				- Структура, в которой можно определить параметры открытия формы выбора.
//
Процедура ВыбратьФизическихЛицОрганизации(ЭлементФормы, Организация, МножественныйВыбор = Истина, ФиксированныеНастройки = Неопределено, АдресСпискаПодобранныхСотрудников = "", ОтбиратьПоГоловнойОрганизации = Ложь, ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;
	
	СтруктураОтбора = Неопределено;
	ПараметрыОткрытияФормы.Свойство("Отбор", СтруктураОтбора);
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	Если ОтбиратьПоГоловнойОрганизации Тогда
		СтруктураОтбора.Вставить("ГоловнаяОрганизация", Организация);
	Иначе
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", НЕ МножественныйВыбор);
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если ФиксированныеНастройки <> Неопределено Тогда
		ПараметрыОткрытияФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(АдресСпискаПодобранныхСотрудников) Тогда
		ПараметрыОткрытияФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыОткрытияФормы, ЭлементФормы);
	
КонецПроцедуры

// Открывает формы выбора физических лиц, работающих в организации, позволяет выбрать несколько значений.
// В параметре АдресСпискаПодобранныхСотрудников передается адрес массива ссылок уже подобранных физических лиц.
// Подобранные физические лица выделяются жирным шрифтом.
//
// Параметры:
//		ЭлементФормы
//		Организация
//		АдресСпискаПодобранныхСотрудников.
//		ОтбиратьПоГоловнойОрганизации		- Булево, если передать Истина в список войдут сотрудники головной организации.
//		ПараметрыОткрытияФормы				- Структура, в которой можно определить параметры открытия формы выбора.
//
Процедура ПодобратьФизическихЛицОрганизации(ЭлементФормы, Организация, АдресСпискаПодобранныхСотрудников, ОтбиратьПоГоловнойОрганизации = Ложь, ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	ВыбратьФизическихЛицОрганизации(ЭлементФормы, Организация, Истина, , АдресСпискаПодобранныхСотрудников, ОтбиратьПоГоловнойОрганизации, ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Открывает форму подбора значений из классификатора.
//
// Параметры:
//			ИмяСправочника 					- Строка, имя справочника как оно задано в конфигураторе.
//			ПолныйПутьКМакету 				- Строка - формат полного пути:
//												"Документ.<ИмяДокумента>.<ИмяМакета>"
//												"Обработка.<ИмяОбработки>.<ИмяМакета>"
//												"ОбщийМакет.<ИмяМакета>".
//			Заголовок						- Строка
//			Форма							- ФормаКлиентскогоПриложения, форма - владелец.
//			СоответствиеПолей				- Соответствие, задает соответствие имен реквизитов справочника\
//												именам полей классификатора.
//			ОповещениеЗавершения			- ОписаниеОповещения, которое необходимо выполнить по окончании
//												выбора элементов классификатора.
//			ЗаполнятьДополнительныеСведения	- Булево, если Истина собирает поля строки классификатора в структуру и вызывает
//												реализованный в модуле объекта метод ЗаполнитьДополнительныеСведенияКлассификатора,
//												заполняемого справочника.
//
Процедура ОткрытьФормуПодбораИзКлассификатора(ИмяСправочника, ПолныйПутьКМакету, Заголовок, Форма, СоответствиеПолей = Неопределено, ОповещениеЗавершения = Неопределено, ЗаполнятьДополнительныеСведения = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочника", ИмяСправочника);
	СтруктураПараметров.Вставить("ПолныйПутьКМакету", ПолныйПутьКМакету);
	СтруктураПараметров.Вставить("Заголовок", Заголовок);
	СтруктураПараметров.Вставить("ЗаполнятьДополнительныеСведения", ЗаполнятьДополнительныеСведения);
		
	Если СоответствиеПолей <> Неопределено Тогда
		СтруктураПараметров.Вставить("СоответствиеПолей", СоответствиеПолей);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Форма, ОповещениеЗавершения", Форма, ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПодбораИзКлассификатораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеСправочниковИзКлассификаторов", СтруктураПараметров, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора справочника Сотрудники с отбором только работающих
// сотрудников на указанную дату и в указанных, организации и подразделении.
//
// Параметры:
//		ВладелецФормыВыбора					- Форма или элемент формы, для которого открывается форма выбора.
//		Организация							- СправочникСсылка.Организации, если не указана, в отбор попадают все сотрудники компании.
//		Подразделение						- СправочникСсылка.ПодразделенияОрганизации, если не указано - в отбор попадают все сотрудники.
//		ДатаПримененияОтбора				- Дата, на которую необходимо выбрать работающих сотрудников.
//      МножественныйВыбор					- Булево, если ложь - форма откроется для выбора одного сотрудника.
//		АдресСпискаПодобранныхСотрудников	- Строка, адрес массива уже подобранных сотрудников во временном хранилище.
//		ПараметрыОткрытия					- Структура, аналогичная структуре параметров формы списка.
//
Процедура ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, ДатаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", ПараметрыОткрытия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДатаПримененияОтбора) Тогда
		
		Если ПараметрыОткрытия = Неопределено Тогда
			ПараметрыОткрытия = Новый Структура;
		КонецЕсли; 
		
		Если Не ПараметрыОткрытия.Свойство("Отбор") Тогда
			ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
	
		ПараметрыОткрытия.Отбор.Вставить("ДатаПримененияОтбора", ДатаПримененияОтбора);
		
	КонецЕсли; 
	
	ОткрытьФормуВыбораСотрудников(ВладелецФормыВыбора, Организация, Подразделение, МножественныйВыбор, ПараметрыОткрытия, АдресСпискаПодобранныхСотрудников);	
	
КонецПроцедуры

// Открывает форму выбора справочника Сотрудники с отбором только работающих
// сотрудников в периоде.
//
// Параметры:
//		ВладелецФормыВыбора 				- Форма или элемент формы, для которого открывается форма выбора.
//		Организация 						- СправочникСсылка.Организации, если не указана, в отбор попадают все сотрудники компании.
//		Подразделение 						- СправочникСсылка.ПодразделенияОрганизации, если не указано - в отбор попадают все сотрудники.
//		НачалоПериодаПримененияОтбора 		- Дата, начало периода для отбора сотрудников.
//		ОкончаниеПериодаПримененияОтбора 	- Дата, окончание периода для отбора сотрудников.
//      МножественныйВыбор 					- Булево, если ложь - форма откроется для выбора одного сотрудника.
//		АдресСпискаПодобранныхСотрудников	- Строка, адрес массива уже подобранных сотрудников во временном хранилище.
//		ПараметрыОткрытия					- Структура, аналогичная структуре параметров формы списка.
//
Процедура ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, НачалоПериодаПримененияОтбора = '00010101', ОкончаниеПериодаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", ПараметрыОткрытия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(НачалоПериодаПримененияОтбора) Тогда
		
		Если ПараметрыОткрытия = Неопределено Тогда
			ПараметрыОткрытия = Новый Структура;
		КонецЕсли; 
		
		Если Не ПараметрыОткрытия.Свойство("Отбор") Тогда
			ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		ПараметрыОткрытия.Отбор.Вставить("НачалоПериодаПримененияОтбора", НачалоДня(НачалоПериодаПримененияОтбора));
		Если ЗначениеЗаполнено(ОкончаниеПериодаПримененияОтбора)
			И ОкончаниеПериодаПримененияОтбора > НачалоПериодаПримененияОтбора Тогда
			
			ПараметрыОткрытия.Отбор.Вставить("ОкончаниеПериодаПримененияОтбора", КонецДня(ОкончаниеПериодаПримененияОтбора));
			
		Иначе
			ПараметрыОткрытия.Отбор.Вставить("ОкончаниеПериодаПримененияОтбора", КонецДня(НачалоПериодаПримененияОтбора));
		КонецЕсли;
		
	КонецЕсли; 
	
	ОткрытьФормуВыбораСотрудников(ВладелецФормыВыбора, Организация, Подразделение, МножественныйВыбор, ПараметрыОткрытия, АдресСпискаПодобранныхСотрудников);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела см. ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка
//
Процедура ВыбратьСотрудниковРаботающихНаДату(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, ДатаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаПримененияОтбора) Тогда
		СтруктураОтбора.Вставить("ДатаПримененияОтбора", ДатаПримененияОтбора);
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФормуВыбораСотрудников(ВладелецФормыВыбора, Организация, Подразделение, МножественныйВыбор, ПараметрыОткрытия, АдресСпискаПодобранныхСотрудников);	
	
КонецПроцедуры

// Устарела см. ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка
//
Процедура ВыбратьСотрудниковРаботающихВПериоде(ВладелецФормыВыбора, Организация = Неопределено, Подразделение = Неопределено, НачалоПериодаПримененияОтбора = '00010101', ОкончаниеПериодаПримененияОтбора = '00010101', МножественныйВыбор = Истина, АдресСпискаПодобранныхСотрудников = "", СтруктураОтбора = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(НачалоПериодаПримененияОтбора) Тогда
		
		СтруктураОтбора.Вставить("НачалоПериодаПримененияОтбора", НачалоДня(НачалоПериодаПримененияОтбора));
		Если ЗначениеЗаполнено(ОкончаниеПериодаПримененияОтбора)
			И ОкончаниеПериодаПримененияОтбора > НачалоПериодаПримененияОтбора Тогда
			
			СтруктураОтбора.Вставить("ОкончаниеПериодаПримененияОтбора", КонецДня(ОкончаниеПериодаПримененияОтбора));
			
		Иначе
			СтруктураОтбора.Вставить("ОкончаниеПериодаПримененияОтбора", КонецДня(НачалоПериодаПримененияОтбора));
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФормуВыбораСотрудников(ВладелецФормыВыбора, Организация, Подразделение, МножественныйВыбор, ПараметрыОткрытия, АдресСпискаПодобранныхСотрудников);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаВыбораОснованиеУвольнения(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ВыбранноеЗначение)));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуВыбораСотрудников(ВладелецФормыВыбора, Организация, Подразделение, МножественныйВыбор, ПараметрыФормы, АдресСпискаПодобранныхСотрудников)
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", НЕ МножественныйВыбор);
		
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если Не ПараметрыФормы.Свойство("Отбор") Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		ПараметрыФормы.Отбор.Вставить("ТекущаяОрганизация", Организация);
		
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		Если Не ПараметрыФормы.Свойство("Отбор") Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		ПараметрыФормы.Отбор.Вставить("ТекущееПодразделение", Подразделение);
		
	КонецЕсли; 
	
	Если МножественныйВыбор И НЕ ПустаяСтрока(АдресСпискаПодобранныхСотрудников) Тогда
		ПараметрыФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, ВладелецФормыВыбора);	
	
КонецПроцедуры

// Продолжение процедуры ОткрытьФормуПодбораИзКлассификатора.
//
Процедура ОткрытьФормуПодбораИзКлассификатораЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДополнительныеПараметры.Форма.Элементы.Список.Обновить();
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Результат);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОповеститьОбИзмененииРабочегоМеста(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ФизическоеЛицо", Форма.Объект.ФизическоеЛицо);
	ПараметрыОповещения.Вставить("Сотрудник", Форма.Объект.Сотрудник);
	
	Оповестить("ИзменениеДанныхМестаРаботы", ПараметрыОповещения, Форма);
	
КонецПроцедуры

Процедура ИсключитьПовторениеЗаписейТекущихТарифныхСтавокСотрудников() Экспорт
	
	КадровыйУчетВызовСервера.ИсключитьПовторениеЗаписейТекущихДанныхСотрудников("ТекущаяТарифнаяСтавкаСотрудников");
	
КонецПроцедуры

Процедура ИсключитьПовторениеЗаписейТекущихКадровыхДанныхСотрудников() Экспорт
	
	КадровыйУчетВызовСервера.ИсключитьПовторениеЗаписейТекущихДанныхСотрудников("ТекущиеКадровыеДанныеСотрудников");
	
КонецПроцедуры

Процедура ИсключитьЗадвоениеОсновныхРабочихМестТекущихДанныхСотрудников() Экспорт
	
	КадровыйУчетВызовСервера.ИсключитьЗадвоениеОсновныхРабочихМестТекущихДанныхСотрудников();
	
КонецПроцедуры

Процедура ИзменитьКоличествоСтавок(Форма, ПутьКРеквизитуКоличествоСтавок, СтандартнаяОбработка, ПутьКРеквизитуПредставленияКоличестваСтавок = "", ОповещениеЗавершения = Неопределено, КоллекцияСКоличествомСтавок = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПутьКРеквизитуКоличествоСтавок", ПутьКРеквизитуКоличествоСтавок);
	
	Если ЗначениеЗаполнено(ПутьКРеквизитуПредставленияКоличестваСтавок) Тогда
		ДополнительныеПараметры.Вставить("ПутьКРеквизитуПредставленияКоличестваСтавок", ПутьКРеквизитуПредставленияКоличестваСтавок);
	КонецЕсли; 
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	КонецЕсли; 
	
	Если КоллекцияСКоличествомСтавок = Неопределено Тогда
		ДополнительныеПараметры.Вставить("КоллекцияСКоличествомСтавок", Форма);
	Иначе
		ДополнительныеПараметры.Вставить("КоллекцияСКоличествомСтавок", КоллекцияСКоличествомСтавок);
	КонецЕсли;
	
	КоличествоСтавок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		ДополнительныеПараметры.КоллекцияСКоличествомСтавок, ПутьКРеквизитуКоличествоСтавок);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КоличествоСтавок", КоличествоСтавок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр );
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьКоличествоСтавокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВводКоличестваСтавок", ПараметрыОткрытия, Форма, Истина, , , Оповещение);
	
КонецПроцедуры

Процедура ИзменитьКоличествоСтавокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			ДополнительныеПараметры.КоллекцияСКоличествомСтавок, ДополнительныеПараметры.ПутьКРеквизитуКоличествоСтавок, Результат);
			
		Если ДополнительныеПараметры.Свойство("ПутьКРеквизитуПредставленияКоличестваСтавок") Тогда
				
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				ДополнительныеПараметры.КоллекцияСКоличествомСтавок,
				ДополнительныеПараметры.ПутьКРеквизитуПредставленияКоличестваСтавок,
				КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(Результат));
				
		КонецЕсли; 
			
		Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Результат);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоличествоСтавокРегулирование(Форма, КоличествоСтавок, Направление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Форма.Модифицированность = Истина;
	
	Если ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьРаботуНаНеполнуюСтавку") Тогда
		КоличествоСтавок = КоличествоСтавок + Направление * 0.5;
	Иначе
		КоличествоСтавок = Окр(КоличествоСтавок + Направление, 0, ?(Направление > 0, РежимОкругления.Окр15как10, РежимОкругления.Окр15как20));
	КонецЕсли; 
	
КонецПроцедуры	

#КонецОбласти
