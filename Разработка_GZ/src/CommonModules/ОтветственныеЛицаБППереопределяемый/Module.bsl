////////////////////////////////////////////////////////////////////////////////
// Ответственные лица: процедуры и функции для работы с ответственным лицами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает структуру с реквизитами ответственных лиц.
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//	ДатаСреза - дата со временем, на которые необходимо определить сведения.
//	Подразделение - подразделение, для которого необходимо определить ответственных лиц.
//
Функция ОтветственныеЛица(Организация, ДатаСреза, Подразделение = Неопределено) Экспорт

	ДанныеОтветственныхЛиц = ОтветственныеЛицаБП.ПустаяСтруктураОтветственныхЛиц();

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ДанныеОтветственныхЛиц;
	КонецЕсли;
	
	СобиратьПоОрганизации = НЕ ЗначениеЗаполнено(Подразделение);

	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
			"ИндивидуальныйПредприниматель, ЮридическоеФизическоеЛицо");
	Иначе
		РеквизитыОрганизации = Новый Структура();
		РеквизитыОрганизации.Вставить("ИндивидуальныйПредприниматель");
		РеквизитыОрганизации.Вставить("ЮридическоеФизическоеЛицо");
	КонецЕсли;

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);

	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		НаименованияОрганизации = Справочники.Организации.НаименованияНаДату(Организация, ДатаСреза);
		
		ФИО = Новый Структура("Фамилия, Имя, Отчество");
		ЗаполнитьЗначенияСвойств(ФИО, НаименованияОрганизации.ФИО);
		ФИО.Вставить("Представление", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		
		ДанныеОтветственныхЛиц.Руководитель               = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		ДанныеОтветственныхЛиц.РуководительФИО            = ФИО;
		ДанныеОтветственныхЛиц.РуководительПредставление  = ФИО.Представление;
		
	КонецЕсли;
	
	Если СобиратьПоОрганизации Тогда
	
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицоПредставление,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК ДолжностьПредставление
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо <> ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ПустаяСсылка)";
		
	Иначе // поиск наименьшей структурной единицы, для которой задано ответственное лицо
		
		МассивТиповСтруктурнойЕдиницы = Новый Массив;
		МассивТиповСтруктурнойЕдиницы.Добавить(Тип("СправочникСсылка.Организации"));
		МассивТиповСтруктурнойЕдиницы.Добавить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения());
		
		// Создание таблицы иерархии подразделения.
		ТаблицаСтруктурныхЕдиниц = Новый ТаблицаЗначений;
		ТаблицаСтруктурныхЕдиниц.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(15));
		ТаблицаСтруктурныхЕдиниц.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов(МассивТиповСтруктурнойЕдиницы));

		// Добавление подразделения.
		НоваяСтрока = ТаблицаСтруктурныхЕдиниц.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Подразделение;
		
		// Добавление родителей подразделения.
		МассивПодразделений = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Подразделение);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаСтруктурныхЕдиниц, МассивПодразделений, "СтруктурнаяЕдиница");
		
		// Добавление организации.
		НоваяСтрока = ТаблицаСтруктурныхЕдиниц.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Организация;
		
		Порядок = 0;
		Для каждого СтруктурнаяЕдиница Из ТаблицаСтруктурныхЕдиниц Цикл
			Порядок = Порядок + 1;
			СтруктурнаяЕдиница.Порядок = Порядок;
		КонецЦикла; 
		
		ЗапросПоЛицам.УстановитьПараметр("ВнешнийИсточник", ТаблицаСтруктурныхЕдиниц);
		
		// Среди иерархии структурных единиц находим наименьшую, для которой задано ответственное лицо.
		ЗапросПоЛицам.Текст =
		"ВЫБРАТЬ
		|	ВнешнийИсточник.Порядок КАК Порядок,
		|	ВнешнийИсточник.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ТаблицаСтруктурныхЕдиниц
		|ИЗ
		|	&ВнешнийИсточник КАК ВнешнийИсточник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ТаблицаСтруктурныхЕдиниц.Порядок КАК Порядок
		|ПОМЕСТИТЬ ОтветственныеЛицаОрганизацийСрезПоследних
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСтруктурныхЕдиниц КАК ТаблицаСтруктурныхЕдиниц
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = ТаблицаСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо <> ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтветственноеЛицо,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК ФизическоеЛицоПредставление,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК Должность,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК ДолжностьПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|		МИНИМУМ(ОтветственныеЛицаОрганизацийСрезПоследних.Порядок) КАК Порядок
		|	ИЗ
		|		ОтветственныеЛицаОрганизацийСрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо) КАК ОтветственныеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтветственныеЛицаОрганизацийСрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ПО ОтветственныеЛица.ОтветственноеЛицо = ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|			И ОтветственныеЛица.Порядок = ОтветственныеЛицаОрганизацийСрезПоследних.Порядок";
		
	КонецЕсли;
	Руководители = ЗапросПоЛицам.Выполнить().Выгрузить();
	
	// Получим ФИО+Представление
	ПоляИмени = "Фамилия, Имя, Отчество, ФамилияИО";
	РуководителиСписок = Руководители.ВыгрузитьКолонку("ФизическоеЛицо");
	УстановитьПривилегированныйРежим(Истина);
	ФИОРуководителей = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина,
		РуководителиСписок,
		ПоляИмени,
		ДатаСреза);
	УстановитьПривилегированныйРежим(Ложь);

	Для каждого Руководитель Из Руководители Цикл
		
		ФИОРуководителя = ФИОРуководителей.Найти(Руководитель.ФизическоеЛицо, "ФизическоеЛицо");
		Если ФИОРуководителя = Неопределено Тогда
			Фамилия       = " ";
			Имя           = " ";
			Отчество      = " ";
			Представление = " ";
		Иначе
			Фамилия       = ФИОРуководителя.Фамилия;
			Имя           = ФИОРуководителя.Имя;
			Отчество      = ФИОРуководителя.Отчество;
			Представление = ФИОРуководителя.ФамилияИО;
		КонецЕсли;
		ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", Фамилия, Имя, Отчество, Представление);

		ИмяОтветственного = ОбщегоНазначения.ИмяЗначенияПеречисления(Руководитель.ОтветственноеЛицо);
		Если ДанныеОтветственныхЛиц.Свойство(ИмяОтветственного) Тогда
			ДанныеОтветственныхЛиц[ИмяОтветственного]                            = Руководитель.ФизическоеЛицо;
			ДанныеОтветственныхЛиц[ИмяОтветственного + "Должность"]              = Руководитель.Должность;
			ДанныеОтветственныхЛиц[ИмяОтветственного + "ДолжностьПредставление"] = Руководитель.ДолжностьПредставление;
			ДанныеОтветственныхЛиц[ИмяОтветственного + "ФИО"]                    = ФИО;
			ДанныеОтветственныхЛиц[ИмяОтветственного + "Представление"]          = Представление;
		КонецЕсли;

	КонецЦикла;

	Возврат ДанныеОтветственныхЛиц;

КонецФункции

// Функция возвращает массив с датами изменения в ответственных лицах.
//
Функция ДатыИзмененияОтветственныхЛицОрганизаций(Организация) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
	|			И (ПодразделенияОрганизаций.Владелец = &Организация)";
	
	ТаблицаОтветственныеЛица = Запрос.Выполнить().Выгрузить();
	ТаблицаОтветственныеЛица.Индексы.Добавить("ФизическоеЛицо");
	
	МассивДат            = ТаблицаОтветственныеЛица.ВыгрузитьКолонку("Период");
	МассивФизическиеЛица = ТаблицаОтветственныеЛица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	МассивДат            = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДат);
	МассивФизическиеЛица = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФизическиеЛица);
	
	ТаблицаФизическиеЛица = КадровыйУчет.ПериодыИзмененияФИОФизическихЛиц(МассивФизическиеЛица);
	
	Для каждого СтрокаТаблицыФизическиеЛица Из ТаблицаФизическиеЛица Цикл
		
		ДатыНазначенияОтвественныхЛиц = ТаблицаОтветственныеЛица.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаТаблицыФизическиеЛица.ФизическоеЛицо));
		Для каждого ДатаНазначенияОтветственногоЛица Из ДатыНазначенияОтвественныхЛиц Цикл
			// Добавляем дату изменения ФИО ответственного лица, только если оно произошло после назначения в должность
			Если ДатаНазначенияОтветственногоЛица.Период < СтрокаТаблицыФизическиеЛица.Период 
					И МассивДат.Найти(СтрокаТаблицыФизическиеЛица.Период) = Неопределено Тогда
			
				МассивДат.Добавить(СтрокаТаблицыФизическиеЛица.Период);
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЦикла;

	Возврат МассивДат;

КонецФункции

// Функция возвращает структуру с реквизитами подписи уполномоченного лица.
//
// Параметры:
//	Организация 	- СправочникСсылка.Организация
//	ФизическоеЛицо 	- СправочникСсылка.ФизическиеЛица
//	ОснованиеПраваПодписи 	- СправочникСсылка.ОснованияПравПодписи
//	ДатаСреза 		- Дата
//
Функция РеквизитыПодписиУполномоченногоЛица(Организация, ФизическоеЛицо, ОснованиеПраваПодписи = Неопределено,ДатаСреза = Неопределено) Экспорт 
	
	Результат = ОтветственныеЛицаБП.ПустаяСтруктураУполномоченногоЛица();
	
	Если НЕ ЗначениеЗаполнено(ДатаСреза) тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Результат.ФизическоеЛицо        = ФизическоеЛицо;
	Результат.ОснованиеПраваПодписи = ОснованиеПраваПодписи;
	
	Если ЗначениеЗаполнено(ОснованиеПраваПодписи)тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОснованияПраваПодписи.Наименование КАК ОснованиеПраваПодписиПредставление,
		               |	ОснованияПраваПодписи.Должность,
		               |	ОснованияПраваПодписи.Должность.Наименование КАК ДолжностьПредставление
		               |ИЗ
		               |	Справочник.ОснованияПраваПодписи КАК ОснованияПраваПодписи
		               |ГДЕ
		               |	ОснованияПраваПодписи.Ссылка = &ОснованиеПраваПодписи";
		Запрос.УстановитьПараметр("ОснованиеПраваПодписи", ОснованиеПраваПодписи);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			ЗаполнитьЗначенияСвойств(Результат,Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", " ", " ", " ", "");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ДанныеФизическогоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, ФизическоеЛицо, ДатаСреза);
		ЗаполнитьЗначенияСвойств(Результат.ФИО, ДанныеФизическогоЛица);
		
		Если НЕ Значениезаполнено(Результат.Должность) тогда
			
			Результат.Должность    = ДанныеФизическогоЛица.Должность;
			
			Если ЗначениеЗаполнено(Результат.Должность) тогда
				Результат.ДолжностьПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Должность,"Наименование");
			Иначе
				Результат.ДолжностьПредставление = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру ДанныеУполномоченногоЛица сведения о полномочиях пользователя.
//
// Параметры:
//	Организация 	- СправочникСсылка.Организация
//	Пользователь 	- СправочникСсылка.Пользователи, если не заполнен, то для всех пользователей.
//
Функция ДанныеУполномоченногоЛица(Организация, Пользователь,Подразделение = Неопределено) Экспорт 
	
	Результат = ОтветственныеЛицаБП.ПустаяСтруктураУполномоченныхЛиц();
	
	Если ЗначениеЗаполнено(Подразделение) тогда
		Подразделение = ?(Подразделение.Обособленноеподразделение,Подразделение, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Иначе 
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УполномоченныеЛица.УполномоченноеЛицо,
	               |	УполномоченныеЛица.ОснованиеПраваПодписи,
	               |	УполномоченныеЛица.ЗаКогоПодписывает
	               |ИЗ
	               |	РегистрСведений.УполномоченныеЛицаОрганизаций КАК УполномоченныеЛица
	               |ГДЕ
	               |	УполномоченныеЛица.Организация = &Организация
	               |	И УполномоченныеЛица.ПодразделениеОрганизации = &Подразделение
	               |	И УполномоченныеЛица.Пользователь = &Пользователь";
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		    Если Выборка.ЗаКогоПодписывает = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель тогда
				
				Результат.Руководитель 			= Выборка.УполномоченноеЛицо;
				Результат.РуководительНаОсновании	= Выборка.ОснованиеПраваПодписи;
								
			ИначеЕсли Выборка.ЗаКогоПодписывает = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер тогда
				
				Результат.ГлавныйБухгалтер 			= Выборка.УполномоченноеЛицо;
				Результат.ГлавныйБухгалтерНаОсновании	= Выборка.ОснованиеПраваПодписи;
				
			ИначеЕсли Выборка.ЗаКогоПодписывает = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаОформление тогда
				
				Результат.ОтветственныйЗаОформление 			= Выборка.УполномоченноеЛицо;
				
			КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает ответственное лицо на складе на указанную дату.
//
Функция ОтветственноеЛицоНаСкладе(Склад, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, СтруктурнаяЕдиница = &Склад) КАК ОтветственныеЛицаСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Возврат Результат[0].МОЛ;
	КонецЕсли;
	
КонецФункции

#КонецОбласти