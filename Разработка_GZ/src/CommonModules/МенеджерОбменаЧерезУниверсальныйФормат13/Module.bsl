// Конвертация БП3.0.44 (формат 1.6) от 25.02.2021 12:03:52
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
			"СкладПоУмолчанию,
			|ПравилаЗагрузкиПодразделений,
			|РазрешитьПроведениеДокументовПриЗагрузке,
			|НоменклатурнаяГруппаПоУмолчанию,
			|СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
			
		КонецЕсли;
		
		// Загрузка договоров контрагентов может выполняться в некоторых случаях и по ссылке.
		// В этом случае, если договор не найден - нужно его все равно создавать.
		// Поэтому установим для ПКО Справочник_ДоговорыКонтрагентов признак "РазрешитьСоздаватьОбъектИзСтруктуры" в Истина
		ПКОДоговоры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов");
		ПКОДоговоры.РазрешитьСоздаватьОбъектИзСтруктуры = Истина;
		
		// Для версий формата 1.3 и старше созданием ПКО управляет флаг - "УчетВыручкиВОперационнойКассе" в объекте "ОтчетОРозничныхПродажах"
		КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") ;
		КомпонентыОбмена.ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
			
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
	
		// Инициализация таблицы для отложенного заполнения документов.
			
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяПКО");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
	
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеОбъекты = ЗагруженныеОбъекты;
		КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов = Новый Массив;
	
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности выданных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров"));
	
		СчетФактурыВыданныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке = СчетФактурыВыданныеКОбработке;
	
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности полученных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
	
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ГТДИмпорт"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
		СчетФактурыПолученныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке = СчетФактурыПолученныеКОбработке;	
	    // Отчеты о розничных продажах, для которых необходимо создать ПКО
		КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов          = Новый Соответствие;
		
		//Инициализируем массив КлассификатораТНВЭД
		//для заполнения единицы измерения
		МассивТНВЭД = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД = МассивТНВЭД;
		
		СтатусыДокументовКЗагрузке = Новый ТаблицаЗначений();
		СтатусыДокументовКЗагрузке.Колонки.Добавить("Документ", Метаданные.РегистрыСведений.СтатусыДокументов.Измерения.Документ.Тип);
		СтатусыДокументовКЗагрузке.Колонки.Добавить("Статус", Метаданные.РегистрыСведений.СтатусыДокументов.Ресурсы.Статус.Тип);
		СтатусыДокументовКЗагрузке.Колонки.Добавить("ДополнительныйСтатус", Метаданные.РегистрыСведений.СтатусыДокументов.Ресурсы.ДополнительныйСтатус.Тип);
		КомпонентыОбмена.ПараметрыКонвертации.СтатусыДокументовКЗагрузке = СтатусыДокументовКЗагрузке;
		
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиНДСИсчисляетсяПокупателем = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПродажиНДСИсчисляетсяПокупателем = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыСКомиссионеромНаЗакупку = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеВозвратыТоваров = Новый Соответствие;
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиЭлектронныхУслуг = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ДокументыСостоянийЭД = Новый Соответствие;
		
	Иначе
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
				"ВыгружатьАналитикуПоСкладам");
				
		КонецЕсли;
		ДатаОстатков = Неопределено;
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДатаОстатков", ДатаОстатков)
			И ТипЗнч(ДатаОстатков) = Тип("Дата") Тогда
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов", НачалоДня(КонецДня(ДатаОстатков) + 1));
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		УстановитьЗначенияФункциональныхОпций();
	
		ПрефиксыЗагруженныхДокументов = КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов;
		Если ПрефиксыЗагруженныхДокументов.Количество() > 0 Тогда
			ОбменДаннымиУТ.ЗаписьРегистраПрефиксыИнформационныхБазПоУмолчанию(ПрефиксыЗагруженныхДокументов);
		КонецЕсли;
		ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		
		// Формирование структуры подчиненности выданных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурВыданных(КомпонентыОбмена);
	
		// Формирование структуры подчиненности полученных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурПолученных(КомпонентыОбмена);
		
		// Обработка отчетов о розничных продажах
		СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена);
		
		ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена);
		
		ОбновитьСтатусыДокументов(КомпонентыОбмена);
		
		ОбработатьЗагруженныеВозвратыТоваров(КомпонентыОбмена);
		
		ОбработатьСсылкиНаДокументыВСостоянияхЭД(КомпонентыОбмена);
		
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена);
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДепонированиеЗарплаты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПодразделениеРегламентированногоУчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиЗатрат_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДепонированиеЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеКредитовДепозитов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаТоваровВРознице(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостач(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТарифицируемаяОперация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НастройкиРасчетаРезервовОтпусков_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПодразделениеРегламентированногоУчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостояниеОплатыЗаказа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостоянияЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатурыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДепонированиеЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПодразделениеРегламентированногоУчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегламентированныйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРабот(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДепонированиеЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеКредитовДепозитов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияСБилетом_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаТоваровВРознице(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Испр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Испр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТарифицируемаяОперация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_НастройкиРасчетаРезервовОтпусков_Получение(ПравилаКонвертации);
		ДобавитьПКО_НачислениеОценочныхОбязательствПоОтпускам_Получени(ПравилаКонвертации);
		ДобавитьПКО_ПодразделениеРегламентированногоУчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации);
		ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаКартой(ПравилаКонвертации);
		ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными(ПравилаКонвертации);
		ДобавитьПКО_РегламентированныйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОКП(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЭД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатурыГрупп_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_СтатьиЗатрат(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Должности(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НематериальныеАктивы(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ОсновныеСредства(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизаций, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийПоПлатежнойКарте_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПоПлатежнойКарте_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаПлатежнойКартой;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя, "ОплатаОтКлиентаПлатежнойКартой");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
		ПравилоКонвертации.ТипXDTO   = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктИсполнитель, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ПорядокПогашенияСтоимостиОС.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПорядокПогашенияСтоимостиОС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядокПогашенияСтоимостиОС;
		ПравилоКонвертации.ТипXDTO   = "ПорядокПогашенияСтоимостиОС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации, "НачислениеАмортизации");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса, "НачислениеИзноса");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ, "НачислениеИзносаПоЕНАОФ");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету, "СписаниеПриПринятииКУчету");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается, "СтоимостьНеПогашается");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОпераций_ВозвратОтПокупателя.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_ВозвратОтПокупателя";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровОтПокупателя;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратОтПокупателя";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратОтКомиссионера", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары);
		ЗначенияДляПолучения.Вставить("ВозвратОтКлиента", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
		ЗначенияДляПолучения.Вставить("ВозвратОтРозничногоПокупателя", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_ВозвратПоставщику.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_ВозвратПоставщику";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратКомитенту", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ВозвратПоставщику", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_КорректировкаДолга_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_КорректировкаДолга_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности);
		ЗначенияДляПолучения.Вставить("ПереносЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
		ЗначенияДляПолучения.Вставить("СписаниеЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_РТиУ.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОпераций_РТиУ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРеализацияТоваров;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_ВПути", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_Реализовано", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийПоступленияТоваров.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПоступленияТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийСБДСПрочее_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСБДСПрочее_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСБДСПрочее";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВнутренняяПередача", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
		ЗначенияДляПолучения.Вставить("ПрочееСписание", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыЭД_Реализация_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыЭД_Реализация_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
		ПравилоКонвертации.ТипXDTO   = "ВидыЭД";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АктНаПередачуПрав", Перечисления.ВидыЭД.АктНаПередачуПрав);
		ЗначенияДляПолучения.Вставить("ТОРГ12", Перечисления.ВидыЭД.ТОРГ12Продавец);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ВидыОперацийОплатаПлатежнойКартой.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийОплатаПлатежнойКартой";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаПлатежнойКартой;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратОплатыКлиентуНаПлатежнуюКарту", Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
		ЗначенияДляПолучения.Вставить("ОплатаОтКлиентаПлатежнойКартой", Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыДоговоров.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
	ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку, "СКомиссионеромНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку, "СКомитентомНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыДоходовИсполнительногоПроизводства.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыДоходовИсполнительногоПроизводства";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоходовИсполнительногоПроизводства;
	ПравилоКонвертации.ТипXDTO   = "ВидыДоходовИсполнительногоПроизводства";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий, "ДоходыБезОграниченияВзысканий");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения, "ЗарплатаВознаграждения");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые, "КомпенсацииНеоблагаемые");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые, "КомпенсацииОблагаемые");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДоходыБезОграниченияВзысканий", Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий);
	ЗначенияДляПолучения.Вставить("ЗарплатаВознаграждения", Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения);
	ЗначенияДляПолучения.Вставить("КомпенсацииНеоблагаемые", Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые);
	ЗначенияДляПолучения.Вставить("КомпенсацииОблагаемые", Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийНаПродажуАлкоголя;
	ПравилоКонвертации.ТипXDTO   = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийНаПродажуАлкоголя.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийНаПродажуАлкоголя.Пиво);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыМестВыплатыЗарплаты.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыМестВыплатыЗарплаты";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыМестВыплатыЗарплаты;
	ПравилоКонвертации.ТипXDTO   = "СпособыВыплаты";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет, "ПеречислениемНаСчета");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект, "ЧерезБанк");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыМестВыплатыЗарплаты.Касса, "ЧерезКассу");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик, "ЧерезРаздатчика");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПеречислениемНаСчета", Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет);
	ЗначенияДляПолучения.Вставить("ЧерезБанк", Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект);
	ЗначенияДляПолучения.Вставить("ЧерезКассу", Перечисления.ВидыМестВыплатыЗарплаты.Касса);
	ЗначенияДляПолучения.Вставить("ЧерезРаздатчика", Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОбъектовУчетаНМА.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОбъектовУчетаНМА";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОбъектовУчетаНМА;
	ПравилоКонвертации.ТипXDTO   = "ВидыОбъектовУчетаНМА";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив, "НематериальныйАктив");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР, "РасходыНаНИОКР");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НематериальныйАктив", Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	ЗначенияДляПолучения.Вставить("РасходыНаНИОКР", Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийИсправленияПоступленияРеализации.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийИсправленияПоступленияРеализации";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийИсправленияПоступленияРеализации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИсправлениеОшибки", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	ЗначенияДляПолучения.Вставить("СогласованноеИзменение", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыСКонтрагентами.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ПрочийПриход, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыСКонтрагентами.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ПрочийРасход, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКОНаБанковскийСчет.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРКОНаБанковскийСчет";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРКОНаБанковскийСчет";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк, "ВзносНаличными");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.Инкассация, "Инкассация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзносНаличными", Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ЗначенияДляПолучения.Вставить("Инкассация", Перечисления.ВидыОперацийРКО.Инкассация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДСРасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСБДСРасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОтчетности;
	ПравилоКонвертации.ТипXDTO   = "ВидыРегламентированнойОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.ОтчетностьПоМСФО, "ОтчетностьПоМСФО");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.РегламентированнаяОтчетность, "РегламентированнаяОтчетность");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОтчетностьПоМСФО", Перечисления.ВидыОтчетности.ОтчетностьПоМСФО);
	ЗначенияДляПолучения.Вставить("РегламентированнаяОтчетность", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСчетаФактуры.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыСчетаФактуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент, "НалоговыйАгент");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "СуммовыеРазницы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
	ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСчетаФактурыПолученного.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыСчетаФактурыПолученного";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыПолученного;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НалоговыйАгент");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаПоступление");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ЗначенияДляПолучения.Вставить("НаПоступление", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_АмортизационныеГруппы.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_АмортизационныеГруппы";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.АмортизационныеГруппы;
	ПравилоКонвертации.ТипXDTO   = "АмортизационныеГруппы";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа, "Восьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВтораяГруппа, "Вторая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа, "Девятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа, "Десятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа, "Отдельная");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПерваяГруппа, "Первая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПятаяГруппа, "Пятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа, "Седьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ТретьяГруппа, "Третья");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа, "Четвертая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ШестаяГруппа, "Шестая");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Восьмая", Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Вторая", Перечисления.АмортизационныеГруппы.ВтораяГруппа);
	ЗначенияДляПолучения.Вставить("Девятая", Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	ЗначенияДляПолучения.Вставить("Десятая", Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	ЗначенияДляПолучения.Вставить("Отдельная", Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	ЗначенияДляПолучения.Вставить("Первая", Перечисления.АмортизационныеГруппы.ПерваяГруппа);
	ЗначенияДляПолучения.Вставить("Пятая", Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	ЗначенияДляПолучения.Вставить("Седьмая", Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Третья", Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	ЗначенияДляПолучения.Вставить("Четвертая", Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	ЗначенияДляПолучения.Вставить("Шестая", Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКомплектация.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийКомплектация";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОтветственныхЛиц.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОтветственныхЛиц";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ТипXDTO   = "ВидыОтветственныхЛиц";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, "ГлавныйБухгалтер");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель, "Исполнитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Кассир, "Кассир");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры, "ОтветственныйЗаБухгалтерскиеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры, "ОтветственныйЗаНалоговыеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, "Руководитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы, "РуководительКадровойСлужбы");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель, "УполномоченныйПредставитель");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ЗначенияДляПолучения.Вставить("Исполнитель", Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
	ЗначенияДляПолучения.Вставить("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаБухгалтерскиеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаНалоговыеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры);
	ЗначенияДляПолучения.Вставить("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ЗначенияДляПолучения.Вставить("РуководительКадровойСлужбы", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
	ЗначенияДляПолучения.Вставить("УполномоченныйПредставитель", Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыСобытийОС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыСобытийОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСобытийОС;
	ПравилоКонвертации.ТипXDTO   = "ВидыСобытийОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию, "ВводВЭксплуатацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ВнутреннееПеремещение, "ВнутреннееПеремещение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Дооборудование, "Дооборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Достройка, "Достройка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.КапитальныйРемонт, "КапитальныйРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Модернизация, "Модернизация");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.НачислениеАмортизации, "НачислениеАмортизации");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Передача, "Передача");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Переоценка, "Переоценка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПодготовкаКПередаче, "ПодготовкаКПередаче");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПринятиеКУчету, "ПринятиеКУчету");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию, "ПринятиеКУчетуСВводомВЭксплуатацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Реконструкция, "Реконструкция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Списание, "Списание");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.СреднийРемонт, "СреднийРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ТекущийРемонт, "ТекущийРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация, "ЧастичнаяЛиквидация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВводВЭксплуатацию", Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	ЗначенияДляПолучения.Вставить("ВнутреннееПеремещение", Перечисления.ВидыСобытийОС.ВнутреннееПеремещение);
	ЗначенияДляПолучения.Вставить("Дооборудование", Перечисления.ВидыСобытийОС.Дооборудование);
	ЗначенияДляПолучения.Вставить("Достройка", Перечисления.ВидыСобытийОС.Достройка);
	ЗначенияДляПолучения.Вставить("КапитальныйРемонт", Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	ЗначенияДляПолучения.Вставить("Модернизация", Перечисления.ВидыСобытийОС.Модернизация);
	ЗначенияДляПолучения.Вставить("НачислениеАмортизации", Перечисления.ВидыСобытийОС.НачислениеАмортизации);
	ЗначенияДляПолучения.Вставить("Передача", Перечисления.ВидыСобытийОС.Передача);
	ЗначенияДляПолучения.Вставить("Переоценка", Перечисления.ВидыСобытийОС.Переоценка);
	ЗначенияДляПолучения.Вставить("ПодготовкаКПередаче", Перечисления.ВидыСобытийОС.ПодготовкаКПередаче);
	ЗначенияДляПолучения.Вставить("ПринятиеКУчету", Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ЗначенияДляПолучения.Вставить("ПринятиеКУчетуСВводомВЭксплуатацию", Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыСобытийОС.Прочее);
	ЗначенияДляПолучения.Вставить("Реконструкция", Перечисления.ВидыСобытийОС.Реконструкция);
	ЗначенияДляПолучения.Вставить("Списание", Перечисления.ВидыСобытийОС.Списание);
	ЗначенияДляПолучения.Вставить("СреднийРемонт", Перечисления.ВидыСобытийОС.СреднийРемонт);
	ЗначенияДляПолучения.Вставить("ТекущийРемонт", Перечисления.ВидыСобытийОС.ТекущийРемонт);
	ЗначенияДляПолучения.Вставить("ЧастичнаяЛиквидация", Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ГруппыОС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ГруппыОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ГруппыОС;
	ПравилоКонвертации.ТипXDTO   = "ГруппыОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств, "ДругиеВидыОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Здания, "Здания");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ЗемельныеУчастки, "ЗемельныеУчастки");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество, "КапитальныеВложенияВАрендованноеИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МашиныИОборудование, "МашиныИОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МноголетниеНасаждения, "МноголетниеНасаждения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОбъектыПриродопользования, "ОбъектыПриродопользования");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОфисноеОборудование, "ОфисноеОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПродуктивныйСкот, "ПродуктивныйСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь, "ПроизводственныйИХозяйственныйИнвентарь");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации, "ПрочееИмуществоТребующееГосударственнойРегистрации");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.РабочийСкот, "РабочийСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Сооружения, "Сооружения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ТранспортныеСредства, "ТранспортныеСредства");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДругиеВидыОсновныхСредств", Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	ЗначенияДляПолучения.Вставить("Здания", Перечисления.ГруппыОС.Здания);
	ЗначенияДляПолучения.Вставить("ЗемельныеУчастки", Перечисления.ГруппыОС.ЗемельныеУчастки);
	ЗначенияДляПолучения.Вставить("КапитальныеВложенияВАрендованноеИмущество", Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	ЗначенияДляПолучения.Вставить("МашиныИОборудование", Перечисления.ГруппыОС.МашиныИОборудование);
	ЗначенияДляПолучения.Вставить("МноголетниеНасаждения", Перечисления.ГруппыОС.МноголетниеНасаждения);
	ЗначенияДляПолучения.Вставить("ОбъектыПриродопользования", Перечисления.ГруппыОС.ОбъектыПриродопользования);
	ЗначенияДляПолучения.Вставить("ОфисноеОборудование", Перечисления.ГруппыОС.ОфисноеОборудование);
	ЗначенияДляПолучения.Вставить("ПродуктивныйСкот", Перечисления.ГруппыОС.ПродуктивныйСкот);
	ЗначенияДляПолучения.Вставить("ПроизводственныйИХозяйственныйИнвентарь", Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	ЗначенияДляПолучения.Вставить("ПрочееИмуществоТребующееГосударственнойРегистрации", Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	ЗначенияДляПолучения.Вставить("РабочийСкот", Перечисления.ГруппыОС.РабочийСкот);
	ЗначенияДляПолучения.Вставить("Сооружения", Перечисления.ГруппыОС.Сооружения);
	ЗначенияДляПолучения.Вставить("ТранспортныеСредства", Перечисления.ГруппыОС.ТранспортныеСредства);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыНачисленияАмортизацииОС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыНачисленияАмортизацииОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииОС;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ, "ПоЕНАОФ");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега, "ПоЕНАОФНа1000кмПробега");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования, "ПоСуммеЧиселЛетИспользования");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФ", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФНа1000кмПробега", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	ЗначенияДляПолучения.Вставить("ПоСуммеЧиселЛетИспользования", Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыПоступленияАктивов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыПоступленияАктивов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПоступленияАктивов;
	ПравилоКонвертации.ТипXDTO   = "СпособыПоступленияАктивов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.БезвозмездноеПоступление, "БезвозмездноеПоступление");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность, "ВкладВСовместнуюДеятельность");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал, "ВкладВУставныйКапитал");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество, "ВОбменНаДругоеИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.Иное, "Иное");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды, "ПоДоговоруАренды");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга, "ПоДоговоруЛизинга");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление, "ПоступлениеВДоверительноеУправление");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату, "ПриобретениеЗаПлату");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.Строительство, "Строительство");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезвозмездноеПоступление", Перечисления.СпособыПоступленияАктивов.БезвозмездноеПоступление);
	ЗначенияДляПолучения.Вставить("ВкладВСовместнуюДеятельность", Перечисления.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность);
	ЗначенияДляПолучения.Вставить("ВкладВУставныйКапитал", Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал);
	ЗначенияДляПолучения.Вставить("ВОбменНаДругоеИмущество", Перечисления.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество);
	ЗначенияДляПолучения.Вставить("Иное", Перечисления.СпособыПоступленияАктивов.Иное);
	ЗначенияДляПолучения.Вставить("ПоДоговоруАренды", Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды);
	ЗначенияДляПолучения.Вставить("ПоДоговоруЛизинга", Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга);
	ЗначенияДляПолучения.Вставить("ПоступлениеВДоверительноеУправление", Перечисления.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление);
	ЗначенияДляПолучения.Вставить("ПриобретениеЗаПлату", Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату);
	ЗначенияДляПолучения.Вставить("Строительство", Перечисления.СпособыПоступленияАктивов.Строительство);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыРасчетаКомиссионногоВознагражд.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПериодичностьРО.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПериодичностьРО";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.Периодичность;
	ПравилоКонвертации.ТипXDTO   = "ТипыПериодов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Год, "Год");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Декада, "Декада");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.День, "День");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Квартал, "Квартал");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Месяц, "Месяц");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Неделя, "Неделя");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Полугодие, "Полугодье");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Год", Перечисления.Периодичность.Год);
	ЗначенияДляПолучения.Вставить("Декада", Перечисления.Периодичность.Декада);
	ЗначенияДляПолучения.Вставить("День", Перечисления.Периодичность.День);
	ЗначенияДляПолучения.Вставить("Квартал", Перечисления.Периодичность.Квартал);
	ЗначенияДляПолучения.Вставить("Месяц", Перечисления.Периодичность.Месяц);
	ЗначенияДляПолучения.Вставить("Неделя", Перечисления.Периодичность.Неделя);
	ЗначенияДляПолучения.Вставить("Полугодье", Перечисления.Периодичность.Полугодие);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядкиОкругленияОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПорядкиОкругленияОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядкиОкругленияОтчетности;
	ПравилоКонвертации.ТипXDTO   = "ПорядокОкругленияОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "НеОкгруглять");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "ОкруглятьДо1000");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "ОкруглятьДо1000000");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеОкгруглять", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ЗначенияДляПолучения.Вставить("ОкруглятьДо1000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ЗначенияДляПолучения.Вставить("ОкруглятьДо1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядокВключенияСтоимостиОСВСоставРасходовНУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
	ПравилоКонвертации.ТипXDTO   = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету, "ВключениеВРасходыПриПринятииКУчету");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету, "ПринятиеКУчетуЛизинговогоОС");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации, "НачислениеАмортизации");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы, "СтоимостьНеВключаетсяВРасходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВключениеВРасходыПриПринятииКУчету", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
	ЗначенияДляПолучения.Вставить("ПринятиеКУчетуЛизинговогоОС", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
	ЗначенияДляПолучения.Вставить("НачислениеАмортизации", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	ЗначенияДляПолучения.Вставить("СтоимостьНеВключаетсяВРасходы", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыЗачетаАвансов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыЗачетаАвансов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыЗачетаАвансов;
	ПравилоКонвертации.ТипXDTO   = "СпособыПогашенияЗадолженности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.Автоматически, "Автоматически");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.НеЗачитывать, "НеПогашать");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыЗачетаАвансов.ПоДокументу, "ПоДокументу");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Автоматически", Перечисления.СпособыЗачетаАвансов.Автоматически);
	ЗначенияДляПолучения.Вставить("НеПогашать", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	ЗначенияДляПолучения.Вставить("ПоДокументу", Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыНачисленияАмортизацииНМАБУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыНачисленияАмортизацииНМАБУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииНМА;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииНМАБУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыНачисленияАмортизацииНМАНУ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыНачисленияАмортизацииНМАНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.МетодыНачисленияАмортизации;
	ПравилоКонвертации.ТипXDTO   = "СпособыНачисленияАмортизацииНМАНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Нелинейный, "Нелинейный");
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ, "ПоЕНАОФ");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.МетодыНачисленияАмортизации.Линейный);
	ЗначенияДляПолучения.Вставить("Нелинейный", Перечисления.МетодыНачисленияАмортизации.Нелинейный);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФ", Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыПогашенияЗадолженности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыПогашенияЗадолженности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПогашенияЗадолженности;
	ПравилоКонвертации.ТипXDTO   = "СпособыПогашенияЗадолженности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "Автоматически");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияЗадолженности.НеПогашать, "НеПогашать");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, "ПоДокументу");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Автоматически", Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	ЗначенияДляПолучения.Вставить("НеПогашать", Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	ЗначенияДляПолучения.Вставить("ПоДокументу", Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыПогашенияСтоимости.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыПогашенияСтоимости";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПогашенияСтоимости;
	ПравилоКонвертации.ТипXDTO   = "СпособыПогашенияСтоимостиТМЦ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияСтоимости.Линейный, "ПоСроку");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию, "ПриПередаче");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияСтоимости.ПропорциональноОбъемуПродукцииРабот, "ПоНаработке");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПоСроку", Перечисления.СпособыПогашенияСтоимости.Линейный);
	ЗначенияДляПолучения.Вставить("ПриПередаче", Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию);
	ЗначенияДляПолучения.Вставить("ПоНаработке", Перечисления.СпособыПогашенияСтоимости.ПропорциональноОбъемуПродукцииРабот);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтатусОплатыСчета.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СтатусОплатыСчета";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусОплатыСчета;
	ПравилоКонвертации.ТипXDTO   = "СостоянияОплаты";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплатыСчета.НеОплачен, "НеОплачен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплатыСчета.Оплачен, "Оплачен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплатыСчета.ОплаченЧастично, "ОплаченЧастично");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплатыСчета.Отменен, "Отменен");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеОплачен", Перечисления.СтатусОплатыСчета.НеОплачен);
	ЗначенияДляПолучения.Вставить("Оплачен", Перечисления.СтатусОплатыСчета.Оплачен);
	ЗначенияДляПолучения.Вставить("ОплаченЧастично", Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	ЗначенияДляПолучения.Вставить("Отменен", Перечисления.СтатусОплатыСчета.Отменен);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СтатусыОтгрузки.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СтатусыОтгрузки";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыОтгрузки;
	ПравилоКонвертации.ТипXDTO   = "СостоянияОтгрузки";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыОтгрузки.НеОтгружен, "НеОтгружен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыОтгрузки.Отгружен, "Отгружен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыОтгрузки.ОтгруженЧастично, "ОтгруженЧастично");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеОтгружен", Перечисления.СтатусыОтгрузки.НеОтгружен);
	ЗначенияДляПолучения.Вставить("Отгружен", Перечисления.СтатусыОтгрузки.Отгружен);
	ЗначенияДляПолучения.Вставить("ОтгруженЧастично", Перечисления.СтатусыОтгрузки.ОтгруженЧастично);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСкладов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
	ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.ОптовыйСклад, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.ОптовыйСклад);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСостоянийОбменаЭД.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСостоянийОбменаЭД";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СводныеСостоянияЭД;
	ПравилоКонвертации.ТипXDTO   = "ТипыСостоянийОбменаЭД";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СводныеСостоянияЭД.ВсеВыполнено, "ВсеВыполнено");
	ЗначенияДляОтправки.Вставить(Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, "ДействийНеТребуется");
	ЗначенияДляОтправки.Вставить(Перечисления.СводныеСостоянияЭД.Отклонен, "Отклонен");
	ЗначенияДляОтправки.Вставить(Перечисления.СводныеСостоянияЭД.ТребуютсяДействия, "ТребуютсяДействия");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВсеВыполнено", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
	ЗначенияДляПолучения.Вставить("ДействийНеТребуется", Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	ЗначенияДляПолучения.Вставить("Отклонен", Перечисления.СводныеСостоянияЭД.Отклонен);
	ЗначенияДляПолучения.Вставить("ТребуютсяДействия", Перечисления.СводныеСостоянияЭД.ТребуютсяДействия);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСостоянийЭлектронногоДокумента.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСостоянийЭлектронногоДокумента";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияВерсийЭД;
	ПравилоКонвертации.ТипXDTO   = "ТипыСостоянийЭлектронногоДокумента";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.Аннулирован, "Аннулирован");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно, "ЗакрытПринудительно");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи, "ИзвещениеНаПодписи");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.НаПодписи, "НаПодписи");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.НаУтверждении, "НаУтверждении");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.НеПолучен, "НеПолучен");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.НеСформирован, "НеСформирован");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен, "ОбменЗавершен");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением, "ОбменЗавершенСИсправлениями");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование, "ОжидаетсяАннулирование");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении, "ОжидаетсяИзвещениеОПолучении");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление, "ОжидаетсяИсправление");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка, "ОжидаетсяОтправка");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения, "ОжидаетсяОтправкаИзвещения");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю, "ОжидаетсяОтправкаПолучателю");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору, "ОжидаетсяОтправкаОператору");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение, "ОжидаетсяПодтверждение");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора, "ОжидаетсяПодтверждениеОператора");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.Отклонен, "Отклонен");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ОшибкаПередачи, "ОшибкаПередачи");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать, "ТребуетсяАннулировать");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент, "ТребуетсяУточнитьДокумент");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Аннулирован", Перечисления.СостоянияВерсийЭД.Аннулирован);
	ЗначенияДляПолучения.Вставить("ЗакрытПринудительно", Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	ЗначенияДляПолучения.Вставить("ИзвещениеНаПодписи", Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи);
	ЗначенияДляПолучения.Вставить("НаПодписи", Перечисления.СостоянияВерсийЭД.НаПодписи);
	ЗначенияДляПолучения.Вставить("НаУтверждении", Перечисления.СостоянияВерсийЭД.НаУтверждении);
	ЗначенияДляПолучения.Вставить("НеПолучен", Перечисления.СостоянияВерсийЭД.НеПолучен);
	ЗначенияДляПолучения.Вставить("НеСформирован", Перечисления.СостоянияВерсийЭД.НеСформирован);
	ЗначенияДляПолучения.Вставить("ОбменЗавершен", Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	ЗначенияДляПолучения.Вставить("ОбменЗавершенСИсправлениями", Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	ЗначенияДляПолучения.Вставить("ОжидаетсяАннулирование", Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
	ЗначенияДляПолучения.Вставить("ОжидаетсяИзвещениеОПолучении", Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
	ЗначенияДляПолучения.Вставить("ОжидаетсяИсправление", Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление);
	ЗначенияДляПолучения.Вставить("ОжидаетсяОтправка", Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
	ЗначенияДляПолучения.Вставить("ОжидаетсяОтправкаИзвещения", Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения);
	ЗначенияДляПолучения.Вставить("ОжидаетсяОтправкаПолучателю", Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю);
	ЗначенияДляПолучения.Вставить("ОжидаетсяОтправкаОператору", Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору);
	ЗначенияДляПолучения.Вставить("ОжидаетсяПодтверждение", Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
	ЗначенияДляПолучения.Вставить("ОжидаетсяПодтверждениеОператора", Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора);
	ЗначенияДляПолучения.Вставить("Отклонен", Перечисления.СостоянияВерсийЭД.Отклонен);
	ЗначенияДляПолучения.Вставить("ОшибкаПередачи", Перечисления.СостоянияВерсийЭД.ОшибкаПередачи);
	ЗначенияДляПолучения.Вставить("ТребуетсяАннулировать", Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать);
	ЗначенияДляПолучения.Вставить("ТребуетсяУточнитьДокумент", Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыУпаковок.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыУпаковок";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыУпаковок;
	ПравилоКонвертации.ТипXDTO   = "ТипыУпаковокНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МаркированныйТовар, "МаркированныйТовар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка, "МонотоварнаяУпаковка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МультитоварнаяУпаковка, "МультитоварнаяУпаковка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МаркированныйТовар", Перечисления.ТипыУпаковок.МаркированныйТовар);
	ЗначенияДляПолучения.Вставить("МонотоварнаяУпаковка", Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	ЗначенияДляПолучения.Вставить("МультитоварнаяУпаковка", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыШтрихкодов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыШтрихкодов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыШтрихкодов;
	ПравилоКонвертации.ТипXDTO   = "ТипыШтрихкодов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code128, "Code128");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code39, "Code39");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN13, "EAN13");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN8, "EAN8");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_128, "GS1_128");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked, "GS1_DataBarExpandedStacked");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.ITF14, "ITF14");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.PDF417, "PDF417");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.QR, "QR");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.SSCC, "SSCC");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Code128", Перечисления.ТипыШтрихкодов.Code128);
	ЗначенияДляПолучения.Вставить("Code39", Перечисления.ТипыШтрихкодов.Code39);
	ЗначенияДляПолучения.Вставить("EAN13", Перечисления.ТипыШтрихкодов.EAN13);
	ЗначенияДляПолучения.Вставить("EAN8", Перечисления.ТипыШтрихкодов.EAN8);
	ЗначенияДляПолучения.Вставить("GS1_128", Перечисления.ТипыШтрихкодов.GS1_128);
	ЗначенияДляПолучения.Вставить("GS1_DataBarExpandedStacked", Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	ЗначенияДляПолучения.Вставить("ITF14", Перечисления.ТипыШтрихкодов.ITF14);
	ЗначенияДляПолучения.Вставить("PDF417", Перечисления.ТипыШтрихкодов.PDF417);
	ЗначенияДляПолучения.Вставить("QR", Перечисления.ТипыШтрихкодов.QR);
	ЗначенияДляПолучения.Вставить("SSCC", Перечисления.ТипыШтрихкодов.SSCC);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВидыОплатПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ДатаОкончанияПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("ЗагруженныеОбъекты");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("ПравилаЗагрузкиПодразделений");
	ПараметрыКонвертации.Вставить("РазрешитьПроведениеДокументовПриЗагрузке");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансыКредитыЗаймы");
	ПараметрыКонвертации.Вставить("НоменклатурнаяГруппаПоУмолчанию");
	ПараметрыКонвертации.Вставить("ПрефиксыЗагруженныхДокументов");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("СчетФактурыПолученныеКОбработке");
	ПараметрыКонвертации.Вставить("СчетФактурыВыданныеКОбработке");
	ПараметрыКонвертации.Вставить("ОтчетыОРозничныхПродажахКОбработке");
	ПараметрыКонвертации.Вставить("НовыеДоговорыКонтрагентов");
	ПараметрыКонвертации.Вставить("СоздаватьПКОРозничнаяВыручка");
	ПараметрыКонвертации.Вставить("МассивТНВЭД");
	ПараметрыКонвертации.Вставить("СтатусыДокументовКЗагрузке");
	ПараметрыКонвертации.Вставить("ДоговорыПокупкиНДСИсчисляетсяПокупателем");
	ПараметрыКонвертации.Вставить("ДоговорыПродажиНДСИсчисляетсяПокупателем");
	ПараметрыКонвертации.Вставить("ДоговорыСКомиссионеромНаЗакупку");
	ПараметрыКонвертации.Вставить("ЗагруженныеВозвратыТоваров");
	ПараметрыКонвертации.Вставить("ДоговорыПокупкиЭлектронныхУслуг");
	ПараметрыКонвертации.Вставить("ДокументыСостоянийЭД");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ТарифицируемаяОперация_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ТарифицируемаяОперация_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке" Тогда 
		ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостояниеОплатыЗаказа_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СостояниеОплатыЗаказа_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегламентированныйОтчет_Отправка_ПриОбработке" Тогда 
		ПОД_РегламентированныйОтчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДепонированиеЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ДепонированиеЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияСБилетом_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияСБилетом_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТарифицируемаяОперация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТарифицируемаяОперация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТарифицируемаяОперация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТарифицируемаяОперация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_НастройкиРасчетаРезервовОтпусков_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_НастройкиРасчетаРезервовОтпусков_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Банки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НематериальныеАктивы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НематериальныеАктивы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ВключитьВСписокЗагруженныхОбъектов" Тогда 
		ВключитьВСписокЗагруженныхОбъектов(
			);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Банки" Тогда 
		ОтложеннаяОбработка_Банки(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци" Тогда 
		ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВыпускПродукции" Тогда 
		ОтложеннаяОбработка_ВыпускПродукции(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентов" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентов(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух" Тогда 
		ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Контрагенты" Тогда 
		ОтложеннаяОбработка_Контрагенты(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаДолга" Тогда 
		ОтложеннаяОбработка_КорректировкаДолга(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаПоступления" Тогда 
		ОтложеннаяОбработка_КорректировкаПоступления(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаРеализации" Тогда 
		ОтложеннаяОбработка_КорректировкаРеализации(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_НоменклатураГруппа" Тогда 
		ОтложеннаяОбработка_НоменклатураГруппа(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте" Тогда 
		ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП" Тогда 
		ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОприходованиеТоваров" Тогда 
		ОтложеннаяОбработка_ОприходованиеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомиссионераОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомитентуОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомитентуОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетОРозничныхПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку" Тогда 
		ОтложеннаяОбработка_ПередачаМатериаловВПереработку(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию" Тогда 
		ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО_Расчеты" Тогда 
		ОтложеннаяОбработка_ПКО_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке" Тогда 
		ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОРозничнаяВыручка" Тогда 
		ОтложеннаяОбработка_ПКОРозничнаяВыручка(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств" Тогда 
		ОтложеннаяОбработка_ПоступлениеДенежныхСредств(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДопРасходов" Тогда 
		ОтложеннаяОбработка_ПоступлениеДопРасходов(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты" Тогда 
		ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеОтПереработчика" Тогда 
		ОтложеннаяОбработка_ПоступлениеОтПереработчика(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПТиУ" Тогда 
		ОтложеннаяОбработка_ПТиУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияОтгруженныхТоваров" Тогда 
		ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияУслугПоПереработке" Тогда 
		ОтложеннаяОбработка_РеализацияУслугПоПереработке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РТиУ" Тогда 
		ОтложеннаяОбработка_РТиУ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДСПереводНаДругойСчет" Тогда 
		ОтложеннаяОбработка_СБДСПереводНаДругойСчет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДСПлатежиВБюджет" Тогда 
		ОтложеннаяОбработка_СБДСПлатежиВБюджет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Склады" Тогда 
		ОтложеннаяОбработка_Склады(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац" Тогда 
		ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_КонвертацияВалюты" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_КонвертацияВалюты(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Прочее" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Прочее(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Расчеты" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеТоваров" Тогда 
		ОтложеннаяОбработка_СписаниеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтатьиДоходов" Тогда 
		ОтложеннаяОбработка_СтатьиДоходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтатьиРасходов" Тогда 
		ОтложеннаяОбработка_СтатьиРасходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами" Тогда 
		ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетНаОплатуПокупателю" Тогда 
		ОтложеннаяОбработка_СчетНаОплатуПокупателю(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетНаОплатуПоставщику" Тогда 
		ОтложеннаяОбработка_СчетНаОплатуПоставщику(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураВыданный" Тогда 
		ОтложеннаяОбработка_СчетФактураВыданный(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураПолученный" Тогда 
		ОтложеннаяОбработка_СчетФактураПолученный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТаможеннаяДекларация" Тогда 
		ОтложеннаяОбработка_ТаможеннаяДекларация(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТребованиеНакладная" Тогда 
		ОтложеннаяОбработка_ТребованиеНакладная(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры" Тогда 
		ОтложеннаяОбработка_УстановкаЦенНоменклатуры(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Банки_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область Документы_Ведомости
Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплаты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ДепонированиеЗарплаты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДепонированиеЗарплаты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДепонированиеЗарплаты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ДепонированиеЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДепонированиеЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ДепонированиеЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДепонированиеЗарплаты_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплаты;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодВыплаты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВедомостьНаВыплатуЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВедомостьНаВыплатуЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидДоходаИсполнительногоПроизводства", "ВидДоходаИсполнительногоПроизводства", , "ВидыДоходовИсполнительногоПроизводства");
	ДобавитьПКС(СвойстваШапки, "ВидМестаВыплаты",                      "СпособВыплаты", , "ВидыМестВыплатыЗарплаты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",                          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",                    "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",             "ПодразделениеРегламентированногоУчета", , "ПодразделениеРегламентированногоУчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетов",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                       "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Зарплата", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "БанковскийСчет",  "", 1,"Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваТЧ, "ВзысканнаяСумма", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",  "", 1,"Справочник_ФизическиеЛица_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ДепонированиеЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ДепонированиеЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ДепонированиеЗарплаты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Ведомость",     "ВедомостьНаВыплату", , "Документ_ВедомостьНаВыплатуЗарплаты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "ФизическиеЛица");
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "ФизическоеЛицо", ,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ДепонированиеЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ДепонированиеЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ДепонированиеЗарплаты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ДепонированиеЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Ведомость",     "ВедомостьНаВыплату", , "Документ_ВедомостьНаВыплатуЗарплаты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "ФизическиеЛица");
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "ФизическоеЛицо", ,"Справочник_ФизическиеЛица_Получение");

КонецПроцедуры


#КонецОбласти
#Область Документы_Взаиморасчеты
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаДолга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаДолга_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидАвансаЗадолженности",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "ВидОперации", , "ВидыОпераций_КорректировкаДолга_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентДебитор",        "КонтрагентДебитор", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор",       "КонтрагентКредитор", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт2",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт3",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт2",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт3",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДтЗадолженности",     "СуммаДебиторскойЗадолженности");
	ДобавитьПКС(СвойстваШапки, "СуммаКтЗадолженности",     "СуммаКредиторскойЗадолженности");
	ДобавитьПКС(СвойстваШапки, "СчетДт",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКт",                   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДебиторскаяЗадолженность",  "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КредиторскаяЗадолженность", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры


#КонецОбласти
#Область Документы_Зарплата
Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеЗарплатыВБухучете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеЗарплатыВБухучете_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НачислениеОценочныхОбязательствПоОтпускам_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("НачислениеОценочныхОбязательствПоОтпускам_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НачислениеОценочныхОбязательствПоОтпускам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("НачислениеОценочныхОбязательствПоОтпускам_Получени");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтражениеЗарплатыВБухучете_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                 "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗарплатаОтраженаВБухучете", "ЗарплатаОтраженаВРегламентированномУчете");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленнаяЗарплатаИВзносы", "НачисленнаяЗарплатаИВзносы");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНачисленияОплатыТрудаДляНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПериодПринятияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"ПодразделениеРегламентированногоУчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПФРДоПредельнойВеличины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуЛетчикам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуШахтерам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНакопительная", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРПоСуммарномуТарифу", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСПревышения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСтраховая", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТФОМС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ФСС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФФОМС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленныйНДФЛ",            "НачисленныйНДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КПП", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НалоговыйОрган", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОКАТО", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОКТМО", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "УдержаннаяЗарплата",         "УдержаннаяЗарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеУдержанияДляЧека", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"ПодразделениеРегламентированногоУчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЯвляетсяОснованиемОформленияКассовогоЧека", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтражениеЗарплатыВБухучете_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                 "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗарплатаОтраженаВБухучете", "ЗарплатаОтраженаВРегламентированномУчете");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленнаяЗарплатаИВзносы", "");
	ДобавитьПКС(СвойстваТЧ, "ВидНачисленияОплатыТрудаДляНУ",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",                                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ОблагаетсяЕНВД",                                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПериодПринятияРасходов",                              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                                       "", 1,"ПодразделениеРегламентированногоУчета_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПФРДоПредельнойВеличины",                             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНаДоплатуЛетчикам",                                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНаДоплатуШахтерам",                                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНакопительная",                                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРПоСуммарномуТарифу",                               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРСПревышения",                                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРСтраховая",                                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособОтраженияЗарплатыВБухучете",                    "", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                                               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТФОМС",                                               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",                                      "", 1,"Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "ФСС",                                                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФССНесчастныеСлучаи",                                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФФОМС",                                               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленныйНДФЛ",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодНалоговогоОргана", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодПоОКАТО",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодПоОКТМО",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КПП",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",      "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "УдержаннаяЗарплата",         "");
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",                               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",                                "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ОписаниеУдержанияДляЧека",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                             "", 1,"ПодразделениеРегламентированногоУчета_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",                            "", 1,"Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "ЯвляетсяОснованиемОформленияКассовогоЧека", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "НачислениеОценочныхОбязательствПоОтпускам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата     = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                      "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "ОбязательстваОтраженыВБухучете", "ОбязательстваОтраженыВБухучете");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",              "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОценочныеОбязательства", "ОценочныеОбязательства");
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"ПодразделениеРегламентированногоУчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерва", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносовНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаиНУ", 1);

КонецПроцедуры

Процедура ДобавитьПКО_НачислениеОценочныхОбязательствПоОтпускам_Получени(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "НачислениеОценочныхОбязательствПоОтпускам_Получени";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                      "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "ОбязательстваОтраженыВБухучете", "ОбязательстваОтраженыВБухучете");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",              "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОценочныеОбязательства", "ОценочныеОбязательства");
	ДобавитьПКС(СвойстваТЧ, "ОблагаетсяЕНВД",                    "ОблагаетсяЕНВД");
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                     "ПодразделениеРегламентированногоУчета", ,"ПодразделениеРегламентированногоУчета_Получение");
	ДобавитьПКС(СвойстваТЧ, "СпособОтраженияЗарплатыВБухучете",  "СпособОтраженияЗарплатыВФинансовомУчете", ,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерва",                      "СуммаРезерва");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваНУ",                    "СуммаРезерваНУ");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовНУ");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаи");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиНУ");

КонецПроцедуры


#КонецОбласти
#Область Документы_Казначейство_Банк
Процедура ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетБанкаПоОперациямЭквайринга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСВзносНаличными";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСВозвратЗарплатыПоЗарплатномуПроекту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПлатежноеПоручение";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарПлЛицСчета_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДССнятиеНаличных";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "КонтрагентДебитор",        "Эквайрер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",              "СтатьяРасходов", , "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "СуммаДтЗадолженности",     "СуммаКомиссии");
	ДобавитьПКС(СвойстваШапки, "СчетДт",                   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДебиторскаяЗадолженность", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНУ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетов",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "ДатаВыписки", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Эквайрер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеКт",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "СтатьяРасходов", , "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",                     "СуммаКомиссии");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСВзносНаличными_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа", "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСВозвратЗарплатыПоЗарплатномуПроекту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента", "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",         "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                            "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",                 "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КурсНаДатуПриобретенияРеализацииВалюты", "", 1);
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",                      "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                                  "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                          "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                         "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                        "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                        "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",                     "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсНаДатуПриобретенияРеализацииВалюты", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",          "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента", "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",         "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "СтатьяРасходов", , "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",                     "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента", "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента", "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУслуг",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1, "ВидыОперацийПБДСРасчетыСКонтрагентами");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности",   "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовПоАвансам",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчетСотрудника", 1, "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "ПоказательКБК", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                              "Оплачено", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",                "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",                 "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодВидаДохода",                 "КодВидаДохода");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                      "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",                "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",                 "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",           "ПеречислениеВБюджет");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",                "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",              "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",           "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",             "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",                "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                     "СтавкаНДС");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",             "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТекстПлательщика",              "ТекстПлательщика");
	ДобавитьПКС(СвойстваШапки, "ТекстПолучателя",               "ТекстПолучателя");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПлатежноеПоручение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидНалоговогоОбязательства",    "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",                    "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа",          "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",                "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",                 "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодБК",                         "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодВидаДохода",                 "КодВидаДохода");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",                      "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",                "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",                 "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Налог",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",            "Очередность");
	ДобавитьПКС(СвойстваШапки, "ПеречислениеВБюджет",           "ПеречислениеВБюджет");
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",                "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",              "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",           "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",             "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",                "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                     "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",             "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",                      "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ТекстПлательщика",              "ТекстПлательщика");
	ДобавитьПКС(СвойстваШапки, "ТекстПолучателя",               "ТекстПолучателя");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаУслуг",              "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1,"Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1,"Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовПоАвансам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПРСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетСотрудника", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовПоАвансам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_КонвертацияВалюты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "ДатаВыписки", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗарПлЛицСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "КодВидаДохода", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗПНаЛС_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "КодВидаДохода", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательДаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательКБК", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательНомера", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательОснования", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательПериода", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательТипа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СтатусСоставителя", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДСПлатежиВБюджет";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидНалоговогоОбязательства",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Налог",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "НалоговыйПериод",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "КодВидаДохода", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_Прочее";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидОперации", , "ВидыОперацийСБДСПрочее_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "КодВидаДохода", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_Прочее";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",            "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_Расчеты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",        "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",        "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",          "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежаПоКредитамЗаймам",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности",   "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",                   "", 1,"Документ_СчетПоставщика_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "КодВидаДохода", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидРасчетов", , "ВидыОперацийСБДСРасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",         "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДепонированиеЗарплаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВедомостьНаВыплату", 1,"Документ_ВедомостьНаВыплатуЗарплаты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидРасчетов", , "ВидыОперацийСБДСРасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДССнятиеНаличных_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ВидПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Код", 1);
	ДобавитьПКС(СвойстваШапки, "",                              "Очередность", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",             "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",               "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеСРС_Прочее";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",         "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",              "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",        "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетБанк",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Казначейство_Касса
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОВнутренняяПередача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт2",                    "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                     "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "Контрагент", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт2",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт3",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДоходов", 1,"Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",       "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1,"Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО_Расчеты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности",   "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовПоАвансам",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидРасчетов", , "ВидыОперацийПКО_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВыручкаСНТТ",              "ВыручкаНТТ");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",             "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКОРозничнаяВыручка";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВыручкаСНТТ",              "ВыручкаНТТ");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",             "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВнутренняяПередача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                        "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                   "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                    "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",     "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СубконтоДт2",                    "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидОперации", , "ВидыОперацийРКОНаБанковскийСчет");
	ДобавитьПКС(СвойстваШапки, "Выдать",                         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СубконтоДт1",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт2",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоДт3",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяРасходов", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                   "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",              "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",               "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежаПоКредитамЗаймам",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",             "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности",   "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств",  "", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",                   "", 1,"Документ_СчетПоставщика_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",          "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Сотрудник", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",       "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",     "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",      "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДепонированиеЗарплаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВедомостьНаВыплату", 1,"Документ_ВедомостьНаВыплатуЗарплаты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидРасчетов", , "ВидыОперацийРКО_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Выдать",                         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",                    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                     "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств",  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Казначейство_Кредиты_и_депозиты
Процедура ДобавитьПОД_Документ_НачислениеКредитовДепозитов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачислениеКредитовДепозитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеКредитовДепозитов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеКредитовДепозитов_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_НачислениеКредитовДепозитов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_НачислениеКредитовДепозитов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияБух;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеКредитовДепозитов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Содержание",    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаОперации", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры


#КонецОбласти
#Область Документы_Казначейство_Операция_по_платежной_карте
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",         "ВидОперации", , "ВидыОперацийПоПлатежнойКарте_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",               "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты", "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",        "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",         "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",      "Сумма");
	ДобавитьПКС(СвойстваШапки, "Эквайер",             "Эквайрер", , "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1,"Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "ВидОперации", , "Перечисление_ВидыОперацийОплатаПлатежнойКартой");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "Эквайер",         "Эквайрер", , "Справочник_Контрагенты_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",           "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности", "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",                 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Казначейство_Подотчетники
Процедура ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",     "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",         "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",         "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                  "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПоставщикам");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов",     "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",         "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",         "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",                  "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыданныеАвансы",    "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПоставщикам", "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",           "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",                   "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сделка",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособПогашенияЗадолженности", "", 1,"СпособыПогашенияЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Прочее",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидДокВходящий",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодразделениеЗатрат",     "", 1,"Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Субконто1",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто2",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто3",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ1",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ2",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ3",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ДатаВходящегоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",            "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерВходящегоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "Поставщик",               "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПредъявленСФ",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",               "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",     "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Возврат_от_покупателя
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                                 "ВидОперации", , "ВидыОпераций_ВозвратОтПокупателя");
	ДобавитьПКС(СвойстваШапки, "Дата",                                        "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                  "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                     "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                          "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                                 "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                               "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтразитьВКнигеПокупок",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПокупателемВыставляетсяСчетФактураНаВозврат", "ПокупателемВыставляетсяСчетФактураНаВозврат");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                                      "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                                       "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                            "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаНДС",                                "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовПоАвансам",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчетаРасчетовСКонтрагентом",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПереданныеСчетУчета", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Себестоимость",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособУчетаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Возврат_поставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "ВидОперации", , "ВидыОпераций_ВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                   "ДокументПоступления", , "ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "ДокументОприходования", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",      "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",          "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",              "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сделка",                "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",             "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",   "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сделка",                   "ДокументПоступления", , "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Закупки
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеДопРасходов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровПоставщику");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровСтороннейКомпании");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ОприходованиеТоваров");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_СписаниеТоваров");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетПоставщика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ТарифицируемаяОперация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТарифицируемаяОперация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетПоставщика";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ТарифицируемаяОперация_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияСБилетом_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТарифицируемаяОперация_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаПоступления(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаПоступления";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаПоступления";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                     "ВидОперации", , "ВидыОперацийИсправленияПоступленияРеализации");
	ДобавитьПКС(СвойстваШапки, "ВосстановитьНДС",                 "ВосстановитьНДС");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",                "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",                 "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументПоступления",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументПоступления", "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КорректироватьБУиНУ",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                           "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеПоступления",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                       "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТДДоИзменения",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",            "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхожденияДоИзменения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеПоступления", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СодержаниеДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1, "ВидыОперацийИсправленияПоступленияРеализации");
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВосстановитьНДС",          "ВосстановитьНДС");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияСБилетом_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияСБилетом_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияСБилетом;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетПоставщика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияСБилетом_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ВключитьВСписокЗагруженныхОбъектов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Билет",                "");
	ДобавитьПКС(СвойстваШапки, "БилетЗамена",          "");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",          "");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",            "");
	ДобавитьПКС(СвойстваШапки, "Сумма",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",             "");
	ДобавитьПКС(СвойстваШапки, "СуммаНеОблагаемаяНДС", "");
	ДобавитьПКС(СвойстваШапки, "Штраф",                "");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",     "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "МаркировкиУпаковок");
	ДобавитьПКС(СвойстваТЧ, "", "МаркировкаУпаковки", 1,"Справочник_ШтрихкодыУпаковокТоваров_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1,"Справочник_НоменклатурнаяГруппа_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетПоставщика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетПоставщика_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетНаОплатуПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,Контрагент,НомерВходящегоДокумента,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "НомерДекларации", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагентаРегл",   "ДоговорРегл", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",           "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",          "ТаможенныйШтраф");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НДСВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПошлинаВВалюте", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ТаможеннаяДекларация";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагентаРегл",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КратностьДокумента",       "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсДокумента",            "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерГТД",                 "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",           "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф",          "ТаможенныйШтраф");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Разделы",      "");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаПошлины",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТаможеннаяСтоимость", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",       "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПартии",      "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерРаздела",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПошлины",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФактурнаяСтоимость",  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ТарифицируемаяОперация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ТарифицируемаяОперация_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетПоставщика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ТарифицируемаяОперация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТарифицируемаяОперация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетНаОплатуПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,Контрагент,НомерВходящегоДокумента,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУ_ПоступлениеДопРасходов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеДопРасходов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Содержание",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",     "СпособПогашенияЗадолженности", 1, "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СпособРаспределения",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",               "", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",       "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПартии", "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаТовара",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУ_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПТиУ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "ВидОперации", , "ВидыОперацийПоступленияТоваров");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПоставщика",   "Заказ", , "Документ_СчетПоставщика_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара",    "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов",      "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СпособУчетаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСВРознице",   "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВРознице",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги",            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПодразделениеЗатрат", "", 1,"Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособУчетаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Субконто1",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто2",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Субконто3",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ1",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ2",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СубконтоНУ3",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетЗатратНУ",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки",  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУРасх_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1, "ВидыОпераций_ВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументОприходования", "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",      "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",          "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",              "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",             "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",   "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВРознице",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",          "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУРасх_ВозвратТоваровСтороннейКомпании";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1, "ВидыОпераций_ВозвратПоставщику");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "КонтрагентСтороннейКомпании", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументОприходования", "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",      "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",          "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",              "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",             "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",   "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВРознице",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",          "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУРасх_ОприходованиеТоваров";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПТиУРасх_СписаниеТоваров";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "ДокументОприходования", "", 1,"ПТиУ_ПоступлениеТоваровУслуг");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",      "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",          "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",              "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "Себестоимость",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",   "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Комиссионная_торговля
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомиссионера";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОПродажах_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОПродажах_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомиссионераОПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетКомиссионераОПродажах";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",                   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",                           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",                  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",                      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",                      "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "Субконто1",                                "", 1);
	ДобавитьПКС(СвойстваШапки, "Субконто2",                                "", 1);
	ДобавитьПКС(СвойстваШапки, "Субконто3",                                "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетУчетаЗатрат",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",                   "УдержатьКомиссионноеВознаграждение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Возвраты",           "");
	ДобавитьПКС(СвойстваТЧ, "ВыставленСФ", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСтроки",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Покупатель",  "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетФактура", "", 1,"Документ_СчетФактураВыданный_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов",       "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Покупатели",         "");
	ДобавитьПКС(СвойстваТЧ, "ВыставленСФ", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаСФ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСтроки",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСФ",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Покупатель",  "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетФактура", "", 1,"Документ_СчетФактураВыданный_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",             "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",       "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "КлючСтроки",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",               "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",    "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПередачи",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаПередачи",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ТоварыВозвращенные", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",       "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "КлючСтроки",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",               "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "Себестоимость",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",    "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитентуОПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомитентуОПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетКомитентуОПродажах";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",                  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",                       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьВознаграждение",                   "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "УслугаПоВознаграждению",                   "УслугаПоВознаграждению", , "Справочник_Номенклатура_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаРеализации",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",       "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Покупатель",             "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПоступления",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаПоступления",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Подарочные_сертификаты
Процедура ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АннулированиеПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("АннулированиеПодарочныхСертификатов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаличными");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РеализацияПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РеализацияПодарочныхСертификатов_ОплатаКартой");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РеализацияПодарочныхСертификатов_ОплатаНаличными");
КонецПроцедуры

Процедура ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "АннулированиеПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",          "СтатьяДоходов", , "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "СуммаКтЗадолженности", "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетКт",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КредиторскаяЗадолженность", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентКредитор",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",        "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "", 1);
	ДобавитьПКС(СвойстваШапки, "СубконтоКт1",          "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СубконтоКт2",          "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "СуммаКтЗадолженности", "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКт",               "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВозвратПодарочныхСертификатов_ВозвратНаличными";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",            "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаКартой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "РеализацияПодарочныхСертификатов_ОплатаКартой";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорЭквайринга", "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",    "Сумма");
	ДобавитьПКС(СвойстваШапки, "Эквайер",           "", 1, "Справочник_Контрагенты_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "РеализацияПодарочныхСертификатов_ОплатаНаличными";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "СуммаНаличными");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "КратностьВзаиморасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КурсВзаиморасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВзаиморасчетов",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",            "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Продажи
Процедура ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АктВыполненныхРабот";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.АктВыполненныхРабот";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРабот");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализацииТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПереоценкаТоваровВРознице(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПереоценкаТоваровВРознице";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПереоценкаТоваровВРознице";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаТоваровВРознице");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияОтгруженныхТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РТиУБезПереходаПравСобственностиУслуги");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_СтатусыДокументов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СтатусыДокументов;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОплатыЗаказа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОтгрузкиЗаказа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостояниеОплатыЗаказа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостояниеОплатыЗаказа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СостояниеОплатыЗаказа";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостояниеОплатыЗаказа_Получение_ПриОбработке";
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостояниеОтгрузкиЗаказа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СостояниеОтгрузкиЗаказа";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение_ПриОбработке";
КонецПроцедуры

Процедура ДобавитьПКО_Документ_АктВыполненныхРабот(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_АктВыполненныхРабот";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.АктВыполненныхРабот";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Руководитель",              "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПокупателю",    "Заказ", , "Документ_ЗаказКлиента_Получение");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                    "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",           "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",      "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Склад",                   "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказКлиента_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетНаОплатуПокупателю";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",            "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",       "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1, "ВидыОперацийИсправленияПоступленияРеализации");
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ИсправляемыйДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаРеализации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КорректировкаРеализации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                  "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации",      "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидОперации", , "ВидыОперацийИсправленияПоступленияРеализации");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",               "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",                "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументРеализации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументРеализации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КорректироватьБУиНУ",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                          "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",               "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеРеализации",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                       "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТДДоИзменения",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",            "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхожденияДоИзменения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги", "");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеРеализации",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СодержаниеДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКасса",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АгентскиеУслуги",       "");
	ДобавитьПКС(СвойстваТЧ, "ДоговорКонтрагента", "", 1,"Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",         "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратОплаты",         "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаОплаты", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Возвраты",              "");
	ДобавитьПКС(СвойстваТЧ, "ДатаРеализации",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",             "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерФискальногоЧека", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",            "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",  "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Оплата",                "");
	ДобавитьПКС(СвойстваТЧ, "СуммаОплаты", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПодарочныеСертификаты", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "УчетВыручкиВОперационнойКассе", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",              "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПереоценкаТоваровВРознице(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПереоценкаТоваровВРознице;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументУстановкиЦен",     "ДокументУстановкиЦен", , "Документ_УстановкаЦенНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСВРознице",  "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаПереоценки",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРозницеСтарая", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияОтгруженныхТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияОтгруженныхТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияОтгруженныхТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                "ДатаПереходаПраваСобственности");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",  "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОтгрузки",    "", 1, "Документ_РеализацияТоваровУслуг");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",               "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",         "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов", "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "ВидОперации", , "ВидыОпераций_РТиУ");
	ДобавитьПКС(СвойстваШапки, "ВидЭлектронногоДокумента",  "ВидЭД", , "ВидыЭД_Реализация_Получение");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЧерезКого",     "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",            "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Руководитель",              "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                     "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",       "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПокупателю",    "Заказ", , "Документ_ЗаказКлиента_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АгентскиеУслуги",   "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",   "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара",    "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов",      "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",            "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПереданныеСчетУчета", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги",            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "");
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "ВидЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДатаПереходаПраваСобственности", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЧерезКого",     "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",            "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Руководитель",              "Руководитель", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",       "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПокупателю",    "Заказ", , "Документ_ЗаказКлиента_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "АкцизныеМарки");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "МаркировкиУпаковок");
	ДобавитьПКС(СвойстваТЧ, "", "МаркировкаУпаковки", 1,"Справочник_ШтрихкодыУпаковокТоваров_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РТиУБезПереходаПравСобственностиУслуги";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЭлектронногоДокумента",  "ВидЭД", , "ВидыЭД_Реализация_Получение");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",          "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",          "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",           "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",   "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",        "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Продавец", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ОтпускПроизвел",            "ОтпускПроизвел", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Руководитель",              "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СпособЗачетаАвансов",       "СпособПогашенияЗадолженности", , "СпособыЗачетаАвансов");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СчетНаОплатуПокупателю",    "Заказ", , "Документ_ЗаказКлиента_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АгентскиеУслуги", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",   "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗачетАвансов",    "");
	ДобавитьПКС(СвойстваТЧ, "ДокументАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаЗачета",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеОплатыЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СтатусыДокументов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеОплатыЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОплаты", 1, "СтатусОплатыСчета");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеОтгрузкиЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СтатусыДокументов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеОтгрузкиЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказКлиента_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОтгрузки", 1);

КонецПроцедуры


#КонецОбласти
#Область Документы_Покупка_и_продажа_Счета_фактуры
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Испр_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураПолученный";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Испр_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Испр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураВыданный_Испр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактураВыданный";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",                              "ВидСчетаФактуры", , "ВидыСчетаФактуры");
	ДобавитьПКС(СвойстваШапки, "Выставлен",                                    "Выставлен");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                             "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",              "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                           "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",                            "", 1);
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                              "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперацииНаУменьшение",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "КодСпособаВыставления",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                               "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента",             "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерСчетаФактурыПродавца",                    "НомерСчетаФактурыКомиссионера");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Руководитель",                                 "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",                            "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                     "");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",         "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсправленияИсходногоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсправленияИсходногоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПлатежноРасчетныеДокументы", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерДокумента", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,НомерИсправления");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                             "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",                              "ВидСчетаФактуры", 1, "ВидыСчетаФактуры");
	ДобавитьПКС(СвойстваШапки, "Выставлен",                                    "Выставлен");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                             "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",                       "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",              "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                           "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                              "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                               "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",                      "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента",             "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерСчетаФактурыПродавца",                    "НомерСчетаФактурыКомиссионера");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Руководитель",                                 "Руководитель", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",                          "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",                            "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИсходныйДокумент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураВыданный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактураВыданный";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",                              "ВидСчетаФактуры", , "ВидыСчетаФактуры");
	ДобавитьПКС(СвойстваШапки, "Выставлен",                                    "Выставлен");
	ДобавитьПКС(СвойстваШапки, "ГлавныйБухгалтер",                             "ГлавныйБухгалтер", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежноРасчетногоДокумента",              "ДатаПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",                           "", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",                            "", 1);
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",                              "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперацииНаУменьшение",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "КодСпособаВыставления",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                               "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерПлатежноРасчетногоДокумента",             "НомерПлатежноРасчетногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерСчетаФактурыПродавца",                    "НомерСчетаФактурыКомиссионера");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Руководитель",                                 "Руководитель", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",                            "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                     "");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",         "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсправленияИсходногоДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсправленияИсходногоДокумента", "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПлатежноРасчетныеДокументы", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаДокумента",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерДокумента", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Испр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураПолученный_Испр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактураПолученный";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",               "ВидСчетаФактуры", , "ВидыСчетаФактурыПолученного");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",               "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",        "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Исправление",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",       "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",               "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперацииНаУменьшение",   "", 1);
	ДобавитьПКС(СвойстваШапки, "КодСпособаПолучения",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",              "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",       "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Субкомиссионер",                "ДанныеРеализацииСубкомиссионер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетФактураВыданныйПокупателю", "ДанныеРеализацииСчетФактураВыставленный", , "Документ_СчетФактураВыданный_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                          "");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС", "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",              "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсправленияИсходногоДокумента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсправленияИсходногоДокумента",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "УчитыватьИсправлениеИсходногоДокумента", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продавцы",                        "");
	ДобавитьПКС(СвойстваТЧ, "Продавец", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СчетаФактурыВыданныеПокупателям", "");
	ДобавитьПКС(СвойстваТЧ, "НДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Покупатель",     "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Субкомиссионер", "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетФактура",    "", 1,"Документ_СчетФактураВыданный_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,ДатаИсправления,Исправление,НомерВходящегоДокумента,НомерИсправления,Контрагент");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",               "ВидСчетаФактуры", 1, "ВидыСчетаФактурыПолученного");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",               "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",        "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",                   "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",       "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",               "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",              "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",       "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",           "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "Субкомиссионер",                "ДанныеРеализацииСубкомиссионер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетФактураВыданныйПокупателю", "ДанныеРеализацииСчетФактураВыставленный", , "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИсходныйДокумент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продавцы");
	ДобавитьПКС(СвойстваТЧ, "", "ИННПродавца", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КПППродавца", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Продавец", 1,"Справочник_Контрагенты_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СчетФактураПолученный";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчетаФактуры",               "ВидСчетаФактуры", , "ВидыСчетаФактурыПолученного");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",               "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",        "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Исправление",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",       "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",               "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперацииНаУменьшение",   "", 1);
	ДобавитьПКС(СвойстваШапки, "КодСпособаПолучения",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КППКонтрагента",                "КППКонтрагента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",       "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",              "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",       "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Субкомиссионер",                "ДанныеРеализацииСубкомиссионер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетФактураВыданныйПокупателю", "ДанныеРеализацииСчетФактураВыставленный", , "Документ_СчетФактураВыданный_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Авансы",                          "");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС", "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования",              "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсправленияИсходногоДокумента",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсправленияИсходногоДокумента",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "УчитыватьИсправлениеИсходногоДокумента", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продавцы",                        "");
	ДобавитьПКС(СвойстваТЧ, "Продавец", "", 1,"Справочник_Контрагенты_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СчетаФактурыВыданныеПокупателям", "");
	ДобавитьПКС(СвойстваТЧ, "НДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Покупатель",     "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Субкомиссионер", "", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетФактура",    "", 1,"Документ_СчетФактураВыданный_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,Исправление,НомерВходящегоДокумента,Контрагент");
КонецПроцедуры


#КонецОбласти
#Область Документы_Производство
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзПроизводства_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыпускПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыпускПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыпускПродукции_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратныеОтходы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыпускПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратныеОтходы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НоменклатурнаяГруппа", "", ,"Справочник_НоменклатурнаяГруппа_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Материалы",        "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НоменклатурнаяГруппа", "", 1,"Справочник_НоменклатурнаяГруппа_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продукция",        "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоМест",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НоменклатурнаяГруппа", "", 1,"Справочник_НоменклатурнаяГруппа_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПлановаяСтоимость",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Спецификация",         "", 1,"Справочник_СпецификацииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлановая",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ТребованиеНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ТребованиеНакладная";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "", 1);
	ДобавитьПКС(СвойстваШапки, "НДСвСтоимостиТоваров",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетаУчетаЗатратВТаблице", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Материалы",          "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НоменклатурнаяГруппа", "", 1,"Справочник_НоменклатурнаяГруппа_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",             "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПодразделениеЗатрат",  "", 1,"Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваТЧ, "СпособУчетаНДС",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяЗатрат",         "", 1,"Справочник_СтатьиРасходов_СтатьиЗатрат");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",  "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СчетЗатрат",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "МатериалыЗаказчика", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Производство_Давальческая_схема__учет_у_давальца_
Процедура ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаПереработчику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаПереработчику";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеОтПереработчика_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара",        "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвращенныеМатериалы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НоменклатурнаяГруппа",     "ГруппаАналитическогоУчетаНоменклатуры", , "Справочник_НоменклатурнаяГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетЗатрат",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИспользованныеМатериалы", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продукция",               "");
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПлановаяСтоимость", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлановая",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаПереработчику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПередачаПереработчику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеОтПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеОтПереработчика";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатрат",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Продукция",      "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Производство_Давальческая_схема__учет_у_переработчика_
Процедура ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратСырьяДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетДавальцу_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаДавальцу_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеСырьяОтДавальца_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Сделка",                   "", 1, "Документ_ПоступлениеСырьяОтДавальца_Получение");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияУслугПоПереработке;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетДавальцу";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияУслугПоПереработке";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументБезНДС",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "МатериалыЗаказчика", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Услуги",             "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПередачаДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаДавальцу";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеСырьяОтДавальца_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПТиУ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КратностьВзаиморасчетов",  "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "КурсВзаиморасчетов",       "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Регл__отчеты
Процедура ДобавитьПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегламентированныйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегламентированныйОтчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегламентированныйОтчет_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегламентированныйОтчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РегламентированныйОтчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегламентированныйОтчет_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_РегламентированныйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегламентированныйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РегламентированныйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вид",                           "ВидОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОтчетности",                 "ВидОтчетности", , "ВидыОтчетности");
	ДобавитьПКС(СвойстваШапки, "ВыбраннаяФорма",                "ВыбраннаяФорма");
	ДобавитьПКС(СвойстваШапки, "ДанныеОтчета",                  "ДанныеОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                 "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "ДатаОтправки",                  "ДатаОтправки");
	ДобавитьПКС(СвойстваШапки, "ДатаПодписи",                   "ДатаПодписи");
	ДобавитьПКС(СвойстваШапки, "ДеревоНастройкиСтраниц",        "ДеревоНастройкиСтраниц", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",              "ПорядокОкругленияОтчета", , "ПорядкиОкругленияОтчетности");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",                 "ИдентификаторОтчета");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",                "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",           "НалоговыйОрган");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПосредника", "НалоговыйОрганПосредник");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОтчета",            "НаименованиеОтчета");
	ДобавитьПКС(СвойстваШапки, "НомерПачки",                    "НомерПачки", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Период",                        "ПериодСтрокой");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                 "Период", , "ПериодичностьРО");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВида",             "ПредставлениеВида");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",          "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "СтатусОтчета",                  "СтатусОтчета");
	ДобавитьПКС(СвойстваШапки, "ТочностьЕдиницыИзмерения",      "ТочностьЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ФорматВыгрузки",                "ФорматВыгрузки");

КонецПроцедуры

Процедура ДобавитьПКО_РегламентированныйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "РегламентированныйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РегламентированныйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вид",                           "ВидОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОтчетности",                 "ВидОтчетности", , "ВидыОтчетности");
	ДобавитьПКС(СвойстваШапки, "ВыбраннаяФорма",                "ВыбраннаяФорма");
	ДобавитьПКС(СвойстваШапки, "ДанныеОтчета",                  "ДанныеОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                 "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "ДатаОтправки",                  "ДатаОтправки");
	ДобавитьПКС(СвойстваШапки, "ДатаПодписи",                   "ДатаПодписи");
	ДобавитьПКС(СвойстваШапки, "ДеревоНастройкиСтраниц",        "ДеревоНастройкиСтраниц", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",              "ПорядокОкругленияОтчета", , "ПорядкиОкругленияОтчетности");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",                 "ИдентификаторОтчета");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",                "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",           "НалоговыйОрган");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПосредника", "НалоговыйОрганПосредник");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОтчета",            "НаименованиеОтчета");
	ДобавитьПКС(СвойстваШапки, "НомерПачки",                    "НомерПачки", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Период",                        "ПериодСтрокой");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                 "Период", , "ПериодичностьРО");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВида",             "ПредставлениеВида");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",          "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "СтатусОтчета",                  "СтатусОтчета");
	ДобавитьПКС(СвойстваШапки, "ТочностьЕдиницыИзмерения",      "ТочностьЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ФорматВыгрузки",                "ФорматВыгрузки");

КонецПроцедуры


#КонецОбласти
#Область Документы_Складские_операции
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзЭксплуатации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ИнвентаризацияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМатериаловВЭксплуатацию_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеПриСборке_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗапасов";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеМатериаловИзЭксплуатации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеМатериаловИзЭксплуатации_Получени");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеНедостач(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостач";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеНедостач";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратМатериаловИзЭксплуатации;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецодежда",   "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",                       "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецоснастка", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаИнвентаризации",        "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияИнвентаризации",     "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеВид",            "ДокументОснованиеВид");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеДата",           "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеНомер",          "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо",               "ОтветственноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПричинаПроведенияИнвентаризации", "ПричинаПроведенияИнвентаризации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ИнвентаризацияТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаИнвентаризации",        "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияИнвентаризации",     "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеВид",            "ДокументОснованиеВид");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеДата",           "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "ДокументОснованиеНомер",          "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОтветственноеЛицо",               "ОтветственноеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                   "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПричинаПроведенияИнвентаризации", "ПричинаПроведенияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                           "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУчет", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаУчет",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                            "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                 "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                   "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",               "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяПрочихДоходовРасходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                      "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ИнвентаризацияТоваровНаСкладе", "Инвентаризация", , "Документ_ИнвентаризацияТоваров_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтатьяПрочихДоходовРасходов",   "СтатьяДоходов", , "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВРознице",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПередачаМатериаловВЭксплуатацию;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИнвентарьИХозяйственныеПринадлежности", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",      "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецодежда",                            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",      "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецоснастка",                          "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОтправитель", "ПодразделениеОтправитель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеПолучатель",  "ПодразделениеПолучатель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",         "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",          "СкладПолучатель", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПеремещениеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОтправитель", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеПолучатель",  "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",         "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",          "СкладПолучатель", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара",   "");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НовыйСчетУчета", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",   "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",           "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",  "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСВРознице", "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаВРознице",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаВРознице",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ТоварыНаКомиссии", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НовыйСчетУчета",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СборкаТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "ВидОперации", , "Перечисление_ВидыОперацийКомплектация");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",               "Количество");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НДСвСтоимостиТоваров",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Номенклатура",             "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчета",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Комплектующие", "");
	ДобавитьПКС(СвойстваТЧ, "ДоляСтоимости",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеМатериаловИзЭксплуатации_Получени";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеМатериаловИзЭксплуатации;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИнвентарьИХозяйственныеПринадлежности", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",                       "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецодежда",                            "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизЛицо",                       "", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Спецоснастка",                          "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",                  "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПартияМатериаловВЭксплуатации", "", 1,"Документ_ПередачаМатериаловВЭксплуатацию_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетПередачи",                  "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеНедостач_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ИнвентаризацияТоваровНаСкладе", "Инвентаризация", , "Документ_ИнвентаризацияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеНедостач_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеНедостач_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ИнвентаризацияТоваровНаСкладе", "Инвентаризация", , "Документ_ИнвентаризацияТоваров_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                     "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                         "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВозвратнаяТара", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",         "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеПриСборке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Коэффициент",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1,"Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "СчетУчета",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры


#КонецОбласти
#Область Документы_Ценообразование
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипЦен",        "ТипЦен", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,ТипЦен");
КонецПроцедуры


#КонецОбласти
#Область Настройки_организаций
Процедура ДобавитьПОД_НастройкиРасчетаРезервовОтпусков_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НастройкиРасчетаРезервовОтпусков_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НастройкиРасчетаРезервовОтпусков";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("НастройкиРасчетаРезервовОтпусков_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_НастройкиРасчетаРезервовОтпусков_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "НастройкиРасчетаРезервовОтпусков_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НастройкиРасчетаРезервовОтпусков";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_НастройкиРасчетаРезервовОтпусков_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "", "Период", 1);

КонецПроцедуры


#КонецОбласти
#Область Начальные_остатки
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолженностиПодотчетныхЛиц");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиКредитыЗаймы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитыЗаймы");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНематериальныхАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНематериальныхАктивов");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиОсновныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиОсновныхСредств");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетныхЛиц");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиАвансы");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиДолги");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиАвансы");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиДолги");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТараПринятая";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомиссию");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидБанковскогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиКредитыЗаймы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДенежныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1, "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НематериальныеАктивы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизационнаяГруппа", 1,"Перечисление_АмортизационныеГруппы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизацияДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОбъектаУчета", 1,"ВидыОбъектовУчетаНМА");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПриобретения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Наименование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияВР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НематериальныйАктив", 1,"Справочник_НематериальныеАктивы");
	ДобавитьПКС(СвойстваТЧ, "", "ОбъемПродукцииРаботДляВычисленияАмортизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрочиеСведения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпециальныйКоэффициентНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииБУ", 1,"СпособыНачисленияАмортизацииНМАБУ");
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииНУ", 1,"СпособыНачисленияАмортизацииНМАНУ");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПоступления", 1,"Перечисление_СпособыПоступленияАктивов");
	ДобавитьПКС(СвойстваТЧ, "", "СрокИспользованияНУДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьВР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьПР", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиОсновныхСредств";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиОсновныхСредств";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Подразделение", 1, "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОсновныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизационнаяГруппа", 1,"Перечисление_АмортизационныеГруппы");
	ДобавитьПКС(СвойстваТЧ, "", "АмортизацияДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГрафикАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаОС", 1,"Перечисление_ГруппыОС");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыпуска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПоследнейМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗаводскойНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Изготовитель", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИнвентарныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПоОКОФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоэффициентУскоренияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МОЛ", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НазваниеДокументаМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НазваниеДокументаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Наименование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НакопленнаяАмортизацияПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачислятьАмортизациюНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокументаМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокументаПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерПаспорта", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОбъемНаработкиБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОсновноеСредство", 1,"Справочник_ОсновныеСредства");
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПервоначальнаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПоказательНаработки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокПогашенияСтоимостиБУ", 1,"Перечисление_ПорядокПогашенияСтоимостиОС");
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокПогашенияСтоимостиНУ", 1,"ПорядокВключенияСтоимостиОСВСоставРасходовНУ");
	ДобавитьПКС(СвойстваТЧ, "", "СобытиеМодернизации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СобытиеПринятияКУчету", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпециальныйКоэффициентНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособНачисленияАмортизацииБУ", 1,"Перечисление_СпособыНачисленияАмортизацииОС");
	ДобавитьПКС(СвойстваТЧ, "", "СпособПоступления", 1,"Перечисление_СпособыПоступленияАктивов");
	ДобавитьПКС(СвойстваТЧ, "", "СрокИспользованияНУДо2009", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокПолезногоИспользованияНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетАмортизацииБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТекущаяСтоимостьПР", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШифрПоЕНАОФ", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1,"Документ_АвансовыйОтчет_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Расчеты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРегл", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТМЦ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1,"Документ_СчетФактураПолученный_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТараПринятая";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Тара");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБезНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Базовые_классификаторы
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Банки_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ИностранныйБанк", 1);
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1);
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "СВИФТБИК");
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "SWIFT");
	ДобавитьПКС(СвойстваШапки, "Страна",       "Страна", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,КоррСчет,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СВИФТБИК,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                  "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",   "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",     "ПараметрыПрописиНаРусском");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",     "ПараметрыПрописи");
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                  "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",   "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ОКВЭД(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОКВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторВидовЭкономическойДеятельности;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ОКП(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОКП";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",                  "ВидДоговора", , "ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "Владелец",                     "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ИспользуетсяПриОбменеДанными", "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах",     "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокДействия",                 "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "СрокОплаты",                   "СрокКонтроляОплатыВДнях");
	ДобавитьПКС(СвойстваШапки, "ТипЦен",                       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",            "УчетАгентскогоНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДоговора,Владелец,Дата,Номер,Организация,ЭтоГруппа,ВалютаВзаиморасчетов");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Наименование,Организация,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", 1, "ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокДействия",             "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "СрокОплаты",               "СрокКонтроляОплатыВДнях");
	ДобавитьПКС(СвойстваШапки, "УчетАгентскогоНДС",        "УчетАгентскогоНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                               "ГоловнойКонтрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДокументУдостоверяющийЛичность", "ДокументУдЛичность");
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформация",       "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "ИНН",                            "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                      "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",             "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НалоговыйНомер",                 "НалоговыйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение",      "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет",         "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",           "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",              "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",      "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "ОсновнойДоговор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",        "ГоловнойКонтрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформация",  "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НалоговыйНомер",            "НалоговыйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение", "ОбособленноеПодразделение");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет",    "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",      "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",         "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурнаяГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатурыГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатурыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатурыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатурыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатурыГрупп_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.МаркировкаУпаковки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Услуга",       "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Услуга");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                 "СтавкаНДС", 1, "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "АлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидАлкогольнойПродукции", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ИмпортнаяАлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ОбъемДАЛ", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ПроизводительИмпортер", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                 "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "КодВидаНоменклатурнойКлассификации", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "ВидПродукцииИС", 1);
	ДобавитьПКС(СвойстваШапки, "Артикул",                          "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                 "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Код",                              "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                      "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",               "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НоменклатурнаяГруппа",             "ГруппаАналитическогоУчета", , "Справочник_НоменклатурнаяГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяСпецификацияНоменклатуры", "ОсновнаяСпецификацияНоменклатуры", , "Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                         "Группа", , "Справочник_НоменклатураГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",              "СтранаПроисхождения", , "Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",                           "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",                   "ВидНоменклатуры", , "Справочник_ВидыНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидСтавкиНДС",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                  "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Импортер",                          "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",                               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодНоменклатурнойКлассификацииККТ", "", 1);
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                          "КодОКВЭД", , "Справочник_ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКП",                            "КодОКП", , "Справочник_ОКП");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",                          "КодТНВЭД", , "Справочник_КлассификаторТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                       "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НоменклатурнаяГруппа",              "ГруппаАналитическогоУчета", , "Справочник_НоменклатурнаяГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяСпецификацияНоменклатуры",  "ОсновнаяСпецификацияНоменклатуры", , "Справочник_СпецификацииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "Производитель",                     "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                          "Группа", , "Справочник_НоменклатураГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",               "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Услуга",                            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа,Родитель");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_НоменклатураГруппа";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппыГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурнаяГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурныеГруппыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомераГТДИзСтроки_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "Группа", 1, "Справочник_СпецификацииНоменклатурыГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Количество",   "Количество");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Количество",   "Количество");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГрупп_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ИсходныеКомплектующие", "ИсходныеКомплектующие");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", 1,"Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Родитель,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатурыГрупп_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпецификацииНоменклатурыГрупп_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпецификацииНоменклатурыГруппа";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГрупп_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,ЭтоГруппа,Родитель");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатурыГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатурыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатурыГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпецификацииНоменклатурыГруппа_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаЦены", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "НоменклатураОтбор", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "НоменклатураОтбор", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.МаркировкаУпаковки";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки", , "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода", , "ТипыШтрихкодов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВложенныеТовары", "ВложенныеТовары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.МаркировкаУпаковки";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки", , "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода", , "ТипыШтрихкодов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВложенныеТовары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки,ТипШтрихкода");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "ЗначениеШтрихкода");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "", 1, "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "", 1, "ТипыШтрихкодов");

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры

Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Должности;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Должности_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Должности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Должности";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Должности_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЛицензииПоставщиковАлкогольнойПродукции_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлкогольнойПродукции");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостоянияЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СостоянияЭД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЭД_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостоянияЭД_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостоянияЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЭД_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1, "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "", "ДатаНачала", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДатаОкончания", 1);
	ДобавитьПКС(СвойстваШапки, "", "КемВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КодМВД",       "КодМВД");
	ДобавитьПКС(СвойстваШапки, "КодПФР",       "КодПФР");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1,"Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Должности(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Должности";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Должности;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Должности";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией", "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеКраткое",                                "НаименованиеКраткое");
	ДобавитьПКС(СвойстваШапки, "РеквизитДопУпорядочивания",                          "РеквизитДопУпорядочивания");
	ДобавитьПКС(СвойстваШапки, "ЯвляетсяДолжностьюЛетногоЭкипажа",                   "ЯвляетсяДолжностьюЛетногоЭкипажа");
	ДобавитьПКС(СвойстваШапки, "ЯвляетсяФармацевтическойДолжностью",                 "ЯвляетсяФармацевтическойДолжностью");
	ДобавитьПКС(СвойстваШапки, "ЯвляетсяШахтерскойДолжностью",                       "ЯвляетсяШахтерскойДолжностью");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "", "ДатаНачала", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДатаОкончания", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1, "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "", "КемВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Поставщик");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостоянияЭД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СостоянияЭД;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОснованиеЭлектронногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаНашейСтороне", 1, "ТипыСостоянийОбменаЭД");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаСторонеКонтрагента", 1, "ТипыСостоянийОбменаЭД");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеЭлектронногоДокумента", 1, "ТипыСостоянийЭлектронногоДокумента");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЭД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СостоянияЭД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.СостоянияЭД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОснованиеЭлектронногоДокумента", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("СсылкаНаОбъект");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчете";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "ФИО", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаРегистрации",       "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",          "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",         "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСлужебное", "НаименованиеСлужебное");
	ДобавитьПКС(СвойстваШапки, "Пол",                   "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",              "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР",     "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "УточнениеНаименования", "УточнениеНаименования");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРегистрации",       "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",          "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",         "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСлужебное", "НаименованиеСлужебное");
	ДобавитьПКС(СвойстваШапки, "Пол",                   "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",              "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР",     "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "УточнениеНаименования", "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "ФИО",                   "ФИО");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ДобавитьПОД_ПодразделениеРегламентированногоУчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПодразделениеРегламентированногоУчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПодразделениеРегламентированногоУчета_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_ПодразделениеРегламентированногоУчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПодразделениеРегламентированногоУчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПодразделениеРегламентированногоУчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПодразделениеРегламентированногоУчета_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_ПодразделениеРегламентированногоУчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПодразделениеРегламентированногоУчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПодразделениеРегламентированногоУчета";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "ПодразделениеРегламентированногоУчета_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_ПодразделениеРегламентированногоУчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПодразделениеРегламентированногоУчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПодразделениеРегламентированногоУчета";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "ПодразделениеРегламентированногоУчета_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчета",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "МесяцПрописью",         "ВыводитьМесяцПрописью");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                      "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",                   "ГоловнаяОрганизация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДополнительныйКодФСС",                  "ДополнительныйКодФСС");
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель",         "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                              "ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД2",                             "ОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "КодОКОПФ",                              "ОКОПФ");
	ДобавитьПКС(СвойстваШапки, "КодОКФС",                               "ОКФС");
	ДобавитьПКС(СвойстваШапки, "КодОрганаПФР",                          "ОрганПФР");
	ДобавитьПКС(СвойстваШапки, "КодПодчиненностиФСС",                   "КодПодчиненностиФСС");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                             "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                   "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД",                     "НаименованиеОКВЭД");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД2",                    "НаименованиеОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКОПФ",                     "НаименованиеОКОПФ");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКФС",                      "НаименованиеОКФС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",               "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаПФР", "НаименованиеТерриториальногоОрганаПФР");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                  "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                               "Префикс");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерПФР",               "РегистрационныйНомерПФР");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерФСС",               "РегистрационныйНомерФСС");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",               "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",               "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",             "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",                   "ГоловнаяОрганизация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнительныйКодФСС",                  "ДополнительныйКодФСС");
	ДобавитьПКС(СвойстваШапки, "ИмяИП",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель",         "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                              "ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД2",                             "ОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "КодОКОПФ",                              "ОКОПФ");
	ДобавитьПКС(СвойстваШапки, "КодОКФС",                               "ОКФС");
	ДобавитьПКС(СвойстваШапки, "КодОрганаПФР",                          "ОрганПФР");
	ДобавитьПКС(СвойстваШапки, "КодПодчиненностиФСС",                   "КодПодчиненностиФСС");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                             "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                   "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД",                     "НаименованиеОКВЭД");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД2",                    "НаименованиеОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКОПФ",                     "НаименованиеОКОПФ");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКФС",                      "НаименованиеОКФС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",               "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаПФР", "НаименованиеТерриториальногоОрганаПФР");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                  "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ОсновнойБанковскийСчет",                "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ОтчествоИП",                            "", 1);
	ДобавитьПКС(СвойстваШапки, "Префикс",                               "Префикс");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерПФР",               "РегистрационныйНомерПФР");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерФСС",               "РегистрационныйНомерФСС");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",               "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",               "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ФамилияИП",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",             "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", ,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "РегистрацияПодразделенияВНалоговомОргане", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОбособленноеПодразделение", "", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "ВышестоящееПодразделение", , "Справочник_Подразделения_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументПредставителя",                  "ДокументПредставителя");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                             "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "КраткоеНаименованиеНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "НаименованиеИФНС",                       "НаименованиеИФНС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОбособленногоПодразделения", "НаименованиеОбособленногоПодразделения");
	ДобавитьПКС(СвойстваШапки, "Представитель",                          "Представитель", 1);
	ДобавитьПКС(СвойстваШапки, "УполномоченноеЛицоПредставителя",        "УполномоченноеЛицоПредставителя");

	ПравилоКонвертации.ПоляПоиска.Добавить("КодПоОКАТО,КПП,НаименованиеОбособленногоПодразделения");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеОбособленногоПодразделения");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "МОЛ", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                 "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "Родитель",                 "СкладГруппа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",                "ТипСклада", , "ТипыСкладов");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли",  "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "Родитель",                "СкладГруппа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",               "ТипСклада", , "ТипыСкладов");
	ДобавитьПКС(СвойстваШапки, "ТипЦенРозничнойТорговли", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСклада,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктураПредприятия_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");

КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Финансовая_аналитика
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПрочиеДоходыРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиЗатрат_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиЗатрат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", 1, "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДСГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиДоходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства");
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", ,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтатьиДоходов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтатьиРасходов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиРасходов_СтатьиЗатрат(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов_СтатьиЗатрат";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СтатьиРасходов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидДеятельностиДляНалоговогоУчетаЗатрат", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидРасходовНУ",                           "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                                     "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",                            "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры


#КонецОбласти
#Область Справочная_информация
Процедура ДобавитьПКО_Справочник_ОсновныеСредства(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОсновныеСредства";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОсновныеСредства;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ОсновныеСредства";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АмортизационнаяГруппа", "АмортизационнаяГруппа", , "Перечисление_АмортизационныеГруппы");
	ДобавитьПКС(СвойстваШапки, "ГруппаОС",              "ГруппаОС", , "Перечисление_ГруппыОС");
	ДобавитьПКС(СвойстваШапки, "ДатаВыпуска",           "ДатаВыпуска");
	ДобавитьПКС(СвойстваШапки, "ЗаводскойНомер",        "ЗаводскойНомер");
	ДобавитьПКС(СвойстваШапки, "Изготовитель",          "Изготовитель");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерПаспорта",         "НомерПаспорта");

	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Внеоборотные_активы
Процедура ДобавитьПКО_Справочник_НематериальныеАктивы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НематериальныеАктивы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НематериальныеАктивы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НематериальныеАктивы";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НематериальныеАктивы_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОбъектаУчета",    "ВидОбъектаУчета", , "ВидыОбъектовУчетаНМА");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Документы_Казначейство_Банк
Процедура ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Правило Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ сейчас не используется,
	// оно нужно лишь для того, чтобы пометить на удаление корр.долга, если документ загружен ранее по старому правилу.
	
	ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ = Ложь; 
	ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение = Ложь;
	
	Если ДанныеXDTO.Свойство("СуммаКомиссии") И ДанныеXDTO.СуммаКомиссии > 0 Тогда
		ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Ложь;
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда 
		ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ПлатежноеПоручение_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_ПРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
		// расчетам по кредитам (займам) и прочим расчетам с контрагентами
		ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		// В документе может быть сумма, равная нулю. Скорее всего, это загруженный документ от "Отчет банка по эквайригу".
		// Такие документы мы не отправляем.
		Если ДанныеИБ.СуммаДокумента <> 0 Тогда
			ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		// Конвертация валюты - из операций, связанных с конвертацией валюты
		ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПодотчетногоЛица Тогда
		
		// Расчеты с сотрудниками - из возврата займа работником
		ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
	
		// Перевод с другого счета отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда 
	
		// Взнос наличными или инкассация отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			// 91.01
			ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_ Тогда
			
			// 71.xx
			// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
			ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
			
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) И ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			// 60.xx, 62.xx, 66.xx, 67.xx 76.xx
			// Расчеты с контрагентами - из прочего поступления
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
			
		Иначе 
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ПРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_СРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка    = Ложь;
	ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка         = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка     = Ложь;
	
	ВидПрочегоСписания = "";
	ВидРасчетовСКонтрагентом = "";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ") Тогда
			ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				Или СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
				ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
			ИначеЕсли  ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
			И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) И ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
	
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП ИЛИ 
		ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		    ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка = Истина;
			Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
				ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
	
		// Списание наличных отправляется только начиная с версии формата 1.6
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_СРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ДатаВыписки") И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
	Иначе
		ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Проведен", Ложь);
	КонецЕсли;
	
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Э");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.СчетДт = БухгалтерскийСчетПоКоду("91.02");
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокРасшифровка = Новый Массив;
	СтруктураДанныхСтроки = Новый Структура();
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДанныеXDTO.ДоговорЭквайринга);
	Иначе
		ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентДебитор);
		СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорЭквайринга.Ссылка);
	КонецЕсли;
	СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("Сумма", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("СуммаНУ", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетов", БухгалтерскийСчетПоКоду("57.03"));
	
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДебиторскаяЗадолженность", МассивСтрокРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Э");
		
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеОрганизации");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеКт");
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПолученныеДанные.СуммаДокумента = 0; // Сумма документа - всегда равна нулю, т.к. этот документ движений по банку не делает.
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = БухгалтерскийСчетПоКоду("91.02");
	
	МассивСтрокРасшифровка = Новый Массив;
	
	СтруктураДанныхСтроки = Новый Структура;
	
	Если ДанныеXDTO.Свойство("СуммаКомиссии") И ЗначениеЗаполнено(ДанныеXDTO.СуммаКомиссии) Тогда
		СтруктураДанныхСтроки.Вставить("СуммаУслуг",ДанныеXDTO.СуммаКомиссии);
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", БухгалтерскийСчетПоКоду("57.03"));
	
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_ПРС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
		
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда	
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	
	ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	Для Каждого Расшифровка Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Расшифровка.ДоговорКонтрагента) Тогда
			Расшифровка.ДоговорКонтрагента = ДоговорЭквайринга;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными;
	
	МассивСтрокРасшифровка = Новый Массив;
	
	СтруктураДанныхСтроки = Новый Структура;
	СтруктураДанныхСтроки.Вставить("СуммаПлатежа", ПолученныеДанные.СуммаДокумента);
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		// Сохраняем вид операции.
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	
	ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом,СубконтоКт1,СубконтоКт2,СубконтоКт3,ПодразделениеКт";
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		ВосстанавливаемыеПоля);
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	
	ДобавитьСтрокуРасшифровкиПлатежаДляПрочихПРС(ПолученныеДанные);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВозвратЗарплатыПоЗарплатном_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	
	ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Валюта конвертации
		ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
		ИмяПКОВалюта = "";
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			
			Если ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКОВалюта = "Справочник_Валюты";
			Иначе
				ИмяПКОВалюта = "Справочник_Валюты_ИзСтруктуры";
			КонецЕсли;
		КонецЕсли;
		ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюта);
		ВалютаКонвертации = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ВалютаКонвертации, ПКОВалюты,"ПолучитьСсылку").Ссылка;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ВалютаКонвертации);
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсЦБНаДатуКонвертации","КурсНаДатуПриобретенияРеализацииВалюты");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("КурсНаДатуПриобретенияРеализацииВалюты") Тогда
				ПолученныеДанные.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураДанныхСтроки.КурсНаДатуПриобретенияРеализацииВалюты;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
		
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ВалютаКонвертации = ПолученныеДанные.ДополнительныеСвойства.ВалютаКонвертации;
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета
		И ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
	Иначе
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
	КонецЕсли;
	
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		ПолученныеДанные.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
	КонецЕсли;
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты; 
	ИначеЕсли АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты; 
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентомПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Восстанавливаем "затертые" данные
		//РасшифровкаПлатежа
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		
		ПолученныеДанные = Неопределено;				
		
		УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
	
	ДобавитьСтрокуРасшифровкиПлатежаДляПрочихПРС(ПолученныеДанные);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если ДанныеXDTO.Свойство("СчетРасходов") И ЗначениеЗаполнено(ДанныеXDTO.СчетРасходов) Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = БухгалтерскийСчетПоКоду(ДанныеXDTO.СчетРасходов);
	КонецЕсли;	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		ИспользуетсяСтарыйФорматТЧ =  ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3");
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ИспользуетсяСтарыйФорматТЧ Тогда
				Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
				КонецЕсли;
			КонецЕсли;
			// Сумму услуг - в 1-ю строку расшифровки.
			Если ДанныеXDTO.Свойство("СуммаУслуг") И ЗначениеЗаполнено(ДанныеXDTO.СуммаУслуг) 
				И МассивСтрокРасшифровка.Количество() = 0 Тогда
				СтруктураДанныхСтроки.Вставить("СуммаУслуг",ДанныеXDTO.СуммаУслуг);
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
		
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда	
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		КонецЕсли;
	КонецЦикла;
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	
	ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	Для Каждого Расшифровка Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Расшифровка.ДоговорКонтрагента) Тогда
			Расшифровка.ДоговорКонтрагента = ДоговорЭквайринга;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	
	ДобавитьСтрокуРасшифровкиПлатежаДляПрочихПРС(ПолученныеДанные);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	
	Если ДанныеИБ = Неопределено Тогда
		
		// Если в расшифровке платежа указан счет 51/52/55, то считаем, что это поступление с другого расчетного счета организации.
		// Во всех остальных случаях считаем, что это прочее поступление.
		СчетаБанка = ПоступлениеНаРасчетныйСчетФормы.СчетаБанка(ПолученныеДанные);
		Если ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом)
			И СчетаБанка.Найти(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) <> Неопределено Тогда 
			
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	
	// Значения субконто.
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("БанковскиеСчета", ПолученныеДанные.СчетКонтрагента);
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетДоходов");
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
	
		ПерваяСтрока = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрока.СтатьяДоходов) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт1", Новый Структура("Значение, ИмяПКО", ПерваяСтрока.СтатьяДоходов, "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы"));
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровкиПлатежаДляПрочихПРС(ПолученныеДанные);
		
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ВидОперацииДанныхИБ = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	Если ДанныеИБ <> Неопределено Тогда
		ВидОперацииДанныхИБ = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииДанныхИБ = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		// Счет учета расчетов с контрагентом.
		ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
		Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				Строка.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
		КонецЦикла;
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
		СоответствиеСубконто.Вставить("БанковскиеСчета",      ПолученныеДанные.СчетКонтрагента);
		СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
		СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
		ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Иначе
		// Если в информационной базе уже существует документ,
		// и его вид отличается от ПрочееСписание, то не нужно затирать его свойства, кроме базовых.
		// Это требуется из-за того, что в прочий расход часто на стороне корреспондента выгружаются
		// те документы, учет которых не автоматизирован.
		// В этом случае, загруженные данные затрут наш вид операции.
		
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, 
			"Номер, Дата, Организация, Ответственный, Комментарий, ПодразделениеОрганизации, СуммаДокумента, ДатаВходящегоДокумента, НомерВходящегоДокумента");
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область АлгоритмКонвертации
	АлгоритмКонвертации = "";
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		
		АлгоритмКонвертации = "ОплатаОтПокупателя";
		
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		
		АлгоритмКонвертации = "ВозвратОтПоставщика";
		
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
		
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		
		АлгоритмКонвертации = "ПрочиеРасчетыСКонтрагентами";
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		// СтатьяДвиженияДенежныхСредств
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		КонецЕсли;
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		ИспользоватьСчетНаОплату     = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Заказ") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			// СпособПогашенияЗадолженности
			Если АлгоритмКонвертации = "ОплатаОтПокупателя"
				Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
				Если СтруктураДанныхСтроки.Свойство("СпособПогашенияЗадолженности")
					И ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособПогашенияЗадолженности) Тогда
				    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
						
						ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, Строка.ДокументРасчетов);	
				    
					КонецЕсли;
				Иначе
					СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
				КонецЕсли;
				
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			ИначеЕсли ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовПоАвансам) Тогда
				СчетУчетаАвансСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовПоАвансам);
				Если ЗначениеЗаполнено(СчетУчетаАвансСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовПоАвансам",СчетУчетаАвансСсылка);
				КонецЕсли;
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если ИспользоватьСчетНаОплату
				И АлгоритмКонвертации = "ОплатаОтПокупателя"
				И ЗначениеЗаполнено(Строка.Заказ) 
				И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
				СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
					Строка.Заказ, "Документ_ЗаказКлиента_Получение");
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если в уже существующем документе указан договор факторинга, то загружать такой документ повторно не требуется.
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя ИЛИ
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		МассивКлючевыхПолей.Добавить("СуммаНДС");
	КонецЕсли;
	
	ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС";
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", СпособПогашенияЗадолженности, Сделка";
	КонецЕсли;
	
	ВосстанавливаемыеНезаполненныеКолонки = "СчетНаОплату";
	ДополнитьПолямиСНезаполненнымиЗначениями(ПолученныеДанные.РасшифровкаПлатежа, ВосстанавливаемыеНезаполненныеКолонки, ВосстанавливаемыеПоля);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		ВосстанавливаемыеПоля);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		// Сохраним расшифровку платежа для заполнения поля Сделка в ПослеЗагрузкиВсехДанных
		ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа",  ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник = Неопределено;
	Если ДанныеXDTO.Свойство("Сотрудник")
		И ЗначениеЗаполнено(ДанныеXDTO.Сотрудник) Тогда
		Сотрудник = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Сотрудник, "Справочник_ФизическиеЛица_Получение");
	КонецЕсли;
	
	УказанВидРасчетов = ДанныеXDTO.Свойство("ВидРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов);
	Если УказанВидРасчетов
		И ДанныеXDTO.ВидРасчетов.Значение = "Займы" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", Сотрудник);
	ИначеЕсли УказанВидРасчетов
		И ДанныеXDTO.ВидРасчетов.Значение = "Подотчет" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПодотчетногоЛица;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", Сотрудник);
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт1", Сотрудник);
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетов) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетов));
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	
	Если ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.СубконтоКт1);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Валюта", ДанныеИБ.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(ДанныеИБ.КодБК)
		И ДанныеИБ.КодБК <> ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
		ДанныеXDTO.Вставить("ПоказательКБК", ДанныеИБ.КодБК);
	Иначе
		ДанныеXDTO.Вставить("ПоказательКБК", "");
	КонецЕсли;
	
	Оплачено = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(ДанныеИБ.Ссылка) = Перечисления.СостоянияБанковскихДокументов.Оплачено;
	ДанныеXDTO.Вставить("Оплачено", Оплачено);
		
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если НЕ ПолученныеДанные.ПеречислениеВБюджет Тогда
		ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ПолученныеДанные.ПеречислениеВБюджет И Значениезаполнено(ПолученныеДанные.КодБК) Тогда
		ПолученныеДанные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ПолученныеДанные.КодБК, , ПолученныеДанные.СтатусСоставителя);
		ПолученныеДанные.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КодБК)
		И ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(ПолученныеДанные.СтатусСоставителя) Тогда
		ПолученныеДанные.КодБК = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации  = ПолученныеДанные.ВидОперации Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсКонвертации,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьКонвертации,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВал	
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа <> 0";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ДанныеXDTO.Вставить("Контрагент", Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	// РасшифровкаПлатежа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчет.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт3);
		КонецЕсли;
	КонецЕсли;
	
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубконтоКт1 КАК СтатьяДоходов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПоступлениеНаРасчетныйСчет
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДоходов) Тогда
			ВыгрузитьПоСсылке(СтрокаРасшифровки.СтатьяДоходов, КомпонентыОбмена);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	#Область РасшифровкаПлатежа
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Контрагент = ДанныеИБ.СубконтоКт1;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|	СубконтоКт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|	Неопределено КАК ДанныеДокументаРасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма,
		|   Неопределено КАК Заказ
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
		
	Иначе
		
		Контрагент = ДанныеИБ.Контрагент;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|	ДоговорКонтрагента КАК Договор,
		|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	Сделка КАК ДанныеДокументаРасчетов,
		|   СуммаПлатежа КАК Сумма,
		|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|   СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС,
		|   СчетНаОплату КАК Заказ,
		|   ЕстьNULL(СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетовСКонтрагентом,
		|   ЕстьNULL(СчетУчетаРасчетовПоАвансам.Код, """") КАК СчетУчетаРасчетовПоАвансам
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРасчетов.Количество()>0 И 
		(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
		ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	// Сотрудник
	Если ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Сотрудник = ДанныеИБ.Контрагент;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		Для Каждого СтрокаВидаСубконто Из ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
	        Субконто    = ДанныеИБ["СубконтоКт" + СтрокаВидаСубконто.НомерСтроки];
	        Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	        	Сотрудник = Субконто;
	        	Прервать;
	        КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сотрудник", Сотрудник);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_СБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	
	ТекстЗапросаРасшифровкаПлатежа = 
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ЕстьNULL(РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетовСКонтрагентом,
	|	ЕстьNULL(РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код, """") КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
		
		// При перечислении рублей для приобретения валюты нужно, чтобы Курс, Кратность были равны единице,
		// СуммаПлатежа и СуммаВзаиморасчетов были равны и равнялись рублевой сумме.
		// При получении данных из объекта это не так.
		Для Каждого СтрокаРасшифровки Из ПолученныеДанные.РасшифровкаПлатежа Цикл
			СтрокаРасшифровки.КурсВзаиморасчетов = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаПлатежа;
		КонецЦикла;
		
	Иначе
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетов);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные.СчетУчетаРАсчетовСКонтрагентом = ПолученныеДанные.СчетБанк;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если НЕ (ДанныеИБ <> Неопределено И ДанныеИБ.ПеречислениеЗаработнойПлаты.Количество() > 0
		И ЗначениеЗаполнено(ДанныеИБ.ПеречислениеЗаработнойПлаты[0].Ведомость)) Тогда
		
		Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
			СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
		Иначе
			СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
		КонецЕсли;
		СтрокаТЧ.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
		
		Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
			
			СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВБанк");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
		
	Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
	
		СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВБанк");
		
	КонецЕсли;
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		//В документе банковский счет физ лица и контрагент-физлицо
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
		ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка 
		|ИЗ Справочник.Контрагенты
		|ГДЕ ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ДанныеИБ.Контрагент.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("Контрагент", Выборка.Ссылка);
			Если ЗначениеЗаполнено(ДанныеИБ.СчетКонтрагента) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка 
				|ИЗ Справочник.БанковскиеСчета
				|ГДЕ Владелец = &Ссылка
				|	И НомерСчета = &НомерСчета";
				Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
				Запрос.УстановитьПараметр("НомерСчета", ДанныеИБ.СчетКонтрагента.НомерСчета);
				ВыборкаСчет = Запрос.Выполнить().Выбрать();
				Если ВыборкаСчет.Следующий() Тогда
					ДанныеXDTO.Вставить("БанковскийСчет", ВыборкаСчет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Поле "Контрагент" в документе не заполнено
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	#КонецОбласти
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
					
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ДанныеВедомостиНаВыплатуЗарплаты(Строка.Ведомость);
			
			Для Каждого СтрокаФизическогоЛица Из ДанныеВедомостиНаВыплатуЗП.ФизическиеЛицаДляВыплаты Цикл
				
				Если СтрокаФизическогоЛица.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаРП.Депонент  = Ложь;
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
				НоваяСтрокаРП.Сотрудник = СтрокаФизическогоЛица.ФизическоеЛицо;
				НоваяСтрокаРП.Сумма     = СтрокаФизическогоЛица.Сумма;
					
			КонецЦикла;
			
		КонецЦикла;
	
	Иначе
		
		// Перечисление депонентов
		Если ДанныеИБ.ПеречислениеДепонентов.Количество() > 0 Тогда
			Для Каждого Строка Из ДанныеИБ.ПеречислениеДепонентов Цикл
				
				Если Строка.СуммаПлатежа = 0 Тогда
					Продолжить;
				КонецЕсли;
			
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаРП.Депонент = Истина;
				
				// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
			
			КонецЦикла;
		Иначе
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеXDTO.Вставить("Сотрудник", ДанныеИБ.Контрагент);
	КонецЕсли;
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.Депонент = Ложь;
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма             = ДанныеИБ.СуммаДокумента;
	Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		СтрокаРасшифровки.СчетУчетаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом, "Код");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("ОКАТО") И ЗначениеЗаполнено(ДанныеXDTO.ОКАТО) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КодОКТМО", СокрЛП(ДанныеXDTO.ОКАТО));
	КонецЕсли;
	
	ПоказательКБК = 0;
	Если ДанныеXDTO.Свойство("ПоказательКБК") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК) Тогда
		ПоказательКБК = ДанныеXDTO.ПоказательКБК;
	КонецЕсли;
	
	СтатусПлательщика = Неопределено;
	ДанныеXDTO.Свойство("СтатусСоставителя", СтатусПлательщика);
		
	ПолученныеДанные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ПоказательКБК, , СтатусПлательщика);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) И ЗначениеЗаполнено(ПолученныеДанные.Налог) Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(ПолученныеДанные.Налог, ПолученныеДанные.Дата);
	КонецЕсли;
	
	// Вид налогового обязательства по умолчанию.
	ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;   
	
	Если ПоказательКБК <> 0 Тогда
		ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(ПоказательКБК, ПолученныеДанные.Дата);
	ИначеЕсли ДанныеXDTO.Свойство("ПоказательТипа") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательТипа) Тогда
		Если ДанныеXDTO.ПоказательТипа = "ПЕ" Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПениСам;
		ИначеЕсли ДанныеXDTO.ПоказательТипа = "ПЦ" Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Проценты;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	
	ПериодПлатежа = '00010101';	
	Если ДанныеXDTO.Свойство("ПоказательПериода") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательПериода) Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ДанныеXDTO.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			ПериодПлатежа = НачалоМесяца(ДобавитьМесяц(ПолученныеДанные.Дата, -1));
		Иначе
			ПериодПлатежа = ОписаниеПериода.Дата;
		КонецЕсли;
		
	КонецЕсли;
	ПолученныеДанные.НалоговыйПериод = ПериодПлатежа;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ВидыПлатежейВГосБюджет", ПолученныеДанные.ВидНалоговогоОбязательства);
	
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов()
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("КодОКТМО")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.КодОКТМО) Тогда
		РегистрацияВНалоговомОрганеПоОКТМО = РегистрацияВНОПоКодуОКТМО(ПолученныеДанные.Организация, 
			ПолученныеДанные.ДополнительныеСвойства.КодОКТМО);
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеПоОКТМО) Тогда
			СоответствиеСубконто.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОрганеПоОКТМО);
		КонецЕсли;
			
	КонецЕсли;
	
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	// Контрагент.
	Контрагент = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	// Уточнение вида операции.
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
			//Прочее
			ВидПрочегоСписания = "ПрочееСписание";
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
					ВидПрочегоСписания = "ВнутренняяПередача";
			КонецЕсли;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			Если Не ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
				Или ТипЗнч(ДанныеИБ.СубконтоДт1) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ВидПрочегоСписания = "ПрочееСписание";
			КонецЕсли;
		Иначе
			ВидПрочегоСписания = "ПрочееСписание";
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
	КонецЕсли;
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	СтрокаРасшифровки.СчетУчетаРасчетов     = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВидОперацииДанныхИБ = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	Если ДанныеИБ <> Неопределено Тогда
		ВидОперацииДанныхИБ = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииДанныхИБ = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		// Счет учета расчетов с контрагентом.
		ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
		// Значения субконто.
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("БанковскиеСчета", ПолученныеДанные.СчетКонтрагента);
		СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
		СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
		
		ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
		
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Иначе
		// Если в информационной базе уже существует документ,
		// и его вид отличается от ПрочийРасход, то не нужно затирать его свойства, кроме базовых.
		// Это требуется из-за того, что в прочий расход часто на стороне корреспондента выгружаются
		// те документы, учет которых не автоматизирован.
		// В этом случае, загруженные данные затрут наш вид операции.
		
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, 
			"Номер, Дата, Организация, Ответственный, Комментарий, ПодразделениеОрганизации, СуммаДокумента, ДатаВходящегоДокумента, НомерВходящегоДокумента");
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	Иначе
		Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		СтатьяРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтрокаРасшифровки.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		СтрокаРасшифровки.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяРасходов) Тогда
		ВыгрузитьПоСсылке(СтрокаРасшифровки.СтатьяРасходов, КомпонентыОбмена);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетРасходов");
	
	ДокументыДвиженияДС_АналитикаЗатратИзРасшифровки(ПолученныеДанные, ДанныеXDTO, "СтатьяРасходов", "СубконтоДт");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено
		И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	ЗаписываемыйОбъект = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	УстановитьАналитикуСчетаВОбъекте(КомпонентыОбмена, ЗаписываемыйОбъект, ПолученныеДанные.ДополнительныеСвойства, ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом, "СубконтоДт");
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям
				И Не ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ВидРасчетовСКонтрагентом = "Прочее";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПокупателем";
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
		
		Если ДанныеXDTO.Свойство("БанковскийСчет") Тогда
			// Банковский счет заполнен в ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения
			// Однако владельцем данного счета является налоговая инспекция, а не налогоплательщик.
			// В качестве контрагента для этого вида операции передается налогоплательщик, поэтому
			// владелец счета и контрагент не будут совпадать. Это не верно, поэтому счет очищаем.
			ДанныеXDTO.БанковскийСчет = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		
		Контрагент = ДанныеИБ.СубконтоДт1;
		
		ТекстЗапросаРасшифровкаПлатежа = "ВЫБРАТЬ
		|	СубконтоДт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|	Неопределено КАК ДанныеДокументаРасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.СписаниеСРасчетногоСчета
		|ГДЕ Ссылка = &Ссылка";
		
	
	Иначе
		
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Контрагент = ДанныеИБ.Налогоплательщик;
		Иначе
			Контрагент = ДанныеИБ.Контрагент;
		КонецЕсли;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	РасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|			ТОГДА ""Аванс""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
		|			ТОГДА ""Долг""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
		|			ТОГДА ""КраткосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
		|			ТОГДА ""ДолгосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРасчетов.Количество()>0 И 
		(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
		ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
	
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		ИспользоватьСчетНаОплату     = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Заказ") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" 
				ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				Если СтруктураДанныхСтроки.Свойство("СпособПогашенияЗадолженности")
					И ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособПогашенияЗадолженности) Тогда
				    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				    	
				    	ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, Строка.ДокументРасчетов);
				    	
					КонецЕсли;
				Иначе
					СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
				КонецЕсли;
			КонецЕсли;
	
			Если ИспользоватьСчетНаОплату
				И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" Тогда
				// Заполнение счета на оплату.
				Если ЗначениеЗаполнено(Строка.Заказ) И Строка.Заказ.ТипЗначения = "ЗаказПоставщику" Тогда
					СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
						Строка.Заказ, "Документ_СчетПоставщика_Получение");
					СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
				КонецЕсли;
			КонецЕсли;
	
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
				
			ВидПлатежаПоКредитамЗаймам = ?(Найти(ВидРасчетовРасширенныйXDTO, "Проценты"),
				Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов,
				Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
			СтруктураДанныхСтроки.Вставить("ВидПлатежаПоКредитамЗаймам", ВидПлатежаПоКредитамЗаймам);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС";
		
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", СпособПогашенияЗадолженности, Сделка";
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		ВосстанавливаемыеПоля);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		// Сохраним расшифровку платежа для заполнения поля Сделка в ПослеЗагрузкиВсехДанных
		ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа",  ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		ДанныеXDTO.ВидРасчетов = "Депоненты";
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	ДепонированиеЗарплаты = Новый ТаблицаЗначений;
	ДепонированиеЗарплаты.Колонки.Добавить("ВедомостьНаВыплату");
	ДепонированиеЗарплаты.Колонки.Добавить("Сумма");
	
	Если ДанныеИБ.ПеречислениеДепонентов.Количество() <> 0
				И ЗначениеЗаполнено(ДанныеИБ.ПеречислениеДепонентов[0].Ведомость) Тогда
		НоваяСтрокаДЗ = ДепонированиеЗарплаты.Добавить();
		НоваяСтрокаДЗ.ВедомостьНаВыплату = ДанныеИБ.ПеречислениеДепонентов[0].Ведомость;
		Если ДанныеИБ.ПеречислениеДепонентов.Количество() = 1 Тогда
			НоваяСтрокаДЗ.Сумма = ДанныеИБ.СуммаДокумента;
		Иначе
			НоваяСтрокаДЗ.Сумма = ДанныеИБ.ПеречислениеДепонентов[0].СуммаПлатежа;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ДепонированиеЗарплаты", ДепонированиеЗарплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Казначейство_Касса
Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка    = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка            = Ложь;
	ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка       = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка       = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			//Данные о валюте конвертации можно взять только из договора
			//Если этих данных нет, придется выгружать документ как ПрочееПоступление
			Если ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
				ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			КонецЕсли;
		Иначе
		
			ДанныеСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом);
				
			Если ДанныеСчетаУчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
				ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			КонецЕсли;
	
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ПКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка Тогда
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам 
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
		
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам, расчетам по кредитам (займам)
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		    ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
			Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
				ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
	        КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		// Расчеты с сотрудниками - из операций по выплате депонентов и заработной платы, расчетов с подотчетниками
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	
		// Перемещение на банковский счет - из операций инкассации и взноса наличными в банк
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
	
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасходыНаПродажу
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
			
			// 20.xx, 23, 25, 26, 44.xx, 91.02
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			
			// 57.02, 57.22
			ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Истина;
		Иначе
			ДанныеСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом);
				
			Если ДанныеСчетаУчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
				И ДанныеСчетаУчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
				ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_РКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	КорСчет = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	Иначе
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	//Корректность и заполненность СубконтоКт2 проверяется в ПОД
	ВалютаКонвертации = ДанныеИБ.СубконтоКт2.ВалютаВзаиморасчетов;
	СтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
	СтрокаРП.Договор = ДанныеИБ.СубконтоКт2;
	
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	СтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		СтрокаРП.КурсКонвертации, СтрокаРП.КратностьКонвертации, ВалютаКонвертации);
	
	Если АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	Иначе
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
		СтрокаРП.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	КонецЕсли;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
			Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт2",Договор);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	Иначе
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.СубконтоКт1);
	СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.СубконтоКт2);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0") Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации.
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0")
		И ДанныеXDTO.ВидОперации.Значение = "Инкассация" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// СчетУчетаРасчетовСКонтрагентом.
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		СчетУчетаРасчетовСКонтрагентом = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
								ПланыСчетов.Хозрасчетный.ПереводыВПути,
								ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
		
		ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
	
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Контрагент = ДанныеИБ.Контрагент;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			 Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрока.СтатьяДоходов = ДанныеИБ.СубконтоКт1;
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ВыгрузитьПоСсылке(ДанныеИБ.СубконтоКт1, КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетДоходов");
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
	
		ПерваяСтрока = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрока.СтатьяДоходов) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт1", Новый Структура("Значение, ИмяПКО", ПерваяСтрока.СтатьяДоходов, "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы"));
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "КредитыИЗаймы");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "Прочее");
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если ДанныеXDTO.ВидРасчетов = "Прочее" Тогда
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПриходныйКассовыйОрдер.СубконтоКт1 КАК СубконтоКт1,
				|	ПриходныйКассовыйОрдер.СубконтоКт2 КАК СубконтоКт2,
				|	ПриходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
				|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.НеПогашать) КАК СпособПогашенияЗадолженности,
				|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
				|   Неопределено КАК Заказ
				|ИЗ
				|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
				|ГДЕ
				|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		ДанныеПлатежа = ТаблицаРасчетов[0];
		Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоКт1) Тогда
			Если ТипЗнч(ДанныеПлатежа.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДанныеXDTO.Вставить("Контрагент", ДанныеПлатежа.СубконтоКт1);
				Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоКт2)
					И ТипЗнч(ДанныеПлатежа.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					ТаблицаРасчетов.Колонки.СубконтоКт2.Имя = "Договор";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
		
		//Расшифровка платежа
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
		|   ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК Заказ
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
		Если ТаблицаРасчетов.Количество() > 0 
			И (ДанныеXDTO.ВидРасчетов = "СПокупателем" 
			ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
		КонецЕсли;
	КонецЕсли;
	ТаблицаРасчетов.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаРасчетов.ЗаполнитьЗначения(ДанныеИБ.ВалютаДокумента, "ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
	
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		ИспользоватьСчетНаОплату     = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Заказ") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" 
				ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата, Истина);
			
				Если СтруктураДанныхСтроки.Свойство("СпособПогашенияЗадолженности")
					И ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособПогашенияЗадолженности) Тогда
				    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
						ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, Строка.ДокументРасчетов);
					КонецЕсли;
				Иначе
					СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				// Заполнение счета на оплату.
				Если ИспользоватьСчетНаОплату
					И ЗначениеЗаполнено(Строка.Заказ) 
					И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
					СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
						Строка.Заказ, "Документ_ЗаказКлиента_Получение");
					СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			ИначеЕсли ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовПоАвансам) Тогда
				СчетУчетаАвансСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовПоАвансам);
				Если ЗначениеЗаполнено(СчетУчетаАвансСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовПоАвансам",СчетУчетаАвансСсылка);
				КонецЕсли;
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ПолученныеДанные.Видоперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		// СчетУчетаРасчетов и СтатьяДДС передаются в ТЧ, поэтому ЗаполнитьСвойстваШапкиОбъекта их не заполнит у существующего объекта
		ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПолученныеДанные.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		Если ДанныеИБ <> Неопределено Тогда
		 	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
				ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтатьяДвиженияДенежныхСредств) Тогда
				ДанныеИБ.СтатьяДвиженияДенежныхСредств = ПолученныеДанные.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
			
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
		СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
		
		ПолученныеДанные.Контрагент = Неопределено;
		ПолученныеДанные.РасшифровкаПлатежа.Очистить();
		
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", СпособПогашенияЗадолженности, Сделка";
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		ВосстанавливаемыеПоля);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		// Сохраним расшифровку платежа для заполнения поля Сделка в ПослеЗагрузкиВсехДанных
		ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа",  ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа[0];
	КонецЕсли;
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурсаВалюты.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
	СтрокаРасшифровка.СтавкаНДС	= Перечисления.СтавкиНДС.БезНДС;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СтатьяДвиженияДенежныхСредств, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	КорСчет = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	Иначе
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
				И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")
				И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) Тогда
		
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ДанныеИБ.Контрагент;
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрокаРП.Депонент = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			
			ДанныеВедомостиНаВыплатуЗП = Новый Структура("Номер,Дата");
			Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаЗаработнойПлаты[0].Ведомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаДепонентов.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаДепонентов[0].Ведомость, "Дата,Номер");
			КонецЕсли;
				
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		КонецЕсли;
	Иначе // выплата по ведомостям
		
		РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
		Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
					
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ДанныеВедомостиНаВыплатуЗарплаты(Строка.Ведомость);
			
			Для Каждого СтрокаФизическогоЛица Из ДанныеВедомостиНаВыплатуЗП.ФизическиеЛицаДляВыплаты Цикл
				
				Если СтрокаФизическогоЛица.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаРП.Депонент  = Ложь;
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
				НоваяСтрокаРП.Сотрудник = СтрокаФизическогоЛица.ФизическоеЛицо;
				НоваяСтрокаРП.Сумма     = СтрокаФизическогоЛица.Сумма;
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	
	Если ДанныеXDTO.РасшифровкаПлатежа[0].Депонент = Истина Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	ИначеЕсли ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаКВыплате = ПолученныеДанные.СуммаДокумента;
		
	Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
	
		СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВКассу");
		
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВал");
	
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
		ВалютаКонвертации = ДанныеИБ.СубконтоДт2.ВалютаВзаиморасчетов;
		// КурсЦБНаДатуКонвертации
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
		НоваяСтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
		НоваяСтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
		НоваяСтрокаРП.СуммаВал = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДанныеИБ.СуммаДокумента, ДанныеИБ.ВалютаДокумента, ВалютаКонвертации, ДанныеИБ.Дата);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		Если ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
			Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт2", Договор);
		КонецЕсли;
		
		МассивСтрокРасшифровкаПлатежа = Новый Массив;
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	Иначе
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетов);
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
			Строка.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЦикла;
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.СубконтоДт1);
	СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.СубконтоДт2);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
	
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентом");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	КонецЕсли;
	
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	// ВидОперации
	ВидОперации = "Инкассация";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		ВидОперации = "Инкассация";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВидОперации = "ВзносНаличными";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// БанковскийСчет
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетОрганизации) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СчетОрганизации;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
						ПланыСчетов.Хозрасчетный.РасчетныеСчета,
						ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	Иначе
		//Счет инкассации
		МассивСчетовОтбора = Новый Массив;
		МассивСчетовОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
		
		МассивСчетовИсключений = Новый Массив;
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивСчетовОтбора);
		Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
		Запрос.УстановитьПараметр("Валютный", ПолученныеДанные.СчетКасса.Валютный);
		Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", Истина);
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Код КАК Код,
		|	Хозрасчетный.Наименование КАК Наименование
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
		|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
		|	И (НЕ &ОтбиратьПоПризнакуВалютный
		|			ИЛИ Хозрасчетный.Валютный = &Валютный)
		|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = Результат.Счет;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Контрагент = Неопределено;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	// Значения субконто.
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрокаРП.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
		
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			ВыгрузитьПоСсылке(ДанныеИБ.СубконтоДт1, КомпонентыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);     
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетРасходов");
	
	ДокументыДвиженияДС_АналитикаЗатратИзРасшифровки(ПолученныеДанные, ДанныеXDTO, "СтатьяРасходов", "СубконтоДт");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ВидОперацииДанныхИБ = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	Если ДанныеИБ <> Неопределено Тогда
		ВидОперацииДанныхИБ = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииДанныхИБ = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		// Счет учета расчетов с контрагентом.
		ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		ЗаписываемыйОбъект = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
		УстановитьАналитикуСчетаВОбъекте(КомпонентыОбмена, ЗаписываемыйОбъект, ПолученныеДанные.ДополнительныеСвойства, ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом, "СубконтоДт");
		
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Иначе
		// Если в информационной базе уже существует документ,
		// и его вид отличается от ПрочийРасход, то не нужно затирать его свойства, кроме базовых.
		// Это требуется из-за того, что в прочий расход часто на стороне корреспондента выгружаются
		// те документы, учет которых не автоматизирован.
		// В этом случае, загруженные данные затрут наш вид операции.
		
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, 
			"Номер, Дата, Организация, Ответственный, ПоДокументу, Выдать, Комментарий, Основание, ПодразделениеОрганизации, Приложение, СуммаДокумента");
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
			ВидРасчетов = "Прочее";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
		ВидРасчетов = "КредитыИЗаймы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВидРасчетов = "Прочее" Тогда
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт1);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	РасходныйКассовыйОрдер.СчетКасса.Валютный КАК ВалютныйСчет,
				|	РасходныйКассовыйОрдер.СубконтоДт1 КАК СубконтоДт1,
				|	РасходныйКассовыйОрдер.СубконтоДт2 КАК СубконтоДт2,
				|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
				|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаВзаиморасчетов,
				|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
				|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
				|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
				|	1 КАК КурсВзаиморасчетов,
				|	1 КАК КратностьВзаиморасчетов
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ПО РасходныйКассовыйОрдер.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
				|ГДЕ
				|	РасходныйКассовыйОрдер.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		ДанныеПлатежа = ТаблицаРасчетов[0];
		Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоДт1) Тогда
			Если ЗначениеЗаполнено(ДанныеПлатежа.СубконтоДт2)
				И ТипЗнч(ДанныеПлатежа.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТаблицаРасчетов.Колонки.СубконтоДт2.Имя = "Договор";
			КонецЕсли;
			
			Если ДанныеПлатежа.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеПлатежа.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
				ДанныеПлатежа.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
				ДанныеПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СпособПогашенияЗадолженности,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
			|			ТОГДА ""Аванс""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
			|			ТОГДА ""Долг""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
			|			ТОГДА ""КраткосрочныеКредиты""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
			|			ТОГДА ""КраткосрочныеЗаймы""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
			|			ТОГДА ""ДолгосрочныеКредиты""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
			|			ТОГДА ""ДолгосрочныеЗаймы""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
			|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
			|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
			|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК ВидРасчетовРасширенный
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
			|ГДЕ
			|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРасчетов.Количество() > 0 И
			(ДанныеXDTO.ВидРасчетов = "СПокупателем" 
			ИЛИ ДанныеXDTO.ВидРасчетов = "СПоставщиком") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		ИспользоватьСчетНаОплату     = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Заказ") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = БухгалтерскийСчетПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			КонецЕсли;
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" 
				ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата, Ложь);
				
				Если СтруктураДанныхСтроки.Свойство("СпособПогашенияЗадолженности")
					И ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособПогашенияЗадолженности) Тогда
				    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
						ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, Строка.ДокументРасчетов);
					КонецЕсли;
				Иначе
					СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
				КонецЕсли;
					
			КонецЕсли;
			
			Если ИспользоватьСчетНаОплату
				И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" Тогда
				// Заполнение счета на оплату.
				Если ЗначениеЗаполнено(Строка.Заказ) И Строка.Заказ.ТипЗначения = "ЗаказПоставщику" Тогда
					СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
						Строка.Заказ, "Документ_СчетПоставщика_Получение");
					СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
				КонецЕсли;
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
				
			ВидПлатежаПоКредитамЗаймам = ?(Найти(ВидРасчетовРасширенныйXDTO, "Проценты"),
				Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов,
				Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
			СтруктураДанныхСтроки.Вставить("ВидПлатежаПоКредитамЗаймам", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ПолученныеДанные.Видоперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		И ПолученныеДанные.РасшифровкаПлатежа.Количество() >0 Тогда
		
		// СчетУчетаРасчетов и СтатьяДДС передаются в ТЧ, поэтому ЗаполнитьСвойстваШапкиОбъекта их не заполнит у существующего объекта
		ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ПолученныеДанные.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		Если ДанныеИБ <> Неопределено Тогда
		 	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
				ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтатьяДвиженияДенежныхСредств) Тогда
				ДанныеИБ.СтатьяДвиженияДенежныхСредств = ПолученныеДанные.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
		СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
		
		ПолученныеДанные.Контрагент = Неопределено;
		ПолученныеДанные.РасшифровкаПлатежа.Очистить();
		
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", СпособПогашенияЗадолженности, Сделка";
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		ВосстанавливаемыеПоля);
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		// Сохраним расшифровку платежа для заполнения поля Сделка в ПослеЗагрузкиВсехДанных
		ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа",  ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ДанныеXDTO.ВидРасчетов = "Депоненты";
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	ДепонированиеЗарплаты = Новый ТаблицаЗначений;
	ДепонированиеЗарплаты.Колонки.Добавить("ВедомостьНаВыплату");
	ДепонированиеЗарплаты.Колонки.Добавить("Сумма");
	
	Если ДанныеИБ.ВыплатаДепонентов.Количество() <> 0
				И ЗначениеЗаполнено(ДанныеИБ.ВыплатаДепонентов[0].Ведомость) Тогда
		НоваяСтрокаДЗ = ДепонированиеЗарплаты.Добавить();
		Если ДанныеИБ.ВыплатаДепонентов.Количество() = 1 Тогда
			НоваяСтрокаДЗ.Сумма = ДанныеИБ.СуммаДокумента;
		Иначе
			НоваяСтрокаДЗ.Сумма = ДанныеИБ.ВыплатаДепонентов[0].СуммаКВыплате;
		КонецЕсли;
		НоваяСтрокаДЗ.ВедомостьНаВыплату = ДанныеИБ.ВыплатаДепонентов[0].Ведомость;
		
		ДанныеXDTO.Вставить("ДепонированиеЗарплаты", ДепонированиеЗарплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента)
			ИЛИ ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
		КонецЕсли;
	Иначе
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентом);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Казначейство_Операция_по_платежной_карте
Процедура ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		// Оплаты платежной картой по розничной выручке не отправляем.
		ИспользованиеПКО.Документ_ОперацияПоПлатежнойКарте_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	ТекстЗапросаРасшифровкаПлатежа =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Сделка КАК ДанныеДокументаРасчетов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату КАК Заказ
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРасчетов.Количество()>0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаРасчетов, "ОчищатьНеНайденные");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасчетов);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		// Расшифровка платежа.
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		ИспользоватьСчетНаОплату     = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("Заказ") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("СпособПогашенияЗадолженности")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособПогашенияЗадолженности) Тогда
			    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
					ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, Строка.ДокументРасчетов);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
			КонецЕсли;
			
			// Заполнение счета на оплату только для вида операции "Оплата".
			Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя
				И ИспользоватьСчетНаОплату
				И ЗначениеЗаполнено(Строка.Заказ) 
				И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
				СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
					Строка.Заказ, "Документ_ЗаказКлиента_Получение");
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
		
	ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.Эквайер);
		
	ДанныеДляЗаписиВИБ.ДоговорЭквайринга = ДоговорЭквайринга;
		
	// ВидОплаты.
	ДанныеДляЗаписиВИБ.ВидОплаты = ВидОплатыОрганизации(
		КомпонентыОбмена,
		ПолученныеДанные.Организация,
		Перечисления.ТипыОплат.ПлатежнаяКарта,
		ПолученныеДанные.Эквайер,
		ДоговорЭквайринга);
	
	// СчетКасса.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетКасса) Тогда
		ДанныеДляЗаписиВИБ.СчетКасса = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		// Заменяем свойства, которые получили из XDTO.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		// Восстанавливаем "затертые" данные.
	
		// РасшифровкаПлатежа.
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	
		ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
			ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", Сделка, СтавкаНДС, СуммаНДС, СпособПогашенияЗадолженности, СчетНаОплату";
		КонецЕсли;
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			ВосстанавливаемыеПоля);
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
			// Сохраним расшифровку платежа для заполнения поля Сделка в ПослеЗагрузкиВсехДанных
			ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа",  ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа);
		КонецЕсли;
	
		ПолученныеДанные = Неопределено;
	
	КонецЕсли;
	
	// Заполнение счетов расчетов.
	Для Каждого СтрокаТЧ Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)
			И (Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам)) Тогда
			
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				ДанныеДляЗаписиВИБ.Организация, ДанныеДляЗаписиВИБ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда		
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Возврат_от_покупателя
Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// Заполнение данных шапки.
	
	// Для всех документов на возврат с 2019 года устанавливаем признак, что покупателю выставляется корректировочный счет-фактура.
	ПолученныеДанные.ПокупателюВыставляетсяКорректировочныйСчетФактура = ПолученныеДанные.Дата >= Дата(2019,1,1) 
		И Не ПолученныеДанные.ПокупателемВыставляетсяСчетФактураНаВозврат;
	
	ПолученныеДанные.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	ПолученныеДанные.ОтразитьВКнигеПокупок = ПолученныеДанные.ПокупателемВыставляетсяСчетФактураНаВозврат;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Документ реализации
	ДокументРеализации = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ДокументРеализации = ДанныеXDTO.ДокументРеализации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "ОтчетОРозничныхПродажах") > 0 Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"Сделка", Новый Структура("Значение,ИмяПКО", ДокументРеализации, ИмяПКО));
	КонецЕсли;
	
	СпособУчетаНДС = СпособУчетаНДСПоНалогообложению(КомпонентыОбмена, ДанныеXDTO);
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Себестоимость", "Себестоимость");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	            
	            Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДС);
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("ПереданныеСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,ПереданныеСчетУчета,СчетДоходов,СчетРасходов,Субконто,СчетУчетаНДСПоРеализации,ОтражениеВУСН,КиЗ_ГИСМ");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровОтПокупателя
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратОтКомиссионера";
	Иначе 
		ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДокументРеализации = ДанныеИБ.Сделка;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации, "ДокументОтгрузки");
		КонецЕсли;
		
		ИмяПКО_ДокументРеализации = ИмяПКОПоТипуЗначенияДокумента(ДокументРеализации);
		Если ЗначениеЗаполнено(ИмяПКО_ДокументРеализации) Тогда
			ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
			ИнструкцияКонвертации.Значение = ДокументРеализации;
			ИнструкцияКонвертации.ИмяПКО = ИмяПКО_ДокументРеализации;
			ДанныеXDTO.Вставить("ДокументРеализации", ИнструкцияКонвертации);
		КонецЕсли;
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	""ОблагаетсяНДС"" КАК ВозвратПодДеятельность
	|ИЗ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	"""",
	|	null,
	|	""НеОблагаетсяНДС""
	|ИЗ Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Возврат_поставщику
Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// Для всех документов на возврат с 2019 года устанавливаем признак, что поставщику выставляется корректировочный счет-фактура.
	ПолученныеДанные.КорректировочныйСчетФактураПолученОтПоставщика = ПолученныеДанные.Дата >= Дата(2019,1,1);
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДокументПоступления", "Сделка");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = СокрЛП(Строка.ТипЗапасов.Значение);
			КонецЕсли;
			
			Если ТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
				КонецЕсли;
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;
	
	#Область Мержевание
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС,СчетРасчетов,КодТНВЭД");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровПоставщику
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ВозвратКомитенту";
	Иначе 
		ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаВозвратаПоступления(КомпонентыОбмена, ДанныеИБ));
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	ВЫРАЗИТЬ(Сделка КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	null
	|ИЗ Документ.ВозвратТоваровПоставщику.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Закупки
Процедура ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка = Ложь;
	
	// Выгружаем документ только в том случае, если можем конвертировать ДокументПоступления.
	// Этот реквизит обязательный и при незаполненном реквизите будет ошибка.
	ИмяПКО_ДокументПоступления = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ДокументПоступления);
	Если ЗначениеЗаполнено(ИмяПКО_ДокументПоступления) Тогда
		ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Поиск данных для ПКО
	
	// ПТиУ_ПоступлениеДопРасходов и ПТиУ_ПоступлениеТоваровУслуг 
	ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг             = Ложь;
	ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов              = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику        = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Ложь;
	ИспользованиеПКО.ПТиУРасх_СписаниеТоваров                 = Ложь;
	ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров            = Ложь;
	
	Если ДанныеXDTO.Свойство("Услуги") Тогда
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			Если Услуги_Строка.ЭтоДопРасходы = Неопределено Тогда
				Услуги_Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;	
		
			Если Услуги_Строка.ЭтоДопРасходы Тогда
				ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов = Истина;
			Иначе
				ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов
		И (Не ДанныеXDTO.Свойство("РасшифровкаДопРасходов") Или ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0) Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов  = Ложь;
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары") Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
	КонецЕсли;
	
	// ПТиУРасх_ВозвратТоваровПоставщику, ПТиУРасх_ВозвратТоваровСтороннейКомпании и ПТиУРасх_СписаниеТоваров
	Если ДанныеXDTO.Свойство("Недостачи") Тогда
		Для Каждого Недостачи_Строка Из ДанныеXDTO.Недостачи Цикл
			Если Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетСтороннейКомпании" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Истина;
			Иначе // НаПрочиеРасходы и все остальное
				ИспользованиеПКО.ПТиУРасх_СписаниеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ПТиУРасх_ОприходованиеТоваров, ПТиУРасх_ВозвратТоваровПоставщику
	Если ДанныеXDTO.Свойство("Излишки") Тогда
		Для Каждого Излишки_Строка ИЗ ДанныеXDTO.Излишки Цикл
			Если Излишки_Строка.ВариантОтражения.Значение = "ВПользуПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Излишки_Строка.ВариантОтражения.Значение = "НаПрочиеДоходы" Тогда
				ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства 
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков
		И ДанныеИБ.Проведен И ДанныеИБ.Склад.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_СчетПоставщика_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_ТарифицируемаяОперация_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ТарифицируемаяОперация_Получение = Ложь;
		ИспользованиеПКО.Документ_ОперацияСБилетом_Получение       = Ложь;
		
		// Если в передаваемый объект содержит данные конкретного расширения ED,
		// указывающего на информацию о командировках,
		// то будем применять особое правило обработки данных.
		МанифестРасширения = РасширениеEnterpriseData.НовыйМанифестРасширения();
		РасширениеEnterpriseDataКомандировки.ЗаполнитьМанифестРасширения(МанифестРасширения);
		РасширениеED = РасширениеEnterpriseData.ДанныеРасширения(ДанныеXDTO, МанифестРасширения, КомпонентыОбмена);
		
		Если РасширениеED = Неопределено Тогда
			ИспользованиеПКО.Документ_ТарифицируемаяОперация_Получение = Истина;
		Иначе
			ИспользованиеПКО.Документ_ОперацияСБилетом_Получение = Истина;
			// Полученные выше десериализованные данные расширения понадобятся в ПКО.
			// Для того, чтобы не десериализовывать их повторно,
			// заменим в ДанныеXDTO сериализованные данные расширения на десериализованные.
			РасширениеEnterpriseData.УстановитьДесериализованныеДанныеРасширения(ДанныеXDTO, РасширениеED);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ПризнаватьЗачитыватьАванс = Истина;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументПоступления = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументПоступления") Тогда
		ДокументПоступления = ДанныеXDTO.ДокументПоступления;
	КонецЕсли;
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
		ТипДокументаПоступления = ДокументПоступления.ТипЗначения;
		Если Найти(ТипДокументаПоступления, "ТаможеннаяДекларация") > 0 Тогда
			ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаПоступления, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "РеализацияТоваровУслуг") > 0 Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли Найти(ТипДокументаПоступления, "СчетФактураПолученный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураПолученный_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаПоступления, "КорректировкаПоступленияТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаПоступления";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ДокументПоступления", Новый Структура("Значение,ИмяПКО", ДокументПоступления, ИмяПКО));
		
	КонецЕсли;
	
	ИсправляемыйДокументПоступления = Неопределено;
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументПоступления") Тогда
		ИсправляемыйДокументПоступления = ДанныеXDTO.ИсправляемыйДокументПоступления;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		
		ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
		ТипДокументаПоступления = ИсправляемыйДокументПоступления.ТипЗначения;
		Если Найти(ТипДокументаПоступления, "ТаможеннаяДекларация") > 0 Тогда
			ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаПоступления, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "РеализацияТоваровУслуг") > 0 Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли Найти(ТипДокументаПоступления, "СчетФактураПолученный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураПолученный_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаПоступления, "КорректировкаПоступленияТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаПоступления";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ИсправляемыйДокументПоступления", Новый Структура("Значение,ИмяПКО", ИсправляемыйДокументПоступления, ИмяПКО));
		
	КонецЕсли;
	
	
	ПолученныеДанные.КорректироватьБУиНУ = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки", "КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения", "ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки", "ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения", "СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки", "СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения", "СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСДоКорректировки", "СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеПоступления");
		
	МассивСтрокТовары = Новый Массив;
	МассивСтрокУслуги = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("СтранаПроисхожденияДоИзменения", "СтранаПроисхожденияДоИзменения");
	
		Для Каждого Строка ИЗ ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТДДоИзменения) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТДДоИзменения", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТДДоИзменения));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		// Корректируем соответствие
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
		Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			ПравилаЗаполнения.Удалить("СтранаПроисхождения");
			ПравилаЗаполнения.Удалить("СтранаПроисхожденияДоИзменения");
		КонецЕсли;
	
		Для Каждого Строка ИЗ ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);					
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки
		И ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		// Так как в формате нет вида операции ИсправлениеСобственнойОшибки, то сохраняем то, что было в ДанныеИБ.
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("НомерГТДДоИзменения");
	
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("СтранаПроисхожденияДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеПоступления");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета, СчетУчетаНДС, ОтражениеВУСН,СчетРасчетов,СпособУчетаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СодержаниеДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеПоступления");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетЗатрат, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, СчетУчетаНДС, ОтражениеВУСН, СпособУчетаНДС");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаПоступления(КомпонентыОбмена, ДанныеИБ));
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		ДанныеXDTO.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ВидОперации);
	КонецЕсли;
	
	ИмяПКО_ДокументПоступления = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ДокументПоступления);
	Если ЗначениеЗаполнено(ИмяПКО_ДокументПоступления) Тогда
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = ДанныеИБ.ДокументПоступления;
		ИнструкцияКонвертации.ИмяПКО = ИмяПКО_ДокументПоступления;
		ДанныеXDTO.Вставить("ДокументПоступления", ИнструкцияКонвертации);
	КонецЕсли;
	
	ИмяПКО_ИсправляемыйДокументПоступления = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ИсправляемыйДокументПоступления);
	Если ЗначениеЗаполнено(ИмяПКО_ИсправляемыйДокументПоступления) Тогда
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = ДанныеИБ.ИсправляемыйДокументПоступления;
		ИнструкцияКонвертации.ИмяПКО = ИмяПКО_ИсправляемыйДокументПоступления;
		ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", ИнструкцияКонвертации);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.Количество КАК Количество,
	|	КорректировкаПоступленияТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	КорректировкаПоступленияТовары.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	КорректировкаПоступленияТовары.Цена КАК Цена,
	|	КорректировкаПоступленияТовары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|	КорректировкаПоступленияТовары.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	КорректировкаПоступленияТовары.Сумма КАК Сумма,
	|	КорректировкаПоступленияТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаДоИзменения КАК СуммаДоИзменения,
	|	КорректировкаПоступленияТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.НомерГТД.Код КАК НомерГТД,
	|	КорректировкаПоступленияТовары.НомерГТДДоИзменения.Код КАК НомерГТДДоИзменения,
	|	КорректировкаПоступленияТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	КорректировкаПоступленияТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
	|	КорректировкаПоступленияТовары.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПоступленияУслуги.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияУслуги.Содержание КАК Содержание,
	|	КорректировкаПоступленияУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
	|	КорректировкаПоступленияУслуги.Количество КАК Количество,
	|	КорректировкаПоступленияУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	КорректировкаПоступленияУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	КорректировкаПоступленияУслуги.Цена КАК Цена,
	|	КорректировкаПоступленияУслуги.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|	КорректировкаПоступленияУслуги.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаДоИзменения КАК СуммаДоИзменения,
	|	КорректировкаПоступленияУслуги.Сумма КАК Сумма,
	|	КорректировкаПоступленияУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаНДС КАК СуммаНДС,
	|	КорректировкаПоступленияУслуги.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4, "СтавкаНДС");
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4, "СтавкаНДСДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары, "ДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары, "ДоКорректировки");
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4, "СтавкаНДС");
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4, "СтавкаНДСДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги, "ДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги, "ДоКорректировки");
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	РасширениеEnterpriseDataКомандировки.ПКО_Документ_ОперацияСБилетом_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_ОперацияСБилетом_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	//ДанныеВзаиморасчетов
	
	ДанныеВзаиморасчетов = ДанныеВзаиморасчетовПоДоговору(ДанныеИБ.ДоговорКонтрагента);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеВзаиморасчетов.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаПоступления(КомпонентыОбмена, ДанныеИБ));
	
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Содержание КАК Содержание,
	|	1 КАК Количество,
	|	0 КАК Цена,
	|	ПоступлениеДопРасходов.Сумма КАК Сумма,
	|	ПоступлениеДопРасходов.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеДопРасходов.СуммаНДС КАК СуммаНДС,
	|	ИСТИНА КАК ЭтоДопРасходы
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументАванса КАК ДанныеДокументаРасчетов,
	|	СуммаЗачета КАК Сумма
	|ИЗ Документ.ПоступлениеДопРасходов.ЗачетАвансов
	|ГДЕ Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Отказ = Ложь;
	ПараметрыПроведения = Документы.ПоступлениеДопРасходов.ПодготовитьПараметрыПроведения(ДанныеИБ.Ссылка, Отказ);
	ДопРасходыТаблица = Документы.ПоступлениеДопРасходов.РаспределениеСуммыДопРасходов(
		ПараметрыПроведения.ДопРасходыРеквизиты,
		ПараметрыПроведения.ДопРасходыТаблица);
		
	РасшифровкаДопРасходов = Новый ТаблицаЗначений;
	РасшифровкаДопРасходов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РасшифровкаДопРасходов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	РасшифровкаДопРасходов.Колонки.Добавить("СтоимостьТоваров", Новый ОписаниеТипов("Число"));
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления", Новый ОписаниеТипов("Структура"));
	РасшифровкаДопРасходов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	РасшифровкаДопРасходов.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	СуммаДопРасходов = 0;
	СуммаНДСДопРасходов = 0;
	
	Для Каждого СтрокаДопРасходов Из ДопРасходыТаблица Цикл
		
		// В ДопРасходыТаблица СуммаВзаиморасчетов всегда с НДС.
		// Поэтому сумму нужно скорректировать в зависимости от флага СуммаВключаетНДС.
		СуммаДопРасходов = СуммаДопРасходов + ?(ДанныеИБ.СуммаВключаетНДС, СтрокаДопРасходов.СуммаВзаиморасчетов,
			СтрокаДопРасходов.СуммаВзаиморасчетов - СтрокаДопРасходов.СуммаНДСВзаиморасчетов);
		СуммаНДСДопРасходов = СуммаНДСДопРасходов + СтрокаДопРасходов.СуммаНДСВзаиморасчетов;
	
		Если Не ЗначениеЗаполнено(СтрокаДопРасходов.ДокументПартии)	Тогда
			Продолжить;
		КонецЕсли;
		
		ПКО_Документа = ИмяПКОПоТипуЗначенияДокумента(СтрокаДопРасходов.ДокументПартии);
		Если ПКО_Документа <> "Документ_АвансовыйОтчет_Отправка"
			И ПКО_Документа <> "Документ_ПоступлениеТоваровУслуг_Отправка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасшифровки = РасшифровкаДопРасходов.Добавить();
		СтрокаРасшифровки.Номенклатура = СтрокаДопРасходов.Номенклатура;
		СтрокаРасшифровки.Количество = СтрокаДопРасходов.Количество;
		СтрокаРасшифровки.СтоимостьТоваров = СтрокаДопРасходов.СуммаТовара;
	
		Инструкция = Новый Структура("Значение, ИмяПКО");
		Инструкция.Значение = СтрокаДопРасходов.ДокументПартии;
		Инструкция.ИмяПКО = ПКО_Документа;
		
		СтрокаРасшифровки.ДокументПоступления = Инструкция;
		СтрокаРасшифровки.Сумма = СтрокаДопРасходов.СуммаВзаиморасчетов;
		СтрокаРасшифровки.СуммаНДС = СтрокаДопРасходов.СуммаНДСВзаиморасчетов;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
	
	ТаблицаУслуги = РезультатЗапроса[0].Выгрузить();
	ТаблицаУслуги.ЗаполнитьЗначения(СуммаДопРасходов, "Сумма");
	ТаблицаУслуги.ЗаполнитьЗначения(СуммаНДСДопРасходов, "СуммаНДС");
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	ТаблицаАвансов = РезультатЗапроса[1].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//ДанныеВзаиморасчетов
	ДанныеВзаиморасчетов = ДанныеВзаиморасчетовПоДоговору(ДанныеИБ.ДоговорКонтрагента);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеВзаиморасчетов.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия И
		ДанныеВзаиморасчетов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ЭтоПоступлениеТоваровПоИмпорту(ДанныеИБ) Тогда
		ВидОперации = "ЗакупкаПоИмпорту";
	Иначе
		ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СчетУчета = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.КоличествоПоДокументу, ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.ЦенаПоДокументу, ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.СуммаПоДокументу, ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.СуммаНДСПоДокументу, ПоступлениеТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.НомерГТДПоДокументу.Код, ПоступлениеТоваровУслугТовары.НомерГТД.Код) КАК НомерГТД,
	|	ЕСТЬNULL(АктОРасхожденияхТовары.СтранаПроисхожденияПоДокументу, ПоступлениеТоваровУслугТовары.СтранаПроисхождения) КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях КАК АктОРасхождениях
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = АктОРасхождениях.ДокументПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхождениях.Товары КАК АктОРасхожденияхТовары
	|		ПО (АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка)
	|			И ПоступлениеТоваровУслугТовары.ИдентификаторСтроки = АктОРасхожденияхТовары.ИдентификаторСтроки
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|	И ПоступлениеТоваровУслугВозвратнаяТара.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена КАК Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.СчетЗатрат.Код, """") КАК СчетЗатрат,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.СчетУчетаНДС.Код, """") КАК СчетУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ПоступлениеТоваровУслугУслуги.Субконто1 КАК Субконто1,
	|	ПоступлениеТоваровУслугУслуги.Субконто2 КАК Субконто2,
	|	ПоступлениеТоваровУслугУслуги.Субконто3 КАК Субконто3,
	|	ЛОЖЬ КАК ЭтоДопРасходы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугЗачетАвансов.ДокументАванса КАК ДанныеДокументаРасчетов,
	|	ПоступлениеТоваровУслугЗачетАвансов.СуммаЗачета КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ЗачетАвансов КАК ПоступлениеТоваровУслугЗачетАвансов
	|ГДЕ
	|	ПоступлениеТоваровУслугЗачетАвансов.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаПоступления(КомпонентыОбмена, ДанныеИБ));
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		
		ДобавитьАналитикуЗатратВТаблицуУслуги(ТаблицаУслуги, "Субконто");
		
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	ТаблицаАвансов = РезультатЗапроса[2].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
	
	ВыгрузитьШтрихкодыУпаковок(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СчетНаОплатуПоставщикаТовары.Количество КАК Количество,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Количество,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Цена,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПоставщикаТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуПоставщикаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга, ИСТИНА) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ИспользоватьТипыЗапасов = ДанныеXDTO.Товары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		Если ИспользоватьТипыЗапасов Тогда
			ПравилаЗаполненияТара = Новый Соответствие;
		    ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияТара.Вставить("Количество", "Количество");
			ПравилаЗаполненияТара.Вставить("Цена", "Цена");
			ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		    Если ИспользоватьТипыЗапасов И Строка.ТипЗапасов <> Неопределено И Строка.ТипЗапасов.Значение = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Услуги - добавляются к товарам
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
												
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеXDTO.Договор) И ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагентаРегл) Тогда
			ДанныеXDTO.Вставить("Договор", ДанныеXDTO.ДоговорРегл);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Количество,
	|	ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|   СуммаПошлины,
	|   СуммаНДС,
	|   ДокументПартии КАК ДокументПоступления,
	|   НомерСтроки КАК НомерСтрокиДокумента,
	|   НомерРаздела КАК НомерРаздела,
	|   СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ Документ.ГТДИмпорт.Товары
	|ГДЕ Ссылка = &Ссылка
	|;
	|///////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументАванса КАК ДанныеДокументаРасчетов,
	|	СуммаЗачета КАК Сумма
	|ИЗ Документ.ГТДИмпорт.ЗачетАвансов
	|ГДЕ Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Товары = РезультатЗапроса[0].Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Разделы = ДанныеИБ.Разделы.Выгрузить();
	Разделы.Колонки.Добавить("НомерРаздела");
	Для Каждого Строка Из Разделы Цикл
		Строка.НомерРаздела = Строка.НомерСтроки;
	КонецЦикла;
	ДанныеXDTO.Вставить("Разделы", Разделы);
	
	ТаблицаАвансов = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагентаРегл", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеXDTO.НомерДекларации) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(ДанныеXDTO.НомерДекларации));
	КонецЕсли;
	
	// Номера разделов явно не указываются.
	// В качестве номеров разделов используется номер строки
	// Так как во входящем сообщении номер раздела может не соответствовать номеру строки,
	// то при загрузке в табличную часть Товары нужно подменять номер раздела на номер строки в таблице Разделы
	СоответствияНомеровРазделов = Новый Соответствие;
	
	//Разделы
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СтавкаПошлины", "СтавкаПошлины");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
			СоответствияНомеровРазделов.Вставить(Строка.НомерРаздела, МассивСтрокРазделы.Количество());
		КонецЦикла;
		
		Если МассивСтрокРазделы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
		КонецЕсли;
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПартии");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ФактурнаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			НомерСтрокиРазделов = СоответствияНомеровРазделов.Получить(СтруктураДанныхСтроки.НомерРаздела);
			СтруктураДанныхСтроки.НомерРаздела = НомерСтрокиРазделов;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КурсДокумента) ИЛИ НЕ ЗначениеЗаполнено(ПолученныеДанные.КратностьДокумента) Тогда
		ПолученныеДанные.КурсДокумента = ПолученныеДанные.КурсВзаиморасчетов;
		ПолученныеДанные.КратностьДокумента = ПолученныеДанные.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	// Порядок учета НДС по умолчанию устанавливается только для нового документа.
	// Поэтому полей НДСВключенВСтоимость и НДСПредъявленКВычету нет в ПКС.
	Документы.ГТДИмпорт.УстановитьПорядокУчетаНДСПоУмолчанию(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("СуммаПошлины");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
		МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
		МассивКлючевыхПолей.Добавить("ФактурнаяСтоимость");
		МассивКлючевыхПолей.Добавить("НомерРаздела");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетУчетаНДС, СчетУчетаНУ, СтатьяЗатратНУ, СпособУчетаНДС");
	КонецЕсли;
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	Для Каждого Строка Из ДанныеИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;	
	
	ДанныеИБ.Разделы.Загрузить(ПолученныеДанные.Разделы.Выгрузить());
	
	// Зачет авансов
	ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ТарифицируемаяОперация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ИспользоватьТипыЗапасов = ДанныеXDTO.Товары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		Если ИспользоватьТипыЗапасов Тогда
			ПравилаЗаполненияТара = Новый Соответствие;
		    ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияТара.Вставить("Количество", "Количество");
			ПравилаЗаполненияТара.Вставить("Цена", "Цена");
			ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		    Если ИспользоватьТипыЗапасов И Строка.ТипЗапасов <> Неопределено И Строка.ТипЗапасов.Значение = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Услуги - добавляются к товарам
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ТарифицируемаяОперация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПервыйСимволНомера = Сред(Номер,6,1);
	Если ПервыйСимволНомера = "0" Тогда
		ПолученныеДанные.Номер = Лев(Номер, 5) + "П" + Сред(Номер, 7);
	Иначе
		ПолученныеДанные.Номер = Номер;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ПолученныеДанные.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);		
	
	ПолученныеДанные.НДСВключенВСтоимость = НДСВключенВСтоимостьПоНалогообложению(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПолученныеДанные.СуммаДокумента = 0;
		Содержание = Новый Массив;
		
		ЕстьДанныеОСуммеНДС  = ДанныеXDTO.Услуги.Колонки.Найти("СуммаНДС") <> Неопределено;
		ЕстьДанныеОСтавкеНДС = ДанныеXDTO.Услуги.Колонки.Найти("СтавкаНДС") <> Неопределено;
		
		СтавкаНДС = Неопределено;
		
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Услуги_Строка.ЭтоДопРасходы = Неопределено Тогда
				Услуги_Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;	
		
			Если Услуги_Строка.ЭтоДопРасходы Тогда
				
				Если ЗначениеЗаполнено(Услуги_Строка.Сумма) Тогда
					ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + Услуги_Строка.Сумма;
				КонецЕсли;
				
				Если ЕстьДанныеОСуммеНДС
					И ЗначениеЗаполнено(Услуги_Строка.СуммаНДС) Тогда
					ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + Услуги_Строка.СуммаНДС;
				КонецЕсли;
				
				Если ЕстьДанныеОСтавкеНДС
					И СтавкаНДС = Неопределено
					И ЗначениеЗаполнено(Услуги_Строка.СтавкаНДС) Тогда
					
					СтавкаНДС = Услуги_Строка.СтавкаНДС;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Услуги_Строка.Содержание) Тогда
					Содержание.Добавить(Услуги_Строка.Содержание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтавкаНДС", СтавкаНДС);
		КонецЕсли;
		
		ПолученныеДанные.Содержание = СтрСоединить(Содержание, ", ");
		
	КонецЕсли;
	
	// Расшифровка допрасходов
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаДопРасходов) Тогда
	
		Р_КС = Новый Соответствие;
		Р_КС.Вставить("Номенклатура", "Номенклатура");
		Р_КС.Вставить("Количество", "Количество");
		Р_КС.Вставить("Сумма", "Сумма");
		Р_КС.Вставить("СуммаНДС", "СуммаНДС");
		Р_КС.Вставить("СуммаТовара", "СтоимостьТоваров");
		Р_КС.Вставить("ДокументПартии", "ДокументПоступления");
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаДопРасходов Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Р_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПолученныеДанные.Дата);
	КонецЕсли;
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	КонецЦикла;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"НДСВключенВСтоимость,СтавкаНДС,СуммаДокумента,СпособРаспределения,Содержание");
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("СуммаТовара");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетУчетаНДС, СчетУчетаНУ, ОтражениеВУСН, СпособУчетаНДС");
	КонецЕсли;
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	Для Каждого Строка Из ДанныеИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	
	// Зачет авансов
	ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ПолученныеДанные.НДСВключенВСтоимость = НДСВключенВСтоимостьПоНалогообложению(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	СпособУчетаНДС = СпособУчетаНДСПоНалогообложению(КомпонентыОбмена, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение)
		И НРег(ДанныеXDTO.Налогообложение.Значение) = НРег("НДСИсчисляетсяПокупателем") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСИсчисляетсяПокупателем", Истина);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение)
		И НРег(ДанныеXDTO.Налогообложение.Значение) = НРег("ЭлектронныеУслуги") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭлектронныеУслуги", Истина);
	КонецЕсли;
	
	//Товары и возвратная тара
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ПравилаЗаполнения.Вставить("СуммаВРознице", "СуммаВРознице");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И ТипЗнч(Строка.ТипЗапасов) = Тип("Структура") Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
				И ЗначениеЗаполнено(Строка.ЗакупкаПодДеятельность) Тогда
				СпособУчетаНДССтроки = СпособУчетаНДСПоЗакупкеПодДеятельность(КомпонентыОбмена, ДанныеXDTO, Строка.ЗакупкаПодДеятельность);
			Иначе
			    СпособУчетаНДССтроки = СпособУчетаНДС;
			КонецЕсли;
			
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда // Заполнение ТЧ ВозвратнаяТара
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДССтроки);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе // Заполнение ТЧ Товары
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДССтроки);
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
				КонецЕсли;
				
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
	
				УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Строка.ЭтоДопРасходы = Неопределено Тогда
				Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;
			
			Если Строка.ЭтоДопРасходы
				И (НЕ ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
			 		ИЛИ ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0)	Тогда
				Строка.ЭтоДопРасходы = Ложь; 
			КонецЕсли;
		
			Если Строка.ЭтоДопРасходы Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("ПодразделениеЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.ПодразделениеЗатрат) Тогда
				ДобавитьОрганизациюВПодразделениеXDTO(СтруктураДанныхСтроки.ПодразделениеЗатрат, ДанныеXDTO.КлючевыеСвойства.Организация);
				ДобавитьПодразделениеДляЗаполненияАналитики(КомпонентыОбмена, СтруктураДанныхСтроки, "ПодразделениеЗатрат", СтруктураДанныхСтроки.ПодразделениеЗатрат);
			КонецЕсли;
			
			СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = БухгалтерскийСчетПоКоду(Строка.СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
				СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетЗатрат)
				И ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				// Получим номенклатуру для определения счета
				ИмяПКО = "Справочник_Номенклатура_Получение";
				ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Номенклатура,
											ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
						ПолученныеДанные.Организация, Номенклатура, ПолученныеДанные.Склад, ПолученныеДанные.Дата);
				Если СчетаУчета <> Неопределено Тогда
					СчетЗатрат = СчетаУчета.СчетУчета;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
				ДобавитьАналитикуЗатратВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, "Субконто,СубконтоНУ", Строка.СтатьяЗатрат, СчетЗатрат);
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Строка.ГруппаАналитическогоУчетаНоменклатуры) Тогда
			   ДобавитьНоменклатурнуюГруппуВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, "Субконто", Строка.ГруппаАналитическогоУчетаНоменклатуры);
			   ДобавитьНоменклатурнуюГруппуВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, "СубконтоНУ", Строка.ГруппаАналитическогоУчетаНоменклатуры);
			КонецЕсли;		
			
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
	
	//ОбновимСвойствоДоговора
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
	
	
	// Уточнение вида операции в зависимости от заполенния ТЧ и наличия комиссии
	Если (ДанныеXDTO.ВидОперации.Значение = "ПокупкаУПоставщика"
		Или ДанныеXDTO.ВидОперации.Значение = "ЗакупкаПоИмпорту") 
		И МассивСтрокВозвратнаяТара.Количество() = 0 Тогда
		
		Если МассивСтрокТовары.Количество() > 0 
			И МассивСтрокУслуги.Количество() = 0 Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли МассивСтрокТовары.Количество() = 0 
			И МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("НДСИсчисляетсяПокупателем")
		И ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиНДСИсчисляетсяПокупателем.Добавить(ПолученныеДанные.ДоговорКонтрагента);
		
		ЗаполнитьСуммуНДСВТоварахПриНДСУПокупателя(ПолученныеДанные);
		
	КонецЕсли;
	
	Если УчетНДС.КонтрагентРезидентТаможенногоСоюза(ПолученныеДанные.Контрагент) Тогда
		УстановитьСтавкуНДСПодходящуюДляЕАЭС(ПолученныеДанные);
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ЭлектронныеУслуги")
		И ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиЭлектронныхУслуг.Добавить(ПолученныеДанные.ДоговорКонтрагента);
	КонецЕсли;
	
	#Область Мержевание
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если в уже существующем документе указан договор факторинга, то загружать такой документ повторно не требуется.
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	// Счет на оплату
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетНаОплатуПоставщика) И ЗначениеЗаполнено(ДанныеИБ.СчетНаОплатуПоставщика) Тогда
		ПолученныеДанные.СчетНаОплатуПоставщика = ДанныеИБ.СчетНаОплатуПоставщика;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "НДСВключенВСтоимость");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС, СчетРасчетов, ОтражениеВУСН, СпособУчетаНДС");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	Если ДанныеИБ.Проведен Тогда
		ПоляДляЗаполнения = "Содержание,СчетЗатрат,ПодразделениеЗатрат,СчетУчетаНДС, ОтражениеВУСН, СчетЗатратНУ,
		|Субконто1, Субконто2, Субконто3, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, СпособУчетаНДС";
	Иначе
		ПоляДляЗаполнения = "Содержание, СчетУчетаНДС, ОтражениеВУСН, СпособУчетаНДС";
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		ПоляДляЗаполнения);
	
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	// Возвратная тара.
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Услуги") Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", ПолученныеДанные.ДополнительныеСвойства.Услуги);
	КонецЕсли;
	
	// Зачет авансов
	ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
	//Штрихкоды упаковок
	ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "РП");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	
	ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	КонвертацииСвойств = Новый Соответствие;
	КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
	КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	КонвертацииСвойств.Вставить("Количество", "Количество");
	КонвертацииСвойств.Вставить("Цена", "Цена");
	КонвертацииСвойств.Вставить("Сумма", "Сумма");
	КонвертацииСвойств.Вставить("ЦенаВРознице", "ЦенаВРознице");
	КонвертацииСвойств.Вставить("СуммаВРознице", "СуммаВРознице");
	КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
	КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
	КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетПоставщика" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
			КонецЕсли;
			
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Излишки")
		И ЗначениеЗаполнено(ДанныеXDTO.Излишки) Тогда
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Излишки Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ВПользуПоставщика" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
			КонецЕсли;
			
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "РТ");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	
	ДанныеXDTO_Организация = ?(КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta",
		ДанныеXDTO.Организация, ДанныеXDTO.КлючевыеСвойства.Организация);
	
	// Договор по совокупности ключевых свойств
	СтруктураДанныеДоговора = Новый Структура();
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеXDTO_Организация);
	СтруктураДанныеДоговора.Вставить("Контрагент", ДанныеXDTO.КонтрагентСтороннейКомпании);
	СтруктураДанныеДоговора.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураДанныеДоговора.Вставить("ЭтоНаборКлючевыхСвойств", Истина);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов"));
	
	ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		// Товары
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("ЦенаВРознице", "ЦенаВРознице");
		КонвертацииСвойств.Вставить("СуммаВРознице", "СуммаВРознице");
		КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
		КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
	
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетСтороннейКомпании" Тогда
				Продолжить;
			КонецЕсли;
	
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
			КонецЕсли;
	
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
	
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Р");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку").Ссылка;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ПолученныеДанные.Основание = НСтр("ru = 'Поступление товаров и услуг № '") 
			+ НомерВходящегоДокумента
			+ НСтр("ru = ' от '")
			+ Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'");
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	// Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Излишки")
		И ЗначениеЗаполнено(ДанныеXDTO.Излишки) Тогда
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Сумма", "Сумма");
		Т_КС.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Излишки Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
			КонецЕсли;
			
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
		
		Для Каждого СтрокаТовары ИЗ ПолученныеДанные.Товары Цикл
			СтрокаТовары.Цена = СтрокаТовары.Цена * КоэффициентПересчета;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма * КоэффициентПересчета;
		КонецЦикла;
	КонецЕсли;		
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Р");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ПолученныеДанные.Основание = НСтр("ru = 'Поступление товаров и услуг № '") 
			+ НомерВходящегоДокумента
			+ НСтр("ru = ' от '")
			+ Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'");
	КонецЕсли;
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку").Ссылка;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		// Товары
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Себестоимость", "Сумма");
		Т_КС.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ВТ_КС = Новый Соответствие;
		ВТ_КС.Вставить("Номенклатура", "Номенклатура");
		ВТ_КС.Вставить("Количество", "Количество");
		
		СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
		КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
		
			Если СтрокаXDTO.ВариантОтражения.Значение <> "НаПрочиеРасходы" Тогда
				Продолжить;
			КонецЕсли;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			Если ТипЗапасов = "ВозвратнаяТара" Тогда // Заполнение ТЧ ВозвратнаяТара
				ЗаполнитьСтруктуруДанныхСтроки(ВТ_КС, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе // Заполнение ТЧ Товары
			
				ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
				КонецЕсли;
				
				Если ДанныеXDTO.СуммаВключаетНДС Тогда
					СтруктураДанныхСтроки.Цена = ?(СтруктураДанныхСтроки.Количество = 0,
						0, Окр(СтруктураДанныхСтроки.Себестоимость / СтруктураДанныхСтроки.Количество, 2));
					СтруктураДанныхСтроки.Себестоимость = СтруктураДанныхСтроки.Себестоимость - ?(ЗначениеЗаполнено(СтрокаXDTO.СуммаНДС),
						СтрокаXDTO.СуммаНДС, 0);
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
				ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтруктураДанныхСтроки.Себестоимость;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
		
		Для Каждого СтрокаТовары ИЗ ПолученныеДанные.Товары Цикл
			СтрокаТовары.Себестоимость = СтрокаТовары.Себестоимость * КоэффициентПересчета;
			СтрокаТовары.Цена = СтрокаТовары.Цена * КоэффициентПересчета;
		КонецЦикла;
	КонецЕсли;		
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Подарочные_сертификаты
Процедура ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Истина;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Ложь;
	Иначе
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Ложь;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаКартой = Истина;
	Иначе
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаКартой = Ложь;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СуммаНаличными") И ДанныеXDTO.СуммаНаличными > 0 Тогда
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаНаличными = Истина;
	Иначе
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаНаличными = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ПодарочныеСертификаты Цикл
			СуммаВсего = СуммаВсего + Строка.Сумма;
		КонецЦикла;
		ПолученныеДанные.СуммаКтЗадолженности = СуммаВсего;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	 КонецЕсли;
КонецПроцедуры
Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокЗадолженность = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		ЕстьКолонкаЭквайрер = ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("Эквайрер") <> Неопределено;
	
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СуммаВсего = СуммаВсего + Строка.СуммаОплаты;
			Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СубконтоКт1") 
				И ЕстьКолонкаЭквайрер
				И ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				ПолученныеДанные.СубконтоКт1 = Контрагент;
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, Контрагент);
				ПолученныеДанные.СубконтоКт2 = ДоговорКонтрагента.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		
			
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
	 КонецЕсли;
КонецПроцедуры
Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	Для Каждого СтрокаЗадолженность ИЗ ПолученныеДанные.КредиторскаяЗадолженность Цикл
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	Конеццикла;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурса.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	СтрокаРасшифровка.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);                     
	ПолученныеДанные.СчетКасса = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	СуммаВсего = 0;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		
		ЕстьКолонкаЭквайрер = ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("Эквайрер") <> Неопределено;
		
		Для Каждого Строка ИЗ ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
		
			СуммаВсего = СуммаВсего + Строка.СуммаОплаты;
			Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("Эквайрер") 
				И ЕстьКолонкаЭквайрер
				И ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				ПолученныеДанные.Эквайрер = Контрагент;
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, Контрагент);
				ПолученныеДанные.ДоговорЭквайринга = ДоговорКонтрагента.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		СтрокаРасшифровки = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СуммаВзаиморасчетов = СуммаВсего;
		СтрокаРасшифровки.СуммаПлатежа = СуммаВсего;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	Для Каждого СтрокаРасшифровки ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
	
		СтрокаРасшифровки.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
		СтрокаРасшифровки.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаРасшифровки.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
	КонецЦикла;
	
	
	ПолученныеДанные.ВидОплаты = ВидОплатыОрганизации(
		КомпонентыОбмена,
		ПолученныеДанные.Организация,
		Перечисления.ТипыОплат.ПлатежнаяКарта,
		ПолученныеДанные.Эквайер,
		ПолученныеДанные.ДоговорЭквайринга);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурса.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	СтрокаРасшифровка.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Продажи
Процедура ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = Ложь;
	
	// Выгружаем документ только в том случае, если можем конвертировать ДокументРеализации.
	// Этот реквизит обязательный и при незаполненном реквизите будет ошибка.
	ИмяПКО_ДокументРеализации = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ДокументРеализации);
	Если ЗначениеЗаполнено(ИмяПКО_ДокументРеализации) Тогда
		ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.Ссылка,
		|	Док.Дата
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка КАК Ссылка,
		|		Док.Ссылка.Дата КАК Дата
		|	ИЗ Документ.ОтчетОРозничныхПродажах.Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка,
		|		Док.Ссылка.Дата
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	) КАК Док
		|УПОРЯДОЧИТЬ ПО Док.Дата
		|";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	ЕстьУслуги = Ложь;
	ЕстьАгентскиеУслуги = Ложь;
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
	
			Если ТипУслугиСтроки(Строка) = "Агентские" Тогда
				ЕстьАгентскиеУслуги = Истина;
			Иначе
				ЕстьУслуги = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Истина;
	Если (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
		Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано") И Не ЕстьТовары И Не ЕстьУслуги Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Ложь;
	КонецЕсли;
	
	// По отдельному правилу создается документ, который содержит только агентские услуги.
	ИспользованиеПКО.Документ_РТиУБезПереходаПравСобственностиУслуги = ЕстьАгентскиеУслуги
		И (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
		Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано");
	
	ИспользованиеПКО.Документ_РеализацияОтгруженныхТоваров_Получение = (ЕстьТовары Или ЕстьУслуги)
		И ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
КонецПроцедуры
Функция ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков) 
		И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов) Тогда
		
		МассивВыборки = Новый Массив;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Док
			|ГДЕ
			|	Док.Проведен
			|	И Док.Дата >= &ДатаНачала 
			|	И Док.Дата <= &ДатаОкончания";
	
		Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл
			МассивВыборки.Добавить(Выборка.Ссылка);
		КонецЦикла;
	
		Возврат МассивВыборки;
	
	КонецЕсли;
КонецФункции
Процедура ПОД_РегистрСведений_СтатусыДокументов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СостояниеОтгрузкиЗаказа_Отправка = Ложь;
	
	ОтборЗаполненКорректно = ОтборРегистраСведенийЗаполненКорректно(ДанныеИБ.Отбор, "Документ");
	
	Если ОтборЗаполненКорректно
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ТипЗнч(ДанныеИБ.Отбор.Документ.Значение) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Истина;
		ИспользованиеПКО.Справочник_СостояниеОтгрузкиЗаказа_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостояниеОплатыЗаказа_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЗаказXDTO = ДанныеXDTO.КлючевыеСвойства.Заказ;
	СостояниеОплатыXDTO = ДанныеXDTO.СостояниеОплаты;
	
	ПКО_Заказ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Документ_ЗаказКлиента_Получение");
	ЗаказСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗаказXDTO, ПКО_Заказ, "ПолучитьСсылку").Ссылка;
	
	ПКПД_СтатусыОплаты = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СтатусОплатыСчета", "ИмяПКПД");
	СтатусОплаты = ПКПД_СтатусыОплаты.КонвертацииЗначенийПриПолучении.Получить(СостояниеОплатыXDTO.Значение);
				
	Если ЗначениеЗаполнено(ЗаказСсылка)
		И ЗначениеЗаполнено(СтатусОплаты) Тогда
		
		ДобавитьСтатусДокументаКЗагрузке(КомпонентыОбмена, ЗаказСсылка, СтатусОплаты, Неопределено);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостояниеОтгрузкиЗаказа_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЗаказXDTO = ДанныеXDTO.КлючевыеСвойства.Заказ;
	СостояниеОтгрузкиXDTO = ДанныеXDTO.СостояниеОтгрузки;
	
	ПКО_Заказ = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Документ_ЗаказКлиента_Получение");
	ЗаказСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗаказXDTO, ПКО_Заказ, "ПолучитьСсылку").Ссылка;
	
	ПКПД_СтатусыОтгрузки = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СтатусыОтгрузки", "ИмяПКПД");
	СтатусОтгрузки = ПКПД_СтатусыОтгрузки.КонвертацииЗначенийПриПолучении.Получить(СостояниеОтгрузкиXDTO.Значение);
				                                                                  	
	Если ЗначениеЗаполнено(ЗаказСсылка)
		И ЗначениеЗаполнено(СтатусОтгрузки) Тогда
		
		ДобавитьСтатусДокументаКЗагрузке(КомпонентыОбмена, ЗаказСсылка, Неопределено, СтатусОтгрузки);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Вид электронного документа заполняется если документооборот используется.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель; 
		Иначе
			ДанныеИБ.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель; 
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
					
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто,СчетНаОплатуПокупателю");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СчетНаОплатуПокупателюТовары.Количество КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И СчетНаОплатуПокупателюТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПокупателюВозвратнаяТара.Количество,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И ЕстьNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ИспользоватьТипыЗапасов = ДанныеXDTO.Товары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		Если ИспользоватьТипыЗапасов Тогда
			ПравилаЗаполненияТара = Новый Соответствие;
		    ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияТара.Вставить("Количество", "Количество");
			ПравилаЗаполненияТара.Вставить("Цена", "Цена");
			ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если ИспользоватьТипыЗапасов И ЗначениеЗаполнено(Строка.ТипЗапасов) И Строка.ТипЗапасов.Значение = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//Услуги - добавляются к товарам
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
											
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаРеализации(КомпонентыОбмена, ДанныеИБ));
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		ДанныеXDTO.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ВидОперации);
	КонецЕсли;
	
	ИмяПКО_ДокументРеализации = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ДокументРеализации);
	Если ЗначениеЗаполнено(ИмяПКО_ДокументРеализации) Тогда
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = ДанныеИБ.ДокументРеализации;
		ИнструкцияКонвертации.ИмяПКО = ИмяПКО_ДокументРеализации;
		ДанныеXDTO.Вставить("ДокументРеализации", ИнструкцияКонвертации);
	КонецЕсли;
	
	ИмяПКО_ИсправляемыйДокументРеализации = ИмяПКОПоТипуЗначенияДокумента(ДанныеИБ.ИсправляемыйДокументРеализации);
	Если ЗначениеЗаполнено(ИмяПКО_ИсправляемыйДокументРеализации) Тогда
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = ДанныеИБ.ИсправляемыйДокументРеализации;
		ИнструкцияКонвертации.ИмяПКО = ИмяПКО_ИсправляемыйДокументРеализации;
		ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", ИнструкцияКонвертации);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СчетУчета = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	КорректировкаРеализацииТовары.Количество КАК Количество,
	|	КорректировкаРеализацииТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Цена КАК Цена,
	|	КорректировкаРеализацииТовары.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|	КорректировкаРеализацииТовары.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.Сумма КАК Сумма,
	|	КорректировкаРеализацииТовары.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаДоИзменения КАК СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.НомерГТД.Код КАК НомерГТД,
	|	КорректировкаРеализацииТовары.НомерГТДДоИзменения.Код КАК НомерГТДДоИзменения,
	|	КорректировкаРеализацииТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	КорректировкаРеализацииТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
	|	КорректировкаРеализацииТовары.ЕстьВДокументеРеализации КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииУслуги.Содержание КАК Содержание,
	|	КорректировкаРеализацииУслуги.СодержаниеДоИзменения КАК СодержаниеДоИзменения,
	|	""Собственные"" КАК ТипУслуги,
	|	КорректировкаРеализацииУслуги.Количество КАК Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииУслуги.Цена КАК Цена,
	|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки КАК ЦенаДоКорректировки,
	|	КорректировкаРеализацииУслуги.ЦенаДоИзменения КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииУслуги.Сумма КАК Сумма,
	|	КорректировкаРеализацииУслуги.СуммаДоКорректировки КАК СуммаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаДоИзменения КАК СуммаДоИзменения,
	|	КорректировкаРеализацииУслуги.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаНДС КАК СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Принципал,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСПринципалом,
	|	КорректировкаРеализацииУслуги.ЕстьВДокументеРеализации КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииАгентскиеУслуги.Номенклатура,
	|	КорректировкаРеализацииАгентскиеУслуги.Содержание,
	|	КорректировкаРеализацииАгентскиеУслуги.СодержаниеДоИзменения,
	|	""Агентские"",
	|	КорректировкаРеализацииАгентскиеУслуги.Количество,
	|	КорректировкаРеализацииАгентскиеУслуги.КоличествоДоКорректировки,
	|	КорректировкаРеализацииАгентскиеУслуги.КоличествоДоИзменения,
	|	КорректировкаРеализацииАгентскиеУслуги.Цена,
	|	КорректировкаРеализацииАгентскиеУслуги.ЦенаДоКорректировки,
	|	КорректировкаРеализацииАгентскиеУслуги.ЦенаДоИзменения,
	|	КорректировкаРеализацииАгентскиеУслуги.Сумма,
	|	КорректировкаРеализацииАгентскиеУслуги.СуммаДоКорректировки,
	|	КорректировкаРеализацииАгентскиеУслуги.СуммаДоИзменения,
	|	КорректировкаРеализацииАгентскиеУслуги.СтавкаНДС,
	|	КорректировкаРеализацииАгентскиеУслуги.СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииАгентскиеУслуги.СуммаНДС,
	|	КорректировкаРеализацииАгентскиеУслуги.СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииАгентскиеУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииАгентскиеУслуги.Контрагент,
	|	КорректировкаРеализацииАгентскиеУслуги.ДоговорКонтрагента,
	|	КорректировкаРеализацииАгентскиеУслуги.ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации.АгентскиеУслуги КАК КорректировкаРеализацииАгентскиеУслуги
	|ГДЕ
	|	КорректировкаРеализацииАгентскиеУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары, "ДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары, "ДоКорректировки");
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги, "ДоИзменения");
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги, "ДоКорректировки");
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.КорректироватьБУиНУ = Истина;
	ПолученныеДанные.ПризнаватьЗачитыватьАванс = Истина;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Документы реализации и исправляемый документ реализации
	ДокументРеализации = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ДокументРеализации = ДанныеXDTO.ДокументРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "СчетФактураВыданный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураВыданный_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомитенту") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "КорректировкаРеализацииТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаРеализации_Получение";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ДокументРеализации", Новый Структура("Значение,ИмяПКО", ДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	ИсправляемыйДокументРеализации = Неопределено;
	
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументРеализации") Тогда
		ИсправляемыйДокументРеализации = ДанныеXDTO.ИсправляемыйДокументРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ИсправляемыйДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "СчетФактураВыданный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураВыданный_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомитенту") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "КорректировкаРеализацииТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаРеализации_Получение";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ИсправляемыйДокументРеализации", Новый Структура("Значение,ИмяПКО", ИсправляемыйДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки", "КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения", "ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки", "ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения", "СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки", "СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения", "СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСДоКорректировки", "СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации","ЕстьВДокументеРеализации");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("СтранаПроисхожденияДоИзменения", "СтранаПроисхожденияДоИзменения");
	
		Для Каждого Строка ИЗ ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.НомерГТДДоИзменения) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТДДоИзменения", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТДДоИзменения));
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		// Корректируем соответствие
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
		Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			ПравилаЗаполнения.Удалить("СтранаПроисхождения");
			ПравилаЗаполнения.Удалить("СтранаПроисхожденияДоИзменения");
		КонецЕсли;
	
		Для Каждого Строка ИЗ ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.ПризнаватьЗачитыватьАванс = Истина;
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки
		И ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		// Так как в формате нет вида операции ИсправлениеСобственнойОшибки, то сохраняем то, что было в ДанныеИБ.
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("НомерГТДДоИзменения");
	
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("СтранаПроисхожденияДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеРеализации");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетДоходов,СчетРасходов,Субконто,СчетУчетаНДСПоРеализации,КодТНВЭД,КодТНВЭДДоИзменения");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СодержаниеДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеРеализации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетДоходов,СчетРасходов,Субконто, СчетУчетаНДСПоРеализации");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	#Область ТоварыИУслуги
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвраты = Новый Массив;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьТовары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ИспользоватьТипыЗапасов
				И ЗначениеЗаполнено(Строка.ТипЗапасов)
				И Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			
			Если Строка.Количество > 0 Тогда
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки.Количество = -СтруктураДанныхСтроки.Количество;
				Если СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Сумма      = -СтруктураДанныхСтроки.Сумма;
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("СуммаНДС") Тогда
					СтруктураДанныхСтроки.СуммаНДС = -СтруктураДанныхСтроки.СуммаНДС;
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("Себестоимость") Тогда
					СтруктураДанныхСтроки.Себестоимость = -СтруктураДанныхСтроки.Себестоимость;
				КонецЕсли;
				МассивСтрокВозвраты.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИмяТабличнойЧастиВозвратТоваров = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыВозвратПродажи", "ВозвратТоваров");
	
	ТабличнаяЧастьВозвратТоваров = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров, ТабличнаяЧастьВозвратТоваров)
		И ЗначениеЗаполнено(ТабличнаяЧастьВозвратТоваров) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДатаПродажи", "ДатаРеализации");
		ПравилаЗаполнения.Вставить("НомерЧекаККМПродажи", "НомерФискальногоЧека");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьВозвратТоваров.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		ЕстьСведенияОГТД = ТабличнаяЧастьВозвратТоваров.Колонки.Найти("НомерГТД") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьВозвратТоваров Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ИспользоватьТипыЗапасов
				И ЗначениеЗаполнено(Строка.ТипЗапасов)
				И Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЕстьСведенияОГТД
				И ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокВозвраты.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	#Область Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияАУ = Новый Соответствие;
		ПравилаЗаполненияАУ.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияАУ.Вставить("Количество", "Количество");
		ПравилаЗаполненияАУ.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияАУ.Вставить("Цена", "Цена");
		ПравилаЗаполненияАУ.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполненияАУ.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполненияАУ.Вставить("Содержание", "Содержание");
		ПравилаЗаполненияАУ.Вставить("Принципал", "Контрагент");
		ПравилаЗаполненияАУ.Вставить("ДоговорСПринципалом", "ДоговорКонтрагента");
	
		ИспользоватьТипыУслуг = ДанныеXDTO.Услуги.Колонки.Найти("ТипУслуги") <> Неопределено;
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
	
			// Собственные услуги добавляются в ТЧ Товары,
			// а агентские - в ТЧ АгентскиеУслуги
			Если ИспользоватьТипыУслуг
				И ЗначениеЗаполнено(Строка.ТипУслуги)
				И Строка.ТипУслуги.Значение = "Агентские" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияАУ);
				МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокВозвраты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Возвраты", МассивСтрокВозвраты);
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АгентскиеУслуги", МассивСтрокУслуги);
	КонецЕсли;
	
	#КонецОбласти
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	МассивСтрокВозвратОплаты = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.СуммаОплаты, Перечисления.ТипыОплат.ПлатежнаяКарта);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			Если ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("ДоговорЭквайринга") <> Неопределено
				И ЗначениеЗаполнено(Строка.ДоговорЭквайринга)
				И ТипЗнч(Строка.ДоговорЭквайринга) = Тип("Структура") 
				И Строка.ДоговорЭквайринга.Свойство("Ссылка") Тогда
				// Если указана ссылка на договор, то используем переданный договор
				// Если ДоговорЭквайринга передан, но поле Ссылка не заполнена,
				// то используем договор эквайринга по умолчанию, так как те данные, которые переданы, дублируют данные в документе.
				
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				// Конвертация договора
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ДоговорЭквайринга,
											ПКОДоговор, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			ИначеЕсли СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, СтруктураДанныхСтроки.Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента.Ссылка);
			КонецЕсли;
			
			Если СтруктураДанныхСтроки.СуммаОплаты > 0 Тогда
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки.СуммаОплаты = - СтруктураДанныхСтроки.СуммаОплаты;
				МассивСтрокВозвратОплаты.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.СуммаОплаты, Перечисления.ТипыОплат.ПлатежнаяКарта);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			Если ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов.Колонки.Найти("ДоговорЭквайринга") <> Неопределено
				И ЗначениеЗаполнено(Строка.ДоговорЭквайринга)
				И ТипЗнч(Строка.ДоговорЭквайринга) = Тип("Структура") 
				И Строка.ДоговорЭквайринга.Свойство("Ссылка") Тогда
				// Если указана ссылка на договор, то используем переданный договор
				// Если ДоговорЭквайринга передан, но поле Ссылка не заполнена,
				// то используем договор эквайринга по умолчанию, так как те данные, которые переданы, дублируют данные в документе.
				
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				// Конвертация договора
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ДоговорЭквайринга,
											ПКОДоговор, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			ИначеЕсли СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, СтруктураДанныхСтроки.Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента.Ссылка);
			КонецЕсли;
			
			Если СтруктураДанныхСтроки.СуммаОплаты > 0 Тогда
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки.СуммаОплаты = - СтруктураДанныхСтроки.СуммаОплаты;
				МассивСтрокВозвратОплаты.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.Сумма, Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
			
			// Контрагент
			Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
			СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент.Ссылка);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Договор = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Договор.Ссылка);
			КонецЕсли;
			
			Если СтруктураДанныхСтроки.СуммаОплаты > 0 Тогда
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки.СуммаОплаты = - СтруктураДанныхСтроки.СуммаОплаты;
				МассивСтрокВозвратОплаты.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокРеализованныхСертификатов = Новый Массив;
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ТипОплаты", Строка.Сумма, Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
			
			// Контрагент
			Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
			СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент.Ссылка);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Договор = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Договор.Ссылка);
			КонецЕсли;
			
			МассивСтрокРеализованныхСертификатов.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);
	КонецЕсли;
	
	Если МассивСтрокВозвратОплаты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратОплаты", МассивСтрокВозвратОплаты);
	КонецЕсли;
	
	Если МассивСтрокРеализованныхСертификатов.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокРеализованныхСертификатов);
	КонецЕсли;
	
	// Для версии формата 1.3 и выше КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка всегда ЛОЖЬ
	СоздаватьПКОПриЗагрузке =  КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка
		ИЛИ (ДанныеXDTO.Свойство("УчетВыручкиВОперационнойКассе") И ДанныеXDTO.УчетВыручкиВОперационнойКассе);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СоздаватьПКОПриЗагрузке", СоздаватьПКОПриЗагрузке);
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьВидОплатыВТабличнойЧасти(КомпонентыОбмена, ПолученныеДанные, "Оплата");
	
	УстановитьВидОплатыВТабличнойЧасти(КомпонентыОбмена, ПолученныеДанные, "ВозвратОплаты");
	
	УстановитьВидОплатыВТабличнойЧасти(КомпонентыОбмена, ПолученныеДанные, "ПодарочныеСертификаты");
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.АгентскиеУслуги.Итог("СуммаНДС") = 0;
								
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ДанныеИБ.СтатьяДвиженияДенежныхСредств) Тогда
		ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
				
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Возврат товаров
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("ДатаРеализации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Возвраты,
		ДанныеИБ.Возвраты,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Возвраты.Загрузить(ПолученныеДанные.Возвраты.Выгрузить());
	
	//Агентские услуги
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Контрагент");
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("Содержание");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.АгентскиеУслуги,
		ДанныеИБ.АгентскиеУслуги,
		МассивКлючевыхПолей,
		"СчетРасчетов");
	ДанныеИБ.АгентскиеУслуги.Загрузить(ПолученныеДанные.АгентскиеУслуги.Выгрузить());
	
	//Оплата
	ДанныеИБ.Оплата.Загрузить(ПолученныеДанные.Оплата.Выгрузить());
	
	//Возврат оплаты
	ДанныеИБ.ВозвратОплаты.Загрузить(ПолученныеДанные.ВозвратОплаты.Выгрузить());
	
	//ПодарочныеСертификаты
	ДанныеИБ.ПодарочныеСертификаты.Загрузить(ПолученныеДанные.ПодарочныеСертификаты.Выгрузить());
	
	
	// Создание документа ПриходныйКассовыйОрдер
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("СоздаватьПКОПриЗагрузке")  
		И ПолученныеДанные.ДополнительныеСвойства.СоздаватьПКОПриЗагрузке Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("СоздаватьПКОПриЗагрузке", Истина);
	КонецЕсли;
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Ложь);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.НомерГТД.Код КАК НомерГТД,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.Себестоимость КАК Себестоимость
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахВозвраты.Номенклатура,
	|	ОтчетОРозничныхПродажахВозвраты.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахВозвраты.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ,
	|	-ОтчетОРозничныхПродажахВозвраты.Количество,
	|	ОтчетОРозничныхПродажахВозвраты.Цена,
	|	-ОтчетОРозничныхПродажахВозвраты.Сумма,
	|	ОтчетОРозничныхПродажахВозвраты.СтавкаНДС,
	|	-ОтчетОРозничныхПродажахВозвраты.СуммаНДС,
	|	ОтчетОРозничныхПродажахВозвраты.НомерГТД.Код,
	|	ОтчетОРозничныхПродажахВозвраты.СтранаПроисхождения,
	|	ОтчетОРозничныхПродажахВозвраты.Себестоимость
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ОтчетОРозничныхПродажахВозвраты
	|ГДЕ
	|	ОтчетОРозничныхПродажахВозвраты.Ссылка = &Ссылка
	|	И &ВыгружатьВозвратыКакТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.Контрагент КАК Принципал,
	|	Услуги.ДоговорКонтрагента КАК ДоговорСПринципалом,
	|	""Агентские"" КАК ТипУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахВозвраты.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахВозвраты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахВозвраты.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	ОтчетОРозничныхПродажахВозвраты.Количество КАК Количество,
	|	ОтчетОРозничныхПродажахВозвраты.Цена КАК Цена,
	|	ОтчетОРозничныхПродажахВозвраты.Сумма КАК Сумма,
	|	ОтчетОРозничныхПродажахВозвраты.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетОРозничныхПродажахВозвраты.СуммаНДС КАК СуммаНДС,
	|	ОтчетОРозничныхПродажахВозвраты.ДатаРеализации КАК ДатаПродажи,
	|	ОтчетОРозничныхПродажахВозвраты.НомерФискальногоЧека КАК НомерЧекаККМПродажи,
	|	ЕстьNULL(ОтчетОРозничныхПродажахВозвраты.СчетУчета.Код, """") Как СчетУчета
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ОтчетОРозничныхПродажахВозвраты
	|ГДЕ
	|	ОтчетОРозничныхПродажахВозвраты.Ссылка = &Ссылка
	|	И НЕ &ВыгружатьВозвратыКакТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты.Контрагент КАК Эквайрер,
	|	""б/н"" КАК НомерКарты,
	|	ОтчетОРозничныхПродажахОплата.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахВозвратОплаты.ВидОплаты.Контрагент,
	|	""б/н"",
	|	-ОтчетОРозничныхПродажахВозвратОплаты.СуммаОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ВозвратОплаты КАК ОтчетОРозничныхПродажахВозвратОплаты
	|ГДЕ
	|	ОтчетОРозничныхПродажахВозвратОплаты.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахВозвратОплаты.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплата.СуммаОплаты КАК Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахОплата.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-ОтчетОРозничныхПродажахВозвратОплаты.СуммаОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ВозвратОплаты КАК ОтчетОРозничныхПродажахВозвратОплаты
	|ГДЕ
	|	ОтчетОРозничныхПродажахВозвратОплаты.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахВозвратОплаты.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахПодарочныеСертификаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ОтчетОРозничныхПродажахПодарочныеСертификаты
	|ГДЕ
	|	ОтчетОРозничныхПродажахПодарочныеСертификаты.Ссылка = &Ссылка";
	
	ВыгружатьВозвратыКакТовары = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВыгружатьВозвратыКакТовары", ВыгружатьВозвратыКакТовары);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		
		ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыПродажа", "Товары");
		ДанныеXDTO.Вставить(ИмяТабличнойЧастиТовары, ТаблицаТовары);
		
	КонецЕсли;
	
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	Если Не ВыгружатьВозвратыКакТовары Тогда
		ТаблицаВозвраты = РезультатыЗапроса[2].Выгрузить();
		Если ТаблицаВозвраты.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТаблицаВозвраты);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОплатаПлатежнымиКартами = РезультатыЗапроса[3].Выгрузить();
	Если ТаблицаОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ТаблицаОплатаПлатежнымиКартами);
	КонецЕсли;
	
	ТаблицаОплатыСертификатами = РезультатыЗапроса[4].Выгрузить();
	Если ТаблицаОплатыСертификатами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ТаблицаОплатыСертификатами);
	КонецЕсли;
	
	ТаблицаПодарочныеСертификаты = РезультатыЗапроса[5].Выгрузить();
	Если ТаблицаПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПереоценкаТоваровВРознице_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	    
	    МассивСтрокТовары = Новый Массив;
	    
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		ПравилаЗаполнения.Вставить("ЦенаВРозницеСтарая", "ЦенаВРозницеСтарая");
		ПравилаЗаполнения.Вставить("СтавкаНДСВРознице", "СтавкаНДСВРознице");
		ПравилаЗаполнения.Вставить("СуммаПереоценки", "СуммаПереоценки");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И Строка.ТипЗапасов <> "СобственныеТовары" Тогда
				Продолжить;
			КонецЕсли;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПереоценкаТоваровВРознице_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	УстановитьВремяРеализацииОтгруженныхТоваров(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОтгрузки", ДанныеXDTO.КлючевыеСвойства);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение)
		И НРег(ДанныеXDTO.Налогообложение.Значение) = НРег("ОблагаетсяНДСУПокупателя") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОблагаетсяНДСУПокупателя", Истина);
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("ПереданныеСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
				КонецЕсли;
	
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокУслуги = Новый Массив;
	МассивСтрокАгентскиеУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияАгентскихУслуг = Новый Соответствие;
		ПравилаЗаполненияАгентскихУслуг.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Содержание", "Содержание");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Количество", "Количество");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Цена", "Цена");
		ПравилаЗаполненияАгентскихУслуг.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполненияАгентскихУслуг.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Принципал", "Контрагент");
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			
			Если ТипУслугиСтроки(Строка) = "Агентские" Тогда
				//Для вида операции "Отгрузка без перехода права собственности" агентские услуги загружаются по отдельному правилу
				Если ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияАгентскихУслуг);
					МассивСтрокАгентскиеУслуги.Добавить(СтруктураДанныхСтроки);
				КонецЕсли;
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
		Если МассивСтрокАгентскиеУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("АгентскиеУслуги", МассивСтрокАгентскиеУслуги);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
	
	// Штрихкоды упаковок.
	ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ);
	
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Вид электронного документа не заполняется если документооборот не используется.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ПолученныеДанные.ВидЭлектронногоДокумента = Неопределено; 
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	РекомендуемыйВидОперации = Документы.РеализацияТоваровУслуг.РекомендуемыйВидОперации(ПолученныеДанные);
	Если ЗначениеЗаполнено(РекомендуемыйВидОперации) Тогда
		ПолученныеДанные.ВидОперации = РекомендуемыйВидОперации;
	КонецЕсли;
	 	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.Услуги.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.АгентскиеУслуги.Итог("СуммаНДС") = 0;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОблагаетсяНДСУПокупателя")
		И ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПродажиНДСИсчисляетсяПокупателем.Добавить(ПолученныеДанные.ДоговорКонтрагента);
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	ПолученныеДанные.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ПолученныеДанные, "Товары")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ПолученныеДанные, "Услуги")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ПолученныеДанные, "АгентскиеУслуги");
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДСПоРеализации,СчетРасходов,ПереданныеСчетУчета,СчетДоходов,Субконто,КодТНВЭД,СчетНаОплатуПокупателю");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета,СчетНаОплатуПокупателю");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто,СчетНаОплатуПокупателю");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	//АгентскиеУслуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Контрагент");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.АгентскиеУслуги,
		ДанныеИБ.АгентскиеУслуги,
		МассивКлючевыхПолей,
		"ДоговорКонтрагента,СчетРасчетов,СчетНаОплатуПокупателю");
	ДанныеИБ.АгентскиеУслуги.Загрузить(ПолученныеДанные.АгентскиеУслуги.Выгрузить());
	
	//Штрихкоды упаковок
	ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());
	
	// Зачет авансов
	ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Неопределено);
	//ВидОперации
	ВидОперации = "РеализацияКлиенту";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		ВидОперации = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		//Если есть проведенная реализация отгруженных товаров - тогда переход права собственности произошел
		ЗапросРеализация = Новый Запрос;
		ЗапросРеализация.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Дата ИЗ Документ.РеализацияОтгруженныхТоваров
								|ГДЕ ДокументОтгрузки = &Ссылка И Проведен";
		ЗапросРеализация.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ВыборкаРеализация = ЗапросРеализация.Выполнить().Выбрать();
		Если ВыборкаРеализация.Следующий() Тогда
			ВидОперации = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
			ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", ВыборкаРеализация.Дата);
		КонецЕсли;
	
	ИначеЕсли СведенияОДоговоре.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПередачаНаКомиссию";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.Вставить("Налогообложение", НалогообложениеДокументаРеализации(КомпонентыОбмена, ДанныеИБ));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидЭлектронногоДокумента) Тогда
		// Проверим, что в формате есть нужное значение перечисления для конвертации значения ВидЭД
		// Если значение найдется - то заполним его.
		ПравилоКонвертацииЗначения = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип("ПеречислениеСсылка.ВидыЭД")));
		Если ПравилоКонвертацииЗначения.Количество() > 0
			И ПравилоКонвертацииЗначения[0].КонвертацииЗначенийПриОтправке.Получить(ДанныеИБ.ВидЭлектронногоДокумента) <> Неопределено Тогда
			ДанныеXDTO.Вставить("ВидЭД", ДанныеИБ.ВидЭлектронногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СчетУчета = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.НомерГТД.Код КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	""Собственные"" КАК ТипУслуги,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Принципал,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСПринципалом
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	РеализацияТоваровУслугАгентскиеУслуги.Содержание,
	|	""Агентские"",
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
	|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
	|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
	|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугЗачетАвансов.ДокументАванса КАК ДанныеДокументаРасчетов,
	|	РеализацияТоваровУслугЗачетАвансов.СуммаЗачета КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ЗачетАвансов КАК РеализацияТоваровУслугЗачетАвансов
	|ГДЕ
	|	РеализацияТоваровУслугЗачетАвансов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
	
	ТаблицаАвансов = РезультатЗапроса[2].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, "УдалятьНеНайденные");
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблицаАвансов);
	КонецЕсли;
	
	ВыгрузитьШтрихкодыУпаковок(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "У");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокАгентскиеУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполненияАгентскихУслуг = Новый Соответствие;
		ПравилаЗаполненияАгентскихУслуг.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Содержание", "Содержание");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Количество", "Количество");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Цена", "Цена");
		ПравилаЗаполненияАгентскихУслуг.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполненияАгентскихУслуг.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполненияАгентскихУслуг.Вставить("Принципал", "Контрагент");
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
	
			Если ТипУслугиСтроки(Строка) <> "Агентские" Тогда
				Продолжить;
			КонецЕсли;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияАгентскихУслуг);
			МассивСтрокАгентскиеУслуги.Добавить(СтруктураДанныхСтроки);
	
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокАгентскиеУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АгентскиеУслуги", МассивСтрокАгентскиеУслуги);
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	// Вид электронного документа не заполняется если документооборот не используется.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ПолученныеДанные.ВидЭлектронногоДокумента = Неопределено; 
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	
	//АгентскиеУслуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Контрагент");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.АгентскиеУслуги,
		ДанныеИБ.АгентскиеУслуги,
		МассивКлючевыхПолей,
		"ДоговорКонтрагента,СчетРасчетов,СчетНаОплатуПокупателю");
	ДанныеИБ.АгентскиеУслуги.Загрузить(ПолученныеДанные.АгентскиеУслуги.Выгрузить());
	
	// Зачет авансов
	ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Документ = ДанныеИБ.Отбор.Документ.Значение;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", Документ);
	
	СостояниеОплаты = Неопределено;
	Если ДанныеИБ.Количество() > 0 Тогда
		СтрокаНабора = ДанныеИБ[0];
		СостояниеОплаты = СтрокаНабора.Статус;
	КонецЕсли;
	Если СостояниеОплаты = Перечисления.СтатусОплатыСчета.Отменен
		ИЛИ Не ЗначениеЗаполнено(СостояниеОплаты) Тогда
		СостояниеОплаты = Перечисления.СтатусОплатыСчета.НеОплачен;
	КонецЕсли;
	ДанныеXDTO.Вставить("СостояниеОплаты", СостояниеОплаты);
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеОтгрузкиЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Документ = ДанныеИБ.Отбор.Документ.Значение;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", Документ);
	
	СостояниеОтгрузки = Неопределено;
	Если ДанныеИБ.Количество() > 0 Тогда
		СтрокаНабора = ДанныеИБ[0];
		СостояниеОтгрузки = СтрокаНабора.ДополнительныйСтатус;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СостояниеОтгрузки) Тогда
		СостояниеОтгрузки = Перечисления.СтатусыОтгрузки.НеОтгружен;
	КонецЕсли;
	ДанныеXDTO.Вставить("СостояниеОтгрузки", СостояниеОтгрузки);
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Счета_фактуры
Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Выгружаем счет-фактуру, если можем выгрузить хотя бы один документ-основание.
	ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
	
	Для Каждого Строка Из ДанныеИБ.ДокументыОснования Цикл
	
		ПКО_Документа = ИмяПКОПоТипуЗначенияДокумента(Строка.ДокументОснование);
		Если ЗначениеЗаполнено(ПКО_Документа) Тогда
			ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Истина;		
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураВыданный_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Счета-фактуры и исправленного счета-фактуры
	ИспользованиеПКО.Документ_СчетФактураВыданный_Получение      = Истина;
	ИспользованиеПКО.Документ_СчетФактураВыданный_Испр_Получение = Ложь;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ИспользованиеПКО.Документ_СчетФактураВыданный_Получение      = Ложь;
		ИспользованиеПКО.Документ_СчетФактураВыданный_Испр_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Выгружаем счет-фактуру, если можем выгрузить хотя бы один документ-основание.
	ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Ложь;
	
	Для Каждого Строка Из ДанныеИБ.ДокументыОснования Цикл
	
		ПКО_Документа = ИмяПКОПоТипуЗначенияДокумента(Строка.ДокументОснование);
		Если ЗначениеЗаполнено(ПКО_Документа) Тогда
			ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Истина;		
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Счета-фактуры и исправленного счета-фактуры
	ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Истина;
	ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Ложь;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Ложь;
		ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактураВыданный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Испр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураВыданный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.КодСпособаВыставления = 2 , "ВЭлектронномВиде", "НаБумажномНосителе"));
	
	Если ДанныеИБ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ИначеЕсли ДанныеИБ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
	Иначе
		ДанныеXDTO.Вставить("ВидСчетаФактуры", ДанныеИБ.ВидСчетаФактуры);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданныйАвансы.Номенклатура КАК Номенклатура,
	|	СчетФактураВыданныйАвансы.Содержание КАК Содержание,
	|	СчетФактураВыданныйАвансы.СтавкаНДС КАК СтавкаНДС,
	|	СчетФактураВыданныйАвансы.Сумма - СчетФактураВыданныйАвансы.СуммаДоКорректировки КАК Сумма,
	|	СчетФактураВыданныйАвансы.СуммаНДС - СчетФактураВыданныйАвансы.СуммаНДСДоКорректировки КАК СуммаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	|ГДЕ
	|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента1,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ИсходныйДокумент КАК ИсходныйДокумент
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаДокумента КАК ДатаДокумента,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|ГДЕ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаАвансов = РезультатЗапроса[0].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Авансы", ТаблицаАвансов);
	КонецЕсли;
	
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("Структура"));
	ДокументыОснования.Колонки.Добавить("ИсходныйДокумент", Новый ОписаниеТипов("Структура"));
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	ДокументыОснования.Колонки.Добавить("НомерИсходногоДокумента", Новый ОписаниеТипов("Строка"));
	ДокументыОснования.Колонки.Добавить("ДатаИсходногоДокумента", Новый ОписаниеТипов("Дата"));
	ДокументыОснования.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Строка"));
	ДокументыОснования.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата"));
	
	ТаблицаДокументовОснований = РезультатЗапроса[1].Выгрузить();
	Для Каждого Строка Из ТаблицаДокументовОснований Цикл
		
		ПКО_Документа = ИмяПКОПоТипуЗначенияДокумента(Строка.ДокументОснование);
		Если Не ЗначениеЗаполнено(ПКО_Документа) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокументаОснования = ДокументыОснования.Добавить();
			
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = Строка.ДокументОснование;
		ИнструкцияКонвертации.ИмяПКО = ПКО_Документа;
		
		СтрокаДокументаОснования.ДокументОснование = ИнструкцияКонвертации;
		ЗаполнитьЗначенияСвойств(СтрокаДокументаОснования, Строка, "УчитыватьИсправлениеИсходногоДокумента, НомерИсходногоДокумента,
			|ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента"); 
	
		ПКО_ИсходногоДокумента = ИмяПКОПоТипуЗначенияДокумента(Строка.ИсходныйДокумент);
		Если ЗначениеЗаполнено(ПКО_ИсходногоДокумента) Тогда
			ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
			ИнструкцияКонвертации.Значение = Строка.ИсходныйДокумент;
			ИнструкцияКонвертации.ИмяПКО = ПКО_ИсходногоДокумента;
			СтрокаДокументаОснования.ИсходныйДокумент = ИнструкцияКонвертации;
		КонецЕсли
	
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	КонецЕсли;
	
	ТаблицаПлатежныхДокументов = РезультатЗапроса[2].Выгрузить();
	Если ТаблицаПлатежныхДокументов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ТаблицаПлатежныхДокументов);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактураВыданный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураВыданный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаИсправления) Тогда
				ПолученныеДанные.Дата = ПолученныеДанные.ДатаИсправления;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.КодСпособаПолучения = 2 , "ВЭлектронномВиде", "НаБумажномНосителе"));
	
	Если ДанныеИБ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.КорректировочныйНаАванс
		Или ДанныеИБ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	Иначе
		ДанныеXDTO.Вставить("ВидСчетаФактуры", ДанныеИБ.ВидСчетаФактуры);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученныйАвансы.СтавкаНДС КАК СтавкаНДС,
	|	СчетФактураПолученныйАвансы.Сумма - СчетФактураПолученныйАвансы.СуммаДоКорректировки КАК Сумма,
	|	СчетФактураПолученныйАвансы.СуммаНДС - СчетФактураПолученныйАвансы.СуммаНДСДоКорректировки КАК СуммаНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.Авансы КАК СчетФактураПолученныйАвансы
	|ГДЕ
	|	СчетФактураПолученныйАвансы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.ИсходныйДокумент КАК ИсходныйДокумент,
	|	СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученныйПродавцы.Продавец КАК Продавец,
	|	СчетФактураПолученныйПродавцы.ИННПродавца КАК ИННПродавца,
	|	СчетФактураПолученныйПродавцы.КПППродавца КАК КПППродавца
	|ИЗ
	|	Документ.СчетФактураПолученный.Продавцы КАК СчетФактураПолученныйПродавцы
	|ГДЕ
	|	СчетФактураПолученныйПродавцы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаАвансов = РезультатЗапроса[0].Выгрузить();
		
	Если ТаблицаАвансов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Авансы", ТаблицаАвансов);
	КонецЕсли;
	
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("Структура"));
	ДокументыОснования.Колонки.Добавить("ИсходныйДокумент", Новый ОписаниеТипов("Структура"));
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДокументовОснований = РезультатЗапроса[1].Выгрузить();
	Для Каждого Строка Из ТаблицаДокументовОснований Цикл
		
		ПКО_Документа = ИмяПКОПоТипуЗначенияДокумента(Строка.ДокументОснование);
		Если Не ЗначениеЗаполнено(ПКО_Документа) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокументаОснования = ДокументыОснования.Добавить();
			
		ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
		ИнструкцияКонвертации.Значение = Строка.ДокументОснование;
		ИнструкцияКонвертации.ИмяПКО = ПКО_Документа;
		
		СтрокаДокументаОснования.ДокументОснование = ИнструкцияКонвертации;
		СтрокаДокументаОснования.УчитыватьИсправлениеИсходногоДокумента = Строка.УчитыватьИсправлениеИсходногоДокумента;
	
		ПКО_ИсходногоДокумента = ИмяПКОПоТипуЗначенияДокумента(Строка.ИсходныйДокумент);
		Если ЗначениеЗаполнено(ПКО_ИсходногоДокумента) Тогда
			ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
			ИнструкцияКонвертации.Значение = Строка.ИсходныйДокумент;
			ИнструкцияКонвертации.ИмяПКО = ПКО_ИсходногоДокумента;
			СтрокаДокументаОснования.ИсходныйДокумент = ИнструкцияКонвертации;
		КонецЕсли
	
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	КонецЕсли;
	
	ТаблицаПродавцы = РезультатЗапроса[2].Выгрузить();
	Для Каждого СтрокаПродавец Из ТаблицаПродавцы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПродавец.Продавец) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПродавец.ИННПродавца) Тогда
			СтрокаПродавец.ИННПродавца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаПродавец.Продавец, "ИНН");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПродавец.КПППродавца) Тогда
			СтрокаПродавец.КПППродавца = Справочники.Контрагенты.КППНаДату(СтрокаПродавец.Продавец, ДанныеИБ.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПродавцы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Продавцы", ТаблицаПродавцы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаВходящегоДокумента) Тогда
				// При загрузке объекта по ссылке дата не заполнена, т.к. дата получения не входит в ключевые свойства.
				// Поэтому установим ее в дату входящего документа.
				// Дата не входит в поля поиска, поэтому ее можно смело изменять.
				// При загрузке объекта дата будет перезаписана из свойств объекта формата.
				ПолученныеДанные.Дата = ПолученныеДанные.ДатаВходящегоДокумента;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область Документы_Производство_Давальческая_схема__учет_у_давальца_
Процедура ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПередачаПереработчику_Получение = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0");
КонецПроцедуры
Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "В");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("СчетПередачи",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвращенныеМатериалы", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Возвращенные материалы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвращенныеМатериалы,
		ДанныеИБ.ВозвращенныеМатериалы,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.ВозвращенныеМатериалы.Загрузить(ПолученныеДанные.ВозвращенныеМатериалы.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "О");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	
	Если ДанныеXDTO.Свойство("СчетЗатрат")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетЗатрат) Тогда
		СчетЗатрат = БухгалтерскийСчетПоКоду(ДанныеXDTO.СчетЗатрат);
		Если ЗначениеЗаполнено(СчетЗатрат) Тогда
			ПолученныеДанные.СчетЗатрат = СчетЗатрат;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокПродукция = Новый Массив;
	Если ДанныеXDTO.Свойство("Продукция")
		И ЗначениеЗаполнено(ДанныеXDTO.Продукция) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Продукция Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокПродукция.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокПродукция.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокПродукция);
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокУслуги = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("Материалы")
		И ЗначениеЗаполнено(ДанныеXDTO.Материалы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Материалы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокМатериалы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИспользованныеМатериалы", МассивСтрокМатериалы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетЗатрат) Тогда
		ПолученныеДанные.СчетЗатрат = Метаданные.Документы.ПоступлениеИзПереработки.Реквизиты.СчетЗатрат.ЗначениеЗаполнения;
	КонецЕсли;
	
	ОчиститьТабличнуюЧасть = Не ЭтоОбменСУНФ(КомпонентыОбмена);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьТабличнуюЧастьПродукция", ОчиститьТабличнуюЧасть);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("ОчиститьТабличнуюЧастьПродукция", ОчиститьТабличнуюЧасть);
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("Сумма");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДС, СтатьяЗатрат,ОтражениеВУСН,СпособУчетаНДС");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	//Материалы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ИспользованныеМатериалы,
		ДанныеИБ.ИспользованныеМатериалы,
		МассивКлючевыхПолей,
		"СчетУчета, СтатьяЗатрат, ОтражениеВУСН");
	ДанныеИБ.ИспользованныеМатериалы.Загрузить(ПолученныеДанные.ИспользованныеМатериалы.Выгрузить());
	
	//Продукция
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Продукция,
		ДанныеИБ.Продукция,
		МассивКлючевыхПолей,
		"Счет, СуммаПлановая, ПлановаяСтоимость, Спецификация");
	ДанныеИБ.Продукция.Загрузить(ПолученныеДанные.Продукция.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "П");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("СчетПередачи",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетПередачи");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "П");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеОрганизации");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеЗатрат");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Продукция
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Продукция,
		ДанныеИБ.Продукция,
		МассивКлючевыхПолей,
		"Счет,СуммаПлановая,ПлановаяСтоимость,Спецификация");
	ДанныеИБ.Продукция.Загрузить(ПолученныеДанные.Продукция.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Регл__отчеты
Процедура ПОД_РегламентированныйОтчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИсточникиОтчета = Новый Массив;
	ИсточникиОтчета.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	ИсточникиОтчета.Добавить("РегламентированныйОтчет6НДФЛ");
	ИсточникиОтчета.Добавить("РегламентированныйОтчет4ФСС");
	ИсточникиОтчета.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	ИспользоватьПравило = ИсточникиОтчета.Найти(ДанныеИБ.ИсточникОтчета) <> Неопределено;
	
	ИспользованиеПКО.РегламентированныйОтчет_Отправка = ИспользоватьПравило;
КонецПроцедуры
Процедура ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РегламентированныйОтчет_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
КонецПроцедуры
Процедура ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	РегламентированныйОтчет_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область Документы_Складские_операции
Процедура ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Ложь;
	Для Каждого СтрокаТовары ИЗ ДанныеXDTO.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.ТипЗапасов) И СтрокаТовары.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеЗапасов_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СписаниеНедостач_Отправка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ИнвентаризацияТоваровНаСкладе) Тогда
		ИспользованиеПКО.Документ_СписаниеНедостач_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_СписаниеЗапасов_Отправка  = Истина;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			
			ИмяТабличнойЧасти = "Спецодежда";
			Если ЗначениеЗаполнено(СтрокаXDTO.Номенклатура) Тогда
				// Получим номенклатуру
				ИмяПКО = "Справочник_Номенклатура_Получение";
				ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Номенклатура,
												ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
					ПолученныеДанные.Организация, Номенклатура, ПолученныеДанные.Склад, ПолученныеДанные.Дата);
				Если СчетаУчета <> Неопределено Тогда
					Если СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
						ИмяТабличнойЧасти = "Спецоснастка";
					КонецЕсли; 
				КонецЕсли;
									
			КонецЕсли;
	
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
	|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Количество,
	|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК КоличествоУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.Цена КАК Цена,
	|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК СуммаУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице КАК ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУчет", "КоличествоУчет");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаУчет", "СуммаУчет");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
		
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
				
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоУчет");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаУчет");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	НомерГТД.Код КАК НомерГТД,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.ОприходованиеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтатьяПрочихДоходовРасходов) Тогда
		ВыгрузитьПоСсылке(ДанныеИБ.СтатьяПрочихДоходовРасходов, КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Товары
	Если НЕ (ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("ЦенаВРознице", СтруктураДанныхСтроки.Цена);
		СтруктураДанныхСтроки.Вставить("СуммаВРознице", СтруктураДанныхСтроки.Сумма);
		
		Если Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	МассивСтрокИнвентарь    = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацияСвойствСпособаОтраженияРасходов = Новый Соответствие;
		КонвертацияСвойствСпособаОтраженияРасходов.Вставить("НаименованиеСпособаОтраженияРасходов", "НаименованиеСпособаОтраженияРасходов");
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			КонвертацияСвойствСпособаОтраженияРасходов.Вставить("СчетЗатрат", "СчетЗатрат");
			КонвертацияСвойствСпособаОтраженияРасходов.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
			КонвертацияСвойствСпособаОтраженияРасходов.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
			КонвертацияСвойствСпособаОтраженияРасходов.Вставить("ГруппаАналитическогоУчетаНоменклатуры", "ГруппаАналитическогоУчетаНоменклатуры");
		КонецЕсли;
	
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецодежда.Вставить("СрокЭксплуатации", "СрокЭксплуатации");
		КонвертацииСвойствСпецодежда.Вставить("НаименованиеНазначенияИспользования", "НаименованиеНазначенияИспользования");
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			КонвертацииСвойствСпецодежда.Вставить("СпособПогашенияСтоимостиТМЦ", "СпособПогашенияСтоимостиТМЦ");
		КонецЕсли;
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("СрокЭксплуатации", "СрокЭксплуатации");
		КонвертацииСвойствСпецоснастка.Вставить("НаименованиеНазначенияИспользования", "НаименованиеНазначенияИспользования");
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			КонвертацииСвойствСпецоснастка.Вставить("СпособПогашенияСтоимостиТМЦ", "СпособПогашенияСтоимостиТМЦ");
		КонецЕсли;
		
		//Инвентарь
		КонвертацииСвойствИнвентарь = Новый Соответствие;
		КонвертацииСвойствИнвентарь.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствИнвентарь.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствИнвентарь.Вставить("Количество", "Количество");
		
		РеквизитыМатериаловВЭксплуатации = Новый Структура("Организация,Склад,Дата");
		ЗаполнитьЗначенияСвойств(РеквизитыМатериаловВЭксплуатации, ПолученныеДанные);
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
				
			СтруктураСчетовУчета = БухгалтерскиеСчетаСтрокиXDTO(СтрокаXDTO, "СчетУчета,СчетПередачи");
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиМатериаловВЭксплуатации(КомпонентыОбмена, СтрокаXDTO, РеквизитыМатериаловВЭксплуатации);
			
			СтруктураДанныхСпособаОтраженияРасходов = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацияСвойствСпособаОтраженияРасходов, СтрокаXDTO, СтруктураДанныхСпособаОтраженияРасходов);
			СпособОтраженияРасходов = СпособОтраженияРасходов(КомпонентыОбмена, ДанныеXDTO.КлючевыеСвойства.Организация, СтруктураДанныхСпособаОтраженияРасходов);
					
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СпособОтраженияРасходов", СпособОтраженияРасходов);
				СтруктураДанныхСтроки.Вставить("СчетУчета", СтруктураСчетовУчета.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетПередачи", СтруктураСчетовУчета.СчетПередачи);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СпособОтраженияРасходов", СпособОтраженияРасходов);
				СтруктураДанныхСтроки.Вставить("СчетУчета", СтруктураСчетовУчета.СчетУчета);
				СтруктураДанныхСтроки.Вставить("СчетПередачи", СтруктураСчетовУчета.СчетПередачи);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствИнвентарь, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СпособОтраженияРасходов", СпособОтраженияРасходов); 
				СтруктураДанныхСтроки.Вставить("СчетУчета", СтруктураСчетовУчета.СчетУчета);
				МассивСтрокИнвентарь.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
		Если МассивСтрокИнвентарь.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИнвентарьИХозяйственныеПринадлежности", МассивСтрокИнвентарь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Заполнение назначения использования
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.Спецодежда Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.Спецодежда[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("СрокЭксплуатации")
				И ЗначениеЗаполнено(СтрокаXDTO.СрокЭксплуатации) Тогда
			СпособПогашенияСтоимостиТМЦ = Неопределено;
			СтрокаXDTO.Свойство("СпособПогашенияСтоимостиТМЦ", СпособПогашенияСтоимостиТМЦ);
			СтрокаТЧ.НазначениеИспользования = НайтиСоздатьНазначениеИспользованияСпецодежды(КомпонентыОбмена, СтрокаТЧ.Номенклатура, СтрокаXDTO.СрокЭксплуатации,
					СтрокаXDTO.НаименованиеНазначенияИспользования, СпособПогашенияСтоимостиТМЦ, СтрокаXDTO.СпособОтраженияРасходов);
					
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.Спецоснастка Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.Спецоснастка[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("СрокЭксплуатации")
				И ЗначениеЗаполнено(СтрокаXDTO.СрокЭксплуатации) Тогда
			СпособПогашенияСтоимостиТМЦ = Неопределено;
			СтрокаXDTO.Свойство("СпособПогашенияСтоимостиТМЦ", СпособПогашенияСтоимостиТМЦ);
			СтрокаТЧ.НазначениеИспользования = НайтиСоздатьНазначениеИспользованияСпецодежды(КомпонентыОбмена, СтрокаТЧ.Номенклатура, СтрокаXDTO.СрокЭксплуатации,
					СтрокаXDTO.НаименованиеНазначенияИспользования, СпособПогашенияСтоимостиТМЦ, СтрокаXDTO.СпособОтраженияРасходов);		
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.ИнвентарьИХозяйственныеПринадлежности[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("СпособОтраженияРасходов")
				И ЗначениеЗаполнено(СтрокаXDTO.СпособОтраженияРасходов) Тогда
			СтрокаТЧ.СпособОтраженияРасходов = СтрокаXDTO.СпособОтраженияРасходов;
		КонецЕсли;
	КонецЦикла;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"НазначениеИспользования, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"НазначениеИспользования, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	
	//Инвентарь и хозяйственные принадлежности
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности,
		ДанныеИБ.ИнвентарьИХозяйственныеПринадлежности,
		МассивКлючевыхПолей,
		"СпособОтраженияРасходов, СчетУчета, ОтражениеВУСН");
	ДанныеИБ.ИнвентарьИХозяйственныеПринадлежности.Загрузить(ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.Количество КАК Количество,
	|	ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваровТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ПеремещениеТоваровТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ПеремещениеТоваровТовары.СуммаВРознице КАК СуммаВРознице,
	|	"""" КАК ТипЗапасовИзДокумента,
	|	ПеремещениеТоваровТовары.СчетУчета КАК СчетУчета
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТоварыНаКомиссии.Номенклатура,
	|	ПеремещениеТоваровТоварыНаКомиссии.Количество,
	|	ПеремещениеТоваровТоварыНаКомиссии.Номенклатура.ЕдиницаИзмерения,
	|	0,
	|	ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СТАВКИНДС.ПУСТАЯССЫЛКА),
	|	0,
	|	""КомиссионныеТовары"",
	|	ПеремещениеТоваровТоварыНаКомиссии.СчетУчета
	|ИЗ
	|	Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ПеремещениеТоваровТоварыНаКомиссии
	|ГДЕ
	|	ПеремещениеТоваровТоварыНаКомиссии.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровВозвратнаяТара.Номенклатура,
	|	ПеремещениеТоваровВозвратнаяТара.Количество,
	|	ПеремещениеТоваровВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	0,
	|	ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СТАВКИНДС.ПУСТАЯССЫЛКА),
	|	0,
	|	""ВозвратнаяТара"",
	|	ПеремещениеТоваровВозвратнаяТара.СчетУчета
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваровВозвратнаяТара
	|ГДЕ
	|	ПеремещениеТоваровВозвратнаяТара.Ссылка = &Ссылка";
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	// Получать ТипЗапасов напрямую из запроса нельзя.
	// Запрос возвращает типизированную таблицу, в которой ТипЗапасовИзДокумента имеет тип Строка(18).
	// Тип запасов может дозаполняться из кода, см. ОпределитьТипЗапасовПоСчетуУчета().
	// При этом, функция может возвращать строку, длиннее 18. Это значение будет обрезаться до 18 символов
	// при присваивании значению в таблице.
	// Поэтому добавляется отдельная колонка ТипЗапасов с типом Строка(0) и она заполняется из кода.
	
	Товары.Колонки.Добавить("ТипЗапасов", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.ТипЗапасовИзДокумента) Тогда
			Строка.ТипЗапасов = Строка.ТипЗапасовИзДокумента;
		Иначе
			Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеОтправитель", "ПодразделениеОтправитель");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеПолучатель", "ПодразделениеПолучатель");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокКомиссия = Новый Массив;
	МассивСтрокТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СуммаВРознице", "СуммаВРознице");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		ПравилаЗаполнения.Вставить("СтавкаНДСВРознице", "СтавкаНДСВРознице");
		
		ПравилаЗаполненияКомиссия = Новый Соответствие;
		ПравилаЗаполненияКомиссия.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияКомиссия.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполненияКомиссия.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			Если ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияКомиссия);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				СтруктураДанныхСтроки.Вставить("НовыйСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				МассивСтрокКомиссия.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияКомиссия);
				МассивСтрокТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокКомиссия.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТоварыНаКомиссии", МассивСтрокКомиссия);
		КонецЕсли;
		Если МассивСтрокТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокТара);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	МассивКлючевыхПолей.Добавить("СтавкаНДСВРознице");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета,СпособУчетаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	//Товары на комиссии
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ТоварыНаКомиссии,
		ДанныеИБ.ТоварыНаКомиссии,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета");
	ДанныеИБ.ТоварыНаКомиссии.Загрузить(ПолученныеДанные.ТоварыНаКомиссии.Выгрузить());
	
	//Возвратная тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
		ПолученныеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	КонецЕсли;
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если  Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Комплектующие", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ДоляСтоимости");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Комплектующие,
		ДанныеИБ.Комплектующие,
		МассивКлючевыхПолей,
		"СчетУчета,СпособУчетаНДС");
	ДанныеИБ.Комплектующие.Загрузить(ПолученныеДанные.Комплектующие.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СписаниеТоваровТовары.Количество КАК Количество,
	|	СписаниеТоваровТовары.Цена КАК Цена,
	|	СписаниеТоваровТовары.Сумма КАК Сумма,
	|	СписаниеТоваровТовары.НомерГТД.Код КАК НомерГТД,
	|	СписаниеТоваровТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СписаниеТоваровТовары.СчетУчета КАК СчетУчетаСсылка,
	|	ЕСТЬNULL(СписаниеТоваровТовары.СчетУчета.Код, """") КАК СчетУчета,
	|	""Товары"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеТоваровВозвратнаяТара.НомерСтроки,
	|	СписаниеТоваровВозвратнаяТара.Номенклатура,
	|	СписаниеТоваровВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	СписаниеТоваровВозвратнаяТара.Количество,
	|	0,
	|	0,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	СписаниеТоваровВозвратнаяТара.СчетУчета,
	|	ЕСТЬNULL(СписаниеТоваровВозвратнаяТара.СчетУчета.Код, """"),
	|	""ВозвратнаяТара""
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК СписаниеТоваровВозвратнаяТара
	|ГДЕ
	|	СписаниеТоваровВозвратнаяТара.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Если Строка.ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			Строка.ТипЗапасов = "ВозвратнаяТара";
		Иначе
			Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокТара = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		КонвертацииСвойствТара = Новый Соответствие;
		КонвертацииСвойствТара.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствТара.Вставить("Количество", "Количество");
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			
			СчетУчета = Неопределено;
			Если ЗначениеЗаполнено(СтрокаXDTO.СчетУчета) Тогда
				СчетУчета = БухгалтерскийСчетПоКоду(СтрокаXDTO.СчетУчета);
			КонецЕсли;
			
			Если ТипЗапасов = "ВозвратнаяТара" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствТара, СтрокаXDTO, СтруктураДанныхСтроки);
				Если ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",СчетУчета);
				КонецЕсли;
				МассивСтрокТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				
				Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
				КонецЕсли;
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				ИначеЕсли ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",СчетУчета);		
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	МассивСтрокИнвентарь    = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
			
		//Инвентарь
		КонвертацииСвойствИнвентарь = Новый Соответствие;
		КонвертацииСвойствИнвентарь.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствИнвентарь.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствИнвентарь.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		КонвертацииСвойствИнвентарь.Вставить("Количество", "Количество");
	
		РеквизитыМатериаловВЭксплуатации = Новый Структура("Организация,Склад,Дата");
		ЗаполнитьЗначенияСвойств(РеквизитыМатериаловВЭксплуатации, ПолученныеДанные);
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
					
			СтруктураСчетовУчета = БухгалтерскиеСчетаСтрокиXDTO(СтрокаXDTO, "СчетПередачи");
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиМатериаловВЭксплуатации(КомпонентыОбмена, СтрокаXDTO, РеквизитыМатериаловВЭксплуатации);
	
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СчетПередачи", СтруктураСчетовУчета.СчетПередачи);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СчетПередачи", СтруктураСчетовУчета.СчетПередачи);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствИнвентарь, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокИнвентарь.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
		
		Если МассивСтрокИнвентарь.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИнвентарьИХозяйственныеПринадлежности", МассивСтрокИнвентарь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеМатериаловИзЭксплуатации_Получени_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"СчетПередачи");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"СчетПередачи");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СписаниеТоваровТовары.Количество КАК Количество,
	|	СписаниеТоваровТовары.Цена КАК Цена,
	|	СписаниеТоваровТовары.Сумма КАК Сумма,
	|	СписаниеТоваровТовары.НомерГТД.Код КАК НомерГТД,
	|	СписаниеТоваровТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СписаниеТоваровТовары.СчетУчета КАК СчетУчетаСсылка,
	|	ЕСТЬNULL(СписаниеТоваровТовары.СчетУчета.Код, """") КАК СчетУчета,
	|	""Товары"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеТоваровВозвратнаяТара.НомерСтроки,
	|	СписаниеТоваровВозвратнаяТара.Номенклатура,
	|	СписаниеТоваровВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	СписаниеТоваровВозвратнаяТара.Количество,
	|	0,
	|	0,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	СписаниеТоваровВозвратнаяТара.СчетУчета,
	|	ЕСТЬNULL(СписаниеТоваровВозвратнаяТара.СчетУчета.Код, """"),
	|	""ВозвратнаяТара""
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК СписаниеТоваровВозвратнаяТара
	|ГДЕ
	|	СписаниеТоваровВозвратнаяТара.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Если Строка.ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			Строка.ТипЗапасов = "ВозвратнаяТара";
		Иначе
			Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеНедостач_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокТара = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		КонвертацииСвойствТара = Новый Соответствие;
		КонвертацииСвойствТара.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствТара.Вставить("Количество", "Количество");
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			
			СчетУчета = Неопределено;
			Если ЗначениеЗаполнено(СтрокаXDTO.СчетУчета) Тогда
				СчетУчета = БухгалтерскийСчетПоКоду(СтрокаXDTO.СчетУчета);
			КонецЕсли;
			
			Если ТипЗапасов = "ВозвратнаяТара" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствТара, СтрокаXDTO, СтруктураДанныхСтроки);
				Если ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",СчетУчета);
				КонецЕсли;
				МассивСтрокТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				
				Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
				КонецЕсли;
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				ИначеЕсли ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",СчетУчета);		
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеНедостач_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "К");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.ТипЗапасов.Значение <> "КомиссионныеТовары" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.Основание = "Сборка товаров № " + СокрЛП(ДанныеXDTO.КлючевыеСвойства.Номер) + " от " + ДанныеXDTO.КлючевыеСвойства.Дата;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СтавкаНДСВРознице, ОтражениеВУСН");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Ценообразование
Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЦенаУстановленаХотяБыВОднойСтроке = Ложь;
	Для Каждого СтрокаТовара ИЗ ДанныеИБ.Товары Цикл
		Если СтрокаТовара.Цена <> 0 Тогда
			ЦенаУстановленаХотяБыВОднойСтроке = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЦенаУстановленаХотяБыВОднойСтроке Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|		ПО Док.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка
	|			И (УстановкаЦенНоменклатурыТовары.Цена <> 0)
	|ГДЕ
	|	Док.Проведен
	|	И Док.Дата >= &ДатаНачала
	|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Индекс = Товары.Количество()-1;
	Пока Индекс >=0 Цикл
		Если Товары.Получить(Индекс).Цена = 0 Тогда
			Товары.Удалить(Индекс);
		КонецЕсли;
	 	Индекс = Индекс - 1;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                         
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьУстановкуЦенЦенамиТоваровИзДанныхИБ(ПолученныеДанные, ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Начальные_остатки
Функция ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК БанковскийСчет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|			ТОГДА ""Расчетный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Аккредитивы))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АккредитивыВал))
	|			ТОГДА ""Аккредитивы""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЧековыеКнижки))
	|			ТОГДА ""ЧековыеКнижки""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал))
	|			ТОГДА ""Депозитный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчета))
	|			ТОГДА ""Иной""
	|		ИНАЧЕ ""Иной""
	|	КОНЕЦ КАК ВидБанковскогоСчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток > 0 И ХозрасчетныйОстатки.Субконто1 <>  ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|	ХозрасчетныйОстатки.Субконто1
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата        = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");
		Колонки.Добавить("ВидБанковскогоСчета");
		Колонки.Добавить("БанковскийСчет");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Если ВыборкаДетальная.Сумма > 0 Тогда
				НоваяСтрока = ДенежныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоДтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетДт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И (Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					ИЛИ Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДокументыПоДтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоДт
	|ИЗ
	|	ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоДтВсе.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоДт
	|ИЗ
	|	ДатыПоследнихДокументовПоДт КАК ДатыПоследнихДокументовПоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|		ПО ДатыПоследнихДокументовПоДт.ДатаПоследнегоДвижения = ДокументыПоДтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоДт.ФизическоеЛицо = ДокументыПоДтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоДт.Организация = ДокументыПоДтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоДт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоДт КАК ПоследниеДокументыПоДт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоДт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоДт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "КредитыЗаймы");
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.Валюта,
	|	Таб.СуммаРегл,
	|	Таб.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация КАК Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|					И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы),
	|				,
	|				) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|		ХозрасчетныйОстатки.СуммаОстаток,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы), , ) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0) КАК Таб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таб.Организация,
	|	ЕСТЬNULL(Таб.Валюта, &ВалютаРегл)
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");	
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		Если ДенежныеСредства.Количество() > 0 Тогда
			
			ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
			
			МассивВыборки.Добавить(ДанныеИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаНМАЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаНМАЭталон.Колонки;
	КолонкиТаблицы.Добавить("НематериальныйАктив");
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	// Справочные данные НМА.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("ПрочиеСведения");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ВидОбъектаУчета");
	// Стоимость НМА.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьВР");
	// Принятие к учету НМА.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("ДатаПриобретения");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииНУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("КоэффициентБУ");
	КолонкиТаблицы.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияВР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(ТекущаяСтоимостьВР) 		КАК ТекущаяСтоимостьВР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР,
		|Сумма(НакопленнаяАмортизацияВР) КАК НакопленнаяАмортизацияВР
		|ПОМЕСТИТЬ ТаблицаСтоимостьНМА
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	ХозрасчетныйОстатки.СуммаВРОстаток 			КАК ТекущаяСтоимостьВР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР,
		|	0 											КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	0 											КАК ТекущаяСтоимостьВР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьНМА.Организация 								КАК Организация,
		|	ТаблицаСтоимостьНМА.Подразделение 								КАК Подразделение,
		|	ТаблицаСтоимостьНМА.НМА    										КАК НематериальныйАктив,
		|	ТаблицаСтоимостьНМА.НМА.Наименование 							КАК Наименование,
		|	ТаблицаСтоимостьНМА.НМА.Код 									КАК КодВПрограмме,
		// Справочные данные.
		|	ТаблицаСтоимостьНМА.НМА.НаименованиеПолное 						КАК НаименованиеПолное,
		|	ТаблицаСтоимостьНМА.НМА.ПрочиеСведения 							КАК ПрочиеСведения,
		|	ТаблицаСтоимостьНМА.НМА.АмортизационнаяГруппа 					КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьНМА.НМА.ВидОбъектаУчета 						КАК ВидОбъектаУчета,
		// Стоимость.
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьВР 							КАК ТекущаяСтоимостьВР,
		|	ПервоначальныеСведенияНМАБУ.ПервоначальнаяСтоимость 			КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияНМАНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияВР 					КАК НакопленнаяАмортизацияВР,
		|	ПервоначальныеСведенияНМАБУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюБУ,
		|	ПервоначальныеСведенияНМАНУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияНМАБУ.Коэффициент 						КАК КоэффициентБУ,
		|	ПервоначальныеСведенияНМАБУ.СпособНачисленияАмортизации 		КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияНМАНУ.МетодНачисленияАмортизации 			КАК СпособНачисленияАмортизацииНУ,
		|	ПервоначальныеСведенияНМАБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПервоначальныеСведенияНМАНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведенияНМАБУ.ОбъемПродукцииРаботДляВычисленияАмортизации	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаНМА.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		// Принятие к учету.
		|	ПервоначальныеСведенияНМАБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияНМАНУ.ДатаПриобретения 					КАК ДатаПриобретения,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СчетаУчетаНМА.СчетУчета.Код 									КАК СчетУчетаБУ,
		// Использование до 2009г.
		|	ПервоначальныеСведенияНМАНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияНМАНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьНМА КАК ТаблицаСтоимостьНМА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАБУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАБУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАНУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАНУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьНМА.НМА = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&ДатаОстатков, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьНМА.НМА = СобытиеПриемКУчету.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаНМА
		|ПО ТаблицаСтоимостьНМА.НМА = СчетаУчетаНМА.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СчетаУчетаНМА.Организация
		|ИТОГИ ПО
		|	ТаблицаСтоимостьНМА.Организация,
		|	ТаблицаСтоимостьНМА.Подразделение
		|";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, НематериальныеАктивы");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаНМА = ТаблицаНМАЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаНМА = ТаблицаНМА.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНМА, Выборка);
			КонецЦикла;
			ДанныеИБ.НематериальныеАктивы = ТаблицаНМА;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаОСЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаОСЭталон.Колонки;
	КолонкиТаблицы.Добавить("ОсновноеСредство");
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	КолонкиТаблицы.Добавить("ИнвентарныйНомер");
	КолонкиТаблицы.Добавить("МОЛ");
	// Справочные данные ОС.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("Комментарий");
	КолонкиТаблицы.Добавить("Изготовитель");
	КолонкиТаблицы.Добавить("ЗаводскойНомер");
	КолонкиТаблицы.Добавить("НомерПаспорта");
	КолонкиТаблицы.Добавить("ДатаВыпуска");
	// Стоимость ОС.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	// Принятие к учету ОС.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("НомерДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("НазваниеДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуСсылка");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуНаименование");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуВидСобытия");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчету");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ГруппаОС");
	КолонкиТаблицы.Добавить("КодПоОКОФ");
	КолонкиТаблицы.Добавить("ШифрПоЕНАОФ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиБУ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиНУ");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУСсылка");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентУскоренияБУ");
	КолонкиТаблицы.Добавить("ОбъемНаработкиБУ");
	КолонкиТаблицы.Добавить("ПоказательНаработки");
	КолонкиТаблицы.Добавить("ПоказательНаработкиСсылка");
	КолонкиТаблицы.Добавить("ПоказательНаработкиНаименование");
	КолонкиТаблицы.Добавить("ПоказательНаработкиЕдиницаИзмерения");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	КолонкиТаблицы.Добавить("НакопленнаяВыработка");
	// Модернизация ОС.
	КолонкиТаблицы.Добавить("ДатаПоследнейМодернизации");
	КолонкиТаблицы.Добавить("НазваниеДокументаМодернизации");
	КолонкиТаблицы.Добавить("НомерДокументаМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииСсылка");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииНаименование");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииВидСобытия");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.ОсновноеСредство,
		|Таб.Организация,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР
		|ПОМЕСТИТЬ ТаблицаСтоимостьОС
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|														ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.ОсновноеСредство,
		|Таб.Организация
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьОС.Организация 									КАК Организация,
		|	МестонахождениеОСБУ.Местонахождение 							КАК Подразделение,
		|	ТаблицаСтоимостьОС.ОсновноеСредство				 				КАК ОсновноеСредство,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Наименование 				КАК Наименование,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Код 						КАК КодВПрограмме,
		|	ЕстьNULL(ПервоначальныеСведенияОСБУ.ИнвентарныйНомер, """") 	КАК ИнвентарныйНомер,
		|	МестонахождениеОСБУ.МОЛ 										КАК МОЛ,
		// Справочные данные.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НаименованиеПолное 			КАК НаименованиеПолное,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Изготовитель 				КАК Изготовитель,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ЗаводскойНомер 				КАК ЗаводскойНомер,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НомерПаспорта 				КАК НомерПаспорта,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ДатаВыпуска 				КАК ДатаВыпуска,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Комментарий 				КАК Комментарий,
		// Стоимость.
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость 				КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияОСНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	НачислениеАмортизацииОСБУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюБУ,
		|	НачислениеАмортизацииОСНУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации 			КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки 					КАК ПоказательНаработкиСсылка,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.Наименование 		КАК ПоказательНаработкиНаименование,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.ЕдиницаИзмерения 	КАК ПоказательНаработкиЕдиницаИзмерения,
		|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРабот 					КАК ОбъемНаработкиБУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииБУ,
		|	ПараметрыАмортизацииОСНУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииНУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения 					КАК КоэффициентУскоренияБУ,
		|	ГрафикиАмортизацииОСБУ.ГрафикАмортизации 						КАК ГрафикАмортизацииБУСсылка,
		|	НачислениеАмортизацииОССпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаОС.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		|	ВыработкаОС.КоличествоОборот 									КАК НакопленнаяВыработка,
		// Принятие к учету.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ГруппаОС 					КАК ГруппаОС,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.АмортизационнаяГруппа 		КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ШифрПоЕНАОФ.Код 			КАК ШифрПоЕНАОФ,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.КодПоОКОФ.Код 				КАК КодПоОКОФ,
		|	ПервоначальныеСведенияОСБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости 			КАК ПорядокПогашенияСтоимостиБУ,
		|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокПогашенияСтоимостиНУ,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СобытиеПриемКУчету.НомерДокумента	 							КАК НомерДокументаПринятияКУчету,
		|	СобытиеПриемКУчету.Событие 										КАК СобытиеПринятияКУчетуСсылка,
		|	СобытиеПриемКУчету.Событие.Наименование 						КАК СобытиеПринятияКУчетуНаименование,
		|	СобытиеПриемКУчету.Событие.ВидСобытияОС 						КАК СобытиеПринятияКУчетуВидСобытия,
		|	СобытиеПриемКУчету.НазваниеДокумента							КАК НазваниеДокументаПринятияКУчету,
		|	СчетаУчетаОС.СчетУчета.Код 										КАК СчетУчетаБУ,
		// Модернизация.
		|	СобытиеМодернизация.Период			 							КАК ДатаПоследнейМодернизации,
		|	СобытиеМодернизация.НомерДокумента	 							КАК НомерДокументаМодернизации,
		|	СобытиеМодернизация.Событие 									КАК СобытиеМодернизацииСсылка,
		|	СобытиеМодернизация.Событие.Наименование 						КАК СобытиеМодернизацииНаименование,
		|	СобытиеМодернизация.Событие.ВидСобытияОС 						КАК СобытиеМодернизацииВидСобытия,
		|	СобытиеМодернизация.НазваниеДокумента							КАК НазваниеДокументаМодернизации,
		// Использование до 2009г.
		|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьОС КАК ТаблицаСтоимостьОС
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ГрафикиАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ГрафикиАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ГрафикиАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК МестонахождениеОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = МестонахождениеОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОССпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОССпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		|							ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеПриемКУчету.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)) КАК СобытиеМодернизация
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеМодернизация.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеМодернизация.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СчетаУчетаОС.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ВыработкаОС.Обороты(,&ДатаОстатков) КАК ВыработкаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ВыработкаОС.Организация
		|	И ПервоначальныеСведенияОСБУ.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
		|ИТОГИ ПО
		|	ТаблицаСтоимостьОС.Организация,
		|	МестонахождениеОСБУ.Местонахождение
		|";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, ОсновныеСредства");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаОС = ТаблицаОСЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаОС = ТаблицаОС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОС, Выборка);
			КонецЦикла;
			ДанныеИБ.ОсновныеСредства = ТаблицаОС;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоКтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетКт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И Регистратор ССЫЛКА Документ.АвансовыйОтчет,
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДокументыПоКтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоКт
	|ИЗ
	|	ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоКтВсе.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоКт
	|ИЗ
	|	ДатыПоследнихДокументовПоКт КАК ДатыПоследнихДокументовПоКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|		ПО ДатыПоследнихДокументовПоКт.ДатаПоследнегоДвижения = ДокументыПоКтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоКт.ФизическоеЛицо = ДокументыПоКтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоКт.Организация = ДокументыПоКтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоКт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоКт КАК ПоследниеДокументыПоКт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоКт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоКт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)
		|				И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеИзделия)))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС,
		|	Таб.СчетУчета
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	ТипыЗапасовФормата = Новый Массив();
	ТипыЗапасовФормата.Добавить("СырьеИМатериалы");
	ТипыЗапасовФормата.Добавить("ПокупныеПолуфабрикатыИКомплектующие");
	ТипыЗапасовФормата.Добавить("ВозвратнаяТара");
	ТипыЗапасовФормата.Добавить("Топливо");
	ТипыЗапасовФормата.Добавить("ЗапасныеЧасти");
	ТипыЗапасовФормата.Добавить("ПрочиеМатериалы");
	ТипыЗапасовФормата.Добавить("СтроительныеМатериалы");
	ТипыЗапасовФормата.Добавить("ИнвентарьИХозяйственныеПринадлежности");
	ТипыЗапасовФормата.Добавить("СпецоснасткаИСпецодеждаНаСкладе");
	ТипыЗапасовФормата.Добавить("СобственныеТовары");
	ТипыЗапасовФормата.Добавить("ПокупныеИзделия");
	ТипыЗапасовФормата.Добавить("ГотоваяПродукция");
	ТипыЗапасовФормата.Добавить("КомиссионныеТовары");
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.ТМЦ = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ТМЦ.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДетальныеЗаписи.ВидСтавкиНДС, ДатаОстатков);
			
			НоваяСтрока.ВидЗапасов = СокрЛП(ВыборкаДетальныеЗаписи.СчетУчета.ИмяПредопределенныхДанных);
			Если ТипыЗапасовФормата.Найти(НоваяСтрока.ВидЗапасов) = Неопределено Тогда
				НоваяСтрока.ВидЗапасов = "СобственныеТовары";
			КонецЕсли;
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.ТМЦ = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументПоступления,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент,
	|	ХозрасчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТараПодТоваромИПорожняя)), , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления
	|ИТОГИ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления";
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклады.Следующий() Цикл
			ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДокументыПоступления.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
				
				ДанныеИБ = Новый Структура("Дата, Организация, Склад, Тара, Контрагент");
				ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
				
				ДанныеИБ.Дата = ДатаОстатков;
				ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
				
				Тара = Новый ТаблицаЗначений;
				Колонки = Тара.Колонки;
				Колонки.Добавить("Номенклатура");
				Колонки.Добавить("СуммаБезНДС");
				Колонки.Добавить("Количество");
				Колонки.Добавить("КоличествоУпаковок");
				Колонки.Добавить("НомерГТД");
				Колонки.Добавить("ЕдиницаИзмерения");
				Колонки.Добавить("СтавкаНДС");
				Колонки.Добавить("СуммаНДС");
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
						НоваяСтрока = Тара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
						
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения,ВидСтавкиНДС");
						НоваяСтрока.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ДатаОстатков);
						
						СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеИБ.Тара = Тара;
				
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
		|	И ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстатки.Организация,
		|	Контрагент
		|ИТОГИ ПО
		|	Организация,
		|	Контрагент";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаКонтрагент = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
			
			ДанныеИБ = Новый Структура("Дата, Организация, Товары, Контрагент");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаКонтрагент);
			
			ДанныеИБ.Дата        = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			
			Товары = Новый ТаблицаЗначений;
			Колонки = Товары.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("КоличествоУпаковок");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения,ВидСтавкиНДС");
					НоваяСтрока.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ДатаОстатков);
					
					СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
				КонецЕсли;	
			КонецЦикла;
			
			ДанныеИБ.Товары = Товары;
			
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Функция ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент КАК Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента КАК Договор,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Количество) КАК КоличествоУпаковок,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад,
		|	Контрагент,
		|	Договор";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ТекКонтрагент = Неопределено;
	ТекДоговор = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекКонтрагент <> ВыборкаДетальныеЗаписи.Контрагент Тогда
			ТекКонтрагент = ВыборкаДетальныеЗаписи.Контрагент;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		
		Если ТекДоговор <> ВыборкаДетальныеЗаписи.Договор Тогда
			ТекДоговор = ВыборкаДетальныеЗаписи.Договор;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.Товары = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, Товары, Контрагент, Договор");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
			НоваяСтрока = ТМЦ.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ТМЦ.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДетальныеЗаписи.ВидСтавкиНДС, ДатаОстатков);
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.Товары = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// ДокументРасчетов
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
			
			ИмяПКО = "";
			Если ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
				Или ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
			ИначеЕсли ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;		
			
			Инструкция = Новый Структура("Значение,ИмяПКО", Строка.ДокументРасчетов, ИмяПКО);
			Строка.ДокументРасчетов = Инструкция;
			
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты, "КраткосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал, "КраткосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам, "ПроцентыПоКраткосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал, "ПроцентыПоКраткосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы, "КраткосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал, "КраткосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам, "ПроцентыПоКраткосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал, "ПроцентыПоКраткосрочнымЗаймам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты, "ДолгосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал, "ДолгосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам, "ПроцентыПоДолгосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал, "ПроцентыПоДолгосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы, "ДолгосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал, "ДолгосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам, "ПроцентыПоДолгосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал, "ПроцентыПоДолгосрочнымЗаймам");
	
	Для Каждого Строка Из ДанныеИБ.Расчеты Цикл
		Строка.ВидРасчетов = ПравилаКонвертации.Получить(Строка.ВидРасчетов);	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НематериальныеАктивы", ДанныеИБ.НематериальныеАктивы);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение свойств с типом КлючевыеСвойства в ТЧ ОС.
	Для Каждого СтрокаИБ ИЗ ДанныеИБ.ОсновныеСредства Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка)
			ИЛИ ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУ)) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеПринятияКУчетуНаименование, 
				СтрокаИБ.СобытиеПринятияКУчетуВидСобытия);
			СтрокаИБ.СобытиеПринятияКУчету = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеМодернизацииНаименование, 
				СтрокаИБ.СобытиеМодернизацииВидСобытия);
			СтрокаИБ.СобытиеМодернизации = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка)
			И ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения) Тогда
			ЕдиницаИзмеренияКлючевыеСвойства = Новый Структура("Ссылка, Код", 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения, 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения.Код);
			ПоказательНаработкиКлючевыеСвойства = Новый Структура("Наименование, ЕдиницаИзмерения", 
				СтрокаИБ.ПоказательНаработкиНаименование, 
				ЕдиницаИзмеренияКлючевыеСвойства);
			СтрокаИБ.ПоказательНаработки = ПоказательНаработкиКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУСсылка) Тогда
			ГрафикКлючевыеСвойства = Новый Структура("Наименование", СтрокаИБ.ГрафикАмортизацииБУСсылка.Наименование);
			Для ном = 1 По 12 Цикл
				ГрафикКлючевыеСвойства.Вставить("Коэффициент"+ном, 
					СтрокаИБ.ГрафикАмортизацииБУСсылка["Коэффициент"+ном]);
			КонецЦикла;
			СтрокаИБ.ГрафикАмортизацииБУ = ГрафикКлючевыеСвойства;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ОсновныеСредства", ДанныеИБ.ОсновныеСредства);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Тара", ДанныеИБ.Тара);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Базовые_классификаторы
Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
Функция ПОД_Справочник_Банки_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Код,
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	Банки.КоррСчет,
		|	Банки.Город,
		|	Банки.Адрес,
		|	Банки.ЭтоГруппа,
		|	Банки.Телефоны
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	НЕ Банки.ЭтоГруппа";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВыборки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Код,Наименование,КоррСчет,Город,Адрес,Телефоны,Ссылка,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);	
	
		МассивВыборки.Добавить(Структура);	
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
Процедура ПКО_Справочник_Банки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ИностранныйБанк", ДанныеИБ.Страна <> Справочники.СтраныМира.Россия);
КонецПроцедуры
Процедура ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		// Если валюта уже существует в базе,
		// то не перезатираем ее данные.
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = Лев(ДанныеИБ.Наименование, 4);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторТНВЭД_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	МассивТНВЭД = КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД;
	МассивТНВЭД.Добавить(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(),
		ДанныеИБ.Ссылка));
КонецПроцедуры
Процедура ПКО_Справочник_СтраныМира_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено
		И ЗначениеЗаполнено(ПолученныеДанные.Код) Тогда
		
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(ПолученныеДанные.Код);
		Если ДанныеСтраны <> Неопределено Тогда
			ПолученныеДанные.УчастникЕАЭС = ДанныеСтраны.УчастникЕАЭС;
			ЗаполнитьРеквизитыИзДанныхИБ(ПолученныеДанные, ДанныеСтраны, "Наименование,НаименованиеПолное,КодАльфа2,КодАльфа3,МеждународноеНаименование");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Контрагенты
Функция ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ Справочник.ДоговорыКонтрагентов
	|ГДЕ ЭтоГруппа = Ложь";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КонтрагентыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ИспользуетсяПриОбменеДанными = Истина;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		// Головная организация находится в ключевых свойствах, поэтому уже при конвертации данных она будет заполнена.
		ПолученныеДанные.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПолученныеДанные.Организация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПолученныеДанные.Наименование = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НДСПоСтавкам4и2") Тогда
		ПолученныеДанные.НДСПоСтавкам4и2 = ДанныеXDTO.НДСПоСтавкам4и2;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СрокКонтроляОплатыВДнях") Тогда
		ПолученныеДанные.УстановленСрокОплаты = ЗначениеЗаполнено(ПолученныеДанные.СрокОплаты);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	Если ДанныеИБ = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Вставить(ПолученныеДанные.ПолучитьСсылкуНового(), Истина);
	Иначе
		Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией 
			ИЛИ ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией Тогда
			
			// Если в информационной базе найден договор с факторингом или транспорной компанией, то вид договора у него затирать не нужно.
			// Достаточно изменить ключевые свойства: номер, дата, наименование. Остальные данные не сохраняются.
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Номер,Дата,Наименование");
			
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	// Договор "с транспортной компанией" является разновидностью договора "с комиссионером"
	ИначеЕсли ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ДанныеИБ.ВидДоговора);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.0.beta") Тогда
		Если СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 50 Тогда
			ДанныеXDTO.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 50);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоЗагрузкаКлючевыхСвойств = ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO);
	
	УстановитьПоляПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
		ПолученныеДанные.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	
	// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
	// не удаляются, если этих значений нет в полученных данных.
	// Если значение есть - то оно обновляется.
	
	ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Номенклатура
Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ВидыНоменклатур" добавлен в версии 1.6.
	ИспользованиеПКО.Справочник_ВидыНоменклатуры_Отправка = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6");
КонецПроцедуры
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатурнаяГруппа_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатурныеГруппыГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СпецификацииНоменклатурыГруппа_Отправка = ДанныеИБ.ЭтоГруппа
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6");
КонецПроцедуры
Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ШтрихкодыНоменклатуры" добавлен в версии 1.4, во всех более ранних его выгружать не нужно.
	// Кроме этого не нужно выгружать и если количество записей - нулевое, это может быть при удалении записей.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4")
		ИЛИ ДанныеИБ.Количество() = 0  Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ ДанныеИБ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда	
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.Услуга Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", "Услуга");
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", "Товар");
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипНоменклатуры")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры.Значение = "Работа"
			ИЛИ ДанныеXDTO.КлючевыеСвойства.ТипНоменклатуры.Значение = "Услуга" Тогда
			ПолученныеДанные.Услуга = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
	КонецЕсли;
		
	ДанныеXDTO.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.СтавкаНДС(ДанныеИБ.ВидСтавкиНДС, ТекущаяДатаСеанса()));
	
	Если ЗначениеЗаполнено(ДанныеИБ.КодНоменклатурнойКлассификацииККТ) Тогда
		КодВидаНоменклатурнойКлассификации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КодНоменклатурнойКлассификацииККТ, "Код");
		ДанныеXDTO.Вставить("КодВидаНоменклатурнойКлассификации", КодВидаНоменклатурнойКлассификации);
	КонецЕсли;
	
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Услуга Тогда 
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
		Иначе
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
		КонецЕсли;
		
		//Код ТНВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодТНВЭД)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодТНВЭД) Тогда
			
			ДанныеXDTO.Вставить("КодТНВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКВЭД
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКВЭД)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКВЭД) Тогда
			
			ДанныеXDTO.Вставить("КодОКВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКВЭД, "Код, Наименование"));
		КонецЕсли;
		
		//Код КодОКП
		Если ЗначениеЗаполнено(ДанныеИБ.КодОКП)
			И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.КодОКП) Тогда
			
			ДанныеXDTO.Вставить("КодОКП", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодОКП, "Код, Наименование"));
		КонецЕсли;
	Иначе	
		ДанныеXDTO.Вставить("ТипНоменклатуры", "");
		ДанныеXDTO.Вставить("НаименованиеПолное", "");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ВидПродукцииИС = ВидПродукцииИСНоменклатуры(ДанныеИБ);
	Если ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		ДанныеXDTO.Вставить("ВидПродукцииИС", ВидПродукцииИС);
	КонецЕсли;
	
	#Область ДанныеАлкогольнойПродукции
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК АлкогольнаяПродукция,
		|	ВЫБОР КОГДА Таб.НаименованиеВида169 = """" ТОГДА
		|		НаименованиеВида129
		|	ИНАЧЕ Таб.НаименованиеВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Наименование,
		|	ВЫБОР КОГДА Таб.КодВида169 = """" ТОГДА
		|		КодВида129
		|	ИНАЧЕ Таб.КодВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Код,
		|	ВЫБОР КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво) ТОГДА
		|		""Пиво""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция) ТОГДА
		|		""АлкогольнаяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяПищеваяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяНеПищеваяПродукция""
		|	КОНЕЦ КАК ВидАлкогольнойПродукции_ВидЛицензии,
		|	ВЫБОР
		|		КОГДА Спр.Импортер <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмпортнаяАлкогольнаяПродукция,
		|	Таб.КоэффПересчетаДал КАК ОбъемДАЛ,
		|	ВЫБОР
		|		КОГДА НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Спр.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА Спр.Производитель
		|					ИНАЧЕ Спр.Импортер
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК ПроизводительИмпортер
		|ИЗ
		|	Справочник.Номенклатура КАК Спр
		|		СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК Таб
		|		ПО Спр.Ссылка = Таб.Номенклатура
		|ГДЕ
		|	Спр.Ссылка = &Ссылка И Таб.Номенклатура is not null");
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ПроизводительИмпортер");
	ДанныеXDTO.Вставить("ОбъемДАЛ");
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции");
	Если Выборка.Следующий() И Выборка.АлкогольнаяПродукция Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, Выборка);
		ДанныеВидАК = Новый Структура("Код, Наименование, ВидЛицензии",
					Выборка.ВидАлкогольнойПродукции_Код,
					Выборка.ВидАлкогольнойПродукции_Наименование,
					Выборка.ВидАлкогольнойПродукции_ВидЛицензии);
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", ДанныеВидАК);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоЗагрузкаКлючевыхСвойств = ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO);
	
	УстановитьПоляПоискаНоменклатуры(КомпонентыОбмена, ЭтоЗагрузкаКлючевыхСвойств);
	
	Если ЭтоЗагрузкаКлючевыхСвойств Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СтавкаНДС")
		И ЗначениеЗаполнено(ДанныеXDTO.СтавкаНДС) Тогда
		ПКПД_СтавкиНДС = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("Перечисление_СтавкиНДС", "ИмяПКПД");
		СтавкаНДС = ПКПД_СтавкиНДС.КонвертацииЗначенийПриПолучении.Получить(ДанныеXDTO.СтавкаНДС.Значение);
		ПолученныеДанные.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	КонецЕсли;
	
	// Сведения об алкогольной продукции
	
	Если ДанныеXDTO.Свойство("АлкогольнаяПродукция") И ДанныеXDTO.АлкогольнаяПродукция Тогда
		Если ДанныеXDTO.Свойство("ВидАлкогольнойПродукции") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидАлкогольнойПродукции", ДанныеXDTO.ВидАлкогольнойПродукции);
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ОбъемДАЛ") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ОбъемДАЛ", ДанныеXDTO.ОбъемДАЛ);
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("ПроизводительИмпортер") Тогда
			Если ДанныеXDTO.Свойство("ИмпортнаяАлкогольнаяПродукция") И ДанныеXDTO.ИмпортнаяАлкогольнаяПродукция Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Импортер", ДанныеXDTO.ПроизводительИмпортер);
			Иначе
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Производитель", ДанныеXDTO.ПроизводительИмпортер);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДанныеXDTO.Свойство("ВидПродукцииИС") И ЗначениеЗаполнено(ДанныеXDTO.ВидПродукцииИС) Тогда
		
		 ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидПродукцииИС", ДанныеXDTO.ВидПродукцииИС.Значение);
	
	КонецЕсли;
	
	// ТипНоменклатуры
	ТипНоменклатуры = ДанныеXDTO.ТипНоменклатуры.Значение;
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
		ПолученныеДанные.Услуга = Истина;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КодВидаНоменклатурнойКлассификации") 
		И ЗначениеЗаполнено(ДанныеXDTO.КодВидаНоменклатурнойКлассификации) Тогда
	
		ПолученныеДанные.КодНоменклатурнойКлассификацииККТ = Справочники.КлассификаторВидовНоменклатурыЧекаККТ.ЭлементКлассификатораПоКоду(
			ДанныеXDTO.КодВидаНоменклатурнойКлассификации);
			
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	#Область ДанныеАлкогольнойПродукции
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВидАлкогольнойПродукции") Тогда
		ПолученныеДанные_ВидАлкогольнойПродукции = ПолученныеДанные.ДополнительныеСвойства.ВидАлкогольнойПродукции;
		
		ВидАлкогольнойПродукции_Код = "";
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("Код") Тогда
			ВидАлкогольнойПродукции_Код = ПолученныеДанные_ВидАлкогольнойПродукции.Код;
		КонецЕсли;
		
		ВидЛицензии = Неопределено;
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("ВидЛицензии") Тогда
			ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя[СокрЛП(ПолученныеДанные_ВидАлкогольнойПродукции.ВидЛицензии.Значение)];
		КонецЕсли;
		
		ВидАлкогольнойПродукции_Наименование = "";
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("Наименование") Тогда
			ВидАлкогольнойПродукции_Наименование = ПолученныеДанные_ВидАлкогольнойПродукции.Наименование;
		Иначе
			ВидАлкогольнойПродукции_Наименование = ВидЛицензии;
		КонецЕсли;
		
		// Проверка записей регистра сведений
		СоздаватьЗаписьСведенийАК = Истина;
		Если ДанныеИБ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Номенклатура
			|ИЗ РегистрСведений.СведенияОбАлкогольнойПродукции
			|ГДЕ Номенклатура = &Номенклатура
			|	И (НаименованиеВида129 = &Наименование ИЛИ НаименованиеВида169 = &Наименование)";
			
			Запрос.УстановитьПараметр("Наименование", ВидАлкогольнойПродукции_Наименование);
			Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
			Если ЗначениеЗаполнено(ВидАлкогольнойПродукции_Код) Тогда
				Запрос.Текст = Запрос.Текст + " И (КодВида129 = &Код ИЛИ КодВида169 = &Код)";
				Запрос.УстановитьПараметр("Код", ВидАлкогольнойПродукции_Код);
			КонецЕсли;
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОбъемДАЛ")
				И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ) Тогда
				Запрос.Текст = Запрос.Текст +
				"
				| И (КоэффПересчетаДал = &КоэффПересчетаДал)";
				Запрос.УстановитьПараметр("КоэффПересчетаДал", ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ);
			КонецЕсли;
	
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СоздаватьЗаписьСведенийАК = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СоздаватьЗаписьСведенийАК Тогда
			Если ДанныеИБ = Неопределено Тогда
				НоменклатураСсылка = ПолученныеДанные.ПолучитьСсылкуНового();
			Иначе
				НоменклатураСсылка = ДанныеИБ.Ссылка;
			КонецЕсли;
			СведенияАлк = РегистрыСведений.СведенияОбАлкогольнойПродукции.СоздатьНаборЗаписей();
			СведенияАлк.Отбор.Номенклатура.Установить(НоменклатураСсылка);
			ЗаписьАлк = СведенияАлк.Добавить();
			ЗаписьАлк.Номенклатура = НоменклатураСсылка;
			ЗаписьАлк.НаименованиеВида129 = ВидАлкогольнойПродукции_Наименование;
			ЗаписьАлк.НаименованиеВида169 = ВидАлкогольнойПродукции_Наименование;
			ЗаписьАлк.КодВида129 = ВидАлкогольнойПродукции_Код;
			ЗаписьАлк.КодВида169 = ВидАлкогольнойПродукции_Код;
			ЗаписьАлк.ВидЛицензии = ВидЛицензии;	
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОбъемДАЛ") Тогда
				ЗаписьАлк.КоэффПересчетаДал = ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ;
			КонецЕсли;
			СведенияАлк.Записать();
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Если ДанныеИБ <> Неопределено Тогда
	
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ОсновнаяСпецификацияНоменклатуры");
		ЗаполняемыеРеквизиты.Добавить("СтранаПроисхождения");
		ЗаполняемыеРеквизиты.Добавить("НоменклатурнаяГруппа");
		ЗаполняемыеРеквизиты.Добавить("ВидНоменклатуры");
		ЗаполняемыеРеквизиты.Добавить("ВидСтавкиНДС");
		ЗаполняемыеРеквизиты.Добавить("Импортер");
		ЗаполняемыеРеквизиты.Добавить("Производитель");
		ЗаполняемыеРеквизиты.Добавить("КодНоменклатурнойКлассификацииККТ");
		ЗаполняемыеРеквизиты.Добавить("Комментарий");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
	КонецЕсли;
	 
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеИБ <> Неопределено Тогда
		ПризнакУслугиВСсылкеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Услуга");
		Если ПризнакУслугиВСсылкеОбъекта <> ПолученныеДанные.Услуга Тогда
			ДанныеИБ.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВидПродукцииИС")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ВидПродукцииИС) Тогда
		
		ЗаполнитьПризнакиВидаПродукцииИС(ДанныеДляЗаписиВИБ, ПолученныеДанные.ДополнительныеСвойства.ВидПродукцииИС);
		
	КонецЕсли;
	
	// Заполнение номенклатурной группы по умолчанию.
	Если  Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.НоменклатурнаяГруппа) Тогда
		ДанныеДляЗаписиВИБ.НоменклатурнаяГруппа = КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	НомерГТД = "";
	Если ДанныеXDTO.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.Код;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	ПолученныеДанные.Код = НомерГТД;
КонецПроцедуры
Процедура ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Спецификация", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	|	ИсходныеКомплектующие.Количество КАК Количество,
	|	1 КАК ДоляСтоимости
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК ИсходныеКомплектующие
	|ГДЕ
	|	ИсходныеКомплектующие.Ссылка = &Спецификация И ИсходныеКомплектующие.Количество <> 0";
	
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", ДанныеИБ.Родитель);	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсходныеКомплектующие", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ВалютаЦены) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВалютаЦены, "Справочник_Валюты"));
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", Константы.ВалютаРегламентированногоУчета.Получить(), "Справочник_Валюты"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаЦены.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаЦены, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ШтрихкодОтбор") Тогда
		Штрихкод = ДанныеXDTO.ШтрихкодОтбор;
	Иначе
		Штрихкод = ДанныеXDTO.Штрихкод;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Штрихкод", Штрихкод);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_Номенклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Номенклатура_Получение");
		
	Штрихкод = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
	
	ПолученныеДанные.Отбор.Штрихкод.Значение = Штрихкод;
	ПолученныеДанные.Отбор.Штрихкод.Использование = Истина;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Штрихкод     = Штрихкод;
			СтрокаЗаписи.Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Номенклатура, 
				ПКО_Номенклатура, 
				"ПолучитьСсылку").Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	Иначе
		ДанныеXDTO.Вставить("ШтрихкодОтбор", ДанныеИБ.Отбор.Штрихкод.Значение);
	КонецЕсли;
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("Номенклатура");
	Записи.Колонки.Добавить("Штрихкод");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		СтрокаЗаписи.Штрихкод = СтрокаНабора.Штрихкод;
		СтрокаЗаписи.Номенклатура = СтрокаНабора.Номенклатура;
		ДанныеXDTO.Вставить("НоменклатураОтбор", СтрокаНабора.Номенклатура);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",  "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",    "Количество");
	
	#Область ВложенныеТовары
	
	// Вложенные товары. 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("ВложенныеТовары")
		И ЗначениеЗаполнено(ДанныеXDTO.ВложенныеТовары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ВложенныеТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если НЕ СтруктураДанныхСтроки.Свойство("КоличествоУпаковок")
				И СтруктураДанныхСтроки.Свойство("Количество") Тогда
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
		
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВложенныеТовары", МассивСтрокТовары);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если СтрДлина(ПолученныеДанные.ЗначениеШтрихкода) = 150 Тогда
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
	
	ОтборЗаполненКорректно = ОтборРегистраСведенийЗаполненКорректно(ДанныеИБ.Отбор, "Физлицо,ВидДокумента");
	
	// Объект формата "Справочник.ДокументыФизическихЛиц" добавлен в версии 1.3.
	Если ОтборЗаполненКорректно
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Должности_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
Процедура ПОД_Справочник_Должности_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
Процедура ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.ЛицензииПоставщиковАлкогольнойПродукции_Отправка = Ложь;
	
	ОтборЗаполненКорректно = ОтборРегистраСведенийЗаполненКорректно(ДанныеИБ.Отбор, "Поставщик");
	
	// Объект формата "Справочник.ЛицензииПоставщиковАлкогольнойПродукции" добавлен в версии 1.3.
	Если ОтборЗаполненКорректно
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.ЛицензииПоставщиковАлкогольнойПродукции_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ ДанныеИБ.Количество() = 0  Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;	
	КонецЕсли;
	
	СсылкаНаОбъект = ДанныеИБ.Отбор.СсылкаНаОбъект.Значение;
	ИмяПКООснованиеЭД = ИмяПКОПоТипуЗначенияДокумента(СсылкаНаОбъект);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	СостояниеЭлектронногоДокумента        = ТаблицаЗаписи[0].СостояниеВерсииЭД;
	СостояниеОбменаЭДНаНашейСтороне       = ТаблицаЗаписи[0].ДействияСНашейСтороны;
	СостояниеОбменаЭДНаСторонеКонтрагента = ТаблицаЗаписи[0].ДействияСоСтороныДругогоУчастника;
	
	Если НЕ ЗначениеЗаполнено(ИмяПКООснованиеЭД) Или НЕ ЗначениеЗаполнено(СостояниеЭлектронногоДокумента)
		Или НЕ ЗначениеЗаполнено(СостояниеОбменаЭДНаНашейСтороне)
		Или НЕ ЗначениеЗаполнено(СостояниеОбменаЭДНаСторонеКонтрагента)
		Или СостояниеОбменаЭДНаНашейСтороне = Перечисления.СводныеСостоянияЭД.ПригласитьКОбмену
		Или СостояниеОбменаЭДНаСторонеКонтрагента = Перечисления.СводныеСостоянияЭД.ПригласитьКОбмену Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
					Новый Структура("Значение, ИмяПКО", СсылкаНаОбъект, ИмяПКООснованиеЭД));
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеЭлектронногоДокумента", СостояниеЭлектронногоДокумента);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеОбменаЭДНаНашейСтороне", СостояниеОбменаЭДНаНашейСтороне);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеОбменаЭДНаСторонеКонтрагента", СостояниеОбменаЭДНаСторонеКонтрагента);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостоянияЭД_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяПКОДокумента = ИмяПКОДокументаПоТипуXDTO(ДанныеXDTO.КлючевыеСвойства.ОснованиеЭлектронногоДокумента);
		
	Если ИмяПКОДокумента = Неопределено Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запись = ДанныеИБ[0];
	ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", Запись.Поставщик);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", Запись.СерияНомер);
	ДанныеXDTO.Вставить("ВидЛицензии", Запись.ВидЛицензии);
	Если Запись.Период <> Дата(1900,1,1) Тогда
		ДанныеXDTO.Вставить("ДатаНачала", Запись.Период);
	КонецЕсли;
	ДанныеXDTO.Вставить("КемВыдана", Запись.КемВыдана);
	ДанныеXDTO.Вставить("ДатаОкончания", Запись.ДатаОкончания);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
	ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидДокумента");
	Записи.Колонки.Добавить("Период");
	Записи.Колонки.Добавить("Серия");
	Записи.Колонки.Добавить("Номер");
	Записи.Колонки.Добавить("ДатаВыдачи");
	Записи.Колонки.Добавить("КемВыдан");
	Записи.Колонки.Добавить("КодПодразделения");
	Записи.Колонки.Добавить("СрокДействия");
	Записи.Колонки.Добавить("Представление");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор", ДанныеXDTO.ВидДокументаОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", ДанныеXDTO.ПериодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор", ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
				
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
		
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;		
	КонецЕсли;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ВидДокумента, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
			СтрокаЗаписи.Период        = Строка.Период;
			СтрокаЗаписи.Серия         = Строка.Серия;
			СтрокаЗаписи.Номер         = Строка.Номер;
			СтрокаЗаписи.Представление = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи    = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия  = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан      = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = ЯвляетсяДокументомУдостоверяющимЛичностьИзБазы(
				ФизЛицоСсылка, СтрокаЗаписи.ВидДокумента, Строка.Период);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Поставщик", ДанныеXDTO.КлючевыеСвойства.Контрагент);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидЛицензии", ДанныеXDTO.ВидЛицензии);
	
	Если ДанныеXDTO.Свойство("ДатаНачала") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Период", ДанныеXDTO.ДатаНачала);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Наименование") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерияНомер", ДанныеXDTO.КлючевыеСвойства.Наименование);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КемВыдана") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КемВыдана", ДанныеXDTO.КемВыдана);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ДатаОкончания") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаОкончания", ДанныеXDTO.ДатаОкончания);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_Контрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Контрагенты_Получение");
	
	Поставщик = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.Поставщик, 
				ПКО_Контрагент, 
				"ПолучитьСсылку").Ссылка;
				
	ВидЛицензии = Неопределено;
	ВидЛицензииXDTO = ПолученныеДанные.ДополнительныеСвойства.ВидЛицензии.Значение;
	Если ВидЛицензииXDTO = "АлкогольнаяПродукция" Тогда
		ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция;
	ИначеЕсли ВидЛицензииXDTO = "Пиво" Тогда
		ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя.Пиво;
	ИначеЕсли ВидЛицензииXDTO = "СпиртосодержащаяНеПищеваяПродукция" Тогда
		ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция;
	ИначеЕсли ВидЛицензииXDTO = "СпиртосодержащаяПищеваяПродукция" Тогда
		ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция;
	КонецЕсли;
	
	Период = Дата(1900,1,1);
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Период", Период) И ЗначениеЗаполнено(Период) Тогда
		Период = ПолученныеДанные.ДополнительныеСвойства.Период;
		ПолученныеДанные.Отбор.Период.Установить(Период);
	КонецЕсли;
	
	ПолученныеДанные.Отбор.Поставщик.Установить(Поставщик);
	ПолученныеДанные.Отбор.ВидЛицензии.Установить(ВидЛицензии);
	
	Запись = ПолученныеДанные.Добавить();
	Запись.Период = Период;
	Запись.Поставщик = Поставщик;
	Запись.ВидЛицензии = ВидЛицензии;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("СерияНомер") Тогда
		Запись.СерияНомер = ПолученныеДанные.ДополнительныеСвойства.СерияНомер;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("КемВыдана") Тогда
		Запись.КемВыдана = ПолученныеДанные.ДополнительныеСвойства.КемВыдана;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДатаОкончания") Тогда
		Запись.ДатаОкончания = ПолученныеДанные.ДополнительныеСвойства.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Дополнительные реквизиты, которые есть в данных ИБ
	// не удаляются, если этих значений нет в полученных данных.
	
	ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.ОснованиеЭлектронногоДокумента);
		
	ДанныеXDTO.Вставить("СостояниеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.СостояниеЭлектронногоДокумента);
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаНашейСтороне",
		ДанныеИБ.ДополнительныеСвойства.СостояниеОбменаЭДНаНашейСтороне);
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаСторонеКонтрагента",
		ДанныеИБ.ДополнительныеСвойства.СостояниеОбменаЭДНаСторонеКонтрагента);
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЭД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	XDTOДокумента = ДанныеXDTO.КлючевыеСвойства.ОснованиеЭлектронногоДокумента;
	
	СсылкиНаДокументы = Новый Массив;
	
	ИменаПКО = ИменаПКОДокументаПоТипуXDTO(XDTOДокумента);
	Для Каждого ИмяПКО Из ИменаПКО Цикл
		
		СсылкаНаПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		ОписаниеПравила = Новый Структура("ПравилоКонвертации, УдалятьСозданныеПоКлючевымСвойствам",
			СсылкаНаПКО, Истина);
		СсылкаНаДокумент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, XDTOДокумента, ОписаниеПравила, "ПолучитьСсылку").Ссылка;
		СсылкиНаДокументы.Добавить(СсылкаНаДокумент);
		
	КонецЦикла;
					
	СсылкаНаДокумент = Неопределено;
	
	Для Каждого СсылкаНаДокументДляПроверки Из СсылкиНаДокументы Цикл
		
		Если ПолученныеДанные.Отбор.СсылкаНаОбъект.ТипЗначения.ПривестиЗначение(СсылкаНаДокументДляПроверки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкаНаДокумент = СсылкаНаДокументДляПроверки;
	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентыОбмена.ПараметрыКонвертации.ДокументыСостоянийЭД.Вставить(СсылкаНаДокумент, СсылкиНаДокументы);
	
	// Записываем набор по первому документу. Затем, в ПослеЗагрузкиВсехДанных мы добавим дополнительные записи (если будет нужно).
	ПолученныеДанные.Отбор.СсылкаНаОбъект.Значение = СсылкаНаДокумент;
	ПолученныеДанные.Отбор.СсылкаНаОбъект.Использование = Истина;
	
	ПолученныеДанные.Прочитать();
	
	НовоеСостояниеЭД = ЗначениеПеречисленияПоИдентификатору(ДанныеXDTO.СостояниеЭлектронногоДокумента.Значение, "СостоянияВерсийЭД");
	Если НовоеСостояниеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		СтрокаЗаписи = ПолученныеДанные[0];
	Иначе
		СтрокаЗаписи = ПолученныеДанные.Добавить();
	КонецЕсли;
	
	СтрокаЗаписи.СсылкаНаОбъект = СсылкаНаДокумент;
	СтрокаЗаписи.СостояниеВерсииЭД = НовоеСостояниеЭД;
	СтрокаЗаписи.ДействияСНашейСтороны = ЗначениеПеречисленияПоИдентификатору(ДанныеXDTO.СостояниеОбменаЭДНаНашейСтороне.Значение, "СводныеСостоянияЭД");
	СтрокаЗаписи.ДействияСоСтороныДругогоУчастника = ЗначениеПеречисленияПоИдентификатору(ДанныеXDTO.СостояниеОбменаЭДНаСторонеКонтрагента.Значение, "СводныеСостоянияЭД");
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.ФИО);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	ЗагрузитьДополнительныеСведения(ФизЛицоСсылка, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
	// не удаляются, если этих значений нет в полученных данных.
	// Если значение есть - то оно обновляется.
	ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СкладыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_СкладыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Склады_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидСчета) Тогда
		ЗначениеXDTOВидСчета = "Иной";
		Если ВРег(ДанныеИБ.ВидСчета) = "РАСЧЕТНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Расчетный";
		ИначеЕсли ВРег(ДанныеИБ.ВидСчета) = "ДЕПОЗИТНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Депозитный";
		ИначеЕсли ВРег(ДанныеИБ.ВидСчета) = "ССУДНЫЙ" Тогда
			ЗначениеXDTOВидСчета = "Ссудный";
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидСчета", ЗначениеXDTOВидСчета);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец: выбираем ПКО в зависимости от типа владельца. 
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
	
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ИначеЕсли Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = "Расчетный";
	Если ДанныеXDTO.Свойство("ВидСчета")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = ДанныеXDTO.ВидСчета.Значение;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВалютаДенежныхСредств")
		И ЗначениеЗаполнено(ДанныеXDTO.ВалютаДенежныхСредств) Тогда
		
		Если ДанныеXDTO.ВалютаДенежныхСредств.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаДенежныхСредств", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ВалютаДенежныхСредств, ИмяПКО));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ДатаОткрытия");
		ЗаполняемыеРеквизиты.Добавить("ДатаЗакрытия");
		ЗаполняемыеРеквизиты.Добавить("Наименование");
		ЗаполняемыеРеквизиты.Добавить("НомерИДатаРазрешения");
		ЗаполняемыеРеквизиты.Добавить("ТекстКорреспондента");
		ЗаполняемыеРеквизиты.Добавить("ТекстНазначения");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	КодОКАТО = "";
	Если ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
		КодОКАТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО");
	КонецЕсли;
	ДанныеXDTO.Вставить("ОКАТО", КодОКАТО);
	ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	Если ДанныеXDTO.Свойство("ОКАТО") И ЗначениеЗаполнено(ДанныеXDTO.ОКАТО) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОКАТО", ДанныеXDTO.ОКАТО);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ФизическоеЛицо") И ЗначениеЗаполнено(ДанныеXDTO.ФизическоеЛицо) Тогда
		ДанныеXDTO.ФизическоеЛицо.Свойство("Фамилия",  ПолученныеДанные.ФамилияИП);
		ДанныеXDTO.ФизическоеЛицо.Свойство("Имя",      ПолученныеДанные.ИмяИП);
		ДанныеXDTO.ФизическоеЛицо.Свойство("Отчество", ПолученныеДанные.ОтчествоИП);
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ГоловнаяОрганизация) Тогда
		ПолученныеДанные.ГоловнаяОрганизация = ПолученныеДанные.Ссылка;
	КонецЕсли;
	// Заполнение регистрации в налоговом органе.
	Если ЗначениеЗаполнено(ПолученныеДанные.КПП) И ПолученныеДанные.ДополнительныеСвойства.Свойство("ОКАТО") Тогда
		ЗаполнятьРегистрациюВНалОргане = Истина;
		// Возможно, регистрация в Нал органе уже заполнена
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
			ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО,КПП");
			Если ДанныеРегистрации.КПП = ПолученныеДанные.КПП
				И ДанныеРегистрации.КодПоОКАТО = ПолученныеДанные.ДополнительныеСвойства.ОКАТО Тогда
				ЗаполнятьРегистрациюВНалОргане = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнятьРегистрациюВНалОргане Тогда
			Если ДанныеИБ = Неопределено Тогда
				РегистрацияВНалОргане = НайтиСоздатьРегистрациюВНалоговомОргане(ПолученныеДанные.КПП, 
																ПолученныеДанные.ДополнительныеСвойства.ОКАТО,
																ПолученныеДанные.ПолучитьСсылкуНового(),
																Ложь);
				Если ЗначениеЗаполнено(РегистрацияВНалОргане) Тогда
					ПолученныеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалОргане;
				КонецЕсли;
			Иначе
				РегистрацияВНалОргане = НайтиСоздатьРегистрациюВНалоговомОргане(ПолученныеДанные.КПП, 
														ПолученныеДанные.ДополнительныеСвойства.ОКАТО,
														ДанныеИБ.Ссылка,
														Истина);
				Если ЗначениеЗаполнено(РегистрацияВНалОргане) Тогда
					ДанныеИБ.РегистрацияВНалоговомОргане = РегистрацияВНалОргане;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ИндивидуальныйПредприниматель");
		ЗаполняемыеРеквизиты.Добавить("ФамилияИП");
		ЗаполняемыеРеквизиты.Добавить("ИмяИП");
		ЗаполняемыеРеквизиты.Добавить("ОтчествоИП");
		ЗаполняемыеРеквизиты.Добавить("ОсновнойБанковскийСчет");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеСокращенное");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеПолное");
		ЗаполняемыеРеквизиты.Добавить("ОГРН");
		ЗаполняемыеРеквизиты.Добавить("Префикс");
		ЗаполняемыеРеквизиты.Добавить("СвидетельствоДатаВыдачи");
		ЗаполняемыеРеквизиты.Добавить("СвидетельствоСерияНомер");
	
		ЗаполняемыеРеквизиты.Добавить("КодПоОКПО");
		ЗаполняемыеРеквизиты.Добавить("КодОрганаПФР");
		ЗаполняемыеРеквизиты.Добавить("РегистрационныйНомерПФР");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеТерриториальногоОрганаПФР");
		ЗаполняемыеРеквизиты.Добавить("РегистрационныйНомерФСС");
		ЗаполняемыеРеквизиты.Добавить("КодПодчиненностиФСС");
		ЗаполняемыеРеквизиты.Добавить("ДополнительныйКодФСС");
		ЗаполняемыеРеквизиты.Добавить("КодОКВЭД");
		ЗаполняемыеРеквизиты.Добавить("КодОКВЭД2");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеОКВЭД");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеОКВЭД2");
		ЗаполняемыеРеквизиты.Добавить("КодОКФС");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеОКОПФ");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеОКФС");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
		// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
		// не удаляются, если этих значений нет в полученных данных.
		// Если значение есть - то оно обновляется.
	
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
	
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	
	Если КлючевыеСвойства.Свойство("РегистрацияПодразделенияВНалоговомОргане") Тогда
	
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("КПП") Тогда
			ПолученныеДанные.КПП = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.КПП;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("НаименованиеОбособленногоПодразделения") Тогда
			ПолученныеДанные.НаименованиеПолное = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.НаименованиеОбособленногоПодразделения;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("НаименованиеОбособленногоПодразделения") Тогда
			ПолученныеДанные.НаименованиеПолное = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.НаименованиеОбособленногоПодразделения;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("ЦифровойИндексОбособленногоПодразделения") Тогда
			ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
	
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
		
	Если ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Владелец, "КПП, ГоловнаяОрганизация");
		Если ЗначениеЗаполнено(ПолученныеДанные.КПП)
			И ПолученныеДанные.КПП <> РеквизитыОрганизации.КПП Тогда
			ПолученныеДанные.ОбособленноеПодразделение = Истина;
		КонецЕсли;
		ПолученныеДанные.ГоловнаяОрганизация = РеквизитыОрганизации.ГоловнаяОрганизация;
	КонецЕсли;
	
	// Заполняем сведения о подразделении, если они заполнены в полученных данных.
	// Если в полученных данных эти сведения не указаны, оставляем текущие значения.
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения) Тогда
			ДанныеИБ.ЦифровойИндексОбособленногоПодразделения = ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные.НаименованиеПолное) Тогда
			ДанныеИБ.НаименованиеПолное = ПолученныеДанные.НаименованиеПолное;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные.КПП) Тогда
			ДанныеИБ.КПП = ПолученныеДанные.КПП;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка"));
		
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		Если ТипЗнч(ДанныеИБ.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		КонецЕсли;
		ДанныеXDTO.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Представитель, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Организация, "Справочник_Организации_Получение"));
	
	ИмяПКО = "Справочник_Контрагенты_Получение";
	Если ЗначениеЗаполнено(ДанныеXDTO.Представитель) Тогда
		Если Найти(ДанныеXDTO.Представитель.ТипЗначения, "ФизическиеЛица") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Представитель, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеXDTO.Вставить("МОЛ", ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(ДанныеИБ.Ссылка, ТекущаяДатаСеанса()));
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("МОЛ") И ЗначениеЗаполнено(ДанныеXDTO.МОЛ) Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ПКОФизЛицо = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		МОЛ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.МОЛ,
			ПКОФизЛицо, "ПолучитьСсылку").Ссылка;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МОЛ", МОЛ);
	КонецЕсли;
				
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.ТипСклада)Тогда
		ПолученныеДанные.ТипСклада = ДанныеИБ.ТипСклада;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.ТипЦенРозничнойТорговли) Тогда
		ПолученныеДанные.ТипЦенРозничнойТорговли = ДанныеИБ.ТипЦенРозничнойТорговли;
	КонецЕсли;
	
	МОЛ = "";
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("МОЛ", МОЛ) Тогда
		Если ЗначениеЗаполнено(МОЛ) Тогда
			Отбор = Новый Структура("СтруктурнаяЕдиница");
			Склад = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
			Отбор.СтруктурнаяЕдиница = Склад;
			СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);
			Если СрезПоследних.Количество() = 0 Тогда 
				МенеджерЗаписи = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период             = ТекущаяДата();
				МенеджерЗаписи.СтруктурнаяЕдиница = Склад;
				МенеджерЗаписи.ФизическоеЛицо     = МОЛ;
				Попытка
					МенеджерЗаписи.Записать();
				Исключение
				КонецПопытки
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Финансовая_аналитика
Процедура ПОД_Справочник_ПрочиеДоходыРасходы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДоходов_Отправка  = Ложь;
	ИспользованиеПКО.Справочник_СтатьиРасходов_Отправка = Ложь;
	
	// Определим, для каких счетов используется статья прочих доходов и расходов
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	И ХозрасчетныйСубконто.Значение = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.ВидДвижения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Значение = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДвижения = ВидДвиженияБухгалтерии.Кредит Тогда
			ИспользованиеПКО.Справочник_СтатьиДоходов_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Справочник_СтатьиРасходов_Отправка = Истина;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС       = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2");
КонецПроцедуры
Процедура ПОД_Справочник_СтатьиРасходов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	УИД = ДанныеXDTO.КлючевыеСвойства.Ссылка.Значение;
		
		СсылкаСтатьяЗатрат = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(УИД, Тип("СправочникСсылка.СтатьиЗатрат"), КомпонентыОбмена);
		СсылкаПрочиеДоходыИРасходы = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(УИД, Тип("СправочникСсылка.ПрочиеДоходыИРасходы"), КомпонентыОбмена);
		
		Если Не СсылкаСтатьяЗатрат.Получитьобъект() = Неопределено Тогда
			ИспользованиеПКО.Вставить("Справочник_СтатьиРасходов_СтатьиЗатрат", Истина);
		КонецЕсли;
		
		Если Не СсылкаПрочиеДоходыИРасходы.Получитьобъект() = Неопределено Тогда
			ИспользованиеПКО.Вставить("Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы", Истина);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
			ДанныеXDTO.Вставить("Группа", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Родитель, "Справочник_СтатьиДДСГруппа"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДДС_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2") Тогда
		Если ДанныеXDTO.Свойство("Группа") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель", Новый Структура("Значение, ИмяПКО", 
															ДанныеXDTO.Группа, "Справочник_СтатьиДДСГруппа"));
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель)
			И Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, НСтр("ru='Д'"));
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, НСтр("ru='Р'"));
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств);
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьРеквизитПеречислимогоТипаИзСвойства(ПолученныеДанные,
			ДанныеXDTO,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			"ВидыДеятельностиДляНалоговогоУчетаЗатрат");
		
		ЗаполнитьРеквизитПеречислимогоТипаИзСвойства(ПолученныеДанные,
			ДанныеXDTO,
			"ВидРасходовНУ",
			"ВидРасходовПоОсновнойДеятельности",
			"ВидыРасходовНУ");
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьРеквизитыИзДанныхИБ(ПолученныеДанные, ДанныеИБ,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат, ВидРасходовНУ");
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

#КонецОбласти
#Область Документы_Ведомости
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда;
	Если ДанныеXDTO.Свойство("СпособРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.СпособРасчетов) Тогда
		ПолученныеДанные.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами[ДанныеXDTO.СпособРасчетов];
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Зарплата") Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо",  "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("Сумма",           "Сумма");
		ПравилаЗаполнения.Вставить("БанковскийСчет",  "БанковскийСчет");
		ПравилаЗаполнения.Вставить("ВзысканнаяСумма", "ВзысканнаяСумма");
		
		ЕстьВзысканныеСуммы = Ложь;
		Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда
			ЕстьВзысканныеСуммы = ДанныеXDTO.AdditionalInfo.Свойство("ВзысканныеСуммы");
		КонецЕсли;
	
		Зарплата = Новый Массив;
	
		Для Каждого Строка Из ДанныеXDTO.Зарплата Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЕстьВзысканныеСуммы Тогда
				СтрокиВзыскания = ДанныеXDTO.AdditionalInfo.ВзысканныеСуммы.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Строка.ИдентификаторСтроки));
				Если СтрокиВзыскания.Количество() <> 0 Тогда
					СтруктураДанныхСтроки.Вставить("ВзысканнаяСумма", СтрокиВзыскания[0].ВзысканнаяСумма);
				КонецЕсли;
			КонецЕсли;
			Зарплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Зарплата", Зарплата);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ДепонированиеЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Взаиморасчеты
Процедура ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Конвертации табличных частей
	МассивСтрокДебиторскаяЗадолженность = Новый Массив;
	МассивСтрокКредиторскаяЗадолженность = Новый Массив;
	КонвертацииСвойств = Новый Соответствие;
	КонвертацииСвойств.Вставить("ДоговорКонтрагента", "Договор");
	КонвертацииСвойств.Вставить("Сумма", "Сумма");
	КонвертацииСвойств.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
	КонвертацииСвойств.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
	КонвертацииСвойств.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	КонвертацииСвойств.Вставить("Сделка", "ДокументРасчетов");
	
	Если ДанныеXDTO.Свойство("ДебиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.ДебиторскаяЗадолженность) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.ДебиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			
			Если СтруктураДанныхСтроки.Свойство("Сделка")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.Сделка) Тогда
				
				ДокументРасчетов = СтруктураКонвертацииДокументаРасчетов(СтрокаXDTO.ДокументРасчетов);
				
				Если ДокументРасчетов <> Неопределено Тогда
					СтруктураДанныхСтроки.Вставить("Сделка", ДокументРасчетов);
				Иначе
					СтруктураДанныхСтроки.Удалить("Сделка");
				КонецЕсли;
				
			КонецЕсли;
				
			МассивСтрокДебиторскаяЗадолженность.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("КредиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.КредиторскаяЗадолженность) Тогда
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КредиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
	
			Если СтруктураДанныхСтроки.Свойство("Сделка")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.Сделка) Тогда
	
				ДокументРасчетов = СтруктураКонвертацииДокументаРасчетов(СтрокаXDTO.ДокументРасчетов);
				
				Если ДокументРасчетов <> Неопределено Тогда
					СтруктураДанныхСтроки.Вставить("Сделка", ДокументРасчетов);
				Иначе
					СтруктураДанныхСтроки.Удалить("Сделка");
				КонецЕсли;
	
			КонецЕсли;
	
			МассивСтрокКредиторскаяЗадолженность.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДебиторскаяЗадолженность.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДебиторскаяЗадолженность", МассивСтрокДебиторскаяЗадолженность);
	КонецЕсли;
	Если МассивСтрокКредиторскаяЗадолженность.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КредиторскаяЗадолженность", МассивСтрокКредиторскаяЗадолженность);
	КонецЕсли;
	
	//Для операции "Списание задолженности" даже если задолженность кредиторская, на форму выводится контрагент-дебитор
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КонтрагентДебитор) Тогда
			ПолученныеДанные.КонтрагентДебитор = ПолученныеДанные.КонтрагентКредитор;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СчетДт")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетДт) Тогда
		ПолученныеДанные.СчетДт = БухгалтерскийСчетПоКоду(ДанныеXDTO.СчетДт);
		
		Если ЗначениеЗаполнено(ПолученныеДанные.СчетДт)
			И ДанныеXDTO.Свойство("СтатьяРасходов")
			И ЗначениеЗаполнено(ДанныеXDTO.СтатьяРасходов) Тогда
			ЗаполнитьСтатьюЗатратВСубконто(ПолученныеДанные.ДополнительныеСвойства, "СубконтоДт", ПолученныеДанные.СчетДт, ДанныеXDTO.СтатьяРасходов);
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СчетКт")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетКт) Тогда
		ПолученныеДанные.СчетКт = БухгалтерскийСчетПоКоду(ДанныеXDTO.СчетКт);
		
		Если ЗначениеЗаполнено(ПолученныеДанные.СчетКт)
			И ДанныеXDTO.Свойство("СтатьяДоходов")
			И ЗначениеЗаполнено(ДанныеXDTO.СтатьяДоходов) Тогда
			ЗаполнитьСтатьюДоходовВСубконто(ПолученныеДанные.ДополнительныеСвойства, "СубконтоКт", ПолученныеДанные.СчетКт, ДанныеXDTO.СтатьяДоходов);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	КорректировкаДолга_ПередЗаписьюПолученныхДанных(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Зарплата
Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//********************************************************************************
	Если ДанныеXDTO.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("ПодразделениеРегламентированногоУчета", "Подразделение");
		ПравилаЗаполнения.Вставить("СпособОтраженияЗарплатыВФинансовомУчете", "СпособОтраженияЗарплатыВБухучете");
		ПравилаЗаполнения.Вставить("ОблагаетсяЕНВД", "ОблагаетсяЕНВД");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("ВидНачисленияОплатыТрудаДляНУ", "ВидНачисленияОплатыТрудаДляНУ");
		ПравилаЗаполнения.Вставить("ПериодПринятияРасходов", "ПериодПринятияРасходов");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("ПФРДоПредельнойВеличины", "ПФРДоПредельнойВеличины");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка");
		ПравилаЗаполнения.Вставить("ПФРНаДоплатуЛетчикам", "ПФРНаДоплатуЛетчикам");
		ПравилаЗаполнения.Вставить("ПФРНаДоплатуШахтерам", "ПФРНаДоплатуШахтерам");
		ПравилаЗаполнения.Вставить("ПФРНакопительная", "ПФРНакопительная");
		ПравилаЗаполнения.Вставить("ПФРПоСуммарномуТарифу", "ПФРПоСуммарномуТарифу");
		ПравилаЗаполнения.Вставить("ПФРСПревышения", "ПФРСПревышения");
		ПравилаЗаполнения.Вставить("ПФРСтраховая", "ПФРСтраховая");
		ПравилаЗаполнения.Вставить("ТФОМС", "ТФОМС");
		ПравилаЗаполнения.Вставить("ФФОМС", "ФФОМС");
		ПравилаЗаполнения.Вставить("ФСС", "ФСС");
		ПравилаЗаполнения.Вставить("ФССНесчастныеСлучаи", "ФССНесчастныеСлучаи");
		
		НачисленнаяЗарплатаИВзносы = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.НачисленнаяЗарплатаИВзносы Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
					СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("ВидНачисленияОплатыТрудаДляНУ") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидНачисленияОплатыТрудаДляНУ) Тогда
					СтруктураДанныхСтроки.Вставить("ВидНачисленияОплатыТрудаДляНУ", Перечисления.ВидыНачисленийОплатыТрудаДляНУ[СтруктураДанныхСтроки.ВидНачисленияОплатыТрудаДляНУ]);
	            КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
					СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
	            КонецЕсли;
	            НачисленнаяЗарплатаИВзносы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленнаяЗарплатаИВзносы", НачисленнаяЗарплатаИВзносы);
	
	КонецЕсли;
	
	//********************************************************************************
	Если ДанныеXDTO.Свойство("НачисленныйНДФЛ") Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("ОКАТО", "КодПоОКАТО");
		ПравилаЗаполнения.Вставить("ОКТМО", "КодПоОКТМО");
		ПравилаЗаполнения.Вставить("КПП", "КПП");
		ПравилаЗаполнения.Вставить("НалоговыйОрган", "КодНалоговогоОргана");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		НачисленныйНДФЛ = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.НачисленныйНДФЛ Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
					СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
					СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
	            КонецЕсли;
	            НачисленныйНДФЛ.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленныйНДФЛ", НачисленныйНДФЛ);
	
	КонецЕсли;
	
	//********************************************************************************
	Если ДанныеXDTO.Свойство("УдержаннаяЗарплата") Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ПодразделениеРегламентированногоУчета", "Подразделение");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("ЯвляетсяОснованиемОформленияКассовогоЧека", "ЯвляетсяОснованиемОформленияКассовогоЧека");
		ПравилаЗаполнения.Вставить("ОписаниеУдержанияДляЧека", "ОписаниеУдержанияДляЧека");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		УдержаннаяЗарплата = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.УдержаннаяЗарплата Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
					СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
					СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
	            КонецЕсли;
	            УдержаннаяЗарплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УдержаннаяЗарплата", УдержаннаяЗарплата);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НачислениеОценочныхОбязательств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры

#КонецОбласти
#Область Документы_Казначейство_Кредиты_и_депозиты
Процедура ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Содержание = "";
	ЭтоЗаймСотрудника = Ложь;
	ДоговорКонтрагента = Неопределено;
	ПолученныеДанные.СуммаОперации = ДанныеXDTO.Начисления.Итог("Сумма");
	
	Если ДанныеXDTO.ВидОперации.Значение = "ЗаймыВыданныеСотрудникам" тогда
		Содержание = "Займы выданные сотрудникам";
		ЭтоЗаймСотрудника = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "КредитыПолученные" тогда
		Содержание = "Кредиты полученные";
	КонецЕсли;
	
	ПолученныеДанные.Содержание = Содержание;
	
	МассивСтрок = Новый Массив;
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Для каждого Начисление из ДанныеXDTO.Начисления Цикл
		
		СтруктураДанныхСтроки = Новый Структура;
		Субконто = Новый Соответствие;
		
		СтруктураДанныхСтроки.Вставить("Период", Начисление.Дата);
		СтруктураДанныхСтроки.Вставить("Организация", ПолученныеДанные.Организация);
		
		ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Валюты");
		ВалютаВзаиморасчетов = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Начисление.ВалютаВзаиморасчетов, ПКОВалюты, "ПолучитьСсылку").Ссылка;
		
		Если Начисление.Контрагент.ТипЗначения = "ФизическоеЛицо" Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
			ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Начисление.Контрагент,
				ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
		Иначе
			ИмяПКО = "Справочник_Контрагенты_Получение";
			ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Начисление.Контрагент,
				ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				
			Если ЗначениеЗаполнено(Начисление.Договор) Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Начисление.Договор,
					ПКОДоговор, "ПолучитьСсылку").Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СчетДт = БухгалтерскийСчетПоКоду(Начисление.СчетДт);
		СчетКт = БухгалтерскийСчетПоКоду(Начисление.СчетКт);
		Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
			Если ЭтоЗаймСотрудника тогда
				СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
			Иначе
				СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
			Если ЭтоЗаймСотрудника тогда
				СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			ИначеЕсли ЗначениеЗаполнено(Начисление.СрочностьКредитаЗайма)
				И Начисление.СрочностьКредитаЗайма.Значение = "Краткосрочный" Тогда
				Если ВалютаВзаиморасчетов = ВалютаРегл Тогда
					СчетКт = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам;
				Иначе
					СчетКт = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал;
				КонецЕсли;
			Иначе
				Если ВалютаВзаиморасчетов = ВалютаРегл Тогда
					СчетКт = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам;
				Иначе
					СчетКт = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал;
				КонецЕсли;
			КонецЕсли;
		КонецЕСли;
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
				СтруктураДанныхСтроки.Вставить("СчетДт", СчетДт);
				ДанныеСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
				Если ДанныеСчетаДт.Валютный Тогда
					СтруктураДанныхСтроки.Вставить("ВалютнаяСуммаДт", Начисление.СуммаВзаиморасчетов);
					СтруктураДанныхСтроки.Вставить("ВалютаДт", ВалютаВзаиморасчетов);
				КонецЕслИ;
				
				Если ЭтоЗаймСотрудника Тогда
					Субконто.Вставить("РаботникиОрганизаций", Контрагент);
					Субконто.Вставить("ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПроцентыПоЗаймамСотрудникам"));
				Иначе
					Субконто.Вставить("Контрагенты", Контрагент);
					Субконто.Вставить("Договоры", ДоговорКонтрагента);
					Субконто.Вставить("ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
					Субконто.Вставить("РеализуемыеАктивы", Контрагент);
				КонецЕсли;
				
				Если ДанныеСчетаДт.НалоговыйУчет Тогда
					СтруктураДанныхСтроки.Вставить("СуммаНУДт", Начисление.Сумма);
				КонецЕсли;
	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
				СтруктураДанныхСтроки.Вставить("СчетКт", СчетКт);
				ДанныеСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
				Если ДанныеСчетаКт.Валютный Тогда
					СтруктураДанныхСтроки.Вставить("ВалютнаяСуммаКт", Начисление.СуммаВзаиморасчетов);
					СтруктураДанныхСтроки.Вставить("ВалютаКт", ВалютаВзаиморасчетов);
				КонецЕслИ;
				
				Если ЭтоЗаймСотрудника Тогда
					Субконто.Вставить("РаботникиОрганизаций", Контрагент);
					Субконто.Вставить("ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПроцентыПоЗаймамСотрудникам"));
				Иначе
					Субконто.Вставить("Контрагенты", Контрагент);
					Субконто.Вставить("Договоры", ДоговорКонтрагента);
					Субконто.Вставить("ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
					Субконто.Вставить("РеализуемыеАктивы", Контрагент);
				КонецЕсли;
				
				Если ДанныеСчетаКт.НалоговыйУчет Тогда
					СтруктураДанныхСтроки.Вставить("СуммаНУКт", Начисление.Сумма);
				КонецЕсли;
	
		КонецЕсли;
		
		СодержаниеПроводки = Строка(Начисление.ТипСуммыГрафика.Значение);
		СтруктураДанныхСтроки.Вставить("Содержание", СодержаниеПроводки);
		СтруктураДанныхСтроки.Вставить("Субконто", Субконто);
		
		СтруктураДанныхСтроки.Вставить("Сумма", Начисление.Сумма);
		СтруктураДанныхСтроки.Вставить("ВалютнаяСумма", Начисление.СуммаВзаиморасчетов);
		МассивСтрок.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Движения", МассивСтрок);
КонецПроцедуры
Процедура ПКО_Документ_НачислениеКредитовДепозитов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Движения") Тогда
		ДанныеИБ.ДополнительныеСвойства.Вставить("Движения", ПолученныеДанные.ДополнительныеСвойства.Движения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Документы_Казначейство_Подотчетники
Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("НалогообложениеНДСПродавца", НалогообложениеДокументаПоступленияПоУмолчанию(КомпонентыОбмена, ДанныеИБ));
	
	//Табличные части
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ,
	|	ВидДокВходящий Как НаименованиеВходящегоДокумента
	|ИЗ Документ.АвансовыйОтчет.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Контрагент,
	|	Ложь,
	|	null,
	|	null,
	|	null
	|ИЗ Документ.АвансовыйОтчет.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	#КонецОбласти
	#Область ВыданныеАвансы
	Если ДанныеИБ.ВыданныеАвансы.Количество() > 0 Тогда
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Документ");
		ТаблицаАвансы.Колонки.Добавить("Сумма");
	
		Для Каждого Строка ИЗ ДанныеИБ.ВыданныеАвансы Цикл
			ИмяПКО = "";
			ТипДокумента = ТипЗнч(Строка.ДокументАванса);
			Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
	           ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	        Иначе
	        	Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАвансы.Добавить();
			СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументАванса, ИмяПКО);
			СтрокаТаблицы.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДокументАванса, "СуммаДокумента");
		КонецЦикла;
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	#КонецОбласти
	#Область ОплатаПоставщикам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагент,
	|   ДоговорКонтрагента КАК Договор,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|   КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов,
	|   СуммаВзаиморасчетов,
	|   Сумма,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|	СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	Сделка КАК ДанныеДокументаРасчетов
	|ИЗ Документ.АвансовыйОтчет.ОплатаПоставщикам
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОплатаПоставщикам = РезультатЗапроса.Выгрузить();
	Если ТаблицаОплатаПоставщикам.Количество() > 0 Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
			ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаОплатаПоставщикам, "ОчищатьНеНайденные");
			ДанныеXDTO.Вставить("ОплатаКонтрагентам", ТаблицаОплатаПоставщикам);
		Иначе
			ДанныеXDTO.Вставить("ОплатаПоставщикам", ТаблицаОплатаПоставщикам);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	#Область Прочее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ,
	|	ВидДокВходящий Как НаименованиеВходящегоДокумента
	|ИЗ Документ.АвансовыйОтчет.Прочее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПрочее = РезультатЗапроса.Выгрузить();
	Если ТаблицаПрочее.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПрочиеРасходы", ТаблицаПрочее);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;
	
	ПолученныеДанные.НДСВключенВСтоимость = НДСВключенВСтоимостьПоНалогообложению(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные, "НалогообложениеНДСПродавца");
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("ПодразделениеЗатрат")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.ПодразделениеЗатрат) Тогда
				ДобавитьОрганизациюВПодразделениеXDTO(СтруктураДанныхСтроки.ПодразделениеЗатрат, ДанныеXDTO.КлючевыеСвойства.Организация);
				ДобавитьПодразделениеДляЗаполненияАналитики(КомпонентыОбмена, СтруктураДанныхСтроки, "ПодразделениеЗатрат", СтруктураДанныхСтроки.ПодразделениеЗатрат);
			КонецЕсли;
			
			СчетЗатрат = Неопределено;
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = БухгалтерскийСчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
				КонецЕсли;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
				ДобавитьАналитикуЗатратВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, "Субконто,СубконтоНУ", Строка.СтатьяЗатрат, СчетЗатрат);
			КонецЕсли;
		
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
			
		Для Каждого Строка Из ДанныеXDTO.ОплатаПоставщикам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически);
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаКонтрагентам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаКонтрагентам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		ПравилаЗаполнения.Вставить("СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаКонтрагентам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СпособПогашенияЗадолженности) Тогда
				СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности", Перечисления.СпособыПогашенияЗадолженности.Автоматически);		
			ИначеЕсли ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ИмяПКО = ИмяПКОДокументаПоТипуXDTO(Строка.ДокументРасчетов);
				Если ЗначениеЗаполнено(ИмяПКО) Тогда
					Инструкция = Новый Структура();
					Инструкция.Вставить("Значение", Строка.ДокументРасчетов); 
					Инструкция.Вставить("ИмяПКО", ИмяПКО);
					СтруктураДанныхСтроки.Вставить("Сделка", Инструкция);
				КонецЕсли;
			КонецЕсли;
					 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура();
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"ДокументАванса", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "НДСВключенВСтоимость");
		
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ВосстанавливаемыеПоля = "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
				ВосстанавливаемыеПоля = ВосстанавливаемыеПоля + ", ВидДокВходящий, СпособПогашенияЗадолженности, Сделка";
			КонецЕсли;
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				ВосстанавливаемыеПоля);
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("НомерГТД");
			МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетУчета,СчетУчетаНДС, ОтражениеВУСН, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
	
			Если ДанныеИБ.Проведен Тогда
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, ОтражениеВУСН, СчетУчетаНДС, ПодразделениеЗатрат, БланкСтрогойОтчетности";
			Иначе
				ЗаполняемыеРеквизиты = "ВидДокВходящий, СчетФактура, ОтражениеВУСН, СчетУчетаНДС, БланкСтрогойОтчетности";
			КонецЕсли;
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				ЗаполняемыеРеквизиты);
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Прочее") Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("Прочее", ПолученныеДанные.ДополнительныеСвойства.Прочее);
		КонецЕсли;
	
		ПолученныеДанные = Неопределено;
		УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);		
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Документы_Покупка_и_продажа_Комиссионная_торговля
Процедура ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("СчетЗатрат")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетЗатрат) Тогда
		
		СчетЗатрат = БухгалтерскийСчетПоКоду(ДанныеXDTO.СчетЗатрат);
		Если ЗначениеЗаполнено(СчетЗатрат) Тогда
			
			ПолученныеДанные.СчетУчетаЗатрат = СчетЗатрат;
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПолученныеДанные.СчетУчетаЗатрат);
			Если СвойстваСчета.УчетПоПодразделениям
				И ДанныеXDTO.Свойство("ПодразделениеЗатрат")
				И ЗначениеЗаполнено(ДанныеXDTO.ПодразделениеЗатрат) Тогда
				ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
			КонецЕсли;
			
			Если ДанныеXDTO.Свойство("СтатьяЗатрат")
				И ЗначениеЗаполнено(ДанныеXDTO.СтатьяЗатрат) Тогда
				ЗаполнитьСтатьюЗатратВСубконто(ПолученныеДанные.ДополнительныеСвойства, "Субконто", ПолученныеДанные.СчетУчетаЗатрат, ДанныеXDTO.СтатьяЗатрат);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	КлючиСтрокиТовары = Новый Соответствие;
	КлючиСтрокиВозвраты = Новый Соответствие;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратыТоваров = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаПередачи", "СуммаПередачи");
		ПравилаЗаполнения.Вставить("СуммаВознаграждения", "СуммаВознаграждения");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаПередачи", "ЦенаПередачи");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения", "СуммаНДСВознаграждения");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("КлючСтроки", "КлючСтроки");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("Коэффициент",1);
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(Строка.НомерГТД));
			КонецЕсли;
			
			Если Строка.Количество < 0 Тогда
			   	ИзменитьЗнакРеквизитовСтруктуры(СтруктураДанныхСтроки, "Количество,Сумма,СуммаПередачи,Себестоимость,СуммаВознаграждения,СуммаНДС,СуммаНДСВознаграждения");
			   	Если СтруктураДанныхСтроки.Свойство("СуммаПередачи") Тогда
			   		СтруктураДанныхСтроки.Вставить("Себестоимость", СтруктураДанныхСтроки.СуммаПередачи);
			   	КонецЕсли;
			    МассивСтрокВозвратыТоваров.Добавить(СтруктураДанныхСтроки);
				КлючиСтрокиВозвраты.Вставить(СтруктураДанныхСтроки.КлючСтроки, Истина);
			Иначе
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				КлючиСтрокиТовары.Вставить(СтруктураДанныхСтроки.КлючСтроки, Истина);
			КонецЕсли;
			
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратыТоваров.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТоварыВозвращенные", МассивСтрокВозвратыТоваров);
		КонецЕсли;
	КонецЕсли;
	
	// Покупатели и возвраты
	МассивСтрокПокупатели = Новый Массив;
	МассивСтрокВозвраты = Новый Массив;
	Если ДанныеXDTO.Свойство("Покупатели")
		И ЗначениеЗаполнено(ДанныеXDTO.Покупатели) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("ВыставленСФ", "ВыставленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("СчетФактура", "СчетФактура");
		ПравилаЗаполнения.Вставить("КлючСтроки", "КлючСтроки");
		Для Каждого Строка Из ДанныеXDTO.Покупатели Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			ДатаСФЗаполнено = СтруктураДанныхСтроки.Свойство("ДатаСФ") И ЗначениеЗаполнено(СтруктураДанныхСтроки.ДатаСФ);
			Если НЕ ДатаСФЗаполнено
				И СтруктураДанныхСтроки.Свойство("СчетФактура")
				И ТипЗнч(СтруктураДанныхСтроки.СчетФактура) = Тип("Структура")
				И СтруктураДанныхСтроки.СчетФактура.Свойство("Дата") Тогда
				СтруктураДанныхСтроки.Вставить("ДатаСФ", НачалоДня(СтруктураДанныхСтроки.СчетФактура.Дата));
			КонецЕсли;
			
			Если КлючиСтрокиТовары.Получить(СтруктураДанныхСтроки.КлючСтроки) <> Неопределено Тогда
				МассивСтрокПокупатели.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			Если КлючиСтрокиВозвраты.Получить(СтруктураДанныхСтроки.КлючСтроки) <> Неопределено Тогда
				МассивСтрокВозвраты.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокПокупатели.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Покупатели", МассивСтрокПокупатели);
		КонецЕсли;
		Если МассивСтрокВозвраты.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Возвраты", МассивСтрокВозвраты);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СпособЗачетаАвансов) Тогда
		ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;				
							
	Если ДанныеИБ <> Неопределено Тогда
	
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
						
		//Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("Цена");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("НомерГТД");
		МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
		МассивКлючевыхПолей.Добавить("СуммаПередачи");
		МассивКлючевыхПолей.Добавить("СуммаВознаграждения");
		МассивКлючевыхПолей.Добавить("ЦенаПередачи");
		МассивКлючевыхПолей.Добавить("СуммаНДСВознаграждения");
		МассивКлючевыхПолей.Добавить("КлючСтроки");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, КодТНВЭД");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		//Возвраты товаров
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("Цена");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("НомерГТД");
		МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
		МассивКлючевыхПолей.Добавить("Себестоимость");
		МассивКлючевыхПолей.Добавить("СуммаВознаграждения");
		МассивКлючевыхПолей.Добавить("СуммаНДСВознаграждения");
		МассивКлючевыхПолей.Добавить("КлючСтроки");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.ТоварыВозвращенные,
			ДанныеИБ.ТоварыВозвращенные,
			МассивКлючевыхПолей,
			"СчетУчета,СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации");
		ДанныеИБ.ТоварыВозвращенные.Загрузить(ПолученныеДанные.ТоварыВозвращенные.Выгрузить());
	
		//Покупатели
		ДанныеИБ.Покупатели.Загрузить(ПолученныеДанные.Покупатели.Выгрузить());
		
		//Возвраты
		ДанныеИБ.Возвраты.Загрузить(ПолученныеДанные.Возвраты.Выгрузить());
	
		// Зачет авансов
		ДанныеИБ.ЗачетАвансов.Загрузить(ПолученныеДанные.ЗачетАвансов.Выгрузить());
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Покупатели Цикл
	
		Если Не ЗначениеЗаполнено(Строка.ДатаСФ) Тогда
			Строка.ДатаСФ = ДанныеДляЗаписиВИБ.Дата;
		КонецЕсли;	
	
		Если Не ЗначениеЗаполнено(Строка.Покупатель) Тогда
			Строка.Покупатель = ДанныеДляЗаписиВИБ.Контрагент;
		КонецЕсли;	
	
	КонецЦикла;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаПоступления", "СуммаПоступления");
		ПравилаЗаполнения.Вставить("СуммаВознаграждения", "СуммаВознаграждения");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаПоступления", "ЦенаПоступления");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения", "СуммаНДСВознаграждения");
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("ДатаРеализации", "ДатаРеализации");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Производство
Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "В");
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеЗатрат");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратныеОтходы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
			ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратныеОтходы,
		ДанныеИБ.ВозвратныеОтходы,
		МассивКлючевыхПолей,
		"Цена, Сумма, Счет, СтатьяЗатрат, ОтражениеВУСН, НоменклатурнаяГруппа");
	ДанныеИБ.ВозвратныеОтходы.Загрузить(ПолученныеДанные.ВозвратныеОтходы.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеОрганизации");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("ВидОперации") И ДанныеXDTO.ВидОперации.Значение = "ВыпускПродукцииВПодразделение" Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыпускВПодразделение", Истина);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыпускВПодразделение", Ложь);
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.ОтчетПроизводстваЗаСмену;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокПродукция = Новый Массив;
	Если ДанныеXDTO.Свойство("Продукция") И ЗначениеЗаполнено(ДанныеXDTO.Продукция) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена",  "ПлановаяСтоимость");
		ПравилаЗаполнения.Вставить("Сумма", "СуммаПлановая");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("ГруппаАналитическогоУчетаНоменклатуры", "НоменклатурнаяГруппа");
		ПравилаЗаполнения.Вставить("СпецификацияНоменклатуры", "Спецификация");
		Для Каждого Строка Из ДанныеXDTO.Продукция Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.Количество);
			МассивСтрокПродукция.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокПродукция);
	КонецЕсли;
	
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("Материалы") И ЗначениеЗаполнено(ДанныеXDTO.Материалы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ГруппаАналитическогоУчетаНоменклатуры", "НоменклатурнаяГруппа");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		Для Каждого Строка Из ДанныеXDTO.Материалы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.Количество);
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Материалы", МассивСтрокМатериалы);
	КонецЕсли;
		
	МассивСтрокВозвратныеОтходы = Новый Массив;
	Если ДанныеXDTO.Свойство("ВозвратныеОтходы") И ЗначениеЗаполнено(ДанныеXDTO.ВозвратныеОтходы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("ГруппаАналитическогоУчетаНоменклатуры", "НоменклатурнаяГруппа");
		Для Каждого Строка Из ДанныеXDTO.ВозвратныеОтходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокВозвратныеОтходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратныеОтходы", МассивСтрокВозвратныеОтходы);
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "СуммаПлановая");
		ПравилаЗаполнения.Вставить("Цена", "ПлановаяСтоимость");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Для Каждого Строка ИЗ ПолученныеДанные.ВозвратныеОтходы Цикл
		Если Не ЗначениеЗаполнено(Строка.Цена) И ЗначениеЗаполнено(Строка.Сумма) И ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Цена = Строка.Сумма/Строка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	// При необходимости пересчитать цены из валюты документа в валюту регл учета.
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВалютаДокумента") Тогда
		ДанныеВалюты = ПолученныеДанные.ДополнительныеСвойства.ВалютаДокумента;
		ВалютаДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеВалюты.Значение,
								ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ДанныеВалюты.ИмяПКО), "ПолучитьСсылку").Ссылка;
		Если ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ПолученныеДанные.Дата);
			Если ЗначениеЗаполнено(СтруктураКурса.Курс) И СтруктураКурса.Курс <> 1 Тогда
				Для Каждого Строка ИЗ ПолученныеДанные.Продукция Цикл
					Если ЗначениеЗаполнено(Строка.СуммаПлановая) ИЛИ ЗначениеЗаполнено(Строка.ПлановаяСтоимость) Тогда
						Строка.СуммаПлановая = Окр(Строка.СуммаПлановая * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2);
						Строка.ПлановаяСтроимость = Окр(Строка.ПлановаяСтроимость * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПодразделениеЗатрат) Тогда
		ПолученныеДанные.ПодразделениеЗатрат = ПолученныеДанные.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.ВыпускВПодразделение Тогда
		// Счет учета в табличной части должен совпадать со счетом затрат.
		Для Каждого Строка ИЗ ПолученныеДанные.Продукция Цикл
			Строка.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
			ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
			
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
		
	Если НДСВключенВСтоимостьПоНалогообложению(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные) Тогда
		ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	Иначе
		ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов;
	
	СпособУчетаНДС = СпособУчетаНДСПоНалогообложению(КомпонентыОбмена, ДанныеXDTO);
	
	ПолученныеДанные.СчетаУчетаЗатратВТаблице = Истина;
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокМатериалыЗаказчика = Новый Массив;
	Заказчик = Неопределено;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("НоменклатурнаяГруппа", "ГруппаАналитическогоУчетаНоменклатуры");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		КонвертацииСвойств.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
		КонвертацииСвойств.Вставить("ПодразделениеЗатрат", "ПодразделениеЗатрат");
		
		КонвертацииСвойствМатериалыЗаказчика = Новый Соответствие;
		КонвертацииСвойствМатериалыЗаказчика.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствМатериалыЗаказчика.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойствМатериалыЗаказчика.Вставить("Количество", "Количество");
		
		ЕстьСвойствоЗаказчик = ДанныеXDTO.Товары.Колонки.Найти("Заказчик") <> неопределено;
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			
			ТипЗапасов = ?(ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов), СтрокаXDTO.ТипЗапасов.Значение, ""); 
			
			Если ТипЗапасов = "КомиссионныеТовары" Тогда
				Продолжить;
			ИначеЕсли ТипЗапасов = "ДавальческиеСырьеИМатериалы" Тогда
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствМатериалыЗаказчика, СтрокаXDTO, СтруктураДанныхСтроки);
				Если ЕстьСвойствоЗаказчик И НЕ ЗначениеЗаполнено(Заказчик) И ЗначениеЗаполнено(СтрокаXDTO.Заказчик)  Тогда
					ИмяПКО = "Справочник_Контрагенты_Получение";
					ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
					Заказчик = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Заказчик,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
					ПолученныеДанные.Контрагент = Заказчик;
				КонецЕсли;
				МассивСтрокМатериалыЗаказчика.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДС);
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
				
				СчетЗатрат = БухгалтерскийСчетПоКоду(СтрокаXDTO.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат", СчетЗатрат);
				КонецЕсли;
	
				Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД));
				КонецЕсли;
	
				Если СтруктураДанныхСтроки.Свойство("ПодразделениеЗатрат")
					И ЗначениеЗаполнено(СтруктураДанныхСтроки.ПодразделениеЗатрат) Тогда
					ДобавитьОрганизациюВПодразделениеXDTO(СтруктураДанныхСтроки.ПодразделениеЗатрат, ДанныеXDTO.КлючевыеСвойства.Организация);
				КонецЕсли;
		
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Материалы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокМатериалыЗаказчика.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МатериалыЗаказчика", МассивСтрокМатериалыЗаказчика);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Материалы,
		ДанныеИБ.Материалы,
		МассивКлючевыхПолей,
		"Счет, СчетЗатрат, СтатьяЗатрат, СпособУчетаНДС, ОтражениеВУСН");
	ДанныеИБ.Материалы.Загрузить(ПолученныеДанные.Материалы.Выгрузить());
	
	//МатериалыЗаказчика
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.МатериалыЗаказчика,
		ДанныеИБ.МатериалыЗаказчика,
		МассивКлючевыхПолей,
		"Счет, СчетПередачи");
	ДанныеИБ.МатериалыЗаказчика.Загрузить(ПолученныеДанные.МатериалыЗаказчика.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Документы_Производство_Давальческая_схема__учет_у_переработчика_
Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Сделка = Неопределено;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СчетУчета = БухгалтерскийСчетПоКоду(Строка.СчетУчета);
				Если ЗначениеЗаполнено(СчетУчета) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",   СчетУчета);
			    КонецЕсли;
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
			Если Сделка = Неопределено
				И ЗначениеЗаполнено(Строка.ДокументПоступления)
				И Строка.ДокументПоступления.ТипЗначения = "ПоступлениеСырьяОтДавальца" Тогда
				
				Сделка = Строка.ДокументПоступления;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сделка) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Сделка", Новый Структура("Значение, ИмяПКО", Сделка, "Документ_ПоступлениеСырьяОтДавальца_Получение"));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("МатериалыЗаказчика")
		И ЗначениеЗаполнено(ДанныеXDTO.МатериалыЗаказчика) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		Для Каждого Строка Из ДанныеXDTO.МатериалыЗаказчика Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",БухгалтерскийСчетПоКоду(Строка.СчетУчета));
			КонецЕсли;
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокМатериалы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("МатериалыЗаказчика", МассивСтрокМатериалы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Услуги.Итог("СуммаНДС") = 0;
							
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
					
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто,ПлановаяСтоимость,СуммаПлановая,СчетУчета,Спецификация");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.МатериалыЗаказчика,
		ДанныеИБ.МатериалыЗаказчика,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.МатериалыЗаказчика.Загрузить(ПолученныеДанные.МатериалыЗаказчика.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Валюта документа
	Если ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		ПолученныеДанные.ВалютаДокумента = ПолученныеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	// Валюта документа
	ДанныеИБ.ВалютаДокумента = ПолученныеДанные.ВалютаДокумента;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Настройки_организаций
Процедура ПКО_НастройкиРасчетаРезервовОтпусков_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	XDTOОрганизации   = ДанныеXDTO.КлючевыеСвойства.Организация;
	ИмяПКООрганизации = "Справочник_Организации_Получение";
	ПКОСсылки         = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКООрганизации);
	
	Организация = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
		КомпонентыОбмена, 
		XDTOОрганизации, 
		ПКОСсылки, 
		"ПолучитьСсылку").Ссылка;
	
	Период = ДанныеXDTO.КлючевыеСвойства.Период;
	
	ПолученныеДанные.Отбор.Организация.Значение = Организация;
	ПолученныеДанные.Отбор.Организация.Использование = Истина;
	
	ПолученныеДанные.Отбор.Период.Значение = Период;
	ПолученныеДанные.Отбор.Период.Использование = Истина;
	
	ПолученныеДанные.Прочитать();
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		СтрокаЗаписи = ПолученныеДанные[0];
	Иначе
		СтрокаЗаписи = ПолученныеДанные.Добавить();
	КонецЕсли;
	
	СтрокаЗаписи.Организация = Организация;
	СтрокаЗаписи.Период      = Период;
	
	Если ДанныеXDTO.Свойство("НастройкиРасчета")
		И ЗначениеЗаполнено(ДанныеXDTO.НастройкиРасчета) Тогда
		СтрокаЗаписи.ФормироватьРезервОтпусковБУ = ДанныеXDTO.НастройкиРасчета[0].ФормироватьРезервОтпусковБУ;
		СтрокаЗаписи.ФормироватьРезервОтпусковНУ = ДанныеXDTO.НастройкиРасчета[0].ФормироватьРезервОтпусковНУ;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Внеоборотные_активы
Процедура ПКО_Справочник_НематериальныеАктивы_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.ВидНМА = Перечисления.ВидыНМА.ПрочиеНематериальныеАктивы;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область Алгоритмы


Процедура АктуализироватьПодчиненностьСчетовФактурВыданных(КомпонентыОбмена)
	// Сортируем для того, чтобы упорядочить по хронологии и сгруппировать по обрабатываемому документу (счет-фактура/корректировка реализации).
	// Группировка по документу необходима для того, чтобы оптимизировать запись обрабатываемого документа в информационную базу.
	ТаблицаОбъектов = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке;
	ТаблицаОбъектов.Сортировать("ДатаДокумента, НомерИсправления, Документ");
	
	ТаблицаДляОтложенногоПроведения     = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	ОбрабатываемыйДокумент              = Документы.СчетФактураВыданный.ПустаяСсылка();
	ОбрабатываемыйДокументОбъект        = Неопределено;
	ОбрабатываемыйДокументМодифицирован = Ложь;
	ИсправляемыйДокумент                = Неопределено;
	
	УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
			Если ОбрабатываемыйДокумент <> СтрокаТаблицы.Документ Тогда
				
				Если ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный")
					И ОбрабатываемыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
					ОбрабатываемыйДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
					ОбрабатываемыйДокументМодифицирован = Истина;
				КонецЕсли;
			
				Если ОбрабатываемыйДокументМодифицирован Тогда
					ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
					ОбрабатываемыйДокументОбъект.Записать();
				КонецЕсли;
				
				ОбрабатываемыйДокумент              = СтрокаТаблицы.Документ;
				ОбрабатываемыйДокументОбъект        = СтрокаТаблицы.Документ.ПолучитьОбъект();
				ОбрабатываемыйДокументМодифицирован = Ложь;
			
			КонецЕсли;
		Иначе
			ОбрабатываемыйДокумент       = СтрокаТаблицы.Документ;
			ОбрабатываемыйДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбрабатываемыйДокументОбъект.ПометкаУдаления Тогда
			ОбрабатываемыйДокументОбъект.ПометкаУдаления = Ложь;
			ОбрабатываемыйДокументМодифицирован          = Истина;
		КонецЕсли;
		
		ИсправляемыйДокумент = СтрокаТаблицы.ИсправляемыйДокумент;	
		
		// Создавать фиктивную корректировку надо в случаях:
		//  1. Когда исправительная счет-фактура введена на основании документа реализации;
		//  2. Когда исправительная счет-фактура введена на основании корректировки реализации с видом операции по согласованию сторон;
		//  3. Когда счет-фактура является не первой введенной на основании документа корректировка реализации с видом операции "Исправление ошибок".
		// Если обрабатывается документ корректировка реализации, то создавать фиктивную корректировку не надо. Обрабатываемый документ нужно лишь
		// правильно спозиционировать в структуре подчиненности.
		
		СоздаватьКорректировку = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный");
		
		// Запросом определим ближайшую по дате корректировку реализации,
		// и находим счет-фактуру привязанную к ней.
		// Возможны следующие сценарии:
		//   1. Найденная корректировка является корректной для данного счета-фактуры;
		//   2. Найденная корректировка является корректной для данного счета-фактуры, но в счете-фактуре указан другой документ-основание,
		//      Например при повторной загрузке;
		//   3. Найденная корректировка будет использоваться как документ-основание для создаваемой фиктивной корректировки;
		//   4. Корректировка может быть не найдена, тогда в качестве документа основания создаваемой фиктивной корректировки,
		//      будет использоваться исправляемый документ реализации.
		
		ПоследняяКорректировкаВСтруктуреПодчиненности = Документы.КорректировкаРеализации.ПустаяСсылка();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка КАК КорректировкаРеализации,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСчетФактура
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО КорректировкаРеализации.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &ИсправляемыйДокументРеализации
		|	И Не КорректировкаРеализации.ПометкаУдаления
		|	И КорректировкаРеализации.Ссылка <> &ОбрабатываемыйДокумент
		|	И КорректировкаРеализации.Дата < &ДатаСчетФактуры
		|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.Дата УБЫВ,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления");
			
		// Если вдруг дата документа, это начало дня (например програмная генерация документов на начало дня)
		// то при поиске корректировки надо к дате документа прибавить 1 секунду, иначе корректировка введеная также на начало дня
		// подбираться не будет, и при каждой загрузке будет дублироваться.
		// Использование сравнения на меньше или равно, тоже не допустимо, поскольку в других случаях корректировка может быть подобрана не корректно.
		Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
			ДатаПоискаКорректировок = СтрокаТаблицы.ДатаДокумента + 1;
		ИначеЕсли ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			// Дата счета-фактуры может совпадать с датой документа реализации (например, в УНФ).
			// Поэтому для счета-фактуры, как и для начала дня, нужно добавить секунду к дате поиска документа,
			// чтобы в отбор попал и документ-основание тоже.
			ДатаПоискаКорректировок = СтрокаТаблицы.ДатаДокумента + 1;
		Иначе
			ДатаПоискаКорректировок = СтрокаТаблицы.ДатаДокумента;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаСчетФактуры",                ДатаПоискаКорректировок);
		Запрос.УстановитьПараметр("ИсправляемыйДокументРеализации", ИсправляемыйДокумент);
		Запрос.УстановитьПараметр("ОбрабатываемыйДокумент",         ОбрабатываемыйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПоследняяКорректировкаВСтруктуреПодчиненности = Выборка.КорректировкаРеализации;
			
			Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
				// 1. Если обрабатываемая "Счет-фактура" привязана к найденному документу "Корректировка реализации",
				//    то создавать фиктивную корректировку и изменять документы основания не требуется;
				// 2. Если у найденной корректировки отсутсвуют подчиненные счета-фактуры,
				//    тогда фиктивную корректировку создавать не нужно, нужно привязать обрабатываемый документ к найденной корректировке;
				// 3. Если у найденной корректировки есть подчиненная счет-фактура, но она не соответсвует обрабатываемому документу,
				//    тогда на основании найденной корректировки надо создать фиктивную корректировку и привязать к ней, обрабатываемый документ.
				Если Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент = Выборка.СчетФактура Тогда
					Продолжить;
				Иначе
					СоздаватьКорректировку = Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент <> Выборка.СчетФактура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Это вариант номер 4 из описанных ранее сценариев.
		Если Не ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
			ПоследняяКорректировкаВСтруктуреПодчиненности = ИсправляемыйДокумент;
		КонецЕсли;
		
		Если СоздаватьКорректировку Тогда
			
			// Создаем фиктивный документ "Корректировка реализации", на который будет ссылаться обрабатываемый документ.
			Объект = Документы.КорректировкаРеализации.СоздатьДокумент();
			Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Объект.НомерИсправления = ОбрабатываемыйДокументОбъект.НомерИсправления;
			
			// Вычисляем дату фиктивной корректировки
			// Если дата обрабатываемого документа находиться не в начале дня, 
			// то дату фиктивного документа "Корректировка реализации" сдвинем на 1 сек, раньше обрабатываемого документа
			Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
				Объект.Дата = СтрокаТаблицы.ДатаДокумента;
			Иначе
				Объект.Дата = СтрокаТаблицы.ДатаДокумента - 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				Если Объект.Метаданные().ВводитсяНаОсновании.Содержит(ПоследняяКорректировкаВСтруктуреПодчиненности.Метаданные()) Тогда
					// Заполняем фиктивную корректировку по основанию с помощью механизма конфигурации БП
					Объект.Организация        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировкаВСтруктуреПодчиненности, "Организация");
					Объект.ДокументРеализации = ПоследняяКорректировкаВСтруктуреПодчиненности;
					Объект.ЗаполнитьСвойстваШапки();
					Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(Объект);
				Иначе
					// Если маханизм автозаполнения конфигурации БП не поддерживает автозаполнение по типу исправляемого документа,
					// то заполняем фиктивную корректировку по основанию с помощью алгоритма встроенного в правила конвертации
					ЗаполнитьКорректировкуРеализацииПоОснованию(Объект, ПоследняяКорректировкаВСтруктуреПодчиненности, ИсправляемыйДокумент);
				КонецЕсли;
			КонецЕсли;
			
			Объект.КорректироватьБУиНУ       = Ложь;
			Объект.КорректироватьНДС         = Истина;
			Объект.ПризнаватьЗачитыватьАванс = Истина;
			
			// Если обрабатываемый документ внесен в таблицу отложенного проведения,
			// и в параметрах узла плана обмена выбрана настройка согласно которой,
			// полученные документы необходимо проводить, то и фиктивную корректировку надо проводить
			НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(ОбрабатываемыйДокумент, "ДокументСсылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				Объект.Проведен = Истина;
			КонецЕсли;
			
			// Запишем созданный фиктивный документ "Корректировка Реализации" в информационную базу
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, УзелОбмена);
			Объект.Записать();
			
			// Если необходимо, то занесем его в таблицу для отложенного проведения.
			Если Объект.Проведен Тогда
				НоваяСтрока = ТаблицаДляОтложенногоПроведения.Добавить();
				НоваяСтрока.ДокументСсылка = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента  = Объект.Дата;
			КонецЕсли;
			
			// Устнавливаем в качестве последней корректировки реализации в структуре подиченности, 
			// ссылку на созданную фиктивную корректировку.
			ПоследняяКорректировкаВСтруктуреПодчиненности = Объект.Ссылка;
			
		КонецЕсли;
		
		// В обратываемом документе необходимо заменить ссылку с существуюещего документа-основания
		// на последнюю корректировку реализации в структуре подчиненности определнную выше.
		
		ОбрабатываемыйДокументМодифицирован = Истина;
		
		Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
			
			// Ищем в документах основания, ссылку на исправляемый документ
			ИсправляемаяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования[СтрокаТаблицы.ИндексСтроки];
			
			// Если строку определили, то заменяем ее на последнюю корректировку реализации в структуре подчиненности определнную выше.
			Если ИсправляемаяСтрока <> Неопределено Тогда
				ИсправляемаяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
			КонецЕсли;
			
			// Если в шапку узкан заменяемый документ, то замену надо также в шапке документа;
			Если ОбрабатываемыйДокументОбъект.ДокументОснование = ИсправляемыйДокумент
				Или (ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбрабатываемыйДокументОбъект.ДокументОснование, "ИсправляемыйДокументРеализации") = ИсправляемыйДокумент) Тогда
				ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
			КонецЕсли;
			
			ДозаполнитьОснованияСчетаФактуры(ОбрабатываемыйДокументОбъект);
			
		Иначе
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				ОбрабатываемыйДокументОбъект.ДокументРеализации             = ПоследняяКорректировкаВСтруктуреПодчиненности;
				ОбрабатываемыйДокументОбъект.ИсправляемыйДокументРеализации = ИсправляемыйДокумент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
	
		Если ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный")
			И ОбрабатываемыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбрабатываемыйДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
			ОбрабатываемыйДокументМодифицирован = Истина;
		КонецЕсли;
						
		Если ОбрабатываемыйДокументМодифицирован Тогда
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
			ОбрабатываемыйДокументОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура АктуализироватьПодчиненностьСчетовФактурПолученных(КомпонентыОбмена)
	// Сортируем для того, чтобы упорядочить по хронологии и сгруппировать по обрабатываемому документу (счет-фактура/корректировка реализации).
	// Группировка по документу необходима для того, чтобы оптимизировать запись в информационную базу обрабатываемого документа.
	ТаблицаОбъектов = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке;
	ТаблицаОбъектов.Сортировать("ДатаДокумента, НомерИсправления, Документ");
	
	ТаблицаДляОтложенногоПроведения     = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	ОбрабатываемыйДокумент              = Документы.СчетФактураПолученный.ПустаяСсылка();
	ОбрабатываемыйДокументОбъект        = Неопределено;
	ОбрабатываемыйДокументМодифицирован = Ложь;
	ИсправляемыйДокумент                = Неопределено;
	
	УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
			Если ОбрабатываемыйДокумент <> СтрокаТаблицы.Документ Тогда
	
				Если ОбрабатываемыйДокументМодифицирован Тогда
					ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
					ОбрабатываемыйДокументОбъект.Записать();
				КонецЕсли;
				
				ОбрабатываемыйДокумент              = СтрокаТаблицы.Документ;
				ОбрабатываемыйДокументОбъект        = СтрокаТаблицы.Документ.ПолучитьОбъект();
				ОбрабатываемыйДокументМодифицирован = Ложь;
			
			КонецЕсли;
		Иначе
			ОбрабатываемыйДокумент       = СтрокаТаблицы.Документ;
			ОбрабатываемыйДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбрабатываемыйДокументОбъект.ПометкаУдаления Тогда
			ОбрабатываемыйДокументОбъект.ПометкаУдаления = Ложь;
			ОбрабатываемыйДокументМодифицирован          = Истина;
		КонецЕсли;
		
		ИсправляемыйДокумент = СтрокаТаблицы.ИсправляемыйДокумент;
	
		// Создавать фиктивную корректировку надо в случаях:
		//  1. Когда исправительная счет-фактура введена на основании документа поступления;
		//  2. Когда исправительная счет-фактура введена на основании корректировки поступления с видом операции по согласованию сторон;
		//  3. Когда счет-фактура является не первой введенной на основании документа корректировка поступления с видом операции "Исправление ошибок".
		// Если обрабатывается документ корректировка поступления, то создавать фиктивную корректировку не надо. Обрабатываемый документ нужно лишь
		// правильно спозиционировать в структуре подчиненности.
		
		СоздаватьКорректировку = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный");
		
		// Запросом определим ближайшую по дате корректировку поступления,
		// и находим счет-фактуру привязанную к ней.
		// Возможны следующие сценарии:
		//   1. Найденная корректировка является корректной для данного счета-фактуры;
		//   2. Найденная корректировка является корректной для данного счета-фактуры, но в счете-фактуре указан другой документ-основание,
		//      Например при повторной загрузке;
		//   3. Найденная корректировка будет использоваться как документ-основание для создаваемой фиктивной корректировки;
		//   4. Корректировка может быть не найдена, тогда в качестве документа основания создаваемой фиктивной корректировки,
		//      будет использоваться исправляемый документ поступления.
		
		ПоследняяКорректировкаВСтруктуреПодчиненности = Документы.КорректировкаПоступления.ПустаяСсылка();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка КАК КорректировкаПоступления,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСчетФактура
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО КорректировкаПоступления.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &ИсправляемыйДокументПоступления
		|	И Не КорректировкаПоступления.ПометкаУдаления
		|	И КорректировкаПоступления.Ссылка <> &ОбрабатываемыйДокумент
		|	И КорректировкаПоступления.Дата < &ДатаСчетФактуры
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления");
			
		Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
			Запрос.УстановитьПараметр("ДатаСчетФактуры", СтрокаТаблицы.ДатаДокумента + 1);
		ИначеЕсли ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			// Дата счета-фактуры может совпадать с датой документа поступления (например, в УНФ).
			// Поэтому для счета-фактуры, как и для начала дня, нужно добавить секунду к дате поиска документа,
			// чтобы в отбор попал и документ-основание тоже.
			Запрос.УстановитьПараметр("ДатаСчетФактуры", СтрокаТаблицы.ДатаДокумента + 1);
		Иначе
			Запрос.УстановитьПараметр("ДатаСчетФактуры", СтрокаТаблицы.ДатаДокумента);
		КонецЕсли;
		Запрос.УстановитьПараметр("ИсправляемыйДокументПоступления", ИсправляемыйДокумент);
		Запрос.УстановитьПараметр("ОбрабатываемыйДокумент",          ОбрабатываемыйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПоследняяКорректировкаВСтруктуреПодчиненности = Выборка.КорректировкаПоступления;
			
			Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
				// 1. Если обрабатываемая "Счет-фактура" привязана к найденному документу "Корректировка поступления",
				//    то создавать фиктивную корректировку и изменять документы основания не требуется;
				// 2. Если у найденной корректировки отсутсвуют подчиненные счета-фактуры,
				//    тогда фиктивную корректировку создавать не нужно, нужно привязать обрабатываемый документ к найденной корректировке;
				// 3. Если у найденной корректировки есть подчиненная счет-фактура, но она не соответсвует обрабатываемому документу,
				//    тогда на основании найденной корректировки надо создать фиктивную корректировку и привязать к ней, обрабатываемый документ.
				Если Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент = Выборка.СчетФактура Тогда
					Продолжить;
				Иначе
					СоздаватьКорректировку = Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент <> Выборка.СчетФактура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Это вариант номер 4 из описанных ранее сценариев.
		Если Не ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
			ПоследняяКорректировкаВСтруктуреПодчиненности = ИсправляемыйДокумент;
		КонецЕсли;
		
		Если СоздаватьКорректировку Тогда
			
			// Создаем фиктивный документ "Корректировка поступления", на который будет ссылаться обрабатываемый документ.
			Объект = Документы.КорректировкаПоступления.СоздатьДокумент();
			Объект.ВидОперации      = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Объект.НомерИсправления = ОбрабатываемыйДокументОбъект.НомерИсправления;
			Объект.ДатаИсправления  = ОбрабатываемыйДокументОбъект.ДатаИсправления;
			
			// Вычисляем дату фиктивной корректировки
			// Если дата обрабатываемого документа находиться не в начале дня, 
			// то дату фиктивного документа "Корректировка поступления" сдвинем на 1 сек, раньше обрабатываемого документа
			Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
				Объект.Дата = СтрокаТаблицы.ДатаДокумента;
			Иначе
				Объект.Дата = СтрокаТаблицы.ДатаДокумента - 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				Если Объект.Метаданные().ВводитсяНаОсновании.Содержит(ПоследняяКорректировкаВСтруктуреПодчиненности.Метаданные())
					И ТипЗнч(ИсправляемыйДокумент) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					// Заполняем фиктивную корректировку по основанию с помощью механизма конфигурации БП
					Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировкаВСтруктуреПодчиненности, "Организация");
					Объект.ДокументПоступления = ПоследняяКорректировкаВСтруктуреПодчиненности;
					Объект.ЗаполнитьСвойстваШапки();
					Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
				Иначе
					// Если маханизм автозаполнения конфигурации БП не поддерживает автозаполнение по типу исправляемого документа,
					// то заполняем фиктивную корректировку по основанию с помощью алгоритма встроенного в правила конвертации
					ЗаполнитьКорректировкуПоступленияПоОснованию(Объект, ПоследняяКорректировкаВСтруктуреПодчиненности, ИсправляемыйДокумент);
				КонецЕсли;
			КонецЕсли;
				
			Объект.КорректироватьБУиНУ       = Ложь;
			Объект.КорректироватьНДС         = Истина;
			Объект.ПризнаватьЗачитыватьАванс = Истина;
			
			// Если обрабатываемый документ внесен в таблицу отложенного проведения,
			// и в параметрах узла плана обмена выбрана настройка согласно которой,
			// полученные документы необходимо проводить, то и фиктивную корректировку надо проводить
			НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(ОбрабатываемыйДокумент, "ДокументСсылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				Объект.Проведен = Истина;
			КонецЕсли;
			
			// Запишем созданный фиктивный документ "Корректировка поступления" в информационную базу
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, УзелОбмена);
			Объект.Записать();
			
			// Если необходимо, то занесем его в таблицу для отложенного проведения.
			Если Объект.Проведен Тогда
				НоваяСтрока = ТаблицаДляОтложенногоПроведения.Добавить();
				НоваяСтрока.ДокументСсылка = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента  = Объект.Дата;
			КонецЕсли;
			
			// Устнавливаем в качестве последней корректировки реализации в структуре подиченности, 
			// ссылку на созданную фиктивную корректировку.
			ПоследняяКорректировкаВСтруктуреПодчиненности = Объект.Ссылка;
			
		КонецЕсли;
		
		// В обратываемом документе необходимо заменить ссылку с существуюещего документа-основания
		// на последнюю корректировку поступления в структуре подчиненности определнную выше.
		
		ОбрабатываемыйДокументМодифицирован = Истина;
		
		Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
			
			// Если строку определили, то заменяем ее на последнюю корректировку поступления
			// в структуре подчиненности определнную выше.
			Если ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				
				ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				
				ОбрабатываемыйДокументОбъект.ДокументыОснования.Очистить();
				НоваяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				
			Иначе
				
				// Ищем в документах основания, ссылку на исправляемый документ
				ИсправляемаяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования[СтрокаТаблицы.ИндексСтроки];
			
				Если ИсправляемаяСтрока <> Неопределено Тогда
					ИсправляемаяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				КонецЕсли;
				
				// Если в шапке указан заменяемый документ, то замену надо также в шапке документа;
				Если ОбрабатываемыйДокументОбъект.ДокументОснование = ИсправляемыйДокумент
					Или (ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") 
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбрабатываемыйДокументОбъект.ДокументОснование, "ИсправляемыйДокументПоступления") = ИсправляемыйДокумент) Тогда
					ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				КонецЕсли;
				
			КонецЕсли;
			
			ДозаполнитьОснованияСчетаФактуры(ОбрабатываемыйДокументОбъект);
			
		Иначе
			ОбрабатываемыйДокументОбъект.ДокументПоступления             = ПоследняяКорректировкаВСтруктуреПодчиненности;
			ОбрабатываемыйДокументОбъект.ИсправляемыйДокументПоступления = ИсправляемыйДокумент;
		КонецЕсли;
		
	
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбрабатываемыйДокумент)
		И ОбрабатываемыйДокументМодифицирован = Истина Тогда
		
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
		ОбрабатываемыйДокументОбъект.Записать();
		      	
	КонецЕсли;
КонецПроцедуры
Функция БанковскийСчетСписанияПриПереводеДенежныхСредств(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетОрганизации)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	КонецЕсли;
	
	// Попытаемся найти списание с расчетного счета по дате и номеру входящего документа.
	// Банковский счет организации из найденного документа и будет счетом списания.
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация",             Объект.Организация);
	Запрос.Параметры.Вставить("Дата",                    КонецДня(Объект.Дата));
	Запрос.Параметры.Вставить("СчетОрганизации",         Объект.СчетОрганизации);
	Запрос.Параметры.Вставить("НомерВходящегоДокумента", Объект.НомерВходящегоДокумента);
	Запрос.Параметры.Вставить("ДатаВходящегоДокумента",  Объект.ДатаВходящегоДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.СчетКонтрагента = &СчетОрганизации
	|	И СписаниеСРасчетногоСчета.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И СписаниеСРасчетногоСчета.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И СписаниеСРасчетногоСчета.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеСРасчетногоСчета.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетОрганизации;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
КонецФункции
Функция БухгалтерскиеСчетаСтрокиXDTO(СтрокаXDTO, РеквизитыСтрокой)
	СтруктураСчетов = Новый Структура;
	
	СписокРеквизитов = СтрРазделить(РеквизитыСтрокой, ",", Ложь);
	Для Каждого ИмяРеквизита Из СписокРеквизитов Цикл
		Счет = Неопределено;
		КодСчета = СтрокаXDTO[СокрЛП(ИмяРеквизита)];
		Если ЗначениеЗаполнено(КодСчета) Тогда
			Счет = БухгалтерскийСчетПоКоду(КодСчета);
		КонецЕсли;
		СтруктураСчетов.Вставить(СокрЛП(ИмяРеквизита), Счет)
	КонецЦикла;
	
	Возврат СтруктураСчетов;
КонецФункции
Функция БухгалтерскийСчетПоКоду(КодСчета)
	КонвертацииСчетов = Новый Соответствие;
	КонвертацииСчетов.Вставить("20", "20.01"); // В ЕРП нет разделения счетов на 20 счете, там только один счет. Поэтому вместо 20 счета всегда подставляем 20.01
	
	КодСчетаДляПоиска = СокрЛП(КодСчета);
	Если КонвертацииСчетов.Получить(КодСчетаДляПоиска) <> Неопределено Тогда
		КодСчетаДляПоиска = КонвертацииСчетов.Получить(КодСчетаДляПоиска);
	КонецЕсли;
	
	НайденныйСчет = ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодСчетаДляПоиска);
	
	Если ЗначениеЗаполнено(НайденныйСчет) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НайденныйСчет);
		Если СвойстваСчета.ЗапретитьИспользоватьВПроводках Тогда
			НайденныйСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
	
	Возврат НайденныйСчет;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидНоменклатурыПоГруппе(ГруппаНоменклатуры, ПризнакУслуги)
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		ВидНоменклатуры	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаНоменклатуры, "ВидНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ПризнакУслугиВидаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга");
		Если ПризнакУслугиВидаНоменклатуры <> ПризнакУслуги Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(ПризнакУслуги);
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
КонецФункции
Функция ВидОплатыОрганизации(КомпонентыОбмена, Организация, ТипОплаты, Контрагент, ДоговорКонтрагента)
	ВидыОплатПоУмолчанию = КомпонентыОбмена.ПараметрыКонвертации.ВидыОплатПоУмолчанию;
	
	НеобходимоСоздатьЭлемент = Ложь;
	Элемент = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ТипОплаты) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ОсновнойВидОплатыОрганизации(Организация, ТипОплаты)
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", ГоловнаяОрганизация);
	СтруктураОтбора.Вставить("ТипОплаты",  ТипОплаты);
	СтруктураОтбора.Вставить("Контрагент", Контрагент);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(ВидыОплатПоУмолчанию) Тогда
		
		Строки = ВидыОплатПоУмолчанию.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 1 Тогда
			Возврат Строки[0].Элемент;
		КонецЕсли;
		
	Иначе
		
		ТаблицаВидовОплаты = Новый ТаблицаЗначений;
		ТаблицаВидовОплаты.Колонки.Добавить("Организация",        Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаВидовОплаты.Колонки.Добавить("ТипОплаты",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));
		ТаблицаВидовОплаты.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаВидовОплаты.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаВидовОплаты.Колонки.Добавить("Элемент",            Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
		
		КомпонентыОбмена.ПараметрыКонвертации.ВидыОплатПоУмолчанию = ТаблицаВидовОплаты;
		ВидыОплатПоУмолчанию = ТаблицаВидовОплаты;
		
	КонецЕсли;
	
	НоваяСтрока = ВидыОплатПоУмолчанию.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбора);
	
	Если ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата наличными'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата платежной картой'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата банковским кредитом'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата собственным подарочным сертификатом'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата сторонним подарочным сертификатом'");
	Иначе
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Вид оплаты по умолчанию'");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыОплатОрганизаций.Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыОплатОрганизаций.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|	ВидыОплатОрганизаций.Организация = &Организация
		|	И ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты
		|	И ВидыОплатОрганизаций.Контрагент = &Контрагент
		|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
		Если НЕ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена 
			И Выборка.Следующий() Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		ВидОплатыОбъект = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		ВидОплатыОбъект.Наименование       = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ВидОплатыОбъект.Организация        = ГоловнаяОрганизация;
		ВидОплатыОбъект.Контрагент         = Контрагент;
		ВидОплатыОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		ВидОплатыОбъект.ТипОплаты          = ТипОплаты;
		ВидОплатыОбъект.СчетУчетаРасчетов  = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(ВидОплатыОбъект.ТипОплаты);
	
		Попытка
			ВидОплатыОбъект.Записать();
			Элемент = ВидОплатыОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	ВидыОплатПоУмолчанию[ВидыОплатПоУмолчанию.Количество() - 1].Элемент = Элемент;
	
	Возврат Элемент;
КонецФункции
Функция ВидПродукцииИСНоменклатуры(НоменклатураОбъект)
	Если Справочники.Номенклатура.ЭтоАлкогольнаяПродукция(НоменклатураОбъект.Ссылка) Тогда
		Возврат "Алкогольная";
	КонецЕсли;
	
	СоответствияФлагов = ПризнакиНоменклатурыПоВидамПродукцииИС();
	Для Каждого СоответствиеФлага Из СоответствияФлагов Цикл
		
		Если Не ЗначениеЗаполнено(СоответствиеФлага.Значение) Тогда
			Продолжить;
		КонецЕсли;
	
		Если НоменклатураОбъект[СоответствиеФлага.Значение] Тогда
			Возврат СоответствиеФлага.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
КонецФункции
Процедура ВключитьВСписокЗагруженныхОбъектов()
	// Назначается в качестве обработчика ПослеЗагрузкиВсехДанных в случае, когда фактически выполнять обработчик не требуется,
	// но нужно, чтобы объект включался в список загруженных объектов.
КонецПроцедуры
Процедура ВключитьМониторингСпаркРискиДляКонтрагента(Объект)
	Если Не СПАРКРиски.ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИндексыСПАРКРиски.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ИндексыСПАРКРиски КАК ИндексыСПАРКРиски
	|ГДЕ
	|	ИндексыСПАРКРиски.Контрагент = &Контрагент";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	Запись = НаборЗаписей.Добавить();
	Запись.Контрагент = Контрагент;
	Запись.ИНН = Объект.ИНН;
	НаборЗаписей.Записать();
	
	КонтрагентыДляВключения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	СПАРКРиски.ВключитьОтключитьМониторингСобытий(КонтрагентыДляВключения, Истина);
КонецПроцедуры
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta" Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПлатежноеПоручение(ДанныеИБ, ДанныеXDTO)
	ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		ДанныеИБ.Ссылка, ДанныеИБ.ДокументОснование, ДанныеИБ.ВидОперации);
		
	Если ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		ДанныеXDTO.Вставить("ПлатежноеПоручение", ПлатежноеПоручение);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		// Выгрузка данных о ФИО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПоСсылке(ЗначениеСсылки, КомпонентыОбмена)
	Если КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ЗначениеСсылки) = Неопределено Тогда
		ОбъектВыгружаемыйПоСсылке = Неопределено;
		
		Если ОбщегоНазначения.СсылкаСуществует(ЗначениеСсылки) Тогда
			ОбъектВыгружаемыйПоСсылке = ЗначениеСсылки.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбъектВыгружаемыйПоСсылке <> Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыгружаемыйПоСсылке);
			КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Добавить(ЗначениеСсылки);
			РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(
				ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьШтрихкодыУпаковок(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДанныеИБ.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументШтрихкодыУпаковок.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Упаковка КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ втШтрихкодыУпаковок
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ДокументШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ДокументШтрихкодыУпаковок.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	втШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
	|	втШтрихкодыУпаковок.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
	|ГДЕ
	|	втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втШтрихкодыУпаковок.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	втШтрихкодыУпаковок.ШтрихкодУпаковки КАК МаркировкаУпаковки
	|ИЗ
	|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
	|ГДЕ
	|	НЕ втШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)";
	 
	ИмяТаблицы = МетаданныеДокумента.ПолноеИмя() + ".ШтрихкодыУпаковок";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаПервогоПакета = СхемаЗапроса.ПакетЗапросов[0];
	
	СхемаПервогоПакета.Операторы[0].Источники.Заменить(0,
		СхемаПервогоПакета.ДоступныеТаблицы.Найти(ИмяТаблицы));
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	АкцизныеМарки = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	ДанныеXDTO.Вставить("АкцизныеМарки", АкцизныеМарки);
	
	МаркировкиУпаковок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	ДанныеXDTO.Вставить("МаркировкиУпаковок", МаркировкиУпаковок);
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		ИмяПКОГруппа = "Справочник_КонтрагентыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Банки") Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ИмяПКО = "Справочник_Подразделения_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ИмяПКО = "Справочник_СтатьиДоходов_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ ИЗ ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеВедомостиНаВыплатуЗарплаты(Ведомость)
	СвойстваВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомость, "Дата,Номер");
	
	ДанныеВедомости = Новый Структура;
	ДанныеВедомости.Вставить("Номер", СвойстваВедомости.Номер);
	ДанныеВедомости.Вставить("Дата", СвойстваВедомости.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьНаВыплатуЗарплатыЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты.Зарплата КАК ВедомостьНаВыплатуЗарплатыЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ФизическоеЛицо,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КВыплате)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассуЗарплата.ФизическоеЛицо,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВКассуЗарплата.КВыплате)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьНаВыплатуЗарплатыВКассуЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Ссылка = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВКассуЗарплата.ФизическоеЛицо";
	
	ФизическиеЛицаДляВыплаты = Запрос.Выполнить().Выгрузить();
	
	ДанныеВедомости.Вставить("ФизическиеЛицаДляВыплаты", ФизическиеЛицаДляВыплаты);
	
	Возврат ДанныеВедомости;
КонецФункции
Функция ДанныеВзаиморасчетовПоДоговору(ДоговорКонтрагента)
	ДанныеВзаиморасчетов = Новый Структура;
	ДанныеВзаиморасчетов.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	ДанныеВзаиморасчетов.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	ДанныеВзаиморасчетов.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента)
		Или Не ОбщегоНазначения.СсылкаСуществует(ДоговорКонтрагента) Тогда
		Возврат ДанныеВзаиморасчетов;
	КонецЕсли;
	
	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора");
	
	ЗаполнитьЗначенияСвойств(ДанныеВзаиморасчетов, СвойстваДоговора);
	
	Возврат ДанныеВзаиморасчетов;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ДобавитьАналитикуЗатратВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, ПоляСубконто, СтатьяЗатрат, СчетЗатрат)
	ПоляСодержащиеСубконто = СтрРазделить(ПоляСубконто, ",");
	
	// Если во входящих данных заполнена статья затрат, то добавляем ее в аналитику.
	// Однако, если счет затрат указан и он содержит субконто "Прочие доходы и расходы", то добавляем и это субконто тоже.
	// В результате, в справочнике "Статьи затрат" всегда будет полный набор статей, а в "Прочих доходах и расходах" только часть.
	
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	Для Каждого ПолеСубконто Из ПоляСодержащиеСубконто Цикл
		ДобавитьСтатьюЗатратВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, ПолеСубконто, СтатьяЗатрат, ВидСубконтоСтатьиЗатрат);
	КонецЦикла;
		
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	Если ЗначениеЗаполнено(СчетЗатрат)
		И УСчетаЕстьВидСубконто(СчетЗатрат, ВидСубконтоПрочиеДоходыИРасходы) Тогда
		Для Каждого ПолеСубконто Из ПоляСодержащиеСубконто Цикл
			ДобавитьСтатьюЗатратВВидыСубконто(КомпонентыОбмена, СтруктураДанныхСтроки, ПолеСубконто, СтатьяЗатрат, ВидСубконтоПрочиеДоходыИРасходы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьАналитикуЗатратВДопСвойства(ХранилищеСубконто, СтатьяЗатратXDTO, ПрефиксДопСвойств)
	СоответствиеСубконто = ПравилаКонвертацииСтатьиЗатратПоВидамСубконто(СтатьяЗатратXDTO);
	Для Каждого ВидСубконто Из СоответствиеСубконто Цикл
		КлючСубконто = КлючСубконтоДляДопСвойств(ПрефиксДопСвойств, ВидСубконто.Ключ);
		ХранилищеСубконто.Вставить(КлючСубконто, ВидСубконто.Значение);
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьАналитикуЗатратВТаблицуУслуги(ТаблицаУслуги, ИмяПолейСубконто)
	ТаблицаУслуги.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	ТаблицаУслуги.Колонки.Добавить("СтатьяЗатрат");
	
	Для Каждого СтрокаУслуги Из ТаблицаУслуги Цикл
	
		Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			ЗначениеСубконто = СтрокаУслуги[ИмяПолейСубконто + Строка(НомерСубконто)];
			Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаУслуги.ГруппаАналитическогоУчетаНоменклатуры = ЗначениеСубконто;
			ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
				ИнструкцияКонвертации.Значение = ЗначениеСубконто;
				ИнструкцияКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_СтатьиЗатрат_Отправка";
				СтрокаУслуги.СтатьяЗатрат = ИнструкцияКонвертации;
			ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ИнструкцияКонвертации = Новый Структура("Значение, ИмяПКО");
				ИнструкцияКонвертации.Значение = ЗначениеСубконто;
				ИнструкцияКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_Отправка";
				СтрокаУслуги.СтатьяЗатрат = ИнструкцияКонвертации;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяДопСвойства = "ВалютаДокумента")
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Валюта, ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорыДокументовВСписокКомиссииНаЗакупку(КомпонентыОбмена, ДокументыОснования)
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		Если ЗаполненаИСуществует(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ДокументОснование.Метаданные()) Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДоговорКонтрагента");
			КомпонентыОбмена.ПараметрыКонвертации.ДоговорыСКомиссионеромНаЗакупку.Добавить(Договор);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьЗначениеВВидыСубконто(КомпонентыОбмена, ХранилищеСубконто, ПрефиксСубконто, ЗначениеXDTO, ИмяПКО, ВидСубконто)
	// ХранилищеСубконто - структура, в которой нужно заполнить субконто.
	// Это может быть либо структура для заполнения строки табличной части, либо ПолученныеДанные.ДополнительныеСвойства для заполнения реквизитов.
	
	Если Не ЗначениеЗаполнено(ЗначениеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,ИмяПКО);
	ЗначениеСубконтоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
		ЗначениеXDTO, Правило, "ПолучитьСсылку").Ссылка;
	Если Не ЗначениеЗаполнено(ЗначениеСубконтоСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаВидовСубконто = УниверсальныйОбменЗагрузкаАналитики.ИмяХранилищаВидаСубконто(ПрефиксСубконто);
	Если Не ХранилищеСубконто.Свойство(ИмяРеквизитаВидовСубконто) Тогда
		ХранилищеСубконто.Вставить(ИмяРеквизитаВидовСубконто, Новый Соответствие);
	КонецЕсли;
	ХранилищеСубконто[ИмяРеквизитаВидовСубконто].Вставить(ВидСубконто, ЗначениеСубконтоСсылка);
КонецПроцедуры
Процедура ДобавитьНоменклатурнуюГруппуВВидыСубконто(КомпонентыОбмена, ХранищиеСубконто, ПрефиксСубконто, ЗначениеXDTO)
	Если Не ЗначениеЗаполнено(ЗначениеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ДобавитьЗначениеВВидыСубконто(КомпонентыОбмена, ХранищиеСубконто, ПрефиксСубконто, ЗначениеXDTO, "Справочник_НоменклатурнаяГруппа_Получение", ВидСубконто);
КонецПроцедуры
Процедура ДобавитьОрганизациюВПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO)
	ПодразделениеXDTO.Вставить("Организация", ОрганизацияXDTO);
	
	УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);
КонецПроцедуры
Процедура ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяПоляXDTO = "Подразделение", ИмяПоляДокумента = "ПодразделениеОрганизации")
	ПодразделениеXDTO = Неопределено;
	ДанныеXDTO.Свойство(ИмяПоляXDTO, ПодразделениеXDTO);
	Если ЗначениеЗаполнено(ПодразделениеXDTO) Тогда
		
		ОрганизацияXDTO = Неопределено;
		Если ДанныеXDTO.Свойство("Организация")
			И ЗначениеЗаполнено(ДанныеXDTO.Организация) Тогда
			ОрганизацияXDTO = ДанныеXDTO.Организация;
		ИначеЕсли ДанныеXDTO.Свойство("КлючевыеСвойства")
			И ДанныеXDTO.КлючевыеСвойства.Свойство("Организация")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Организация) Тогда
			ОрганизацияXDTO = ДанныеXDTO.КлючевыеСвойства.Организация;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ОрганизацияXDTO) Тогда
	
			ДобавитьОрганизациюВПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);
			
			Подразделение = Новый Структура("Значение, ИмяПКО", ПодразделениеXDTO, "Справочник_Подразделения_Получение");
			ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяПоляДокумента, Подразделение);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьПодразделениеДляЗаполненияАналитики(КомпонентыОбмена, ХранилищеПодразделения, ИмяПоляПодразделения, ЗначениеXDTO)
	Если Не ЗначениеЗаполнено(ЗначениеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПКО = "Справочник_Подразделения_Получение";
	Правило = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,ИмяПКО);
	ЗначениеПодразделенияСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
		ЗначениеXDTO, Правило, "ПолучитьСсылку").Ссылка;
	Если Не ЗначениеЗаполнено(ЗначениеПодразделенияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаПодразделения = УниверсальныйОбменЗагрузкаАналитики.ИмяХранилищаПодразделения(ИмяПоляПодразделения);
	Если Не ХранилищеПодразделения.Свойство(ИмяРеквизитаПодразделения) Тогда
		ХранилищеПодразделения.Вставить(ИмяРеквизитаПодразделения, ЗначениеПодразделенияСсылка);
	Иначе
		ХранилищеПодразделения[ИмяРеквизитаПодразделения] = ЗначениеПодразделенияСсылка;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьПризнакЭтоНовый(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьСделкуВСтрокуДокумента(КомпонентыОбмена, СтруктураДанныхСтроки, ДокументРасчетовXDTO)
	Сделки = Новый Массив;
	
	ИменаПКО = ИменаПКОДокументаПоТипуXDTO(ДокументРасчетовXDTO);
	Для Каждого ИмяПКО Из ИменаПКО Цикл
		
		СсылкаНаПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		ОписаниеПравила = Новый Структура("ПравилоКонвертации, УдалятьСозданныеПоКлючевымСвойствам",
			СсылкаНаПКО, Истина);
		СсылкаНаДокументРасчетов = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, ДокументРасчетовXDTO, ОписаниеПравила, "ПолучитьСсылку").Ссылка;
		Сделки.Добавить(СсылкаНаДокументРасчетов);
		
	КонецЦикла;
				
	СтруктураДанныхСтроки.Вставить("Сделки", Сделки);
КонецПроцедуры
Процедура ДобавитьСтатусДокументаКЗагрузке(КомпонентыОбмена, Документ, Статус, ДополнительныйСтатус)
	СтатусыДокументовКЗагрузке = КомпонентыОбмена.ПараметрыКонвертации.СтатусыДокументовКЗагрузке;
	
	СтрокиДокумента = СтатусыДокументовКЗагрузке.НайтиСтроки(Новый Структура("Документ", Документ));
	Если СтрокиДокумента.Количество() = 0 Тогда
		СтрокаДокумента = СтатусыДокументовКЗагрузке.Добавить();
		СтрокаДокумента.Документ = Документ;
	Иначе
		СтрокаДокумента = СтрокиДокумента[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Статус) Тогда
		СтрокаДокумента.Статус = Статус;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйСтатус) Тогда
		СтрокаДокумента.ДополнительныйСтатус = ДополнительныйСтатус;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьСтатьюЗатратВВидыСубконто(КомпонентыОбмена, ХранищиеСубконто, ПрефиксСубконто, СтатьяЗатратXDTO, ВидСубконто)
	// ХранилищеСубконто - структура, в которой нужно заполнить субконто.
	// Это может быть либо структура для заполнения строки табличной части, либо ПолученныеДанные.ДополнительныеСвойства для заполнения реквизитов.
	
	Если Не ЗначениеЗаполнено(СтатьяЗатратXDTO) Тогда
		Возврат;
	КонецЕсли;
		
	СоответствияСубконто = ПравилаКонвертацииСтатьиЗатратПоВидамСубконто(СтатьяЗатратXDTO);
	ЗначениеДляКонвертации = СоответствияСубконто[ВидСубконто];
	Если Не ЗначениеЗаполнено(ЗначениеДляКонвертации) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЗначениеВВидыСубконто(КомпонентыОбмена, ХранищиеСубконто, ПрефиксСубконто, ЗначениеДляКонвертации.Значение, ЗначениеДляКонвертации.ИмяПКО, ВидСубконто);
КонецПроцедуры
Процедура ДобавитьСтрокуРасшифровкиПлатежаДляПрочихПРС(ПолученныеДанные)
	СтруктураДанныхСтроки = Новый Структура;
	СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ПолученныеДанные.ДоговорКонтрагента);
	СтруктураДанныхСтроки.Вставить("СуммаПлатежа", ПолученныеДанные.СуммаДокумента);
	СтруктураДанныхСтроки.Вставить("СуммаУслуг", ПолученныеДанные.СуммаУслуг);
	
	МассивСтрокРасшифровка = Новый Массив;
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
КонецПроцедуры
Функция ДоговорОплатыСертификатомОтРозничногоПокупателя(Организация, Контрагент)
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата подарочными сертификатами'");
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НаименованиеЭлементаДляОбменаПоУмолчанию);
	ПараметрыДоговора.Вставить("Организация",          Организация);
	ПараметрыДоговора.Вставить("Владелец",             Контрагент);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыДоговора.Вставить("ВидДоговора",          ВидДоговора);
	
	Договор = ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора);
	
	Возврат Договор.Ссылка;
КонецФункции
Функция ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыДоговора.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.Владелец)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВалютаВзаиморасчетов)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВидДоговора) Тогда
		Возврат Договор;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыДоговора.Организация);
	
	НеобходимоСоздатьДоговор = Ложь;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", ПараметрыДоговора.Наименование);
	Запрос.УстановитьПараметр("Организация",          ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
		Если НЕ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена 
			И Выборка.Следующий() Тогда
			НеобходимоСоздатьДоговор = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьДоговор = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами.
	Если НеобходимоСоздатьДоговор Тогда
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Организация = ГоловнаяОрганизация;
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора, , "Организация");
	
		Попытка
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Функция ДоговорЭквайринга(Организация, Контрагент)
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Договор эквайринга'");
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НаименованиеЭлементаДляОбменаПоУмолчанию);
	ПараметрыДоговора.Вставить("Организация",          Организация);
	ПараметрыДоговора.Вставить("Владелец",             Контрагент);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыДоговора.Вставить("ВидДоговора",          ВидДоговора);
	
	Договор = ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора);
	
	Возврат Договор.Ссылка;
КонецФункции
Процедура ДозаполнитьОснованияСчетаФактуры(Объект)
	ЭтоКорректировочный = Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
		Или Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	Если Не ЭтоКорректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(Объект);
	Объект.ДокументыОснования.Очистить();
	Объект.ДокументыОснования.Загрузить(ПараметрыСФ.РеквизитыОснований);
КонецПроцедуры
Процедура ДокументыДвиженияДС_АналитикаЗатратИзРасшифровки(ПолученныеДанные, ДанныеXDTO, ИмяРеквизитаСтатьиРасходов, ПрефиксСубконто)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0
		И ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти(ИмяРеквизитаСтатьиРасходов) <> Неопределено Тогда
		
		ПерваяСтрокаРасшифровкиПлатежа = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрокаРасшифровкиПлатежа[ИмяРеквизитаСтатьиРасходов]) Тогда
			ДобавитьАналитикуЗатратВДопСвойства(ПолученныеДанные.ДополнительныеСвойства, ПерваяСтрокаРасшифровкиПлатежа[ИмяРеквизитаСтатьиРасходов], ПрефиксСубконто); 
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств",ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	КонецЕсли;
КонецПроцедуры
Процедура ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваСчетРасчетов)
	ЕстьКолонкаСтатьяЗатрат = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(Строка[ИмяСвойстваСчетРасчетов]) Тогда
				
				ТекСчетУчетаРасчетов = БухгалтерскийСчетПоКоду(Строка[ИмяСвойстваСчетРасчетов]);
				Если ЗначениеЗаполнено(ТекСчетУчетаРасчетов) Тогда
					ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ТекСчетУчетаРасчетов;
					
					Если ЕстьКолонкаСтатьяЗатрат
						И ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
						ЗаполнитьСтатьюЗатратВСубконто(ПолученныеДанные.ДополнительныеСвойства, "СубконтоДт",
							ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом, Строка.СтатьяЗатрат);
					КонецЕсли;
				
					Прервать;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ДополнитьДаннымиЗачетаАвансов(ПолученныеДанные, ДанныеXDTO)
	//ЗачетАвансов
	Если ДанныеXDTO.Свойство("СпособПогашенияЗадолженности")
		И ДанныеXDTO.СпособПогашенияЗадолженности.Значение = "ПоДокументу"
		И ДанныеXDTO.Свойство("ПогашениеЗадолженности")
		И ЗначениеЗаполнено(ДанныеXDTO.ПогашениеЗадолженности) Тогда
	
		МассивСтрокАвансы = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.ПогашениеЗадолженности Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			
			ДокументАванса = СтруктураКонвертацииДокументаРасчетов(Строка.ДокументРасчетов);
			Если ДокументАванса <> Неопределено Тогда
				СтруктураДанныхСтроки.Вставить(
						"ДокументАванса", ДокументАванса);
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"СуммаЗачета", Строка.Сумма);
				
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		Если МассивСтрокАвансы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЗачетАвансов", МассивСтрокАвансы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ДополнитьПолямиСНезаполненнымиЗначениями(АнализируемаяТабличнаяЧасть, АнализируемыеКолонки, Поля)
	ЗаполненныеКолонки = Новый Структура;
	
	МассивАнализируемыхКолонок = СтрРазделить(СтрЗаменить(АнализируемыеКолонки, " ", ""), ",");
	
	Для Каждого АнализируемаяСтрока Из АнализируемаяТабличнаяЧасть Цикл
		Для Каждого АнализируемаяКолонка Из МассивАнализируемыхКолонок Цикл
			Если Не ЗаполненныеКолонки.Свойство(АнализируемаяКолонка)
				И ЗначениеЗаполнено(АнализируемаяСтрока[АнализируемаяКолонка]) Тогда
				ЗаполненныеКолонки.Вставить(АнализируемаяКолонка, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДополняемыеПоля = Новый Массив;
	Для Каждого АнализируемаяКолонка Из МассивАнализируемыхКолонок Цикл
		Если Не ЗаполненныеКолонки.Свойство(АнализируемаяКолонка) Тогда
			ДополняемыеПоля.Добавить(АнализируемаяКолонка);
		КонецЕсли;
	КонецЦикла;
	
	Если ДополняемыеПоля.Количество() > 0 Тогда
		МассивПолей = СтрРазделить(СтрЗаменить(Поля, " ", ""), ",");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ДополняемыеПоля, Истина);
		Поля = СтрСоединить(МассивПолей, ",");
	КонецЕсли;
КонецПроцедуры
Процедура ДополнитьУстановкуЦенЦенамиТоваровИзДанныхИБ(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовараДанныхИБ ИЗ ДанныеИБ.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовараДанныхИБ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ОтборСтрок = Новый Структура("Номенклатура", СтрокаТовараДанныхИБ.Номенклатура);
		Если ПолученныеДанные.Товары.НайтиСтроки(ОтборСтрок).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ПолученныеДанные.Товары.Добавить(), СтрокаТовараДанныхИБ);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		
		Если Не ЭтоДопСведение И Не ЕстьТЧДопРеквизиты Тогда
			// Доп.реквизиты не загружаем - их некуда загрузить.
			Продолжить;
		КонецЕсли;
		
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ДопРеквизитыСтрока.ТипЗначения = ПКО.ТипДанных;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ДопСведенияНаборЗаписей.Прочитать();
	ТаблицаДопСведений = ДопСведенияНаборЗаписей.Выгрузить();
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		// Если в наборе уже есть нужно доп.свойство, то заменяем значение.
		// Если нет - то добавляем новое.
		// Свойства, которые были в информационной базе, но их нет в сообщении обмена не удаляются.
		ЗаписьНабора = ТаблицаДопСведений.Найти(СвойствоСсылка, "Свойство");
		Если ЗаписьНабора = Неопределено Тогда
			ЗаписьНабора = ТаблицаДопСведений.Добавить();
			ЗаписьНабора.Объект   = ОбъектСсылка;
			ЗаписьНабора.Свойство = СвойствоСсылка;
		КонецЕсли;
		ЗаписьНабора.Значение = ЗначениеСвойства;
		
	КонецЦикла;	
	
	ДопСведенияНаборЗаписей.Загрузить(ТаблицаДопСведений);
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	// Если история ФИО не передана и не заполнено поле ФИО физческого лица,
	// то заполнять регистр не требуется
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО")
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.ФИО) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
		// Набор записей полностью заменяется на полученные данные
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.Период   = СтрокаФИО.НачалоПериода;
			МенеджерЗаписиФИО.Фамилия  = СтрокаФИО.Фамилия;
			МенеджерЗаписиФИО.Имя      = СтрокаФИО.Имя;
			МенеджерЗаписиФИО.Отчество = СтрокаФИО.Отчество;
	
			МенеджерЗаписиФИО.Инициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
				МенеджерЗаписиФИО.Имя, МенеджерЗаписиФИО.Отчество);
	
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
				Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
					МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
				Иначе
					МенеджерЗаписиФИО.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
		КонецЦикла;
	
	Иначе
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолученныеДанные.ФИО);
		МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
	
		МенеджерЗаписиФИО.Инициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
			МенеджерЗаписиФИО.Имя, МенеджерЗаписиФИО.Отчество);
		
		Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
			МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
		Иначе
			МенеджерЗаписиФИО.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		КонецЕсли;
		МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
			
	КонецЕсли;
		
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗагрузитьШтрихкодыУпаковок(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТаблицы = "ШтрихкодыУпаковок", ИмяСвойства = "ШтрихкодУпаковки")
	МассивСтрокШтрихкодыУпаковок = Новый Массив;
	Если ДанныеXDTO.Свойство("АкцизныеМарки")
		И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("НомерАкцизнойМарки",  "ЗначениеШтрихкода");
	
		Для Каждого Строка Из ДанныеXDTO.АкцизныеМарки Цикл
			СтруктураАкцизнаяМарка = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			ИнструкцияШтрихкодУпаковки = Новый Структура("Значение, ИмяПКО");
			ИнструкцияШтрихкодУпаковки.Значение = СтруктураАкцизнаяМарка;
			ИнструкцияШтрихкодУпаковки.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
			
			МассивСтрокШтрихкодыУпаковок.Добавить(Новый Структура(ИмяСвойства, ИнструкцияШтрихкодУпаковки));
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("МаркировкиУпаковок")
		И ЗначениеЗаполнено(ДанныеXDTO.МаркировкиУпаковок) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.МаркировкиУпаковок Цикл
				
			ИнструкцияШтрихкодУпаковки = Новый Структура("Значение, ИмяПКО");
			ИнструкцияШтрихкодУпаковки.Значение = Строка.МаркировкаУпаковки;
			ИнструкцияШтрихкодУпаковки.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
			
			МассивСтрокШтрихкодыУпаковок.Добавить(Новый Структура(ИмяСвойства, ИнструкцияШтрихкодУпаковки));
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокШтрихкодыУпаковок.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТаблицы, МассивСтрокШтрихкодыУпаковок);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	Если Не ЗначениеЗаполнено(ЗначениеСвойства)
		Или ТипЗнч(ЗначениеСвойства) <> Тип("Структура")
		Или Не ЗначениеСвойства.Свойство("ТипЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		ИмяПКО = "Справочник_КонтрагентыГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		// Подразделения в качестве доп.реквизитов и доп.сведений не загружаются.
		// В формате подразделение не связано с организацией,
		// а в "Бухгалтерии предриятия" организация для подразделения обязательна.
		// Поэтому подразделение загружается всегда в контексте документов и
		// организация определяется из документов.
		// Т.к. доп.реквизит в общем случае не связан с организацией,
		// то он и не загружается.
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДоходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТипЦен")>0 Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	КонецЕсли;
КонецПроцедуры
Функция ЗаполненаИСуществует(Ссылка)
	Возврат	ЗначениеЗаполнено(Ссылка)
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка))
		И ОбщегоНазначения.СсылкаСуществует(Ссылка);
КонецФункции
Процедура ЗаполнениеОстатковДолговАвансовКредитовЗаймов(ПараметрыКонвертации)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы = 
		Новый Структура("ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймы");
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	КурсыВалют.Валюта
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ                         
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатковТипДата, ) КАК КурсыВалют
		|;
		|
		|///////////////////////////////// - клиенты долги - ///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|	ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) = 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		|		ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|	КОНЕЦ КАК Сумма,
		|	ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	&ДатаОстатковТипДата КАК ДатаПлатежа,
		|	""Активный"" КАК ПризнакКорректностиОстатков
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатковТипДата,
		|			(Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)),
		|			&ВидыСубконто,
		|			) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
		|	И НЕ (
		|			(ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ)))
		|		И 
		|			ХозрасчетныйОстатки.Субконто2.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|		)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - клиенты авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Организация КАК Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ВЫБОР
		|			КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0) = 0
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
		|			ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0)
		|		КОНЕЦ КАК Сумма,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		&ДатаОстатковТипДата КАК ДатаПлатежа,
		|		ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		""Пассивные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками))
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ)),
		|				&ВидыСубконто,
		|				) КАК ХозрасчетныйОстатки
		|	ГДЕ ХозрасчетныйОстатки.СуммаОстатокКт > 0 ИЛИ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт > 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ВЫБОР
		|			КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) = 0
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		|			ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|		КОНЕЦ,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		&ДатаОстатковТипДата,
		|		-ХозрасчетныйОстатки.СуммаОстатокДт,
		|		""Активные""
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)),&ВидыСубконто , ) КАК ХозрасчетныйОстатки
		|	ГДЕ
		|		ХозрасчетныйОстатки.СуммаОстатокДт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики долги - /////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|	ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатковТипДата,
		|			(Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательства))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежи))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)),
		|			&ВидыСубконто,
		|			) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокДт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Активные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежи))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ)),
		|				&ВидыСубконто,
		|				) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|	ГДЕ ХозрасчетныйОстатки.СуммаОстатокДт > 0
		|		И НЕ (
		|			(ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ)))
		|		И 
		|			ХозрасчетныйОстатки.Субконто2.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|			) 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)),
		|		""Пассивные""
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|	ГДЕ
		|		ХозрасчетныйОстатки.СуммаОстатокКт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|///////////////////////////////// - кредиты и займы - ///////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Краткосрочный"" КАК ТипСрочности,
		|		ХозрасчетныйОстатки.Счет КАК ВидРасчетов
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам)),&ВидыСубконто , ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)),
		|		""Долгосрочный"",
		|		ХозрасчетныйОстатки.Счет
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент";
		
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковТипДата", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл",   Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результаты = Запрос.ВыполнитьПакет();
	СтруктураПараметров = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы;
	
	// порядок в пакете следующий: ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез
	
	СтруктураПараметров.ДолгиКлиенты     = Результаты[Результаты.Количество()-5].Выгрузить();
	СтруктураПараметров.АвансыКлиенты    = Результаты[Результаты.Количество()-4].Выгрузить();
	СтруктураПараметров.ДолгиПоставщики  = Результаты[Результаты.Количество()-3].Выгрузить();
	СтруктураПараметров.АвансыПоставщики = Результаты[Результаты.Количество()-2].Выгрузить();
	СтруктураПараметров.КредитыЗаймы     = Результаты[Результаты.Количество()-1].Выгрузить();
КонецПроцедуры
Процедура ЗаполнениеОтражениеВУСН(Объект, ТабличнаяЧасть)
	Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата, Истина, Объект.Ссылка) Тогда
								
		ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента,
			"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
		ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
		ВариантОтраженияУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
		
		// Заполняем отражение в УСН для ТЧ
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН = ВариантОтраженияУСН;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, Организация, ДатаДокумента, ЭтоПоступлениеДС)
	Если СтруктураДанныхСтроки.Свойство("СтавкаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) И ЭтоПоступлениеДС Тогда
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, ДатаДокумента);
	Иначе
		ПлательщикНДС = Истина;
	КонецЕсли;
	ТекСтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДатаДокумента, ПлательщикНДС);
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтавкаНДС);
	ТекСуммаНДС = СтруктураДанныхСтроки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
	СтруктураДанныхСтроки.Вставить("СуммаНДС", ТекСуммаНДС);
КонецПроцедуры
Процедура ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект)
	// Вызываем заполнение только для новых объектов.
	Если Не ЭтоНовыйОбъект(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОплатаПлатежнойКартой") Тогда
		
		СпособОценкиТоваров = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
		УчетВПродажныхЦенах = (СпособОценкиТоваров = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		Если (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
				Или Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
			И УчетВПродажныхЦенах Тогда
			ЗаполнитьЗначенияСвойств(Объект,
				УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
		КонецЕсли;
	Иначе // РеализацияТоваровУслуг, ВозвратТоваровОтПокупателя, ОтчетОРозничныхПродажах
		ЗаполнитьЗначенияСвойств(Объект,
			УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МенеджерОбъекта.УстановитьДеятельностьНаТорговомСборе(Объект);
КонецПроцедуры
Процедура ЗаполнитьДоговорДаннымиЗаполнения(ДоговорОбъект, ДанныеЗаполнения)
	// Дубль обработчика заполнения справочника Договоры.
	// Исключено заполнение подписантов из-за особенностей работы в режиме сервиса.
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура();
	КонецЕсли;
	
	// Если в договоре уже заполнен вид договора - то не нужно его перезаполнять.
	// Для этого в данные заполнения передается указанный в договоре вид.
	Если НЕ (ДанныеЗаполнения.Свойство("ВидДоговора")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ВидДоговора)) Тогда
		Если ЗначениеЗаполнено(ДоговорОбъект.ВидДоговора) Тогда
			ДанныеЗаполнения.Вставить("ВидДоговора", ДоговорОбъект.ВидДоговора); 
		КонецЕсли;
	КонецЕсли;
	
	Справочники.ДоговорыКонтрагентов.УстановитьДоступныеВидыДоговора(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ДоговорОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ДоговорОбъект.ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			ДоговорОбъект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДоговорОбъект.Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	
		ДоговорОбъект.СпособЗаполненияСтавкиНДС =
			Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоУмолчанию(ДоговорОбъект.Владелец);
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДокументОснованиеСписанияСРасчетногоСчета(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДокументОснование) Тогда
		Если ТипЗнч(ПолученныеДанные.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
			И ТипЗнч(ДанныеИБ.ДокументОснование) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			// В информационной базе в документе-основании не платежное поручение, этот документ введен на основании
			// какого-то документа. Поэтому затирать его платежным поручением не нужно.
			ПолученныеДанные.ДокументОснование = ДанныеИБ.ДокументОснование;
		КонецЕсли;
	Иначе
		// В полученных данных документ-основание не заполнен, поэтому сохраняем значение из ИБ
		ПолученныеДанные.ДокументОснование = ДанныеИБ.ДокументОснование;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в дополнительных реквизитах, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваДополнительныхРеквизитовПолученныхДанных = ПолученныеДанные.ДополнительныеРеквизиты.Выгрузить();
	СвойстваДополнительныхРеквизитовПолученныхДанных.Свернуть("Свойство", "");
	
	Для Каждого СвойствоДополнительногоРеквизита Из СвойстваДополнительныхРеквизитовПолученныхДанных Цикл
		Если ЗначениеЗаполнено(СвойствоДополнительногоРеквизита.Свойство) Тогда
			
			СтруктураОтбора = Новый Структура("Свойство", СвойствоДополнительногоРеквизита.Свойство);	
		
			// Перед тем, как добавить реквизиты из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.ДополнительныеРеквизиты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.ДополнительныеРеквизиты.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в контактной информации, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваВидаКонтактнойИнформации = ПолученныеДанные.КонтактнаяИнформация.Выгрузить();
	СвойстваВидаКонтактнойИнформации.Свернуть("Вид", "");
	
	Для Каждого СвойствоВидаКонтактнойИнформации Из СвойстваВидаКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СвойствоВидаКонтактнойИнформации.Вид) Тогда
			
			СтруктураОтбора = Новый Структура("Вид", СвойствоВидаКонтактнойИнформации.Вид);	
		
			// Перед тем, как добавить виды контактной информации из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.КонтактнаяИнформация.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		ТипОбъекта = ПолученныеДанные.Метаданные().Имя;
		РодительВидовКИ = Справочники.ВидыКонтактнойИнформации["Справочник"+ТипОбъекта];
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			
			ТекВидКИ = Неопределено;
			
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ТипКИ = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
				
				Если ЗначениеЗаполнено(НаименованиеКИ) Тогда
					Запрос = Новый Запрос();
					Запрос.Параметры.Вставить("Родитель",     РодительВидовКИ);
					Запрос.Параметры.Вставить("Наименование", НаименованиеКИ);
					Запрос.Параметры.Вставить("Тип",          ТипКИ);
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВидыКонтактнойИнформации.Ссылка
					|ИЗ
					|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
					|ГДЕ
					|	ВидыКонтактнойИнформации.Родитель = &Родитель
					|	И ВидыКонтактнойИнформации.Наименование = &Наименование
					|	И ВидыКонтактнойИнформации.Тип = &Тип";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ТекВидКИ = Выборка.Ссылка;
					Иначе
						ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
						ВидКИОбъект.ОбменДанными.Загрузка = Истина;
						ВидКИОбъект.Используется = Истина;
						ВидКИОбъект.Родитель     = РодительВидовКИ;
						ВидКИОбъект.Наименование = НаименованиеКИ;
						ВидКИОбъект.Тип = ТипКИ;
						ВидКИОбъект.Записать();
						ТекВидКИ = ВидКИОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекВидКИ, "Тип, РазрешитьВводНесколькихЗначений, ЗапретитьРедактированиеПользователем");
			
			// Проверим, что вид КИ не поддерживает множественные значения.
			// Если так - то нужно убедиться, что в табличной части нет такого вида КИ
			СтрокиВидаКИ = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ТекВидКИ));
			Если СтрокиВидаКИ.Количество() > 0 Тогда
				Если НЕ СвойстваВидаКИ.РазрешитьВводНесколькихЗначений Тогда
					Если СвойстваВидаКИ.ЗапретитьРедактированиеПользователем Тогда
						Продолжить;
				 	Иначе
				 		ОбъектВидаКИ = ТекВидКИ.ПолучитьОбъект();
				 		ОбъектВидаКИ.РазрешитьВводНесколькихЗначений = Истина;
				 		ОбъектВидаКИ.Записать();
				 	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
				ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ, , Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкаРеализацииОтчетностьСдана(Объект)
	ДокументРеализацииСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументРеализации, Истина);
	
	Если Не ЗначениеЗаполнено(ДокументРеализацииСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализацииСсылка, "Дата");
	
	Если Год(ДатаДокументаРеализации) < Год(Объект.Дата)
		И Месяц(Объект.Дата) > 1 Тогда
		// Ставим флаг ОтчетностьПодписана в том случае, если:
		//  - документ реализации в прошлом году
		//  - документ корректировки пришел в феврале или позже. В январе скорее всего отчетность еще не сдана.
		// В этом случае установим флаг "Отчетность подписана".
		Объект.ОтчетностьПодписана = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкуПоступленияПоОснованию(Объект, ДокументПоступления, ИсправляемыйДокументПоступления)
	Объект.ДокументПоступления = ДокументПоступления;
	Объект.ИсправляемыйДокументПоступления = ИсправляемыйДокументПоступления;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	
	ТипЗнчДокументаПоступления = ТипЗнч(Объект.ДокументПоступления);
	
	Если ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровОтПокупателяТовары.СпособУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.ОтражениеВУСН,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщику.Номенклатура,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщику.Количество КАК Количество,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщику.Цена КАК Цена,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщику.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровПоставщику.ЦенаВРознице КАК ЦенаВРознице,
			|	ВозвратТоваровПоставщику.СуммаВРознице КАК СуммаВРознице,
			|	ВозвратТоваровПоставщику.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
			|	ВозвратТоваровПоставщику.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
			|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ВозвратТоваровПоставщику.СчетРасчетов КАК СчетРасчетов
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
			|ГДЕ
			|	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	""Таможенная пошлина"" КАК СодержаниеДоИзменения,
			|	""Таможенная пошлина"" КАК Содержание,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоКорректировки,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоИзменения,
			|	ГТДИмпортТовары.СуммаПошлины КАК Сумма,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДС,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДС,
			|	ГТДИмпортТовары.ДокументПартии,
			|	ГТДИмпортТовары.СчетУчета КАК СчетЗатрат,
			|	ГТДИмпортТовары.Номенклатура КАК Субконто1,
			|	ГТДИмпортТовары.СчетУчетаНУ КАК СчетЗатратНУ,
			|	ГТДИмпортТовары.Номенклатура КАК СубконтоНУ1,
			|	ГТДИмпортТовары.СтатьяЗатратНУ,
			|	ГТДИмпортТовары.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ГТДИмпортТовары.СпособУчетаНДС
			|ИЗ
			|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
			|		ПО ГТДИмпортТовары.НомерРаздела = ГТДИмпортРазделы.НомерСтроки
			|			И ГТДИмпортТовары.Ссылка = ГТДИмпортРазделы.Ссылка
			|ГДЕ
			|	ГТДИмпортТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаДокумента, СуммаВключаетНДС");
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка КАК Ссылка,
			|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаНДСВознаграждения, 0)) КАК СуммаНДС,
			|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаВознаграждения, 0)) КАК СуммаВознаграждения
			|ПОМЕСТИТЬ ТаблицаСумм
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
			|		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажахУслуги.Ссылка
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Комиссионное вознаграждение"" КАК Содержание,
			|	""Комиссионное вознаграждение"" КАК СодержаниеДоИзменения,
			|	ОтчетКомиссионераОПродажах.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДС,
			|	ТаблицаСумм.СуммаВознаграждения КАК СуммаДоКорректировки,
			|	ТаблицаСумм.СуммаВознаграждения КАК СуммаДоИзменения,
			|	ТаблицаСумм.СуммаВознаграждения КАК Сумма,
			|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДСДоИзменения,
			|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажах.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажах.Субконто1 КАК Субконто1,
			|	ОтчетКомиссионераОПродажах.Субконто2 КАК Субконто2,
			|	ОтчетКомиссионераОПродажах.Субконто3 КАК Субконто3,
			|	ОтчетКомиссионераОПродажах.СчетУчетаЗатрат КАК СчетЗатратНУ,
			|	ОтчетКомиссионераОПродажах.Субконто1 КАК СубконтоНУ1,
			|	ОтчетКомиссионераОПродажах.Субконто2 КАК СубконтоНУ2,
			|	ОтчетКомиссионераОПродажах.Субконто3 КАК СубконтоНУ3,
			|	ОтчетКомиссионераОПродажах.СпособУчетаНДС КАК СпособУчетаНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСумм КАК ТаблицаСумм
			|		ПО ОтчетКомиссионераОПродажах.Ссылка = ТаблицаСумм.Ссылка
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаДокумента");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетТовары.Количество КАК Количество,
			|	АвансовыйОтчетТовары.Цена КАК Цена,
			|	АвансовыйОтчетТовары.Сумма КАК Сумма,
			|	АвансовыйОтчетТовары.СтавкаНДС КАК СтавкаНДС,
			|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетТовары.СчетУчета КАК СчетУчета,
			|	АвансовыйОтчетТовары.СчетУчетаНДС КАК СчетУчетаНДС,
			|	АвансовыйОтчетТовары.ОтражениеВУСН КАК ОтражениеВУСН,
			|	АвансовыйОтчетТовары.НомерГТД КАК НомерГТД,
			|	АвансовыйОтчетТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|	АвансовыйОтчетТовары.Количество КАК КоличествоДоИзменения,
			|	АвансовыйОтчетТовары.Цена КАК ЦенаДоИзменения,
			|	АвансовыйОтчетТовары.Сумма КАК СуммаДоИзменения,
			|	АвансовыйОтчетТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	АвансовыйОтчетТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	АвансовыйОтчетТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.СчетФактура = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетПрочее.Содержание КАК Содержание,
			|	АвансовыйОтчетПрочее.Сумма КАК Сумма,
			|	АвансовыйОтчетПрочее.СтавкаНДС КАК СтавкаНДС,
			|	АвансовыйОтчетПрочее.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетПрочее.СчетЗатрат КАК СчетЗатрат,
			|	АвансовыйОтчетПрочее.Субконто1 КАК Субконто1,
			|	АвансовыйОтчетПрочее.Субконто2 КАК Субконто2,
			|	АвансовыйОтчетПрочее.Субконто3 КАК Субконто3,
			|	АвансовыйОтчетПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
			|	АвансовыйОтчетПрочее.СубконтоНУ1 КАК СубконтоНУ1,
			|	АвансовыйОтчетПрочее.СубконтоНУ2 КАК СубконтоНУ2,
			|	АвансовыйОтчетПрочее.СубконтоНУ3 КАК СубконтоНУ3,
			|	АвансовыйОтчетПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
			|	АвансовыйОтчетПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
			|	АвансовыйОтчетПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
			|	АвансовыйОтчетПрочее.Содержание КАК СодержаниеДоИзменения,
			|	АвансовыйОтчетПрочее.Сумма КАК СуммаДоИзменения,
			|	АвансовыйОтчетПрочее.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	АвансовыйОтчетПрочее.СуммаНДС КАК СуммаНДСДоИзменения
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.СчетФактура = &Ссылка";
					
			Выборка = Запрос.ВыполнитьПакет();
			
		ВыборкаТоваров = Выборка[0].Выбрать();
		
		Пока ВыборкаТоваров.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоваров);
		КонецЦикла;
			
		ВыборкаУслуг = Выборка[1].Выбрать();
		
		Пока ВыборкаУслуг.Следующий() Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУслуг);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкуРеализацииПоОснованию(Объект, ДокументРеализации, ИсправляемыйДокументРеализации)
	Объект.ДокументРеализации = ДокументРеализации;
	Объект.ИсправляемыйДокументРеализации = ИсправляемыйДокументРеализации;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументРеализации);
	
	ТипЗнчДокументаРеализации = ТипЗнч(Объект.ДокументРеализации);
	
	Если ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.СчетДоходов КАК СчетДоходов,
			|	ВозвратТоваровОтПокупателяТовары.Субконто КАК Субконто,
			|	ВозвратТоваровОтПокупателяТовары.СчетРасходов КАК СчетРасходов,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщикуТовары.Номенклатура,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщикуТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщикуТовары.СчетУчетаНДС КАК СчетУчетаНДСПоРеализации,
			|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
			|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
			|ГДЕ
			|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаВключаетНДС");
			
		
		Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ОтчетКомитентуОПродажахТовары.СуммаНДСВознаграждения) КАК СуммаНДСВознаграждения,
			|	СУММА(ОтчетКомитентуОПродажахТовары.СуммаВознаграждения) КАК СуммаВознаграждения,
			|	ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ТаблицаСумм
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
			|ГДЕ
			|	ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомитентуОПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению КАК Номенклатура,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаДоКорректировки,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаДоИзменения,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК Сумма,
			|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДСДоИзменения,
			|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДСДоКорректировки,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДСДоИзменения,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДС,
			|	ОтчетКомитентуОПродажах.СчетДоходов,
			|	ОтчетКомитентуОПродажах.Субконто,
			|	ОтчетКомитентуОПродажах.СчетУчетаНДСПоРеализации
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСумм КАК ТаблицаСумм
			|		ПО ОтчетКомитентуОПродажах.Ссылка = ТаблицаСумм.Ссылка
			|ГДЕ
			|	ОтчетКомитентуОПродажах.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Объект.СуммаДокумента = Выборка.Сумма;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетРасходов) Тогда
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,
																							Выборка.Номенклатура);
				НоваяСтрока.СчетРасходов = СчетаУчета.СчетРасходов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные)
	Если (ЗначениеЗаполнено(ПолученныеДанные.КурсВзаиморасчетов) И ЗначениеЗаполнено(ПолученныеДанные.КратностьВзаиморасчетов))
		ИЛИ НЕ ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
	ПолученныеДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ПолученныеДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, ПараметрыКонвертации, ИмяТаблицы)
	// "ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез"
	
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы[ИмяТаблицы];
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
			Колонки.Добавить("ВидРасчетов");
			Колонки.Добавить("РасчетныйДокумент");
			Колонки.Добавить("ДатаРасчетногоДокумента");
			Колонки.Добавить("НомерРасчетногоДокумента");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные[СвойствоИБ]) Тогда
			ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьОтражениеВУСНОтчетаКомитенту(Объект)
	ПрименениеУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ЗаполнятьОтражениеВУСН = ПрименениеУСН И ПрименениеУСНДоходы И Объект.УдержатьВознаграждение;
	
	Если ЗаполнятьОтражениеВУСН Тогда 
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
		ИтогоВознаграждение = Объект.Товары.Итог("СуммаВознаграждения") + ?(Объект.СуммаВключаетНДС, 0, Объект.Товары.Итог("СуммаНДСВознаграждения"));
		СуммаДляКУДиР = ИтогоВознаграждение;
		Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			КурсДокумента = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
			СуммаДляКУДиР = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
				Объект.ВалютаДокумента, ВалютаРегламентированногоУчета,
				КурсДокумента, 1,
				КратностьДокумента, 1);
		КонецЕсли;
			
		Объект.Графа4_УСН     = 0;
		Объект.Графа5_УСН     = СуммаДляКУДиР;
		Объект.ДоходыЕНВД_УСН = Ложь;
		Объект.Содержание_УСН = "Комиссионное вознаграждение удержано из выручки комитента.";
		
	Иначе
		
		Объект.Графа4_УСН          = 0;
		Объект.Графа5_УСН          = 0;
		Объект.ДоходыЕНВД_УСН      = Ложь;
		Объект.Содержание_УСН      = "";
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПКОДокументаРасчетовДляОтправки(ТаблицаАвансов, СпособУдаленияСтрокБезОтправляемыхДокументов)
	ТаблицаАвансов.Колонки.Добавить("ДокументРасчетов");
	// ДокументРасчетов
	СтрокиДляУдаления = Новый Массив;
	Для Каждого Строка Из ТаблицаАвансов Цикл
		Если ЗначениеЗаполнено(Строка.ДанныеДокументаРасчетов) Тогда
			ИмяПКО = ИмяПКОПоТипуЗначенияДокумента(Строка.ДанныеДокументаРасчетов);
			Если ИмяПКО = Неопределено Тогда
				Если СпособУдаленияСтрокБезОтправляемыхДокументов = "УдалятьНеНайденные" Тогда
					// Не нашли ПКО для выгрузки документа, поэтому удаляем строку из таблицы авансов.
					СтрокиДляУдаления.Добавить(Строка);
				КонецЕсли;
			Иначе
				Инструкция = Новый Структура("Значение, ИмяПКО", Строка.ДанныеДокументаРасчетов, ИмяПКО);
				Строка.ДокументРасчетов = Инструкция;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ТаблицаАвансов.Удалить(СтрокаДляУдаления);
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект)
	Если Не Объект.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = 0 По Объект.ДополнительныеСвойства.РасшифровкаПлатежа.Количество() - 1 Цикл
		СтрокаРасшифровкиПлатежаИзДопСвойств = Объект.ДополнительныеСвойства.РасшифровкаПлатежа[НомерСтроки];
		Если СтрокаРасшифровкиПлатежаИзДопСвойств.Свойство("Сделки")
			И ЗначениеЗаполнено(СтрокаРасшифровкиПлатежаИзДопСвойств.Сделки) Тогда
			
			Для Каждого Сделка Из СтрокаРасшифровкиПлатежаИзДопСвойств.Сделки Цикл
				Если ЗаполненаИСуществует(Сделка) Тогда
					СтрокаДокумента = Объект.РасшифровкаПлатежа[НомерСтроки];
					СтрокаДокумента.Сделка = Сделка;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьПорядокОтраженияАвансаУСН(Объект)
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ПорядокОтраженияАванса) Тогда
			СтрокаРасшифровки.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьПризнакиВидаПродукцииИС(НоменклатураОбъект, ВидПродукцииИС)
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ВидПродукцииИС) = ВРег("Алкогольная") Тогда
		// Признака "Алкогольная продукция" в Номенклатуре нет, поэтому ничего не делаем. 
		Возврат;
	КонецЕсли;
	
	СоответствияФлагов = ПризнакиНоменклатурыПоВидамПродукцииИС();
	ПризнакУстановлен = Ложь;
	
	Для Каждого СоответствиеФлага Из СоответствияФлагов Цикл
		
		Если Не ЗначениеЗаполнено(СоответствиеФлага.Значение) Тогда
			Продолжить;
		КонецЕсли;
	
		НоменклатураОбъект[СоответствиеФлага.Значение] = ВРег(ВидПродукцииИС) = ВРег(СоответствиеФлага.Ключ);
		Если НоменклатураОбъект[СоответствиеФлага.Значение] Тогда
			ПризнакУстановлен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПризнакУстановлен Тогда
		// Для молочной продукции нужно еще взвести флаг "Подконтрольная продукция Ветис", т.к. молочная продукция обязательно проходит через Ветис.
		НоменклатураОбъект.ПодконтрольнаяПродукцияВЕТИС = НоменклатураОбъект.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, РеквизитыОбъекта)
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные[РеквизитОбъекта]) Тогда
			ПолученныеДанные[РеквизитОбъекта] = ДанныеИБ[РеквизитОбъекта];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьРеквизитПеречислимогоТипаИзСвойства(ПолученныеДанные, ДанныеXDTO, ИмяРеквизита, ИмяСвойства, ВидПеречисления)
	ИмяЗначения = Неопределено;
	
	Если ДанныеXDTO.Свойство(ИмяСвойства, ИмяЗначения)
		И ЗначениеЗаполнено(ИмяЗначения) Тогда
		
		Если ТипЗнч(ИмяЗначения) = Тип("Структура")
			И ИмяЗначения.Свойство("Значение") Тогда
			ИмяЗначения = ИмяЗначения.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяЗначения) Тогда
			ЗначенияПеречисления = Метаданные.Перечисления[ВидПеречисления].ЗначенияПеречисления;
			
			Если Не ЗначенияПеречисления.Найти(ИмяЗначения) = Неопределено Тогда
				ПолученныеДанные[ИмяРеквизита] = Перечисления[ВидПеречисления][ИмяЗначения];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьРеквизитыИзДанныхИБ(ПолученныеДанные, ДанныеИБ, СтрокаРеквизиты)
	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизиты, ",", Истина, Истина);
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначенияПриемник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияПриемник, ПолученныеДанные);
		
		ЗначенияИсточник = Новый Структура(Реквизит);
		ЗаполнитьЗначенияСвойств(ЗначенияИсточник, ДанныеИБ);
		
		Если Не ЗначениеЗаполнено(ЗначенияПриемник[Реквизит])
			И ЗначениеЗаполнено(ЗначенияИсточник[Реквизит]) Тогда
			ЗаполнитьЗначенияСвойств(ПолученныеДанные, ЗначенияИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСтатьюДоходовВСубконто(ХранилищеСубконто, ИмяСубконто, СчетДоходов, СтатьяДоходовXDTO)
	// ХранилищеСубконто - структура, в которой нужно заполнить субконто.
	// Это может быть либо структура для заполнения строки табличной части, либо ПолученныеДанные.ДополнительныеСвойства для заполнения реквизитов.
	Если ЗначениеЗаполнено(СтатьяДоходовXDTO) Тогда
		
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
				Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы", СтатьяДоходовXDTO));
				
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов);
		
		Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			
			ВидСубконто = Неопределено;
			ДанныеСчета.Свойство("ВидСубконто" + ИндексСубконто, ВидСубконто);
	
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Для Каждого ТипАналитики Из СоответствиеСубконто Цикл
					Если ВидСубконто = ТипАналитики.Ключ Тогда
						ХранилищеСубконто.Вставить(ИмяСубконто + ИндексСубконто, ТипАналитики.Значение);
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтатьюЗатратВСубконто(ХранилищеСубконто, ИмяСубконто, СчетЗатрат, СтатьяЗатратXDTO)
	// ХранилищеСубконто - структура, в которой нужно заполнить субконто.
	// Это может быть либо структура для заполнения строки табличной части, либо ПолученныеДанные.ДополнительныеСвойства для заполнения реквизитов.
	Если ЗначениеЗаполнено(СтатьяЗатратXDTO) Тогда
		
		СоответствиеСубконто = ПравилаКонвертацииСтатьиЗатратПоВидамСубконто(СтатьяЗатратXDTO);
				
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
		
		Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			
			ВидСубконто = Неопределено;
			ДанныеСчета.Свойство("ВидСубконто" + ИндексСубконто, ВидСубконто);
	
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Для Каждого ТипАналитики Из СоответствиеСубконто Цикл
					Если ВидСубконто = ТипАналитики.Ключ Тогда
						ХранилищеСубконто.Вставить(ИмяСубконто + ИндексСубконто, ТипАналитики.Значение);
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия ИЗ СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ИмяРеквизита, СоответствиеСубконто = Неопределено)
	Для Каждого СтрокаВидаСубконто Из ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
	    ТипСубконто = СтрокаВидаСубконто.ВидСубконто.ТипЗначения;
	    ИмяРеквизитаСубконто = ИмяРеквизита + СтрокаВидаСубконто.НомерСтроки;
	    Субконто    = ПолученныеДанные[ИмяРеквизитаСубконто];
	
	    Если ТипСубконто.ПривестиЗначение(Субконто) <> Субконто Тогда
	        ПолученныеДанные[ИмяРеквизитаСубконто] = ТипСубконто.ПривестиЗначение(Субконто);
	    КонецЕсли;
	    ТекСубконтоЗаполнено = Ложь;
		
	    // Заполнение значением, переданным явно (значение для заполнения).
		Если СоответствиеСубконто <> Неопределено Тогда
			Для Каждого СубконтоДляЗаполнения Из СоответствиеСубконто Цикл
				Если ЗначениеЗаполнено(СубконтоДляЗаполнения.Значение) Тогда
					Попытка
						ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СубконтоДляЗаполнения.Ключ];
					Исключение
						Продолжить;
					КонецПопытки;
					
					Если СтрокаВидаСубконто.ВидСубконто = ТекВидСубконто Тогда
						ПолученныеДанные[ИмяРеквизитаСубконто] = СубконтоДляЗаполнения.Значение;
						ТекСубконтоЗаполнено = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	    Если ДанныеИБ <> Неопределено Тогда
	    	Если ТекСубконтоЗаполнено Тогда
	    	   // Перенос получившегося субконто в ДанныеИБ
	        	ДанныеИБ[ИмяРеквизитаСубконто] = ПолученныеДанные[ИмяРеквизитаСубконто];
	    	Иначе
		    	// Возможно этот вид субконто был заполнен в ДанныеИБ.
		    	Для Ном = 1 По 3 Цикл
					Если ТипСубконто.Типы().Найти(ТипЗнч(ДанныеИБ[ИмяРеквизита+Ном])) <> Неопределено Тогда
						ПолученныеДанные[ИмяРеквизитаСубконто] = ДанныеИБ[ИмяРеквизита+Ном];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСуммуНДСВТоварахПриНДСУПокупателя(ПолученныеДанные)
	Для Каждого СтрокаТовара ИЗ ПолученныеДанные.Товары Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТовара.СуммаНДС)
			И ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС)
			И СтрокаТовара.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0
			И СтрокаТовара.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТовара, ПолученныеДанные.СуммаВключаетНДС); 
			
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетаУчета(Объект)
	УниверсальныйОбменЗагрузкаАналитики.ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ЗаполнитьСчетаУчетаВозвратнойТары(Объект)
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетПоУмолчанию = Неопределено)
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) 
			И НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом)
		И СчетПоУмолчанию <> Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = СчетПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, ИмяТабличнойЧасти, ПоляДляОтбора, ПоляДляЗаполнения)
	// Заполняет ПоляДляЗаполнения табличной части значениями ДанныхЗаполнения
	
	СтруктураОтбора = Новый Структура(ПоляДляОтбора);
	СтруктураОтбора.Вставить("ТЧ", ИмяТабличнойЧасти);
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если Строка.ЕстьВДокументеРеализации Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка, ПоляДляОтбора);
			ДанныеЗаполненияСтроки = ДанныеЗаполнения.НайтиСтроки(СтруктураОтбора);
			Если ДанныеЗаполненияСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаполненияСтроки[0], ПоляДляЗаполнения);
				Если ДанныеЗаполненияСтроки.Количество() > 1 Тогда
					ДанныеЗаполнения.Удалить(ДанныеЗаполнения.Индекс(ДанныеЗаполненияСтроки[0]));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Процедура ЗаполнитьЦенуЕслиНеУказана(Таблица, ПостфиксКолонок = "")
	ИмяКолонкиЦена = "Цена" + ПостфиксКолонок;
	ИмяКолонкиКоличество = "Количество" + ПостфиксКолонок;
	ИмяКолонкиСумма = "Сумма" + ПостфиксКолонок;
	
	Для Каждого Строка Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонкиЦена]) Тогда
			Если ЗначениеЗаполнено(Строка[ИмяКолонкиКоличество]) Тогда
				Строка[ИмяКолонкиЦена] = Окр(Строка[ИмяКолонкиСумма] / Строка[ИмяКолонкиКоличество], 2);
			Иначе
				Строка[ИмяКолонкиЦена] = Строка[ИмяКолонкиСумма];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Номер) Тогда
	
		Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			Или Не КомпонентыОбмена.УзелКорреспондентаОбъект.УстанавливатьПечатьПрефиксаИБДокументов Тогда
			Возврат;
		КонецЕсли;
	
		ПрефиксИнформационнойБазы = ОбменДаннымиУТ.ПрефиксИнформационнойБазыИзНомера(ПолученныеДанные.Номер);
		Если ПрефиксИнформационнойБазы <> ""
			И КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов.Найти(ПрефиксИнформационнойБазы) = Неопределено Тогда
			КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов.Добавить(ПрефиксИнформационнойБазы);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Функция ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков)
	// Сортировка счетов учета.
	СчетаУчетаН   = Новый Массив; // Cчета с суммовым учетом только по номенклатуре.
	СчетаУчетаНС  = Новый Массив; // Cчета с суммовым учетом по номенклатуре и складам.
	СчетаУчетаНП  = Новый Массив; // Cчета с суммовым учетом по номенклатуре и партиям.
	СчетаУчетаНПС = Новый Массив; // Cчета с суммовым учетом по номенклатуре, складам и партиям.
	СчетаУчетаНК  = Новый Массив; // Cчета с суммовым учетом по контрагентам, и номенклатуре.
	СчетаУчетаНПК = Новый Массив; // Cчета с суммовым учетом по контрагентам, номенклатуре и партиям.
	СчетаУчетаНКС = Новый Массив; // Cчета с суммовым учетом по контрагентам, номенклатуре и складам.
	
	СчетаУчетаН_Склад  = Новый Массив; // Cчета с суммовым учетом только по номенклатуре и количественным по складу.
	СчетаУчетаНП_Склад = Новый Массив; // Cчета с суммовым учетом по номенклатуре и партиям и количественным по складу.
	СчетаУчетаНК_Склад = Новый Массив; // Cчета с суммовым учетом по номенклатуре и контрагентам и количественным по складу.
	
	УчетТоваров.СортировкаСчетовУчета(МассивСчетовУчета,
		СчетаУчетаН,
		СчетаУчетаНС,
		СчетаУчетаНП,
		СчетаУчетаНПС,
		СчетаУчетаНК,
		СчетаУчетаНПК,
		СчетаУчетаНКС,
		СчетаУчетаН_Склад,
		СчетаУчетаНП_Склад,
		СчетаУчетаНК_Склад);
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",     Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",     Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	ТекстыЗапросовДляОстатков = Новый Массив;
	
	// Если не ведется суммовой учет по складам, соберем остатки без учета складов.
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
		"ВЫБРАТЬ
		|	Остатки.Организация КАК Организация,
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Организация,
		|	Остатки.Счет,
		|	Остатки.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН_Склад), &ВидыСубконтоНС, ) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Субконто1,
		|	ОстаткиПоСкладам.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура";
	
	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		Если ТекстСуммыКоличественныхСкладов <> "" Тогда
			ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
					|;
					|";
		КонецЕсли;
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
		"ВЫБРАТЬ
		|	Остатки.Организация КАК Организация,
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументПоступления,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Организация,
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументПоступления,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП_Склад), &ВидыСубконтоНПС, ) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Субконто1,
		|	ОстаткиПоСкладам.Субконто2,
		|	ОстаткиПоСкладам.Субконто3
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументПоступления";
		
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Организация");
	
	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	ОстаткиПоСкладам.Склад,
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.Организация = СуммовыеОстатки.Организация
		|			И ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.Склад");
	
	КонецЕсли;
	
	Если СчетаУчетаНС.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация");
	
	КонецЕсли;
	
	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда
	
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	Остатки.Субконто2 КАК ДокументПоступления,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация");
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	ОстаткиПоСкладам.ДокументПоступления,
		|	ОстаткиПоСкладам.Склад,
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.Организация = СуммовыеОстатки.Организация
		|			И ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|			И ОстаткиПоСкладам.ДокументПоступления = СуммовыеОстатки.ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.ДокументПоступления,
		|	ОстаткиПоСкладам.Склад");
	
	КонецЕсли;
	
	Если СчетаУчетаНПС.Количество() > 0 Тогда
	
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	Остатки.Субконто2 КАК ДокументПоступления,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНПС), &ВидыСубконтоНПС, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация");
	
	КонецЕсли;
	
	// Удаляем ПОМЕСТИТЬ ВТ_Остатки из всех запросов, кроме первого
	ТекстПоместитьВТ_Остатки = "
	|ПОМЕСТИТЬ ВТ_Остатки";
	
	Для НомерЗапроса = 1 ПО ТекстыЗапросовДляОстатков.Количество() - 1 Цикл
		ТекстыЗапросовДляОстатков[НомерЗапроса] = СтрЗаменить(ТекстыЗапросовДляОстатков[НомерЗапроса], ТекстПоместитьВТ_Остатки,"");
	КонецЦикла;
	
	Если ТекстСуммыКоличественныхСкладов <> "" Тогда
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
				|;
				|";
	КонецЕсли;
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	Текст = ТекстСуммыКоличественныхСкладов + СтрСоединить(ТекстыЗапросовДляОстатков, ТекстОбъединитьВсе);
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
КонецФункции
Функция ЗначениеПеречисленияПоИдентификатору(ИдентификаторПеречисления, ИмяПеречисления)
	Если Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления.Найти(ИдентификаторПеречисления) <> Неопределено Тогда
		Возврат Перечисления[ИмяПеречисления][ИдентификаторПеречисления];
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция ЗначенияАналитикиДляОтраженияЗатрат(КомпонентыОбмена, СчетЗатрат, XDTOОрганизация, XDTOСпособаОтраженияРасходов)
	ЗначенияАналитикиОтраженияЗатрат = Новый Структура;
	
	ЗначенияАналитикиОтраженияЗатрат.Вставить("СчетЗатрат", СчетЗатрат);
	ЗначенияАналитикиОтраженияЗатрат.Вставить("Организация", СсылкаПоЗначениямXDTO(КомпонентыОбмена, "Справочник_Организации_Получение", XDTOОрганизация));
	
	Если XDTOСпособаОтраженияРасходов.Свойство("ПодразделениеЗатрат")
		И ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов.ПодразделениеЗатрат) Тогда
		
		ДобавитьОрганизациюВПодразделениеXDTO(XDTOСпособаОтраженияРасходов.ПодразделениеЗатрат, XDTOОрганизация);
		ЗначенияАналитикиОтраженияЗатрат.Вставить("ПодразделениеОрганизации", СсылкаПоЗначениямXDTO(КомпонентыОбмена, "Справочник_Подразделения_Получение", XDTOСпособаОтраженияРасходов.ПодразделениеЗатрат));
	КонецЕсли;
	
	СоответствиеСубконто = Новый Соответствие();
	Если XDTOСпособаОтраженияРасходов.Свойство("ГруппаАналитическогоУчетаНоменклатуры") Тогда
		СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, 
			Новый Структура("ИмяПКО, Значение", "Справочник_НоменклатурнаяГруппа_Получение", XDTOСпособаОтраженияРасходов.ГруппаАналитическогоУчетаНоменклатуры));
	КонецЕсли;
	Если XDTOСпособаОтраженияРасходов.Свойство("СтатьяЗатрат") Тогда
		СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
			Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы", XDTOСпособаОтраженияРасходов.СтатьяЗатрат));
		СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, 
			Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов_СтатьиЗатрат", XDTOСпособаОтраженияРасходов.СтатьяЗатрат));
	КонецЕсли;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
		ВидСубконто = Неопределено;
		ДанныеСчета.Свойство("ВидСубконто" + ИндексСубконто, ВидСубконто);
		Если ЗначениеЗаполнено(ВидСубконто)
			И ЗначениеЗаполнено(СоответствиеСубконто.Получить(ВидСубконто)) Тогда
			ДанныеСубконто = СоответствиеСубконто.Получить(ВидСубконто);
			Если ЗначениеЗаполнено(ДанныеСубконто.Значение) Тогда
				ЗначенияАналитикиОтраженияЗатрат.Вставить("Субконто" + Строка(ИндексСубконто),
					СсылкаПоЗначениямXDTO(КомпонентыОбмена, ДанныеСубконто.ИмяПКО, ДанныеСубконто.Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияАналитикиОтраженияЗатрат;
КонецФункции
Процедура ИзменитьЗнакРеквизитовСтруктуры(СтруктураРеквизитов,  СписокРеквизитов)
	Реквизиты = СтрРазделить(СписокРеквизитов,",");
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Не СтруктураРеквизитов.Свойство(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитов[Реквизит]) Тогда
			СтруктураРеквизитов[Реквизит] = -СтруктураРеквизитов[Реквизит];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ИменаПКОДокументаПоТипуXDTO(XDTOДокументаОснования)
	ИменаПКО = Новый Массив;
	
	ТипДокументаОснования = XDTOДокументаОснования.ТипЗначения;
	
	Если СтрНайти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
		ИменаПКО.Добавить("Документ_ОтчетКомиссионераОПродажах_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
		ИменаПКО.Добавить("Документ_ВозвратТоваровПоставщику");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураПолученный") > 0 Тогда
		ИменаПКО.Добавить("Документ_СчетФактураПолученный_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураВыданный") > 0 Тогда
		ИменаПКО.Добавить("Документ_СчетФактураВыданный_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
		ИменаПКО.Добавить("Документ_РеализацияТоваровУслуг");
		ИменаПКО.Добавить("Документ_РТиУБезПереходаПравСобственностиУслуги");
		// Правило "Документ_РеализацияОтгруженныхТоваров_Получение" не добавляем, т.к. корректно загрузить его по ссылке не получиться.
		// Дата этого документа определяется по дате перехода - а ее в ссылке нет.
	ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
		ИменаПКО.Добавить("Документ_КорректировкаРеализации_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
		ИменаПКО.Добавить("Документ_ОтчетКомитентуОПродажах_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
		ИменаПКО.Добавить("Документ_АктВыполненныхРабот");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
		ИменаПКО.Добавить("Документ_ВозвратТоваровОтПокупателя");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
		ИменаПКО.Добавить("ПТиУ_ПоступлениеТоваровУслуг");
		ИменаПКО.Добавить("ПТиУ_ПоступлениеДопРасходов");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
		ИменаПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
		ИменаПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
		ИменаПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
		ИменаПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
		ИменаПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
		ИменаПКО.Добавить("Документ_КорректировкаДолга_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
		ИменаПКО.Добавить("Документ_КорректировкаПоступления");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетПереработчика") > 0 Тогда
		ИменаПКО.Добавить("Документ_ОтчетПереработчика_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
		ИменаПКО.Добавить("Документ_ОтчетДавальцу_Получение");
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
		
		Если XDTOДокументаОснования.Свойство("ВидОперации")
			И XDTOДокументаОснования.ВидОперации.Значение = "ВозвратОплатыКлиентуНаПлатежнуюКарту" Тогда
			ИменаПКО.Добавить("Документ_ОперацияПоПлатежнойКартеКД_Получение");
		Иначе
			ИменаПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИменаПКО;
КонецФункции
Функция ИмяПКОДокументаПоТипуXDTO(XDTOДокументаОснования)
	ИмяПКО = Неопределено;
	
	ИменаПКО = ИменаПКОДокументаПоТипуXDTO(XDTOДокументаОснования);
	
	Если ИменаПКО.Количество() > 0 Тогда
		ИмяПКО = ИменаПКО[0];
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОПоТипуЗначенияДокумента(Документ)
	ИмяПКО = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ИмяПКО = "Документ_ПРСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ИмяПКО = "Документ_ЗаказКлиента_Отправка";	
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";	
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ИмяПКО = "Документ_СчетФактураПолученный_Отправка";	
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИмяПКО = "Документ_СчетФактураВыданный_Отправка";	
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ИмяТабличнойЧастиМатериаловВЭксплуатации(КомпонентыОбмена, СтрокаXDTO, РеквизитыМатериаловВЭксплуатации)
	ИмяТабличнойЧасти = "Спецодежда";
	
	Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов)
		И СтрокаXDTO.ТипЗапасов.Значение = "ИнвентарьИХозяйственныеПринадлежности" Тогда
		// Если указан тип запасов - Инвентарь, то загружаем строку в ТЧ ИнвентарьИХозяйственныеПринадлежности.
		// Если не инвентарь - то определяем табличную часть по счету передачи, который выбран для номенклатуры.
		
		ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности";
	
	ИначеЕсли ЗначениеЗаполнено(СтрокаXDTO.Номенклатура) Тогда
	
		// Получим номенклатуру
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Номенклатура,
										ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
						
		// Определяем счет учета по умолчанию
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			РеквизитыМатериаловВЭксплуатации.Организация, Номенклатура, РеквизитыМатериаловВЭксплуатации.Склад, РеквизитыМатериаловВЭксплуатации.Дата);
		
		Если СчетаУчета <> Неопределено Тогда
			
			Если СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
				ИмяТабличнойЧасти = "Спецоснастка";
			ИначеЕсли СчетаУчета.СчетУчета = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности Тогда
				ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности";
			КонецЕсли; 
			
		КонецЕсли;
							
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
КонецФункции
Процедура ИсправитьВидДоговора(КомпонентыОбмена, Объект)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДоговорыСКомиссионеромНаЗакупку.Найти(Объект.Ссылка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Возврат;
	КонецЕсли;
	
	Если МожноИзменитьКлючевыеПараметрыДоговора(КомпонентыОбмена, Объект.Ссылка) Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	КонецЕсли;
КонецПроцедуры
Функция КлючСубконтоДляДопСвойств(Префикс, ВидСубконто)
	Возврат Префикс + "_" + ВидСубконто.ИмяПредопределенныхДанных;
КонецФункции
Функция КонтрагентРозничныйПокупатель(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ЗначениеЗаполнено(ПараметрыКонвертации.КонтрагентРозничныйПокупатель) Тогда
		Возврат ПараметрыКонвертации.КонтрагентРозничныйПокупатель;
	КонецЕсли;
	
	Элемент = Справочники.Контрагенты.ПустаяСсылка();
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Розничный покупатель'");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
	Иначе
	
		// Создание элемента для обмена с заданными параметрами
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонтрагентОбъект.УстановитьНовыйКод();
	
		Попытка
			КонтрагентОбъект.Записать();
			Элемент = КонтрагентОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	ПараметрыКонвертации.КонтрагентРозничныйПокупатель = Элемент;
	
	Возврат Элемент
КонецФункции
Процедура КорректировкаДолга_ПередЗаписьюПолученныхДанных(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ)
	УстановитьВидОперацииКорректировкиДолга(ПолученныеДанные);
	
	// Заполним значение СуммаНУ для дебиторской и кредиторской задолженности
	Для Каждого Задолженность ИЗ ПолученныеДанные.ДебиторскаяЗадолженность Цикл
		Задолженность.СуммаНУ = Задолженность.Сумма;
	КонецЦикла;
	
	// Заполним значение СуммаНУ для дебиторской и кредиторской задолженности
	Для Каждого Задолженность ИЗ ПолученныеДанные.КредиторскаяЗадолженность Цикл
		Задолженность.СуммаНУ = Задолженность.Сумма;
	КонецЦикла;
	
	// Далее идет мержевание загруженной и существующей версии.
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные.
	// Дебиторская задолженность.
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("Сделка");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаНУ");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ДебиторскаяЗадолженность,
		ДанныеИБ.ДебиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.ДебиторскаяЗадолженность.Загрузить(ПолученныеДанные.ДебиторскаяЗадолженность.Выгрузить());
	
	// Кредиторская задолженность.
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Функция МестоВСтруктуреПредприятия(Подразделение)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		НаименованиеПодразделения = Подразделение.Наименование;
	Иначе
		НаименованиеПодразделения = "Подразделение по умолчанию";
	КонецЕсли;
	
	ПодразделениеПоУмолчанию = Новый Структура("Наименование", НаименованиеПодразделения);
	
	Возврат Новый Структура("Значение, ИмяПКО",
		ПодразделениеПоУмолчанию, "Справочник_СтруктураПредприятия_ИзСтруктуры");
КонецФункции
Функция МожноИзменитьКлючевыеПараметрыДоговора(КомпонентыОбмена, Договор)
	МожноИзменитьПризнак = Истина;
	
	НовыйДоговор = КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Договор) <> Неопределено;
	Если Не НовыйДоговор Тогда
		ДокументыПоДоговору = Справочники.ДоговорыКонтрагентов.ДокументыПоДоговору(Договор);	
		НепроведенныеДокументыПоДоговору = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыПоДоговору);
		
		Если НепроведенныеДокументыПоДоговору.Количество() < ДокументыПоДоговору.Количество() Тогда
			// В базе уже есть проведенные документы по этому договору.
			МожноИзменятьПризнак = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат МожноИзменитьПризнак;
КонецФункции
Функция НайтиСоздатьНазначениеИспользованияСпецодежды(КомпонентыОбмена, Номенклатура, СрокЭксплуатации, НаименованиеНазначенияИспользования, СпособПогашенияСтоимостиТМЦXDTO, СпособОтраженияРасходов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СрокЭксплуатации", СрокЭксплуатации);
	Запрос.УстановитьПараметр("СпособОтраженияРасходов", СпособОтраженияРасходов);
	Запрос.УстановитьПараметр("НаименованиеНазначения", СокрЛП(НаименованиеНазначенияИспользования));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ Справочник.НазначенияИспользования
	|ГДЕ Владелец = &Номенклатура И СрокПолезногоИспользования = &СрокЭксплуатации
	|	И (Наименование = &НаименованиеНазначения ИЛИ &НаименованиеНазначения = """")";
	
	Если ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|	И СпособОтраженияРасходов = &СпособОтраженияРасходов";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	НазначениеИспользованияОбъект = Справочники.НазначенияИспользования.СоздатьЭлемент();
	НазначениеИспользованияОбъект.Владелец = Номенклатура;
	НазначениеИспользованияОбъект.Наименование = НаименованиеНазначенияИспользования;
	НазначениеИспользованияОбъект.Количество = 1;
	назначениеИспользованияОбъект.СрокПолезногоИспользования = СрокЭксплуатации;
	Если ЗначениеЗаполнено(СпособПогашенияСтоимостиТМЦXDTO) Тогда
		ПКПД_СпособПогашенияСтоимостиТМЦ = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("СпособыПогашенияСтоимости", "ИмяПКПД");
		НазначениеИспользованияОбъект.СпособПогашенияСтоимости = ПКПД_СпособПогашенияСтоимостиТМЦ.КонвертацииЗначенийПриПолучении.Получить(СпособПогашенияСтоимостиТМЦXDTO.Значение);
	Иначе
		Если СрокЭксплуатации < 12 Тогда
			НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
		Иначе
			НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.Линейный;
		КонецЕсли;
	КонецЕсли;
	НазначениеИспользованияОбъект.СпособОтраженияРасходов = СпособОтраженияРасходов;
	НазначениеИспользованияОбъект.Записать();
	Возврат НазначениеИспользованияОбъект.Ссылка;
КонецФункции
Функция НайтиСоздатьРегистрациюВНалоговомОргане(КПП, ОКАТО, Владелец, ВыполнятьПоиск = Истина)
	РегистрацияНО = Неопределено;
	СоздаватьЗаписьРегистра = Истина;
	Если ВыполнятьПоиск Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Спр.Ссылка,
		|	ВЫБОР КОГДА ИсторияРегистраций.РегистрацияВНалоговомОргане ЕСТЬ NULL Тогда Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК СоздаватьЗаписьРегистра
		|ИЗ Справочник.РегистрацииВНалоговомОргане КАК Спр
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(, СтруктурнаяЕдиница = &Владелец) КАК ИсторияРегистраций
		|	ПО Спр.Ссылка = ИсторияРегистраций.РегистрацияВНалоговомОргане
		|ГДЕ Спр.Владелец = &Владелец
		|	И Спр.ПометкаУдаления = Ложь
		|	И Спр.КодПоОКАТО = &ОКАТО
		|	И Спр.Код = &Код
		|	И Спр.КПП = &КПП";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ОКАТО", ОКАТО);
		Запрос.УстановитьПараметр("КПП", КПП);
		Запрос.УстановитьПараметр("Код", Лев(КПП, 4));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегистрацияНО = Выборка.Ссылка;
			СоздаватьЗаписьРегистра = Выборка.СоздаватьЗаписьРегистра;
		КонецЕсли;
	КонецЕсли;
	Если РегистрацияНО = Неопределено Тогда
		СправочникОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		СправочникОбъект.Владелец = Владелец;
		СправочникОбъект.КПП = КПП;
		СправочникОбъект.Код = Лев(КПП, 4);
		СправочникОбъект.КодПоОКАТО = ОКАТО;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		РегистрацияНО = СправочникОбъект.Ссылка;
	КонецЕсли;
	Если СоздаватьЗаписьРегистра Тогда
		НовЗапись = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьМенеджерЗаписи();
		НовЗапись.СтруктурнаяЕдиница = Владелец;
		НовЗапись.РегистрацияВНалоговомОргане = РегистрацияНО;
		НовЗапись.Период = ТекущаяДатаСеанса();
		НовЗапись.Записать();
	КонецЕсли;
	Возврат РегистрацияНО;
КонецФункции
Функция НалогообложениеДокументаВозвратаПоступления(КомпонентыОбмена, ДанныеИБ)
	Договор = ДанныеИБ.ДоговорКонтрагента;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "УчетАгентскогоНДС, ВидАгентскогоДоговора");
	
	Если РеквизитыДоговора.УчетАгентскогоНДС = Истина Тогда
		Если РеквизитыДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
				Возврат "ОблагаетсяНДСУПокупателя";
			Иначе
			    Возврат "ПродажаОблагаетсяНДС";
			КонецЕсли;
		Иначе
			Возврат "НалоговыйАгентПоНДС";
		КонецЕсли;
	КонецЕсли;
	
	// Значения по умолчанию.
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДанныеИБ.Организация, ДанныеИБ.Дата);
	Возврат ?(ПлательщикНДС, "ПродажаОблагаетсяНДС", "ПродажаНеОблагаетсяНДС");
КонецФункции
Функция НалогообложениеДокументаПоступления(КомпонентыОбмена, ДанныеИБ)
	Договор = ДанныеИБ.ДоговорКонтрагента;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭлектронныеУслуги,УчетАгентскогоНДС, ВидАгентскогоДоговора");
	
	Если РеквизитыДоговора.УчетАгентскогоНДС = Истина Тогда
		Если РеквизитыДоговора.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
				Возврат "НДСИсчисляетсяПокупателем";
			Иначе
			    Возврат "ПродажаОблагаетсяНДС";
			КонецЕсли;
		Иначе
			Возврат "НалоговыйАгентПоНДС";
		КонецЕсли;
		
	ИначеЕсли РеквизитыДоговора.ЭлектронныеУслуги = Истина
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		
		Возврат "ЭлектронныеУслуги";
		
	КонецЕсли;
	
	Возврат НалогообложениеДокументаПоступленияПоУмолчанию(КомпонентыОбмена, ДанныеИБ);
КонецФункции
Функция НалогообложениеДокументаПоступленияПоУмолчанию(КомпонентыОбмена, ДанныеИБ)
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДанныеИБ.Организация, ДанныеИБ.Дата);
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		Возврат ?(ПлательщикНДС, "ОблагаетсяНДС", "НеОблагаетсяНДС");
	Иначе
	    Возврат ?(ПлательщикНДС, "ПродажаОблагаетсяНДС", "ПродажаНеОблагаетсяНДС");
	КонецЕсли;
КонецФункции
Функция НалогообложениеДокументаРеализации(КомпонентыОбмена, ДанныеИБ)
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"УчетАгентскогоНДСПокупателем, ВидДоговора");
	
	Если СведенияОДоговоре.УчетАгентскогоНДСПокупателем Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			Возврат "ОблагаетсяНДСУПокупателя";
		Иначе
		    Возврат "ПродажаОблагаетсяНДС";
		КонецЕсли;
	Иначе
		СчетаДоходов = ДанныеИБ.Товары.ВыгрузитьКолонку("СчетДоходов");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДоходов, ДанныеИБ.Услуги.ВыгрузитьКолонку("СчетДоходов"));
		СчетаДоходов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаДоходов);
		
		СчетаЕНВД = БухгалтерскийУчетПовтИсп.СчетаУчетаЕНВД();
		ЕстьЕНВД = Ложь;
		Для Каждого Счет Из СчетаДоходов Цикл
			Если СчетаЕНВД.Найти(Счет) <> Неопределено Тогда
				ЕстьЕНВД = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЕНВД Тогда
			Возврат "ПродажаОблагаетсяЕНВД";
		Иначе
			СтавкиНДС = ДанныеИБ.Товары.ВыгрузитьКолонку("СтавкаНДС");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.Услуги.ВыгрузитьКолонку("СтавкаНДС"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.АгентскиеУслуги.ВыгрузитьКолонку("СтавкаНДС"));
			СтавкиНДС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтавкиНДС);
			Налогообложение = "ПродажаНеОблагаетсяНДС";
			Для Каждого СтавкаНДС Из СтавкиНДС Цикл
				Если ЗначениеЗаполнено(СтавкаНДС)
					И СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					Налогообложение = "ПродажаОблагаетсяНДС";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Возврат Налогообложение;
		КонецЕсли;
	КонецЕсли;
КонецФункции
Процедура НачислениеОценочныхОбязательств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РезервыОтпусков = Новый ТаблицаЗначений;
	РезервыОтпусков.Колонки.Добавить("ПодразделениеРегламентированногоУчета", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	РезервыОтпусков.Колонки.Добавить("Подразделение");
	РезервыОтпусков.Колонки.Добавить("СпособОтраженияЗарплатыВФинансовомУчете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	РезервыОтпусков.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерва", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерваНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерваСтраховыхВзносов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезервыОтпусков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ОценочныеОбязательства = ДанныеИБ.ОценочныеОбязательства;
		
	Для каждого СтрокаТЧ Из ОценочныеОбязательства Цикл
		
		НоваяСтрока =  РезервыОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "Подразделение");
		
		НоваяСтрока.СпособОтраженияЗарплатыВФинансовомУчете = СтрокаТЧ.СпособОтраженияЗарплатыВБухучете;
		НоваяСтрока.ПодразделениеРегламентированногоУчета   = СтрокаТЧ.Подразделение;
		НоваяСтрока.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЧ.Подразделение);
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ОценочныеОбязательства", РезервыОтпусков);
КонецПроцедуры
Функция НДСВключенВСтоимостьПоНалогообложению(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные, ИмяСвойстваНалогообложение = "Налогообложение")
	Если ДанныеXDTO.Свойство(ИмяСвойстваНалогообложение) И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваНалогообложение]) Тогда
		
		ДокументПоЕНВД = Ложь;
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			ДокументПоЕНВД = ДанныеXDTO[ИмяСвойстваНалогообложение].Значение = "ОблагаетсяЕНВД";
		Иначе
			ДокументПоЕНВД = ДанныеXDTO[ИмяСвойстваНалогообложение].Значение = "ПродажаОблагаетсяЕНВД";
		КонецЕсли;
	
		Если ДокументПоЕНВД Тогда
			Возврат Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
КонецФункции
Функция НоменклатурнаяГруппаИзПродукции(Объект)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Продукция.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.НоменклатурнаяГруппа;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Процедура ОбновитьСтатусыДокументов(КомпонентыОбмена)
	СтатусыДокументовКЗагрузке = КомпонентыОбмена.ПараметрыКонвертации.СтатусыДокументовКЗагрузке;
	Если ЗначениеЗаполнено(СтатусыДокументовКЗагрузке) Тогда
		Для Каждого СтатусыДокумента Из СтатусыДокументовКЗагрузке Цикл
			НовыеСтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
			НовыеСтатусыДокумента.Статус = СтатусыДокумента.Статус;
			НовыеСтатусыДокумента.ДополнительныйСтатус = СтатусыДокумента.ДополнительныйСтатус;
			РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(
				СтатусыДокумента.Документ, НовыеСтатусыДокумента);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ)
	Если ПолученныеДанные.Организация <> ДанныеИБ.Организация
		Или ПолученныеДанные.Контрагент <> ДанныеИБ.Контрагент
		Или ПолученныеДанные.ДоговорКонтрагента <> ДанныеИБ.ДоговорКонтрагента Тогда
		
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоАвансам = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоПретензиям") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоПретензиям = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоТаре") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоТаре = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьЗагруженныеВозвратыТоваров(КомпонентыОбмена)
	ЗагруженныеВозвратыТоваров = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеВозвратыТоваров;
	
	Для Каждого КлючЗначение Из ЗагруженныеВозвратыТоваров Цикл
		ДокументВозврата = КлючЗначение.Ключ;
		Если ТипЗнч(ДокументВозврата) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			КорректировочныйСчетФактураПолученОтПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВозврата, "КорректировочныйСчетФактураПолученОтПоставщика");
			Если КорректировочныйСчетФактураПолученОтПоставщика Тогда
				ПодчиненныйСчетФактураВыданный = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументВозврата);
				Если ЗначениеЗаполнено(ПодчиненныйСчетФактураВыданный) Тогда
					ДокументВозвратаОбъект = ДокументВозврата.ПолучитьОбъект();
					ДокументВозвратаОбъект.КорректировочныйСчетФактураПолученОтПоставщика = Ложь;
					ДокументВозвратаОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьСсылкиНаДокументыВСостоянияхЭД(КомпонентыОбмена)
	ДокументыСостоянийЭД = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСостоянийЭД;
	
	// Один документ формата может порождать несколько документов базы.
	// В этом случае мы записываем набор для первого документа,
	// а после конвертации записываем и для других документов тоже.
	
	Для Каждого КлючЗначение Из ДокументыСостоянийЭД Цикл
	
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Значение = КлючЗначение.Ключ;
		НаборЗаписей.Отбор.СсылкаНаОбъект.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Записи = НаборЗаписей.Выгрузить();
		
		Для Каждого СсылкаНаДокумент Из КлючЗначение.Значение Цикл
		
			Если ЗаполненаИСуществует(СсылкаНаДокумент) Тогда
				Если СсылкаНаДокумент = КлючЗначение.Ключ Тогда
					// Ничего делать не нужно, набор и так уже записан.
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейДляНовогоДокумента = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	
				Если НаборЗаписейДляНовогоДокумента.Отбор.СсылкаНаОбъект.ТипЗначения.ПривестиЗначение(СсылкаНаДокумент) = Неопределено Тогда
					// Для этого типа документов нет состояний ЭД.
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейДляНовогоДокумента.Отбор.СсылкаНаОбъект.Значение = СсылкаНаДокумент;
				НаборЗаписейДляНовогоДокумента.Отбор.СсылкаНаОбъект.Использование = Истина;
				
				Записи.ЗаполнитьЗначения(СсылкаНаДокумент, "СсылкаНаОбъект");
				НаборЗаписейДляНовогоДокумента.Загрузить(Записи);
				НаборЗаписейДляНовогоДокумента.Записать();
				
			ИначеЕсли СсылкаНаДокумент = КлючЗначение.Ключ Тогда
				// Нужно очистить набор, т.к. он был записан по битой ссылке.
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
Функция ОбъединитьТаблЧастиКоррДолгаПриПереносеЗадолжен(ПолученныеДанные, ВидЗадолженности)
	ДебиторскаяЗадолженностьДоОбработки = ПолученныеДанные.ДебиторскаяЗадолженность.Выгрузить();
	КредиторскаяЗадолженостьДоОбработки = ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить();
	
	ТабличныеЧасти = Новый Структура();
	ТабличныеЧасти.Вставить("ДебиторскаяЗадолженность", ПолученныеДанные.ДебиторскаяЗадолженность.ВыгрузитьКолонки());
	ТабличныеЧасти.Вставить("КредиторскаяЗадолженность", ПолученныеДанные.КредиторскаяЗадолженность.ВыгрузитьКолонки());
	
	ОтборДляСтрок = Новый Структура("КурсВзаиморасчетов,КратностьВзаиморасчетов,Сделка");
	
	Для Каждого СтрокаДебиторскойЗадолженности Из ДебиторскаяЗадолженностьДоОбработки Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧастьДляПереносаЗадолженности(ВидЗадолженности, СтрокаДебиторскойЗадолженности.Сделка);
		
		ЗаполнитьЗначенияСвойств(ОтборДляСтрок, СтрокаДебиторскойЗадолженности);
		
		СтрокиКредиторскойЗадолженности = КредиторскаяЗадолженостьДоОбработки.НайтиСтроки(ОтборДляСтрок);
		
		Если СтрокиКредиторскойЗадолженности.Количество() = 0 Тогда
			// Нет соответствующей задолженности в другой табличной части - дальше объединять нет смысла.
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаКредиторскойЗадолженности Из СтрокиКредиторскойЗадолженности Цикл
		
			Сумма = Мин(СтрокаДебиторскойЗадолженности.Сумма, СтрокаКредиторскойЗадолженности.Сумма);
			СуммаВзаиморасчетов = Мин(СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов, СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов); 
			
			Если Сумма = 0 И СуммаВзаиморасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			Если ИмяТабличнойЧасти = "ДебиторскаяЗадолженность" Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКредиторскойЗадолженности);
				НоваяСтрока.ДоговорКонтрагента = СтрокаКредиторскойЗадолженности.ДоговорКонтрагента;
				НоваяСтрока.КорДоговорКонтрагента = СтрокаДебиторскойЗадолженности.ДоговорКонтрагента; // Новый договор - на который переносится задолженность.
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДебиторскойЗадолженности);
				НоваяСтрока.ДоговорКонтрагента = СтрокаДебиторскойЗадолженности.ДоговорКонтрагента;
				НоваяСтрока.КорДоговорКонтрагента = СтрокаКредиторскойЗадолженности.ДоговорКонтрагента; // Новый договор - на который переносится задолженность.
			КонецЕсли;
		    
			НоваяСтрока.Сумма = Сумма; 
			НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			
			СтрокаДебиторскойЗадолженности.Сумма = СтрокаДебиторскойЗадолженности.Сумма - Сумма;
			СтрокаКредиторскойЗадолженности.Сумма = СтрокаКредиторскойЗадолженности.Сумма - Сумма;
				
			СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
			СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
			
			Если СтрокаКредиторскойЗадолженности.Сумма = 0 И СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда
				// Эта строка уже больше не нужна - удалим ее.
				КредиторскаяЗадолженостьДоОбработки.Удалить(СтрокаКредиторскойЗадолженности);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// После обработки все данные из ДебиторскаяЗадолженностьДоОбработки и КредиторскаяЗадолженостьДоОбработки должны быть списаны.
	Если ДебиторскаяЗадолженностьДоОбработки.Итог("Сумма") <> 0
		Или ДебиторскаяЗадолженностьДоОбработки.Итог("СуммаВзаиморасчетов") <> 0
		Или КредиторскаяЗадолженостьДоОбработки.Итог("Сумма") <> 0
		Или КредиторскаяЗадолженостьДоОбработки.Итог("СуммаВзаиморасчетов") <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// После обработки все данные должны быть в одной из табличных частей. Если это не так - то объединение табличных частей не удалось.
	Если ТабличныеЧасти.ДебиторскаяЗадолженность.Количество() > 0
	 	И ТабличныеЧасти.КредиторскаяЗадолженность.Количество() > 0 Тогда
	 	Возврат Ложь;
	КонецЕсли;
	
	ПолученныеДанные.ДебиторскаяЗадолженность.Загрузить(ТабличныеЧасти.ДебиторскаяЗадолженность); 
	ПолученныеДанные.КредиторскаяЗадолженность.Загрузить(ТабличныеЧасти.КредиторскаяЗадолженность);
	Возврат Истина;
КонецФункции
Процедура ОпределитьСтавкуНДС_Отправка(ТабличнаяЧасть, НДСПоСтавкам2и4, ИмяКолонкиСтавкаНДС = "СтавкаНДС")
	ИмяКолонкиСтавкаНДССтрокой = ИмяКолонкиСтавкаНДС + "Строкой";
	ТабличнаяЧасть.Колонки.Добавить(ИмяКолонкиСтавкаНДССтрокой);
	
	СоответствияСтавок = Новый Соответствие;
	СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	Если НДСПоСтавкам2и4 Тогда
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС4");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС4");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС4_104");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС4_104");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС2");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС2_102");
	Иначе
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
		СоответствияСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Ставка = Строка[ИмяКолонкиСтавкаНДС];
		
		Если Не ЗначениеЗаполнено(Ставка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаСтрокой = СоответствияСтавок.Получить(Ставка);
		Если СтавкаСтрокой = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Строка[ИмяКолонкиСтавкаНДССтрокой] = СтавкаСтрокой;
		
	КонецЦикла;
	
	ТабличнаяЧасть.Колонки.Удалить(ИмяКолонкиСтавкаНДС);
	ТабличнаяЧасть.Колонки[ИмяКолонкиСтавкаНДССтрокой].Имя = ИмяКолонкиСтавкаНДС;
КонецПроцедуры
Функция ОпределитьТипЗапасовПоСчетуУчета(СчетУчета)
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат "СобственныеТовары";
	КонецЕсли;
		
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах Или СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле Тогда
		Возврат "СобственныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные
		Или  СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости Тогда
		
		Возврат "КомиссионныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.Тара Или СчетУчета = ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя Тогда
		Возврат "ВозвратнаяТара";
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) Тогда
		Если СчетУчета = ПланыСчетов.Хозрасчетный.Тара Тогда
			Возврат "ПрочиеМатериалы";
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			Возврат "СырьеИМатериалы";
		ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации) Тогда
			Возврат "СпецоснасткаИСпецодеждаНаСкладе";
		ИначеЕсли СчетУчета.Предопределенный Тогда
			//Все остальные предопределенные субсчета 10-го счета соответствуют именам типов запасов
			Возврат СчетУчета.ИмяПредопределенныхДанных;	
		КонецЕсли;
	КонецЕсли;
	Возврат "СобственныеТовары";
КонецФункции
Процедура ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, ПараметрыКонвертации);
	
	// Статья прочих доходов/расходов
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяПрочихДоходовРасходов) Тогда
		Если ЗначениеЗаполнено(ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда 
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров;
		Иначе
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ОприходованиеИзлишков");
		КонецЕсли;
	КонецЕсли;
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Функция ОсновнойВидОплатыОрганизации(Организация, ТипОплаты)
	ВидОплатыПоУмолчанию = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ТипОплаты) Тогда
		Возврат ВидОплатыПоУмолчанию;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыОплатОрганизаций.Ссылка КАК ВидОплат
		|ИЗ
		|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|	ВидыОплатОрганизаций.Организация = &Организация
		|	И ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты
		|	И ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		ВидОплатыПоУмолчанию = Результат[0].ВидОплат;
	КонецЕсли;
	
	Возврат ВидОплатыПоУмолчанию;
КонецФункции
Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		// Передан не контрагент, значит возвращать ничего не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Неопределено;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
		ЗначенияЗаполнения.Вставить("Организация", ГоловнаяОрганизация);
		ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
		Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыСозданияДоговора = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Возврат СоздатьОсновнойДоговорКонтрагента(ПараметрыСозданияДоговора);
			
	КонецЕсли;
КонецФункции
Функция ОтборРегистраСведенийЗаполненКорректно(Отбор, ОписаниеПолей)
	ОтборЗаполненКорректно = Истина;
	
	ПоляОтбора = СтрРазделить(ОписаниеПолей, ",");
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
	
		Если Отбор.Найти(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Отбор[ПолеОтбора].Значение)
			Или Не Отбор[ПолеОтбора].Использование
			Или Не ОбщегоНазначения.СсылкаСуществует(Отбор[ПолеОтбора].Значение) Тогда
			ОтборЗаполненКорректно = Ложь;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ОтборЗаполненКорректно;
КонецФункции
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполним счета учета и аналитику.
	//Сохраним заполненную аналитику, очистим ее в объекте и перезаполним.
	ОписаниеАналитики = УниверсальныйОбменЗагрузкаАналитики.НовыйОписаниеАналитикиОбъекта();
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "Прочее", "СчетЗатрат", "Субконто", "ПодразделениеЗатрат");
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "Прочее", "СчетЗатратНУ", "СубконтоНУ", "");
	
	УниверсальныйОбменЗагрузкаАналитики.ЗаполнитьНезаполненнуюАналитику(Объект, ОписаниеАналитики);
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.СпособУчетаНДС) Тогда
			СтрокаНоменклатура.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Прочее Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.СпособУчетаНДС) Тогда
			СтрокаНоменклатура.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьСпособПогашенияЗадолженности(Объект, "ОплатаПоставщикам");
КонецПроцедуры
Процедура ОтложеннаяОбработка_Банки(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(Объект.Страна) Тогда
		Объект.Страна = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Справочники.Банки.УстановитьНаименованиеБанкаУФКИзКлассификатора(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Родитель) Тогда
		БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(Объект.Код, Объект.КоррСчет);
		Если ЗначениеЗаполнено(БанкПоКлассификатору) Тогда 
			ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкПоКлассификатору, "Родитель, Родитель.Код");
			Если ЗначениеЗаполнено(ДанныеБанка.Родитель) Тогда 
				Регион = Справочники.Банки.СсылкаНаБанк(ДанныеБанка.РодительКод, Истина);
				Если НЕ ЗначениеЗаполнено(Регион) Тогда
					МассивБанковИзКлассификатора = Новый Массив;
					МассивБанковИзКлассификатора.Добавить(ДанныеБанка.Родитель);
					ИерархияРодителей = РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
					Если ИерархияРодителей.Количество() > 0 Тогда
						Регион = ИерархияРодителей[ИерархияРодителей.ВГраница()];
					КонецЕсли;
				КонецЕсли;
				Объект.Родитель = Регион;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если ЗначениеЗаполнено(Объект.Сделка)
		И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Объект.Сделка = СделкаДляВозвратаПоРеализацииОтгрБезПерехСобств(Объект);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура 
		И ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		ДанныеОбъекта = Новый Структура("Дата, Ссылка, Сделка");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоказателиПоСделке(Объект.Товары, ДанныеОбъекта);
		
	КонецЕсли; 
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
	
	УстановитьНезаполненноеОтражениеВУСН(Объект.Товары, Перечисления.ОтражениеВУСН.Принимаются);
	
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеВозвратыТоваров.Вставить(Объект.Ссылка, Истина);
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВыпускПродукции(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	ДанныеОбъекта = Новый Структура("Дата,Организация,Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);	
	
	ОсновнаяСтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению("СписаниеМатериалов"); 
	
	Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗаполненаИСуществует(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.Спецификация)  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				СтрокаТаблицы.ЕдиницаИзмерения = СведенияОНоменклатуре.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
					СтрокаТаблицы.ПлановаяСтоимость = СведенияОНоменклатуре.ПлановаяСтоимость;
				КонецЕсли;
				СтрокаТаблицы.СуммаПлановая = СтрокаТаблицы.ПлановаяСтоимость * СтрокаТаблицы.Количество;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Спецификация) Тогда
				СтрокаТаблицы.Спецификация = СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
			
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗаполненаИСуществует(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения)
			Или	Не ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				СтрокаТаблицы.ЕдиницаИзмерения = СведенияОНоменклатуре.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СведенияОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ВозвратныеОтходы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) ИЛИ
			СтрокаТаблицы.Сумма = 0  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
				СтрокаТаблицы.Цена		= СведенияОНоменклатуре.ПлановаяСтоимость;
				СтрокаТаблицы.Сумма		= СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентов(Объект, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Объект.Ссылка) <> Неопределено Тогда
		// Выполняем обработчик заполнения объекта для новых договоров.
		ЗаполнитьДоговорДаннымиЗаполнения(Объект, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособЗаполненияСтавкиНДС) Тогда
		Объект.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособВыставленияДокументов) Тогда
		Объект.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически;
	КонецЕсли;
	
	УстановитьПризнакПродажиНДСИсчисляетсяПокупателем(КомпонентыОбмена, Объект);
	
	УстановитьПризнакПокупкиНДСИсчисляетсяПокупателем(КомпонентыОбмена, Объект);
	
	УстановитьПризнакДоговораЭлектронныхУслуг(КомпонентыОбмена, Объект);
	
	ИсправитьВидДоговора(КомпонентыОбмена, Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаписьДвиженийОперацияБух(Объект, ПараметрыКонвертации)
	Если Не Объект.ДополнительныеСвойства.Свойство("Движения") Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Объект.ДополнительныеСвойства.Движения;
	
	Регистратор = Объект.Ссылка;
	
	ДвиженияХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ДвиженияХозрасчетный.Отбор.Регистратор.Установить(Регистратор);
		                                         
	Для Каждого Движение из Движения Цикл
		НовоеДвижение = ДвиженияХозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, Движение);
		НовоеДвижение.Регистратор = Регистратор;
		НовоеДвижение.Активность = ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке;
		Для Каждого Субконто Из Движение.Субконто Цикл
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, НовоеДвижение.СубконтоДт, Субконто.Ключ, Субконто.Значение);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, НовоеДвижение.СубконтоКт, Субконто.Ключ, Субконто.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ДвиженияХозрасчетный.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина); 
	ДвиженияХозрасчетный.Записать();
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаполнитьКлассификаторТНВЭД(КомпонентыОбмена)
	МассивТНВЭД = КомпонентыОбмена.ПараметрыКонвертации.МассивТНВЭД;
	
	Если МассивТНВЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлассификатора = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторТНВЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|	И КлассификаторТНВЭД.Ссылка В(&МассивТНВЭД)";
	
	Запрос.УстановитьПараметр("МассивТНВЭД", МассивТНВЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
			ПараметрыОтбора = Новый Структура("Код", СправочникОбъект.Код);
			НайденныеСтроки = ТаблицаКлассификатора.НайтиСтроки(ПараметрыОтбора);
		
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Элемент справочника не найден в актуальном классификаторе ТНВЭД,
				// установим килограмм.
				СправочникОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166");
			Иначе
				СправочникОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(
					НайденныеСтроки[0].ЕдиницаИзмерения);
			КонецЕсли;
		
			СправочникОбъект.Записать();
		Исключение
				
		КонецПопытки
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Контрагенты(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ВключитьМониторингСпаркРискиДляКонтрагента(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаДолга(Объект)
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.ДебиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансов;
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗадолженность.КорДоговорКонтрагента) Тогда
			
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.КорДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.КорДоговорКонтрагента);
	
			Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
				СтрокаЗадолженность.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансов;
						
			ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
				СтрокаЗадолженность.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
				
			КонецЕсли;
			
		КонецЕсли;
	
		
	КонецЦикла;
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.КредиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
					
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗадолженность.КорДоговорКонтрагента) Тогда
			
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.КорДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.КорДоговорКонтрагента);
	
			Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
				СтрокаЗадолженность.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
						
			ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
				СтрокаЗадолженность.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//При необходимости заполнение счета списания задолженности
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности  Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетДт) Тогда
			Объект.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетКт) Тогда
			Объект.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаПоступления(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	ПрименяетсяОсобыйПорядокНалогообложения
		= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
				СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
	
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету; 
			КонецЕсли;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И 
			СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			СтрокаТаблицы.СчетЗатрат = СтрокаСведенийОНоменклатуре.СчетРасходов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
			СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления);
	
	Объект.УстановитьПредставлениеНомера();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		Если Объект.НомерИсправления = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	СчетФактураПолученный.Ссылка.НомерИсправления КАК НомерИсправления,
				|	СчетФактураПолученный.Ссылка.ДатаИсправления КАК ДатаИсправления
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
				|ГДЕ
				|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
				|	И СчетФактураПолученный.Ссылка.ПометкаУдаления = ЛОЖЬ
				|УПОРЯДОЧИТЬ ПО	
				|	НомерИсправления";
	
			Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(Объект, Выборка, "НомерИсправления, ДатаИсправления");
			КонецЕсли;
		КонецЕсли; 
	
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаРеализации(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		Объект.ИсходныйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
			Объект.ДокументРеализации, Истина);
	КонецЕсли;
	
	// Заполним свойства строк с ЕстьВДокументеРеализации из документа реализации
	ДанныеЗаполнения = Документы.КорректировкаРеализации.ДанныеЗаполненияПоДокументу(Объект.ДокументРеализации);
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения";
		ПоляДляЗаполнения = "СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Товары", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения";
		ПоляДляЗаполнения = "СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Услуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, Контрагент, ДоговорКонтрагента";
		ПоляДляЗаполнения = "СчетРасчетов";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "АгентскиеУслуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
	
	// Заполняем номер исправления
	
	ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
		Объект.ДокументРеализации, Ложь);
	ПараметрыДокументаИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.ДокументРеализации, ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокументаИсправления);
	Объект.УстановитьПредставлениеНомера();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураВыданный.Ссылка.НомерИсправления КАК НомерИсправления
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Объект.НомерИсправления = ?(Выборка.Следующий(), Выборка.НомерИсправления, 0);
		
		Если Объект.НомерИсправления = 0 Тогда
			Объект.НомерИсправления = ПараметрыДокументаИсправления.НомерИсправления;
		КонецЕсли; 
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.ИсправляемыйДокумент = ИсправляемыйДокументРеализации;
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
	
	// Вызываем заполнение только для новых объектов.
	Если ЭтоНовыйОбъект(Объект) Тогда
		ЗаполнитьКорректировкаРеализацииОтчетностьСдана(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Объект.ВидНоменклатуры = ВидНоменклатурыПоГруппе(Объект.Родитель, Объект.Услуга);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодНоменклатурнойКлассификацииККТ) Тогда
		Объект.СредствоИндивидуальнойЗащиты = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_НоменклатураГруппа(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И ЗначениеЗаполнено(Объект.Родитель) Тогда
		Объект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "ВидНоменклатуры");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект);
	
	УстановитьСпособПогашенияЗадолженности(Объект);
	
	ЗаполнитьПорядокОтраженияАвансаУСН(Объект);
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП(Объект)
	//Заполнение счетов расчетов
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам =     СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОприходованиеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Коэффициент = 1;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
	
	//Для организаций - ИП
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) 
		И Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.ФизическиеЛица
		|ГДЕ Наименование = &Наименование И ИНН = &ИНН И НЕ ПометкаУдаления";
		Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
		Запрос.УстановитьПараметр("ИНН", Объект.ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФизЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФизЛицоОбъект.КонтактнаяИнформация.Очистить();
		Иначе
			//Создаем физическое лицо
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.Наименование = Объект.Наименование;
			ФизЛицоОбъект.ФИО = Объект.Наименование;
			ФизЛицоОбъект.Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ФизЛицоОбъект.ИНН = Объект.ИНН;
		КонецЕсли;
		Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
			Для Каждого СтрокаКонтакт ИЗ Объект.КонтактнаяИнформация Цикл
				ВидКИФизЛицо = Неопределено;
				Если СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
				Иначе
					Продолжить;
				КонецЕсли;
				СтрокаКонтактНов = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактНов, СтрокаКонтакт,,"Вид");
				СтрокаКонтактНов.Вид = ВидКИФизЛицо;
			КонецЦикла;
		КонецЕсли;
		ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		ФизЛицоОбъект.Записать();
		Объект.ИндивидуальныйПредприниматель = ФизЛицоОбъект.Ссылка;
	
	КонецЕсли
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДС)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Истина, Объект);
	
	КонецЕсли;
	
	ТабСчетовДоЗаполнения = Объект.Товары.Выгрузить(,"СчетУчета,СчетДоходов,СчетУчетаНДСПоРеализации, СчетРасходов");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаДоЗаполнения = ТабСчетовДоЗаполнения[СтрокаТаблицы.НомерСтроки - 1];
		
		Если ЗначениеЗаполнено(СтрокаДоЗаполнения.СчетУчета) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДоЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабСчетовДоЗаполнения = Объект.ТоварыВозвращенные.Выгрузить(,"СчетУчета,СчетДоходов,СчетУчетаНДСПоРеализации, СчетРасходов");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ТоварыВозвращенные");
	Для Каждого СтрокаТаблицы Из Объект.ТоварыВозвращенные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
		
		СтрокаДоЗаполнения = ТабСчетовДоЗаполнения[СтрокаТаблицы.НомерСтроки - 1];
		
		Если ЗначениеЗаполнено(СтрокаДоЗаполнения.СчетУчета) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДоЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		Объект.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	КонецЕсли;
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомитентуОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСНОтчетаКомитенту(Объект);
	
	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) И НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
			Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
			Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
			
			НоменклатурнаяГруппаВознаграждения = СведенияОНоменклатуре.НоменклатурнаяГруппа;
			
			Если ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
				Объект.Субконто = Неопределено;
				ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
				Если ДанныеСчета.КоличествоСубконто >= 1 Тогда
					ЗначениеСубконто = ДанныеСчета["ВидСубконто1ТипЗначения"].ПривестиЗначение(Объект.Субконто);
					Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Объект.Субконто = НоменклатурнаяГруппаВознаграждения;
					Иначе
						Объект.Субконто = ЗначениеСубконто;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации)
		И Объект.Товары.Итог("СуммаНДСВознаграждения") <> 0 Тогда
		Объект.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетОРозничныхПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьСчетаУчета(Объект);
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	КонецЕсли;
	
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто) Тогда
			СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
			
			Если СвойстваСчетаДоходов.ВидСубконто1 = ВидСубконтоНоменклатурныеГруппы Тогда
				СтрокаТаблицы.Субконто = ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Возвраты Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто) Тогда
			СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
			
			Если СвойстваСчетаДоходов.ВидСубконто1 = ВидСубконтоНоменклатурныеГруппы Тогда
				СтрокаТаблицы.Субконто = ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Создание документа ПриходныйКассовыйОрдер
	Если Объект.ДополнительныеСвойства.Свойство("СоздаватьПКОПриЗагрузке")  
		И Объект.ДополнительныеСвойства.СоздаватьПКОПриЗагрузке Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада") <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке.Добавить(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаМатериаловВПереработку(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовПоТаре = СтруктураСчетов.СчетУчетаТарыПокупателя;
		КонецЕсли;
	КонецЕсли;
	
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			СтрокаТаблицы.СчетПередачи = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
		КонецЕсли;
	КонецЦикла;
	
	
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Объект.Местонахождение = Объект.ПодразделениеОрганизации;
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда", Истина);
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка", Истина);
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИнвентарьИХозяйственныеПринадлежности", Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Документы.ПеремещениеТоваров.НДСВСтоимостиТоваровПоСкладам(
			Объект.Организация, Объект.Дата, Объект.СкладОтправитель, Объект.СкладПолучатель);
	КонецЕсли;
	
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО_Расчеты(Объект)
	ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект);
	
	УстановитьСпособПогашенияЗадолженности(Объект);
	
	ЗаполнитьПорядокОтраженияАвансаУСН(Объект);
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента)
			Или Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
		Иначе
	
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОРозничнаяВыручка(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДенежныхСредств(Объект)
	ЗаполнитьСчетаУчета(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = БанковскийСчетСписанияПриПереводеДенежныхСредств(Объект);
		КонецЕсли;
	КонецЕсли;
	
	УчетУСН.ЗаполнитьПоступлениеНаРасчетныйСчет(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДопРасходов(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	
	//Заполним табличную часть "Товары"
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ПрименяетсяУСН
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение счетов учета номенклатуры
		Склад = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", СтрокаТаблицы.ДокументПартии.Метаданные()) Тогда
			Склад = СтрокаТаблицы.ДокументПартии.Склад;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация, СтрокаТаблицы.Номенклатура, Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
			СтрокаТаблицы.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(Объект)
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = ПоступлениеНаРасчетныйСчетФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата, Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПлательщикНДС);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект);
	
	УстановитьСпособПогашенияЗадолженности(Объект);
	
	ЗаполнитьПорядокОтраженияАвансаУСН(Объект);
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеОтПереработчика(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации)
		И Не ЗначениеЗаполнено(Объект.ПодразделениеЗатрат) Тогда
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация, 
																						Объект.Контрагент, 
																						Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТары;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.Продукция.ВыгрузитьКолонку("Номенклатура");
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта);
		
		Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				И ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				СтрокаТаблицы.Счет = СтрокаСведенийОНоменклатуре.СчетаУчета.СчетУчета;
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяСтоимость) Тогда
				СтрокаТаблицы.ПлановаяСтоимость = СтрокаСведенийОНоменклатуре.ПлановаяСтоимость;
				ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ВозвращенныеМатериалы.ВыгрузитьКолонку("Номенклатура");
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.ВозвращенныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета =
					БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				СтрокаТаблицы.СчетПередачи = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ИспользованныеМатериалы.ВыгрузитьКолонку("Номенклатура");
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта);
			
		Для Каждого СтрокаТаблицы Из Объект.ИспользованныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
				И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(
												СтрокаСведенийОНоменклатуре.СчетаУчета.СчетПередачи);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				СтрокаТаблицы.СтатьяЗатрат = ?(ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.СтатьяЗатрат), 
																		СтрокаСведенийОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			СписокНоменклатуры, ДанныеОбъекта);
			
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) 
				И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
				И СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СтатьяЗатрат = ?(ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.СтатьяЗатрат),
												СтрокаСведенийОНоменклатуре.СтатьяЗатрат,
												ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		НоменклатурнаяГруппаИзПродукции = НоменклатурнаяГруппаИзПродукции(Объект);
		Если ЗначениеЗаполнено(НоменклатурнаяГруппаИзПродукции) Тогда
		    Объект.НоменклатурнаяГруппа = НоменклатурнаяГруппаИзПродукции;
		Иначе
			Объект.НоменклатурнаяГруппа = ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОчиститьТабличнуюЧастьПродукция")
		И Объект.ДополнительныеСвойства.ОчиститьТабличнуюЧастьПродукция = Истина Тогда
		// При загрузке Документ.ОтчетПереработчика табличная часть Продукция передается,
		// но она имеет просто информационный смысл, оприходовать продукцию по этому документу нельзя.
		// Поэтому в обработчике этого документа ставиться признак очистки ТЧ.
		// Очищать ее раньше также не стоит, т.к. на ее основании определяется НоменклатурнаяГруппа.
		Объект.Продукция.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПТиУ(Объект, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
		
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СпособОценкиТоваровВРознице      = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах              = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если УчетВПродажныхЦенах Тогда
		
		ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ДанныеСклада.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
			И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
			И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
				ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
				
			Если РазделениеПоСтавкамВРознице И ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					СтрокаТаблицы.СтавкаНДСВРознице = СтрокаТаблицы.СтавкаНДС;
				КонецЦикла
			КонецЕсли;
			
			// Если ЦенаВРознице не передано - необходимо заполнение
			Если Объект.Товары.Итог("ЦенаВРознице") = 0 Тогда
			
				СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
				ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ДанныеСклада.ТипЦенРозничнойТорговли, Объект.Дата);
				ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					ЦенаВРознице = 0;
					НайденнаяСтрока = ТаблицаЦенВРознице.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						
						СтрокаТаблицы.ЦенаВРознице = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
							НайденнаяСтрока.Цена,
							НайденнаяСтрока.Валюта, ВалютаРеглУчета,
							НайденнаяСтрока.Курс, 1,
							НайденнаяСтрока.Кратность, 1);
						СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.ЦенаВРознице * СтрокаТаблицы.Количество;
					КонецЕсли;
						
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Заполним счета учета и аналитику.
	//Сохраним заполненную аналитику, очистим ее в объекте и перезаполним.
	ОписаниеАналитики = УниверсальныйОбменЗагрузкаАналитики.НовыйОписаниеАналитикиОбъекта();
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "Услуги", "СчетЗатрат", "Субконто", "ПодразделениеЗатрат");
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "Услуги", "СчетЗатратНУ", "СубконтоНУ", "");
	
	УниверсальныйОбменЗагрузкаАналитики.ЗаполнитьНезаполненнуюАналитику(Объект, ОписаниеАналитики);
	
	// Заполняем остальные незаполненные данные
	Если Объект.Товары.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Товары);
	КонецЕсли;
	
	Если Объект.Услуги.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Услуги);
	КонецЕсли;
	
	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		И Объект.ВозвратнаяТара.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() > 0 
			И Объект.Услуги.Количество() = 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли Объект.Товары.Количество() = 0 
			И Объект.Услуги.Количество() > 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		// Заполняем счета учета
		Документы.РеализацияОтгруженныхТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияУслугПоПереработке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			Объект.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЕсли;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры, Объект.МатериалыЗаказчика.ВыгрузитьКолонку("Номенклатура"), Истина);
	ПрименяетсяОсобыйПорядокНалогообложения
					= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
					
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
					
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СтрокаСведенийОНоменклатуре);
		
	КонецЦикла;
	
		
	Для Каждого СтрокаТаблицы Из Объект.МатериалыЗаказчика Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда 
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТаблицы, "МатериалыЗаказчика", СтрокаСведенийОНоменклатуре);
		КонецЕсли;
			
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РТиУ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДСПереводНаДругойСчет(Объект)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДСПлатежиВБюджет(Объект)
	ПлатежноеПоручениеОснование = Объект.ДокументОснование;
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Если Объект.Проведен Тогда
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним счета учета и аналитику.
	//Сохраним заполненную аналитику, очистим ее в объекте и перезаполним.
	ОписаниеАналитики = УниверсальныйОбменЗагрузкаАналитики.НовыйОписаниеАналитикиОбъекта();
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "", "СчетУчетаРасчетовСКонтрагентом", "СубконтоДт", "ПодразделениеДт");
	
	УниверсальныйОбменЗагрузкаАналитики.ЗаполнитьНезаполненнуюАналитику(Объект, ОписаниеАналитики);
	
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация,
			Объект.Номенклатура,
			Объект.Склад);
		Если Не ЗначениеЗаполнено(Объект.СчетУчета) Тогда
			Объект.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
			Объект.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
				Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Комплектующие Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
					СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
				КонецЕсли;
	
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Склады(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦенРозничнойТорговли) Тогда
		НаименованиеТипаЦен = НСтр("ru='Розничная цена'");
		ВидЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НаименованиеТипаЦен);
		
		Если Не ЗначениеЗаполнено(ВидЦены) Тогда
			ВидОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
			ВидОбъект.Наименование = НаименованиеТипаЦен;
			ВидОбъект.Записать();
			ВидЦены = ВидОбъект.Ссылка;
		КонецЕсли;
	
		Объект.ТипЦенРозничнойТорговли = ВидЦены;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеМатериаловИзЭксплуатац(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда", Истина);
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка", Истина);
	Документы.СписаниеМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИнвентарьИХозяйственныеПринадлежности", Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_КонвертацияВалюты(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
	
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Прочее(Объект)
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы
		И Не ЗначениеЗаполнено(Объект.СубконтоДт1) Тогда
		Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
	КонецЕсли;
	
	// Заполним счета учета и аналитику.
	//Сохраним заполненную аналитику, очистим ее в объекте и перезаполним.
	ОписаниеАналитики = УниверсальныйОбменЗагрузкаАналитики.НовыйОписаниеАналитикиОбъекта();
	УниверсальныйОбменЗагрузкаАналитики.ДобавитьАналитикуВОписание(ОписаниеАналитики, "", "СчетУчетаРасчетовСКонтрагентом", "СубконтоДт", "ПодразделениеДт");
	
	УниверсальныйОбменЗагрузкаАналитики.ЗаполнитьНезаполненнуюАналитику(Объект, ОписаниеАналитики);
	
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Расчеты(Объект)
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = СписаниеСРасчетногоСчетаФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата, Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПлательщикНДС);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект);
	
	УстановитьСпособПогашенияЗадолженности(Объект);
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
	
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_РасчетыССотр(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	УстановитьОплаченоВПлатежномПоручении(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;	
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтатьиДоходов(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидДеятельностиДляНалоговогоУчетаЗатрат", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПрочихДоходовИРасходов", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидПрочихДоходовИРасходов) Тогда
		Объект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтатьиРасходов(Объект)
	МетаданныеОбъекта = Объект.Метаданные();
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидДеятельностиДляНалоговогоУчетаЗатрат", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПрочихДоходовИРасходов", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидПрочихДоходовИРасходов) Тогда
		Объект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидРасходовНУ", МетаданныеОбъекта)
		И Не ЗначениеЗаполнено(Объект.ВидРасходовНУ) Тогда
		Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект)
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			// Устанавливаем основной договор, если он не найден.
			СтрокаТЧ.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетУчетаРасчетовСКонтрагентом = Неопределено;
		СчетУчетаРасчетовПоАвансам = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
				Или Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьПолеСделкаРасшифровкиПлатежа(Объект);
	
	УстановитьСпособПогашенияЗадолженности(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетНаОплатуПокупателю(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		ВалютаОплаты = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
				"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
			ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
			Если Не РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				ВалютаОплаты = ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СтруктурнаяЕдиница, Объект.ОрганизацияПолучатель, ВалютаОплаты, Истина);
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	Если СуммаДокумента <> Объект.СуммаДокумента Тогда
		// Если загруженная сумма документа отличается от расчитанной,
		// то это скидка по документу в целом.
		Объект.СуммаСкидки = Объект.СуммаСкидки + СуммаДокумента - Объект.СуммаДокумента;
	КонецЕсли;
	
	СрокОплаты = СрокиОплатыДокументов.СрокОплатыСчетаПокупателю(Объект.Ссылка, Объект.Дата);
	Если СрокОплаты = Неопределено Тогда
		СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(Объект.Дата);
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(Объект.Ссылка, СрокОплаты);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетНаОплатуПоставщику(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		
		ВалютаОплаты = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
				"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
			ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
			Если Не РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				ВалютаОплаты = ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.БанковскийСчетКонтрагента, Объект.Контрагент, ВалютаОплаты, Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураВыданный(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	УдалитьДокументыОснованияСБитымиСсылками(Объект);
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	ДозаполнитьОснованияСчетаФактуры(Объект);
	
	Для Каждого ДокументОснование Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(ДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеВозвратыТоваров.Вставить(Объект.Ссылка, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		Объект.НомерПлатежноРасчетногоДокумента = Объект.ПлатежноРасчетныеДокументы[0].НомерДокумента;
		Объект.ДатаПлатежноРасчетногоДокумента  = Объект.ПлатежноРасчетныеДокументы[0].ДатаДокумента;
	КонецЕсли;
		
	Если Объект.Исправление Тогда
	
		Если ЗаполненаИСуществует(Объект.ИсправляемыйСчетФактура) Тогда
				
			РеквизитыИсправляемогоСчетаФактуры = Документы.СчетФактураВыданный.РеквизитыИсправляемогоСчетаФактуры(
				Объект.ВидСчетаФактуры, Объект.Исправление, Объект.ИсправляемыйСчетФактура);
			
			Если РеквизитыИсправляемогоСчетаФактуры <> Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента) Тогда
					Объект.ДатаИсходногоДокумента = РеквизитыИсправляемогоСчетаФактуры.ДатаИсходногоДокумента;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
					Объект.НомерИсходногоДокумента = РеквизитыИсправляемогоСчетаФактуры.НомерИсходногоДокумента;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.ДатаИсправляемогоКорректировочногоДокумента) Тогда
					Объект.ДатаИсправляемогоКорректировочногоДокумента = РеквизитыИсправляемогоСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.НомерИсправляемогоКорректировочногоДокумента) Тогда
					Объект.НомерИсправляемогоКорректировочногоДокумента = РеквизитыИсправляемогоСчетаФактуры.НомерИсправляемогоКорректировочногоДокумента;
				КонецЕсли;
	
			КонецЕсли;
	
		КонецЕсли;
				
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 
			И Не Объект.ПометкаУдаления Тогда
			Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
				
				ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
				
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
					НоваяСтрока.Документ             = Объект.Ссылка;
					НоваяСтрока.ДатаДокумента        = Объект.Дата;
					НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
					НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
					НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураПолученный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	УдалитьДокументыОснованияСБитымиСсылками(Объект);
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Если ЗаполненаИСуществует(Объект.ДоговорКонтрагента)
			И Не Документы.СчетФактураПолученный.ТребуетсяЗаполнятьДоговорВСчетеФактуреНаАванс(
				Объект.Дата, Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные()) Тогда
		Объект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	ДозаполнитьОснованияСчетаФактуры(Объект);
	
	Если ЗначениеЗаполнено(Объект.Продавцы) Тогда
		Объект.Продавец = Объект.Продавцы[0].Продавец;
	КонецЕсли;
		
	Если Объект.ДополнительныеСвойства.Свойство("Загрузка_НовыйДокумент")
		И Объект.ДополнительныеСвойства.Загрузка_НовыйДокумент Тогда
	
		СтруктураПараметров = Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
		
		Если Объект.ДокументыОснования.Количество() > 0 Тогда
			СтруктураПараметров.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
		КонецЕсли;
	
		Если ЗаполненаИСуществует(СтруктураПараметров.ДокументОснование) Тогда
			Объект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Объект.Исправление Тогда
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 И Не Объект.ПометкаУдаления Тогда
			
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Авансовый отчет",
			// то корректировку надо вводить на основании счет-фактуры.
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
	
				НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
				НоваяСтрока.Документ             = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента        = Объект.Дата;
				НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
				НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.ДокументОснование, Объект.Ссылка);
				НоваяСтрока.ИндексСтроки         = 0;
				
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Отчета комитента",
			// то ее не надо переподчинять корректировкам и вводить фиктивные документы корректировка поступления.
			ИначеЕсли ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
				Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
					
					ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
					
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						
						НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
						НоваяСтрока.Документ             = Объект.Ссылка;
						НоваяСтрока.ДатаДокумента        = Объект.Дата;
						НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
						НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
						НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТаможеннаяДекларация(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ДоговорКонтрагента = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		Объект.ДоговорКонтрагента, Объект.ДоговорКонтрагентаРегл);
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	
	КонецЕсли;
	
	#Область Товары
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
			
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета   = СчетаУчета.СчетУчета;
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетНДСТаможни) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	
	КонецЦикла;
	#КонецОбласти
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТребованиеНакладная(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	ДанныеОбъекта = Новый Структура("Дата,Организация,Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(Объект.Материалы.ВыгрузитьКолонку("Номенклатура"), ДанныеОбъекта, Ложь, Ложь);
	ОсновнаяСтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению("СписаниеМатериалов"); 
	
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат) Тогда
					СтрокаТаблицы.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
				Иначе
					СтрокаТаблицы.СтатьяЗатрат	= ОсновнаяСтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_УстановкаЦенНоменклатуры(Объект)
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ВалютаЦены");
	Если ЗначениеЗаполнено(ВалютаЦены) Тогда
		Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Товары Цикл
			СтрокаТабличнойЧасти.Валюта = ВалютаЦены;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСтатьяРасходовСпособРасчетов = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиРасходовЗарплата.Ссылка КАК Ссылка,
	|	СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами КАК СпособРасчетовСФизическимиЛицами
	|ИЗ
	|	Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходовЗарплата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СпособРасчетовСФизическимиЛицами) Тогда
			СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.СпособРасчетовСФизическимиЛицами)
		Иначе
			СпособРасчетов = "";
		КонецЕсли;
		СоответствиеСтатьяРасходовСпособРасчетов.Вставить(Выборка.Ссылка, СпособРасчетов);
	КонецЦикла;
	СоответствиеСтатьяРасходовСпособРасчетов.Вставить(Справочники.СтатьиРасходовЗарплата.ПустаяСсылка(), "");
	
	НачисленияВзносы = Новый ТаблицаЗначений;
	НачисленияВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияВзносы.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ПодразделениеРегламентированногоУчета", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияВзносы.Колонки.Добавить("Подразделение");
	НачисленияВзносы.Колонки.Добавить("СпособОтраженияЗарплатыВФинансовомУчете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	НачисленияВзносы.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	НачисленияВзносы.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ВидНачисленияОплатыТрудаДляНУ", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ПериодПринятияРасходов", Новый ОписаниеТипов("Дата"));
	НачисленияВзносы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРДоПредельнойВеличины", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНаДоплатуЛетчикам", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНаДоплатуШахтерам", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНакопительная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРПоСуммарномуТарифу", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРСПревышения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРСтраховая", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ТФОМС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФСС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФФОМС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНДФЛ.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("ОКТМО", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("ОКАТО", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("НалоговыйОрган", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Удержания.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("ПодразделениеРегламентированногоУчета", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Удержания.Колонки.Добавить("Подразделение");
	Удержания.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Удержания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Удержания.Колонки.Добавить("ОписаниеУдержанияДляЧека", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("ЯвляетсяОснованиемОформленияКассовогоЧека", Новый ОписаниеТипов("Булево"));
	
	
	НачисленнаяЗарплатаИВзносы 	= ДанныеИБ.НачисленнаяЗарплатаИВзносы;
	НачисленныйНДФЛ 			= ДанныеИБ.НачисленныйНДФЛ;
	УдержаннаяЗарплата 			= ДанныеИБ.УдержаннаяЗарплата;
		
	Для каждого СтрокаТЧ Из НачисленнаяЗарплатаИВзносы Цикл
		
		НоваяСтрока =  НачисленияВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации,Подразделение,ВидНачисленияОплатыТрудаДляНУ");
		
		НоваяСтрока.ВидОперации 					= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 					= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.ВидНачисленияОплатыТрудаДляНУ 	= XMLСтрока(СтрокаТЧ.ВидНачисленияОплатыТрудаДляНУ);
		
		НоваяСтрока.ПодразделениеРегламентированногоУчета   = СтрокаТЧ.Подразделение;
		НоваяСтрока.СпособОтраженияЗарплатыВФинансовомУчете = СтрокаТЧ.СпособОтраженияЗарплатыВБухучете;
		
		НоваяСтрока.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЧ.Подразделение);
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из НачисленныйНДФЛ Цикл
		
		НоваяСтрока =  ТаблицаНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации");
		
		НоваяСтрока.ВидОперации 	= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 	= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.НалоговыйОрган  = СтрокаТЧ.КодНалоговогоОргана;
		НоваяСтрока.ОКАТО = СтрокаТЧ.КодПоОКАТО;
		НоваяСтрока.ОКТМО = СтрокаТЧ.КодПоОКТМО;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из УдержаннаяЗарплата Цикл
		
		НоваяСтрока =  Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации,Подразделение");
		
		НоваяСтрока.ВидОперации 	= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 	= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.ПодразделениеРегламентированногоУчета   = СтрокаТЧ.Подразделение;
		
		НоваяСтрока.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЧ.Подразделение);
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("НачисленнаяЗарплатаИВзносы", НачисленияВзносы);
	ДанныеXDTO.Вставить("НачисленныйНДФЛ", ТаблицаНДФЛ);
	ДанныеXDTO.Вставить("УдержаннаяЗарплата", Удержания);
КонецПроцедуры
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("ДатаВыписки")
		И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		Если НачалоДня(ДанныеXDTO.КлючевыеСвойства.Дата) = НачалоДня(ДанныеXDTO.ДатаВыписки) Тогда
			ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
		Иначе
			ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Проведен", Ложь);
		ПолученныеДанные.Дата     = ДанныеXDTO.КлючевыеСвойства.Дата;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.СчетБанк = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
		ПланыСчетов.Хозрасчетный.РасчетныеСчета,
		ПланыСчетов.Хозрасчетный.ВалютныеСчета);
КонецПроцедуры
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	ДанныеXDTO.Вставить("КодВидаДохода");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.СтатусСоставителя КАК СтатусСоставителя,
			|ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК, 
			|ПлатежныеПоручения.Ссылка.ПоказательОснования КАК ПоказательОснования, 
			|ПлатежныеПоручения.Ссылка.ПоказательПериода КАК ПоказательПериода, 
			|ПлатежныеПоручения.Ссылка.ПоказательНомера КАК ПоказательНомера, 
			|ПлатежныеПоручения.Ссылка.ПоказательДаты КАК ПоказательДаты, 
			|ПлатежныеПоручения.Ссылка.ПоказательТипа КАК ПоказательТипа, 
			|ПлатежныеПоручения.Ссылка.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Док
	|ГДЕ
	|	Док.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежныеПоручения.Ссылка.ОчередностьПлатежа КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежныеПоручения.Ссылка.ИдентификаторПлатежа КАК Код,
	|	ПлатежныеПоручения.Ссылка.КодВидаДохода КАК КодВидаДохода
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
	ИначеЕсли ПолучатьДанныеПлатежаВБюджет Тогда
		КодБК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Налог.КодБК");
		Если ЗначениеЗаполнено(КодБК) Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + КодБК, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств)
	ПолученныеДанные.ПринятиеКналоговомуУчету = Истина;
	ПолученныеДанные.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидПрочихДоходовИРасходов) Тогда
			ДанныеИБ.ВидПрочихДоходовИРасходов = ПолученныеДанные.ВидПрочихДоходовИРасходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат = ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		КонецЕсли;
		
		ПолученныеДанные = Неопределено;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные)
	ПолученныеДанные.СчетКасса = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
								ПланыСчетов.Хозрасчетный.КассаОрганизации,
								ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
		
			ПравилаКонвертацииПредопределенныхДанных = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных;
			ПравилоКонвертации = ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыКИ_Отправка", "ИмяПКПД");
			Если ПравилоКонвертации = Неопределено Тогда
				// Такую предопределенную контактную информацию мы выгружать не умеем.
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			
		Иначе
			
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			ЭтоПоддерживаемыйТипКИ = ИмяТипаКИ = "Адрес"
				ИЛИ ИмяТипаКИ = "АдресЭлектроннойПочты"
				ИЛИ ИмяТипаКИ = "ВебСтраница"
				ИЛИ ИмяТипаКИ = "Другое"
				ИЛИ ИмяТипаКИ = "Телефон"
				ИЛИ ИмяТипаКИ = "Факс"
				ИЛИ (ИмяТипаКИ = "Skype" И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"));
			
			Если Не ЭтоПоддерживаемыйТипКИ Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		
		КонецЕсли;
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодобратьПлатежнуюВедомость(СтруктураДопСвойства, ТипДокумента)
	ДатаВедомости = СтруктураДопСвойства.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = СтруктураДопСвойства.НомерВедомостиНаВыплатуЗарплаты;
	ПустаяВедомость = Документы[ТипДокумента].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ДатаВедомости) ИЛИ НЕ ЗначениеЗАполнено(НомерВедомости) Тогда
		Возврат ПустаяВедомость;
	КонецЕсли;
		
	Запрос = Новый Запрос ("
		|ВЫБРАТЬ
		|	ПлатежнаяВедомость.Ссылка КАК Ссылка,
		|	ПлатежнаяВедомость.Дата,
		|	ПлатежнаяВедомость.Номер
		|ИЗ
		|	Документ.[ТипДокумента] КАК ПлатежнаяВедомость
		|ГДЕ
		|	ПлатежнаяВедомость.Дата >= &ДатаН
		|	И ПлатежнаяВедомость.Дата <= &ДатаК
		|	И ПлатежнаяВедомость.Номер = &Номер");
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(ДатаВедомости));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаВедомости));
	Запрос.УстановитьПараметр("Номер",НомерВедомости);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ТипДокумента]",ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяВедомость;
	КонецЕсли;
КонецФункции
Функция ПравилаКонвертацииСтатьиЗатратПоВидамСубконто(СтатьяЗатратXDTO)
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
			Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы", СтатьяЗатратXDTO));
	СоответствиеСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, 
			Новый Структура("ИмяПКО, Значение", "Справочник_СтатьиРасходов_СтатьиЗатрат", СтатьяЗатратXDTO));
	Возврат СоответствиеСубконто;
КонецФункции
Функция ПризнакиНоменклатурыПоВидамПродукцииИС()
	СоответствияФлагов = Новый Соответствие;
	СоответствияФлагов.Вставить("Велосипеды", "Велосипеды");
	СоответствияФлагов.Вставить("Духи", "Духи");
	СоответствияФлагов.Вставить("КреслаКоляски", "КреслаКоляски");
	СоответствияФлагов.Вставить("ЛегкаяПромышленность", "ЛегкаяПромышленность");
	СоответствияФлагов.Вставить("МолочнаяПродукция", "МолочнаяПродукцияПодконтрольнаяВЕТИС");
	СоответствияФлагов.Вставить("Обувь", "ОбувнаяПродукция");
	СоответствияФлагов.Вставить("Табак", "ТабачнаяПродукция");
	СоответствияФлагов.Вставить("Фотоаппараты", "Фотоаппараты");
	СоответствияФлагов.Вставить("Шины", "Шины");
	Возврат СоответствияФлагов;
КонецФункции
Процедура ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля)
	// Процедура проверяет, что поля, переданные в ПроверяемыеПоля
	// при переносе из XDTO в ПолученныеДанные не изменили своих значений.
	// Например, это может произойти из-за того, что в объекте XDTO передано значение, длина которого больше, чем
	// соответствующее поле объекта базы данных. Если такие поля участвуют в поиске, то сопоставление объектов может сломаться.
	// 
	// Передавать в структуру ПроверяемыеПоля можно только поля строковых типов.
	
	Для Каждого ОписаниеПоля Из ПроверяемыеПоля Цикл
		ЗначениеПоляXDTO = "";
		ДанныеXDTO.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		Если Не ЗначениеЗаполнено(ЗначениеПоляXDTO) Тогда
			ДанныеXDTO.КлючевыеСвойства.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПоляXDTO)
			И ЗначениеЗаполнено(ПолученныеДанные[ОписаниеПоля.Значение])
			И СокрЛП(ЗначениеПоляXDTO) <> СокрЛП(ПолученныеДанные[ОписаниеПоля.Значение]) Тогда
			 ТекстИсключения = НСтр("ru = 'Поле %1 полученного объекта имеет некорректное значение %2. Загрузка не возможна.'");
			 ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОписаниеПоля.Ключ, ЗначениеПоляXDTO); 
			 ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, Префикс)
	КодВПрограмме = "";
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КлючевыеСвойства.КодВПрограмме;
	ИначеЕсли ДанныеXDTO.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КодВПрограмме;
	КонецЕсли; 
	
	Если КодВПрограмме <> "" Тогда
		ПолученныеДанные.Код = Лев(КодВПрограмме, 3) + Префикс + Сред(КодВПрограмме, 5);
	КонецЕсли;
КонецПроцедуры
Процедура ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	#Область Мержевание
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"Дата,ДоговорКонтрагента,ВалютаДокумента,Комментарий,
		|КратностьВзаиморасчетов,КурсВзаиморасчетов,
		|Организация,Ответственный,Склад,
		|СуммаВключаетНДС,
		|НДСВключенВСтоимость,Номер,СуммаДокумента");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС, СчетРасчетов");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
	
	#КонецОбласти
КонецПроцедуры
Функция РазличныеВидыДоговоров(МассивДоговоров)
	ВидыДоговоров = Новый Соответствие;
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат ВидыДоговоров;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Договоры", МассивДоговоров);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&Договоры)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДоговоров.Вставить(Выборка.ВидДоговора, Истина);
	КонецЦикла;
	
	Возврат ВидыДоговоров;
КонецФункции
Функция РегистрацияВНОПоКодуОКТМО(Организация, КодПоОКТМО)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодПоОКТМО", КодПоОКТМО);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Организации.ГоловнаяОрганизация = РегистрацииВНалоговомОргане.Владелец
	|			И Организации.КПП = РегистрацииВНалоговомОргане.КПП
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|	И РегистрацииВНалоговомОргане.КодПоОКТМО = &КодПоОКТМО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции
Процедура РегламентированныйОтчет_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Вид = Число(ДанныеXDTO.КлючевыеСвойства.ВидОтчета);
	ПолученныеДанные.НомерПачки = ДанныеXDTO.КлючевыеСвойства.НомерПачки - 1;
	
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДанныеXDTO.ДанныеОтчета);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти);
	ПолученныеДанные.ДанныеОтчета = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеТекста.Прочитать());
	
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДанныеXDTO.ДеревоНастройкиСтраниц);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти);
	ПолученныеДанные.ДеревоНастройкиСтраниц = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеТекста.Прочитать());
КонецПроцедуры
Процедура РегламентированныйОтчет_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерПачки", ДанныеИБ.НомерПачки+1);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидОтчета", XMLСтрока(ДанныеИБ.Вид));
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти);
	Текст.Записать(XMLСтрока(ДанныеИБ.ДанныеОтчета));
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	ДанныеXDTO.Вставить("ДанныеОтчета", СтрокаФорматBase64);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти);
	Текст.Записать(XMLСтрока(ДанныеИБ.ДеревоНастройкиСтраниц));
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	ДанныеXDTO.Вставить("ДеревоНастройкиСтраниц", СтрокаФорматBase64);
КонецПроцедуры
Функция СделкаДляВозвратаПоРеализацииОтгрБезПерехСобств(Объект)
	ВидОперацииРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "ВидОперации");
	Если ВидОперацииРеализации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		Возврат Объект.Сделка;
	КонецЕсли;
	
	ДокументРеализацииОтгруженныхТоваров = Документы.РеализацияТоваровУслуг.РеализацияПоОтгрузке(Объект.Сделка);
	Если ЗаполненаИСуществует(ДокументРеализацииОтгруженныхТоваров) Тогда
		ДатаРеализацииОтгруженныхТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализацииОтгруженныхТоваров, "Дата");
		Если ДатаРеализацииОтгруженныхТоваров < Объект.Дата Тогда
			// Возврат уже совершился после того, как ввели документ реализации отгруженных товаров.
			// В этом случае нужно заменить основание на этот документ реализации отгруженных товаров.
			Возврат ДокументРеализацииОтгруженныхТоваров;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Объект.Сделка;
КонецФункции
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания)
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		
		ЗаполнитьДоговорДаннымиЗаполнения(НовыйОбъект, ПараметрыСоздания.ЗначенияЗаполнения);
		
	КонецЕсли;
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора
		// записать предупреждение в журнал регистрации
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ДоговорыКонтрагентов, 
			НовыйОбъект.Ссылка,
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка);
	
	Возврат НовыйОбъект.Ссылка;
КонецФункции
Процедура СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена)
	МассивДокументов = КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке;
	
	Для Каждого ОтчетОРозничныхПродажах Из МассивДокументов Цикл
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументПКО
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ОтчетОРозничныхПродажах);
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			СсылкаНаПКО = Выборка.ДокументПКО;
			ДокументПКО = СсылкаНаПКО.ПолучитьОбъект();
		Иначе
			//Автоматически создадим документ ПКО отразив в нем розничную выручку
			ДокументПКО             = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументПКО.Дата        = ОтчетОРозничныхПродажах.Дата;
			ДокументПКО.Комментарий = НСтр("ru = '#Создан автоматически при обмене '");
		КонецЕсли;
		
		НужноУстанавливатьНовыйНомер = ДокументПКО.Организация <> ОтчетОРозничныхПродажах.Организация;
		
		ДокументПКО.ВалютаДокумента   = ОтчетОРозничныхПродажах.ВалютаДокумента;
		ДокументПКО.Организация       = ОтчетОРозничныхПродажах.Организация;
		ДокументПКО.ПодразделениеОрганизации = ОтчетОРозничныхПродажах.ПодразделениеОрганизации;
		ДокументПКО.Ответственный     = ОтчетОРозничныхПродажах.Ответственный;
		ДокументПКО.ДокументОснование = ОтчетОРозничныхПродажах;
		
		Если НужноУстанавливатьНовыйНомер Тогда
			ДокументПКО.УстановитьНовыйНомер();
		КонецЕсли;
	
		Документы.ПриходныйКассовыйОрдер.ЗаполнитьПоОтчетуОРозничныхПродажах(ДокументПКО, ОтчетОРозничныхПродажах);
		
		Если ДокументПКО.СуммаДокумента <> 0 Тогда
			ДокументПКО.Проведен = Истина;
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДокументПКО, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
			ДокументПКО.Записать(РежимЗаписиДокумента.Запись);
			
			НоваяСтрока = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
			НоваяСтрока.ДокументСсылка = ДокументПКО.Ссылка;
			НоваяСтрока.ДатаДокумента  = ДокументПКО.Дата;
		КонецЕсли;
	
		// Расходный кассовый ордер
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасходныйКассовыйОрдер.Ссылка КАК ДокументРКО
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ОтчетОРозничныхПродажах);
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			СсылкаНаРКО = Выборка.ДокументРКО;
			ДокументРКО = СсылкаНаРКО.ПолучитьОбъект();
		Иначе
			//Автоматически создадим документ РКО отразив в нем розничную выручку
			ДокументРКО             = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументРКО.Дата        = ОтчетОРозничныхПродажах.Дата;
			ДокументРКО.Комментарий = НСтр("ru = '#Создан автоматически при обмене '");
		КонецЕсли;
		
		НужноУстанавливатьНовыйНомер = ДокументРКО.Организация <> ОтчетОРозничныхПродажах.Организация;
		
		ДокументРКО.ВалютаДокумента   = ОтчетОРозничныхПродажах.ВалютаДокумента;
		ДокументРКО.Организация       = ОтчетОРозничныхПродажах.Организация;
		ДокументРКО.ПодразделениеОрганизации = ОтчетОРозничныхПродажах.ПодразделениеОрганизации;
		ДокументРКО.Ответственный     = ОтчетОРозничныхПродажах.Ответственный;
		ДокументРКО.ДокументОснование = ОтчетОРозничныхПродажах;
		
		Если НужноУстанавливатьНовыйНомер Тогда
			ДокументРКО.УстановитьНовыйНомер();
		КонецЕсли;
	
		Документы.РасходныйКассовыйОрдер.ЗаполнитьПоОтчетуОРозничныхПродажах(ДокументРКО, ОтчетОРозничныхПродажах);
		
		Если ДокументРКО.СуммаДокумента <> 0 Тогда
			ДокументРКО.Проведен = Истина;
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДокументРКО, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
			ДокументРКО.Записать(РежимЗаписиДокумента.Запись);
			
			НоваяСтрока = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
			НоваяСтрока.ДокументСсылка = ДокументРКО.Ссылка;
			НоваяСтрока.ДатаДокумента  = ДокументРКО.Дата;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена)
	// Необходимо обеспечить следующий порядок заполнения:
	// - справочники
	// - документы кроме корректировок и счетов-фактур
	// - корректировки поступления и реализации, созданные на основании исправительных счетов-фактур (в хронологическом порядке)
	// - счета-фактуры
	// - исправительные счет-фактуры
	
	ЗагруженныеОбъекты = КомпонентыОбмена.ЗагруженныеОбъекты;
	ЗагруженныеОбъекты.Колонки.Добавить("Очередность");
	ЗагруженныеОбъекты.Колонки.Добавить("ДатаДляСортировкиДокументов");
	ЗагруженныеОбъекты.Колонки.Добавить("НомерИсправленияДляСортировкиКорректировок");
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъекты Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Объект.МетаДанные();
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
			СтрокаТаблицы.Очередность = 1;
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			
			СтрокаТаблицы.ДатаДляСортировкиДокументов = СтрокаТаблицы.Объект.Дата;
			
			Если ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				Если СтрокаТаблицы.Объект.Исправление Тогда
					СтрокаТаблицы.Очередность = 7;
				Иначе
					СтрокаТаблицы.Очередность = 6;
				КонецЕсли;
	
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				СтрокаТаблицы.Очередность = 5;
				СтрокаТаблицы.НомерИсправленияДляСортировкиКорректировок = СтрокаТаблицы.Объект.НомерИсправления;
				
			Иначе
				СтрокаТаблицы.Очередность = 4;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Очередность = 3;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеОбъекты.Сортировать("Очередность, ДатаДляСортировкиДокументов, НомерИсправленияДляСортировкиКорректировок");
КонецПроцедуры
Процедура СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	СкладИзПолученныхДанных = ПолученныеДанные.Склад;
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) Тогда
		ПолученныеДанные.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СтавкаНДСВРознице, ОтражениеВУСН");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
	
	УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
КонецПроцедуры
Функция СпособОтраженияРасходов(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов)
	Если НЕ ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов) Тогда
		Возврат Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	КонецЕсли;
	
	// Сначала попробуем найти способ отражения расходов по наименованию.
	// Если он есть - вернем его, поиск по счетам учета уже делать не будем.
	// Если такого способа отражения расходов нет (или не заполнено НаименованиеСпособаОтраженияРасходов),
	// то конвертируем счета учета и попробуем найти способ отражения по счетам учета.
	// При этом обязательно должен быть указан счет затрат.
	
	Если XDTOСпособаОтраженияРасходов.Свойство("СчетЗатрат")
		И ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов.СчетЗатрат) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоРеквизитамЗатрат(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасходов)
		И XDTOСпособаОтраженияРасходов.Свойство("НаименованиеСпособаОтраженияРасходов")
		И ЗначениеЗаполнено(XDTOСпособаОтраженияРасходов.НаименованиеСпособаОтраженияРасходов) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоНаименованию(XDTOСпособаОтраженияРасходов.НаименованиеСпособаОтраженияРасходов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
		СпособОтраженияРасходов = СпособОтраженияРасходовПоУмолчанию();
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоНаименованию(НаименованиеСпособаОтраженияРасходов)
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(НаименованиеСпособаОтраженияРасходов) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Наименование", НаименованиеСпособаОтраженияРасходов);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыОтраженияРасходовПоАмортизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизации.Наименование = &Наименование
		|	И СпособыОтраженияРасходовПоАмортизации.ПометкаУдаления = ЛОЖЬ";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СпособОтраженияРасходов = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоРеквизитамЗатрат(КомпонентыОбмена, XDTOОрганизация, XDTOСпособаОтраженияРасходов)
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка();
	СчетЗатрат = БухгалтерскийСчетПоКоду(XDTOСпособаОтраженияРасходов.СчетЗатрат);
	Если ЗначениеЗаполнено(СчетЗатрат) Тогда
		
		ЗначенияАналитикиОтраженияЗатрат = ЗначенияАналитикиДляОтраженияЗатрат(КомпонентыОбмена, СчетЗатрат, XDTOОрганизация, XDTOСпособаОтраженияРасходов); 
		
		ЗаполненоХотяБыОдноСубконто = ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто1")
			ИЛИ ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто2")
			ИЛИ ЗначенияАналитикиОтраженияЗатрат.Свойство("Субконто3");
			
		Если ЗаполненоХотяБыОдноСубконто Тогда
			СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитикиОтраженияЗатрат);
			Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
				СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьСпособОтраженияРасходовПоЗначениямАналитики(ЗначенияАналитикиОтраженияЗатрат);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособОтраженияРасходовПоУмолчанию()
	//Попытка найти способ отражения расходов по умолчанию
	НаименованиеПоУмолчанию = НСтр("ru='Способ отражения расходов по умолчанию'");
	
	СпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	
	Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходов) Тогда
		СпособОтраженияРасходовОбъект = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		СпособОтраженияРасходовОбъект.Наименование = НаименованиеПоУмолчанию;
		СтрокаЗатраты = СпособОтраженияРасходовОбъект.Способы.Добавить();
		СтрокаЗатраты.КОэффициент = 1;
		СтрокаЗатраты.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
		СпособОтраженияРасходовОбъект.Записать();
		
		СпособОтраженияРасходов = СпособОтраженияРасходовОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СпособОтраженияРасходов;
КонецФункции
Функция СпособУчетаНДСПоЗакупкеПодДеятельность(КомпонентыОбмена, ДанныеXDTO, ЗакупкаПодДеятельность)
	СпособУчетаПоУмолчанию = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	
	СоответствияЗначенийПеречисления = Новый Соответствие;	
	СоответствияЗначенийПеречисления.Вставить("НеОблагаетсяНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
	СоответствияЗначенийПеречисления.Вставить("ОблагаетсяЕНВД", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
	СоответствияЗначенийПеречисления.Вставить("ОблагаетсяНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	СоответствияЗначенийПеречисления.Вставить("ОпределяетсяРаспределением", Перечисления.СпособыУчетаНДС.Распределяется);
	СоответствияЗначенийПеречисления.Вставить("ПоФактическомуИспользованию", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	СоответствияЗначенийПеречисления.Вставить("ЭкспортНеСырьевыхТоваров", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	СоответствияЗначенийПеречисления.Вставить("ЭкспортСырьевыхТоваров", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);
	
	СпособУчета = СоответствияЗначенийПеречисления.Получить(ЗакупкаПодДеятельность.Значение);
	Если Не ЗначениеЗаполнено(СпособУчета) Тогда
		СпособУчета = СпособУчетаПоУмолчанию;
	КонецЕсли;
	
	Возврат СпособУчета;
КонецФункции
Функция СпособУчетаНДСПоНалогообложению(КомпонентыОбмена, ДанныеXDTO)
	СпособУчетаПоУмолчанию = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	
	Если Не ДанныеXDTO.Свойство("Налогообложение")
		Или Не ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		Возврат СпособУчетаПоУмолчанию;	
	КонецЕсли;
	
	ТипЗначенияНалогообложения = ДанныеXDTO.Налогообложение.ТипЗначенияXDTO.Имя;
	
	СоответствияЗначенийПеречисления = Новый Соответствие;
	Если Врег(ТипЗначенияНалогообложения) = ВРег("НалогообложениеНДСПродавца") Тогда
		
		СоответствияЗначенийПеречисления.Вставить("НДСИсчисляетсяПокупателем", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		СоответствияЗначенийПеречисления.Вставить("НеОблагаетсяНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
		СоответствияЗначенийПеречисления.Вставить("ОблагаетсяНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		СоответствияЗначенийПеречисления.Вставить("НалоговыйАгентПоНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		СоответствияЗначенийПеречисления.Вставить("ОблагаетсяЕНВД", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);
		СоответствияЗначенийПеречисления.Вставить("ЭлектронныеУслуги", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		
	Иначе
		
		СоответствияЗначенийПеречисления.Вставить("ПродажаОблагаетсяЕНВД", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
		СоответствияЗначенийПеречисления.Вставить("ПродажаНеОблагаетсяНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
		СоответствияЗначенийПеречисления.Вставить("ПродажаОблагаетсяНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		СоответствияЗначенийПеречисления.Вставить("НалоговыйАгентПоНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		СоответствияЗначенийПеречисления.Вставить("ПродажаНаЭкспорт", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);
		СоответствияЗначенийПеречисления.Вставить("ПоФактическомуИспользованию", Перечисления.СпособыУчетаНДС.Распределяется);
		СоответствияЗначенийПеречисления.Вставить("ОпределяетсяРаспределением", Перечисления.СпособыУчетаНДС.Распределяется);
		
	КонецЕсли;
	
	СпособУчета = СоответствияЗначенийПеречисления.Получить(ДанныеXDTO.Налогообложение.Значение);
	Если Не ЗначениеЗаполнено(СпособУчета) Тогда
		СпособУчета = СпособУчетаПоУмолчанию;
	КонецЕсли;
	
	Возврат СпособУчета;
КонецФункции
Функция СсылкаПоЗначениямXDTO(КомпонентыОбмена, ИмяПКО, ЗначениеXDTO)
	ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
	Возврат ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗначениеXDTO, ПКО, "ПолучитьСсылку").Ссылка;
КонецФункции
Функция СтавкаНДСЧислом(СтавкаНДС)
	СтавкиНДС = Перечисления.СтавкиНДС;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20,     20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20_120, 20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18,     18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18_118, 18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10,     10);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10_110, 10);
	
	СтавкаНДСЧислом = СоответствиеСтавок.Получить(СтавкаНДС);
	СтавкаНДСЧислом = ?(СтавкаНДСЧислом = Неопределено, 0, СтавкаНДСЧислом);
	
	Возврат СтавкаНДСЧислом;
КонецФункции
Функция СтруктураДляЗагрузкиНомераГТД(НомерГТДСтрокой)
	Возврат Новый Структура("Код", НомерГТДСтрокой);
КонецФункции
Функция СтруктураКонвертацииДокументаРасчетов(XDTOДокументРасчетов)
	ИмяПКО = ИмяПКОДокументаПоТипуXDTO(XDTOДокументРасчетов);
		
	Если ИмяПКО <> Неопределено Тогда
		Инструкция = Новый Структура("Значение", XDTOДокументРасчетов); 
		Инструкция.Вставить("ИмяПКО", ИмяПКО);
		Возврат Инструкция;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Процедура СчетФактураВыданный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
	
		Если Не ЗначениеЗаполнено(ПолученныеДанные.КППКонтрагента)
			И ЗначениеЗаполнено(ДанныеИБ.КППКонтрагента) Тогда
			ПолученныеДанные.КППКонтрагента = ДанныеИБ.КППКонтрагента;
		КонецЕсли;
		
		УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
		
	КонецЕсли;
КонецПроцедуры
Процедура СчетФактураВыданный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаВыставления = 2;
	Иначе
		ПолученныеДанные.КодСпособаВыставления = 1;
	КонецЕсли;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Дата и номер исходного документа: могут быть указаны 
	// - либо в шапке 
	// - либо в ТЧ в зависимости от версии формата
	//Указанные в шапке - загружаются и в шапку и в ТЧ.
	//Указанные в ТЧ - загружаются только в ТЧ.
	Если ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
		ПолученныеДанные.ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
		ПолученныеДанные.НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
	КонецЕсли;
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ПолученныеДанные.Исправление = Истина;
	КонецЕсли;
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		КолонкиТЧ = ДанныеXDTO.ДокументыОснования.Колонки;
		ЕстьКолонкаДатаИсхДокумента = (КолонкиТЧ.Найти("ДатаИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИсхДокумента = (КолонкиТЧ.Найти("НомерИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаДатаИспрИсхДокумента = (КолонкиТЧ.Найти("ДатаИсправленияИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИспрИсхДокумента = (КолонкиТЧ.Найти("НомерИсправленияИсходногоДокумента") <> Неопределено);
	
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			СтруктураДанныхСтроки = Новый Структура;
			//Дата и номер исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Указанные в шапке - загружаются и в шапку и в ТЧ.
			//Указанные в ТЧ - загружаются только в ТЧ.
			ДатаИсходногоДокумента = Неопределено;
			НомерИсходногоДокумента = Неопределено;
			Если ЕстьКолонкаДатаИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = Строка.ДатаИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаНомерИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = Строка.НомерИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
			КонецЕсли;
			//Дата и номер исправления исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Загружаются в ТЧ, при загрузке из шапки - только в превую строку ТЧ.
			НомерИсправленияИсходногоДокумента = Неопределено;
			ДатаИсправленияИсходногоДокумента = Неопределено;
			Если ЭтоПерваяСтрока Тогда
				Если ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсправленияИсходногоДокумента) Тогда
					ДатаИсправленияИсходногоДокумента = ДанныеXDTO.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента) Тогда
					НомерИсправленияИсходногоДокумента = ДанныеXDTO.НомерИсправленияИсходногоДокумента;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьКолонкаНомерИспрИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсправленияИсходногоДокумента) Тогда
				НомерИсправленияИсходногоДокумента = Строка.НомерИсправленияИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаДатаИспрИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсправленияИсходногоДокумента) Тогда
				ДатаИсправленияИсходногоДокумента = Строка.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", ДатаИсправленияИсходногоДокумента);
			КонецЕсли;
			
			ИмяПКО = ИмяПКОДокументаПоТипуXDTO(Строка.ДокументОснование);
			
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО, УдалятьСозданныеПоКлючевымСвойствам",
					Строка.ДокументОснование, ИмяПКО, Истина);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
					
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
			ЭтоПерваяСтрока = Ложь;
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//Платежно-расчетные документы
	МассивСтрокДокументы = Новый Массив;
	Если ДанныеXDTO.Свойство("ПлатежноРасчетныеДокументы") И ЗначениеЗаполнено(ДанныеXDTO.ПлатежноРасчетныеДокументы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ДатаДокумента", "ДатаДокумента");
		ПравилаЗаполнения.Вставить("НомерДокумента", "НомерДокумента");
		Для Каждого Строка Из ДанныеXDTO.ПлатежноРасчетныеДокументы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокДокументы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПлатежноРасчетныеДокументы", МассивСтрокДокументы);
	КонецЕсли;
	
	//Авансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
КонецПроцедуры
Процедура СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ПолученныеДанные.СчетаФактурыВыданныеПокупателям.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетФактураВыданныйПокупателю) Тогда
		ПолученныеДанные.СчетФактураВыданныйПокупателю = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		ПолученныеДанные.Субкомиссионер = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].Субкомиссионер;
	КонецЕсли;
	
	Если ПолученныеДанные.Дата = НачалоДня(ПолученныеДанные.Дата) Тогда
		// Если дата указана без времени, то лучше время установить из даты документов-оснований.
		// Это может быть в том случае, если в объекте формата ДатаПолучения указана без времени.
		// Если это так - то нужно установить время так, чтобы время было равно времени документа-основания
		// Однако, если в объекте формата указана дата со временем, то не стоит ее затирать, даже если она раньше.
		УстановитьВремяСчетаФактурыИзДокументовОснований(ПолученныеДанные);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Загрузка_НовыйДокумент", ДанныеИБ = Неопределено);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Продавцы)
		И ЗначениеЗаполнено(ПолученныеДанные.ДокументыОснования) Тогда
		ДобавитьДоговорыДокументовВСписокКомиссииНаЗакупку(
			КомпонентыОбмена, ПолученныеДанные.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		Если Не ЗначениеЗаполнено(ПолученныеДанные.КППКонтрагента)
			И ЗначениеЗаполнено(ДанныеИБ.КППКонтрагента) Тогда
			ПолученныеДанные.КППКонтрагента = ДанныеИБ.КППКонтрагента;
		КонецЕсли;
		
		УстановитьОтменуПроведенияДляРучнойКорректировки(ДанныеИБ);
		
	КонецЕсли;
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаПолучения = 2;
	Иначе
		ПолученныеДанные.КодСпособаПолучения = 1;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если (ДанныеXDTO.Свойство("НомерИсправления")
		И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправления))
		ИЛИ (ДанныеXDTO.КлючевыеСвойства.Свойство("НомерИсправления")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.НомерИсправления)) Тогда
		ПолученныеДанные.Исправление = Истина;
	КонецЕсли;
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			
			СтруктураДанныхСтроки = Новый Структура();
			
			СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("НомерИсходногоДокумента"), 
				ДанныеXDTO.НомерИсходногоДокумента, 0));
			СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента",
				?(ДанныеXDTO.Свойство("ДатаИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсходногоДокумента, Дата(1, 1, 1)));
			СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсправленияИсходногоДокумента, Дата(1, 1, 1)));
			Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") Тогда 
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", ДанныеXDTO.НомерИсправленияИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("УчитыватьИсправлениеИсходногоДокумента", ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента));
			КонецЕсли;
			
			ИмяПКО = ИмяПКОДокументаПоТипуXDTO(Строка.ДокументОснование);
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО, УдалятьСозданныеПоКлючевымСвойствам",
					Строка.ДокументОснование, ИмяПКО, Истина);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
			
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
			Если ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг" Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО, УдалятьСозданныеПоКлючевымСвойствам",
					Строка.ДокументОснование, "ПТиУ_ПоступлениеДопРасходов", Истина);				
				СтруктураДанныхСтрокиДоп = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхСтроки);
				СтруктураДанныхСтрокиДоп.ДокументОснование = ТекДокументОснование;
				МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтрокиДоп);
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	// Авансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
	
	// Продавцы
	МассивСтрокПродавцы = Новый Массив;
	Если ДанныеXDTO.Свойство("Продавцы") И ЗначениеЗаполнено(ДанныеXDTO.Продавцы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Продавец", "Продавец");
		Для Каждого Строка Из ДанныеXDTO.Продавцы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокПродавцы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокПродавцы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Продавцы", МассивСтрокПродавцы);
	КонецЕсли;
	
	// Счета фактуры выданные покупателям
	МассивСтрокСФ = Новый Массив; 
	Если ДанныеXDTO.Свойство("СчетаФактурыВыданныеПокупателям")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетаФактурыВыданныеПокупателям) Тогда
		// Из табличной части
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СчетФактураВыданный", "СчетФактура");
		ПравилаЗаполнения.Вставить("Субкомиссионер", "Субкомиссионер");
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("СуммаНДС", "НДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		Для Каждого Строка Из ДанныеXDTO.СчетаФактурыВыданныеПокупателям Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	ИначеЕсли ДанныеXDTO.Свойство("ДанныеРеализацииСчетФактураВыставленный") 
		И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный) Тогда
		// Из шапки
		СтруктураДанныхСтроки = Новый Структура("СчетФактура, НДС, Сумма, Субкомиссионер, Покупатель", 
				ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный,
				ПолученныеДанные.СуммаНДС, ПолученныеДанные.Сумма, 
				Неопределено, Неопределено);
		Если ДанныеXDTO.Свойство("ДанныеРеализацииСубкомиссионер") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСубкомиссионер) Тогда
			СтруктураДанныхСтроки.Субкомиссионер = ДанныеXDTO.ДанныеРеализацииСубкомиссионер;
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ДанныеРеализацииКонечныйПокупатель") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель) Тогда
			СтруктураДанныхСтроки.Покупатель = ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель;
		КонецЕсли;
		МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
	КонецЕсли;
	Если МассивСтрокСФ.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетаФактурыВыданныеПокупателям", МассивСтрокСФ);
		ПолученныеДанные.СводныйКомиссионный = (МассивСтрокСФ.Количество() > 1);
	КонецЕсли;
КонецПроцедуры
Функция ТабличнаяЧастьДляПереносаЗадолженности(ВидЗадолженности, Сделка)
	Если ВидЗадолженности = "Покупатели" Тогда
		Если ЭтоДокументРеализации(Сделка) Тогда
			Возврат "ДебиторскаяЗадолженность";
		Иначе
			Возврат "КредиторскаяЗадолженность";
		КонецЕсли;	
	Иначе
		Если ЭтоДокументПоступления(Сделка) Тогда
			Возврат "КредиторскаяЗадолженность";
		Иначе
			Возврат "ДебиторскаяЗадолженность";
		КонецЕсли;	
	КонецЕсли;
КонецФункции
Функция ТипУслугиСтроки(Строка)
	ТипУслуги = "";
	Если ЗначениеЗаполнено(Строка.ТипУслуги) Тогда
		ТипУслуги = Строка.ТипУслуги.Значение;
	КонецЕсли;
	Возврат ТипУслуги;
КонецФункции
Процедура УдалитьДокументыОснованияСБитымиСсылками(Объект)
	// Нужно удалить документы-основания с битыми ссылками.
	// Это нужно для того, что бы корректно установить основание в том случае,
	// если исходный документ-основание в сообщении обмена может превращаться в разные объекты ИБ.
	// В этом случае в ТЧ ДокументыОснования добавляются все возможные правила конвертации.
	// Затем при загрузке объекта проигрывается ПОД и правило конвертации выбирается на основании данных объекта.
	// В строках в ДокументыОснования, которые соответствуют правилам, которые не были выбраны в ПОД, будет
	// записана битая ссылка. Эти битые ссылки нужно удалить.
	
	Индекс = Объект.ДокументыОснования.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяСтрока = Объект.ДокументыОснования[Индекс];
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование)
			И Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСтрока.ДокументОснование) Тогда
			Объект.ДокументыОснования.Удалить(ТекущаяСтрока);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьАналитикуСчетаВОбъекте(КомпонентыОбмена, Объект, ХранилищеСубконто, СчетУчета, ПрефиксСубконто)
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	
	Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
	
		ВидСубконто = Неопределено;
		ДанныеСчета.Свойство("ВидСубконто" + ИндексСубконто, ВидСубконто);
		
		Если ЗначениеЗаполнено(ВидСубконто)	И ВидСубконто.Предопределенный Тогда
	
			КлючСубконто = КлючСубконтоДляДопСвойств(ПрефиксСубконто, ВидСубконто);
			ИнструкцияКонвертацииСубконто = Неопределено;
			ХранилищеСубконто.Свойство(КлючСубконто, ИнструкцияКонвертацииСубконто);
			Если ЗначениеЗаполнено(ИнструкцияКонвертацииСубконто) Тогда
				ПКО_Субконто = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИнструкцияКонвертацииСубконто.ИмяПКО);
				ЗначениеСубконто = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ИнструкцияКонвертацииСубконто.Значение,
					ПКО_Субконто, "ПолучитьСсылку").Ссылка;
				Объект[ПрефиксСубконто+Строка(ИндексСубконто)] = ЗначениеСубконто;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьВидОперацииКорректировкиДолга(ПолученныеДанные)
	// Устанавливаем реквизиты ВидОперации, ВидАвансаЗадолженности, ТипАвансаЗадолженности в зависимости от состава табличных
	// частей и видов договоров в этих табличных частях
	
	ДоговорыДебиторскойЗадолженности = ПолученныеДанные.ДебиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровДебиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыДебиторскойЗадолженности);
	
	ДоговорыКредиторскойЗадолженности = ПолученныеДанные.КредиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровКредиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыКредиторскойЗадолженности);
	
	// Если есть вид договора Прочее, то всегда используем "ВидОперации" "Прочее"
	Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено
		ИЛИ ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	// В табличной части должны быть договора только одного вида - с поставщиком или с покупателем.
	// Если это не так - используем вид операции "Прочее"
	Если (ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено)
		 ИЛИ (ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    	И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// При списании или переносе задолженности должна быть заполнена только дебиторская или только кредиторская задолженность.
		Если ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0
			И ПолученныеДанные.КредиторскаяЗадолженность.Количество() > 0 Тогда
			// Записи есть в обоих таблицах - используем вид операции Прочее
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
		ИначеЕсли ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		    // Заполнена только дебиторская задолженность.
		    // В табличной части могут быть только задолженность покупателя или авансы поставщику
		    Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С поставщиком", значит это аванс поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		    КонецЕсли;
		Иначе
		    // Заполнена только кредиторская задолженность.
		    // В табличной части могут быть только задолженность поставщику или авансы от покупателя.
		    Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С покупателем", значит это аванс покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику;
		    КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
		// При взаимозачете задолженности заполнены обе табличные части, при этом должны выполниться одно из условий:
		//  - в дебиторской задолженности должны быть только покупатели, в кредиторской - только поставщики (оставляем вид операции ЗачетЗадолженности) 
		//  - в дебиторской задолженности только поставщики, в кредиторской - только покупатели (используем вид операции ЗачетЗадолженности)
		//  - в дебиторской и кредиторской задолженности задолженности только поставщики (используем вид операции ЗачетАвансов)
		//  - в дебиторской и кредиторской задолженности только покупатели (используем вид операции ЗачетАвансов)
		
		ВДебиторскойЗадолженностиТолькоПокупатели = ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено
			И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) = Неопределено;
		ВДебиторскойЗадолженностиТолькоПоставщики = ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
			И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) = Неопределено;
		ВКредиторскойЗадолженностиТолькоПокупатели = ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено
			И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) = Неопределено;
		ВКредиторскойЗадолженностиТолькоПоставщики = ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
			И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) = Неопределено;
		
		Если ВДебиторскойЗадолженностиТолькоПокупатели И ВКредиторскойЗадолженностиТолькоПоставщики Тогда
			
			// В дебиторской задолженности указаны покупатели, а в кредиторской задолженности нет покупателей, а есть либо поставщики, либо договоры комиссии.
			// Это операция, например, зачета реализации и поступления от одного или нескольких контрагентом.
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
			
		ИначеЕсли ВДебиторскойЗадолженностиТолькоПоставщики И ВКредиторскойЗадолженностиТолькоПокупатели Тогда
			
			// В дебиторской задолженности указаны поставщики, а в кредиторской задолженности нет поставщиков, а есть либо покупатели, либо договоры комиссии.
			// Это операция, например, зачета аванса за поставку и аванса за реализацию от одного или нескольких контрагентом.
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику;
			
		ИначеЕсли ВДебиторскойЗадолженностиТолькоПокупатели И ВКредиторскойЗадолженностиТолькоПокупатели Тогда
	
			// В дебиторской и кредиторской задолженности покупатели или договоры комиссии.
			// Это операция, например, зачета аванса от покупателя и реализации (по другому договору или покупателю).
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
			
		ИначеЕсли ВДебиторскойЗадолженностиТолькоПоставщики И ВКредиторскойЗадолженностиТолькоПоставщики Тогда
		
			// В дебиторской и кредиторской задолженности покупатели или договоры комиссии.
			// Это операция, например, зачета аванса поставщику и поступления (по другому договору или поставщику).
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику;
		
		Иначе
		
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			
		КонецЕсли;
		
	ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		// При переносе задолженности заполнены обе табличные части, при этом должны выполниться одно из условий:
		//  - в дебиторской и кредиторской задолженности только поставщики
		//  - в дебиторской и кредиторской задолженности только покупатели
		// При этом документ расчетов должен быть одинаков и в дебиторской и кредиторской задолженности.
		
		ВДебиторскойЗадолженностиТолькоПокупатели = ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено
			И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) = Неопределено;
		ВДебиторскойЗадолженностиТолькоПоставщики = ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
			И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) = Неопределено;
		ВКредиторскойЗадолженностиТолькоПокупатели = ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено
			И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) = Неопределено;
		ВКредиторскойЗадолженностиТолькоПоставщики = ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
			И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) = Неопределено;
		
		// В дебиторской и кредиторской задолженности указаны только поставщики, или только покупатели.
		// При этом табличные части должны соответствовать друг другу: строки в них должны совпадать по расчетному документу, курсу и кратности.
		// Попытаемся из двух табличных частей поместить данные в одну, так, как это требует перенос задолженности.
		// Если не получится перенести, то установим вид Прочее - он подходит для всего.
					
		Если ВДебиторскойЗадолженностиТолькоПокупатели И ВКредиторскойЗадолженностиТолькоПокупатели Тогда
			
			// В дебиторской и кредиторской задолженности указаны покупатели.
			// Это операция, например, переноса аванса с одного договора на другой.
			
			ОбъединениеВыполнено = ОбъединитьТаблЧастиКоррДолгаПриПереносеЗадолжен(ПолученныеДанные, "Покупатели");
			
			Если ОбъединениеВыполнено Тогда
				ПолученныеДанные.ВидАвансаЗадолженности = ?(ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0,
					Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя, Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя);
			Иначе
				// Состав табличных частей не подходит под "Перенос задолженности"
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;		
			КонецЕсли;
			
		ИначеЕсли ВДебиторскойЗадолженностиТолькоПоставщики И ВКредиторскойЗадолженностиТолькоПоставщики Тогда
			
			ОбъединениеВыполнено = ОбъединитьТаблЧастиКоррДолгаПриПереносеЗадолжен(ПолученныеДанные, "Поставщики");
			
			Если ОбъединениеВыполнено Тогда
				ПолученныеДанные.ВидАвансаЗадолженности = ?(ПолученныеДанные.КредиторскаяЗадолженность.Количество() > 0,
					Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику, Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику);
			Иначе
				// Состав табличных частей не подходит под "Перенос задолженности"
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;		
			КонецЕсли;
			
		Иначе
		
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			
		КонецЕсли;
		
	ИначеЕсли ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		// При переносе поддерживается только "Списание задолженности", все остальные виды операций загружаются как "Прочее"
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.КонтрагентКредитор = ПолученныеДанные.КонтрагентДебитор Тогда
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.СамогоКонтрагента;
	Иначе
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.ТретьегоЛица;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьВидОплатыВТабличнойЧасти(КомпонентыОбмена, ПолученныеДанные, ИмяТабличнойЧасти)
	//Заполнение ВидаОплаты
	Если ЗначениеЗаполнено(ПолученныеДанные.Организация) И ПолученныеДанные[ИмяТабличнойЧасти].Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ ИЗ ПолученныеДанные[ИмяТабличнойЧасти] Цикл
		
			СтрокаТабличнойЧасти = ПолученныеДанные.ДополнительныеСвойства[ИмяТабличнойЧасти];
			СтрокаДопСвойств = СтрокаТабличнойЧасти[СтрокаТЧ.НомерСтроки - 1];
			
			ТипОплаты  = СтрокаДопСвойств.ТипОплаты;
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Договор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если СтрокаДопСвойств.Свойство("Контрагент") Тогда
				Контрагент = СтрокаДопСвойств.Контрагент;
			КонецЕсли;
			
			Если СтрокаДопСвойств.Свойство("ДоговорКонтрагента") Тогда
				Договор = СтрокаДопСвойств.ДоговорКонтрагента;
			КонецЕсли;
			
			СтрокаТЧ.ВидОплаты = ВидОплатыОрганизации(
				КомпонентыОбмена,
				ПолученныеДанные.Организация,
				ТипОплаты,
				Контрагент,
				Договор);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьВремяРеализацииОтгруженныхТоваров(ПолученныеДанные, ДанныеXDTO)
	// Дата документа "Реализация отгруженных товаров" определяется из поля "ДатаПереходаПраваСобственности".
	// Это поле не содержит времени, документ "Реализация отгруженных товаров" загружается с нулевым временем.
	// Поэтому, если отгрузка и реализация происходят в один день, то реализация отгруженных товаров всегда устанавливается в начало дня,
	// а дата отгрузки - по дате документа. Из-за этого реализация отгруженных товаров происходит раньше, чем отгрузка и документ не проводится.
	// Для этого, если отгрузка и реализация происходит в один день, то время реализации отгруженных товаров устанавливаем с учетом времени реализации.
	
	Если Не ЗначениеЗаполнено(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПереходаПраваСобственности = Неопределено;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ДатаПереходаПраваСобственности") Тогда
		ДатаПереходаПраваСобственности = ДанныеXDTO.КлючевыеСвойства.ДатаПереходаПраваСобственности;
	ИначеЕсли ДанныеXDTO.Свойство("ДатаПереходаПраваСобственности") Тогда
		ДатаПереходаПраваСобственности = ДанныеXDTO.ДатаПереходаПраваСобственности;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПереходаПраваСобственности) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтгрузки = ДанныеXDTO.КлючевыеСвойства.Дата;
	Если НачалоДня(ДатаОтгрузки) = НачалоДня(ДатаПереходаПраваСобственности) Тогда
		ВремяРеализации = ДатаОтгрузки - НачалоДня(ДатаОтгрузки);
		// Устанавливаем дату реализации отгруженных товаров на секунду позже, чем дата отгрузки.
		// Но дата отгрузки может быть в конце дня, поэтому + 1 секунда - это уже следующий день, а день менять нельзя.
		// В этом случае время отгрузки и реализации будет совпадать.
		ПолученныеДанные.Дата = Мин(КонецДня(ПолученныеДанные.Дата), ДатаПереходаПраваСобственности + ВремяРеализации + 1);	
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьВремяСчетаФактурыИзДокументовОснований(ПолученныеДанные)
	ДокументыОснования = Новый Массив;
	Для Каждого СтрокаДокументаОснования Из ПолученныеДанные.ДокументыОснования Цикл
		Если ЗаполненаИСуществует(СтрокаДокументаОснования.ДокументОснование) Тогда
			ДокументыОснования.Добавить(СтрокаДокументаОснования.ДокументОснование);	
		КонецЕсли;
	КонецЦикла;
	
	ДатыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыОснования, "Дата");
	Для Каждого КлючЗначение Из ДатыДокументов Цикл
		
		ДатаОснования = КлючЗначение.Значение;
		Если Не ЗначениеЗаполнено(ДатаОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(ДатаОснования) <> НачалоДня(ПолученныеДанные.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаОснования > ПолученныеДанные.Дата Тогда
			ПолученныеДанные.Дата = ДатаОснования;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьЗначенияФункциональныхОпций()
	// Использование корректировок.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКорректировочныеДокументы") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаПоступления КАК Док
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаРеализации КАК Док");
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьКорректировочныеДокументы.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьНезаполненноеОтражениеВУСН(ТабличнаяЧасть, ОтражениеВУСН)
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(Строка.ОтражениеВУСН) Тогда
			Строка.ОтражениеВУСН = ОтражениеВУСН;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьОплаченоВПлатежномПоручении(Объект)
	ПлатежноеПоручениеОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Объект.Ссылка, Объект.ДокументОснование, Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
			ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ДанныеXDTO, ОрганизацияXDTO)
	ПодразделениеXDTO = Неопределено;
	ДанныеXDTO.Свойство("ВышестоящееПодразделение", ПодразделениеXDTO);
	Если ЗначениеЗаполнено(ПодразделениеXDTO)
		И ЗначениеЗаполнено(ОрганизацияXDTO) Тогда
	
		ПодразделениеXDTO.Вставить("Организация", ОрганизацияXDTO);
		
		УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);	
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьОтменуПроведенияДляРучнойКорректировки(ДокументОбъект)
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Запретить
		И МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И ДокументОбъект.РучнаяКорректировка Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ИспользоватьОтменуПроведенияДляОчисткиДвижений", Истина);
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, ПользовательскийПрефикс)
	НомерДокумента = ?(ДанныеXDTO.Свойство("Номер"), ДанныеXDTO.Номер, ДанныеXDTO.КлючевыеСвойства.Номер);
	
	ДлинаПрефикса = СтрДлина(ПользовательскийПрефикс);
	НачалоЗамены  = 5;
	НомерДокументаСПрефиксом = Лев(НомерДокумента, НачалоЗамены) + ПользовательскийПрефикс + Сред(НомерДокумента, НачалоЗамены + ДлинаПрефикса + 1);
	
	ПолученныеДанные.Номер = НомерДокументаСПрефиксом;
	
	ДанныеXDTOДляПроверки = Новый Структура("Номер", НомерДокументаСПрефиксом);
	
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTOДляПроверки, ПроверяемыеПоля);
КонецПроцедуры
Процедура УстановитьПоляПоискаКонтрагента(КомпонентыОбмена, ДанныеXDTO)
	// Поиск контрагента должен осуществляться следующим образом
	//  - если заполнен ИНН, то поиск осуществляется по ИНН для физ.лица и ИНН/КПП для юрлица + ЭтоГруппа
	//  - если ИНН не заполнен, то поиск осущестляется сначала по полному наименованию, затем по наименованию + ЭтоГруппа.
	
	ПравилаКонвертацииКонтрагентов = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Контрагенты_Получение", "ИмяПКО");
	Если ПравилаКонвертацииКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПоиска = ПравилаКонвертацииКонтрагентов.ПоляПоиска;
	ПоляПоиска.Очистить();
	
	ИННЗаполнен = Ложь;
	КППЗаполнен = Ложь;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства) Тогда
		ИННЗаполнен = ДанныеXDTO.КлючевыеСвойства.Свойство("ИНН") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ИНН);
		КППЗаполнен = ДанныеXDTO.КлючевыеСвойства.Свойство("КПП") И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.КПП);
		ЭтоЮридическоеЛицо = ДанныеXDTO.КлючевыеСвойства.Свойство("ЮридическоеФизическоеЛицо") И ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо";
	Иначе
		ИННЗаполнен = ДанныеXDTO.Свойство("ИНН") И ЗначениеЗаполнено(ДанныеXDTO.ИНН);
		КППЗаполнен = ДанныеXDTO.Свойство("КПП") И ЗначениеЗаполнено(ДанныеXDTO.КПП);
		ЭтоЮридическоеЛицо = ДанныеXDTO.Свойство("ЮридическоеФизическоеЛицо") И ДанныеXDTO.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо";
	КонецЕсли;
	
	Если ИННЗаполнен Тогда
		Если ЭтоЮридическоеЛицо И КППЗаполнен Тогда
			ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
		Иначе
			ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
		КонецЕсли;
	Иначе
		ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
		ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПоляПоискаНоменклатуры(КомпонентыОбмена, ЭтоЗагрузкаКлючевыхСвойств)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.5") Тогда
		Возврат;
	КонецЕсли;
	
	// Ключевые поля номенклатуры до версии 1.6 не включают родителя.
	// Поэтому при поиске по ссылке Родитель всегда не заполнен и поиск осуществляется только среди элементов,
	// у которых родитель в базе пустой.
	// При загрузке объекта родитель заполнен, хотя он и не входит в ключевые поля (т.к. при загрузке объекта заполняются все поля, а не только ключевые)
	// Поэтому при загрузке объекта нужно искать по родителю, а при загрузке ссылки формата 1.5 и меньше - без учета родителя.
	// Если так не делать - то появляются битые ссылки.
	
	ПравилаКонвертацииНоменклатуры = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_Номенклатура_Получение", "ИмяПКО");
	Если ПравилаКонвертацииНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчитыватьРодителяПриПоиске = Не ЭтоЗагрузкаКлючевыхСвойств;
	ПоляПоиска = ПравилаКонвертацииНоменклатуры.ПоляПоиска;
	Для НомерПравилаПоиска = 0 По ПоляПоиска.Количество() - 1 Цикл
		
		ПоляПравила = СтрРазделить(ПоляПоиска[НомерПравилаПоиска], ",");
		Если УчитыватьРодителяПриПоиске Тогда
			Если ПоляПравила.Найти("Родитель") = Неопределено Тогда
				ПоляПравила.Добавить("Родитель");
			КонецЕсли;
		Иначе
			ИндексРодителя = ПоляПравила.Найти("Родитель");
			Если ИндексРодителя <> Неопределено Тогда
				ПоляПравила.Удалить(ИндексРодителя);
			КонецЕсли;
		КонецЕсли; 
		
		ПоляПоиска[НомерПравилаПоиска] = СтрСоединить(ПоляПравила, ",");	
		
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьПризнакДоговораЭлектронныхУслуг(КомпонентыОбмена, Объект)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиЭлектронныхУслуг.Найти(Объект.Ссылка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетУслугИностранныхИнтернетКомпаний") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭлектронныеУслуги Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = Объект.Владелец;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
	Если СтранаРегистрацииКонтрагента = Справочники.СтраныМира.Россия Тогда
		Возврат;
	КонецЕсли;
	
	МожноИзменитьПризнак = Истина;
	
	НовыйДоговор = КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Объект.Ссылка) <> Неопределено;
	Если Не НовыйДоговор Тогда
		
		ДокументыПоДоговору = Справочники.ДоговорыКонтрагентов.ДокументыПоДоговору(Объект.Ссылка);	
		НепроведенныеДокументыПоДоговору = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыПоДоговору);
		
		Если НепроведенныеДокументыПоДоговору.Количество() < ДокументыПоДоговору.Количество() Тогда
			// В базе уже есть проведенные документы по этому договору.
			МожноИзменятьПризнак = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если МожноИзменитьПризнак Тогда
		Объект.ЭлектронныеУслуги = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПризнакПокупкиНДСИсчисляетсяПокупателем(КомпонентыОбмена, Объект)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПокупкиНДСИсчисляетсяПокупателем.Найти(Объект.Ссылка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОбратноеНачислениеНДС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.УчетАгентскогоНДС И Объект.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров Тогда
		Возврат;
	КонецЕсли;
	
	МожноИзменитьПризнак = Истина;
	
	НовыйДоговор = КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Объект.Ссылка) <> Неопределено;
	Если Не НовыйДоговор Тогда
		ДокументыПоДоговору = Справочники.ДоговорыКонтрагентов.ДокументыПоДоговору(Объект.Ссылка);	
		НепроведенныеДокументыПоДоговору = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыПоДоговору);
		
		Если НепроведенныеДокументыПоДоговору.Количество() < ДокументыПоДоговору.Количество() Тогда
			// В базе уже есть проведенные документы по этому договору.
			МожноИзменятьПризнак = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если МожноИзменитьПризнак Тогда
		Объект.УчетАгентскогоНДС = Истина;
		Объект.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияТоваров;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	// Например, если отсутствует ДатаВыписки в ПБДС и СБДС документ должен быть не проведен.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
	
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	Если НЕ ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.Проведен = Ложь;
		ИначеЕсли ПризнакПроведенПолученный = Ложь Тогда
			ПолученныеДанные.Проведен = Ложь;
		Иначе
			// Если документы при загрузке не проводятся, признак проведения остается как в базе-получателе.
			ПолученныеДанные.Проведен = ДанныеИБ.Проведен;
		КонецЕсли;
	Иначе
		ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	КонецЕсли;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПризнакПродажиНДСИсчисляетсяПокупателем(КомпонентыОбмена, Объект)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДоговорыПродажиНДСИсчисляетсяПокупателем.Найти(Объект.Ссылка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОбратноеНачислениеНДС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.УчетАгентскогоНДСПокупателем Тогда
		Возврат;
	КонецЕсли;
	
	Если МожноИзменитьКлючевыеПараметрыДоговора(КомпонентыОбмена, Объект.Ссылка) Тогда
		Объект.УчетАгентскогоНДСПокупателем = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьСпособПогашенияЗадолженности(Объект, ИмяТаблицы = "РасшифровкаПлатежа")
	Для Каждого СтрокаРасшифровки Из Объект[ИмяТаблицы] Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СпособПогашенияЗадолженности) Тогда
			СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		ИначеЕсли СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
			И Не ЗначениеЗаполнено(СтрокаРасшифровки.Сделка) Тогда
			СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьСтавкуНДС4и2ВДоговоре(Объект)
	Если Объект.ДополнительныеСвойства.Свойство("НДСПоСтавкам4и2")
		И ЗаполненаИСуществует(Объект.ДоговорКонтрагента) Тогда
		
		НДСПоСтавкам4и2ВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "НДСПоСтавкам4и2");
		НДСПоСтавкам4и2Новая     = Объект.ДополнительныеСвойства.НДСПоСтавкам4и2;
		ДоговорМодифицирован     = Ложь;
		
		Если НДСПоСтавкам4и2Новая
			И Не НДСПоСтавкам4и2ВДоговоре Тогда
			ДоговорМодифицирован = Истина;
		Иначе
			Если Объект.ДополнительныеСвойства.НДСПоСтавкам18и10
				И НДСПоСтавкам4и2ВДоговоре Тогда
				ДоговорМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоговорМодифицирован Тогда
			ДоговорОбъекта = Объект.ДоговорКонтрагента.ПолучитьОбъект();
			ДоговорОбъекта.ОбменДанными.Загрузка = Истина;
			ДоговорОбъекта.НДСПоСтавкам4и2       = НДСПоСтавкам4и2Новая;
			ДоговорОбъекта.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьСтавкуНДСПодходящуюДляЕАЭС(ПолученныеДанные)
	Для Каждого СтрокаТовара Из ПолученныеДанные.Товары Цикл
		Если СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция УСчетаЕстьВидСубконто(Счет, ВидСубконто)
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
		ВидСубконто = Неопределено;
		ДанныеСчета.Свойство("ВидСубконто" + ИндексСубконто, ВидСубконто);
		Если ЗначениеЗаполнено(ВидСубконто) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
Процедура УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10)
	Если ЗначениеЗаполнено(Строка.СтавкаНДС)
		И ЗначениеЗаполнено(Строка.СтавкаНДС.Значение) Тогда
		Если Строка.СтавкаНДС.Значение = "НДС2" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС2_102" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10_110";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4" Тогда
		    СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18";
		    НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4_104" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18_118";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС18"
			Или Строка.СтавкаНДС.Значение = "НДС18_118"
			Или Строка.СтавкаНДС.Значение = "НДС20"
			Или Строка.СтавкаНДС.Значение = "НДС20_120"
			Или Строка.СтавкаНДС.Значение = "НДС10"
			Или Строка.СтавкаНДС.Значение = "НДС10_110" Тогда
			НДСПоСтавкам18и10 = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоДокументПоступления(СсылкаНаДокумент)
	ТипЗначенияДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Если ТипЗначенияДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПоступлениеНМА")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.КорректировкаПоступления")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Функция ЭтоДокументРеализации(СсылкаНаДокумент)
	ТипЗначенияДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Если ТипЗначенияДокумента = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПередачаОС")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ПередачаНМА")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.ОказаниеУслуг")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипЗначенияДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции
Функция ЭтоНовыйОбъект(Объект)
	Возврат Объект.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Объект.ДополнительныеСвойства.ЭтоНовый;
КонецФункции
Функция ЭтоОбменСУНФ(КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондентаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантНастройки = КомпонентыОбмена.УзелКорреспондентаОбъект.ВариантНастройки;
	Возврат ВариантНастройки = "ОбменУНФ" Или ВариантНастройки = "ОбменБП30";
КонецФункции
Функция ЭтоПоступлениеТоваровПоИмпорту(ДанныеИБ)
	// Если для документа оформлен ГТДИмпорт, то это точно импортная операция - ничего больше смотреть не нужно.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументПартии
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|ГДЕ
	|	ГТДИмпортТовары.ДокументПартии = &Ссылка
	|	И ГТДИмпортТовары.Ссылка.Проведен"; 
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если ГТД по импорту нет (или еще нет, возможно, его еще не ввели), то определяем импорт по косвенным признакам:
	//  - заполнена табличная часть товары
	//  - контрагент иностранец
	//  - все товары в табличной части импортные
	//  - во всех строчках установлена ставка "Без НДС"
	
	Если ДанныеИБ.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтранаРоссия = Справочники.СтраныМира.Россия;
	
	СтранаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "СтранаРегистрации");
	Если СтранаКонтрагента = СтранаРоссия Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ДанныеИБ.Товары Цикл
		
		Если СтрокаТовары.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения)
			Или СтрокаТовары.СтранаПроисхождения = СтранаРоссия Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции
Функция ЯвляетсяДокументомУдостоверяющимЛичностьИзБазы(ФизическоеЛицо, ВидДокумента, Период)
	// Данные флага ЯвляетсяДокументомУдостоверяющимЛичность через универсальный обмен не передаются.
	// Поэтому сохраняем то вид документа, который указан в базе на период загрузки.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Период", КонецДня(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ВидДокумента = Выборка.ВидДокумента;
	Иначе
		Возврат ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	КонецЕсли;
КонецФункции

#КонецОбласти
#КонецОбласти
