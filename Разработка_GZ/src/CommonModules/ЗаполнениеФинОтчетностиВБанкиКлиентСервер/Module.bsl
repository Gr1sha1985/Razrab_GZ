
#Область СлужебныйПрограммныйИнтерфейс

#Область ВидыОтчетов

Функция ЭтоОтчетБРО(ВидОтчета) Экспорт

	Возврат ВидОтчета = "БухгалтерскаяОтчетность"
		ИЛИ ВидОтчета = "ДекларацияПрибыль"
		ИЛИ ВидОтчета = "ДекларацияНДС"
		ИЛИ ВидОтчета = "ДекларацияУСН"
		ИЛИ ВидОтчета = "ДекларацияЕНВД"
		ИЛИ ВидОтчета = "ДекларацияИмущество"
		ИЛИ ВидОтчета = "Декларация3НДФЛ"
		ИЛИ ВидОтчета = "ДекларацияЕСХН"
		ИЛИ ВидОтчета = "РасчетПоСтраховымВзносам";

КонецФункции

Функция ЭтоСтандартныйОтчет(ВидОтчета) Экспорт
	
	Возврат ВидОтчета = "КарточкаСчета"
		ИЛИ ВидОтчета = "АнализСчета"
		ИЛИ ВидОтчета = "ОборотноСальдоваяВедомость"
		ИЛИ ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ВидОтчета = "ОборотыСчета"
		ИЛИ ВидОтчета = "ВедомостьАмортизацииОС"
		ИЛИ ВидОтчета = "ВаловаяПрибыль"
		ИЛИ ВидОтчета = "ОстаткиТоваровПоСрокамХранения"
		ИЛИ ВидОтчета = "РасшифровкаЗадолженности"
		ИЛИ ВидОтчета = "КнигаУчетаДоходовИРасходов"
		ИЛИ ВидОтчета = "КнигаУчетаДоходовИРасходовПредпринимателя"
		ИЛИ ВидОтчета = "КнигаУчетаДоходовПатент"
		ИЛИ ВидОтчета = "КассоваяКнига";

КонецФункции

Функция ЭтоВнешнийФайл(ВидОтчета) Экспорт

	Возврат ВидОтчета = "СправкаБанка"
		ИЛИ ВидОтчета = "СправкаФНСОбИсполненииОбязанностейПоУплатеНалогов"
		ИЛИ ВидОтчета = "СправкаФНСОбОткрытыхРасчетныхСчетах"
		ИЛИ ВидОтчета = "БухгалтерскаяОтчетностьАудиторскоеЗаключение"
		ИЛИ ВидОтчета = "БухгалтерскаяОтчетностьПояснения"
		ИЛИ ВидОтчета = "Патент"
		ИЛИ ВидОтчета = "ПроизвольныйФайл";

КонецФункции

Функция ЭтоПроизвольныйФайл(ВидОтчета) Экспорт

	// Отчеты, вообще никак не стандартизированы и не имеют встроенного представления.
	Возврат ВидОтчета = "ПроизвольныйФайл";

КонецФункции

// Возвращает массив имен регламентированных отчетов, с помощью которых реализуется бухгалтерская отчетность.
//
// Возвращаемое значение:
//	Массив из Строка
//
Функция ИсточникиБухгалтерскойОтчетности() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("РегламентированныйОтчетБухОтчетность");
	Результат.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСДатами

// Возвращает строку с описание периода, который используется для отчетности в банки.
//
// Параметры:
//	НачалоПериода - Дата - Дата начала периода.
//	КонецПериода - Дата - Дата окончания периода.
//
// Возвращаемое значение:
//	Строка - представление периода.
//
Функция ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода, Периодичность = Неопределено) Экспорт

	Результат = "";

	// По умолчанию в качестве представления используем последний месяц отчета.
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		Если Периодичность = "Год" Тогда
			Результат = Формат(КонецПериода, "ДФ='гггг ""г.""'");
		ИначеЕсли Периодичность = "Квартал" Тогда
			Результат = ПредставлениеПериода(НачалоКвартала(КонецПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			Результат = Формат(КонецПериода, "ДФ='ММММ гггг ""г.""'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает дату начала периода отчета, исходя из описания периода. 
//
// Параметры:
//	КонецПериода - Дата - Дата окончания, от которой отсчитывается дата начала.
//	ПериодОтчета - Строка - Содержит одно из возможных значений:
//		* ПредыдущийГод - 1 января предыдущего года перед КонецПериода. Если сам КонецПериода = 31 декабря, то год КонецПериода.
//		* СНачалаТекущегоГода - 1 января года от КонецПериода.
//		* ПредыдущийКвартал - 1 января, 1 апреля, 1 июль или 1 октября в зависимости от квартала КонецПериода.
//		* ПредыдущийМесяц - 1 число месяца КонецПериода. 
//	КоличествоПериодов - Число - Количество периодов (лет, кварталов, месяцев), на которые надо отступить в прошлое.
//		Если передано значение 1, то будет возвращена дата начало периода, который заканчивается КонецПериода.
//		Величина периода (года, кварталы, месяцы) определяется на основании параметра ПериодОтчета.
//
// Возвращаемое значение:
//	Дата - Начало запрошенного периода.
// 
Функция НачалоПериодаОтчета(КонецПериода, ПериодОтчета, КоличествоПериодов = 1) Экспорт

	Результат = '0001-01-01';

	Если ПериодОтчета = "ПредыдущийГод" Тогда
		Результат = НачалоГода(КонецПериода);
		
	ИначеЕсли ПериодОтчета = "СНачалаТекущегоГода" Тогда
	    Результат = НачалоГода(КонецПериода);

	ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" Тогда
	    Результат = НачалоКвартала(КонецПериода);

	ИначеЕсли ПериодОтчета = "ПредыдущийМесяц" Тогда
		Результат = НачалоМесяца(КонецПериода);

	Иначе
		// По умолчанию возвращаем начало месяца.
		Результат = НачалоМесяца(КонецПериода);
	    
	КонецЕсли;

	Если ЗначениеЗаполнено(КоличествоПериодов) Тогда
		Результат = ДобавитьМесяц(Результат, - (КоличествоПериодов - 1) * КоличествоМесяцевВПериоде(ПериодОтчета));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает дату окончания периода отчета, исходя из описания периода. 
//
// Параметры:
//	КонецПериода - Дата - Дата окончания, от которой ведется расчет.
//	ПериодОтчета - Строка - Содержит одно из возможных значений:
//		* ПредыдущийГод - 31 декабря предыдущего года перед КонецПериода. Если сам КонецПериода = 31 декабря, то год КонецПериода.
//		* СНачалаТекущегоГода - 31 декабря года от КонецПериода.
//		* ПредыдущийКвартал - 31 марта, 30 июня, 30 сентября или 31 декабря в зависимости от квартала перед КонецПериода, 
//							  если КонецПериода отличается от одной из этих дат. Иначе - сама дата из КонецПериода.
//		* ПредыдущийМесяц - 1 число месяца КонецПериода. 
//	СмещениеКонцаПериода - Число - Количество периодов (лет, кварталов, месяцев), на которые надо сдвинуть КонецПериода в прошлое.
//		Значение 0 значит непосредственный период перед КонецПериода.
//		Величина периода (года, кварталы, месяцы) определяется на основании параметра ПериодОтчета.
//		Используется, когда банку требуется отчетность с формулировкой типа "за аналогичный период прошлого года".
//		Например, отчетная дата 31.08.2019 и требуется представить отчетность за 8 месяцев 2019 и 8 месяцев 2018.
//
// Возвращаемое значение:
//	Дата - Начало запрошенного периода.
// 
Функция КонецПериодаОтчета(Знач КонецПериода, ПериодОтчета, СмещениеКонцаПериода = 0) Экспорт

	КонецПериода = КонецМесяца(КонецПериода);
	Результат = '0001-01-01';

	Если ПериодОтчета = "ПредыдущийГод" Тогда
		Если КонецПериода = КонецГода(КонецПериода) Тогда
			Результат = КонецПериода;
	    Иначе
	    	Результат = НачалоГода(КонецПериода) - 1;
	    КонецЕсли;
		
	ИначеЕсли ПериодОтчета = "СНачалаТекущегоГода" Тогда
	    Результат = КонецПериода;

	ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" Тогда
		Если КонецПериода = КонецКвартала(КонецПериода) Тогда
			Результат = КонецПериода;
		Иначе
			Результат = НачалоКвартала(КонецПериода) - 1;
		КонецЕсли;

	ИначеЕсли ПериодОтчета = "ПредыдущийМесяц" Тогда
		Результат = КонецПериода;

	Иначе
		// По умолчанию возвращаем конец месяца.
		Результат = КонецПериода;

	КонецЕсли;

	Если ЗначениеЗаполнено(СмещениеКонцаПериода) Тогда
		Результат = КонецМесяца(ДобавитьМесяц(НачалоМесяца(Результат), - СмещениеКонцаПериода * КоличествоМесяцевВПериоде(ПериодОтчета)));
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция КоличествоМесяцевВПериоде(ПериодОтчета)

	Если ПериодОтчета = "ПредыдущийГод" Тогда
		Результат = 12;
		
	ИначеЕсли ПериодОтчета = "СНачалаТекущегоГода" Тогда
		Результат = 12;

	ИначеЕсли ПериодОтчета = "ПредыдущийКвартал" Тогда
		Результат = 3;

	ИначеЕсли ПериодОтчета = "ПредыдущийМесяц" Тогда
		Результат = 1;

	Иначе
		// По умолчанию возвращаем месяц.
		Результат = 1;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Форматы

// Преобразует расширение имени файла в тип файла табличного документа.
//
// Параметры:
//	ИмяФайла - Строка - Любая часть имени файла, содержащая расширение (достаточно только расширения).
//
// Возвращаемое значение:
//	ТипФайлаТабличногоДокумента
//
Функция ТипФайлаТабличногоДокументаПоРасширению(ИмяФайла) Экспорт
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	
	Если ПозицияТочки <> 0 Тогда
		РасширениеБезТочки = ВРег(Сред(ИмяФайла, ПозицияТочки + 1));
	Иначе
		РасширениеБезТочки = ВРег(ИмяФайла);
	КонецЕсли;
	
	Если РасширениеБезТочки = "TXT" Тогда
		Возврат ТипФайлаТабличногоДокумента.TXT;
		
	ИначеЕсли РасширениеБезТочки = "DOCX" Тогда
		Возврат ТипФайлаТабличногоДокумента.DOCX;
		
	ИначеЕсли РасширениеБезТочки = "HTM" ИЛИ РасширениеБезТочки = "HTML" Тогда
		Возврат ТипФайлаТабличногоДокумента.HTML;
		
	ИначеЕсли РасширениеБезТочки = "ODS" Тогда
		Возврат ТипФайлаТабличногоДокумента.ODS;
		
	ИначеЕсли РасширениеБезТочки = "PDF" Тогда
		Возврат ТипФайлаТабличногоДокумента.PDF;
		
	ИначеЕсли РасширениеБезТочки = "XLS" Тогда
		Возврат ТипФайлаТабличногоДокумента.XLS;
		
	ИначеЕсли РасширениеБезТочки = "XLSX" Тогда
		Возврат ТипФайлаТабличногоДокумента.XLSX;
		
	Иначе
		// Если никакого специального типа не определили, то сохраняем в формате Excel.
		Возврат РасширениеТабличногоДокумента(Тип("ТипФайлаТабличногоДокумента"));
		
	КонецЕсли;
	
КонецФункции

// Преобразует расширение имени файла в тип файла пакета отображаемых документов.
//
// Параметры:
//	ИмяФайла - Строка - Любая часть имени файла, содержащая расширение (достаточно только расширения).
//
// Возвращаемое значение:
//	ТипФайлаПакетаОтображаемыхДокументов
//
Функция ТипФайлаПакетаОтображаемыхДокументовПоРасширению(ИмяФайла) Экспорт
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	
	Если ПозицияТочки <> 0 Тогда
		РасширениеБезТочки = ВРег(Сред(ИмяФайла, ПозицияТочки + 1));
	Иначе
		РасширениеБезТочки = ВРег(ИмяФайла);
	КонецЕсли;
	
	Если РасширениеБезТочки = "TXT" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.TXT;
		
	ИначеЕсли РасширениеБезТочки = "DOCX" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.DOCX;
		
	ИначеЕсли РасширениеБезТочки = "HTM" ИЛИ РасширениеБезТочки = "HTML" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.HTML4;
		
	ИначеЕсли РасширениеБезТочки = "ODS" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.ODS;
		
	ИначеЕсли РасширениеБезТочки = "PDF" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.PDF;
		
	ИначеЕсли РасширениеБезТочки = "XLS" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.XLS;
		
	ИначеЕсли РасширениеБезТочки = "XLSX" Тогда
		Возврат ТипФайлаПакетаОтображаемыхДокументов.XLSX;
		
	Иначе
		// Если никакого специального типа не определили, то сохраняем в формате Excel.
		Возврат РасширениеТабличногоДокумента(Тип("ТипФайлаПакетаОтображаемыхДокументов"));
		
	КонецЕсли;
	
КонецФункции

Функция РасширениеТабличногоДокумента(Тип = Неопределено) Экспорт
	
	Если Тип = Тип("ТипФайлаТабличногоДокумента") Тогда
		ЗначениеПоУмолчанию = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли Тип = Тип("ТипФайлаПакетаОтображаемыхДокументов") Тогда
		ЗначениеПоУмолчанию = ТипФайлаПакетаОтображаемыхДокументов.XLS;
	Иначе
		ЗначениеПоУмолчанию = "xls";
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Область РегламентированнаяОтчетность

// Возвращает структуру параметров для открытия формы выбора регламентированных отчетов.
//
// Возвращаемое значение:
//	Структура
//
Функция ПараметрыФормыВыбораРегламентированногоОтчета() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация",     ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("ИсточникОтчета",  "");
	Результат.Вставить("ДатаНачала",      '0001-01-01');
	Результат.Вставить("ДатаОкончания",   '0001-01-01');
	Результат.Вставить("РегистрацияВНалоговомОргане", ПредопределенноеЗначение("Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка"));
	Результат.Вставить("Заголовок",       "");
	Результат.Вставить("ТребуетсяОтметкаОПриемеОтчетности", Ложь); // Используется для годовой бухгалтерской отчетности и налоговых деклараций.
	Результат.Вставить("ВыделенныйОтчет");

	Возврат Результат;

КонецФункции

#КонецОбласти

Функция СформироватьНаименованиеСубъекта(Субъект, ВключатьОбособленныеПодразделения) Экспорт

	Если ЗначениеЗаполнено(Субъект) Тогда
		Если ВключатьОбособленныеПодразделения Тогда
			Возврат СтрШаблон(НСтр("ru = '%1 с обособленными подразделениями'"), Субъект);
		Иначе
			Возврат Субъект;
		КонецЕсли;
	КонецЕсли;

	Возврат "";

КонецФункции

#КонецОбласти
