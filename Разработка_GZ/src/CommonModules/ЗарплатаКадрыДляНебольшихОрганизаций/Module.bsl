#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d9f73282-98d4-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьНаВыплатуЗарплаты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf68-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.КадровыйПеревод);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПриемНаРаботу);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfba-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Увольнение);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfbb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтражениеЗарплатыВБухучете);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf58-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.БольничныйЛист);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИсполнительныйЛист);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачислениеЗарплаты);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf4c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Отпуск);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтпускБезСохраненияОплаты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "7a894f3c-43eb-41fa-b9b6-6023eab30483", Метаданные.Документы.ДоговорРаботыУслуги);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.Выплаты") Тогда
		МодульВыплатаЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ВыплатаЗарплатыДляНебольшихОрганизаций");
		МодульВыплатаЗарплатыДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.КадровыйУчет") Тогда
		МодульКадровыйУчетДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетДляНебольшихОрганизаций");
		МодульКадровыйУчетДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		МодульОтражениеЗарплатыВБухучетеДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеДляНебольшихОрганизаций");
		МодульОтражениеЗарплатыВБухучетеДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ДоговорыГПХ") Тогда
		МодульДоговорыГПХДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("ДоговорыГПХДляНебольшихОрганизаций");
		МодульДоговорыГПХДляНебольшихОрганизаций.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// См. ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт

	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.10.26",
		"Подсистема.ЗарплатаКадрыПодсистемы.Подсистема.ОбъектыБазовойРеализации",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.ЗарплатаКадрыДляНебольшихОрганизаций.Подсистема.Выплаты",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.10.26",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.КадровыйУчетБазовый",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.ЗарплатаКадрыДляНебольшихОрганизаций.Подсистема.КадровыйУчет",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.10.26",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.БухгалтерскийУчетБазовый",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.ЗарплатаКадрыДляНебольшихОрганизаций.Подсистема.ОтражениеЗарплатыВБухгалтерскомУчете",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.10.26",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.РасчетЗарплатыДляНебольшихОрганизаций",
		"Подсистема.ЗарплатаКадрыПриложения.Подсистема.ЗарплатаКадрыДляНебольшихОрганизаций.Подсистема.РасчетЗарплаты",
		"ЗарплатаКадрыБазовая");
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ВыплатаЗарплатыДляНебольшихОрганизаций.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	
КонецПроцедуры


#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПриДобавленииОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("abfdfad1-d4b3-47d3-9e0a-ba89fc6e8201");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Начисления удержания по сотрудникам.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВВзаиморасчетыССотрудниками";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9c727b7e-32cb-4527-9322-e418954ff694");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Взаиморасчеты с сотрудниками.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВЗарплатаКВыплате";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e2daea5-3539-469e-a88f-bb0fc1fc33d6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Зарплата к выплате.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВЗарплатаКВыплатеАвансом";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8633d886-c7c9-4dd5-be58-2d52f6b5f8b3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Зарплата к выплате авансом.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВБухгалтерскиеВзаиморасчетыССотрудниками";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f234f02e-9c8c-44cf-b896-f36a958d75d0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Бухгалтерские взаиморасчеты с сотрудниками.""'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВСведенияОДоходахНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b609b39f-1463-42aa-a702-9b04584853ba");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Учет доходов для исчисления НДФЛ.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВБанк";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4a931603-033d-467f-a9c9-b67863f58375");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости в банк.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВКассу";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("758c6197-d769-4c41-b8fa-137273243e11");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости в кассу.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.119";
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьСтатьюРасходовВНДФЛКПеречислению";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("025f6cf6-a1c8-4682-bc50-8c6fc7be72ec");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""НДФЛ к перечислению.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.20";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВидДоходаИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вида дохода исполнительного производства в начислениях'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.417";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("48687e2b-ff10-4c9e-bf2b-fd76d5bdf827");
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьКоличествоСтавокВКадровомУчете";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет количество занимаемых ставок сотрудника.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.417";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "ЗарплатаКадрыДляНебольшихОрганизаций.ЗаполнитьКоличествоСтавокВУчетеСтажаПФР";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3ba60fd7-6643-492e-9758-a921b544507a");
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникам(ПараметрыОбновления = Неопределено) Экспорт

	ГруппыОпераций = Новый Массив();
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыОпераций", ГруппыОпераций);
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В(&ГруппыОпераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В (&ГруппыОпераций)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций)
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.КатегорияДохода
	|	КОНЕЦ КАК КатегорияДохода,
	|	НачисленияУдержанияПоСотрудникам.*
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.НачисленияУдержанияПоСотрудникам.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.НачисленияУдержанияПоСотрудникам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	РегистрыНакопления.НачисленияУдержанияПоСотрудникам.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВВзаиморасчетыССотрудниками(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Регистратор,
	|	Взаиморасчеты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ Взаиморасчеты.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Взаиморасчеты.*
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО Взаиморасчеты.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ВзаиморасчетыССотрудниками.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВЗарплатаКВыплате(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор,
	|	ЗарплатаКВыплате.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ ЗарплатаКВыплате.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.*
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ЗарплатаКВыплате.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ЗарплатаКВыплате.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплате.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ЗарплатаКВыплате.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВЗарплатаКВыплатеАвансом(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор,
	|	ЗарплатаКВыплате.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ ЗарплатаКВыплате.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.*
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ЗарплатаКВыплате.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ЗарплатаКВыплатеАвансом.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплатеАвансом.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплатеАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ЗарплатаКВыплатеАвансом.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВБухгалтерскиеВзаиморасчетыССотрудниками(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Регистратор,
	|	Взаиморасчеты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ Взаиморасчеты.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Взаиморасчеты.*
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО Взаиморасчеты.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВСведенияОДоходахНДФЛ(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	Начисления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику);
	
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И СведенияОДоходахНДФЛ.Начисление В(&Начисления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И СведенияОДоходахНДФЛ.Начисление В (&Начисления)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ СведенияОДоходахНДФЛ.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.СведенияОДоходахНДФЛ.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.СведенияОДоходахНДФЛ.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	РегистрыНакопления.СведенияОДоходахНДФЛ.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВБанк(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк, ПараметрыОбновления)
КонецПроцедуры	

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВКассу(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу, ПараметрыОбновления)
КонецПроцедуры	

Процедура ЗаполнитьСтатьюРасходовВНДФЛКПеречислению(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛКПеречислению.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|ГДЕ
	|	НДФЛКПеречислению.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛКПеречислению.Регистратор КАК Регистратор,
	|	НДФЛКПеречислению.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НДФЛКПеречислению.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ НДФЛКПеречислению.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НДФЛКПеречислению.*
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НДФЛКПеречислению.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.НДФЛКПеречислению.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.НДФЛКПеречислению.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКоличествоСтавокВУчетеСтажаПФР(ПараметрыОбновления = Неопределено) Экспорт 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыПериодовСтажаПФР.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ПараметрыПериодовСтажаПФР КАК ПараметрыПериодовСтажаПФР
		|ГДЕ
		|	ПараметрыПериодовСтажаПФР.КоличествоСтавок = 0
		|	И ПараметрыПериодовСтажаПФР.Приоритет = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)";
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если НЕ ОбновляемыеДанные.Пустой() Тогда
		
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
		
		ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
		
		Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
			
			ОписаниеБлокировки.ПоляБлокировки.Регистратор = ВыборкаОбновляемыхДанных.Регистратор;
			Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
				Возврат
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПараметрыПериодовСтажаПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаОбновляемыхДанных.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.КоличествоСтавок) Тогда
					Запись.КоличествоСтавок = 1;
					Запись.ИспользованиеРесурсаКоличествоСтавок = Истина;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;

	// Обновление непериодического регистра
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыСтажаПФР.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыСтажаПФР.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыСтажаПФР.ТипДоговора КАК ТипДоговора,
		|	ПериодыСтажаПФР.Начало КАК Начало,
		|	ПериодыСтажаПФР.Окончание КАК Окончание,
		|	ПериодыСтажаПФР.Год КАК Год,
		|	ПериодыСтажаПФР.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	РегистрСведений.ПериодыСтажаПФР КАК ПериодыСтажаПФР
		|ГДЕ
		|	ПериодыСтажаПФР.КоличествоСтавок = 0
		|	И ПериодыСтажаПФР.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)";
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ПериодыСтажаПФР, "ФизическоеЛицо");
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если НЕ ОбновляемыеДанные.Пустой() Тогда
		
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
		
		ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
		
		Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
			
			ОписаниеБлокировки.ПоляБлокировки.ФизическоеЛицо = ВыборкаОбновляемыхДанных.ФизическоеЛицо;
			Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
				Возврат
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПериодыСтажаПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ВыборкаОбновляемыхДанных.ГоловнаяОрганизация);
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВыборкаОбновляемыхДанных.ФизическоеЛицо);
			НаборЗаписей.Отбор.ТипДоговора.Установить(ВыборкаОбновляемыхДанных.ТипДоговора);
			НаборЗаписей.Отбор.Начало.Установить(ВыборкаОбновляемыхДанных.Начало);
			НаборЗаписей.Отбор.Окончание.Установить(ВыборкаОбновляемыхДанных.Окончание);
			НаборЗаписей.Отбор.Год.Установить(ВыборкаОбновляемыхДанных.Год);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.КоличествоСтавок) Тогда
					Запись.КоличествоСтавок = 1;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоСтавокВКадровомУчете(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок = 0";
		
		ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников, "Сотрудник");
		
		ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
		
		Если НЕ ОбновляемыеДанные.Пустой() Тогда
			
			ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
			
			ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
			
			Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
				
				ОписаниеБлокировки.ПоляБлокировки.Сотрудник = ВыборкаОбновляемыхДанных.Сотрудник;
				Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
					Возврат
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(ВыборкаОбновляемыхДанных.Сотрудник, Истина);
				НаборЗаписей.Прочитать();
				НаборЗаписей[0].КоличествоСтавок = 1;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.КоличествоСтавок = 0
			|	И НЕ КадроваяИсторияСотрудников.Регистратор.Дата ЕСТЬ NULL";
		
		ОписаниеБлокировкиРегистра                 = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников);
		ОписаниеБлокировкиДокументаПриемНаРаботу   = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Документы.ПриемНаРаботу);
		ОписаниеБлокировкиДокументаКадровыйПеревод = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Документы.КадровыйПеревод);
		ОписаниеБлокировкиДокументаУвольнение      = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Документы.Увольнение);
		
		ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
		
		Если НЕ ОбновляемыеДанные.Пустой() Тогда
			
			ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
			
			ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
			
			Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
				
				ОписаниеБлокировкиРегистра.ПоляБлокировки.Регистратор = ВыборкаОбновляемыхДанных.Регистратор;
				Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировкиРегистра, ПараметрыОбновления) Тогда
					Возврат
				КонецЕсли;
				
				Если ТипЗнч(ВыборкаОбновляемыхДанных.Регистратор) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
					ОписаниеБлокировкиДокумента = ОписаниеБлокировкиДокументаПриемНаРаботу;
				ИначеЕсли ТипЗнч(ВыборкаОбновляемыхДанных.Регистратор) = Тип("ДокументСсылка.КадровыйПеревод") Тогда
					ОписаниеБлокировкиДокумента = ОписаниеБлокировкиДокументаКадровыйПеревод;
				ИначеЕсли ТипЗнч(ВыборкаОбновляемыхДанных.Регистратор) = Тип("ДокументСсылка.Увольнение") Тогда
					ОписаниеБлокировкиДокумента = ОписаниеБлокировкиДокументаУвольнение;
				Иначе
					Возврат
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаОбновляемыхДанных.Регистратор);
				НаборЗаписей.Прочитать();
				
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.КоличествоСтавок) Тогда
						Запись.КоличествоСтавок = 1;
					КонецЕсли;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
				ОписаниеБлокировкиДокумента.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Регистратор;
				Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировкиДокумента, ПараметрыОбновления) Тогда
					Возврат
				КонецЕсли;
				Если ТипЗнч(ВыборкаОбновляемыхДанных.Регистратор) <> Тип("ДокументСсылка.Увольнение") Тогда
					ОбъектДокумента = ВыборкаОбновляемыхДанных.Регистратор.ПолучитьОбъект();
					ОбъектДокумента.КоличествоСтавок = 1;
					ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
				КонецЕсли;
				
				ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Обновление интервального регистра
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания КАК ДатаОкончания,
			|	КадроваяИсторияСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
			|	КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудниковИнтервальный.ПериодЗаписи КАК ПериодЗаписи,
			|	КадроваяИсторияСотрудниковИнтервальный.Год КАК Год
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
			|ГДЕ
			|	КадроваяИсторияСотрудниковИнтервальный.КоличествоСтавок = 0";
		
		ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.КадроваяИсторияСотрудниковИнтервальный, "Сотрудник");
	
		ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
		Если НЕ ОбновляемыеДанные.Пустой() Тогда
			
			ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
			
			ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
			
			Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
				
				ОписаниеБлокировки.ПоляБлокировки.Сотрудник = ВыборкаОбновляемыхДанных.Сотрудник;
				Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
					Возврат
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудниковИнтервальный.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ВыборкаОбновляемыхДанных.ГоловнаяОрганизация);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВыборкаОбновляемыхДанных.ФизическоеЛицо);
				НаборЗаписей.Отбор.Сотрудник.Установить(ВыборкаОбновляемыхДанных.Сотрудник);
				НаборЗаписей.Отбор.ДатаНачала.Установить(ВыборкаОбновляемыхДанных.ДатаНачала);
				НаборЗаписей.Отбор.ДатаОкончания.Установить(ВыборкаОбновляемыхДанных.ДатаОкончания);
				НаборЗаписей.Отбор.ПериодЗаписи.Установить(ВыборкаОбновляемыхДанных.ПериодЗаписи);
				НаборЗаписей.Отбор.Год.Установить(ВыборкаОбновляемыхДанных.Год);
				НаборЗаписей.Прочитать();
				
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.КоличествоСтавок) Тогда
						Запись.КоличествоСтавок = 1;
					КонецЕсли;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
				ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Обновление непроведенных документов
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПриемНаРаботу.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
			|ГДЕ
			|	НЕ ПриемНаРаботу.Проведен
			|	И ПриемНаРаботу.КоличествоСтавок = 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровыйПеревод.Ссылка
			|ИЗ
			|	Документ.КадровыйПеревод КАК КадровыйПеревод
			|ГДЕ
			|	НЕ КадровыйПеревод.Проведен
			|	И КадровыйПеревод.КоличествоСтавок = 0";
		
		ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
		
		Если НЕ ОбновляемыеДанные.Пустой() Тогда
			
			ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
			
			ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
			
			Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаОбновляемыхДанных.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
					ОписаниеБлокировкиДокумента = ОписаниеБлокировкиДокументаПриемНаРаботу;
				ИначеЕсли ТипЗнч(ВыборкаОбновляемыхДанных.Ссылка) = Тип("ДокументСсылка.КадровыйПеревод") Тогда
					ОписаниеБлокировкиДокумента = ОписаниеБлокировкиДокументаКадровыйПеревод;
				Иначе
					Возврат
				КонецЕсли;
				
				ОписаниеБлокировкиДокумента.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
				Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировкиДокумента, ПараметрыОбновления) Тогда
					Возврат
				КонецЕсли;
				ОбъектДокумента = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
				ОбъектДокумента.КоличествоСтавок = 1;
				ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
				
				ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(МетаданныеВедомости, ПараметрыОбновления) 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ведомости.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВедомостьЗарплата.Ссылка КАК Ссылка
	|	ИЗ
	|		#ВедомостьЗарплата КАК ВедомостьЗарплата
	|	ГДЕ
	|		ВедомостьЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВедомостьНДФЛ.Ссылка
	|	ИЗ
	|		#ВедомостьНДФЛ КАК ВедомостьНДФЛ
	|	ГДЕ
	|		ВедомостьНДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК Ведомости";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	МетаданныеВедомости.ПолноеИмя() + ".Зарплата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьНДФЛ",	МетаданныеВедомости.ПолноеИмя() + ".НДФЛ");
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(МетаданныеВедомости);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	

	СтатьиРасходовПоСпособамРасчетов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда       = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Продолжить	
		КонецЕсли;
		
		Ведомость = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТЧ Из Ведомость.Зарплата Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				СтрокаТЧ.СтатьяРасходов = СтатьяРасчетыПоОплатеТруда;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Ведомость.НДФЛ Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				СтрокаТЧ.СтатьяРасходов = СтатьяРасчетыПоОплатеТруда;
			КонецЕсли;	
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Ведомость,,, РежимЗаписиДокумента.Запись);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);			
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти