#Область ПрограммныйИнтерфейс

Функция ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода) Экспорт
	
	Возврат НРег(ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина"));
	
КонецФункции

// Возвращает массив периодов в интервале. 
// Возвращаются все периоды, пересекающиеся с интервалом.
// Возвращаются даты начала периода.
Функция Периоды(НачалоИнтервала, КонецИнтервала, Период) Экспорт
	
	Периоды = Новый Массив;
	
	ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Период, КонецИнтервала);
	Периоды.Добавить(ТекущийПериод);
	
	Пока ТекущийПериод > НачалоИнтервала Цикл
	
		ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Период, -1);
		Периоды.Вставить(0, ТекущийПериод); // Пятимся назад, а значения в массиве хотим по возрастанию.
	
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

Функция ДатаНачалаДеятельности(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ДатаРегистрации КАК Дата
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	НачалоИнтервала = '0001-01-01';
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачалоИнтервала = Макс(НачалоИнтервала, Выборка.Дата);
	КонецЦикла;
	
	Возврат НачалоИнтервала;
	
КонецФункции

Функция НачалоАктуальногоПериода(Правило, ТекущаяДата, ДатаНачалаДеятельности = '0001-01-01') Экспорт
	
	// В качестве параметра Правило можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// Периодичность, СрокМесяцев, СрокДней, Действие, БазовыйПериод, ОтставаниеБазовогоПериода
	
	День = 24 * 60 * 60;
	
	СобытиеПозжеРелевантногоПериода = СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	
	// Запас позволяет игнорировать правила переноса дат на выходные
	АктуальныйПериод = ТекущаяДата - 15 * День;
	Если СобытиеПозжеРелевантногоПериода Тогда
		
		// В 2020 году сроки по некоторым отчетам/налогам перенесены произвольным образом,
		// не совпадающим со сроками в правилах, поэтому анализируем задачи с начала года.
		Если НачалоГода(ТекущаяДата) = НачалоГода(Дата(2020, 1, 1)) Тогда
			АктуальныйПериод = НачалоГода(ТекущаяДата);
		КонецЕсли;
		
		// ограничимся периодом, по которому заведомо успеваем
		АктуальныйПериод = ДобавитьМесяц(АктуальныйПериод - Правило.СрокДней * День, - Правило.СрокМесяцев);
		
		АктуальныйПериод = Макс(АктуальныйПериод, ДатаНачалаДеятельности);
		
	Иначе
		
		// Базовый период предшествует релевантному и может быть другой длительности.
		ПростойБазовыйПериод = БазовыйПериодОпределяетсяПросто(Правило);
		ДлительностьБазовогоПериода = Правило.Периодичность;
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода, 
			ДлительностьБазовогоПериода, 
			Правило.СрокМесяцев);
		
		ОпережениеБазовогоПериода = 1 + ОтставаниеБазовогоПериода;
		
		АктуальныйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			АктуальныйПериод,
			Правило.БазовыйПериод,
			- ОпережениеБазовогоПериода);
		
	КонецЕсли;
	
	
	Возврат АктуальныйПериод;
	
КонецФункции

Функция СрокИстекаетПослеОкончанияРелевантногоПериода(Правило) Экспорт
	
	// В качестве параметра можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// СрокМесяцев, СрокДней
	Возврат Не (Правило.СрокМесяцев < 0 Или Правило.СрокМесяцев = 0 И Правило.СрокДней <= 0);
	
КонецФункции

Функция БазовыйПериодОпределяетсяПросто(Правило) Экспорт
	
	// В качестве параметра можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// Действие, БазовыйПериод, Периодичность, ОтставаниеБазовогоПериода
	
	Возврат Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		Или Не ЗначениеЗаполнено(Правило.БазовыйПериод)
		Или (Правило.БазовыйПериод = Правило.Периодичность И Правило.ОтставаниеБазовогоПериода = 0);
		
КонецФункции 

Функция ЗапуститьЗаполнениеВФоне(УникальныйИдентификаторФормы, Организация, СозданаНоваяОрганизация = Ложь, ОбновитьИЗаполнитьЗадачиНачалаРаботы = Истина, ОбновитьИЗаполнитьРегулярныеЗадачи = Истина) Экспорт
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	ПараметрыПроцедуры.Вставить("Упреждение", УпреждениеЗаполненияСписка());
	ПараметрыПроцедуры.Вставить("СозданаНоваяОрганизация", СозданаНоваяОрганизация);
	ПараметрыПроцедуры.Вставить("ОбновитьИЗаполнитьЗадачиНачалаРаботы", ОбновитьИЗаполнитьЗадачиНачалаРаботы);
	ПараметрыПроцедуры.Вставить("ОбновитьИЗаполнитьРегулярныеЗадачи",   ОбновитьИЗаполнитьРегулярныеЗадачи);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполненияВФоне.Вставить("ОжидатьЗавершение", 0); // Возвращать управление сразу
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		НСтр("ru = 'Обновление списка задач бухгалтера'"));
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"КалендарьБухгалтера.ЗаполнитьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем Организация, Упреждение, СозданаНоваяОрганизация;
	Перем ОбновитьИЗаполнитьЗадачиНачалаРаботы, ОбновитьИЗаполнитьРегулярныеЗадачи;
	
	Если Параметры <> Неопределено Тогда
		
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Упреждение", Упреждение);
		Параметры.Свойство("СозданаНоваяОрганизация", СозданаНоваяОрганизация);
		
		Параметры.Свойство("ОбновитьИЗаполнитьЗадачиНачалаРаботы", ОбновитьИЗаполнитьЗадачиНачалаРаботы);
		Параметры.Свойство("ОбновитьИЗаполнитьРегулярныеЗадачи",   ОбновитьИЗаполнитьРегулярныеЗадачи);
		
	КонецЕсли;
	
	Если Упреждение = Неопределено Тогда
		Упреждение = УпреждениеЗаполненияСписка();
	КонецЕсли;
	
	Если СозданаНоваяОрганизация = Неопределено Тогда
		СозданаНоваяОрганизация = Ложь;
	КонецЕсли;
	
	Если ОбновитьИЗаполнитьЗадачиНачалаРаботы = Неопределено Или ОбновитьИЗаполнитьЗадачиНачалаРаботы Тогда
		ИзмененыЗадачиНачалаРаботы = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьЗадачиНачалаРаботы(Организация, СозданаНоваяОрганизация);
	Иначе
		ИзмененыЗадачиНачалаРаботы = Ложь;
	КонецЕсли;
	
	Если ОбновитьИЗаполнитьРегулярныеЗадачи = Неопределено Или ОбновитьИЗаполнитьРегулярныеЗадачи Тогда
		ИзмененыРегулярныеЗадачи = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(Организация, Упреждение);
		МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
		Если ИзмененыРегулярныеЗадачи Тогда
			СинхронизацияСКалендаремGoogle.СинхронизироватьЗадачи(Организация);
		КонецЕсли;
	Иначе
		ИзмененыРегулярныеЗадачи = Ложь;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ИзмененыЗадачиНачалаРаботы Или ИзмененыРегулярныеЗадачи, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентнымЗаданием() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьЗадачиНачалаРаботы();
	
	ИзмененыРегулярныеЗадачи = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(
		, УпреждениеЗаполненияСписка());
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Справочники.ПроверкиКонтролирующимиОрганами.СоздатьЗадачиБухгалтераПоНовымПроверкам();
	КонецЕсли;
	
	МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
	
	СинхронизацияСКалендаремGoogle.СинхронизироватьЗадачи();
	
КонецПроцедуры

Функция НовоеРасписаниеРегламентногоЗадания()
	
	ЭталонноеРасписание = Новый РасписаниеРегламентногоЗадания;
	
	// стандартный вариант заполнения
	ЭталонноеРасписание.ПериодНедель = 1;
	ЭталонноеРасписание.ПериодПовтораДней = 1;
	
	НаборПериодов = Новый Массив;
	Для Инд = 1 По 7 Цикл
		НаборПериодов.Добавить(Инд);
	КонецЦикла;
	ЭталонноеРасписание.ДниНедели = НаборПериодов;
	
	НаборПериодов = Новый Массив;
	Для Инд = 1 По 12 Цикл
		НаборПериодов.Добавить(Инд);
	КонецЦикла;
	ЭталонноеРасписание.Месяцы = НаборПериодов;
	
	Возврат ЭталонноеРасписание;
	
КонецФункции

// Для регламентного задания ОбновлениеЗадачБухгалтера устанавливает расписание в зависимости от типа СУБД (файловая/серверная).
//
Процедура ИзменитьРасписаниеСогласноРежимуРаботы() Экспорт
	
	ЭталонноеРасписаниеЗадания = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(НовоеРасписаниеРегламентногоЗадания());
	ЭталонноеРасписаниеЗадания.ВремяНачала = ВремяНачалаОбновленияЗадачБухгалтера();
	
	РегламентныеЗаданияЗадачБухгалтера = РегламентныеЗаданияСервер.НайтиЗадания(
		Новый Структура("Метаданные", "ОбновлениеЗадачБухгалтера"));
	Для каждого РегламентноеЗадание Из РегламентныеЗаданияЗадачБухгалтера Цикл
		
		СуществующееРасписание = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(РегламентноеЗадание.Расписание);
		Если ОбщегоНазначения.ДанныеСовпадают(СуществующееРасписание, ЭталонноеРасписаниеЗадания) Тогда
			Продолжить;
		КонецЕсли;
		
		РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(РегламентноеЗадание, ЭталонноеРасписаниеЗадания);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УпреждениеЗаполненияСписка() Экспорт
	
	Возврат 14;
	
КонецФункции

Функция ВремяНачалаОбновленияЗадачБухгалтера()
	
	// Предполагается три варианта расписания выполнения регламентного задания ОбновлениеЗадачБухгалтера в зависимости от СУБД:
	// 1) Файловая база. Задание запускается в период предполагаемой низкой активности пользователя - после обеда.
	// 2) Серверная база. Задание запускается ночью после технологических заданий СУБД и ИБ (индексы, агрегаты, поиск).
	// 3) Сервис. Планирование задания выполняется на ближайшую ночь в момент использования функциональности.
	//    Алгоритм планирования - см. КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера()
	
	Возврат ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), Дата(1, 1, 1, 14, 22, 0), Дата(1, 1, 1, 2, 22, 0));
	
КонецФункции

Процедура УточнитьОтставаниеБазовогоПериода(ОтставаниеБазовогоПериода, ДлительностьБазовогоПериода, СрокМесяцев) Экспорт
	Если СрокМесяцев < -1 И ДлительностьБазовогоПериода = Перечисления.Периодичность.Месяц Тогда
		ОтставаниеБазовогоПериода = Макс(ОтставаниеБазовогоПериода, - 1 - СрокМесяцев);
	КонецЕсли;
КонецПроцедуры

// Возвращает возможность выполнения задачи текущим пользователем
//
Функция ПравоВыполненияЗадачи(Задача) Экспорт
	
	ЕстьПраво = Ложь;
	
	Если ТипЗнч(Задача) = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы") Тогда
		
		Если Задача = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.НастройкаЗаполненияФормСтатистики Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаЗаполненияФормСтатистики);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности Тогда
			
			ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.ОбщиеОбъектыРеглОтчетности);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.Подключение1СЭДО Тогда
			
			ЕстьПраво = ЭлектронноеВзаимодействиеБПВызовСервера.ЕстьПравоНастройкиЭДО();
			Если Не ЕстьПраво Тогда
				
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для настройки обмена электронными документами. Обратитесь к администратору.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.ОплатитьЗадолженностьПоНалогамВзносам Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Документы.ВводНачальныхОстатков);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Задача) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение);
		
	ИначеЕсли ТипЗнч(Задача) = Тип("СправочникСсылка.ПравилаФинОтчетности") Тогда
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Документы.ФинОтчетВБанк);
		
	Иначе
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЗадачиБухгалтера);
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

Процедура ОбновитьПроверкиКонтролирующимиОрганами() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Справочники.ПроверкиКонтролирующимиОрганами.ОбновитьПроверки();

КонецПроцедуры

Процедура ОбновитьПроверкиКонтролирующимиОрганамиПоТаблицеОрганизаций(ТаблицаОрганизаций) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Справочники.ПроверкиКонтролирующимиОрганами.ОбновитьПроверкиПоТаблицеОрганизаций(ТаблицаОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	ОтборЗаданий = Новый Структура("Метаданные", 
		Метаданные.РегламентныеЗадания.ОбновлениеПроверокКонтролирующимиОрганамиПоТаблицеОрганизаций);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборЗаданий);
	Для каждого Задание Из Задания Цикл
		Задание.Удалить();
	КонецЦикла;

КонецПроцедуры

// Выполняет обновление задач по указанной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой проверяется актуальность задач.
//	БыстроеОбновление - Булево - Признак необходимости проверки актуальности задач перед обновлением.
//		Если Истина, то в случае, когда задачи актуальны, обновление не запускается.
//
Процедура ОбновитьЗадачи(Организация, БыстроеОбновление = Истина) Экспорт
	
	ЗапланироватьОбновлениеЗадачБухгалтера();
	
	УпреждениеЗаполнения = КалендарьБухгалтера.УпреждениеЗаполненияСписка();
	
	Если БыстроеОбновление Тогда
		
		// Обеспечим, с одной стороны, наличие задач на несколько дней вперед, с другой стороны, отсутствие лишних
		// срабатываний для пользователя, хотя бы раз в неделю заходящего в базу.
		МинимальныйГоризонтАктуальностиЗадач = ТекущаяДатаСеанса() + УпреждениеЗаполнения / 2 * 86400;
		
		ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
		Если МинимальныйГоризонтАктуальностиЗадач <= КонецМесяца(ДатаАктуальности) Тогда
			// Перезаполнение списка задач не требуется
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Упреждение",  УпреждениеЗаполнения);
	ПараметрыЗаполнения.Вставить("ОбновитьИЗаполнитьЗадачиНачалаРаботы", Ложь);
	ПараметрыЗаполнения.Вставить("ОбновитьИЗаполнитьРегулярныеЗадачи",   Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ЗаполнитьВФоне(ПараметрыЗаполнения, АдресХранилища);
	
КонецПроцедуры

// При работе в режиме сервиса добавляем в очередь выполнение регламентного задания ОбновлениеЗадачБухгалтера.
// Вызов данной процедуры выполняется из мест, непосредственно использующих функциональность списка задач бухгалтера.
// Таким образом периодическое выполнение обновлений списка задач происходит только для активных областей.
//
Процедура ЗапланироватьОбновлениеЗадачБухгалтера() Экспорт

	Если Не ОбщегоНазначения.РазделениеВключено()
	 Или Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеРегламентногоЗадания = Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера;
	ПланируемыйМоментЗапуска = (КонецДня(ТекущаяДатаСеанса()) + 1) + (ВремяНачалаОбновленияЗадачБухгалтера() - '00010101');

	ПараметрыПоискаЗадания = Новый Структура;
	ПараметрыПоискаЗадания.Вставить("ИмяМетода", 	 МетаданныеРегламентногоЗадания.ИмяМетода);
	ПараметрыПоискаЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ПараметрыПоискаЗадания.Вставить("Использование", Истина);
	
	// Получаем ранее запланированные выполнения задания.
	ЗапланированныеВыполнения = ОчередьЗаданий.ПолучитьЗадания(ПараметрыПоискаЗадания);
	
	// Проверяем, есть ли запланированные на требуемую ночь (или ранее).
	УжеЗапланированоВыполнение = Ложь;
	Для каждого ЗапланированноеВыполнение Из ЗапланированныеВыполнения Цикл
	
		ОтклонениеОтПлана = ЗапланированноеВыполнение.ЗапланированныйМоментЗапуска - ПланируемыйМоментЗапуска;
		Если ОтклонениеОтПлана < 8 * 60 * 60 Тогда
			УжеЗапланированоВыполнение = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	// Создаём новый момент запуска.
	Если Не УжеЗапланированоВыполнение Тогда
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяМетода", 	                              ПараметрыПоискаЗадания.ИмяМетода);
		ПараметрыЗадания.Вставить("ОбластьДанных",                            ПараметрыПоискаЗадания.ОбластьДанных);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", 	          ПланируемыйМоментЗапуска);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 	  МетаданныеРегламентногоЗадания.ИнтервалПовтораПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", МетаданныеРегламентногоЗадания.КоличествоПовторовПриАварийномЗавершении);
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);

	КонецЕсли;
		
КонецПроцедуры

// При работе в режиме сервиса отключает предопределенное регламентное задание ОбновлениеЗадачБухгалтера.
//
Процедура ОтключитьОбновлениеЗадачБухгалтераВСервисе() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено()
	 Или Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеЗадач = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера);
	Если ОбновлениеЗадач = Неопределено Или Не ОбновлениеЗадач.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеЗадач.Использование = Ложь;
	Попытка
		ОбновлениеЗадач.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации("ПриВключенииРазделенияПоОбластямДанных",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера,
			ОбновлениеЗадач.УникальныйИдентификатор,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Функция СписокЗадачАктуален(ДатаАктуальности) Экспорт
	
	Возврат НачалоДня(ТекущаяДатаСеанса()) < ДатаАктуальности;
	
КонецФункции

Функция СобытияКалендаряБухгалтера(Организации, ОтборЗадач) Экспорт
	
	НаименованиеЗадачиУплатаПатента = НСтр("ru = 'уплата патента'");
	
	ТаблицаСтатусовВыполненныхЗадач = Новый ТаблицаЗначений();
	ТаблицаСтатусовВыполненныхЗадач.Колонки.Добавить("Статус", Метаданные.РегистрыСведений.ЗадачиБухгалтера.Ресурсы.Статус.Тип);
	Для Каждого Статус ИЗ ВыполнениеЗадачБухгалтера.СтатусыВыполненныхЗадач() Цикл
		ТаблицаСтатусовВыполненныхЗадач.Добавить().Статус = Статус;
	КонецЦикла;
	
	ДатаНачалаСобытий = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСобытий", ДатаНачалаСобытий);
	Запрос.УстановитьПараметр("СписокОрганизаций", Организации);
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач", ТаблицаСтатусовВыполненныхЗадач);
	Запрос.УстановитьПараметр("НаименованиеЗадачиУплатаПатента", НаименованиеЗадачиУплатаПатента);
	Запрос.УстановитьПараметр("ВыбиратьЗадачиОтчетностиИУплатыНалогов", ОтборЗадач.ЗадачиОтчетностиИУплатыНалогов);
	Запрос.УстановитьПараметр("ВыбиратьРегулярныеПлатежи",              ОтборЗадач.РегулярныеПлатежи);
	Запрос.УстановитьПараметр("ВыбиратьПроверкиКонтролирующихОрганов",  ОтборЗадач.ПроверкиКонтролируеющихОрганов);
	Запрос.УстановитьПараметр("ВыбиратьФинОтчетность"                ,  ОтборЗадач.ФинОтчетность);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыВыполненныхЗадач.Статус КАК Статус
	|ПОМЕСТИТЬ СтатусыВыполненныхЗадач
	|ИЗ
	|	&СтатусыВыполненныхЗадач КАК СтатусыВыполненныхЗадач
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.ВАрхиве КАК ВАрхиве,
	|	ВЫБОР
	|		КОГДА СтатусыВыполненныхЗадач.Статус ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выполнено,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК Наименование,
	|	ЗадачиБухгалтера.Наименование КАК НаименованиеПолное,
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.ХешЗадачи КАК ХешЗадачи
	|ПОМЕСТИТЬ ВТ_АктуальныеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыВыполненныхЗадач КАК СтатусыВыполненныхЗадач
	|		ПО (СтатусыВыполненныхЗадач.Статус = ЗадачиБухгалтера.Статус)
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И ЗадачиБухгалтера.Срок >= &ДатаНачалаСобытий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Организация КАК Организация,
	|	ВТ_АктуальныеЗадачи.Срок КАК Срок,
	|	ВТ_АктуальныеЗадачи.ХешЗадачи КАК ХешЗадачи,
	|	Требования.Владелец.Наименование КАК Наименование,
	|	ВТ_АктуальныеЗадачи.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Требования.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ДействиеПорядок,
	|	Требования.Владелец.Ссылка КАК Задача,
	|	ВТ_АктуальныеЗадачи.Выполнено КАК Выполнено,
	|	ВТ_АктуальныеЗадачи.ВАрхиве КАК ВАрхиве,
	|	Требования.ОтправкаОтчетаОграничена КАК ОтправкаОтчетаОграничена
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ВТ_АктуальныеЗадачи.Правило = Требования.Ссылка
	|ГДЕ
	|	НЕ Требования.ПометкаУдаления
	|	И &ВыбиратьЗадачиОтчетностиИУплатыНалогов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Организация,
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ВТ_АктуальныеЗадачи.ХешЗадачи,
	|	&НаименованиеЗадачиУплатаПатента,
	|	ВТ_АктуальныеЗадачи.НаименованиеПолное,
	|	5,
	|	Патенты.Ссылка,
	|	ВТ_АктуальныеЗадачи.Выполнено,
	|	ВТ_АктуальныеЗадачи.ВАрхиве,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ВТ_АктуальныеЗадачи.Правило = Патенты.Ссылка
	|ГДЕ
	|	Патенты.Владелец В(&СписокОрганизаций)
	|	И НЕ Патенты.ПометкаУдаления
	|	И &ВыбиратьЗадачиОтчетностиИУплатыНалогов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Организация,
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ВТ_АктуальныеЗадачи.ХешЗадачи,
	|	ВТ_АктуальныеЗадачи.Наименование,
	|	ВТ_АктуальныеЗадачи.НаименованиеПолное,
	|	4,
	|	ПравилаРегулярныхПлатежей.Ссылка,
	|	ВТ_АктуальныеЗадачи.Выполнено,
	|	ВТ_АктуальныеЗадачи.ВАрхиве,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаРегулярныхПлатежей КАК ПравилаРегулярныхПлатежей
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаРегулярныхПлатежей.Ссылка
	|ГДЕ
	|	НЕ ПравилаРегулярныхПлатежей.ПометкаУдаления
	|	И &ВыбиратьРегулярныеПлатежи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Организация,
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ВТ_АктуальныеЗадачи.ХешЗадачи,
	|	ВТ_АктуальныеЗадачи.Наименование,
	|	ВТ_АктуальныеЗадачи.НаименованиеПолное,
	|	4,
	|	ПравилаФинОтчетности.Ссылка,
	|	ВТ_АктуальныеЗадачи.Выполнено,
	|	ВТ_АктуальныеЗадачи.ВАрхиве,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаФинОтчетности КАК ПравилаФинОтчетности
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаФинОтчетности.Ссылка
	|ГДЕ
	|	НЕ ПравилаФинОтчетности.ПометкаУдаления
	|	И &ВыбиратьФинОтчетность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Организация,
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ВТ_АктуальныеЗадачи.ХешЗадачи,
	|	ПроверкиКонтролирующимиОрганами.Наименование,
	|	ВТ_АктуальныеЗадачи.НаименованиеПолное,
	|	1,
	|	ПроверкиКонтролирующимиОрганами.Ссылка,
	|	ВТ_АктуальныеЗадачи.Выполнено,
	|	ВТ_АктуальныеЗадачи.ВАрхиве,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроверкиКонтролирующимиОрганами КАК ПроверкиКонтролирующимиОрганами
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПроверкиКонтролирующимиОрганами.Ссылка
	|ГДЕ
	|	НЕ ПроверкиКонтролирующимиОрганами.ПометкаУдаления
	|	И &ВыбиратьПроверкиКонтролирующихОрганов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Срок,
	|	Наименование,
	|	ДействиеПорядок
	|ИТОГИ
	|	МИНИМУМ(ДействиеПорядок),
	|	МИНИМУМ(Выполнено)
	|ПО
	|	Организация,
	|	Срок,
	|	Наименование";
	
	Результат = Запрос.Выполнить();
	
	ЗадачиОрганизаций = Новый Соответствие();
	
	ПодключенаОтправка = Неопределено; // эта проверка относительно затратная, поэтому выполним ее по месту и закешируем
	ТекстОграниченияОтправкиОтчета = ИнтерфейсыВзаимодействияБРОКлиентСервер.КраткоеПредставлениеОграниченияОтправкиОтчета();
	ТекстОграниченияОтправкиОтчета = СтрШаблон(
		НСтр("ru = 'Внимание! %1'"),
		ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(ТекстОграниченияОтправкиОтчета));
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		СписокЗадач = НовыйСписокЗадач();
		
		ВыборкаПоСроку = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Срок");
		Пока ВыборкаПоСроку.Следующий() Цикл
			
			ВыборкаПоЗадаче = ВыборкаПоСроку.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Наименование");
			Пока ВыборкаПоЗадаче.Следующий() Цикл
				
				Задача = СписокЗадач.Добавить();
				НаименованиеЗадачи = ВРег(Лев(ВыборкаПоЗадаче.Наименование, 1)) + Сред(ВыборкаПоЗадаче.Наименование, 2);
				Задача.Наименование = НаименованиеЗадачи;
				Задача.ДатаЗадачи   = ВыборкаПоЗадаче.Срок;
				Задача.Выполнено    = ВыборкаПоЗадаче.Выполнено;
				
				Выборка = ВыборкаПоЗадаче.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					ОписаниеПодзадачи = НовыйОписаниеПодзадачиСобытия();
					ОписаниеПодзадачи.Идентификатор = Выборка.ХешЗадачи;
					ОписаниеПодзадачи.Наименование = Выборка.НаименованиеПолное;
					ОписаниеПодзадачи.ВАрхиве = Выборка.ВАрхиве;
					ОписаниеПодзадачи.Выполнено = Выборка.Выполнено;
					
					Если Выборка.ОтправкаОтчетаОграничена Тогда
						
						Если ПодключенаОтправка = Неопределено Тогда
							ПодключенаОтправка = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
						КонецЕсли;
						
						Если ПодключенаОтправка Тогда
							ОписаниеПодзадачи.Наименование =
								ОписаниеПодзадачи.Наименование + Символы.ПС + ТекстОграниченияОтправкиОтчета;
						КонецЕсли;
						
					КонецЕсли;
					
					Задача.Подзадачи.Добавить(ОписаниеПодзадачи);
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗадачиОрганизаций.Вставить(ВыборкаПоОрганизации.Организация, СписокЗадач);
		
	КонецЦикла;
	
	Возврат ЗадачиОрганизаций;
	
КонецФункции

// Возвращает количество просроченных не выполненных задач по организациям.
//
// Параметры:
//   Организации - Массив организаций, по которым нужно определить количество просроченных задач.
//   ОтборЗадач - Структура - описывает отборы по типам задач, описание полей см. в НовыйНовыйОтборЗадачПоВидам
// Возвращаемое значение:
//   Соответствие - Соответствие, которое содержит в качестве ключа организацию, а в качестве значения - количество просроченных задач.
//
Функция КоличествоПросроченныхСобытийКалендаряБухгалтера(Организации, ОтборЗадач) Экспорт
	
	ДатаПросроченных = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПросроченных", ДатаПросроченных);
	Запрос.УстановитьПараметр("СписокОрганизаций", Организации);
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач", ВыполнениеЗадачБухгалтера.СтатусыВыполненныхЗадач());
	Запрос.УстановитьПараметр("ВыбиратьЗадачиОтчетностиИУплатыНалогов", ОтборЗадач.ЗадачиОтчетностиИУплатыНалогов);
	Запрос.УстановитьПараметр("ВыбиратьРегулярныеПлатежи",              ОтборЗадач.РегулярныеПлатежи);
	Запрос.УстановитьПараметр("ВыбиратьПроверкиКонтролирующихОрганов",  ОтборЗадач.ПроверкиКонтролируеющихОрганов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПросроченныеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок < &ДатаПросроченных
	|	И ЗадачиБухгалтера.Статус НЕ В (&СтатусыВыполненныхЗадач)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПросроченныеЗадачи.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ВТ_ПросроченныеЗадачи.Правило) КАК Количество
	|ИЗ
	|	ВТ_ПросроченныеЗадачи КАК ВТ_ПросроченныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ВТ_ПросроченныеЗадачи.Правило = Требования.Ссылка
	|ГДЕ
	|	НЕ Требования.ПометкаУдаления
	|	И &ВыбиратьЗадачиОтчетностиИУплатыНалогов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПросроченныеЗадачи.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПросроченныеЗадачи.Организация,
	|	КОЛИЧЕСТВО(ВТ_ПросроченныеЗадачи.Правило)
	|ИЗ
	|	ВТ_ПросроченныеЗадачи КАК ВТ_ПросроченныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ВТ_ПросроченныеЗадачи.Правило = Патенты.Ссылка
	|ГДЕ
	|	Патенты.Владелец В(&СписокОрганизаций)
	|	И НЕ Патенты.ПометкаУдаления
	|	И &ВыбиратьЗадачиОтчетностиИУплатыНалогов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПросроченныеЗадачи.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПросроченныеЗадачи.Организация,
	|	КОЛИЧЕСТВО(ВТ_ПросроченныеЗадачи.Правило)
	|ИЗ
	|	ВТ_ПросроченныеЗадачи КАК ВТ_ПросроченныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаРегулярныхПлатежей КАК ПравилаРегулярныхПлатежей
	|		ПО ВТ_ПросроченныеЗадачи.Правило = ПравилаРегулярныхПлатежей.Ссылка
	|ГДЕ
	|	НЕ ПравилаРегулярныхПлатежей.ПометкаУдаления
	|	И &ВыбиратьРегулярныеПлатежи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПросроченныеЗадачи.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПросроченныеЗадачи.Организация,
	|	КОЛИЧЕСТВО(ВТ_ПросроченныеЗадачи.Правило)
	|ИЗ
	|	ВТ_ПросроченныеЗадачи КАК ВТ_ПросроченныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроверкиКонтролирующимиОрганами КАК ПроверкиКонтролирующимиОрганами
	|		ПО ВТ_ПросроченныеЗадачи.Правило = ПроверкиКонтролирующимиОрганами.Ссылка
	|ГДЕ
	|	НЕ ПроверкиКонтролирующимиОрганами.ПометкаУдаления
	|	И &ВыбиратьПроверкиКонтролирующихОрганов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПросроченныеЗадачи.Организация";
	
	ТаблицаПросроченных = Запрос.Выполнить().Выгрузить();
	ТаблицаПросроченных.Свернуть("Организация", "Количество");
	
	КоличествоПросроченных = Новый Соответствие;
	Для Каждого СтрокаПросроченного Из ТаблицаПросроченных Цикл
		КоличествоПросроченных.Вставить(СтрокаПросроченного.Организация, СтрокаПросроченного.Количество);
	КонецЦикла;
	
	Возврат КоличествоПросроченных;
	
КонецФункции

// Возвращает дату, которая отличается указанной даты ДатаОт на количество дней,
// входящих в указанный график или производственный календарь ГрафикРаботы.
//
// Параметры:
//	 ГрафикРаботы	- СправочникСсылка.Календари, СправочникСсылка.ПроизводственныеКалендари - график или 
//                    производственный календарь, который необходимо использовать для расчета даты.
//	 ДатаОт			- Дата - дата, от которой нужно рассчитать количество дней.
//	 КоличествоДней	- Число - количество дней, на которые нужно увеличить дату начала.
//
// Возвращаемое значение:
//	 Дата, Неопределено - дата, увеличенная или уменьшенная на количество дней, входящих в график.
//	                      Если выбранный график не заполнен, возвращается Неопределено.
//
Функция РабочаяДатаПоКалендарю(ГрафикРаботы, Знач ДатаОт, Знач КоличествоДней) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	ИначеЕсли КоличествоДней > 0 Тогда
		
		// Текущий день не учитываем при расчете переноса.
		// Приращение рабочих дней выполняем всегда со следующего дня.
		// Это позволяет корректно и без дополнительных вычислений рассчитать сдвиг рабочих дней, 
		// если ДатаОт выпадает на выходной день.
		ДатаОт = КонецДня(ДатаОт) + 1;
		
		Возврат КалендарныеГрафики.ДатаПоКалендарю(ГрафикРаботы, ДатаОт, КоличествоДней - 1, Ложь);
		
	Иначе
		День = 24 * 60 * 60;
		МассивДней = Новый Массив;
		
		// Определяем количество рабочих дней с небольшим запасом, 
		// поскольку рабочих дней всегда меньше календарных.
		КоличествоДней = -КоличествоДней;
		Запас = 4;
		Для НомерДня = 1 По КоличествоДней * Запас Цикл
			МассивДней.Добавить(НомерДня);
		КонецЦикла;
		
		РабочиеДаты = КалендарныеГрафики.ДатыПоКалендарю(
			ГрафикРаботы, ДатаОт - КоличествоДней * День * Запас, МассивДней, Ложь, Ложь);
		
		Если РабочиеДаты <> Неопределено Тогда
			// Интересны только рабочие даты не превышающие значение переменной ДатаОт.
			ГраницаРабочихДат = -1;
			Для Индекс = 0 По РабочиеДаты.ВГраница() Цикл
				Если РабочиеДаты[Индекс] >= ДатаОт Тогда
					ГраницаРабочихДат = Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РабочиеДаты.Количество() >= 0 И (ГраницаРабочихДат - КоличествоДней) > 0 Тогда
				Возврат РабочиеДаты[ГраницаРабочихДат - КоличествоДней];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ИнформационнаяПанель

Функция ДанныеЗадачиБухгалтера(Организация) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("КоличествоПросроченных", 0);
	Данные.Вставить("Просроченнаязадача",     НоваяПросроченнаяЗадачаИнформационнойПанели());
	Данные.Вставить("АктуальныеЗадачи",       НоваяТаблицаЗадачИнформационнойПанели());
	
	// Для увеличения производительности запросы выполняются в привилегированном режиме.
	// Выполнение проверки доступности данных по выбранной организации по RLS.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций = Новый Массив;
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено Тогда
			СписокОрганизаций.Добавить(Организация);
		КонецЕсли;
	Иначе
		СписокОрганизаций = Новый Массив(ДоступныеОрганизации);
	КонецЕсли;
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат Данные;
	КонецЕсли;
	
	ВерхняяГраницаСроков = Перечисления.ОтносительныеСроки.ВерхняяГраница();
	
	ТекущаяДата  = НачалоДня(ТекущаяДатаСеанса());
	КонецПериода = КонецДня(ТекущаяДата + (ВерхняяГраницаСроков * 86400));
	НаименованиеЗадачиУплатаПатента = НСтр("ru = 'уплата патента'");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата",       ТекущаяДата);
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НаименованиеЗадачиУплатаПатента", НаименованиеЗадачиУплатаПатента);
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач",         ВыполнениеЗадачБухгалтера.СтатусыВыполненныхЗадач());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК Наименование
	|ПОМЕСТИТЬ ВТ_АктуальныеЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач)
	|	И ЗадачиБухгалтера.Срок МЕЖДУ &ТекущаяДата И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Срок КАК Срок,
	|	Требования.Действие КАК Действие,
	|	Требования.Владелец.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Требования.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ДействиеПорядок,
	|	Требования.Владелец.Ссылка КАК Задача,
	|	Требования.ОтправкаОтчетаОграничена КАК ОтправкаОтчетаОграничена
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ВТ_АктуальныеЗадачи.Правило = Требования.Ссылка
	|ГДЕ
	|	НЕ Требования.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога),
	|	&НаименованиеЗадачиУплатаПатента,
	|	5,
	|	Патенты.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
	|		ПО ВТ_АктуальныеЗадачи.Правило = Патенты.Ссылка
	|ГДЕ
	|	Патенты.Владелец В(&СписокОрганизаций)
	|	И НЕ Патенты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж),
	|	ВТ_АктуальныеЗадачи.Наименование,
	|	4,
	|	ПравилаРегулярныхПлатежей.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРегулярныхПлатежей КАК ПравилаРегулярныхПлатежей
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаРегулярныхПлатежей.Ссылка
	|ГДЕ
	|	НЕ ПравилаРегулярныхПлатежей.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ФинОтчетность),
	|	ВТ_АктуальныеЗадачи.Наименование,
	|	4,
	|	ПравилаФинОтчетности.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаФинОтчетности КАК ПравилаФинОтчетности
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаФинОтчетности.Ссылка
	|ГДЕ
	|	НЕ ПравилаФинОтчетности.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АктуальныеЗадачи.Срок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Проверка),
	|	ПроверкиКонтролирующимиОрганами.Наименование,
	|	1,
	|	ПроверкиКонтролирующимиОрганами.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_АктуальныеЗадачи КАК ВТ_АктуальныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроверкиКонтролирующимиОрганами КАК ПроверкиКонтролирующимиОрганами
	|		ПО ВТ_АктуальныеЗадачи.Правило = ПроверкиКонтролирующимиОрганами.Ссылка
	|ГДЕ
	|	НЕ ПроверкиКонтролирующимиОрганами.ПометкаУдаления
	|ИТОГИ
	|	МАКСИМУМ(ОтправкаОтчетаОграничена)
	|ПО
	|	Срок,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач)
	|	И ЗадачиБухгалтера.Срок < &ТекущаяДата
	|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Перечисление.ЗадачиНачалаРаботы
	|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПроверкиКонтролирующимиОрганами";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Актуальные задачи
	
	АктуальныеЗадачи = Данные.АктуальныеЗадачи;
	
	СрокиПоДням = Перечисления.ОтносительныеСроки.СрокиПоДням();
	
	ВыборкаПоСроку = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Срок");
	Пока ВыборкаПоСроку.Следующий() Цикл
		
		ОсталосьДней = ОсталосьДней(ТекущаяДата, ВыборкаПоСроку.Срок);
		
		ОтносительныйСрок = СрокиПоДням.Получить(ОсталосьДней);
		Если ОтносительныйСрок = Неопределено ИЛИ ОтносительныйСрок = Перечисления.ОтносительныеСроки.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоЗадаче = ВыборкаПоСроку.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Задача");
		Пока ВыборкаПоЗадаче.Следующий() Цикл
			
			ОтправкаОтчетаОграничена = ВыборкаПоЗадаче.ОтправкаОтчетаОграничена; // Истина, если отправка ограничена у любой из задач.
			
			// Одинаковые задачи с разными действиями сворачиваем в одну строку.
			// Большинство свойств выбираем из первой такой задачи.
			Выборка = ВыборкаПоЗадаче.Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяЗадача = АктуальныеЗадачи.Добавить();
				НоваяЗадача.Наименование             = Выборка.Наименование;
				НоваяЗадача.ОтносительныйСрок        = ОтносительныйСрок;
				НоваяЗадача.ОсталосьДней             = ОсталосьДней;
				НоваяЗадача.ДействиеПорядок          = Выборка.ДействиеПорядок;
				НоваяЗадача.ОтносительныйСрокПорядок = Перечисления.ОтносительныеСроки.Порядок(ОтносительныйСрок, ОсталосьДней);
				// Если действие не одно, то указываем наименование задачи
				Если Выборка.Количество() > 1 Тогда
					НоваяЗадача.Действие = Выборка.Наименование;
				Иначе
					НоваяЗадача.Действие = Выборка.Действие;
				КонецЕсли;
				НоваяЗадача.ОтправкаОтчетаОграничена = ОтправкаОтчетаОграничена;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	АктуальныеЗадачи.Индексы.Добавить("ОтносительныйСрок");
	
	Данные.Вставить("АктуальныеЗадачи", АктуальныеЗадачи);
	
	// Просроченные задачи
	КоличествоПросроченых = Результат[2].Выбрать();
	Если КоличествоПросроченых.Следующий() Тогда
		Данные.КоличествоПросроченных = КоличествоПросроченых.Количество;
	КонецЕсли;
	
	// Просроченных задач может быть много, поэтому уточняем данные задачи только если она одна
	Если Данные.КоличествоПросроченных = 1 Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачиБухгалтера.Правило КАК Правило,
		|	ЗадачиБухгалтера.Срок,
		|	ЗадачиБухгалтера.НаименованиеСокращенное КАК Наименование
		|ПОМЕСТИТЬ ВТ_ПросроченныеЗадачи
		|ИЗ
		|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|ГДЕ
		|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
		|	И НЕ ЗадачиБухгалтера.ВАрхиве
		|	И НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач)
		|	И ЗадачиБухгалтера.Срок < &ТекущаяДата
		|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Перечисление.ЗадачиНачалаРаботы
		|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПроверкиКонтролирующимиОрганами
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Правило
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АктуальныеЗадачи.Срок КАК Срок,
		|	Требования.Владелец.Наименование КАК Наименование
		|ИЗ
		|	ВТ_ПросроченныеЗадачи КАК ВТ_АктуальныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
		|		ПО ВТ_АктуальныеЗадачи.Правило = Требования.Ссылка
		|ГДЕ
		|	НЕ Требования.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_АктуальныеЗадачи.Срок,
		|	&НаименованиеЗадачиУплатаПатента
		|ИЗ
		|	ВТ_ПросроченныеЗадачи КАК ВТ_АктуальныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты КАК Патенты
		|		ПО ВТ_АктуальныеЗадачи.Правило = Патенты.Ссылка
		|ГДЕ
		|	Патенты.Владелец В(&СписокОрганизаций)
		|	И НЕ Патенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_АктуальныеЗадачи.Срок,
		|	ВТ_АктуальныеЗадачи.Наименование
		|ИЗ
		|	ВТ_ПросроченныеЗадачи КАК ВТ_АктуальныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРегулярныхПлатежей КАК ПравилаРегулярныхПлатежей
		|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаРегулярныхПлатежей.Ссылка
		|ГДЕ
		|	НЕ ПравилаРегулярныхПлатежей.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_АктуальныеЗадачи.Срок,
		|	ВТ_АктуальныеЗадачи.Наименование
		|ИЗ
		|	ВТ_ПросроченныеЗадачи КАК ВТ_АктуальныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаФинОтчетности КАК ПравилаФинОтчетности
		|		ПО ВТ_АктуальныеЗадачи.Правило = ПравилаФинОтчетности.Ссылка
		|ГДЕ
		|	НЕ ПравилаФинОтчетности.ПометкаУдаления";
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Данные.ПросроченнаяЗадача, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ОсталосьДней(ТекущаяДата, Срок)
	
	Возврат (НачалоДня(Срок) - НачалоДня(ТекущаяДата))/86400;
	
КонецФункции

Функция НоваяПросроченнаяЗадачаИнформационнойПанели()
	
	ПросроченнаяЗадача = Новый Структура;
	ПросроченнаяЗадача.Вставить("Наименование", "");
	ПросроченнаяЗадача.Вставить("Срок", Дата(1, 1, 1));
	
	Возврат ПросроченнаяЗадача;
	
КонецФункции

Функция НоваяТаблицаЗадачИнформационнойПанели()
	
	ТипыДействия = Новый Массив();
	ТипыДействия.Добавить(Тип("Строка"));
	ТипыДействия.Добавить(Тип("ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера"));
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Наименование",             ОбщегоНазначения.ОписаниеТипаСтрока(100));
	НоваяТаблица.Колонки.Добавить("Действие",                 Новый ОписаниеТипов(ТипыДействия, , Новый КвалификаторыСтроки(50)));
	НоваяТаблица.Колонки.Добавить("ОтносительныйСрок",        Новый ОписаниеТипов("ПеречислениеСсылка.ОтносительныеСроки"));
	НоваяТаблица.Колонки.Добавить("ОсталосьДней",             ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	НоваяТаблица.Колонки.Добавить("ОтносительныйСрокПорядок", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	НоваяТаблица.Колонки.Добавить("ДействиеПорядок",          ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	НоваяТаблица.Колонки.Добавить("ОтправкаОтчетаОграничена", Новый ОписаниеТипов("Булево"));
	
	Возврат НоваяТаблица;
	
КонецФункции

#КонецОбласти

#Область КалендарьGoogle

Функция СобытияКалендаряДляGoogle(Организации) Экспорт
	
	ОтборЗадачПоВидам = НовыйНовыйОтборЗадачПоВидам();
	ЗадачиОрганизаций = СобытияКалендаряБухгалтера(Организации, ОтборЗадачПоВидам);
	
	Для Каждого ЗадачиОрганизации ИЗ ЗадачиОрганизаций Цикл
		ДобавитьОписаниеВСписокЗадач(ЗадачиОрганизации.Значение);
	КонецЦикла;
	
	Возврат ЗадачиОрганизаций;
	
КонецФункции

Процедура ДобавитьОписаниеВСписокЗадач(ЗадачиОрганизации)
	
	ЗадачиОрганизации.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Задача Из ЗадачиОрганизации Цикл
		
		Если Задача.Подзадачи.Количество() = 1 Тогда
			Задача.Описание = Задача.Подзадачи[0].Наименование;
		ИначеЕсли Задача.Подзадачи.Количество() > 1 Тогда
			Описания = Новый Массив;
			НомерПодзадачи = 0;
			Для Каждого Подзадача Из Задача.Подзадачи Цикл
				
				Описания.Добавить(НумерованноеОписаниеПодзадачи(НомерПодзадачи, Подзадача));
				
			КонецЦикла;
			Задача.Описание = СтрСоединить(Описания, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НумерованноеОписаниеПодзадачи(НомерПодзадачи, Подзадача)
	
	ШаблонОписания = НСтр("ru = '%1. %2'"); // номер подзадачи и тело ее описания
	
	// Сдвигаем все строки, кроме первой, чтобы аккуратно выглядели номера
	ТелоОписанияЗадачи = СтрПолучитьСтроку(Подзадача.Наименование, 1);
	Для НомерСтроки = 2 По СтрЧислоСтрок(Подзадача.Наименование) Цикл
		ТелоОписанияЗадачи = ТелоОписанияЗадачи + Символы.ПС + Символы.Таб + СтрПолучитьСтроку(Подзадача.Наименование, НомерСтроки);
	КонецЦикла;
	
	НомерПодзадачи = НомерПодзадачи + 1;
	Возврат СтрШаблон(ШаблонОписания, НомерПодзадачи, ТелоОписанияЗадачи);

КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыйСписокЗадач()
	
	СписокЗадач = Новый ТаблицаЗначений();
	СписокЗадач.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка")); // Нигде не используется
	СписокЗадач.Колонки.Добавить("ДатаЗадачи",   Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	СписокЗадач.Колонки.Добавить("Выполнено",    Новый ОписаниеТипов("Булево")); // Нигде не используется
	СписокЗадач.Колонки.Добавить("Подзадачи",    Новый ОписаниеТипов("Массив"));
	Возврат СписокЗадач;
	
КонецФункции

Функция НовыйНовыйОтборЗадачПоВидам() Экспорт
	
	ОтборЗадач = Новый Структура;
	ОтборЗадач.Вставить("ЗадачиОтчетностиИУплатыНалогов", Истина);
	ОтборЗадач.Вставить("РегулярныеПлатежи",              Истина);
	ОтборЗадач.Вставить("ПроверкиКонтролируеющихОрганов", Истина);
	ОтборЗадач.Вставить("ФинОтчетность",                  Истина);
	Возврат ОтборЗадач;
	
КонецФункции

Функция НовыйОписаниеПодзадачиСобытия()
	
	ОписаниеПодзадачи = Новый Структура;
	ОписаниеПодзадачи.Вставить("Идентификатор", "");
	ОписаниеПодзадачи.Вставить("Наименование",  "");
	ОписаниеПодзадачи.Вставить("Выполнено",     Ложь);
	ОписаниеПодзадачи.Вставить("ВАрхиве",       Ложь);
	
	Возврат ОписаниеПодзадачи;
	
КонецФункции

#КонецОбласти
