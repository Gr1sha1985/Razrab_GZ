#Область ПрограммныйИнтерфейс

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументыИСМП.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("ИСМППрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область РегламентноеЗадание

// Обработчик регламентного задания очистки пула кодов маркировки
// 
Процедура ОчисткаПулаКодовМаркировкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ОчисткаПулаКодовМаркировки();
	
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС МОТП
//
Процедура ВыполнитьОбменРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтеграцияИСМПВызовСервера.ВыполнитьОбмен();
	
КонецПроцедуры

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Задает настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//  Настройки - Коллекция - настройки отчетов и вариантов отчетов конфигурации.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРасхожденийПриМаркировкеТоваровИСМП);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРасхожденийПриВыводеИзОборотаИСМП);
	
КонецПроцедуры

//Переопределяемая область данных прикладных документов отчетов о расхождениях при оформлении
//
//Возвращаемое значение:
//   Строка - типовая часть запроса, которую требуется переопределять
//
Функция ШаблонПолученияВидаПродукцииИзНоменклатуры() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	&ПустаяНоменклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ НоменклатураПереопределяемый
	|;
	|
	|";
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = Метаданные.ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП.Имя Тогда
		ЛогированиеЗапросовИСМП.УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры);
	ИначеЕсли ИмяПараметра = Метаданные.ПараметрыСеанса.ДанныеКлючаСессииСУЗ.Имя Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСУЗ = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТипыРасхожденийКодовМаркировки

// Возвращает значение Брак определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПБрак() Экспорт
	
	ТипРасхождения = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПБрак(ТипРасхождения);
	Возврат ТипРасхождения;

КонецФункции

// Возвращает значение Излишек определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПИзлишек() Экспорт
	
	ТипРасхождения = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПИзлишек(ТипРасхождения);
	Возврат ТипРасхождения;
	
КонецФункции

// Возвращает значение Недостача определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПНедостача() Экспорт
	
	ТипРасхождения = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПНедостача(ТипРасхождения);
	Возврат ТипРасхождения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиУчета

Функция АктыОРасхожденияПослеПоступленияИспользуются(Документ) Экспорт

	Используются = Ложь;

	ИнтеграцияИСМППереопределяемый.ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются);

	Возврат Используются;

КонецФункции

Функция РазрешенаПовторнаяПечатьКодовМаркировки() Экспорт
	
	ИмяРолиПолныеПрава   = "ПолныеПрава";
	ВозвращаемоеЗначение = Ложь;
	
	Если РольДоступна("ПовторнаяПечатьКодовМаркировкиИСМП") Тогда
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли Метаданные.Роли.Найти(ИмяРолиПолныеПрава) <> Неопределено Тогда
		ВозвращаемоеЗначение = РольДоступна(ИмяРолиПолныеПрава);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеИПроверкаЗаполнения

// Обработчик заполнения вида продукции в шапке документа ИСМП. Вызывается после заполнения табличной части "Товары",
//   берет вид продукции из первой строки.
//
// Параметры:
//   ДокументОбъект - ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформленияОбъект - документ ИСМП
//
Процедура ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Товары.Количество() Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Номенклатура КАК Номенклатура,
		|	Неопределено КАК Характеристика
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|;
		|
		|/////////////////////////////////////////////
		|"
		+
		ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции()
		+
		"
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ДанныеПоВидуПродукции.Номенклатура         КАК Номенклатура,
		|	ДанныеПоВидуПродукции.Характеристика       КАК Характеристика,
		|	ДанныеПоВидуПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	ДанныеПоВидуПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
		|";

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Номенклатура", ДокументОбъект.Товары[0].Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДокументОбъект.ВидПродукции = Выборка.ВидПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Получает виды продукции, имеющиеся в таблице номенклатуры
//
//Параметры:
//   Товары - ТаблицаЗначений - входящая таблица товаров с колонками:
//    * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура,
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика.
//   ПараметрыЗаполненияПоКодамОстатков - Структура, Неопределено - параметры проверки остаточный GTIN
//Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции по переданной номенклатуре
//
Функция ВидыПродукцииПоТаблицеНоменклатуры(Товары, ПараметрыЗаполненияПоКодамОстатков = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.GTIN           КАК GTIN
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции();
	
	Если ПараметрыЗаполненияПоКодамОстатков = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
		|";
		
	Иначе
		
		Запрос.УстановитьПараметр("Организация", ПараметрыЗаполненияПоКодамОстатков.Организация);
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеШтрихкодовУпаковок.GTIN КАК GTIN,
		|	ЕстьNull(КэшОписанияОстатковИСМП.ВидПродукции, Неопределено) КАК ВидПродукции
		|ПОМЕСТИТЬ ДанныеОстаточныхGTIN
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатковИСМП
		|		ПО ДанныеШтрихкодовУпаковок.GTIN = КэшОписанияОстатковИСМП.GTIN
		|		И КэшОписанияОстатковИСМП.Организация = &Организация
		|ГДЕ
		|	ДанныеШтрихкодовУпаковок.Номенклатура В (&ПустыеЗначенияНоменклатуры)
		|;
		|
		|/////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
		|ГДЕ 
		|	НЕ ДанныеПоВидуПродукции.Номенклатура В (&ПустыеЗначенияНоменклатуры)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДанныеОстаточныхGTIN.ВидПродукции
		|ИЗ
		|	ДанныеОстаточныхGTIN КАК ДанныеОстаточныхGTIN
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
КонецФункции

#КонецОбласти

#Область Серии

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//
//Параметры:
// ДанныеДляГенерации - Структура - (См. ИнтеграцияИСМПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии).
// ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для определения особенностей генерации серий.
//
Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ИнтеграцияИСМППереопределяемый.СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции);

КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина, СообщениеПрерывания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Ссылка                       КАК Сообщение,
	|	ИСМППрисоединенныеФайлы.Операция                     КАК Операция,
	|	ИСМППрисоединенныеФайлы.ТипСообщения                 КАК ТипСообщения,
	|	ИСМППрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаСоздания,
	|	ЛОЖЬ                                                 КАК КПередаче,
	|	ВЫБОР КОГДА ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	ИСМППрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки,
	|	НЕОПРЕДЕЛЕНО                            КАК ПротоколОбмена
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.Документ = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийИСМП.Сообщение                  КАК Сообщение,
	|	ОчередьСообщенийИСМП.Операция                   КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) КАК ТипСообщения,
	|	ОчередьСообщенийИСМП.ДатаСоздания               КАК ДатаСоздания,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки = """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки <> """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	НЕОПРЕДЕЛЕНО                        КАК СтатусОбработки,
	|	ОчередьСообщенийИСМП.ПротоколОбмена КАК ПротоколОбмена
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|ГДЕ
	|	ОчередьСообщенийИСМП.Документ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Пока Выборка.Следующий() Цикл
			
			Если СообщениеПрерывания <> Неопределено
				И Выборка.Сообщение = СообщениеПрерывания Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбновления = Неопределено;
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция);
					
				ИначеЕсли Выборка.Передан Тогда
					
					СтатусОбработки = Выборка.СтатусОбработки;
					Операция        = Выборка.Операция;
					Если Не ЗначениеЗаполнено(СтатусОбработки) Тогда
						Если Выборка.ПротоколОбмена <> Неопределено Тогда
							ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
						КонецЕсли;
						Если ПротоколОбмена = Неопределено Тогда
							Продолжить;
						ИначеЕсли ПротоколОбмена.Количество() > 0 Тогда
							ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
							СтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
							Операция        = ПоследняяЗаписьПротоколаОбмена.Операция;
						КонецЕсли;
					КонецЕсли;
					
					Если Операция <> Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
						И ПротоколОбмена <> Неопределено Тогда
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Операция,
							СтатусОбработки);
						
					Иначе
						
						ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
						ПараметрыОбновленияСтатуса.Статус            = Неопределено;
						ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
						ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
						ПараметрыОбновленияСтатуса.ПротоколОбмена    = Выборка.ПротоколОбмена;
						ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
							ДокументСсылка,
							Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
							ПараметрыОбновленияСтатуса);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ПротоколОбмена <> Неопределено Тогда
					ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
				КонецЕсли;
				Если ПротоколОбмена = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.Статус            = Неопределено;
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Выборка.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
					ДокументСсылка,
					Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
					ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
			Если СообщениеПрерывания = Неопределено Тогда
				
				Если ПараметрыОбновления <> Неопределено Тогда
					РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			Иначе
				
				Если (Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована) Тогда
					
					Если ПараметрыОбновления <> Неопределено Тогда
						РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Выполняет начальную запись в регистр "Статусы документов ИС МП"
//
Процедура ЗаписатьСтатусДокументаИСМППоУмолчанию(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый)
		Или Источник.ДополнительныеСвойства.Свойство("ТребуетсяПерезаписьСтатусаПоУмолчанию");
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Получить статусы ИСМП, цвет текста которых "требует внимания"
// 
// Возвращаемое значение:
//  Массив - Статусы ИС МП, для которых требуется устанавливать цвет "требует внимания"
//
Функция СтатусыЦветТекстаТребуетВнимания() Экспорт
	
	СтатусыЦветТекстаТребуетВнимания = Новый Массив;
	
	Для Каждого Статус Из Документы.МаркировкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВыводИзОборотаИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВозвратВОборотИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПеремаркировкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.СписаниеКодовМаркировкиИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОтгрузкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПриемкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	
	Возврат СтатусыЦветТекстаТребуетВнимания;
	
КонецФункции

// Получить представление статуса ИС МП.
//
// Параметры:
//  Статус                     - ПеречислениеСсылка - Статус документа ИС МП.
//  ВходящиеДальнейшееДействие - Массив, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - входящие дальнейшие действия.
//  ДопустимыеДействия         - Массив, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Список разрешенных дальнейших действий.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ИС МП.
//
Функция ПредставлениеСтатуса(Статус, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВнимания = СтатусыЦветТекстаТребуетВнимания();
		
		Если СтатусыЦветТекстаТребуетВнимания.Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(Статус),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(Строка(Статус));
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП")
		И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки     = "";
		ЯвляетсяГиперссылкой = Истина;
		Представление        = НРег(Строка(ДальнейшееДействие));
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗапроситьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
			ТекстГиперссылки = "ЗапроситьGTINНаОстатки";
			Представление    = НСтр("ru = 'запросите GTIN на остатки'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
			ТекстГиперссылки = "ПередатьОтчет";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗаблокируйтеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗаблокироватьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПеремаркировку Тогда
			ТекстГиперссылки = "ВыполнитеПеремаркировку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
			ТекстГиперссылки = "ВыполнитьАгрегацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию Тогда
			ТекстГиперссылки = "ОтменитьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных Тогда
			ТекстГиперссылки = "ОтменитьПередачуДанных";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку Тогда
			ТекстГиперссылки = "АннулироватьОтгрузку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление Тогда
			ТекстГиперссылки = "ПодтвердитеПоступление";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОткажитесьОтНакладной Тогда
			ТекстГиперссылки = "ОтказатьсяОтНакладной";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПроверку Тогда
			ТекстГиперссылки = "ВыполнитьПроверку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК Тогда
			ТекстГиперссылки = "ВыполнитьФормированиеАТК";
			Представление    = НСтр("ru = 'выполните формирование АТК'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					Представление,
					Новый Шрифт(,,,,Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

#КонецОбласти

#Область СтатусыОформления

Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокумента);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов             = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	ШаблонПредставленияДокумента = ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование);
	
	АрхивныйСтатус = Ложь;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокумента.Имя].Статус;
		АрхивныйСтатус   = СтатусыОформления[МетаданныеДокумента.Имя].Архивный;
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МетаданныеДокумента = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
		
		СостояниеЗаказа = РегистрыСведений.ПулКодовМаркировкиСУЗ.РассчитатьТаблицуСостоянияПоЗаказу(ДокументОснование);
		СостояниеЗаказа.Колонки.Добавить("СлужебноеПоле");
		СостояниеЗаказа.Свернуть(
			"СлужебноеПоле",
			"КоличествоВЗаказе,
			|КоличествоЗаказано,
			|КоличествоПечатать,
			|КоличествоРаспечатано,
			|КоличествоРезервировать,
			|КоличествоЗаказать");
		Если СостояниеЗаказа.Количество() > 0 Тогда
			СостояниеЗаказаИтоги = СостояниеЗаказа[0];
		Иначе
			СостояниеЗаказаИтоги = Неопределено;
		КонецЕсли;
		
		Если АрхивныйСтатус Тогда
			ТекстНадписи = НСтр("ru = 'Оформление заказов на эмиссию кодов маркировки завершено'");
			Если МассивДокументов.Количество() Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			КонецЕсли;
		ИначеЕсли (МассивДокументов.Количество()
			Или СостояниеЗаказаИтоги <> Неопределено
				И СостояниеЗаказаИтоги.КоличествоЗаказано > 0)
			И СостояниеЗаказаИтоги <> Неопределено
			И ( СостояниеЗаказаИтоги.КоличествоПечатать > 0
			Или СостояниеЗаказаИтоги.КоличествоРезервировать > 0
			Или СостояниеЗаказаИтоги.КоличествоЗаказать > 0
			Или СостояниеЗаказаИтоги.КоличествоЗаказано > 0) Тогда
			
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыПулКодовМаркировки;
			
			ЭлементыТекста = Новый Массив;
			
			Если СостояниеЗаказаИтоги.КоличествоПечатать > 0
				Или СостояниеЗаказаИтоги.КоличествоРезервировать > 0
				Или СостояниеЗаказаИтоги.КоличествоЗаказать > 0 Тогда
				ЭлементыТекстаТребуется = Новый Массив;
				Если СостояниеЗаказаИтоги.КоличествоЗаказать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'заказать: %1'"), СостояниеЗаказаИтоги.КоличествоЗаказать));
				КонецЕсли;
				Если СостояниеЗаказаИтоги.КоличествоРезервировать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'зарезервировать: %1'"), СостояниеЗаказаИтоги.КоличествоРезервировать));
				КонецЕсли;
				Если СостояниеЗаказаИтоги.КоличествоПечатать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'распечатать: %1'"), СостояниеЗаказаИтоги.КоличествоПечатать));
				КонецЕсли;
				ЭлементыТекста.Добавить(СтрШаблон(НСтр("ru = 'Требуется %1 кодов маркировки'"), СтрСоединить(ЭлементыТекстаТребуется, ", ")));
			КонецЕсли;
			
			Если СостояниеЗаказаИтоги.КоличествоЗаказано > 0 Тогда
				ЭлементыТекста.Добавить(
					НСтр("ru = 'Ожидается получение кодов маркировки'"));
			КонецЕсли;
			
			ТекстНадписи = СтрСоединить(ЭлементыТекста, ", ");
			
		ИначеЕсли (МассивДокументов.Количество()
			Или СостояниеЗаказаИтоги <> Неопределено
				И СостояниеЗаказаИтоги.КоличествоЗаказано > 0)
			И СостояниеЗаказаИтоги <> Неопределено
			И СостояниеЗаказаИтоги.КоличествоРаспечатано > 0 Тогда
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыПулКодовМаркировки;
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Распечатано кодов маркировки: %1'"), СостояниеЗаказаИтоги.КоличествоРаспечатано)
		ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МассивДокументов.Количество() > 0 Тогда
		
		НуженРазделительВТексте = Ложь;
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если АрхивныйСтатус Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			Если АрхивныйСтатус Тогда
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеДокумента,
					НСтр("ru = 'в архиве'"));
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеДокумента,
					Статус);
				НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			КонецЕсли;
			
		Иначе
			
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Если АрхивныйСтатус Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.СтатусОформленияАрхивный;
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеНесколькихДокументов,
					СокрЛП(МассивДокументов.Количество()));
				НуженРазделительВТексте = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
			И Не АрхивныйСтатус Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если Не АрхивныйСтатус И СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "ИСМП";
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокумента.Синоним;
	ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), , "ПД=Винительный")[0];
	ФормыИмениДокумента.РодИмени   = "Ж";
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	Шаблон.Вставить("ИмяКомандыПулКодовМаркировки",      ИнтеграцияИСМПКлиентСервер.ИмяКомандыПулКодовМаркировки(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			НСтр("ru = 'в архиве'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'оформлена'"), НСтр("ru = 'оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'создана'"), НСтр("ru = 'создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'получена'"), НСтр("ru = 'получено'")))));
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает допустимые типы документа-основания для указанного документа ИСМП.
//
// Параметры:
//	МетаданныеДокумента - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОписаниеТипов - ОпределяемыйТип.Основание<МетаданныеДокументаИСМП.Имя>.Тип
//		тип реквизита ДокументОснование указанного документа ИСМП.
//
Функция ДокументыОснованияПоМетаданным(МетаданныеДокумента) Экспорт
	
	ТипыОснования = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип;
	Возврат ТипыОснования;
	
КонецФункции

#КонецОбласти

#Область СверкаКодовМаркировки

Функция ИспользуетсяФормаПросмотраРасхожденийПоКодамМаркировки(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСверкиКодовМаркировкиИСМП.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСВнешнимиСервисами

//Возвращает структуру параметров обмена.
//
//Возвращаемое значение:
//  Структура - параметры обмена
//
Функция ПараметрыОбмена(Организации = Неопределено, УникальныйИдентификатор = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("НастройкиОбменаСУЗ",      НастройкиОбменаСУЗ(Организации, ЭтоРегламентноеЗадание));
	ПараметрыОбмена.Вставить("Организации",             Организации);
	ПараметрыОбмена.Вставить("КОбновлениюКлючейСессии", Неопределено);
	ПараметрыОбмена.Вставить("СообщенияКПодписанию",    Неопределено);
	
	ПараметрыОбмена.Вставить("ОжидатьНаСервере", Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте", Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",   Неопределено);
	
	ПараметрыОбмена.Вставить("Изменения", Новый Массив);
	
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            ИнициализиоватьОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        ИнициализироватьЗависимостиСообщений());
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", Неопределено);
	КонецЕсли;
	
	ТаблицаСтопЛист = Новый ТаблицаЗначений;
	ТаблицаСтопЛист.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	ПараметрыОбмена.Вставить("СтопЛист",                     ТаблицаСтопЛист);
	ПараметрыОбмена.Вставить("КонтрольКоличестваЗаказовСУЗ", Новый Соответствие());
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

// Вывести HTTP-Запрос в лог
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос для вывода в файл.
//             - HTTPОтвет  - HTTP-ответ для вывода в файл.
//  ПутьКФайлу - Строка - Путь к файлу для записи лога.
//
// Возвращаемое значение:
//  Строка - Представление протокола
Функция ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу = Неопределено, ТекстОшибки = "") Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Если ТипЗнч(HTTPЗапрос) = Тип("HTTPЗапрос") Тогда
			
			Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
				ТекстовыйДокумент.ДобавитьСтроку("");
			КонецЕсли;
			
			URLЗапроса = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			
			ТекстовыйДокумент.ДобавитьСтроку(URLЗапроса);
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("HTTPОтвет") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
			ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Код состояния: %1", HTTPЗапрос.КодСостояния));
		КонецЕсли;
	
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			
			ЗначениеЗаголовка = КлючИЗначение.Значение;
			//Если НРег(КлючИЗначение.Ключ) = НРег("Authorization")
			//	И СтрНачинаетсяС(КлючИЗначение.Значение, "Bearer") Тогда
			//	ЗначениеЗаголовка = СтрШаблон("%1...", Лев(ЗначениеЗаголовка, 30));
			//КонецЕсли;
			
			ТекстовыйДокумент.ДобавитьСтроку(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, ЗначениеЗаголовка));
			
		КонецЦикла;
	
		Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
		Если Не ПустаяСтрока(Тело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Тело);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
	КонецЕсли;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;

	Возврат ТекстовыйДокумент.ПолучитьТекст();

КонецФункции

Функция ПолучитьДанныеИзСервиса(АдресЗапроса, КлючСессии, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ВремяОжиданияСледующегоЗапроса = ИнтерфейсСУЗ.ВремяОжиданияСледующегоЗапросаСУЗ(ПараметрыОтправкиHTTPЗапросов);
		Если ВремяОжиданияСледующегоЗапроса > 0 Тогда
			ИнтеграцияИС.Ожидать(ВремяОжиданияСледующегоЗапроса, ПараметрыОтправкиHTTPЗапросов);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовокHTTP.Вставить("Cache-Control",  "no-cache");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4'"),
				АдресЗапроса,
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				ПараметрыОтправкиHTTPЗапросов.Сервер,
				ПараметрыОтправкиHTTPЗапросов.Порт) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМППереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, "GET", ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу, ТекстОшибки);
	КонецЕсли;
	
	ДанныеЗаписи                   = ЛогированиеЗапросовИСМП.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет   = HTTPЗапрос;
	ДанныеЗаписи.ПараметрыОтправки = ПараметрыОтправкиHTTPЗапросов;
	ДанныеЗаписи.HTTPМетод         = "GET";
	ЛогированиеЗапросовИСМП.Вывести(ДанныеЗаписи);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИСМП.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИСМП.Вывести(ДанныеЗаписи);
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ПараметрыОтправкиHTTPЗапросов.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "GET");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ВремяОжиданияСледующегоЗапроса = ИнтерфейсСУЗ.ВремяОжиданияСледующегоЗапросаСУЗ(ПараметрыОтправкиHTTPЗапросов);
		Если ВремяОжиданияСледующегоЗапроса > 0 Тогда
			ИнтеграцияИС.Ожидать(ВремяОжиданияСледующегоЗапроса, ПараметрыОтправкиHTTPЗапросов);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДвоичныеДанные = ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(ТелоЗапроса) = Тип("Файл");
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено И Не ЭтоДвоичныеДанные И Не ЭтоФайл Тогда
		ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		Если HTTPМетод = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИСМП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса POST %1 в ИС МП %2'"),
				АдресЗапроса, ИнтерфейсИСМПКлиентСервер.АдресСервера()) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМППереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу, ТекстОшибки);
	КонецЕсли;
	
	ДанныеЗаписи                   = ЛогированиеЗапросовИСМП.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет   = HTTPЗапрос;
	ДанныеЗаписи.ПараметрыОтправки = ПараметрыОтправкиHTTPЗапросов;
	ДанныеЗаписи.HTTPМетод         = "GET";
	ЛогированиеЗапросовИСМП.Вывести(ДанныеЗаписи);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИСМП.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИСМП.Вывести(ДанныеЗаписи);
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ПараметрыОтправкиHTTPЗапросов.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	ЛогированиеЗапросовИСМП.ВывестиДанныеДляПротоколаОбмена(ВозвращаемоеЗначение);

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СУЗ

// Возвращает доступные для текущего рабочего места настройки обмена с СУЗ на клиенте и на сервере
//
// Параметры:
//  Организации - Массив, ОпределяемыйТип.Организация - Организации для обмена.
//  ДатыПоследнегоЗапуска - Соответствие - Даты последнего запуска обменов на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбменНаСервере - Соответствие - Настройки обмена на сервере, см. функцию ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ()
//   * ОбменНаКлиенте - Соответствие - Настройки обмена на клиенте, см. функцию ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ()
//   * БезНастроек - Массив Из ОпределяемыйТип.Организация - Организации для которых нет настроек обмена.
Функция НастройкиОбменаСУЗ(Организации = Неопределено, ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	ОбменНаКлиентеПоРасписанию = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизаций.Ссылка КАК Организация,
	|	
	|	ВЫБОР КОГДА НастройкиОбменаСУЗ.Организация ЕСТЬ NULL
	|		И ОбщиеНастройкиОбменаСУЗ.Организация ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаСУЗ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК СтанцияУправленияЗаказами,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Идентификатор,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами.ФорматОбмена
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами.ФорматОбмена
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФорматОбмена,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Адрес
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Адрес
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Сервер,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ИспользоватьЗащищенноеСоединение,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Порт
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Порт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порт,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Таймаут
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Токен
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Токен
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Токен,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИдентификаторСоединения ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИдентификаторСоединения
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИдентификаторСоединения ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИдентификаторСоединения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИдентификаторСоединения,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ПроизводственныйОбъект ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ПроизводственныйОбъект
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъект ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъект
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК ПроизводственныйОбъект,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИмяПользователя
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИмяПользователя
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИмяПользователя,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаСервере
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию
	|		ИНАЧЕ 1000
	|	КОНЕЦ КАК ПолучатьКодовЗаИтерацию,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе
	|		ИНАЧЕ 25000
	|	КОНЕЦ КАК МаксимальноеКоличествоКодовВЗаказе
	|ИЗ
	|	&ПолноеИмяСправочникаОрганизации КАК КлассификаторОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ
	|		ПО КлассификаторОрганизаций.Ссылка = НастройкиОбменаСУЗ.Организация
	|		И НастройкиОбменаСУЗ.РабочееМесто = &РабочееМесто
	|		И НЕ НастройкиОбменаСУЗ.ОбменНаСервере
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗ КАК ОбщиеНастройкиОбменаСУЗ
	|		ПО КлассификаторОрганизаций.Ссылка = ОбщиеНастройкиОбменаСУЗ.Организация
	|		И ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере
	|");
	
	ПустаяСсылкаНаОрганизацию = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Организация"); // ОпределяемыйТип.Организация
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "&ПолноеИмяСправочникаОрганизации",
		ПустаяСсылкаНаОрганизацию.Метаданные().ПолноеИмя());
	
	Если Организации <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"И КлассификаторОрганизаций.Ссылка В(&Организации)";
	КонецЕсли;
	
	Если ОбменНаКлиентеПоРасписанию Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И ВЫБОР
		|	КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС +
	"УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСоединения УБЫВ";
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("Организации",  Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбменНаКлиентеПоРасписаниюТребуется = Ложь;
		Если ОбменНаКлиентеПоРасписанию Тогда
			Если Выборка.ОбменНаКлиентеПоРасписанию Тогда
				Расписание = Выборка.ОбменНаКлиентеРасписание.Получить();
				Если Расписание <> Неопределено Тогда
					ДатаПоследнегоЗапуска = ДатыПоследнегоЗапуска.Получить(Выборка.ОрганизацияЕГАИС);
					Если ДатаПоследнегоЗапуска = Неопределено
						Или Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса(), ДатаПоследнегоЗапуска) Тогда
						ОбменНаКлиентеПоРасписаниюТребуется = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбменНаКлиентеПоРасписанию
			И Не ОбменНаКлиентеПоРасписаниюТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЕстьНастройкиОбменаСУЗ Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = Выборка.Сервер;
			НастройкаОбменаСУЗ.Порт                             = Выборка.Порт;
			НастройкаОбменаСУЗ.Таймаут                          = Выборка.Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = Выборка.ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = Выборка.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = Выборка.Идентификатор;
			НастройкаОбменаСУЗ.Токен                            = Выборка.Токен;
			НастройкаОбменаСУЗ.ФорматОбмена                     = Выборка.ФорматОбмена;
			НастройкаОбменаСУЗ.ИмяПользователя                  = Выборка.ИмяПользователя;
			НастройкаОбменаСУЗ.ИдентификаторСоединения          = Выборка.ИдентификаторСоединения;
			НастройкаОбменаСУЗ.Организация                      = Выборка.Организация;
			НастройкаОбменаСУЗ.ПроизводственныйОбъект           = Выборка.ПроизводственныйОбъект;
			
			Если ЗначениеЗаполнено(Выборка.ПолучатьКодовЗаИтерацию) Тогда
				НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию = Выборка.ПолучатьКодовЗаИтерацию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МаксимальноеКоличествоКодовВЗаказе) Тогда
				НастройкаОбменаСУЗ.МаксимальноеКоличествоКодовВЗаказе = Выборка.МаксимальноеКоличествоКодовВЗаказе;
			КонецЕсли;
			
			Если Выборка.ОбменНаСервере Тогда
				НастройкиПоОрганизации = ВозвращаемоеЗначение.ОбменНаСервере.Получить(Выборка.Организация);
				Если НастройкиПоОрганизации = Неопределено Тогда
					НастройкиПоОрганизации = Новый Массив();
					ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.Организация, НастройкиПоОрганизации);
				КонецЕсли;
				НастройкиПоОрганизации.Добавить(НастройкаОбменаСУЗ);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(Выборка.Организация, НастройкаОбменаСУЗ);
			КонецЕсли;
			
		Иначе
			
			Если Организации <> Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.Организация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Организации <> Неопределено Тогда
		
		Если ТипЗнч(Организации) = Тип("Массив") Тогда
			ОрганизацииДляПроверки = Организации;
		Иначе
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(Организации);
		КонецЕсли;
		
		Для Каждого Организация Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаКлиенте.Получить(Организация) = Неопределено
				И (ВозвращаемоеЗначение.ОбменНаСервере.Получить(Организация) = Неопределено
					Или ВозвращаемоеЗначение.ОбменНаСервере.Получить(Организация).Количество() = 0)
				И ВозвращаемоеЗначение.БезНастроек.Найти(Организация) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Организация);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ФормаУточненияДанныхКодаМаркировки

Процедура НастроитьШаблоныФормыУточненияДанных(Форма, ВидПродукции) Экспорт
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ВидПродукции);
	
	Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
		Форма.Элементы.ШаблонКодаМаркировки.СписокВыбора.Добавить(
			ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		Форма.ШаблонКодаМаркировки = ДоступныеШаблоны.Получить(0).Значение;
	ИначеЕсли ДоступныеШаблоны.Количество() > 1 Тогда
		Форма.Элементы.ШаблонКодаМаркировки.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
	Если Форма.ЭтоКодМаркировкиСоСрокомГодности Тогда
		Если Форма.Скоропортящаяся Тогда
			Форма.ШаблонКодаМаркировки = Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС;
		Иначе
			Форма.ШаблонКодаМаркировки = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДальнейшиеДействия

Функция НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействиеИСМП, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеИСМП", ДальнейшееДействиеИСМП) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ИСМП в форме документа.
// 
// Возвращаемое значение:
//  Массив - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru = 'Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru = 'Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru = 'Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействиеИСМП1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ВсеТребующиеДействияСписок = Новый СписокЗначений;
		ВсеТребующиеДействияСписок.ЗагрузитьЗначения(ВсеТребующиеДействия);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ВсеТребующиеОжиданияСписок = Новый СписокЗначений;
		ВсеТребующиеОжиданияСписок.ЗагрузитьЗначения(ВсеТребующиеОжидания);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеОжиданияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый СписокЗначений();
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область GTIN

// Проверяет на тестовый период текущую дату сеанса.
// 
// Параметры:
// 	ТекущиеДанные         - ДанныеФормыЭлементКоллекции - Текущая строка таблицы.
// 	Объект                - ДанныеФормыСтруктура        - Форма-источник события.
// 	ВключатьGTINНаОстатки - Булево - Определяет необходимость включения в состав остаточных GTIN.
// Возвращаемое значение:
// 	Массив из Строка - Значения GTIN.
Функция МассивЗначенийGTINДляВыбора(ТекущиеДанные, Объект, ВключатьGTINНаОстатки = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Номенклатура",   ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ТекущиеДанные.Характеристика);
	
	СписокЗапросов = Новый СписокЗначений;
	
	Если ВключатьGTINНаОстатки Тогда
		
		КодТНВЭД = ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(ТекущиеДанные.КодТНВЭД, Объект.ВидПродукции);
		
		Запрос.УстановитьПараметр("Организация",         Объект.Организация);
		Запрос.УстановитьПараметр("НачалоGTIN",          ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
		Запрос.УстановитьПараметр("КодТНВЭД",            КодТНВЭД);
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
			Запрос.УстановитьПараметр("ДлинаТНВЭД", 4);
		Иначе
			Запрос.УстановитьПараметр("ДлинаТНВЭД", 2);
		КонецЕсли;
		
		ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
			Объект.ВидПродукции, КодТНВЭД);
		
		Запрос.УстановитьПараметр("ИспользоватьВозрастнуюКатегорию", ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию);
		Запрос.УстановитьПараметр("ИспользоватьМодель",              ПараметрыОписанияОстатков.ИспользоватьМодель);
		Запрос.УстановитьПараметр("ИспользоватьНаименование",        ПараметрыОписанияОстатков.ИспользоватьНаименование);
		Запрос.УстановитьПараметр("ИспользоватьСпособВводаВОборот",  ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот);
		Запрос.УстановитьПараметр("ИспользоватьЦелевойПол",          ПараметрыОписанияОстатков.ИспользоватьЦелевойПол);
		Запрос.УстановитьПараметр("ИспользоватьТоварныйЗнак",        ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак);
		
		Запрос.УстановитьПараметр("Номенклатура",        ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",      ТекущиеДанные.Характеристика);
		Запрос.УстановитьПараметр("ЦелевойПол",          ТекущиеДанные.ЦелевойПол);
		Запрос.УстановитьПараметр("Модель",              ТекущиеДанные.Модель);
		Запрос.УстановитьПараметр("ВозрастнаяКатегория", ТекущиеДанные.ВозрастнаяКатегория);
		Запрос.УстановитьПараметр("СпособВводаВОборот",  ТекущиеДанные.СпособВводаВОборот);
		Запрос.УстановитьПараметр("ТоварныйЗнак",        ТекущиеДанные.ТоварныйЗнак);
		Запрос.УстановитьПараметр("Наименование",        ТекущиеДанные.Наименование);
		
		СписокЗапросов.Добавить("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	ИСТИНА                                      КАК ЭтоМаркировкаОстатков
		|ИЗ
		|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка
		|	ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка
		|ГДЕ
		|	ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN, 1, 3) = &НачалоGTIN
		|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
		|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Организация        = &Организация
		|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Проведен
		|	И ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
		|	И ВЫБОР КОГДА &ИспользоватьНаименование
		|		ТОГДА 
		|		ВЫБОР КОГДА &Наименование = """"
		|			ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура      = &Номенклатура
		|				  И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика  = &Характеристика
		|			ИНАЧЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Наименование      = &Наименование
		|			КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
		|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ЦелевойПол = &ЦелевойПол
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьМодель
		|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Модель = &Модель
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
		|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ВозрастнаяКатегория = &ВозрастнаяКатегория
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьСпособВводаВОборот
		|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособВводаВОборот = &СпособВводаВОборот
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
		|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак = &ТоварныйЗнак
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КэшОписанияОстатковИСМП.GTIN,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатковИСМП
		|ГДЕ
		|	КэшОписанияОстатковИСМП.Организация = &Организация
		|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
		|		ТОГДА КэшОписанияОстатковИСМП.ЦелевойПол = &ЦелевойПол
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьМодель
		|		ТОГДА КэшОписанияОстатковИСМП.Модель = &Модель
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
		|		ТОГДА КэшОписанияОстатковИСМП.ВозрастнаяКатегория = &ВозрастнаяКатегория
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
		|		ТОГДА КэшОписанияОстатковИСМП.ТоварныйЗнак = &ТоварныйЗнак
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И ВЫБОР КОГДА &ИспользоватьНаименование И &Наименование <> """"
		|		ТОГДА КэшОписанияОстатковИСМП.Представление = &Наименование
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И КэшОписанияОстатковИСМП.СпособВводаВОборот = &СпособВводаВОборот
		|	И (ПОДСТРОКА(КэшОписанияОстатковИСМП.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
		|	ИЛИ КэшОписанияОстатковИСМП.КодТНВЭД = """")
		|",
		"GTIN");
		
	Иначе
		
		МассивТекстовЗапросов = Новый Массив();
		МассивТекстовЗапросов.Добавить(
		"ВЫБРАТЬ
		|	"""" КАК GTIN
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ГДЕ
		|	ЛОЖЬ");
		
		ИнтеграцияИСМППереопределяемый.ДополнитьПараметрыЗапросаПриНачалеВыбораGTIN(
			ТекущиеДанные,
			Объект,
			Запрос,
			МассивТекстовЗапросов);
			
		ТекстЗапроса = СтрСоединить(
			МассивТекстовЗапросов,
			"
			|ОБЪЕДИНИТЬ
			|");
			
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблица.GTIN КАК GTIN,
		|	ЛОЖЬ                  КАК ЭтоМаркировкаОстатков
		|ИЗ ВременнаяТаблица";
		
		СписокЗапросов.Добавить(ТекстЗапроса, "GTIN");
		
	КонецЕсли;
	
	СписокЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОписаниеGTINИС.GTIN,
	|	ОписаниеGTINИС.ВидУпаковки
	|ИЗ
	|	РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС",
	"ВидыУпаковок");
	
	РезультатЗапроса           = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса["GTIN"].Выбрать();
	ВыборкаВидУпаковки         = РезультатЗапроса["ВидыУпаковок"].Выбрать();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "Шаблон") Тогда
		ВидУпаковки = ИнтеграцияИСМПСлужебныйКлиентСервер.ВидУпаковкиПоШаблонуКодаМаркировки(ТекущиеДанные.Шаблон);
	Иначе
		ВидУпаковки = Неопределено;
	КонецЕсли;
	
	СоответствиеВидуУпаковки = Новый Соответствие();
	
	Пока ВыборкаВидУпаковки.Следующий() Цикл
		СоответствиеВидуУпаковки.Вставить(ВыборкаВидУпаковки.GTIN, ВыборкаВидУпаковки.ВидУпаковки);
	КонецЦикла;
	
	МассивGTIN = Новый Массив();
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ВыборкаИзРезультатаЗапроса.GTIN);
		Если Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодированиеИСКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN) Тогда
			Если Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN) Тогда
				Продолжить;
			ИначеЕсли Не ВключатьGTINНаОстатки И ВыборкаИзРезультатаЗапроса.ЭтоМаркировкаОстатков Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВидУпаковкиПоGTIN = СоответствиеВидуУпаковки.Получить(GTIN);
		Если ВидУпаковкиПоGTIN = Перечисления.ВидыУпаковокИС.Логистическая
			Или ЗначениеЗаполнено(ВидУпаковкиПоGTIN)
			И ЗначениеЗаполнено(ВидУпаковки)
			И ВидУпаковкиПоGTIN <> ВидУпаковки Тогда
			Продолжить;
		КонецЕсли;
		
		МассивGTIN.Добавить(GTIN);
		
	КонецЦикла;
	
	Возврат МассивGTIN;
	
КонецФункции

#КонецОбласти

#Область XDTO

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект XDTO
//  ИмяТипа             - Строка     - Имя типа.
//  ИспользоватьОтступы - Булево     - Использование отступов.
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа = "Файл", ИспользоватьОтступы = Ложь) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ИнтеграцияИС.ПараметрыФорматированияXML(ИспользоватьОтступы));
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстыИсключения = Новый Массив();
	ТекстыИсключения.Добавить("d2p1:");
	ТекстыИсключения.Добавить("d4p1:");
	ТекстыИсключения.Добавить("xmlns=""""");
	ТекстыИсключения.Добавить("xmlns=""http://www.w3.org/2001/XMLSchema""");
	ТекстыИсключения.Добавить("xmlns:xs=""http://www.w3.org/2001/XMLSchema""");
	ТекстыИсключения.Добавить("xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""");
	ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO.ТипыМОТП.ПространствоИмен));
	ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO.АгрегацияМОТП.ПространствоИмен));
	ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO.ВыбытиеМОТП.ПространствоИмен));
	ТекстыИсключения.Добавить(СтрШаблон("xmlns=""%1""",      Метаданные.ПакетыXDTO.АгрегацияМОТП.ПространствоИмен));
	ТекстыИсключения.Добавить(СтрШаблон("xmlns=""%1""",      Метаданные.ПакетыXDTO.ВыбытиеМОТП.ПространствоИмен));
	
	Для Каждого СтрокаПоиска Из ТекстыИсключения Цикл
		Если ИспользоватьОтступы Тогда
			ТекущаяСтрокаПоиска = СтрокаПоиска + Символы.ПС;
		Иначе
			ТекущаяСтрокаПоиска = СтрокаПоиска;
		КонецЕсли;
		ТекстXML = СтрЗаменить(ТекстXML, ТекущаяСтрокаПоиска, "");
	КонецЦикла;
	
	Возврат ТекстXML;
	
КонецФункции

#КонецОбласти

// Проверяет что регистрация оборота маркируемой продукции переданного вида производится в тестовом режиме на текущую дату.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
//  Булево - Истина, если в системе установлен признак ведения учета по переданному виду маркируемой продукции и текущая дата менее даты обязательной регистрации.
//
Функция ЭтоТестовыйПериод(ВидМаркируемойПродукции) Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ТестоваяРегистрацияОборотаМаркируемойПродукции(
		ВидМаркируемойПродукции, НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

Функция ВидыПродукцииТестовогоПериода() Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

Функция ВидыПродукцииОбязательнойМаркировки() Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииОбязательнойМаркировки(НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

Функция ИспользуемыеВидыМаркируемойПродукцииИСМП() Экспорт
	
	ВидыМаркируемойПродукции = Новый Массив;
	
	ВидыПродукцииИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Для Каждого ВидПродукции Из ВидыПродукцииИСМП Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыМаркируемойПродукции;
	
КонецФункции

// Получает контрагентов по массиву ИНН.
//
//Параметры:
//   КоллекцияИНН - Массив - список ИНН контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                          - ИНН контрагента.
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - элемент справочника.
Функция КонтрагентыПоСпискуИНН(КоллекцияИНН) Экспорт
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, СоответствиеИННКонтрагентам);
	
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

// Получает контрагентов по массиву налоговых номеров, для юр.лиц за пределами РФ.
//
//Параметры:
//   КоллекцияНалоговыхНомеров - Массив - список налоговых номеров контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                          - налоговый номер контрагента.
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - элемент справочника.
Функция КонтрагентыПоСпискуНалоговыхНомеров(КоллекцияНалоговыхНомеров) Экспорт
	
	СоответствиеНалоговыхНомеровКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, СоответствиеНалоговыхНомеровКонтрагентам);
	
	Возврат СоответствиеНалоговыхНомеровКонтрагентам;
	
КонецФункции

// Получает контрагентов по массиву ИНН.
//
//Параметры:
//   КоллекцияИНН - Массив - список ИНН контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                                     - ИНН контрагента.
//    * Значение - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - элемент справочника.
Функция ОрганизацииПоСпискуИНН(КоллекцияИНН) Экспорт
	
	СоответствиеИННОрганизациям = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, СоответствиеИННОрганизациям);
	
	Возврат СоответствиеИННОрганизациям;
	
КонецФункции

//Определяет контрагента по ИНН.
//
// Параметры:
//   ИНН - Строка - ИНН контрагента.
//
//Возвращаемое значение:
//   ОпределяемыйТип.КонтрагентГосИС - Контрагент, найденный по ИНН.
//
Функция КонтрагентПоИНН(ИНН) Экспорт
	
	МассивИНН = Новый Массив;
	МассивИНН.Добавить(ИНН);
	КонтрагентыПоИНН = КонтрагентыПоСпискуИНН(МассивИНН);
	
	Возврат КонтрагентыПоИНН.Получить(ИНН);
	
КонецФункции

//Определяет контрагента по налоговому номеру для юр. лиц, за пределами РФ.
//
// Параметры:
//   НалоговыйНомер - Строка - Налоговы йНомер контрагента.
//
//Возвращаемое значение:
//   ОпределяемыйТип.КонтрагентГосИС - Контрагент, найденный по НалоговыйНомер.
//
Функция КонтрагентПоНалоговомуНомеру(НалоговыйНомер) Экспорт
	
	МассивНалоговыхНомеров = Новый Массив;
	МассивНалоговыхНомеров.Добавить(НалоговыйНомер);
	
	КонтрагентыПоНалоговомуНомеру = КонтрагентыПоСпискуНалоговыхНомеров(МассивНалоговыхНомеров);
	
	Возврат КонтрагентыПоНалоговомуНомеру.Получить(НалоговыйНомер);
	
КонецФункции


#Область РасхожденияПоКодамМаркировки

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализиоватьОчередьСообщений()

	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	ОчередьСообщений.Колонки.Добавить("СообщениеОснование");
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	ОчередьСообщений.Колонки.Добавить("ВидПродукции");
	ОчередьСообщений.Колонки.Добавить("Операция");
	ОчередьСообщений.Колонки.Добавить("Назначение");
	ОчередьСообщений.Колонки.Добавить("СтанцияУправленияЗаказами");
	ОчередьСообщений.Колонки.Добавить("ПроизводственныйОбъект");
	
	// Источник
	ОчередьСообщений.Колонки.Добавить("Организация");
	ОчередьСообщений.Колонки.Добавить("Документ");
	ОчередьСообщений.Колонки.Добавить("ДокументОснование");
	
	// Описание, протокол и очередь
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("ПротоколОбмена");
	ОчередьСообщений.Колонки.Добавить("ДатаМодификацииУниверсальная", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЗаявки");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторПоследнегоБлокаКодов");
	
	// Временная техническая информация
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатус");
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатусОбработки");
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	// Индексы
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	ОчередьСообщений.Индексы.Добавить("СтанцияУправленияЗаказами, ИдентификаторЗаявки");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция ИнициализироватьЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	// Индексы
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	
	Возврат ЗависимостиСообщений;
	
КонецФункции

#КонецОбласти