
////////////////////////////////////////////////////////////////////////////////
// Универсальные методы для формы записи регистра и формы настройки налогов
//
// Серверные вызовы методов формы записи регистра сведений НастройкиУчетаУСН
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция НастройкиСистемыНалогообложения(Организация, Период, СписокНедействующихНастроек = Неопределено) Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо(Организация));
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период)
		Или (СписокНедействующихНастроек <> Неопределено
			И СписокНедействующихНастроек.НайтиПоЗначению("ПрименяетсяУСНДоходы") <> Неопределено);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
		Или (СписокНедействующихНастроек <> Неопределено
			И СписокНедействующихНастроек.НайтиПоЗначению("ПрименяетсяУСНДоходыМинусРасходы") <> Неопределено);
	
	ПрименяетсяПрогрессивнаяШкала = (Период >= УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы());
	
	СтавкиПоУмолчанию = УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию(Период);
	Если ПрименяетсяУСНДоходы Тогда
		СтавкаНалогаПовышенная = СтавкиПоУмолчанию.СтавкаУСНДоходыПовышенная;
	ИначеЕсли ПрименяетсяУСНДоходыМинусРасходы Тогда
		СтавкаНалогаПовышенная = СтавкиПоУмолчанию.СтавкаУСНДоходыМинусРасходыПовышенная;
	КонецЕсли;
		
	Настройки.Вставить("ПрименяетсяУСНДоходы",             ПрименяетсяУСНДоходы);
	Настройки.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Настройки.Вставить("ПлательщикЕНВД",                   УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)));
	Настройки.Вставить("СписокПатентов",                   СписокПатентов(Организация, Период));
	Настройки.Вставить("ПрименяетсяПрогрессивнаяШкалаУСН", ПрименяетсяПрогрессивнаяШкала);
	Настройки.Вставить("СтавкаНалогаУСНПовышенная",        СтавкаНалогаПовышенная);
	
	Возврат Настройки;
	
КонецФункции

Функция СписокВыбораОтраженияАвансов(Запись, СписокВыбора, СписокПатентов) Экспорт
	
	СписокВыбора.Очистить();
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Запись.Организация, Запись.Период) Тогда
		
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходУСН"),
			НСтр("ru = 'Доходы УСН'"));
		
		Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
			
			СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходКомитента"),
				НСтр("ru = 'Доходы комитента'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Запись.Организация, Запись.Период) Тогда
		
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходИП"),
			НСтр("ru = 'Доходы ИП'"));
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД(Запись.Организация, Запись.Период) Тогда
		
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходЕНВД"),
			НСтр("ru = 'Доходы ЕНВД'"));
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Запись.Организация, Запись.Период) Тогда
		
		Если ТипЗнч(СписокПатентов) = Тип("СписокЗначений") Тогда
			Для Каждого Патент Из СписокПатентов Цикл
				СписокВыбора.Добавить(Патент.Значение, Патент.Представление);
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Запись.ПорядокОтраженияАванса = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходПатент")
		И ЗначениеЗаполнено(Запись.Патент)
		И НЕ СписокВыбора.НайтиПоЗначению(Запись.Патент) = Неопределено Тогда
		
		Возврат Запись.Патент;
		
	ИначеЕсли ЗначениеЗаполнено(Запись.ПорядокОтраженияАванса)
		И НЕ СписокВыбора.НайтиПоЗначению(Запись.ПорядокОтраженияАванса) = Неопределено Тогда
		
		Возврат Запись.ПорядокОтраженияАванса;
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходУСН");
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеУчетнойПолитики(ИмяРегистра, Организация, Период) Экспорт
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период);
	
КонецФункции

Функция ЭтоЮрЛицо(Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоЮрЛицо;
	
КонецФункции

Функция СписокПатентов(Организация, Период) Экспорт
	
	СписокПатентов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",      Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    Период);
	Запрос.УстановитьПараметр("ДатаОкончания", НастройкиУчета.НайтиДатуОкончанияДействия(Период, Организация, "НастройкиСистемыНалогообложения"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.Наименование
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Патенты.ДатаНачала, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И НАЧАЛОПЕРИОДА(Патенты.ДатаОкончания, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеПорядкаОтраженияАвансов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Доходы по патенту ""%1""'"), Выборка.Наименование);
			
			СписокПатентов.Добавить(Выборка.Ссылка, ПредставлениеПорядкаОтраженияАвансов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокПатентов;
	
КонецФункции

Функция СрокиУплатыУСН(Организация, ЭтоЮрЛицо) Экспорт 
	
	СрокиУплатыУСН = Новый Структура;
	
	СрокиУплатыУСН.Вставить("ДатаУплатыУСНЗа2019Год", '00010101');
	СрокиУплатыУСН.Вставить("ДатаУплатыУСНЗа1Кв2020", '00010101');
	СрокиУплатыУСН.Вставить("ДатаУплатыУСНЗа2Кв2020", '00010101');
	СрокиУплатыУСН.Вставить("ДатаУплатыУСНЗа3Кв2020", '00010101');
	
	Настройки = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьМенеджерЗаписи();
	Настройки.Организация = Организация;
	Настройки.Прочитать();
	
	ЗаполнитьЗначенияСвойств(СрокиУплатыУСН, Настройки);
	
	Если ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа2019Год) 
		 И ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа1Кв2020) 
		 И ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа2Кв2020) 
		 И ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа3Кв2020) Тогда
		Возврат СрокиУплатыУСН;
	КонецЕсли;	
	
	ПериодПереносаСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПериодПереносаСроковНалоговОтчетов();
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.ИмяЗадачи       = "УСН";
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
	ОтборПравил.НачалоИнтервала = НачалоДня(ПериодПереносаСроков.Начало - 1); //под перенос также попадают события за период, который непосредственно предшествует периоду переноса  
	ОтборПравил.КонецИнтервала  = ПериодПереносаСроков.Окончание;
	
	Если ЭтоЮрЛицо Тогда 
		ОтборПравил.Правила.Добавить("2013_УплатаОрганизация");
	Иначе	
		ОтборПравил.Правила.Добавить("2013_УплатаПредприниматель");
	КонецЕсли;	
	
	ОтборПравил.Правила.Добавить("2013_УплатаАвансов");
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);

	Если ЗначениеЗаполнено(Расписание) Тогда
		
		Отбор = Новый Структура;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа2019Год) Тогда 
			
			// Налог за 2019 год
			Отбор.Вставить("ПериодСобытия", '20191231');
			Отбор.Вставить("Периодичность", Перечисления.Периодичность.Год);
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыУСН.ДатаУплатыУСНЗа2019Год = Макс(Результат[0].Срок, СрокиУплатыУСН.ДатаУплатыУСНЗа2019Год);
			КонецЕсли;	
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа1Кв2020) Тогда 
			
			// Аванс за 1 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200331');
			Отбор.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыУСН.ДатаУплатыУСНЗа1Кв2020 = Макс(Результат[0].Срок, СрокиУплатыУСН.ДатаУплатыУСНЗа1Кв2020);
			КонецЕсли;	
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа2Кв2020) Тогда 
					
			// Аванс за 2 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200630');
			Отбор.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыУСН.ДатаУплатыУСНЗа2Кв2020 = Макс(Результат[0].Срок, СрокиУплатыУСН.ДатаУплатыУСНЗа2Кв2020);
			КонецЕсли;
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СрокиУплатыУСН.ДатаУплатыУСНЗа3Кв2020) Тогда 
					
			// Аванс за 3 квартал 2020 года
			Отбор.Вставить("ПериодСобытия", '20200930');
			Отбор.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
			
			Результат = Расписание.НайтиСтроки(Отбор);
			Если Результат.Количество() > 0 Тогда
				СрокиУплатыУСН.ДатаУплатыУСНЗа3Кв2020 = Макс(Результат[0].Срок, СрокиУплатыУСН.ДатаУплатыУСНЗа3Кв2020);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СрокиУплатыУСН;
	
КонецФункции

#КонецОбласти
