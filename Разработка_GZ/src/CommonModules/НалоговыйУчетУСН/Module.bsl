
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕКВИЗИТАМИ УСН и ПСН В ПЕРВИЧНЫХ ДОКУМЕНТАХ

// Процедура переносит реквизиты КУДиР при копировании документов с учетом системы налогообложения,
// применяемой на дату нового документа
Процедура ПриКопированииДокумента(ДокументОбъект, ОбъектКопирования) Экспорт

	Если Не УчетнаяПолитика.Существует(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаКУДиР = Новый Структура("Графа4_УСН, Графа5_УСН, Графа6_УСН, Графа7_УСН,
									|НДС_УСН, ДоходыЕНВД_УСН, РасходыЕНВД_УСН");
	ЗаполнитьЗначенияСвойств(НастройкаКУДиР, ОбъектКопирования);
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		НастройкаКУДиР.Графа4_УСН      = 0;
		НастройкаКУДиР.Графа5_УСН      = 0;
		НастройкаКУДиР.Графа6_УСН      = 0;
		НастройкаКУДиР.Графа7_УСН      = 0;
		НастройкаКУДиР.НДС_УСН         = 0;
		НастройкаКУДиР.ДоходыЕНВД_УСН  = Ложь;
		НастройкаКУДиР.РасходыЕНВД_УСН = Ложь;
	ИначеЕсли Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		НастройкаКУДиР.Графа6_УСН      = 0;
		НастройкаКУДиР.Графа7_УСН      = 0;
		НастройкаКУДиР.НДС_УСН         = 0;
		НастройкаКУДиР.РасходыЕНВД_УСН = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);

КонецПроцедуры

// Процедура заполняет данные по УСН в платежных документах
//
// Параметры:
//
// ДокументОбъект -        объект (основной реквизит) формы; в процедуре устанавливаются реквизиты объекта и анализируются данные объекта
// ПараметрыУСН   -        Структура, содержит дополнительные параметры, требуемые для настройки отражения объекта в УСН;
//                         при вызове из форм можно заполнять из значений, кэшируемых в реквизитах формы, но не сохраняемые в Объекте.
//                         Состав структуры - см. функцию ПараметрыНастройкиУСН()
//
Процедура ЗаполнитьОтражениеДокументаВУСН(ДокументОбъект, ПараметрыУСН) Экспорт
	
	НастройкаКУДиР = Новый Структура("Графа4_УСН, Графа5_УСН, Графа6_УСН, Графа7_УСН,
		|НДС_УСН, ДоходыЕНВД_УСН, РасходыЕНВД_УСН");
	ЗаполнитьЗначенияСвойств(НастройкаКУДиР, ДокументОбъект);
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		НастройкаКУДиР.Графа4_УСН            = 0;
		НастройкаКУДиР.Графа5_УСН            = 0;
		НастройкаКУДиР.Графа6_УСН            = 0;
		НастройкаКУДиР.Графа7_УСН            = 0;
		НастройкаКУДиР.НДС_УСН               = 0;
		НастройкаКУДиР.ДоходыЕНВД_УСН        = Ложь;
		НастройкаКУДиР.РасходыЕНВД_УСН       = Ложь;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	// сумма для отражения в КУДиР
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Стоимость");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
		СуммаДляКУДиР = ДокументОбъект.Товары.Итог("СуммаВознаграждения");
	Иначе
		СуммаДляКУДиР = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СуммаДляКУДиР = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
									ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета,
									ПараметрыУСН.КурсДокумента, 1,
									ПараметрыУСН.КратностьДокумента, 1);
	КонецЕсли;

	Графа4_УСН      = 0;
	Графа5_УСН      = 0;
	Графа6_УСН      = 0;
	Графа7_УСН      = 0;
	ДоходыЕНВД_УСН  = Ложь;
	РасходыЕНВД_УСН = Ложь;

	//Поступление
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика //Доходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация) Тогда
		Графа4_УСН = 0;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) Тогда
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла;
			Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН");
		КонецЕсли;
		
		Графа4_УСН = СуммаДляКУДиР;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			
		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			И ОбъектДоходы Тогда

		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР + ДокументОбъект.СуммаУслуг;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		ИЛИ ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
		И ПараметрыУСН.НТТПоПродажнымЦенам Тогда

		Графа4_УСН = СуммаДляКУДиР;
		
		Если ПараметрыУСН.НТТНаЕНВД Тогда
			ДоходыЕНВД_УСН = Истина; 
			Графа5_УСН = 0;
		Иначе
			ДоходыЕНВД_УСН = Ложь;
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда

		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача)
			И ОбъектРасходы Тогда
	
		Графа6_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		
		Графа4_УСН = - СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда	
		
		Если ДокументОбъект.УдержатьВознаграждение Тогда
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли; 
		
	//Списание
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			И ОбъектДоходы Тогда //Доходы

		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
			И ОбъектДоходы Тогда

		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход)
			И ОбъектРасходы Тогда
			
		Графа6_УСН = СуммаДляКУДиР;
		
		Если ПараметрыУСН.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы
			И ЗначениеЗаполнено(ПараметрыУСН.СубконтоДт1)
			И ТипЗнч(ПараметрыУСН.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ВидПрочихРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУСН.СубконтоДт1, "ВидПрочихДоходовИРасходов");
			Если ВидПрочихРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда
				Графа7_УСН = СуммаДляКУДиР;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		
		Графа6_УСН = СуммаДляКУДиР;
		Графа7_УСН = СуммаДляКУДиР;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) И ОбъектРасходы Тогда
		
		Графа6_УСН = СуммаДляКУДиР;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов)
			И ОбъектРасходы Тогда
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла; 
		КонецЕсли;
		
		Графа6_УСН = СуммаДляКУДиР;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц)
			И ОбъектРасходы Тогда

		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла; 
		КонецЕсли;
		
		Графа6_УСН = СуммаДляКУДиР;

	КонецЕсли;
	
	НастройкаКУДиР.Графа4_УСН      = Графа4_УСН;
	НастройкаКУДиР.Графа5_УСН      = Графа5_УСН;
	НастройкаКУДиР.Графа6_УСН      = Графа6_УСН;
	НастройкаКУДиР.Графа7_УСН      = Графа7_УСН;
	НастройкаКУДиР.НДС_УСН         = 0;
	НастройкаКУДиР.ДоходыЕНВД_УСН  = ДоходыЕНВД_УСН;
	НастройкаКУДиР.РасходыЕНВД_УСН = РасходыЕНВД_УСН;
	
	// Устанавливаем параметры отражения УСН в документе
	ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);

КонецПроцедуры

Процедура ЗаполнитьДоходыРасходыВсего(ДокументОбъект, ПараметрыУСН) Экспорт

	НастройкаКУДиР = Новый Структура("Графа4_УСН, Графа6_УСН");
	ЗаполнитьЗначенияСвойств(НастройкаКУДиР, ДокументОбъект);
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		НастройкаКУДиР.Графа4_УСН            = 0;
		НастройкаКУДиР.Графа6_УСН            = 0;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	// сумма для отражения в КУДиР
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Стоимость");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
		СуммаДляКУДиР = ДокументОбъект.Товары.Итог("СуммаВознаграждения");
	Иначе
		СуммаДляКУДиР = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СуммаДляКУДиР = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
									ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета,
									ПараметрыУСН.КурсДокумента, 1,
									ПараметрыУСН.КратностьДокумента, 1);
	КонецЕсли;

	Графа4_УСН      = 0;
	Графа6_УСН      = 0;

	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика //Доходы
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		Графа4_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
			
		Графа4_УСН = СуммаДляКУДиР;
		
	ИначеЕсли ОбъектДоходы 
		И ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда

		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда

		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда	 
		
		Графа4_УСН = 0;
		
	//Списание
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		
		Графа4_УСН = - СуммаДляКУДиР;
		
	ИначеЕсли ОбъектДоходы
		И (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) Тогда //Доходы

		Графа4_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли ОбъектРасходы 
		И (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) Тогда
		
		Графа6_УСН = СуммаДляКУДиР;
		
	КонецЕсли;
	
	НастройкаКУДиР.Графа4_УСН      = Графа4_УСН;
	НастройкаКУДиР.Графа6_УСН      = Графа6_УСН;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);

КонецПроцедуры 

Процедура ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, Параметры) Экспорт
	
	ДанныеСтрокиТЧ = Новый Структура("ДоходыУСН, РасходыУСН, НДСУСН, РаспределятьРасходыУСН, СчетУчетаРасчетовСКонтрагентом, ВидПлатежаПоКредитамЗаймам");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТЧ, СтрокаТЧ);
	
	СуммаНУ = СтрокаТЧ.СуммаПлатежа;
	Если Не Параметры.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		СуммаНУ = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНУ,
												Параметры.ВалютаДокумента, Параметры.ВалютаРегламентированногоУчета,
												Параметры.КурсДокумента, 1,
												Параметры.КратностьДокумента, 1);
	КонецЕсли; 
	
	ЕстьРасчетыПоДоходамУСН  = УчетУСН.ЕстьПрочиеРасчетыПоДоходам(Параметры.ВидОперации);
	ЕстьРасчетыПоРасходамУСН = УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Параметры.ВидОперации);
	ЕстьКредитыИЗаймыУСН     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Параметры.ВидОперации);
	ЕстьЗаймыПолученные      = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитамПолученным(Параметры.ВидОперации);
	ЕстьЗаймыВыданные        = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитамВыданным(Параметры.ВидОперации);
	
	Если Не Параметры.ПрименениеУСН Тогда
		Если ЕстьРасчетыПоДоходамУСН Тогда
			ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
		ИначеЕсли ЕстьРасчетыПоРасходамУСН Тогда
			ДанныеСтрокиТЧ.РасходыУСН = 0;
			ДанныеСтрокиТЧ.НДСУСН     = 0;
			ДанныеСтрокиТЧ.РаспределятьРасходыУСН = Ложь;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТЧ);
		Возврат;
	КонецЕсли; 
	
	Если ЕстьРасчетыПоДоходамУСН Тогда
		// по умолчанию доходы принимаются в полной сумме, за исключением поступления кредита или займа
		Если ЕстьЗаймыПолученные Тогда
			ДанныеСтрокиТЧ.ДоходыУСН = 0;
		ИначеЕсли ЕстьЗаймыВыданные Тогда
			ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;	
		ИначеЕсли ЕстьКредитыИЗаймыУСН Тогда
			
			Если ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал Тогда
				ДанныеСтрокиТЧ.ДоходыУСН = 0;
			Иначе
				ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
			КонецЕсли;
			
		Иначе
			ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
		КонецЕсли; 
		
	ИначеЕсли ЕстьРасчетыПоРасходамУСН Тогда
		
		// по умолчанию расходы не принимаются, за исключением уплаты процентов по кредитам и займам
		ДанныеСтрокиТЧ.РасходыУСН = 0;
		ДанныеСтрокиТЧ.НДСУСН     = 0;
		ДанныеСтрокиТЧ.РаспределятьРасходыУСН = Ложь;
		
		Если НЕ Параметры.ПрименениеУСНДоходы И ЕстьЗаймыПолученные Тогда
			Если ЗначениеЗаполнено(ДанныеСтрокиТЧ.ВидПлатежаПоКредитамЗаймам) И
				ДанныеСтрокиТЧ.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов Тогда
				
			    ДанныеСтрокиТЧ.РасходыУСН = СуммаНУ;
            КонецЕсли;			
		ИначеЕсли НЕ Параметры.ПрименениеУСНДоходы И ЕстьЗаймыВыданные Тогда
			ДанныеСтрокиТЧ.РасходыУСН = 0;	
		ИначеЕсли НЕ Параметры.ПрименениеУСНДоходы И ЕстьКредитыИЗаймыУСН Тогда
		
			Если ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал Тогда
				ДанныеСтрокиТЧ.РасходыУСН = СуммаНУ;
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТЧ);
	
КонецПроцедуры

// Устарела. Следует использовать функцию УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию.
//
Функция ПорядокОтраженияАванса(Организация, Период) Экспорт
	
	Возврат УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(Организация, Период);
	
КонецФункции

// Устарела. Следует использовать функцию УчетПСН.ДеятельностьНаПатентеПоУмолчанию.
//
Функция ДеятельностьНаПатентеПоУмолчанию(Организация, Период) Экспорт
	
	Возврат УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Организация, Период);
	
КонецФункции

// Процедура заполняет содержание записи КУДиР для операций,
// при которых оно отображается на форме документа
//
Процедура ЗаполнитьОтображаемоеСодержаниеКУДиР(ДокументОбъект, ПараметрыУСН) Экспорт
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		ДокументОбъект.Содержание_УСН = "";
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = НЕ ПараметрыУСН.ПрименениеУСНДоходы;

	Содержание_УСН = СокрЛП(ВидОперации) + ".";

	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
			
		Если ЗначениеЗаполнено(ПараметрыУСН.СтатьяДвиженияДенежныхСредств) Тогда
			Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Прочий приход денежных средств: %1.", ПараметрыУСН.СтатьяДвиженияДенежныхСредств);
		Иначе
		    Содержание_УСН = "Прочий приход денежных средств.";
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда
		
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Прием розничной выручки с торговой точки ""%1"".", ДокументОбъект.Контрагент);
		
	//Списание
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход)
		И ОбъектРасходы Тогда
		
		Если ЗначениеЗаполнено(ПараметрыУСН.СтатьяДвиженияДенежныхСредств) Тогда
			Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Прочий расход денежных средств: %1.", ПараметрыУСН.СтатьяДвиженияДенежныхСредств);
		Иначе
		    Содержание_УСН = "Прочий расход денежных средств.";
		КонецЕсли; 
		
		Если ПараметрыУСН.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы
			И ЗначениеЗаполнено(ПараметрыУСН.СубконтоДт1)
			И ТипЗнч(ПараметрыУСН.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ВидПрочихРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУСН.СубконтоДт1, "ВидПрочихДоходовИРасходов");
			Если ВидПрочихРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда
				Содержание_УСН = "Расходы, связанные с оплатой услуг, оказываемых кредитными организациями.";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		
		Содержание_УСН = "Расходы, связанные с оплатой услуг, оказываемых кредитными организациями.";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			Или ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога)
			И ОбъектРасходы Тогда
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(ПараметрыУСН.Налог);
		Содержание_УСН = ?(Не ПустаяСтрока(НазначениеПлатежа), НазначениеПлатежа, НСтр("ru = 'Уплата налога'"));
		
	КонецЕсли;
	
	ДокументОбъект.Содержание_УСН  = Содержание_УСН;

КонецПроцедуры

// Процедура формирует содержание записи КУДиР для операций,
// при которых редактирование содержания пользователем недоступно
//
Функция СодержаниеОперацииДляКУДиР(ПараметрыУСН) Экспорт
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		Возврат "";
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	Содержание_УСН = СокрЛП(ВидОперации) + ".";
	
	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Прием розничной выручки с торговой точки ""%1"".", ПараметрыУСН.Контрагент);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
			Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
			Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			Или ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
			Или ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
			Или ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты по кредитам и займам с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Поступление денежных документов. Принято от ""%1"".", НаименованиеКонтрагентаНаПечать(ПараметрыУСН.Контрагент, ПараметрыУСН.Дата));

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Поступление денежных документов. Принято от ""%1"".", ПараметрыУСН.ПринятоОт);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Выдача денежных документов. Выдано ""%1"".", ПараметрыУСН.Выдано);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Возврат денежных документов контрагенту ""%1"".", НаименованиеКонтрагентаНаПечать(ПараметрыУСН.Контрагент, ПараметрыУСН.Дата));

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда
		Содержание_УСН = "Комиссионное вознаграждение удержано из выручки комитента.";
		
	//Списание
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
			Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
			Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
			Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
			Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту)
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты по кредитам и займам с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);
			
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц)
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			Или ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога)
			И ОбъектРасходы Тогда
			
		НазначениеПлатежа = ОписаниеНалоговогоПлатежа(
			ПараметрыУСН.СчетУчетаРасчетовСКонтрагентом,
			ПараметрыУСН.СубконтоДт1,
			ПараметрыУСН.НалоговыйПериод);
		Содержание_УСН = ?(Не ПустаяСтрока(НазначениеПлатежа), НазначениеПлатежа, НСтр("ru = 'Уплата налога'"));
		
	КонецЕсли;
	
	Возврат Содержание_УСН;

КонецФункции

//Возвращает реквизиты первичного документа для занесения в графу 2 КУДиР
//
Функция РеквизитыПервичногоДокумента(Документ, Организация = Неопределено, Знач ДатаЗаписи = Неопределено) Экспорт
	
	РеквизитыДокумента = ДанныеПервичногоДокумента(Документ, Организация);
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		ДатаДокумента  = ?(ЗначениеЗаполнено(РеквизитыДокумента.Дата),
			РеквизитыДокумента.Дата,
			РеквизитыДокумента.ДатаРегистратора);
		НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.Номер),
			РеквизитыДокумента.Номер,
			РеквизитыДокумента.НомерРегистратора);
		
		Если НЕ ЗначениеЗаполнено(ДатаЗаписи) Тогда
			ДатаЗаписи = РеквизитыДокумента.ДатаРегистратора;
		КонецЕсли;
		
		Возврат УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(ДатаДокумента, НомерДокумента, ДатаЗаписи);
		
	Иначе
		// Ошибка регистрации документа в РС ДанныеПервичныхДокументов, ничего не делаем
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеДокумента(Документ, Организация = Неопределено)
	
	РеквизитыДокумента = ДанныеПервичногоДокумента(Документ, Организация);
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		ДатаДокумента  = ?(ЗначениеЗаполнено(РеквизитыДокумента.Дата),
			РеквизитыДокумента.Дата,
			РеквизитыДокумента.ДатаРегистратора);
		НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыДокумента.Номер),
			РеквизитыДокумента.Номер,
			РеквизитыДокумента.НомерРегистратора);
		
		ДанныеДокумента = Новый Структура("Дата, Номер", ДатаДокумента, НомерДокумента);
		
		НазваниеДокумента = Документ.Метаданные().Синоним;
		
		Возврат ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ДанныеДокумента, НазваниеДокумента);
		
	Иначе
		// Ошибка регистрации документа в РС ДанныеПервичныхДокументов, ничего не делаем
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ДанныеПервичногоДокумента(ДокументСсылка, ОрганизацияДокумента = Неопределено)
	
	Перем РеквизитыДокумента;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.ДатаРегистратора,
	|	ДанныеПервичныхДокументов.НомерРегистратора
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	&УсловиеПоОрганизации
	|	И ДанныеПервичныхДокументов.Документ = &Ссылка"
	;
	
	Если ЗначениеЗаполнено(ОрганизацияДокумента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&УсловиеПоОрганизации",
			"ДанныеПервичныхДокументов.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", ОрганизацияДокумента);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&УсловиеПоОрганизации",
			"ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыДокумента = Новый Структура("Дата, Номер, ДатаРегистратора, НомерРегистратора");
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыДокумента;
	
КонецФункции

//Дополняет таблицу списанных партий колонкой, с новым статусом списания и количеством
//списанным по новому статусу
Процедура ЗаполнитьОтражениеВНУпоСписанию(Реквизиты, ТаблицаСписанныхПартий, ВидОперации) Экспорт
	
	ДокументСсылка = Реквизиты.Ссылка;
	
	Если ТаблицаСписанныхПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("СтатусСписания");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("КоличествоПоСтатусуСписания");
	КонецЕсли;
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются, "СтатусСписания");
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(0, "КоличествоПоСтатусуСписания");

	//Подменим ссылку если документ - реализация отгруженной продукции
	Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка = Реквизиты.Ссылка.ДокументОтгрузки;
		КонецЕсли;
	КонецЕсли;

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;

	ТабличныеЧасти = Новый Массив;

	Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИспользованныеМатериалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("ИспользованныеМатериалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Материалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Материалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Товары");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецодежда") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Спецодежда");
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецоснастка") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("Спецоснастка");
		КонецЕсли;
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИнвентарьИХозяйственныеПринадлежности") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если ВидОперации = "ВозвратПоставщику" 
		ИЛИ (ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента) И (ДокументСсылка.ДеятельностьНаПатенте)) Тогда
		Для Каждого Строка Из ТаблицаСписанныхПартий Цикл
			Строка.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
			Строка.КоличествоПоСтатусуСписания = Строка.Количество;
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ТаблицаСписанныхПартий.Индексы.Добавить("Номенклатура");

	Если ВидОперации = "БезвозмезднаяПередача" Тогда
		Для Каждого Строка Из ТаблицаСписанныхПартий Цикл
			Строка.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
			Строка.КоличествоПоСтатусуСписания = Строка.Количество;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ПрименениеСпецрежимов = ПрименениеОсобыхРежимовНалогообложения(Реквизиты.Организация, Реквизиты.Дата);
	
	Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
		//Если отражение в НУ указывается явно
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТЧ) Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);

			Текст =

			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура";

			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

			Для Каждого Строка Из ТаблицаРезультата Цикл
				Если Строка.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются Тогда

					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",				Строка.Номенклатура);

					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;

					Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;

						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);

						Если Учесть = 0 Тогда
							Продолжить;
						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусСписания)
							ИЛИ (СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН) Тогда
							СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН;
							СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;

						Иначе
							НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

							НоваяСтрока.Количество = Учесть;
							НоваяСтрока.КоличествоПоСтатусуСписания = Учесть;
							НоваяСтрока.СтатусСписания = ?(ЗначениеЗаполнено(Строка.ОтражениеВУСН), Строка.ОтражениеВУСН, Перечисления.ОтражениеВУСН.НеПринимаются);

							СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Учесть;

						КонецЕсли;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			//Если реализация - выделяем реализованные по ЕНВД и устанавливаем им статус не принимаемых
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТЧ) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
			
			Текст =
			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура";
			
			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из ТаблицаРезультата Цикл
				Если ПрименениеСпецрежимов.ЕНВД
					И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
					
					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;
					
					Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);
						СтрокаТаблицы.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ЕНВД И УСН

Функция ПрименениеОсобыхРежимовНалогообложения(Организация, Период)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕНВД", УчетнаяПолитика.ПлательщикЕНВД(Организация, Период));
	Результат.Вставить("Патент", УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период));
	Результат.Вставить("ТорговыйСбор", УчетнаяПолитика.ПлательщикТорговогоСбора(Организация, Период));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Период = "Квартал", Способ = "БУ") Экспорт

	Коэфф = 0;
	НачальнаяДата = ?(Период = "Квартал", НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоГода(СтруктураШапкиДокумента.Дата));

	Если Способ = "БУ" Тогда
		Коэфф = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
			СтруктураШапкиДокумента.Организация, 
			НачальнаяДата,
			СтруктураШапкиДокумента.Дата);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачальнаяДата);
		Запрос.УстановитьПараметр("КонДата", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
		|	КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";

		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда

			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);

			Если Способ = "НУ" Тогда
				Коэфф = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот/(ДоходЕНВДОборот + Графа5Оборот));
			Иначе
				Коэфф = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот/Графа4Оборот);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Коэфф;

КонецФункции

Функция ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(СтруктураПараметров, НачДата, КонДата, База = "БУ")
	
	ТабКоэффициенты = Новый ТаблицаЗначений;
	ТабКоэффициенты.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТабКоэффициенты.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТабКварталов = Новый ТаблицаЗначений;
	ТабКварталов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТекПериод = НачалоКвартала(НачДата);
	Пока ТекПериод < КонДата Цикл		
		НоваяСтрока = ТабКварталов.Добавить();
		НоваяСтрока.Период = ТекПериод;
		ТекПериод = ДобавитьМесяц(ТекПериод, 3);
	КонецЦикла; 
	
	Если База = "БУ" Тогда
		
		ВключатьПрочиеДоходы = ?(УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности(СтруктураПараметров.Организация, КонДата)
		                         = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные, Истина, Ложь); 	
								 
		Запрос = Новый Запрос;
		
		// Массив счетов, по которым рассчитывается выручка
		СчетаВыручки = Новый Массив;
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
		
		Запрос.УстановитьПараметр("НачалоПериода",        НачалоКвартала(НачДата));
		Запрос.УстановитьПараметр("КонецПериода",         КонецКвартала(КонДата));
		Запрос.УстановитьПараметр("Организация",          СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("СчетаВыручки",         СчетаВыручки);
		Запрос.УстановитьПараметр("ВключатьПрочиеДоходы", ВключатьПрочиеДоходы);
		Запрос.УстановитьПараметр("ТаблицаПериодов",	  ТабКварталов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Период
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаВыручки
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаВыручки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаПрочиеДоходы
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ) КАК Период,
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ Выручка
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Квартал,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаВыручки.Счет
		|				ИЗ
		|					СчетаВыручки),
		|			,
		|			Организация = &Организация,
		|			НЕ КорСчет В
		|						(ВЫБРАТЬ
		|							СчетаВыручки.Счет
		|						ИЗ
		|							СчетаВыручки)
		|				И КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ) КАК Период,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК ПрочиеДоходыИРасходы,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ ПрочиеДоходы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Квартал,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаПрочиеДоходы.Счет
		|				ИЗ
		|					СчетаПрочиеДоходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			&ВключатьПрочиеДоходы
		|				И Организация = &Организация,
		|			НЕ КорСчет В
		|					(ВЫБРАТЬ
		|						СчетаПрочиеДоходы.Счет
		|					ИЗ
		|						СчетаПрочиеДоходы),
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПрочиеДоходыИРасходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодов.Период,
		|	СУММА(ЕСТЬNULL(Выручка.Всего, 0)) КАК Всего,
		|	СУММА(ЕСТЬNULL(Выручка.ОсобыйПорядок, 0)) КАК ОсобыйПорядок
		|ИЗ
		|	ТаблицаПериодов КАК ТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Выручка.Период КАК Период,
		|			Выручка.Сумма КАК Всего,
		|			ВЫБОР
		|				КОГДА ЕНВД.Счет ЕСТЬ NULL 
		|					ТОГДА 0
		|				ИНАЧЕ Выручка.Сумма
		|			КОНЕЦ КАК ОсобыйПорядок
		|		ИЗ
		|			Выручка КАК Выручка
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК ЕНВД
		|				ПО Выручка.Счет = ЕНВД.Счет
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ПрочиеДоходы.Период,
		|			ПрочиеДоходы.Сумма,
		|			ВЫБОР
		|				КОГДА ПрочиеДоходы.ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
		|					ТОГДА ПрочиеДоходы.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			ПрочиеДоходы КАК ПрочиеДоходы) КАК Выручка
		|		ПО ТаблицаПериодов.Период = Выручка.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Коэффициент = 0;
			
			Если Выборка.Всего = 0 ИЛИ Выборка.ОсобыйПорядок = 0 Тогда
				// Если нет определенности, то считаем, что все расходы относятся к деятельности на основной системе обложения
				Коэффициент = 0;
			Иначе
				Коэффициент = Выборка.ОсобыйПорядок / Выборка.Всего;
			КонецЕсли;
			
			НоваяСтрока = ТабКоэффициенты.Добавить();
			
			НоваяСтрока.Период = Выборка.Период;
			НоваяСтрока.Коэффициент = Коэффициент;
			
		КонецЦикла;
		
	Иначе
		// запрос по доходам НУ по периодам
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачалоКвартала(НачДата));
		Запрос.УстановитьПараметр("КонДата", КонецКвартала(КонДата));
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ТаблицаПериодов", ТабКварталов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Период
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодов.Период КАК Период,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0)) КАК Графа5Оборот,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот, 0)) КАК ДоходЕНВДОборот,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот, 0)) КАК Графа4Оборот
		|ИЗ
		|	ТаблицаПериодов КАК ТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (ТаблицаПериодов.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Период";
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			
			Коэффициент = 0;
			
			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);
			
			Если База = "НУ" Тогда
				Коэффициент = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот/(ДоходЕНВДОборот + Графа5Оборот));
			Иначе
				Коэффициент = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот/Графа4Оборот);
			КонецЕсли;
			
			НоваяСтрока = ТабКоэффициенты.Добавить();
			
			НоваяСтрока.Период = Результат.Период;
			НоваяСтрока.Коэффициент = Коэффициент;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабКоэффициенты;	

КонецФункции // ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам()

//Определяет долю выручки, не включаемую в доходы разделяя ее на выручку комитента
//и выручку по деятельности ЕНВД
Функция ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаСписанныхПартий = Неопределено, ДвиженияРегистров = Неопределено, ВидОперации = "Оплата", ДоговорДляОтложенногоПроведения = Неопределено)
	
	ПрименениеСпецрежимов = ПрименениеОсобыхРежимовНалогообложения(
		СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Дата);
	
	ВыручкаВсего          = 0;
	ВыручкаСобственныйНДС = 0;
	ВыручкаЕНВД           = 0;
	ВыручкаКомиссии       = 0;
	ВыручкаПатент         = 0;
	ВыручкаТорговыйСбор   = 0;

	ДокументСсылка      = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента    = МетаданныеДокумента.Имя;

	//Подменим ссылку если документ - реализация отгруженных товаров
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка      = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
			МетаданныеДокумента = ДокументСсылка.Метаданные();
			ИмяВидаДокумента    = МетаданныеДокумента.Имя;
		КонецЕсли;
	КонецЕсли;

	ЕстьНДССверху = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		ЕстьНДССверху = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СуммаВключаетНДС");
	КонецЕсли;

	//В товарах

	Если (НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = Неопределено) И (НЕ ВидОперации = "РеализацияУслуг") Тогда
		
		
		Если ПрименениеСпецрежимов.ТорговыйСбор
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаТорговомСборе", МетаданныеДокумента) Тогда
			ДеятельностьНаТорговомСборе = ДокументСсылка.ДеятельностьНаТорговомСборе;
		Иначе
			ДеятельностьНаТорговомСборе = Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",        ДокументСсылка);
		Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ЕстьНДССверху", ЕстьНДССверху);

		Текст =
		"ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
		|			КОГДА &ЕстьНДССверху = ИСТИНА
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.СчетДоходов,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СчетУчета";

		Запрос.Текст = СтрЗаменить(Текст, "РеализацияТоваровУслуг", ИмяВидаДокумента);

		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

		Для Каждого Строка Из ТаблицаРезультата Цикл
			Если НЕ (Строка.СчетУчета.Забалансовый) Тогда
				ВыручкаСобственныйНДС = ВыручкаСобственныйНДС + Строка.СуммаНДС;
				Если ПрименениеСпецрежимов.ТорговыйСбор И ДеятельностьНаТорговомСборе Тогда
					ВыручкаТорговыйСбор = ВыручкаТорговыйСбор + Строка.Сумма;
				ИначеЕсли ПрименениеСпецрежимов.ЕНВД
					И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					ВыручкаЕНВД = ВыручкаЕНВД + Строка.Сумма;
				КонецЕсли;
			Иначе
				ВыручкаКомиссии = ВыручкаКомиссии + Строка.Сумма;
			КонецЕсли;
		КонецЦикла;

		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");
	КонецЕсли;

	//В услугах
	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, "Услуги") Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",        ДокументСсылка);
		Запрос.УстановитьПараметр("ЕстьНДССверху", ЕстьНДССверху);
		//Всего = 0;

		Текст =
		"ВЫБРАТЬ
		|	ТаблицаУслуги.СчетДоходов КАК СчетДоходов,
		|	СУММА(ТаблицаУслуги.Сумма + ВЫБОР
		|			КОГДА &ЕстьНДССверху = ИСТИНА
		|				ТОГДА ТаблицаУслуги.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.СчетДоходов";

		Запрос.Текст = СтрЗаменить(Текст, "РеализацияТоваровУслуг", ИмяВидаДокумента);

		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		ВыручкаВсего          = ВыручкаВсего          + ТаблицаРезультата.Итог("Сумма");
		ВыручкаСобственныйНДС = ВыручкаСобственныйНДС + ТаблицаРезультата.Итог("СуммаНДС");

		Для Каждого СтрокаСчета Из ТаблицаРезультата Цикл
			Если ПрименениеСпецрежимов.ЕНВД
				И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаСчета.СчетДоходов) Тогда
				ВыручкаЕНВД = ВыручкаЕНВД + СтрокаСчета.Сумма;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	//В агентских услугах
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("АгентскиеУслуги", МетаданныеДокумента) Тогда

		СуммаАгентскихУслуг = ДокументСсылка.АгентскиеУслуги.Итог("Сумма")
			+ ?(ЕстьНДССверху, ДокументСсылка.АгентскиеУслуги.Итог("СуммаНДС"), 0);
		
		ВыручкаКомиссии = ВыручкаКомиссии + СуммаАгентскихУслуг;
		ВыручкаВсего	= ВыручкаВсего + СуммаАгентскихУслуг;

	КонецЕсли;

	//В документе "Оказание услуг" - оказание услуг списку контрагентов
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетДоходов", МетаданныеДокумента)
		И (НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Контрагенты") = Неопределено) Тогда

		Если ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения) Тогда
			ОтборПоДоговору = Новый Структура("ДоговорКонтрагента", ДоговорДляОтложенногоПроведения);
			ДанныеТабличнойЧасти = ДокументСсылка.Контрагенты.Выгрузить(ОтборПоДоговору, "Сумма, СуммаНДС");
		Иначе
			ДанныеТабличнойЧасти = ДокументСсылка.Контрагенты;
		КонецЕсли;

		СуммаНДС              = ДанныеТабличнойЧасти.Итог("СуммаНДС");
		ВыручкаСобственныйНДС = ВыручкаСобственныйНДС + СуммаНДС;
		ВыручкаВсего          = ВыручкаВсего + ДанныеТабличнойЧасти.Итог("Сумма") + ?(ЕстьНДССверху, СуммаНДС, 0);
		Если ПрименениеСпецрежимов.ЕНВД
			И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(ДокументСсылка.СчетДоходов) Тогда
			ВыручкаЕНВД = ВыручкаВсего;
		КонецЕсли;

	КонецЕсли;

	// В документе "Передача ОС" - продажа основного средства
	Если МетаданныеДокумента.Имя = "ПередачаОС" Тогда
		
		СуммаДокумента = ДокументСсылка.ОС.Итог("Сумма");
		НДСДокумента   = ДокументСсылка.ОС.Итог("СуммаНДС");
		
		ВыручкаВсего          = СуммаДокумента + ?(ЕстьНДССверху, НДСДокумента, 0);
		ВыручкаСобственныйНДС = НДСДокумента;
		
	КонецЕсли;
	
	Если ПрименениеСпецрежимов.Патент
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента)
		И ДокументСсылка.ДеятельностьНаПатенте Тогда
		
		ВыручкаПатент = ВыручкаВсего - ВыручкаКомиссии;
		ВыручкаЕНВД   = 0;
		
	КонецЕсли;
	
	Возврат Новый Структура("Всего, НДС, ЕНВД, Комиссия, Патент, ТорговыйСбор",
		ВыручкаВсего, ВыручкаСобственныйНДС, ВыручкаЕНВД, ВыручкаКомиссии, ВыручкаПатент, ВыручкаТорговыйСбор);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РЕГИСТРАМ УСН

// ОСНОВНЫЕ ПРОЦЕДУРЫ ПРОВЕДЕНИЯ - ИНТЕРФЕЙС И СИТУАЦИОННЫЕ ОБРАБОТЧИКИ

// Определяет по виду документов вид движения и вызывает основную процедуру
//
// Параметры:
//  ДокументОбъект					 - ДокументОбъект - объект документа, который делает движения по расходам УСН,
//									   или Структура со свойствами:
//										-- Ссылка 		- ДокументСсылка
//										-- Регистратор 	- ДокументСсылка
//										-- Движения 	- КоллекцияДвижений или Структура с наборами записей
//										-- Имя 			- имя вида документа
//										-- Дата 		- дата документа
//										-- Организация 	- СправочникСсылка.Организации
//  СтруктураДопПараметров			 - Структура - любые вспомогательные таблицы 
//  ЭтоОбъект						 - Булево - если Истина, то ДокументОбъект имеет тип ДокументОбъект, иначе - структура
//  ДоговорДляОтложенногоПроведения	 - СправочникСсылка.ДоговорыКонтрагентов - используется при отложенном проведении по расчетам с контрагентами
//
Процедура СформироватьДвиженияУСН(ДокументОбъект, СтруктураДопПараметров = Неопределено, ЭтоОбъект = Истина, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	// Свойства Организация и Дата доступны из свойств объекта или структуры
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(ДокументОбъект.Организация, ДокументОбъект.Дата)
		И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка; // значение всегда ссылочного типа
	
	// Часть реквизитов уже доступны из свойств объекта
	СтруктураШапкиДокумента = Новый Структура;
	
	СтруктураШапкиДокумента.Вставить("Ссылка", 			ДокументСсылка);
	СтруктураШапкиДокумента.Вставить("Регистратор", 	ДокументСсылка);
	СтруктураШапкиДокумента.Вставить("Объект", 			ДокументОбъект);
	СтруктураШапкиДокумента.Вставить("ВидДокумента", 	ДокументСсылка.Метаданные().Имя);
	СтруктураШапкиДокумента.Вставить("Организация", 	ДокументОбъект.Организация);
	СтруктураШапкиДокумента.Вставить("Дата", 			ДокументОбъект.Дата);
	
	// Другие необходимые реквизиты получаем по ссылке
	РеквизитыПоСсылке = Новый Структура;
	
	// Специфичные реквизиты, которые используются при проведении отдельных видов документов
	РеквизитыПоСсылке.Вставить("ВидОперации");
	РеквизитыПоСсылке.Вставить("ОтраженоВОперУчете");
	РеквизитыПоСсылке.Вставить("ПравоСобственностиПереходитПослеГосРегистрации");
	РеквизитыПоСсылке.Вставить("ВидДоговора", "ДоговорКонтрагента.ВидДоговора");
	РеквизитыПоСсылке.Вставить("УдержатьВознаграждение");
	РеквизитыПоСсылке.Вставить("СчетДт");
	РеквизитыПоСсылке.Вставить("СчетКт");
	РеквизитыПоСсылке.Вставить("СубконтоДт1");
	РеквизитыПоСсылке.Вставить("СубконтоДт2");
	РеквизитыПоСсылке.Вставить("СубконтоДт3");
	РеквизитыПоСсылке.Вставить("СубконтоКт1");
	РеквизитыПоСсылке.Вставить("СубконтоКт2");
	РеквизитыПоСсылке.Вставить("СубконтоКт3");
	РеквизитыПоСсылке.Вставить("СуммаДтЗадолженности");
	РеквизитыПоСсылке.Вставить("СуммаКтЗадолженности");
	
	// В СтруктураШапкиДокумента свойства добавляем только при наличии соответствующего ревизита в документе
	РеквизитыДокумента = Новый Структура; // Реквизиты, которые есть в документе
	МетаданныеДокумента = ДокументСсылка.Метаданные().Реквизиты;
	
	Для Каждого Реквизит из РеквизитыПоСсылке Цикл
		
		ИмяРеквизита = ?(ЗначениеЗаполнено(Реквизит.Значение), Реквизит.Значение, Реквизит.Ключ);
		// Значение реквизита может выбираться через точку. В этом случае проверим наличие ревизита по первой части имени поля.
		Разделитель = СтрНайти(ИмяРеквизита, ".");
		
		Если Разделитель <> 0 Тогда
			ИмяРеквизита = Лев(ИмяРеквизита, Разделитель - 1); 
		КонецЕсли;
		
		Если МетаданныеДокумента.Найти(ИмяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДокумента.Вставить(Реквизит.Ключ, Реквизит.Значение);
		
	КонецЦикла;
	
	Если РеквизитыДокумента.Количество() > 0 Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, РеквизитыДокумента);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураШапкиДокумента, ЗначенияРеквизитов, Истина);
	КонецЕсли;	
		
	Если ЭтоОбъект Тогда
		Если ДокументОбъект.Движения.Найти("ПрочиеРасчеты") <> Неопределено Тогда
			ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
		КонецЕсли;
	Иначе
		НаборЗаписейРасходыПриУСН = Неопределено;
		НаборЗаписейПрочиеРасчеты = Неопределено;

		Если ТипЗнч(ДокументОбъект.Движения) = Тип("Структура") Тогда
			ДокументОбъект.Движения.Свойство("РасходыПриУСН", НаборЗаписейРасходыПриУСН);
			ДокументОбъект.Движения.Свойство("ПрочиеРасчеты", НаборЗаписейПрочиеРасчеты);
		Иначе
			НаборЗаписейРасходыПриУСН = ДокументОбъект.Движения.РасходыПриУСН;
			НаборЗаписейПрочиеРасчеты = ДокументОбъект.Движения.ПрочиеРасчеты;
		КонецЕсли;
		
		Если НаборЗаписейРасходыПриУСН <> Неопределено Тогда
			НаборЗаписейРасходыПриУСН.Записывать = Ложь;
		КонецЕсли;
		
		Если НаборЗаписейПрочиеРасчеты <> Неопределено Тогда
			НаборЗаписейПрочиеРасчеты.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;

	ПроводитьПоПартиям = Истина;
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПартиям",ПроводитьПоПартиям);
	Отказ = Ложь;
	ВыделятьНДСУСН = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику;

	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Истина);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Истина);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Истина);

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Оплата", СтруктураШапкиДокумента,1 , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента,2, , ДоговорДляОтложенногоПроведения);
		ОтразитьВУСН(ДокументСсылка, "РасходыНаБилеты", СтруктураШапкиДокумента, 3, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияСБилетом") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ЭтапПроведения = 0;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Возврат
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда
			ЭтапПроведения = ЭтапПроведения + 1;
			ОтразитьВУСН(ДокументСсылка, "ВозвратБилетов", СтруктураШапкиДокумента, ЭтапПроведения, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Покупка
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Доплата
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен Тогда 	
			ЭтапПроведения = ЭтапПроведения + 1;
			ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, ЭтапПроведения, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		Если ЭтоОбъект Тогда
			СтруктураШапкиДокумента.Вставить("БезЗакрывающихДокументов", ДокументОбъект.БезЗакрывающихДокументов);
			СтруктураШапкиДокумента.Вставить("Контрагент", ДокументОбъект.Контрагент);
		Иначе
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "БезЗакрывающихДокументов,Контрагент");
			СтруктураШапкиДокумента.Вставить("БезЗакрывающихДокументов", РеквизитыСсылки.БезЗакрывающихДокументов);
			СтруктураШапкиДокумента.Вставить("Контрагент", РеквизитыСсылки.Контрагент);
		КонецЕсли;
		ОтразитьВУСН(ДокументСсылка, ,СтруктураШапкиДокумента, 0 , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
		// При возврате на платежную карту может потребоваться переквалификация доходов.
		Если СтруктураДопПараметров.Свойство("КУДиРПереквалификация") ИЛИ СтруктураДопПараметров.Свойство("КУДиРПатент") Тогда
			ОтразитьВУСН(ДокументСсылка, "ВозвратНаПлатежнуюКарту", СтруктураШапкиДокумента, 1 , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если ЭтоОбъект Тогда
			СтруктураШапкиДокумента.Вставить("БезЗакрывающихДокументов", ДокументОбъект.БезЗакрывающихДокументов);
		Иначе
			БезЗакрывающихДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "БезЗакрывающихДокументов");
			СтруктураШапкиДокумента.Вставить("БезЗакрывающихДокументов", БезЗакрывающихДокументов);
		КонецЕсли;
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			Если ЭтоОбъект Тогда
				СтруктураШапкиДокумента.Вставить("ОплатаПоДГПХ", ЗначениеЗаполнено(ДокументОбъект.ПлатежнаяВедомость));
			Иначе
				СтруктураШапкиДокумента.Вставить("ОплатаПоДГПХ", ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДокументСсылка, "ПлатежнаяВедомость")));
			КонецЕсли;
		КонецЕсли;
		ОтразитьВУСН(ДокументСсылка, ,СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
		
		ОтразитьВУСН(ДокументСсылка, ,СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
			
			ОтразитьВУСН(ДокументСсылка, "ПрочееДДС", СтруктураШапкиДокумента, , , ДоговорДляОтложенногоПроведения);
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") И СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
			// При передаче ОС без перехода права собственности документ в УСН не отражается.
		Иначе
			ОтразитьВУСН(ДокументСсылка, "РеализацияУслуг", СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОтразитьВУСН(ДокументСсылка, "ВозвратСРеализации", СтруктураШапкиДокумента, 0, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		Иначе
			ОтразитьВУСН(ДокументСсылка, "ВозвратОтПокупателя", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "ВозвратПоставщику", СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗарплаты")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВУчете")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист"))
				И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "НачислениеЗП", СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

		Если НЕ СтруктураШапкиДокумента.УдержатьВознаграждение Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоПриобретению);
				ОтразитьВУСН(ДокументСсылка, "УслугаКомиссионера", СтруктураШапкиДокумента,1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			КонецЕсли;
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента, 2, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		Иначе
			ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионера", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионераНДС", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,2,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			Иначе
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда

		ОтразитьВУСН(ДокументСсылка, "РеализацияОтгруженныхТоваров", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		ОтразитьВУСН(ДокументСсылка, "Розница", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
		Если СтруктураДопПараметров.Свойство("ПроданныеСертификаты") Тогда
			ОтразитьВУСН(ДокументСсылка, "ПродажаПодарочныхСертификатов", СтруктураШапкиДокумента, 2, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ОтразитьВУСН(ДокументСсылка, "ВПереработку", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
			ОтразитьВУСН(ДокументСсылка, "БезвозмезднаяПередача", СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "УслугаПоПереработке", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ИзПереработки", СтруктураШапкиДокумента , 2, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаВозвращенныхМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ВозвратИзПереработки", СтруктураШапкиДокумента , 3, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНМА")) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ГТДИмпорт") Тогда

		ОтразитьВУСН(ДокументСсылка, "ГТД", СтруктураШапкиДокумента, 1, , ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда

		ОтразитьВУСН(ДокументСсылка, "НДСТаможенногоСоюза", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга Тогда
		
		ОтразитьВУСН(ДокументСсылка, "УслугиФакторинга", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "КорректировкаПоступления", СтруктураШапкиДокумента, 1, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
				И (НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
			ОтразитьВУСН(ДокументСсылка, "Реализация", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			ОтразитьВУСН(ДокументСсылка, "НаРеализацию", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ОтразитьВУСН(ДокументСсылка, "КорректировкаРеализации", СтруктураШапкиДокумента, , СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
		
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная"))
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента, 1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Перемещение", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Комплектация", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			
			ОтразитьВУСН(ДокументСсылка, "ПереносЗадолженности", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
			Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			
			ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаДебитор", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаКредитор", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			
			ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			
			СчетаДтКт = СтруктураШапкиДокумента.СчетДт = СтруктураШапкиДокумента.СчетКт;
			
			ЕстьСубконтоКонтрагентыПоДт = Ложь;
			Если ТипЗнч(СтруктураШапкиДокумента.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЕстьСубконтоКонтрагентыПоДт = Истина;
			КонецЕсли;
			
			ЕстьСубконтоДоговорыКонтрагентовПоДт = Ложь;
			Если ТипЗнч(СтруктураШапкиДокумента.СубконтоДт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоДт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ЕстьСубконтоДоговорыКонтрагентовПоДт = Истина;
			КонецЕсли;
			
			ЕстьСубконтоКонтрагентыПоКт = Ложь;
			Если ТипЗнч(СтруктураШапкиДокумента.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЕстьСубконтоКонтрагентыПоКт = Истина;
			КонецЕсли;
			
			ЕстьСубконтоДоговорыКонтрагентовПоКт = Ложь;
			Если ТипЗнч(СтруктураШапкиДокумента.СубконтоКт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				или ТипЗнч(СтруктураШапкиДокумента.СубконтоКт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ЕстьСубконтоДоговорыКонтрагентовПоКт = Истина;
			КонецЕсли;
			
			СчетДтПустой = СтруктураШапкиДокумента.СчетДт = Планысчетов.Хозрасчетный.ПустаяСсылка();
			СчетКтПустой = СтруктураШапкиДокумента.СчетКт = Планысчетов.Хозрасчетный.ПустаяСсылка();
			
			Субконто1ДтКт = СтруктураШапкиДокумента.СубконтоДт1 = СтруктураШапкиДокумента.СубконтоКт1;
			Субконто2ДтКт = СтруктураШапкиДокумента.СубконтоДт2 = СтруктураШапкиДокумента.СубконтоКт2;
			Субконто3ДтКт = СтруктураШапкиДокумента.СубконтоДт3 = СтруктураШапкиДокумента.СубконтоКт3;
			
			СуммаДтКт = СтруктураШапкиДокумента.СуммаДтЗадолженности = СтруктураШапкиДокумента.СуммаКтЗадолженности;
			
			Если СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт и СуммаДтКт Тогда
				
				ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаДебитор", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаКредитор", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
				И (НЕ СчетаДтКт
					и ((НЕ СчетДтПустой и ЕстьСубконтоКонтрагентыПоДт и ЕстьСубконтоДоговорыКонтрагентовПоДт)
						или (НЕ СчетКтПустой и ЕстьСубконтоКонтрагентыПоКт и ЕстьСубконтоДоговорыКонтрагентовПоКт)))
				Или (СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт 
					и ЕстьСубконтоКонтрагентыПоДт и ЕстьСубконтоДоговорыКонтрагентовПоДт и НЕ СуммаДтКт)
					И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				
				ОтразитьВУСН(ДокументСсылка, "ПереносЗадолженности", СтруктураШапкиДокумента,,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
				И НЕ СчетаДтКт и НЕ СчетДтПустой
				И (НЕ ЕстьСубконтоКонтрагентыПоДт Или НЕ ЕстьСубконтоДоговорыКонтрагентовПоДт) Тогда
				
				ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
				И НЕ СчетаДтКт и НЕ СчетКтПустой
				И (НЕ ЕстьСубконтоКонтрагентыПоКт Или НЕ ЕстьСубконтоДоговорыКонтрагентовПоКт) Тогда
				
				ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
				И СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт
				И (НЕ ЕстьСубконтоКонтрагентыПоДт Или НЕ ЕстьСубконтоДоговорыКонтрагентовПоДт) и Не СуммаДтКт Тогда
				
				ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,1,СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПутевойЛист") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	
		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, , ДоговорДляОтложенногоПроведения);
	
	КонецЕсли;

КонецПроцедуры

//Основная процедура - собирает необходимые данные и вызывает
//ситуационные процедуры в зависимости от вида операции. Выполняет движения по регистрам
Процедура ОтразитьВУСН(ДокументСсылка, ВидОперации = Неопределено, Параметры = Неопределено, ЭтапПроведения = 0, СтруктураДопПараметров = Неопределено, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПроверкаПримененияУСНВыполнена = (ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ПроверкаПримененияУСНВыполнена"));
	
	Если Не ПроверкаПримененияУСНВыполнена Тогда
		Если НЕ УчетнаяПолитика.ПрименяетсяУСН(ДокументСсылка.Организация, ДокументСсылка.Дата) 
			И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументСсылка.Организация, ДокументСсылка.Дата) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();

	Сделка = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Сделка", МетаданныеДокумента), ДокументСсылка.Сделка, Неопределено);
	Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента),ДокументСсылка.ФизЛицо,Неопределено));
	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента), ДокументСсылка.ВалютаДокумента, ВалютаРегламентированногоУчета);
	ВалютаВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
	КурсВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	КратностьВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));

	ДатаОплаты = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОплаты", МетаданныеДокумента), ДокументСсылка.ДатаОплаты, Неопределено);
	ВидОперацииДок = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента), ДокументСсылка.ВидОперации, Неопределено);

	СторнироватьДоходыПриВозврате = Истина;
	
	РеквизитыКорректировки = Неопределено; // для корректировочных документов - их движения отражаются в КУДиР особым способом

	ДвиженияРегистров = Неопределено;
	ДвиженияКУДиРПатент = РегистрыНакопления.КнигаУчетаДоходовПатент.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	Если Параметры = Неопределено Тогда
		СтруктураШапкиДокумента = Новый Структура("Ссылка, Объект, Организация, Дата", ДокументСсылка, ДокументСсылка.ПолучитьОбъект(), ДокументСсылка.Организация, ДокументСсылка.Дата);
	Иначе
		СтруктураШапкиДокумента = Параметры;
	КонецЕсли;

	Если СтруктураДопПараметров = Неопределено Тогда
		ТаблицаТМЦ = Неопределено;
	ИначеЕсли СтруктураДопПараметров.Свойство("ТаблицаТМЦ") Тогда
		ТаблицаТМЦ = СтруктураДопПараметров.ТаблицаТМЦ;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента",ВалютаДокумента);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаОплаты);
	СтруктураШапкиДокумента.Вставить("ВидОперации",ВидОперацииДок);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",Договор);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияТаможенныхПлатежей",УчетнаяПолитика.ПорядокПризнанияТаможенныхПлатежей(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("МетодРаспределения",УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("БазаРаспределения",УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("Сделка",Сделка);
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Истина);
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Истина);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Истина);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = "НачислениеЗП" Тогда
		Если СтруктураДопПараметров.Свойство("ПериодРегистрации") Тогда
			СтруктураШапкиДокумента.Вставить("ПериодРегистрации", СтруктураДопПараметров.ПериодРегистрации);
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Неопределено Тогда
		ВидОперации = ВидОперацииДДС(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ВидОперации = "НеОтражатьВНУ" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидОперацииУСН",ВидОперации);
	
	КУДиР = НовыйСтруктураКУДиР();
	
	СформироватьСобытиеВСодержанииКУДиР(КУДиР, СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	Иначе
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	1);
	КонецЕсли;

	// 1. Заполнить структуру ДвиженияРегистров, которая будет состоять из таблиц ВзаиморасчетыРасход, РасходыУСН, КУДиР
	Если (ВидОперации = "Поступление")
		ИЛИ (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "УслугаПоПереработке") Тогда

		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Если ЭтапПроведения > 0 Тогда
			Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		КонецЕсли;

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		УчетАгентскогоНДС = Ложь;

		Если Договор = Неопределено И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияСБилетом") Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Билет.ДоговорАгента");
		КонецЕсли;	
		
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
		КонецЕсли;

		Если ВидОперации = "УслугаКомиссионера" Тогда
			СуммаВзаиморасчетов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаВознаграждения, ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда

			СуммаВзаиморасчетов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги"), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Иначе
			СуммаВзаиморасчетов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
														   											   
			//Учтем агентский НДС
			Если УчетАгентскогоНДС Тогда
				СуммаВзаиморасчетовНДС   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьНДСДокумента(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СуммаВзаиморасчетовНДС;
				ТаблицаПриходаНДС = ТаблицаПрихода.СкопироватьКолонки();

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВидРасхода",  Перечисления.ВидыРасходовУСН.Налоги);

				ТаблицаПрихода.Индексы.Добавить("ВидРасхода");
				НайденныеСтроки = ТаблицаПрихода.НайтиСтроки(СтруктураОтбора);
				КоличествоСтрок = НайденныеСтроки.Количество();
				Для Индекс = 1 По КоличествоСтрок Цикл
					Строка = НайденныеСтроки[КоличествоСтрок - Индекс];
					СтрокаНДС = ТаблицаПриходаНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНДС, Строка);
					ТаблицаПрихода.Удалить(Строка);
				КонецЦикла;
				СуммаВзаиморасчетовНДСРегл = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовНДС,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
														   	КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

				РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПриходаНДС, ДвиженияРегистров, ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента, СуммаВзаиморасчетовНДСРегл, (ЭтапПроведения > 0));
			КонецЕсли;

		КонецЕсли;
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				// Сумму билетов в авансовом отчете не учитываем в расчетах с подотчетным лицом											   
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Билеты"), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			КонецЕсли;	
			
			РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		Иначе
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		КонецЕсли;

	ИначеЕсли ВидОперации = "УслугиФакторинга" Тогда
		
		ДвиженияРегистров = Неопределено;
		
		РасчетыСКонтрагентами_УслугиФакторингаВУСН(ДокументСсылка, КУДиР, СтруктураДопПараметров, СтруктураШапкиДокумента, ДвиженияРегистров);
		
	ИначеЕсли ВидОперации = "КорректировкаПоступления" Тогда
		
		Параметры = УчетУСН.ПодготовитьПараметрыКорректировкаПоступленияУСН(СтруктураДопПараметров.УСНРеквизиты);
		Если Параметры.Реквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыКорректировки = Параметры.Реквизиты[0];
		ТаблицаКорректировка   = СтруктураДопПараметров.ТаблицаКорректировка;
		ТаблицаРасчетов 	   = СтруктураДопПараметров.ТаблицаРасчетов;
		
		// 1. Получим движения прихода (по увеличению количества)
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Если ЭтапПроведения > 0 Тогда
			Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		КонецЕсли;

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Зачет аванса поставщику
		ДвиженияРегистровВх = Неопределено;
														   
		Если ТаблицаРасчетов <> Неопределено И ТаблицаРасчетов.Количество() > 0 Тогда
			Если ТаблицаРасчетов.Итог("ОстатокВзаиморасчетов") > 0 Тогда
				СуммаВзаиморасчетов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТаблицаРасчетов.Итог("СуммаВзаиморасчетов"),
														   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаРасчетов, ТаблицаПрихода, ДвиженияРегистровВх, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
			КонецЕсли; 		
		КонецЕсли; 
		
		// 3. Корректировка остатков и КУДиР по уменьшению количества и изменениям сумм
		КорректировкаПоступленияУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировка, ДвиженияРегистровВх);		
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
	ИначеЕсли ВидОперации = "ГТД" Тогда
		
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход
				ИЛИ НЕ (ЭлементКоллекции.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено
					ИЛИ ЭлементКоллекции.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		ОтражениеТаможенныхРасходовУСН(СтруктураШапкиДокумента, Неопределено, ТаблицаПрихода, ДвиженияРегистров);

	ИначеЕсли ВидОперации = "НДСТаможенногоСоюза" Тогда
		ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР",
				Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		// Отражаем возникновение расчетов по НДС, подлежащему уплате при ввозе товаров из ТС
		Если СтруктураДопПараметров.Свойство("ТаблицаРасчетов")
			И ЗначениеЗаполнено(СтруктураДопПараметров.ТаблицаРасчетов) Тогда
			ТаблицаДвиженияВзаиморасчетов = СтруктураДопПараметров.ТаблицаРасчетов;
			Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
				ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			КонецЕсли;
			ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			ДвиженияРегистров.ВзаиморасчетыРасход = ТаблицаДвиженияВзаиморасчетов;
		КонецЕсли;
		// если ввезенные ТМЦ реализованы или списаны, необходимо изменить статус расходов по НДС
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();
		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход
				Или ЭлементКоллекции.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		ДвиженияРегистров.РасходыУСН = ТаблицаПрихода.СкопироватьКолонки();
		НачислениеНДСТаможенногоСоюза(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "ВозвратОтПокупателя") Тогда

		ДопРеквизиты = СтруктураДопПараметров.ТаблицаРеквизиты[0];
		СтруктураШапкиДокумента.Вставить("ИтогоВзаиморасчеты",      ДопРеквизиты.ИтогоВзаиморасчеты);
		СтруктураШапкиДокумента.Вставить("ИтогоЕНВД",               ДопРеквизиты.ИтогоЕНВД);
		СтруктураШапкиДокумента.Вставить("ИтогоКомиссия",           ДопРеквизиты.ИтогоКомиссия);
		СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      ДопРеквизиты.КурсВзаиморасчетов);
		СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", ДопРеквизиты.КратностьВзаиморасчетов);
		СуммаСторноРасходов = ?(
			СтруктураДопПараметров.Свойство("СуммаСторноРасходов") И ТипЗнч(СтруктураДопПараметров.СуммаСторноРасходов) = Тип("Число"),
				СтруктураДопПараметров.СуммаСторноРасходов,
				0);
		СуммаСторноНДС      = ?(
			СтруктураДопПараметров.Свойство("СуммаСторноНДС") И ТипЗнч(СтруктураДопПараметров.СуммаСторноНДС) = Тип("Число"),
				СтруктураДопПараметров.СуммаСторноНДС,
				0);
		СуммаПризнанияНДС   = ?(
			СтруктураДопПараметров.Свойство("СуммаПризнанияНДС") И ТипЗнч(СтруктураДопПараметров.СуммаПризнанияНДС) = Тип("Число"),
				СтруктураДопПараметров.СуммаПризнанияНДС,
				0);

		НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаКУДиР = НаборЗаписей.ВыгрузитьКолонки();
		ДвиженияРегистров = Новый Структура("КУДиР, ВзаиморасчетыРасход, РасходыУСН",
			ТаблицаКУДиР,
			Новый ТаблицаЗначений,
			Новый ТаблицаЗначений);

		СформироватьДвиженияКУДиР(
			СтруктураШапкиДокумента,
			СтруктураДопПараметров.ТаблицаРасчетов,
			СуммаСторноРасходов,
			СуммаПризнанияНДС,
			СуммаСторноНДС,
			ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "Перемещение")
			ИЛИ (ВидОперации = "Комплектация")
			ИЛИ (ВидОперации = "НаРеализацию")
			ИЛИ (ВидОперации = "ВПереработку")
			ИЛИ (ВидОперации = "ВозвратСРеализации")
			ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		Если ВидОперации = "ВозвратСРеализации" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
		ИначеЕсли ВидОперации = "ВозвратИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
		Иначе
			СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;
		КонецЕсли;

		ПередачаВНТТПоПродажным = Ложь;
		Если ВидОперации = "Перемещение" И ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", МетаданныеДокумента) Тогда
			ТипСкладаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка.СкладПолучатель, "ТипСклада");
			СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(
				СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			Если ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
				И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
				// это перемещение в НТТ по продажным ценам
				ПередачаВНТТПоПродажным = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПередачаВНТТПоПродажным Тогда
			ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, Договор, СтатусПартии, ВидОперации);
		ИначеЕсли ТаблицаПартий.Количество() > 0 Тогда
			// Перемещение в НТТ по продажным ценам, спишем расходы без отражения в КУДиР
			// Дополним таблицу партий колонкой со статусами расходов по списанию
			ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);
			ТаблицаПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, "СтатусСписания");
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, Договор, СтатусПартии, ВидОперации);
		КонецЕсли;

	ИначеЕсли (ВидОперации = "Списание")
		ИЛИ (ВидОперации = "Реализация")
		ИЛИ (ВидОперации = "ВозвратПоставщику")
		ИЛИ (ВидОперации = "БезвозмезднаяПередача") Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;

		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;

		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			Выручка.НДС			 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.НДС, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.ЕНВД		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Комиссия	 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Патент		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.ТорговыйСбор = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ТорговыйСбор, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Всего		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;

			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка)

		ИначеЕсли ВидОперации = "Списание" Тогда

			ДвиженияРегистров = ДвиженияРегистровВх;

		ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда

			Если НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(Договор.ВидДоговора)
				И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(Договор.ВидДоговора) Тогда
				ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
				Если ТаблицаОплат.Количество() > 0 Тогда
					РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Оплата");
				Иначе
					ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
				Конецесли;
				ДвиженияРегистров.РасходыУСН = ДвиженияРегистровВх.РасходыУСН.Скопировать();
				ДвиженияРегистров.КУДиР = ДвиженияРегистровВх.КУДиР.Скопировать();
				КУДиР.Графа6 = 0;
			Иначе
				ДвиженияРегистров = ДвиженияРегистровВх;
			КонецЕсли;

		Иначе
			ДвиженияРегистров = ДвиженияРегистровВх;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "РасходыНаБилеты" Тогда
		
		//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			ДвиженияРегистров = Неопределено;
			РасходыНаБилетыВУСН(СтруктураШапкиДокумента, СтруктураДопПараметров, ДвиженияРегистров);
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = "ВозвратБилетов" Тогда
		
		//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			ДвиженияРегистров = Неопределено;
			ВозвратБилетовУСН(СтруктураШапкиДокумента, СтруктураДопПараметров, ДвиженияРегистров);
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = "Розница" Тогда
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;

		ДвиженияРегистровВх = Неопределено;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Дополним таблицу партий колонкой со статусами расходов по списанию
			ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, Неопределено, СтатусПартии, ВидОперации);
		
		КонецЕсли;
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		
			ТаблицаВыручка = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаВыручка", ТаблицаВыручка);
			
			// Зачет авансов по принятым в оплату подарочным сертификатам и признание доходов по наличной выручке
			Если ТаблицаВыручка <> Неопределено Тогда
				
				// Приведем имена колонок таблицы к именам ключей структуры.
				КопияТаблицыВыручка = ТаблицаВыручка.Скопировать();
				КопияТаблицыВыручка.Колонки.СуммаРуб.Имя             = "Всего";
				КопияТаблицыВыручка.Колонки.СуммаРубЕНВД.Имя         = "ЕНВД";
				КопияТаблицыВыручка.Колонки.СуммаРубКомитента.Имя    = "Комиссия";
				КопияТаблицыВыручка.Колонки.СуммаРубПатент.Имя       = "Патент";
				КопияТаблицыВыручка.Колонки.СуммаРубТорговыйСбор.Имя = "ТорговыйСбор";
			
				Выручка = Новый Структура("Всего, ЕНВД, ТорговыйСбор, Комиссия, Патент, ПатентСсылка, ТаблицаВыручка");
				Выручка.Всего        = КопияТаблицыВыручка.Итог("Всего");
				Выручка.ЕНВД         = КопияТаблицыВыручка.Итог("ЕНВД");
				Выручка.Комиссия     = КопияТаблицыВыручка.Итог("Комиссия");
				Выручка.Патент       = КопияТаблицыВыручка.Итог("Патент");
				Выручка.ТорговыйСбор = КопияТаблицыВыручка.Итог("ТорговыйСбор");
				
				Выручка.ТаблицаВыручка = КопияТаблицыВыручка;
				
				РаспределениеРозничнойВыручкиУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияКУДиРПатент, Выручка, КУДиР, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);
				
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			// НТТ. Переквалификация выручки.
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			Выручка.ЕНВД		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Комиссия	 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Патент		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.ТорговыйСбор = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ТорговыйСбор, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Всего		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			РаспределениеРозничнойВыручкиУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияКУДиРПатент, Выручка, КУДиР, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения);

		КонецЕсли;

	ИначеЕсли ВидОперации = "ПродажаПодарочныхСертификатов" Тогда
		
		// Зачет оплат по реализованным подарочным сертификатам
		
		РозничнаяВыручкаПродажаПодарочныхСертификатов(СтруктураШапкиДокумента, СтруктураДопПараметров.ПроданныеСертификаты, КУДиР, ДвиженияКУДиРПатент, ДоговорДляОтложенногоПроведения);

	ИначеЕсли ВидОперации = "РеализацияКомиссионером"
			ИЛИ ВидОперации = "ИзПереработки"
			ИЛИ ВидОперации = "РеализацияОтгруженныхТоваров" Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		Если ВидОперации = "РеализацияКомиссионером"
			ИЛИ ВидОперации = "РеализацияОтгруженныхТоваров" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
			ВидОперации = "Реализация";
		ИначеЕсли ВидОперации = "ИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
			ВидОперации = "Списание";
		КонецЕсли;
		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;

		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			Выручка.НДС			 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.НДС, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.ЕНВД		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Комиссия	 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов.Скопировать();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("УдержатьВознаграждение", МетаданныеДокумента) И ДокументСсылка.УдержатьВознаграждение Тогда
				СуммаВознаграждения = 0;
				Если СтруктураДопПараметров.Свойство("ТаблицаВознаграждение")
					И ЗначениеЗаполнено(СтруктураДопПараметров.ТаблицаВознаграждение) Тогда
					СуммаВознаграждения = СтруктураДопПараметров.ТаблицаВознаграждение.Итог("СуммаВзаиморасчетов");
				КонецЕсли;
				
				КоэффВознагр        = ?(Выручка.Всего = 0, 0, СуммаВознаграждения/Выручка.Всего);
				
				Выручка.Всего    = Выручка.Всего - СуммаВознаграждения;
				Выручка.ЕНВД     = Окр(Выручка.ЕНВД - Выручка.ЕНВД*КоэффВознагр, 2, 1);
				Выручка.Комиссия = Окр(Выручка.Комиссия - Выручка.Комиссия*КоэффВознагр, 2, 1);

				// Добавим в таблицу оплат суммы оплаты взаимозачетом по вознаграждению
				// для включения товаров, которые им оплачены, в КУдИР и списания их из регистра РасходыПриУСН
				Для Каждого СтрокаОплаты ИЗ СтруктураДопПараметров.ТаблицаРасчетовПоПриобретению Цикл
					НоваяСтрокаТаблицыОплат = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОплат, СтрокаОплаты, , "ДокументРасчетов");
					НоваяСтрокаТаблицыОплат = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОплат, СтрокаОплаты);
					НоваяСтрокаТаблицыОплат.СуммаВзаиморасчетов = -НоваяСтрокаТаблицыОплат.СуммаВзаиморасчетов;
				КонецЦикла;
			КонецЕсли;
			
			КолонкиГруппировок = "Контрагент, ДоговорКонтрагента, ДокументРасчетов, ДатаДокументаРасчетов";
			Если ТаблицаОплат.Колонки.Найти("ЭтоВозврат") <> Неопределено Тогда
				КолонкиГруппировок = КолонкиГруппировок + ", ЭтоВозврат";
			КонецЕсли;
			
			ТаблицаОплат.Свернуть(КолонкиГруппировок,
				"СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовКомитента,
				|СуммаВзаиморасчетовПатент, СуммаВзаиморасчетовТорговыйСбор");
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);

		ИначеЕсли ВидОперации = "Списание" Тогда

			ДвиженияРегистров = ДвиженияРегистровВх;

		КонецЕсли;

	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда

		//Проверим наличие доходов

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;

		ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения - СуммаНДСВознаграждения;
			Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
				СуммаПринимаемойВыручки = СуммаПринимаемойВыручки - СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
			КонецЕсли;
		Иначе
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;
		
		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаВознаграждения);
		СуммаДоходов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СуммаДоходов, ВалютаДокумента, ВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 1, СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, ВалютаДокумента, ВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 1, СтруктураШапкиДокумента.КратностьДокумента, 1);
		
		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			КУДиР.Графа7 = СуммаВзаиморасчетов;
			Если НЕ ВыделятьНДСУСН Тогда
				КУДиР.НДС = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда

		//Проверим наличие доходов
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;
		СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
		Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
			СуммаПринимаемойВыручки = СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;
		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаНДСВознаграждения);
		СуммаДоходов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДоходов, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНДСВознаграждения, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);

		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;
		КУДиР.Графа7 = СуммаВзаиморасчетов;

	ИначеЕсли ВидОперации = "РеализацияУслуг" Тогда

		Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, , ,ВидОперации, ДоговорДляОтложенногоПроведения);
		Выручка.НДС			 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.НДС, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.ЕНВД		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Комиссия	 = 0;
		СуммаУслугПоДокументу = 0;

		Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка);
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Продукция", МетаданныеДокумента) И ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Продукция") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги");
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Контрагенты", МетаданныеДокумента) Тогда
			ОтборПоДоговору = Неопределено;
			Если ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения) Тогда
				// В момент актуализации отложенных расчетов определяем сумму только текущему договору.
				ОтборПоДоговору = Новый Структура("ДоговорКонтрагента", ДоговорДляОтложенногоПроведения); 
			КонецЕсли;
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Контрагенты", , ОтборПоДоговору);
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары", МетаданныеДокумента) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВознаграждения", МетаданныеДокумента, "Товары") Тогда
				СуммаУслугПоДокументу = ДокументСсылка.Товары.Итог("СуммаВознаграждения"); // Сумма доходов определяется без НДС
				Если ДокументСсылка.УдержатьВознаграждение Тогда
					СуммаПолучено = ДокументСсылка.ДенежныеСредства.Итог("Сумма");
					ДоходПоУдержанномуВознаграждению = Мин(СуммаПолучено, СуммаУслугПоДокументу);
					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", "Комиссионное вознаграждение удержано из выручки комитента. ");
					КУДиР.Графа5 = КУДиР.Графа5 + РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ДоходПоУдержанномуВознаграждению, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																СтруктураШапкиДокумента.КурсДокумента, 1,
																СтруктураШапкиДокумента.КратностьДокумента, 1);

					СуммаУслугПоДокументу = 0;
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках
					И СтруктураДопПараметров.Свойство("ТаблицаРасчетов")
					И ЗначениеЗаполнено(СтруктураДопПараметров.ТаблицаРасчетов) Тогда
					
					СуммаУслугПоДокументу = 0; // Не требуется зачитывать авансы
					ДоходыПоВознаграждению = 0;
					
					Для Каждого СтрокаПлатеж Из СтруктураДопПараметров.ТаблицаРасчетов Цикл
						Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
							И ЗначениеЗаполнено(СтрокаПлатеж.ДокументРасчетов)
							И (ТипЗнч(СтрокаПлатеж.ДокументРасчетов) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
							
							ДоходыПоВознаграждению = ДоходыПоВознаграждению + СтрокаПлатеж.СуммаРуб;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ДоходыПоВознаграждению > 0 Тогда
						ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение",
							"Вознаграждение удержано из средств, полученных на исполнение комиссионного поручения.");
						КУДиР.Графа5 = КУДиР.Графа5 + ДоходыПоВознаграждению;
					КонецЕсли;
				КонецЕсли;
			Конецесли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("ОС", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "ОС");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НематериальныйАктив", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = ?(ДокументСсылка.СуммаВключаетНДС, ДокументСсылка.Сумма, ДокументСсылка.Сумма + ДокументСсылка.СуммаНДС);
		КонецЕсли;

		Если НЕ СуммаУслугПоДокументу = 0 Тогда
			Выручка.Всего = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаУслугПоДокументу, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, Новый ТаблицаЗначений, ДвиженияРегистров, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);
		Конецесли;
		
	ИначеЕсли ВидОперации = "КорректировкаРеализации" Тогда
		
		Параметры = УчетУСН.ПодготовитьПараметрыКорректировкаРеализацииУСН(СтруктураДопПараметров.УСНРеквизиты);
		Если Параметры.Реквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДвиженияРегистровВх = Неопределено;
		ТаблицаПриход       = Неопределено;

		ТаблицаРасчетов     = СтруктураДопПараметров.ТаблицаРасчетов;
		Выручка             = СтруктураДопПараметров.Выручка;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

			ТаблицаРеализация   = СтруктураДопПараметров.ТаблицаРеализация;
			ТаблицаВозврат      = СтруктураДопПараметров.ТаблицаВозврат;
			РасходыУСНПоСделке  = СтруктураДопПараметров.ТаблицаРасходыУСНПоСделке;
			
			РеквизитыКорректировки = Параметры.Реквизиты[0];
			
			// Увеличение количества по реализации - отражение реализации
			ТаблицаРеализованныхПартий = ПодготовитьТаблицуПартий(ТаблицаРеализация, ВидОперации);
			
			Договор      = РеквизитыКорректировки.ДоговорКонтрагента;
			СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;
			
			//Дополним таблицу партий колонкой со статусами расходов по списанию
			ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаРеализованныхПартий, ВидОперации);

			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", РеквизитыКорректировки.ДокументРеализацииСсылка);
			СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата",   РеквизитыКорректировки.ДокументРеализацииДата);
			СтруктураШапкиДокумента.Вставить("ЭтоКорректировкаПрошлогоПериода", РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода);
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаРеализованныхПартий, ДвиженияРегистровВх, Договор, СтатусПартии, ВидОперации);
			
			ТаблицаПриход = ДвиженияРегистровВх.ТаблицаПриход;
		Иначе
			ТаблицаПриход = Новый ТаблицаЗначений;
		КонецЕсли;
		
		// Увеличение количества по реализации - зачет аванса покупателя
		Выручка.ЕНВД		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Комиссия	 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Патент		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.ТорговыйСбор = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ТорговыйСбор, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Всего		 = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Всего, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		Если ТаблицаРасчетов <> Неопределено И ТаблицаРасчетов.Количество() > 0 Тогда
			Если ТаблицаРасчетов.Итог("ОстатокВзаиморасчетов") > 0 Тогда
				РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаРасчетов, ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			// Уменьшение количества по реализации - отражение возврата и корректировка КУДиР
			КорректировкаРеализацииУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаВозврат, РасходыУСНПоСделке, ДвиженияРегистровВх);
		КонецЕсли;
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
	ИначеЕсли (ВидОперации = "Оплата") Тогда
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, ?(ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет"), "ОплатаАО", "Оплата"));
		Конецесли;

	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаЗарплаты;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаДепонентов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ВыплатаЗПРаботнику") Тогда
		
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаЗарплаты;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ВыплатаДГПХРаботнику") Тогда
		
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаДоговоровПодряда;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Договорник");
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ОплатаОтПокупателя")
		ИЛИ (ВидОперации = "ОплатаОтФакторинговойКомпании")
		ИЛИ (ВидОперации = "ОплатаОтЭквайера") Тогда
		
		ТаблицаОплат      = СтруктураДопПараметров.ТаблицаРасчетов;
		ТаблицаНДСПродажи = СтруктураДопПараметров.ТаблицаНДСПродажи;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход", ТаблицаНДСПродажи);
		Конецесли;
		
	ИначеЕсли (ВидОперации = "ВозвратНаПлатежнуюКарту") Тогда
		
		Если СтруктураДопПараметров.Свойство("КУДиРПереквалификация") Тогда
			ВозвратНаПлатежнуюКартуПереквалификацияДоходов(СтруктураДопПараметров.КУДиРПереквалификация, КУДиР);
		КонецЕсли;
		Если СтруктураДопПараметров.Свойство("КУДиРПатент") Тогда
			ВозвратНаПлатежнуюКартуПереквалификацияДоходовПатент(СтруктураДопПараметров.КУДиРПатент, ДвиженияКУДиРПатент);
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "НачислениеЗП") Тогда
		НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, СтруктураДопПараметров);

	ИначеЕсли ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
		НачислениеСтраховыхВзносовИП(СтруктураШапкиДокумента, ДвиженияРегистров, СтруктураДопПараметров);
		
	ИначеЕсли ВидОперации = "НачислениеИмущественныхНалогов" Тогда
		НачислениеИмущественныхНалогов(СтруктураШапкиДокумента, ДвиженияРегистров, СтруктураДопПараметров);
		
	ИначеЕсли ВидОперации = "НачислениеТорговогоСбора" Тогда
		НачислениеТорговогоСбора(СтруктураШапкиДокумента, ДвиженияРегистров, СтруктураДопПараметров);
		
	ИначеЕсли (ВидОперации = "СписаниеРБП") Тогда
		СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "РаспределениеЕНВД") Тогда
		РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "СписаниеТЗР") Тогда
		СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли ВидОперации = "СписаниеТаможенныхПлатежей" Тогда
		СписаниеТаможенныхПлатежей(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли ВидОперации = "ПеречислениеНалога" ИЛИ ВидОперации = "УплатаНалогаПоКвитанции" Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		
		ОписаниеПолучателя = "";

		СчетНалога = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
		Если СчетНалога = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате Тогда

			ОписаниеПолучателя = "НДСТаможенныйСоюз";

			ТаблицаОплат.Колонки.Добавить("РасчетныйДокумент");

			НоваяСтрока = ТаблицаОплат.Добавить();
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
			НоваяСтрока.РасчетныйДокумент  = ДокументСсылка.СубконтоДт3;
			НоваяСтрока.Сделка             = Неопределено;
			НоваяСтрока.Сумма              = ДокументСсылка.СуммаДокумента;

		Иначе

			ОписаниеПолучателя = "Налог";
			
			НоваяСтрока = ТаблицаОплат.Добавить();
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
			НоваяСтрока.Сделка = Неопределено;
			
			СуммаПлатежа = 0;
			
			Если (СчетНалога = ПланыСчетов.Хозрасчетный.НДФЛ
					ИЛИ СчетНалога = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины)
				И СтруктураДопПараметров.Свойство("ТаблицаПеречислениеНДФЛ")
				И ЗначениеЗаполнено(СтруктураДопПараметров.ТаблицаПеречислениеНДФЛ) Тогда
				// Перечисление НДФЛ в разбивке по сотрудникам, "нетрудовой" НДФЛ в расходах не учитывается.
				ОтборСтрок = Новый Структура("ИсчисленоПоДивидендам", Ложь);
				ОтражаемыеПлатежи = СтруктураДопПараметров.ТаблицаПеречислениеНДФЛ.Скопировать(ОтборСтрок, "Сумма");
				СуммаПлатежа = ОтражаемыеПлатежи.Итог("Сумма");
				// Не отражаемая в НУ УСН сумма платежа должна быть учтена в графе "Расходы (всего)".
				КУДиР.Графа6 = КУДиР.Графа6 + (ДокументСсылка.СуммаДокумента - СуммаПлатежа);
			Иначе
				СуммаПлатежа = ДокументСсылка.СуммаДокумента;
			КонецЕсли;
			
			НоваяСтрока.Сумма = СуммаПлатежа;

		КонецЕсли;

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ОписаниеПолучателя);

		Если ДвиженияРегистров <> Неопределено Тогда
			ДвиженияРегистров.КУДиР.Колонки.Добавить("КлючУникальности");
			ДвиженияРегистров.КУДиР.ЗаполнитьЗначения(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом, "КлючУникальности");
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ВыдачаПодотчетномуЛицу") Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");

		НоваяСтрока = ТаблицаОплат.Добавить();

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента) Тогда
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.ФизЛицо;
		Иначе
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		КонецЕсли;

		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо");

	ИначеЕсли (ВидОперации = "ВозвратОтПодотчетногоЛица") Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");

		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо", ВидДвиженияНакопления.Расход);
		КУДиР.Графа6 = - КУДиР.Графа4;
		КУДиР.Графа4 = 0;
		КУДиР.Графа5 = 0;

	ИначеЕсли (ВидОперации = "ВозвратОтПоставщика") Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход");
			КУДиР.Графа6 = - КУДиР.Графа4;
			КУДиР.Графа4 = 0;
			КУДиР.Графа5 = 0;
		Конецесли;

	ИначеЕсли (ВидОперации = "ВозвратПокупателю") Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "ВозвратПокупателю");
			Если НЕ СторнироватьДоходыПриВозврате Тогда
				КУДиР.Графа4 = 0;
				КУДиР.Графа5 = 0;
				КУДиР.Графа6 = 0;
			КонецЕсли;
		Конецесли;
		
	ИначеЕсли (ВидОперации = "ОплатаОтПокупателяБезЗакрывающихДокументов")
		Или (ВидОперации = "РозничнаяВыручкаБезЗакрывающихДокументов") Тогда
		
		ПараметрыКурсаДокумента = Новый Структура("Валюта, Курс, Кратность",
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьДокумента);
		ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность",
			ВалютаРегламентированногоУчета, 1, 1);
		
		Для Каждого СтрокаТаблицы Из ДокументСсылка.РасшифровкаПлатежа Цикл
			
			СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаТаблицы.СуммаПлатежа,
				ПараметрыКурсаДокумента,
				ПараметрыКурсаВалютыРегламентированногоУчета);
			
			Если СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходУСН Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаПлатежа;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходТорговыйСбор Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаПлатежа;
				КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + СуммаПлатежа;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СуммаПлатежа;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = СтрокаТаблицы.ПорядокОтраженияАванса;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, 
					СтруктураШапкиДокумента.ВидОперацииУСН, 
					МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = СуммаПлатежа;
			КонецЕсли;
		
		КонецЦикла;
		
	ИначеЕсли ВидОперации = "ОплатаОтЭквайераБезЗакрывающихДокументов" Тогда
		
		ПараметрыКурсаДокумента = Новый Структура("Валюта, Курс, Кратность",
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьДокумента);
		ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность",
			ВалютаРегламентированногоУчета, 1, 1);
		
		Для Каждого СтрокаТаблицы Из ДокументСсылка.РасшифровкаПлатежа Цикл
			
			СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаТаблицы.СуммаПлатежа,
				ПараметрыКурсаДокумента,
				ПараметрыКурсаВалютыРегламентированногоУчета);
			СуммаУслуг = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаТаблицы.СуммаУслуг,
				ПараметрыКурсаДокумента,
				ПараметрыКурсаВалютыРегламентированногоУчета);
			
			Если СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходУСН Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаПлатежа + СуммаУслуг;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходТорговыйСбор Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаПлатежа + СуммаУслуг;
				КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + СуммаПлатежа + СуммаУслуг;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД Тогда
				КУДиР.Графа4 = КУДиР.Графа4 + СуммаПлатежа;
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СуммаПлатежа + СуммаУслуг;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = СтрокаТаблицы.ПорядокОтраженияАванса;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, 
					СтруктураШапкиДокумента.ВидОперацииУСН,
					МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = СуммаПлатежа + СуммаУслуг;
			КонецЕсли;
		
		КонецЦикла;
		
	ИначеЕсли ВидОперации = "ВозвратПокупателюБезЗакрывающихДокументов" Тогда
		
		ПараметрыКурсаДокумента = Новый Структура("Валюта, Курс, Кратность",
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьДокумента);
		ПараметрыКурсаВалютыРегламентированногоУчета = Новый Структура("Валюта, Курс, Кратность",
			ВалютаРегламентированногоУчета, 1, 1);
		
		Для Каждого СтрокаТаблицы Из ДокументСсылка.РасшифровкаПлатежа Цикл
			
			СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаТаблицы.СуммаПлатежа,
				ПараметрыКурсаДокумента,
				ПараметрыКурсаВалютыРегламентированногоУчета);
			
			Если СтрокаТаблицы.ПорядокОтраженияДохода = Перечисления.ПорядокОтраженияАвансов.ДоходУСН Тогда
				КУДиР.Графа4 = КУДиР.Графа4 - СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 - СуммаПлатежа;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияДохода = Перечисления.ПорядокОтраженияАвансов.ДоходТорговыйСбор Тогда
				КУДиР.Графа4 = КУДиР.Графа4 - СуммаПлатежа;
				КУДиР.Графа5 = КУДиР.Графа5 - СуммаПлатежа;
				КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор - СуммаПлатежа;
			ИначеЕсли СтрокаТаблицы.ПорядокОтраженияДохода = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД Тогда
				КУДиР.Графа4 = КУДиР.Графа4 - СуммаПлатежа;
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СуммаПлатежа;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ПорядокОтраженияДохода) = Тип("СправочникСсылка.Патенты") Тогда
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = СтрокаТаблицы.ПорядокОтраженияДохода;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, 
					СтруктураШапкиДокумента.ВидОперацииУСН, 
					МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = - СуммаПлатежа;
			КонецЕсли;
		
		КонецЦикла;
		
	ИначеЕсли (ВидОперации = "ВыручкаСНТТ") Тогда
		
		Если УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) =
				Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
				
			ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы
				И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаТорговомСборе", МетаданныеДокумента)
				И ДокументСсылка.ДеятельностьНаТорговомСборе Тогда
				КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + ДокументСсылка.Графа5_УСН;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНПатент Тогда
				
				СуммаДокумента = ДокументСсылка.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
				Если СуммаДокумента > 0
					И ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента)
					И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
					
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
					ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
					ЗаписьКУДиРПатент.Графа4 = СуммаДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ПрименениеСпецрежимов = ПрименениеОсобыхРежимовНалогообложения(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
			
			ОсобыйПорядокНалогообложения = (ПрименениеСпецрежимов.ЕНВД Или ПрименениеСпецрежимов.Патент)
				И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);

			СуммаДокумента = ДокументСсылка.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			КУДиР.Графа4   = КУДиР.Графа4 + СуммаДокумента;

			Если ОсобыйПорядокНалогообложения Тогда
				КУДиР.ДоходЕНВД  = КУДиР.ДоходЕНВД + СуммаДокумента;
				ПояснениеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"Выручка в сумме %1 руб. отнесена к деятельности с особым порядком налогообложения. ",
						ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаДокумента, , , " "));
				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеСобытия);
			Иначе
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаДокумента;
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ПереносЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		КонецЕсли;
		//таблицу АвансПокупателя не обрабатываем - по этим взаиморасчетам нет расходов

	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаДебитор") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			
			ТаблицаНДСПродажи = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаНДСПродажи", ТаблицаНДСПродажи);
			
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход", ТаблицаНДСПродажи);
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
				Для Каждого СтрокаРасшифровки Из КУДиР.РасшифровкаПоДоговорам Цикл
					СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СтрокаРасшифровки.Графа4;
					СтрокаРасшифровки.Графа4 = 0;
				КонецЦикла;
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 И
				ЗначениеЗаполнено(ТаблицаОплат[0].ДоговорКонтрагента) И
				(ТаблицаОплат[0].ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
				Для Каждого СтрокаРасшифровки Из КУДиР.РасшифровкаПоДоговорам Цикл
					СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СтрокаРасшифровки.Графа4;
					СтрокаРасшифровки.Графа4 = 0;
				КонецЦикла;
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаКредитор") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Оплата");
				КУДиР.Графа6 = 0;
				КУДиР.РасшифровкаПоДоговорам.ЗаполнитьЗначения(0, "Графа6");
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "СписаниеДебиторскойЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов

	ИначеЕсли (ВидОперации = "СписаниеКредиторскойЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			//Обработаем для включение в доходы
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "ПрочееДДС") Тогда

		ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);

	ИначеЕсли (ВидОперации = "ПродажаВалюты") Тогда
		
		Если СтруктураДопПараметров.Свойство("ПокупкаПродажаВалюты") Тогда
			ТаблицаПокупкаПродажаВалюты = СтруктураДопПараметров.ПокупкаПродажаВалюты;
			ПокупкаПродажаВалюты(ДокументСсылка, ТаблицаПокупкаПродажаВалюты, КУДиР, "Продажа");
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ПокупкаВалюты") Тогда
		
		Если СтруктураДопПараметров.Свойство("ПокупкаПродажаВалюты") Тогда
			ТаблицаПокупкаПродажаВалюты = СтруктураДопПараметров.ПокупкаПродажаВалюты;
			ПокупкаПродажаВалюты(ДокументСсылка, ТаблицаПокупкаПродажаВалюты, КУДиР, "Покупка");
		КонецЕсли;
		
	КонецЕсли;

	// 2. По структуре ДвиженияРегистров, полученной ранее, сформировать движения документа
	Если ВидОперации = "НачислениеЗП" Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодРегистрации", МетаданныеДокумента), КонецМесяца(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата);
	Иначе
		МоментДокумента = КонецДня(СтруктураШапкиДокумента.ДатаОплаты);
	КонецЕсли;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		
		Если ДвиженияРегистров <> Неопределено Тогда

			Если ДвиженияРегистров.ВзаиморасчетыРасход.Количество() > 0 Тогда

				ДокументОбъект = СтруктураШапкиДокумента.Объект;
				НаборДвижений = ДокументОбъект.Движения.ПрочиеРасчеты;
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
				// Заполним таблицу движений.
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.ВзаиморасчетыРасход, ТаблицаДвижений);
				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
				ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
				ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
				ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
				ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");

				НаборДвижений.мПериод            = МоментДокумента;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				ДокументОбъект.Движения.ПрочиеРасчеты.ВыполнитьДвижения();

			КонецЕсли;

			Если ДвиженияРегистров.РасходыУСН.Количество() > 0 Тогда
				НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

				ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
				// Заполним таблицу движений.
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.РасходыУСН, ТаблицаДвижений);
				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
				ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
				ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
				ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

				Если ЭтапПроведения = 0 Тогда
					Для каждого ТекущееДвижение Из ТаблицаДвижений Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущееДвижение);
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.Прочитать();

					Инд=0;
					Пока Инд < НаборЗаписей.Количество() Цикл
						Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
							НаборЗаписей.Удалить(Инд);
						Иначе
							Инд=Инд+1;
						КонецЕсли;
					КонецЦикла;

					ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");
					Для каждого ТекущееДвижение Из ТаблицаДвижений Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущееДвижение);
					КонецЦикла;
					НаборЗаписей.Записать(Истина);

				КонецЕсли;
			КонецЕсли;

			Если (ДвиженияРегистров.КУДиР.Количество() > 0)
					Или (КУДиР.Графа4 <> 0)
					Или (КУДиР.Графа5 <> 0)
					Или (КУДиР.Графа6 <> 0)
					Или (КУДиР.Графа7 <> 0)
					Или (КУДиР.ДоходЕНВД <> 0)
					Или (КУДиР.ДоходТорговыйСбор <> 0) Тогда

				ИмяДокумента = МетаданныеДокумента.Имя;
				ТаблицаРасходов = ДвиженияРегистров.КУДиР.Скопировать();
				Если ТаблицаРасходов.Колонки.Найти("ВидРасхода") = Неопределено Тогда
					ТаблицаРасходов.Колонки.Добавить("ВидРасхода");
				КонецЕсли;
				Если ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
					ТаблицаРасходов.Колонки.Добавить("ОтражениеВУСН");
				КонецЕсли;
				Если ТаблицаРасходов.Колонки.Найти("Валюта") = Неопределено Тогда
					ТаблицаРасходов.Колонки.Добавить("Валюта");
					ТаблицаРасходов.ЗаполнитьЗначения(ВалютаРегламентированногоУчета, "Валюта");
				КонецЕсли;
				Если ТаблицаРасходов.Колонки.Найти("Сумма") = Неопределено Тогда
					ТаблицаРасходов.Колонки.Добавить("Сумма");
					ТаблицаРасходов.ЗаполнитьЗначения(0, "Сумма");
				КонецЕсли;
				Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
					ТаблицаРасходов.Колонки.Добавить("НДС");
					ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
				КонецЕсли;

				КолвоЭлементовКоллекции = ТаблицаРасходов.Количество();
				Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
					ЭлементКоллекции = ТаблицаРасходов[КолвоЭлементовКоллекции - ОбратныйИндекс];
					Если (ЭлементКоллекции.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются) И (ЭлементКоллекции.Сумма > 0) Тогда
						ТаблицаРасходов.Удалить(ЭлементКоллекции);
					ИначеЕсли ЭлементКоллекции.Валюта <> ВалютаРегламентированногоУчета Тогда
						СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЭлементКоллекции.Валюта, СтруктураШапкиДокумента.Дата);
						ЭлементКоллекции.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.Сумма, ЭлементКоллекции.Валюта,
																	ВалютаРегламентированногоУчета,
																	СтруктураКурса.Курс, 1,
																	СтруктураКурса.Кратность, 1);
						ЭлементКоллекции.НДС   = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.НДС, ЭлементКоллекции.Валюта,
																	ВалютаРегламентированногоУчета,
																	СтруктураКурса.Курс, 1,
																	СтруктураКурса.Кратность, 1);
					КонецЕсли;
				КонецЦикла;

				Если ВидОперации = "РаспределениеЕНВД" Тогда
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "", "Сумма, НДС", ВидОперации);
				ИначеЕсли ВидОперации = "ГТД" ИЛИ ВидОперации = "СписаниеТаможенныхПлатежей" Тогда
					ИменаГруппировок = "ВидРасхода,ЭтоТаможенныйНДС";
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
				ИначеЕсли ТаблицаРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено Тогда // для корректировочных документов даты движений могут быть разные
					ИменаГруппировок = "ВидРасхода, ДатаКорректировки";
					Если ТаблицаРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
						ИменаГруппировок = ИменаГруппировок + ", ДополнительноеОписание";
					КонецЕсли; 
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
				ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("КлючУникальности") = НЕОПРЕДЕЛЕНО Тогда
					ИменаГруппировок = "ВидРасхода, КлючУникальности";
					Если ТаблицаРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
						ИменаГруппировок = ИменаГруппировок + ", ДополнительноеОписание";
					КонецЕсли;
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
				ИначеЕсли ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
					ИменаГруппировок = "ДокументОплаты, ВидРасхода, ВидСтраховогоВзноса, СтраховойПериод, СчетУчета";
					Если ТаблицаРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
						ИменаГруппировок = ИменаГруппировок + ", ДополнительноеОписание";
					КонецЕсли;
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
				Иначе
					ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "ВидРасхода", "Сумма, НДС", ВидОперации);
				КонецЕсли;

				ДеревоРасходов.Колонки.Добавить("Графа4",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДеревоРасходов.Колонки.Добавить("Графа5",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДеревоРасходов.Колонки.Добавить("Графа6",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДеревоРасходов.Колонки.Добавить("ДоходЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДеревоРасходов.Колонки.Добавить("ДоходТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ДеревоРасходов.Колонки.Добавить("Описание");
				ИтогоРасходов = ДеревоРасходов.Итог("Сумма");
				
				Если ИтогоРасходов <> 0 Тогда

					К4  = КУДиР.Графа4 / ИтогоРасходов;
					К5  = КУДиР.Графа5 / ИтогоРасходов;
					К6  = КУДиР.Графа6 / ИтогоРасходов;
					КЕ  = КУДиР.ДоходЕНВД / ИтогоРасходов;
					КТС = КУДиР.ДоходТорговыйСбор / ИтогоРасходов;
					Для каждого Расход Из ДеревоРасходов Цикл
						
						Расход.Строки.Колонки.Добавить("Графа4",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
						Расход.Строки.Колонки.Добавить("Графа5",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
						Расход.Строки.Колонки.Добавить("Графа6",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
						Расход.Строки.Колонки.Добавить("ДоходЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
						Расход.Строки.Колонки.Добавить("ДоходТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
						Расход.Строки.Колонки.Добавить("Описание");
						
						Если Расход.Сумма > 0 Тогда
							Расход.Графа4            = Мин(К4 * Расход.Сумма, Расход.Сумма);
							Расход.Графа5            = Мин(К5 * Расход.Сумма, Расход.Сумма);
							Расход.Графа6            = Мин(К6 * Расход.Сумма, Расход.Сумма);
							Расход.ДоходЕНВД         = Мин(КЕ * Расход.Сумма, Расход.Сумма);
							Расход.ДоходТорговыйСбор = Мин(КТС * Расход.Сумма, Расход.Сумма);
						Иначе
							Расход.Графа4            = Макс(К4* Расход.Сумма, Расход.Сумма);
							Расход.Графа5            = Макс(К5* Расход.Сумма, Расход.Сумма);
							Расход.Графа6            = Макс(К6* Расход.Сумма, Расход.Сумма);
							Расход.ДоходЕНВД         = Макс(КЕ* Расход.Сумма, Расход.Сумма);
							Расход.ДоходТорговыйСбор = Макс(КТС * Расход.Сумма, Расход.Сумма);
						КонецЕсли;

					КонецЦикла;
					Если ДеревоРасходов.Количество() > 0 Тогда
						ДеревоРасходов[0].Графа4            = ДеревоРасходов[0].Графа4 + (КУДиР.Графа4 - ДеревоРасходов.Итог("Графа4"));
						ДеревоРасходов[0].Графа5            = ДеревоРасходов[0].Графа5 + (КУДиР.Графа5 - ДеревоРасходов.Итог("Графа5"));
						ДеревоРасходов[0].Графа6            = ДеревоРасходов[0].Графа6 + (КУДиР.Графа6 - ДеревоРасходов.Итог("Графа6"));
						ДеревоРасходов[0].ДоходЕНВД         = ДеревоРасходов[0].ДоходЕНВД
							+ (КУДиР.ДоходЕНВД - ДеревоРасходов.Итог("ДоходЕНВД"));
						ДеревоРасходов[0].ДоходТорговыйСбор = ДеревоРасходов[0].ДоходТорговыйСбор
							+ (КУДиР.ДоходТорговыйСбор - ДеревоРасходов.Итог("ДоходТорговыйСбор"));
					КонецЕсли;
				КонецЕсли;
				
				// Заполним содержание записей КУДиР. Это требуется вне зависимости от общего итога по признанным расходам.
				Для каждого Расход Из ДеревоРасходов Цикл
					Расход.Описание = СобратьСодержаниеКУДиРПоРезультатамПризнанияРасходов(КУДиР,
						ВидОперации, Расход, ДеревоРасходов, СтруктураШапкиДокумента);
				КонецЦикла;
				
				// Данные для КУДиР могут быть сформированы локально в самой структуре.
				// Если таблица признанных расходов пуста - необходимо просто добавить в нее данные структуры КУДиР без распределения.
				Если (ДеревоРасходов.Количество() = 0)
					И ((КУДир.Графа4 <> 0) Или (КУДир.Графа5 <> 0) Или (КУДир.Графа6 <> 0) Или (КУДир.Графа7 <> 0)
						Или (КУДир.ДоходЕНВД <> 0) Или КУДиР.ДоходТорговыйСбор <> 0) Тогда
					Запись = ДеревоРасходов.Добавить();
					Запись.Описание          = СобратьСодержаниеКУДиР(КУДиР.ЧастиСодержания);
					Запись.Графа4            = КУДиР.Графа4;
					Запись.Графа5            = КУДиР.Графа5;
					Запись.Графа6            = КУДиР.Графа6;
					Запись.Сумма             = КУДиР.Графа7;
					Запись.НДС               = КУДиР.НДС;
					Запись.ДоходЕНВД         = КУДиР.ДоходЕНВД;
					Запись.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор;
				КонецЕсли;

				ДокументОбъект = СтруктураШапкиДокумента.Объект;
				НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;

				Инд=0;
				Пока Инд < НаборЗаписей.Количество() Цикл
					Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
						НаборЗаписей.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;

				Если ДокументОбъект.Движения.Найти("РасшифровкаКУДиР") <> Неопределено Тогда
					НаборЗаписейРасшифровки = ДокументОбъект.Движения.РасшифровкаКУДиР;
					Инд=0;
					Пока Инд < НаборЗаписейРасшифровки.Количество() Цикл
						Если НЕ НаборЗаписейРасшифровки[Инд].ЭтапПроведения < ЭтапПроведения Тогда
							НаборЗаписейРасшифровки.Удалить(Инд);
						Иначе
							Инд=Инд+1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					НаборЗаписейРасшифровки = Неопределено;
				КонецЕсли;
				
				ОтражатьРазнымиПериодами = (ДеревоРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено);
				
				ТаблицаОплатыОС = НоваяТаблицаОплатыОС();
				ОтражатьОплатыОСДляУСН = ДокументОбъект.Движения.Найти("ОплатыОСДляУСН") <> Неопределено;
				
				Для каждого Расход Из ДеревоРасходов Цикл
					
					Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ОС Тогда
						
						Если ОтражатьОплатыОСДляУСН Тогда
						
							ЕстьОплатыОСДляУСН = Истина;
							
							Для Каждого СтрокаОС Из Расход.Строки Цикл
							
								НоваяСтрокаОплатыОС = ТаблицаОплатыОС.Добавить();
								НоваяСтрокаОплатыОС.ОсновноеСредство         = СтрокаОС.ЭлементРасхода;
								НоваяСтрокаОплатыОС.Организация              = ДокументСсылка.Организация;
								НоваяСтрокаОплатыОС.РеквизитыДокументаОплаты = СтрокаОС.РеквизитыДокументаОплаты;
								НоваяСтрокаОплатыОС.СуммаОплаты              = СтрокаОС.Сумма;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если Расход.Графа6 = 0 Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					ЗаписьКУДиР = НаборЗаписей.Добавить();
					ЗаписьКУДиР.Период = МоментДокумента;
					Если ОтражатьРазнымиПериодами Тогда
						Если ЗначениеЗаполнено(Расход.ДатаКорректировки) Тогда
							ЗаписьКУДиР.Период = Расход.ДатаКорректировки;
						КонецЕсли;
					КонецЕсли;
					ЗаписьКУДиР.Регистратор       = ДокументСсылка;
					ЗаписьКУДиР.Активность        = Истина;
					ЗаписьКУДиР.Организация       = ДокументСсылка.Организация;
					ЗаписьКУДиР.Содержание        = Расход.Описание;
					ЗаписьКУДиР.ВидРасхода        = Расход.ВидРасхода;
					ЗаписьКУДиР.Графа4            = Расход.Графа4;
					ЗаписьКУДиР.Графа5            = Расход.Графа5;
					ЗаписьКУДиР.ДоходЕНВД         = Расход.ДоходЕНВД;
					ЗаписьКУДиР.ДоходТорговыйСбор = Расход.ДоходТорговыйСбор;
					ЗаписьКУДиР.Графа6            = Расход.Графа6;
					ЗаписьКУДиР.ЭтапПроведения    = ЭтапПроведения;
					ЗаписьКУДиР.СтрокаДокумента   = НаборЗаписей.Количество();

					Если ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
						ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(
							Расход.ДокументОплаты, ЗаписьКУДиР.Организация, ЗаписьКУДиР.Период);
					Иначе
						ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(
							ДокументСсылка, ЗаписьКУДиР.Организация, ЗаписьКУДиР.Период);
					КонецЕсли;
					
					Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ОС Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаписьКУДиР.Графа7 = Расход.Сумма;
					ЗаписьКУДиР.НДС    = Расход.НДС;
					
					Если (ЗначениеЗаполнено(Расход.ВидРасхода)) или (ВидОперации = "РаспределениеЕНВД") Тогда
						ПараметрыЗаписиРасшифровки = СтруктураШапкиДокумента;
						Если ОтражатьРазнымиПериодами Тогда
							Если ЗначениеЗаполнено(Расход.ДатаКорректировки) И Год(Расход.ДатаКорректировки) < Год(МоментДокумента) Тогда
								ПараметрыЗаписиРасшифровки = ?(РеквизитыКорректировки = Неопределено, СтруктураШапкиДокумента, РеквизитыКорректировки);
							КонецЕсли;
						КонецЕсли;
						СформироватьЗаписьРасшифровки(ПараметрыЗаписиРасшифровки, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации);
					КонецЕсли;
					
				КонецЦикла;

				Если ТаблицаОплатыОС.Количество() > 0 Тогда
					
					ОплатыОСДляУСН = ДокументОбъект.Движения.ОплатыОСДляУСН;
					
					ТаблицаОплатыОСДляУСН = ПодготовитьТаблицуОплатыОСДляУСН(ТаблицаОплатыОС);
					
					Для Каждого СтрокаОплатыОС Из ТаблицаОплатыОСДляУСН Цикл
						
						Движение = ОплатыОСДляУСН.Добавить();
						
						Движение.Период           = МоментДокумента;
						Движение.Регистратор      = ДокументСсылка;
						Движение.Активность       = Истина;
						
						ЗаполнитьЗначенияСвойств(Движение, СтрокаОплатыОС);
						
					КонецЦикла;
					
					ОплатыОСДляУСН.Записать(Истина);
					
				КонецЕсли;
				
				НаборЗаписей.Записать(Истина);
				
				Если ДокументОбъект.Движения.Найти("РасшифровкаКУДиР") <> Неопределено Тогда
					НаборЗаписейРасшифровки.Записать(Истина);
				КонецЕсли;

			КонецЕсли;

		ИначеЕсли КУДиР.Графа4 <> 0
				Или КУДиР.Графа5 <> 0
				Или КУДиР.Графа6 <> 0
				Или КУДиР.Графа7 <> 0
				Или КУДиР.ДоходЕНВД <> 0
				Или КУДиР.ДоходТорговыйСбор <> 0 Тогда

			ДокументОбъект = СтруктураШапкиДокумента.Объект;

			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;

			Если ЭтапПроведения <> 0 Тогда
				НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
				Инд=0;
				Пока Инд < НаборЗаписей.Количество() Цикл
					Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
						НаборЗаписей.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка, ДокументСсылка.Организация, МоментДокумента);
			
			// Расшифровка КУДиР по договорам выполняется только для УСН (доходы).
			Если КУДиР.РасшифровкаПоДоговорам.Количество() > 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
				
				// Поля структуры КУДиР нетипизированы, из-за чего знаков может быть больше, 
				// чем 2 после запятой, поэтому округляем перед сравнением с данными расшифровки.
				КУДиР.Графа4            = Окр(КУДиР.Графа4, 2);
				КУДиР.Графа5            = Окр(КУДиР.Графа5, 2);
				КУДиР.Графа6            = Окр(КУДиР.Графа6, 2);
				КУДиР.Графа7            = Окр(КУДиР.Графа7, 2);
				КУДиР.НДС               = Окр(КУДиР.НДС, 2);
				КУДиР.ДоходЕНВД         = Окр(КУДиР.ДоходЕНВД, 2);
				КУДиР.ДоходТорговыйСбор = Окр(КУДиР.ДоходТорговыйСбор, 2);

				СвернутьРасшифровкуПлатежаПоДоговорам(КУДиР, СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);
				
				Если КУДиР.РасшифровкаПоДоговорам.Итог("Графа4") <> КУДиР.Графа4
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("Графа5") <> КУДиР.Графа5
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("Графа6") <> КУДиР.Графа6
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("Графа7") <> КУДиР.Графа7
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("НДС") <> КУДиР.НДС
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("ДоходЕНВД") <> КУДиР.ДоходЕНВД
					ИЛИ КУДиР.РасшифровкаПоДоговорам.Итог("ДоходТорговыйСбор") <> КУДиР.ДоходТорговыйСбор Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Обнаружено расхождение общих сумм КУДиР с суммами в таблице РасшифровкаПоДоговорам по документу %1'"), ДокументСсылка);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Для Каждого СтрокаРасшифровки Из КУДиР.РасшифровкаПоДоговорам Цикл
					
					Если СтрокаРасшифровки.Графа4 = 0
						И СтрокаРасшифровки.Графа5 = 0
						И СтрокаРасшифровки.Графа6 = 0
						И СтрокаРасшифровки.Графа7 = 0
						И СтрокаРасшифровки.НДС = 0
						И СтрокаРасшифровки.ДоходЕНВД = 0
						И СтрокаРасшифровки.ДоходТорговыйСбор = 0 Тогда
						// Нет сумм для записи, пропускаем.
						Продолжить;
					КонецЕсли;
					
					ЗаписьКУДиР                    = НаборЗаписей.Добавить();
					ЗаписьКУДиР.Период             = МоментДокумента;
					ЗаписьКУДиР.Регистратор        = ДокументСсылка;
					ЗаписьКУДиР.Активность         = Истина;
					ЗаписьКУДиР.Организация        = ДокументСсылка.Организация;
					ЗаписьКУДиР.Содержание         = СобратьСодержаниеКУДиР(СтрокаРасшифровки.ЧастиСодержания);
					ЗаписьКУДиР.Графа4             = СтрокаРасшифровки.Графа4;
					ЗаписьКУДиР.Графа5             = СтрокаРасшифровки.Графа5;
					ЗаписьКУДиР.Графа6             = СтрокаРасшифровки.Графа6;
					ЗаписьКУДиР.Графа7             = СтрокаРасшифровки.Графа7;
					ЗаписьКУДиР.НДС                = СтрокаРасшифровки.НДС;
					ЗаписьКУДиР.ДоходЕНВД          = СтрокаРасшифровки.ДоходЕНВД;
					ЗаписьКУДиР.ДоходТорговыйСбор  = СтрокаРасшифровки.ДоходТорговыйСбор;
					ЗаписьКУДиР.ЭтапПроведения     = ЭтапПроведения;
					ЗаписьКУДиР.Контрагент         = СтрокаРасшифровки.Контрагент;
					ЗаписьКУДиР.ДоговорКонтрагента = СтрокаРасшифровки.ДоговорКонтрагента;
					ЗаписьКУДиР.ТипОплаты          = СтрокаРасшифровки.ТипОплаты;
					
					ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
					
				КонецЦикла;
				
			Иначе
				
				ЗаписьКУДиР = НаборЗаписей.Добавить();
				ЗаписьКУДиР.Период = МоментДокумента;
				ЗаписьКУДиР.Регистратор = ДокументСсылка;
				ЗаписьКУДиР.Активность = Истина;
				ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
				ЗаписьКУДиР.Содержание = СобратьСодержаниеКУДиР(КУДиР.ЧастиСодержания);
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				ЗаписьКУДиР.Графа4 = КУДиР.Графа4;
				ЗаписьКУДиР.Графа5 = КУДиР.Графа5;
				ЗаписьКУДиР.Графа6 = КУДиР.Графа6;
				ЗаписьКУДиР.Графа7 = КУДиР.Графа7;
				ЗаписьКУДиР.НДС    = КУДиР.НДС;
				ЗаписьКУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД;
				ЗаписьКУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор;
				ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
			КонецЕсли;

			Если НЕ ЭтоОтложенноеПроведение Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Доходы по патенту.
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНПатент И ДвиженияКУДиРПатент.Количество() > 0 Тогда
		
		НаборЗаписей = СтруктураШапкиДокумента.Объект.Движения.КнигаУчетаДоходовПатент;
		
		Если ЭтапПроведения <> 0 Тогда
			Инд=0;
			Пока Инд < НаборЗаписей.Количество() Цикл
				Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписей.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаПатент Из ДвиженияКУДиРПатент Цикл
			
			Если ЗначениеЗаполнено(СтрокаПатент.Патент) И (СтрокаПатент.Патент.ДатаНачала > МоментДокумента ИЛИ КонецДня(СтрокаПатент.Патент.ДатаОкончания) < МоментДокумента) Тогда
				
				Ошибка = ?(СтрокаПатент.Патент.ДатаНачала > МоментДокумента, " период действия патента еще не наступил.", " истек период действия патента.");
				ТекстОшибки = НСтр("ru='Доходы, отнесенные к деятельности на патенте ""%Патент%"" , не могут быть отражены - ""%Ошибка%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Патент%", СтрокаПатент.Патент);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Ошибка%", Ошибка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка, , , );
				Продолжить;
				
			КонецЕсли;
			
			ЗаписьКУДиР = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, СтрокаПатент);
			
			ЗаписьКУДиР.Период = МоментДокумента;
			ЗаписьКУДиР.Регистратор = ДокументСсылка;
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(
				ДокументСсылка, ДокументСсылка.Организация, МоментДокумента);
			ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
			
		КонецЦикла;
		
		Если НЕ ЭтоОтложенноеПроведение Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетыСКонтрагентами_УслугиФакторингаВУСН(ДокументСсылка, КУДиР, СтруктураДопПараметров, СтруктураШапкиДокумента, ДвиженияРегистров)
	
	ТаблицаРасчетов = СтруктураДопПараметров.ТаблицаРасчетов;
	ИтоговаяСтруктура = Новый Структура(
		"ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();
		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		
		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(
			СтруктураШапкиДокумента,
			ТаблицаПрихода,
			ТаблицаРасчетов.Итог("СуммаВзаиморасчетов"),
			"Оплата",
			,
			,
			ИтоговаяСтруктура);
	КонецЕсли;
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
	
	// Записи в КУДиР
	КУДиР.Графа5 = ТаблицаРасчетов.Итог("СуммаВзаиморасчетов");
	КУДиР.ЧастиСодержания.Событие = СтрШаблон(
		"Стоимость факторинговых услуг контрагента ""%1"" по договору ""%2"" удержана из выручки",
		СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец,
		СтруктураШапкиДокумента.ДоговорКонтрагента);
	
КонецПроцедуры

Процедура СформироватьДвиженияКУДиР(
				СтруктураШапкиДокумента,
				ТаблицаОплат,
				СуммаСторноРасходов,
				СуммаПризнанияНДС = 0,
				СуммаСторноНДС = 0,
				Движения)

	ДвиженияКУДиР = Движения.КУДиР;

	ДвиженияКУДиР.Очистить();
	
	ТаблицаВзаиморасчеты = ТаблицаОплат.Скопировать();

	Если СуммаПризнанияНДС <> 0 Тогда
		СтрокаКниги = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).";
		СтрокаКниги.Графа7          = СуммаПризнанияНДС;
		СтрокаКниги.НДС             = 0;
		СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор,
			СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	КонецЕсли;

	Если СуммаСторноРасходов <> 0 Тогда
		СтрокаКниги = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
		СтрокаКниги.Графа7          = - СуммаСторноРасходов;
		СтрокаКниги.НДС             = - СуммаСторноНДС;
		СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор,
			СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	КонецЕсли;

	СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоВзаиморасчеты,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	СуммаЕНВД = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоЕНВД,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	СуммаКомиссии = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоКомиссия,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	Для Каждого СтрокаРД Из ТаблицаВзаиморасчеты Цикл
		Если НЕ СтрокаРД.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			СуммаЕНВД     = СуммаЕНВД - Мин(СуммаЕНВД, СтрокаРД.СуммаВзаиморасчетовЕНВД);
			СуммаКомиссии = СуммаКомиссии - Мин(СуммаКомиссии, СтрокаРД.СуммаВзаиморасчетовКомитента);
		КонецЕсли;
	КонецЦикла;

	Кратность                  = ?(СтруктураШапкиДокумента.КратностьВзаиморасчетов = 0, 1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	СуммаКорректировкиЕНВД     = Окр(СуммаЕНВД * СтруктураШапкиДокумента.КурсВзаиморасчетов/Кратность, 2, 1);
	СуммаКорректировкиКомиссии = Окр(СуммаКомиссии * СтруктураШапкиДокумента.КурсВзаиморасчетов/Кратность, 2, 1);

	Если СуммаКорректировкиЕНВД > 0 Тогда
		Если СуммаСторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5     = СуммаКорректировкиЕНВД;
			СтрокаКниги.Содержание = СтрокаКниги.Содержание + " Задолженность по возврату товаров ЕНВД " + СуммаКорректировкиЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.ДоходЕНВД  = - СуммаКорректировкиЕНВД;
		Иначе
			СтрокаКниги = ДвиженияКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату товаров ЕНВД " + СуммаКорректировкиЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5          = СуммаКорректировкиЕНВД;
			СтрокаКниги.ДоходЕНВД       = - СуммаКорректировкиЕНВД;
			СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор,
				СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		КонецЕсли;
	КонецЕсли;
	Если СуммаКорректировкиКомиссии > 0 Тогда
		Если СуммаСторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5     = СуммаКорректировкиКомиссии;
			СтрокаКниги.Содержание = СтрокаКниги.Содержание + " Задолженность по возврату комиссионных товаров " + СуммаКорректировкиКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
		Иначе
			СтрокаКниги  = ДвиженияКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.Содержание      = "Задолженность по возврату комиссионных товаров " + СуммаКорректировкиКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5          = СуммаКорректировкиКомиссии;
			СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор,
				СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьЗаписьРасшифровки(СтруктураШапкиДокумента, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации)

	Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
		Или Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги 
		Или Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Командировки Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, ЭлементРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, ДоговорКонтрагента, Партия,
								|РасчетныйДокумент, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, ДоговорКонтрагента, Партия,
								|РасчетныйДокумент, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты, ЭтоТаможенныйНДС",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
		Расход.Строки.Свернуть("ВидРасхода, ЭлементРасхода, ОтражениеВУСН, РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
		ИменаГруппировок = "ВидРасхода, СчетУчета, ОтражениеВУСН, РеквизитыДокументаОплаты";
		Если ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
			ИменаГруппировок = ИменаГруппировок + ", ВидСтраховогоВзноса, СтраховойПериод";
		КонецЕсли;
		Расход.Строки.Свернуть(ИменаГруппировок, "Сумма, НДС");

	КонецЕсли;

	Счетчик = 1;
	Для Каждого Строка Из Расход.Строки Цикл
		Запись 					= НаборЗаписейРасшифровки.Добавить();
		Запись.Период 			= ЗаписьКУДиР.Период;
		Запись.Регистратор 		= ЗаписьКУДиР.Регистратор;
		Запись.Активность 		= Истина;
		Запись.Организация 		= ЗаписьКУДиР.Организация;
		Запись.ВидРасхода 		= Строка.ВидРасхода;
		Запись.СтрокаДокумента 	= ЗаписьКУДиР.СтрокаДокумента;
		Запись.ЭтапПроведения 	= ЗаписьКУДиР.ЭтапПроведения;
		Запись.Графа7			= Строка.Сумма;
		Запись.СтрокаРасхода	= Счетчик;
		Счетчик = Счетчик + 1;

		Запись.РеквизитыПервичногоДокумента = ЗаписьКУДиР.РеквизитыПервичногоДокумента;
		Запись.РеквизитыДокументаОплаты		= Строка.РеквизитыДокументаОплаты;

		Запись.Графа7			= Строка.Сумма;

		Описание = "";
		Если Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
			Описание = "ТМЦ, учитываемые на счете: """ + Строка.СчетУчета + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Описание = "Доп. расходы по ТМЦ, списанным документом: """ + ПредставлениеДокумента(Строка.Партия, СтруктураШапкиДокумента.Организация) + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
			
			Описание = "Таможенные платежи ";
			
			СтрокаНДС = ?(Строка.ЭтоТаможенныйНДС, "(НДС) ", "");
			Описание  = Описание + СтрокаНДС;
			
			ЭтоМатериал = Ложь;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				ЭтоМатериал = Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
			КонецЕсли;
			
			СтрокаГТД = "";
			СтрокаУплаты = "";
			Если ЗначениеЗаполнено(Строка.РасчетныйДокумент)
				И ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				
				РеквизитыГТД	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.РасчетныйДокумент, "НомерГТД, Контрагент");
				СтрокаГТД		= "Таможенная декларация № " + РеквизитыГТД.НомерГТД + """. ";
				СтрокаУплаты	= "Уплачено в адрес таможенного органа """ + РеквизитыГТД.Контрагент + """.";
				
			КонецЕсли;
			
			Если ЭтоМатериал Тогда
				Описание = Описание + "по материалам. " + СтрокаГТД + СтрокаУплаты;
			Иначе
				Описание = описание + "по товарам. " + СтрокаГТД + СтрокаУплаты;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС Тогда
			
			Описание = "НДС, начисленный при ввозе ТМЦ из Таможенного союза";
			
			СтрокаЗаявление = "";
			
			Если ЗначениеЗаполнено(Строка.РасчетныйДокумент)
				И ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
				СтрокаЗаявление = " (" + ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Строка.РасчетныйДокумент, "заявление о ввозе") + ")";
			КонецЕсли;
			
			Описание = Описание + СтрокаЗаявление + ".";
			
			СтрокаУплаты = "";
			
			Если ЗначениеЗаполнено(Строка.РеквизитыДокументаОплаты)
				И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", Строка.РеквизитыДокументаОплаты.Метаданные()) Тогда
				
				Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.РеквизитыДокументаОплаты, "Контрагент");
				СтрокаУплаты = " Уплачен в адрес """ + Контрагент + """, документ уплаты "
					+ ПредставлениеДокумента(Строка.РеквизитыДокументаОплаты, СтруктураШапкиДокумента.Организация) + ".";
				
			КонецЕсли;
			
			Описание = Описание + СтрокаУплаты;
			
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ЛизинговыеПлатежи Тогда
			
			Описание = "Лизинговый платеж";
			Если ЗначениеЗаполнено(Строка.ЭлементРасхода) Тогда
				Описание = Описание + ": """ + Строка.ЭлементРасхода + """.";
			КонецЕсли;
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
			Описание = "Услуги сторонних организаций";
			Если ЗначениеЗаполнено(Строка.ЭлементРасхода) Тогда
				Описание = Описание + ": """ + Строка.ЭлементРасхода + """";
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Описание = Описание + ", отнесенные на счет: """ + Строка.СчетУчета + """.";
			Иначе
				Описание = Описание + ".";    
			КонецЕсли;
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Командировки Тогда

			Описание = "Командировочные расходы";
			Если ЗначениеЗаполнено(Строка.ЭлементРасхода) И ТипЗнч(Строка.ЭлементРасхода) = Тип("СправочникСсылка.Билеты") Тогда
				Описание = Описание + " на проезд по билету """ + Строка.ЭлементРасхода + """";
			ИначеЕсли ЗначениеЗаполнено(Строка.ЭлементРасхода) Тогда
				Описание = Описание + ": """ + Строка.ЭлементРасхода + """";
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Описание = Описание + ", отнесенные на счет: """ + Строка.СчетУчета + """.";
			Иначе
				Описание = Описание + ".";    
			КонецЕсли;
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			Описание = "Статья РБП: """ + Строка.ЭлементРасхода + """, общая сумма:" + Строка.ЭлементРасхода.Сумма
				+ ", период списания с:" + Строка.ЭлементРасхода.ДатаНачалаСписания
				+ " по:" + Строка.ЭлементРасхода.ДатаОкончанияСписания + ".";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			Описание = "Оплата труда сотрудника: """ + Строка.ЭлементРасхода + """.";
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
			Если ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
				Описание = УчетСтраховыхВзносовИП.СодержаниеОперацииУплатыВзносов(Строка.СчетУчета,
					Строка.ВидСтраховогоВзноса, Строка.СтраховойПериод);
			Иначе
				Описание = "Налоги и сборы: """ + Строка.СчетУчета.Наименование + " (счет учета " + Строка.СчетУчета + ")"".";
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
			Описание = "НМА: """ + Строка.ЭлементРасхода + """.";

		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
			Описание = "НДС, предъявленный поставщиком";
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Если Строка.СчетУчета.Количественный Тогда
					Описание = Описание + " по приобретенным ТМЦ, учитываемым на счете: """ + Строка.СчетУчета + """.";
				Иначе
					Описание = Описание + " по услугам, отнесенным на счет: """ + Строка.СчетУчета + """.";
				КонецЕсли;
			Иначе
				Описание = Описание + ".";
			КонецЕсли;

			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец, ЗаписьКУДиР.Период) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом: """ + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли (НЕ ЗначениеЗаполнено(Расход.ВидРасхода)) И (ВидОперации = "РаспределениеЕНВД") Тогда
			Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
				Описание = "Скорректированы результаты распределения предыдущих отчетных периодов.";
			Иначе
				Описание = "Распределены расходы, зарегистрированные документом " + Строка.РасчетныйДокумент;
				Запись.РеквизитыДокументаОплаты	= Строка.РасчетныйДокумент;
			КонецЕсли;

		КонецЕсли;

		Запись.Содержание = Описание;

		Если СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость
			И НЕ Запись.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи
			И Строка.НДС <> 0 Тогда
			
			ЗаписьНДС = НаборЗаписейРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНДС, Запись);
			ЗаписьНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
			ЗаписьНДС.Содержание = "Расходы на уплату НДС, предъявленного поставщиком.";
			ЗаписьНДС.СтрокаРасхода	= Счетчик;
			Счетчик = Счетчик + 1;
			ЗаписьНДС.Графа7 = Строка.НДС;
			Запись.Графа7 = Запись.Графа7 - ЗаписьНДС.Графа7;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Добавить движение по регистру взаиморасчетов УСН
//
Процедура ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвижений, Организация, Контрагент = Неопределено, РасчетныйДокумент, СчетУчета, СуммаДокумента)

	Движение = ТаблицаДвижений.Добавить();
	Движение.Организация 		= Организация;
	Движение.Контрагент 		= Контрагент;
	Движение.СчетУчета	 		= СчетУчета;
	Движение.РасчетныйДокумент 	= РасчетныйДокумент;
	Движение.Сумма 				= СуммаДокумента;

КонецПроцедуры

//Отражает событие "списание" по регистру расходов при УСН
//ТаблицаПартий - таблица движений регистра партионного учета НУ
Процедура СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, Договор, СтатусПартии, ВидОперации = "Списание")

	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);

	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);

	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, СчетУчета, ДокументОприходования");
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	ВидыРасхода = Новый Массив;
	ВидыРасхода.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);
	ВидыРасхода.Добавить(Перечисления.ВидыРасходовУСН.НДС_ТС);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = ВидыРасхода;
	Фильтр.Условие      = "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля	= СтатусПартии;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля	= МассивПартий;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ВидРасхода, ЭлементРасхода, Партия");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();

	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");

	Если ВидОперации  = "КорректировкаРеализации" Тогда
		Если СтруктураШапкиДокумента.ЭтоКорректировкаПрошлогоПериода Тогда
			ТаблицаДляСписания.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		КонецЕсли;
	КонецЕсли;
	
	// Показывает, что по строке есть возврат
	ЕстьКолонкаВозвратПоТекущемуДокументу = ТаблицаПартий.Колонки.Найти("ВозвратПоТекущемуДокументу") <> Неопределено;
	
	Если ЕстьКолонкаВозвратПоТекущемуДокументу Тогда
		
		ТаблицаДляСписания.Колонки.Добавить("ВозвратПоТекущемуДокументу", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	// Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	
	// Списание себестоимости ТМЦ (расходов по виду "Номенклатура")
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидРасхода",     Перечисления.ВидыРасходовУСН.Номенклатура);
		СтруктураОтбора.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",         СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",      СтрокаПартии.СчетУчета);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			КоличествоОсталосьПоСтСписания = СтрокаПартии.КоличествоПоСтатусуСписания;
		Иначе
			КоличествоОсталосьПоСтСписания = 0;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если ЕстьКолонкаВозвратПоТекущемуДокументу Тогда
				НоваяСтрока.ВозвратПоТекущемуДокументу = СтрокаПартии.ВозвратПоТекущемуДокументу;
			КонецЕсли;
			
			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество = КоличествоСписания;
				НоваяСтрока.Сумма      = Окр(К*НоваяСтрока.Сумма, 3);
				НоваяСтрока.НДС        = Окр(К*НоваяСтрока.НДС, 3);
				Если НЕ ТаблицаДляСписания.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
					НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				НоваяСтрока.СтатусСписания = НовыйСтатус;
				НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				Если НЕ ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда

				ИначеЕсли Строка.ОтражениеВУСН = НовыйСтатус Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

				ИначеЕсли КоличествоОсталосьПогасить < КоличествоОсталосьПоСтСписания Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания - КоличествоОсталосьПогасить);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписанияПоСтатусу;
				КонецЕсли;
			КонецЕсли;

			// Если по этой строке партии был возврат, то списывать с остаков не нужно
			Если ЕстьКолонкаВозвратПоТекущемуДокументу 
					И НоваяСтрока.ВозвратПоТекущемуДокументу Тогда
				Продолжить;
			КонецЕсли;
				
			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;

	// Списание НДС, уплаченного при ввозе из Таможенного союза
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидРасхода",     Перечисления.ВидыРасходовУСН.НДС_ТС);
		СтруктураОтбора.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",         СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",      СтрокаПартии.СчетУчета);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			КоличествоОсталосьПоСтСписания = СтрокаПартии.КоличествоПоСтатусуСписания;
		Иначе
			КоличествоОсталосьПоСтСписания = 0;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если ЕстьКолонкаВозвратПоТекущемуДокументу Тогда
				НоваяСтрока.ВозвратПоТекущемуДокументу = СтрокаПартии.ВозвратПоТекущемуДокументу;
			КонецЕсли;
			
			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество = КоличествоСписания;
				НоваяСтрока.Сумма      = Окр(К*НоваяСтрока.Сумма, 3);
				НоваяСтрока.НДС        = Окр(К*НоваяСтрока.НДС, 3);
				Если НЕ ТаблицаДляСписания.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
					НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				НоваяСтрока.СтатусСписания = НовыйСтатус;
				НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				Если НЕ ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда

				ИначеЕсли Строка.ОтражениеВУСН = НовыйСтатус Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

				ИначеЕсли КоличествоОсталосьПогасить < КоличествоОсталосьПоСтСписания Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания - КоличествоОсталосьПогасить);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписанияПоСтатусу;
				КонецЕсли;
			КонецЕсли;

			// Если по этой строке партии был возврат, то списывать с остаков не нужно
			Если ЕстьКолонкаВозвратПоТекущемуДокументу 
					И НоваяСтрока.ВозвратПоТекущемуДокументу Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" или ВидОперации = "Перемещение" или ВидОперации = "БезвозмезднаяПередача" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	ИначеЕсли ВидОперации = "КорректировкаРеализации" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДокументРеализацииСсылка, "Партия");
		// Если корректируется прошлый период, и есть сторно принятых расходов - требуется отражать в НУ последним днем корректируемого года
		Если СтруктураШапкиДокумента.ЭтоКорректировкаПрошлогоПериода Тогда		
			Для каждого СтрокаПринятых Из ТаблицыДвижений.ТаблицаПринятых Цикл			
				Если СтрокаПринятых.Сумма < 0 И ЗначениеЗаполнено(СтрокаПринятых.РеквизитыДокументаОплаты) Тогда
					Если СтрокаПринятых.РеквизитыДокументаОплаты.Дата <= КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата) Тогда				
						СтрокаПринятых.ДатаКорректировки = КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата);				
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	Иначе
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;

	// Если есть колонка ВозвратПоТекущемуДокументу, тогда обработаем расходы и приходы
	// и добавим строки противоположные движению
	Если ЕстьКолонкаВозвратПоТекущемуДокументу Тогда
		Отбор = Новый Структура("ВозвратПоТекущемуДокументу", Истина);
		ТаблицаПриходПоТекущимВозвратам = ТаблицыДвижений.ТаблицаПриход.Скопировать(Отбор);
		ТаблицаРасходПоТекущимВозвратам = ТаблицыДвижений.ТаблицаРасход.Скопировать(Отбор);
		НайденныеСтрокиТаблицаПринятыхПоТекущимВозвратам = ТаблицыДвижений.ТаблицаПринятых.НайтиСтроки(Отбор);
			
		Для каждого ТекущаяСтрока Из ТаблицаПриходПоТекущимВозвратам Цикл
			НоваяСтрока = ТаблицыДвижений.ТаблицаРасход.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;
			
		Для каждого ТекущаяСтрока Из ТаблицаРасходПоТекущимВозвратам Цикл
			НоваяСтрока = ТаблицыДвижений.ТаблицаПриход.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;
			
		// Удалим строки признанных расходов, по которым есть возврат
		Для каждого ТекущаяСтрока Из НайденныеСтрокиТаблицаПринятыхПоТекущимВозвратам Цикл
			ТаблицыДвижений.ТаблицаПринятых.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);

КонецПроцедуры

// Отражает изменения по регистру расходов при УСН, не влияющие на статус расхода.
// Например, изменение счета учета или статуса партии.
//
Процедура ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, Договор, СтатусПартии, ВидОперации = "Списание")
	
	Если ТаблицаПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим перечень перемещаемых видов связанных с МПЗ расходов.
	ВидыДопРасходов = Новый Массив;
	
	УчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров");
	
	Если ВидОперации = "Комплектация" Тогда
		ВидыДопРасходов.Добавить(Перечисления.ВидыРасходовУСН.ДопРасходы);
		Если УчетИмпортныхТоваров Тогда
			ВидыДопРасходов.Добавить(Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи);
		КонецЕсли;
	КонецЕсли;
	
	Если УчетИмпортныхТоваров Тогда
		ВидыДопРасходов.Добавить(Перечисления.ВидыРасходовУСН.НДС_ТС);
	КонецЕсли;
	
	//Заполним таблицу блокировок
	ОтборПространстваБлокировок = "Номенклатура, ДокументОприходования";
	Если ВидыДопРасходов.Найти(Перечисления.ВидыРасходовУСН.ДопРасходы) = Неопределено Тогда
		// Для всех видов расходов, кроме доп. расходов, остатки расходов перемещаются с отбором по счету учета.
		ОтборПространстваБлокировок = ОтборПространстваБлокировок + ", СчетУчета";
	КонецЕсли;
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, ОтборПространстваБлокировок);
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";
	
	//Подготовка наборов фильтров
	ОтборНоменклатура = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПартий, "Номенклатура", Истина);
	ОтборПартии       = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПартий, "ДокументОприходования", Истина);
	
	ОтборСтатусы = Новый Массив;
	ОтборСтатусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	ОтборСтатусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	ОтборСтатусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	ОтборСтатусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	ОтборВидыРасходов = Новый Массив;
	ОтборВидыРасходов.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВидыРасходов, ВидыДопРасходов);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = ОтборВидыРасходов;
	Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля = СтатусПартии;
	Фильтр.Условие      = "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ЭлементРасхода";
	Фильтр.ЗначениеПоля = ОтборНоменклатура;
	Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "Партия";
	Фильтр.ЗначениеПоля = ОтборПартии;
	Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля = ОтборСтатусы;
	Фильтр.Условие      = "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая),
		СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров,
		ТаблицаБлокировок);
	
	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	
	ТаблицаДляСписания.Колонки.Добавить("СчетПриход");
	ТаблицаДляСписания.Колонки.Добавить("НоменклатураПриход");
	ТаблицаДляСписания.Колонки.Добавить("ПартияПриход");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПриход", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ПронумероватьСтрокиТаблицы(ТаблицаРасходов);
	ТаблицаРасходов.Индексы.Добавить("НомерСтроки, ВидРасхода, ЭлементРасхода, Партия, СчетУчета");
	
	ПорядокСортировкиРасходов = "СтатусыОплатыРасходовУСНПорядок, РасчетныйДокументДата, РасчетныйДокумент, НомерСтрокиДокумента";
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии ИЗ ТаблицаПартий Цикл
		
		// Перемещение номенклатуры.
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидРасхода",     Перечисления.ВидыРасходовУСН.Номенклатура);
		СтруктураОтбора.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",         СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",      СтрокаПартии.СчетУчета);
		
		ОстаткиРасходов = ТаблицаРасходов.Скопировать(СтруктураОтбора);
		ОстаткиРасходов.Сортировать(ПорядокСортировкиРасходов, Новый СравнениеЗначений);
		
		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		
		// Накопительный итог фактически списанного количества.
		КоличествоНоменклатурыСписано = 0;
		
		ТаблицаСписанияТекущейПартии = ТаблицаДляСписания.СкопироватьКолонки();
		
		Для Каждого СтрокаОстатка Из ОстаткиРасходов Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаОстатка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоСписания = Мин(СтрокаОстатка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;

			НоваяСтрока = ТаблицаСписанияТекущейПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);

			НоваяСтрока.СчетПриход         = СтрокаПартии.КорСчетУчета;
			НоваяСтрока.НоменклатураПриход = СтрокаПартии.КорНоменклатура;
			НоваяСтрока.ПартияПриход       = СтрокаПартии.КорДокументОприходования;

			Если СтрокаОстатка.Количество > КоличествоСписания Тогда
				
				ДоляСписания = КоличествоСписания / СтрокаОстатка.Количество;
				
				НоваяСтрока.Количество = КоличествоСписания;
				НоваяСтрока.Сумма      = Окр(ДоляСписания * НоваяСтрока.Сумма, 3);
				НоваяСтрока.НДС        = Окр(ДоляСписания * НоваяСтрока.НДС, 3);
				
			КонецЕсли;
			
			СтрокаТаблицыРасходов = ТаблицаРасходов.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки");
			
			СтрокаТаблицыРасходов.Количество = СтрокаТаблицыРасходов.Количество - НоваяСтрока.Количество;
			СтрокаТаблицыРасходов.Сумма      = СтрокаТаблицыРасходов.Сумма - НоваяСтрока.Сумма;
			СтрокаТаблицыРасходов.НДС        = СтрокаТаблицыРасходов.НДС - НоваяСтрока.НДС;
			
			КоличествоНоменклатурыСписано = КоличествоНоменклатурыСписано + НоваяСтрока.Количество;
			
		КонецЦикла;
		
		Если КоличествоНоменклатурыСписано = 0 Тогда
			// Ничего не списано - нечего распределять, не требуется перемещать связанные расходы.
			Продолжить;
		КонецЕсли;
		
		КоличествоОприходовать = СтрокаПартии.КорКоличество * (КоличествоНоменклатурыСписано / СтрокаПартии.Количество);
		
		Если КоличествоОприходовать <> 0 Тогда
			Коэффициенты = ТаблицаСписанияТекущейПартии.ВыгрузитьКолонку("Количество");
			РаспределенноеКоличество = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(КоличествоОприходовать, Коэффициенты, 3);
			ТаблицаСписанияТекущейПартии.ЗагрузитьКолонку(РаспределенноеКоличество, "КоличествоПриход");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСписанияТекущейПартии, ТаблицаДляСписания);
		
		// Перемещение дополнительных расходов, таможенных платежей и НДС при вводе из ЕАЭС.
		
		Для Каждого ВидДопРасходов Из ВидыДопРасходов Цикл
			
			ОтборПоРасчетнымДокументам = Новый Структура;
			ОтборПоРасчетнымДокументам.Вставить("ВидРасхода",     ВидДопРасходов);
			ОтборПоРасчетнымДокументам.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);
			ОтборПоРасчетнымДокументам.Вставить("Партия",         СтрокаПартии.ДокументОприходования);
			
			ОстаткиДопРасходовПоДокументам = ТаблицаРасходов.Скопировать(ОтборПоРасчетнымДокументам,
				"ЭлементРасхода, Партия, РасчетныйДокумент, РасчетныйДокументДата, Количество");
			ОстаткиДопРасходовПоДокументам.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент, РасчетныйДокументДата", "Количество");
			ОстаткиДопРасходовПоДокументам.Сортировать("РасчетныйДокументДата, РасчетныйДокумент", Новый СравнениеЗначений);
			
			Для Каждого СтрокаПоДокументу Из ОстаткиДопРасходовПоДокументам Цикл
				
				// Подлежащее списанию количество доп. расхода по данному документу (акту, ГТД, заявлению о ввозе).
				КоличествоПогаситьПоДокументу = Мин(КоличествоНоменклатурыСписано, СтрокаПоДокументу.Количество);
				
				// Накопительный итог для фактически списанного количества связанного расхода.
				КоличествоДопРасходаСписано = 0;
				
				ТаблицаСписанияТекущейПартии = ТаблицаДляСписания.СкопироватьКолонки();
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВидРасхода",        ВидДопРасходов);
				СтруктураОтбора.Вставить("ЭлементРасхода",    СтрокаПартии.Номенклатура);
				СтруктураОтбора.Вставить("Партия",            СтрокаПартии.ДокументОприходования);
				СтруктураОтбора.Вставить("РасчетныйДокумент", СтрокаПоДокументу.РасчетныйДокумент);
				Если ВидДопРасходов <> Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
					СтруктураОтбора.Вставить("СчетУчета",  СтрокаПартии.СчетУчета);
				КонецЕсли;
				
				ОстаткиРасходов = ТаблицаРасходов.Скопировать(СтруктураОтбора);
				ОстаткиРасходов.Сортировать(ПорядокСортировкиРасходов, Новый СравнениеЗначений);
				
				Для Каждого СтрокаОстатка Из ОстаткиРасходов Цикл
					Если КоличествоПогаситьПоДокументу <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаОстатка.Количество <= 0 Тогда
						Продолжить;
					КонецЕсли;

					КоличествоСписания = Мин(СтрокаОстатка.Количество, КоличествоПогаситьПоДокументу);
					КоличествоПогаситьПоДокументу = КоличествоПогаситьПоДокументу - КоличествоСписания;

					НоваяСтрока = ТаблицаСписанияТекущейПартии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);

					НоваяСтрока.СчетПриход         = СтрокаПартии.КорСчетУчета;
					НоваяСтрока.НоменклатураПриход = СтрокаПартии.КорНоменклатура;
					НоваяСтрока.ПартияПриход       = СтрокаПартии.КорДокументОприходования;

					Если СтрокаОстатка.Количество > КоличествоСписания Тогда
						
						ДоляСписания = КоличествоСписания / СтрокаОстатка.Количество;
						
						НоваяСтрока.Количество = КоличествоСписания;
						НоваяСтрока.Сумма      = Окр(ДоляСписания * НоваяСтрока.Сумма, 3);
						НоваяСтрока.НДС        = Окр(ДоляСписания * НоваяСтрока.НДС, 3);
						
					КонецЕсли;
					
					СтрокаТаблицыРасходов = ТаблицаРасходов.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки");
					
					СтрокаТаблицыРасходов.Количество = СтрокаТаблицыРасходов.Количество - НоваяСтрока.Количество;
					СтрокаТаблицыРасходов.Сумма      = СтрокаТаблицыРасходов.Сумма - НоваяСтрока.Сумма;
					СтрокаТаблицыРасходов.НДС        = СтрокаТаблицыРасходов.НДС - НоваяСтрока.НДС;
					
					КоличествоДопРасходаСписано = КоличествоДопРасходаСписано + НоваяСтрока.Количество;
					
				КонецЦикла; // По остаткам расходов.
				
				Если КоличествоДопРасходаСписано = 0 Тогда
					// Ничего не списано - нечего распределять.
					Продолжить;
				КонецЕсли;
				
				КоличествоОприходовать = СтрокаПартии.КорКоличество * (КоличествоДопРасходаСписано / СтрокаПартии.Количество);
				
				Если КоличествоОприходовать <> 0 Тогда
					Коэффициенты = ТаблицаСписанияТекущейПартии.ВыгрузитьКолонку("Количество");
					РаспределенноеКоличество = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(КоличествоОприходовать, Коэффициенты, 3);
					ТаблицаСписанияТекущейПартии.ЗагрузитьКолонку(РаспределенноеКоличество, "КоличествоПриход");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСписанияТекущейПартии, ТаблицаДляСписания);
				
			КонецЦикла; // По документам поступления связанных расходов.
			
		КонецЦикла; // По видам связанных расходов.
		
	КонецЦикла; // По перемещенным партиям.
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицаКорректировкиРасход = ТаблицаДляСписания.СкопироватьКолонки();
	ТаблицаКорректировкиПриход = ТаблицаДляСписания.СкопироватьКолонки();
	ТаблицаПризнанныхРасходов  = ТаблицаДляСписания.СкопироватьКолонки();
	
	Для Каждого Расход Из ТаблицаДляСписания Цикл
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();
		СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);
		
		Если Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			СтрокаКорректировкиПриход.СчетУчета = Расход.СчетПриход;
		КонецЕсли;
		
		СтрокаКорректировкиПриход.ЭлементРасхода = Расход.НоменклатураПриход;
		СтрокаКорректировкиПриход.Партия         = Расход.ПартияПриход;
		СтрокаКорректировкиПриход.Количество     = Расход.КоличествоПриход;
	КонецЦикла;
	
	ТаблицыДвижений = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
	
	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	КонецЕсли;
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
	
КонецПроцедуры

//Отражает перенос задолженности с одного контрагента на другого.
//
Процедура КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвижения, ВидОперации)

	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		ИмяПоляФильтра	= "РасчетныйДокумент";

		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);

	ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		ИмяПоляФильтра	= "Партия";

		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);

	КонецЕсли;

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	Фильтр.ИмяПоля			= ИмяПоляФильтра;
	Фильтр.ЗначениеПоля		= ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("СтруктураКурса");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл

		ИмяКолонкиКорДоговора = "";
		
		Если ВидОперации = "ПереносЗадолженности" Тогда
			
			Если ТипЗнч(СтрокаПлатеж.КорСубконто1) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто1";
			ИначеЕсли ТипЗнч(СтрокаПлатеж.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто2";
			ИначеЕсли ТипЗнч(СтрокаПлатеж.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто3";
			Иначе
				// Отсутствуют сведения о новом договоре - некуда переносить остатки расходов. Строка не обрабатывается.
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = "ПереносЗадолженности" Тогда
			
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора])
				и ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		Курс = 1;
		Кратность = 1;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = СтрокаПлатеж.КурсВзаиморасчетов;
		КонецЕсли;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = СтрокаПлатеж.КратностьВзаиморасчетов;
		КонецЕсли;
		
		Если (НЕ ВидОперации = "ПереносЗадолженности") Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность",Курс, Кратность);
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора])
				и ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов <> СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				
				СтруктураКурса = Новый Структура("Курс, Кратность, ВалютаПолучателя",Курс, Кратность, СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов);
				
				КурсПолучателя = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов,СтруктураШапкиДокумента.Дата);
				СтруктураКурса.Курс = ?(КурсПолучателя.Курс = 0, СтруктураКурса.Курс, СтруктураКурса.Курс/КурсПолучателя.Курс);
				СтруктураКурса.Кратность = ?(КурсПолучателя.Кратность = 0, СтруктураКурса.Курс, СтруктураКурса.Кратность/КурсПолучателя.Кратность);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(ИмяПоляФильтра,  СтрокаПлатеж.РасчетныйДокумент);
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПлатеж.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

			НоваяСтрока = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если Строка.Сумма > СуммаСписания Тогда
				НоваяСтрока.Сумма				= Мин(Строка.Сумма, СуммаСписания);
				НоваяСтрока.Количество	 		= СуммаСписания/НоваяСтрока.Сумма*Строка.Количество;
				НоваяСтрока.НДС			 		= СуммаСписания/НоваяСтрока.Сумма*Строка.НДС;
			Иначе
				НоваяСтрока.Сумма 				= Строка.Сумма;
				НоваяСтрока.Количество	 		= Строка.Количество;
				НоваяСтрока.НДС 				= Строка.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
		КонецЦикла;

		Если ВидОперации = "ПереносЗадолженности" Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора]) И
				ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И
				СтрокаПлатеж[ИмяКолонкиКорДоговора].Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец Тогда
				НовыйРасчетныйДокумент = Неопределено;
			Иначе
				НовыйРасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, СтрокаПлатеж.СуммаВзаиморасчетов, "КорректировкаПоАО",, НовыйРасчетныйДокумент, ИтоговаяСтруктура);
			ТаблицаДвиженияРасходов.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = "ПереносЗадолженности" Тогда
		ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
	Иначе
		Если ТаблицаДвиженияРасходов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаДвиженияРасходов.Колонки.Добавить("ВидДвижения");
		КонецЕсли;
		ТаблицаДвиженияРасходов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
		ТаблицаРасходов.Очистить();

		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , Неопределено, Ложь);
		ТаблицыДвижений.Вставить("ТаблицаРасход",ТаблицаДвиженияРасходов);

		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	КонецЕсли;

Конецпроцедуры

Процедура СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров)
	
	// См. модуль документа РегламентнаяОперация, СписаниеДопРасходовУСН()
	НачалоПериодаОперации = СтруктураШапкиДокумента.НачалоПериода;
	КонецПериодаОперации  = СтруктураШапкиДокумента.КонецПериода;
	
	//Подготовка наборов фильтров
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ДопРасходы;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
	ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество");

	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	// Структура - хранилище итоговых таблиц движений по всем партиям.
	// Для соответствия имен элементов итоговую структуру таблиц формируем так же, как и промежуточные, но по пустой таблице списания расходов.
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходов, "ЭлементРасхода", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	МассивПартий = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходов, "Партия", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);

	// Установим управляемые блокировки
	Если ТранзакцияАктивна() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасходыПриУСН");
		ЭлементБлокировки.УстановитьЗначение("Организация", СтруктураШапкиДокумента.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(НачалоПериодаОперации, КонецПериодаОперации));
		ЭлементБлокировки.УстановитьЗначение("ВидРасхода", Перечисления.ВидыРасходовУСН.Номенклатура);
		ЭлементБлокировки.ИсточникДанных = ТаблицаРасходов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЭлементРасхода", "ЭлементРасхода");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
		Блокировка.Заблокировать();
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",        НачалоПериодаОперации);
	Запрос.УстановитьПараметр("КонДата",        КонецПериодаОперации);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасхода",     Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.УстановитьПараметр("ВидДвижения",    ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусСписания", Перечисления.ОтражениеВУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура",   МассивНоменклатуры);
	Запрос.УстановитьПараметр("Партии",         МассивПартий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	МАКСИМУМ(РасходыПриУСН.Период) КАК Период,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|	И РасходыПриУСН.ВидДвижения = &ВидДвижения
	|	И РасходыПриУСН.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	ТаблицаПартий = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		КоличествоСписанияПоРегистратору = СтрокаПартии.КоличествоСписания;

		ТаблицаДляСписания.Очистить();

		//Пропустим операции поступления и перемещения
		Если НЕ КоличествоСписанияПоРегистратору > 0 Тогда
			Продолжить;
		КонецЕсли;

		//Выберем расчетные документы доп.расходов
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);

		НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);

		Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл

			КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоРегистратору);

			//Выберем доп. расходы данной номенклатуры/партии
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);

			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если КоличествоСписанияРД <= 0 Тогда
					Прервать;
				КонецЕсли;

				КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);

				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				Если ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					НоваяСтрока.СтатусСписания = НовыйСтатус;
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписания;
				КонецЕсли;

				Если Строка.Количество <> КоличествоСписания Тогда
					К = КоличествоСписания / Строка.Количество;
					НоваяСтрока.Количество 	= Окр(КоличествоСписания,3,1);
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма,3,1);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС,3,1);
				КонецЕсли;

				Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
				Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
				Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;

				КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
				СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
			КонецЦикла;

		КонецЦикла;

		//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы.
		ТаблицыДвиженийПоПартии = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
		ТаблицыДвиженийПоПартии.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвиженийПоПартии.ТаблицаПриход.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ТаблицыДвиженийПоПартии.ТаблицаПринятых.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		Для Каждого КонтейнерТаблицы Из ТаблицыДвиженийПоПартии Цикл
			ИмяТаблицы             = КонтейнерТаблицы.Ключ;
			ТекущаяТаблицаДвижений = КонтейнерТаблицы.Значение;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблицаДвижений, ТаблицыДвижений[ИмяТаблицы]);
		КонецЦикла;
	КонецЦикла;
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);
КонецПроцедуры

Процедура СписаниеТаможенныхПлатежей(СтруктураШапкиДокумента, ДвиженияРегистров)
	
	// См. модуль документа РегламентнаяОперация, СписаниеТаможенныхПлатежейУСН()
	НачалоПериодаОперации = СтруктураШапкиДокумента.НачалоПериода;
	КонецПериодаОперации  = СтруктураШапкиДокумента.КонецПериода;
	
	//Подготовка наборов фильтров
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
	ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент, ДоговорКонтрагента", "Количество");

	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент,ДоговорКонтрагента");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия,ДоговорКонтрагента");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	ТаблицаДляСписания.Колонки.Добавить("ЭтоТаможенныйНДС", Новый ОписаниеТипов("Булево"));

	// Структура - хранилище итоговых таблиц движений по всем партиям.
	// Для соответствия имен элементов итоговую структуру таблиц формируем так же, как и промежуточные, но по пустой таблице списания расходов.
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходов, "ЭлементРасхода", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	МассивПартий = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходов, "Партия", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",        НачалоПериодаОперации);
	Запрос.УстановитьПараметр("КонДата",        КонецПериодаОперации);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасхода",     Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.УстановитьПараметр("ВидДвижения",    ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусСписания", Перечисления.ОтражениеВУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура",   МассивНоменклатуры);
	Запрос.УстановитьПараметр("Партии",         МассивПартий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	МАКСИМУМ(РасходыПриУСН.Период) КАК Период,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|	И РасходыПриУСН.ВидДвижения = &ВидДвижения
	|	И РасходыПриУСН.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	ТаблицаПартий = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		КоличествоСписанияПоРегистратору = СтрокаПартии.КоличествоСписания;

		ТаблицаДляСписания.Очистить();

		//Пропустим операции поступления и перемещения
		Если НЕ КоличествоСписанияПоРегистратору > 0 Тогда
			Продолжить;
		КонецЕсли;

		//Выберем расчетные документы таможенных платежей
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",		СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",				СтрокаПартии.ДокументОприходования);

		НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);

		Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл

			КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоРегистратору);

			//Выберем таможенные платежи по данной номенклатуре/партии
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента",СтрокаРасчетныйДокумент.ДоговорКонтрагента);

			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если КоличествоСписанияРД <= 0 Тогда
					Прервать;
				КонецЕсли;

				КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);

				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				Если ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					НоваяСтрока.СтатусСписания = НовыйСтатус;
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписания;
				КонецЕсли;

				Если Строка.Количество <> КоличествоСписания Тогда
					К = КоличествоСписания / Строка.Количество;
					НоваяСтрока.Количество 	= Окр(КоличествоСписания,3,1);
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма,3,1);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС,3,1);
				КонецЕсли;
				
				Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
				Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
				Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;

				КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
				СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
			КонецЦикла;

		КонецЦикла;
		//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы.
		ТаблицыДвиженийПоПартии = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
		ВыделитьТаможенныйНДСВПринятыхРасходах(ТаблицыДвиженийПоПартии);
		ТаблицыДвиженийПоПартии.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвиженийПоПартии.ТаблицаПриход.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ТаблицыДвиженийПоПартии.ТаблицаПринятых.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		
		Для Каждого КонтейнерТаблицы Из ТаблицыДвиженийПоПартии Цикл
			ИмяТаблицы             = КонтейнерТаблицы.Ключ;
			ТекущаяТаблицаДвижений = КонтейнерТаблицы.Значение;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблицаДвижений, ТаблицыДвижений[ИмяТаблицы]);
		КонецЦикла;

	КонецЦикла;
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);
КонецПроцедуры

//Отражает прочее (настроенное вручную) движение денежных средств в КУДиР
//
Процедура ПрочееДДС(Документ, ДвиженияРегистров, КУДиР) Экспорт

	Если (Документ.Графа4_УСН = 0) И
		(Документ.Графа5_УСН = 0) И
		(Документ.Графа6_УСН = 0) И
		(Документ.Графа7_УСН = 0) И
		(Документ.НДС_УСН = 0) Тогда

		Возврат;
	КонецЕсли;

	КУДиР.Графа4 = Документ.Графа4_УСН;

	Если Документ.ДоходыЕНВД_УСН Тогда
		КУДиР.ДоходЕНВД = Документ.Графа4_УСН - Документ.Графа5_УСН;
	Иначе
		КУДиР.Графа5 = Документ.Графа5_УСН;
	КонецЕсли;

	ДополнитьСодержаниеКУДиР(КУДиР, "Событие", Документ.Содержание_УСН, Истина); // Замещаем содержание из документа

	КУДиР.Графа6 = Документ.Графа6_УСН;

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Документ.Организация, Документ.Дата) Тогда
		// расходы в КУДиР не отражаем
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = Документ.Метаданные();
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента)
		И УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Документ.ВидОперации) Тогда
		// расходы указаны в табличной части
		ЕстьНДС = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("НДСУСН", МетаданныеДокумента, "РасшифровкаПлатежа");
		
		Для каждого СтрокаТЧ Из Документ.РасшифровкаПлатежа Цикл
			
			Если СтрокаТЧ.РаспределятьРасходыУСН Тогда
				
				Если ДвиженияРегистров = Неопределено Тогда
					ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход",
						Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
					ДвиженияРегистров.РасходыУСН = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
				КонецЕсли;
				
				СтрокаРасхода 							= ДвиженияРегистров.РасходыУСН.Добавить();
				СтрокаРасхода.Период					= Документ.Дата;
				СтрокаРасхода.Регистратор 				= Документ;
				СтрокаРасхода.ВидДвижения 				= ВидДвиженияНакопления.Приход;
				СтрокаРасхода.Активность 				= Истина;
				СтрокаРасхода.Организация 				= Документ.Организация;
				СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
				СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
				СтрокаРасхода.РасчетныйДокумент 		= Документ;
				СтрокаРасхода.Сумма 					= СтрокаТЧ.РасходыУСН;
				СтрокаРасхода.НДС 						= ?(ЕстьНДС, СтрокаТЧ.НДСУСН, 0);
				СтрокаРасхода.Валюта 					= ВалютаРеглУчета;
				
			Иначе
				
				КУДиР.Графа7 = КУДиР.Графа7 + СтрокаТЧ.РасходыУСН;
				КУДиР.НДС    = КУДиР.НДС    + ?(ЕстьНДС, СтрокаТЧ.НДСУСН, 0);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		// расходы в шапке
		Если Документ.РасходыЕНВД_УСН Тогда
			
			Если ДвиженияРегистров = Неопределено Тогда
				ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход",
					Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
				ДвиженияРегистров.РасходыУСН = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаРасхода 							= ДвиженияРегистров.РасходыУСН.Добавить();
			СтрокаРасхода.Период					= Документ.Дата;
			СтрокаРасхода.Регистратор 				= Документ;
			СтрокаРасхода.ВидДвижения 				= ВидДвиженияНакопления.Приход;
			СтрокаРасхода.Активность 				= Истина;
			СтрокаРасхода.Организация 				= Документ.Организация;
			СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
			СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
			СтрокаРасхода.РасчетныйДокумент 		= Документ;
			СтрокаРасхода.Сумма 					= Документ.Графа7_УСН;
			СтрокаРасхода.НДС 						= Документ.НДС_УСН;
			СтрокаРасхода.Валюта 					= ВалютаРеглУчета;
			
		Иначе
			
			КУДиР.Графа7 = Документ.Графа7_УСН;
			КУДиР.НДС    = Документ.НДС_УСН;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Отражает движение денежных средств, связанное с приобретением или реализацией иностранной валюты, в КУДиР
//
Процедура ПокупкаПродажаВалюты(Документ, ТаблицаПокупкаПродажаВалюты, КУДиР, ВидОперации) Экспорт

	Если (Документ.Графа4_УСН = 0) Тогда
		Возврат;
	КонецЕсли;

	КУДиР.Графа4 = Документ.Графа4_УСН;
	ДополнитьСодержаниеКУДиР(КУДиР, "Событие", Документ.Содержание_УСН, Истина); // Замещаем содержание из документа

	Если ТаблицаПокупкаПродажаВалюты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРазницы = 0;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПокупкаПродажаВалюты Цикл
		Если ВидОперации = "Продажа" Тогда
			Разница = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаРубПоКурсуЦБ;
		Иначе
			Разница = СтрокаТаблицы.СуммаРубПоКурсуЦБ - СтрокаТаблицы.СуммаРуб;
		КонецЕсли;
		Если Разница > 0 Тогда
			СуммаРазницы = СуммаРазницы + Разница;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаРазницы > 0 Тогда
		КУДиР.Графа5 = КУДиР.Графа5 + СуммаРазницы;
		
		ПояснениеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Признаны доходы в виде разницы, образовавшейся вследствие отклонения курса %2 иностранной валюты от курса ЦБ РФ. ",
			?(ВидОперации = "Продажа", НСтр("ru = 'продажи'"), НСтр("ru = 'покупки'")));
		
		ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеСобытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьУдержанияИзЗарплаты(СтруктураШапкиДокумента, ТаблицаРасходов, ОстаткиВзаиморасчетов, Параметры)

	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам") Тогда
		Возврат;
	КонецЕсли;
	
	// Отражение начислений за вычетом удержанных сумм производится только при начислении ЗП за месяц.
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск") Или
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		Возврат;
	КонецЕсли;
	
	УдержанияДокумента = Неопределено;
	
	Если Не Параметры.Свойство("ТаблицаУдержаний", УдержанияДокумента)
		Или Не ЗначениеЗаполнено(УдержанияДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьУдержания = УдержанияДокумента.Скопировать(, "КорСубконто1, Сумма");
	РаспределитьУдержания.Колонки.КорСубконто1.Имя = "Сотрудник";
	
	РаспределитьУдержания.Свернуть("Сотрудник", "Сумма");
	
	// Распределим удержания по начислениям текущего документа
	
	РаспределениеУдержаний = Новый ТаблицаЗначений;
	РаспределениеУдержаний.Колонки.Добавить("СтрокаТаблицыРасходов", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	РаспределениеУдержаний.Колонки.Добавить("Начислено",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РаспределениеУдержаний.Колонки.Добавить("Удержать",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	УдалитьРаспределенныеУдержания = Новый Массив;
	УдалитьУдержанныеНачисления    = Новый Массив;
	
	Для каждого СтрокаУдержания Из РаспределитьУдержания Цикл
		Если СтрокаУдержания.Сумма <= 0 Тогда // ошибка во входящих данных
			УдалитьРаспределенныеУдержания.Добавить(СтрокаУдержания);
			Продолжить;
		КонецЕсли;
		
		РаспределениеУдержаний.Очистить();
		
		Отбор = Новый Структура("ЭлементРасхода, ВидРасхода, РасчетныйДокумент",
			СтрокаУдержания.Сотрудник, Перечисления.ВидыРасходовУСН.Зарплата, СтруктураШапкиДокумента.Ссылка);
		СтрокиПоСотруднику = ТаблицаРасходов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаНачисления Из СтрокиПоСотруднику Цикл
			СтрокаРаспределения = РаспределениеУдержаний.Добавить();
			СтрокаРаспределения.СтрокаТаблицыРасходов = СтрокаНачисления;
			СтрокаРаспределения.Начислено             = СтрокаНачисления.Сумма;
		КонецЦикла;
		
		Если РаспределениеУдержаний.Количество() > 0 Тогда
			
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СтрокаУдержания.Сумма, РаспределениеУдержаний, "Удержать", "Начислено");
			
			НеРаспределено = 0;
			
			Для каждого СтрокаРаспределения Из РаспределениеУдержаний Цикл
				
				НоваяСуммаНачисления = СтрокаРаспределения.Начислено - СтрокаРаспределения.Удержать;
				СтрокаРаспределения.СтрокаТаблицыРасходов.Сумма = ?(НоваяСуммаНачисления > 0, НоваяСуммаНачисления, 0);
				
				Если СтрокаРаспределения.СтрокаТаблицыРасходов.Сумма = 0 Тогда
					УдалитьУдержанныеНачисления.Добавить(СтрокаРаспределения.СтрокаТаблицыРасходов);
				КонецЕсли;
				
				НеРаспределено = НеРаспределено + ?(НоваяСуммаНачисления < 0, -НоваяСуммаНачисления, 0);
				
			КонецЦикла;
			
			Распределено = СтрокаУдержания.Сумма - НеРаспределено;
			
			СтрокаУдержания.Сумма = СтрокаУдержания.Сумма - Распределено;
			
			Если СтрокаУдержания.Сумма = 0 Тогда
				УдалитьРаспределенныеУдержания.Добавить(СтрокаУдержания);
			КонецЕсли;
			
			КоличествоСтрок = УдалитьУдержанныеНачисления.Количество();
			Для Проход = 1 По КоличествоСтрок Цикл
				ТаблицаРасходов.Удалить(УдалитьУдержанныеНачисления[КоличествоСтрок - Проход]);
			КонецЦикла;
			УдалитьУдержанныеНачисления.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрок = УдалитьРаспределенныеУдержания.Количество();
	Для Проход = 1 По КоличествоСтрок Цикл
		РаспределитьУдержания.Удалить(УдалитьРаспределенныеУдержания[КоличествоСтрок - Проход]);
	КонецЦикла;
	
	// Если удержания превышают начисления документа за вычетом НДФЛ,
	// их необходимо распределить по непризнанным межрасчетным начислениям (отпускам).
	//
	// Сценарий, когда сумма удержаний больше, чем сумма начислений документа без НДФЛ и остатков невыплаченных отпусков, не обслуживается.
	
	Если РаспределитьУдержания.Количество() > 0 И ОстаткиВзаиморасчетов.Количество() > 0 Тогда
		
		СчетРасчетовСПерсоналом = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Работники = ОбщегоНазначения.ВыгрузитьКолонку(РаспределитьУдержания, "Сотрудник", Истина);
		
		РасчетыПоОтпускам = ОстаткиВзаиморасчетов.СкопироватьКолонки();
		
		Для каждого СтрокаОстатка Из ОстаткиВзаиморасчетов Цикл
			
			Если СтрокаОстатка.Сумма < 0 И Работники.Найти(СтрокаОстатка.Контрагент) <> Неопределено
				И СтрокаОстатка.СчетУчета = СчетРасчетовСПерсоналом
				И ТипЗнч(СтрокаОстатка.РасчетныйДокумент) = Тип("ДокументСсылка.Отпуск") Тогда
				
				НоваяСтрока = РасчетыПоОтпускам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
				НоваяСтрока.Сумма = - НоваяСтрока.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаФильтров = Новый ТаблицаЗначений;
		ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
		ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
		ТаблицаФильтров.Колонки.Добавить("Условие");
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = "СтатусыОплатыРасходовУСН";
		Фильтр.ЗначениеПоля = Перечисления.СтатусыРасходовУСН.НеОплачено;
		Фильтр.Условие      = "=";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = "РасчетныйДокумент";
		Фильтр.ЗначениеПоля = ОбщегоНазначения.ВыгрузитьКолонку(РасчетыПоОтпускам, "РасчетныйДокумент", Истина);
		Фильтр.Условие      = "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = "ВидРасхода";
		Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Зарплата;
		Фильтр.Условие      = "=";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = "ЭлементРасхода";
		Фильтр.ЗначениеПоля = ОбщегоНазначения.ВыгрузитьКолонку(РасчетыПоОтпускам, "Контрагент", Истина);
		Фильтр.Условие      = "В";
		
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();

		РасходыПоОтпускам = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
		РасходыПоОтпускам.Индексы.Добавить("РасчетныйДокумент, ЭлементРасхода");
		
		ТаблицаДляСписания = РасходыПоОтпускам.СкопироватьКолонки();
		ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
		
		// учтем НДФЛ по отпускам, удерживаемый текущим документом
		Для каждого РасходПоОтпуску Из РасходыПоОтпускам Цикл
			
			Отбор = Новый Структура("ЭлементРасхода, РасчетныйДокумент, ОтражениеВУСН");
			ЗаполнитьЗначенияСвойств(Отбор, РасходПоОтпуску);
			
			ТаблицаСуммыНДФЛ = ТаблицаРасходов.Скопировать(Отбор, "Сумма");
			УдержанныйНДФЛ   = - ТаблицаСуммыНДФЛ.Итог("Сумма");
			
			РасходПоОтпуску.Сумма = Макс(РасходПоОтпуску.Сумма - УдержанныйНДФЛ, 0);
			
		КонецЦикла;
		
		// Распределяем по остаткам непризнанных отпусков
		Для каждого СтрокаУдержания Из РаспределитьУдержания Цикл
			
			Отбор = Новый Структура("Контрагент", СтрокаУдержания.Сотрудник);
			ОстаткиРасчетов = РасчетыПоОтпускам.НайтиСтроки(Отбор);
			
			Для каждого ОстатокРасчетов Из ОстаткиРасчетов Цикл
				
				Если СтрокаУдержания.Сумма <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если ОстатокРасчетов.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаРасчетовДляСписания = Мин(СтрокаУдержания.Сумма, ОстатокРасчетов.Сумма);
				
				Отбор = Новый Структура("ЭлементРасхода, РасчетныйДокумент",
					ОстатокРасчетов.Контрагент, ОстатокРасчетов.РасчетныйДокумент);
				
				СтрокиРасходовПоОтпускам = РасходыПоОтпускам.НайтиСтроки(Отбор);
				
				Для каждого СтрокаРасхода Из СтрокиРасходовПоОтпускам Цикл
				
					Если СуммаРасчетовДляСписания <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если СтрокаРасхода.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаСписания = Мин(СуммаРасчетовДляСписания, СтрокаРасхода.Сумма);
					
					// Остатки расходов по отпускам списываем методом "сторно"
					// Прочие расчеты по сторнированным отпускам будут списаны при обходе таблицы расходов в начислении ЗП.
					СтрокаСписанияРасхода = ТаблицаРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСписанияРасхода, СтрокаРасхода);
					СтрокаСписанияРасхода.Сумма = - СуммаСписания;
					
					СтрокаРасхода.Сумма      = СтрокаРасхода.Сумма - СуммаСписания;
					ОстатокРасчетов.Сумма    = ОстатокРасчетов.Сумма - СуммаСписания;
					СтрокаУдержания.Сумма    = СтрокаУдержания.Сумма - СуммаСписания;
					СуммаРасчетовДляСписания = СуммаРасчетовДляСписания - СуммаСписания;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Начисление ЗП документом отражение зарплаты в регл. учете
//
Процедура НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, Параметры)

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУСННачислениеЗарплаты", Параметры.ТаблицаУСННачислениеЗарплаты);
	Запрос.УстановитьПараметр("Счет70",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда));
	Запрос.УстановитьПараметр("Счет76",
		ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
	Запрос.УстановитьПараметр("СчетаНалогов", МассивСчетов);
	Запрос.УстановитьПараметр("Зарплата",     Перечисления.ВидыРасходовУСН.Зарплата);
	Запрос.УстановитьПараметр("Налоги",       Перечисления.ВидыРасходовУСН.Налоги);
	Запрос.УстановитьПараметр("Сводно",       Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсхТаб.Счет КАК Счет,
	|	ИсхТаб.Субконто1 КАК Субконто1,
	|	ИсхТаб.Субконто2 КАК Субконто2,
	|	ИсхТаб.Субконто3 КАК Субконто3,
	|	ИсхТаб.КорСчет КАК КорСчет,
	|	ИсхТаб.КорСубконто1 КАК КорСубконто1,
	|	ИсхТаб.КорСубконто2 КАК КорСубконто2,
	|	ИсхТаб.КорСубконто3 КАК КорСубконто3,
	|	ИсхТаб.Сумма КАК Сумма,
	|	ИсхТаб.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ИсхТаб.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ОтражениеВУчете
	|ИЗ
	|	&ТаблицаУСННачислениеЗарплаты КАК ИсхТаб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаНалогов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаНалогов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Зарплата КАК ВидРасхода,
	|	ОтражениеЗарплатыВУчетеУСН.КорСубконто1 КАК ЭлементРасхода,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	ОтражениеЗарплатыВУчетеУСН.Сумма КАК Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ОтражениеЗарплатыВУчетеУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОтражениеЗарплатыВУчетеУСН.КорСчет КАК СчетУчетаРасчетов
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВУчетеУСН.КорСубконто1 = &Сводно
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.КорСубконто1 = НЕОПРЕДЕЛЕНО
	|	И ОтражениеЗарплатыВУчетеУСН.КорСубконто1 ССЫЛКА Справочник.ФизическиеЛица
	|	И (ОтражениеЗарплатыВУчетеУСН.КорСчет В(&Счет70)
	|		ИЛИ ОтражениеЗарплатыВУчетеУСН.КорСчет = &Счет76)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Зарплата,
	|	ОтражениеЗарплатыВУчетеУСН.Субконто1,
	|	НЕОПРЕДЕЛЕНО,
	|	-ОтражениеЗарплатыВУчетеУСН.Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН,
	|	ОтражениеЗарплатыВУчетеУСН.РасчетныйДокумент,
	|	ОтражениеЗарплатыВУчетеУСН.Счет КАК СчетУчетаРасчетов
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВУчетеУСН.Субконто1 = &Сводно
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.Субконто1 = НЕОПРЕДЕЛЕНО
	|	И ОтражениеЗарплатыВУчетеУСН.Субконто1 ССЫЛКА Справочник.ФизическиеЛица
	|	И (ОтражениеЗарплатыВУчетеУСН.Счет В(&Счет70)
	|		ИЛИ ОтражениеЗарплатыВУчетеУСН.Счет = &Счет76)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Налоги,
	|	НЕОПРЕДЕЛЕНО,
	|	ОтражениеЗарплатыВУчетеУСН.КорСчет,
	|	ОтражениеЗарплатыВУчетеУСН.Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН,
	|	ОтражениеЗарплатыВУчетеУСН.РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеУСН.КорСчет В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНалогов.Счет
	|			ИЗ
	|				ВТ_СчетаНалогов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет КАК СчетУчета,
	|	СУММА(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма) КАК Сумма
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНалогов.Счет
	|			ИЗ
	|				ВТ_СчетаНалогов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРасходов = РезультатыЗапроса[2].Выгрузить();
	ТаблицаРасходов.Индексы.Добавить("ВидРасхода, ЭлементРасхода,СчетУчета,ОтражениеВУСН,РасчетныйДокумент,Сумма");
	
	ТаблицаЗачетаНалогов = РезультатыЗапроса[3].Выгрузить();
	ТаблицаЗачетаНалогов.Индексы.Добавить("СчетУчета");
	
	//Обработать удержания с незаполненным порядком признания расходов
	
	КоличествоСтрок = ТаблицаРасходов.Количество();
	Для НС = 0 по КоличествоСтрок - 1 Цикл
	
		ТекСтрока = ТаблицаРасходов[НС];
	
		Если (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(ТекСтрока.Сумма < 0) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
	
			СуммаКРаспределению = ТекСтрока.Сумма;
	
			//Распределим удержание
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	ТекСтрока.ВидРасхода);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	ТекСтрока.ЭлементРасхода);
	
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
	
			БазаПринимаемых = 0;
			БазаНеПринимаемых = 0;
			Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
	
				Если НайденнаяСтрока.Сумма < 0 Тогда
					Продолжить;
				КонецЕсли;
	
				Если НайденнаяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					БазаПринимаемых = БазаПринимаемых + НайденнаяСтрока.Сумма;
				Иначе
					БазаНеПринимаемых = БазаНеПринимаемых + НайденнаяСтрока.Сумма;
				КонецЕсли;
	
			КонецЦикла;
	
			СуммаПринимаемых = ?(БазаПринимаемых = 0, 0, СуммаКРаспределению * БазаПринимаемых / (БазаПринимаемых + БазаНеПринимаемых));
			СуммаНеПринимаемых = СуммаКРаспределению - СуммаПринимаемых;
	
			Если СуммаПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			ИначеЕсли СуммаНеПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ТекСтрока.Сумма = СуммаПринимаемых;
	
				НоваяСтрока                   = ТаблицаРасходов.Добавить();
				НоваяСтрока.ВидРасхода        = ТекСтрока.ВидРасхода;
				НоваяСтрока.ЭлементРасхода    = ТекСтрока.ЭлементРасхода;
				НоваяСтрока.СчетУчета         = ТекСтрока.СчетУчета;
				НоваяСтрока.ОтражениеВУСН     = Перечисления.ОтражениеВУСН.НеПринимаются;
				НоваяСтрока.РасчетныйДокумент = ТекСтрока.РасчетныйДокумент;
				НоваяСтрока.Сумма             = СуммаНеПринимаемых;
			КонецЕсли;
	
			//Если это НДФЛ - ищем среди налогов
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	Перечисления.ВидыРасходовУСН.Налоги);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	Неопределено);
			СтруктураОтбора.Вставить("ОтражениеВУСН",  	Перечисления.ОтражениеВУСН.ПустаяСсылка());
			СтруктураОтбора.Вставить("Сумма", 			- СуммаКРаспределению);
			
			// НДФЛ до превышения
			СтруктураОтбора.Вставить("СчетУчета", 		ПланыСчетов.Хозрасчетный.НДФЛ);
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
	
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНДФЛ = НайденныеСтроки[0];
	
				Если СуммаПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				ИначеЕсли СуммаНеПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					СтрокаНДФЛ.Сумма = - СуммаПринимаемых;
	
					НоваяСтрока                   = ТаблицаРасходов.Добавить();
					НоваяСтрока.ВидРасхода        = СтрокаНДФЛ.ВидРасхода;
					НоваяСтрока.ЭлементРасхода    = СтрокаНДФЛ.ЭлементРасхода;
					НоваяСтрока.СчетУчета         = СтрокаНДФЛ.СчетУчета;
					НоваяСтрока.ОтражениеВУСН     = Перечисления.ОтражениеВУСН.НеПринимаются;
					НоваяСтрока.РасчетныйДокумент = СтрокаНДФЛ.РасчетныйДокумент;
					НоваяСтрока.Сумма	          = - СуммаНеПринимаемых;
				КонецЕсли;
	
			КонецЕсли;
			
			// НДФЛ с превышения
			СтруктураОтбора.Вставить("СчетУчета", 		ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины);
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
	
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНДФЛ = НайденныеСтроки[0];
	
				Если СуммаПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				ИначеЕсли СуммаНеПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					СтрокаНДФЛ.Сумма = - СуммаПринимаемых;
	
					НоваяСтрока                   = ТаблицаРасходов.Добавить();
					НоваяСтрока.ВидРасхода        = СтрокаНДФЛ.ВидРасхода;
					НоваяСтрока.ЭлементРасхода    = СтрокаНДФЛ.ЭлементРасхода;
					НоваяСтрока.СчетУчета         = СтрокаНДФЛ.СчетУчета;
					НоваяСтрока.ОтражениеВУСН     = Перечисления.ОтражениеВУСН.НеПринимаются;
					НоваяСтрока.РасчетныйДокумент = СтрокаНДФЛ.РасчетныйДокумент;
					НоваяСтрока.Сумма	          = - СуммаНеПринимаемых;
				КонецЕсли;
	
			КонецЕсли;
	
		ИначеЕсли (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
	
			ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
	
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаРасходов.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета, ОтражениеВУСН, РасчетныйДокумент, СчетУчетаРасчетов", "Сумма");
	ТаблицаРасходов.Сортировать("ВидРасхода, ЭлементРасхода, СчетУчета, РасчетныйДокумент, ОтражениеВУСН");
	ТаблицаРасходов.Колонки.Добавить("Валюта");
	ТаблицаРасходов.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.Колонки.Добавить("НДС");
	ТаблицаРасходов.Колонки.Добавить("ДокументОплаты");

	Для Каждого Расход Из ТаблицаРасходов Цикл
		Если НЕ ЗначениеЗаполнено(Расход.РасчетныйДокумент) Тогда
			Расход.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	
	МассивРаботников = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивРаботников);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	//Расчеты с работниками
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Контрагент";
	Фильтр.ЗначениеПоля		= МассивРаботников;
	Фильтр.Условие			= "В";
	
	МассивСчетовРасчетов = Новый Массив(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда));
	МассивСчетовРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетовРасчетов;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("Контрагент");
	
	ТаблицаФильтров.Очистить();
	
	МассивСчетов = ТаблицаРасходов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	//Расчеты по налогам
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетов;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежейНалогов = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежейНалогов.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("КлючУникальности");
	
	// Удержания из зарплаты уменьшают отражаемые в расходах начисления
	ОтразитьУдержанияИзЗарплаты(СтруктураШапкиДокумента, ТаблицаРасходов, ТаблицаПлатежей, Параметры);
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		//Учтем начисления за счет ФСС
		Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги
			И ТаблицаЗачетаНалогов.Количество() > 0 Тогда
			
			НайденныеСтроки = ТаблицаЗачетаНалогов.НайтиСтроки(Новый Структура("СчетУчета",  Расход.СчетУчета));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если СуммаОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если Строка.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
				
				НоваяСтрокаРасходов = ТаблицаДвиженияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
				
				НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
				НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
				
				Строка.Сумма = Строка.Сумма - СуммаСписания;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			СтруктураОтбора.Вставить("Контрагент",  Расход.ЭлементРасхода);
			НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		Иначе
			СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
			НайденныеСтроки = ТаблицаПлатежейНалогов.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
	
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
	
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
	
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
			НоваяСтрокаРасходов = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
	
			Если НЕ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			КонецЕсли;
			
			НоваяСтрокаРасходов.ДокументОплаты = Строка.РасчетныйДокумент;
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
	
			Строка.Сумма = Строка.Сумма - СуммаСписания;
	
		КонецЦикла;
		Если СуммаОсталосьПогасить > 0 Тогда
			РасчетныйДокумент = ?(ЗначениеЗаполнено(Расход.РасчетныйДокумент), Расход.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
			Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				Если ЗначениеЗаполнено(Расход.СчетУчетаРасчетов) Тогда
					ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, РасчетныйДокумент, Расход.СчетУчетаРасчетов, СуммаОсталосьПогасить);
				Иначе
					ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, РасчетныйДокумент, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);
				КонецЕсли;
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , РасчетныйДокумент, Расход.СчетУчета, СуммаОсталосьПогасить);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Расход.РасчетныйДокумент) Тогда
			Если Расход.РасчетныйДокумент <> СтруктураШапкиДокумента.Ссылка Тогда
				Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
					Если ЗначениеЗаполнено(Расход.СчетУчетаРасчетов) Тогда
						ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, Расход.РасчетныйДокумент, Расход.СчетУчетаРасчетов, СуммаОсталосьПогасить);
					Иначе
						ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, Расход.РасчетныйДокумент, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, , "НачислениеЗП", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаРасходов, );
	
	Если ТаблицаЗачетаНалогов.Итог("Сумма") > 0 Тогда
		ТаблицаЗачетаНалогов.Колонки.СчетУчета.Имя = "ДоговорКонтрагента";
		КУДиР_Оплаты = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаЗачетаНалогов, ДвиженияРегистров, КУДиР_Оплаты, "Налог");
	КонецЕсли;

КонецПроцедуры

// Отражение расходов по начисленным страховым взносам ИП
//
Процедура НачислениеСтраховыхВзносовИП(СтруктураШапкиДокумента, ДвиженияРегистров, Параметры)
	
	ТаблицаВзносов = Параметры.ТаблицаВзносовИП;
	
	ТаблицаПоступленияРасходов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("РасходыПриУСН");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ВидСтраховогоВзноса");
	ТаблицаПоступленияРасходов.Колонки.Добавить("СтраховойПериод");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДокументОплаты");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДополнительноеОписание");
	
	ТаблицаСписанияРасходов = ТаблицаПоступленияРасходов.СкопироватьКолонки();
	
	ТаблицаДвиженияВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	// 1. Поступление расходов.
	
	Для каждого СтраховойВзнос Из ТаблицаВзносов Цикл
		
		СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтраховойВзнос);
		СтрокаРасхода.ВидСтраховогоВзноса = СтраховойВзнос.ВидПлатежаВГосБюджет;
		
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтраховойВзнос.СчетУчета, ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод) Тогда
			СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		Иначе
			СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(0, "НДС");
	
	// 2. Списание расходов по уплаченным взносам, отражение расчетов по неоплаченным.
	
	Для Каждого Расход Из ТаблицаПоступленияРасходов Цикл
		
		Если ЗначениеЗаполнено(Расход.ДокументОплаты) Тогда
			// уплачен, спишем расходы
			НоваяСтрокаРасходов = ТаблицаСписанияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
		Иначе
			// не уплачен, отразим задолженность по фиксированным взносам по текущему документу
			НоваяСтрокаРасчетов = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетов, Расход);
			НоваяСтрокаРасчетов.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
	
	КонецЦикла;
	
	// 3. Спишем положительные остатки "Прочих расчетов", ранее отраженные документами уплаты взносов
	//    (переход с методики отражения, применявшейся до версии 3.0.42.8х)
	
	СчетаУчета = ТаблицаВзносов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчета);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СчетУчета";
	Фильтр.ЗначениеПоля = СчетаУчета;
	Фильтр.Условие      = "В";
	
	УстановитьБлокировкиПоТаблицеФильтров("ПрочиеРасчеты", ТаблицаФильтров, , СтруктураШапкиДокумента.Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Граница",     СтруктураШапкиДокумента.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("СчетаУчета",  СчетаУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Граница,
	|			Организация = &Организация
	|				И СчетУчета В (&СчетаУчета)) КАК ПрочиеРасчетыОстатки
	|ГДЕ
	|	ПрочиеРасчетыОстатки.СуммаОстаток > 0
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ОстаткиРасчетов = Запрос.Выполнить().Выгрузить();
	
	Для каждого ОстатокРасчетов Из ОстаткиРасчетов Цикл
		НоваяСтрокаРасчетов = ТаблицаДвиженияВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетов, ОстатокРасчетов);
		НоваяСтрокаРасчетов.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
	// 4. Соберем итоговые таблицы движений
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаСписанияРасходов, , "НачислениеСтраховыхВзносовИП", Ложь);
	ДвиженияРегистров  = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаПоступленияРасходов, );

КонецПроцедуры

// Отражение расходов по начисленным имущественным налогам:
// транспортный налог, земельный налог; с 2015 года - налог на имущество.
//
Процедура НачислениеИмущественныхНалогов(СтруктураШапкиДокумента, ДвиженияРегистров, Параметры)

	ТаблицаНалогов = Параметры.ТаблицаРасходов;
	
	ТаблицаПоступленияРасходов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("РасходыПриУСН");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДокументОплаты");
	
	ТаблицаСписанияРасходов = ТаблицаПоступленияРасходов.СкопироватьКолонки();
	ТаблицаСписанияРасходов.Колонки.Добавить("КлючУникальности");
	
	// поступление расходов
	
	Для каждого СтрокаНалога Из ТаблицаНалогов Цикл
		СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтрокаНалога);
	КонецЦикла;
	
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(0, "НДС");
	
	// списание оплаченных расходов и отражение в КУДиР
	
	МассивСчетовУчета = ТаблицаНалогов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетовУчета;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(
		Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая),
		СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаПоступленияРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрокаРасходов = ТаблицаСписанияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
			
			НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			НоваяСтрокаРасходов.ДокументОплаты   = Строка.РасчетныйДокумент;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
			
			Строка.Сумма = Строка.Сумма - СуммаСписания;
			
		КонецЦикла;
		
		Если СуммаОсталосьПогасить > 0 Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаСписанияРасходов, , "НачислениеИмущественныхНалогов", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаПоступленияРасходов, );

КонецПроцедуры

// Отражение расходов по начисленному торговому сбору.
//
Процедура НачислениеТорговогоСбора(СтруктураШапкиДокумента, ДвиженияРегистров, Параметры)

	ТаблицаНалогов = Параметры.ТаблицаРасходов;
	
	ТаблицаПоступленияРасходов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("РасходыПриУСН");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДокументОплаты");
	
	ТаблицаСписанияРасходов = ТаблицаПоступленияРасходов.СкопироватьКолонки();
	ТаблицаСписанияРасходов.Колонки.Добавить("КлючУникальности");
	
	// поступление расходов
	
	Для каждого СтрокаНалога Из ТаблицаНалогов Цикл
		СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтрокаНалога);
	КонецЦикла;
	
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(0, "НДС");
	
	// списание оплаченных расходов и отражение в КУДиР
	
	МассивСчетовУчета = ТаблицаНалогов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетовУчета;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(
		Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая),
		СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаПоступленияРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрокаРасходов = ТаблицаСписанияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
			
			НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			НоваяСтрокаРасходов.ДокументОплаты   = Строка.РасчетныйДокумент;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
			
			Строка.Сумма = Строка.Сумма - СуммаСписания;
			
		КонецЦикла;
		
		Если СуммаОсталосьПогасить > 0 Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаСписанияРасходов, , "НачислениеТорговогоСбора", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаПоступленияРасходов, );

КонецПроцедуры

//Расчет и списание расходов будущих периодов
//
Процедура СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров)

	Заголовок = "Списание РБП для целей УСН";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.РБП;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();

	НачМесяца = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	КонМесяца = КонецМесяца(СтруктураШапкиДокумента.Дата);

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого Строка Из ТаблицаРасходов Цикл
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		РБП = Строка.ЭлементРасхода;

		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
			////? ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
			////? ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;

		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > НачМесяца, РБП.ДатаНачалаСписания, НачМесяца);
		СуммаСписания = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Строка.Сумма, ВспомогательныеДанныеРасчета, НачМесяца, КонМесяца);

		Если НЕ (СуммаСписания > 0.05 Или СуммаСписания < -0.05) Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		Если Строка.Сумма > СуммаСписания Тогда
			К = СуммаСписания / Строка.Сумма;
			НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
			НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
			НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
		КонецЕсли;
	КонецЦикла;

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

 //Расчет и списание распределяемых между УСН и ЕНВД расходов
//
Процедура РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров)

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля		= Перечисления.СтатусыРасходовУСН.НеРаспределено;
	Фильтр.Условие			= "=";
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	СтруктураШапкиДокумента.Дата = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодРегистрации", МетаданныеДокумента), КонецКвартала(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), КонецКвартала(СтруктураШапкиДокумента.Дата));

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(КонецМесяца(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "РаспределениеЕНВД", Ложь);

	Метод = ?(СтруктураШапкиДокумента.МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
	База = ?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
			?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));

	Коэфф = ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Метод, База);

	ИтогРаспределения = ТаблицыДвижений.ТаблицаПринятых.Итог("Сумма")*Коэфф;
	Распределено = 0;
	МаксПозиция = Неопределено;
	МаксСумма = 0;

	Если (Коэфф = 0) ИЛИ (ТаблицыДвижений.ТаблицаПринятых.Количество() = 0) Тогда
		//Все расходы относятся к УСН или нет распределенных расходов
	ИначеЕсли (Коэфф = 1) И (ТаблицыДвижений.ТаблицаПринятых.Количество() > 0) Тогда
		// Все расходы относятся к ЕНВД, записи в КУДиР не требуются
		ТаблицыДвижений.ТаблицаПринятых.Очистить();
	Иначе
		Для Каждого Расход Из ТаблицыДвижений.ТаблицаПринятых Цикл
			Если Расход.Сумма > 0 Тогда
				Расход.Количество 	= Расход.Количество - Окр(Коэфф*Расход.Количество,3,1);

				Если МаксСумма < Расход.Сумма Тогда
					МаксПозиция = Расход;
					МаксСумма = Расход.Сумма;
				КонецЕсли;
				Распределено = Распределено + Окр(Коэфф*Расход.Сумма,2,1);

				Расход.Сумма	 	= Расход.Сумма - Окр(Коэфф*Расход.Сумма,2,1);
				Расход.НДС 			= Расход.НДС - Окр(Коэфф*Расход.НДС,2,1);
			КонецЕсли;
		КонецЦикла;

		Если (Распределено <> ИтогРаспределения) И (МаксПозиция <> Неопределено) Тогда
			МаксПозиция.Сумма = МаксПозиция.Сумма - (ИтогРаспределения - Распределено);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ Метод = "Квартал") И (НЕ НачалоГода(СтруктураШапкиДокумента.Дата) = НачалоКвартала(СтруктураШапкиДокумента.Дата)) Тогда
		СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицыДвижений.ТаблицаПринятых);
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

Процедура СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицаПринятых)

	ЗапросРасходы = Новый Запрос;
	ЗапросРасходы.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросРасходы.УстановитьПараметр("НеРаспределено", Перечисления.СтатусыРасходовУСН.НеРаспределено);
	ЗапросРасходы.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасходыПриУСНОбороты.СуммаРасход) КАК СуммаРасход,
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
	|ГДЕ
	|	РасходыПриУСНОбороты.СтатусыОплатыРасходовУСН = &НеРаспределено
	|	И РасходыПриУСНОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор";

	Результат = ЗапросРасходы.Выполнить().Выбрать();
	ВсегоРаспределено = 0;
	Пока Результат.Следующий() Цикл
		СуммаРасход 	= ?(НЕ ЗначениеЗаполнено(Результат.СуммаРасход), 0, Результат.СуммаРасход);
		Валюта 			= ?(НЕ ЗначениеЗаполнено(Результат.Валюта), СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Результат.Валюта);
		Регистратор 	= ?(НЕ ЗначениеЗаполнено(Результат.Регистратор), СтруктураШапкиДокумента.Ссылка, Результат.Регистратор);
		Если Результат.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			ВсегоРаспределено = ВсегоРаспределено + СуммаРасход;
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Регистратор.Дата);
			ВсегоРаспределено = ВсегоРаспределено + РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасход, Валюта,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																				СтруктураКурса.Курс, 1,
																				СтруктураКурса.Кратность, 1);
		КонецЕсли;
	КонецЦикла;

	Если ВсегоРаспределено = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗапросПринято = Новый Запрос;
	ЗапросПринято.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросПринято.УстановитьПараметр("ЭтапПроведения", 2);
	ЗапросПринято.Текст =
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа7) КАК Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачДата И &КонДата
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И КнигаУчетаДоходовИРасходов.ЭтапПроведения = &ЭтапПроведения";



	Результат = ЗапросПринято.Выполнить().Выбрать();
	ВсегоПринято = 0;
	Если Результат.Следующий() Тогда
		ВсегоПринято = ?(НЕ ЗначениеЗаполнено(Результат.Графа7), 0, Результат.Графа7);
	КонецЕсли;

	СуммаКорректировки = ВсегоРаспределено - Окр(ВсегоРаспределено*Коэфф, 2, 1) - ВсегоПринято;

	Если СуммаКорректировки <> 0 Тогда
		СтрокаРасхода 							= ТаблицаПринятых.Добавить();
		СтрокаРасхода.Организация 				= СтруктураШапкиДокумента.Организация;
		СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Принимаются;
		СтрокаРасхода.РасчетныйДокумент 		= СтруктураШапкиДокумента.Ссылка;
		СтрокаРасхода.Сумма 					= СуммаКорректировки;
		СтрокаРасхода.НДС 						= 0;
		СтрокаРасхода.Валюта 					= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

Процедура ВозвратНаПлатежнуюКартуПереквалификацияДоходовПатент(КУДиРПатент, ДвиженияКУДиРПатент)
	
	Если КУДиРПатент = Неопределено ИЛИ КУДиРПатент.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из КУДиРПатент Цикл
		ЗаписьКУДиР = ДвиженияКУДиРПатент.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВозвратНаПлатежнуюКартуПереквалификацияДоходов(КУДиР, ДвиженияКУДиР)
	
	Если КУДиР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГрафыКУДиР = "Графа5,ДоходЕНВД,ДоходТорговыйСбор,ДоходПатент";
	ЕстьДанные = Ложь;
	Для Каждого Графа Из СтрРазделить(ГрафыКУДиР, ",") Цикл
		Если КУДиР.Свойство(Графа) И КУДиР[Графа] <> 0 Тогда
			ЕстьДанные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьДанные Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДвиженияКУДиР, КУДиР);
	// Доходы по деятельности на УСН включают доходы по деятельности на торговом сборе.
	Если ЗначениеЗаполнено(КУДиР.ДоходТорговыйСбор) Тогда
		ДвиженияКУДиР.Графа5 = ДвиженияКУДиР.Графа5 + КУДиР.ДоходТорговыйСбор;
	КонецЕсли;
	// Доходы по патенту отражаются в графе ДоходыЕНВД
	Если ЗначениеЗаполнено(КУДиР.ДоходПатент) Тогда
		ДвиженияКУДиР.ДоходЕНВД = ДвиженияКУДиР.ДоходЕНВД + КУДиР.ДоходПатент;
	КонецЕсли;
	
КонецПроцедуры

//Операция зачета аванса покупателя
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН (сформированная процедурой списание расходов)
Процедура РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка)
	
	ТаблицаЗачетАвансаУСН = ПодготовитьТаблицуЗачетаАванса(СтруктураШапкиДокумента, ТаблицаАвансов);
	
	СуммаДокумента    = Выручка.Всего;
	СуммаНДС          = Выручка.НДС;
	СуммаЕНВД         = Выручка.ЕНВД;
	СуммаКомиссии     = Выручка.Комиссия;
	СуммаТорговыйСбор = Выручка.ТорговыйСбор;
	СуммаПатент       = Выручка.Патент;
	СуммаУСН          = СуммаДокумента - СуммаЕНВД - СуммаКомиссии - СуммаПатент;
	
	СобственнаяВыручка = Выручка.Всего - Выручка.Комиссия;
	
	ДоляСобственнойВыручкиУСН          = ?(СобственнаяВыручка = 0, 0, СуммаУСН / СобственнаяВыручка);
	ДоляСобственнойВыручкиЕНВД         = ?(СобственнаяВыручка = 0, 0, СуммаЕНВД / СобственнаяВыручка);
	ДоляСобственнойВыручкиПатент       = ?(СобственнаяВыручка = 0, 0, СуммаПатент / СобственнаяВыручка);
	ДоляСобственнойВыручкиТорговыйСбор = ?(СобственнаяВыручка = 0, 0, СуммаТорговыйСбор / СобственнаяВыручка);
	
	ДокументРеализации = СтруктураШапкиДокумента.Ссылка;
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.Ссылка, "ДокументОтгрузки");
	ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.Ссылка, "ИсходныйДокументРеализации");
	КонецЕсли;
	
	МетаданныеРеализации = ДокументРеализации.Метаданные();
	
	Если СуммаПатент > 0 И ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеРеализации) Тогда
		ПатентВыручки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации, "Патент");
		ТаблицаЗачетАвансаУСН.ЗаполнитьЗначения(ПатентВыручки, "ПатентВыручки");
	КонецЕсли;
	
	// Распределим выручку по взаиморасчетам
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаУСН,          ТаблицаЗачетАвансаУСН, "ВыручкаУСН", "СуммаВзаиморасчетов");
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДС,          ТаблицаЗачетАвансаУСН, "ВыручкаНДС", "СуммаВзаиморасчетов");
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаТорговыйСбор, ТаблицаЗачетАвансаУСН, "ВыручкаТорговыйСбор", "СуммаВзаиморасчетов");
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаЕНВД,         ТаблицаЗачетАвансаУСН, "ВыручкаЕНВД", "СуммаВзаиморасчетов");
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаКомиссии,     ТаблицаЗачетАвансаУСН, "ВыручкаКомиссия", "СуммаВзаиморасчетов");
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаПатент,       ТаблицаЗачетАвансаУСН, "ВыручкаПатент", "СуммаВзаиморасчетов");
	
	// Рассчитаем суммы переквалификации доходов между налоговыми режимами
	НеЗачтено = 0;
	Для каждого СтрокаЗачета Из ТаблицаЗачетАвансаУСН Цикл
		
		Если СтрокаЗачета.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			НеЗачтено = НеЗачтено + СтрокаЗачета.СуммаВзаиморасчетов;
			Продолжить; // Реализация без зачета аванса
		КонецЕсли;
		
		Если Не АвансПодлежитПереквалификации(СтрокаЗачета, СтруктураШапкиДокумента) Тогда
			// Доходы по авансу не переквалифицируются в силу особенностей законодательства.
			Продолжить;
		КонецЕсли;
		
		КурсДокумента = СтрокаЗачета.КурсДокумента;
		
		// ЕНВД
		СуммаКорректировкиЕНВД = Окр((СтрокаЗачета.ВыручкаЕНВД - СтрокаЗачета.СуммаВзаиморасчетовЕНВД) * КурсДокумента, 2);
		СтрокаЗачета.ПризнатьЕНВД = Макс(СуммаКорректировкиЕНВД, 0);
		СтрокаЗачета.СторноЕНВД   = Макс(-СуммаКорректировкиЕНВД, 0);
		
		СтрокаЗачета.ИсключитьНДС_ЕНВД = ?(СтрокаЗачета.ИсключатьНДСИзДоходов,
			Окр(СтрокаЗачета.ВыручкаНДС * ДоляСобственнойВыручкиЕНВД * КурсДокумента, 2),
			0);
		
		// Комиссия
		СуммаКорректировкиКомиссия = Окр((СтрокаЗачета.ВыручкаКомиссия - СтрокаЗачета.СуммаВзаиморасчетовКомитента) * КурсДокумента, 2);
		СтрокаЗачета.ПризнатьКомиссия = Макс(СуммаКорректировкиКомиссия, 0);
		СтрокаЗачета.СторноКомиссия   = Макс(-СуммаКорректировкиКомиссия, 0);
		
		// Патент
		Если ЗначениеЗаполнено(СтрокаЗачета.ПатентАванса) И ЗначениеЗаполнено(СтрокаЗачета.ПатентВыручки)
			И СтрокаЗачета.ПатентАванса <> СтрокаЗачета.ПатентВыручки Тогда
			СтрокаЗачета.ПризнатьПатент = Окр(СтрокаЗачета.ВыручкаПатент * КурсДокумента, 2);
			СтрокаЗачета.СторноПатент   = Окр(СтрокаЗачета.СуммаВзаиморасчетовПатент * КурсДокумента, 2);
		Иначе
			СуммаКорректировкиПатент = Окр((СтрокаЗачета.ВыручкаПатент - СтрокаЗачета.СуммаВзаиморасчетовПатент) * КурсДокумента, 2);
			СтрокаЗачета.ПризнатьПатент = Макс(СуммаКорректировкиПатент, 0);
			СтрокаЗачета.СторноПатент   = Макс(-СуммаКорректировкиПатент, 0);
		КонецЕсли;
		
		СтрокаЗачета.ИсключитьНДС_Патент = ?(СтрокаЗачета.ИсключатьНДСИзДоходов,
			Окр(СтрокаЗачета.ВыручкаНДС * ДоляСобственнойВыручкиПатент * КурсДокумента, 2),
			0);
		
		// УСН
		СуммаВзаиморасчетовУСН = (СтрокаЗачета.СуммаВзаиморасчетов - СтрокаЗачета.СуммаВзаиморасчетовЕНВД
			- СтрокаЗачета.СуммаВзаиморасчетовКомитента - СтрокаЗачета.СуммаВзаиморасчетовПатент);
		СуммаКорректировкиУСН  = Окр((СтрокаЗачета.ВыручкаУСН - СуммаВзаиморасчетовУСН) * КурсДокумента, 2);
		
		СтрокаЗачета.ПризнатьУСН = Макс(СуммаКорректировкиУСН, 0);
		СтрокаЗачета.СторноУСН   = Макс(-СуммаКорректировкиУСН, 0);
		
		СтрокаЗачета.ИсключитьНДС_УСН = ?(СтрокаЗачета.ИсключатьНДСИзДоходов,
			Окр(СтрокаЗачета.ВыручкаНДС * ДоляСобственнойВыручкиУСН * КурсДокумента, 2),
			0);
		
		// В том числе торговый сбор
		СуммаКорректировкиТорговыйСбор = Окр((СтрокаЗачета.ВыручкаТорговыйСбор - СтрокаЗачета.СуммаВзаиморасчетовТорговыйСбор) * КурсДокумента, 2);
		СтрокаЗачета.ПризнатьТорговыйСбор = Макс(СуммаКорректировкиТорговыйСбор, 0);
		СтрокаЗачета.СторноТорговыйСбор   = Макс(-СуммаКорректировкиТорговыйСбор, 0);
		
		СтрокаЗачета.ИсключитьНДС_ТорговыйСбор = ?(СтрокаЗачета.ИсключатьНДСИзДоходов,
			Окр(СтрокаЗачета.ВыручкаНДС * ДоляСобственнойВыручкиТорговыйСбор * КурсДокумента, 2),
			0);
		
	КонецЦикла;

	// Определяем зачет авансов в разрезе договоров.
	ИменаЧисловыхКолонок = "";
	Для Каждого Колонка Из ТаблицаЗачетАвансаУСН.Колонки Цикл
		Если Колонка.Имя = "КурсДокумента" Тогда
			// Курсы не сворачиваем.
			Продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ПустаяСтрока(ИменаЧисловыхКолонок), "", ", ") + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗачетАвансаУСНПоДоговорам = ТаблицаЗачетАвансаУСН.Скопировать(, "Контрагент, ДоговорКонтрагента, " + ИменаЧисловыхКолонок);
	ТаблицаЗачетАвансаУСНПоДоговорам.Свернуть("Контрагент, ДоговорКонтрагента", ИменаЧисловыхКолонок);
	
	ПолноеПояснениеОперации = "";

	// Подготовка движений КУДиР по договорам
	
	Для Каждого СтрокаЗачета Из ТаблицаЗачетАвансаУСНПоДоговорам Цикл
	
		СтрокаРасшифровки = КУДиР.РасшифровкаПоДоговорам.Добавить();
		СтрокаРасшифровки.Контрагент         = СтрокаЗачета.Контрагент;
		СтрокаРасшифровки.ДоговорКонтрагента = СтрокаЗачета.ДоговорКонтрагента;
	
		КорректировкаУСН = СтрокаЗачета.ПризнатьУСН - СтрокаЗачета.СторноУСН;
		ИсключитьНДС_УСН = СтрокаЗачета.ИсключитьНДС_УСН;
		
		КорректировкаТорговыйСбор = СтрокаЗачета.ПризнатьТорговыйСбор - СтрокаЗачета.СторноТорговыйСбор;
		ИсключитьНДС_ТорговыйСбор = СтрокаЗачета.ИсключитьНДС_ТорговыйСбор;
		
		КорректировкаЕНВД = СтрокаЗачета.ПризнатьЕНВД - СтрокаЗачета.СторноЕНВД;
		ИсключитьНДС_ЕНВД = СтрокаЗачета.ИсключитьНДС_ЕНВД;
		
		КорректировкаКомиссия = СтрокаЗачета.ПризнатьКомиссия - СтрокаЗачета.СторноКомиссия;
		
		КорректировкаПатент = СтрокаЗачета.ПризнатьПатент - СтрокаЗачета.СторноПатент;
		ИсключитьНДС_Патент = СтрокаЗачета.ИсключитьНДС_Патент;
		
		СтрокаРасшифровки.Графа5            = КорректировкаУСН - ИсключитьНДС_УСН;
		Строкарасшифровки.ИсключенныйНДС    = ИсключитьНДС_УСН;
		СтрокаРасшифровки.ДоходЕНВД         = КорректировкаЕНВД - ИсключитьНДС_ЕНВД + КорректировкаПатент - ИсключитьНДС_Патент;
		СтрокаРасшифровки.ДоходПатент       = КорректировкаПатент - ИсключитьНДС_Патент;
		СтрокаРасшифровки.ДоходТорговыйСбор = КорректировкаТорговыйСбор - ИсключитьНДС_ТорговыйСбор;
		
		ПояснениеОперации = "";
		
		Если КорректировкаУСН > 0 Тогда
			ПояснениеОперации = ПояснениеОперации
				+ СтрШаблон(НСтр("ru = 'Аванс на сумму %1 руб. отнесен к доходам УСН. '"),
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(КорректировкаУСН, , , " "));
		КонецЕсли;
		
		Если ИсключитьНДС_УСН > 0 Тогда
			ПояснениеОперации = ПояснениеОперации
				+ СтрШаблон(НСтр("ru = 'Предъявленный покупателям НДС в сумме %1 руб. исключен из доходов. '"),
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(ИсключитьНДС_УСН, , , " "));
		КонецЕсли;
		
		Если КорректировкаУСН < 0 Тогда
			
			// Для определения источников переквалификации аванса УСН в необлагаемые доходы
			// требуется исключить влияние взаимной переквалификации этих доходов.
			
			СуммыНепринимаемыхДоходов = Новый Массив;
			СуммыНепринимаемыхДоходов.Добавить(Макс(КорректировкаЕНВД, 0));     // [0] - ЕНВД
			СуммыНепринимаемыхДоходов.Добавить(Макс(КорректировкаКомиссия, 0)); // [1] - Комиссия
			СуммыНепринимаемыхДоходов.Добавить(Макс(КорректировкаПатент, 0));   // [2] - Патент
			
			СуммаПереквалификацииНепринимаемых = - (Мин(КорректировкаЕНВД, 0) + Мин(КорректировкаКомиссия, 0) + Мин(КорректировкаПатент, 0));
			
			СуммыВзаимнойПереквалификации = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				СуммаПереквалификацииНепринимаемых, СуммыНепринимаемыхДоходов, 2);
			
			ВкладЕНВД = СуммыНепринимаемыхДоходов[0] - ?(СуммыВзаимнойПереквалификации = Неопределено, 0, СуммыВзаимнойПереквалификации[0]);
			СодержаниеЕНВД = ?(ВкладЕНВД <=0, "",
				СтрШаблон(НСтр("ru = ' ЕНВД - %1 руб.;'"), ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВкладЕНВД, , , " ")));
			
			ВкладКомиссии = СуммыНепринимаемыхДоходов[1] - ?(СуммыВзаимнойПереквалификации = Неопределено, 0, СуммыВзаимнойПереквалификации[1]);
			СодержаниеКомиссия = ?(ВкладКомиссии <= 0, "",
				СтрШаблон(НСтр("ru = ' выручка комитента - %1 руб.;'"), ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВкладКомиссии, , , " ")));
			
			ВкладПатента = СуммыНепринимаемыхДоходов[2] - ?(СуммыВзаимнойПереквалификации = Неопределено, 0, СуммыВзаимнойПереквалификации[2]);
			СодержаниеПатент = ?(ВкладПатента <= 0, "",
				СтрШаблон(НСтр("ru = ' по патенту - %1 руб.;'"), ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВкладПатента, , , " ")));
			
			Содержание = СтрШаблон(НСтр("ru = 'Аванс на сумму %1 руб. определен как не облагаемые налогом доходы:%2%3%4'"),
				- КорректировкаУСН, СодержаниеЕНВД, СодержаниеКомиссия, СодержаниеПатент);
			Содержание = Лев(Содержание, СтрДлина(Содержание) - 1) + " ";
			
			ПояснениеОперации = ПояснениеОперации + Содержание;
		КонецЕсли;
		
		Если КорректировкаТорговыйСбор <> 0 Тогда
			ЗнакКорректировки = ?(КорректировкаТорговыйСбор > 0, 1, -1);
			ТекстКорректировки = ?(ЗнакКорректировки = 1,
				НСтр("ru = 'отнесен к деятельности на торговом сборе. '"),
				НСтр("ru = 'исключен из доходов по деятельности на торговом сборе. '"));
			ПояснениеОперации = ПояснениеОперации
				+ СтрШаблон(НСтр("ru = 'Аванс на сумму %1 руб. %2'"),
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗнакКорректировки * КорректировкаТорговыйСбор, , , " "),
					ТекстКорректировки);
		КонецЕсли;
	
		СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + ПояснениеОперации;
		ПолноеПояснениеОперации = ПолноеПояснениеОперации + ПояснениеОперации;
		
	КонецЦикла;
	
	КУДиР.Графа5            = КУДиР.Графа5 + КУДиР.РасшифровкаПоДоговорам.Итог("Графа5");
	КУДиР.ДоходЕНВД         = КУДиР.ДоходЕНВД + КУДиР.РасшифровкаПоДоговорам.Итог("ДоходЕНВД");
	КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + КУДиР.РасшифровкаПоДоговорам.Итог("ДоходТорговыйСбор");
	
	ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПолноеПояснениеОперации);
	
	// Движения "Книги доходов по патенту"
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	
	Для каждого СтрокаЗачета Из ТаблицаЗачетАвансаУСН Цикл
		
		// Сторно по патенту аванса
		Если СтрокаЗачета.ЕстьАвансПоПатенту И СтрокаЗачета.СторноПатент > 0 Тогда
			ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
			ЗаписьКУДиРПатент.Патент = СтрокаЗачета.ПатентАванса;
			ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента)
				+ СтрШаблон(НСтр("ru = 'Аванс на сумму %1 руб. использован в деятельности, не подпадающей под действие патента. '"),
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаЗачета.СторноПатент, , , " "));
					
			ЗаписьКУДиРПатент.Графа4             = - СтрокаЗачета.СторноПатент;
			ЗаписьКУДиРПатент.Контрагент         = СтрокаЗачета.Контрагент;
			ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаЗачета.ДоговорКонтрагента;
		КонецЕсли;
		
		// Доходы по патенту реализации
		Если ЗначениеЗаполнено(СтрокаЗачета.ПатентВыручки)
			И (СтрокаЗачета.ПризнатьПатент > 0 Или СтрокаЗачета.ИсключитьНДС_Патент > 0) Тогда
			ЗаписьКУДиРПатент            = ДвиженияКУДиРПатент.Добавить();
			ЗаписьКУДиРПатент.Патент     = СтрокаЗачета.ПатентВыручки;
			ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
			
			Если СтрокаЗачета.ИсключитьНДС_Патент > 0 Тогда
				ЗаписьКУДиРПатент.Содержание = ЗаписьКУДиРПатент.Содержание
					+ СтрШаблон(НСтр("ru = 'Предъявленный покупателям НДС в сумме %1 руб. исключен из доходов. '"),
						ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаЗачета.ИсключитьНДС_Патент, , , " "));
			КонецЕсли;
			
			ЗаписьКУДиРПатент.Графа4             = СтрокаЗачета.ПризнатьПатент - СтрокаЗачета.ИсключитьНДС_Патент;
			ЗаписьКУДиРПатент.Контрагент         = СтрокаЗачета.Контрагент;
			ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаЗачета.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Возврат;
	КонецЕсли;

	ВсегоВзаиморасчетов = ТаблицаЗачетАвансаУСН.Итог("СуммаВзаиморасчетов");
	КоэффЗачета =  ?(ВсегоВзаиморасчетов = 0, 0, (ВсегоВзаиморасчетов - НеЗачтено) / ВсегоВзаиморасчетов);

	ТаблицаДляСписания = ТаблицаДвижений.СкопироватьКолонки();
	Для Каждого Строка Из ТаблицаДвижений Цикл
		Если Строка.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			Продолжить;
		КонецЕсли;
		Сумма = КоэффЗачета * Строка.Сумма;
		Количество = КоэффЗачета * Строка.Количество;
		НДС = КоэффЗачета * Строка.НДС;
		Если Сумма = 0 Тогда
			Продолжить;
		Конецесли;
		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.НДС = НДС;
	КонецЦикла;

	//Разложим таблицу расходов на движения корректировки статуса и принятые расходы
	НовыеТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Доход", Ложь);

	ДвиженияРегистров = СобратьТаблицыДвижений(НовыеТаблицыДвижений, , ,ДвиженияРегистровВх);

КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, ВидОперации = "Оплата", ТаблицаНДСПродажи = Неопределено)

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.СчетРасчетов.Имя = "СчетУчета";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("Курс");
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("Кратность");

	Если ВидОперации = "Доход" Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СуммаУслуг", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		//Услуги банка, удержанные из оплаты покупателя
		СуммаУслуг = 0;
		Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СуммаУслуг") <> Неопределено И
			СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СчетБанк") <> Неопределено Тогда
			СуммаУслуг = СтруктураШапкиДокумента.Ссылка.СуммаУслуг;
			Если СуммаУслуг > 0 Тогда
				ТаблицаДвиженияВзаиморасчетов.Свернуть("РасчетныйДокумент, ДатаДокументаРасчетов, СчетУчета, ВалютаВзаиморасчетов, Контрагент, ДоговорКонтрагента,
														|РасчетыВУсловныхЕдиницах, Курс, Кратность",
														"СуммаРуб, СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовПатент,
														|СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовТорговыйСбор, ОстатокВзаиморасчетов, СуммаУслуг");
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаУслуг, ТаблицаДвиженияВзаиморасчетов, "СуммаУслуг", "СуммаВзаиморасчетов");
				ТаблицаДвиженияВзаиморасчетов.Сортировать("ДатаДокументаРасчетов, РасчетныйДокумент", Новый СравнениеЗначений);
			КонецЕсли;
		КонецЕсли;
		СуммаРасходовНаУслуги      = СуммаУслуг;
		ДоходыТорговыйСборВсего    = 0;
		СуммаКоррДоходовКомитента  = 0;
		СуммаКоррДоходовЕНВД       = 0;
		СуммаКоррДоходовПатент     = 0;
		СуммаНаЗакупкуДляКомитента = 0;
		СуммаКоррДоходовНДС        = 0;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТаблицаНДСПродажи) Тогда
		ТаблицаНДСПродажи.Индексы.Добавить("ДокументРасчетов");
	КонецЕсли;
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПлатеж.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		Курс = 1;
		Кратность = 1;
		
		Если СтрокаПлатеж.ВалютаВзаиморасчетов <> ВалютаРеглУчета Тогда
			Курс = ?(СтрокаПлатеж.СуммаВзаиморасчетов = 0, Курс, СтрокаПлатеж.СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов);
		КонецЕсли;
		
		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтрокаПлатеж.Курс      = Курс;
		СтрокаПлатеж.Кратность = Кратность;

		Если ВидОперации = "Оплата" Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.СуммаВзаиморасчетов*Курс/Кратность;

		ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда

			СторноДоходов 	= СтрокаПлатеж.СуммаБУ;
			
			Если ТаблицаОплат.Колонки.Найти("СуммаБУ_Комитента") = Неопределено Тогда
				ДоходЕНВД         = 0;
				ДоходКомитента    = 0;
				ДоходПатент       = 0;
				ДоходТорговыйСбор = 0;
			Иначе
				ДоходКомитента    = СтрокаПлатеж.СуммаБУ_Комитента;
				ДоходЕНВД         = СтрокаПлатеж.СуммаБУ_ЕНВД;
				ДоходПатент       = СтрокаПлатеж.СуммаБУ_Патент;
				ДоходТорговыйСбор = СтрокаПлатеж.СуммаБУ_ТорговыйСбор;
			КонецЕсли;

			СторноПринимаемыхДоходов  = Макс(0, СторноДоходов - ДоходКомитента - ДоходЕНВД - ДоходПатент);
			СторноДоходовТорговыйСбор = Макс(0, ДоходТорговыйСбор);
			СторноДоходовЕНВД         = Макс(0, ДоходЕНВД + ДоходПатент);
			СторноДоходовПатент       = Макс(0, ДоходПатент);
			
			Если НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено
				И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку 
				И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) И (ТипЗнч(СтрокаПлатеж.РасчетныйДокумент) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
				СторноПринимаемыхДоходов  = 0;
				СторноДоходовТорговыйСбор = 0;
				СторноДоходовЕНВД         = 0;
				СторноДоходовПатент       = 0;
			КонецЕсли;

			КУДиР.Графа4            = КУДиР.Графа4 - СторноДоходов;
			КУДиР.Графа5            = КУДиР.Графа5 - СторноПринимаемыхДоходов;
			КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор - СторноДоходовТорговыйСбор;
			КУДиР.ДоходЕНВД         = КУДиР.ДоходЕНВД - СторноДоходовЕНВД;

			// Добавляем расшифровку по договорам.
			СтрокаРасшифровки 						= КУДиР.РасшифровкаПоДоговорам.Добавить();
			СтрокаРасшифровки.Контрагент 			= СтрокаПлатеж.Контрагент;
			СтрокаРасшифровки.ДоговорКонтрагента 	= СтрокаПлатеж.ДоговорКонтрагента;
			СтрокаРасшифровки.Графа4 				= - СторноДоходов;
			СтрокаРасшифровки.Графа5 				= - СторноПринимаемыхДоходов;
			СтрокаРасшифровки.ДоходТорговыйСбор 	= - СторноДоходовТорговыйСбор;
			СтрокаРасшифровки.ДоходЕНВД 			= - СторноДоходовЕНВД;
			СтрокаРасшифровки.ДоходПатент 			= - СторноДоходовПатент;
			
			Если СторноДоходов - СторноПринимаемыхДоходов > 0 Тогда
				СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноДоходов - СторноПринимаемыхДоходов, , , " ")
					+ " руб. не был включен в доходы, в том числе: ";
				Если ДоходКомитента > 0 Тогда
					СодержаниеОперации = СодержаниеОперации + "доходы комитента - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходКомитента, , , " ")+ " руб.; ";
				КонецЕсли;
				Если ДоходЕНВД > 0 Тогда
					СодержаниеОперации = СодержаниеОперации + "доходы по деятельности ЕНВД - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходЕНВД, , , " ")+ " руб.; ";
				КонецЕсли;
				Если ДоходПатент > 0 Тогда
					СодержаниеОперации = СодержаниеОперации + "доходы по деятельности на патенте - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходПатент, , , " ")+ " руб.; ";
				КонецЕсли;
				СодержаниеОперации = Лев(СодержаниеОперации, СтрДлина(СодержаниеОперации) - 2) + ". ";
				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
				СтрокаРасшифровки.Пояснение = СодержаниеОперации;
			КонецЕсли;
			
			Если СторноДоходовТорговыйСбор > 0 Тогда
				СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноДоходовТорговыйСбор, , , " ")
					+ " руб. был включен в доходы по деятельности на торговом сборе. ";
				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
				СтрокаРасшифровки.Пояснение = СодержаниеОперации;
			КонецЕсли;
			
			Если ДоходПатент > 0 И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				//Отразим запись в книге по патенту
				ДокументСсылка = СтрокаПлатеж.РасчетныйДокумент;
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
					ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
					ЗаписьКУДиРПатент.Графа4 = - ДоходПатент;
					ЗаписьКУДиРПатент.Контрагент = СтрокаПлатеж.Контрагент;
					ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВидОперации = "Доход" Тогда
			СуммаГрафа4 = Окр((СтрокаПлатеж.СуммаВзаиморасчетов - СтрокаПлатеж.СуммаУслуг)*Курс/Кратность, 2, РежимОкругления.Окр15как20);
			КУДиР.Графа4 = КУДиР.Графа4 + СуммаГрафа4;
			// Добавляем расшифровку по договорам.
			СтрокаРасшифровки                    = КУДиР.РасшифровкаПоДоговорам.Добавить();
			СтрокаРасшифровки.Контрагент         = СтрокаПлатеж.Контрагент;
			СтрокаРасшифровки.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			СтрокаРасшифровки.Графа4             = СуммаГрафа4;

			СуммаНДСПоРеализации     = 0;
			ВыручкаВсегоПоРеализации = 0;
			ВалютаРеализации         = ВалютаРеглУчета;
			КурсРеализации           = 1;
			КратностьРеализации      = 1;
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				// Не включается в доходы в соответствии с положениями переходного периода ст.346.25 НК РФ -
				// уже учтено в доходах по налогу на прибыль методом начисления.
				ДоходУчтенДоПереходаНаУСН = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(СтруктураШапкиДокумента.Организация)
					И (УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) > СтрокаПлатеж.РасчетныйДокумент.Дата);
				
				Если СтрокаПлатеж.РасчетныйДокумент <> СтруктураШапкиДокумента.Ссылка И ЗначениеЗаполнено(ТаблицаНДСПродажи) Тогда
					// В таблице НДС может быть максимум 1 строка для каждого документа расчетов.
					СтрокаНДСПоДокументу    = ТаблицаНДСПродажи.Найти(СтрокаПлатеж.РасчетныйДокумент, "ДокументРасчетов");
					Если СтрокаНДСПоДокументу <> Неопределено Тогда
						СуммаНДСПоРеализации     = СтрокаНДСПоДокументу.НДС;          // В валюте регламентированного учета
						ВыручкаВсегоПоРеализации = СтрокаНДСПоДокументу.ВыручкаВсего; // В валюте реализации
						ВалютаРеализации         = СтрокаНДСПоДокументу.ВалютаРеализации;
						КурсРеализации           = СтрокаНДСПоДокументу.КурсРеализации;
						КратностьРеализации      = СтрокаНДСПоДокументу.КратностьРеализации;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДоходУчтенДоПереходаНаУСН = Ложь;
			КонецЕсли;
			
			Если НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено 
				И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора)
				И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) И (ТипЗнч(СтрокаПлатеж.РасчетныйДокумент) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
				
				СуммаДляКомитента = (СтрокаПлатеж.СуммаВзаиморасчетов - СтрокаПлатеж.СуммаУслуг)*Курс/Кратность;
				СуммаНаЗакупкуДляКомитента = СуммаНаЗакупкуДляКомитента + СуммаДляКомитента;
				СтрокаРасшифровки.СуммаНаЗакупкуДляКомитента = СуммаДляКомитента;
				Продолжить;
				
			КонецЕсли;

			СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
			Если ТаблицаОплат.Колонки.Найти("СуммаВзаиморасчетовКомитента") = Неопределено Тогда
				ДоходЕНВД         = 0;
				ДоходКомитента    = 0;
				ДоходПатент       = 0;
				ДоходТорговыйСбор = 0;
			Иначе
				ДоходКомитента    = СтрокаПлатеж.СуммаВзаиморасчетовКомитента;
				ДоходЕНВД         = СтрокаПлатеж.СуммаВзаиморасчетовЕНВД;
				ДоходПатент       = СтрокаПлатеж.СуммаВзаиморасчетовПатент;
				ДоходТорговыйСбор = СтрокаПлатеж.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			
			Если ЭтоОплатаЗаПериодТолькоЕНВДПослеОтменыЕНВД(СтруктураШапкиДокумента.Организация,
					СтрокаПлатеж.ДатаДокументаРасчетов, СтруктураШапкиДокумента.Дата) Тогда
				ДоходЕНВД = Макс(СуммаВзаиморасчетов - ДоходКомитента - ДоходПатент, 0);
				ДоходПатент       = 0; // Патент не может применяться при режиме "Только ЕНВД".
				ДоходТорговыйСбор = 0; // Торговый сбор не может применяться при режиме "Только ЕНВД".
			КонецЕсли;

			//Отражение платежа в КУДиР производиться только в части фактически поступивших средств
			Если СтрокаПлатеж.СуммаУслуг > 0 Тогда
				СписатьУслуг = Мин(СуммаВзаиморасчетов, СтрокаПлатеж.СуммаУслуг);

				СуммаЕНВД_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходЕНВД, 2, 1);
				СуммаПатент_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходПатент, 2, 1);
				СуммаКомиссии_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходКомитента, 2, 1);

				//Уменьшим сумму расходов на услуги банка в части ЕНВД и патента
				СуммаРасходовНаУслуги = СуммаРасходовНаУслуги - СуммаЕНВД_БН - СуммаПатент_БН;
			КонецЕсли;

			Если Не ДоходУчтенДоПереходаНаУСН Тогда
				
				// Если валюта реализации с НДС отличается от валюты взаиморасчетов - приведем суммы к валюте взаиморасчетов.
				// Курс валюты взаиморасчетов нужно определять на дату реализации, поскольку этой датой НДС начисляется в рублях.
				Если СтрокаПлатеж.ВалютаВзаиморасчетов <> ВалютаРеализации Тогда
					ВыручкаВсегоПоРеализации = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						ВыручкаВсегоПоРеализации,
						Новый Структура("Валюта, Курс, Кратность",
							ВалютаРеализации, КурсРеализации, КратностьРеализации),
						РаботаСКурсамиВалют.ПолучитьКурсВалюты(
							СтрокаПлатеж.ВалютаВзаиморасчетов, СтрокаПлатеж.ДатаДокументаРасчетов));
				КонецЕсли;
				КоэффициентРасчетовПоНДС = ?(ВыручкаВсегоПоРеализации = 0, 0, СуммаВзаиморасчетов/ВыручкаВсегоПоРеализации);
				СобственнаяВыручка = СуммаВзаиморасчетов - ДоходКомитента;
				
				// Доходы принимаемые
				ДоходУСН            = СуммаВзаиморасчетов - ДоходЕНВД - ДоходКомитента - ДоходПатент;
				ИсключитьНДС        = ?(СобственнаяВыручка = 0,
										0,
										Окр(КоэффициентРасчетовПоНДС*СуммаНДСПоРеализации*ДоходУСН/СобственнаяВыручка, 2));
				СуммаКоррДоходовНДС = СуммаКоррДоходовНДС + ИсключитьНДС;
				СуммаГрафа5         = Окр(ДоходУСН*Курс/Кратность, 2) - ИсключитьНДС;
				КУДиР.Графа5        = КУДиР.Графа5 + СуммаГрафа5;
				
				СтрокаРасшифровки.Графа5 = СуммаГрафа5;
				СтрокаРасшифровки.ИсключенныйНДС = ИсключитьНДС;
				
				// В том числе по деятельности на торговом сборе
				ИсключитьНДСТорговыйСбор = ?(СобственнаяВыручка = 0,
											0,
											Окр(КоэффициентРасчетовПоНДС*СуммаНДСПоРеализации*ДоходТорговыйСбор/СобственнаяВыручка, 2));
				СуммаДоходТорговыйСбор = Окр(ДоходТорговыйСбор*Курс/Кратность, 2) - ИсключитьНДСТорговыйСбор;
				КУДиР.ДоходТорговыйСбор  = КУДиР.ДоходТорговыйСбор + СуммаДоходТорговыйСбор;
				ДоходыТорговыйСборВсего  = ДоходыТорговыйСборВсего + СуммаДоходТорговыйСбор;
				СтрокаРасшифровки.ДоходТорговыйСбор = СуммаДоходТорговыйСбор;
				
				Если ДоходКомитента > 0 Тогда
					СуммаДоходКомитента = ДоходКомитента * Курс/Кратность;
					СуммаКоррДоходовКомитента  = СуммаКоррДоходовКомитента + СуммаДоходКомитента;
					СтрокаРасшифровки.ДоходКомитента = СуммаДоходКомитента;
				КонецЕсли;
				
				// доходы по режимам с особым порядком налогообложения
				Если ДоходЕНВД > 0 Тогда
					ИсключитьНДСЕНВД     = ?(СобственнаяВыручка = 0,
											0,
											Окр(КоэффициентРасчетовПоНДС*СуммаНДСПоРеализации*ДоходЕНВД/СобственнаяВыручка, 2));
					СуммаКоррДоходов     = Окр(ДоходЕНВД * Курс/Кратность, 2) - ИсключитьНДСЕНВД;
					СуммаКоррДоходовЕНВД = СуммаКоррДоходовЕНВД + СуммаКоррДоходов;
					КУДиР.ДоходЕНВД      = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
					СтрокаРасшифровки.ДоходЕНВД = СуммаКоррДоходов;
				КонецЕсли;
				Если ДоходПатент > 0 Тогда
					ИсключитьНДСПатент     = ?(СобственнаяВыручка = 0,
												0,
												Окр(КоэффициентРасчетовПоНДС*СуммаНДСПоРеализации*ДоходПатент/СобственнаяВыручка, 2));
					СуммаКоррДоходов       = Окр(ДоходПатент * Курс/Кратность, 2) - ИсключитьНДСПатент;
					СуммаКоррДоходовПатент = СуммаКоррДоходовПатент + СуммаКоррДоходов;
					КУДиР.ДоходЕНВД        = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
					СтрокаРасшифровки.ДоходЕНВД   = СтрокаРасшифровки.ДоходЕНВД + СуммаКоррДоходов;
					СтрокаРасшифровки.ДоходПатент = СуммаКоррДоходов;
					
					Если ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
						ДокументСсылка = СтрокаПлатеж.РасчетныйДокумент;
						//Подменим ссылку если документ - реализация отгруженной продукции
						Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
							Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
								ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
							КонецЕсли;
						КонецЕсли;
						МетаданныеДокумента = ДокументСсылка.Метаданные();
						Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) 
							И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
							
							ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
							ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
							ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, СтруктураШапкиДокумента.Ссылка.Метаданные(), СтрокаПлатеж.ДоговорКонтрагента);
							ЗаписьКУДиРПатент.Графа4 = СуммаКоррДоходов;
							ЗаписьКУДиРПатент.Контрагент = СтрокаПлатеж.Контрагент;
							ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ВидОперации = "Доход" Тогда
		
		СодержаниеОперации = "";
		
		Если СуммаКоррДоходовНДС > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Предъявленный покупателям НДС в сумме "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовНДС, , , " ")
				+ " руб. исключен из доходов. ";
		КонецЕсли;
		Если ДоходыТорговыйСборВсего > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходыТорговыйСборВсего, , , " ")
				+ " руб. отнесена к деятельности на торговом сборе. ";
		КонецЕсли;
		Если СуммаНаЗакупкуДляКомитента > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНаЗакупкуДляКомитента, , , " ")
				+ " руб. определена как средства на закупку по договору комиссии. ";
		КонецЕсли;
		Если СуммаКоррДоходовКомитента > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовКомитента, , , " ")
				+ " руб. определена как выручка комитента. ";
		КонецЕсли;
		Если СуммаКоррДоходовЕНВД > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовЕНВД, , , " ")
				+ " руб. отнесена к деятельности ЕНВД. ";
		КонецЕсли;
		Если СуммаКоррДоходовПатент > 0 Тогда
			СодержаниеОперации = СодержаниеОперации + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовПатент, , , " ")
				+ " руб. отнесена к деятельности на патенте. ";
		КонецЕсли;
		Если (СуммаРасходовНаУслуги) > 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СодержаниеУслугиБанка = "Комиссия банка на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаРасходовНаУслуги, , , " ") + " руб. включена в расходы. ";
			СодержаниеОперации = СодержаниеОперации + СодержаниеУслугиБанка;
			КУДиР.Графа7 = КУДиР.Графа7 + СуммаРасходовНаУслуги;

			СтрокаРасшифровки = КУДиР.РасшифровкаПоДоговорам.Добавить();
			СтрокаРасшифровки.Контрагент = ТаблицаДвиженияВзаиморасчетов[0].Контрагент;
			СтрокаРасшифровки.ДоговорКонтрагента = ТаблицаДвиженияВзаиморасчетов[0].ДоговорКонтрагента;
			СтрокаРасшифровки.Графа7 = СуммаРасходовНаУслуги;
		КонецЕсли;
		
		ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
		
	КонецЕсли;

	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ (ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" ИЛИ ВидОперации = "Доход"))
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;

	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Статусы = Новый Массив;
	Если ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" Тогда
		УсловиеПоПолюРасходы = "РасчетныйДокумент";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);

		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		Фильтр.Условие			= "<>";

	ИначеЕсли ВидОперации = "Доход" Тогда
		УсловиеПоПолюРасходы = "Партия";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);

		ВидыРасходов = Новый Массив;
		ВидыРасходов.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля		= ВидыРасходов;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыПартийУСН";
		Фильтр.ЗначениеПоля		= Перечисления.СтатусыПартийУСН.Списанные;
		Фильтр.Условие			= "=";

		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
	КонецЕсли;

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
	Фильтр.ЗначениеПоля		= МассивУсловия;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(УсловиеПоПолюРасходы);

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");

	Если ВидОперации = "Доход" Тогда
		ТаблицаДвиженияВзаиморасчетов.Свернуть("РасчетныйДокумент, СчетУчета, ВалютаВзаиморасчетов, Курс, Кратность,
			|Контрагент, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах",
			"СуммаРуб, СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовПатент,
			|СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовТорговыйСбор, ОстатокВзаиморасчетов");
	КонецЕсли;
		
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПартии.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		КоэффРасчетов = ?(СтрокаПартии.ОстатокВзаиморасчетов = 0, 1, СтрокаПартии.СуммаВзаиморасчетов / СтрокаПартии.ОстатокВзаиморасчетов);
		СуммаОсталосьПогасить = СтрокаПартии.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ВидОперации = "Доход" Тогда

				//Исключим агентский НДС, зарегистрированный по тому же расчетному документу
				Если УсловиеПоПолюРасходы = "РасчетныйДокумент"
					И УсловиеПоПолюРасчеты = "РасчетныйДокумент"
					И Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
					Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
					Отказ = Ложь;
					ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Строка.РасчетныйДокумент.Дата) =
						Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
				Иначе
					ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
				КонецЕсли;

				Если ВыделятьНДСУСНДокумент И
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда

					СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
					КоэффРасчетов = СуммаСписания / (Строка.Сумма + Строка.НДС);
				Иначе
					СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
					КоэффРасчетов = СуммаСписания / (Строка.Сумма);
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если НЕ КоэффРасчетов = 1 Тогда
				НоваяСтрока.Сумма	 	= КоэффРасчетов*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= КоэффРасчетов*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= КоэффРасчетов*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = Новый Структура("Курс, Кратность", СтрокаПартии.Курс, СтрокаПартии.Кратность);

			Если НЕ ВидОперации = "Доход" Тогда
				Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
				Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
				Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ВидОперации = "ОплатаАО" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"РасчетныйДокумент");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка.ФизЛицо,"ДоговорКонтрагента");
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, Получатель = "Налог", ВидДвижения = Неопределено)
	
	Если ВидДвижения = Неопределено Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЕсли;

	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		КЗ = -1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Оплата";
	Иначе
		КЗ = +1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Доход";
	КонецЕсли;

	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Если Получатель = "ПодотчетноеЛицо" Тогда //Подотчетное лицо
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
		Фильтр.Условие			= "В";

	ИначеЕсли Получатель = "Работник" Тогда //Работник
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("Работник");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Фильтр.Условие			= "=";
		
	ИначеЕсли Получатель = "Договорник" Тогда //Сотрудник по ДГПХ
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("Работник");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;
		Фильтр.Условие			= "=";

	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

	ИначеЕсли Получатель = "НДСТаможенныйСоюз" Тогда
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "РасчетныйДокумент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;

	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	СтрокаИндекса = "";
	Если Получатель = "Налог" Тогда
		СтрокаИндекса = "СчетУчета";
	ИначеЕсли Получатель = "НДСТаможенныйСоюз" Тогда
		СтрокаИндекса = "РасчетныйДокумент";
	Иначе
		СтрокаИндекса = "Контрагент";
	КонецЕсли;

	ТаблицаПлатежей.Индексы.Добавить(СтрокаИндекса);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаОплат Цикл

		Если СтрокаПлатеж.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		Если Получатель = "Налог" Тогда
			СтруктураОтбора.Вставить("СчетУчета",  СтрокаПлатеж.ДоговорКонтрагента);
		ИначеЕсли Получатель = "НДСТаможенныйСоюз" Тогда
			СтруктураОтбора.Вставить("РасчетныйДокумент", СтрокаПлатеж.РасчетныйДокумент);
		ИначеЕсли Получатель = "Работник" или Получатель = "Договорник" Тогда
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.Работник);
		Иначе
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.ДоговорКонтрагента);
		КонецЕсли;

		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);

		Курс = 1;
		Кратность = 1;

		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтруктураКурса = Новый Структура("Курс, Кратность",Курс,Кратность);

		Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.Сумма*Курс/Кратность;
		ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + СтрокаПлатеж.Сумма*Курс/Кратность;
		КонецЕсли;

		// Сумма взаиморасчетов к погашению
		СуммаОсталосьПогасить = СтрокаПлатеж.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если КЗ*(Строка.Сумма)<= 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если КЗ*(Строка.Сумма) > СуммаСписания Тогда
				НоваяСтрока.Сумма = Мин(КЗ*(Строка.Сумма), СуммаСписания);
			Иначе
				НоваяСтрока.Сумма = КЗ*(Строка.Сумма);
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
		КонецЦикла;
		
		ЭтоФиксированныйВзносИП = (Получатель = "Налог"
			И УчетСтраховыхВзносовИП.ЭтоСчетУчетаСтраховыхВзносовИП(СтрокаПлатеж.ДоговорКонтрагента));
		
		Если СуммаОсталосьПогасить > 0 И Не ЭтоФиксированныйВзносИП Тогда
			Если Получатель = "Налог" Или Получатель = "НДСТаможенныйСоюз" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, СтрокаПлатеж.ДоговорКонтрагента, СуммаОсталосьПогасить);
			ИначеЕсли Получатель = "Работник" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.Работник, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);
			ИначеЕсли Получатель = "Договорник" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.Работник, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами, СуммаОсталосьПогасить);
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.ДоговорКонтрагента, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

	УсловиеПоПолюРасходы = "РасчетныйДокумент";
	УсловиеПоПолюРасчеты = "РасчетныйДокумент";

	МассивУсловияВрем = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	МассивУсловия = Новый Массив;
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);
	// Тип "Расчетного документа" должен быть прописан в типах измерения "Расчетный документ" регистра "РасходыПриУСН"
	// Если такого типа там нет, то документ в массив условий не добавлять, иначе будет ошибка при установке блокировки
	Для каждого ТекущийДокумент Из МассивУсловияВрем Цикл
		Если Метаданные.РегистрыНакопления.РасходыПриУСН.Измерения.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(ТекущийДокумент)) Тогда
			МассивУсловия.Добавить(ТекущийДокумент);
		КонецЕсли;
	КонецЦикла;
	Если МассивУсловия.Количество() > 0 Тогда
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = УсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля = МассивУсловия;
		Фильтр.Условие      = "В";
	КонецЕсли;

	ДопУсловиеПоПолюРасходы = "";
	Если Получатель = "Работник" ИЛИ Получатель = "Договорник" Тогда //Работник
		ДопУсловиеПоПолюРасходы = "ЭлементРасхода";
		ДопУсловиеПоПолюРасчеты = "Контрагент";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("Контрагент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДопМассивУсловия);
	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		ДопУсловиеПоПолюРасходы = "СчетУчета";
		ДопУсловиеПоПолюРасчеты = "СчетУчета";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДопМассивУсловия);
	КонецЕсли;

	Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= ДопУсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля		= ДопМассивУсловия;
		Фильтр.Условие			= "В";
	КонецЕслИ;

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(?(ДопУсловиеПоПолюРасходы = "", УсловиеПоПолюРасходы, УсловиеПоПолюРасходы + "," + ДопУсловиеПоПолюРасходы));

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПартии.РасчетныйДокумент =  СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);
		Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
			СтруктураОтбора.Вставить(ДопУсловиеПоПолюРасходы, СтрокаПартии[ДопУсловиеПоПолюРасчеты]);
		КонецЕсли;

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		СтруктураКурса = СтрокаПартии.СтруктураКурса;
		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПартии.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ВыделятьНДСУСН
				И Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС
				И Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА
				И Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НДС_ТС Тогда

				СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
				К = СуммаСписания / (Строка.Сумма + Строка.НДС);
			Иначе
				СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
				К = СуммаСписания / (Строка.Сумма);
			КонецЕсли;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если НЕ К = 1 Тогда
				НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;

			Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
			Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
			Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;

	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,, ДвиженияРегистров);

КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь)

	ТаблицаДвиженияВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();

	Для Каждого Строка Из ТаблицаДвиженияВзаиморасчетов Цикл

		// При обмене билета возможен зачет аванса с прежнего билета на новый.
		// В этом случае РасчетныйДокумент будет текущим документом. 
		ЭтоОбменБилета = (ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.ОперацияСБилетом")) 
			И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСБилетами.Обмен;
		
		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка И Не ЭтоОбменБилета Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаСписания = Строка.СуммаВзаиморасчетов;

		//Проверка оплаты авансового отчета
		Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

			//Формирование таблицы фильтров
			ТаблицаФильтров = Новый ТаблицаЗначений;
			ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			ТаблицаФильтров.Колонки.Добавить("Условие");

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля			= "РасчетныйДокумент";
			Фильтр.ЗначениеПоля		= Строка.РасчетныйДокумент;
			Фильтр.Условие			= "=";

			ТаблицаРасчетовАО = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

			Если ТаблицаРасчетовАО.Итог("Сумма") < 0 Тогда
				НеОплаченоПодотчетномуЛицу = Мин(Строка.СуммаВзаиморасчетов, -(ТаблицаРасчетовАО.Итог("Сумма")));
				Для Каждого ЗаписьПоАО Из ТаблицаРасчетовАО Цикл
					Если НеОплаченоПодотчетномуЛицу <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если ЗаписьПоАО.Сумма > 0 Тогда
						Продолжить;
					КонецЕсли;
					КорректировкаПоАО 		   = Мин(-ЗаписьПоАО.Сумма, НеОплаченоПодотчетномуЛицу);
					НеОплаченоПодотчетномуЛицу = НеОплаченоПодотчетномуЛицу - КорректировкаПоАО;
					СуммаСписания 			   = СуммаСписания - КорректировкаПоАО;

					Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
						ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
					КонецЕсли;
					ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, СтруктураШапкиДокумента.Ссылка),1), "СтруктураКурса");
					ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, КорректировкаПоАО, "КорректировкаПоАО",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);
				КонецЦикла;
				Если СуммаСписания = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;

		ДокументДляКурсаВалюты = ?(Договор.РасчетыВУсловныхЕдиницах, Строка.РасчетныйДокумент, СтруктураШапкиДокумента.Ссылка);
		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность", ОпределитьКурсПоДокументу(Договор, Неопределено, ДокументДляКурсаВалюты), 1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);

	КонецЦикла;

	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь) Экспорт

	КЗ = 1; //Коэффициент знака взаиморасчетов (+1 или -1)

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();

	Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";
	Иначе
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
		Фильтр.Условие			= "В";
	КонецЕсли;

	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	СуммаРегл = 0;
	СуммаОсталосьПогасить = СуммаДокумента;
	СтрокаРеквизитовПлДок = "";
	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();

	Для Каждого Строка Из ТаблицаПлатежей Цикл
		Если СуммаОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли;
		Если КЗ*(Строка.Сумма)<= 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
		СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

		НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.Сумма = СуммаСписания;

		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;

		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, СтруктураШапкиДокумента.Ссылка),1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);

	КонецЦикла;

	Если СуммаОсталосьПогасить > 0 Тогда
		Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Договор, СуммаОсталосьПогасить);
		Иначе
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Договор, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
		КонецЕслИ;
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, 0, "Оплата",, СтруктураШапкиДокумента.Ссылка, ИтоговаяСтруктура);
	КонецЕсли;

	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;

	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, ТаблицаДвиженияВзаиморасчетов, , ДвиженияРегистров);

КонецПроцедуры

//Отражение расходов на билеты для командировок
//СтруктураДопПараметров должна содержать свойство "ТаблицаБилетов"
Процедура РасходыНаБилетыВУСН(СтруктураШапкиДокумента, СтруктураДопПараметров, ДвиженияРегистров)
	
	ТаблицаБилетов = СтруктураДопПараметров.ТаблицаБилетов;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаБилетов) Тогда
		Возврат;
	КонецЕсли;	
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();

	Фильтр.ИмяПоля		= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= ТаблицаБилетов.ВыгрузитьКолонку("Билет");
	Фильтр.Условие 		= "В";

	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаБилетов.Скопировать(, "Билет");
	ТаблицаБлокировок.Колонки.Билет.Имя = "ЭлементРасхода";
	
	МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода");
	
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "РасходыНаБилеты", Ложь);
		
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, , , ДвиженияРегистров);
		
КонецПроцедуры

//Отражение возврата билетов для командировок
//СтруктураДопПараметров должна содержать свойство "ТаблицаБилетов"
Процедура ВозвратБилетовУСН(СтруктураШапкиДокумента, СтруктураДопПараметров, ДвиженияРегистров)

	ТаблицаБилетов = СтруктураДопПараметров.ТаблицаБилетов;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаБилетов) Тогда
		Возврат;
	КонецЕсли;	

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();

	Фильтр.ИмяПоля		= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= ТаблицаБилетов.ВыгрузитьКолонку("Билет");
	Фильтр.Условие 		= "В";
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаБилетов.Скопировать(, "Билет");
	ТаблицаБлокировок.Колонки.Билет.Имя = "ЭлементРасхода";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();

	// Заполняем таблицу отменяемых расходов по таблице возврата билетов и остаткам расходов
	Для Каждого СтрокаБилета Из ТаблицаБилетов Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода", СтрокаБилета.Билет);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащая погашению при списании сумма
		СуммаОсталосьПогасить = СтрокаБилета.Сумма;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если Строка.Сумма > СуммаСписания Тогда
				НоваяСтрока.НДС   = Окр(НоваяСтрока.НДС * СуммаСписания / НоваяСтрока.Сумма, 3);
				НоваяСтрока.Сумма = СуммаСписания;
			КонецЕсли;	
				
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;
	
	// Подготовим таблицы движений в нужном формате. Для этого используем общую функцию, но на вход передаем пустой вид операции, 
	// т.к. нам требуется только ТаблицаРасход (см. СобратьТаблицыДвижений()) - новый статус расходов при возврате билета не устаналивается.
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "", Ложь);
	// Приход по расходам - "побочный продукт", эти движения не нужны
	ТаблицыДвижений.ТаблицаПриход.Очистить();
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

Процедура НачислениеНДСТаможенногоСоюза(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров)

	Если Не ЗначениеЗаполнено(ТаблицаПрихода) Тогда
		// нет расходов по НДС, принимаемых по мере реализации товаров
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПрихода, "ЭлементРасхода", Истина);
	МассивПартий       = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПрихода, "Партия", Истина);
	ДатыПартий         = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПартий, "Дата");
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПрихода.Скопировать(, "ЭлементРасхода, Партия");

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Номенклатура;
	Фильтр.Условие      = "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Купленные;
	Фильтр.Условие      = "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ЭлементРасхода";
	Фильтр.ЗначениеПоля = МассивНоменклатуры;
	Фильтр.Условие      = "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля	    = "Партия";
	Фильтр.ЗначениеПоля = МассивПартий;
	Фильтр.Условие      = "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля = Статусы;
	Фильтр.Условие      = "В";

	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);

	// Остатки несписанных расходов по партиям и номенклатуре "Заявления"
	ОстаткиРасходов = ТаблицаРасходов.Скопировать(, "ЭлементРасхода, Партия, ПартияДата, Количество");
	ОстаткиРасходов.Свернуть("ЭлементРасхода, Партия, ПартияДата", "Количество");
	
	// Таблица списанных расходов за период с даты партии по дату "Заявления"
	СписанныеРасходы = ТаблицаРасходов.СкопироватьКолонки();
	
	// Получим количество списанных расходов за период с даты партии по дату "Заявления"
	ДатаПервойПартии = СтруктураШапкиДокумента.Дата + 1;
	
	Для каждого СтрокаПрихода Из ТаблицаПрихода Цикл
		Отбор = Новый Структура("ЭлементРасхода, Партия", СтрокаПрихода.ЭлементРасхода, СтрокаПрихода.Партия);
		СтрокиОстатков = ОстаткиРасходов.НайтиСтроки(Отбор);
		Если СтрокиОстатков.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатков[0];
			Если СтрокаПрихода.Количество > СтрокаОстатка.Количество Тогда
				
				СтрокаСписано = СписанныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписано, СтрокаПрихода,, "Количество");
				СтрокаСписано.Количество = СтрокаПрихода.Количество - СтрокаОстатка.Количество;
				
				К = СтрокаСписано.Количество / СтрокаПрихода.Количество;
				СтрокаСписано.Сумма = Окр(К*СтрокаСписано.Сумма, 3, 1);
				СтрокаСписано.НДС   = Окр(К*СтрокаСписано.НДС,   3, 1);
				
				СтрокаСписано.ПартияДата = ДатыПартий[СтрокаСписано.Партия];
				Если СтрокаСписано.ПартияДата < ДатаПервойПартии Тогда
					ДатаПервойПартии = СтрокаСписано.ПартияДата;
				КонецЕсли;
				
			КонецЕсли;
		Иначе // остатка нет, вся партия списана
			СтрокаСписано = СписанныеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСписано, СтрокаПрихода);
			СтрокаСписано.ПартияДата = ДатыПартий[СтрокаСписано.Партия];
			Если СтрокаСписано.ПартияДата < ДатаПервойПартии Тогда
				ДатаПервойПартии = СтрокаСписано.ПартияДата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписанныеРасходы.Количество() = 0 Или ДатаПервойПартии > СтруктураШапкиДокумента.Дата Тогда
		// расходы из партий, указанных в Заявлении, не списывались
		Возврат;
	КонецЕсли;
	
	// Из движений списания расходов за период получим только принимаемые.
	// По принимаемому списанию переквалификацию НДС производим также в принимаемое состояние,
	// оставшееся количество считаем списанным как непринимаемые расходы,
	// и НДС пропорционально этому количеству также отражаем как непринимаемый расход
	
	СтатусыСписания = Новый Массив;
	СтатусыСписания.Добавить(Перечисления.ОтражениеВУСН.Принимаются);
	СтатусыСписания.Добавить(Перечисления.ОтражениеВУСН.Распределяются);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПервойПартии", ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаЗаявления",    СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Статусы",          Статусы);
	Запрос.УстановитьПараметр("Партии",           ОбщегоНазначения.ВыгрузитьКолонку(СписанныеРасходы, "Партия"));
	Запрос.УстановитьПараметр("ЭлементыРасхода",  ОбщегоНазначения.ВыгрузитьКолонку(СписанныеРасходы, "ЭлементРасхода"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.Период КАК Период,
	|	РасходыПриУСН.СтатусыОплатыРасходовУСН,
	|	РасходыПриУСН.РасчетныйДокумент,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.ВидРасхода,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.СтатусыПартийУСН,
	|	РасходыПриУСН.ОтражениеВУСН,
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.Период МЕЖДУ &ДатаПервойПартии И &ДатаЗаявления
	|	И РасходыПриУСН.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.СтатусыОплатыРасходовУСН В(&Статусы)
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ВидРасхода = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура)
	|	И РасходыПриУСН.ЭлементРасхода В(&ЭлементыРасхода)
	|	И РасходыПриУСН.СтатусыПартийУСН = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные)
	|	И РасходыПриУСН.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются)
	|	И РасходыПриУСН.СтатусСписания В (ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются), ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Распределяются))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусыОплатыРасходовУСН,
	|	РасходыПриУСН.РасчетныйДокумент,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.ВидРасхода,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.СтатусыПартийУСН,
	|	РасходыПриУСН.ОтражениеВУСН,
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	;
	
	СписанныеПринимаемыеРасходы = Запрос.Выполнить().Выгрузить();
	СписанныеПринимаемыеРасходы.Индексы.Добавить("ЭлементРасхода, Партия");
	
	// таблица для переквалификации расходов по списанным партиям
	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	
	Для каждого СтрокаРасхода Из СписанныеРасходы Цикл
		
		КоличествоДляСписания = СтрокаРасхода.Количество;
		
		Отбор = Новый Структура("ЭлементРасхода, Партия", СтрокаРасхода.ЭлементРасхода, СтрокаРасхода.Партия);
		СтрокиПринятыхРасходов = СписанныеПринимаемыеРасходы.НайтиСтроки(Отбор);
		
		Для каждого СтрокаПринятогоРасхода Из СтрокиПринятыхРасходов Цикл
			
			Если КоличествоДляСписания <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаПринятогоРасхода.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СписатьКоличество = Мин(СтрокаПринятогоРасхода.Количество, КоличествоДляСписания);
			
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
			
			НоваяСтрока.Количество = СписатьКоличество;
			
			НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(СтрокаРасхода.ОтражениеВУСН, СтрокаПринятогоРасхода.СтатусСписания);
			НоваяСтрока.СтатусСписания = НовыйСтатус;
			НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
			
			Если НоваяСтрока.Количество < СтрокаРасхода.Количество Тогда
				К = НоваяСтрока.Количество / СтрокаРасхода.Количество;
				НоваяСтрока.Сумма = Окр(К*НоваяСтрока.Сумма, 3, 1);
				НоваяСтрока.НДС   = Окр(К*НоваяСтрока.НДС,   3, 1);
			КонецЕсли;
			
			СтрокаПринятогоРасхода.Количество = СтрокаПринятогоРасхода.Количество - СписатьКоличество;
			КоличествоДляСписания             = КоличествоДляСписания - СписатьКоличество;
			
		КонецЦикла;
		
		Если КоличествоДляСписания > 0 Тогда
			// Часть партии была списана как непринимаемые расходы
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
			
			НоваяСтрока.Количество = КоличествоДляСписания;
			
			НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
			НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
			
			Если НоваяСтрока.Количество < СтрокаРасхода.Количество Тогда
				К = НоваяСтрока.Количество / СтрокаРасхода.Количество;
				НоваяСтрока.Сумма = Окр(К*НоваяСтрока.Сумма, 3, 1);
				НоваяСтрока.НДС   = Окр(К*НоваяСтрока.НДС,   3, 1);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания,, "Реализация", Ложь);
	ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);

КонецПроцедуры

Процедура ОтражениеТаможенныхРасходовУСН(СтруктураШапкиДокумента, ТаблицаАвансов = Неопределено, ТаблицаДвижений, ДвиженияРегистров)

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();
	ТаблицаРасходов.Колонки.Добавить("ЭтоТаможенныйНДС", Новый ОписаниеТипов("Булево"));
	
	ЕстьРасходыВВалюте = ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов)
		И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Если ЕстьРасходыВВалюте И ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("СтруктураКурса", Новый ОписаниеТипов("Структура"));
		ТаблицаРасходов.ЗаполнитьЗначения(
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата),
			"СтруктураКурса");
	КонецЕсли;
	
	ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "Оплата", Ложь, СтруктураШапкиДокумента.Ссылка, ИтоговаяСтруктура);
	
	ВыделитьТаможенныйНДСВПринятыхРасходах(ИтоговаяСтруктура);
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);

КонецПроцедуры

Процедура КорректировкаРеализацииУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаВозврат, ТаблицаРасходыУСНПоСделке, ДвиженияРегистровВх)
	
	Перем КэшКурсовВалют;
	
	Если ТаблицаВозврат = Неопределено ИЛИ ТаблицаВозврат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКорректировкаПрошлогоПериода = РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода;
	
	// параметры учетной политики на дату корректировки
	ПорядокПризнанияРасходовПоНДС           = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПорядокПризнанияРасходовПоТоварам       = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПорядокПризнанияМатериальныхРасходов    = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	// параметры учетной политики на дату реализации
	ПорядокПризнанияРасходовПоНДСРеализация        = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	ПорядокПризнанияРасходовПоТоварамРеализация    = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	ПорядокПризнанияМатериальныхРасходовРеализация = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	
	ВыделятьНДСУСН           = (ПорядокПризнанияРасходовПоНДС           = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	ВыделятьНДСУСНРеализация = (ПорядокПризнанияРасходовПоНДСРеализация = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТоварыПоОплате    = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	ТоварыПоОтгрузке  = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	
	ТоварыПоОплатеРеализация    = (ПорядокПризнанияРасходовПоТоварамРеализация    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	ТоварыПоОтгрузкеРеализация  = (ПорядокПризнанияРасходовПоТоварамРеализация    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплатеРеализация = (ПорядокПризнанияМатериальныхРасходовРеализация = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсВалютыРеглУчета = Новый Структура("Валюта, Курс, Кратность", ВалютаРеглУчета, 1, 1);
	
	// Подготовить пустые таблицы для формирования движений
	НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
	ТаблицаДвиженийРасходов = НаборЗаписей.ВыгрузитьКолонки();
	// Добавить обязательные колонки
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоМатериал", Новый ОписаниеТипов("Булево"));
	
	ТаблицаКорректировкиКУДиР = ТаблицаДвиженийРасходов.Скопировать();
	ТаблицаКорректировкиКУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаКорректировкиКУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));

	// Добавим в партии информацию об изменении ОтражениеВУСН
	НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаВозврат, "Реализация");

	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаВозврат, "Номенклатура", Истина);
	
	ВидыРасхода = Новый Массив;
	ВидыРасхода.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);
	ВидыРасхода.Добавить(Перечисления.ВидыРасходовУСН.НДС_ТС);
	
	// Формирование таблицы фильтров
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = ВидыРасхода;
	Фильтр.Условие      = "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Списанные;
	Фильтр.Условие      = "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ЭлементРасхода";
	Фильтр.ЗначениеПоля = МассивНоменклатуры;
	Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "Партия";
	Фильтр.ЗначениеПоля = РеквизитыКорректировки.ДокументРеализацииСсылка;
	Фильтр.Условие      = "=";

	// Из остатков расходов выбираем соответствующие партии и элементы расходов
	ТаблицаОстатковРасходов = ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(
		СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров, , ЭтоКорректировкаПрошлогоПериода);

	ТаблицаВозврат.Индексы.Добавить("Номенклатура");
	ТаблицаРасходыУСНПоСделке.Индексы.Добавить("ВидРасхода, ЭлементРасхода, Партия");
	ТаблицаОстатковРасходов.Индексы.Добавить("ВидРасхода, ЭлементРасхода");

	// Цикл по видам расхода (для себестоимости номенклатуры и для расходов по НДС Таможенного союза)
	Для каждого ВидРасхода Из ВидыРасхода Цикл
		
		// Таблица возвращенных партий для итеративного списания по виду расхода
		ТаблицаПартий = ТаблицаВозврат.Скопировать();
		
		Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
			
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;

			СтатусСписания = СтрокаПартии.СтатусСписания;

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода", ВидРасхода);
			СтруктураОтбора.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);

			СтруктураОтбораПоПартиям = Новый Структура;
			СтруктураОтбораПоПартиям.Вставить("ВидРасхода", ВидРасхода);
			СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода", СтрокаПартии.Номенклатура);
			СтруктураОтбораПоПартиям.Вставить("Партия",         СтрокаПартии.Партия);

			НайденныеСтрокиСписано = ТаблицаРасходыУСНПоСделке.НайтиСтроки(СтруктураОтбораПоПартиям);
			НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);

			// 1. Изменяем статусы текущих остатков расходов
			КоличествоОсталосьСписатьРасход = СтрокаПартии.Количество;;
			Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
				Если НЕ СтрокаСписания.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ КоличествоОсталосьСписатьРасход > 0 Тогда
						Прервать;
					КонецЕсли;
					Если НЕ СтрокаОстатка.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;

					КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество, СтрокаОстатка.Количество);
					Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
					//Добавить строки поступления по расходам
					НоваяСтрокаРасход = ТаблицаДвиженийРасходов.Добавить();
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();

					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаОстатка);

					НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрокаПриход.СтатусыПартийУСН  = СтрокаСписания.СтатусыПартийУСН;
					НоваяСтрокаПриход.Партия            = СтрокаСписания.Партия;
					Если (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							ИЛИ (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН  = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН   = Перечисления.СтатусыРасходовУСН.НеСписано;
					Иначе
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
					КонецЕсли;
					//Движение расход
					НоваяСтрокаРасход.Сумма      = Коэфф*СтрокаОстатка.Сумма;
					НоваяСтрокаРасход.НДС        = Коэфф*СтрокаОстатка.НДС;
					НоваяСтрокаРасход.Количество = КоличествоСписатьРасход;
					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф * СтрокаОстатка.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф * СтрокаОстатка.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					СтрокаОстатка.Количество = СтрокаОстатка.Количество - НоваяСтрокаПриход.Количество;
					СтрокаОстатка.Сумма      = СтрокаОстатка.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаОстатка.НДС        = СтрокаОстатка.НДС - НоваяСтрокаПриход.НДС;
					// если корректировка прошлого года - учтем в остатках на начало года количество возврата, уже распределенное на текущие остатки
					Если ЭтоКорректировкаПрошлогоПериода Тогда
						СтрокаОстатка.КоличествоНачалоГода = СтрокаОстатка.КоличествоНачалоГода - НоваяСтрокаПриход.Количество;
						СтрокаОстатка.СуммаНачалоГода      = СтрокаОстатка.СуммаНачалоГода - НоваяСтрокаПриход.Сумма;
						СтрокаОстатка.НДСНачалоГода        = СтрокаОстатка.НДСНачалоГода - НоваяСтрокаПриход.НДС;
					КонецЕсли;
					
					Если (РеквизитыКорректировки.Период >= Дата("20060101"))
							И (ТоварыПоОтгрузке)
							И (НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.Сумма,
							КурсВалюты,
							КурсВалютыРеглУчета);
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Сумма = - СуммаСторноРасходов;
						НоваяСтрокаКУДиР.НДС = - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						
					ИначеЕсли (ВыделятьНДСУСН)
							И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации.";
						
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;

			// 2. Если количество к возврату не распределено полностью на текущие остатки расходов - 
			//    отражаем приход из ранее принятых расходов в текущем периоде, сторнируя сумму принятых в КУДиР
			Если КоличествоОсталосьСписатьРасход > 0 Тогда
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// если корректируется прошлый период - на текущем этапе приходуем только списанные (признанные) расходы текущего периода;
					// корректировка КУДиР также производится в текущем периоде
					КоличествоСписатьРасходТекущегоПериода = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество);
					
					Если ЭтоКорректировкаПрошлогоПериода Тогда
						КоличествоПризнаноТекущийПериод = 0;
						Для каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
							КоличествоПризнаноТекущийПериод = КоличествоПризнаноТекущийПериод + СтрокаОстатка.КоличествоНачалоГода;
						КонецЦикла;
						КоличествоСписатьРасходТекущегоПериода = Мин(КоличествоПризнаноТекущийПериод, КоличествоСписатьРасходТекущегоПериода);
					КонецЕсли;
					
					Если НЕ КоличествоСписатьРасходТекущегоПериода > 0 Тогда
						// в текущем периоде расходы по данной строке списания не признавались
						Продолжить;
					КонецЕсли;
					
					Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасходТекущегоПериода/СтрокаСписания.Количество);

					//Добавить строки поступления по расходам
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаСписания);
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;

					//Определим сумму сторнируемых расходов
					ЭтоТовар	= СтрокаСписания.ЭтоТовар;
					ЭтоМатериал	= СтрокаСписания.ЭтоМатериал;
					
					РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
				
					Если (РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					Иначе
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					КонецЕсли;

					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасходТекущегоПериода;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасходТекущегоПериода;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
						НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
					КонецЕсли;

					// сторнируем расходы в КУДиР текущим периодом
					
					Если (НЕ РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.Сумма,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Количество = 0;
						НоваяСтрокаКУДиР.Сумма = - СуммаСторноРасходов;
						НоваяСтрокаКУДиР.НДС = - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						
					ИначеЕсли (ВыделятьНДСУСН)
						И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
						И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
						И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации.";
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// 3. Если количество к возврату не распределено полностью на текущие остатки расходов, и на расходы, признанные в текущем периоде:
			//    отражаем приход из ранее принятых расходов прошлого периода, сторнируя сумму принятых в КУДиР датой окончания корректируемого года
			Если ЭтоКорректировкаПрошлогоПериода И КоличествоОсталосьСписатьРасход > 0 Тогда
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСписатьРасходПрошлогоПериода = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество); 
					
					Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасходПрошлогоПериода/СтрокаСписания.Количество);

					//Добавить строки поступления по расходам
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаСписания);
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
 
					Если НЕ НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					КонецЕсли;

					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасходПрошлогоПериода;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасходПрошлогоПериода;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
						НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
					КонецЕсли;

					// сторнируем расходы в КУДиР датой окончания прошлого периода
					Если (НЕ НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, КонецГода(РеквизитыКорректировки.ДокументРеализацииДата), КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.Сумма,
							КурсВалюты,
							КурсВалютыРеглУчета);
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда // вернем обратно сумму НДС в расход
							СуммаСторноРасходов = СуммаСторноРасходов + СуммаСторноНДС;
						КонецЕсли;
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Количество = 0;
						НоваяСтрокаКУДиР.Сумма = - СуммаСторноРасходов;
						НоваяСтрокаКУДиР.НДС = - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументРеализацииДата);
					
					ИначеЕсли (ВыделятьНДСУСНРеализация)
						И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
						И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
						И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							НоваяСтрокаПриход.НДС,
							КурсВалюты,
							КурсВалютыРеглУчета);
						
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Валюта = ВалютаРеглУчета;
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период; // признание НДС делаем текущей датой
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации."
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	//Недостающие поля.
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Организация, "Организация");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Период, "Период");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Регистратор, "Регистратор");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");
	
	// Соберем таблицы движений
	Если ДвиженияРегистровВх.Свойство("РасходыУСН") Тогда
		Для каждого СтрокаДвижения Из ТаблицаДвиженийРасходов Цикл
			НоваяСтрокаДвижений = ДвиженияРегистровВх.РасходыУСН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижений, СтрокаДвижения);
		КонецЦикла;
	Иначе
		ДвиженияРегистровВх.Вставить("РасходыУСН", ТаблицаДвиженийРасходов);
	КонецЕсли;

	Если ДвиженияРегистровВх.Свойство("КУДиР") Тогда
		ДвиженияКУДиР = ДвиженияРегистровВх.КУДиР;
		Если ДвиженияКУДиР.Колонки.Найти("ДатаКорректировки") = Неопределено Тогда
			ДвиженияКУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		КонецЕсли;
		Если ДвиженияКУДиР.Колонки.Найти("ДополнительноеОписание") = Неопределено Тогда
			ДвиженияКУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
		КонецЕсли; 
		Для каждого СтрокаДвижения Из ТаблицаКорректировкиКУДиР Цикл
			НоваяСтрокаДвижений = ДвиженияКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижений, СтрокаДвижения);
		КонецЦикла;
	Иначе
		ДвиженияРегистровВх.Вставить("КУДиР", ТаблицаКорректировкиКУДиР);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеРозничнойВыручкиУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияКУДиРПатент, Выручка, КУДиР, СтруктураДопПараметров, ДоговорДляОтложенногоПроведения = Неопределено)

	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ЕстьПатентВДокументе = ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента);
	
	Если ЕстьПатентВДокументе Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад, Патент");
		Выручка.Вставить("ПатентСсылка", РеквизитыДокумента.Патент);
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		
		Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			
			// При учете в НТТ в ценах продажи документом "Отчет о розничных продажах" отражаются только продажи товаров и услуг комитентов
			// Ранее признанную доходами выручку необходимо отсторнировать в КУДиР
			
			ДвиженияПрочихРасчетов	 = Неопределено;
			ТаблицаОплаченнойВыручки = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаРасчетов", ДвиженияПрочихРасчетов);
			СтруктураДопПараметров.Свойство("ТаблицаОплаченнойВыручки", ТаблицаОплаченнойВыручки);
			
			// выделяем безналичную оплату
			Если ДвиженияПрочихРасчетов <> Неопределено И ДвиженияПрочихРасчетов.Количество() > 0 Тогда
				ОтборДвижений = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
				НеоплаченныеРасчеты = ДвиженияПрочихРасчетов.Скопировать(ОтборДвижений);
				ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, НеоплаченныеРасчеты, Выручка);
			КонецЕсли;
			
			// Распределяем выручку, приходящуюся на доходы комитента, по оплаченной выручке
			Если Выручка.Комиссия > 0 Тогда
				
				Если ТаблицаОплаченнойВыручки <> Неопределено И ТаблицаОплаченнойВыручки.Количество() > 0 Тогда
					
					ТаблицаОплаченнойВыручки.Свернуть("Патент", "СуммаРуб, СуммаРубЕНВД, СуммаРубКомитент, СуммаРубПатент, СуммаРубТорговыйСбор");
					
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноВсего", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноЕНВД", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноКомиссия", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноПатент", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноТорговыйСбор", Новый ОписаниеТипов("Число"));
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						Выручка.Комиссия, ТаблицаОплаченнойВыручки,"СторноВсего", "СуммаРуб");
						
					// распределяем отражение в НУ
					Для каждого СтрокаВыручки Из ТаблицаОплаченнойВыручки Цикл
						КоэффициентРаспределения = ?(СтрокаВыручки.СуммаРуб = 0, 0, СтрокаВыручки.СторноВсего/СтрокаВыручки.СуммаРуб);
						СтрокаВыручки.СторноЕНВД         = СтрокаВыручки.СуммаРубЕНВД * КоэффициентРаспределения;
						СтрокаВыручки.СторноПатент       = СтрокаВыручки.СуммаРубПатент * КоэффициентРаспределения;
						СтрокаВыручки.СторноТорговыйСбор = СтрокаВыручки.СуммаРубТорговыйСбор * КоэффициентРаспределения;
					КонецЦикла;
					
					СторноЕНВД         = Окр(ТаблицаОплаченнойВыручки.Итог("СторноЕНВД"), 2);
					СторноПатент       = Окр(ТаблицаОплаченнойВыручки.Итог("СторноПатент"), 2);
					СторноТорговыйСбор = Окр(ТаблицаОплаченнойВыручки.Итог("СторноТорговыйСбор"), 2);
					// Доходы по деятельности на торговом сборе учитываются в составе доходов УСН и на их корректировку не влияют
					СторноУСН          = Выручка.Комиссия - СторноЕНВД - СторноПатент;
					
					// Сторно выручки, отраженной ранее в доходах
					ПояснениеОперации = "";
					Если СторноУСН > 0 Тогда
						ПояснениеОперации = ПояснениеОперации + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноУСН, , , " ") + " руб. отнесена к доходам комитента. ";
						КУДиР.Графа5 = КУДиР.Графа5 - СторноУСН;
					КонецЕсли;
					Если СторноЕНВД > 0 Тогда
						ПояснениеОперации = ПояснениеОперации + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноЕНВД, , , " ") + " руб. определена как не относящаяся к деятельности ЕНВД. ";
						КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СторноЕНВД;
					КонецЕсли;
					Если СторноПатент > 0 Тогда
						ПояснениеОперации = ПояснениеОперации + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноПатент, , , " ")
							+ " руб. определена как не относящаяся к деятельности на патенте. ";
						КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СторноПатент;
					КонецЕсли;
					Если СторноТорговыйСбор > 0 Тогда
						ПояснениеОперации = ПояснениеОперации + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноТорговыйСбор, , , " ")
							+ " руб. исключена из доходов по деятельности на торговом сборе. ";
						КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор - СторноТорговыйСбор;
					КонецЕсли;
					
					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеОперации);
					
					// сторнируем доходы, отраженные по патентам
					Для каждого СтрокаВыручки Из ТаблицаОплаченнойВыручки Цикл
						Если СтрокаВыручки.СторноПатент > 0 И ЗначениеЗаполнено(СтрокаВыручки.Патент) Тогда
							ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
							ЗаписьКУДиРПатент.Патент = СтрокаВыручки.Патент;
							ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
							ЗаписьКУДиРПатент.Содержание = ЗаписьКУДиРПатент.Содержание + "Ранее отраженная в доходах выручка отнесена к доходам комитента. ";
							ЗаписьКУДиРПатент.Графа4 = - СтрокаВыручки.СторноПатент;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // учет в рознице в ценах покупки
			
			ДвиженияПрочихРасчетов = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаРасчетов", ДвиженияПрочихРасчетов);
			
			Если ЗначениеЗаполнено(ДвиженияПрочихРасчетов) И ДвиженияПрочихРасчетов.Количество() > 0 Тогда
				
				ОтборДвижений = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
				НеоплаченныеРасчеты = ДвиженияПрочихРасчетов.Скопировать(ОтборДвижений);
				
				ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, НеоплаченныеРасчеты, Выручка);
				
			КонецЕсли;
			
			ПрименениеСпецрежимов = ПрименениеОсобыхРежимовНалогообложения(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
				СтруктураШапкиДокумента.Организация,
				РеквизитыДокумента.Склад,
				СтруктураШапкиДокумента.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД",
					УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
			
			ОсобыйПорядокНалогообложения = (ПрименениеСпецрежимов.ЕНВД Или ПрименениеСпецрежимов.Патент)
				И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
			
			ПояснениеОперации = "";
			
			Если ОсобыйПорядокНалогообложения Тогда
				ДоходУСН = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия - Выручка.Патент;
				Если ДоходУСН > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходУСН, , , " ")
						+ " руб. определена как доходы от реализации. ";
					КУДиР.Графа5    = КУДиР.Графа5 + ДоходУСН;
					КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - ДоходУСН;
				КонецЕсли;
				Если Выручка.Комиссия > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Комиссия, , , " ")
						+ " руб. определена как выручка комитента. ";
					КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - Выручка.Комиссия;
				КонецЕсли;
			Иначе
				КУДиР.Графа5 = КУДиР.Графа5  - Выручка.ЕНВД - Выручка.Комиссия - Выручка.Патент;
				Если Выручка.Комиссия > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Комиссия, , , " ")
						+ " руб. определена как выручка комитента. ";
				КонецЕсли;
				Если Выручка.Патент > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Патент, , , " ")
						+ " руб. отнесена к деятельности на патенте. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.Патент;
				КонецЕсли;
				Если Выручка.ЕНВД > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.ЕНВД, , , " ")
						+ " руб. отнесена к деятельности ЕНВД. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.ЕНВД;
				КонецЕсли;
				Если Выручка.ТорговыйСбор > 0 Тогда
					ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.ТорговыйСбор, , , " ")
						+ " руб. отнесена к деятельности на торговом сборе. ";
					КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + Выручка.ТорговыйСбор;
				КонецЕсли;
			КонецЕсли;
			
			ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеОперации);
			
			Если Выручка.Патент > 0
				И ЕстьПатентВДокументе
				И ЗначениеЗаполнено(РеквизитыДокумента.Патент) Тогда
				
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = РеквизитыДокумента.Патент;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = Выручка.Патент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // АТТ
	
		БезналичныеОплаты = Неопределено;
		Если СтруктураДопПараметров.Свойство("БезналичныеОплаты", БезналичныеОплаты)
			И ЗначениеЗаполнено(БезналичныеОплаты) Тогда
			
			// зачет авансов по принятым в оплату сертификатам
			РозничнаяВыручкаЗачетАвансов(СтруктураШапкиДокумента, БезналичныеОплаты, ДвиженияКУДиРПатент, КУДиР, Выручка, ДоговорДляОтложенногоПроведения);
			
			// исключение безналичной части выручки из признаваемых доходов
			ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, БезналичныеОплаты, Выручка);
			
		КонецЕсли;
		
		ТаблицаВыручка = Неопределено;
		Если НЕ Выручка.Свойство("ТаблицаВыручка", ТаблицаВыручка) Тогда
			ТаблицаВыручка = НоваяТаблицаВыручки();
			СтрокаВыручка  = ТаблицаВыручка.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВыручка, Выручка);
		КонецЕсли;
		
		Для Каждого СтрокаВыручка Из ТаблицаВыручка Цикл
		
			Если ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения) Тогда
				// При актуализации отложенных расчетов движения формируем только по тому договору,
				// который сейчас обрабатывается.
				Если СтрокаВыручка.ДоговорКонтрагента <> ДоговорДляОтложенногоПроведения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			// Строка расшифровки для наличной оплаты
			СтрокаРасшифровки = КУДиР.РасшифровкаПоДоговорам.Добавить();
			СтрокаРасшифровки.Контрагент         = СтрокаВыручка.Контрагент;
			СтрокаРасшифровки.ДоговорКонтрагента = СтрокаВыручка.ДоговорКонтрагента;
			СтрокаРасшифровки.ТипОплаты          = Перечисления.ТипыОплат.Наличные;
			
			КУДиР.Графа4 = КУДиР.Графа4 + СтрокаВыручка.Всего;
			СтрокаРасшифровки.Графа4 = СтрокаРасшифровки.Графа4 + СтрокаВыручка.Всего;
			
			СуммаКоррДоходов = СтрокаВыручка.Всего - СтрокаВыручка.ЕНВД - СтрокаВыручка.Комиссия - СтрокаВыручка.Патент;
			КУДиР.Графа5 = КУДиР.Графа5 + СуммаКоррДоходов;
			СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 + СуммаКоррДоходов;
			
			ПояснениеОперации = "";
			Если СтрокаВыручка.Комиссия > 0 Тогда
				ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
					+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаВыручка.Комиссия, , , " ") + " руб. определена как выручка комитента. ";
			КонецЕсли;
			Если СтрокаВыручка.Патент > 0 Тогда
				ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
					+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаВыручка.Патент, , , " ") + " руб. отнесена к деятельности на патенте. ";
				
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СтрокаВыручка.Патент;
				СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СтрокаВыручка.Патент;
				СтрокаРасшифровки.ДоходПатент = СтрокаВыручка.Патент;
			КонецЕсли;
			Если СтрокаВыручка.ЕНВД > 0 Тогда
				ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
					+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаВыручка.ЕНВД, , , " ") + " руб. отнесена к деятельности ЕНВД. ";
				
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СтрокаВыручка.ЕНВД;
				СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СтрокаВыручка.ЕНВД;
			КонецЕсли;
			Если СтрокаВыручка.ТорговыйСбор > 0 Тогда
				ПояснениеОперации = ПояснениеОперации + "Розничная выручка на сумму "
					+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаВыручка.ТорговыйСбор, , , " ") + " руб. отнесена к деятельности на торговом сборе. ";
				
				КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + СтрокаВыручка.ТорговыйСбор;
				СтрокаРасшифровки.ДоходТорговыйСбор = СтрокаРасшифровки.ДоходТорговыйСбор + СтрокаВыручка.ТорговыйСбор;
			КонецЕсли;
			
			ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеОперации);
			СтрокаРасшифровки.Пояснение = ПояснениеОперации;
			
			Если СтрокаВыручка.Патент > 0
				И ЕстьПатентВДокументе
				И ЗначениеЗаполнено(РеквизитыДокумента.Патент) Тогда
				
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = РеквизитыДокумента.Патент;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = СтрокаВыручка.Патент;
				ЗаписьКУДиРПатент.Контрагент = СтрокаВыручка.Контрагент;
				ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаВыручка.ДоговорКонтрагента;
				ЗаписьКУДиРПатент.ТипОплаты = Перечисления.ТипыОплат.Наличные;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Зачет авансов по безналичным оплатам в рознице (переквалификация доходов)
Процедура РозничнаяВыручкаЗачетАвансов(СтруктураШапкиДокумента, ТаблицаАвансов, ДвиженияКУДиРПатент, КУДиР, Выручка, ДоговорДляОтложенногоПроведения)

	Если Не ЗначениеЗаполнено(ТаблицаАвансов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	
	СуммаВсего        = Выручка.Всего;
	СуммаЕНВД         = Выручка.ЕНВД;
	СуммаКомиссии     = Выручка.Комиссия;
	СуммаТорговыйСбор = Выручка.ТорговыйСбор;
	СуммаПатент       = Выручка.Патент;
	
	ПатентВыручки = Выручка.ПатентСсылка;

	Для Каждого Строка Из ТаблицаВзаиморасчетов Цикл
		Если Строка.СуммаВзаиморасчетов <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			// оплата получена впервые, нет переквалифицируемых доходов
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения) Тогда
			// В режиме отложенного проведения формируем движения только по тому договору,
			// по которому сейчас производится актуализация расчетов.
			Если Строка.ДоговорКонтрагента <> ДоговорДляОтложенногоПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НеПризнанныеДоходы          = 0;
		НеПризнанныеДоходыКомитента = 0;
		УчтенныеДоходыТорговыйСбор  = 0;
		ЭтоЗачетАванса              = Истина;
		
		Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
			
			// Если это принятие в оплату ранее проданного стороннего подарочного сертификата, а не зачет аванса -
			// необходимо признать доходы, но не сторнировать ранее признанные (в данном случае они уже сторнированы при продаже сертификата)
			ЭтоЗачетАванса = Не (Строка.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний
				И БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(Строка.РасчетныйДокумент));
			
			Если ЭтоЗачетАванса Тогда
				НеПризнанныеДоходы = Строка.СуммаРуб_ЕНВД + Строка.СуммаРуб_Патент + Строка.СуммаРуб_Комитента;
				НеПризнанныеДоходыКомитента = Строка.СуммаРуб_Комитента;
			Иначе
				НеПризнанныеДоходы = Строка.СуммаРуб;
			КонецЕсли;
			
			УчтенныеДоходыТорговыйСбор  = Строка.СуммаРуб_ТорговыйСбор;
			
		КонецЕсли;

		// Расшифровка КУДиР по договорам
		СтрокаРасшифровки = КУДиР.РасшифровкаПоДоговорам.Добавить();
		СтрокаРасшифровки.Контрагент         = Строка.Контрагент;
		СтрокаРасшифровки.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
		СтрокаРасшифровки.ТипОплаты          = Строка.ТипОплаты;

		Если СуммаКомиссии > 0 Тогда
			СуммаКоррДоходов = Окр(Строка.СуммаРуб * СуммаКомиссии / СуммаВсего, 2, 1);

			ЗачтеноНеПризнанныеДоходы   = Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов            = СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы          = НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходыКомитента = НеПризнанныеДоходыКомитента - Мин(ЗачтеноНеПризнанныеДоходы, НеПризнанныеДоходыКомитента);
			
			Если СуммаКоррДоходов > 0 И ЭтоЗачетАванса Тогда
				СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. определен как выручка комитента. ";

				КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
				СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СуммаКоррДоходов;

				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
				СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
			КонецЕсли;
		КонецЕсли;
		Если СуммаЕНВД > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаРуб * СуммаЕНВД / СуммаВсего, 2, 1);

			ЗачтеноНеПризнанныеДоходы = Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов          = СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы        = НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			Если СуммаКоррДоходов > 0 Тогда
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
				СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СуммаКоррДоходов;

				Если ЭтоЗачетАванса Тогда
					КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
					СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СуммаКоррДоходов;
					
					СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
						+ " руб. отнесен к деятельности ЕНВД. ";
						
					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
					СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
				Иначе
					 СодержаниеОперации = "Оплата сторонними сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
						+ " руб. отнесена к деятельности ЕНВД. ";

					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
					СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если СуммаПатент > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаРуб * СуммаПатент / СуммаВсего, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы = Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов          = СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы        = НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			Если СуммаКоррДоходов > 0 Тогда
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
				СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СуммаКоррДоходов;
				СтрокаРасшифровки.ДоходПатент = СуммаКоррДоходов;

				Если ЭтоЗачетАванса Тогда
					КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
					СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СуммаКоррДоходов;
					
					СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
						+ " руб. отнесен к деятельности на патенте. ";
					
					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
					СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
				Иначе
					СодержаниеОперации = "Оплата сторонними сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
						+ " руб. отнесена к деятельности на патенте. ";
						
					ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
					СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		Если (СуммаЕНВД + СуммаКомиссии + СуммаПатент < СуммаВсего) И НеПризнанныеДоходы > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаРуб * (СуммаВсего - СуммаЕНВД - СуммаКомиссии - СуммаПатент) / СуммаВсего, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы = Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов          = ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы        = НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			КУДиР.Графа5 = КУДиР.Графа5 + СуммаКоррДоходов;
			СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 + СуммаКоррДоходов;
			
			ЗачтеноДоходыКомитента      = Мин(ЗачтеноНеПризнанныеДоходы, НеПризнанныеДоходыКомитента);
			СуммаКоррДоходовЕНВД        = СуммаКоррДоходов - ЗачтеноДоходыКомитента;
			НеПризнанныеДоходыКомитента = НеПризнанныеДоходыКомитента - ЗачтеноДоходыКомитента;
			
			Если ЭтоЗачетАванса Тогда
				 СодержаниеОперации = "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. отнесен к деятельности УСН. ";
				
				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
				СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
				
				КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СуммаКоррДоходовЕНВД;
				СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД - СуммаКоррДоходовЕНВД;
			Иначе
				СодержаниеОперации = "Оплата сторонними сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. отнесена к деятельности УСН. ";
				ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
				СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
			КонецЕсли;
			
		КонецЕсли;
		
		// Доходы по деятельности на торговом сборе:
		// если есть в реализации и нет в авансе - надо отразить доходы;
		// если нет в реализации, но отражены в авансе - надо сторнировать
		ТекДоходыТорговыйСбор = Окр(Строка.СуммаРуб * СуммаТорговыйСбор / СуммаВсего, 2);
		УчестьДоходыТорговыйСбор = ТекДоходыТорговыйСбор - УчтенныеДоходыТорговыйСбор;
		
		Если УчестьДоходыТорговыйСбор <> 0 Тогда
			ЗнакКорректировки = ?(УчестьДоходыТорговыйСбор > 0, 1, -1);
			
			ОписаниеОбъекта = ?(ЭтоЗачетАванса, НСтр("ru = 'Аванс'"), НСтр("ru = 'Оплата сторонними сертификатами'"));
			
			ОписаниеДействия = "";
			Если ЗнакКорректировки = 1 Тогда
				ОписаниеДействия = ?(ЭтоЗачетАванса,
					НСтр("ru = 'отнесен к деятельности'"),
					НСтр("ru = 'отнесена к деятельности'"));
			Иначе
				ОписаниеДействия = ?(ЭтоЗачетАванса,
					НСтр("ru = 'исключен из доходов по деятельности'"),
					НСтр("ru = 'исключена из доходов по деятельности'"));
			КонецЕсли;
			
			СодержаниеОперации =
				СтрШаблон(НСтр("ru = '%1 на сумму %2 руб. %3 на торговом сборе. '"),
					ОписаниеОбъекта,
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗнакКорректировки * УчестьДоходыТорговыйСбор, , , " "),
					ОписаниеДействия);
			
			ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", СодержаниеОперации);
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + СодержаниеОперации;
			
			КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + УчестьДоходыТорговыйСбор;
			СтрокаРасшифровки.ДоходТорговыйСбор = СтрокаРасшифровки.ДоходТорговыйСбор + УчестьДоходыТорговыйСбор;
		КонецЕсли;
		
		Если Строка.СуммаРуб_Патент > 0 И ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
			//Определим исходный патент
			МетаданныеАванса = Строка.РасчетныйДокумент.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеАванса) Тогда
				ПатентАванса = Строка.РасчетныйДокумент.Патент;
				МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
				Если СуммаПатент > 0 Тогда
					//Проверим, совпадает ли патент аванса с патентом, указанным в документе получения выручки
					Если ЗначениеЗаполнено(ПатентВыручки) И (ПатентВыручки <> ПатентАванса) Тогда
						
						ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
						ЗаписьКУДиРПатент.Патент = ПатентАванса;
						ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента) +
							"Аванс на сумму " + Строка.СуммаРуб_Патент + " руб. использован в деятельности, не подпадающей под действие патента. ";
						ЗаписьКУДиРПатент.Графа4 = - Окр(Строка.СуммаРуб_Патент, 2, 1);
						
						ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
						ЗаписьКУДиРПатент.Патент = ПатентВыручки;
						ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
						ЗаписьКУДиРПатент.Графа4 = Окр(Строка.СуммаРуб * СуммаПатент / СуммаВсего, 2, 1);
						ЗаписьКУДиРПатент.Контрагент = Строка.Контрагент;
						ЗаписьКУДиРПатент.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
						ЗаписьКУДиРПатент.ТипОплаты = Строка.ТипОплаты;
					
					ИначеЕсли СуммаПатент < СуммаВсего Тогда
						// патенты совпадают, но часть выручки не относится к патенту - аванс по патенту должен быть переквалифицирован
						
						ИсключаемыйДоходПатент = Окр(Строка.СуммаРуб_Патент * (СуммаВсего - СуммаПатент) / СуммаВсего, 2, 1);
						
						ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
						ЗаписьКУДиРПатент.Патент     = ПатентАванса;
						ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента)
							+ "Аванс на сумму " + ИсключаемыйДоходПатент + " руб. использован в деятельности, не подпадающей под действие патента. ";
						ЗаписьКУДиРПатент.Графа4     = - ИсключаемыйДоходПатент;
						ЗаписьКУДиРПатент.Контрагент = Строка.Контрагент;
						ЗаписьКУДиРПатент.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
						ЗаписьКУДиРПатент.ТипОплаты = Строка.ТипОплаты;

					КонецЕсли;
				Иначе
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ПатентАванса;
					ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента)
						+ "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.СуммаРуб_Патент, , , " ")
						+ " руб. использован в деятельности, не подпадающей под действие патента. ";;
					ЗаписьКУДиРПатент.Графа4 = - Окр(Строка.СуммаРуб_Патент, 2, 1);
					ЗаписьКУДиРПатент.Контрагент = Строка.Контрагент;
					ЗаписьКУДиРПатент.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
					ЗаписьКУДиРПатент.ТипОплаты = Строка.ТипОплаты;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СуммаПатент > 0 Тогда
			//Отразим запись в книге по патенту
			МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
			Если ЗначениеЗаполнено(ПатентВыручки) Тогда
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = ПатентВыручки;
				ЗаписьКУДиРПатент.Содержание = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = Окр(Строка.СуммаРуб * СуммаПатент / СуммаВсего, 2, 1);
				ЗаписьКУДиРПатент.Контрагент = Строка.Контрагент;
				ЗаписьКУДиРПатент.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
				ЗаписьКУДиРПатент.ТипОплаты = Строка.ТипОплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Переквалификация доходов по проданным подарочным сертификатам, ранее принимавшимся в оплату
Процедура РозничнаяВыручкаПродажаПодарочныхСертификатов(СтруктураШапкиДокумента, ПроданныеСертификаты, КУДиР, ДвиженияКУДиРПатент, ДоговорДляОтложенногоПроведения)

	Если Не ЗначениеЗаполнено(ПроданныеСертификаты) Тогда
		Возврат;
	КонецЕсли;

	ПатентВыручки = Неопределено;
	
	ПрименяетсяТолькоПСН = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНПатент
		И Не (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы);
	
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	РеквизитыДокумента  = Новый Структура(
		"ДеятельностьНаПатенте, Патент, ДеятельностьНаТорговомСборе",
		Ложь, Неопределено, Ложь);
	
	ИменаРеквизитов = Новый Массив;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("ДеятельностьНаПатенте");
		ИменаРеквизитов.Добавить("Патент");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаТорговомСборе", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("ДеятельностьНаТорговомСборе");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		РеквизитыДокумента,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураШапкиДокумента.Ссылка, ИменаРеквизитов));
		
	ПатентВыручки = ?(РеквизитыДокумента.ДеятельностьНаПатенте = Истина, РеквизитыДокумента.Патент, Неопределено);
	
	ОписаниеТипаСумма = Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.Ресурсы.Графа4.Тип;

	ВидыДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ПроданныеСертификаты.ВыгрузитьКолонку("ДоговорКонтрагента"),
		"ВидДоговора");
		
	// Сначала соберем суммы построчно по договорам, записи КУДиР будем формировать потом сводно по договору.
	ДоходыПоДоговорам = Новый ТаблицаЗначений;
	ДоходыПоДоговорам.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДоходыПоДоговорам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДоходыПоДоговорам.Колонки.Добавить("ТипОплаты",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));

	ДоходыПоДоговорам.Колонки.Добавить("СторноУСН",          ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("СторноПатент",       ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("СторноТорговыйСбор", ОписаниеТипаСумма);
	
	ДоходыПоДоговорам.Колонки.Добавить("ПризнаноУСН",          ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("ПризнаноЕНВД",         ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("ПризнаноКомитент",     ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("ПризнаноПатент",       ОписаниеТипаСумма);
	ДоходыПоДоговорам.Колонки.Добавить("ПризнаноТорговыйСбор", ОписаниеТипаСумма);
	
	Для каждого Сертификат Из ПроданныеСертификаты Цикл
		
		Если Сертификат.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			// сертификат продан впервые, нет зачитываемых оплат
			Продолжить;
		КонецЕсли;
		
		Если Сертификат.СуммаБУ <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения) Тогда
			// При восстановлении отложенных расчетов движения формируем только по актуализируемому договору.
			Если Сертификат.ДоговорКонтрагента <> ДоговорДляОтложенногоПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПризнатьПоПатенту = 0;
		
		ПатентРасчетов = Неопределено;
		Если Сертификат.СуммаБУ_Патент > 0 И ЗначениеЗаполнено(Сертификат.ДокументРасчетов) Тогда
			МетаданныеДокументаРасчетов = Сертификат.ДокументРасчетов.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокументаРасчетов) Тогда
				ПатентРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат.ДокументРасчетов, "Патент");
			КонецЕсли;
		КонецЕсли;

		ТипОплаты = Неопределено;
		Если ЗначениеЗаполнено(Сертификат.ТипОплаты) Тогда
			// Тип сертификата заполнен в таблице, используем его.
			ТипОплаты = Сертификат.ТипОплаты;
		Иначе
			// Тип сертификата в таблице не указан, определяем по виду договора.
			Если ВидыДоговоров[Сертификат.ДоговорКонтрагента] = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный;
			ИначеЕсли ВидыДоговоров[Сертификат.ДоговорКонтрагента] = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДохода = ДоходыПоДоговорам.Добавить();
		СтрокаДохода.Контрагент         = Сертификат.Контрагент;
		СтрокаДохода.ДоговорКонтрагента = Сертификат.ДоговорКонтрагента;
		СтрокаДохода.ТипОплаты          = ТипОплаты;
		
		Если ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
			// Собственный сертификат при УСН:
			//  если ранее принимался в оплату продаж по ЕНВД, комиссии или патенту -
			//     принимаем доходы по спец. режимам и сторнируем безусловно признаваемый при продаже сертификата доход УСН
			//  если принимался в оплату продаж, облагаемых УСН -
			//    ничего не делаем (доходы от оплаты такого сертификата принимаются в общем порядке при распределении розничной выручки)
			// Собственный сертификат при самостоятельном применении патентной системы:
			//    если ранее принимался в оплату продаж по патенту регистратора - ничего не делаем (доходы по патенту признаны в общем порядке при распределении розничной выручки)
			//    если ранее принимался в оплату продаж по другому патенту - сторнируем доходы по патенту регистратора и признаем доходы по патенту продаж

			Если Сертификат.СуммаБУ_ЕНВД > 0 Тогда
				СтрокаДохода.ПризнаноЕНВД = СтрокаДохода.ПризнаноЕНВД + Сертификат.СуммаБУ_ЕНВД;
				СтрокаДохода.СторноУСН    = СтрокаДохода.СторноУСН + Сертификат.СуммаБУ_ЕНВД;
			КонецЕсли;
			
			Если Сертификат.СуммаБУ_Комитента > 0 Тогда
				СтрокаДохода.ПризнаноКомитент = СтрокаДохода.ПризнаноКомитент + Сертификат.СуммаБУ_Комитента;
				СтрокаДохода.СторноУСН        = СтрокаДохода.СторноУСН + Сертификат.СуммаБУ_Комитента;
			КонецЕсли;
			
			Если Сертификат.СуммаБУ_Патент > 0 Тогда
				СтрокаДохода.ПризнаноПатент = СтрокаДохода.ПризнаноПатент + Сертификат.СуммаБУ_Патент;
				СтрокаДохода.СторноУСН      = СтрокаДохода.СторноУСН + Сертификат.СуммаБУ_Патент;
				Если Не ПрименяетсяТолькоПСН
					Или ПатентРасчетов <> ПатентВыручки Тогда
					ПризнатьПоПатенту = Сертификат.СуммаБУ_Патент;
					СтрокаДохода.СторноПатент = СтрокаДохода.СторноПатент + ПризнатьПоПатенту;
				КонецЕсли;
			КонецЕсли;
			
			Если Не РеквизитыДокумента.ДеятельностьНаТорговомСборе И Сертификат.СуммаБУ_ТорговыйСбор > 0 Тогда
				СтрокаДохода.ПризнаноТорговыйСбор = СтрокаДохода.ПризнаноТорговыйСбор + Сертификат.СуммаБУ_ТорговыйСбор; // Продажи облагались торговым сбором
			КонецЕсли;
			
		ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний Тогда
			// Сторонний сертификат:
			// если ранее принимался в оплату продаж по любому режиму - признаем доходы по этому режиму
			
			Если Сертификат.СуммаБУ_ЕНВД > 0 Тогда
				СтрокаДохода.ПризнаноЕНВД = СтрокаДохода.ПризнаноЕНВД + Сертификат.СуммаБУ_ЕНВД;
			КонецЕсли;
			
			Если Сертификат.СуммаБУ_Комитента > 0 Тогда
				СтрокаДохода.ПризнаноКомитент = СтрокаДохода.ПризнаноКомитент + Сертификат.СуммаБУ_Комитента;
			КонецЕсли;
			
			Если Сертификат.СуммаБУ_Патент > 0 Тогда
				ПризнатьПоПатенту = Сертификат.СуммаБУ_Патент;
				СтрокаДохода.ПризнаноПатент    = СтрокаДохода.ПризнаноПатент + ПризнатьПоПатенту;
			КонецЕсли;
			
			Если Сертификат.СуммаБУ_ТорговыйСбор > 0 Тогда
				СтрокаДохода.ПризнаноТорговыйСбор = СтрокаДохода.ПризнаноТорговыйСбор + Сертификат.СуммаБУ_ТорговыйСбор; // Продажи облагались торговым сбором
			КонецЕсли;
			
			ОплаченоПродажУСН = Сертификат.СуммаБУ - Сертификат.СуммаБУ_ЕНВД - Сертификат.СуммаБУ_Комитента - Сертификат.СуммаБУ_Патент;
			Если ОплаченоПродажУСН > 0 Тогда
				СтрокаДохода.ПризнаноУСН = СтрокаДохода.ПризнаноУСН + ОплаченоПродажУСН;
			КонецЕсли;
			
		КонецЕсли;

		Если РеквизитыДокумента.ДеятельностьНаТорговомСборе И СтрокаДохода.СторноУСН > 0 Тогда
			// доходы от продажи сертификатов, отнесенные при распределении розничной выручки к доходам по торговому сбору
			// надо сторнировать, если сертификатами ранее оплачены не подпадающие под торговый сбор продажи
			СтрокаДохода.СторноТорговыйСбор = СтрокаДохода.СторноТорговыйСбор + СтрокаДохода.СторноУСН;
		КонецЕсли;
		
		// признание доходов по патенту
		Если ПризнатьПоПатенту > 0 И ЗначениеЗаполнено(ПатентРасчетов) Тогда
			ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
			ЗаписьКУДиРПатент.Патент = ПатентРасчетов;
			ЗаписьКУДиРПатент.Содержание = "Реализация подарочных сертификатов в торговой точке " + СтруктураШапкиДокумента.Ссылка.Склад
				+ ": зачтена оплата продаж по патенту.";
			ЗаписьКУДиРПатент.Графа4 = ПризнатьПоПатенту;
			ЗаписьКУДиРПатент.Контрагент         = Сертификат.Контрагент;
			ЗаписьКУДиРПатент.ДоговорКонтрагента = Сертификат.ДоговорКонтрагента;
			ЗаписьКУДиРПатент.ТипОплаты          = ТипОплаты;
		КонецЕсли;

	КонецЦикла;
	
	ДоходыПоДоговорам.Свернуть("Контрагент, ДоговорКонтрагента, ТипОплаты",
		"СторноУСН, СторноПатент, СторноТорговыйСбор,
		|ПризнаноУСН, ПризнаноЕНВД, ПризнаноКомитент, ПризнаноПатент, ПризнаноТорговыйСбор");
	
	// записи в КУДиР
	
	ПояснениеОперации = "";
	
	Для Каждого СтрокаДохода Из ДоходыПоДоговорам Цикл

		СтрокаРасшифровки = КУДиР.РасшифровкаПоДоговорам.Добавить();
		СтрокаРасшифровки.Контрагент         = СтрокаДохода.Контрагент;
		СтрокаРасшифровки.ДоговорКонтрагента = СтрокаДохода.ДоговорКонтрагента;
		СтрокаРасшифровки.ТипОплаты          = СтрокаДохода.ТипОплаты;
		
		Если СтрокаДохода.СторноУСН > 0 Тогда
			КУДиР.Графа5 = КУДиР.Графа5 - СтрокаДохода.СторноУСН;
			СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 - СтрокаДохода.СторноУСН;
			
			ПояснениеОперации = ПояснениеОперации + "Собственными сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.СторноУСН,,, " ")
				+ " руб. ранее оплачены не облагаемые УСН продажи. ";
		КонецЕсли;
		
		Если СтрокаДохода.СторноТорговыйСбор > 0 Тогда
			КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор - СтрокаДохода.СторноТорговыйСбор;
			СтрокаРасшифровки.ДоходТорговыйСбор = СтрокаРасшифровки.ДоходТорговыйСбор - СтрокаДохода.СторноТорговыйСбор;
			
			ПояснениеОперации = ПояснениеОперации + "Доходы в сумме " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.СторноТорговыйСбор,,, " ")
				+ " руб. исключены из деятельности на торговом сборе. ";
		КонецЕсли;
		
		Если СтрокаДохода.ПризнаноУСН > 0 Тогда
			КУДиР.Графа5 = КУДиР.Графа5 + СтрокаДохода.ПризнаноУСН;
			СтрокаРасшифровки.Графа5 = СтрокаРасшифровки.Графа5 + СтрокаДохода.ПризнаноУСН;

			ПояснениеОперации = ПояснениеОперации + "Сторонними сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.ПризнаноУСН,,, " ")
				+ " руб. ранее оплачены продажи, облагаемые УСН. ";
		КонецЕсли;
		
		Если СтрокаДохода.ПризнаноТорговыйСбор Тогда
			КУДиР.ДоходТорговыйСбор = КУДиР.ДоходТорговыйСбор + СтрокаДохода.ПризнаноТорговыйСбор;
			СтрокаРасшифровки.ДоходТорговыйСбор = СтрокаРасшифровки.ДоходТорговыйСбор + СтрокаДохода.ПризнаноТорговыйСбор;
			
			ПояснениеОперации = ПояснениеОперации + "Сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.ПризнаноТорговыйСбор,,, " ")
				+ " руб. ранее оплачены продажи по деятельности на торговом сборе. ";
		КонецЕсли;
		
		Если СтрокаДохода.ПризнаноЕНВД > 0 Тогда
			КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СтрокаДохода.ПризнаноЕНВД;
			СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СтрокаДохода.ПризнаноЕНВД;
			
			ПояснениеОперации = ПояснениеОперации + "Сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.ПризнаноЕНВД,,, " ")
				+ " руб. ранее оплачены продажи по ЕНВД. ";
		КонецЕсли;
		
		Если СтрокаДохода.ПризнаноКомитент > 0 Тогда
			ПояснениеОперации = ПояснениеОперации + "Сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.ПризнаноКомитент,,, " ")
				+ " руб. ранее оплачены продажи товаров и услуг комитента. ";
		КонецЕсли;
		
		Если СтрокаДохода.ПризнаноПатент > 0 Тогда
			КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД + СтрокаДохода.ПризнаноПатент;
			СтрокаРасшифровки.ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД + СтрокаДохода.ПризнаноПатент;
			СтрокаРасшифровки.ДоходПатент = СтрокаРасшифровки.ДоходПатент + СтрокаДохода.ПризнаноПатент;
			
			ПояснениеОперации = ПояснениеОперации + "Сертификатами на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаДохода.ПризнаноПатент,,, " ")
				+ " руб. ранее оплачены продажи по патенту. ";
		КонецЕсли;
		
		ДополнитьСодержаниеКУДиР(КУДиР, "Пояснение", ПояснениеОперации);
		СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + ПояснениеОперации;
		
		// При самостоятельном применении патентной системы необходимо сторнировать признанные доходы от продажи собственных сертификатов,
		// если патент текущего документа отличается от патентов зачтенных документов продажи.
		Если ПрименяетсяТолькоПСН И СтрокаДохода.СторноПатент > 0 И ЗначениеЗаполнено(ПатентВыручки) Тогда
			ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
			ЗаписьКУДиРПатент.Патент = ПатентВыручки;
			ЗаписьКУДиРПатент.Содержание = "Проданные в торговой точке " + СтруктураШапкиДокумента.Ссылка.Склад
				+ " собственные подарочные сертификаты определены как оплата продаж по другим патентам.";
			ЗаписьКУДиРПатент.Графа4 = - СтрокаДохода.СторноПатент;
			ЗаписьКУДиРПатент.Контрагент         = СтрокаДохода.Контрагент;
			ЗаписьКУДиРПатент.ДоговорКонтрагента = СтрокаДохода.ДоговорКонтрагента;
			ЗаписьКУДиРПатент.ТипОплаты          = СтрокаДохода.ТипОплаты;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Изменение стоимости, списание остатков расходов и корректировка КУДиР по данным корректировочного документа
Процедура КорректировкаПоступленияУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировки, ДвиженияРегистров)
	
	Перем КэшКурсовВалют;
	
	Если ТаблицаКорректировки = Неопределено ИЛИ ТаблицаКорректировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	ВыделятьНДСУСНДокумент = (РеквизитыКорректировки.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	ЭтоКорректировкаПрошлогоПериода = РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураКурсаВалютыРегл = ПолучитьКурсВалютыИзКэша(ВалютаРеглУчета, СтруктураШапкиДокумента.Дата, КэшКурсовВалют);
	Если СтруктураКурсаВалютыРегл.Курс = 0 Тогда
		СтруктураКурсаВалютыРегл.Курс = 1;
	КонецЕсли;
	Если СтруктураКурсаВалютыРегл.Кратность = 0 Тогда
		СтруктураКурсаВалютыРегл.Кратность = 1;
	КонецЕсли;
	
	СтруктураКурса = Новый Структура("Курс, Кратность", СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьДокумента);
	
	СтруктураКурсаПредыдущийГод = Новый Структура("Курс, Кратность", 1, 1);
	Если ЭтоКорректировкаПрошлогоПериода И РеквизитыКорректировки.Валюта <> ВалютаРеглУчета Тогда
		СтруктураКурсаПредыдущийГод = ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, КонецГода(РеквизитыКорректировки.ДокументПоступленияДата), КэшКурсовВалют);
	КонецЕсли; 
	
	// Получим остатки расходов УСН для корректировки
	//Подготовка наборов фильтров
	ОтборНоменклатура = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКорректировки, "ЭлементРасхода");
	ОтборСчетаУчета   = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКорректировки, "СчетУчета");
	ОтборВидыРасходов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКорректировки, "ВидРасхода");
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаКорректировки.Скопировать(, "ЭлементРасхода, СчетУчета");
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ОтборВидыРасходов;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= ОтборСчетаУчета;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= ОтборНоменклатура;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "РасчетныйДокумент";
	Фильтр.ЗначениеПоля		= РеквизитыКорректировки.ДокументПоступленияСсылка;
	Фильтр.Условие			= "=";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок, ЭтоКорректировкаПрошлогоПериода);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода, СчетУчета");
	
	// Сводные остатки непризнанных расходов на момент "перед корректировкой" по элементу расхода и счету учета.
	// По разности поступления и сводных непризнанных остатков определяются расходы по партии, уже отраженные в КУДиР.
	ОстаткиРасходовСводные = ТаблицаРасходов.Скопировать(, "ЭлементРасхода, СчетУчета, Валюта, РасчетныйДокументДата, ДокументОплатыДата, Количество, КоличествоНачалоГода, Сумма, СуммаНачалоГода, НДС, НДСНачалоГода");
	ОстаткиРасходовСводные.Свернуть("ЭлементРасхода, СчетУчета, Валюта, РасчетныйДокументДата, ДокументОплатыДата", "Количество, КоличествоНачалоГода, Сумма, СуммаНачалоГода, НДС, НДСНачалоГода");
	ОстаткиРасходовСводные.Индексы.Добавить("ЭлементРасхода, СчетУчета");
	
	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	// Для пересчета валютных сумм.
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
	// Для корректировки прошлого периода.
	ТаблицаДляСписания.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	// Для дополнительных пояснений в содержании КУДиР.
	ТаблицаДляСписания.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	ТаблицаПриход = ТаблицаДляСписания.Скопировать();
	
	ТаблицаКорректировкиКУДиР      = ТаблицаДляСписания.Скопировать();
	ТаблицаКорректировкиКУДиР_ЕНВД = ТаблицаДляСписания.Скопировать();
	
	Для Каждого СтрокаКорректировки Из ТаблицаКорректировки Цикл
		
		СтруктураОтбора = Новый Структура("ЭлементРасхода, СчетУчета", СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);
		
		// Получим сводные остатки непризнанных расходов на начало корректировки.
		КоличествоОстатокТекущий    = 0;
		КоличествоОстатокНачалоГода = 0;
		СуммаВалОстатокТекущий      = 0;
		СуммаВалОстатокНачалоГода   = 0;
		
		СтрокиОстатков = ОстаткиРасходовСводные.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
			
			КоличествоОстатокТекущий   = КоличествоОстатокТекущий + СтрокаОстатка.Количество;
			КоличествоОстатокНачалоГода = КоличествоОстатокНачалоГода + СтрокаОстатка.КоличествоНачалоГода;
			
			// Суммовые остатки нужны только для услуг.
			Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
				
				ДатаОстатка = СтрокаОстатка.РасчетныйДокументДата;
				Если ЗначениеЗаполнено(СтрокаОстатка.ДокументОплатыДата) Тогда
					ДатаОстатка = СтрокаОстатка.ДокументОплатыДата;
				КонецЕсли;
				
				ВыделятьНДСУСНОстаток = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаОстатка) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
				
				// Суммовые остатки требуется подсчитать в валюте корректировки.
				СуммаОстатка           = СтрокаОстатка.Сумма;
				СуммаОстаткаНачалоГода = СтрокаОстатка.СуммаНачалоГода;
				НДСОстатка             = СтрокаОстатка.НДС;
				НДСОстаткаНачалоГода   = СтрокаОстатка.НДСНачалоГода;
				
				Если СтрокаОстатка.Валюта <> РеквизитыКорректировки.Валюта Тогда
					СтруктураКурсаОстатка = ?(СтрокаОстатка.Валюта = ВалютаРеглУчета,
											СтруктураКурсаВалютыРегл,
											ПолучитьКурсВалютыИзКэша(СтрокаОстатка.Валюта, ДатаОстатка, КэшКурсовВалют));
					СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
											СтруктураКурсаВалютыРегл,
											ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаОстатка, КэшКурсовВалют));
					
					СуммаОстатка = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						СуммаОстатка, СтруктураКурсаОстатка, СтруктураКурсаДокумента);
					СуммаОстаткаНачалоГода = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						СуммаОстаткаНачалоГода, СтруктураКурсаОстатка, СтруктураКурсаДокумента);
					НДСОстатка = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						НДСОстатка, СтруктураКурсаОстатка, СтруктураКурсаДокумента);
					НДСОстаткаНачалоГода = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						НДСОстаткаНачалоГода, СтруктураКурсаОстатка, СтруктураКурсаДокумента);
				КонецЕсли;
				
				СуммаВалОстатокТекущий    = СуммаВалОстатокТекущий + СуммаОстатка - ?(ВыделятьНДСУСНОстаток, 0, НДСОстатка);
				СуммаВалОстатокНачалоГода = СуммаВалОстатокНачалоГода + СуммаОстаткаНачалоГода - ?(ВыделятьНДСУСНОстаток, 0, НДСОстаткаНачалоГода);
				
			КонецЕсли;
		КонецЦикла;
		
		КоличествоОсталосьПогасить = - СтрокаКорректировки.Количество;
		// Суммы к списанию в валюте корректировки.
		СписатьСуммуВал = - (СтрокаКорректировки.Сумма - СтрокаКорректировки.НДС); // Из параметров проведения всегда приходят суммы с НДС.
		СписатьНДСВал   = - СтрокаКорректировки.НДС;
		
		// Корректируем текущие остатки расходов.
		
		СтрокиРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		
		// Cписываем остатки непризнанных расходов, если они есть.
		Для Каждого СтрокаРасхода Из СтрокиРасходов Цикл
			
			Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда // Товар, материал
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаРасхода.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе // Услуга
				Если СписатьСуммуВал <= 0 И СписатьНДСВал <=0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаРасхода.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДатаРасхода = СтрокаРасхода.РасчетныйДокументДата;
			Если ЗначениеЗаполнено(СтрокаРасхода.ДокументОплатыДата) Тогда
				ДатаРасхода = СтрокаРасхода.ДокументОплатыДата;
			КонецЕсли;
			
			СтруктураКурсаРасхода = ?(СтрокаРасхода.Валюта = ВалютаРеглУчета,
				СтруктураКурсаВалютыРегл,
				ПолучитьКурсВалютыИзКэша(СтрокаРасхода.Валюта, ДатаРасхода, КэшКурсовВалют));
			СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
				СтруктураКурсаВалютыРегл,
				ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаРасхода, КэшКурсовВалют));
			
			ВыделятьНДСУСНРасход = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаРасхода) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
			
			Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
				
				// Товары и материалы списываем по количеству.
				СписатьКоличество = Мин(КоличествоОсталосьПогасить, СтрокаРасхода.Количество);
				
				Если СтрокаРасхода.Количество > СписатьКоличество Тогда
					ДоляСписания = СписатьКоличество / СтрокаРасхода.Количество;
					НоваяСтрока.Количество = СписатьКоличество;
					НоваяСтрока.Сумма      = Окр(ДоляСписания * НоваяСтрока.Сумма, 2);
					НоваяСтрока.НДС        = Окр(ДоляСписания * НоваяСтрока.НДС, 2);
				КонецЕсли;
				
				КоличествоОсталосьПогасить  = КоличествоОсталосьПогасить - НоваяСтрока.Количество;
				
			Иначе
				
				// Услуги списываем по сумме и НДС. Суммы списания предварительно пересчитываем в валюту остатка расхода.
				СписатьСуммуВВалютеРасхода = СписатьСуммуВал;
				СписатьНДСВВалютеРасхода   = СписатьНДСВал;
				
				Если НоваяСтрока.Валюта <> РеквизитыКорректировки.Валюта Тогда
					СписатьСуммуВВалютеРасхода = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						СписатьСуммуВВалютеРасхода, СтруктураКурсаДокумента, СтруктураКурсаРасхода); // Из валюты корректировки в валюту остатка расхода.
					СписатьНДСВВалютеРасхода = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
						СписатьНДСВВалютеРасхода, СтруктураКурсаДокумента, СтруктураКурсаРасхода); // Из валюты корректировки в валюту остатка расхода.
				КонецЕсли;
				
				СписатьСумму = Мин(СписатьСуммуВВалютеРасхода, СтрокаРасхода.Сумма - ?(ВыделятьНДСУСНРасход, 0, СтрокаРасхода.НДС));
				СписатьНДС   = Мин(СписатьНДСВВалютеРасхода, СтрокаРасхода.НДС);
				
				НоваяСтрока.Сумма = СписатьСумму + ?(ВыделятьНДСУСНРасход, 0, СписатьНДС);
				НоваяСтрока.НДС   = СписатьНДС;
				
			КонецЕсли;
			
			// Расходы из остатков списываем с "непринимаемым" статусом - уменьшение остатков расходов в КУДиР не отражается.
			НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
			НоваяСтрока.СтатусСписания              = Перечисления.ОтражениеВУСН.НеПринимаются;
			
			// Учтем списанные суммы. При необходимости - пересчитаем обратно в валюту корректировки.
			УчтеннаяСуммаВал = НоваяСтрока.Сумма;
			УчтенныйНДСВал   = НоваяСтрока.НДС;
			
			Если НоваяСтрока.Валюта <> РеквизитыКорректировки.Валюта Тогда
				УчтеннаяСуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
					УчтеннаяСуммаВал, СтруктураКурсаРасхода, СтруктураКурсаДокумента);
				УчтенныйНДСВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
					УчтенныйНДСВал, СтруктураКурсаРасхода, СтруктураКурсаДокумента);
			КонецЕсли;
			
			СписатьСуммуВал = СписатьСуммуВал - (УчтеннаяСуммаВал - ?(ВыделятьНДСУСНРасход, 0, УчтенныйНДСВал));
			СписатьНДСВал   = СписатьНДСВал - УчтенныйНДСВал;
			
			// Также учтем списание в таблице остатков расходов.
			СтрокаРасхода.Количество = СтрокаРасхода.Количество - НоваяСтрока.Количество;
			СтрокаРасхода.Сумма      = СтрокаРасхода.Сумма - НоваяСтрока.Сумма;
			СтрокаРасхода.НДС        = СтрокаРасхода.НДС - НоваяСтрока.НДС;
			
		КонецЦикла;
		
		// Если осталась сумма к изменению - распределяем по остаткам расходов на момент "после корректировки"
		// и по признанным расходам за период с даты поступления по дату корректировки.
		Если СписатьСуммуВал <> 0 ИЛИ СписатьНДСВал <> 0 Тогда
			
			ЗнакСписания = 1; // По умолчанию - списание.
			Если СписатьСуммуВал < 0 Тогда // Это увеличение суммы, потребуется "переворачивать".
				ЗнакСписания = -1;
			ИначеЕсли СписатьСуммуВал = 0 Тогда
				ЗнакСписания = ?(СписатьНДСВал > 0, 1, - 1);
			КонецЕсли;
			
			КоличествоПоПоступлению = СтрокаКорректировки.КоличествоПоПоступлению;
			КоличествоПослеКорректировки = КоличествоПоПоступлению + СтрокаКорректировки.Количество;
			СуммаПоПоступлению = СтрокаКорректировки.СуммаПоПоступлению - СтрокаКорректировки.НДСПоПоступлению; // из параметров проведения всегда приходят суммы с НДС
			
			// Второй проход по остаткам несписанных расходов:
			// требуется только для номенклатуры в случае, когда корректируются суммовые показатели.
			СуммаВалДляРаспределения = СписатьСуммуВал; // Скопируем суммы корректировки для распределения по несписанным остаткам -
			НДСВалДляРаспределения   = СписатьНДСВал;   // из исходных сумм в каждой итерации требуется исключать уже учтенные.
			Для Каждого СтрокаРасхода Из СтрокиРасходов Цикл
				
				Если СтрокаКорректировки.ВидРасхода <> Перечисления.ВидыРасходовУСН.Номенклатура Тогда
					Прервать;
				КонецЕсли;
				Если КоличествоПослеКорректировки = 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаРасхода.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ?(ЗнакСписания = 1, ТаблицаДляСписания.Добавить(), ТаблицаПриход.Добавить());
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Количество = 0;
				
				// Изменение стоимостной оценки расходов регистрируем с "непринимаемым" статусом - в КУДиР оно не отражается.
				НоваяСтрока.КоличествоПоСтатусуСписания = 0;
				НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
				
				ДатаРасхода = СтрокаРасхода.РасчетныйДокументДата;
				Если ЗначениеЗаполнено(СтрокаРасхода.ДокументОплатыДата) Тогда
					ДатаРасхода = СтрокаРасхода.ДокументОплатыДата;
				КонецЕсли;
				
				ВыделятьНДСУСНРасход = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаРасхода) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
				
				СтруктураКурсаРасхода = ?(СтрокаРасхода.Валюта = ВалютаРеглУчета,
					СтруктураКурсаВалютыРегл,
					ПолучитьКурсВалютыИзКэша(СтрокаРасхода.Валюта, ДатаРасхода, КэшКурсовВалют));
				СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
					СтруктураКурсаВалютыРегл,
					ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаРасхода, КэшКурсовВалют));
				
				ДоляОстатка = ?(КоличествоПослеКорректировки = 0, 0, СтрокаРасхода.Количество / КоличествоПослеКорректировки);
				
				СуммаКорректировкиВал = СуммаВалДляРаспределения * ДоляОстатка * ЗнакСписания;
				СуммаКорректировкиНДСВал = НДСВалДляРаспределения * ДоляОстатка * ЗнакСписания;
				
				СуммаКорректировкиРасход    = СуммаКорректировкиВал + ?(ВыделятьНДСУСНРасход, 0, СуммаКорректировкиНДСВал);
				СуммаКорректировкиНДСРасход = СуммаКорректировкиНДСВал;
				
				Если НоваяСтрока.Валюта <> РеквизитыКорректировки.Валюта Тогда
					НоваяСтрока.СтруктураКурса = ?(НоваяСтрока.Валюта = ВалютаРеглУчета, Неопределено, СтруктураКурсаРасхода);
					
					СуммаКорректировкиРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаКорректировкиРасход,
						СтруктураКурсаДокумента, СтруктураКурсаРасхода);
					СуммаКорректировкиНДСРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаКорректировкиНДСРасход,
						СтруктураКурсаДокумента, СтруктураКурсаРасхода);
				КонецЕсли;
				
				НоваяСтрока.Сумма = СуммаКорректировкиРасход;
				НоваяСтрока.НДС   = СуммаКорректировкиНДСРасход;
				
				СписатьСуммуВал = СписатьСуммуВал - (СуммаКорректировкиВал * ЗнакСписания);
				СписатьНДСВал   = СписатьНДСВал   - (СуммаКорректировкиНДСВал * ЗнакСписания);
				
			КонецЦикла;
			
			// По признанным расходам.
			Если СтрокаКорректировки.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.НеПринимаются
				И (СписатьСуммуВал <> 0 ИЛИ (СписатьСуммуВал = 0 И СписатьНДСВал <> 0)) Тогда
				
				// Возможна ситуация, когда корректировка количества номенклатуры в минус приводит к отрицательным остаткам.
				// Например, когда новое количество меньше, чем количество уже списанной к моменту корректировки номенклатуры из корректируемой партии.
				// Контроль отрицательных остатков в таком сценарии практически очень сложно реализовать (требуется ретроспективно пересчитывать всю историю партии).
				// Поэтому при корректировке поступления в минус на количество, превышающее остаток в расходах УСН,
				// считаем все расходы, которых нет в остатках, отраженными в налоговом учете, и сторнируем их из КУДиР.
				
				// Корректировку текущего периода, а также увеличение суммы расходов прошлых периодов (уменьшение налоговой базы)
				// отражаем в текущем году, датой корректировки (абзац 3 пункта 1 статьи 54 НК РФ).
				КоэффициентТекущийГод    = 1;
				КоэффициентПрошлыйПериод = 0;
				
				Если ЭтоКорректировкаПрошлогоПериода И (СписатьСуммуВал > 0 ИЛИ (СписатьСуммуВал = 0 И СписатьНДСВал > 0)) Тогда
					// Уменьшение суммы расходов прошлого периода (увеличение налоговой базы)
					// отражаем последней датой корректируемого года (абзац 2 пункта 1 статьи 54 НК РФ).
					Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
						
						// Доли расходов, признанных в текущем году и в прошлом периоде, определяем пропорционально количеству списанных расходов.
						ВсегоПризнано = КоличествоПоПоступлению - КоличествоОстатокТекущий;
						
						КоэффициентТекущийГод = ?(ВсегоПризнано = 0, 0, (КоличествоОстатокНачалоГода - КоличествоОстатокТекущий) / ВсегоПризнано);
						КоэффициентПрошлыйПериод = ?(ВсегоПризнано = 0, 0, (КоличествоПоПоступлению - КоличествоОстатокНачалоГода)  / ВсегоПризнано);
						
					Иначе
						// Для услуг доли расходов, признанных в текущем году и в прошлом периоде, определяем пропорционально сумме списанных расходов.
						ВсегоПризнано = СуммаПоПоступлению - СуммаВалОстатокТекущий;
						
						КоэффициентТекущийГод = ?(ВсегоПризнано = 0, 0, (СуммаВалОстатокНачалоГода - СуммаВалОстатокТекущий) / ВсегоПризнано);
						КоэффициентПрошлыйПериод = ?(ВсегоПризнано = 0, 0, (СуммаПоПоступлению - СуммаВалОстатокНачалоГода) / ВсегоПризнано);
						
					КонецЕсли;
				КонецЕсли;
				
				ЭтоРасходЕНВД = (СтрокаКорректировки.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются);
				
				// расходы текущего года
				Если КоэффициентТекущийГод > 0 Тогда
					
					НоваяСтрока = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
					НоваяСтрока.ВидРасхода = СтрокаКорректировки.ВидРасхода;
					НоваяСтрока.ЭлементРасхода = СтрокаКорректировки.ЭлементРасхода;
					НоваяСтрока.СчетУчета = СтрокаКорректировки.СчетУчета;
					НоваяСтрока.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
					НоваяСтрока.Валюта = РеквизитыКорректировки.Валюта;
					НоваяСтрока.ДоговорКонтрагента = РеквизитыКорректировки.ДоговорКонтрагента;
					НоваяСтрока.Количество = 0;
					НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.Партия = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.РасчетныйДокумент = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.ДатаКорректировки = РеквизитыКорректировки.Период;
					
					НоваяСтрока.Сумма = - Окр(КоэффициентТекущийГод * СписатьСуммуВал, 2);
					НоваяСтрока.НДС   = - Окр(КоэффициентТекущийГод * СписатьНДСВал, 2);  
					
					// если расходы в валюте - пересчитаем в рубли
					Если НоваяСтрока.Валюта <> ВалютаРеглУчета Тогда
						Курс = СтруктураКурса.Курс;
						Кратность = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
						НоваяСтрока.Сумма = НоваяСтрока.Сумма * Курс / Кратность;
						НоваяСтрока.НДС   = НоваяСтрока.НДС * Курс / Кратность;
						Если Курс <> 1 Тогда
							НоваяСтрока.Валюта = ВалютаРеглУчета;
						КонецЕсли;
					КонецЕсли;
					
					// Если входящий НДС "по оплате", его необходимо выделить отдельно.
					Если ВыделятьНДСУСН Тогда
						НоваяСтрокаНДС = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДС, НоваяСтрока);
						НоваяСтрокаНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаНДС.Сумма = НоваяСтрока.НДС;
						НоваяСтрокаНДС.НДС = 0;
					Иначе
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.НДС;
					КонецЕсли;
					
				КонецЕсли;
				
				// Расходы прошлого периода.
				Если КоэффициентПрошлыйПериод > 0 Тогда
					
					НоваяСтрока = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
					НоваяСтрока.ВидРасхода = СтрокаКорректировки.ВидРасхода;
					НоваяСтрока.ЭлементРасхода = СтрокаКорректировки.ЭлементРасхода;
					НоваяСтрока.СчетУчета = СтрокаКорректировки.СчетУчета;
					НоваяСтрока.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
					НоваяСтрока.Валюта = РеквизитыКорректировки.Валюта;
					НоваяСтрока.ДоговорКонтрагента = РеквизитыКорректировки.ДоговорКонтрагента;
					НоваяСтрока.Количество = 0;
					НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.Партия = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.РасчетныйДокумент = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументПоступленияДата);
					
					НоваяСтрока.Сумма = - Окр(КоэффициентПрошлыйПериод * СписатьСуммуВал, 2);
					НоваяСтрока.НДС   = - Окр(КоэффициентПрошлыйПериод * СписатьНДСВал, 2);
					
					// Если расходы в валюте - пересчитаем в рубли.
					Если НоваяСтрока.Валюта <> ВалютаРеглУчета Тогда
						Курс = СтруктураКурсаПредыдущийГод.Курс;
						Кратность = ?(СтруктураКурсаПредыдущийГод.Кратность = 0, 1, СтруктураКурсаПредыдущийГод.Кратность);
						НоваяСтрока.Сумма = НоваяСтрока.Сумма * Курс / Кратность;
						НоваяСтрока.НДС   = НоваяСтрока.НДС * Курс / Кратность;
						Если Курс <> 1 Тогда
							НоваяСтрока.Валюта = ВалютаРеглУчета;
						КонецЕсли;
					КонецЕсли;
					
					// Если входящий НДС "по оплате", его необходимо выделить отдельно.
					Если ВыделятьНДСУСНДокумент Тогда
						НоваяСтрокаНДС = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДС, НоваяСтрока);
						НоваяСтрокаНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаНДС.Сумма = НоваяСтрока.НДС;
						НоваяСтрокаНДС.НДС = 0;
					Иначе
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.НДС;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "КорректировкаПоступления", Ложь);
	// Добавим движения прихода - увеличения сумм.
	ТаблицыДвижений.ТаблицаПриход.Очистить();
	ТаблицыДвижений.ТаблицаПриход = ТаблицаПриход;
	
	// Если корректируется прошлый период, и есть сторно принятых расходов - требуется отражать в НУ последним днем корректируемого года.
	Если ЭтоКорректировкаПрошлогоПериода Тогда
		Для Каждого СтрокаПринятых Из ТаблицыДвижений.ТаблицаПринятых Цикл
			Если СтрокаПринятых.Сумма < 0 И ЗначениеЗаполнено(СтрокаПринятых.РеквизитыДокументаОплаты) Тогда
				Если СтрокаПринятых.ДокументОплатыДата <= КонецГода(РеквизитыКорректировки.ДокументПоступленияДата) Тогда
					СтрокаПринятых.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументПоступленияДата);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаКорректировкиКУДиР_ЕНВД.Количество() > 0 Тогда
		КорректировкаКУДиР_РаспределениеЕНВД(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировкиКУДиР_ЕНВД);
	КонецЕсли;
	
	// Корректировка принятых в полной сумме.
	Для каждого СтрокаКорректировкиКУДиР Из ТаблицаКорректировкиКУДиР Цикл
		НоваяСтрока = ТаблицыДвижений.ТаблицаПринятых.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировкиКУДиР);
	КонецЦикла;
	
	// Корректировка принятых распределяемых.
	Для каждого СтрокаКорректировкиКУДиР Из ТаблицаКорректировкиКУДиР_ЕНВД Цикл
		НоваяСтрока = ТаблицыДвижений.ТаблицаПринятых.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировкиКУДиР);
	КонецЦикла; 
	
	Если ТипЗнч(ДвиженияРегистров) = Тип("Структура") Тогда
		Если ДвиженияРегистров.Свойство("КУДиР") Тогда
			Если ТипЗнч(ДвиженияРегистров.КУДиР) = Тип("ТаблицаЗначений") Тогда
				ДвиженияРегистров.КУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
				ДвиженияРегистров.КУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);
	
КонецПроцедуры

Процедура КорректировкаКУДиР_РаспределениеЕНВД(СтруктураШапкиДокумента, ПараметрыКорректировки, ТаблицаПринятых)

	ЭтоКорректировкаПрошлогоПериода = ПараметрыКорректировки.ЭтоКорректировкаПрошлогоПериода;
	
	// методы распределения расходов
	РасходыПоквартальноТек = (УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)
	                                     = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал)
								И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) ;
	Если ЭтоКорректировкаПрошлогоПериода Тогда
		РасходыПоквартальноПрошлыйГод = (УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыКорректировки.Организация, ПараметрыКорректировки.ДокументПоступленияДата)
		                                  = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал);
	КонецЕсли;
	
	ДатыКорректировки = ТаблицаПринятых.ВыгрузитьКолонку("ДатаКорректировки");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДатыКорректировки);
	
	// Корректировка может быть либо датой корректировки, либо концом корректируемого года
	// разложим таблицу корректировки КУДиР на текущую и "прошлогоднюю"
	СтруктураОтбора = Новый Структура("ДатаКорректировки", СтруктураШапкиДокумента.Дата);
	ТаблицаПринятыхТекПериод = ТаблицаПринятых.Скопировать(СтруктураОтбора);
	Если ЭтоКорректировкаПрошлогоПериода Тогда		
		СтруктураОтбора = Новый Структура("ДатаКорректировки", КонецГода(ПараметрыКорректировки.ДокументПоступленияДата));
		ТаблицаПринятыхПрошлыйПериод = ТаблицаПринятых.Скопировать(СтруктураОтбора);
	КонецЕсли;  
	
	// 1. Получим коэффициенты распределения расходов УСН и ЕНВД за корректируемые периоды
	
	КоэффициентТекущийПериод = 0;
	КоэффициентПрошлыйГод = 0;
	ТабКоэффициентыПоквартально = Новый ТаблицаЗначений;
	ТабКоэффициентыПоквартально.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТабКоэффициентыПоквартально.Колонки.Добавить("Коэффициент");
	
	//НачДатаПоквартально = Неопределено;
	//КонДатаПоквартально = Неопределено;
	
	//    текущий период
	Если ТаблицаПринятыхТекПериод.Количество() > 0 Тогда		
		
		Если НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда // если корректировка в 1 квартале - расходы еще не приняты, распределять нечего
			
			БазаРаспределенияРасходовУСН = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			База = ?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
					?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
			
			Если РасходыПоквартальноТек Тогда // получим границы, внутри которых требуется рассчитать коэффициенты
				
				НачДатаПоквартально = НачалоГода(СтруктураШапкиДокумента.Дата);
				КонДатаПоквартально = КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3));
				
				КоэффициентыЕНВД = ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(СтруктураШапкиДокумента, НачДатаПоквартально, КонДатаПоквартально, База);
				
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(КоэффициентыЕНВД, ТабКоэффициентыПоквартально);
				
			Иначе // получим коэффициент распределения за год
				
				ПараметрыДляЕНВД = Новый Структура("Организация, Дата", СтруктураШапкиДокумента.Организация, КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3)));				
				КоэффициентТекущийПериод = ПолучитьКоэффРаспределенияЕНВД(ПараметрыДляЕНВД, "Год", База);
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
	// 	 прошлый период
	Если ЭтоКорректировкаПрошлогоПериода И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда		
		
		БазаРаспределенияРасходовУСН = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыКорректировки.Организация, ПараметрыКорректировки.ДокументПоступленияДата);
		База = ?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
				?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
		
		Если РасходыПоквартальноПрошлыйГод Тогда // получим границы, внутри которых требуется рассчитать коэффициенты			
			
			НачДатаПоквартально = НачалоКвартала(ПараметрыКорректировки.ДокументПоступленияДата);
			КонДатаПоквартально = КонецГода(ПараметрыКорректировки.ДокументПоступленияДата);
			
			КоэффициентыЕНВД = ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(ПараметрыКорректировки, НачДатаПоквартально, КонДатаПоквартально, База);
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(КоэффициентыЕНВД, ТабКоэффициентыПоквартально);			
			
		Иначе // получим коэффициент распределения за год			
			
			ПараметрыДляЕНВД = Новый Структура("Организация, Дата", ПараметрыКорректировки.Организация, КонецГода(ПараметрыКорректировки.ДокументПоступленияДата));
			КоэффициентПрошлыйГод = ПолучитьКоэффРаспределенияЕНВД(ПараметрыДляЕНВД, "Год", База);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	// 2. Получим обороты по ежеквартальному списанию распределенных расходов УСН и ЕНВД за корректируемые периоды, если распределение было поквартальным
	
	РезультатЗапросаРасходыПоквартально = Неопределено;
	НомераТаблиц = Новый Структура;
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Если ЭтоКорректировкаПрошлогоПериода И РасходыПоквартальноПрошлыйГод И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходыПриУСНОбороты.ЭлементРасхода,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.Валюта,
		|	РасходыПриУСНОбороты.ОтражениеВУСН,
		|	РасходыПриУСНОбороты.СуммаРасход КАК Сумма,
		|	РасходыПриУСНОбороты.НДСРасход КАК НДС,
		|	НАЧАЛОПЕРИОДА(РасходыПриУСНОбороты.Период, КВАРТАЛ) КАК Период
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(
		|			&НачалоПериодаПрошл,
		|			&КонецПериодаПрошл,
		|			Квартал,
		|			Организация = &Организация
		|				И ОтражениеВУСН = Значение(Перечисление.ОтражениеВУСН.Распределяются)
		|				И РасчетныйДокумент = &РасчетныйДокумент
		|				И СтатусыОплатыРасходовУСН = Значение(Перечисление.СтатусыРасходовУСН.НеРаспределено)
		|				И СчетУчета В (&СчетаУчетаПрошл)
		|				И ВидРасхода В (&ВидыРасходаПрошл)
		|				И ЭлементРасхода В (&ЭлементыРасходаПрошл)) КАК РасходыПриУСНОбороты"
		;
		
		НомераТаблиц.Вставить("РаспределенныеПрошлыйПериод", НомераТаблиц.Количество());
		
		НачДатаПоквартально = ПараметрыКорректировки.ДокументПоступленияДата;
		КонДатаПоквартально = КонецГода(ПараметрыКорректировки.ДокументПоступленияДата);
		
		МассивНоменклатуры = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("ЭлементРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		МассивСчетовУчета = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
		
		МассивВидовРасхода = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("ВидРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивВидовРасхода);
		
		Запрос.УстановитьПараметр("НачалоПериодаПрошл",   НачДатаПоквартально);
		Запрос.УстановитьПараметр("КонецПериодаПрошл",    КонДатаПоквартально);
		Запрос.УстановитьПараметр("Организация",		  ПараметрыКорректировки.Организация);
		Запрос.УстановитьПараметр("РасчетныйДокумент",    ПараметрыКорректировки.ДокументПоступленияСсылка);
		Запрос.УстановитьПараметр("СчетаУчетаПрошл",	  МассивСчетовУчета);
		Запрос.УстановитьПараметр("ЭлементыРасходаПрошл", МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидыРасходаПрошл",     МассивВидовРасхода);
		
	КонецЕсли; 
	
	
	Если РасходыПоквартальноТек И ТаблицаПринятыхТекПериод.Количество() > 0
		 И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходыПриУСНОбороты.ЭлементРасхода,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.Валюта,
		|	РасходыПриУСНОбороты.ОтражениеВУСН,
		|	РасходыПриУСНОбороты.СуммаРасход КАК Сумма,
		|	РасходыПриУСНОбороты.НДСРасход КАК НДС,
		|	НАЧАЛОПЕРИОДА(РасходыПриУСНОбороты.Период, КВАРТАЛ) КАК Период
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(
		|			&НачалоПериодаТек,
		|			&КонецПериодаТек,
		|			Квартал,
		|			Организация = &Организация
		|				И ОтражениеВУСН = Значение(Перечисление.ОтражениеВУСН.Распределяются)
		|				И РасчетныйДокумент = &РасчетныйДокумент
		|				И СтатусыОплатыРасходовУСН = Значение(Перечисление.СтатусыРасходовУСН.НеРаспределено)
		|				И СчетУчета В (&СчетаУчетаТек)
		|				И ВидРасхода В (&ВидыРасходаТек)
		|				И ЭлементРасхода В (&ЭлементыРасходаТек)) КАК РасходыПриУСНОбороты"
		;
		
		НомераТаблиц.Вставить("РаспределенныеТекПериод", НомераТаблиц.Количество());
		
		НачДатаПоквартально = НачалоГода(СтруктураШапкиДокумента.Дата);
		КонДатаПоквартально = КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3));
		
		МассивНоменклатуры = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("ЭлементРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		МассивСчетовУчета = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
		
		МассивВидовРасхода = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("ВидРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивВидовРасхода);
		
		Запрос.УстановитьПараметр("НачалоПериодаТек",   НачДатаПоквартально);
		Запрос.УстановитьПараметр("КонецПериодаТек",    КонДатаПоквартально);
		Запрос.УстановитьПараметр("Организация",		ПараметрыКорректировки.Организация);
		Запрос.УстановитьПараметр("РасчетныйДокумент",  ПараметрыКорректировки.ДокументПоступленияСсылка);
		Запрос.УстановитьПараметр("СчетаУчетаТек",		МассивСчетовУчета);
		Запрос.УстановитьПараметр("ЭлементыРасходаТек",	МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидыРасходаТек",     МассивВидовРасхода);
		
	КонецЕсли;
	
	Если НомераТаблиц.Количество() > 0 Тогда
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапросаРасходыПоквартально = Запрос.ВыполнитьПакет();
		
		Ном = 0;
		Если НомераТаблиц.Свойство("РаспределенныеТекПериод", Ном) Тогда			
			РаспределенныеТекПериод = РезультатЗапросаРасходыПоквартально[Ном].Выгрузить();
			РаспределенныеТекПериод.Индексы.Добавить("ЭлементРасхода");
			РаспределенныеТекПериод.Индексы.Добавить("ВидРасхода");
			РаспределенныеТекПериод.Индексы.Добавить("СчетУчета");
		КонецЕсли;
		Если НомераТаблиц.Свойство("РаспределенныеПрошлыйПериод", Ном) Тогда			
			РаспределенныеПрошлыйПериод = РезультатЗапросаРасходыПоквартально[Ном].Выгрузить();
			РаспределенныеПрошлыйПериод.Индексы.Добавить("ЭлементРасхода");
			РаспределенныеПрошлыйПериод.Индексы.Добавить("ВидРасхода");
			РаспределенныеПрошлыйПериод.Индексы.Добавить("СчетУчета");
		КонецЕсли; 
	
	КонецЕсли; 
	
	// 3. Поправим корректируемые расходы по найденным коэффициентам распределения
	
	ТаблицаПринятых.Очистить();
	
	//    текущий период
	Если ТаблицаПринятыхТекПериод.Количество() > 0
		 И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда		
		
		Если РасходыПоквартальноТек Тогда // разбиваем корректировку КУДиР по результатам ежеквартального распределения УСН/ЕНВД
			
			РаспределеноСводныеИтоги = РаспределенныеТекПериод.Скопировать(, "ВидРасхода, ЭлементРасхода, СчетУчета, Сумма, НДС");
			РаспределеноСводныеИтоги.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета", "Сумма, НДС");
			
			Для каждого СтрокаКорректировки Из ТаблицаПринятыхТекПериод Цикл
				
				СуммаРаспределеноВсего = 0;
				НДСРаспределеноВсего = 0;
				
				СтруктураОтбора = Новый Структура("ВидРасхода, ЭлементРасхода, СчетУчета", СтрокаКорректировки.ВидРасхода, СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);
				
				// всего распределено за год
				СтрокиИтогов = РаспределеноСводныеИтоги.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаИтога Из СтрокиИтогов Цикл
					СуммаРаспределеноВсего = СуммаРаспределеноВсего + СтрокаИтога.Сумма;
					НДСРаспределеноВсего   = НДСРаспределеноВсего + СтрокаИтога.НДС;
				КонецЦикла; 
				
				СтрокиРаспределенных = РаспределенныеТекПериод.НайтиСтроки(СтруктураОтбора);
				
				Для каждого СтрокаРаспределения Из СтрокиРаспределенных Цикл
					
					КоэффЕНВДКвартал = 0;
					СтрокаКоэффициента = ТабКоэффициентыПоквартально.Найти(СтрокаРаспределения.Период, "Период");
					КоэффЕНВДКвартал = ?(СтрокаКоэффициента = Неопределено, 0, СтрокаКоэффициента.Коэффициент);
					
					К_Квартал_Сумма = ?(СуммаРаспределеноВсего = 0, 0, СтрокаРаспределения.Сумма/СуммаРаспределеноВсего);
					
					СуммаКорректировкиКвартал = К_Квартал_Сумма * СтрокаКорректировки.Сумма; 			  // сумма корректировки по принятому расходу, приходящаяся на тек. квартал
					СуммаПризнанногоКвартал = СуммаКорректировкиКвартал - Окр(КоэффЕНВДКвартал * СуммаКорректировкиКвартал, 2, 1); // сумма корректировки признанного расхода с учетом распределения УСН/ЕНВД за тек квартал
					
					К_Квартал_НДС = ?(НДСРаспределеноВсего = 0, 0, СтрокаРаспределения.НДС/НДСРаспределеноВсего);
					
					НДСКорректировкиКвартал = К_Квартал_НДС * СтрокаКорректировки.НДС; 			  // сумма корректировки по принятому НДС, приходящаяся на тек. квартал
					НДСПризнанногоКвартал = НДСКорректировкиКвартал - Окр(КоэффЕНВДКвартал * НДСКорректировкиКвартал, 2, 1); // сумма корректировки признанного НДС с учетом распределения УСН/ЕНВД за тек квартал
					
					Если СуммаКорректировкиКвартал <> 0 ИЛИ НДСКорректировкиКвартал <> 0 Тогда
						
						ТекстПериод = ПредставлениеПериода(НачалоКвартала(СтрокаРаспределения.Период), КонецКвартала(СтрокаРаспределения.Период), "ФП = Истина");
						
						НоваяСтрока = ТаблицаПринятых.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
						
						НоваяСтрока.Сумма = СуммаПризнанногоКвартал;
						НоваяСтрока.НДС   = НДСПризнанногоКвартал;
						
						//ТаблицаПринятых.ДатаКорректировки = КонецКвартала(СтрокаРаспределения.Период);
						Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда							
							НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		Иначе
			
			ТекстПериод = ПредставлениеПериода(НачалоГода(СтруктураШапкиДокумента.Дата), КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3)), "ФП = Истина");
			Для каждого СтрокаРасхода Из ТаблицаПринятыхТекПериод Цикл
				
				НоваяСтрока = ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма - Окр(КоэффициентТекущийПериод*НоваяСтрока.Сумма,2,1);
				НоваяСтрока.НДС   = НоваяСтрока.НДС - Окр(КоэффициентТекущийПериод*НоваяСтрока.НДС,2,1);
				
				Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					Если КоэффициентТекущийПериод > 0 Тогда
						НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	//    и прошлый период
	Если ЭтоКорректировкаПрошлогоПериода И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда		
		
		Если РасходыПоквартальноПрошлыйГод Тогда // разбиваем корректировку КУДиР по результатам ежеквартального распределения УСН/ЕНВД
			
			РаспределеноСводныеИтоги = РаспределенныеПрошлыйПериод.Скопировать(, "ВидРасхода, ЭлементРасхода, СчетУчета, Сумма, НДС");
			РаспределеноСводныеИтоги.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета", "Сумма, НДС");
			
			Для каждого СтрокаКорректировки Из ТаблицаПринятыхПрошлыйПериод Цикл
				
				СуммаРаспределеноВсего = 0;
				НДСРаспределеноВсего = 0;
				
				СтруктураОтбора = Новый Структура("ВидРасхода, ЭлементРасхода, СчетУчета", СтрокаКорректировки.ВидРасхода, СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);
				
				// всего распределено за год
				СтрокиИтогов = РаспределеноСводныеИтоги.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаИтога Из СтрокиИтогов Цикл
					СуммаРаспределеноВсего = СуммаРаспределеноВсего + СтрокаИтога.Сумма;
					НДСРаспределеноВсего   = НДСРаспределеноВсего + СтрокаИтога.НДС;
				КонецЦикла; 
				
				СтрокиРаспределенных = РаспределенныеПрошлыйПериод.НайтиСтроки(СтруктураОтбора);
				
				Для каждого СтрокаРаспределения Из СтрокиРаспределенных Цикл
					
					КоэффЕНВДКвартал = 0;
					СтрокаКоэффициента = ТабКоэффициентыПоквартально.Найти(СтрокаРаспределения.Период, "Период");
					КоэффЕНВДКвартал = ?(СтрокаКоэффициента = Неопределено, 0, СтрокаКоэффициента.Коэффициент);
					
					К_Квартал_Сумма = ?(СуммаРаспределеноВсего = 0, 0, СтрокаРаспределения.Сумма/СуммаРаспределеноВсего);
					
					СуммаКорректировкиКвартал = К_Квартал_Сумма * СтрокаКорректировки.Сумма; 			  // сумма корректировки по принятому расходу, приходящаяся на тек. квартал
					СуммаПризнанногоКвартал = СуммаКорректировкиКвартал - Окр(КоэффЕНВДКвартал * СуммаКорректировкиКвартал, 2, 1); // сумма корректировки признанного расхода с учетом распределения УСН/ЕНВД за тек квартал
					
					К_Квартал_НДС = ?(НДСРаспределеноВсего = 0, 0, СтрокаРаспределения.НДС/НДСРаспределеноВсего);
					
					НДСКорректировкиКвартал = К_Квартал_НДС * СтрокаКорректировки.НДС; 			  // сумма корректировки по принятому НДС, приходящаяся на тек. квартал
					НДСПризнанногоКвартал = НДСКорректировкиКвартал - Окр(КоэффЕНВДКвартал * НДСКорректировкиКвартал, 2, 1); // сумма корректировки признанного НДС с учетом распределения УСН/ЕНВД за тек квартал
					
					Если СуммаКорректировкиКвартал <> 0 ИЛИ НДСКорректировкиКвартал <> 0 Тогда
						
						ТекстПериод = ПредставлениеПериода(НачалоКвартала(СтрокаРаспределения.Период), КонецКвартала(СтрокаРаспределения.Период), "ФП = Истина");
						
						НоваяСтрока = ТаблицаПринятых.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
						
						НоваяСтрока.Сумма = СуммаПризнанногоКвартал;
						НоваяСтрока.НДС   = НДСПризнанногоКвартал;
						
						//ТаблицаПринятых.ДатаКорректировки = КонецКвартала(СтрокаРаспределения.Период);
						Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда							
							НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		Иначе
			
			ТекстПериод = ПредставлениеПериода(НачалоГода(ПараметрыКорректировки.ДокументПоступленияДата), КонецГода(ПараметрыКорректировки.ДокументПоступленияДата), "ФП = Истина");
			Для каждого СтрокаРасхода Из ТаблицаПринятыхПрошлыйПериод Цикл
				
				НоваяСтрока = ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма - Окр(КоэффициентПрошлыйГод*НоваяСтрока.Сумма,2,1);
				НоваяСтрока.НДС   = НоваяСтрока.НДС - Окр(КоэффициентПрошлыйГод*НоваяСтрока.НДС,2,1);
				
				Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					Если КоэффициентПрошлыйГод > 0 Тогда
						НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОДЕРЖАНИЕМ КУДиР ПРИ ПРОВЕДЕНИИ ДОКУМЕНТОВ ПО РЕГИСТРАМ УСН

Функция ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента, ДоговорКонтрагента = Неопределено)

	СтрокаСодержание = "";
	
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "Владелец");
	КонецЕсли;

	Если ВидОперации = "Поступление" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			СтрокаНазначениеАванса = "";
			Если Не ПустаяСтрока(ДокументСсылка.НазначениеАванса) Тогда
				СтрокаНазначениеАванса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					". Назначение аванса ""%1""", СокрЛП(ДокументСсылка.НазначениеАванса));
			КонецЕсли;
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Работник %1 предоставил авансовый отчет%2",
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизЛицо, СтруктураШапкиДокумента.Дата),
				СтрокаНазначениеАванса);
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПутевойЛист") Тогда
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Работник %1 предоставил путевой лист%2",
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизЛицо, СтруктураШапкиДокумента.Дата),
				СтрокаНазначениеАванса);
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Контрагентом ""%1"" по договору ""%2"" оказаны услуги ""%3""",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
				ДокументСсылка.ДоговорКонтрагента,
				СокрЛП(ДокументСсылка.Содержание));
				
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			// При поступлении в счет предоплаты могут быть признаны только расходы на материалы, поэтому товары не упоминаем.
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Поступили материалы от ""%1"" по договору ""%2""",
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
						ДокументСсылка.ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Оказаны услуги поставщиком ""%1"" по договору ""%2""",
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
						ДокументСсылка.ДоговорКонтрагента);
			Иначе
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Поступили материалы и услуги от ""%1"" по договору ""%2""",
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
						ДокументСсылка.ДоговорКонтрагента);
			КонецЕсли;
				
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним;
		КонецЕсли;

	ИначеЕсли ВидОперации = "Оплата" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			СтрокаНазначениеАванса = "";
			Если Не ПустаяСтрока(ДокументСсылка.НазначениеАванса) Тогда
				СтрокаНазначениеАванса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					". Назначение аванса ""%1""", СокрЛП(ДокументСсылка.НазначениеАванса));
			КонецЕсли;
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Работник %1 предоставил авансовый отчет%2",
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизЛицо, СтруктураШапкиДокумента.Дата),
				СтрокаНазначениеАванса);
			
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			СтрокаСпособОплаты = "с банковского счета";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СтрокаСпособОплаты = "наличными";
			КонецЕсли;
			
			ШаблонСодержания = "Оплачено %1 поставщику ""%2"" %3 ""%4""";
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СтрокаСпособОплаты,
					НаименованиеКонтрагентаНаПечать(Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДоговорКонтрагента);
			Иначе
				
				Если ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
					СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
						СтрокаСпособОплаты,
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
						"по договору",
						ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
					Договоры = ОбщегоНазначения.ВыгрузитьКолонку(ДокументСсылка.РасшифровкаПлатежа, "ДоговорКонтрагента", Истина);
					
					СтрокаДоговоров = ПредставлениеДляМассиваДоговоров(Договоры);
					
					СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
						СтрокаСпособОплаты,
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
						?(Договоры.Количество() > 1, "по договорам", "по договору"),
						СтрокаДоговоров);
				Иначе
					СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Оплачено %1 поставщику ""%2""",
						СтрокаСпособОплаты,
						НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата поставщику)";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ОплатаОтПокупателя" ИЛИ ВидОперации = "ОплатаОтФакторинговойКомпании" Тогда

		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			
			Если ВидОперации = "ОплатаОтФакторинговойКомпании" Тогда
				ШаблонСодержания = "%1 от факторинговой компании ""%2"" %3 ""%4""";
			Иначе
				ШаблонСодержания = "%1 от покупателя ""%2"" %3 ""%4""";
			КонецЕсли;
			
			СпособОплаты = "Поступила на банковский счет оплата";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СпособОплаты = "Получена оплата наличными";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				Договоры = ОбщегоНазначения.ВыгрузитьКолонку(ДокументСсылка.РасшифровкаПлатежа, "ДоговорКонтрагента", Истина);
				
				СтрокаДоговоров = ПредставлениеДляМассиваДоговоров(Договоры);
				
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					?(Договоры.Количество() > 1, "по договорам ", "по договору"),
					СтрокаДоговоров);
			Иначе
				
				Если ВидОперации = "ОплатаОтФакторинговойКомпании" Тогда
					ШаблонСодержания = "%1 от факторинговой компании ""%2""";
				Иначе
					ШаблонСодержания = "%1 от покупателя ""%2""";
				КонецЕсли;
				
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					ДокументСсылка.Контрагент);
					
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата от покупателя)";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ОплатаОтПокупателяБезЗакрывающихДокументов" Тогда

			ШаблонСодержания = "%1 от покупателя ""%2""";
			
			СпособОплаты = "Поступила оплата на банковский счет";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СпособОплаты = "Получена оплата наличными";
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата));
			Иначе
				СтрокаСодержание = СпособОплаты;
			КонецЕсли;
			
	ИначеЕсли ВидОперации = "ОплатаОтЭквайера" Тогда
		
		ШаблонСодержания = НСтр("ru = 'Зачислена выручка от продаж по платежным картам (банковским кредитам) банком-эквайером ""%1"" %2 ""%3""'");
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
				НаименованиеКонтрагентаНаПечать(Контрагент, СтруктураШапкиДокумента.Дата),
				"по договору",
				ДоговорКонтрагента);
		ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
				"по договору",
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
			Договоры = ОбщегоНазначения.ВыгрузитьКолонку(ДокументСсылка.РасшифровкаПлатежа, "ДоговорКонтрагента", Истина);
			
			СтрокаДоговоров = ПредставлениеДляМассиваДоговоров(Договоры);
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
				?(Договоры.Количество() > 1, "по договорам ", "по договору"),
				СтрокаДоговоров);
		Иначе
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Зачислена выручка от продаж по платежным картам (банковским кредитам) банком-эквайером ""%1""'"),
				ДокументСсылка.Контрагент);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ОплатаОтЭквайераБезЗакрывающихДокументов" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Зачислена выручка от продаж по платежным картам (банковским кредитам) банком-эквайером ""%1""'"),
			ДокументСсылка.Контрагент);
		
	ИначеЕсли ВидОперации = "ВозвратОтПодотчетногоЛица" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поступление денежных документов: принято от подотчетного лица %1'"),
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возвращены на счет подотчетные средства, не использованные работником %1'"),
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		Иначе
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возвращены в кассу подотчетные средства, не использованные работником %1'"),
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВозвратОтПоставщика" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			
			ШаблонСодержания = "%1: возвращены денежные средства поставщиком ""%2"" %3 ""%4""";
			
			СпособОплаты = "Поступление на банковский счет";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СпособОплаты = "Поступление в кассу";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				Договоры = ОбщегоНазначения.ВыгрузитьКолонку(ДокументСсылка.РасшифровкаПлатежа, "ДоговорКонтрагента", Истина);
				
				СтрокаДоговоров = ПредставлениеДляМассиваДоговоров(Договоры);
				
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					?(Договоры.Количество() > 1, "по договорам ", "по договору"),
					СтрокаДоговоров);
			Иначе
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1: возвращены денежные средства поставщиком ""%2""",
					СпособОплаты,
					ДокументСсылка.Контрагент);
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возвращены денежные средства поставщиком)";
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ВыручкаККМ") ИЛИ (ВидОперации = "ВыручкаСНТТ") Или ВидОперации = "РозничнаяВыручкаБезЗакрывающихДокументов" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			Если ЗначениеЗаполнено(ДокументСсылка.Контрагент) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Получена розничная выручка в торговой точке %1",
					ДокументСсылка.Контрагент);
				Иначе
					СтрокаСодержание = "Получена розничная выручка";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним;
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыдачаПодотчетномуЛицу" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Выданы из кассы денежные средства под отчет сотруднику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Перечислены денежные средства под отчет сотруднику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Выдача денежных документов: выдано под отчет сотруднику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента) Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (выдача под отчет сотруднику ""%2"")",
				МетаданныеДокумента.Синоним,
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизЛицо, СтруктураШапкиДокумента.Дата));
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (выдача под отчет сотруднику)";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Выплачена из кассы заработная плата по ведомости";
		Иначе
			СтрокаСодержание = "Перечислена заработная плата";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаЗПРаботнику" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Выплачена из кассы заработная плата работнику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		Иначе
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Перечислена заработная плата работнику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		КонецЕсли;
			
	ИначеЕсли ВидОперации = "ВыплатаДГПХРаботнику" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Оплачены из кассы работы по договору подряда сотруднику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		Иначе
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Перечислена оплата за работы по договору подряда сотруднику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда

		СтрокаСодержание = "Выдача из кассы: выплата депонированной заработной платы";

	ИначеЕсли ВидОперации = "ПеречислениеНалога" Или ВидОперации = "УплатаНалогаПоКвитанции" Тогда
		
		ОписаниеПлатежа = "";
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидНалоговогоОбязательства", МетаданныеДокумента)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйПериод", МетаданныеДокумента) Тогда
			
			ОписаниеПлатежа = ОписаниеНалоговогоПлатежа(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом,
				ДокументСсылка.ВидНалоговогоОбязательства, ДокументСсылка.НалоговыйПериод);
				
		КонецЕсли;
		
		СтрокаСодержание = ?(Не ПустаяСтрока(ОписаниеПлатежа), ОписаниеПлатежа, "Уплата налога");
		
	ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда

		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			
			ШаблонСодержания = "%1: возврат денежных средств покупателю ""%2"" %3 ""%4""";
			
			СпособОплаты = "Списание с банковского счета";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СпособОплаты = "Выдача из кассы";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					"по договору",
					ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				Договоры = ОбщегоНазначения.ВыгрузитьКолонку(ДокументСсылка.РасшифровкаПлатежа, "ДоговорКонтрагента", Истина);
				
				СтрокаДоговоров = ПредставлениеДляМассиваДоговоров(Договоры);
				
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
					СпособОплаты,
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					?(Договоры.Количество() > 1, "по договорам ", "по договору"),
					СтрокаДоговоров);
			Иначе
				СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1: возврат денежных средств покупателю ""%2""",
						СпособОплаты,
						ДокументСсылка.Контрагент);
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возврат денежных средств покупателю)";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВозвратПокупателюБезЗакрывающихДокументов" Тогда

		СпособОплаты = "Списание с банковского счета";
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СпособОплаты = "Выдача из кассы";
		КонецЕсли;
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1: возврат денежных средств покупателю ""%2""",
			СпособОплаты,
			НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата));

	ИначеЕсли ВидОперации = "РеализацияУслуг" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Оказаны производственные услуги контрагенту ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Переданы нематериальные активы контрагенту ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Оказаны услуги ""%1"" списку контрагентов",
				НаименованиеНоменклатурыНаПечать(ДокументСсылка.Номенклатура));
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Переданы основные средства контрагенту ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Оказаны услуги по переработке контрагенту ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Оказаны посреднические услуги в торговле (комиссионное вознаграждение); комитент ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним;
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда

		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Возвращены товары/материалы поставщику ""%1"" по договору ""%2""",
			НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
			ДокументСсылка.ДоговорКонтрагента);

	ИначеЕсли ВидОперации = "НачислениеЗП" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Представлен больничный лист работником %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизическоеЛицо, СтруктураШапкиДокумента.Дата));
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Начислены отпускные работнику %1",
				НаименованиеФизлицаНаПечать(ДокументСсылка.ФизическоеЛицо, СтруктураШапкиДокумента.Дата));
		Иначе
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Начислена заработная плата и взносы за %1",
				Формат(СтруктураШапкиДокумента.ПериодРегистрации,"ДФ=""ММММ гггг"""));
		КонецЕсли;

	ИначеЕсли ВидОперации = "НачислениеИмущественныхНалогов" Тогда
		
		СтрокаСодержание = "Начислены имущественные налоги";
		
	ИначеЕсли (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионера")
		ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионераНДС") Тогда

		ШаблонСодержания = "Получен отчет комиссионера ""%1"" по договору ""%2""; %3";
		
		ОписаниеОперации = "оказаны посреднические услуги в торговле"; // По умолчанию
		
		Если ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда
			ОписаниеОперации = "вознаграждение комиссионера зачтено из выручки от реализации";
		ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда
			ОписаниеОперации = "НДС с вознаграждения комиссионера зачтен из выручки от реализации";
		КонецЕсли;
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
			ДокументСсылка.ДоговорКонтрагента,
			ОписаниеОперации);

		ИначеЕсли ВидОперации = "РеализацияКомиссионером"
			ИЛИ ВидОперации = "РеализацияОтгруженныхТоваров" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Получен отчет комиссионера ""%1"" по договору ""%2""; реализованы товары",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Реализованы товары, отгруженные покупателю ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ВидОперации = "Розница" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Реализованы товары (услуги) розничным покупателям в торговой точке %1",
					ДокументСсылка.Склад);
		КонецЕсли;

	ИначеЕсли ВидОперации = "ПродажаПодарочныхСертификатов" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Реализованы подарочные сертификаты в торговой точке %1",
					ДокументСсылка.Склад);
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВПереработку" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Передача материалов в переработку ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Поступление из переработки: контрагентом ""%1"" оказаны услуги по переработке, договор ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ВидОперации = "ИзПереработки" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Поступление из переработки: списаны материалы, переданные в переработку контрагенту ""%1"" по договору ""%2""",
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
					ДокументСсылка.ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ВидОперации = "Реализация" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Событие = "Реализованы товары и услуги";
			
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				Событие = "Реализованы товары";
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				Событие = "Оказаны услуги";
			КонецЕсли;
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 покупателю ""%2"" по договору ""%3""",
				Событие,
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата),
				ДокументСсылка.ДоговорКонтрагента);
			
		КонецЕсли;

	ИначеЕсли ВидОперации = "Списание" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Списаны товары и материалы со склада ""%1"" на недостачи и потери от порчи ценностей",
				ДокументСсылка.Склад);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Переданы материалы в эксплуатацию со склада ""%1""",
				ДокументСсылка.Склад);
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная")) Тогда
			
			НаправлениеСписания = "";
			Если Не ДокументСсылка.СчетаУчетаЗатратВТаблице Тогда
				НаправлениеСписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("на %1",
					НРег(ДокументСсылка.СчетЗатрат.Наименование));
			КонецЕсли;
			
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Списаны материалы по требованию-накладной со склада ""%1"" %2",
				ДокументСсылка.Склад,
				НаправлениеСписания);
			
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Списаны материалы по требованию-накладной со склада ""%1"" %2",
				ДокументСсылка.Склад,
				НРег(ДокументСсылка.СчетЗатрат.Наименование));
		КонецЕсли;

	ИначеЕсли ВидОперации = "ПереносЗадолженности" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Перенос задолженности контрагента ""%1""",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор, СтруктураШапкиДокумента.Дата));
		
	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаДебитор" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Проведен взаимозачет между ""%1""(дебитор) и ""%2""(кредитор); по дебиторской задолженности",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор, СтруктураШапкиДокумента.Дата),
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентКредитор, СтруктураШапкиДокумента.Дата));
		
	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаКредитор" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Проведен взаимозачет между ""%1""(дебитор) и ""%2""(кредитор); по кредиторской задолженности",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор, СтруктураШапкиДокумента.Дата),
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентКредитор, СтруктураШапкиДокумента.Дата));
		
	ИначеЕсли ВидОперации = "СписаниеДебиторскойЗадолженности" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Списание дебиторской задолженности контрагента ""%1""",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор, СтруктураШапкиДокумента.Дата));
		
	ИначеЕсли ВидОперации = "СписаниеКредиторскойЗадолженности" Тогда
		
		СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Списание кредиторской задолженности контрагента ""%1""",
				НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор, СтруктураШапкиДокумента.Дата));
		
	ИначеЕсли ВидОперации = "ГТД" Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерГТД", МетаданныеДокумента) Тогда
			СтрокаСодержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ввоз ТМЦ по ГТД № %1",
				ДокументСсылка.НомерГТД);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаСодержание) Тогда
		СтрокаСодержание = МетаданныеДокумента.Синоним;
	КонецЕсли;

	Возврат СтрокаСодержание;

КонецФункции

// Собирает текст содержания КУДиР из частей, содержащихся в переданной структуре
//
// Параметры:
//  СоставноеСодержание  - Структура - содержит части содержания КУДиР, с обязательным свойством "Событие"
//                         Подробнее - см. НовыйСоставноеСодержаниеКУДиР()
Функция СобратьСодержаниеКУДиР(СоставноеСодержание)
	
	СтрокиСодержания = Новый Массив;
	
	Для каждого КлючИЗначение Из СоставноеСодержание Цикл
		Если КлючИЗначение.Ключ = "Событие" Тогда
			// Событие обязательно располагается в начале содержания
			СтрокиСодержания.Вставить(0, ЗавершенноеПредложение(КлючИЗначение.Значение));
		ИначеЕсли Не ПустаяСтрока(КлючИЗначение.Значение) Тогда
			СтрокиСодержания.Добавить(ЗавершенноеПредложение(КлючИЗначение.Значение));
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиСодержания, " ");
	
КонецФункции

Функция СобратьСодержаниеКУДиРПоРезультатамПризнанияРасходов(КУДиР, ВидОперации, Расход, ДеревоРасходов, СтруктураШапкиДокумента)
	
	// В зависимости от особенностей конкретной операции уточняем текст события и/или добавляем пояснение в конец содержания.
	
	Пояснение = "";     // Текст пояснения - будет добавлен в конец исходного пояснения как отдельное предложение.
	ДеталиСобытия = ""; // Детали события - текст будет добавлен к предложению, описывающему событие.
	
	// Один документ может формировать несколько записей о признании расходов.
	// Уникальное содержание для каждой записи определяется в данной процедуре.
	// Однако "общая" часть содержания должна остаться одинаковой для всех записей, поэтому исходная структура КУДиР должна остаться неизменной.
	КУДиРДляТекущейЗаписи = Новый Структура;
	КУДиРДляТекущейЗаписи.Вставить("ЧастиСодержания",
		ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КУДиР.ЧастиСодержания));
	
	НаправлениеРасходов = ?(Расход.Сумма > 0, "Признаны", "Сторнированы");
	
	Если ВидОперации = "РаспределениеЕНВД" Тогда
		
		Пояснение = НаправлениеРасходов + " расходы по результатам распределения (УСН/ЕНВД)";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
		
		Если ВидОперации = "Реализация" Или ВидОперации = "Розница" Тогда
			Пояснение = "Себестоимость товаров включена в расходы";
		ИначеЕсли ВидОперации = "Оплата" Тогда
			ДеталиСобытия = НазначениеОплатыПоставщикуДляПризнанияРасхода(Расход);
		ИначеЕсли ВидОперации = "Поступление" И СтруктураШапкиДокумента.ВидДокумента <> "АвансовыйОтчет"
			И СтруктураШапкиДокумента.ВидДокумента <> "ПутевойЛист" Тогда
			ДеталиСобытия = "в счет предварительной оплаты";
		ИначеЕсли ВидОперации = "БезвозмезднаяПередача" Тогда
			Пояснение = НаправлениеРасходов + " расходы на приобретение безвозмездно переданных материалов";
		Иначе
			Пояснение = НаправлениеРасходов + " расходы " + ОписаниеРасходовНаТМЦ(Расход);
		Конецесли;
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
		
		Пояснение = НаправлениеРасходов + " транспортно-заготовительные расходы";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
		
		Если Расход.ЭтоТаможенныйНДС Тогда
			Пояснение = НаправлениеРасходов + " расходы на уплату НДС при ввозе на территорию РФ";
		Иначе
			Пояснение = НаправлениеРасходов + " расходы на уплату таможенных платежей";
		КонецЕсли;
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС Тогда
		
		Пояснение = НаправлениеРасходов + " расходы на уплату НДС при ввозе из стран-участниц Таможенного союза";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
		
		Если ВидОперации = "Оплата" Тогда
			ДеталиСобытия = "за оказанные услуги";
		ИначеЕсли ВидОперации = "Поступление" И СтруктураШапкиДокумента.ВидДокумента <> "АвансовыйОтчет" Тогда
			ДеталиСобытия = "в счет предварительной оплаты";
		ИначеЕсли ВидОперации = "УслугиФакторинга" Тогда
			Пояснение = НаправлениеРасходов + " расходы на факторинговые услуги";
		Иначе
			Пояснение = НаправлениеРасходов + " расходы на услуги сторонних организаций";
		КонецЕсли;
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Командировки Тогда
		
		Пояснение = НаправлениеРасходов + " командировочные расходы";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ЛизинговыеПлатежи Тогда
		
		Пояснение = НаправлениеРасходов + " расходы на уплату лизинговых платежей";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
		
		Пояснение = НаправлениеРасходов + " расходы будущих периодов";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
		
		Пояснение = НаправлениеРасходов + " расходы на оплату труда";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
		
		Если (ВидОперации = "НачислениеЗП" Или ВидОперации = "НачислениеИмущественныхНалогов")
			И ДеревоРасходов.Колонки.Найти("КлючУникальности") <> Неопределено
			И ЗначениеЗаполнено(Расход.КлючУникальности) Тогда
			Пояснение = ОписаниеЗачетаНалоговПриНачислении(Расход.КлючУникальности) + " ";
		ИначеЕсли ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
			// Для этих расходов событие полностью переопределяется
			ТекстСобытия = УчетСтраховыхВзносовИП.СодержаниеОперацииУплатыВзносов(Расход.СчетУчета,
				Расход.ВидСтраховогоВзноса, Расход.СтраховойПериод);
			ДополнитьСодержаниеКУДиР(КУДиРДляТекущейЗаписи, "Событие", ТекстСобытия, Истина);
		Иначе
			// При уплате налогов содержание полностью описано в Событии
		КонецЕсли;
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
		
		Пояснение = НаправлениеРасходов + " расходы на приобретение нематериальных активов";
		
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
		
		Пояснение = ?(Расход.Сумма > 0, "Включен в расходы", "Исключен из расходов")
			+ " предъявленный поставщиком НДС";
		
		Если ВидОперации = "Поступление" И СтруктураШапкиДокумента.ВидДокумента <> "АвансовыйОтчет" Тогда
			ДеталиСобытия = "в счет предварительной оплаты";
		КонецЕсли;
		
	Иначе
		// Не удалось классифицировать принимаемые расходы
		Пояснение = НаправлениеРасходов + " расходы";
		
	КонецЕсли;
	
	Если ВидОперации = "КорректировкаПоступления" Или ВидОперации = "КорректировкаРеализации" Тогда
		Если ДеревоРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено Тогда
			Если ЗначениеЗаполнено(Расход.ДатаКорректировки) И Год(Расход.ДатаКорректировки) < Год(СтруктураШапкиДокумента.Дата) Тогда
				Пояснение = Пояснение + ", признанные в прошлом периоде";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьСодержаниеКУДиР(КУДиРДляТекущейЗаписи, "Событие", ДеталиСобытия);
	ДополнитьСодержаниеКУДиР(КУДиРДляТекущейЗаписи, "Пояснение", Пояснение);
	
	// Если есть - добавим дополнительное описание
	Если ДеревоРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
		Если ЗначениеЗаполнено(Расход.ДополнительноеОписание) Тогда
			ДополнитьСодержаниеКУДиР(КУДиРДляТекущейЗаписи, "ДополнительноеОписание", Расход.ДополнительноеОписание);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СобратьСодержаниеКУДиР(КУДиРДляТекущейЗаписи.ЧастиСодержания);
	
КонецФункции

// Конструктор структуры, хранящей составные части содержания записи в КУДиР, формируемой при проведении.
// Хранится в составе "общей" структуры данных КУДиР во время проведения документа в УСН.
// Дозаполняется при формировании движений "по месту".
// Для заполнения использовать ДополнитьСодержаниеКУДиР().
//
// Подробнее - см. описание в тексте функции.
//
Функция НовыйСоставноеСодержаниеКУДиР()
	
	// При проведении документа в УСН итоговое содержание получаем конкатенацией составных частей по шаблону:
	//
	// Итоговое содержание = "<Событие>. <Пояснение>. [Дополнение1]. ... [ДополнениеN]"
	//
	// Событие - обязательная часть содержания. Характеризует хозяйственную операцию в целом.
	//  Формируется перед формированием таблиц движений на основе контекста операции.
	//  В содержании КУДиР всегда является первым предложением.
	//  Как правило, определяется только реквизитами проводимого документа и не зависит от результата проведения.
	//  Возможны исключения:
	//      а) Событие определяется непосредственно в процессе заполнения таблиц движений.
	//         Бывает, когда содержание КУДиР определено в самом документе.
	//         Например, при прочих поступлениях/списаниях денежных средств.
	//      б) Событие необходимо дополнить деталями, которые можно получить только из таблиц движений.
	//         Это нужно, когда один документ может отражать достаточно разнородные операции.
	//         Например - оплата поставщику может производиться за товары, материалы, услуги и т.п.,
	//         но до формирования таблицы принимаемых расходов нельзя указать,
	//         какие расходы будут оплачены и какой вид оплаченных расходов внесет "вклад" в КУДиР.
	//
	// Пояснение - необязательная часть содержания. Явно объявляется в конструкторе, поскольку требуется большинству операций.
	//  Формируется непосредственно при выполнении расчетов УСН в процедурах-обработчиках конкретных видов операций.
	//  Поясняет детали операции, которые можно определить при непосредственном формировании движений,
	//  но недоступные при завершающей обработке итоговых таблиц.
	//  Является самодостаточным предложением (предложениями).
	//
	// Дополнение1, ..., ДополнениеN - необязательные части содержания.
	//  Используются при необходимости дополнить содержание отдельными специфичными смысловыми частями.
	//  В конструкторе не объявляются, при необходимости инициализируются разработчиком по месту.
	//  Способ инициализации - передать уникальное имя во 2-й параметр процедуры ДополнитьСодержаниеКУДиР() "ИмяДополняемойЧасти".
	//  Требования к имени аналогичны требованиям к ключам структур.
	//  Каждое дополнение - завершенное предложение.
	
	ЧастиСодержания = Новый Структура("Событие, Пояснение", "", "");
	
	Возврат ЧастиСодержания;
	
КонецФункции

Функция НовыйСтруктураКУДиР()

	КУДиР = Новый Структура("Графа4, Графа5, Графа6, Графа7, НДС, ДоходЕНВД, ДоходТорговыйСбор",
		0, 0, 0, 0, 0, 0, 0);
	
	КУДиР.Вставить("ЧастиСодержания", НовыйСоставноеСодержаниеКУДиР());
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов;
	
	РасшифровкаПоДоговорам = Новый ТаблицаЗначений();
	РасшифровкаПоДоговорам.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РасшифровкаПоДоговорам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	РасшифровкаПоДоговорам.Колонки.Добавить("ТипОплаты",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));

	ОписаниеТиповЧисло  = БухгалтерскийУчетКлиентСервер.ТипСумма();
	ОписаниеТиповСтрока = МетаданныеРегистра.Реквизиты.Содержание.Тип;

	Для Каждого КлючИЗначение Из КУДиР Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
			РасшифровкаПоДоговорам.Колонки.Добавить(КлючИЗначение.Ключ, ОписаниеТиповЧисло);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим дополнительные колонки
	РасшифровкаПоДоговорам.Колонки.Добавить("ДоходКомитента", ОписаниеТиповЧисло);
	РасшифровкаПоДоговорам.Колонки.Добавить("ДоходПатент", ОписаниеТиповЧисло);
	РасшифровкаПоДоговорам.Колонки.Добавить("СуммаНаЗакупкуДляКомитента", ОписаниеТиповЧисло);
	РасшифровкаПоДоговорам.Колонки.Добавить("ИсключенныйНДС", ОписаниеТиповЧисло);
	
	РасшифровкаПоДоговорам.Колонки.Добавить("Пояснение", ОписаниеТиповСтрока);
	
	КУДиР.Вставить("РасшифровкаПоДоговорам", РасшифровкаПоДоговорам);
	
	Возврат КУДиР;

КонецФункции

Процедура СформироватьСобытиеВСодержанииКУДиР(КУДиР, СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента)
	
	ОписаниеСобытия = ОписаниеСобытияДляКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);
	
	ЧастиСодержания = КУДиР.ЧастиСодержания;
	ЧастиСодержания.Вставить("Событие", ОписаниеСобытия);
	
КонецПроцедуры

Процедура ДополнитьСодержаниеКУДиР(КУДиР, ИмяДополняемойЧасти, ТекстДополнения, ЗамещатьСуществующее = Ложь)
	
	ЧастиСодержания = КУДиР.ЧастиСодержания;
	
	Если ЗамещатьСуществующее Или Не ЧастиСодержания.Свойство(ИмяДополняемойЧасти) Тогда
		ЧастиСодержания.Вставить(ИмяДополняемойЧасти, ТекстДополнения);
	ИначеЕсли Не ПустаяСтрока(ТекстДополнения) Тогда
		ТекущийТекст = ЧастиСодержания[ИмяДополняемойЧасти];
		Разделитель  = ?(ПустаяСтрока(ТекущийТекст), "", " ");
		ЧастиСодержания.Вставить(ИмяДополняемойЧасти, СокрЛП(ТекущийТекст) + Разделитель + СокрЛП(ТекстДополнения));
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеДляМассиваДоговоров(МассивДоговоров)
	
	СтрокиПоДоговорам = Новый Массив;
	
	Для каждого Договор Из МассивДоговоров Цикл
		СтрокиПоДоговорам.Добавить(Строка(Договор));
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПоДоговорам, ", ");
	
КонецФункции

Функция СведенияОВидахНоменклатурыВСчетахУчета(СчетаУчета)
	
	ЕстьТовары       = Ложь;
	ЕстьМатериалы    = Ложь;
	ЕстьТопливоВБаке = Ложь;
	
	Счет10    = ПланыСчетов.Хозрасчетный.Материалы;
	Счет10032 = ПланыСчетов.Хозрасчетный.ТопливоВБаке;
	
	Для Каждого СчетУчета Из СчетаУчета Цикл
		
		ЕстьМатериалы    = ЕстьМатериалы Или БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, Счет10);
		ЕстьТовары       = ЕстьТовары Или Не БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, Счет10);
		ЕстьТопливоВБаке = ЕстьТопливоВБаке Или БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, Счет10032);
		
		Если ЕстьТовары И ЕстьМатериалы И ЕстьТопливоВБаке Тогда // Незачем больше проверять счета
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ЕстьТовары",       ЕстьТовары);
	СтруктураРезультат.Вставить("ЕстьМатериалы",    ЕстьМатериалы);
	СтруктураРезультат.Вставить("ЕстьТопливоВБаке", ЕстьТопливоВБаке);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОписаниеРасходовНаТМЦ(СтрокаРасхода)
	
	ОписаниеРасходов = "на приобретение товаров и материалов"; // по умолчанию
	
	Если СтрокаРасхода.Строки.Количество() > 0 Тогда
		
		СчетаУчета = ОбщегоНазначения.ВыгрузитьКолонку(СтрокаРасхода.Строки, "СчетУчета", Истина);
		
		СведенияОВидахНоменклатуры = СведенияОВидахНоменклатурыВСчетахУчета(СчетаУчета);
		
		Если СведенияОВидахНоменклатуры.ЕстьТопливоВБаке Тогда
			ОписаниеРасходов = "на содержание служебного транспорта";
		ИначеЕсли Не СведенияОВидахНоменклатуры.ЕстьТовары Тогда
			ОписаниеРасходов = "на приобретение материалов";
		ИначеЕсли Не СведенияОВидахНоменклатуры.ЕстьМатериалы Тогда
			ОписаниеРасходов = "на приобретение товаров";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеРасходов;
	
КонецФункции

Функция НазначениеОплатыПоставщикуДляПризнанияРасхода(СтрокаРасхода)
	
	НазначениеОплаты = "за товары и материалы"; // по умолчанию
	
	Если СтрокаРасхода.Строки.Количество() > 0 Тогда
		
		СчетаУчета = ОбщегоНазначения.ВыгрузитьКолонку(СтрокаРасхода.Строки, "СчетУчета", Истина);
		
		СведенияОВидахНоменклатуры = СведенияОВидахНоменклатурыВСчетахУчета(СчетаУчета);
		
		Если Не СведенияОВидахНоменклатуры.ЕстьТовары Тогда
			НазначениеОплаты = "за материалы";
		ИначеЕсли Не СведенияОВидахНоменклатуры.ЕстьМатериалы Тогда
			НазначениеОплаты = "за товары";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НазначениеОплаты;
	
КонецФункции

Функция НазваниеНалога(ВидНалога)
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	Название = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(Налог);
	
	// Если в назначении платежа указывается регистрационный номер - очистим эту часть, для КУДиР информация не нужна.
	Если СтрНайти(Название, "Регистрационный номер") > 0 Тогда
		// Рег. номер указывается во 2-м предложении.
		// Нужно найти 1-е предложение (до точки) и оставить только его.
		Предложения = СтрРазделить(Название, ".", Ложь);
		Название    = Предложения[0];
	КонецЕсли;
	
	Название = СокрЛП(Название);
	
	Если Не ПустаяСтрока(Название) И Не ПервыеСимволыСтрокиВВерхнемРегистре(Название, 2) Тогда
		Название = НРег(Лев(Название, 1)) + Сред(Название, 2);
	КонецЕсли;
	
	Возврат Название;
	
КонецФункции

// Определяет, что первые символы в строке являются заглавными буквами.
//
// Параметры:
//  ПроверяемаяСтрока   - Строка - проверяемая строка
//  КоличествоСимволов  - Число - количество символов в начале строки,
//   которые требуется проверить на верхний регистр.
//
// Возвращаемое значение:
//   Булево - Истина, если указанное количество первых символов в врехнем регистре.
//    Если передана пустая строка, или длина проверяемой строки меньше количества проверяемых символов, возвращается Ложь.
//
Функция ПервыеСимволыСтрокиВВерхнемРегистре(ПроверяемаяСтрока, КоличествоСимволов)
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Или СтрДлина(ПроверяемаяСтрока) < КоличествоСимволов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоСтрокиВВерхнемРегистре = ВРег(Лев(ПроверяемаяСтрока, КоличествоСимволов));
	
	Возврат СтрНачинаетсяС(ПроверяемаяСтрока, НачалоСтрокиВВерхнемРегистре);
	
КонецФункции

Функция ОписаниеЗачетаНалоговПриНачислении(СчетУчета)
	
	Описание = "";
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(СчетУчета);
	
	НазваниеНалога = НазваниеНалога(ВидНалога);
	
	Если ПустаяСтрока(НазваниеНалога) Тогда
		Возврат Описание;
	КонецЕсли;
	
	ЭтоСтраховыеВзносы = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(ВидНалога);
	
	СобытиеУплаты    = ?(ЭтоСтраховыеВзносы, "Уплаченные ранее", "Уплаченный ранее");
	СобытиеПризнания = ?(ЭтоСтраховыеВзносы, "включены", "включен");
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3 в расходы.",
		СобытиеУплаты, НазваниеНалога, СобытиеПризнания);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеНалоговогоПлатежа(СчетУчета, ВидПлатежаВГосБюджет, ПериодУплаты = Неопределено)
	
	Описание = "";
	
	Если УчетСтраховыхВзносовИП.ЭтоСчетУчетаСтраховыхВзносовИП(СчетУчета) Тогда
		
		Описание = УчетСтраховыхВзносовИП.СодержаниеОперацииУплатыВзносов(СчетУчета, ВидПлатежаВГосБюджет, ПериодУплаты);
		
	Иначе
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(СчетУчета);
		
		НазваниеНалога = НазваниеНалога(ВидНалога);
		
		Если ПустаяСтрока(НазваниеНалога) Тогда
			Возврат Описание;
		КонецЕсли;
		
		ЭтоСтраховыеВзносы = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(ВидНалога);
		
		ЧастиОписания = Новый Массив;
		
		ЧастиОписания.Добавить(?(ЭтоСтраховыеВзносы, "Уплачены", "Уплачен"));
		ЧастиОписания.Добавить(НазваниеНалога);
		
		Если ЗначениеЗаполнено(ПериодУплаты) И ЭтоСтраховыеВзносы Тогда // Для страховых взносов укажем месяц уплаты
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1 г'"),
				Формат(ПериодУплаты, "ДФ='MMMM yyyy'"));
			ЧастиОписания.Добавить(НРег(ПредставлениеПериода));
		КонецЕсли;
		
		Описание = СтрСоединить(ЧастиОписания, " ") + ".";
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ЗавершенноеПредложение(Знач Строка)
	
	Результат = СокрЛП(Строка);
	
	Если Не ПустаяСтрока(Результат) Тогда
		Если Прав(Результат, 1) <> "." Тогда
			Результат = Результат + ".";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименование контрагента для содержания КУДиР
// с учетом истории изменения наименования
//
Функция НаименованиеКонтрагентаНаПечать(Контрагент, ДатаСведений)
	
	НаименованияКонтрагента = Справочники.Контрагенты.НаименованияНаДату(Контрагент, ДатаСведений);
	
	Возврат НаименованияКонтрагента.НаименованиеДляПечатныхФорм;

КонецФункции

// Возвращает представление физлица для содержания КУДиР
// с учетом истории изменений ФИО
//
Функция НаименованиеФизлицаНаПечать(ФизЛицо, ДатаСведений)
	
	СведенияОФизЛице = Новый Структура("Представление");
	
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СведенияОФизЛице = УчетЗарплаты.ДанныеФизическихЛиц(Неопределено, ФизЛицо, ДатаСведений, Ложь);
	Иначе
		СведенияОФизЛице.Вставить("Представление", Строка(ФизЛицо));
	КонецЕсли;
	
	Возврат СведенияОФизЛице.Представление;
	
КонецФункции

// Получить полное наименование номенклатуры для содержания КУДиР
//
Функция НаименованиеНоменклатурыНаПечать(Номенклатура)
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное");
	
	Если Не ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
		Возврат РеквизитыНоменклатуры.НаименованиеПолное;
	Иначе
		Возврат РеквизитыНоменклатуры.Наименование;
	КонецЕсли;
	
КонецФункции

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ

//Возвращает представление вида операции платежного документа
//
Функция ВидОперацииДДС(СтруктураШапкиДокумента) Экспорт

	ПредставлениеВида = "";
	ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		Если СтруктураШапкиДокумента.Свойство("БезЗакрывающихДокументов") 
			И СтруктураШапкиДокумента.БезЗакрывающихДокументов Тогда
			ПредставлениеВида = "ОплатаОтПокупателяБезЗакрывающихДокументов";
		Иначе
			ПредставлениеВида = "ОплатаОтПокупателя";
		КонецЕсли;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		
		Если СтруктураШапкиДокумента.Свойство("БезЗакрывающихДокументов") 
			И СтруктураШапкиДокумента.БезЗакрывающихДокументов Тогда
			ПредставлениеВида = "ОплатаОтЭквайераБезЗакрывающихДокументов";
		Иначе
			ПредставлениеВида = "ОплатаОтЭквайера";
		КонецЕсли;
	
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании) Тогда

		ПредставлениеВида = "ОплатаОтФакторинговойКомпании";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка) Тогда

		Если СтруктураШапкиДокумента.Свойство("БезЗакрывающихДокументов") 
			И СтруктураШапкиДокумента.БезЗакрывающихДокументов Тогда
			ПредставлениеВида = "РозничнаяВыручкаБезЗакрывающихДокументов";
		Иначе
			ПредставлениеВида = "ВыручкаККМ";
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВыручкаСНТТ", МетаданныеДокумента) Тогда
				ПредставлениеВида = ?(СтруктураШапкиДокумента.Ссылка.ВыручкаСНТТ, "ВыручкаСНТТ", "ВыручкаККМ");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) Тогда

		Если СтруктураШапкиДокумента.Свойство("БезЗакрывающихДокументов") 
			И СтруктураШапкиДокумента.БезЗакрывающихДокументов Тогда
			ПредставлениеВида = "ВозвратПокупателюБезЗакрывающихДокументов";
		Иначе
			ПредставлениеВида = "ВозвратПокупателю";
		КонецЕсли;

	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		//При объекте "Доходы" для всех операций, кроме расчетов с покупателями, используются реквизиты платежного документа
		ПредставлениеВида = "ПрочееДДС";
		
		Если СтруктураШапкиДокумента.Дата >= '20130101' Тогда
			// с 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
				ПредставлениеВида = "ПродажаВалюты";
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				ПредставлениеВида = "ПокупкаВалюты";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица Тогда
		
		ПредставлениеВида = "ВозвратОтПодотчетногоЛица";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда

		ПредставлениеВида = "ВозвратОтПоставщика";

	ИначеЕсли
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов) Тогда
		
		ПредставлениеВида = "ПрочееДДС";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20130101' Тогда
			// с 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются
			ПредставлениеВида = "ПрочееДДС";
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
				ПредставлениеВида = "ПродажаВалюты";
			Иначе
				ПредставлениеВида = "ПокупкаВалюты";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику) Тогда

		ПредставлениеВида = "Оплата";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу) Тогда

		ПредставлениеВида = "ВыдачаПодотчетномуЛицу";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП) Тогда

		ПредставлениеВида = "ВыплатаЗП";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику) Тогда

		ПредставлениеВида = "ВыплатаЗПРаботнику";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда) Тогда
		
		Если СтруктураШапкиДокумента.Свойство("ОплатаПоДГПХ") Тогда
			ПредставлениеВида = "ВыплатаДГПХРаботнику";
		Иначе
			ПредставлениеВида = "ПрочееДДС";
		КонецЕсли;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов) ИЛИ 
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов) Тогда

		ПредставлениеВида = "ВыплатаДепонентов";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента)
			И (ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом)) Тогда
			
			СчетНалога = СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаНалоговИВзносов  = УчетУСН.СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
			
			ЭтоНалогИлиВзнос  = СчетаНалоговИВзносов.Найти(СчетНалога) <> Неопределено;
			
			ПлатежУчитываетсяВРасходах = Ложь;
			Если ЭтоНалогИлиВзнос Тогда
				
				Если (ОбщегоНазначения.ЕстьРеквизитОбъекта("СубконтоДт1", МетаданныеДокумента)
					И ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СубконтоДт1)
					И ТипЗнч(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет")) Тогда
				
					ВидыНалоговыхПлатежей      = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
					ПлатежУчитываетсяВРасходах = ВидыНалоговыхПлатежей.Найти(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) <> Неопределено;
					
				Иначе
					// Уплата НДС налоговым агентом (счет 68.32)
					ПлатежУчитываетсяВРасходах = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЭтоНалогИлиВзнос ИЛИ НЕ ПлатежУчитываетсяВРасходах Тогда
				ПредставлениеВида = "ПрочееДДС";
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
				ПредставлениеВида = "УплатаНалогаПоКвитанции";
			Иначе
				ПредставлениеВида = "ПеречислениеНалога";
			КонецЕсли;
			
		КонецЕсли;
	Иначе

		ПредставлениеВида = "НеОтражатьВНУ";

	КонецЕсли;

	Возврат ПредставлениеВида;

КонецФункции

Процедура ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, БезналичныеОплаты, Выручка)

	СуммаБезналичнойОплаты = 0;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		СуммаБезналичнойОплаты = БезналичныеОплаты.Итог("Сумма");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СуммаБезналичнойОплаты = БезналичныеОплаты.Итог("СуммаРуб");
	КонецЕсли;
	
	КоэффБН = ?(Выручка.Всего = 0, 0, СуммаБезналичнойОплаты / Выручка.Всего);
	Выручка.Всего = Выручка.Всего - СуммаБезналичнойОплаты;
	
	СуммаЕНВД_БН = Окр(КоэффБН * Выручка.ЕНВД, 2);
	Выручка.ЕНВД = Выручка.ЕНВД - СуммаЕНВД_БН;
	
	СуммаКомиссии_БН = Окр(КоэффБН * Выручка.Комиссия, 2);
	Выручка.Комиссия = Выручка.Комиссия - СуммаКомиссии_БН;
	
	СуммаПатент_БН = Окр(КоэффБН * Выручка.Патент, 2);
	Выручка.Патент = Выручка.Патент - СуммаПатент_БН;
	
	СуммаТорговыйСбор_БН = Окр(КоэффБН * Выручка.ТорговыйСбор, 2);
	Выручка.ТорговыйСбор = Выручка.ТорговыйСбор - СуммаТорговыйСбор_БН;
	
	ТаблицаВыручка = Неопределено;
	Если Выручка.Свойство("ТаблицаВыручка", ТаблицаВыручка) Тогда
		// Также скорректируем распределение выручки по договорам
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Выручка.Всего, ТаблицаВыручка, "Всего");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Выручка.ЕНВД, ТаблицаВыручка, "ЕНВД");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Выручка.Комиссия, ТаблицаВыручка, "Комиссия");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Выручка.Патент, ТаблицаВыручка, "Патент");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Выручка.ТорговыйСбор, ТаблицаВыручка, "ТорговыйСбор");
	КонецЕсли;

КонецПроцедуры

Процедура ВыделитьТаможенныйНДСВПринятыхРасходах(ТаблицыРасходов)

	Если ТаблицыРасходов.Свойство("ТаблицаПринятых") И ТаблицыРасходов.ТаблицаПринятых.Количество() > 0 Тогда
		
		ТаблицаЗамены = ТаблицыРасходов.ТаблицаПринятых.СкопироватьКолонки();
		
		Если ТаблицаЗамены.Колонки.Найти("ЭтоТаможенныйНДС") = Неопределено Тогда
			ТаблицаЗамены.Колонки.Добавить("ЭтоТаможенныйНДС", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		Для каждого СтрокаПризнанногоРасхода Из ТаблицыРасходов.ТаблицаПринятых Цикл
		
			НоваяСтрокаРасхода = ТаблицаЗамены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, СтрокаПризнанногоРасхода);
			
			Если НоваяСтрокаРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи
				И НоваяСтрокаРасхода.НДС <> 0
				И (НоваяСтрокаРасхода.Сумма - НоваяСтрокаРасхода.НДС <> 0) Тогда
			
				ПрочиеТаможенныеПлатежи = СтрокаПризнанногоРасхода.Сумма - СтрокаПризнанногоРасхода.НДС;
				
				// в текущей строке расхода оставляем только НДС
				НоваяСтрокаРасхода.Сумма			= НоваяСтрокаРасхода.НДС;
				НоваяСтрокаРасхода.НДС				= 0;
				НоваяСтрокаРасхода.ЭтоТаможенныйНДС	= Истина;
				
				// добавляем строку расхода по прочим таможенным платежам без учета НДС
				НоваяСтрокаБезНДС = ТаблицаЗамены.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБезНДС, СтрокаПризнанногоРасхода);
				НоваяСтрокаБезНДС.Сумма				= ПрочиеТаможенныеПлатежи;
				НоваяСтрокаБезНДС.НДС				= 0;
				НоваяСтрокаБезНДС.ЭтоТаможенныйНДС	= Ложь;
			
			КонецЕсли;
		
		КонецЦикла;
		
		// заменяем таблицу принятых расходов
		ТаблицыРасходов.ТаблицаПринятых = Неопределено;
		ТаблицыРасходов.Вставить("ТаблицаПринятых", ТаблицаЗамены);
		
	КонецЕсли;

КонецПроцедуры

//Формирует таблицы движений регистра "Расходы при УСН" по таблице остатков расходов
//на заданную сумму по установленному виду операции
Функция ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, Сумма = 0, ВидОперации = "Оплата", КонтролироватьСумму = Истина, ДокументОплаты = Неопределено, ВходящаяСтруктура = Неопределено)

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТаблицаКорректировкиРасход = Новый ТаблицаЗначений;
	ТаблицаКорректировкиПриход = Новый ТаблицаЗначений;
	ТаблицаПризнанныхРасходов  = Новый ТаблицаЗначений;

	Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("НДС");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("Количество") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("Количество");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "Количество");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
	КонецЕсли;

	ТаблицаКорректировкиРасход = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаКорректировкиПриход = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаПризнанныхРасходов  = ТаблицаРасходов.СкопироватьКолонки();

	Для Каждого Расход Из ТаблицаРасходов Цикл
		Если ЗначениеЗаполнено(Расход.РеквизитыДокументаОплаты) Тогда
			Отказ = Ложь;
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Расход.РеквизитыДокументаОплаты.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		ИначеЕсли ЗначениеЗаполнено(Расход.РасчетныйДокумент) Тогда
			ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			Отказ = НЕ УчетнаяПолитика.Существует(СтруктураШапкиДокумента.Организация, Расход.РасчетныйДокумент.Дата)
				И (ДатаПереходаНаУСН < Расход.РасчетныйДокумент.Дата);
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Расход.РасчетныйДокумент.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		Иначе
			ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
		КонецЕсли;
		Если КонтролироватьСумму Тогда
			Если Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Расход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ВыделятьНДСУСНДокумент И
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
				СуммаКорректировки = Мин(Расход.Сумма + Расход.НДС, Сумма);
				Сумма = Макс(0, Сумма - СуммаКорректировки);
				К = СуммаКорректировки / (Расход.Сумма + Расход.НДС);
			Иначе
				СуммаКорректировки = Мин(Расход.Сумма, Сумма);
				Сумма = Сумма - СуммаКорректировки;
				К = СуммаКорректировки / Расход.Сумма;
			КонецЕсли;
		Иначе
			К = 1;
			СуммаКорректировки = Расход.Сумма;
		КонецЕсли;
		ПризнаватьРасход = Ложь;
		НовыйСтатусОплаты = ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, Расход.СтатусыОплатыРасходовУСН, ВидОперации, ПризнаватьРасход);
		Если НЕ ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			КонецЕсли;
			Если (НЕ ЗначениеЗаполнено(НовыйСтатусОплаты)) И (НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено) Тогда
				НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);

				Если НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();

		НомерСтрокиРасходов = 0;
		Если ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
			СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		Иначе
			СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
			НомерСтрокиРасходов = ТаблицаПризнанныхРасходов.Количество();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);

		Если ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;

		Если ВидОперации = "КорректировкаПоАО" И ЗначениеЗаполнено(ДокументОплаты) Тогда
			СтрокаКорректировкиПриход.РасчетныйДокумент = ДокументОплаты;
		КонецЕсли;

		СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
		
		Если НЕ К = 1 Тогда
			
			СтрокаКорректировкиРасход.Сумма 		= К*СтрокаКорректировкиРасход.Сумма;
			СтрокаКорректировкиРасход.Количество	= К*СтрокаКорректировкиРасход.Количество;
			СтрокаКорректировкиРасход.НДС			= К*СтрокаКорректировкиРасход.НДС;
			СтрокаКорректировкиПриход.Сумма 		= К*СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= К*СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= К*СтрокаКорректировкиПриход.НДС;
			
		КонецЕсли;
		
		Если (СтрокаКорректировкиРасход.Валюта <> ВалютаРеглУчета)
			И ТаблицаРасходов.Колонки.Найти("СтруктураКурса") <> Неопределено
			И ЗначениеЗаполнено(Расход.СтруктураКурса) Тогда
			
			Если ПризнаватьРасход           // Признание расхода в валюте
				Или (ВидОперации = "Оплата" // или оплата по договору в у.е.
					И ТипЗнч(Расход.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") // При отражении авансового отчета в качестве договора может быть физлицо
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Расход.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах") = Истина) Тогда
				
				// Расход, выраженный в валюте, пересчитывается в рубли
				Курс = Расход.СтруктураКурса.Курс;
				Кратность = ?(Расход.СтруктураКурса.Кратность = 0, 1, Расход.СтруктураКурса.Кратность);
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма*Курс/Кратность;
				СтрокаКорректировкиПриход.НДС			= СтрокаКорректировкиПриход.НДС*Курс/Кратность;
				Если Курс <> 1 Тогда
					СтрокаКорректировкиПриход.Валюта = ?(Расход.СтруктураКурса.Свойство("ВалютаПолучателя"), Расход.СтруктураКурса.ВалютаПолучателя, ВалютаРеглУчета);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		//Признаем расходы в части входящего НДС
		Если (ВидОперации = "Оплата") И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НДС_ТС) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.ПустаяСсылка()) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

			Если (ВыделятьНДСУСН) Тогда
				Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаНДС, Расход);

				Если НЕ СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;

				СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
				СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
				СтрокаНДС.Валюта		= СтрокаКорректировкиПриход.Валюта;
				СтрокаНДС.Количество	= 0;
				СтрокаНДС.НДС			= 0;

				Если Не ВыделятьНДСУСНДокумент Тогда
					СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма - СтрокаКорректировкиПриход.НДС;
					СтрокаКорректировкиПриход.НДС	= 0;
				КонецЕсли;

			ИначеЕсли (НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) Тогда

				СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма + СтрокаКорректировкиПриход.НДС;
			КонецЕсли;
		КонецЕсли;

		//Признаем расходы, отраженные по статусу "Не списано, принято"
		Если (ВидОперации = "Оплата") И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

			СтрокаРасходов = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасходов, СтрокаКорректировкиПриход);

		КонецЕсли;

		// Изменение статуса расхода по списанию
		Если НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);
			Если НЕ ЗначениеЗаполнено(Расход.СтатусСписания) Тогда

			ИначеЕсли Расход.ОтражениеВУСН = НовыйСтатусРасхода Тогда

			ИначеЕсли Расход.Количество > Расход.КоличествоПоСтатусуСписания Тогда

				К2 = Расход.КоличествоПоСтатусуСписания / Расход.Количество;
				СумКорректировки = К2*СтрокаКорректировкиПриход.Сумма;
				КолКорректировки = К2*СтрокаКорректировкиПриход.Количество;
				НДСКорректировки = К2*СтрокаКорректировкиПриход.НДС;
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма - СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= СтрокаКорректировкиПриход.Количество - КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= СтрокаКорректировкиПриход.НДС - НДСКорректировки;

				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
					СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);

				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
				СтрокаКорректировкиПриход.ОтражениеВУСН  = НовыйСтатусРасхода;
				СтрокаКорректировкиПриход.Сумма 		= СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= НДСКорректировки;

				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
												ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
												СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			Иначе
                Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
				СтрокаКорректировкиПриход.ОтражениеВУСН = НовыйСтатусРасхода;

				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			КонецЕсли;

		КонецЕсли;

		Если (НомерСтрокиРасходов > 0) И (СтрокаКорректировкиПриход.НДС > 0) И
			(НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) И (НЕ ВидОперации = "Оплата") Тогда

			СтрокаКорректировкиПриход.НДС = 0;
		КонецЕсли;

		Если (НомерСтрокиРасходов > 0) и (НЕ ПризнаватьРасход) Тогда
			ТаблицаПризнанныхРасходов.Удалить(НомерСтрокиРасходов-1);
		КонецЕсли;

		Если К = 1 Тогда
			Расход.Сумма = 0;
			Расход.Количество = 0;
			Расход.НДС = 0;
		Иначе
			Расход.Сумма = Расход.Сумма - К*Расход.Сумма;
			Расход.Количество = Расход.Количество - К*Расход.Количество;
			Расход.НДС = Расход.НДС - К*Расход.НДС;
		КонецЕсли;

	КонецЦикла;

	Если ВидОперации = "Оплата" Тогда
		Если ТаблицаКорректировкиПриход.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаКорректировкиПриход.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		Если ТаблицаПризнанныхРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаПризнанныхРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
		ТаблицаПризнанныхРасходов.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
	ИначеЕсли ВидОперации = "НачислениеЗП"
		ИЛИ ВидОперации = "НачислениеСтраховыхВзносовИП"
		ИЛИ ВидОперации = "НачислениеИмущественныхНалогов"
		ИЛИ ВидОперации = "НачислениеТорговогоСбора" Тогда
		
		Если ТаблицаПризнанныхРасходов.Колонки.Найти("ДокументОплаты") <> Неопределено Тогда
			ТаблицаПризнанныхРасходов.ЗагрузитьКолонку(ТаблицаПризнанныхРасходов.ВыгрузитьКолонку("ДокументОплаты"), "РеквизитыДокументаОплаты");
		КонецЕсли;
		Если ВидОперации = "НачислениеСтраховыхВзносовИП" ИЛИ ВидОперации = "НачислениеИмущественныхНалогов"
			ИЛИ ВидОперации = "НачислениеТорговогоСбора"
			И ТаблицаКорректировкиПриход.Колонки.Найти("ДокументОплаты") <> Неопределено Тогда
			ТаблицаКорректировкиПриход.ЗагрузитьКолонку(ТаблицаКорректировкиПриход.ВыгрузитьКолонку("ДокументОплаты"), "РеквизитыДокументаОплаты");		
		КонецЕсли;
		
	КонецЕсли;


	Если ЗначениеЗаполнено(ВходящаяСтруктура) Тогда
		Если ВходящаяСтруктура.ТаблицаПриход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаПриход = ТаблицаКорректировкиПриход;
		КонецЕсли;
		Если ВходящаяСтруктура.ТаблицаРасход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаРасход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаРасход = ТаблицаКорректировкиРасход;
		КонецЕсли;
		Если ВходящаяСтруктура.ТаблицаПринятых.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаПризнанныхРасходов Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаПринятых = ТаблицаПризнанныхРасходов;
		КонецЕсли;
		ИтоговаяСтруктура = ВходящаяСтруктура;
	Иначе
		ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
	КонецЕсли;

	Возврат ИтоговаяСтруктура;

КонецФункции

Процедура ПроверитьСторноРасходовПоСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход)

	Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
		Возврат;
	КонецЕсли;

	ВыделятьНДСУСН = ВыделятьНДСУСНДокумент;
	//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	Если (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда

			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);

			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;

			//Распределяемые расходы
			СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиПриход);

			СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;
		КонецЕсли;

		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда

			//Сторно
			СтрокаСторно = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСторно, СтрокаКорректировкиРасход);

			СтрокаСторно.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаСторно.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаСторно.НДС		= - СтрокаКорректировкиПриход.НДС;

			//Распределяемые расходы
			СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;

		КонецЕсли;

	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда

			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);

			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;

		КонецЕсли;

		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда

			//Сторно
			НомерСтрокиРасходов = 0;
			СтрокаКорректировкиПриход.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= - СтрокаКорректировкиПриход.НДС;
		КонецЕсли;

	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда //Не обрабатываем

	КонецЕсли;

КонецПроцедуры

// Заполняет значения патентов из документов расчетов в переданной таблице
//
// Параметры:
//  КоллекцияСтрокРасчетов - <ТаблицаЗначений|Массив строк таблицы значений> - заполняемая коллекция строк взаиморасчетов.
//     Важно! Таблица должна содержать колонки с именами, переданными в параметрах ИмяКолонкиДокумент, ИмяКолонкиПатент.
//  ИмяКолонкиДокумент  - <Строка> - имя колонки для расчетных документов. Например, "ДокументРасчетов".
//  ИмяКолонкиПатент    - <Строка> - имя колонки для заполнения патентов.
//
Процедура ЗаполнитьПатентыВТаблицеРасчетов(КоллекцияСтрокРасчетов, ИмяКолонкиДокумент, ИмяКолонкиПатент) Экспорт

	ПатентыДокументов = Новый Соответствие;
	ДокументыПоТипам  = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из КоллекцияСтрокРасчетов Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиДокумент]) Тогда
			
			ТипДокумента = ТипЗнч(СтрокаТаблицы[ИмяКолонкиДокумент]);
			
			ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
			
			Если ДокументыПоТипу = Неопределено Тогда
				
				ДокументыПоТипам.Вставить(ТипДокумента, Новый Массив);
				ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
				
			КонецЕсли;
			
			ДокументыПоТипу.Добавить(СтрокаТаблицы[ИмяКолонкиДокумент]);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ДокументыПоТипам Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеТипа) Тогда
			
			ЗначенияПатентов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КлючИЗначение.Значение, "Патент");
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПатентыДокументов, ЗначенияПатентов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из КоллекцияСтрокРасчетов Цикл
		СтрокаТаблицы[ИмяКолонкиПатент] = ПатентыДокументов[СтрокаТаблицы[ИмяКолонкиДокумент]];
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуЗачетаАванса(СтруктураШапкиДокумента, ТаблицаРасчетов)
	
	Колонки = "Контрагент, ДоговорКонтрагента, ДокументРасчетов, ДатаДокументаРасчетов,
		|СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовПатент, СуммаВзаиморасчетовТорговыйСбор";
	
	ТаблицаЗачетАвансаУСН = ТаблицаРасчетов.СкопироватьКолонки(Колонки);
	
	ТипСтандартнойСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("КурсДокумента", Новый ОписаниеТипов("Число"));
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ИсключатьНДСИзДоходов", Новый ОписаниеТипов("Булево"));
	
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ЕстьАвансПоПатенту", Новый ОписаниеТипов("Булево"));
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПатентАванса",  Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПатентВыручки", Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	
	// Суммы распределяемой выручки в валюте взаиморасчетов
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаУСН",          ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаНДС",          ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаТорговыйСбор", ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаЕНВД",         ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаКомиссия",     ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ВыручкаПатент",       ТипСтандартнойСуммы);
	
	// Суммы для отражения в КУДиР в валюте регламентированного учета
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПризнатьУСН",          ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПризнатьТорговыйСбор", ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПризнатьЕНВД",         ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПризнатьКомиссия",     ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ПризнатьПатент",       ТипСтандартнойСуммы);
	
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("СторноУСН",          ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("СторноТорговыйСбор", ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("СторноЕНВД",         ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("СторноКомиссия",     ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("СторноПатент",       ТипСтандартнойСуммы);
	
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ИсключитьНДС_УСН",          ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ИсключитьНДС_ЕНВД",         ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ИсключитьНДС_Патент",       ТипСтандартнойСуммы);
	ТаблицаЗачетАвансаУСН.Колонки.Добавить("ИсключитьНДС_ТорговыйСбор", ТипСтандартнойСуммы);
	
	ДатаОтменыЕНВД = УчетЕНВДКлиентСервер.ДатаОтменыЕНВД();
	
	// Дополним таблицу управляющими признаками и данными для пересчета
	Для Каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		Если ТаблицаРасчетов.Колонки.Найти("ЭтоВозврат") <> Неопределено
			И СтрокаРасчетов.ЭтоВозврат Тогда
			// Строки с возвратами в зачете аванса не участвуют.
			Продолжить;
		КонецЕсли;
		
		СтрокаЗачета = ТаблицаЗачетАвансаУСН.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗачета, СтрокаРасчетов);
		
		Если СтрокаЗачета.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить; // Это реализация без зачета аванса, дополнительные сведения вычислять не требуется.
		КонецЕсли;
		
		КурсДокумента = ОпределитьКурсПоДокументу(СтрокаЗачета.ДоговорКонтрагента, Неопределено, СтрокаЗачета.ДокументРасчетов);
		СтрокаЗачета.КурсДокумента = ?(КурсДокумента = 0, 1, КурсДокумента);
		
		СтрокаЗачета.ИсключатьНДСИзДоходов = ?(ЗначениеЗаполнено(СтрокаЗачета.ДокументРасчетов) И ЗначениеЗаполнено(СтрокаЗачета.ДатаДокументаРасчетов),
			УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(СтрокаЗачета.ДатаДокументаРасчетов),
			Ложь);
		
		СтрокаЗачета.ЕстьАвансПоПатенту = ЗначениеЗаполнено(СтрокаЗачета.ДокументРасчетов)
			И СтрокаЗачета.СуммаВзаиморасчетовПатент > 0;
		
		// Обособим авансы, относящиеся к ЕНВД, в случае их зачета после отмены ЕНВД.
		// Такие авансы не подлежат переквалификации.
		
		Если СтруктураШапкиДокумента.Дата >= ДатаОтменыЕНВД И СтрокаЗачета.СуммаВзаиморасчетовЕНВД > 0 Тогда
			
			СтрокаЗачетаАвансЕНВД = ТаблицаЗачетАвансаУСН.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗачетаАвансЕНВД, СтрокаЗачета);
			
			// Разделим суммы взаиморасчетов
			
			СтрокаЗачетаАвансЕНВД.СуммаВзаиморасчетов             = СтрокаЗачета.СуммаВзаиморасчетовЕНВД;
			СтрокаЗачетаАвансЕНВД.СуммаВзаиморасчетовКомитента    = 0;
			СтрокаЗачетаАвансЕНВД.СуммаВзаиморасчетовПатент       = 0;
			СтрокаЗачетаАвансЕНВД.СуммаВзаиморасчетовТорговыйСбор = 0;
			
			СтрокаЗачета.СуммаВзаиморасчетов = СтрокаЗачета.СуммаВзаиморасчетов - СтрокаЗачета.СуммаВзаиморасчетовЕНВД;
			СтрокаЗачета.СуммаВзаиморасчетовЕНВД = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Определим патенты авансов
	ОтборСтрок = Новый Структура("ЕстьАвансПоПатенту", Истина);
	СтрокиРасчетовПоПатентам = ТаблицаЗачетАвансаУСН.НайтиСтроки(ОтборСтрок);
	
	ЗаполнитьПатентыВТаблицеРасчетов(СтрокиРасчетовПоПатентам, "ДокументРасчетов", "ПатентАванса");
	
	Возврат ТаблицаЗачетАвансаУСН;
	
КонецФункции

// Проверяет, допустимо ли корректировать доходы в КУДиР при зачете аванса в случае,
// когда налогообложение выручки отличается от налогообложения аванса.
// В параметр СтрокаАванса необходимо передавать строку таблицы взаиморасчетов,
// созданной в ПодготовитьТаблицуЗачетаАванса.
//
Функция АвансПодлежитПереквалификации(СтрокаАванса, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.Дата < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
		// До отмены ЕНВД корректировка доходов выполнялась по всем авансам без исключения.
		Возврат Истина;
	КонецЕсли;
	
	// После отмены ЕНВД в соответствии с письмом ФНС РФ от 20 ноября 2020 г. N СД-4-3/19053@ не корректируются доходы
	// по авансам, полученным во время ЕНВД, если зачет авансов происходит после перехода на УСН в связи с отменой ЕНВД.
	
	ПлательщикЕНВДНаДатуАванса = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапкиДокумента.Организация, СтрокаАванса.ДатаДокументаРасчетов);
	
	Если СтрокаАванса.СуммаВзаиморасчетовЕНВД > 0 Тогда
		// Авансы, полученные на ЕНВД, после прекращения применения ЕНВД не переквалифицируются.
		Возврат Ложь;
	КонецЕсли;
	
	// Если на дату аванса у ИИП была система налогообложения "Только ЕНВД", то аванс относится к ЕНВД.
	// В таблице взаиморасчетов у таких авансов СуммаВзаиморасчетовЕНВД равна 0, посколько при режиме "Только ЕНВД"
	// учет вспомогательных расчетов на забалансовых счетах УСН.** не ведется. Но корректировать доходы
	// по такому авансу также не нужно.
	
	ПрименяетсяТолькоЕНВДНаДатуАванса = ПлательщикЕНВДНаДатуАванса
		И УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(СтруктураШапкиДокумента.Организация, СтрокаАванса.ДатаДокументаРасчетов);
	
	Если ПрименяетсяТолькоЕНВДНаДатуАванса Тогда
		// Авансы, полученные на ЕНВД, после прекращения применения ЕНВД не переквалифицируются.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоОплатаЗаПериодТолькоЕНВДПослеОтменыЕНВД(Организация, ОплачиваемыйПериод, ДатаОплаты)
	
	Если ДатаОплаты < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
		// Не учитываем особенности оплаты реализаций, осуществленных при применении "Только ЕНВД",
		// ранее отмены ЕНВД - для сохранения движений документов прошлых периодов при перепроведении.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, ОплачиваемыйПериод)
		И УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, ОплачиваемыйПериод);
	
КонецФункции

Функция ПодготовитьТаблицуОплатыОСДляУСН(ТаблицаОплатыОС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОплатыОС", ТаблицаОплатыОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатыОСДляУСН.ОсновноеСредство КАК ОсновноеСредство,
	|	ОплатыОСДляУСН.Организация КАК Организация,
	|	ОплатыОСДляУСН.СуммаОплаты КАК СуммаОплаты,
	|	ОплатыОСДляУСН.РеквизитыДокументаОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ТаблицаОплатыОС
	|ИЗ
	|	&ТаблицаОплатыОС КАК ОплатыОСДляУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатыОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОплатыОС.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОплаты,
	|	ТаблицаОплатыОС.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	ТаблицаОплатыОС КАК ТаблицаОплатыОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТаблицаОплатыОС.Организация = ДанныеПервичныхДокументов.Организация
	|			И ТаблицаОплатыОС.ДокументОплаты = ДанныеПервичныхДокументов.Документ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Преобразует таблицу значений в таблицу со вложенными таблицами, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "", ВидОперации) Экспорт

	ИтоговаяТаблица  = Новый ТаблицаЗначений();
	ПромежуточнаяТаблица = Новый ТаблицаЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ИтоговаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
		ПромежуточнаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла;
	ИтоговаяТаблица.Колонки.Добавить("Строки");

	//Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
	//	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
	//		СтрокаДерева = ИтоговаяТаблица.Добавить();

	//		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

	//	КонецЦикла;
	//
	//	Возврат ИтоговаяТаблица;
	//КонецЕсли;

	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ИтоговаяТаблица.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

	КонецЦикла;

	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Если НЕ ПустаяСтрока(ГруппировочныеКолонки) Тогда
		ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
	КонецЕсли;
	Для каждого СтрокаДерева из ИтоговаяТаблица Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла;
		ПромежуточнаяТаблица.Очистить();
		//Поиск и заполнение подчиненными колонками
		Если ЗначенияОтбора.Количество() > 0 Тогда
			МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Иначе
			МассивПодчиненныхСтрок = ТаблицаРезультатов;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = ПромежуточнаяТаблица.Добавить();

			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);

		КонецЦикла;
		СтрокаДерева.Строки = ПромежуточнаяТаблица.Скопировать();
	КонецЦикла;

	Возврат ИтоговаяТаблица;
КонецФункции

Процедура СвернутьРасшифровкуПлатежаПоДоговорам(КУДиР, СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента)

	КУДиР.РасшифровкаПоДоговорам.Свернуть(
		"Контрагент, ДоговорКонтрагента, ТипОплаты, Пояснение",
		"Графа4, Графа5, Графа6, Графа7, НДС, ИсключенныйНДС, ДоходЕНВД, ДоходТорговыйСбор, ДоходКомитента, ДоходПатент, СуммаНаЗакупкуДляКомитента");
	
	КУДиР.РасшифровкаПоДоговорам.Колонки.Добавить("ЧастиСодержания", Новый ОписаниеТипов("Структура"));
	
	// Заполним содержание по строкам расшифровки.
	Для Каждого СтрокаРасшифровки Из КУДиР.РасшифровкаПоДоговорам Цикл
		
		СобытиеКУДиР = ОписаниеСобытияДляКУДиР(
			СтруктураШапкиДокумента,
			ВидОперации,
			МетаданныеДокумента,
			СтрокаРасшифровки.ДоговорКонтрагента);
		
		СтрокаРасшифровки.ЧастиСодержания = НовыйСоставноеСодержаниеКУДиР();
		ДополнитьСодержаниеКУДиР(СтрокаРасшифровки, "Событие", СобытиеКУДиР, Истина);
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Пояснение) Тогда
			ДополнитьСодержаниеКУДиР(СтрокаРасшифровки, "Пояснение", СтрокаРасшифровки.Пояснение);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасшифровки.ИсключенныйНДС > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение
				+ "Предъявленный покупателям НДС в сумме "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасшифровки.ИсключенныйНДС, , , " ")
				+ " руб. исключен из доходов. ";
		КонецЕсли;
		Если СтрокаРасшифровки.ДоходТорговыйСбор > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасшифровки.ДоходТорговыйСбор, , , " ")
				+ " руб. отнесена к деятельности на торговом сборе. ";
		КонецЕсли;
		Если СтрокаРасшифровки.СуммаНаЗакупкуДляКомитента > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасшифровки.СуммаНаЗакупкуДляКомитента, , , " ")
				+ " руб. определена как средства на закупку по договору комиссии. ";
		КонецЕсли;
		Если СтрокаРасшифровки.ДоходКомитента > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасшифровки.ДоходКомитента, , , " ")
				+ " руб. определена как выручка комитента. ";
		КонецЕсли;
		// В строке расшифровки сумма ДоходПатента входит в том числе и в ДоходЕНВД,
		// поэтому для формирования содержания строки только ЕНВД ДоходПатент необходимо исключить.
		ДоходЕНВД = СтрокаРасшифровки.ДоходЕНВД - СтрокаРасшифровки.ДоходПатент;
		Если ДоходЕНВД > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходЕНВД, , , " ")
				+ " руб. отнесена к деятельности ЕНВД. ";
		КонецЕсли;
		Если СтрокаРасшифровки.ДоходПатент > 0 Тогда
			СтрокаРасшифровки.Пояснение = СтрокаРасшифровки.Пояснение + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасшифровки.ДоходПатент, , , " ")
				+ " руб. отнесена к деятельности на патенте. ";
		КонецЕсли;
		
		ДополнитьСодержаниеКУДиР(СтрокаРасшифровки, "Пояснение", СтрокаРасшифровки.Пояснение);
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации)

	ТаблицаПартий = Новый ТаблицаЗначений;

	ТаблицаПартий.Колонки.Добавить("Номенклатура");
	ТаблицаПартий.Колонки.Добавить("СчетУчета");
	ТаблицаПартий.Колонки.Добавить("Склад");
	ТаблицаПартий.Колонки.Добавить("ДокументОприходования");
	ТаблицаПартий.Колонки.Добавить("Количество");

	Если (ВидОперации = "Перемещение")
		ИЛИ (ВидОперации = "Комплектация")
		ИЛИ (ВидОперации = "НаРеализацию")
		ИЛИ (ВидОперации = "ВПереработку")
		ИЛИ (ВидОперации = "ВозвратСРеализации")
		ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

		ТаблицаПартий.Колонки.Добавить("КорНоменклатура");
		ТаблицаПартий.Колонки.Добавить("КорСчетУчета");
		ТаблицаПартий.Колонки.Добавить("КорСклад");
		ТаблицаПартий.Колонки.Добавить("КорДокументОприходования");
		ТаблицаПартий.Колонки.Добавить("КорКоличество");
		
	ИначеЕсли ВидОперации = "РеализацияКомиссионером" Тогда
		
		// Колонка необходима для определения по какой строке необходим возврат
		ТаблицаПартий.Колонки.Добавить("ВозвратПоТекущемуДокументу", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;

	Если ТаблицаТМЦ = Неопределено Тогда
		Возврат ТаблицаПартий;
	КонецЕслИ;

	Для Каждого СтрокаПартии ИЗ ТаблицаТМЦ Цикл
		
		Если СтрокаПартии.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидОперации = "Перемещение" И СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетСписания Тогда
			// Складское перемещение без изменения счета учета не меняет расходы УСН.
			Продолжить;
		КонецЕсли;
		
		СтрокаИтоговойТаблицы = ТаблицаПартий.Добавить();
		СтрокаИтоговойТаблицы.Номенклатура          = СтрокаПартии.Номенклатура;
		СтрокаИтоговойТаблицы.СчетУчета             = СтрокаПартии.СчетУчета;
		СтрокаИтоговойТаблицы.Склад                 = СтрокаПартии.Склад;
		СтрокаИтоговойТаблицы.ДокументОприходования = СтрокаПартии.Партия;
		СтрокаИтоговойТаблицы.Количество            = СтрокаПартии.Количество;

		Если (ВидОперации = "Перемещение")
				ИЛИ (ВидОперации = "Комплектация")
				ИЛИ (ВидОперации = "НаРеализацию")
				ИЛИ (ВидОперации = "ВПереработку")
				ИЛИ (ВидОперации = "ВозвратСРеализации")
				ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

			СтрокаИтоговойТаблицы.КорСчетУчета = СтрокаПартии.КорСчетСписания;

			Если (ВидОперации = "Комплектация") Тогда
				СтрокаИтоговойТаблицы.КорНоменклатура          = СтрокаПартии.КорСубконто1;
				СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаПартии.КорСубконто3;
				СтрокаИтоговойТаблицы.КорКоличество            = СтрокаПартии.КоличествоДт;
			Иначе
				СтрокаИтоговойТаблицы.КорНоменклатура          = СтрокаПартии.Номенклатура;
				СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаПартии.Партия;
				СтрокаИтоговойТаблицы.КорКоличество            = СтрокаПартии.Количество;
			КонецЕсли;

			Если (ВидОперации = "Перемещение") Тогда
				СтрокаИтоговойТаблицы.КорСклад = СтрокаПартии.КорСубконто2;
			ИначеЕсли (ВидОперации = "ВозвратСРеализации")
					ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
				СтрокаИтоговойТаблицы.КорСклад = СтрокаПартии.Склад;
			Иначе
				СтрокаИтоговойТаблицы.КорСклад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;

		ИначеЕсли ВидОперации = "РеализацияКомиссионером" Тогда
			СтрокаИтоговойТаблицы.ВозвратПоТекущемуДокументу = СтрокаПартии.ВозвратПоТекущемуДокументу;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПартий;

КонецФункции

Процедура ПронумероватьСтрокиТаблицы(ОбрабатываемаяТаблица)
	
	Если ОбрабатываемаяТаблица.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ОбрабатываемаяТаблица.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	КонецЕсли;
	
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ОбрабатываемаяТаблица Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

//Собирает таблицу остатков взаиморасчетов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),
// - Значение поля (произвольный),
// - Условие (строка)
Функция ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Граница, Организация, ТаблицаФильтров, ДополнитьДоходами = Ложь) Экспорт

	УстановитьБлокировкиПоТаблицеФильтров("ПрочиеРасчеты", ТаблицаФильтров,, Организация);
	ОбработатьТаблицуФильтров(ТаблицаФильтров);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РеквизитыДокументов.ДатаРегистратора КАК РасчетныйДокументДата,
	|	СУММА(ПрочиеРасчетыОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(&Граница, Организация = &Организация";

	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если СтрНайти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля;
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;

	Текст = Текст + ") КАК ПрочиеРасчетыОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументов
	|	ПО ПрочиеРасчетыОстатки.Организация = РеквизитыДокументов.Организация
	|		И ПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	РеквизитыДокументов.ДатаРегистратора
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата,
	|	РасчетныйДокумент";

	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//Собирает таблицу остатков расходов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),
// - Значение поля (произвольный),
// - Условие (строка)
Функция ВыполнитьЗапросПоРасходам(Граница, Организация, ТаблицаФильтров, ТаблицаБлокировок = Неопределено) Экспорт

	УстановитьБлокировкиПоТаблицеФильтров("РасходыПриУСН", ТаблицаФильтров, ТаблицаБлокировок, Организация);
	
	ОбработатьТаблицуФильтров(ТаблицаФильтров);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст =
	"ВЫБРАТЬ
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия КАК Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(РасходыУСН.КоличествоОстаток) КАК Количество,
	|	СУММА(РасходыУСН.СуммаОстаток) КАК Сумма,
	|	СУММА(РасходыУСН.НДСОстаток) КАК НДС,
	|	РасходыУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|	РеквизитыПартий.ДатаРегистратора КАК ПартияДата,
	|	РеквизитыРасчетныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&Граница, Организация = &Организация";

	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если СтрНайти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля;
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;

	Текст = Текст + ") КАК РасходыУСН
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|	ПО РасходыУСН.Организация = РеквизитыРасчетныхДокументов.Организация
	|		И РасходыУСН.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|	ПО РасходыУСН.Организация = РеквизитыПартий.Организация
	|		И РасходыУСН.Партия = РеквизитыПартий.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты,
	|	РеквизитыПартий.ДатаРегистратора,
	|	РеквизитыРасчетныхДокументов.ДатаРегистратора
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок,
	|	ПартияДата,
	|	Партия,
	|	РасчетныйДокументДата,
	|	РасчетныйДокумент,
	|	НомерСтрокиДокумента";

	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//Собирает таблицу остатков расходов по установленным фильтрам
//Остатки получаются на момент документа корректировки, при необходимости - дополняются остатками на начало года
//Остатки сортируются в "обратном" порядке, по сравнению с запросом для стандартных документов
//Таблица фильтров содержит колонки:
// - Имя поля (строка),  
// - Значение поля (произвольный),  
// - Условие (строка)
Функция ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(ДокументКорректировкиСсылка, Организация, ТаблицаФильтров, ТаблицаБлокировок = Неопределено, ДополнитьОстаткамиНаНачалоГода = Ложь)
	
	УстановитьБлокировкиПоТаблицеФильтров("РасходыПриУСН", ТаблицаФильтров, ТаблицаБлокировок, Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаТек", Новый Граница(ДокументКорректировкиСсылка.МоментВремени(), ВидГраницы.Включая));
	Если ДополнитьОстаткамиНаНачалоГода Тогда
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДокументКорректировкиСсылка.Дата));
	КонецЕсли; 
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиРасходовУСН.Организация,
	|	ОстаткиРасходовУСН.ВидРасхода,
	|	ОстаткиРасходовУСН.ЭлементРасхода,
	|	ОстаткиРасходовУСН.СчетУчета,
	|	ОстаткиРасходовУСН.Валюта,
	|	ОстаткиРасходовУСН.ДоговорКонтрагента,
	|	ОстаткиРасходовУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОстаткиРасходовУСН.СтатусыПартийУСН,
	|	ОстаткиРасходовУСН.Партия КАК Партия,
	|	ОстаткиРасходовУСН.ОтражениеВУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСНПорядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(ОстаткиРасходовУСН.КоличествоТек) КАК Количество,
	|	СУММА(ОстаткиРасходовУСН.СуммаТек) КАК Сумма,
	|	СУММА(ОстаткиРасходовУСН.НДСТек) КАК НДС,
	|	СУММА(ОстаткиРасходовУСН.КоличествоНачалоГода) КАК КоличествоНачалоГода,
	|	СУММА(ОстаткиРасходовУСН.СуммаНачалоГода) КАК СуммаНачалоГода,
	|	СУММА(ОстаткиРасходовУСН.НДСНачалоГода) КАК НДСНачалоГода,
	|	ОстаткиРасходовУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ОстаткиРасходовУСН.РеквизитыДокументаОплаты,
	|	ЕстьNULL(ОстаткиРасходовУСН.ДокументОплатыДата, НЕОПРЕДЕЛЕНО) КАК ДокументОплатыДата,
	|	ОстаткиРасходовУСН.ПартияДата КАК ПартияДата,
	|	ОстаткиРасходовУСН.РасчетныйДокументДата КАК РасчетныйДокументДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходыУСНТекущие.Организация КАК Организация,
	|		РасходыУСНТекущие.ВидРасхода КАК ВидРасхода,
	|		РасходыУСНТекущие.ЭлементРасхода КАК ЭлементРасхода,
	|		РасходыУСНТекущие.СчетУчета КАК СчетУчета,
	|		РасходыУСНТекущие.Валюта КАК Валюта,
	|		РасходыУСНТекущие.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		РасходыУСНТекущие.РасчетныйДокумент КАК РасчетныйДокумент,
	|		РасходыУСНТекущие.СтатусыПартийУСН КАК СтатусыПартийУСН,
	|		РасходыУСНТекущие.Партия КАК Партия,
	|		РасходыУСНТекущие.ОтражениеВУСН КАК ОтражениеВУСН,
	|		РасходыУСНТекущие.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|		РасходыУСНТекущие.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|		РасходыУСНТекущие.КоличествоОстаток КАК КоличествоТек,
	|		РасходыУСНТекущие.СуммаОстаток КАК СуммаТек,
	|		РасходыУСНТекущие.НДСОстаток КАК НДСТек,
	|		0 КАК КоличествоНачалоГода,
	|		0 КАК СуммаНачалоГода,
	|		0 КАК НДСНачалоГода,
	|		РасходыУСНТекущие.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|		РасходыУСНТекущие.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|		РеквизитыДокументовОплаты.ДатаРегистратора КАК ДокументОплатыДата,
	|		РеквизитыПартий.ДатаРегистратора КАК ПартияДата,
	|		РеквизитыРасчетныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата
	|	ИЗ
	|		РегистрНакопления.РасходыПриУСН.Остатки(&ГраницаТек, Организация = &Организация";
	
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если СтрНайти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ") КАК РасходыУСНТекущие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО РасходыУСНТекущие.Организация = РеквизитыРасчетныхДокументов.Организация
	|			И РасходыУСНТекущие.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО РасходыУСНТекущие.Организация = РеквизитыПартий.Организация
	|			И РасходыУСНТекущие.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО РасходыУСНТекущие.Организация = РеквизитыДокументовОплаты.Организация
	|			И РасходыУСНТекущие.РеквизитыДокументаОплаты = РеквизитыДокументовОплаты.Документ
	|";
	
	Если ДополнитьОстаткамиНаНачалоГода Тогда
		
		Текст = Текст + " 
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходыУСННачалоГода.Организация,
		|		РасходыУСННачалоГода.ВидРасхода,
		|		РасходыУСННачалоГода.ЭлементРасхода,
		|		РасходыУСННачалоГода.СчетУчета,
		|		РасходыУСННачалоГода.Валюта,
		|		РасходыУСННачалоГода.ДоговорКонтрагента,
		|		РасходыУСННачалоГода.РасчетныйДокумент,
		|		РасходыУСННачалоГода.СтатусыПартийУСН,
		|		РасходыУСННачалоГода.Партия,
		|		РасходыУСННачалоГода.ОтражениеВУСН,
		|		РасходыУСННачалоГода.СтатусыОплатыРасходовУСН,
		|		РасходыУСННачалоГода.СтатусыОплатыРасходовУСН.Порядок,
		|		0,
		|		0,
		|		0,
		|		РасходыУСННачалоГода.КоличествоОстаток,
		|		РасходыУСННачалоГода.СуммаОстаток,
		|		РасходыУСННачалоГода.НДСОстаток,
		|		РасходыУСННачалоГода.НомерСтрокиДокумента,
		|		РасходыУСННачалоГода.РеквизитыДокументаОплаты,
		|		РеквизитыДокументовОплаты.ДатаРегистратора,
		|		РеквизитыПартий.ДатаРегистратора,
		|		РеквизитыРасчетныхДокументов.ДатаРегистратора
		|	ИЗ
		|		РегистрНакопления.РасходыПриУСН.Остатки(&НачалоГода, Организация = &Организация";
		
		Для каждого Фильтр Из ТаблицаФильтров Цикл
			Если СтрНайти(Фильтр.Условие, "В") = 0 Тогда
				Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
			Иначе
				Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
			КонецЕсли;
		КонецЦикла;
		
		Текст = Текст + ") КАК РасходыУСННачалоГода
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыРасчетныхДокументов.Организация
		|			И РасходыУСННачалоГода.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыПартий.Организация
		|			И РасходыУСННачалоГода.Партия = РеквизитыПартий.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыДокументовОплаты.Организация
		|			И РасходыУСННачалоГода.РеквизитыДокументаОплаты = РеквизитыДокументовОплаты.Документ
		|";
	КонецЕсли;

	Текст = Текст + ") КАК ОстаткиРасходовУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРасходовУСН.СтатусыПартийУСН,
	|	ОстаткиРасходовУСН.Партия,
	|	ОстаткиРасходовУСН.ОтражениеВУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСН,
	|	ОстаткиРасходовУСН.Организация,
	|	ОстаткиРасходовУСН.ЭлементРасхода,
	|	ОстаткиРасходовУСН.ВидРасхода,
	|	ОстаткиРасходовУСН.РеквизитыДокументаОплаты,
	|	ЕстьNULL(ОстаткиРасходовУСН.ДокументОплатыДата, НЕОПРЕДЕЛЕНО),
	|	ОстаткиРасходовУСН.ПартияДата,
	|	ОстаткиРасходовУСН.РасчетныйДокументДата,
	|	ОстаткиРасходовУСН.РасчетныйДокумент,
	|	ОстаткиРасходовУСН.ДоговорКонтрагента,
	|	ОстаткиРасходовУСН.Валюта,
	|	ОстаткиРасходовУСН.СчетУчета,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСНПорядок,
	|	ОстаткиРасходовУСН.НомерСтрокиДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок УБЫВ,
	|	ПартияДата УБЫВ,
	|	Партия УБЫВ,
	|	РасчетныйДокументДата УБЫВ,
	|	РасчетныйДокумент УБЫВ,
	|	НомерСтрокиДокумента УБЫВ";
	
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Заменяет пустые ссылки в таблице фильтров на значения "Неопределено"
//
Процедура ОбработатьТаблицуФильтров(ТаблицаФильтров)

	Для Каждого Фильтр Из ТаблицаФильтров Цикл
		Если Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) 
			ИЛИ Тип("ФиксированныйМассив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
			Для Индекс = 0 По Фильтр.ЗначениеПоля.Количество() - 1 Цикл
				Если НЕ ЗначениеЗаполнено(Фильтр.ЗначениеПоля[Индекс]) Тогда
					Фильтр.ЗначениеПоля[Индекс] = Неопределено;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(Фильтр.ЗначениеПоля) Тогда
				Фильтр.ЗначениеПоля = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьБлокировкиПоТаблицеФильтров(ИмяБлокируемойТаблицы, ТаблицаФильтров, ТаблицаБлокировок = Неопределено, Организация)

	//Установим управляемые блокировки
	Если НЕ ТранзакцияАктивна()
		ИЛИ ТаблицаФильтров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяБлокируемойТаблицы);
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);

	// Устанавливаем источник данных.
	Если ТаблицаБлокировок = Неопределено Тогда
		//Если не передана таблица определим ведущее измерение
		ВедущееИзмерение = Неопределено;
		Для Каждого Фильтр Из ТаблицаФильтров Цикл
			
			ЭтоМассив = (ТипЗнч(Фильтр.ЗначениеПоля) = Тип("Массив")
					Или ТипЗнч(Фильтр.ЗначениеПоля) = Тип("ФиксированныйМассив"));
			Если ЭтоМассив
			   И (ВедущееИзмерение = Неопределено
			 	Или Фильтр.ЗначениеПоля.Количество() > ВедущееИзмерение.ЗначениеПоля.Количество()) Тогда
				ВедущееИзмерение = Фильтр;
			КонецЕсли;
			
		КонецЦикла;
		ТаблицаБлокировок = Новый ТаблицаЗначений;
		Если (НЕ ВедущееИзмерение = Неопределено) Тогда
			
			ТаблицаБлокировок.Колонки.Добавить(ВедущееИзмерение.ИмяПоля);
			Для стр = 1 По ВедущееИзмерение.ЗначениеПоля.Количество() Цикл
				Если ЗначениеЗаполнено(ВедущееИзмерение.ЗначениеПоля[стр-1]) Тогда
					СтрокаТаблицы = ТаблицаБлокировок.Добавить();
					СтрокаТаблицы[ВедущееИзмерение.ИмяПоля] = ВедущееИзмерение.ЗначениеПоля[стр-1];
				КонецЕсли;
			КонецЦикла;
			Если ТаблицаБлокировок.Количество() > 0 Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ВедущееИзмерение.ИмяПоля, ВедущееИзмерение.ИмяПоля);
			КонецЕсли;
			ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировок;
			
		КонецЕсли;
	Иначе
		
		Для Каждого Колонка Из ТаблицаБлокировок.Колонки Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
		КонецЦикла;
		ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировок;
		
	КонецЕсли;

	ТаблицаМассивовЗначений = Новый ТаблицаЗначений;
	
	//Устанавливаем конкретные значения блокировок.
	Для каждого Фильтр Из ТаблицаФильтров Цикл
	
		ЭтоМассив = (ТипЗнч(Фильтр.ЗначениеПоля) = Тип("Массив")
				Или ТипЗнч(Фильтр.ЗначениеПоля) = Тип("ФиксированныйМассив"));

		// Пропускаем некорректное условие фильтра.
		Если Не ЭтоМассив И Не ЗначениеЗаполнено(Фильтр.ЗначениеПоля)
		 Или ЭтоМассив
			И (ТаблицаБлокировок.Колонки.Найти(Фильтр.ИмяПоля) <> Неопределено
			 Или Фильтр.ЗначениеПоля.Количество() = 0
			 Или Фильтр.ЗначениеПоля.Количество() = 1 И Не ЗначениеЗаполнено(Фильтр.ЗначениеПоля[0])) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоМассив
		   И Фильтр.ЗначениеПоля.Количество() > 1 Тогда
			// Готовим таблицу полного соединения значений фильтров-массивов.
			ИмяПоля = Фильтр.ИмяПоля;
			ЗначениеПоля = Фильтр.ЗначениеПоля;
			
			ТаблицаМассивовЗначений.Колонки.Добавить(ИмяПоля);
			Если ТаблицаМассивовЗначений.Колонки.Количество() = 1 Тогда
				НовСтр = ТаблицаМассивовЗначений.Добавить();
				НовСтр[ИмяПоля] = ЗначениеПоля[0];
			Иначе
				ТаблицаМассивовЗначений.ЗаполнитьЗначения(ЗначениеПоля[0], ИмяПоля);
			КонецЕсли;
			
			КоличествоНаОдноЗначение = ТаблицаМассивовЗначений.Количество();
			КоличествоЗначений = ЗначениеПоля.Количество();
			Для НомерЗначенияПоля = 1 По КоличествоЗначений - 1 Цикл
				Для НомерКопируемой = 0 По КоличествоНаОдноЗначение - 1 Цикл
					НовСтр = ТаблицаМассивовЗначений.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ТаблицаМассивовЗначений[НомерКопируемой], , ИмяПоля);
					НовСтр[ИмяПоля] = ЗначениеПоля[НомерЗначенияПоля];
				КонецЦикла;
			КонецЦикла;
			
		Иначе // Устанавливаем конретное значение блокировки.
			
			ЭлементБлокировки.УстановитьЗначение(Фильтр.ИмяПоля, ?(ЭтоМассив, Фильтр.ЗначениеПоля[0], Фильтр.ЗначениеПоля));
			
		КонецЕсли;
		
	КонецЦикла;

	Если ТаблицаМассивовЗначений.Количество() = 0 Тогда // нет фильтров-массивов
		Блокировка.Заблокировать();
		Возврат;
	КонецЕсли;
	
	// Устанавливаем блокировки по массивам значений.
	ИменаМассивовЗначений = ТаблицаМассивовЗначений.Колонки;
	ЭталоннаяБлокировка = Блокировка[0];
	Для каждого СочетаниеЗначений Из ТаблицаМассивовЗначений Цикл
	
		Если ТаблицаМассивовЗначений.Индекс(СочетаниеЗначений) = 0 Тогда
			ЗаполняемаяБлокировка = ЭталоннаяБлокировка;
		Иначе
			ЗаполняемаяБлокировка = Блокировка.Добавить(ЭталоннаяБлокировка.Область);
			ЗаполняемаяБлокировка.ИсточникДанных = ЭталоннаяБлокировка.ИсточникДанных;
		КонецЕсли;
		
		// Копируем из первого элемента.
		Для каждого Фильтр Из ЭталоннаяБлокировка.Поля Цикл
			
			Если ИменаМассивовЗначений.Найти(Фильтр.Поле) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Фильтр.КолонкаИсточникаДанных) Тогда
				ЗаполняемаяБлокировка.ИспользоватьИзИсточникаДанных(Фильтр.Поле, Фильтр.КолонкаИсточникаДанных);
			Иначе
				ЗаполняемаяБлокировка.УстановитьЗначение(Фильтр.Поле, Фильтр.Значение);
			КонецЕсли;
		
		КонецЦикла;
		Для каждого Фильтр Из ИменаМассивовЗначений Цикл
			ЗаполняемаяБлокировка.УстановитьЗначение(Фильтр.Имя, СочетаниеЗначений[Фильтр.Имя]);
		КонецЦикла;
	
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

//Собирает таблицы прихода и расхода в единую таблицу движений регистров
//Возвращает структуру, состоящую из трех таблиц (движения по трем регистрам
Функция СобратьТаблицыДвижений(СтруктураРасходов, ТаблицаВзаиморасчетов = Неопределено, ДопТаблицаРасходов = Неопределено, ДопСтруктураРасходов = Неопределено)

	ТаблицаКорректировкиРасход = СтруктураРасходов.ТаблицаРасход;
	ТаблицаКорректировкиПриход = СтруктураРасходов.ТаблицаПриход;
	ТаблицаПризнанныхРасходов  = СтруктураРасходов.ТаблицаПринятых;

	Если НЕ ТаблицаКорректировкиПриход.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.ПустаяСсылка(), "СтатусСписания");
	КонецЕсли;

	Если ТаблицаВзаиморасчетов = Неопределено Тогда
		Если НЕ ДопСтруктураРасходов = Неопределено Тогда
			ТаблицаВзаиморасчетов = ДопСтруктураРасходов.ВзаиморасчетыРасход.СкопироватьКолонки();
		Иначе
			ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДопСтруктураРасходов = Неопределено Тогда

		ТаблицаРезультат = ДопСтруктураРасходов.РасходыУСН.Скопировать();

		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;

		Для Каждого Строка Из ДопСтруктураРасходов.КУДиР Цикл
			НоваяСтрока = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;

		Для Каждого Строка Из ДопСтруктураРасходов.ВзаиморасчетыРасход Цикл
			НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;

	ИначеЕсли НЕ ДопТаблицаРасходов = Неопределено Тогда

		ТаблицаРезультат = ДопТаблицаРасходов.Скопировать();

		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;

		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;

	Иначе

		ТаблицаРезультат = ТаблицаКорректировкиРасход.Скопировать();

		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;

		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

	КонецЕсли;

	Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
	КонецЦикла;

	Возврат (Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР",
								ТаблицаВзаиморасчетов, ТаблицаРезультат, ТаблицаПризнанныхРасходов));
КонецФункции

//Возвращает текущий статус отражения в НУ на основании комбинации двух статусов
//поступления и списания
Функция ПолучитьКомбинациюСтатусовОтражениеВНУ(Статус1, Статус2)

	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Статус1);
	СписокСтатусов.Добавить(Статус2);

	Если НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.ПустаяСсылка()) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.НеПринимаются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.Распределяются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.Распределяются;

	Иначе
		Возврат Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;

КонецФункции

//Возвращает новый статус оплаты расхода, полученный из текущего статуса
//переданным событием
Функция ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, ТекСтатус, Событие = "Оплата", ПризнаватьРасход = Ложь)

	НовыйСтатус = ТекСтатус;
	РасходыПоОплате = Ложь;
	РасходыПоОтгрузке = Ложь;
	Если ЗначениеЗаполнено(Расход.СчетУчета)
		И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
			Или Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС) Тогда
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
		ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));

	ИначеЕсли ЗначениеЗаполнено(Расход.СчетУчета)
			И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы
				ИЛИ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) Тогда
				
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
		ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = (ЭтоТовар И ТоварыПоОплате) ИЛИ (МатериалыПоОплате И ЭтоМатериал);

	КонецЕсли;

	Если Событие = "Оплата"
		ИЛИ Событие = "НачислениеЗП"
		ИЛИ Событие = "НачислениеСтраховыхВзносовИП"
		ИЛИ Событие = "НачислениеИмущественныхНалогов"
		ИЛИ Событие = "НачислениеТорговогоСбора" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОплате Тогда
				Если Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					ПризнаватьРасход = Истина;
				ИначеЕсли Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено;
				Иначе
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				КонецЕсли;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписано;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
			//Если после 2006 г. отражается оплата НМА, поступивших до 2006 года.
			Если (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА) И
				(СтруктураШапкиДокумента.Дата >= Дата("20060101")) Тогда
				ПризнаватьРасход = Ложь;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Событие = "Списание") или (Событие = "ВозвратПоставщику") Или Событие = "КорректировкаПоступления" 
			Или Событие = "БезвозмезднаяПередача" Или Событие = "РасходыНаБилеты" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли (Событие = "Реализация") Или (Событие = "КорректировкаРеализации") Тогда	

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли Событие = "Розница" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли Событие = "Доход" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		КонецЕсли;

	ИначеЕсли Событие = "РаспределениеЕНВД" Тогда

		//Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		//ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
		//	НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
		//КонецЕсли;
		
	КонецЕсли;

	Возврат НовыйСтатус;

КонецФункции

// Получает курс переданной валюты на переданную дату из переданного соответствия - кэша
// Если в кэше курс не найден - получает из РС "КурсыВалют" и сохраняет в кэше
// для поиска используется составная строка: УИД элемента справочника "Валюты" + литерал даты без времени
Функция ПолучитьКурсВалютыИзКэша(Валюта, ДатаКурса, КэшКурсовВалют)
	
	Если КэшКурсовВалют = Неопределено Тогда
		КэшКурсовВалют = Новый Соответствие;
	КонецЕсли;
	
	КлючЗаписи = Строка(Валюта.УникальныйИдентификатор()) + "%%" + Год(ДатаКурса) + Месяц(ДатаКурса) + День(ДатаКурса);
	
	СтруктураКурса = КэшКурсовВалют[КлючЗаписи];
	Если СтруктураКурса = Неопределено Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсовВалют.Вставить(КлючЗаписи, СтруктураКурса);
	КонецЕсли;
	
	Возврат СтруктураКурса;
	
КонецФункции

//Получить курс по документу оплаты (используется при зачете аванса поставщику
//
Функция ОпределитьКурсПоДокументу(Договор, Сделка, РасчетныйДокумент)

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Курс = 1;

	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат Курс;
	Конецесли;

	Если (ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) И (ЗначениеЗаполнено(Договор)) Тогда

		Если Договор.РасчетыВУсловныхЕдиницах Тогда

			МетаданныеДокумента = РасчетныйДокумент.Метаданные();

			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "РасшифровкаПлатежа") Тогда

				Сумма = 0;
				СуммаВзаиморасчетов = 0;

				Для Каждого Строка ИЗ РасчетныйДокумент.РасшифровкаПлатежа Цикл

					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда

						Сумма = Сумма + Строка.СуммаПлатежа;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;

					КонецЕсли;

				КонецЦикла;

				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);

			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "ОплатаПоставщику") Тогда

				Сумма = 0;
				СуммаВзаиморасчетов = 0;

				Для Каждого Строка ИЗ РасчетныйДокумент.ОплатаПоставщику Цикл

					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда

						Сумма = Сумма + Строка.Сумма;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;

					КонецЕсли;

				КонецЦикла;

				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);

			КонецЕсли;

		Иначе
			Курс = ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, ВалютаРеглУчета)/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, ВалютаРеглУчета);
		КонецЕсли;

	Иначе

		Курс = ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, ВалютаРеглУчета)/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, ВалютаРеглУчета);

	КонецЕсли;

	Возврат Курс;
КонецФункции

Функция НоваяТаблицаВыручки()

	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Контрагент", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("ДоговорКонтрагента", 	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Результат.Колонки.Добавить("ТипОплаты", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));
	Результат.Колонки.Добавить("Всего", 				ОписаниеТиповЧисло);
	Результат.Колонки.Добавить("ЕНВД", 					ОписаниеТиповЧисло);
	Результат.Колонки.Добавить("Комиссия",				ОписаниеТиповЧисло);
	Результат.Колонки.Добавить("Патент",				ОписаниеТиповЧисло);
	Результат.Колонки.Добавить("ТорговыйСбор",			ОписаниеТиповЧисло);
	
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаОплатыОС()
	
	ТаблицаОплатыОС = Новый ТаблицаЗначений;
	ТаблицаОплатыОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаОплатыОС.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОплатыОС.Колонки.Добавить("РеквизитыДокументаОплаты", Документы.ТипВсеСсылки());
	ТаблицаОплатыОС.Колонки.Добавить("СуммаОплаты", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Возврат ТаблицаОплатыОС;
	
КонецФункции
