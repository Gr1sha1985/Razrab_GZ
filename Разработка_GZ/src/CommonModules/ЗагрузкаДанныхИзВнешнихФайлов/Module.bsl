
#Область ПрограммныйИнтерфейс

// Считывает файл с данными и возвращает табличный документ, содержащий считанные данные и строку для сопоставления реквизитов.
//
// Параметры:
//   ПараметрыЗагрузки - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//      * МакетЗаголовка - ТабличныйДокумент - Макет заголовка.
//
// Возвращаемое значение:
//   ТабличныйДокумент - табличный документ, содержащий данные из файла.
//
Функция ЗагрузитьФайлВТабличныйДокумент(ПараметрыЗагрузки) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДвоичныеДанныеФайла = ПараметрыЗагрузки.ХранилищеДанныхФайла.Получить();
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	МакетЗаголовка = ПараметрыЗагрузки.МакетЗаголовка;
	РасширениеФайла = ПараметрыЗагрузки.РасширениеФайла;
	ОписаниеКолонок = ПараметрыЗагрузки.ОписаниеКолонок;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	Если РасширениеФайла = "csv" Тогда // Платформа не умеет читать файлы csv в табличный документ.
		ЗагрузитьCSVФайлВТабличныйДокумент(ТабличныйДокумент, ИмяВременногоФайла);
	Иначе
		ДанныеФайла = Новый ТабличныйДокумент;
		ДанныеФайла.Прочитать(ИмяВременногоФайла);
		
		// Разгруппируем все объединенные ячейки. Работа с такими ячейками не поддерживается.
		ДанныеФайла.Область().Разъединить();
		
		// Скопируем значения ячеек, чтобы избавиться от форматирования исходного файла.
		Для НомерКолонки = 1 По ДанныеФайла.ШиринаТаблицы Цикл
			Для НомерСтроки = 1 По ДанныеФайла.ВысотаТаблицы Цикл
				ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст = ДанныеФайла.Область(НомерСтроки, НомерКолонки).Текст;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
	УдалитьПустыеКолонки(ТабличныйДокумент);
	УдалитьПустыеСтроки(ТабличныйДокумент);
	
	ПрорисоватьГраницыЯчеек(ТабличныйДокумент);
	
	// Раздвинем первую строку табличного документа. В первой строке всегда выводим заголовки с выбором реквизитов.
	ПерваяСтрока = ТабличныйДокумент.Область(1, , 1);
	ТабличныйДокумент.ВставитьОбласть(ПерваяСтрока, , ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ТекстНезаполненногоЗаголовка = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
	
	// Варианты заголовков в описании колонок приведем к нижнему регистру
	// для удобного сравнения с заголовками колонок в табличном файле.
	Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
		Для Индекс = 0 По ОписаниеКолонки.ПодходящиеЗаголовкиФайла.ВГраница() Цикл
			Элемент = ОписаниеКолонки.ПодходящиеЗаголовкиФайла[Индекс];
			ОписаниеКолонки.ПодходящиеЗаголовкиФайла[Индекс] = НРег(Элемент);
		КонецЦикла;
	КонецЦикла;
	
	// Попытаемся сопоставить заголовки таблицы файла с колонками, обрабатываемыми при загрузке.
	Заголовок = МакетЗаголовка.ПолучитьОбласть("Заголовок");
	СопоставленныеКолонки = Новый Массив;
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Область(2, НомерКолонки);
		ТекущаяОбласть.ПараметрРасшифровки = "НеЗагружать";
		
		ТекстЗаголовка = "";
		ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Идентификатор = "";
		
		НайденнаяКолонка = НайтиПодходящуюКолонку(ТекущаяОбласть.Текст, ОписаниеКолонок, СопоставленныеКолонки);
		Если ПустаяСтрока(НайденнаяКолонка.Заголовок) Тогда
			ТекстЗаголовка = ТекстНезаполненногоЗаголовка;
			ЦветТекста = ЦветаСтиля.НезаполненныйРеквизит;
		Иначе
			ТекстЗаголовка = НайденнаяКолонка.Заголовок;
			Идентификатор = НайденнаяКолонка.Идентификатор;
		КонецЕсли;
		
		ИмяПараметра = "ИмяРеквизита" + НомерКолонки;
		ЯчейкаЗаголовка = ТабличныйДокумент.Область(1, НомерКолонки);
		ТабличныйДокумент.ВставитьОбласть(Заголовок.ТекущаяОбласть, ЯчейкаЗаголовка, ТипСмещенияТабличногоДокумента.БезСмещения, Истина);
		
		ЯчейкаЗаголовка.Текст = ТекстЗаголовка;
		ЯчейкаЗаголовка.ПараметрРасшифровки = Идентификатор;
		ЯчейкаЗаголовка.ЦветТекста = ЦветТекста;
		
	КонецЦикла;
	
	// Оформляем полученный табличный документ.
	Область = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	Область.ШиринаКолонки    = 20;
	Область.Отступ           = 1;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	Область.Обвести(Линия, Линия, Линия, Линия);
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	ТабличныйДокумент.ФиксацияСлева = 0;
	
	// Особая высота для первой строки.
	ПерваяСтрока = ТабличныйДокумент.Область(1, , 1);
	ПерваяСтрока.ВысотаСтроки = Заголовок.ТекущаяОбласть.ВысотаСтроки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Удаляет строки и колонки, не содержащие полезной информации для загрузки.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - табличный документ для обработки.
//   НайденыНенужныеСтроки - Булево - Возвращаемый. Хранит признак наличия ненужных строк.
//
Процедура УдалитьВсеНенужныеСтрокиТаблицы(ТабличныйДокумент, НайденыНенужныеСтроки) Экспорт
	
	ИнформацияОТаблице = АнализДанных(ТабличныйДокумент);
	ИнформацияОЯчейках = ИнформацияОТаблице.ИнформацияОЯчейках;
	ИнформацияОЯчейкахКЗагрузке = ИнформацияОТаблице.ИнформацияОЯчейкахКЗагрузке;
	ВГраница = ИнформацияОЯчейках.ВГраница();
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	Для Н = 0 По ВГраница Цикл
		
		Индекс = ВГраница - Н;
		ЭлементМассива = ИнформацияОЯчейках[Индекс];
		Если ИнформацияОЯчейкахКЗагрузке.Найти(ЭлементМассива) = Неопределено Тогда
			
			НомерСтроки = Индекс + 2;
			Область = ТабличныйДокумент.Область(НомерСтроки,, НомерСтроки);
			ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
			НайденыНенужныеСтроки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденыНенужныеСтроки Тогда
		
		УдалитьПустыеКолонки(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу для заполнения информации о загружаемых колонках.
//
// Возвращаемое значение:
//   ТаблицаЗначений - пустая таблица для описания загружаемых колонок.
Функция НовыйОписаниеЗагружаемыхКолонок() Экспорт
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ОписаниеКолонок = Новый ТаблицаЗначений;
	ОписаниеКолонок.Колонки.Добавить("Идентификатор", ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ПредставлениеКолонки", ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ПодходящиеЗаголовкиФайла", Новый ОписаниеТипов("Массив"));
	ОписаниеКолонок.Колонки.Добавить("ОбязательнаДляЗаполнения", Новый ОписаниеТипов("Булево"));
	ОписаниеКолонок.Колонки.Добавить("Родитель", ТипСтрока);
	
	Возврат ОписаниеКолонок;
	
КонецФункции

// Имя события для записи в журнал регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка данных из файла'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ЗагрузитьCSVФайлВТабличныйДокумент(ТабличныйДокумент, ИмяФайла)
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Если Строка = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не получилось загрузить данные из этого файла. Убедитесь в корректности данных в файле.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	НомерСтроки = 1;
	Пока Строка <> Неопределено Цикл
		
		НомерКолонки = 1;
		ЗначенияКолонок = СтрРазделить(Строка, ";", Истина);
		
		Для Каждого ЗначениеКолонки Из ЗначенияКолонок Цикл
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Ячейка.Текст = ЗначениеКолонки;
			
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		
		Строка = ЧтениеТекста.ПрочитатьСтроку();
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеКолонки(ТабличныйДокумент)
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	ПустыеКолонки = Новый Массив;
	
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		ВсеЯчейкиПустые = Истина;
		Для НомерСтроки = 1 По ВысотаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				ВсеЯчейкиПустые = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеЯчейкиПустые Тогда
			ПустыеКолонки.Добавить(НомерКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	ВГраница = ПустыеКолонки.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		
		НомерКолонки = ПустыеКолонки[ВГраница - Индекс];
		Область = ТабличныйДокумент.Область(, НомерКолонки, , НомерКолонки);
		ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(ТабличныйДокумент)
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	ПустыеСтроки = Новый Массив;
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		ВсеЯчейкиПустые = Истина;
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				ВсеЯчейкиПустые = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеЯчейкиПустые Тогда
			ПустыеСтроки.Добавить(НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ВГраница = ПустыеСтроки.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		
		НомерСтроки = ПустыеСтроки[ВГраница - Индекс];
		Область = ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки);
		ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрорисоватьГраницыЯчеек(ТабличныйДокумент)
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Ячейка.Обвести(Линия, Линия, Линия, Линия);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиПодходящуюКолонку(ЗаголовокКолонкиФайла, ОписаниеКолонок, СопоставленныеКолонки)
	
	ИскомыйЗаголовок = НРег(СокрЛП(ЗаголовокКолонкиФайла));
	
	Результат = Новый Структура("Заголовок, Идентификатор", "", "");
	Для Каждого Колонка Из ОписаниеКолонок Цикл
		
		Если СопоставленныеКолонки.Найти(Колонка.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка.ПодходящиеЗаголовкиФайла.Найти(ИскомыйЗаголовок) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Заголовок = Колонка.ПредставлениеКолонки;
		Если Не ПустаяСтрока(Колонка.Родитель) Тогда
			СтрокаРодитель = ОписаниеКолонок.Найти(Колонка.Родитель, "Идентификатор");
			Если СтрокаРодитель <> Неопределено Тогда
				Заголовок = СтрокаРодитель.ПредставлениеКолонки + ", " + Колонка.ПредставлениеКолонки;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Заголовок = Заголовок;
		Результат.Идентификатор = Колонка.Идентификатор;
		
		СопоставленныеКолонки.Добавить(Колонка.Идентификатор);
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АнализДанных(ТабличныйДокумент)
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	// Получаем массив информации о заполненности ячеек
	// 0 - ячейка пустая, 1 - ячейка заполнена
	ТаблицаАнализа = Новый ТаблицаЗначений;
	ТаблицаАнализа.Колонки.Добавить("СтрокаИнформации", Новый ОписаниеТипов("Строка"));
	ТаблицаАнализа.Колонки.Добавить("КоличествоПохожих", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл // пропускаем первую строку (заголовки колонок)
		
		СтрокаИнформации = "";
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(Ячейка.Текст), "0", "1");
			
		КонецЦикла;
		СтрокаТаблицы = ТаблицаАнализа.Добавить();
		СтрокаТаблицы.СтрокаИнформации = СтрокаИнформации;
		СтрокаТаблицы.КоличествоПохожих = 1;
		
	КонецЦикла;
	ИнформацияОЯчейках = ТаблицаАнализа.ВыгрузитьКолонку("СтрокаИнформации");
	ТаблицаАнализа.Свернуть("СтрокаИнформации", "КоличествоПохожих");
	ТаблицаАнализа.Сортировать("КоличествоПохожих УБЫВ");
	
	// Получаем массив строк, содержащих информацию к загрузке
	ИнформацияОЯчейкахКЗагрузке = Новый Массив;
	МинКолОдинаковыхСтруктур = 3;
	МинЧислоЗаполненныхЯчеек = 2;
	Для Каждого СтрокаТаблицы Из ТаблицаАнализа Цикл
		
		Если СтрокаТаблицы.КоличествоПохожих < МинКолОдинаковыхСтруктур Тогда
			
			Продолжить;
			
		ИначеЕсли СтрЧислоВхождений(СтрокаТаблицы.СтрокаИнформации, "1") < МинЧислоЗаполненныхЯчеек Тогда
			
			Продолжить;
			
		КонецЕсли;
		ИнформацияОЯчейкахКЗагрузке.Добавить(СтрокаТаблицы.СтрокаИнформации);
		
	КонецЦикла;
	
	ИнформацияОТаблице = Новый Структура;
	ИнформацияОТаблице.Вставить("ИнформацияОЯчейках", ИнформацияОЯчейках);
	ИнформацияОТаблице.Вставить("ИнформацияОЯчейкахКЗагрузке", ИнформацияОЯчейкахКЗагрузке);
	
	Возврат ИнформацияОТаблице;
	
КонецФункции

// Удаляет временный файл.
// Если при попытке удаления возникает ошибка, она игнорируется - файл будет удален позднее.
//
Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ПолноеИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти
