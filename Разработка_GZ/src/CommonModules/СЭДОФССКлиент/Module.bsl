#Область ПрограммныйИнтерфейс

// Открывает форму настроек организации в части социального ЭДО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо показать настройки.
//
Процедура ОткрытьНастройкиОрганизации(Организация) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	Страхователи = СЭДОФССВызовСервера.СтрахователиОрганизаций(Организация);
	Если Страхователи.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Страхователь = Страхователи[0];
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СЭДОФССРасширенныйКлиент");
		Модуль.ОткрытьНастройкиПолученияУведомленийОбЭЛН(Страхователь);
	Иначе
		ВызватьИсключение НСтр("ru = 'В программе отсутствует возможность получения сообщений ФСС об изменении состояний ЭЛН.'");
	КонецЕсли;
	// АПК:278-вкл
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ИменаСобытийШироковещательныхОповещений

// Возвращает имя оповещения форм, вызываемого после получения сообщений СЭДО от ФСС.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяСобытияПослеПолученияСообщенийОтФСС() Экспорт
	Возврат "ПослеПолученияСообщенийСЭДОФСС";
КонецФункции

// Возвращает имя оповещения форм, вызываемого после отправки подтверждения получения документов СЭДО ФСС.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяСобытияПослеОтправкиПодтвержденияПолучения() Экспорт
	Возврат "ПослеОтправкиПодтвержденияПолученияСообщенийСЭДОФСС";
КонецФункции

#КонецОбласти

#Область Обмен

// Получает сообщения ФСС.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   Организации - Неопределено, Массив из СправочникСсылка.Организации
//
Процедура ПолучитьСообщенияИзФСС(Организации = Неопределено) Экспорт
	Страхователи = СЭДОФССВызовСервера.СтрахователиОрганизаций(Организации);
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияСообщенийИзФСС", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(Обработчик, Страхователи);
КонецПроцедуры

// Получает сообщения ФСС за период.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   Организация - Неопределено, СправочникСсылка.Организации
//
Процедура ОткрытьФормуПолученияСообщенийЗаПериод(Организация = Неопределено) Экспорт
	ПараметрыФормы = Новый Структура("Организация", Организация);
	НеИскатьФорму = Истина;
	ОткрытьФорму("Обработка.ОбщиеФормыСЭДОФСС.Форма.ПолучениеСообщенийЗаПериод", ПараметрыФормы, , НеИскатьФорму);
КонецПроцедуры

// Получает указанные сообщения ФСС.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   ИдентификаторыСообщенийСтрахователей - Соответствие - Соообщения в разрезе страхователей:
//       * Ключ - СправочникСсылка.Организации - Страхователь
//       * Значение - Массив из Строка - Идентификаторы сообщений
//
Процедура ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей) Экспорт
	Страхователи = Новый Массив;
	Для Каждого КлючИЗначение Из ИдентификаторыСообщенийСтрахователей Цикл
		Страхователи.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Страхователи", Страхователи);
	Контекст.Вставить("ИдентификаторыСообщений", ИдентификаторыСообщенийСтрахователей);
	Контекст.Вставить("ТекущийИндекс", -1);
	Контекст.Вставить("Страхователь", Неопределено);
	Контекст.Вставить("ВГраница", Страхователи.ВГраница());
	Контекст.Вставить("Кратко", Новый Массив);
	Контекст.Вставить("Подробно", Новый Массив);
	Контекст.Вставить("ВозниклаОшибка", Ложь);
	
	ПродолжитьПовторноеПолучениеСообщенийИзФСС(Неопределено, Контекст);
КонецПроцедуры

// Отправляет подтверждения получения документов СЭДО ФСС.
//   После отправки вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеОтправкиПодтвержденияПолучения().
//
// Параметры:
//   МассивСсылок - Массив из ДокументСсылка - У документов должны быть реквизиты:
//       * Страхователь - СправочникСсылка.Организации - Страхователь, получивший документ.
//       * ИдентификаторСообщения - Строка - Идентификатор входящего сообщения СЭДО.
//
Процедура ОтправитьПодтверждениеПолучения(МассивСсылок) Экспорт
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если МассивСсылок.Количество() > 1 Тогда
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(МассивСсылок);
		Список.ЗаполнитьПометки(Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отмеченные", Список);
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", Список);
		ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Отправка подтверждения получения в ФСС'"));
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Обработчик = Новый ОписаниеОповещения("ОтправитьПодтверждениеПолученияЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	Иначе
		ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПолучитьСообщенияИзФСС

Процедура ПослеПолученияСообщенийИзФСС(Результат, ПустойПараметр) Экспорт
	Если Результат.ОшибкиПоОрганизациям.Количество() > 0 Тогда
		ТекстыОшибок = Новый Массив;
		Для Каждого КлючИЗначение Из Результат.ОшибкиПоОрганизациям Цикл
			Текст = Строка(КлючИЗначение.Ключ) + ":" + Символы.ПС + СтрСоединить(КлючИЗначение.Значение, Символы.ПС);
			ТекстыОшибок.Добавить(Текст);
		КонецЦикла;
		ИнформированиеПользователяКлиент.ПоказатьПодробности(
			СтрСоединить(ТекстыОшибок, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС),
			НСтр("ru = 'Информация об ошибке'"),
			БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
	Оповестить(ИмяСобытияПослеПолученияСообщенийОтФСС(), Результат);
КонецПроцедуры

#КонецОбласти

#Область ПовторноПолучитьСообщенияИзФСС

Процедура ПродолжитьПовторноеПолучениеСообщенийИзФСС(Результат, Контекст) Экспорт
	
	// Обработка результатов получения пакета сообщений очередного страхователя.
	Если Контекст.Страхователь <> Неопределено Тогда
		КоличествоОшибок = 0;
		Ошибки = Новый Массив;
		Если Результат <> Неопределено Тогда
			Для Каждого РезультатПолучения Из Результат.РезультатыПолучения Цикл
				Если ЗначениеЗаполнено(РезультатПолучения.ОписаниеОшибки) Тогда
					КоличествоОшибок = КоличествоОшибок + 1;
					Ошибки.Добавить(РезультатПолучения.ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		КоличествоСообщений = Контекст.ИдентификаторыСообщений[Контекст.Страхователь].Количество();
		Если КоличествоОшибок = 0 Тогда
			Если КоличествоСообщений = 0 Тогда
				КраткиеИтоги = НСтр("ru = 'Нет сообщений'");
			Иначе
				КраткиеИтоги = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';Успешно получено %1 сообщение;;Успешно получено %1 сообщения;Успешно получено %1 сообщений;'"),
					КоличествоСообщений);
			КонецЕсли;
			Подробности = "";
		Иначе
			Контекст.ВозниклаОшибка = Истина;
			КраткиеИтоги = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 ошибка;;%1 ошибки;%1 ошибок;'"),
				КоличествоОшибок);
			Подробности = Символы.ПС + СтрСоединить(Ошибки, Символы.ПС);
		КонецЕсли;
		ЗаголовокСообщения = Строка(Контекст.Страхователь) + ": " + КраткиеИтоги;
		Контекст.Кратко.Добавить(ЗаголовокСообщения);
		Контекст.Подробно.Добавить(ЗаголовокСообщения + Подробности);
	КонецЕсли;
	
	// Переход к следующему сообщению.
	Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
	
	// Возврат результата если сообщение уже отправлено.
	Если Контекст.ТекущийИндекс > Контекст.ВГраница Тогда
		ИнформированиеПользователяКлиент.Предупредить(
			СтрСоединить(Контекст.Кратко, Символы.ПС),
			СтрСоединить(Контекст.Подробно, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС),
			?(Контекст.ВозниклаОшибка, НСтр("ru = 'Информация об ошибке'"), НСтр("ru = 'Результаты получения сообщений'")));
		Оповестить(ИмяСобытияПослеПолученияСообщенийОтФСС(), Результат);
		Возврат;
	КонецЕсли;
	
	// Отправка подтверждения получения сообщения.
	Контекст.Страхователь = Контекст.Страхователи[Контекст.ТекущийИндекс];
	Идентификаторы = Контекст.ИдентификаторыСообщений[Контекст.Страхователь];
	Если Идентификаторы.Количество() = 0 Тогда
		ПродолжитьПовторноеПолучениеСообщенийИзФСС(Неопределено, Контекст);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПродолжитьПовторноеПолучениеСообщенийИзФСС", ЭтотОбъект, Контекст);
		ЭлектронныйДокументооборотСФССКлиент.ПолучитьСообщенияСЭДО(Обработчик, Контекст.Страхователь, Идентификаторы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОтправитьПодтверждениеПолучения

Процедура ОтправитьПодтверждениеПолученияЗавершениеВыбора(СписокСсылок, ПустойПараметр) Экспорт
	Если ТипЗнч(СписокСсылок) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если ЭлементСписка.Пометка И МассивСсылок.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			МассивСсылок.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок);
КонецПроцедуры

Процедура ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок)
	Контекст = СЭДОФССВызовСервера.КонтекстОтправкиПодтвержденияПолучения(МассивСсылок);
	Контекст.Вставить("МассивСсылок", МассивСсылок);
	Контекст.Вставить("ТекущийИндекс", -1);
	Контекст.Вставить("ВГраница", Контекст.Страхователи.ВГраница());
	Контекст.Вставить("ТекстыОшибок", Новый Массив);
	
	ПродолжитьОтправкуПодтверждениеПолучения(Неопределено, Контекст);
КонецПроцедуры

Процедура ПродолжитьОтправкуПодтверждениеПолучения(РезультатОтправки, Контекст) Экспорт
	// Чтение результатов отправки.
	Если РезультатОтправки <> Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
			Контекст.ТекстыОшибок.Добавить(РезультатОтправки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Переход к следующему сообщению.
	Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
	
	// Возврат результата если сообщение уже отправлено.
	Если Контекст.ТекущийИндекс > Контекст.ВГраница Тогда
		Если Контекст.ТекстыОшибок.Количество() > 0 Тогда
			ИнформированиеПользователяКлиент.ПоказатьПодробности(
				СтрСоединить(Контекст.ТекстыОшибок, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС),
				НСтр("ru = 'Информация об ошибке'"),
				БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;
		Оповестить(ИмяСобытияПослеОтправкиПодтвержденияПолучения(), Контекст);
		Возврат;
	КонецЕсли;
	
	// Отправка подтверждения получения сообщения.
	Страхователь = Контекст.Страхователи[Контекст.ТекущийИндекс];
	Обработчик = Новый ОписаниеОповещения("ПродолжитьОтправкуПодтверждениеПолучения", ЭтотОбъект, Контекст);
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьПодтверждениеОПолученииСообщенийСЭДО(
		Обработчик,
		Страхователь,
		Контекст.ИдентификаторыСообщенийСтрахователей[Страхователь]);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
