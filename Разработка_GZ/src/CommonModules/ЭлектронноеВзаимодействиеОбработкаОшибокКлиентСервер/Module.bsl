////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер: механизм диагностики обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует структуру, содержащую информацию об ошибке. Используется в ЭлектронноеВзаимодействиеОбработкаОшибок.ДобавитьОшибку,
// ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку.
//
// Параметры:
//  ВидОперации                  - Строка - наименование операции, во время выполнения которой возникла ошибка.
//  ВидОшибки                    - Строка - см. область ВидыОшибок модуля ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.
//  ПодробноеПредставлениеОшибки - Строка - подробное представление ошибки.
//  КраткоеПредставлениеОшибки   - Строка - краткое представление ошибки.
//  ДополнительныеПараметры      - Структура - дополнительные параметры для инициализации ошибки со свойствами:
//     * УчетнаяЗапись           - Строка - идентификатор учетной записи, по которой произошла ошибка.
//     * Сертификат              - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                                 по которому произошла ошибка.
//     * КодСобытия              - Строка - код события для журнала регистрации.
//     * СсылкаНаОбъект          - ЛюбаяСсылка - объект, по которому возникла ошибка.
//     * ДополнительныеДанные    - Произвольный - произвольные данные.
// 
// Возвращаемое значение:
//  Структура - со свойствами, описанными в разделе "Параметры". 
//
Функция НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ВидОперации", ВидОперации);
	Ошибка.Вставить("ВидОшибки", ВидОшибки);
	Ошибка.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	Ошибка.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки);	
	Ошибка.Вставить("УчетнаяЗапись", "");
	Ошибка.Вставить("Сертификат", Неопределено);
	Ошибка.Вставить("КодСобытия", "ОбменСКонтрагентами");
	Ошибка.Вставить("СсылкаНаОбъект", Неопределено);
	Ошибка.Вставить("ДополнительныеДанные", Неопределено);
	Ошибка.Вставить("Идентификатор", "" + Новый УникальныйИдентификатор);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
			Ошибка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Получает значения свойств ошибок.
//
// Параметры:
//  Ошибки   - Массив из см. ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка - коллекция ошибок.
//  Свойство - Строка - свойство ошибки.
//  Отбор    - Структура - содержит условия фильтрации ошибок для получения свойств.
//    * Ключ - имя свойства ошибки.
//    * Значение - значение свойства ошибки или массив значений.
// 
// Возвращаемое значение:
//  Массив - значения свойств ошибок.
//
Функция ЗначенияСвойствОшибок(Ошибки, Свойство, Отбор = Неопределено) Экспорт
	
	Значения = Новый Массив;
	Для каждого Ошибка Из Ошибки Цикл
		Если ОшибкаСоответствуетОтбору(Ошибка, Отбор) Тогда
			Значение = Ошибка[Свойство];
			Если Значения.Найти(Значение) = Неопределено И ЗначениеЗаполнено(Значение) Тогда
				Значения.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

#Область ВидыОшибок

// Состав ошибок можно расширить собственными строковыми константами.
// Пример: "ОшибкаИнтернетСоединения" или ИмяМодуля.ВидОшибкиОшибкаИнтернетСоединения() - возвращает строковый
// идентификатор вида ошибки.
// Пример инициализации и обработки новой ошибки:
// КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
// Попытка
//      Результат = 5 / 0;
// Исключение
//      Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(НСтр("ru = 'Получение маркера'"),
//          ОбменСКонтрагентамиСлужебныйКлиентСервер.ВидОшибкиДелениеНаНоль(), // инициализация
//          ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
//          НСтр("ru = 'Произошла ошибка при вычислении выражения'"));
//      ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка);
// КонецПопытки;
// ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
// Обработка происходит в процедуре ЭлектронноеВзаимодействиеСлужебныйКлиент.ПриОпределенииПараметровВидаОшибки:
//
// Если ВидОшибки = ОбменСКонтрагентамиСлужебныйКлиентСервер.ВидОшибкиДелениеНаНоль() Тогда
//     ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка деления на ноль'");
//     ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'На ноль делить нельзя'");
//     ОписаниеРешения = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(
//         НСтр("ru = '<a href = ""Обратитесь"">Обратитесь</a> в техподдержку'"));
//     ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
//     ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Обратитесь",
//         ОбменСКонтрагентамиДиагностикаКлиентСервер.ОбработчикОткрытияФормыОбращенияВТехподдержку());
// КонецЕсли;


Функция ВидОшибкиМаршрутПодписания() Экспорт
	
	Возврат "МаршрутПодписания";
	
КонецФункции

#КонецОбласти

#Область СтатусыОшибок

Функция СтатусОшибкиВажная() Экспорт
	
	Возврат "Важная";
	
КонецФункции

Функция СтатусОшибкиОбычная() Экспорт
	
	Возврат "Обычная";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ДобавитьОшибку(КонтекстОперации, Ошибка, ЗаписыватьВЖурналРегистрации, КодСобытия, СообщатьОбОшибке) Экспорт
	
	Если Не ЗначениеЗаполнено(Ошибка.ВидОшибки) Или СообщатьОбОшибке Тогда
		СообщениеДляПользователя = Ошибка.КраткоеПредставлениеОшибки;
	Иначе
		СообщениеДляПользователя = "";
		Если Не ЗначениеЗаполнено(Ошибка.УчетнаяЗапись) И ЗначениеЗаполнено(КонтекстОперации.ТекущаяУчетнаяЗапись) Тогда
			Ошибка.УчетнаяЗапись = КонтекстОперации.ТекущаяУчетнаяЗапись;
		КонецЕсли;
		КонтекстОперации.Диагностика.Ошибки.Добавить(Ошибка);
	КонецЕсли;
		
	Если ЗаписыватьВЖурналРегистрации Тогда
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Ошибка.ВидОперации, Ошибка.ПодробноеПредставлениеОшибки,
			СообщениеДляПользователя, КодСобытия, Ошибка.СсылкаНаОбъект); 
		СообщениеДляПользователя = "";
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка, СообщениеДляПользователя", Ошибка, СообщениеДляПользователя);
	
КонецФункции

Функция ОтборЖурналаРегистрации(КонтекстОперации) Экспорт
	
	ДатаНачала = КонтекстОперации.ДатаНачалаОперации;
	ДатаОкончания = КонтекстОперации.ДатаОкончанияОперации;
	Если Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", ДатаНачала);
	Отбор.Вставить("ДатаОкончания", ДатаОкончания);
	Отбор.Вставить("Пользователь", КонтекстОперации.ТекущийПользовательИБ);
	
	Возврат Отбор;
	
КонецФункции 

Функция ОшибкаСоответствуетОтбору(Ошибка, Отбор) Экспорт
	
	УсловияОтбораВыполнены = Истина;
	Если Отбор <> Неопределено Тогда
		Для каждого КлючИЗначение Из Отбор Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				Если КлючИЗначение.Значение.Найти(ЗначениеСвойства(Ошибка, КлючИЗначение.Ключ)) = Неопределено Тогда
					УсловияОтбораВыполнены = Ложь;
					Продолжить;
				КонецЕсли;
			Иначе 
				Если КлючИЗначение.Значение <> ЗначениеСвойства(Ошибка, КлючИЗначение.Ключ) Тогда
					УсловияОтбораВыполнены = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат УсловияОтбораВыполнены;

КонецФункции

Функция ЗначениеСвойства(Структура, Путь) 
	
	МассивЧастейПути = СтрРазделить(Путь, ".", Ложь);
	Возврат ЗначениеСвойстваРекурсивно(Структура, МассивЧастейПути);
	
КонецФункции

Функция ЗначениеСвойстваРекурсивно(Объект, МассивЧастейПути) 
	
	Если МассивЧастейПути.Количество() = 0 Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	ЧастьПути = МассивЧастейПути[0];
	Если Объект = Неопределено Или ТипЗнч(Объект) <> Тип("Структура")
		Или Не Объект.Свойство(ЧастьПути) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Значение = Объект[ЧастьПути];
	МассивЧастейПути.Удалить(0);
	Если МассивЧастейПути.Количество() Тогда
		Возврат ЗначениеСвойстваРекурсивно(Значение, МассивЧастейПути); 
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
