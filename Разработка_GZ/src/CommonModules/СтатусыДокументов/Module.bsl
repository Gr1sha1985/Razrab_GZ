#Область ПрограммныйИнтерфейс

#Область СтатусыДокументов

// Возвращает право на редактирование статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоИзмененияСтатусовДокументов(МетаданныеДокумента) Экспорт
	
	// Право на изменение статусов определяется правом на редактирование данных документа.
	
	Возврат ПравоДоступа("Редактирование", МетаданныеДокумента);
	
КонецФункции

// Возвращает право на просмотр статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоЧтенияСтатусовДокументов() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СтатусыДокументов);
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов
//
// Параметры:
//   ТаблицаОплатыСчетов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов()
//
Функция ПодготовитьТаблицуСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОплатыСчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	Реквизиты    = Параметры.Реквизиты[0];
	ОплатаСчетов = Параметры.ОплатаСчетов;
	ОплатаСчетов.Свернуть("СчетНаОплату", "Сумма");
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.ИсточникДанных = ОплатаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "СчетНаОплату");
	Блокировка.Заблокировать();
	
	// Читаем статусы оплаченных счетов и отсекаем те счета, статусы которых менять не собираемся
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОплатаСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ОплатаСчетов КАК ОплатаСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату,
	|	ТаблицаДокументов.Сумма КАК СуммаОплаты,
	|	СчетаНаОплату.Дата КАК Дата,
	|	СчетаНаОплату.СуммаДокумента КАК СуммаСчета,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов_Статусы
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетаНаОплату
	|		ПО (СчетаНаОплату.Организация = ТаблицаДокументов.Организация)
	|			И (СчетаНаОплату.Ссылка = ТаблицаДокументов.СчетНаОплату)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Организация = ТаблицаДокументов.Организация)
	|			И (СтатусыДокументов.Документ = ТаблицаДокументов.СчетНаОплату)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Статус В(&АвтоматическиИзменяемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетНаОплату";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтатусОплатыПоУмолчанию   = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
	
	ТипРегистратора = ТипЗнч(Реквизиты.Регистратор);
	Если ТипРегистратора = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		Или ТипРегистратора = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателю", "СчетНаОплатуПоставщика");
		ДополнительныйСтатусПоУмолчанию = Перечисления.СтатусыПоступленияПоСчету.СтатусНовогоДокумента();
	Иначе
		Запрос.Текст = ТекстЗапроса;
		ДополнительныйСтатусПоУмолчанию = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОплатаСчетов", ОплатаСчетов);
	Запрос.УстановитьПараметр("АвтоматическиИзменяемыеСтатусы", АвтоматическиИзменяемыеСтатусыОплаты());
	
	Запрос.Параметры.Вставить("СтатусОплатыПоУмолчанию",   СтатусОплатыПоУмолчанию);
	Запрос.Параметры.Вставить("ДополнительныйСтатусПоУмолчанию", ДополнительныйСтатусПоУмолчанию);
	
	ТаблицаНеоплаченныхСчетов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	Если ТаблицаНеоплаченныхСчетов.Количество() = 0 Тогда
		Возврат ТаблицаСтатусов;
	КонецЕсли;
	
	// Раньше даты первого счета не имеет смысла искать оплаты
	Запрос.УстановитьПараметр(
		"ДатаПервогоСчета", НачалоДня(ТаблицаНеоплаченныхСчетов[0].Дата));
	
	Запрос.УстановитьПараметр("ПозицияРегистратора",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.УстановитьПараметр("НеоплаченныеСчета",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНеоплаченныхСчетов, "СчетНаОплату"));
	
	// При определении суммы оплаты, учитываем суммы поступившие как до регистратора, так и после
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВложенныйЗапрос.СуммаОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВТ_ОплатаСчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату КАК СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот КАК СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ДатаПервогоСчета,
	|				&ПозицияРегистратора,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&НеоплаченныеСчета)) КАК ОплатаСчетовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ПозицияРегистратора,
	|				,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&НеоплаченныеСчета)) КАК ОплатаСчетовОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетНаОплату
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату КАК Документ,
	|	ТаблицаДокументов.СуммаОплаты + ЕСТЬNULL(ОплатаСчетов.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ТаблицаДокументов.СуммаСчета КАК СуммаСчета,
	|	ТаблицаДокументов.ДополнительныйСтатус КАК ДополнительныйСтатус
	|ИЗ
	|	ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОплатаСчетов КАК ОплатаСчетов
	|		ПО ТаблицаДокументов.СчетНаОплату = ОплатаСчетов.СчетНаОплату
	|ГДЕ
	|	ТаблицаДокументов.СчетНаОплату В(&НеоплаченныеСчета)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.СуммаОплаты >= Выборка.СуммаСчета Тогда
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.Оплачен;
		ИначеЕсли Выборка.СуммаОплаты > 0 Тогда
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично;
		Иначе
			НоваяСтрока.Статус = Перечисления.СтатусОплатыСчета.НеОплачен;
		КонецЕсли;
		
		Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
			СостояниеИнтеграции = 
				РегистрыСведений.ДокументыИнтеграцииCRM.СостояниеИнтеграцииДокумента(Выборка.Документ);
			НоваяСтрока.ОтправитьОповещениеОбИзмененииСтатуса = (СостояниеИнтеграции <> Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовОплатыСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика> - счет на оплату
		+ "Сумма";        // <Число,15,2> - сумма оплаты в валюте счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при отгрузке по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаВозвратнаяТара - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(ТаблицаСчетовНаОплату, ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) ИЛИ НЕ ЗначениеЗаполнено(ТаблицаСчетовНаОплату)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) И Не ЗначениеЗаполнено(ТаблицаВозвратнаяТара) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокументов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСчетовНаОплату, "СчетНаОплатуПокупателю", Истина), Реквизиты.Организация);
		
	МассивСчетовНаОплату = Новый Массив;
	Для каждого ТекущийСтатус Из ТекущиеСтатусы Цикл
	
		ТекущийСтатусОтгрузки = ТекущийСтатус.Значение.ДополнительныйСтатус;
		Если НЕ ЗначениеЗаполнено(ТекущийСтатусОтгрузки)
		   ИЛИ АвтоматическиИзменяемыеСтатусыОтгрузки().Найти(ТекущийСтатусОтгрузки) <> Неопределено Тогда
		   
		   МассивСчетовНаОплату.Добавить(ТекущийСтатус.Ключ);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если МассивСчетовНаОплату.Количество() = 0 Тогда
		// Статус автоматически не меняется
		Возврат Неопределено;
	КонецЕсли; 
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов);
	
	Реквизиты      = Параметры.Реквизиты[0];
	ТоварыУслуги   = Параметры.ТоварыУслуги;
	ВозвратнаяТара = Параметры.ВозвратнаяТара;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	Для каждого СчетНаОплату Из МассивСчетовНаОплату Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Документ",    СчетНаОплату);
	КонецЦикла; 
	
	Блокировка.Заблокировать();
	
	РеализацииПоСчетам = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(МассивСчетовНаОплату);
	
	Для каждого СчетНаОплатуПокупателю Из МассивСчетовНаОплату Цикл
	
		РеализацииПоСчету = ОбщегоНазначения.ВыгрузитьКолонку(
			РеализацииПоСчетам.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплатуПокупателю)), 
			"Реализация", Истина);
		
		ЭтаРеализация = РеализацииПоСчету.Найти(Реквизиты.Регистратор);
		Если ЭтаРеализация <> Неопределено Тогда
			РеализацииПоСчету.Удалить(ЭтаРеализация);
		КонецЕсли;
		
		СтатусОтгрузки = Перечисления.СтатусыОтгрузки.Отгружен;
		
		// Товары и услуги
		ТоварыУслугиКРеализации = Документы.РеализацияТоваровУслуг.ТоварыУслугиКРеализацииПоСчету(
			СчетНаОплатуПокупателю, РеализацииПоСчету);
			
		Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализации Цикл
			Если СтрокаТаблицы.ЭтоУслуга И СтрокаТаблицы.Количество = 0 Тогда
				// Если количество не указано, считаем, что услуга оказывается один раз
				СтрокаТаблицы.Количество = 1;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТоварыУслуги Цикл
			НоваяСтрока = ТоварыУслугиКРеализации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
			НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
		КонецЦикла;
		
		ТоварыУслугиКРеализации.Свернуть("ЭтоУслуга, Номенклатура, Содержание", "Количество");
		Для Каждого СтрокаТаблицы Из ТоварыУслугиКРеализации Цикл
			Если СтрокаТаблицы.Количество > 0 Тогда
				СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Возвратная тара
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
			И СтатусОтгрузки <> Перечисления.СтатусыОтгрузки.ОтгруженЧастично Тогда
			
			ВозвратнаяТараКРеализации = Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(
				СчетНаОплатуПокупателю, РеализацииПоСчету);
			
			Для Каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
				НоваяСтрока = ВозвратнаяТараКРеализации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
				НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
			КонецЦикла;
			
			ВозвратнаяТараКРеализации.Свернуть("Номенклатура", "Количество");
			Для Каждого СтрокаТаблицы Из ВозвратнаяТараКРеализации Цикл
				Если СтрокаТаблицы.Количество > 0 Тогда
					СтатусОтгрузки = Перечисления.СтатусыОтгрузки.ОтгруженЧастично;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ             = СчетНаОплатуПокупателю;
		НоваяСтрока.Статус               = ТекущиеСтатусы[СчетНаОплатуПокупателю].Статус;
		НоваяСтрока.ДополнительныйСтатус = СтатусОтгрузки;
		
		Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
			СостояниеИнтеграции = 
				РегистрыСведений.ДокументыИнтеграцииCRM.СостояниеИнтеграцииДокумента(Реквизиты.СчетНаОплатуПокупателю);
			НоваяСтрока.ОтправитьОповещениеОбИзмененииСтатуса = (СостояниеИнтеграции <> Неопределено);
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовОтгрузкиПоСчетам(ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТоварыУслуги
	
	СписокОбязательныхКолонок = ""
		+ "ЭтоУслуга,"    // <Булево>
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Содержание,"   // <Строка, 1000> - содержание услуги
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВозвратнаяТара
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ВозвратнаяТара", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвратнаяТара, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетНаОплатуПокупателю"; // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Готовит данные для движений по регистру СтатусыДокументов при поступлении по счетам.
//
// Параметры:
//   ТаблицаТоварыУслуги - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//   ТаблицаВозвратнаяТара - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам()
//
Функция ПодготовитьТаблицуСтатусовПоступленияПоСчетам(ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслуги) И Не ЗначениеЗаполнено(ТаблицаВозвратнаяТара) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не ЗначениеЗаполнено(Реквизиты.СчетНаОплатуПоставщика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеСтатусы = РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(
		Реквизиты.СчетНаОплатуПоставщика, Реквизиты.Организация);
	
	ТекущийСтатусОплаты      = ТекущиеСтатусы.Статус;
	ТекущийСтатусПоступления = ТекущиеСтатусы.ДополнительныйСтатус;
	
	Если ЗначениеЗаполнено(ТекущийСтатусПоступления)
	   И АвтоматическиИзменяемыеСтатусыПоступленияПоСчету().Найти(ТекущийСтатусПоступления) = Неопределено Тогда
		// Статус автоматически не меняется.
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам(
		ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов);
	
	Реквизиты      = Параметры.Реквизиты[0];
	ТоварыУслуги   = Параметры.ТоварыУслуги;
	ВозвратнаяТара = Параметры.ВозвратнаяТара;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументов");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Документ",    Реквизиты.СчетНаОплатуПоставщика);
	Блокировка.Заблокировать();
	
	ПоступленияПоСчету = Документы.ПоступлениеТоваровУслуг.ПоступленияПоСчету(Реквизиты.СчетНаОплатуПоставщика);
	
	ТекущееПоступление = ПоступленияПоСчету.Найти(Реквизиты.Регистратор);
	Если ТекущееПоступление <> Неопределено Тогда
		ПоступленияПоСчету.Удалить(ТекущееПоступление);
	КонецЕсли;
	
	СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.Получен;
	
	// Товары и услуги
	ТоварыУслугиКПоступлению = Документы.ПоступлениеТоваровУслуг.ТоварыУслугиКПоступлениюПоСчету(
		Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету);
	Для Каждого СтрокаТаблицы Из ТоварыУслугиКПоступлению Цикл
		Если СтрокаТаблицы.ЭтоУслуга И СтрокаТаблицы.Количество = 0 Тогда
			// Если количество не указано, считаем, что услуга получается один раз.
			СтрокаТаблицы.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		НоваяСтрока = ТоварыУслугиКПоступлению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
		НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
	КонецЦикла;
	
	ТоварыУслугиКПоступлению.Свернуть("ЭтоУслуга, Номенклатура, Содержание", "Количество");
	Для Каждого СтрокаТаблицы Из ТоварыУслугиКПоступлению Цикл
		Если СтрокаТаблицы.Количество > 0 Тогда
			СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Возвратная тара
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И СтатусПоступления <> Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично Тогда
		
		ВозвратнаяТараКПоступлению = Документы.ПоступлениеТоваровУслуг.ВозвратнаяТараКПоступлениюПоСчету(
			Реквизиты.СчетНаОплатуПоставщика, ПоступленияПоСчету);
		
		Для Каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТараКПоступлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Количество");
			НоваяСтрока.Количество = -СтрокаТаблицы.Количество;
		КонецЦикла;
		
		ВозвратнаяТараКПоступлению.Свернуть("Номенклатура", "Количество");
		Для Каждого СтрокаТаблицы Из ВозвратнаяТараКПоступлению Цикл
			Если СтрокаТаблицы.Количество > 0 Тогда
				СтатусПоступления = Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСтатусов.Добавить();
	НоваяСтрока.Документ = Реквизиты.СчетНаОплатуПоставщика;
	НоваяСтрока.Статус = ТекущийСтатусОплаты;
	НоваяСтрока.ДополнительныйСтатус = СтатусПоступления;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовПоступленияПоСчетам(ТаблицаТоварыУслуги, ТаблицаВозвратнаяТара, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТоварыУслуги
	
	СписокОбязательныхКолонок = ""
		+ "ЭтоУслуга,"    // <Булево>
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Содержание,"   // <Строка, 1000> - содержание услуги
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслуги, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВозвратнаяТара
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура," // <СправочникСсылка.Номенклатура>
		+ "Количество";   // <Число, 10, 3>
	
	Параметры.Вставить("ВозвратнаяТара", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвратнаяТара, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетНаОплатуПоставщика"; // <ДокументСсылка.СчетНаОплатуПоставщика> - счет на оплату
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Формирует движения по регистру СтатусыДокументов
//
// Параметры:
//   ТаблицаСтатусов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыСтатусовДокументов()
//
Процедура СформироватьДвиженияСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаСтатуса Из Параметры.СтатусыДокументов Цикл
		
		// При записи набора, удаляем статусы, относящиеся к другой организации
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Установить(СтрокаСтатуса.Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Реквизиты.Организация;
		Запись.Документ    = СтрокаСтатуса.Документ;
		Запись.Статус      = СтрокаСтатуса.Статус;
		Запись.ДополнительныйСтатус = СтрокаСтатуса.ДополнительныйСтатус;
		
		НаборЗаписей.Записать();
		
		Если СтрокаСтатуса.ОтправитьОповещениеОбИзмененииСтатуса Тогда
			РегистрыСведений.ДокументыИнтеграцииCRM.ЗарегистрироватьКОтправке(СтрокаСтатуса.Документ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СтатусыДокументов
	
	СписокОбязательныхКолонок = ""
		+ "Документ," // <ДокументСсылка.*> - документ
		+ "Статус," // <ПеречислениеСсылка.*> - статус
		+ "ДополнительныйСтатус," // <ПеречислениеСсылка.*> - дополнительный статус
		+ "ОтправитьОповещениеОбИзмененииСтатуса"; // Булево - признак отправки оповещения
	
	Параметры.Вставить("СтатусыДокументов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтатусов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПокупателю
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления формы
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(УсловноеОформление) Экспорт
	
	// Вся строка серым, если счет отменен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусыОтгрузки.НеОтгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус отгузки красным, если не отгружен, но хотя бы частично оплачен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.НеОтгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки красным, если частично отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.ОтгруженЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус отгрузки зеленым, если отгружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Отгрузка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Отгрузка", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыОтгрузки.Отгружен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

// Добавляет общее условное оформление форм списков документа СчетНаОплатуПоставщика.
//
// Параметры:
//   УсловноеОформлениеСписка - УсловноеОформлениеКомпоновкиДанных - настройки условного оформления динамического списка.
//
Процедура УстановитьУсловноеОформлениеСтатусовСчетовНаОплатуПоставщика(УсловноеОформлениеСписка) Экспорт
	
	// Вся строка серым, если счет отменен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	// Статус оплаты красным, если не оплачен, но хотя бы частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты красным, если частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус оплаты зеленым, если оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оплата");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Статус поступления красным, если не получен, но хотя бы частично оплачен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.НеОплачен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления красным, если частично получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Статус поступления зеленым, если получен.
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Поступление", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыПоступленияПоСчету.Получен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСтатусовСчетовФактур(УсловноеОформлениеСписка) Экспорт
	
	ЭлементУО = УсловноеОформлениеСписка.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетФактура");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Проведен", ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"СчетФактура", ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтатусыСчетаФактуры.НеПроведен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"СчетФактура",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтатусыСчетаФактуры.Отсутствует);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
		
КонецПроцедуры

#КонецОбласти

#Область ОплатаСчетов

// Формирует движения по регистру ОплатаСчетов
//
// Параметры:
//   ТаблицаОплатыСчетов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыОплатаСчетов()
//   ТаблицаРеквизитов - ТаблицаЗначений - описание см. в ПодготовитьПараметрыОплатаСчетов()
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - флаг отказа от записи движений
//
Процедура СформироватьДвиженияОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОплатыСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движения.ОплатаСчетов.Записывать = Истина;
	
	Для Каждого СтрокаОплаты Из Параметры.ОплатаСчетов Цикл
		
		Если СтрокаОплаты.Сумма <> 0 Тогда
			НовоеДвижение = Движения.ОплатаСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОплаты);
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
		+ "СтавкаНДС,"    // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
		+ "Сумма,"        // <Число, 15, 2> - сумма оплаты в валюте счета включая НДС
		+ "СуммаНДС,"     // <Число, 15, 2> - сумма НДС в валюте счета
		+ "Валюта";       // <СправочникСсылка.Валюта> - валюта счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Уменьшает таблицу УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС() на
// сумму полученного аванса по счету. Вызывается из обработки заполнения платежных документов.
//
// Параметры:
//  ДанныеОбъекта  - структуры реквизитов объекта со свойствами:
//     * Организация   - СправочникСсылка.Организации
//     * Основание     - ДокументСсылка.СчетНаОплатуПокупателю - счет, на основании которого введен документ
//     * ДатаОснования - Дата - дата документа счета на оплату
//  ТаблицаСуммВРазрезеСтавокНДС - ТаблицаЗначений - таблица значений с колонками
//     * Сумма - Число(15, 2) - полная сумма к оплате со всеми налогами
//     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - ставка НДС
//     * СуммаНДС - Число(15, 2) - сумма НДС
//
// Возвращаемое значение:
//   ТаблицаЗначений - ТаблицаЗначений - таблица значений с колонками
//     * Сумма - Число(15, 2) - сумма к оплате, уменьшенная на сумму аванса
//     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - ставка НДС
//     * СуммаНДС - Число(15, 2) - сумма НДС
//
Функция ТаблицаСуммКОплатеВРазрезеСтавокНДС(ДанныеОбъекта, ТаблицаСуммВРазрезеСтавокНДС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  ДанныеОбъекта.Организация);
	Запрос.УстановитьПараметр("СчетНаОплату", ДанныеОбъекта.Основание);
	Запрос.УстановитьПараметр("ДатаСчета",    НачалоДня(ДанныеОбъекта.ДатаОснования));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСчетовОбороты.СтавкаНДС КАК СтавкаНДС,
	|	ОплатаСчетовОбороты.СуммаОборот КАК Сумма,
	|	ОплатаСчетовОбороты.СуммаНДСОборот КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.ОплатаСчетов.Обороты(
	|			&ДатаСчета,
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетНаОплату = &СчетНаОплату) КАК ОплатаСчетовОбороты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТаблицаСуммКОплате = ТаблицаСуммВРазрезеСтавокНДС.СкопироватьКолонки();
		
		ТаблицаОплат = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаТаблицыСумм Из ТаблицаСуммВРазрезеСтавокНДС Цикл
			
			НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицыСумм.СтавкаНДС));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НеоплаченнаяСумма    = Макс(СтрокаТаблицыСумм.Сумма - НайденныеСтроки[0].Сумма, 0);
				НеоплаченнаяСуммаНДС = Макс(СтрокаТаблицыСумм.СуммаНДС - НайденныеСтроки[0].СуммаНДС, 0);
			Иначе
				НеоплаченнаяСумма    = СтрокаТаблицыСумм.Сумма;
				НеоплаченнаяСуммаНДС = СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли;
			
			Если НеоплаченнаяСумма > 0 Тогда
				НоваяСтрока = ТаблицаСуммКОплате.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСумм);
				НоваяСтрока.Сумма     = НеоплаченнаяСумма;
				НоваяСтрока.СуммаНДС  = НеоплаченнаяСуммаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТаблицаСуммКОплате = ТаблицаСуммВРазрезеСтавокНДС;
	КонецЕсли;
	
	Возврат ТаблицаСуммКОплате;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Рассчитывает статус входящего документа и дополнительный статус счета-фактуры к нему, 
// либо статус оригинала счета-фактуры, если записывается счет-фактура.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма объекта, запись которого выполняется.
//   Отказ - Булево - флаг отказа.
//   ТекущийОбъект - ДокументОбъект - объект записываемого документа.
//   ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
Процедура ВходящийДокументПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента",
		?(Форма.ОригиналПолучен,
		Перечисления.СтатусыДокументовПоступления.ОригиналПолучен,
		Перечисления.СтатусыДокументовПоступления.ОригиналНеПолучен));
		
	ЭтоУстановкаСтатусаСчетаФактуры = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный");
	Если ЭтоУстановкаСтатусаСчетаФактуры Тогда
		Возврат;
	КонецЕсли;
	
	// Рассчитываем возможный статус счета-фактуры по данным формы.
	// Статус счета-фактуры будет дорассчитан в модуле объекта при записи.
	ЕстьСчетФактура = ЗначениеЗаполнено(Форма.СчетФактура) 
		ИЛИ ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного)
		ИЛИ (Объект.ЭтоУниверсальныйДокумент И РаботаСДоговорамиКонтрагентовБП.ДокументСНДС(Объект.Ссылка));
		
	Если Не Форма.ТребуетсяСчетФактура Тогда
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
	ИначеЕсли ЕстьСчетФактура Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
		ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись И Объект.Проведен Тогда
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
		Иначе
			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
		КонецЕсли;
	КонецЕсли;
	
	// Статус проведения счета-фактуры
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусСчетаФактуры", СтатусСчетаФактуры);
	// Статус оригинала счета-фактуры
	Если Форма.ТребуетсяСчетФактура И ЕстьСчетФактура Тогда
		
		Если Объект.ЭтоУниверсальныйДокумент Тогда
			ОригиналСчетаФактуры = Форма.ОригиналПолучен;
		Иначе
			ОригиналСчетаФактуры = Форма.ОригиналСчетаФактуры
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусОригиналаСчетаФактуры",
			?(ОригиналСчетаФактуры,
			Перечисления.СтатусыДокументовПоступления.ОригиналПолучен,
			Перечисления.СтатусыДокументовПоступления.ОригиналНеПолучен));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АвтоматическиИзменяемыеСтатусыОплаты()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	Статусы.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	Возврат Статусы;
	
КонецФункции

Функция АвтоматическиИзменяемыеСтатусыОтгрузки()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыОтгрузки.НеОтгружен);
	Статусы.Добавить(Перечисления.СтатусыОтгрузки.ОтгруженЧастично);
	
	Возврат Статусы;
	
КонецФункции

Функция АвтоматическиИзменяемыеСтатусыПоступленияПоСчету()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	Статусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	
	Возврат Статусы;
	
КонецФункции

Функция НоваяТаблицаСтатусов()
	
	ТаблицаСтатусов = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаСтатусов.Колонки.Добавить("ОтправитьОповещениеОбИзмененииСтатуса", Новый ОписаниеТипов("Булево"));
	ТаблицаСтатусов.Колонки.Удалить("Организация");
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

#КонецОбласти