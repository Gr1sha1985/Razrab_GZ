#Область ПрограммныйИнтерфейс

// Возвращает список условий перемещения продукции по правилам регионализации.
//
// Параметры:
//  GUIDЗаболеванияУсловийПеремещения - Строка - Глобальный идентификатор заболевания. Значение по умолчанию "".
//  НомерСтраницы                     - Число - Номер страницы. Значение по умолчанию 1.
//  КоличествоЭлементовНаСтранице     - Число - Номер элементов на странице.
//                                    - Неопределено - Значение по умолчанию.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокУсловийПеремещенияГрузаПоПравиламРегионализации(GUIDЗаболеванияУсловийПеремещения = "", НомерСтраницы = 1, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросСпискаУсловийПеремещенияГрузаПоПравиламРегионализации(GUIDЗаболеванияУсловийПеремещения, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает список статусов регионов по конкретному заболеванию.
//
// Параметры:
//   GUIDЗаболеванияУсловийПеремещения - Строка    - Глобальный идентификатор заболевания. Обязательный параметр.
//   ПараметрыОтбора                   - Структура - отборы регионов:
//    * ДанныеАдреса - Структура - отборы по адресу:
//       ** СтранаGUID          - Строка, глобальный идентификатор страны региона.
//       ** РегионGUID          - Строка, глобальный идентификатор региона.
//       ** РайонGUID           - Строка, глобальный идентификатор района.
//       ** НаселенныйПунктGUID - Строка, глобальный идентификатор населенного пункта.
//                                    - Неопределено - доп. отборы отсутствуют.
//  НомерСтраницы                     - Число - Номер страницы. Значение по умолчанию 1.
//  КоличествоЭлементовНаСтранице     - Число - Номер элементов на странице.
//                                    - Неопределено - Значение по умолчанию.
//
// Возвращаемое значение:
//  Структура - см. функцию ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора().
//
Функция СписокСтатусовРегионовПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора = Неопределено, НомерСтраницы = 1, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросСпискаСтатусовРегионовПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

//Возвращает список правил перемещения груза по конкретному заболеванию.
//
//Параметры:
//   GUIDЗаболеванияУсловийПеремещения - Строка       - Глобальный идентификатор заболевания. Обязательный параметр.
//   ПараметрыОтбора                   - Структура    - отборы:
//    * ТипПродукции     - Число        - Тип продукции (Ветеринарная категория груза - значение от 1 до 8).
//                       - Неопределено - Значение по умолчанию (доп.отбор отсутствует).
//    * ПродукцияGUID    - Строка       - глобальный идентификатор продукции.
//    * ВидПродукцииGUID - Строка       - глобальный идентификатор вида продукции.
//   НомерСтраницы                     - Число        - Номер страницы. Значение по умолчанию 1.
//   КоличествоЭлементовНаСтранице     - Число        - Номер элементов на странице.
//                                     - Неопределено - Значение по умолчанию.
//
// Возвращаемое значение:
//   Структура - (См. ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора).
//
Функция СписокПравилПеремещенияГрузаПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора = Неопределено, НомерСтраницы = 1, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Запрос = ЗапросСпискаПравилПеремещенияГрузаПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	РезультатВыполненияЗапроса = ИнтеграцияВЕТИС.ВыполнитьЗапросЭлементовКлассификатора(Запрос);
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Возвращает флаг необходимости проверки маршрута на регионализацию.
//
// Параметры:
// 	Маршрут - Массив - Массив структур со свойствами:
// 	 * Предприятие  - СправочникСсылка.ПредприятияВЕТИС - предприятие-точка маршрута. Может быть пустым значением.
// 	 * ДанныеАдреса - Структура адреса.
// 	                - Неопределено - Данные адреса не определены.
//
// Возвращаемое значение:
// 	Булево - Истина - если есть не заполненные адреса или есть адреса, расположенные в разных странах / регионах / районах региона / населенных пунктах.
//
Функция ЕстьПеремещениеМеждуРегионами(Маршрут) Экспорт
	
	ПроверятьРегионализацию = Ложь;
	
	Если Маршрут.Количество() > 1 Тогда
		ПредыдущиеДанныеАдреса = Неопределено;
		
		Предприятия = Новый Массив;
		Для каждого ДанныеМаршрута Из Маршрут Цикл
			Если ЗначениеЗаполнено(ДанныеМаршрута.Предприятие) Тогда
				Предприятия.Добавить(ДанныеМаршрута.Предприятие);
			Иначе
				Если ДанныеМаршрута.ДанныеАдреса = Неопределено Тогда
					// Пользователь должен корректно заполнить адрес.
					ПроверятьРегионализацию = Истина;
					Прервать;
				Иначе
					Если НЕ ПредыдущиеДанныеАдреса = Неопределено Тогда
						Если ДанныеМаршрута.ДанныеАдреса.НаселенныйПунктGUID <> ПредыдущиеДанныеАдреса.НаселенныйПунктGUID
							ИЛИ ДанныеМаршрута.ДанныеАдреса.РайонGUID <> ПредыдущиеДанныеАдреса.РайонGUID
							ИЛИ ДанныеМаршрута.ДанныеАдреса.РегионGUID <> ПредыдущиеДанныеАдреса.РегионGUID
							ИЛИ ДанныеМаршрута.ДанныеАдреса.СтранаGUID <> ПредыдущиеДанныеАдреса.СтранаGUID Тогда
							ПроверятьРегионализацию = Истина;
						КонецЕсли;
					КонецЕсли;
					ПредыдущиеДанныеАдреса = Новый Структура;
					ПредыдущиеДанныеАдреса.Вставить("НаселенныйПунктGUID", ДанныеМаршрута.ДанныеАдреса.НаселенныйПунктGUID);
					ПредыдущиеДанныеАдреса.Вставить("РайонGUID",           ДанныеМаршрута.ДанныеАдреса.РайонGUID);
					ПредыдущиеДанныеАдреса.Вставить("РегионGUID",          ДанныеМаршрута.ДанныеАдреса.РегионGUID);
					ПредыдущиеДанныеАдреса.Вставить("СтранаGUID",          ДанныеМаршрута.ДанныеАдреса.СтранаGUID);
					Если ПроверятьРегионализацию Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПроверятьРегионализацию
		   И Предприятия.Количество() > 0 Тогда
			ДанныеАдресовПредприятий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Предприятия, "ДанныеАдреса");
			
			Для каждого КлючИЗначение Из ДанныеАдресовПредприятий Цикл
				ДанныеАдреса = КлючИЗначение.Значение.Получить();
				Если НЕ ТипЗнч(ДанныеАдреса) = Тип("Структура")
					ИЛИ НЕ ДанныеАдреса.Свойство("НаселенныйПунктGUID")
					ИЛИ НЕ ДанныеАдреса.Свойство("РайонGUID")
					ИЛИ НЕ ДанныеАдреса.Свойство("РегионGUID")
					ИЛИ НЕ ДанныеАдреса.Свойство("СтранаGUID") Тогда
					// Пользователь должен корректно заполнить адрес.
					ПроверятьРегионализацию = Истина;
					Прервать;
				Иначе
					Если НЕ ПредыдущиеДанныеАдреса = Неопределено Тогда
						Если ДанныеАдреса.НаселенныйПунктGUID <> ПредыдущиеДанныеАдреса.НаселенныйПунктGUID
							ИЛИ ДанныеАдреса.РайонGUID <> ПредыдущиеДанныеАдреса.РайонGUID
							ИЛИ ДанныеАдреса.РегионGUID <> ПредыдущиеДанныеАдреса.РегионGUID
							ИЛИ ДанныеАдреса.СтранаGUID <> ПредыдущиеДанныеАдреса.СтранаGUID Тогда
							ПроверятьРегионализацию = Истина;
						КонецЕсли;
					КонецЕсли;
					ПредыдущиеДанныеАдреса = Новый Структура;
					ПредыдущиеДанныеАдреса.Вставить("НаселенныйПунктGUID", ДанныеАдреса.НаселенныйПунктGUID);
					ПредыдущиеДанныеАдреса.Вставить("РайонGUID",           ДанныеАдреса.РайонGUID);
					ПредыдущиеДанныеАдреса.Вставить("РегионGUID",          ДанныеАдреса.РегионGUID);
					ПредыдущиеДанныеАдреса.Вставить("СтранаGUID",          ДанныеАдреса.СтранаGUID);
					Если ПроверятьРегионализацию Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроверятьРегионализацию;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЗапросСпискаУсловийПеремещенияГрузаПоПравиламРегионализации(GUIDЗаболеванияУсловийПеремещения, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getR13nConditionList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Регионализация;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "condition";
	ПараметрыЗапроса.ИмяСписка        = "r13nConditionList";
	Если ЗначениеЗаполнено(GUIDЗаболеванияУсловийПеремещения) Тогда
		ПредставлениеЗапроса = НСтр("ru = 'запрос списка условий перемещения груза по правилам регионализации по заболеванию с guid %1'");
		ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЗапроса, GUIDЗаболеванияУсловийПеремещения);
	Иначе
		ПредставлениеЗапроса = НСтр("ru = 'запрос списка условий перемещения груза по правилам регионализации'");
	КонецЕсли;
	ПараметрыЗапроса.Представление    = ПредставлениеЗапроса;
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Если ЗначениеЗаполнено(GUIDЗаболеванияУсловийПеремещения) Тогда
		
		Запрос.disease = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "disease");
		Запрос.disease.guid = GUIDЗаболеванияУсловийПеремещения;
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросСпискаСтатусовРегионовПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getActualR13nRegionStatusList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Регионализация;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "status";
	ПараметрыЗапроса.ИмяСписка        = "r13nRegionStatusList";
	ПредставлениеЗапроса = НСтр("ru = 'запрос списка статусов регионов по заболеванию с guid %1'");
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЗапроса, GUIDЗаболеванияУсловийПеремещения);
	ПараметрыЗапроса.Представление    = ПредставлениеЗапроса;
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Запрос.disease = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "disease");
	Запрос.disease.guid = GUIDЗаболеванияУсловийПеремещения;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Если ПараметрыОтбора.Свойство("ДанныеАдреса")
			И ПараметрыОтбора.ДанныеАдреса <> Неопределено Тогда
			
			ДанныеАдреса = ПараметрыОтбора.ДанныеАдреса;
			
			Если    (ДанныеАдреса.Свойство("РегионGUID")          И ЗначениеЗаполнено(ДанныеАдреса.РегионGUID))
				Или (ДанныеАдреса.Свойство("РайонGUID")           И ЗначениеЗаполнено(ДанныеАдреса.РайонGUID))
				Или (ДанныеАдреса.Свойство("НаселенныйПунктGUID") И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID)) Тогда
				
				Запрос.r13nZone = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "r13nZone");
				
				Если ДанныеАдреса.Свойство("СтранаGUID")
					И ЗначениеЗаполнено(ДанныеАдреса.СтранаGUID) Тогда
					Запрос.r13nZone.country = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.r13nZone, "country");
					Запрос.r13nZone.country.guid = ДанныеАдреса.СтранаGUID;
				КонецЕсли;
				
				Если ДанныеАдреса.Свойство("РегионGUID")
					И ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
					Запрос.r13nZone.region = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.r13nZone, "region");
					Запрос.r13nZone.region.guid = ДанныеАдреса.РегионGUID;
				КонецЕсли;
				
				Если ДанныеАдреса.Свойство("РайонGUID")
					И ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
					Запрос.r13nZone.district = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.r13nZone, "district");
					Запрос.r13nZone.district.guid = ДанныеАдреса.РайонGUID;
				КонецЕсли;
				
				Если ДанныеАдреса.Свойство("НаселенныйПунктGUID")
					И ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
					Запрос.r13nZone.locality = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос.r13nZone, "locality");
					Запрос.r13nZone.locality.guid = ДанныеАдреса.НаселенныйПунктGUID;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗапросСпискаПравилПеремещенияГрузаПоКонкретномуЗаболеванию(GUIDЗаболеванияУсловийПеремещения, ПараметрыОтбора, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено)
	
	ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементовКлассификатора();
	ПараметрыЗапроса.ИмяМетода        = "getActualR13nShippingRuleList";
	ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен;
	ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.Регионализация;
	ПараметрыЗапроса.НомерСтраницы    = НомерСтраницы;
	ПараметрыЗапроса.ИмяЭлемента      = "rule";
	ПараметрыЗапроса.ИмяСписка        = "r13nShippingRuleList";
	ПредставлениеЗапроса = НСтр("ru = 'запрос списка правил перемещения грузов по заболеванию с guid %1'");
	ПредставлениеЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЗапроса, GUIDЗаболеванияУсловийПеремещения);
	ПараметрыЗапроса.Представление    = ПредставлениеЗапроса;
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	ПараметрыЗапроса.КоличествоЭлементовНаСтранице = КоличествоЭлементовНаСтранице;
	
	#Область ТекстаСообщенияXML
	
	ИмяМетода        = ПараметрыЗапроса.ИмяМетода;
	ПространствоИмен = ПараметрыЗапроса.ПространствоИмен;
	
	ИмяПакета = ИмяМетода + "Request";
	
	Запрос = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяПакета);
	
	ИнтеграцияВЕТИС.УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице);
	
	Запрос.disease = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "disease");
	Запрос.disease.guid = GUIDЗаболеванияУсловийПеремещения;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		Если ПараметрыОтбора.Свойство("ТипПродукции")
			И ПараметрыОтбора.ТипПродукции <> Неопределено Тогда
			
			Запрос.productType = ПараметрыОтбора.ТипПродукции;
			
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("ПродукцияGUID")
			И ЗначениеЗаполнено(ПараметрыОтбора.ПродукцияGUID) Тогда
			
			Запрос.product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "product");
			Запрос.product.guid = ПараметрыОтбора.ПродукцияGUID;
			
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("ВидПродукцииGUID")
			И ЗначениеЗаполнено(ПараметрыОтбора.ВидПродукцииGUID) Тогда
			
			Запрос.subProduct = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "subProduct");
			Запрос.subProduct.guid = ПараметрыОтбора.ВидПродукцииGUID;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияВЕТИС.ОбъектXDTOВXML(Запрос, ПространствоИмен, ИмяПакета);
	
	#КонецОбласти
	
	ПараметрыЗапроса.ТекстСообщенияXML = ТекстСообщенияXML;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти


