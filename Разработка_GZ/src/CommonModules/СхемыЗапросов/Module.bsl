// Модуль обеспечивает упрощенный синтаксис для распространенных операций с текстами запросов
// 
// См. также ОбщегоНазначенияБП.ВыражениеПоляЗапроса и ОбщегоНазначенияБП.УдалитьИсточникЗапроса

#Область ПрограммныйИнтерфейс

// Конструктор схемы запроса, инициализированной текстом запроса
//
// Параметры:
//  ТекстЗапроса - Строка 
// 
// Возвращаемое значение:
//  СхемаЗапроса
//
Функция Создать(ТекстЗапроса) Экспорт
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат СхемаЗапроса;
КонецФункции

// Находит в схеме первый запрос, выбирающий результативные данные (то есть, не создающий и не уничтожающий временные таблицы).
// Предполагается, что в дальнейшем запрос будет модифицироваться методами этого модуля.
//
// Параметры:
//  Запрос    - Строка - текст запроса;
//              Предполагается, что текст содержит запрос выбора из таблицы с указанным псевдонимом.
//            - СхемаЗапроса - схема, инициализированная таким текстом запроса.
// 
// Возвращаемое значение:
//  Структура - см. НовыйТочкаЗапроса - описание точки схемы запроса, выбирающего данные
//  Неопределено - запрос не найден
//
Функция НайтиЗапросРезультата(Запрос) Экспорт
	
	СхемаЗапроса = СхемаЗапроса(Запрос);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеЗапроса.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат НовыйТочкаЗапроса(СхемаЗапроса, ОписаниеЗапроса);
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Находит в схеме запроса таблицу по псевдониму для дальнейшей модификации этого запроса
// (таблицы или оператора запроса, содержащего таблицу).
//
// Параметры:
//  Запрос    - Строка - текст запроса;
//              Предполагается, что текст содержит запрос выбора из таблицы с указанным псевдонимом.
//            - СхемаЗапроса - схема, инициализированная таким текстом запроса.
//  Псевдоним - Строка - имя (псевдоним) искомой таблицы
// 
// Возвращаемое значение:
//  Структура - см. НовыйТочкаЗапроса - описание точки схемы запроса, в которой используется искомая таблица.
//  Неопределено - таблица не найдена
//
Функция НайтиТаблицуПоПсевдониму(Запрос, Псевдоним) Экспорт
	
	СхемаЗапроса = СхемаЗапроса(Запрос);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			
			ОписаниеИсточника = ОператорЗапроса.Источники.НайтиПоПсевдониму(Псевдоним);
			Если ОписаниеИсточника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат НовыйТочкаЗапроса(
				СхемаЗапроса,
				ОписаниеЗапроса,
				ОператорЗапроса,
				ОписаниеИсточника,
				ОписаниеИсточника.Источник);
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Находит запрос, формирующий временную таблицу с указанным именем.
//
// Параметры:
//  Запрос    - Строка - текст запроса;
//              Предполагается, что текст содержит запрос выбора, создающий временную таблицу.
//            - СхемаЗапроса - схема, инициализированная таким текстом запроса.
//  ИмяТаблицы - Строка - имя искомой таблицы
// 
// Возвращаемое значение:
//  Структура - см. НовыйТочкаЗапроса - описание точки схемы запроса, указывающей на запрос выбора, которым создана таблица.
//  Неопределено - запрос не найден либо таблица уничтожается в ходе запроса
//
Функция НайтиЗапросСозданияТаблицы(Запрос, ИмяТаблицы) Экспорт
	
	СхемаЗапроса = СхемаЗапроса(Запрос);
	
	// Обходим с конца, чтобы корректно обработать уничтожение таблиц
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	Для НомерСКонца = 1 По КоличествоЗапросов Цикл
		
		ИндексЗапроса = КоличествоЗапросов - НомерСКонца;
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса];
		
		Если ТипЗнч(ОписаниеЗапроса) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			
			Если ОписаниеЗапроса.ИмяТаблицы = ИмяТаблицы Тогда
				// Таблица уничтожена
				Возврат Неопределено;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОписаниеЗапроса) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			Если ОписаниеЗапроса.ТаблицаДляПомещения = ИмяТаблицы Тогда
				Возврат НовыйТочкаЗапроса(СхемаЗапроса, ОписаниеЗапроса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Дополняет условие в параметрах виртуальной таблицы регистра бухгалтерии.
//
// Параметры:
//  ТочкаЗапроса - Структура - см. НовыйТочкаЗапроса, описание точки схемы запроса,
//                 указывающей на виртуальную таблицу регистра бухгалтерии.
//                 Точка схемы запроса может быть получена с помощью НайтиТаблицуПоПсевдониму.
//  Условие      - Строка, ВыражениеСхемыЗапроса - выражение условия, которым дополняется (по И)
//                 ранее заданное условие отбора данных виртуальной таблицы.
//
Процедура ДополнитьУсловиеРегистраБухгалтерии(ТочкаЗапроса, Условие) Экспорт
	
	ИндексПараметраУсловие = ИндексПараметраУсловиеРегистраБухгалтерии(ТочкаЗапроса);
	
	ЗначениеУсловия = ТочкаЗапроса.Таблица.Параметры[ИндексПараметраУсловие];
	Если ПустаяСтрока(ЗначениеУсловия) Тогда
		ТекстУсловия = Условие;
	Иначе
		ТекстУсловия = ТочкаЗапроса.Таблица.Параметры[ИндексПараметраУсловие].Выражение;
		ТекстУсловия = СтрШаблон("(%1) И %2", ТекстУсловия, Условие);
	КонецЕсли;
	
	УстановитьПараметрВиртуальнойТаблицы(ТочкаЗапроса, ИндексПараметраУсловие, ТекстУсловия);
	
КонецПроцедуры

// Определяет выражение поля оператора запроса.
//
// Параметры:
//  ТочкаЗапроса - Структура - см. НовыйТочкаЗапроса, описание точки схемы запроса, указывающей на оператор запроса.
//                 Точка схемы запроса может быть получена с помощью НайтиТаблицуПоПсевдониму.
//  ИмяПоля      - Строка - имя поля запроса.
//                 При отсутствии поля в запросе выдается исключение.
// 
// Возвращаемое значение:
//  ВыражениеСхемыЗапроса - выражение поля в запросе.
//  Неопределено - выражение не задано.
//
Функция ВыражениеПоля(ТочкаЗапроса, ИмяПоля) Экспорт
	
	Колонка = ТочкаЗапроса.Запрос.Колонки.Найти(ИмяПоля);
	
	ПроверитьТекстЗапроса(
		ТипЗнч(Колонка) = Тип("КолонкаСхемыЗапроса"),
		СтрШаблон(НСтр("ru = 'Неверно задано поле %1'"), ИмяПоля),
		ТочкаЗапроса);
	
	Возврат Колонка.Поля[ТочкаЗапроса.Запрос.Операторы.Индекс(ТочкаЗапроса.Оператор)];
	
КонецФункции

// Оборачивает выражение поля запроса в агрегатную функцию
//
// Параметры:
//  ТочкаЗапроса - Структура - см. НовыйТочкаЗапроса, описание точки схемы запроса.
//                 Точка схемы запроса должна указывать на запрос или оператор запроса.
//                 Точка, указывающая на оператор, может быть получена с помощью НайтиТаблицуПоПсевдониму.
//                 Если точка не указывает на оператор запроса, то выражение будет установлено во всех операторах запроса.
//  Поле         - Строка - имя поля запроса, оборачиваемого в функцию. При отсутствии поля в запросе выдается исключение.
//               - КолонкаСхемыЗапроса - колонка, в которой нужно установить выражение
//               - Число - индекс колонки
//  АгрегатнаяФункция - Строка - имя агрегатной функции запроса, например "СУММА"
//
Процедура УстановитьАгрегатнуюФункцию(ТочкаЗапроса, Поле, АгрегатнаяФункция) Экспорт
	
	Если ТипЗнч(Поле) = Тип("КолонкаСхемыЗапроса") Тогда
		Колонка = Поле;
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Колонка = ТочкаЗапроса.Запрос.Колонки[Поле];
	Иначе
		Колонка = ТочкаЗапроса.Запрос.Колонки.Найти(Поле);
	КонецЕсли;
	
	ОператорыДляУстановки = Новый Массив;
	Если ТочкаЗапроса.Свойство("Оператор") Тогда
		ОператорыДляУстановки.Добавить(ТочкаЗапроса.Оператор);
	Иначе
		ОператорыДляУстановки = ТочкаЗапроса.Запрос.Операторы;
	КонецЕсли;
	
	Для Каждого Оператор Из ОператорыДляУстановки Цикл
		
		ИндексОператора = ТочкаЗапроса.Запрос.Операторы.Индекс(Оператор);
		Выражение       = Колонка.Поля[ИндексОператора];
		
		ПроверитьТекстЗапроса(
			ТипЗнч(Выражение) = Тип("ВыражениеСхемыЗапроса"),
			СтрШаблон(НСтр("ru = 'Агрегатная функция %1 не может быть применена к %2'"), АгрегатнаяФункция, Выражение),
			ТочкаЗапроса.Схема);
			
		Если Не Выражение.СодержитАгрегатнуюФункцию() Тогда
			ВыражениеАгрегатнойФункции = Новый ВыражениеСхемыЗапроса(СтрШаблон("%1(%2)", АгрегатнаяФункция, Выражение));
			УстановитьВыражениеПоля(ТочкаЗапроса.Запрос, Колонка, Оператор, ВыражениеАгрегатнойФункции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает выражение поля оператора запроса.
//
// Параметры:
//  ТочкаЗапроса - Структура - см. НовыйТочкаЗапроса, описание точки схемы запроса.
//                 Точка схемы запроса должна указывать на запрос или оператор запроса.
//                 Точка, указывающая на оператор, может быть получена с помощью НайтиТаблицуПоПсевдониму.
//                 Если точка не указывает на оператор запроса, то выражение будет установлено во всех операторах запроса.
//  ИмяПоля      - Строка - имя поля запроса.
//                 При отсутствии поля в запросе будет добавлено.
//  Выражение    - Строка, ВыражениеСхемыЗапроса - устанавливаемое выражение поля.
//  ЗаменятьУстановленное - Булево - Ложь позволяет установить только те значения,
//                 которые не установлены в тексте запроса (имеют эквивалент NULL)
//
// Возвращаемое значение:
//  КолонкаСхемыЗапроса - колонка, в которую установлено выражение (найденная по ИмяПоля или созданная)
//
Функция УстановитьВыражение(ТочкаЗапроса, ИмяПоля, Выражение, ЗаменятьУстановленное = Истина) Экспорт
	
	Если ТипЗнч(Выражение) = Тип("ВыражениеСхемыЗапроса") Тогда
		ВыражениеСхемыЗапроса = Выражение;
	Иначе
		ВыражениеСхемыЗапроса = Новый ВыражениеСхемыЗапроса(Выражение);
	КонецЕсли;
	
	ОператорыДляУстановки = Новый Массив;
	Если ТочкаЗапроса.Свойство("Оператор") Тогда
		ОператорыДляУстановки.Добавить(ТочкаЗапроса.Оператор);
	Иначе
		ОператорыДляУстановки = ТочкаЗапроса.Запрос.Операторы;
	КонецЕсли;
	
	Колонка = ТочкаЗапроса.Запрос.Колонки.Найти(ИмяПоля);
	ВыражениеСтрокой = Строка(ВыражениеСхемыЗапроса);
	
	Для Каждого Оператор Из ОператорыДляУстановки Цикл
		
		ИндексОператора = ТочкаЗапроса.Запрос.Операторы.Индекс(Оператор);
		
		Если Колонка = Неопределено Тогда
			ИндексКолонки = ТочкаЗапроса.Запрос.Колонки.Количество();
			Оператор.ВыбираемыеПоля.Добавить(ВыражениеСтрокой);
			Колонка = ТочкаЗапроса.Запрос.Колонки[ИндексКолонки];
			Колонка.Псевдоним = ИмяПоля;
		ИначеЕсли Колонка.Поля[ИндексОператора] = Неопределено Или ЗаменятьУстановленное Тогда
			УстановитьВыражениеПоля(ТочкаЗапроса.Запрос, Колонка, Оператор, ВыражениеСхемыЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Колонка;
	
КонецФункции

// Дополняет выражение поля запроса приведением типа к заданному ссылочному типу.
// В результате выбранное значение всегда будет иметь заданный тип:
// - если выбираемые данные - подходящего типа, то значение останется без изменений
// - если не подходящего (в том числе, отсутствуют), то значение будет пустой ссылкой.
//
// Параметры:
//  Выражение            - Строка, ВыражениеСхемыЗапроса - исходное выражение поля
//  Тип                  - ОписаниеТипов, Тип - ссылочный тип, к которому должно приводиться значение в поле
//  ВыражениеПоУмолчанию - Строка, ВыражениеСхемыЗапроса - выражение значения, которое будет присвоено,
//                         если результат исходного выражения имеет неподходящий тип.
//                         Если параметр не передан, то будет присваиваться значение пустой ссылки.
// 
// Возвращаемое значение:
//  ВыражениеСхемыЗапроса
//
Функция ВыражениеПриведениеТипа(Выражение, Тип, ВыражениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Тип") Тогда
		ЕдиничныйТип = Тип;
	Иначе
		ЕдиничныйТип = ИзвлечьТип(Тип);
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ЕдиничныйТип) Тогда
		// Приведение в такой тип не поддерживается
		Возврат Новый ВыражениеСхемыЗапроса(Выражение);
	КонецЕсли;
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ЕдиничныйТип));
	
	Если ВыражениеПоУмолчанию = Неопределено Тогда
		ВыражениеПоУмолчанию = СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", ИмяТаблицы);
	КонецЕсли;
	
	ТекстВыражениеПриведениеТипа = СтрШаблон(
		"ЕСТЬNULL(ВЫРАЗИТЬ(%1 КАК %2), %3)",
		Выражение,
		ИмяТаблицы,
		ВыражениеПоУмолчанию);
		
	Возврат Новый ВыражениеСхемыЗапроса(ТекстВыражениеПриведениеТипа);
	
КонецФункции

// Вычисляет значение константы, заданной в тексте запроса.
// Например, в тексте запроса функцией Значение() может быть задан предопределенный элемент справочника.
// Функция возвращает ссылку на этот элемент (типа СправочникСсылка).
//
// Параметры:
//  Выражение - Строка, ВыражениеСхемыЗапроса - исходное выражение текста запроса, содержащего константу (и только ее)
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - вычисленное значение константы
//
Функция ЗначениеКонстантыТекстаЗапроса(Выражение) Экспорт
	
	ТекстЗапроса = СтрШаблон("ВЫБРАТЬ %1 КАК Значение", Выражение);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка.Значение;
	
КонецФункции

// Во всех запросах выборки данных устанавливает таблицу для помещения.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - должна быть инициализирована текстом запроса.
//                 Предполагается, что в тексте есть запросы выборки данных без помещения во временную таблицу.
//  ИменаТаблиц  - Массив - имена временных таблиц, которые нужно установить в тексте запроса.
//                 В массиве должно быть столько элементов, сколько запросов без помещения в тексте запроса.
//               - Строка - строковое представление массива. Разделитель - ","
//
Процедура ПоместитьРезультаты(СхемаЗапроса, Знач ИменаТаблиц) Экспорт
	
	Если ТипЗнч(ИменаТаблиц) = Тип("Строка") Тогда
		ИменаТаблиц = СтрРазделить(ИменаТаблиц, ",");
	КонецЕсли;
	
	ЗапросыДляПомещения = Новый Массив;
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеЗапроса.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросыДляПомещения.Добавить(ОписаниеЗапроса);
		
	КонецЦикла;
	
	ПроверитьТекстЗапроса(
		ИменаТаблиц.Количество() = ЗапросыДляПомещения.Количество(),
		НСтр("ru = 'Количество запросов выборки данных не совпадает с количеством имен'"),
		СхемаЗапроса);
	
	Для Индекс = 0 По ЗапросыДляПомещения.ВГраница() Цикл
		ОписаниеЗапроса = ЗапросыДляПомещения[Индекс];
		ОписаниеЗапроса.ТаблицаДляПомещения = СокрЛП(ИменаТаблиц[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет доступные поля описания временной таблицы, создаваемой отдельным запросом.
//
// Текст запроса может содержать обращения к временной таблице, созданной другим запросом.
// В этом случае схема запроса не позволяет работать с полями такой таблицы сразу -
// их нужно предварительно заполнить.
// Процедура заполняет доступные поля, опираясь на текст запроса, создающий таблиу.
//
// Параметры:
//  ИспользованиеТаблицы - Структура - см. НовыйТочкаЗапроса, описание точки схемы запроса.
//                 Точка схемы запроса должна указывать на используемую временную таблицу.
//                 Точка, указывающая на таблицу, может быть получена с помощью НайтиТаблицуПоПсевдониму.
//  СозданиеТаблицы - Строка - текст запроса, создающего временную таблицу.
//                  - СхемаЗапроса - схема, инициализированная таким текстом запроса.
//
Процедура УстановитьДоступныеПоляВременнойТаблицы(ИспользованиеТаблицы, СозданиеТаблицы) Экспорт
	
	Если ТипЗнч(ИспользованиеТаблицы.Таблица) <> Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСозданиеТаблицы = НайтиЗапросСозданияТаблицы(
		СозданиеТаблицы,
		ИспользованиеТаблицы.Таблица.ИмяТаблицы);
		
	Если ЗапросСозданиеТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеПоляИсточника Из ЗапросСозданиеТаблицы.Запрос.Колонки Цикл
		
		ДоступноеПоле = ИспользованиеТаблицы.Таблица.ДоступныеПоля.Найти(ОписаниеПоляИсточника.Псевдоним);
		
		Если ДоступноеПоле <> Неопределено Тогда
			// Вероятно, доступные поля были корректно инициализированы
			Продолжить;
		КонецЕсли;
		
		ИспользованиеТаблицы.Таблица.ДоступныеПоля.Добавить(
			ОписаниеПоляИсточника.Псевдоним,
			ОписаниеПоляИсточника.ТипЗначения);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор коллекции, содержащей схему запроса и отдельные ее части - упрощает использование схемы запроса.
// Коллекция используется в качестве возвращаемого значения и параметра методов API модуля.
//
// Позволяет обойти недостаток реализации схемы запроса в платформе:
// имея ссылку на элемент схемы нельзя обратиться к вышестоящим элементам схемы;
// таким образом, для использования методов работы со схемой запроса нужно иметь под рукой все элементы схемы.
//
// Параметры:
//  Схема    - СхемаЗапроса
//  Запрос   - ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса - запрос, на котором спозиционирована Точка
//  Оператор - ОператорВыбратьСхемыЗапроса - оператор запроса, на котором спозиционирована Точка
//  Источник - ИсточникСхемыЗапроса - описание источника запроса, на котором спозиционирована Точка
//  Таблица  - ТаблицаСхемыЗапроса, ВложенныйЗапросСхемыЗапроса, ОписаниеВременнойТаблицыСхемыЗапроса -
//             источник данных, выбираемых запросом
// 
// Возвращаемое значение:
//  Структура - см. параметры.
//  Некоторые (не переданные) элементы могут отсутсвовать в коллекции.
//  Таким образом, Точка может быть спозиционирована на запросе в целом, операторе запроса,
//  или конкретной таблице, из которой он выбирает данные.
//
Функция НовыйТочкаЗапроса(Схема, Запрос, Оператор = Неопределено, Источник = Неопределено, Таблица = Неопределено)
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Схема",  Схема);
	Контекст.Вставить("Запрос", Запрос);
	Если Оператор <> Неопределено Тогда
		Контекст.Вставить("Оператор", Оператор);
	КонецЕсли;
	Если Источник <> Неопределено Тогда
		Контекст.Вставить("Источник", Источник);
	КонецЕсли;
	Если Таблица <> Неопределено Тогда
		Контекст.Вставить("Таблица",  Таблица);
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

Функция СхемаЗапроса(Запрос)
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Возврат Создать(Запрос);
	Иначе
		Возврат Запрос;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВыражениеПоля(Запрос, Колонка, Оператор, Знач Выражение)
	
	ИндексОператора = Запрос.Операторы.Индекс(Оператор);
	
	Если Колонка.Поля[ИндексОператора] = Неопределено Тогда
		ИндексКолонки   = Запрос.Колонки.Индекс(Колонка);
		Оператор.ВыбираемыеПоля.Добавить(Строка(Выражение), ИндексКолонки);
	Иначе
		ИндексПоля = ИндексВыбираемогоПоля(Запрос, Колонка, Оператор);
		Если ТипЗнч(Выражение) = Тип("Строка") Тогда
			Выражение = Новый ВыражениеСхемыЗапроса(Выражение);
		КонецЕсли;
		Оператор.ВыбираемыеПоля.Установить(ИндексПоля, Выражение);
	КонецЕсли;
	
КонецПроцедуры

Функция ИндексВыбираемогоПоля(Запрос, Колонка, Оператор)
	
	// Коллекция выбираемых полей хранит только заполненные поля,
	// поэтому индекс выбираемого поля может быть меньше индекса колонки
	
	Если ТипЗнч(Оператор) = Тип("Число") Тогда
		ИндексОператора = Оператор;
	Иначе
		ИндексОператора = Запрос.Операторы.Индекс(Оператор);
	КонецЕсли;
	
	ИндексПоля = -1;
	
	Для ИндексПредыдущейКолонки = 0 По Запрос.Колонки.Индекс(Колонка) Цикл
		ПредыдущаяКолонка = Запрос.Колонки[ИндексПредыдущейКолонки];
		Если ПредыдущаяКолонка.Поля[ИндексОператора] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИндексПоля = ИндексПоля + 1;
	КонецЦикла;
	
	Возврат ИндексПоля;

КонецФункции

Функция ИндексПараметраУсловиеРегистраБухгалтерии(ТочкаЗапроса)
	
	ЭлементыИмени = СтрРазделить(ТочкаЗапроса.Таблица.ИмяТаблицы, ".");
	КоличествоЭлементовИмениВиртуальнойТаблицы = 3;
	
	ПроверитьТекстЗапроса(
		ЭлементыИмени.Количество() = КоличествоЭлементовИмениВиртуальнойТаблицы,
		СтрШаблон(НСтр("ru = 'Таблица %1 не является виртуальной таблицей регистра бухгалтерии'"), ТочкаЗапроса.Таблица.ИмяТаблицы),
		ТочкаЗапроса);
	
	ИндексИмениВиртуальнойТаблицы = 2;
	
	ИмяВиртуальнойТаблицы = ЭлементыИмени[ИндексИмениВиртуальнойТаблицы];
	
	ИндексПараметраУсловие = -1;
	Если ИмяВиртуальнойТаблицы = "ДвиженияССубконто" Тогда
		ИндексПараметраУсловие = 2;
	ИначеЕсли ИмяВиртуальнойТаблицы = "Обороты" Тогда
		ИндексПараметраУсловие = 5;
	ИначеЕсли ИмяВиртуальнойТаблицы = "ОборотыДтКт" Тогда
		ИндексПараметраУсловие = 7;
	ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
		ИндексПараметраУсловие = 3;
	ИначеЕсли ИмяВиртуальнойТаблицы = "ОстаткиИОбороты" Тогда
		ИндексПараметраУсловие = 6;
	КонецЕсли;
	
	ПроверитьТекстЗапроса(
		ИндексПараметраУсловие >= 0,
		СтрШаблон(НСтр("ru = 'Таблица %1 не является виртуальной таблицей регистра бухгалтерии'"), ТочкаЗапроса.Таблица.ИмяТаблицы),
		ТочкаЗапроса);
	
	Возврат ИндексПараметраУсловие;

КонецФункции

Процедура УстановитьПараметрВиртуальнойТаблицы(Знач ТаблицаСхемыЗапроса, ИндексПараметра, ТекстВыражения)
	
	Если ТипЗнч(ТаблицаСхемыЗапроса) = Тип("Структура") Тогда
		ТаблицаСхемыЗапроса = ТаблицаСхемыЗапроса.Таблица;
	КонецЕсли;
	
	ТаблицаСхемыЗапроса.Параметры[ИндексПараметра].Выражение = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
	
КонецПроцедуры

Процедура ПроверитьТекстЗапроса(Условие, Сообщение, ТочкаЗапроса)
	
	// Условие проверяем отдельно, чтобы зря не вычислять текст запроса
	Если Условие Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТочкаЗапроса) = Тип("СхемаЗапроса") Тогда
		ТекстЗапроса = ТочкаЗапроса.ПолучитьТекстЗапроса();
	ИначеЕсли ТочкаЗапроса.Свойство("Запрос") Тогда
		ТекстЗапроса = ТочкаЗапроса.Запрос.ПолучитьТекстЗапроса();
	Иначе
		ТекстЗапроса = ТочкаЗапроса.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(Ложь, Сообщение, ТекстЗапроса);
	
КонецПроцедуры

Функция ИзвлечьТип(ОписаниеТипов)
	
	Если ОписаниеТипов.Типы().Количество() <> 1 Тогда
		Возврат Тип("Неопределено");
	КонецЕсли;
	
	Тип = ОписаниеТипов.Типы()[0];
	
	Если Не ЗначениеЗаполнено(Тип) Тогда
		Возврат Тип("Неопределено");
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

#КонецОбласти
