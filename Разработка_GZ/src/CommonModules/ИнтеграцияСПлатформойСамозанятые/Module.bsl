#Область ПрограммныйИнтерфейс

// Возвращает список методов взаимодействия с сервисом.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в функции НоваяТаблицаМетодовВзаимодействия()
//
Функция МетодыВзаимодействия() Экспорт
	
	МетодыВзаимодействия = НоваяТаблицаМетодовВзаимодействия();
	
	// Подключение и отключение сервиса, получение списка разрешений
	
	ДобавитьНовыйМетодВзаимодействия(
		"КодПодтверждения",
		НСтр("ru = 'Запрос кода подтверждения'"),
		"verification",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ЗапросНаПривязку",
		НСтр("ru = 'Запрос на подключение сервиса'"),
		"bind_partner_by_phone",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СтатусЗапросаНаПривязку",
		НСтр("ru = 'Статус запроса на подключение'"),
		"bind_partner_status",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ЗапросНаОтвязку",
		НСтр("ru = 'Отключение сервиса'"),
		"unbind_partner",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СписокРазрешений",
		НСтр("ru = 'Список разрешений'"),
		"permissions",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ЗапросНаИзменениеРазрешений",
		НСтр("ru = 'Запрос на изменение разрешений'"),
		"change_permissions",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СтатусЗапросаНаИзменениеРазрешений",
		НСтр("ru = 'Статус запроса на изменение разрешений'"),
		"change_permissions_status",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ДетальныйСтатусНалогоплательщика",
		НСтр("ru = 'Детальный статус налогоплательщика'"),
		"taxpayer_status",
		МетодыВзаимодействия);
	
	// Регистрация и сторнирование доходов
	
	ДобавитьНовыйМетодВзаимодействия(
		"РегистрацияДохода",
		НСтр("ru = 'Регистрация дохода'"),
		"post_income",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СторнированиеДохода",
		НСтр("ru = 'Сторнирование дохода'"),
		"cancel_receipt",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СтатусыЧеков",
		НСтр("ru = 'Статусы чеков'"),
		"receipts_statuses",
		МетодыВзаимодействия);
	
	// Состояние лицевого счета, информация о зарегистрированных доходах за период
	
	ДобавитьНовыйМетодВзаимодействия(
		"СостояниеЛицевогоСчета",
		НСтр("ru = 'Состояние лицевого счета'"),
		"unpaid_tax",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СписокДоходов",
		НСтр("ru = 'Зарегистрированные доходы'"),
		"income_list",
		МетодыВзаимодействия);
	
	// Начисленный налог, получение реквизитов квитанции на уплату
	
	ДобавитьНовыйМетодВзаимодействия(
		"ИнформацияОНачислениях",
		НСтр("ru = 'Налог за период'"),
		"tax_for_period",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ИнформацияОНалоговыхНачислениях",
		НСтр("ru = 'Информация о налоговых начислениях'"),
		"accruals_and_debts",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СписокКвитанцийНаУплатуНалога",
		НСтр("ru = 'Квитанции на оплату налога'"),
		"payment_documents",
		МетодыВзаимодействия);
	
	// Справки
	
	ДобавитьНовыйМетодВзаимодействия(
		"СправкаОПостановкеНаУчет",
		НСтр("ru = 'Справка о постановке на учет'"),
		"registration_reference",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СправкаОДоходах",
		НСтр("ru = 'Справка о доходах'"),
		"income_reference",
		МетодыВзаимодействия);
	
	// Оповещения
	
	ДобавитьНовыйМетодВзаимодействия(
		"КоличествоНепрочитанныхОповещений",
		НСтр("ru = 'Количество непрочитанных сообщений сервиса Мой налог'"),
		"notifications_count",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"СписокОповещений",
		НСтр("ru = 'Сообщения сервиса Мой налог'"),
		"notifications_list",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ПометитьОповещениеПрочитанным",
		НСтр("ru = 'Пометить прочитанными выбранные сообщения сервиса Мой налог'"),
		"notifications_acknowledge",
		МетодыВзаимодействия);
	
	ДобавитьНовыйМетодВзаимодействия(
		"ПоместитьОповещениеВАрхив",
		НСтр("ru = 'Поместить выбранные сообщения сервиса Мой налог в архив'"),
		"notifications_archive",
		МетодыВзаимодействия);
	
	МетодыВзаимодействия.Индексы.Добавить("Код");
	
	Возврат МетодыВзаимодействия;
	
КонецФункции

// Процедура выполнения метода взаимодействия с сервисом интеграции в фоне.
// При вызове на клиенте должна выполняться асинхронно.
//
// Параметры:
//  ПараметрыМетода - Структура - описание см. в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия()
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат выполнения
//                             в виде структуры (см. НовыйЗапрос).
//
Процедура ВыполнитьМетодВзаимодействияВФоне(ПараметрыМетода, АдресРезультата) Экспорт
	
	Запрос = ВыполнитьМетодВзаимодействия(ПараметрыМетода);
	
	ПоместитьВоВременноеХранилище(Запрос, АдресРезультата);
	
КонецПроцедуры

// Процедура получения результата выполнения метода с сервисом интеграции в фоне. Сам метод взаимодействия вызывается процедурой ВыполнитьМетодВзаимодействияВФоне().
// При вызове на клиенте должна выполняться асинхронно.
//
// Параметры:
//  Запрос - Структура - возвращенная процедурой ВыполнитьМетодВзаимодействияВФоне()
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат выполнения
//                             в виде структуры (см. НовыйРезультатЗапроса).
//  АдресДополнительногоРезультата - Строка - адрес временного хранилища, в которое будет помещен результат выполнения
//                             в виде структуры, содержащей значения типов, недоступных на клиенте.
//
Процедура ПолучитьРезультатВыполненияВФоне(Запрос, АдресРезультата, АдресДополнительногоРезультата = Неопределено) Экспорт
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	РезультатЗапроса = ПолучитьРезультатВыполнения(Запрос);
	
	Если Запрос.ДополнительныйРезультат
		И РезультатЗапроса.Результат <> Неопределено
		И РезультатЗапроса.Статус <> СтатусыЗапросов.Ошибка Тогда
		Если ЭтоАдресВременногоХранилища(АдресДополнительногоРезультата) Тогда
			ПоместитьВоВременноеХранилище(РезультатЗапроса.Результат, АдресДополнительногоРезультата);
			РезультатЗапроса.Результат = Новый Структура("АдресВременногоХранилища", АдресДополнительногоРезультата);
		Иначе
			ВызватьИсключение СтрШаблон("Для получения результата выполнения метода %1 должен быть передан параметр АдресДополнительногоРезультата", Запрос);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатЗапроса, АдресРезультата);
	
КонецПроцедуры

// Возвращает список разрешений, предоставленных пользователем.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в функции НоваяТаблицаРазрешений()
//
Функция ПереченьРазрешенийНаДействияПартнеромОтИмениНП() Экспорт
	
	ПереченьРазрешений = НоваяТаблицаРазрешений();
	ВидыРазрешений = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ВидыРазрешенийНаДействияПартнера();
	
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.ОтражениеДохода,
		НСтр("ru = 'Отражение дохода'"),
		"INCOME_REGISTRATION",
		ПереченьРазрешений);
		
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.ПолучениеИнформацииПоНалоговымНачислениям,
		НСтр("ru = 'Получение информации по налоговым начислениям'"),
		"PAYMENT_INFORMATION",
		ПереченьРазрешений);
		
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.ОплатаНалоговыхНачислений,
		НСтр("ru = 'Оплата налоговых начислений'"),
		"TAX_PAYMENT",
		ПереченьРазрешений);
	
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.ПолучениеИнформацииПоДоходам,
		НСтр("ru = 'Получение информации по доходам'"),
		"INCOME_LIST",
		ПереченьРазрешений);
	
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.ПолучениеCводнойИнформацииОДоходе,
		НСтр("ru = 'Получение сводной информации о доходе'"),
		"INCOME_SUMMARY",
		ПереченьРазрешений);
	
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.КорректировкаСведенийОДоходахПоданныхПартнером,
		НСтр("ru = 'Корректировка сведений о доходах, поданных партнером'"),
		"CANCEL_INCOME",
		ПереченьРазрешений);
		
	ДобавитьНовоеРазрешение(
		ВидыРазрешений.КорректировкаСведенийОДоходахБезОграничений,
		НСтр("ru = 'Корректировка сведений о доходах без ограничений'"),
		"CANCEL_ANY_INCOME",
		ПереченьРазрешений);
	
	Возврат ПереченьРазрешений;
	
КонецФункции

Функция АктивироватьПромокодСервисаИнтеграции() Экспорт
	
	Если РежимОтладки() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В коробке интеграция всегда недоступна.
	Если Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		// В сервисе интеграция доступна, если абоненту доступно служебное приложение
		// или можно активировать специальный промокод.
		ДоступныеКонфигурации = ПрограммныйИнтерфейсСервиса.Конфигурации();
		Если ДоступныеКонфигурации.Найти(КодКонфигурацииСервисаИнтеграции(), "Код") = Неопределено Тогда
			Возврат ПрограммныйИнтерфейсСервиса.ИспользоватьПромокод(ПромокодАктивацииСервисаИнтеграции(), Ложь);
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет метод взаимодействия с сервисом интеграции и возвращает результат выполнения.
// Должна выполнятся в фоновой операции.
//
// Параметры:
//  ПараметрыМетода - Структура - описание см. в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия()
// 
// Возвращаемое значение:
//   - Структура - Результат выполнения. См. НовыйЗапрос
//
Функция ВыполнитьМетодВзаимодействия(ПараметрыМетода) Экспорт
	
	МетодВзаимодействия = ПараметрыМетода.МетодВзаимодействия;
	
	Если МетодВзаимодействия = "КодПодтверждения" Тогда
		
		Запрос = ВыполнитьМетод_КодПодтверждения(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ЗапросНаПривязку" Тогда
		
		Запрос = ВыполнитьМетод_ЗапросНаПривязку(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СтатусЗапросаНаПривязку" Тогда
		
		Запрос = ВыполнитьМетод_СтатусЗапроса(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ЗапросНаОтвязку" Тогда
		
		Запрос = ВыполнитьМетод(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СписокРазрешений" Тогда
		
		Запрос = ВыполнитьМетод(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ЗапросНаИзменениеРазрешений" Тогда
		
		Запрос = ВыполнитьМетод_ЗапросНаИзменениеРазрешений(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СтатусЗапросаНаИзменениеРазрешений" Тогда
		
		Запрос = ВыполнитьМетод_СтатусЗапроса(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ДетальныйСтатусНалогоплательщика" Тогда
		
		Запрос = ВыполнитьМетод(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "РегистрацияДохода" Тогда
		
		Запрос = ВыполнитьМетод_РегистрацияДохода(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СторнированиеДохода" Тогда
		
		Запрос = ВыполнитьМетод_СторнированиеДохода(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СтатусыЧеков" Тогда
		
		Запрос = ВыполнитьМетод_СтатусыЧеков(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СостояниеЛицевогоСчета" Тогда
		
		Запрос = ВыполнитьМетод(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ИнформацияОНачислениях" Тогда
		
		Запрос = ВыполнитьМетод_ИнформацияОНачислениях(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СписокДоходов" Тогда
		
		Запрос = ВыполнитьМетод_СписокДоходов(ПараметрыМетода);
	
	ИначеЕсли МетодВзаимодействия = "ИнформацияОНалоговыхНачислениях" Тогда
		
		Запрос = ВыполнитьМетод_ИнформацияОНалоговыхНачислениях(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СписокКвитанцийНаУплатуНалога" Тогда
		
		Запрос = ВыполнитьМетод_СписокКвитанцийНаУплатуНалога(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СправкаОПостановкеНаУчет" Тогда
		
		Запрос = ВыполнитьМетод_СправкаОПостановкеНаУчет(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СправкаОДоходах" Тогда
		
		Запрос = ВыполнитьМетод_СправкаОДоходах(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "КоличествоНепрочитанныхОповещений" Тогда
		
		Запрос = ВыполнитьМетод(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "СписокОповещений" Тогда
		
		Запрос = ВыполнитьМетод_СписокОповещений(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ПометитьОповещениеПрочитанным" Тогда
		
		Запрос = ВыполнитьМетод_ИзменениеСтатусаВыбранныхОповещений(ПараметрыМетода);
		
	ИначеЕсли МетодВзаимодействия = "ПоместитьОповещениеВАрхив" Тогда
		
		Запрос = ВыполнитьМетод_ИзменениеСтатусаВыбранныхОповещений(ПараметрыМетода);
		
	Иначе
		
		Запрос = НовыйЗапрос(МетодВзаимодействия, Истина, НСтр("ru = 'Метод взаимодействия не определен'"));
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Получает результат выполнения метода с сервисом интеграции.
// Сам метод взаимодействия вызывается процедурой ВыполнитьМетодВзаимодействия().
// Должна выполнятся в фоновой операции.
//
// Параметры:
//  Запрос - Структура - возвращенная процедурой ВыполнитьМетодВзаимодействия()
//
// Возвращаемое значение:
//   - Структура - Результат выполнения запроса. См. НовыйРезультатЗапроса().
//
Функция ПолучитьРезультатВыполнения(Запрос) Экспорт
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если ЗначениеЗаполнено(Запрос) И ТипЗнч(Запрос) = Тип("Структура") Тогда
		РезультатЗапроса = ПроверитьВыполнениеЗапроса(Запрос);
	Иначе
		РезультатЗапроса = НовыйРезультатЗапроса(СтатусыЗапросов.Ошибка, НСтр("ru = 'Запрос не определен'"));
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Возвращает значение ставки по которой будет облагаться доход, полученный от контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на элемент справочника "Контрагенты".
//
// Возвращаемое значение:
//  Число - значение ставки.
//
Функция СтавкаНПД(Контрагент = Неопределено) Экспорт
	
	ДополнительныеСведенияОКонтрагенте = Новый Структура("ЭтоФизическоеЛицо", Истина);
	ИнтеграцияСПлатформойСамозанятыеПереопределяемый.ДополнительныеСведенияОКонтрагенте(Контрагент, ДополнительныеСведенияОКонтрагенте);
	
	Если ЗначениеЗаполнено(Контрагент) 
		И НЕ ДополнительныеСведенияОКонтрагенте.ЭтоФизическоеЛицо Тогда
		СтавкаНалога = 6;
	Иначе
		СтавкаНалога = 4; 
	КонецЕсли;
	
	Возврат СтавкаНалога;

КонецФункции

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных()
//
Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт
	
	СтрокаОбработчика = ТаблицаОбработчиков.Добавить();
	СтрокаОбработчика.ОбъектМетаданных      = Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбластейДанных;
	СтрокаОбработчика.Обработчик            = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСПлатформойСамозанятые");
	СтрокаОбработчика.Версия                = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
	СтрокаОбработчика.ПередВыгрузкойОбъекта = Истина;
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных()
//
Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	// Удаляем из выгрузки данных безопасного хранилища сведения о служебном пользователе интеграции.
	// Нельзя просто удалить запись регистра сведений, поскольку данные находятся в хранилище значений.
	// Такие данные собираются в Артефакты и выгружаются отдельно.
	// Нужно очищать сведения о служебном пользователе в сущности Артефакты.
	Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.БезопасноеХранилищеДанныхОбластейДанных") Тогда
		
		ВладелецДанных = ВладелецДанныхСлужебногоПользователя();
		Для Каждого Артефакт Из Артефакты Цикл
			
			Запись = Объект[Артефакт.Owner.LineNumber];
			Если Запись.Владелец = ВладелецДанных Тогда
				Артефакт.Data.Data = СериализаторXDTO.ЗаписатьXDTO(Новый Структура);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает значение константы "ДоступнаИнтеграцияСПлатформойСамозанятые".
//
// Возвращаемое значение:
//   Булево - Истина, если изменилось значение константы. Ложь - в противном случае.
//
Функция УстановитьДоступнаИнтеграция() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользуетсяНПД = Константы.ИспользуетсяНалогНаПрофессиональныйДоход.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Обращение к методу АктивироватьПромокодСервисаИнтеграции() нельзя выполнять в привилегированном режиме.
	Если ИспользуетсяНПД Тогда
		ИнтеграцияДоступна = АктивироватьПромокодСервисаИнтеграции();
	Иначе
		ИнтеграцияДоступна = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	МенеджерКонстанты = Константы.ДоступнаИнтеграцияСПлатформойСамозанятые.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Прочитать();
	
	Если МенеджерКонстанты.Значение = ИнтеграцияДоступна Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКонстанты.Значение = ИнтеграцияДоступна;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеМетодовВзаимодействия

// Выполняет метод, для выполнения которого достаточно параметров по умолчанию  ИнтеграцияСПлатформойСамозанятые.НовыеПараметры()
//
// Параметры:
//  ПараметрыМетода - Структура - описание см. в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия()
//
// Возвращаемое значение:
//  Структура - описание см. в функции НовыйЗапрос()
//
Функция ВыполнитьМетод(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация";
	
	Ошибка = Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_КодПодтверждения(ПараметрыМетода)
	
	Перем ПодключенСервисИнтеграции, СообщениеОбОшибке;
	
	Если Не ПодключенСервисИнтеграции() Тогда
		Результат = ПодключитьПриложениеКСервисуИнтеграции();
		Если Не Результат.Ошибка Тогда
			ПодключенСервисИнтеграции = Истина;
		Иначе
			ПодключенСервисИнтеграции = Ложь;
			СообщениеОбОшибке = Результат.СообщениеОбОшибке;
		КонецЕсли;
	Иначе
		ПодключенСервисИнтеграции = Истина;
	КонецЕсли;
	
	ПроверяемыеПараметры = "Организация, НомерТелефона";
	
	Если ПодключенСервисИнтеграции И ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.НомерТелефона, ПараметрыМетода.НомерТелефона);
		
		// Возможно приложение уже подключено, но снова прислало запрос на привязку,
		// поскольку пользователь отключил привязку в личном кабинете.
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		
		// Создание нового приложения и добавление пользователя может занять какое-то время
		// и запросы будут завершаться с платформенной ошибкой авторизации пользователя.
		Для Повтор = 1 По КоличествоПовторовОтправкиЗапросаНаПривязку() Цикл
			Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
			Если Не Запрос.Ошибка Или ЗначениеЗаполнено(Запрос.КодВозврата) Тогда
				Прервать;
			Иначе
				ОбщегоНазначенияБТС.Пауза(Повтор);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Запрос.ВремяОжидания = 0.1;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_ЗапросНаПривязку(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, НомерТелефона, ИдентификаторКодаПодтверждения, КодПодтверждения";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.НомерТелефона, ПараметрыМетода.НомерТелефона);
		Параметры.Вставить(ИменаПараметров.КодПодтверждения, ХешКодаПодтверждения(ПараметрыМетода.ИдентификаторКодаПодтверждения, ПараметрыМетода.КодПодтверждения));
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СтатусЗапроса(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Идентификатор";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.Идентификатор, ПараметрыМетода.Идентификатор);
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_РегистрацияДохода(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, ДатаФормирования, ДатаРасчета, СуммаДокумента, УИДЧека, Услуги";
	
	Ошибка = Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);

		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.УИДЧека,        ПараметрыМетода.УИДЧека);
		Параметры.Вставить(ИменаПараметров.ИНН,            СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.Наименование,   СведенияОбОрганизации.Наименование);
		Параметры.Вставить(ИменаПараметров.СуммаДокумента, ПараметрыМетода.СуммаДокумента);
		
		Параметры.Вставить(ИменаПараметров.ДатаРасчета, 
			ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПараметрыМетода.ДатаРасчета));
		Параметры.Вставить(ИменаПараметров.ДатаФормирования,
			ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПараметрыМетода.ДатаФормирования));
			
		Словарь = СловарьТиповДохода();
		
		Если ЗначениеЗаполнено(ПараметрыМетода.Контрагент) Тогда
			// Реализация юр.лицу или ИП.
			ИменаРеквизитовКонтрагента = "ИНН, НаименованиеПолное";
			РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыМетода.Контрагент, ИменаРеквизитовКонтрагента);
			
			ДополнительныеСведенияОКонтрагенте = Новый Структура("ЭтоИностраннаяОрганизация", Ложь);
			ИнтеграцияСПлатформойСамозанятыеПереопределяемый.ДополнительныеСведенияОКонтрагенте(ПараметрыМетода.Контрагент, ДополнительныеСведенияОКонтрагенте);
			ИностраннаяОрганизация = ДополнительныеСведенияОКонтрагенте.ЭтоИностраннаяОрганизация;
				
			ПроверяемыеПараметры = "НаименованиеПолное" + ?(ИностраннаяОрганизация,"", ", ИНН");
			Ошибка = Не ПроверитьЗаполнениеПараметров(РеквизитыКонтрагента, ПроверяемыеПараметры, СообщениеОбОшибке) Или Ошибка;
			
			Если Не Ошибка Тогда
				ПараметрыКонтрагента = Новый Структура;
				ПараметрыКонтрагента.Вставить(ИменаПараметров.ИНН, РеквизитыКонтрагента.ИНН);
				ПараметрыКонтрагента.Вставить(ИменаПараметров.Наименование, РеквизитыКонтрагента.НаименованиеПолное);
				Параметры.Вставить(ИменаПараметров.Контрагент, ПараметрыКонтрагента);
				Если ИностраннаяОрганизация Тогда
					Параметры.Вставить(ИменаПараметров.ТипДохода, Словарь.ИностраннаяОрганизация);
				Иначе
					Параметры.Вставить(ИменаПараметров.ТипДохода, Словарь.РоссийскаяОрганизация);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Параметры.Вставить(ИменаПараметров.ТипДохода, Словарь.ФизическоеЛицо);
		КонецЕсли;
		
		Услуги = ПараметрыМетода.Услуги;
		Если Услуги.Количество() <= МаксимальноеКоличествоПозицийВЧеке() Тогда
			Для Каждого Колонка Из Услуги.Колонки Цикл
				ИмяКолонки = Неопределено;
				Если ИменаПараметров.Свойство(СтрШаблон("%1_%2", "Услуги", Колонка.Имя), ИмяКолонки) Тогда
					Колонка.Имя = ИмяКолонки;
				Иначе
					Услуги.Колонки.Удалить(Колонка);
				КонецЕсли;
			КонецЦикла;
			Параметры.Вставить(ИменаПараметров.Услуги, ОбщегоНазначения.ТаблицаЗначенийВМассив(Услуги));
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Допускается не более %1 разных услуг в чеке'"),
				МаксимальноеКоличествоПозицийВЧеке());
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Ошибка Тогда
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СторнированиеДохода(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	Перем ПричинаОтменыЧека;
	
	ПроверяемыеПараметры = "Организация, ИдентификаторЧека, УИДЧека";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.УИДЧека, ПараметрыМетода.УИДЧека);
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.ИдентификаторЧека, ПараметрыМетода.ИдентификаторЧека);
		Если ПараметрыМетода.Свойство("ПричинаОтменыЧека", ПричинаОтменыЧека) И ЗначениеЗаполнено(ПричинаОтменыЧека) Тогда
			Параметры.Вставить(ИменаПараметров.ПричинаОтменыЧека, 
				Перечисления.ПричиныОтменыЧекаНПД.КодПричины(ПричинаОтменыЧека));
		КонецЕсли;
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СтатусыЧеков(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Чеки";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.Чеки, ПараметрыМетода.Чеки);
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_ИнформацияОНачислениях(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Период";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.НалоговыйПериод, ПараметрыМетода.Период);
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СписокДоходов(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, НачалоПериода, КонецПериода";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.НачалоПериода, НачалоДня(ПараметрыМетода.НачалоПериода));
		Параметры.Вставить(ИменаПараметров.КонецПериода, КонецДня(ПараметрыМетода.КонецПериода));
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_ИнформацияОНалоговыхНачислениях(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация";
	
	Ошибка = Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СписокКвитанцийНаУплатуНалога(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	Перем НачалоПериода, КонецПериода;
	
	ПроверяемыеПараметры = "Организация";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Если ПараметрыМетода.Свойство("НачалоПериода", НачалоПериода) И ЗначениеЗаполнено(НачалоПериода) Тогда
			Параметры.Вставить(ИменаПараметров.НачалоПериода, НачалоДня(НачалоПериода));
		КонецЕсли;
		Если ПараметрыМетода.Свойство("КонецПериода", КонецПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
			Параметры.Вставить(ИменаПараметров.КонецПериода, КонецДня(КонецПериода));
		КонецЕсли;
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СправкаОПостановкеНаУчет(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Период";
	
	Ошибка = Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.ПериодГод, Формат(ПараметрыМетода.Период, "ДФ=yyyy"));
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СправкаОДоходах(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Период";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.ПериодГод, Формат(ПараметрыМетода.Период, "ДФ=yyyy"));
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_СписокОповещений(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Если ПараметрыМетода.Свойство("ПолучатьПрочитанные") Тогда
			Параметры.Вставить(ИменаПараметров.ПолучатьПрочитанные, ПараметрыМетода.ПолучатьПрочитанные);
		КонецЕсли;
		Если ПараметрыМетода.Свойство("ПолучатьАрхивные") Тогда
			Параметры.Вставить(ИменаПараметров.ПолучатьАрхивные, ПараметрыМетода.ПолучатьАрхивные);
		КонецЕсли;
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		Запрос.ДополнительныйРезультат = Истина;
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_ИзменениеСтатусаВыбранныхОповещений(ПараметрыМетода)
	
	Перем СообщениеОбОшибке, ОбрабатыватьВсе;
	
	ПроверяемыеПараметры = "Организация, Оповещения";
	
	Ошибка = Не ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		
		Если ТипЗнч(ПараметрыМетода.Оповещения) = Тип("Массив")
			И ЗначениеЗаполнено(ПараметрыМетода.Оповещения) Тогда
			
			Параметры.Вставить(ИменаПараметров.Оповещения, ПараметрыМетода.Оповещения);
			
		ИначеЕсли ОбрабатыватьВсе <> Истина Тогда
			СообщениеОбОшибке = НСтр("ru = 'Некорректное значение параметра Оповещения. Ожидается массив строк.'");
			Ошибка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Ошибка Тогда
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьМетод_ЗапросНаИзменениеРазрешений(ПараметрыМетода)
	
	Перем СообщениеОбОшибке;
	
	ПроверяемыеПараметры = "Организация, Разрешения";
	
	Если ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке) Тогда
		
		СведенияОбОрганизации = ИнтеграцияСПлатформойСамозанятыеПереопределяемый.СведенияОбОрганизации(ПараметрыМетода.Организация);
		
		ИменаПараметров = ПараметрыМетодов();
		
		Параметры = Новый Структура;
		Параметры.Вставить(ИменаПараметров.ИдентификаторПриложения, ИдентификаторПриложения(ПараметрыМетода.Организация));
		Параметры.Вставить(ИменаПараметров.ИНН, СведенияОбОрганизации.ИНН);
		Параметры.Вставить(ИменаПараметров.Разрешения, Новый Массив);
		
		ПереченьРазрешений = ПереченьРазрешенийНаДействияПартнеромОтИмениНП();
		Для Каждого Разрешение Из ПереченьРазрешений Цикл
			Если ПараметрыМетода.Разрешения.Найти(Разрешение.Код) <> Неопределено Тогда
				Параметры[ИменаПараметров.Разрешения].Добавить(Разрешение.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = СформироватьЗапрос(ПараметрыМетода.МетодВзаимодействия, Параметры);
		
	Иначе
		Запрос = НовыйЗапрос(ПараметрыМетода.МетодВзаимодействия, Истина, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапроса

// Проверяет заполнение обязательных параметров выполнения метода функцией ВыполнитьМетод_ХХ(), соответствующей выбранному методу взаимодействия.
//
// Параметры:
//  ПараметрыМетода - Структура - описание см. в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия()
//  ПроверяемыеПараметры - Строка - имена обязательных параметров, перечисленных через запятую
//  СообщениеОбОшибке - Строка - сообщение об ошибке (исходящий параметр)
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые параметры заполнены
//
Функция ПроверитьЗаполнениеПараметров(ПараметрыМетода, ПроверяемыеПараметры, СообщениеОбОшибке = Неопределено)
	Перем ЗначениеПараметра;
	
	РезультатПроверки = Истина;
	
	ИменаПараметров = СтрРазделить(
		СтрЗаменить(ПроверяемыеПараметры, " ", ""),
		",");
	
	МассивСообщений = Новый Массив;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		Если Не ПараметрыМетода.Свойство(ИмяПараметра, ЗначениеПараметра) Или Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			РезультатПроверки = Ложь;
			МассивСообщений.Добавить(ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , ИмяПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Если Не РезультатПроверки Тогда
		СообщениеОбОшибке = СтрСоединить(МассивСообщений, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Отправляет запрос на выполнение метода взаимодействия.
//
// Параметры:
//  МетодВзаимодействия - Строка - имя метода из списка методов МетодыВзаимодействия()
//  ПараметрыЗапроса - Структура - параметры выполнения запроса, подготовленные функцией ВыполнитьМетод_ХХ(),
//                                 соответствующей выбранному методу взаимодействия.
//
// Возвращаемое значение:
//  Структура - описание см. в функции НовыйЗапрос()
//
Функция СформироватьЗапрос(МетодВзаимодействия, ПараметрыЗапроса)
	Перем Ошибка, СообщениеОбОшибке;
	
	ИдентификаторМетода = ИдентификаторМетода(МетодВзаимодействия);
	
	ПараметрыЗапросаJSON = ЗначениеВJSON(ПараметрыЗапроса);
	ДвоичныеДанныеЗапроса = ПолучитьДвоичныеДанныеИзСтроки(ПараметрыЗапросаJSON);
	
	ПараметрыДоступаКХранилищу = ПараметрыДоступаКХранилищу();
	ИдентификаторХранилища = ИдентификаторХранилища();
	
	Если ПодключенСервисИнтеграции(ПараметрыДоступаКХранилищу) Тогда
		Ответ = ПередачаДанныхСервер.ОтправитьВЛогическоеХранилище(
			ПараметрыДоступаКХранилищу,
			ИдентификаторХранилища,
			ДвоичныеДанныеЗапроса,
			ИдентификаторМетода);
		
		Если Ответ = Неопределено Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при отправке данных.
				|Подробности см. в журнале регистрации.'");
		Иначе
			Ошибка = Ложь;
		КонецЕсли;
	Иначе
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Приложение не подключено к сервису Мой налог. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если Не Ошибка Тогда
		
		Запрос = НовыйЗапрос(МетодВзаимодействия);
		
		ОсновнойРаздел = Ответ[ИнтеграцияОбъектовВСервисеБП.ПолеОсновнойРаздел()];
		Запрос.Ошибка    = ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеОшибка()];
		Запрос.Сообщение = ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеСообщениеОбОшибке()];
		Запрос.КодВозврата = ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеКодВозврата()];
		
		Если ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеКодВозврата()] = АсинхронноеПолучениеДанныхСловарь.КодВозвратаВыполнено() Тогда
			Результат = Ответ[ИнтеграцияОбъектовВСервисеБП.ПолеРезультат()];
			Запрос.Идентификатор = Результат[ИнтеграцияОбъектовВСервисеБП.ПолеИдентификатор()];
			Запрос.Хранилище     = Результат[ИнтеграцияОбъектовВСервисеБП.ПолеХранилище()];
		КонецЕсли;
		
	Иначе
		Запрос = НовыйЗапрос(МетодВзаимодействия, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает параметры необходимые для извлечения результата выполнения метода.
//
// Возвращаемое значение:
//  Структура - параметры для извлечения результата выполнения метода:
//   * МетодВзаимодействия - Строка - имя метода взаимодействия
//   * Ошибка - Булево - признак того, что метод выполнить не удалось из-за ошибки
//   * Сообщение - Строка - сообщение об ошибке
//   * КодВозврата - Число - стандартный код возврата по имени метода. см. АсинхронноеПолучениеДанныхСловарь
//   * Идентификатор - Строка - идентификатор значения в логичесокм хранилище DataTransfer
//   * Хранилище - Строка - имя логического хранилища DataTransfer
//   * ВремяОжидания - Число - периодичность опроса сервиса для подтверждения получения запроса сервисом в секундах
//   * МетодВзаимодействия - Строка - имя метода взаимодействия
//   * ДополнительныйРезультат - Булево - Истина, если результат выполнения будет помещен в дополнительное временное хранилище
//
Функция НовыйЗапрос(МетодВзаимодействия, Ошибка = Ложь, Сообщение = "") Экспорт
	
	Запрос = Новый Структура;
	Запрос.Вставить("МетодВзаимодействия", МетодВзаимодействия);
	Запрос.Вставить("Ошибка", Ошибка);
	Запрос.Вставить("Сообщение", Сообщение);
	Запрос.Вставить("КодВозврата", 0);
	Запрос.Вставить("Идентификатор", "");
	Запрос.Вставить("Хранилище", "");
	Запрос.Вставить("ВремяОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8)); // В секундах
	Запрос.Вставить("ДополнительныйРезультат", Ложь);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВыполненияЗапроса

// Выполняет попытку получить результат выполнения метода.
// Возвращает статус выполнения запроса и его результат, если запрос выполнен.
//
// Параметры:
//  Запрос - Структура - описание см. в функции НовыйЗапрос()
//
// Возвращаемое значение:
//  Структура - описание см. в функции НовыйРезультатЗапроса()
//
Функция ПроверитьВыполнениеЗапроса(Запрос)
	Перем Ошибка, СообщениеОбОшибке;
	
	Ответ = ПолучитьИзЛогическогоХранилища(Запрос.Хранилище, Запрос.Идентификатор, , Ошибка, СообщениеОбОшибке);
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если Не Ошибка Тогда
		
		ОсновнойРаздел = Ответ[ИнтеграцияОбъектовВСервисеБП.ПолеОсновнойРаздел()];
		
		Ошибка = ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеОшибка()];
		Сообщение = ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеСообщениеОбОшибке()];
		
		Если Не Ошибка Тогда
			Статус = СтатусЗапроса(ОсновнойРаздел[ИнтеграцияОбъектовВСервисеБП.ПолеКодВозврата()], СтатусыЗапросов);
		Иначе
			Статус = СтатусыЗапросов.Ошибка;
		КонецЕсли;
		
		РезультатЗапроса = НовыйРезультатЗапроса(Статус, Сообщение);
		
		Если РезультатЗапроса.Статус = СтатусыЗапросов.Выполнено Или РезультатЗапроса.Статус = СтатусыЗапросов.Ошибка Тогда
			Результат = Ответ[ИнтеграцияОбъектовВСервисеБП.ПолеРезультат()];
			ХранилищеРезультата     = Результат[ИнтеграцияОбъектовВСервисеБП.ПолеХранилище()];
			ИдентификаторРезультата = Результат[ИнтеграцияОбъектовВСервисеБП.ПолеИдентификатор()];
			РезультатЗапроса.Результат = ПрочитатьРезультатВыполнения(ХранилищеРезультата, ИдентификаторРезультата, Ошибка, СообщениеОбОшибке);
			Если Ошибка Тогда
				РезультатЗапроса.Статус = СтатусыЗапросов.Ошибка;
				РезультатЗапроса.Сообщение = СообщениеОбОшибке;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Ошибка И РезультатЗапроса.Статус = СтатусыЗапросов.Ошибка Тогда
			ЗаписьЖурналаРегистрации(
				ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ЗначениеВJSON(РезультатЗапроса.Результат));
		КонецЕсли;
		
	Иначе
		
		РезультатЗапроса = НовыйРезультатЗапроса(СтатусыЗапросов.Ошибка, СообщениеОбОшибке);
		
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Вопомогательная функция чтения результата выполнения метода из логического хранилища DataTransfer
//
// Параметры:
//  Хранилище - Строка - имя логического хранилища DataTransfer
//  Идентификатор - Строка - идентификатор значения в логичесокм хранилище DataTransfer
//  Ошибка - Булево - признак того, что получить результат выполнения не удалось из-за ошибки (исходящий параметр)
//  Сообщение - Строка - сообщение об ошибке (исходящий параметр).
//
// Возвращаемое значение:
//   Структура - результат выполнения метода
//
Функция ПрочитатьРезультатВыполнения(Хранилище, Идентификатор, Ошибка, СообщениеОбОшибке)
	
	Перем Ключ;
	
	ПоляОтветаТипаДата = ПоляОтветаТипаДата();
	Ответ = ПолучитьИзЛогическогоХранилища(Хранилище, Идентификатор, ПоляОтветаТипаДата, Ошибка, СообщениеОбОшибке);
	
	Если Не Ошибка Тогда
		
		Результат = Новый Структура;
		СловарьОтветов = СловарьОтветов();
		Для Каждого КлючИЗначение Из Ответ Цикл
			Если СловарьОтветов.Свойство(КлючИЗначение.Ключ, Ключ) Тогда
				Значение = ОбработатьВходящиеДанные(Ключ, КлючИЗначение.Значение);
			Иначе
				Ключ = КлючИЗначение.Ключ;
				Значение = КлючИЗначение.Значение;
			КонецЕсли;
			Результат.Вставить(Ключ, Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры необходимые для извлечения результата выполнения метода.
//
// Параметры:
//  Статус - Строка - один из возможных статусов запроса, перечисленных в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов()
//  Сообщение - Строка - сообщение об ошибке
//
// Возвращаемое значение:
//  Структура - параметры для извлечения результата выполнения метода:
//   * Статус - Строка - один из возможных статусов запроса, перечисленных в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов()
//   * Сообщение - Строка - сообщение об ошибке
//   * Результат - Структура - результат выполнения метода
//   * ВремяОжидания - Число - периодичность опроса сервиса для получения результата выполнения метода в секундах
//
Функция НовыйРезультатЗапроса(Статус, Сообщение = "") Экспорт
	
	РезультатЗапроса = Новый Структура;
	РезультатЗапроса.Вставить("Статус", Статус);
	РезультатЗапроса.Вставить("Сообщение", Сообщение);
	РезультатЗапроса.Вставить("Результат", Неопределено);
	РезультатЗапроса.Вставить("ВремяОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8)); // В секундах
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Преобразует код состояния в статус запроса
//
// Параметры:
//  КодВозврата - Число - код возврата, возвращаемый очередью заданий DataTransfer
//  СтатусыЗапросов - Структура - перечисление статусов запросов, возвращаемое функцией ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов()
//
// Возвращаемое значение:
//  Строка - один из возможных статусов запроса, перечисленных в функции ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов()
//
Функция СтатусЗапроса(КодВозврата, СтатусыЗапросов = Неопределено)
	
	Если СтатусыЗапросов = Неопределено Тогда
		СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	КонецЕсли;
	
	Если КодВозврата = АсинхронноеПолучениеДанныхСловарь.КодВозвратаВыполнено() Тогда
		Статус = СтатусыЗапросов.Выполнено;
	ИначеЕсли КодВозврата = ИнтеграцияОбъектовВСервисеБП.КодВозвратаОжидание() Тогда
		Статус = СтатусыЗапросов.Выполняется;
	Иначе
		Статус = СтатусыЗапросов.Ошибка;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область ОбработкаВходящихДанных

// Дополнительная обработка данных, возвращенных сервисом.
//
// Параметры:
//  Ключ - Строка - ключ значения
//  Значение - Произвольный - значение
//
Функция ОбработатьВходящиеДанные(Ключ, Значение)
	
	Если Ключ = "Результат" Тогда
		Возврат ОбработатьВходящиеДанные_Результат(Значение);
	ИначеЕсли Ключ = "Разрешения" Тогда
		Возврат ОбработатьВходящиеДанные_Разрешения(Значение);
	ИначеЕсли Ключ = "СписокЧеков" Тогда
		Возврат ОбработатьВходящиеДанные_СписокЧеков(Значение);
	ИначеЕсли Ключ = "СтатусыЧеков" Тогда
		Возврат ОбработатьВходящиеДанные_СтатусыЧеков(Значение);
	ИначеЕсли Ключ = "НачисленияНалога" Тогда
		Возврат ОбработатьВходящиеДанные_НачисленияНалога(Значение);
	ИначеЕсли Ключ = "КарточкиРасчетовСБюджетом" Тогда
		Возврат ОбработатьВходящиеДанные_КарточкиРасчетовСБюджетом(Значение);
	ИначеЕсли Ключ = "СписокКвитанций" Тогда
		Возврат ОбработатьВходящиеДанные_СписокКвитанций(Значение);
	ИначеЕсли Ключ = "Оповещения" Тогда
		Возврат ОбработатьВходящиеДанные_СписокОповещений(Значение);
	ИначеЕсли Ключ = "Статус" Тогда
		Возврат ОбработатьВходящиеДанные_Статус(Значение);
	ИначеЕсли Ключ = "ТипОповещения" Тогда
		Возврат ОбработатьВходящиеДанные_ТипОповещения(Значение);
	ИначеЕсли Ключ = "Код" Тогда
		Возврат ОбработатьВходящиеДанные_Код(Значение);
	ИначеЕсли СтрНачинаетсяС(НРег(Ключ), ПрефиксДатНРег()) И ТипЗнч(Значение) = Тип("Дата") Тогда
		// Сервис возвращает время без учета часового пояса. Преобразуем к часовому поясу сеанса.
		Возврат МестноеВремя(Значение, ЧасовойПоясСеанса());
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьВходящиеДанные_Результат(Результат)
	Перем Значение;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Словарь = СловарьРезультатовВыполненияМетода();
		Если Не Словарь.Свойство(Результат, Значение) Тогда
			Значение = Результат;
		КонецЕсли;
	Иначе
		Значение = Результат;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбработатьВходящиеДанные_Разрешения(Разрешения)
	
	Значение = Новый Массив;
	
	Если ТипЗнч(Разрешения) = Тип("Массив") Тогда
		ПереченьРазрешений = ПереченьРазрешенийНаДействияПартнеромОтИмениНП();
		Для Каждого Разрешение Из ПереченьРазрешений Цикл
			Если Разрешения.Найти(Разрешение.Идентификатор) <> Неопределено Тогда
				Значение.Добавить(Разрешение.Код);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбработатьВходящиеДанные_Код(Результат)
	Перем Значение;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Словарь = СловарьКодовОшибок();
		Если Не Словарь.Свойство(Результат, Значение) Тогда
			Значение = Результат;
		КонецЕсли;
	Иначе
		Значение = Результат;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбработатьВходящиеДанные_Статус(Результат)
	Перем Значение;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Словарь = СловарьСтатусов();
		Если Не Словарь.Свойство(Результат, Значение) Тогда
			Значение = Результат;
		КонецЕсли;
	Иначе
		Значение = Результат;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбработатьВходящиеДанные_ТипОповещения(Результат)
	Перем Значение;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Словарь = СловарьТиповОповещений();
		Если Не Словарь.Свойство(Результат, Значение) Тогда
			Значение = Результат;
		КонецЕсли;
	Иначе
		Значение = Результат;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбработатьВходящиеДанные_СписокЧеков(СписокДокументов)
	
	ТаблицаДокументов = НовыйСписокЧеков();
	
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокДокументов, РеквизитыЧека(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОбработатьВходящиеДанные_СписокКвитанций(СписокДокументов)
	
	ТаблицаДокументов = НовыйСписокКвитанций();
	
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокДокументов, РеквизитыКвитанции(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОбработатьВходящиеДанные_НачисленияНалога(СписокНачисленийНалога)
	
	ТаблицаДокументов = НовыйСписокНачисленийНалога();
	
	Если ТипЗнч(СписокНачисленийНалога) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокНачисленийНалога, РеквизитыНачисленияНалога(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОбработатьВходящиеДанные_КарточкиРасчетовСБюджетом(СписокКарточек)
	
	ТаблицаДокументов = НовыйСписокКарточекРасчетовСБюджетом();
	
	Если ТипЗнч(СписокКарточек) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокКарточек, РеквизитыКарточкиРасчетовСБюджетом(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОбработатьВходящиеДанные_СписокОповещений(СписокДокументов)
	
	ТаблицаДокументов = НовыйСписокОповещений();
	
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокДокументов, РеквизитыОповещения(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция ОбработатьВходящиеДанные_СтатусыЧеков(СписокДокументов)
	
	ТаблицаДокументов = НовыйСтатусыЧеков();
	
	Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда
		ОбработатьВходящиеДанные_СписокДокументов(СписокДокументов, РеквизитыСтатусаЧека(), ТаблицаДокументов);
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Процедура ОбработатьВходящиеДанные_СписокДокументов(СписокДокументов, СтуктураРеквизитов, ТаблицаДокументов)
	
	Перем Значение;
	
	ТаблицаДокументов.Очистить();
	
	Для Каждого Документ Из СписокДокументов Цикл
		НоваяСтрока = ТаблицаДокументов.Добавить();
		Для Каждого КлючИЗначение Из СтуктураРеквизитов Цикл
			Документ.Свойство(КлючИЗначение.Ключ, Значение);
			НоваяСтрока[КлючИЗначение.Значение] = ОбработатьВходящиеДанные(КлючИЗначение.Значение, Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыФункции

// Возвращает Истина, если включен режим отладки.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим отладки.
//
Функция РежимОтладки()
	
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	
	Возврат СтрНайти(НРег(ПараметрЗапускаПриложения), НРег("ИнтеграцияСамозанятые")) > 0;
	
КонецФункции

Функция ПолучитьИзЛогическогоХранилища(Хранилище, Идентификатор, ИменаСвойствСоЗначениямиДата = Неопределено, Ошибка, СообщениеОбОшибке)
	
	Ошибка = Ложь;
	
	ПараметрыДоступаКХранилищу = ПараметрыДоступаКХранилищу();
	
	Ответ = ПередачаДанныхСервер.ПолучитьИзЛогическогоХранилища(
		ПараметрыДоступаКХранилищу,
		Хранилище,
		Идентификатор);
	Если Ответ = Неопределено Тогда

		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении данных.
			|Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Если Не Ошибка Тогда
		ФайлОтвета = Новый Файл(Ответ.ПолноеИмя);
		ПолученФайлОтвета = ФайлОтвета.Существует();
		Если Не ПолученФайлОтвета Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найден файл, содержащий результата запроса %1.'"), Идентификатор);
		КонецЕсли;
	Иначе
		ПолученФайлОтвета = Ложь;
	КонецЕсли;
	
	Если ПолученФайлОтвета Тогда
		
		Попытка
			Результат = ЗначениеИзJSON(ФайлОтвета.ПолноеИмя, ИменаСвойствСоЗначениямиДата);
		Исключение
			ЗаписьЖурналаРегистрации(ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать ответ сервиса.
				|Подробности см. в журнале регистрации.'");
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ФайлОтвета.ПолноеИмя);
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗначениеИзJSON(ИмяФайла, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Значение = ПрочитатьJSON(ЧтениеJSON, , ИменаСвойствСоЗначениямиДата);
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

// Возвращает список полей, возвращаемых сервисом, имеющим тип дата.
// Используется для десереализации дат из JSON.
//
// Возвращаемое значение:
//  Массив - массив имен
//
Функция ПоляОтветаТипаДата()
	
	СписокПолей = Новый Массив;
	
	ПрефиксДатНРег = ПрефиксДатНРег();
	
	Для Каждого КлючИЗначение Из СловарьОтветов() Цикл
		Если СтрНачинаетсяС(НРег(КлючИЗначение.Значение), ПрефиксДатНРег) Тогда
			СписокПолей.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РеквизитыКвитанции() Цикл
		Если СтрНачинаетсяС(НРег(КлючИЗначение.Значение), ПрефиксДатНРег) Тогда
			СписокПолей.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РеквизитыЧека() Цикл
		Если СтрНачинаетсяС(НРег(КлючИЗначение.Значение), ПрефиксДатНРег) Тогда
			СписокПолей.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РеквизитыОповещения() Цикл
		Если СтрНачинаетсяС(НРег(КлючИЗначение.Значение), ПрефиксДатНРег) Тогда
			СписокПолей.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

Функция ПрефиксДатНРег()
	
	Возврат "дата";
	
КонецФункции

Функция КоличествоПовторовОтправкиЗапросаНаПривязку()
	
	Возврат 15; // 120 секунд в арифметической прогрессии
	
КонецФункции

Функция ИдентификаторПриложения(Организация)
	Возврат РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ИдентификаторПриложения(Организация);
КонецФункции

#КонецОбласти

#Область МетодыВзаимодействия

Функция ИдентификаторМетода(Код)
	
	МетодыВзаимодействия = МетодыВзаимодействия();
	НайденнаяСтрока  = МетодыВзаимодействия.Найти(Код, "Код");
	Если НайденнаяСтрока  = Неопределено Тогда
		ВызватьИсключение СтрШаблон("ИнтеграцияСПлатформойСамозанятые.ИдентификаторМетода: метод %1 не определен", Код);
	КонецЕсли;
	
	Возврат НайденнаяСтрока.Идентификатор;
	
КонецФункции

Функция НоваяТаблицаМетодовВзаимодействия()
	
	МетодыВзаимодействия = Новый ТаблицаЗначений;
	МетодыВзаимодействия.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	МетодыВзаимодействия.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	МетодыВзаимодействия.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат МетодыВзаимодействия;
	
КонецФункции

Функция ДобавитьНовыйМетодВзаимодействия(Код, Наименование, Идентификатор, МетодыВзаимодействия)
	
	НовыйМетодВзаимодействия = МетодыВзаимодействия.Добавить();
	НовыйМетодВзаимодействия.Код = Код;
	НовыйМетодВзаимодействия.Наименование = Наименование;
	НовыйМетодВзаимодействия.Идентификатор = Идентификатор;
	
	Возврат НовыйМетодВзаимодействия;
	
КонецФункции

#КонецОбласти

#Область ПереченьРазрешений

Функция НоваяТаблицаРазрешений()
	
	ПереченьРазрешений = Новый ТаблицаЗначений;
	ПереченьРазрешений.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПереченьРазрешений.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ПереченьРазрешений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ПереченьРазрешений;
	
КонецФункции

Функция ДобавитьНовоеРазрешение(Код, Наименование, Идентификатор, ПереченьРазрешений)
	
	НовоеРазрешение = ПереченьРазрешений.Добавить();
	НовоеРазрешение.Код = Код;
	НовоеРазрешение.Наименование = Наименование;
	НовоеРазрешение.Идентификатор = Идентификатор;
	
	Возврат НовоеРазрешение;
	
КонецФункции

#КонецОбласти

#Область ОписаниеСервисаИнтеграции

Функция ПараметрыДоступаКХранилищу()
	
	ПараметрыДоступаКХранилищу = Новый Структура;
	ПараметрыДоступаКХранилищу.Вставить("URL", АдресСервисаИнтеграции());
	ПараметрыДоступаКХранилищу.Вставить("UserName", ИмяСлужебногоПользователяСервисаИнтеграции());
	ПараметрыДоступаКХранилищу.Вставить("Password", ПарольСлужебногоПользователяСервисаИнтеграции());
	
	Возврат ПараметрыДоступаКХранилищу;
	
КонецФункции

Функция АдресСервисаИнтеграции()
	
	Возврат Константы.АдресСервисаИнтеграцииСПлатформойСамозанятые.Получить();
	
КонецФункции

Функция ВладелецДанныхСлужебногоПользователя()
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.АдресСервисаИнтеграцииСПлатформойСамозанятые");
	
КонецФункции

Функция ИмяСлужебногоПользователяСервисаИнтеграции()
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецДанныхСлужебногоПользователя(), КлючДанныхИмяСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИмяСлужебногоПользователя;
	
КонецФункции

Функция КлючДанныхИмяСлужебногоПользователя()
	
	Возврат "ИмяСлужебногоПользователяСервисаИнтеграцииСПлатформойСамозанятые";
	
КонецФункции

Функция ПарольСлужебногоПользователяСервисаИнтеграции()
	
	УстановитьПривилегированныйРежим(Истина);
	ПарольСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецДанныхСлужебногоПользователя(), КлючДанныхПарольСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПарольСлужебногоПользователя;
	
КонецФункции

Функция КлючДанныхПарольСлужебногоПользователя()
	
	Возврат "ПарольСлужебногоПользователяСервисаИнтеграцииСПлатформойСамозанятые"
	
КонецФункции

// Идентификатор логического хранилища DataTransfer
//
Функция ИдентификаторХранилища()
	
	Возврат "async";
	
КонецФункции

Функция ПараметрыМетодов()
	
	ПараметрыМетодов = Новый Структура;
	
	// Общие
	ПараметрыМетодов.Вставить("ИдентификаторПриложения", "app_id");
	
	// Заявка
	ПараметрыМетодов.Вставить("НомерТелефона", "phone");
	ПараметрыМетодов.Вставить("КодПодтверждения", "code");
	ПараметрыМетодов.Вставить("Идентификатор", "id");
	
	// Организация, Контрагент
	ПараметрыМетодов.Вставить("ИНН", "inn");
	ПараметрыМетодов.Вставить("Наименование", "name");
	
	// Разрешения
	ПараметрыМетодов.Вставить("Разрешения", "permissions");
	
	// Тип дохода
	ПараметрыМетодов.Вставить("ТипДохода", "income_type");
	
	// Период
	ПараметрыМетодов.Вставить("НалоговыйПериод", "tax_period");
	ПараметрыМетодов.Вставить("НачалоПериода", "from");
	ПараметрыМетодов.Вставить("КонецПериода", "to");
	ПараметрыМетодов.Вставить("ПериодГод", "request_year");
	
	// Чек
	ПараметрыМетодов.Вставить("УИДЧека", "guid");
	ПараметрыМетодов.Вставить("НомерЧека", "document_number");
	ПараметрыМетодов.Вставить("ИдентификаторЧека", "receipt_id");
	ПараметрыМетодов.Вставить("ПричинаОтменыЧека", "reason_code");
	ПараметрыМетодов.Вставить("ДатаРасчета", "operation_time");
	ПараметрыМетодов.Вставить("ДатаФормирования", "request_time");
	ПараметрыМетодов.Вставить("Контрагент", "customer");
	ПараметрыМетодов.Вставить("СуммаДокумента", "total_amount");
	
	// Чек.Услуги
	ПараметрыМетодов.Вставить("Услуги", "services");
	ПараметрыМетодов.Вставить("Услуги_Наименование", "name");
	ПараметрыМетодов.Вставить("Услуги_Количество", "quantity");
	ПараметрыМетодов.Вставить("Услуги_Цена", "amount");
	
	// Оповещения
	ПараметрыМетодов.Вставить("ПолучатьПрочитанные", "get_acknowleged");
	ПараметрыМетодов.Вставить("ПолучатьАрхивные", "get_archived");
	ПараметрыМетодов.Вставить("Оповещения", "message_id");
	
	// Чеки
	ПараметрыМетодов.Вставить("Чеки", "receipts");
	
	Возврат ПараметрыМетодов;
	
КонецФункции

Функция СловарьОтветов()
	
	СловарьОтветов = Новый Структура;
	СловарьОтветов.Вставить("app_id", "ИдентификаторПриложения");
	СловарьОтветов.Вставить("verification_id",       "ИдентификаторКодаПодтверждения");
	СловарьОтветов.Вставить("verification_created",  "ДатаСозданияКодаПодтверждения");
	СловарьОтветов.Вставить("verification_update",   "ДатаОбновленияКодаПодтверждения");
	СловарьОтветов.Вставить("verification_duration", "ДатаСрокаДействияКодаПодтверждения");
	СловарьОтветов.Вставить("id", "Идентификатор");
	СловарьОтветов.Вставить("result", "Результат");
	СловарьОтветов.Вставить("processing_time", "ДатаРассмотренияЗаявки");
	СловарьОтветов.Вставить("unbind_time", "ДатаОтвязки");
	СловарьОтветов.Вставить("permissions", "Разрешения");
	СловарьОтветов.Вставить("bonus_amount", "СуммаБонусногоСчета");
	СловарьОтветов.Вставить("unpaid_amount", "ОбщаяСуммаНеоплаченныхПлатежей");
	СловарьОтветов.Вставить("debt_amount", "СуммаЗадолженности");
	СловарьОтветов.Вставить("total_amount", "ОбщаяСуммаДоходов");
	СловарьОтветов.Вставить("canceled_total_amount", "ОбщаяСуммаВозвратов");
	СловарьОтветов.Вставить("tax", "СуммаНалога");
	СловарьОтветов.Вставить("invoices", "СписокКвитанций");
	СловарьОтветов.Вставить("receipts", "СписокЧеков");
	СловарьОтветов.Вставить("receipt_id", "ИдентификаторЧека");
	СловарьОтветов.Вставить("link", "Ссылка");
	СловарьОтветов.Вставить("mimetype", "ТипДанных");
	СловарьОтветов.Вставить("filename", "ИмяФайла");
	СловарьОтветов.Вставить("content", "Base64Строка");
	СловарьОтветов.Вставить("is_offline", "ЧекOffLine");
	
	СловарьОтветов.Вставить("code", "Код");
	СловарьОтветов.Вставить("details", "Подробности");
	СловарьОтветов.Вставить("message", "Сообщение");
	
	СловарьОтветов.Вставить("inn", "ИНН");
	СловарьОтветов.Вставить("second_name", "Фамилия");
	СловарьОтветов.Вставить("first_name", "Имя");
	СловарьОтветов.Вставить("patronymic", "Отчество");
	
	СловарьОтветов.Вставить("registration_time", "ДатаПостановкиНаУчет");
	СловарьОтветов.Вставить("unregistration_time", "ДатаСнятияСУчета");
	СловарьОтветов.Вставить("unregistration_reason", "ПричинаСнятияСУчета");
	
	СловарьОтветов.Вставить("activities", "ВидыДеятельности");
	СловарьОтветов.Вставить("region", "Регион");
	СловарьОтветов.Вставить("phone", "НомерТелефона");
	СловарьОтветов.Вставить("email", "Email");
	СловарьОтветов.Вставить("account_number", "НомерСчетаУплатыНалога");
	СловарьОтветов.Вставить("update_time", "ДатаОбновленияДанных");
	СловарьОтветов.Вставить("registration_certificate_number", "НомерСвидетельства");
	
	СловарьОтветов.Вставить("notifications", "Оповещения");
	СловарьОтветов.Вставить("count", "Количество");
	СловарьОтветов.Вставить("status", "Статус");
	
	СловарьОтветов.Вставить("receipts_statuses", "СтатусыЧеков");
	
	СловарьОтветов.Вставить("tax_charge", "НачисленияНалога");
	СловарьОтветов.Вставить("krsb", "КарточкиРасчетовСБюджетом");
	
	Возврат СловарьОтветов;
	
КонецФункции

Функция СловарьРезультатовВыполненияМетода()
	
	Результаты = Новый Структура;
	Результаты.Вставить("COMPLETED", "Выполнено");
	Результаты.Вставить("FAILED", "Ошибка");
	Результаты.Вставить("ACCEPTED", "Принято");
	Результаты.Вставить("REJECTED", "Отклонено");
	Результаты.Вставить("IN_PROGRESS", "Выполняется");
	Результаты.Вставить("DELETED", "Удалено");
	Результаты.Вставить("OK", "Успешно");
	Результаты.Вставить("NOK", "НеУспешно");
	
	Возврат Результаты;
	
КонецФункции

Функция СловарьКодовОшибок()
	
	Результаты = Новый Структура;
	Результаты.Вставить("INTERNAL_ERROR", "ВнутренняяОшибкаСервиса");
	Результаты.Вставить("REQUEST_VALIDATION_ERROR", "ОшибкаПарсингаЗапроса");
	Результаты.Вставить("TAXPAYER_UNREGISTERED", "НалогоплательщикНеЗарегистрирован");
	Результаты.Вставить("TAXPAYER_UNBOUND", "НалогоплательщикНеПривязан");
	Результаты.Вставить("TAXPAYER_ALREADY_BOUND", "НалогоплательщикУжеПривязан");
	Результаты.Вставить("PARTNER_DENY", "НедостаточноПолномочий");
	Результаты.Вставить("DUPLICATE", "ДоходУжеЗарегистрирован");
	Результаты.Вставить("PERMISSION_NOT_GRANTED", "НедостаточноПолномочийДляОперации");
	Результаты.Вставить("RECEPT_ID_NOT_FOUND", "ЧекНеНайден");
	Результаты.Вставить("INVALID_HASH", "НекорректныйФискальныйПризнак");
	Результаты.Вставить("INVALID_SEQUENCE", "НевалидныйНомерПоследовательности");
	
	Возврат Результаты;
	
КонецФункции

Функция СловарьТиповДохода()
	
	ТипыДоходов = Новый Структура;
	ТипыДоходов.Вставить("ИностраннаяОрганизация", "FROM_FOREIGN_AGENCY");
	ТипыДоходов.Вставить("РоссийскаяОрганизация",  "FROM_LEGAL_ENTITY");
	ТипыДоходов.Вставить("ФизическоеЛицо",         "FROM_INDIVIDUAL");
	
	Возврат ТипыДоходов;

КонецФункции

Функция СловарьСтатусов()
	
	Результаты = Новый Структура;
	Результаты.Вставить("NEW", "Новое");
	Результаты.Вставить("ACKNOWLEDGED", "Прочитано");
	Результаты.Вставить("ARCHIVED", "ВАрхиве");
	
	Возврат Результаты;
	
КонецФункции

Функция СловарьТиповОповещений()
	
	Результаты = Новый Структура;
	Результаты.Вставить("tax_payment", "ОплатаНалога");
	Результаты.Вставить("bind", "ЗапросНаПодключение");
	Результаты.Вставить("permissions", "ИзменениеРазрешений");
	Результаты.Вставить("unbind", "ОтвязкаОтПартнера");
	Результаты.Вставить("info", "Информация");
	
	Возврат Результаты;
	
КонецФункции

Функция МаксимальноеКоличествоПозицийВЧеке()
	
	Возврат 6;
	
КонецФункции

#Область СписокЧеков

Функция НовыйСписокЧеков()
	
	СписокЧеков = Новый ТаблицаЗначений;
	СписокЧеков.Колонки.Добавить("ИдентификаторЧека", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокЧеков.Колонки.Добавить("Ссылка", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СписокЧеков.Колонки.Добавить("СуммаДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокЧеков.Колонки.Добавить("ДатаФормирования", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокЧеков.Колонки.Добавить("ДатаРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокЧеков.Колонки.Добавить("ЧекОтменен", Новый ОписаниеТипов("Булево"));
	СписокЧеков.Колонки.Добавить("ДатаОтмены", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат СписокЧеков;
	
КонецФункции

Функция РеквизитыЧека()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("receipt_id", "ИдентификаторЧека");
	Реквизиты.Вставить("link", "Ссылка");
	Реквизиты.Вставить("total_amount", "СуммаДокумента");
	Реквизиты.Вставить("operation_time", "ДатаРасчета");
	Реквизиты.Вставить("request_time", "ДатаФормирования");
	Реквизиты.Вставить("canceled", "ЧекОтменен");
	Реквизиты.Вставить("cancelation_time", "ДатаОтмены");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СписокКвитанций

Функция НовыйСписокКвитанций()
	
	СписокЧеков = Новый ТаблицаЗначений;
	
	СписокЧеков.Колонки.Добавить("ИдентификаторПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(25)); // 22
	СписокЧеков.Колонки.Добавить("СтатусПлательщика", ОбщегоНазначения.ОписаниеТипаСтрока(2)); // 101
	СписокЧеков.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20)); // 104
	СписокЧеков.Колонки.Добавить("КодТерритории", ОбщегоНазначения.ОписаниеТипаСтрока(11)); // 105
	СписокЧеков.Колонки.Добавить("ОснованиеПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(2)); // 106
	СписокЧеков.Колонки.Добавить("ПоказательПериода", ОбщегоНазначения.ОписаниеТипаСтрока(10)); // 107
	СписокЧеков.Колонки.Добавить("ТипПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(1)); // 110
	СписокЧеков.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	СписокЧеков.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	СписокЧеков.Колонки.Добавить("Плательщик", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СписокЧеков.Колонки.Добавить("АдресМестаЖительства", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	СписокЧеков.Колонки.Добавить("Банк", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СписокЧеков.Колонки.Добавить("БИК", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	СписокЧеков.Колонки.Добавить("КоррСчет", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокЧеков.Колонки.Добавить("Получатель", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СписокЧеков.Колонки.Добавить("СчетПолучателя", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокЧеков.Колонки.Добавить("ИННПолучателя", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	СписокЧеков.Колонки.Добавить("КПППолучателя", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	СписокЧеков.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СписокЧеков.Колонки.Добавить("ИдентификаторИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат СписокЧеков;
	
КонецФункции

Функция РеквизитыКвитанции()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("document_index", "ИдентификаторПлатежа"); // УИН
	Реквизиты.Вставить("code_101", "СтатусПлательщика");
	Реквизиты.Вставить("kbk", "КБК");
	Реквизиты.Вставить("oktmo", "КодТерритории");
	Реквизиты.Вставить("code_106", "ОснованиеПлатежа");
	Реквизиты.Вставить("code_107", "ПоказательПериода");
	Реквизиты.Вставить("code_110", "ТипПлатежа");
	Реквизиты.Вставить("due_date", "ДатаОплаты");
	
	Реквизиты.Вставить("inn", "ИНН");
	Реквизиты.Вставить("full_name", "Плательщик");
	Реквизиты.Вставить("address", "АдресМестаЖительства");
	
	Реквизиты.Вставить("recipient_bank_name", "Банк");
	Реквизиты.Вставить("recipient_bank_bik", "БИК");
	Реквизиты.Вставить("recipient_bank_account_number", "КоррСчет");
	Реквизиты.Вставить("recipient", "Получатель");
	Реквизиты.Вставить("recipient_account_number", "СчетПолучателя");
	Реквизиты.Вставить("recipient_inn", "ИННПолучателя");
	Реквизиты.Вставить("recipient_kpp", "КПППолучателя");
	
	Реквизиты.Вставить("amount", "Сумма");
	
	Реквизиты.Вставить("source_id", "ИдентификаторИсточника");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СписокОповещений

Функция НовыйСписокОповещений()
	
	СписокОповещений = Новый ТаблицаЗначений;
	
	СписокОповещений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокОповещений.Колонки.Добавить("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СписокОповещений.Колонки.Добавить("Сообщение", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СписокОповещений.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокОповещений.Колонки.Добавить("ДатаСоздания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокОповещений.Колонки.Добавить("ДатаОбновления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокОповещений.Колонки.Добавить("ТипОповещения", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат СписокОповещений;
	
КонецФункции

Функция РеквизитыОповещения()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "Идентификатор");
	Реквизиты.Вставить("title", "Заголовок");
	Реквизиты.Вставить("message", "Сообщение");
	Реквизиты.Вставить("status", "Статус");
	Реквизиты.Вставить("created_at", "ДатаСоздания");
	Реквизиты.Вставить("updated_at", "ДатаОбновления");
	Реквизиты.Вставить("type", "ТипОповещения");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СтатусыЧеков

Функция НовыйСтатусыЧеков()
	
	СтатусыЧеков = Новый ТаблицаЗначений;
	СтатусыЧеков.Колонки.Добавить("ИдентификаторЧека", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СтатусыЧеков.Колонки.Добавить("Ссылка", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	СтатусыЧеков.Колонки.Добавить("ЧекOffLine", Новый ОписаниеТипов("Булево"));
	СтатусыЧеков.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СтатусыЧеков.Колонки.Добавить("ТипДанных", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СтатусыЧеков.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	СтатусыЧеков.Колонки.Добавить("Base64Строка", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат СтатусыЧеков;
	
КонецФункции

Функция РеквизитыСтатусаЧека()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("receipt_id", "ИдентификаторЧека");
	Реквизиты.Вставить("link", "Ссылка");
	Реквизиты.Вставить("is_offline", "ЧекOffLine");
	Реквизиты.Вставить("status", "Статус");
	Реквизиты.Вставить("mimetype", "ТипДанных");
	Реквизиты.Вставить("filename", "ИмяФайла");
	Реквизиты.Вставить("content", "Base64Строка");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СписокНачисленийНалога

Функция НовыйСписокНачисленийНалога()
	
	СписокНачислений = Новый ТаблицаЗначений;
	СписокНачислений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокНачислений.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокНачислений.Колонки.Добавить("СрокОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	СписокНачислений.Колонки.Добавить("НалоговыйПериод", ОбщегоНазначения.ОписаниеТипаЧисло(6));
	СписокНачислений.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	СписокНачислений.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокНачислений.Колонки.Добавить("СуммаОплат", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокНачислений.Колонки.Добавить("ДатаСоздания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат СписокНачислений;
	
КонецФункции

Функция РеквизитыНачисленияНалога()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "Идентификатор");
	Реквизиты.Вставить("amount", "Сумма");
	Реквизиты.Вставить("due_date", "СрокОплаты");
	Реквизиты.Вставить("tax_period_id", "НалоговыйПериод");
	Реквизиты.Вставить("oktmo", "ОКТМО");
	Реквизиты.Вставить("kbk", "КБК");
	Реквизиты.Вставить("paid_amount", "СуммаОплат");
	Реквизиты.Вставить("create_time", "ДатаСоздания");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СписокКарточекРасчетовСБюджетом

Функция НовыйСписокКарточекРасчетовСБюджетом()
	
	СписокКарточек = Новый ТаблицаЗначений;
	СписокКарточек.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокКарточек.Колонки.Добавить("СуммаЗадолженности", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокКарточек.Колонки.Добавить("СуммаПени", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокКарточек.Колонки.Добавить("СуммаПереплаты", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокКарточек.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	СписокКарточек.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокКарточек.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокКарточек.Колонки.Добавить("ДатаОбновления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат СписокКарточек;
	
КонецФункции

Функция РеквизитыКарточкиРасчетовСБюджетом()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("id", "Идентификатор");
	Реквизиты.Вставить("debt", "СуммаЗадолженности");
	Реквизиты.Вставить("penalty", "СуммаПени");
	Реквизиты.Вставить("overpayment", "СуммаПереплаты");
	Реквизиты.Вставить("oktmo", "ОКТМО");
	Реквизиты.Вставить("kbk", "КБК");
	Реквизиты.Вставить("tax_organ_code", "КодНалоговогоОргана");
	Реквизиты.Вставить("update_time", "ДатаОбновления");
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПодключениеПриложенияКСервисуИнтеграции

Функция ХешКодаПодтверждения(ИдентификаторЗапроса, КодПодтверждения)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ИдентификаторЗапроса);
	ХешированиеДанных.Добавить(КодПодтверждения);
	
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

Функция ПодключенСервисИнтеграции(ПараметрыДоступаКСервису = Неопределено)
	
	Если Не АктивироватьПромокодСервисаИнтеграции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыДоступаКСервису = Неопределено Тогда
		ПараметрыДоступаКСервису = ПараметрыДоступаКХранилищу();
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ПараметрыДоступаКСервису.URL);
	
КонецФункции

Функция ПодключитьПриложениеКСервисуИнтеграции() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Если АктивироватьПромокодСервисаИнтеграции() Тогда
		
		Попытка
			
			ПриложениеИнтеграции = ПриложениеСервисаИнтеграции();
			
			Если Не ЗначениеЗаполнено(ИмяСлужебногоПользователяСервисаИнтеграции()) Тогда
				СоздатьСлужебногоПользователяИнтеграции();
			КонецЕсли;
			
			ДобавитьСлужебногоПользователяВПриложениеСервисаИнтеграции(ПриложениеИнтеграции.Код);
			
			Константы.АдресСервисаИнтеграцииСПлатформойСамозанятые.Установить(ПриложениеИнтеграции.Адрес);
			
		Исключение
			
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключить приложение к сервису Мой налог по причине:
						   |%1'"),
				ИнформацияОбОшибке().Описание);
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	Иначе
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Сервис Мой налог недоступен'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПриложениеСервисаИнтеграции()
	
	ОписаниеПриложения = Новый Структура;
	ОписаниеПриложения.Вставить("Адрес", "");
	ОписаниеПриложения.Вставить("Код", 0);
	
	ВсеПриложения = ПрограммныйИнтерфейсСервиса.Приложения();
	ВсеПриложения.Сортировать("Код");
	
	Отбор = Новый Структура("КодАбонентаВладельца", ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Код);
	ПриложенияЭтогоАбонента = ВсеПриложения.НайтиСтроки(Отбор);
	
	ПриложениеИнтеграции = Неопределено;
	ИсключаемыеСтатусыПриложений = ИсключаемыеСтатусыПриложений();
	Для Каждого Приложение Из ПриложенияЭтогоАбонента Цикл
		Если Приложение.КодКонфигурации = КодКонфигурацииСервисаИнтеграции()
			И ИсключаемыеСтатусыПриложений.Найти(Приложение.СостояниеПриложения) = Неопределено Тогда
			ПриложениеИнтеграции = Приложение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПриложениеИнтеграции <> Неопределено Тогда
		ОписаниеПриложения.Адрес = ПриложениеИнтеграции.АдресПриложения;
		ОписаниеПриложения.Код = ПриложениеИнтеграции.Код;
	Иначе
		НовоеПриложение = СоздатьНовоеПриложениеСервисаИнтеграции();
		
		ОписаниеПриложения.Адрес = НовоеПриложение.АдресПриложения;
		ОписаниеПриложения.Код = НовоеПриложение.Код;
	КонецЕсли;
	
	Возврат ОписаниеПриложения;
	
КонецФункции

Функция СоздатьНовоеПриложениеСервисаИнтеграции()
	
	ОписаниеПриложения = Новый Структура;
	ОписаниеПриложения.Вставить("АдресПриложения", "");
	ОписаниеПриложения.Вставить("Код", 0);
	
	ПараметрыСозданияПриложения = ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПриложения();
	ПараметрыСозданияПриложения.КодКонфигурации = КодКонфигурацииСервисаИнтеграции();
	
	НовоеПриложение = ПрограммныйИнтерфейсСервиса.СоздатьПриложение(ПараметрыСозданияПриложения);
	
	Для Повтор = 1 По КоличествоПовторовОжиданияПодготовкиПриложения() Цикл
		СвойстваПриложения = ПрограммныйИнтерфейсСервиса.СвойстваПриложения(НовоеПриложение.Код);
		Если СвойстваПриложения.СостояниеПриложения = Перечисления.СостоянияПриложений.Используется Тогда
			Прервать;
		Иначе
			ОбщегоНазначенияБТС.Пауза(Повтор);
		КонецЕсли;
	КонецЦикла;
	
	Если СвойстваПриложения.СостояниеПриложения = Перечисления.СостоянияПриложений.Используется Тогда
		ОписаниеПриложения.АдресПриложения = НовоеПриложение.АдресПриложения;
		ОписаниеПриложения.Код = НовоеПриложение.Код;
	Иначе
		// Что-то пошло не так и менеджер сервиса не подготовил область данных.
		ВызватьИсключение НСтр("ru = 'Превышено время ожидания подготовки нового приложения сервиса Мой налог'");
	КонецЕсли;
	
	Возврат ОписаниеПриложения;
	
КонецФункции

Функция КоличествоПовторовОжиданияПодготовкиПриложения()
	Возврат 15; // 120 секунд в арифметической прогрессии
КонецФункции

Процедура СоздатьСлужебногоПользователяИнтеграции()
	
	СлужебныйПользователь = НовыйОписаниеСлужебногоПользователя();
	ПрограммныйИнтерфейсСервиса.СоздатьПользователяАбонента(СлужебныйПользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ВладелецДанныхСлужебногоПользователя();
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СлужебныйПользователь.Логин, КлючДанныхИмяСлужебногоПользователя());
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СлужебныйПользователь.Пароль, КлючДанныхПарольСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьСлужебногоПользователяВПриложениеСервисаИнтеграции(КодПриложения)
	
	ПараметрыДобавления = ПрограммныйИнтерфейсСервиса.НовыйПараметрыДобавленияПользователяВПриложение();
	ПараметрыДобавления.КодПриложения = КодПриложения;
	ПараметрыДобавления.Логин = ИмяСлужебногоПользователяСервисаИнтеграции();
	ПараметрыДобавления.Право = Перечисления.ПраваПользователяПриложения.ДоступКAPI;
	ПрограммныйИнтерфейсСервиса.ДобавитьПользователяВПриложение(ПараметрыДобавления);
	
КонецПроцедуры

Функция КодКонфигурацииСервисаИнтеграции()
	
	Возврат "npd";
	
КонецФункции

Функция ИсключаемыеСтатусыПриложений()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СостоянияПриложений.КУдалению);
	Статусы.Добавить(Перечисления.СостоянияПриложений.Отсутствует);
	Статусы.Добавить(Перечисления.СостоянияПриложений.ОшибкаПодготовки);
	Статусы.Добавить(Перечисления.СостоянияПриложений.ИмпортИзФайла);
	Статусы.Добавить(Перечисления.СостоянияПриложений.Удалена);
	
	Возврат Статусы;
	
КонецФункции

Функция НовыйОписаниеСлужебногоПользователя()
	
	НовыйПользователь = ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПользователя();
	НовыйПользователь.Логин = НовыйЛогинСлужебногоПользователя();
	НовыйПользователь.ПолноеИмя = НовыйПользователь.Логин;
	НовыйПользователь.Пароль = ПользователиБП.СоздатьПароль(16, Истина);
	НовыйПользователь.ПочтаОбязательна = Ложь;
	
	Возврат НовыйПользователь;
	
КонецФункции

Функция НовыйЛогинСлужебногоПользователя()
	
	Возврат СтрШаблон("npd_integration_%1", Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0"));
	
КонецФункции

Функция ПромокодАктивацииСервисаИнтеграции()
	Возврат "npd";
КонецФункции

#КонецОбласти

#КонецОбласти
