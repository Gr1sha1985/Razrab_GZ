#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	ВыходныеПараметры = Новый Массив();
	
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьПодключениеУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение установки параметров.
//
Процедура НачатьПодключениеУстройства_УстановкаПараметровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";

	ОповещениеПолучитьОписаниеЗавершение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПолучитьОписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОписание(ОповещениеПолучитьОписаниеЗавершение, НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования,
								РевизияИнтерфейса, ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьОписание"); 
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение получения описание.
//
Процедура НачатьПодключениеУстройства_ПолучитьОписаниеЗавершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыВызова.Количество() > 3 Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		РевизияИнтерфейса = ОписаниеТипа.ПривестиЗначение(ПараметрыВызова[3]);
		ДополнительныеПараметры.ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	КонецЕсли;
	
	ОповещениеПодключитьЗавершение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПодключитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПодключить(ОповещениеПодключитьЗавершение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства) 
	Исключение
		ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "Подключить"); 
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение подключения.
// 
// Параметры:
// 	РезультатВыполнения - Структура - результат выполнения операции.
// 	ПараметрыВызова - Массив - массив параметров вызова.
// 	ДополнительныеПараметры - Структура - структура с полями:
// 		* Параметры - Структура - структура параметров.
//
Процедура НачатьПодключениеУстройства_ПодключитьЗавершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
			
	Если НЕ РезультатВыполнения Тогда
		
		ОповещениеПодключитьЗавершение = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПодключитьЗавершение, ПараметрыВызова[0]) 
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьОшибку"); 
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	Иначе
		ИДУстройства = ПараметрыВызова[0];
		ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства = ИДУстройства;
		ПараметрыПодключения = ДополнительныеПараметры.ПараметрыПодключения;
		
		Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" 
				Или ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" 
				Или ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
			ВремВыходныеПараметры = Новый Массив();
			ОповещениеЗавершение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПолучениеШириныСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			НачатьПолучениеШириныСтроки(ОповещениеЗавершение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры,
				ДополнительныеПараметры.ПараметрыПодключения, ВремВыходныеПараметры);
			Возврат;
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ИДУстройства));
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить("Штрихкод");
			МассивПараметров.Добавить("Barcode");
			МассивПараметров.Добавить("ШтрихкодBase64");
			МассивПараметров.Добавить("BarcodeBase64");
			ВыходныеПараметры.Добавить(МассивПараметров);
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ИДУстройства));
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить("ДанныеКарты");
			МассивПараметров.Добавить("TracksData");
			МассивПараметров.Добавить("ДанныеКартыBase64");
			МассивПараметров.Добавить("TrackDataBase64");
			ВыходныеПараметры.Добавить(МассивПараметров);
		КонецЕсли;  
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение получение ширины строки.
//
Процедура НачатьПодключениеУстройства_ПолучениеШириныСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВремШиринаСтроки = РезультатВыполнения.ВыходныеПараметры[0];
		ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
	КонецЕсли;
	ДополнительныеПараметры.ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьОтключениеУстройства_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	Попытка
		ОбъектДрайвера.НачатьВызовОтключить(ОповещениеМетода, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "Отключить"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает отключение устройства - завершение.
//
Процедура НачатьОтключениеУстройства_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	ВыходныеПараметры.Добавить(0);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		НачатьПолучениеОписаниеДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		НачатьПолучениеШириныСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		НачатьОткрытиеСмены(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);  
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		НачатьЗакрытьСмену(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,  ВходныеПараметры, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		НачатьФормироватьОтчетОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		НачатьФормироватьОтчетБезГашения(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		НачатьФискализациюЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
		НачатьПечатьТестовыхДокументов(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить текущее состояние 
	ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
		НачатьПолучениеТекущееСостояние(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры ККТ
	ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
		НачатьПолучениеПараметровККТ(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ВходныеПараметры.ТипРасчета);
		ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);
		НачатьОткрытиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, Истина, ВыходныеПараметры);
		
	// Начать аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		НачатьАннулированиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		НачатьОтменуЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		НачатьИнкассацию(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека коррекции
	ИначеЕсли Команда = "PrintReceiptCorrection" ИЛИ Команда = "ПечатьЧекаКоррекции" Тогда
		НачатьПечатьЧекаКоррекции(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЧЕКОВ
	
	// Печать штрихкода
	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда
		ТипШтрихКодаЗнач = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];
		НачатьПечатьШтрихкода(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКодаЗнач, ШтрихКод, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип чеков на терминале.
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		НачатьПечатьКвитанцийНаТерминале(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
		НачатьАварийнуюОтменуОперации(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		НачатьФормированиеИтоговДняПоКартам(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НачатьОплатуПлатежнойКартой(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                                        Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		НачатьВозвратПлатежаПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НачатьОтменуПлатежаПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" ИЛИ Команда = "ПреавторизацияПоПлатежнойКарте" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НачатьПреавторизоватьПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                      Сумма, НомерКарты, НомерЧека, ВыходныеПараметры);
		 
	// Отмена преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeVoidPreSales" ИЛИ Команда = "ОтменитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		НачатьОтменуПреавторизацииПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	   
	// Завершение преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeCompletion" ИЛИ Команда = "ЗавершитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		НачатьЗавершениеПреавторизацииПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	
	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" ИЛИ Команда = "ВывестиСтрокуНаДисплейПокупателя" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		НачатьВыводСтрокНаДисплейПокупателя(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, СтрокаТекста);
		
	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
		НачатьОчисткуДисплейПокупателя(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры вывода
	ИначеЕсли Команда = "GetOutputOptions" ИЛИ Команда = "ПолучитьПараметрыВывода" Тогда
		НачатьПолучениеПараметровВывода(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];
		ПолнаяВыгрузка = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], Истина);
		НачатьВыгрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры);
		
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		НачатьЗагрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
		
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		НачатьОчисткуТаблицу(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	
	// Получить вес 
	ИначеЕсли Команда = "GetWeight" ИЛИ Команда = "ПолучитьВес" Тогда
		НачатьПолучениеВеса(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Установить вес тары 
	ИначеЕсли Команда = "Calibrate" ИЛИ Команда = "Тарировать" Тогда
		ВесТары = ?(ТипЗнч(ВходныеПараметры) = Тип("Массив") И ВходныеПараметры.Количество() > 0, ВходныеПараметры[0], 0);
		НачатьТарировать(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	
	// Выгрузка товаров в весы с печатью этикеток.
	ИначеЕсли Команда = "UploadGoods" ИЛИ Команда = "ВыгрузитьТовары" Тогда
		ТаблицаВыгрузки   = ВходныеПараметры[0];
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		НачатьВыгрузкуТоваровВВесы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры)
	
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ClearBase" ИЛИ Команда = "ОчиститьБазу" Тогда
		НачатьОчисткуТоварыВВесах(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
	
	// Функция осуществляет печать этикеток на принтере этикеток.
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ШаблонЭтикетки = ВходныеПараметры[0];
		МассивЭтикеток = ВходныеПараметры[1];
		НачатьПечатьЭтикеток(ОповещениеПриЗавершении,ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры);
	
	// Функция осуществляет инициализация принтера этикеток
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		НачатьИнициализациюПринтера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТиповыеОбработчикиУведомлений 

// Процедура осуществляет завершение выполнения метода.    
//
Процедура ВыполнениеМетодаЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		ОчисткаПараметров  = ?(ДополнительныеПараметры.Свойство("ОчисткаПараметров"), ДополнительныеПараметры.ОчисткаПараметров, Истина); 
		КоличествоПараметров = ?(ДополнительныеПараметры.Свойство("КоличествоПараметров"), ДополнительныеПараметры.КоличествоПараметров, 0); 
		
		Если ОчисткаПараметров Тогда
			ВыходныеПараметры.Очистить();
		КонецЕсли;
		
		Если КоличествоПараметров > 0 Тогда
			ВыходныеПараметры.Добавить(Параметры[1]);
		КонецЕсли;
		Если КоличествоПараметров > 1 Тогда
			ВыходныеПараметры.Добавить(Параметры[2]);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет обработку получение ошибки.
//
Процедура ПолучениеОшибкиЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(Параметры[0]);
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если Событие = "Штрихкод" Или Событие = "Barcode" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить(Штрихкод);
		МассивВторогоПорядка = Новый Массив();
		МассивВторогоПорядка.Добавить(Данные);
		МассивВторогоПорядка.Добавить(Штрихкод);
		МассивВторогоПорядка.Добавить(0);
		МассивМассивов.Добавить(МассивВторогоПорядка);
		ВыходныеПараметры.Добавить(МассивМассивов);
		Результат = Истина;
		
	ИначеЕсли Событие = "ШтрихкодBase64" Или Событие = "BarcodeBase64" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanDataBase64");
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить(Штрихкод);
		МассивВторогоПорядка = Новый Массив();
		МассивВторогоПорядка.Добавить(Данные);
		МассивВторогоПорядка.Добавить(Штрихкод);
		МассивВторогоПорядка.Добавить(0);
		МассивМассивов.Добавить(МассивВторогоПорядка);
		ВыходныеПараметры.Добавить(МассивМассивов);
		
	ИначеЕсли Событие = "ДанныеКарты" Или Событие = "TracksData" Тогда
		
		КодКарты  = Данные;
		ПозицияПрефикса = 0;
		ПозицияСуффикса = 0;
		времКодКарты    = "";
		ДанныеКарты     = "";
		ПозицияДляЧтения = 1;
		
		ДанныеДорожек = Новый Массив();
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			Для НомерДорожки = 1 По 3 Цикл
				ДанныеДорожек.Добавить("");
				ТекущаяДорожка = Параметры.ПараметрыДорожек[НомерДорожки - 1];
				Если ТекущаяДорожка.Использовать Тогда
					ПрефиксДрайвера = Символ(ТекущаяДорожка.Префикс);
					СуффиксДрайвера = Символ(ТекущаяДорожка.Суффикс);
					Если ПозицияДляЧтения < СтрДлина(КодКарты) Тогда
						ДанныеКарты = Сред(КодКарты, ПозицияДляЧтения);
						ПозицияПрефикса = Найти(ДанныеКарты, ПрефиксДрайвера);
						ПозицияСуффикса = Найти(ДанныеКарты, СуффиксДрайвера);
						времПозицияПрефикса = ?(ПозицияПрефикса = 0, 1, ПозицияПрефикса + СтрДлина(ПрефиксДрайвера));
						времДлинаДоСуффикса = ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты) + 1 - времПозицияПрефикса, ПозицияСуффикса - времПозицияПрефикса);
						времКодКарты = времКодКарты + Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ДанныеДорожек[НомерДорожки - 1] = Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ПозицияДляЧтения = ПозицияДляЧтения + ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты), ПозицияСуффикса + СтрДлина(СуффиксДрайвера) - 1);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КодКарты = времКодКарты;
		
		ВыходныеПараметры.Добавить("TracksData");
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить(КодКарты);
		МассивВторогоПорядка = Новый Массив();
		МассивВторогоПорядка.Добавить(Сред(Данные,2));
		МассивВторогоПорядка.Добавить(ДанныеДорожек);
		МассивВторогоПорядка.Добавить(0);
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			МассивВторогоПорядка.Добавить(МенеджерОборудованияВызовСервера.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, Параметры.ПараметрыДорожек));
		Иначе
			МассивВторогоПорядка.Добавить(Неопределено);
		КонецЕсли;
		МассивМассивов.Добавить(МассивВторогоПорядка); 
		ВыходныеПараметры.Добавить(МассивМассивов);
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Процедура получает ширину строки в символах.
//  
Процедура НачатьПолучениеШириныСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	ШиринаСтроки = 0;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("КоличествоПараметров"   , 1);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПолучитьШиринуСтроки(Оповещение, ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьШиринуСтроки"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Начало открытие денежного ящика.
//
Процедура НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОткрытьДенежныйЯщик(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОткрытьДенежныйЯщик"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет аннулирование чека.
//
Процедура НачатьАннулированиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры);
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		// Фискальные регистратор.
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		Оповещение = Новый ОписаниеОповещения("НачатьАннулированиеЧека_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьОткрытиеЧека(Оповещение, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
	
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура завершения начала аннулирования чека.
// 
// Параметры:
// 	РезультатВыполнения - Структура - результат выполнения операции.
// 	ДополнительныеПараметры - Структура - структура с полями:
// 		* Параметры - Структура - структура параметров.
//
Процедура НачатьАннулированиеЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		НачатьОтменуЧека(ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, ДополнительныеПараметры.ПараметрыПодключения, 
			ДополнительныеПараметры.ВыходныеПараметры);
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

// Функция осуществляет внесение или выемку суммы.
//
Процедура НачатьИнкассацию(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	
	ТипИнкассации  = ?(ВходныеПараметры.Свойство("ТипИнкассации"), ВходныеПараметры.ТипИнкассации, 0);  
	Сумма          = ?(ВходныеПараметры.Свойство("Сумма"), ВходныеПараметры.Сумма, 0);  
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Или ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			Результат = ОбъектДрайвера.НачатьВызовНапечататьЧекВнесенияВыемки(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ?(ТипИнкассации = 1, Сумма, -Сумма));
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьЧекВнесенияВыемки"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'") + Символы.ПС;
		ТекстЧека = ТекстЧека + НСтр("ru='СУММА ='") + Символы.НПП + Формат(Сумма, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0");	
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, ?(ТипИнкассации = 1, 2, 3), Неопределено, ТекстЧека);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры);
		
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начала печати текста.
//
Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"          , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"               , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"    , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"       , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("СтрокаТекста"            , СтрокаТекста);
	ДополнительныеПараметры.Вставить("ПечатьШтрихкода"         , Ложь);
	                       
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Или ПараметрыПодключения.ТипОборудования = "ПринтерЧеков"  Тогда
		НачатьПечатьТекстаПакетом(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) 
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьТекста_ОткрытиеЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьОткрытиеЧека(Оповещение, ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры) 
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьТекстаПакетом(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Попытка
		РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовНапечататьТекстовыйДокумент(Оповещение, ПараметрыПодключения.ИДУстройства, ДанныеЧека[0]);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьТекстовыйДокумент"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПечатьТестовыхДокументов(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОбщиеПараметры = ВходныеПараметры[0];
	Попытка
		РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекстовогоДокумента(ОбщиеПараметры, ВыходныеПараметры, ШиринаСтроки, РевизияИнтерфейса);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовНапечататьТекстовыйДокумент(Оповещение, ПараметрыПодключения.ИДУстройства, ДанныеЧека[0]);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьТекстовыйДокумент"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет завершение выполнения метода.    
//
Процедура НачатьПечатьЧекаКоррекции_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Параметры[3]);
		ВыходныеПараметры.Добавить(Параметры[2]);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(Параметры[4]);
		ВыходныеПараметры.Добавить(Параметры[5]);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет печать чека коррекции.
//
Процедура НачатьПечатьЧекаКоррекции(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеЧекаКоррекции(ВходныеПараметры, ПараметрыПодключения);
	Если НЕ ПараметрыФискализации.Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьЧекаКоррекции_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовСформироватьЧекКоррекции(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, 
			ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
		Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "СформироватьЧекКоррекции"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет завершение выполнения метода.    
//
Процедура НачатьОперациюСоСменой_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		ПараметрыПодключения = ДополнительныеПараметры.ПараметрыПодключения;
		ПараметрыСостояния = Параметры[2];
		
		Если ПараметрыПодключения.РевизияИнтерфейса >= 3000 Тогда
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, ПараметрыПодключения.РевизияИнтерфейса);
			НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
		Иначе
			НомерСмены         = Параметры[3];
			НомерДокумента     = Параметры[4];
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
			ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
		КонецЕсли;
		
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(ДополнительныеПараметры.СтатусСмены);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
		ВыходныеПараметры.Добавить(Неопределено);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры


Процедура НачатьОперациюСоСменой_ПослеПолучениеПараметровККТ(РезультатВыполнения, ДополнительныеПараметры) Экспорт
		
	Если РезультатВыполнения.Результат Тогда
		Кассир = "";
		НомерСмены     = 0;
		НомерДокумента = 0;
		ПараметрыСостояния = "";
		Попытка
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ДополнительныеПараметры.ВходныеПараметры);
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюСоСменой_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовОткрытьСмену(Оповещение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ПараметрыОперации, 
				ПараметрыСостояния, НомерСмены, НомерДокумента);
		Исключение
			СформироватьОшибкуДрайвера(ДополнительныеПараметры.ВыходныеПараметры, "ОткрытьСмену"); 
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ДополнительныеПараметры.ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;        
		КонецПопытки;
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;        
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет открытие смены.
//
Процедура НачатьОткрытиеСмены(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("СтатусСмены"            , 2); // 2 - Открыта - Состояние смены  
	
	// Заполнение выходных параметров.
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюСоСменой_ПослеПолучениеПараметровККТ", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеПараметровККТ(Оповещение, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ВремВходныеПараметры = Новый Массив();  
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 1, Неопределено, ТекстЧека);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВремВходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор"  Тогда
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьОткрытиеСмены_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбъектДрайвера.НачатьВызовОткрытьСмену(Оповещение, ПараметрыПодключения.ИДУстройства);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОткрытьСмену"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
	Иначе
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеСмены_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет формирование отчет о текущем состоянии расчетов.
//
Процедура НачатьФормироватьОтчетОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			ПараметрыСостояния = Неопределено;
			ОбъектДрайвера.НачатьВызовОтчетОТекущемСостоянииРасчетов(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОтчетОТекущемСостоянииРасчетов"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ВремВходныеПараметры = Новый Массив();  
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВремВходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбъектДрайвера.НачатьВызовНапечататьОтчетБезГашения(Оповещение, ПараметрыПодключения.ИДУстройства);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьОтчетБезГашения"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет формирование отчет без гашения.
//
Процедура НачатьФормироватьОтчетБезГашения(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			ОбъектДрайвера.НачатьВызовНапечататьОтчетБезГашения(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьОтчетБезГашения"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ВремВходныеПараметры = Новый Массив();  
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВремВходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбъектДрайвера.НачатьВызовНапечататьОтчетБезГашения(Оповещение, ПараметрыПодключения.ИДУстройства);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьОтчетБезГашения"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет снятие отчета с гашением.
//
Процедура НачатьЗакрытьСмену(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	ДополнительныеПараметры.Вставить("СтатусСмены"            , 1); // 1 - Закрыта - Состояние смены  
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ВремВходныеПараметры = Новый Массив();  
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 5, Неопределено, ТекстЧека);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВремВходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбъектДрайвера.НачатьВызовНапечататьОтчетСГашением(Оповещение, ПараметрыПодключения.ИДУстройства);
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьОтчетСГашением"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		НомерСмены     = 0;
		НомерДокумента = 0;
		ПараметрыСостояния = "";
		РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
		Попытка
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюСоСменой_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				ОбъектДрайвера.НачатьВызовЗакрытьСмену(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
			Иначе
				ОбъектДрайвера.НачатьВызовЗакрытьСмену(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "ЗакрытьСмену"); 
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецПопытки;
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получение текущее состояние.
//
Процедура НачатьПолучениеТекущееСостояние(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеТекущееСостояние_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПолучитьТекущееСостояние(Оповещение, ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьТекущееСостояние"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеТекущееСостояние_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Параметры[2]); // НомерСмены
		ВыходныеПараметры.Добавить(Параметры[1]); // НомерДокумента
		ВыходныеПараметры.Добавить(Параметры[3]); // СтатусСмены
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		
		ПараметрыСостояния = Параметры[4];
		Если НЕ ПустаяСтрока(ПараметрыСостояния) Тогда
			ПараметрыСостоянияВрем = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния);
		Иначе
			ПараметрыСостоянияВрем = Неопределено;
		КонецЕсли;
		ВыходныеПараметры.Добавить(ПараметрыСостоянияВрем);
		
		ПараметрыРегистрации = ДополнительныеПараметры.ПараметрыПодключения.ПараметрыРегистрации;
		ЗаводскойНомерФН = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
		ВыходныеПараметры.Добавить(ЗаводскойНомерФН); 
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получение параметров ККТ.
//
Процедура НачатьПолучениеПараметровККТ(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ПараметрыККТ = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПолучениеПараметровККТ_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПолучитьПараметрыККТ(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьПараметрыККТ"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Начинает получение параметров ККТ.
// 
// Параметры:
// 	РезультатВыполнения - Структура - структура выполнения операции.
// 	Параметры - Массив - массив параметров.
// 	ДополнительныеПараметры - Структура - где:
// 	*Параметры - Структура - где:
// 	**Идентификатор - СправочникСсылка.ПодключаемоеОборудование - .
Процедура НачатьПолучениеПараметровККТ_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения Тогда
		
		ПараметрыККТ = Параметры[1];
		ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, ДополнительныеПараметры.Параметры.Идентификатор, ДополнительныеПараметры.ПараметрыПодключения.РевизияИнтерфейса);
		ВыходныеПараметры.Вставить("РевизияИнтерфейса", ДополнительныеПараметры.ПараметрыПодключения.РевизияИнтерфейса);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхРегистраторов

// Процедура начать Фискализацию чека.
//
Процедура НачатьФискализациюЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") Тогда
		ОбщиеПараметры = ВходныеПараметры;
	Иначе
		ОбщиеПараметры = ВходныеПараметры[0];
	КонецЕсли;
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОбщиеПараметры"         , ОбщиеПараметры);
	ДополнительныеПараметры.Вставить("ПозицииЧека"            , ПозицииЧека);
	ДополнительныеПараметры.Вставить("ТаблицаОплат"           , ТаблицаОплат);
	ДополнительныеПараметры.Вставить("ПечатьШтрихкода"        , Ложь);
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32); 
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Если ОбщиеПараметры.Свойство("ПодписьЧека")  Тогда
			ПодписьЧека = ОбщиеПараметры.ПодписьЧека;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ПодписьЧека.НомерСмены);
			ВыходныеПараметры.Добавить(ПодписьЧека.НомерЧека);
			ВыходныеПараметры.Добавить(0); // Номер документа
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
			НачатьПечатьЧекаПоШаблону_ОткрытиеЧекаЗавершение(Результат, ДополнительныеПараметры);
		Иначе
			Оповещение = Новый ОписаниеОповещения("НачатьПечатьЧекаПоШаблону_ОткрытиеЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
			ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);
			НачатьОткрытиеЧека(Оповещение, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, Истина, ВыходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ВремВходныеПараметры = Новый Массив();
		ВремВходныеПараметры.Добавить(ОбщиеПараметры);
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 0, ВремВходныеПараметры);
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВремВходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда 
		
		ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеФискализацииЧека(ВходныеПараметры, ПараметрыПодключения);
		Если НЕ ПараметрыФискализации.Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ПараметрыФискализации", ПараметрыФискализации);
		Оповещение = Новый ОписаниеОповещения("НачатьФискализациюЧека_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.НачатьВызовСформироватьЧек(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML); 
			Иначе
				Результат = ОбъектДрайвера.НачатьВызовСформироватьЧек(Оповещение, ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, 
					ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
			КонецЕсли;
		Исключение
			СформироватьОшибкуДрайвера(ВыходныеПараметры, "СформироватьЧек"); 
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	Иначе
		СформироватьОшибкуДрайвера(ВыходныеПараметры);
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Начинает фискализацию чека.
// 
// Параметры:
// 	РезультатВыполнения - Структура - структура результата выполнения.
// 	Параметры - Массив - массив параметров.
// 	ДополнительныеПараметры - Структура - где:
// 	*Параметры - Структура - .
Процедура НачатьФискализациюЧека_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения Тогда
		
		ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
		
		ПараметрыФискализации = ДополнительныеПараметры.ПараметрыФискализации;
		ПараметрыФискализации.НомерЧекаККТ  = Параметры[3];
		ПараметрыФискализации.НомерСменыККТ = Параметры[4];
		ПараметрыФискализации.ФискальныйПризнак  = Параметры[5];
		ПараметрыФискализации.АдресСайтаПроверки = Параметры[6];   
		ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		
		МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧека(ПараметрыФискализации);
		
		// Заполнение выходных параметров.
		ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ДатаСеанса);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
		ВыходныеПараметры.Добавить(ПараметрыФискализации);
		ВыходныеПараметры.Добавить(Неопределено);
		
		Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
			ВходныеПараметры = ДополнительныеПараметры.ОбщиеПараметры;
			ПокупательEmail = ?(ВходныеПараметры.Отправляет1СEmail, ВходныеПараметры.ПокупательEmail, Неопределено);
			ПокупательНомер = ?(ВходныеПараметры.Отправляет1СSMS  , ВходныеПараметры.ПокупательНомер, Неопределено);
			ВходныеПараметры.НомерСмены = ПараметрыФискализации.НомерСменыККТ;
			ВходныеПараметры.НомерЧека  = ПараметрыФискализации.НомерЧекаККТ;
			ВходныеПараметры.Вставить("ФискальныйПризнак"      , ПараметрыФискализации.ФискальныйПризнак);
			ВходныеПараметры.Вставить("АдресСайтаПроверки"     , ПараметрыФискализации.АдресСайтаПроверки);
			ВходныеПараметры.Вставить("РегистрационныйНомерККТ", ПараметрыФискализации.РегистрационныйНомерККТ);
			МенеджерОборудованияКлиентПереопределяемый.НачатьОтправкуЭлектронногоЧека(ВходныеПараметры, ПараметрыФискализации.ТекстСообщения, ПокупательEmail, ПокупательНомер);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ПодключенноеУстройство = Новый Структура("Параметры, ПараметрыПодключения", ДополнительныеПараметры.Параметры, ДополнительныеПараметры.ПараметрыПодключения);   
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			Результат.Вставить("ПодключенноеУстройство"  , ПодключенноеУстройство);
			Результат.Вставить("ОбъектДрайвера"          , ДополнительныеПараметры.ОбъектДрайвера);
			Результат.Вставить("ОбработчикДрайвераМодуль", ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры  

Процедура НачатьПечатьЧекаПоШаблону_ОткрытиеЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ДополнительныеПараметры.Вставить("ПозицииЧекаКоличество", ДополнительныеПараметры.ПозицииЧека.Количество());
		ДополнительныеПараметры.Вставить("ТекущаяСтрока"        , 0);
		НачатьПечатьЧекаПоШаблону_ПечатьСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры);
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры  

// Описание
// 
// Параметры:
// 	РезультатВыполнения - Структура - .
// 	ДополнительныеПараметры - Структура - Описание:
// * ПозицииЧека - Структура - где:
// **Наименование - Строка - .
Процедура НачатьПечатьЧекаПоШаблону_ПечатьСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения.Результат Или ДополнительныеПараметры.ПечатьШтрихкода Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьЧекаПоШаблону_ПечатьСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.ПечатьШтрихкода И НЕ РезультатВыполнения.Результат Тогда
		
			Текст = НСтр("ru='<Штрихкод не распечатан>'");
			НачатьПечатьНефискальнойСтроки(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, ДополнительныеПараметры.ПараметрыПодключения,
					Текст, ДополнительныеПараметры.ВыходныеПараметры);
		
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтрока < ДополнительныеПараметры.ПозицииЧекаКоличество Тогда
			
			ПозицияЧека = ДополнительныеПараметры.ПозицииЧека[ДополнительныеПараметры.ТекущаяСтрока]; //Структура - где: *Наименование - Строка -.
			ДополнительныеПараметры.ПечатьШтрихкода = Ложь;
			ДополнительныеПараметры.ТекущаяСтрока   = ДополнительныеПараметры.ТекущаяСтрока + 1;
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				НачатьПечатьФискальнойСтроки(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
					ДополнительныеПараметры.ПараметрыПодключения, Наименование, Количество, Цена, Сумма, НомерСекции, СтавкаНДС, ДополнительныеПараметры.ВыходныеПараметры);
				
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				
				Текст = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				НачатьПечатьНефискальнойСтроки(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, ДополнительныеПараметры.ПараметрыПодключения,
					Текст, ДополнительныеПараметры.ВыходныеПараметры);
				
			ИначеЕсли ПозицияЧека.Свойство("Штрихкод") Тогда
				
				ДополнительныеПараметры.ПечатьШтрихкода = Истина;
				ТипШтрихКодаЗнач = ?(ПозицияЧека.Свойство("ТипШтрихКода"), ПозицияЧека.ТипШтрихКода, "");
				ШтрихКод     = ?(ПозицияЧека.Свойство("ШтрихКод")    , ПозицияЧека.ШтрихКод  , 1);
				НачатьПечатьШтрихкода(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, ДополнительныеПараметры.ПараметрыПодключения,
					ТипШтрихКодаЗнач, ШтрихКод, ВыходныеПараметры)
				
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Тип строки шаблона чека не поддерживается.'"));
				НачатьОтменуЧека(ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры,
					ДополнительныеПараметры.ПараметрыПодключения, ВыходныеПараметры)
			КонецЕсли
			
		Иначе
			НачатьЗакрытиеЧека(ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
				ДополнительныеПараметры.ПараметрыПодключения, ДополнительныеПараметры.ТаблицаОплат, ДополнительныеПараметры.ВыходныеПараметры)
		КонецЕсли
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьТекста_ОткрытиеЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ЧислоСтрокПечати = СтрЧислоСтрок(ДополнительныеПараметры.СтрокаТекста);
		МассивСтрок = Новый Массив();
		Для НомерСтроки = 1 По ЧислоСтрокПечати Цикл
			МассивСтрок.Добавить(СтрПолучитьСтроку(ДополнительныеПараметры.СтрокаТекста, НомерСтроки));
		КонецЦикла;
		ДополнительныеПараметры.Вставить("ЧислоСтрокПечати", ЧислоСтрокПечати);
		ДополнительныеПараметры.Вставить("МассивСтрок"     , МассивСтрок);
		ДополнительныеПараметры.Вставить("ТекущаяСтрока"   , 0);
		НачатьПечатьТекста_ПечатьСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры);
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры    

// Начинает печать текста.
// 
// Параметры:
// 	РезультатВыполнения - Структура - структура результат выполнения.
// 	ДополнительныеПараметры - Структура - где:
// 	*ТекущаяСтрока - Строка - строка для печати.
// 	*Параметры - Массив - массив параметров.
Процедура НачатьПечатьТекста_ПечатьСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Или ДополнительныеПараметры.ПечатьШтрихкода Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьТекста_ПечатьСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.ПечатьШтрихкода И НЕ РезультатВыполнения.Результат Тогда
			
			Текст = НСтр("ru='<Штрихкод не распечатан>'");
			НачатьПечатьНефискальнойСтроки(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
				ДополнительныеПараметры.ПараметрыПодключения, Текст, ДополнительныеПараметры.ВыходныеПараметры)
				
		ИначеЕсли  ДополнительныеПараметры.ТекущаяСтрока < ДополнительныеПараметры.ЧислоСтрокПечати Тогда
			
			СтрокаТекста = ДополнительныеПараметры.МассивСтрок[ДополнительныеПараметры.ТекущаяСтрока];
			ДополнительныеПараметры.ПечатьШтрихкода = Ложь;
			ДополнительныеПараметры.ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока + 1;
			
			Если (Найти(СтрокаТекста, "[отрезка]") > 0) Или (Найти(СтрокаТекста, "[cut]") > 0) Тогда
				ТаблицаОплат = Новый Массив();
				НачатьЗакрытиеЧека(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
					ДополнительныеПараметры.ПараметрыПодключения, ТаблицаОплат, ДополнительныеПараметры.ВыходныеПараметры)
			ИначеЕсли (Найти(СтрокаТекста, "|ШтрихКод|") > 0) Тогда
				ДополнительныеПараметры.ПечатьШтрихкода = Истина;
				ВыделеннаяСтрока = Сред(СтрокаТекста, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 				ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				ВремВыходныеПараметры = Новый Массив();
				Оповещение = Новый ОписаниеОповещения("НачатьПечатьТекста_ПечатьСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				НачатьПечатьШтрихкода(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры,  
					ДополнительныеПараметры.ПараметрыПодключения, ВремТипШтрихкода, ВремШтрихКод, ДополнительныеПараметры.ВыходныеПараметры);
			Иначе
				НачатьПечатьНефискальнойСтроки(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
					ДополнительныеПараметры.ПараметрыПодключения, СтрокаТекста, ДополнительныеПараметры.ВыходныеПараметры)
			КонецЕсли;
		Иначе
			ТаблицаОплат = Новый Массив();
			НачатьЗакрытиеЧека(ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры, 
				ДополнительныеПараметры.ПараметрыПодключения, ТаблицаОплат, ДополнительныеПараметры.ВыходныеПараметры)
		КонецЕсли
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начинает печать текста.
// 
// Параметры:
// 	РезультатВыполнения - Структура - структура результат выполнения.
// 	ДополнительныеПараметры - Структура - где:
// 	*Параметры - Массив - массив параметров.
Процедура НачатьПечатьТекста_ЗакрытьЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьТекста_ПечатьСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьОткрытиеЧека(Оповещение, ДополнительныеПараметры.ОбъектДрайвера, ДополнительныеПараметры.Параметры,
			ДополнительныеПараметры.ПараметрыПодключения, Ложь, Ложь, ДополнительныеПараметры.ВыходныеПараметры) 
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, РезультатВыполнения.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

// Начало печати штрихкода.
//
Процедура НачатьПечатьШтрихкода(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКодаЗнач, ШтрихКод, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовНапечататьШтрихКод(Оповещение, ПараметрыПодключения.ИДУстройства, ТипШтрихКодаЗнач, ШтрихКод);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьШтрихКод"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет открытие нового чека.
//
Процедура НачатьОткрытиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) Экспорт
	
	НомерСмены = 0;
	НомерЧека  = 0;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОткрытиеЧека_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОткрытьЧек(Оповещение, ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ТипЧека, Истина, НомерЧека, НомерСмены);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОткрытьЧек"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

Процедура НачатьОткрытиеЧека_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Параметры[5]);
		ВыходныеПараметры.Добавить(Параметры[4]);
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет закрытие ранее открытого чека.
//
Процедура НачатьЗакрытиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт
	
	СуммаНаличными       = 0;
	СуммаЭлектронными    = 0;
	СуммаПостоплатой     = 0;
	СуммаПредоплатой     = 0;
	
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПечать_ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовЗакрытьЧек(Оповещение, ПараметрыПодключения.ИДУстройства, 
			СуммаНаличными, СуммаЭлектронными, СуммаПостоплатой, СуммаПредоплатой);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ЗакрытьЧек"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПечать_ПечатьЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ОчисткаПараметров  = ?(ДополнительныеПараметры.Свойство("ОчисткаПараметров"), ДополнительныеПараметры.ОчисткаПараметров, Истина); 
		Если ОчисткаПараметров Тогда
			ВыходныеПараметры.Очистить();
		КонецЕсли;
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("НачатьПечать_ОшибкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечать_ОшибкаЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры.Очистить();             
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(Параметры[0]);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПечать_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовОтменитьЧек(Оповещение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства);
	
КонецПроцедуры

Процедура НачатьПечать_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет отмену ранее открытого чека.
//
Процедура НачатьОтменуЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);

	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОтменитьЧек(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОтменитьЧек"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет печать фискальной строки.
//
Процедура НачатьПечатьФискальнойСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПечать_ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовНапечататьФискСтроку(Оповещение, ПараметрыПодключения.ИДУстройства, Наименование, 
												Количество, Цена, Сумма, НомерСекции, СтавкаНДС);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьФискСтроку"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет печать нефискальной строки.
//
Процедура НачатьПечатьНефискальнойСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ОчисткаПараметров"      , Ложь);
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПечать_ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовНапечататьНефискСтроку(Оповещение, ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "НапечататьНефискСтроку"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭквайринговыхТерминалов

// Процедура определяет будет ли печать слип чеков на терминале.
//
Процедура НачатьПечатьКвитанцийНаТерминале(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьКвитанцийНаТерминале_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПечатьКвитанцийНаТерминале(Оповещение);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПечатьКвитанцийНаТерминале"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПечатьКвитанцийНаТерминале_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(РезультатВыполнения);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьФормированиеИтоговДняПоКартам(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	СлипЧек   = "";
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьФормированиеИтоговДняПоКартам_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовИтогиДняПоКартам(Оповещение, ПараметрыПодключения.ИДУстройства, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ИтогиДняПоКартам"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьФормированиеИтоговДняПоКартам_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		ВыходныеПараметры.Очистить();
		МассивМассивов = Новый Массив();
		МассивМассивов.Добавить("СлипЧек");
		МассивМассивов.Добавить(Параметры[1]);
		ВыходныеПараметры.Добавить(МассивМассивов);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьАварийнуюОтменуОперации(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовАварийнаяОтменаОперации(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "АварийнаяОтменаОперации"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьОперациюПоКарте_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры; //Массив - 
	
	Если РезультатВыполнения Тогда
		
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Параметры[1]);
		ВыходныеПараметры.Добавить(Параметры[4]);
		ВыходныеПараметры.Добавить(Параметры[3]);
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить("СлипЧек");
		МассивПараметров.Добавить(Параметры[6]);
		ВыходныеПараметры.Добавить(МассивПараметров);
		ВыходныеПараметры.Добавить(Параметры[5]);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОперациюПоКарте_ЗавершениеБезПараметров(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		ВыходныеПараметры.Очистить();
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить("СлипЧек");
		МассивПараметров.Добавить(Параметры[6]);
		ВыходныеПараметры.Добавить(МассивПараметров);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОплатуПлатежнойКартой(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                                        Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");
	
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОплатитьПлатежнойКартой(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОплатитьПлатежнойКартой"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьВозвратПлатежаПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры) Экспорт;
	  
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");
	
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	СлипЧек        = "";
	НомерКарты     = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовВернутьПлатежПоПлатежнойКарте(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ВернутьПлатежПоПлатежнойКарте"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьОтменуПлатежаПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры) Экспорт;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");
	
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	НомерКарты = "";
	СлипЧек    = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОтменитьПлатежПоПлатежнойКарте(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОтменитьПлатежПоПлатежнойКарте"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПреавторизоватьПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                                        Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");
	
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПреавторизацияПоПлатежнойКарте(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПреавторизацияПоПлатежнойКарте"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет отмену преавторизации по карте.
//
Процедура НачатьОтменуПреавторизацииПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
	
	КодАвторизации = "";
	СлипЧек        = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_ЗавершениеБезПараметров", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОтменитьПреавторизациюПоПлатежнойКарте(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОтменитьПреавторизациюПоПлатежнойКарте"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет завершение преавторизации по карте.
//
Процедура НачатьЗавершениеПреавторизацииПоПлатежнойКарте(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если НЕ (Сумма > 0) Тогда
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");
	
	КодАвторизации = "";
	СлипЧек        = "";
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьОперациюПоКарте_ЗавершениеБезПараметров", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовЗавершитьПреавторизациюПоПлатежнойКарте(Оповещение, ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ЗавершитьПреавторизациюПоПлатежнойКарте"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляДисплеевПокупателя

// Процедура осуществляет осуществляет очистку дисплея покупателя.
//
Процедура НачатьОчисткуДисплейПокупателя(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОчиститьДисплейПокупателя(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОчиститьДисплейПокупателя"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет вывод строк на дисплей покупателя.
//
Процедура НачатьВыводСтрокНаДисплейПокупателя(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, СтрокаТекста)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовВывестиСтрокуНаДисплейПокупателя(Оповещение, ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ВывестиСтрокуНаДисплейПокупателя"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет получение параметров вывода на дисплей покупателя.
//
Процедура НачатьПолучениеПараметровВывода(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("КоличествоПараметров"   , 2);
	Попытка
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПолучитьПараметрыВывода(Оповещение, ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьПараметрыВывода"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляТерминаловСбораДанных

// Осуществляет выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры)
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка);
	
	Попытка
		ТекущийПакет = 1;
		КоличествоПакетов = ПакетыДляВыгрузки.Количество();
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет - 1];
		СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
		ПроцентИнкремент = 100 / (ТаблицаВыгрузки.Количество() / РазмерПакета);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ПакетыДляВыгрузки"      , ПакетыДляВыгрузки);
		ДополнительныеПараметры.Вставить("КоличествоПакетов"      , КоличествоПакетов);
		ДополнительныеПараметры.Вставить("ТекущийПакет"           , ТекущийПакет);
		ДополнительныеПараметры.Вставить("ПроцентИнкремент"       , ПроцентИнкремент);
		
		МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПакет * ПроцентИнкремент));
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьВыгрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовВыгрузитьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ВыгрузитьТаблицу"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет выгрузку данных в терминал сбора данных - завершение.
//
Процедура НачатьВыгрузкуТаблицы_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		Если ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов Тогда
			
			ДополнительныеПараметры.ТекущийПакет = ДополнительныеПараметры.ТекущийПакет + 1;
			ДанныеДляВыгрузки = ДополнительныеПараметры.ПакетыДляВыгрузки[ДополнительныеПараметры.ТекущийПакет - 1];
			СтатусПакета = ?(ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов , "regular", "last");
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьВыгрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ДополнительныеПараметры.ТекущийПакет * ДополнительныеПараметры.ПроцентИнкремент));
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовВыгрузитьТаблицу(ОповещениеПриЗавершении, 
				ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			
		Иначе
			ВыходныеПараметры.Очистить();
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет загрузку таблицы из терминала сбора данных.
//
Процедура НачатьЗагрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДанныеЗагрузки = "";
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьЗагрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовЗагрузитьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ЗагрузитьТаблицу"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет загрузку таблицы из терминала сбора данных - завершение.
//
Процедура НачатьЗагрузкуТаблицы_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	АлкогольнаяПродукция = Ложь;
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ВыходныеПараметры.Очистить();
		ДанныеЗагрузки = Параметры[1];
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияВызовСервера.ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
			ВыходныеПараметры.Добавить(АлкогольнаяПродукция);
		КонецЕсли;   
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Процедура НачатьОчисткуТаблицу(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОчиститьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОчиститьТаблицу"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭлектронныхВесов

// Процедура осуществляет получение веса, расположенного на весах.
//
Процедура НачатьПолучениеВеса(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Вес = 0;
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("КоличествоПараметров"   , 1);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПолучитьВес(Оповещение, ПараметрыПодключения.ИДУстройства, Вес);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьВес"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет тарирование весов.
//
Процедура НачатьТарировать(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("КоличествоПараметров"   , 1);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовУстановитьВесТары(Оповещение, ПараметрыПодключения.ИДУстройства, ВесТары);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "УстановитьВесТары"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВесовСПечатьюЭтикеток

// Очищает товары в весах с печатью этикеток.
//
Процедура НачатьОчисткуТоварыВВесах(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОчиститьТовары(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ОчиститьТовары"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет выгрузку данных в весы с печатью этикеток.
//
Процедура НачатьВыгрузкуТоваровВВесы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры)
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета      = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета);
	
	Попытка
		ТекущийПакет = 1;
		КоличествоПакетов = ПакетыДляВыгрузки.Количество();
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет - 1];
		СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
		ПроцентИнкремент = 100 / (ТаблицаВыгрузки.Количество() / РазмерПакета);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка"      , ЧастичнаяВыгрузка);
		ДополнительныеПараметры.Вставить("ПакетыДляВыгрузки"      , ПакетыДляВыгрузки);
		ДополнительныеПараметры.Вставить("КоличествоПакетов"      , КоличествоПакетов);
		ДополнительныеПараметры.Вставить("ТекущийПакет"           , ТекущийПакет);
		ДополнительныеПараметры.Вставить("ПроцентИнкремент"       , ПроцентИнкремент);
		
		МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПакет * ПроцентИнкремент));
		Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровВВесы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовВыгрузитьТовары(Оповещение, ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ВыгрузитьТовары"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет выгрузку данных в весы с печатью этикеток - завершение.
//
Процедура НачатьВыгрузкуТоваровВВесы_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		Если ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов Тогда
			
			ДополнительныеПараметры.ТекущийПакет = ДополнительныеПараметры.ТекущийПакет + 1;
			ДанныеДляВыгрузки = ДополнительныеПараметры.ПакетыДляВыгрузки[ДополнительныеПараметры.ТекущийПакет - 1];
			СтатусПакета = ?(ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов , "regular", "last");
			Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровВВесы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ДополнительныеПараметры.ТекущийПакет * ДополнительныеПараметры.ПроцентИнкремент));
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовВыгрузитьТовары(Оповещение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			
		Иначе
			ВыходныеПараметры.Очистить();
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПринтеровЭтикеток

// Осуществляет инициализация принтера этикеток.
//
Процедура НачатьИнициализациюПринтера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовИнициализацияПринтера(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ИнициализацияПринтера"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет печать этикеток на принтере этикеток.
//
Процедура НачатьПечатьЭтикеток(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры)
	
	Если МассивЭтикеток.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для печати.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, ШаблонЭтикетки);
	
	Попытка
		ТекущийПакет = 1;
		КоличествоПакетов = ПакетыДляВыгрузки.Количество();
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет - 1];
		СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
		ПроцентИнкремент = 100 / (МассивЭтикеток.Количество() / РазмерПакета);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ПакетыДляВыгрузки"      , ПакетыДляВыгрузки);
		ДополнительныеПараметры.Вставить("КоличествоПакетов"      , КоличествоПакетов);
		ДополнительныеПараметры.Вставить("ТекущийПакет"           , ТекущийПакет);
		ДополнительныеПараметры.Вставить("ПроцентИнкремент"       , ПроцентИнкремент);
		
		МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Печать этикеток...'"), Окр(ТекущийПакет * ПроцентИнкремент));
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПечатьЭтикеток(Оповещение, ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПечатьЭтикеток"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет печать этикеток на принтере этикеток - завершение.
//
Процедура НачатьПечатьЭтикеток_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		Если ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов Тогда
			
			ДополнительныеПараметры.ТекущийПакет = ДополнительныеПараметры.ТекущийПакет + 1;
			ДанныеДляВыгрузки = ДополнительныеПараметры.ПакетыДляВыгрузки[ДополнительныеПараметры.ТекущийПакет - 1];
			СтатусПакета = ?(ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов , "regular", "last");
			Оповещение = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Печать этикеток...'"), Окр(ДополнительныеПараметры.ТекущийПакет * ДополнительныеПараметры.ПроцентИнкремент));
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПечатьЭтикеток(Оповещение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			
		Иначе
			ВыходныеПараметры.Очистить();
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Процедура возвращает версию установленного драйвера.
//
Процедура НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииДрайвера_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	Попытка
		ОбъектДрайвера.НачатьВызовПолучитьНомерВерсии(ОповещениеМетода);
	Исключение
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ПолучитьНомерВерсии"); 
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура возвращает версию установленного драйвера - Завершение.
//
Процедура НачатьПолучениеВерсииДрайвера_Завершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ВыходныеПараметры[1] = РезультатВызова;
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры драйвера.
//
Процедура НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры) Экспорт
	
	ВремПараметры = Новый Структура();
	Если ДополнительныеПараметры.ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ДополнительныеПараметры.ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ВремПараметры.Вставить("P_EquipmentType", ТипОборудования) 
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры.Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ВремПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ПараметрыДляУстановки", ВремПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриУстановкеПараметров", ОповещениеПриУстановкеПараметров);
	НачатьУстановкуПараметров_Завершение(Истина, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура завершения установки параметров драйвера.
//
Процедура НачатьУстановкуПараметров_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДополнительныеПараметры.ПараметрыДляУстановки) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПараметрыДляУстановки.Количество() > 0  Тогда
		Для Каждого Параметр Из ДополнительныеПараметры.ПараметрыДляУстановки Цикл
			ИмяТекПараметра = Параметр.Ключ;
			ЗначениеПараметра = Параметр.Значение;
			ДополнительныеПараметры.ПараметрыДляУстановки.Удалить(ИмяТекПараметра);
			ОповещениеМетода = Новый ОписаниеОповещения("НачатьУстановкуПараметров_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовУстановитьПараметр(ОповещениеМетода, Сред(ИмяТекПараметра, 3), ЗначениеПараметра);
			Прервать;
		КонецЦикла;
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриУстановкеПараметров <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
		КонецЕсли;   
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьТестУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства - Установка параметров.
//
Процедура НачатьТестУстройства_УстановкаПараметровЗавершение(Результат, Параметры) Экспорт
	
	РезультатТеста       = "";
	АктивированДемоРежим = "";  
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьТестУстройства_Завершение", ЭтотОбъект, Параметры);
		Параметры.ОбъектДрайвера.НачатьВызовТестУстройства(Оповещение, РезультатТеста, АктивированДемоРежим);
	Исключение
		ВыходныеПараметры = Параметры.ВыходныеПараметры;
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ТестУстройства"); 
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства - Завершение.
//
Процедура НачатьТестУстройства_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(0);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
	КонецЕсли;
	ВыходныеПараметры.Добавить(Параметры[0]);
	ВыходныеПараметры.Добавить(Параметры[1]);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Процедура НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
	
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);
	ВыходныеПараметры = Новый Массив();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИмяДействия"            , ИмяДействия);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение(Результат, Параметры) Экспорт
	
	ОповещениеЗавершение = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_Завершение", ЭтотОбъект, Параметры);
	Попытка
		Параметры.ОбъектДрайвера.НачатьВызовВыполнитьДополнительноеДействие(ОповещениеЗавершение, Параметры.ИмяДействия) 
	Исключение
		ВыходныеПараметры = Параметры.ВыходныеПараметры;
		СформироватьОшибкуДрайвера(ВыходныеПараметры, "ВыполнитьДополнительноеДействие"); 
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_Завершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			ТекстОшибки = "";
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриЗавершении, ТекстОшибки)
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка дополнительного действия драйвера.'"));
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

// Процедура возвращает описание установленного драйвера.
//
Процедура НачатьПолучениеОписаниеДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);

	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьНомерВерсииЗавершение", ЭтотОбъект, ПараметрыКоманды);
	Попытка
		ОбъектДрайвера.НачатьВызовПолучитьНомерВерсии(ОповещениеМетода);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьНомерВерсииЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[1] = РезультатВызова;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Истина;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьОписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОписание(ОповещениеМетода, НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
									ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;

КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьОписаниеЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[2] = ПараметрыВызова[0]; // НаименованиеДрайвера
	ВыходныеПараметры[3] = ПараметрыВызова[1]; // ОписаниеДрайвера
	ВыходныеПараметры[4] = ПараметрыВызова[2]; // ТипОборудования
	ВыходныеПараметры[5] = ПараметрыВызова[3]; // РевизияИнтерфейса
	ВыходныеПараметры[6] = ПараметрыВызова[4]; // ИнтеграционныйКомпонент
	ВыходныеПараметры[7] = ПараметрыВызова[5]; // ОсновнойДрайверУстановлен
	ВыходныеПараметры[8] = ПараметрыВызова[6]; // URLЗагрузкиДрайвера
	
	ПараметрыДрайвера = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьПараметрыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьПараметры(ОповещениеМетода, ПараметрыДрайвера);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьПараметрыЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[9] = ПараметрыВызова[0];
	
	ДополнительныеДействия = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьДополнительныеДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка                                    
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьДополнительныеДействия(ОповещениеМетода, ДополнительныеДействия);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьДополнительныеДействияЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[10] = ПараметрыВызова[0];
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию()
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции

#КонецОбласти     

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОшибкуДрайвера(ВыходныеПараметры, ИмяМетода = Неопределено, ОписаниеОшибки = Неопределено)
	
	Если НЕ ПустаяСтрока(ИмяМетода) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка вызова метода драйвера <%1>.'");
		СообщениеОбОшибке = СтрШаблон(СообщениеОбОшибке, ИмяМетода); 
	Иначе
		СообщениеОбОшибке = НСтр("ru='Данный тип оборудование не поддерживает данную команду.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	СформироватьОшибку(ВыходныеПараметры, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура СформироватьОшибку(ВыходныеПараметры, СообщениеОбОшибке)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(СообщениеОбОшибке);
	
КонецПроцедуры

#КонецОбласти
