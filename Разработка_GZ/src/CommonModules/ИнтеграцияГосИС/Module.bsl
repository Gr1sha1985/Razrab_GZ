/////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Серверные процедуры и функции общего назначения библиотек интеграции
//   * Функции форматирования XML
//   * Функции работы с XDTO
//   * Функции работы с запросами
//

#Область ПрограммныйИнтерфейс

#Область ФорматированиеXML

// Инициализирует объект ПараметрыЗаписиXML.
//
// Параметры:
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//   -  ПараметрыЗаписиXML - набор параметров, который используется при записи XML.
//
Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		"UTF-8",
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML       - Строка - текст сообщения, который.
//  ПараметрыФорматирования - ПараметрыЗаписиXML - параметры записи XML.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML   - Строка - текст сообщения, который.
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXML(ТекстСообщенияXML, ИспользоватьОтступы = Истина, СимволОтступа = " ") Экспорт
	
	ПараметрыФорматирования = ПараметрыФорматированияXML(ИспользоватьОтступы, СимволОтступа);
	
	Возврат ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования);
	
КонецФункции

#КонецОбласти

#Область РаботаСXDTO

// Устанавливает значение свойства объекта XDTO, 
//с проверкой на наличие свойства и необходимость заполнения.
//
// Параметры:
//  ОбъектXDTO       - ОбъектXDTO   - объект в котором заполняется свойство
//  ИмяСвойства      - Строка       - имя свойства
//  ЗначениеСвойства - Произвольный - значение свойства
//  КешОшибок        - Структура    - см. ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки()
//  Расшифровки      - Структура    - см. ДанныеДляРасшифровкиОшибок()
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешеноНеЗаполнять = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства).НижняяГраница = 0;
	Если Не ЗначениеЗаполнено(ЗначениеСвойства)
		И РазрешеноНеЗаполнять Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки);
	
КонецПроцедуры

// Устанавливает значение свойства объекта XDTO (для списка - добавляет элемент в список), без проверок
//
// Параметры:
//  ОбъектXDTO       - ОбъектXDTO   - объект в котором заполняется свойство
//  ИмяСвойства      - Строка       - имя свойства
//  ЗначениеСвойства - Произвольный - значение свойства
//  КешОшибок        - Структура    - см ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки()
//  Расшифровки      - Структура    - см ДанныеДляРасшифровкиОшибок()
//
Процедура УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки) Экспорт
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ЧтениеXML = Новый Структура;
		ЧтениеXML.Вставить("Имя"                , ИмяСвойства);
		ЧтениеXML.Вставить("ЛокальноеИмя"       , ИмяСвойства);
		ЧтениеXML.Вставить("Значение"           , ЗначениеСвойства);
		ЧтениеXML.Вставить("ТипУзла"            , ТипУзлаXML.КонецЭлемента);
		ЧтениеXML.Вставить("URIПространстваИмен", ОбъектXDTO.Тип().URIПространстваИмен);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПредставлениеОшибкиXDTO(ТекстОшибки, ЧтениеXML, Расшифровки);
		
		Если КешОшибок <> Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(КешОшибок, ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает пользовательское представление ошибки
//
// Параметры:
//  ПредставлениеОшибки	 - Строка               - представление ошибки до обработки
//  ЧтениеXML            - ЧтениеXML, Структура - ошибочный узел данных
//  Расшифровки          - Структура            - см. ДанныеДляРасшифровкиОшибок()
// 
// Возвращаемое значение:
//  Строка - представление ошибки после обработки
//
Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Расшифровки) Экспорт
	
	Если СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Ошибка проверки данных XDTO'")) = 0
		И СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Несоответствие типов XDTO'")) = 0 Тогда
		Возврат ПредставлениеОшибки;
	КонецЕсли;
	
	ЗначениеПоля = ЧтениеXML.Значение;
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	Если Расшифровки.Таблица = Неопределено Тогда
		Расшифровки.Таблица = ПредставленияПолей(Расшифровки.ИмяМакета);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПространствоИмен", ЧтениеXML.URIПространстваИмен);
	Отбор.Вставить("ЛокальноеИмя",     ЧтениеXML.ЛокальноеИмя);
	
	МассивСтрок = Расшифровки.Таблица.НайтиСтроки(Отбор);
	
	СтрокаТаблицы = Неопределено;
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	ИначеЕсли МассивСтрок.Количество() > 1 И НЕ Расшифровки.Глубина = Неопределено Тогда
		Отбор.Вставить("Глубина", Расшифровки.Глубина);
		МассивСтрокПоГлубине = Расшифровки.Таблица.НайтиСтроки(Отбор);
		Если МассивСтрокПоГлубине.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтрокПоГлубине[0];
		Иначе
			СтрокаТаблицы = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ПредставлениеОшибки = НСтр("ru = 'Не заполнено значение поля ""%1"" (%2)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			Иначе
				ПредставлениеОшибки = НСтр("ru = 'Некорректное значение ""%1"" поля ""%2"" (%3)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ЗначениеПоля, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			КонецЕсли;
		Иначе
			ИндексСтроки = Расшифровки.Таблица.Индекс(СтрокаТаблицы);
			
			Пока ИндексСтроки > 0 Цикл
				ПредыдущееПоле = Расшифровки.Таблица[ИндексСтроки - 1];
				Если ПредыдущееПоле.ПространствоИмен <> СтрокаТаблицы.ПространствоИмен Тогда
					Прервать;
				КонецЕсли;
				Если ПредыдущееПоле.Обязательное Тогда
					ПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""%1"" (%2)'");
					ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ПредыдущееПоле.Представление, ПредыдущееПоле.ЛокальноеИмя);
					Прервать;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//  Запрос				 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса		 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  ВыгрузитьРезультат	 - Булево			 - Истина, если результат запроса нужно выгрузить в таблицы значений.
// 
// Возвращаемое значение:
//  Структура - структура в которую помещены полученные таблицы
//
Функция ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ВыгрузитьРезультат = Ложь) Экспорт

	Таблицы = Новый Структура;
	
	МассивТекстаЗапроса = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстаЗапроса.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли;
		МассивТекстаЗапроса.Добавить(ТекстЗапроса.Значение);
		
		МассивТекстаЗапроса.Добавить(
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
	
	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	КоличествоЗапросовВПакете = 0;
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		
		Если СтрЧислоВхождений(ТекстЗапроса.Значение, ";") > 0 Тогда
			Подзапросы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса.Значение, ";");
			КоличествоПодзапросов = Подзапросы.Количество();
			ИндексЗапросаРезультате = Неопределено;
			Для Индекс = -(КоличествоПодзапросов - 1) По 0 Цикл
				Если Найти(Подзапросы[-Индекс], "#РезультатЗапроса#") > 0 Тогда
					ИндексЗапросаРезультате = -Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИндексЗапросаРезультате = Неопределено Тогда
				ИндексЗапросаРезультате = КоличествоПодзапросов - 1;
			КонецЕсли;
		Иначе
			КоличествоПодзапросов = 1;
			ИндексЗапросаРезультате = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			РезультатТаблица = Результат[КоличествоЗапросовВПакете + ИндексЗапросаРезультате];
			РезультатТаблица = ?(ВыгрузитьРезультат, РезультатТаблица.Выгрузить(), РезультатТаблица);
			Таблицы.Вставить(ТекстЗапроса.Представление, РезультатТаблица);
		КонецЕсли;
		
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + КоличествоПодзапросов;
		
	КонецЦикла;
	
	Возврат Таблицы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСXDTO

// Функция - Данные для расшифровки ошибок
//
// Параметры:
//  ИмяМакета - Строка - макет в котором искать описание ошибки
//  Глубина   - Число  - уровень вложенности ошибки в макете
// 
// Возвращаемое значение:
//  Структура - из переданных параметров
//
Функция ДанныеДляРасшифровкиОшибок(ИмяМакета = Неопределено, Глубина = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяМакета", ИмяМакета);
	Результат.Вставить("Глубина",   Глубина);
	Результат.Вставить("Таблица",   Неопределено);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСXDTO

// Функция возвращает пустую таблицу значений пользовательских представлений полей
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица (отсутствия пользовательской расшифровки полей)
//
Функция ПустаяТаблицаПредставленийПолей()
	
	ТаблицаПредставлений = Новый ТаблицаЗначений;
	ТаблицаПредставлений.Колонки.Добавить("ПространствоИмен", Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("ЛокальноеИмя",     Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("Представление",    Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("Обязательное",     Новый ОписаниеТипов("Булево"));
	ТаблицаПредставлений.Колонки.Добавить("Глубина",          Новый ОписаниеТипов("Число"));
	Возврат ТаблицаПредставлений;
	
КонецФункции

// Функция возвращает таблицу значений пользовательских представлений полей из макета
//
// Параметры:
//  ИмяМакета - Строка - имя общего макета из которого берутся представления
//    Структура макета: Табличный документ с XML:
//     * Элементы (список): Items,
//       * Вложенный элемент списка: Item, с атрибутами соответствующими колонкам результата
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПустаяТаблицаПредставленийПолей()
//
Функция ПредставленияПолей(ИмяМакета)
	
	ТаблицаПредставлений = ПустаяТаблицаПредставленийПолей();
	
	Если ИмяМакета = Неопределено Тогда
		Возврат ТаблицаПредставлений;
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда //пустой макет вполне валиден
		Возврат ТаблицаПредставлений;
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		СтрокаПредставления = ТаблицаПредставлений.Добавить();
		СтрокаПредставления.ПространствоИмен = ЧтениеXML.ПолучитьАтрибут("ПространствоИмен");
		СтрокаПредставления.ЛокальноеИмя     = ЧтениеXML.ПолучитьАтрибут("ЛокальноеИмя");
		СтрокаПредставления.Представление    = ЧтениеXML.ПолучитьАтрибут("Представление");
		СтрокаПредставления.Глубина          = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут("Глубина"));
		СтрокаПредставления.Обязательное     = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут("Обязательное")));
		
	КонецЦикла;
	
	ТаблицаПредставлений.Сортировать("ПространствоИмен Возр");
	
	Возврат ТаблицаПредставлений;
	
КонецФункции

#КонецОбласти

#КонецОбласти
