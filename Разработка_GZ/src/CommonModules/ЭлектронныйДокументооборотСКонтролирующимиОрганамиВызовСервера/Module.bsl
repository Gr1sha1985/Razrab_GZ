////////////////////////////////////////////////////////////////////////////////
// ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов) Экспорт

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецФункции

// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

Функция ВыгрузитьДокументСервер(СсылкаНаОтчет, ИдентификаторФормыВызова) Экспорт
	СвойстваФайлаВыгрузки = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент(СсылкаНаОтчет, ИдентификаторФормыВызова);
	Если НЕ ЗначениеЗаполнено(СвойстваФайлаВыгрузки) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки", СвойстваФайлаВыгрузки.АдресФайлаВыгрузки, СвойстваФайлаВыгрузки.ИмяФайлаВыгрузки);
	КонецЕсли;
КонецФункции

// Для переданной организции определяет, является ли она юридическим лицом
// 
// Параметры:
//  СправочникСсылка.Организации - организация, для которой определяется, является ли она юридическим лицом
//
// Результат:
//  Булево - Истина, если организация - юридическое лицо, Ложь - в противном случае
//
Функция ЭтоЮрЛицо(Организация) Экспорт
	Возврат РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
КонецФункции

Функция ПолучитьПутьВК() Экспорт
	
	Компоненты = Новый Соответствие;
	АктуальнаяВерсия = 0;
	
	ОбработатьМакетыСКомпонентойОбмена(Метаданные.ОбщиеМакеты, Компоненты, АктуальнаяВерсия);
		
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер <> Неопределено Тогда
		ОбработатьМакетыСКомпонентойОбмена(
			КонтекстЭДОСервер.Метаданные().Макеты, Компоненты, АктуальнаяВерсия, КонтекстЭДОСервер.ПутьКОбъекту);
	КонецЕсли;
	
	Возврат Компоненты.Получить(АктуальнаяВерсия);

КонецФункции

Функция ФИОФизЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("Фамилия");
	МассивПоказателей.Добавить("Имя");
	МассивПоказателей.Добавить("Отчество");
	
	ДатаЗначения = ТекущаяДатаСеанса();

	Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
КонецФункции

// Функция возвращает вид отправляемого документа 
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
//	СправочникСсылка.ВидыОтправляемыхДокументов, в случае неудачи - пустая ссылка данного типа
//
Функция ПолучитьВидОтправляемогоДокументаПоСсылке(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ВидУведомления = ОбъектСсылка.ВидУведомления;
		
		Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПроведенииНалоговогоМониторинга Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПроведенииНалоговогоМониторинга;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбУчастниках Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОбУчастниках;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УчетнаяПолитика Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УчетнаяПолитика;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РегламентИнформационногоВзаимодействия Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РегламентИнформационногоВзаимодействия;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПостановкиНаУчет;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОткрытиеЗакрытиеСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УчастиеВРоссийскихИностранныхОрганизациях;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.СозданиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗакрытиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеорганизацияЛиквидацияОрганизации;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзменениеОбъектаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтказОтУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УтратаПраваНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПереходНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПереходНПДУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПрекращениеДеятельностиУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатента;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбУтратеПраваНаПатент;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУменьшениеНалогаККТ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеУменьшениеНалогаККТ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УменьшениеНалогаНаСтраховыеВзносы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаУ_ИО;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаКИК;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаТС1;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаТС2;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_6 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаС_09_6;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеПостановкаОбъектаНВОС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОРегистрацииОбъектаНВОС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеОНаделенииОППолномочиямиПоВыплатам Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.НаделениеОППолномочиямиПоВыплатамФизлицам;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаСИО Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаСИО;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВыборНалоговогоОрганаНДФЛ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеВыборНалоговогоОрганаУплатаНДФЛ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПорядокУплатыПрибыль Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПорядокУплатыПрибыль;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОЗачетеНалога Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОЗачетеНалога;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОВозвратеНалога Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОВозвратеНалога;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеЛьготаТранспортЗемля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНалоговаяЛьготаТранспортЗемля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеТранспортЗемля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СообщениеТранспортЗемля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОГибелиТранспортногоСредства Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОГибелиТранспортногоСредства;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОтчетДДС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтчетДДС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПостановкаСнятиеВКачествеНалоговогоАгента Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаСнятиеВКачествеНалоговогоАгента;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаРаскрытиеНалоговойТайны Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СогласиеНаРаскрытиеНалоговойТайны;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.НевозможностьПредоставленияДокументов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОсвобождениеОтСтраховыхВзносов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОсвобождениеОтСтраховыхВзносов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОткрытииЗакрытииСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОбОткрытииЗакрытииСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииРеквизитовСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОбИзмененииРеквизитовСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОНаличииСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОНаличииСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеНДДДУС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеНДДДУС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПереходНаЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПереходНаЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПереходНПДЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПрекращениеЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПрекращениеЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросСведенийСоставляющихНалоговуюТайну Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапросСведенийСоставляющихНалоговуюТайну;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеКЛМК Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеКЛМГК;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаСубсидиюДляЗарплаты Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаСубсидиюДляЗарплаты;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СубсидияНаПроведениеПрофилактики Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СубсидияНаПроведениеПрофилактики;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВыдачаСправкиПоРасчетам Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыдачаСправкиПоРасчетам;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаИнформированиеОЗадолженности Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СогласиеНаИнформированиеОЗадолженности;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНалогНаПрибыльСколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНалогНаПрибыльСколково;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНДССколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНДССколково;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЖалобаФНС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЖалобаФНС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеестрДокументовПодтверждающихЛьготы;
		Иначе
			Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура СкрытьЭлементыФормыПриИспользованииОднойОрганизации(Форма, ИмяЭлемента) Экспорт
		
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
			
			Для Каждого ИмяОдногоЭлемента Из ИмяЭлемента Цикл
				
				СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяОдногоЭлемента);
				
				Если СкрываемыйЭлемент <> Неопределено Тогда
					СкрываемыйЭлемент.Видимость = Ложь;
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ТипЗнч(ИмяЭлемента) = Тип("Строка") Тогда
			
			СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
			
			Если СкрываемыйЭлемент <> Неопределено Тогда
				
				СкрываемыйЭлемент.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для проверки факта отправки в ФНС, ПФР или Росстат
// Функция возвращает вид отправляемого документа 
// Параметры:      
//  Ссылка - ссылка на отправляемый объект.
// Результат:
//	Истина, если объект отправлялся в контролирующие органы
//	Ложь, если объект не отправлялся в контролирующие органы
//
Функция ОбъектОтправлялсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатусыОтправки.Объект
		|ИЗ
		|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|ГДЕ
		|	СтатусыОтправки.Статус в (&Статус)
		|	И СтатусыОтправки.Объект = &Объект";

	Статус = Новый Массив;
	Статус.Добавить(Перечисления.СтатусыОтправки.Отправлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.Доставлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.НеПринят);
	Статус.Добавить(Перечисления.СтатусыОтправки.Сдан);
	Статус.Добавить(Перечисления.СтатусыОтправки.ПринятЕстьОшибки);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Объект", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(Организация) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(
		Неопределено, 
		Организация, 
		Неопределено, 
		Неопределено);
	
КонецФункции

Функция ПараметрыОтображенияВЖурналеОтчетов() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ДокСсылка",					Неопределено);
	ПараметрыОтчета.Вставить("НаименованиеОтчета",			"");
	ПараметрыОтчета.Вставить("ВидКонтролирующегоОргана",	Неопределено);
	ПараметрыОтчета.Вставить("КодКонтролирующегоОргана",	"");
	ПараметрыОтчета.Вставить("ДатаНачалаОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("ДатаОкончанияОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Организация",					Неопределено);
	ПараметрыОтчета.Вставить("СтатусОтправки",				"");
	ПараметрыОтчета.Вставить("ПредставлениеВида",			"");
	ПараметрыОтчета.Вставить("ДатаСоздания",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Комментарий",					"");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ИзменитьЗначениеВФорме1СОтчетность(Ссылка, ИмяПоля, Знач НовоеЗначение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		СведенияПоОтправляемомуОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Ссылка);
		
		СтраницаЖурнала = СведенияПоОтправляемомуОбъекту.СтраницаЖурнала;
		
		Если СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Отчеты Тогда
			НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора[ИмяПоля] = НовоеЗначение;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось изменить свойство в таблице форме 1С-Отчетности'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;


КонецПроцедуры

Функция ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка КАК Вид
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Ссылка В ИЕРАРХИИ(&Уведомления)
		|	И ВидыОтправляемыхДокументов.Ссылка <> &Уведомления
		|	ИЛИ ВидыОтправляемыхДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОРегистрацииОбъектаНВОС)";

	Запрос.УстановитьПараметр("Уведомления", Справочники.ВидыОтправляемыхДокументов.Уведомления);

	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивВидовУведомлений = Результат.ВыгрузитьКолонку("Вид");
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МассивВидовПрочихУведомленийПоддерживающихДокументооборот(МассивВидовУведомлений);
	
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
	
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяТипа(Тип) Экспорт

	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();

КонецФункции

Функция ПолучитьСписокВложений(ВладелецВложения) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенияНеформализованныхДокументов.ИмяФайла,
	|	ВложенияНеформализованныхДокументов.Тип,
	|	ВложенияНеформализованныхДокументов.Размер
	|ИЗ
	|	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	|ГДЕ
	|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент";
	Запрос.УстановитьПараметр("НеформализованныйДокумент", ВладелецВложения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИменФайлов.Добавить(Новый Структура("ИмяФайла,Размер", Выборка.ИмяФайла, Выборка.Размер));
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Функция ПолучитьВложенияДокументовРеализацииПолномочийНалоговыхОрганов(Владелец) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла КАК ИмяФайла,
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостояниеОбъектов.Архивный = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВАрхиве,
	|	Представление(ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ВидРешенияНаЖалобу) КАК ВидРешенияНаЖалобу
	|ИЗ
	|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
	|		ПО (СостояниеОбъектов.Объект = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ)
	|			И (СостояниеОбъектов.ИмяФайла = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла)
	|			И (СостояниеОбъектов.Владелец = ЗНАЧЕНИЕ(Перечисление.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов))
	|ГДЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Пустое", Перечисления.ВидыРешенийНаЖалобу.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВложения = Новый Структура(
			"ИмяФайла, Размер, ВАрхиве, ВидРешенияНаЖалобу", 
			Выборка.ИмяФайла, 
			Выборка.Размер, 
			Выборка.ВАрхиве, 
			Выборка.ВидРешенияНаЖалобу);
			
		СписокИменФайлов.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Процедура УдалитьВыборCSPИзВременныхНастроек() Экспорт

	Попытка
		
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		ИмяПользователя()
		);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление сохраненных настроек мастера подключения к 1С-Отчетности'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Синоним) Экспорт
	
	НужныйИндекс = Перечисления.СпецоператорыСвязи.Индекс(Синоним);
	ИмяЗначения = Перечисления.СпецоператорыСвязи.Прочие.Метаданные().ЗначенияПеречисления[НужныйИндекс].Имя;
	Возврат ИмяЗначения;
	
КонецФункции

Функция ПолучитьПараметрСпецоператора(Знач Спецоператор, Параметр) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ПараметрыСпецоператора = КонтекстЭДОСервер.ПолучитьПараметрыОператораСвязи(Спецоператор);
	Возврат ПараметрыСпецоператора[Параметр];
	
КонецФункции

Функция ИменаУЦКалуги() Экспорт
	
	ИменаУЦ = ПолучитьПараметрСпецоператора(Перечисления.СпецоператорыСвязи.КалугаАстрал, "ИменаУЦ");
	
	Возврат ИменаУЦ;
	
КонецФункции

Процедура ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Если НовыйКодОрганаФСГС <> Организация.КодОрганаФСГС Тогда 
			ОрганизацияОбъект = Организация.ПолучитьОбъект();
			ОрганизацияОбъект.КодОрганаФСГС = НовыйКодОрганаФСГС;
			ОрганизацияОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗадатьКодОрганаФСГСВПодразделении(Подразделение, НовыйКодОрганаФСГС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗадатьКодОрганаФСГСВПодразделении(
		Подразделение,
		НовыйКодОрганаФСГС,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПодразделениеОбъект = Подразделение.ПолучитьОбъект();
		ПодразделениеОбъект.КодОрганаФСГС = НовыйКодОрганаФСГС;
		ПодразделениеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДоступККонтекстуЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

Функция ВерсияВнешнегоМодуляДокументооборота() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Получить();
	
КонецФункции

Функция ПараметрыВнешнегоМодуляДокументооборота(ЗагружатьДанныеМодуля = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешнийМодуль", Неопределено);
	Результат.Вставить("ВнешнийМодуль", 			Неопределено);
	Результат.Вставить("ВерсияВнешнегоМодуля", 		Неопределено);
	
	Если ПравоДоступа("Чтение",
		Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль) Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль," + ?(ЗагружатьДанныеМодуля, "
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,", "") + "
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля
			|ИЗ
			|	Константы КАК Константы";
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.ИспользоватьВнешнийМодуль 	= Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль;
			Если ЗагружатьДанныеМодуля Тогда
				Результат.ВнешнийМодуль 			= Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль.Получить();
			КонецЕсли;
			Результат.ВерсияВнешнегоМодуля 			= Выборка.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресТекстаОтправленногоЗаявления(ЗаявлениеСсылка) Экспорт
	Возврат ПоместитьВоВременноеХранилище(ЗаявлениеСсылка.ТекстОтправленногоЗаявления.Получить(), Новый УникальныйИдентификатор);
КонецФункции

Функция ПредставлениеДекларацииПоНДС(ДекларацияПоНДС) Экспорт
	
	Представление = "";
	// Для регламентированного отчета формируем представление по отдельному алгоритму
	Если ТипЗнч(ДекларацияПоНДС) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДекларацияПоНДС);
	Иначе
		Представление = Строка(ДекларацияПоНДС);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ЭтоТребованиеФНС(ДокументСсылка) Экспорт
	
	Возврат ДокументСсылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов
		ИЛИ ДокументСсылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС;
	
КонецФункции

Функция СведенияОЗаполненииПоясненияКДекларацииПоНДС(Пояснение) Экспорт
	
	СведенияОЗаполнении = Новый Структура("ЕстьНеОтвеченныеСтроки, ЕстьИзмененияПоНДС, ЕстьСтрокиДляОтправки", Ложь, Ложь, Ложь);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Пояснение", Пояснение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоНеОтвеченныхСтрок), 0) КАК КоличествоНеОтвеченныхСтрок,
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоСтрокДляОтправки), 0) КАК КоличествоСтрокДляОтправки,
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоСтрокСИзменениямиНДС), 0) КАК КоличествоСтрокСИзменениямиНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоНеОтвеченныхСтрок,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоСтрокДляОтправки,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСКнигаПокупок.СуммаНДС <> ПоясненияКДекларацииПоНДСКнигаПокупок.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоСтрокСИзменениямиНДС
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПокупок КАК ПоясненияКДекларацииПоНДСКнигаПокупок
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПокупок.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСКнигаПокупокДл.СуммаНДС <> ПоясненияКДекларацииПоНДСКнигаПокупокДл.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПокупокДл КАК ПоясненияКДекларацииПоНДСКнигаПокупокДл
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПокупокДл.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И (ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС20 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС20Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС18 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС18Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС10 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС10Расхождение)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПродаж КАК ПоясненияКДекларацииПоНДСКнигаПродаж
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПродаж.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И (ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС20 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС20Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС18 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС18Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС10 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС10Расхождение)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПродажДл КАК ПоясненияКДекларацииПоНДСКнигаПродажДл
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПродажДл.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ЖурналУчетаВыставленныхСчетовФактур КАК ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ЖурналУчетаПолученныхСчетовФактур КАК ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.СуммаНДС <> ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ВыставленныеСчетаФактурыНеплательщиковНДС КАК ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСНетКнигаПрод.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.НетКнигаПрод КАК ПоясненияКДекларацииПоНДСНетКнигаПрод
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСНетКнигаПрод.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДССведКС.ПоясненКС <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.СведКС КАК ПоясненияКДекларацииПоНДССведКС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДССведКС.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДССведКС.ПояснИнОсн <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС КАК ПоясненияКДекларацииПоНДССведКС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДССведКС.Ссылка = &Пояснение) КАК СведенияОЗаполнении";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СведенияОЗаполнении.ЕстьНеОтвеченныеСтроки = Выборка.КоличествоНеОтвеченныхСтрок > 0;
		СведенияОЗаполнении.ЕстьСтрокиДляОтправки = (Выборка.КоличествоСтрокДляОтправки-Выборка.КоличествоСтрокСИзменениямиНДС) > 0;
		СведенияОЗаполнении.ЕстьИзмененияПоНДС = Выборка.КоличествоСтрокСИзменениямиНДС > 0;
	КонецЕсли;
	
	Возврат СведенияОЗаполнении;
	
КонецФункции

// По коду региона возвращает массив органов росстата.
//
// Параметры:
//  КодРегиона	 - Строка - Код региона, для которого надо получить список ТОГС.
//  Спецоператор - Строка - Если указан, ищутся только те органы, которые в указанном регионе поддерживаются
//		данным спецоператором. Если не указан, берутся все органы в данном регионе.
// 
// Возвращаемое значение:
//  Массив - пустой или содержит структуры с ключами КодТОГС и НаименованиеТОГС в качестве элементов.
//
Функция ОтделенияРосстатаРегиона(КодРегиона, Спецоператор = Неопределено) Экспорт
	
	ТаблицаТОГС = ТаблицаТОГС();
	ТаблицаТОГС.Индексы.Добавить("КодРегиона");
	
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		
		ИмяКолонкиСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
			Спецоператор, 
			"СпецоператорСвязи");
			
		ТаблицаТОГС = ТаблицаТОГС.Скопировать(Новый Структура(ИмяКолонкиСпецоператора, ""));
		
	КонецЕсли;
	
	ТаблицаТОГС.Сортировать("Код");
	
	Строки = ТаблицаТОГС.НайтиСтроки(Новый Структура("КодРегиона", КодРегиона));
	
	ОтделенияРосстата = Новый Массив();
	Для Каждого Строка ИЗ Строки Цикл
		Отделение = Новый Структура("КодТОГС, НаименованиеТОГС", Строка.Код, Строка.Наименование);
		ОтделенияРосстата.Добавить(Отделение);
	КонецЦикла;
	
	Возврат ОтделенияРосстата;
	
КонецФункции

// По коду органа Росстата возвращает его наименование.
//
// Параметры:
//  КодОрганаФСГС	 - Строка - код органа Росстата.
// 
// Возвращаемое значение:
//  Строка - наименование органа Росстата.
//
Функция НаименованиеТОГС(КодОрганаФСГС) Экспорт
	
	Если ЗначениеЗаполнено(КодОрганаФСГС) Тогда
		
		ТаблицаТОГС = ТаблицаТОГС();
		Строка = ТаблицаТОГС.Найти(КодОрганаФСГС, "Код");
		Если Строка <> Неопределено Тогда
			Возврат Строка.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НСтр("ru = '<Не выбран код территориального органа>'");
	
КонецФункции

Процедура ОтметитьКакПрочтенное(Ссылка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Ссылка);
	
КонецПроцедуры

Процедура СкрытьВосстановитьОбъект1СОтчетности(Ссылка, Скрыть) Экспорт
	
	ИзменитьЗначениеВФорме1СОтчетность(Ссылка, "Скрыт", Скрыть);
	
КонецПроцедуры

Функция ПодключенДокументооборотСКонтролирующимОрганом(Организация = Неопределено, КонтролирующийОрган = Неопределено) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, КонтролирующийОрган, Ложь);
	
КонецФункции

Функция ЗаполнитьПараметрыКриптографии() Экспорт
	
	СтруктураРезультата = Новый Структура;
	
	ПрисутствуетЗаполненныйПараметр = Ложь;
	
	ПараметрыКриптографии = Новый Соответствие;
	ПараметрыКриптографии.Вставить("ИмяКриптопровайдера");
	ПараметрыКриптографии.Вставить("ТипКриптопровайдера");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера КАК ИмяКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера КАК ТипКриптопровайдера
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого ПараметрКриптографии Из ПараметрыКриптографии Цикл
			ПараметрыКриптографии.Вставить(ПараметрКриптографии.Ключ, Выборка[ПараметрКриптографии.Ключ]);
			Если ЗначениеЗаполнено(Выборка[ПараметрКриптографии.Ключ]) Тогда
				ПрисутствуетЗаполненныйПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата.Вставить("ПрисутствуетЗаполненныйПараметр", ПрисутствуетЗаполненныйПараметр);
	СтруктураРезультата.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция РазделениеВключено() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено();
	
КонецФункции

Функция ПолучитьДанныеСотрудника(ВидВладельцаЭЦП, ДанныеОрганизации, Сотрудник) Экспорт
	
	ФИО              = "";
	ВидДокумента     = "";
	Серия            = "";
	Номер            = "";
	ДатаВыдачи       = "";
	КемВыдан         = "";
	ВидДокумента     = "";
	Подразделение    = "";
	Должность        = "";
	СНИЛС            = "";
	ДатаРождения     = Неопределено;
	МестоРождения    = "";
	КодПодразделения = "";
	Пол              = Неопределено;
	Гражданство      = Неопределено;
	Телефон          = "";
	
	Попытка
		
		ЭтоЮрЛицо = Ложь;
		Если ДанныеОрганизации.Свойство("ТипОрганизации") Тогда
			ЭтоЮрЛицо = ДанныеОрганизации.ТипОрганизации;
		Иначе
			ЭтоЮрЛицо = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(ДанныеОрганизации.Организация);
		КонецЕсли;
		
		Если ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.Руководитель И ЭтоЮрЛицо Тогда //заполняем директора
			
			ДанныеОрганизации.Свойство("СтруктураФИОРук", 		ФИО);
			ДанныеОрганизации.Свойство("ВидУдЛичнРук", 			ВидДокумента);
			ДанныеОрганизации.Свойство("СерияУдЛичнРук", 		Серия);
			ДанныеОрганизации.Свойство("НомерУдЛичнРук", 		Номер);
			ДанныеОрганизации.Свойство("ДатаУдЛичнРук", 		ДатаВыдачи);
			ДанныеОрганизации.Свойство("ОрганВыданУдЛичнРук", 	КемВыдан);
			ДанныеОрганизации.Свойство("ДолжностьРук", 			Должность);
			ДанныеОрганизации.Свойство("СНИЛСРук", 				СНИЛС);
			ДанныеОрганизации.Свойство("ДатаРождРук", 			ДатаРождения);
			ДанныеОрганизации.Свойство("МестоРождРук", 			МестоРождения);
			ДанныеОрганизации.Свойство("КодПодрУдЛичнРук", 		КодПодразделения);
			ДанныеОрганизации.Свойство("ПолРук", 				Пол);
			ДанныеОрганизации.Свойство("ГраждРук", 				Гражданство);
			ДанныеОрганизации.Свойство("ТелРук", 				Телефон);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает пол числом,
			// а нужно перечислением.
			Пол = ПолИзЧислаВПеречисление(Пол);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает код страны,
			// а нужен элемент справочника.
			Если ЗначениеЗаполнено(Гражданство) Тогда
				Гражданство = Справочники.СтраныМира.НайтиПоКоду(Гражданство);
			КонецЕсли;
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			ДанныеИсполнителя.Свойство("Подразделение", Подразделение);
				
		ИначеЕсли ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер И ЭтоЮрЛицо Тогда //заполняем бухгалтера
			
			ДанныеОрганизации.Свойство("СтруктураФИОБух", 		ФИО);
			ДанныеОрганизации.Свойство("ВидУдЛичнБух", 			ВидДокумента);
			ДанныеОрганизации.Свойство("СерияУдЛичнБух", 		Серия);
			ДанныеОрганизации.Свойство("НомерУдЛичнБух", 		Номер);
			ДанныеОрганизации.Свойство("ДатаУдЛичнБух", 		ДатаВыдачи);
			ДанныеОрганизации.Свойство("ОрганВыданУдЛичнБух", 	КемВыдан);
			ДанныеОрганизации.Свойство("ДолжностьБух", 			Должность);
			ДанныеОрганизации.Свойство("СНИЛСБух", 				СНИЛС);
			ДанныеОрганизации.Свойство("ДатаРождБух", 			ДатаРождения);
			ДанныеОрганизации.Свойство("МестоРождБух", 			МестоРождения);
			ДанныеОрганизации.Свойство("КодПодрУдЛичнБух", 		КодПодразделения);
			ДанныеОрганизации.Свойство("ПолБух", 				Пол);
			ДанныеОрганизации.Свойство("ГраждБух", 				Гражданство);
			ДанныеОрганизации.Свойство("ТелБух", 				Телефон);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает пол числом,
			// а нужно перечислением.
			Пол = ПолИзЧислаВПеречисление(Пол);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает код страны,
			// а нужен элемент справочника.
			Если ЗначениеЗаполнено(Гражданство) Тогда
				Гражданство = Справочники.СтраныМира.НайтиПоКоду(Гражданство);
			КонецЕсли;
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			ДанныеИсполнителя.Свойство("Подразделение", Подразделение);
			
		ИначеЕсли ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник ИЛИ ЗначениеЗаполнено(Сотрудник) Тогда //заполняем сотрудника
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			
			Если ДанныеИсполнителя <> Неопределено Тогда
				ДанныеИсполнителя.Свойство("ФИО", 				ФИО);
				ДанныеИсполнителя.Свойство("ВидДокумента", 		ВидДокумента);
				ДанныеИсполнителя.Свойство("Серия", 			Серия);
				ДанныеИсполнителя.Свойство("Номер", 			Номер);
				ДанныеИсполнителя.Свойство("ДатаВыдачи", 		ДатаВыдачи);
				ДанныеИсполнителя.Свойство("КемВыдан", 			КемВыдан);
				ДанныеИсполнителя.Свойство("Должность", 		Должность);
				ДанныеИсполнителя.Свойство("СНИЛС", 			СНИЛС);
				ДанныеИсполнителя.Свойство("Подразделение", 	Подразделение);
				ДанныеИсполнителя.Свойство("ДатаРождения", 		ДатаРождения);
				ДанныеИсполнителя.Свойство("МестоРождения", 	МестоРождения);
				ДанныеИсполнителя.Свойство("КодПодразделения", 	КодПодразделения);
				ДанныеИсполнителя.Свойство("Пол", 				Пол);
				ДанныеИсполнителя.Свойство("Гражданство", 		Гражданство);
				ДанныеИсполнителя.Свойство("ТелефонРабочий", 	Телефон);
				
				// Процедура ПолучитьДанныеИсполнителя возвращает пол строкой,
				// а нужно перечислением.
				Пол = ПолИзСтрокиВПеречисление(Пол);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Электронный документооборот с контролирующими органами. Не удалось получить сведения о сотруднике'");
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЗаписьСобытияВЖурналРегистрации(ТекстСообщения, ОписаниеОшибки);
				
	КонецПопытки;
	
	// Дополнительная попытка определить ФИО
	Если ПустаяСтрока(ФИО) Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ФИО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Сотрудник);
		Иначе
			ФИО = Новый Структура("Фамилия, Имя, Отчество");
		КонецЕсли;
	КонецЕсли;
	
	// Гражданство.
	Если НЕ ЗначениеЗаполнено(Гражданство) Тогда
		Гражданство = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	
	//Место рождения.
	МестоРождения = ПредставлениеМестаРождения(МестоРождения);
	
	Результат = Новый Структура();
	Результат.Вставить("ФИО",           ФИО);
	Результат.Вставить("ВидДокумента",  ВидДокумента);
	Результат.Вставить("Серия",         Серия);
	Результат.Вставить("Номер",         Номер);
	Результат.Вставить("ДатаВыдачи",    ДатаВыдачи);
	Результат.Вставить("КемВыдан",      КемВыдан);
	Результат.Вставить("Должность",     Должность);
	Результат.Вставить("ВидДокумента",  ВидДокумента);
	Результат.Вставить("Подразделение", Подразделение);
	Результат.Вставить("СНИЛС",         СНИЛС);
	Результат.Вставить("ДатаРождения",  ДатаРождения);
	Результат.Вставить("МестоРождения", МестоРождения);
	Результат.Вставить("КодПодразделения", КодПодразделения);
	Результат.Вставить("Пол",           Пол);
	Результат.Вставить("Гражданство",   Гражданство);
	Результат.Вставить("ТелефонРабочий",Телефон);
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыНеХранящиесяВБазе(Организация = Неопределено) Экспорт
	
	Реквизиты = Новый Соответствие();
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство, Ложь);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьНаличиеДанныхДляЗаявленияНаСертификат(Реквизиты, Организация);
	
	// Этот реквизит всегда должен быть доступным для ввода, поскольку ниоткуда не заполняется.
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С, Ложь);
	
	НеХранящиесяРеквизиты = Новый Массив;
	Для каждого РеквизитМастера Из Реквизиты Цикл
		
		РеквизитНеХранитсяВБазе = РеквизитМастера.Значение = Ложь;
		
		Если РеквизитНеХранитсяВБазе Тогда
			НеХранящиесяРеквизиты.Добавить(РеквизитМастера.Ключ);
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат НеХранящиесяРеквизиты; 
	
КонецФункции

Функция КодАльфа2Заполнен(Гражданство) Экспорт
	
	Возврат ЗначениеЗаполнено(Гражданство.КодАльфа2);
	
КонецФункции

Функция ПолучитьИмяФормыОбъктаДляПередачиФНС(Тип) Экспорт

	ВидОбъекта = Неопределено;
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ВидОбъекта = "Справочник.";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ВидОбъекта = "Документ.";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(Тип).Имя;
	ИмяФормыВыбора = ВидОбъекта + ИмяОбъектаМетаданных + ".ФормаВыбора";
	
	Возврат ИмяФормыВыбора;

КонецФункции

Функция ЭтоИностранныйПаспорт(Документ) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоИностранныйПаспорт(Документ); 
	
КонецФункции

Функция ЭтоПаспортРФ(Документ) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоПаспортРФ(Документ); 
	
КонецФункции

#Область ИнтеграцияСЭДО

Процедура ПроверитьНастройкиРегистрацииЭДО(НастройкиЭДО, НастройкиКорректны) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПроверитьНастройкиРегистрацииЭДО(НастройкиЭДО, НастройкиКорректны);

КонецПроцедуры
 
#КонецОбласти

Функция ЗначенияРеквизитовОбмена(ОрганизацияИлиУчетнаяЗапись, НастройкиПолучения = Неопределено) Экспорт
	
	НастройкиПолученияРеквизитов = Новый Структура;
	НастройкиПолученияРеквизитов.Вставить("ПолучатьРеквизитыУчетнойЗаписи", Истина);
	НастройкиПолученияРеквизитов.Вставить("ПолучатьПраваОбмена", 			Истина);
	Если НастройкиПолучения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПолученияРеквизитов, НастройкиПолучения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", 							Неопределено);
	Результат.Вставить("УчетнаяЗапись", 						Неопределено);
	Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 	Ложь);
	Результат.Вставить("СертификатРуководителя", 				"");
	Результат.Вставить("СертификатГлавногоБухгалтера", 			"");
	Результат.Вставить("СертификатДляШифрования", 				"");
	Результат.Вставить("ПредназначенаДляДокументооборотаСФНС", 	Ложь);
	Результат.Вставить("ПредназначенаДляДокументооборотаСПФР", 	Ложь);
	Результат.Вставить("ПредназначенаДляДокументооборотаСФСГС", Ложь);
	Результат.Вставить("ПользователюРазрешеноВыполнятьОбмен", 	Ложь);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияИлиУчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ОрганизацияИлиУчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		Результат.Организация = ОрганизацияИлиУчетнаяЗапись;
		Результат.УчетнаяЗапись = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УчетнаяЗаписьОрганизации(
			ОрганизацияИлиУчетнаяЗапись);
	Иначе
		Результат.УчетнаяЗапись = ОрганизацияИлиУчетнаяЗапись;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиПолученияРеквизитов.ПолучатьРеквизитыУчетнойЗаписи Тогда
		Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса =
			ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.РеквизитыУчетнойЗаписи(
			Результат.УчетнаяЗапись).ЭлектроннаяПодписьВМоделиСервиса;
		
		ИменаРеквизитов = "СертификатРуководителя, СертификатГлавногоБухгалтера, СертификатДляШифрования, "
			"ПредназначенаДляДокументооборотаСФНС, ПредназначенаДляДокументооборотаСПФР, ПредназначенаДляДокументооборотаСФСГС";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.УчетнаяЗапись, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиПолученияРеквизитов.ПолучатьПраваОбмена Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Если КонтекстЭДОСервер <> Неопределено Тогда
			Результат.ПользователюРазрешеноВыполнятьОбмен = КонтекстЭДОСервер.ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(
				Результат.УчетнаяЗапись);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПереходКоробкаОблакоИОбратно

Процедура ПередВыгрузкойДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПередВыгрузкойДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПослеВыгрузкиДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПослеЗагрузкиДанных(Контейнер);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЗаявления(Организация = Неопределено) Экспорт
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И (ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
	|				И &ОрганизацияУказана
	|			ИЛИ НЕ &ОрганизацияУказана)";
	
	ДвеНеделиНазад = ТекущаяДатаСеанса() - 14 * 24 * 60 * 60;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияУказана", Организация <> Неопределено);
	
	Запрос.Текст = Текст;
	
	Результат 		= Запрос.Выполнить();
	ЕстьЗаявления 	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка").Количество() > 0;
	
	Возврат ЕстьЗаявления;
		
КонецФункции

Функция СканыЗаявленийНеПриложены(Ссылка, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	РезультатПроверкиРеквизитов = Новый Массив;
	
	Если Ссылка.ЭтоЗаявлениеОНазначенииПенсии Тогда
		
		ВидЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОНазначении();
		ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, "УказательЗаявлениеОНазначении");
		
	КонецЕсли;
	
	Если Ссылка.ЭтоЗаявлениеОДоставкеПенсии Тогда
		ВидЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОДоставке();
		ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, "УказательЗаявлениеОДоставке");
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ЕстьОшибкаВРеквизите = ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
		Если ЕстьОшибкаВРеквизите Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибка;

КонецФункции

Процедура ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, ПутьКРеквизиту)

	ЕстьДокументы = Ложь;
	Для каждого ЭлектронныйДокументы Из Ссылка.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокументы.Документ = ВидЗаявления Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДокументы Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = 'Прикрепите скан-копию документа ""%1""'"), ВидЗаявления);
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Поле        = ПутьКРеквизиту;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;

КонецПроцедуры

Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина)
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" Тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает строковое представление места рождения.
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения)
	
	Если Лев(СтрокаМестоРождения, 2) = "0,"
		ИЛИ Лев(СтрокаМестоРождения, 2) = "1," Тогда
	
		СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
		
		Если СтруктураМестоРождения.Особое = 1 Тогда
			
			Представление	=	"особое" +
			?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
		Иначе
			
			Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
			Если Лев(Представление, 1) = ","  Тогда
				Представление = Сред(Представление, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Представление;
		
	Иначе
		
		Возврат СтрокаМестоРождения;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьМакетыСКомпонентойОбмена(КоллекцияМакетов, Компоненты, АктуальнаяВерсия, ПутьКОбъекту = "")
	
	ЭтоВнешняяОбработка = ЗначениеЗаполнено(ПутьКОбъекту);
	Для Каждого Макет Из КоллекцияМакетов Цикл
		Если СтрНайти(Макет.Имя, "КомпонентаОбмена") Тогда
			Если Макет.Имя = "КомпонентаОбмена" Тогда
				Компоненты.Вставить(?(ЭтоВнешняяОбработка, 1000000, 0), Макет.Имя);
				
			Иначе
				СтрокаВерсииИзМакета = СтрЗаменить(Макет.Имя, "КомпонентаОбмена", "");
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаВерсииИзМакета) Тогда
					ВерсияИзМакета = Число(СтрокаВерсииИзМакета);
					Версия = ?(ЭтоВнешняяОбработка, 1000000 + ВерсияИзМакета, ВерсияИзМакета);
					
					ПолноеИмяМакета = Макет.ПолноеИмя();
					Если ЗначениеЗаполнено(ПутьКОбъекту) Тогда
						ДлинаПутиКОбъекту = СтрДлина(ПутьКОбъекту);
						НачалоПолногоИмениМакета = Лев(ПолноеИмяМакета, ДлинаПутиКОбъекту + 1);
						Если ВРег(НачалоПолногоИмениМакета) <> ВРег(ПутьКОбъекту + ".") Тогда
							ПолноеИмяМакета = ПутьКОбъекту + "." + Макет.ПолноеИмя();
						КонецЕсли;
					КонецЕсли;
					
					Компоненты.Вставить(Версия, ПолноеИмяМакета);
					
					АктуальнаяВерсия = Макс(АктуальнаяВерсия, Версия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает цикл обмена или отправку по их идентификатору.
Функция ОтправкаПоИдентификатору(ИдентификаторОтправки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЦиклыОбмена.Ссылка
	               |ИЗ
	               |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	               |ГДЕ
	               |	ЦиклыОбмена.Идентификатор = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФСС.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСС КАК ОтправкиФСС
	               |ГДЕ
	               |	ОтправкиФСС.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФСРАР.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
	               |ГДЕ
	               |	ОтправкиФСРАР.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиРПН.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиРПН КАК ОтправкиРПН
	               |ГДЕ
	               |	ОтправкиРПН.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФТС.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФТС КАК ОтправкиФТС
	               |ГДЕ
	               |	ОтправкиФТС.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки";
				   
	Запрос.УстановитьПараметр("ИдентификаторОтправки", ИдентификаторОтправки);
	
	ВсеОтправки = Запрос.Выполнить().Выбрать();
	
	Если ВсеОтправки.Следующий() Тогда
		Возврат ВсеОтправки.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НужноПоказатьРекламу1СОтчетности(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		УчетнаяЗаписьОрганизации 	= КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
		ПоказатьПредложение 		= НЕ ЗначениеЗаполнено(УчетнаяЗаписьОрганизации);
		
	Иначе
		
		// Проверка по всем организациям.
		ПоказатьПредложение = НЕ КонтекстЭДОСервер.ЭлектронныйДокументооборотИспользуется();
		
	КонецЕсли;
	
	Возврат ПоказатьПредложение;
	
КонецФункции

Функция ТаблицаТОГС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КлассификаторXML = КонтекстЭДОСервер.ПолучитьМакет("КодыТОГС").ПолучитьТекст();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Таблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;	
	ЗаменяемыеКоды = ИнтерфейсыВзаимодействияБРО.СоответствиеЗаменяемыхКодовОргановФСГС(Истина);
	
	Для Каждого Пара Из ЗаменяемыеКоды Цикл		
		МассивНайденныхСтрок = Таблица.НайтиСтроки(Новый Структура("Код", Пара.Значение));
		Если МассивНайденныхСтрок.Количество() = 0 Тогда //Новый код отсутствует в макете
			МассивНайденныхСтрок = Таблица.НайтиСтроки(Новый Структура("Код", Пара.Ключ));
			Если МассивНайденныхСтрок.Количество() = 1 Тогда 
				// Старый код найден в макете, заменим на новый
				МассивНайденныхСтрок[0].Код = Пара.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолИзЧислаВПеречисление(ПолЧислом)
	
	Если ТипЗнч(ПолЧислом) <> Тип("Число") Тогда
		Возврат ПолЧислом;
	Конецесли;

	ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	Если ПолЧислом = 0 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	ИначеЕсли ПолЧислом = 1 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли ПолЧислом = 2 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;

	Возврат ПолПеречислением;
	
КонецФункции

Функция ПолИзСтрокиВПеречисление(ПолСтрокой)
	
	Если ТипЗнч(ПолСтрокой) <> Тип("Строка") Тогда
		Возврат ПолСтрокой;
	Конецесли;
	
	ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	Если ПолСтрокой = "Мужской" Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли ПолСтрокой = "Женский" Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;

	Возврат ПолПеречислением;
	
КонецФункции

Процедура ПолучитьИдентификаторАдресаФИАС(
		АдресЮридическийЗначение, 
		АдресФактическийЗначение,
		АдресХранилища) Экспорт
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресЮридический", АдресЮридическийЗначение);
	ДополнительныеПараметры.Вставить("АдресФактический", АдресФактическийЗначение);
	ДополнительныеПараметры.Вставить("АдресХранилища", 	 АдресХранилища);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьИдентификаторАдресаФИАС(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ОтчетЕщеНеОтправлялся(Ссылка) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	Возврат НЕ ЗначениеЗаполнено(СтатусОтправки) ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте;
	
КонецФункции

#КонецОбласти