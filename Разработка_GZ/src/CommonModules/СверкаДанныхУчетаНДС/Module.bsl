////////////////////////////////////////////////////////////////////////////////
// СверкаДанныхУчетаНДС: сверка счетов-фактур и других данных учета НДС.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создание документа "Реестр счетов-фактур поставщика" по данным полученного от поставщика файла.
//
// Параметры:
//  ПараметрыРеестра  - Структура - структура параметров для создания документа. Ключи структуры:
//    * Контрагент - СправочникСсылка.Контрагенты - поставщик, от которого получен реестр.
//    * Организация - СправочникСсылка.Организации - наша организация, для которой получен реестр.
//    * НалоговыйПериод - Дата - начало налогового периода, за который был сформирован реестр.
//    * ДвоичныеДанныеКонтрагента - ДвоичныеДанные - данные полученного файла XML.
//  АдресХранилища  - Строка - адрес временного хранилища, в которое помещается или ссылка на созданный документ,
//                 или массив описаний возникших ошибок.
//
Процедура ЗагрузитьРеестрСчетовФактурПоставщика(ПараметрыРеестра, АдресХранилища) Экспорт
	
	ОписанияОшибок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРеестра.Контрагент) Тогда
		ОписанияОшибок.Добавить(НСтр("ru='Не указан поставщик для загрузки реестра.'"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыРеестра.Организация) Тогда
		ОписанияОшибок.Добавить(НСтр("ru='Не указана организация для загрузки реестра.'"));
	КонецЕсли;
	
	РеквизитыРеестра = РеквизитыРеестраСчетовФактур(ПараметрыРеестра.ДвоичныеДанныеКонтрагента, Истина);
	
	Если РеквизитыРеестра.Свойство("ОписаниеОшибки") Тогда
		ОписанияОшибок.Добавить(РеквизитыРеестра.ОписаниеОшибки);
	КонецЕсли;
	
	// Ищем ранее записанный реестр 
	ДокументСсылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка,
	|	Док.Дата КАК ДатаФормирования
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика КАК Док
	|ГДЕ
	|	Док.Организация = &Организация
	|	И Док.Контрагент = &Контрагент
	|	И Док.НалоговыйПериод = &НалоговыйПериод";
	Запрос.УстановитьПараметр("Организация",     ПараметрыРеестра.Организация);
	Запрос.УстановитьПараметр("Контрагент",      ПараметрыРеестра.Контрагент);
	Запрос.УстановитьПараметр("НалоговыйПериод", РеквизитыРеестра.НалоговыйПериод);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументСсылка = Выборка.Ссылка;
		Если РеквизитыРеестра.ДатаФормирования < Выборка.ДатаФормирования Тогда
			ОписанияОшибок.Добавить(СтрШаблон(
				НСтр("ru='Дата формирования загружаемого реестра (%1) меньше, чем у ранее загруженного (%2).'"),
				РеквизитыРеестра.ДатаФормирования,
				Выборка.ДатаФормирования));
		КонецЕсли;
	КонецЕсли;
	
	Если ОписанияОшибок.Количество() > 0 Тогда
		Результат = Новый Структура("ОписанияОшибок", ОписанияОшибок);
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Заполняем документ полученными данными
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокументОбъект = Документы.РеестрСчетовФактурПоставщика.СоздатьДокумент();
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыРеестра);
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыРеестра);
	ДокументОбъект.Дата = РеквизитыРеестра.ДатаФормирования;
	ДокументОбъект.ПометкаУдаления = Ложь;
	ДокументОбъект.СчетаФактуры.Очистить();
	Для каждого СтрокаТаблицы Из РеквизитыРеестра.СчетаФактуры Цикл
		НоваяСтрока = ДокументОбъект.СчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	ДокументОбъект.Записать();
	
	Результат = Новый Структура("ЗагруженныйРеестр", ДокументОбъект.Ссылка);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Создание документов "Реестр счетов-фактур поставщика" на основании двоичных данных реестров счетов-фактур.
//
// Параметры:
//  ПараметрыРеестров - ТаблицаЗначений - данные для создания документа. Состав колонок соответствует измерениям и ресурсам
//          регистра сведений СтатусыЗапросовРеестровСчетовФактур. Получение таблицы см.
//          Обработки.СверкаДанныхУчетаНДС.ПрочитатьЗаписиРегистра().
//
// Возвращаемое значение:
//  Массив - массив ссылок типа ДокументСсылка.РеестрыСчетовФактурПоставщиков.
//
Функция ЗагрузитьРеестрыСчетовФактурПоставщика(ПараметрыРеестров) Экспорт
	
	ЗагруженныеРеестры = НоваяТаблицаЗагруженныхРеестров();
	
	// Ищем ранее записанные реестры
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Дата КАК ДатаФормирования,
	|	Док.Организация,
	|	Док.Контрагент
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика КАК Док
	|ГДЕ
	|	Док.Организация В(&Организации)
	|	И Док.Контрагент В (&Контрагенты)
	|	И Док.НалоговыйПериод = &НалоговыйПериод";
	Запрос.УстановитьПараметр("Организации"    , ПараметрыРеестров.ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("Контрагенты"    , ПараметрыРеестров.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("НалоговыйПериод", ПараметрыРеестров[0].НалоговыйПериод);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТекущийПрогресс = 0;
	ВсегоЗаписей    = ПараметрыРеестров.Количество();
	
	Для Каждого ПараметрыРеестра Из ПараметрыРеестров Цикл
		
		ТекущийПрогресс = ТекущийПрогресс + 1;
		Выполнено = Окр(ТекущийПрогресс / ВсегоЗаписей * 100);
		ДлительныеОперации.СообщитьПрогресс(Выполнено, НСтр("ru='Загрузка реестров счетов-фактур поставщиков'"));
		
		Если ТипЗнч(ПараметрыРеестра.ДанныеРеестра) = Тип("ХранилищеЗначения") Тогда
			ДанныеРеестра = ПараметрыРеестра.ДанныеРеестра.Получить();
			
		Иначе
			ДанныеРеестра = ПараметрыРеестра.ДанныеРеестра;
			
		КонецЕсли;
		
		РеквизитыРеестра = РеквизитыРеестраСчетовФактур(ДанныеРеестра, Истина);
		
		ДокументСсылка = Неопределено;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ПараметрыРеестра.Организация);
		Отбор.Вставить("Контрагент" , ПараметрыРеестра.Контрагент);
		Реестры = РезультатЗапроса.НайтиСтроки(Отбор);
		Если Реестры.Количество() > 0 Тогда
			ЗагруженныеРеестр = Реестры[0];
			ДокументСсылка = ЗагруженныеРеестр.Ссылка;
			Если РеквизитыРеестра.ДатаФормирования < ЗагруженныеРеестр.ДатаФормирования Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьТекущийРеестр = Истина;
		Реестры = ЗагруженныеРеестры.НайтиСтроки(Отбор);
		Если Реестры.Количество() > 0 Тогда
			Для Каждого ЗагруженныйРеестр Из Реестры Цикл
				ДокументСсылка = ЗагруженныйРеестр.Реестр;
				Если РеквизитыРеестра.ДатаФормирования <= ЗагруженныйРеестр.ДатаФормирования Тогда
					ОбработатьТекущийРеестр = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ОбработатьТекущийРеестр Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполняем документ полученными данными
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументОбъект = Документы.РеестрСчетовФактурПоставщика.СоздатьДокумент();
		Иначе
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыРеестра);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыРеестра);
		ДокументОбъект.Дата = РеквизитыРеестра.ДатаФормирования;
		ДокументОбъект.ПометкаУдаления = Ложь;
		ДокументОбъект.СчетаФактуры.Очистить();
		Для каждого СтрокаТаблицы Из РеквизитыРеестра.СчетаФактуры Цикл
			НоваяСтрока = ДокументОбъект.СчетаФактуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ДокументОбъект.Записать();
		
		ОписаниеЗагруженногоРеестра = ЗагруженныеРеестры.Добавить();
		ОписаниеЗагруженногоРеестра.Реестр           = ДокументОбъект.Ссылка;
		ОписаниеЗагруженногоРеестра.Контрагент       = ПараметрыРеестра.Контрагент;
		ОписаниеЗагруженногоРеестра.Организация      = ПараметрыРеестра.Организация;
		ОписаниеЗагруженногоРеестра.ДатаФормирования = ДокументОбъект.Дата;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагруженныеРеестры", ЗагруженныеРеестры.ВыгрузитьКолонку("Реестр"));
	
	Возврат Результат;
	
КонецФункции

// Формирование отчета "Реестр счетов-фактур выданных" ("Реестр счетов-фактур полученных") по данным информационной базы.
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура параметров для отчета. Ключи структуры:
//    * ЧастьЖурнала - ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур - выставленные или полученные счета-фактуры.
//    * Контрагент - СправочникСсылка.Контрагенты - покупатель (поставщик), по которому формируется реестр.
//    * Организация - СправочникСсылка.Организации - наша организация, по которой формируется реестр.
//    * НалоговыйПериод - Дата - начало налогового периода, за который формируется реестр.
//    * АдресХранилищаФайлаВыгрузки - Строка - адрес временного хранилища, в которое помещаются двоичные данные файла XML
//                 (только для выданных счетов-фактур).
//  АдресХранилища  - Строка - адрес временного хранилища, в которое помещается структура, содержащая 
//                 сформированный отчет и ИНН контрагента и нашей организации.
//
Процедура СформироватьРеестрСчетовФактур(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТаблицаРезультата = ПодготовитьТаблицуРеестраСчетовФактур(ПараметрыОтчета);
	
	// Выводим отчет
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета(Отчеты.РеестрСчетовФактурДляСверки.ПолучитьМакет("Макет"));
	
	// Шапка
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(ПараметрыОтчета.НалоговыйПериод), 
		КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	ОбластиМакета.Шапка.Параметры.ЗаголовокОтчета = СтрШаблон(
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='Реестр счетов-фактур выданных%1 по состоянию на %2'"),
			НСтр("ru='Реестр счетов-фактур полученных%1 по состоянию на %2'")),
		ПериодОтчета,
		Формат(ДатаФормирования, "ДЛФ=D"));
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	ОбластиМакета.Шапка.Параметры.Организация = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбластиМакета.Шапка.Параметры.ИННКППОрганизации = "" + СведенияОбОрганизации.ИНН 
		+ ?(НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП), "", ("/" + СведенияОбОрганизации.КПП));
	
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Контрагент);
	ОбластиМакета.Шапка.Параметры.Контрагент = СтрШаблон(НСтр("ru='%1: %2'"),
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='Покупатель'"), 
			НСтр("ru='Поставщик'")),
		СведенияОКонтрагенте.НаименованиеДляПечатныхФорм);
	ОбластиМакета.Шапка.Параметры.ИННКППКонтрагента = СтрШаблон(НСтр("ru='%1: %2'"),
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='ИНН/КПП покупателя'"), 
			НСтр("ru='ИНН/КПП поставщика'")),
		"" + СведенияОКонтрагенте.ИНН 
			+ ?(НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.КПП), "", ("/" + СведенияОКонтрагенте.КПП)));
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	// Счета-фактуры по покупателю (поставщику)

	ПараметрыРаздела = Новый Структура("ЧастьЖурнала,ЕстьВалюта,НаАванс");
	ПараметрыРаздела.ЧастьЖурнала = ПараметрыОтчета.ЧастьЖурнала;
	ПараметрыРаздела.ЕстьВалюта   = ТаблицаРезультата.Найти(Истина, "ЕстьВалюта") <> Неопределено;
	
	// По операциям реализации (поступления)
	ПараметрыРаздела.НаАванс = Ложь;
	ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаРезультата, ПараметрыРаздела, ОбластиМакета);
	
	// По авансам полученным (выданным)
	ПараметрыРаздела.НаАванс = Истина;
	ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаРезультата, ПараметрыРаздела, ОбластиМакета);
	
	// Подвал
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Подвал);
	
	// Файл выгрузки (для выданных счетов-фактур)
	
	Если ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры
		И ПравоДоступа("Вывод", Метаданные) Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИННПоставщика"          , СведенияОбОрганизации.ИНН);
		СтруктураДанных.Вставить("КПППоставщика"          , СведенияОбОрганизации.КПП);
		СтруктураДанных.Вставить("ИННПокупателя"          , СведенияОКонтрагенте.ИНН);
		СтруктураДанных.Вставить("КПППокупателя"          , СведенияОКонтрагенте.КПП);
		СтруктураДанных.Вставить("НалоговыйПериод"        , НачалоКвартала(ПараметрыОтчета.НалоговыйПериод));
		СтруктураДанных.Вставить("ДатаФормирования"       , ДатаФормирования);
		СтруктураДанных.Вставить("ТаблицаДанных"          , ТаблицаРезультата);
		
		ПоместитьВоВременноеХранилище(РеестрСчетовФактурВXML(СтруктураДанных), ПараметрыОтчета.АдресХранилищаФайлаВыгрузки);
		
	КонецЕсли;
	
	// Результат - во временное хранилище
	
	Результат = Новый Структура("ИННПоставщика,ИННПокупателя,Реестр", 
		СведенияОбОрганизации.ИНН, СведенияОКонтрагенте.ИНН, ТабличныйДокумент);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Формирование отчета "Сверка счетов-фактур с поставщиками" по данным информационной базы
// (счетов-фактур полученных и документов "Реестр счетов-фактур поставщика").
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура параметров для отчета. Ключи структуры:
//    * Контрагент - СправочникСсылка.Контрагенты - поставщик, по которому формируется сверка
//                 (если передано пустое значение, сверка будет сформирована по всем поставщикам).
//    * Организация - СправочникСсылка.Организации - наша организация, по которой формируется сверка.
//    * НалоговыйПериод - Дата - начало налогового периода, за который был формируется сверка.
//  АдресХранилища  - Строка - адрес временного хранилища, в которое помещается или структура, содержащая
//                 или сформированные отчеты (все строки и только расхождения) и признак наличия расхождений,
//                 или описание возникшей ошибки.
//
Процедура СформироватьСверкуСчетовФактур(ПараметрыОтчета, АдресХранилища) Экспорт
	
	// Получаем данные для отчета
	
	Запрос = Новый Запрос;
	// Таблицы запроса:
	// 0 - временная таблица ВТ_Контрагенты,
	// 1 - временная таблица КонтрагентыДаты,
	// 2 - реквизиты поставщиков,
	// 3 - данные поставщиков из полученных реестров счетов-фактур,
	// 7 - наши данные из журнала полученных счетов-фактур.
	ТекстРазделителя = ";
		|
		|";
	
	ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
	Запрос.Текст = ТекстЗапросаРеквизитыПоставщиков() + ТекстРазделителя
		+ ТекстЗапросаРеестрыСчетовФактурПоставщиков() + ТекстРазделителя
		+ ТекстЗапросаРеестрСчетовФактурОрганизации(ЧастьЖурнала);
	
	СписокОрганизаций  = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	Запрос.УстановитьПараметр("Контрагент",         ПараметрыОтчета.Контрагент);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентовОтчета(ПараметрыОтчета.Контрагент));
	ПоВсемКонтрагентам = НЕ ЗначениеЗаполнено(ПараметрыОтчета.Контрагент);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", ПоВсемКонтрагентам);
	Запрос.УстановитьПараметр("НачалоКвартала",     НачалоКвартала(ПараметрыОтчета.НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецКвартала",      КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	Запрос.Параметры.Вставить("ВалютаРеглУчета",    Константы.ВалютаРегламентированногоУчета.Получить());
	КодыВидаОперацииНаАванс = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("02;05;12", ";");
	Запрос.Параметры.Вставить("КодыВидаОперацииНаАванс", КодыВидаОперацииНаАванс);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если НЕ ПоВсемКонтрагентам
		И Результаты[3].Пустой() Тогда
		ПоместитьВоВременноеХранилище(Новый Структура("ОписаниеОшибки", "РеестрНеЗагружен"), АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ТаблицаСверки = НоваяТаблицаСверкаСчетовФактур();
	// Добавляем наши данные
	ВыборкаНашиДанные = Результаты[7].Выбрать();
	Пока ВыборкаНашиДанные.Следующий() Цикл
		НоваяСтрока = ТаблицаСверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНашиДанные);
		НоваяСтрока.ИдентификаторКонтрагента = ВыборкаНашиДанные.Контрагент.УникальныйИдентификатор();
	КонецЦикла;
	// Запоминаем ссылки на счета-фактуры
	СчетаФактурыПолученные = Новый Соответствие;
	Для каждого СтрокаТаблицы Из ТаблицаСверки Цикл
		СчетаФактурыПолученные.Вставить(КлючСтрокиСчетаФактуры(СтрокаТаблицы), СтрокаТаблицы.СчетФактура);
	КонецЦикла;
	// Добавляем данные поставщиков
	ВыборкаДанныеПоставщиков = Результаты[3].Выбрать();
	Пока ВыборкаДанныеПоставщиков.Следующий() Цикл
		НоваяСтрока = ТаблицаСверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанныеПоставщиков);
		НоваяСтрока.ИдентификаторКонтрагента = ВыборкаДанныеПоставщиков.Контрагент.УникальныйИдентификатор();
	КонецЦикла;
	// Сворачиваем таблицу
	КолонкиГруппировок = "Контрагент,ИдентификаторКонтрагента,НаАванс,КодВалюты,"
		+ "НомерСчетаФактуры,ДатаСчетаФактуры,НомерИсправления,ДатаИсправления,"
		+ "НомерКорректировочногоСчетаФактуры,ДатаКорректировочногоСчетаФактуры,"
		+ "НомерИсправленияКорректировочногоСчетаФактуры,ДатаИсправленияКорректировочногоСчетаФактуры";
	КолонкиСуммирования = "СуммаДокумента,СуммаНДС,СуммаДокументаКонтрагента,СуммаНДСКонтрагента,"
		+ "СуммаДокументаРазницаУменьшение,СуммаДокументаРазницаУвеличение,"
		+ "СуммаДокументаРазницаУменьшениеКонтрагента,СуммаДокументаРазницаУвеличениеКонтрагента,"
		+ "СуммаНДСРазницаУменьшение,СуммаНДСРазницаУвеличение,"
		+ "СуммаНДСРазницаУменьшениеКонтрагента,СуммаНДСРазницаУвеличениеКонтрагента,"
		+ "ДанныеОрганизации,ДанныеКонтрагента";
	ТаблицаСверки.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	// Добавляем и заполняем доп.колонки, нужные для вывода отчета
	ПодготовитьТаблицуСчетовФактурДляВыводаОтчета(ТаблицаСверки);
	ТаблицаСверки.Колонки.Добавить("ОтличаютсяСуммы", Новый ОписаниеТипов("Булево"));
	ТаблицаСверки.Колонки.Добавить("СчетФактура",     Документы.ТипВсеСсылки());
	Для каждого СтрокаТаблицы Из ТаблицаСверки Цикл
		// Возвращаем значения поля СчетФактура из соответствия
		СтрокаТаблицы.СчетФактура = СчетаФактурыПолученные[КлючСтрокиСчетаФактуры(СтрокаТаблицы)];
		// Заполняем признак ОтличаютсяСуммы (между нашими данными и данными поставщика)
		СтрокаТаблицы.ОтличаютсяСуммы = СтрокаТаблицы.ДанныеОрганизации И СтрокаТаблицы.ДанныеКонтрагента
			И (СтрокаТаблицы.СуммаДокумента <> СтрокаТаблицы.СуммаДокументаКонтрагента
			ИЛИ СтрокаТаблицы.СуммаНДС <> СтрокаТаблицы.СуммаНДСКонтрагента
			ИЛИ СтрокаТаблицы.СуммаДокументаРазницаУменьшение <> СтрокаТаблицы.СуммаДокументаРазницаУменьшениеКонтрагента
			ИЛИ СтрокаТаблицы.СуммаДокументаРазницаУвеличение <> СтрокаТаблицы.СуммаДокументаРазницаУвеличениеКонтрагента
			ИЛИ СтрокаТаблицы.СуммаНДСРазницаУменьшение <> СтрокаТаблицы.СуммаНДСРазницаУменьшениеКонтрагента
			ИЛИ СтрокаТаблицы.СуммаНДСРазницаУвеличение <> СтрокаТаблицы.СуммаНДСРазницаУвеличениеКонтрагента);
	КонецЦикла;
	
	ТаблицаПоставщики = Результаты[2].Выгрузить();
	ТаблицаПоставщики.Колонки.Добавить("ЕстьРасхождения", Новый ОписаниеТипов("Булево"));
	ТаблицаПоставщики.Колонки.Добавить("СчетаФактуры");
	ТаблицаСверки.Индексы.Добавить("Контрагент");
	Для каждого СтрокаТаблицы Из ТаблицаПоставщики Цикл
		СтрокаТаблицы.СчетаФактуры = ТаблицаСверки.Скопировать(
			Новый Структура("Контрагент", СтрокаТаблицы.Контрагент));
		СтрокаТаблицы.ЕстьРасхождения = СтрокаТаблицы.ЕстьСверка 
			И (СтрокаТаблицы.СчетаФактуры.Найти(Ложь, "ДанныеОрганизации") <> Неопределено
			ИЛИ СтрокаТаблицы.СчетаФактуры.Найти(Ложь, "ДанныеКонтрагента") <> Неопределено
			ИЛИ СтрокаТаблицы.СчетаФактуры.Найти(Истина, "ОтличаютсяСуммы") <> Неопределено);
	КонецЦикла;
	
	ЕстьРасхождения = ТаблицаПоставщики.Найти(Истина, "ЕстьРасхождения") <> Неопределено;
		
	ТаблицаПоставщики.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	Для каждого СтрокаТаблицы Из ТаблицаПоставщики Цикл
		Если НЕ СтрокаТаблицы.ЕстьСверка Тогда
			СтрокаТаблицы.Результат = 2; // Поставщики, сверка по которым не проведена
		ИначеЕсли СтрокаТаблицы.ЕстьРасхождения Тогда
			СтрокаТаблицы.Результат = 1; // Поставщики с расхождениями при сверке
		Иначе
			СтрокаТаблицы.Результат = 3; // Поставщики без расхождений
		КонецЕсли;
	КонецЦикла;
	
	// Выводим отчет
	
	ТабличныеДокументы = Новый Структура;
	ТабличныеДокументы.Вставить("Сверка",      Новый ТабличныйДокумент);
	ТабличныеДокументы.Вставить("Расхождения", Новый ТабличныйДокумент);
	ОбластиМакета = ВсеОбластиМакета(Обработки.СверкаДанныхУчетаНДС.ПолучитьМакет("СверкаСчетовФактурСПоставщиками"));
	
	// Шапка
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	ПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(ПараметрыОтчета.НалоговыйПериод), 
		КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	ОбластиМакета.Шапка.Параметры.ЗаголовокОтчета = СтрШаблон(?(ПоВсемКонтрагентам,
			НСтр("ru='Сверка счетов-фактур с поставщиками%1 по состоянию на %2'"),
			НСтр("ru='Сверка счетов-фактур с поставщиком%1 по состоянию на %2'")),
		ПериодОтчета,
		Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
	ОбластиМакета.Шапка.Параметры.Организация = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбластиМакета.Шапка.Параметры.ИННКППОрганизации = "" + СведенияОбОрганизации.ИНН 
		+ ?(НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП), "", ("/" + СведенияОбОрганизации.КПП));
	ТабличныеДокументы.Сверка.Вывести(ОбластиМакета.Шапка);
	Если ЕстьРасхождения Тогда
		ТабличныеДокументы.Расхождения.Вывести(ОбластиМакета.Шапка);
	КонецЕсли;
	
	ПараметрыРаздела = Новый Структура("ЕстьВалюта,ЕстьСверка,ЕстьРасхождения,НаАванс");
	ПараметрыРаздела.ЕстьВалюта = ТаблицаСверки.Найти(Истина, "ЕстьВалюта") <> Неопределено;
	
	// Цикл по видам результатов сверки
	
	ЕстьПоставщикиБезРеестров = Ложь;
	
	Для Результат = 1 По 3 Цикл
		
		ПоставщикиПоРезультату = ТаблицаПоставщики.Скопировать(Новый Структура("Результат", Результат));
		Если ПоставщикиПоРезультату.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоВсемКонтрагентам Тогда
			// Выводим возможные виды результата сверки
			Если Результат = 1 Тогда
				ТекстРезультатСверки = НСтр("ru='Обнаружены расхождения данных поставщиков с нашими данными (%1)'");
			ИначеЕсли Результат = 2 Тогда
				ТекстРезультатСверки = НСтр("ru='Данные поставщиков отсутствуют. Сверка не проведена (%1)'");
				ЕстьПоставщикиБезРеестров = Истина;
			Иначе
				ТекстРезультатСверки = НСтр("ru='Данные поставщиков совпадают с нашими данными. Расхождений не обнаружено (%1)'");
			КонецЕсли;
			ОбластиМакета.РезультатСверки.Параметры.РезультатСверки = СтрШаблон(ТекстРезультатСверки,
				ПоставщикиПоРезультату.Количество());
			ТабличныеДокументы.Сверка.Вывести(ОбластиМакета.РезультатСверки);
			ПоставщикиПоРезультату.Сортировать("ПредставлениеКонтрагента");
			ТабличныеДокументы.Сверка.НачатьГруппуСтрок(, Ложь);
		КонецЕсли;
		
		Для каждого СтрокаПоставщика Из ПоставщикиПоРезультату Цикл
		
			// Шапка по поставщику
			ОбластиМакета.Поставщик.Параметры.Контрагент = СтрокаПоставщика.Контрагент;
			ОбластиМакета.Поставщик.Параметры.НаименованиеКонтрагента = СтрокаПоставщика.НаименованиеКонтрагента;
			ОбластиМакета.Поставщик.Параметры.ИННКППКонтрагента       = "" + СтрокаПоставщика.ИННКонтрагента
				+ ?(НЕ ЗначениеЗаполнено(СтрокаПоставщика.КППКонтрагента), "", ("/" + СтрокаПоставщика.КППКонтрагента));
			Если Результат = 1 Тогда
				АктуальностьДанныхКонтрагента = СтрШаблон(НСтр("ru='Обнаружены расхождения данных поставщика на %1 с нашими данными.'"),
					Формат(СтрокаПоставщика.ДатаФормирования, "ДЛФ=D"));
			ИначеЕсли Результат = 2 Тогда
				АктуальностьДанныхКонтрагента = НСтр("ru='Данные поставщика отсутствуют. Сверка не проведена.'");
			Иначе
				АктуальностьДанныхКонтрагента = СтрШаблон(
					НСтр("ru='Данные поставщика на %1 совпадают с нашими данными. Расхождений не обнаружено.'"),
					Формат(СтрокаПоставщика.ДатаФормирования, "ДЛФ=D"));
			КонецЕсли;
			ОбластиМакета.Поставщик.Параметры.АктуальностьДанныхКонтрагента = АктуальностьДанныхКонтрагента;
			ТабличныеДокументы.Сверка.Вывести(ОбластиМакета.Поставщик);
			Если СтрокаПоставщика.ЕстьСверка И СтрокаПоставщика.ЕстьРасхождения Тогда
				ТабличныеДокументы.Расхождения.Вывести(ОбластиМакета.Поставщик);
			КонецЕсли;
			
			// Счета-фактуры по поставщику
			ПараметрыРаздела.ЕстьСверка      = СтрокаПоставщика.ЕстьСверка;
			ПараметрыРаздела.ЕстьРасхождения = СтрокаПоставщика.ЕстьРасхождения;
			Если ПоВсемКонтрагентам Тогда
				ТабличныеДокументы.Сверка.НачатьГруппуСтрок(, Ложь);
				Если СтрокаПоставщика.ЕстьСверка И СтрокаПоставщика.ЕстьРасхождения Тогда
					ТабличныеДокументы.Расхождения.НачатьГруппуСтрок(, Ложь);
				КонецЕсли;
			КонецЕсли;
			// Счета-фактуры по операциям поступления
			ПараметрыРаздела.НаАванс = Ложь;
			ВывестиРазделСверки(ТабличныеДокументы, СтрокаПоставщика.СчетаФактуры, ПараметрыРаздела, ОбластиМакета);
			// Счета-фактуры по авансам
			ПараметрыРаздела.НаАванс = Истина;
			ВывестиРазделСверки(ТабличныеДокументы, СтрокаПоставщика.СчетаФактуры, ПараметрыРаздела, ОбластиМакета);
			Если ПоВсемКонтрагентам Тогда
				ТабличныеДокументы.Сверка.ЗакончитьГруппуСтрок();
				Если СтрокаПоставщика.ЕстьСверка И СтрокаПоставщика.ЕстьРасхождения Тогда
					ТабличныеДокументы.Расхождения.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	
		Если ПоВсемКонтрагентам Тогда
			ТабличныеДокументы.Сверка.ЗакончитьГруппуСтрок();
		КонецЕсли;
		
	КонецЦикла;
	
	// Подвал. По расхождениям не выводим
	ТабличныеДокументы.Сверка.Вывести(ОбластиМакета.Подвал);
	
	// Строки документа с расхождениями цветом не выделяем
	ТабличныеДокументы.Расхождения.Область().ЦветФона = Новый Цвет;
	
	// Результат - во временное хранилище
	
	Результат = Новый Структура;
	Результат.Вставить("Сверка",                    ТабличныеДокументы.Сверка);
	Результат.Вставить("ЕстьРасхождения",           ЕстьРасхождения);
	Результат.Вставить("Расхождения",               ТабличныеДокументы.Расхождения);
	Результат.Вставить("ЕстьПоставщикиБезРеестров", ЕстьПоставщикиБезРеестров);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Возвращает реквизиты реестра счетов-фактур, полученного от поставщика в формате XML.
//
// Параметры:
//  ДвоичныеДанныеКонтрагента - ДвоичныеДанные - данные файла XML.
//  ВключатьДанныеТаблицы - Булево - возвращать ли таблицу с данными счетов-фактур или только реквизиты шапки реестра.
//
// Возвращаемое значение:
//   Структура   - реквизиты полученного реестра счетов-фактур.
//
Функция РеквизитыРеестраСчетовФактур(ДвоичныеДанныеКонтрагента, ВключатьДанныеТаблицы = Ложь) Экспорт

	ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеКонтрагента.Записать(ИмяФайлаXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
	ОписаниеОшибки = "";
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОписаниеОшибки = НСтр("ru='Ошибка при чтении выбранного файла (подробнее см. Журнал регистрации)'");
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяФайлаXML);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ПространствоИмен = "http://www.v8.1c.ru/NDS/ReestrSF";
	ТипРеестр = ФабрикаXDTO.Тип(ПространствоИмен, "Реестр");
	Если ОбъектXDTO = Неопределено ИЛИ ОбъектXDTO.Тип() <> ТипРеестр Тогда
		ОписаниеОшибки = НСтр("ru='Выбранный файл не содержит информацию о реестре счетов-фактур.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИННПоставщика");
	Результат.Вставить("КПППоставщика");
	Результат.Вставить("ИННПокупателя");
	Результат.Вставить("КПППокупателя");
	Результат.Вставить("НалоговыйПериод");
	Результат.Вставить("ДатаФормирования");
	ЗаполнитьЗначенияСвойств(Результат, ОбъектXDTO);
	
	Если ВключатьДанныеТаблицы Тогда
		ТаблицаРеестра = НоваяТаблицаРеестрСчетовФактур();
		Для каждого СтрокаСчетаФактуры Из ОбъектXDTO.СчетФактура Цикл
			НоваяСтрока = ТаблицаРеестра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетаФактуры);
			НоваяСтрока.НомерСчетаФактуры                             = СокрЛП(НоваяСтрока.НомерСчетаФактуры);
			НоваяСтрока.НомерИсправления                              = СокрЛП(НоваяСтрока.НомерИсправления);
			НоваяСтрока.НомерКорректировочногоСчетаФактуры            = СокрЛП(НоваяСтрока.НомерКорректировочногоСчетаФактуры);
			НоваяСтрока.НомерИсправленияКорректировочногоСчетаФактуры =
				СокрЛП(НоваяСтрока.НомерИсправленияКорректировочногоСчетаФактуры);
		КонецЦикла;
		Результат.Вставить("СчетаФактуры", ТаблицаРеестра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует XML документ c параметрами запроса реестра счетов-фактур поставщика.
//
// Параметры:
//  Параметры - Структура - Параметры для формирования запроса реестра.
//       Ключи структуры см. Обработки.СверкаДанныхУчетаНДС.ПараметрыЗапросаРеестра().
//
// Возвращаемое значение:
//  Соответствие - описание файла, ключ и значение:
//    * ИмяФайла - Строка - имя файла.
//    * ДвоичныеДанные - ДвоичныеДанные - двоичные данные XML файла запроса реестра.
//
Функция ЗапросРеестраСчетовФактур(Параметры) Экспорт
	
	ПространствоИмен = "http://www.v8.1c.ru/NDS/ReestrSFRequest";
	
	ЗапросПоставщику = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Запрос"));
	
	ЗаполнитьЗначенияСвойств(ЗапросПоставщику, Параметры);
	
	XMLДокумент = ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ЗапросПоставщику);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(XMLДокумент);
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент.Записать(ИмяФайлаXML, КодировкаТекста.UTF8);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаXML);
	
	Попытка
		УдалитьФайлы(ИмяФайлаXML);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ШаблонИмениФайла = НСтр("ru='Запрос реестра счетов-фактур за %1 для %2 от %3'");
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(Параметры.НалоговыйПериод),
		КонецКвартала(Параметры.НалоговыйПериод),
		Истина);
	ИмяФайла = СтрШаблон(ШаблонИмениФайла,
		ПредставлениеПериода,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Контрагент, "НаименованиеПолное"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация, "НаименованиеСокращенное"));
		
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	Если Прав(ИмяФайла, 1) = "." Тогда
		ИмяФайла = ИмяФайла + "xml";
	Иначе
		ИмяФайла = ИмяФайла + ".xml";
	КонецЕсли;
	
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить(ИмяФайла, ДвоичныеДанные);
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Формирует реестр выданных счетов-фактур в XML.
//
// Параметры:
//  Параметры - Структура - Параметры для формирования запроса реестра.
//       Ключи структуры см. Обработки.СверкаДанныхУчетаНДС.ПараметрыРеестра().
//
// Возвращаемое значение:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные XML файла реестра счетов-фактур выданных.
//
Функция РеестрСчетовФактурВXML(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("ТаблицаДанных") ИЛИ Параметры.ТаблицаДанных = Неопределено Тогда
		// получение таблицы счетов-фактур
		ТаблицаРеестраСчетовФактур = ПодготовитьТаблицуРеестраСчетовФактур(Параметры);
		Параметры.Вставить("ТаблицаДанных"   , ТаблицаРеестраСчетовФактур);
		Параметры.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	// Формирование файла XML
	XMLДокумент = ТекстXMLДляВыгрузкиОтчета(Параметры);
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(XMLДокумент);
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент.Записать(ИмяФайлаXML, КодировкаТекста.UTF8);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаXML);
	
	Попытка
		УдалитьФайлы(ИмяФайлаXML);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Десериализует реестры счетов-фактур и запросы реестров счетов-фактур в таблицы значений для последующей загрузки
// в регистр СтатусыЗапросовРеестровСчетовФактур.
//
// Параметры:
//  Письма - ТаблицаЗначений - Письма с реестрами и запросами.
//           Состав колонок таблицы см. ЗагрузкаПочтовыхСообщений.СоздатьАдаптированноеОписаниеПисьма().
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * ОписаниеОшибок - ТаблицаЗначений - таблица с описание ошибок возникших при загрузки реестров.
//            Состав колонок см. НоваяТаблицаОписанияОшибок().
//    * ТаблицаЗапросовРеестров - ТаблицаЗначений - данные запросов реестров от покупателей.
//            Состав колонок см. НоваяТаблицаРеквизитовРеестров().
//    * ТаблицаРеестров - ТаблицаЗначений - данные реестров поставщиков.
//            Состав колонок см. НоваяТаблицаРеквизитовРеестров().
//
Функция ТаблицыДанныхРеестров(Письма) Экспорт
	
	Результат = Новый Структура;
	
	ОписаниеОшибок = НоваяТаблицаОписанияОшибок();
	ТаблицаЗапросовРеестров = НоваяТаблицаРеквизитовРеестров();
	ТаблицаРеестров         = НоваяТаблицаРеквизитовРеестров();
	
	ПространствоИменРеестр = "http://www.v8.1c.ru/NDS/ReestrSF";
	ТипРеестр = ФабрикаXDTO.Тип(ПространствоИменРеестр, "Реестр");
	
	ПространствоИменЗапросРеестра = "http://www.v8.1c.ru/NDS/ReestrSFRequest";
	ТипЗапросРеестра = ФабрикаXDTO.Тип(ПространствоИменЗапросРеестра, "Запрос");
	
	ТекущийПрогресс = 0;
	Отправлено      = 0;
	ВсегоЗаписей    = Письма.Количество();
	
	Для Каждого Письмо Из Письма Цикл
		
		ТекущийПрогресс = ТекущийПрогресс + 1;
		Выполнено = Окр(ТекущийПрогресс / ВсегоЗаписей * 100);
		ДлительныеОперации.СообщитьПрогресс(Выполнено, НСтр("ru='Анализ почтовых сообщений'"));
		
		ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
		Письмо.ДанныеXML.Записать(ИмяФайлаXML);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		ЧтениеXML.Закрыть();
		
		Попытка
			УдалитьФайлы(ИмяФайлаXML);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЗаписиЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ОбъектXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектXDTO.Тип() = ТипЗапросРеестра Тогда
			РеквизитыЗапросаРеестраСчетовФактур(ОбъектXDTO, ТаблицаЗапросовРеестров, Письмо);
			Продолжить;
		КонецЕсли;
		
		Если ОбъектXDTO.Тип() = ТипРеестр Тогда
			РеквизитыСчетаФактуры(ОбъектXDTO, ТаблицаРеестров, Письмо);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьТаблицуЗапросов(ТаблицаЗапросовРеестров, ОписаниеОшибок, Письма);
	ДополнитьТаблицуРеестров(ТаблицаРеестров, ОписаниеОшибок, Письма);
	
	Результат.Вставить("ОписаниеОшибок"         , ОписаниеОшибок);
	Результат.Вставить("ТаблицаЗапросовРеестров", ТаблицаЗапросовРеестров);
	Результат.Вставить("ТаблицаРеестров"        , ТаблицаРеестров);
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя события для записи в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЗаписиЖурналаРегистрации() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Возврат НСтр("ru = 'Сверка данных учета НДС'", КодОсновногоЯзыка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиРазделСверки(ТабличныеДокументы, ТаблицаПоПоставщику, ПараметрыРаздела, ОбластиМакета)

	// Определяем области макета для вывода
	
	ЕстьВалюта = ПараметрыРаздела.ЕстьВалюта;
	НаАванс    = ПараметрыРаздела.НаАванс;
	ЕстьСверка = ПараметрыРаздела.ЕстьСверка;
	ЕстьРасхождения = ПараметрыРаздела.ЕстьРасхождения;
	
	ИмяОбластиШапка     = "ШапкаРаздела" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиЗаголовок = "Заголовок" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиСтрока    = "Строка" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиИтогиНаши = "ИтогиНаши" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиИтогиПоставщика  = "ИтогиПоставщика" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиШапкаРасхождения = ?(ПараметрыРаздела.ЕстьСверка, ИмяОбластиШапка + "Расхождения", ИмяОбластиШапка);
		
	// Шапка раздела
	
	ТабличныеДокументы.Сверка.Вывести(ОбластиМакета[ИмяОбластиШапка]);
	ТабличныеДокументы.Сверка.Вывести(ОбластиМакета[ИмяОбластиЗаголовок]);
	Если ЕстьСверка И ЕстьРасхождения Тогда
		ТабличныеДокументы.Расхождения.Вывести(ОбластиМакета[ИмяОбластиШапкаРасхождения]);
		ТабличныеДокументы.Расхождения.Вывести(ОбластиМакета[ИмяОбластиЗаголовок]);
	КонецЕсли;
	
	// Строки раздела
	
	ТаблицаРаздела = ТаблицаПоПоставщику.Скопировать(Новый Структура("НаАванс", НаАванс));
	ТаблицаРаздела.Сортировать("ДатаДокумента,НомерДокумента");
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ТаблицаРаздела Цикл
	
		Если НЕ ПараметрыРаздела.ЕстьСверка Тогда
			ОбластьСтрока = ОбластиМакета[ИмяОбластиСтрока + "БезСверки"];
		ИначеЕсли СтрокаТаблицы.ОтличаютсяСуммы Тогда
			ОбластьСтрока = ОбластиМакета[ИмяОбластиСтрока + "ОтличаютсяСуммы"];
		ИначеЕсли НЕ СтрокаТаблицы.ДанныеКонтрагента Тогда
			ОбластьСтрока = ОбластиМакета[ИмяОбластиСтрока + "НетПоДаннымКонтрагента"];
		ИначеЕсли НЕ СтрокаТаблицы.ДанныеОрганизации Тогда
			ОбластьСтрока = ОбластиМакета[ИмяОбластиСтрока + "НетПоНашимДанным"];
		Иначе
			ОбластьСтрока = ОбластиМакета[ИмяОбластиСтрока];
		КонецЕсли;
		ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьСтрока.Параметры.Ном = НомерСтроки;
		ТабличныеДокументы.Сверка.Вывести(ОбластьСтрока);
		ЕстьРасхождение = СтрокаТаблицы.ОтличаютсяСуммы 
			ИЛИ НЕ СтрокаТаблицы.ДанныеКонтрагента 
			ИЛИ НЕ СтрокаТаблицы.ДанныеОрганизации;
		Если ЕстьСверка И ЕстьРасхождение Тогда
			ТабличныеДокументы.Расхождения.Вывести(ОбластьСтрока);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	
	КонецЦикла;
	
	// Итоги по разделу - только если все счета-фактуры в одной валюте. Итоги по расхождениям не выводим.
	
	Если ЕстьВалюта Тогда
		КодыВалют = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРаздела, "КодВалюты", Истина);
		ВыводитьИтоги = КодыВалют.Количество() < 2;
	Иначе
		ВыводитьИтоги = Истина;
	КонецЕсли;
	Если ВыводитьИтоги Тогда
		ОбластьИтогиНаши = ОбластиМакета[ИмяОбластиИтогиНаши];
		ОбластьИтогиНаши.Параметры.СуммаДокумента = ТаблицаРаздела.Итог("СуммаДокумента");
		ОбластьИтогиНаши.Параметры.СуммаНДС       = ТаблицаРаздела.Итог("СуммаНДС");
		Если НЕ НаАванс Тогда
			ОбластьИтогиНаши.Параметры.СуммаДокументаРазницаУменьшение = ТаблицаРаздела.Итог(
				"СуммаДокументаРазницаУменьшение");
			ОбластьИтогиНаши.Параметры.СуммаДокументаРазницаУвеличение = ТаблицаРаздела.Итог(
				"СуммаДокументаРазницаУвеличение");
			ОбластьИтогиНаши.Параметры.СуммаНДСРазницаУменьшение = ТаблицаРаздела.Итог(
				"СуммаНДСРазницаУменьшение");
			ОбластьИтогиНаши.Параметры.СуммаНДСРазницаУвеличение = ТаблицаРаздела.Итог(
				"СуммаНДСРазницаУвеличение");
		КонецЕсли;
		ТабличныеДокументы.Сверка.Вывести(ОбластьИтогиНаши);
		Если ЕстьСверка Тогда
			ОбластьИтогиПоставщика = ОбластиМакета[ИмяОбластиИтогиПоставщика];
			ОбластьИтогиПоставщика.Параметры.СуммаДокументаКонтрагента = ТаблицаРаздела.Итог("СуммаДокументаКонтрагента");
			ОбластьИтогиПоставщика.Параметры.СуммаНДСКонтрагента       = ТаблицаРаздела.Итог("СуммаНДСКонтрагента");
			Если НЕ НаАванс Тогда
				ОбластьИтогиПоставщика.Параметры.СуммаДокументаРазницаУменьшениеКонтрагента = ТаблицаРаздела.Итог(
					"СуммаДокументаРазницаУменьшениеКонтрагента");
				ОбластьИтогиПоставщика.Параметры.СуммаДокументаРазницаУвеличениеКонтрагента = ТаблицаРаздела.Итог(
					"СуммаДокументаРазницаУвеличениеКонтрагента");
				ОбластьИтогиПоставщика.Параметры.СуммаНДСРазницаУменьшениеКонтрагента = ТаблицаРаздела.Итог(
					"СуммаНДСРазницаУменьшениеКонтрагента");
				ОбластьИтогиПоставщика.Параметры.СуммаНДСРазницаУвеличениеКонтрагента = ТаблицаРаздела.Итог(
					"СуммаНДСРазницаУвеличениеКонтрагента");
			КонецЕсли;
			ТабличныеДокументы.Сверка.Вывести(ОбластьИтогиПоставщика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаДанных, ПараметрыРаздела, ОбластиМакета)
	
	НаАванс    = ПараметрыРаздела.НаАванс;
	ЕстьВалюта = ПараметрыРаздела.ЕстьВалюта;
	
	Отбор = Новый Структура("НаАванс", НаАванс);
	ТаблицаРаздела = ТаблицаДанных.Скопировать(Отбор);
	ТаблицаРаздела.Сортировать("ДатаДокумента,НомерДокумента");
	
	ИмяОбластиЗаголовок = "Заголовок" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиСтрока    = "Строка" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиИтоги     = "Итоги" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ОбластьЗаголовок = ОбластиМакета[ИмяОбластиЗаголовок];
	ОбластьСтрока    = ОбластиМакета[ИмяОбластиСтрока];
	ОбластьИтоги     = ОбластиМакета[ИмяОбластиИтоги];
	
	// Заголовок
	Если НаАванс Тогда
		ОбластьЗаголовок.Параметры.ЗаголовокРаздела =
			?(ПараметрыРаздела.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
				НСтр("ru='Счета-фактуры по авансам, полученным от покупателя'"),
				НСтр("ru='Счета-фактуры по авансам, выданным поставщику'"));
	Иначе
		ОбластьЗаголовок.Параметры.ЗаголовокРаздела = 
			?(ПараметрыРаздела.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
				НСтр("ru='Счета-фактуры по операциям реализации покупателю'"),
				НСтр("ru='Счета-фактуры по операциям поступления от поставщика'"));
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Строки
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ТаблицаРаздела Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьСтрока.Параметры.Ном = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Итоги по разделу - только если все счета-фактуры в одной валюте.
	Если ЕстьВалюта Тогда
		КодыВалют = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРаздела, "КодВалюты", Истина);
		ВыводитьИтоги = КодыВалют.Количество() < 2;
	Иначе
		ВыводитьИтоги = Истина;
	КонецЕсли;
	Если ВыводитьИтоги Тогда
		ОбластьИтоги.Параметры.СуммаДокумента = ТаблицаРаздела.Итог("СуммаДокумента");
		ОбластьИтоги.Параметры.СуммаНДС       = ТаблицаРаздела.Итог("СуммаНДС");
		Если НЕ НаАванс Тогда
			ОбластьИтоги.Параметры.СуммаДокументаРазницаУменьшение = ТаблицаРаздела.Итог("СуммаДокументаРазницаУменьшение");
			ОбластьИтоги.Параметры.СуммаДокументаРазницаУвеличение = ТаблицаРаздела.Итог("СуммаДокументаРазницаУвеличение");
			ОбластьИтоги.Параметры.СуммаНДСРазницаУменьшение = ТаблицаРаздела.Итог("СуммаНДСРазницаУменьшение");
			ОбластьИтоги.Параметры.СуммаНДСРазницаУвеличение = ТаблицаРаздела.Итог("СуммаНДСРазницаУвеличение");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьИтоги);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуРеестраСчетовФактур(Параметры)
	
	ТаблицаРезультата = НоваяТаблицаРеестрСчетовФактур();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеестрСчетовФактурОрганизации(Параметры.ЧастьЖурнала);
	
	СписокОрганизаций  = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Параметры.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	Запрос.УстановитьПараметр("Контрагент",         Параметры.Контрагент);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентовОтчета(Параметры.Контрагент));
	ПоВсемКонтрагентам = НЕ ЗначениеЗаполнено(Параметры.Контрагент);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", ПоВсемКонтрагентам);
	Запрос.УстановитьПараметр("НачалоКвартала",     НачалоКвартала(Параметры.НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецКвартала",      КонецКвартала(Параметры.НалоговыйПериод));
	Запрос.Параметры.Вставить("ВалютаРеглУчета",    Константы.ВалютаРегламентированногоУчета.Получить());
	КодыВидаОперацииНаАванс = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("02;05;12", ";");
	Запрос.Параметры.Вставить("КодыВидаОперацииНаАванс", КодыВидаОперацииНаАванс);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ПодготовитьТаблицуСчетовФактурДляВыводаОтчета(ТаблицаРезультата);
	ТаблицаРезультата.Сортировать("ДатаДокумента,НомерДокумента");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ПодготовитьТаблицуСчетовФактурДляВыводаОтчета(ТаблицаСчетовФактур)
	
	ТаблицаСчетовФактур.Колонки.Добавить("ЕстьИсправления", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетовФактур.Колонки.Добавить("ЕстьВалюта",      Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
		СтрокаТаблицы.ЕстьИсправления = ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправления)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры);
		СтрокаТаблицы.ЕстьВалюта = СтрокаТаблицы.КодВалюты <> "643";
	КонецЦикла;
	
	ЕстьИсправления = ТаблицаСчетовФактур.Найти(Истина, "ЕстьИсправления") <> Неопределено;
	ЕстьВалюта      = ТаблицаСчетовФактур.Найти(Истина, "ЕстьВалюта") <> Неопределено;
	
	ТаблицаСчетовФактур.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетовФактур.Колонки.Добавить("ДатаДокумента",  Новый ОписаниеТипов("Дата"));
	Если ЕстьИсправления Тогда
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаИсправления",   Новый ОписаниеТипов("Строка"));
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаКорректировки", Новый ОписаниеТипов("Строка"));
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаИсправленияКорректировки", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ЕстьВалюта Тогда
		ТаблицаСчетовФактур.Колонки.Добавить("НаименованиеКодВалюты",  Новый ОписаниеТипов("Строка"));
		НаименованияВалют = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
		
		СтрокаТаблицы.ДатаДокумента  = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.НомерДокумента = СтрокаТаблицы.НомерСчетаФактуры;
		Если ЕстьИсправления Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправления) Тогда
				СтрокаТаблицы.НомерДатаИсправления = СтрокаТаблицы.НомерИсправления + ";" 
					+ Формат(СтрокаТаблицы.ДатаИсправления, "ДЛФ=D");
			КонецЕсли;
			Если СтрокаТаблицы.НаАванс Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправления) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправления;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправления) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправления;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДокумента = СтрокаТаблицы.НомерКорректировочногоСчетаФактуры;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДатаКорректировки = СтрокаТаблицы.НомерКорректировочногоСчетаФактуры + ";" 
						+ Формат(СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры, "ДЛФ=D");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправленияКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДатаИсправленияКорректировки = СтрокаТаблицы.НомерИсправленияКорректировочногоСчетаФактуры + ";"
						+ Формат(СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры, "ДЛФ=D");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЕстьВалюта
			И ЗначениеЗаполнено(СтрокаТаблицы.КодВалюты) Тогда
			НаименованиеВалюты = НаименованияВалют[СтрокаТаблицы.КодВалюты];
			Если НаименованиеВалюты = Неопределено Тогда
				НаименованиеВалюты = Строка(Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.КодВалюты));
				НаименованияВалют.Вставить(СтрокаТаблицы.КодВалюты, НаименованиеВалюты);
			КонецЕсли;
			СтрокаТаблицы.НаименованиеКодВалюты = НаименованиеВалюты + ";" + СтрокаТаблицы.КодВалюты;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокКонтрагентовОтчета(ВыбранныйКонтрагент)

	Если НЕ ЗначениеЗаполнено(ВыбранныйКонтрагент) Тогда
		Результат = Новый Массив;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Ссылка = &Контрагент
		|			ИЛИ Контрагенты.ГоловнойКонтрагент = &Контрагент)";
		Запрос.УстановитьПараметр("Контрагент", ВыбранныйКонтрагент);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаРеестрСчетовФактур()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерИсправления",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаИсправления",   Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаКорректировочногоСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КодВалюты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДС",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("НаАванс",     Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	
	Возврат Результат;
	
КонецФункции 

Функция НоваяТаблицаСверкаСчетовФактур()

	Результат = НоваяТаблицаРеестрСчетовФактур();
	
	Результат.Колонки.Добавить("Контрагент"              , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("ИдентификаторКонтрагента", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДанныеОрганизации"       , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДанныеКонтрагента"       , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СуммаДокументаКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУменьшениеКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУвеличениеКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУменьшениеКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУвеличениеКонтрагента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат Результат;
	
КонецФункции 

Функция ТекстXMLДляВыгрузкиОтчета(СтруктураДанных)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ИННПоставщика)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.ИННПокупателя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПространствоИмен = "http://www.v8.1c.ru/NDS/ReestrSF";
	
	Реестр = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Реестр"));
	
	ЗаполнитьЗначенияСвойств(Реестр, СтруктураДанных);
	
	Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаДанных Цикл
		СтрокаСчетаФактуры = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "СтрокаСчетаФактуры"));
		Если СтрокаТаблицы.ЕстьИсправления Тогда
			Если СтрокаТаблицы.НаАванс Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы,
					"НомерСчетаФактуры,ДатаСчетаФактуры,НомерИсправления,ДатаИсправления,КодВалюты,СуммаДокумента,СуммаНДС,НаАванс");
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы,
				"НомерСчетаФактуры,ДатаСчетаФактуры,КодВалюты,СуммаДокумента,СуммаНДС,НаАванс");
		КонецЕсли;
		Реестр.СчетФактура.Добавить(СтрокаСчетаФактуры);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ОбъектXDTOВСтрокуXML(Реестр);

КонецФункции

Функция ТекстЗапросаРеестрСчетовФактурОрганизации(ЧастьЖурнала)
	
	Результат = "";
	Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
		Результат = ТекстЗапросаРеестрСчетовФактурПолученныхОрганизацией();
	ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
		Результат = ТекстЗапросаРеестрСчетовФактурВыданныхОрганизацией();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеквизитыПоставщиков()
	
	Результат =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаФормирования
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ПоВсемКонтрагентам
	|	И ЖурналУчетаСчетовФактур.Организация В(&СписокОрганизаций)
	|	И ЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|	И ЖурналУчетаСчетовФактур.Период >= &НачалоКвартала
	|	И ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ МЕЖДУ &НачалоКвартала И &КонецКвартала
	|	И ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА РеестрСчетовФактурПоставщика.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ,
	|	МАКСИМУМ(РеестрСчетовФактурПоставщика.Дата)
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика КАК РеестрСчетовФактурПоставщика
	|ГДЕ
	|	(&ПоВсемКонтрагентам
	|			ИЛИ РеестрСчетовФактурПоставщика.Ссылка.Контрагент В (&СписокКонтрагентов))
	|	И РеестрСчетовФактурПоставщика.Организация В(&СписокОрганизаций)
	|	И РеестрСчетовФактурПоставщика.НалоговыйПериод = &НачалоКвартала
	|	И НЕ РеестрСчетовФактурПоставщика.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА РеестрСчетовФактурПоставщика.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Контрагент,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ГДЕ
	|	НЕ &ПоВсемКонтрагентам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Контрагенты.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВТ_Контрагенты.ДатаФормирования) КАК ДатаФормирования
	|ПОМЕСТИТЬ КонтрагентыДаты
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Контрагенты.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыДаты.Контрагент КАК Контрагент,
	|	КонтрагентыДаты.ДатаФормирования КАК ДатаФормирования,
	|	ВЫБОР
	|		КОГДА КонтрагентыДаты.ДатаФормирования <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСверка,
	|	Контрагенты.Наименование КАК ПредставлениеКонтрагента,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеКонтрагента,
	|	Контрагенты.ИНН КАК ИННКонтрагента,
	|	Контрагенты.КПП КАК КППКонтрагента
	|ИЗ
	|	КонтрагентыДаты КАК КонтрагентыДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтрагентыДаты.Контрагент = Контрагенты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеКонтрагента";
	
	Возврат Результат;
	
КонецФункции 

Функция ТекстЗапросаРеестрыСчетовФактурПоставщиков()
	
	Результат =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ТаблицаСчетаФактуры.Ссылка.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ТаблицаСчетаФактуры.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактуры.НомерСчетаФактуры,
	|	ТаблицаСчетаФактуры.ДатаИсправления,
	|	ТаблицаСчетаФактуры.НомерИсправления,
	|	ТаблицаСчетаФактуры.ДатаКорректировочногоСчетаФактуры,
	|	ТаблицаСчетаФактуры.НомерКорректировочногоСчетаФактуры,
	|	ТаблицаСчетаФактуры.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ТаблицаСчетаФактуры.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ТаблицаСчетаФактуры.НаАванс,
	|	ТаблицаСчетаФактуры.КодВалюты,
	|	ИСТИНА КАК ДанныеКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаДокумента КАК СуммаДокументаКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаНДС КАК СуммаНДСКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаДокументаРазницаУвеличение КАК СуммаДокументаРазницаУвеличениеКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаДокументаРазницаУменьшение КАК СуммаДокументаРазницаУменьшениеКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличениеКонтрагента,
	|	ТаблицаСчетаФактуры.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшениеКонтрагента
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика.СчетаФактуры КАК ТаблицаСчетаФактуры
	|ГДЕ
	|	(&ПоВсемКонтрагентам
	|			ИЛИ ТаблицаСчетаФактуры.Ссылка.Контрагент В (&СписокКонтрагентов))
	|	И ТаблицаСчетаФактуры.Ссылка.Организация В(&СписокОрганизаций)
	|	И ТаблицаСчетаФактуры.Ссылка.НалоговыйПериод = &НачалоКвартала
	|	И НЕ ТаблицаСчетаФактуры.Ссылка.ПометкаУдаления";
	
	Возврат Результат;
	
КонецФункции 

Функция ВсеОбластиМакета(Макет)
	
	Результат = Новый Структура;
	Для каждого Область Из Макет.Области Цикл
		Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
	КонецЦикла;
	Возврат Результат;

КонецФункции 

Функция КлючСтрокиСчетаФактуры(СтрокаСчетаФактуры)
	
	Результат = СтрокаСчетаФактуры.НомерСчетаФактуры + СтрокаСчетаФактуры.ДатаСчетаФактуры + ";"
		+ СтрокаСчетаФактуры.НомерИсправления + СтрокаСчетаФактуры.ДатаИсправления + ";"
		+ СтрокаСчетаФактуры.НомерКорректировочногоСчетаФактуры + СтрокаСчетаФактуры.ДатаКорректировочногоСчетаФактуры + ";"
		+ СтрокаСчетаФактуры.НомерИсправленияКорректировочногоСчетаФактуры 
		+ СтрокаСчетаФактуры.ДатаИсправленияКорректировочногоСчетаФактуры + ";"
		+ СтрокаСчетаФактуры.КодВалюты + ";" + Строка(СтрокаСчетаФактуры.Контрагент.УникальныйИдентификатор()) + ";";
	
	Возврат Результат;
	
КонецФункции 

Функция НоваяТаблицаОписанияОшибок()
	
	ОписаниеОшибок = Новый ТаблицаЗначений;
	ОписаниеОшибок.Колонки.Добавить("ДатаПисьма"      , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ОписаниеОшибок.Колонки.Добавить("ЭлектроннаяПочта", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписаниеОшибок.Колонки.Добавить("Контрагент"      , ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ОписаниеОшибок.Колонки.Добавить("Описание"        , ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОписаниеОшибок.Колонки.Добавить("Контекст"        , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗапросовРеестровСчетовФактур"));
	
	Возврат ОписаниеОшибок;
	
КонецФункции

Функция НоваяТаблицаРеквизитовРеестров()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Результат.Колонки.Добавить("ДатаФормирования", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ДатаЗаписи", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ДатаЗапроса", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("ЭлектроннаяПочта", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ТипЗапроса", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗапросовРеестровСчетовФактур"));
	Результат.Колонки.Добавить("СтатусЗапроса", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРеестровСчетовФактур"));
	Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("ИдентификаторПочтовогоСообщения", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ДанныеРеестра");
	Результат.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПредставлениеПоставщика", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИННПоставщика", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("КПППоставщика", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ПредставлениеПокупателя", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИННПокупателя", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(12, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("КПППокупателя", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаЗагруженныхРеестров()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Реестр"          , Новый ОписаниеТипов("ДокументСсылка.РеестрСчетовФактурПоставщика"));
	Результат.Колонки.Добавить("Контрагент"      , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("Организация"     , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("ДатаФормирования", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Результат.Индексы.Добавить("Организация, Контрагент");
	
	Возврат Результат;
	
КонецФункции

Процедура РеквизитыЗапросаРеестраСчетовФактур(ОбъектXDTO, ТаблицаЗапросовРеестров, Письмо)
	
	Результат = ТаблицаЗапросовРеестров.Добавить();
	ЗаполнитьОбщиеРеквизитыРеестра(Результат, ОбъектXDTO, Письмо);
	
	Результат.ТипЗапроса                      = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя;
	Результат.СтатусЗапроса                   = Перечисления.СтатусыРеестровСчетовФактур.НеОтвечено;
	Результат.ЭлектроннаяПочта                = ОбъектXDTO.АдресДляОтвета;
	
КонецПроцедуры

Процедура РеквизитыСчетаФактуры(ОбъектXDTO, ТаблицаРеестров, Письмо)
	
	Результат = ТаблицаРеестров.Добавить();
	ЗаполнитьОбщиеРеквизитыРеестра(Результат, ОбъектXDTO, Письмо);
	
	Результат.ТипЗапроса                      = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику;
	Результат.СтатусЗапроса                   = Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки;
	Результат.ДанныеРеестра                   = Новый ХранилищеЗначения(Письмо.ДанныеXML);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеРеквизитыРеестра(Результат, ОбъектXDTO, Письмо)
	
	ЗаполнитьЗначенияСвойств(Результат, ОбъектXDTO);
	
	Результат.ИННПокупателя                   = СокрЛП(ОбъектXDTO.ИННПокупателя);
	Результат.КПППокупателя                   = СокрЛП(ОбъектXDTO.КПППокупателя);
	Результат.ИННПоставщика                   = СокрЛП(ОбъектXDTO.ИННПоставщика);
	Результат.КПППоставщика                   = СокрЛП(ОбъектXDTO.КПППоставщика);
	Результат.ДатаЗаписи                      = ТекущаяДатаСеанса();
	Результат.ИдентификаторПочтовогоСообщения = Письмо.ИдентификаторСообщения;
	
КонецПроцедуры

Процедура ДополнитьТаблицуЗапросов(ТаблицаЗапросовРеестров, ОписаниеОшибок, Письма)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИННПоставщика",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗапросовРеестров, "ИННПоставщика", Истина));
	Запрос.УстановитьПараметр("ИННПокупателя",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗапросовРеестров, "ИННПокупателя", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.КПП,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&ИННПокупателя)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.КПП,
	|	Организации.ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В(&ИННПоставщика)
	|	И НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Контрагенты = РезультатЗапроса[0].Выгрузить();
	Контрагенты.Индексы.Добавить("ИНН, КПП");
	
	Организации = РезультатЗапроса[1].Выгрузить();
	Организации.Индексы.Добавить("ИНН, КПП");
	
	ОтборКонтрагентов = Новый Структура;
	ОтборОрганизаций = Новый Структура;
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого ЗапросРеестра Из ТаблицаЗапросовРеестров Цикл
		ОтборКонтрагентов.Вставить("ИНН", ЗапросРеестра.ИННПокупателя);
		ОтборКонтрагентов.Вставить("КПП", ЗапросРеестра.КПППокупателя);
		Контрагент = Контрагенты.НайтиСтроки(ОтборКонтрагентов);
		КоличествоЗаписей = Контрагент.Количество();
		Если КоличествоЗаписей = 1 Тогда
			ЗапросРеестра.Контрагент = Контрагент[0].Ссылка;
		
		Иначе
			СтрокиКУдалению.Добавить(ЗапросРеестра);
			ЗарегистрироватьОшибкуЗагрузкиЗапроса(ОписаниеОшибок,
				ЗапросРеестра,
				Письма,
				КоличествоЗаписей,
				Контрагент);
			Продолжить;
			
		КонецЕсли;
		
		ОтборОрганизаций.Вставить("ИНН", ЗапросРеестра.ИННПоставщика);
		ОтборОрганизаций.Вставить("КПП", ЗапросРеестра.КПППоставщика);
		Организация = Организации.НайтиСтроки(ОтборОрганизаций);
		КоличествоЗаписей = Организация.Количество();
		Если КоличествоЗаписей = 1 Тогда
			ЗапросРеестра.Организация = Организация[0].Ссылка;
		
		Иначе
			СтрокиКУдалению.Добавить(ЗапросРеестра);
			ЗарегистрироватьОшибкуЗагрузкиЗапроса(ОписаниеОшибок,
				ЗапросРеестра,
				Письма,
				КоличествоЗаписей);
			Продолжить;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗапросовРеестров.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаЗапросовРеестров.Колонки.Удалить("ИННПоставщика");
	ТаблицаЗапросовРеестров.Колонки.Удалить("КПППоставщика");
	ТаблицаЗапросовРеестров.Колонки.Удалить("ИННПокупателя");
	ТаблицаЗапросовРеестров.Колонки.Удалить("КПППокупателя");
	
КонецПроцедуры

Процедура ДополнитьТаблицуРеестров(ТаблицаРеестров, ОписаниеОшибок, Письма)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИННПоставщика",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРеестров, "ИННПоставщика", Истина));
	Запрос.УстановитьПараметр("ИННПокупателя",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРеестров, "ИННПокупателя", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.КПП,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&ИННПоставщика)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.КПП,
	|	Организации.ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В(&ИННПокупателя)
	|	И НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Контрагенты = РезультатЗапроса[0].Выгрузить();
	Контрагенты.Индексы.Добавить("ИНН, КПП");
	
	Организации = РезультатЗапроса[1].Выгрузить();
	Организации.Индексы.Добавить("ИНН, КПП");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСчетовФактурПоставщика.Организация,
	|	РеестрСчетовФактурПоставщика.Контрагент,
	|	РеестрСчетовФактурПоставщика.НалоговыйПериод,
	|	РеестрСчетовФактурПоставщика.Дата
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика КАК РеестрСчетовФактурПоставщика
	|ГДЕ
	|	НЕ РеестрСчетовФактурПоставщика.ПометкаУдаления
	|	И РеестрСчетовФактурПоставщика.Организация В (&Организации)
	|	И РеестрСчетовФактурПоставщика.Контрагент В (&Контрагенты)";
	ЗагруженныеРеестры = Запрос.Выполнить().Выгрузить();
	ЗагруженныеРеестры.Индексы.Добавить("Организация, Контрагент, НалоговыйПериод");
	
	ОтборКонтрагентов = Новый Структура;
	ОтборОрганизаций = Новый Структура;
	ОтборРеестров = Новый Структура;
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Реестр Из ТаблицаРеестров Цикл
		
		Если НЕ ЗначениеЗаполнено(Реестр.ИдентификаторЗапроса) Тогда
			Письмо = Письма.Найти(Реестр.ИдентификаторПочтовогоСообщения, "ИдентификаторСообщения");
			Если Письмо <> Неопределено Тогда
				Реестр.ЭлектроннаяПочта = Письмо.Отправитель;
			КонецЕсли;
		КонецЕсли;
		
		ОтборКонтрагентов.Вставить("ИНН", Реестр.ИННПоставщика);
		ОтборКонтрагентов.Вставить("КПП", Реестр.КПППоставщика);
		Контрагент = Контрагенты.НайтиСтроки(ОтборКонтрагентов);
		КоличествоЗаписей = Контрагент.Количество();
		Если КоличествоЗаписей = 1 Тогда
			Реестр.Контрагент = Контрагент[0].Ссылка;
		
		Иначе
			СтрокиКУдалению.Добавить(Реестр);
			ЗарегистрироватьОшибкуЗагрузкиРеестра(ОписаниеОшибок,
				Реестр,
				Письма,
				КоличествоЗаписей,
				Контрагент);
			Продолжить;
			
		КонецЕсли;
		
		ОтборОрганизаций.Вставить("ИНН", Реестр.ИННПокупателя);
		ОтборОрганизаций.Вставить("КПП", Реестр.КПППокупателя);
		Организация = Организации.НайтиСтроки(ОтборОрганизаций);
		КоличествоЗаписей = Организация.Количество();
		Если КоличествоЗаписей = 1 Тогда
			Реестр.Организация = Организация[0].Ссылка;
			
		Иначе
			СтрокиКУдалению.Добавить(Реестр);
			ЗарегистрироватьОшибкуЗагрузкиРеестра(ОписаниеОшибок,
				Реестр,
				Письма,
				КоличествоЗаписей);
			Продолжить;
			
		КонецЕсли;
		
		ОтборРеестров.Вставить("Организация"    , Реестр.Организация);
		ОтборРеестров.Вставить("Контрагент"     , Реестр.Контрагент);
		ОтборРеестров.Вставить("НалоговыйПериод", Реестр.НалоговыйПериод);
		ЗагруженныйРеестр = ЗагруженныеРеестры.НайтиСтроки(ОтборРеестров);
		Если ЗагруженныйРеестр.Количество() > 0 Тогда
			Если ЗагруженныйРеестр[0].Дата > Реестр.ДатаФормирования Тогда
				СтрокиКУдалению.Добавить(Реестр);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРеестров.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаРеестров.Колонки.Удалить("ИННПоставщика");
	ТаблицаРеестров.Колонки.Удалить("КПППоставщика");
	ТаблицаРеестров.Колонки.Удалить("ИННПокупателя");
	ТаблицаРеестров.Колонки.Удалить("КПППокупателя");
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкуЗагрузкиРеестра(ОписаниеОшибок, Реестр, Письма, КоличествоЗаписей, Контрагент = Неопределено)
	
	Письмо = Письма.Найти(Реестр.ИдентификаторПочтовогоСообщения, "ИдентификаторСообщения");
	
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияЮрЛицо = СтрДлина(Реестр.ИННПокупателя) = 10;
	ПоставщикЮрЛицо   = СтрДлина(Реестр.ИННПоставщика) = 10;
	
	Если ЗначениеЗаполнено(Реестр.Контрагент) Тогда
		ПредставлениеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реестр.Контрагент, "НаименованиеПолное");
		
		Если КоличествоЗаписей = 0 Тогда
			Если ОрганизацияЮрЛицо Тогда
				Описание = НСтр("ru='Организация с ИНН %1 КПП %2 не найдена'");
				Описание = СтрШаблон(Описание, Реестр.ИННПокупателя, Реестр.КПППокупателя);
				
			Иначе
				Описание = НСтр("ru='Организация с ИНН %1 не найдена'");
				Описание = СтрШаблон(Описание, Реестр.ИННПокупателя);
				
			КонецЕсли;
			
		ИначеЕсли КоличествоЗаписей > 1 Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЗаписей,
				НСтр("ru='организация, организации, организаций'"));
			Если ОрганизацияЮрЛицо Тогда
				Описание = НСтр("ru='Найдены %1 с ИНН %2 КПП %3'");
				Описание = СтрШаблон(Описание, ПредставлениеОрганизации, Реестр.ИННПокупателя, Реестр.КПППокупателя);
				
			Иначе
				Описание = НСтр("ru='Найдены %1 с ИНН %2'");
				Описание = СтрШаблон(Описание, ПредставлениеОрганизации, Реестр.ИННПокупателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Контрагент) И Контрагент.Количество() > 0 Тогда
			ПредставлениеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент[0].Ссылка, "НаименованиеПолное")
				+ " (" + НСтр("ru='ИНН'") + " " + Реестр.ИННПоставщика
				+ ?(НЕ ЗначениеЗаполнено(Реестр.КПППоставщика), ")", ", " + НСтр("ru='КПП'") + " " + Реестр.КПППоставщика + ")");
		Иначе
			ПредставлениеКонтрагента = НСтр("ru='ИНН'") + " " + Реестр.ИННПоставщика
				+ ?(НЕ ЗначениеЗаполнено(Реестр.КПППоставщика), "", ", " + НСтр("ru='КПП'") + " " + Реестр.КПППоставщика);
		КонецЕсли;
		
		Если КоличествоЗаписей = 0 Тогда
			Описание = НСтр("ru='Поставщик не найден'");
			
		ИначеЕсли КоличествоЗаписей > 1 Тогда
			Описание = НСтр("ru='%1 с этим %2'");
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЗаписей,
				НСтр("ru='поставщик, поставщика, поставщиков'"));
			Описание = СтрШаблон(Описание,
				ПредставлениеПоставщика,
				?(ПоставщикЮрЛицо, НСтр("ru='ИНН/КПП'"), НСтр("ru='ИНН'")));
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОшибки = ОписаниеОшибок.Добавить();
	ОписаниеОшибки.ДатаПисьма       = Письмо.ДатаОтправления;
	ОписаниеОшибки.Контрагент       = ПредставлениеКонтрагента;
	ОписаниеОшибки.ЭлектроннаяПочта = Письмо.Отправитель;
	ОписаниеОшибки.Описание         = Описание;
	ОписаниеОшибки.Контекст         = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику;
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкуЗагрузкиЗапроса(ОписаниеОшибок, Реестр, Письма, КоличествоЗаписей, Контрагент = Неопределено)
	
	Письмо = Письма.Найти(Реестр.ИдентификаторПочтовогоСообщения, "ИдентификаторСообщения");
	
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияЮрЛицо = СтрДлина(Реестр.ИННПоставщика) = 10;
	ПокупательЮрЛицо  = СтрДлина(Реестр.ИННПокупателя) = 10;
	
	Если ЗначениеЗаполнено(Реестр.Контрагент) Тогда
		ПредставлениеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реестр.Контрагент, "НаименованиеПолное");
		
		Если КоличествоЗаписей = 0 Тогда
			Если ОрганизацияЮрЛицо Тогда
				Описание = НСтр("ru='Организация с ИНН %1 КПП %2 не найдена'");
				Описание = СтрШаблон(Описание, Реестр.ИННПоставщика, Реестр.КПППоставщика);
				
			Иначе
				Описание = НСтр("ru='Организация с ИНН %1 не найдена'");
				Описание = СтрШаблон(Описание, Реестр.ИННПоставщика);
				
			КонецЕсли;
			
		ИначеЕсли КоличествоЗаписей > 1 Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЗаписей,
				НСтр("ru='организация, организации, организаций'"));
			Если ОрганизацияЮрЛицо Тогда
				Описание = НСтр("ru='Найдены %1 с ИНН %2 КПП %3'");
				Описание = СтрШаблон(Описание, ПредставлениеОрганизации, Реестр.ИННПоставщика, Реестр.КПППоставщика);
				
			Иначе
				Описание = НСтр("ru='Найдены %1 с ИНН %2'");
				Описание = СтрШаблон(Описание, ПредставлениеОрганизации, Реестр.ИННПоставщика);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Контрагент) И Контрагент.Количество() > 0 Тогда
			ПредставлениеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент[0].Ссылка, "НаименованиеПолное")
				+ " (" + НСтр("ru='ИНН'") + " " + Реестр.ИННПокупателя
				+ ?(НЕ ЗначениеЗаполнено(Реестр.КПППокупателя), ")", ", " + НСтр("ru='КПП'") + " " + Реестр.КПППокупателя + ")");
		Иначе
			ПредставлениеКонтрагента = НСтр("ru='ИНН'") + " " + Реестр.ИННПокупателя
				+ ?(НЕ ЗначениеЗаполнено(Реестр.КПППокупателя), "", ", " + НСтр("ru='КПП'") + " " + Реестр.КПППокупателя);
		КонецЕсли;
		
		Если КоличествоЗаписей = 0 Тогда
			Описание = НСтр("ru='Покупатель не найден'");
			
		ИначеЕсли КоличествоЗаписей > 1 Тогда
			Описание = НСтр("ru='%1 с этим %2'");
			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоЗаписей,
				НСтр("ru='покупатель, покупателя, покупателей'"));
			Описание = СтрШаблон(Описание,
				ПредставлениеПокупателя,
				?(ПокупательЮрЛицо, "ИНН/КПП", "ИНН"));
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОшибки = ОписаниеОшибок.Добавить();
	ОписаниеОшибки.ДатаПисьма       = Письмо.ДатаОтправления;
	ОписаниеОшибки.Контрагент       = ПредставлениеКонтрагента;
	ОписаниеОшибки.ЭлектроннаяПочта = Письмо.Отправитель;
	ОписаниеОшибки.Описание         = Описание;
	ОписаниеОшибки.Контекст         = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя;
	
КонецПроцедуры

Функция ТекстЗапросаРеестрСчетовФактурПолученныхОрганизацией()
	
	Результат = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОшибочныеРеквизитыКонтрагентов.Период) КАК Период,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура КАК ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ДатаКрайнегоСФНаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|ГДЕ
	|	ОшибочныеРеквизитыКонтрагентов.Организация В(&СписокОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	ИсходныйСчетФактура,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОшибочныеРеквизитыКонтрагентов.Регистратор) КАК СчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура КАК ИсходныйСчетФактура
	|ПОМЕСТИТЬ ВТ_КрайнийСчетФактураНаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатаКрайнегоСФНаИСО КАК ВТ_ДатаКрайнегоСФНаИСО
	|		ПО (ОшибочныеРеквизитыКонтрагентов.Период = ВТ_ДатаКрайнегоСФНаИСО.Период)
	|			И (ОшибочныеРеквизитыКонтрагентов.Организация = ВТ_ДатаКрайнегоСФНаИСО.Организация)
	|			И (ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура = ВТ_ДатаКрайнегоСФНаИСО.ИсходныйСчетФактура)
	|			И (ОшибочныеРеквизитыКонтрагентов.Контрагент = ВТ_ДатаКрайнегоСФНаИСО.Контрагент)
	|ГДЕ
	|	НЕ ВТ_ДатаКрайнегоСФНаИСО.Организация ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОшибочныеРеквизитыКонтрагентов.Организация,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Организация,
	|	ИсходныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибочныеРеквизитыКонтрагентов.СчетФактура КАК СчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ВТ_КрайнийСчетФактураНаИСО.СчетФактура КАК КрайнийСчетФактура
	|ПОМЕСТИТЬ ВТ_СведенияОКрайнихСФнаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайнийСчетФактураНаИСО КАК ВТ_КрайнийСчетФактураНаИСО
	|		ПО (ОшибочныеРеквизитыКонтрагентов.Организация = ВТ_КрайнийСчетФактураНаИСО.Организация)
	|			И (ОшибочныеРеквизитыКонтрагентов.Контрагент = ВТ_КрайнийСчетФактураНаИСО.Контрагент)
	|			И (ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура = ВТ_КрайнийСчетФактураНаИСО.ИсходныйСчетФактура)
	|ГДЕ
	|	НЕ ВТ_КрайнийСчетФактураНаИСО.Организация ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код КАК КодВалюты,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ИСТИНА КАК ДанныеОрганизации,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре) КАК СуммаДокумента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение) КАК СуммаДокументаРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК СуммаДокументаРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДСРазницаУвеличение
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОКрайнихСФнаИСО КАК ВТ_СведенияОКрайнихСФнаИСО
	|		ПО ЖурналУчетаСчетовФактур.Организация = ВТ_СведенияОКрайнихСФнаИСО.Организация
	|			И ЖурналУчетаСчетовФактур.Контрагент = ВТ_СведенияОКрайнихСФнаИСО.Контрагент
	|			И ЖурналУчетаСчетовФактур.СчетФактура = ВТ_СведенияОКрайнихСФнаИСО.СчетФактура
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация В(&СписокОрганизаций)
	|	И ЖурналУчетаСчетовФактур.Период >= &НачалоКвартала
	|	И ВЫБОР
	|			КОГДА &ПоВсемКонтрагентам
	|				ТОГДА ЖурналУчетаСчетовФактур.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент В (&СписокКонтрагентов)
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ МЕЖДУ &НачалоКвартала И &КонецКвартала
	|	И НЕ ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|	И (ВТ_СведенияОКрайнихСФнаИСО.КрайнийСчетФактура ЕСТЬ NULL 
	|			ИЛИ ВТ_СведенияОКрайнихСФнаИСО.КрайнийСчетФактура = ЖурналУчетаСчетовФактур.СчетФактура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеестрСчетовФактурВыданныхОрганизацией()
	
	Результат = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код КАК КодВалюты,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ИСТИНА КАК ДанныеОрганизации,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре) КАК СуммаДокумента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение) КАК СуммаДокументаРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК СуммаДокументаРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДСРазницаУвеличение
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация В(&СписокОрганизаций)
	|	И ВЫБОР
	|			КОГДА &ПоВсемКонтрагентам
	|				ТОГДА ЖурналУчетаСчетовФактур.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.Контрагент В (&СписокКонтрагентов)
	|		КОНЕЦ
	|	И ЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|	И ЖурналУчетаСчетовФактур.Период >= &НачалоКвартала
	|	И ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ МЕЖДУ &НачалоКвартала И &КонецКвартала
	|	И ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ЖурналУчетаСчетовФактур.ИсправлениеСобственнойОшибки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
