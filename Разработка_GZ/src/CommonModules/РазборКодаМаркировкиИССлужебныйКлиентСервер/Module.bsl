#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

// Для разбора кода маркировки следует использовать следующие методы:
//  * РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
//  * РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки
//
// Параметры:
//  ДанныеДляРазбора - Строка, Структура - данные кода маркировки для разбора
//  ВидыПродукции    - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     фильтр по допустимым видам продукции кода маркировки
//  ПримечаниеКРезультатуРазбора - Структура - исходящий параметр, ошибки разбора
//  Настройки        - см. НастройкиРазбораКодаМаркировки - кешированные настройки разбора кодов маркировки.
//  МодульКонтекста  - ОбщийМодуль - источник вызова.
//
// Возвращаемое значение:
//  Структура, Неопределено - см. НовыйРезультатРазбораКодаМаркировки.
//
Функция РазобратьКодМаркировки(ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПроверятьАлфавитЭлементов, МодульКонтекста) Экспорт
	
	ПримечаниеКРезультатуРазбора = Новый Структура("ИдентификаторОшибки, ТекстОшибки, РезультатРазбора", "", "", Неопределено);
	
	ИдентификаторыОшибок = ИдентификаторыОшибокРазобраКодаМаркировки();
	
	Если Настройки.ДоступныеВидыПродукции.Количество() = 0 Тогда
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.УчетМаркируемойПродукцииНеВедется;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Учет маркируемой продукции не ведется.'");
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыПродукцииДляФильтра = Новый Массив;
	Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
	ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		Для Каждого Значение Из ВидыПродукции Цикл
			Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
				ВидыПродукцииДляФильтра.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВидыПродукцииДляФильтра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);
	
	ФильтрПоВидуПродукции = Новый Структура("Использовать, ВидыПродукции", Ложь, Неопределено);
	Если ВидыПродукцииДляФильтра.Количество() > 0 Тогда
		ФильтрПоВидуПродукции.Использовать = Истина;
		ФильтрПоВидуПродукции.ВидыПродукции = Новый ФиксированныйМассив(ВидыПродукцииДляФильтра);
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Строка") Тогда
		Если НайденНедопустимыйСимволXML(ДанныеДляРазбора) Тогда
			РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(ДанныеДляРазбора);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		РезультатРазбора = ДанныеДляРазбора;
	Иначе
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НачинаетсяСоСкобки    = Ложь;
	СодержитРазделительGS = Ложь;
	
	Если РезультатРазбора = Неопределено Тогда
		НачинаетсяСоСкобки = СтрНачинаетсяС(ДанныеДляРазбора, "(");
		КодМаркировки      = ДанныеДляРазбора;
	Иначе
		// Модифицирует свойства: СодержитРазделительGS и КодМаркировки
		Если Не РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора,
				ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаКодаМаркировки = СтрДлина(КодМаркировки);
	
	ПараметрыРазбораКодаМаркировки = Новый Структура;
	ПараметрыРазбораКодаМаркировки.Вставить("КодМаркировки",             КодМаркировки);
	ПараметрыРазбораКодаМаркировки.Вставить("НачинаетсяСоСкобки",        НачинаетсяСоСкобки);
	ПараметрыРазбораКодаМаркировки.Вставить("СодержитРазделительGS",     СодержитРазделительGS);
	ПараметрыРазбораКодаМаркировки.Вставить("РезультатРазбора",          РезультатРазбора);
	ПараметрыРазбораКодаМаркировки.Вставить("ДлинаКодаМаркировки",       ДлинаКодаМаркировки);
	ПараметрыРазбораКодаМаркировки.Вставить("ФильтрПоВидуПродукции",     ФильтрПоВидуПродукции);
	ПараметрыРазбораКодаМаркировки.Вставить("МодульКонтекста",           МодульКонтекста);
	ПараметрыРазбораКодаМаркировки.Вставить("ОбщиеМодулиРазбораКМ",      Новый Соответствие);
	ПараметрыРазбораКодаМаркировки.Вставить("ПроверятьАлфавитЭлементов", ПроверятьАлфавитЭлементов);
	
	Если Настройки.ТолькоСервер Тогда
		ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ = Настройки.ОбщиеМодули;
	Иначе
		Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
			Если ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = Неопределено Тогда
				ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = МодульКонтекста.ОбщийМодуль(ИмяОбщегоМодуля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайденныеШаблоны = ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки);
	
	Результат = Новый Массив;
	
	Для Каждого ШаблонКодаМаркировки Из НайденныеШаблоны Цикл
		
		ДанныеРезультата = КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ДанныеРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ДанныеРезультата);
		
	КонецЦикла;
	
	РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(Результат, ФильтрПоВидуПродукции);
	
	Если РезультатПоФильтру.Количество() = 0 Тогда
		ДанныеРезультата = Неопределено;
		Если ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки,
			ДанныеРезультата, Новый ФиксированныйМассив(Результат)) Тогда
			РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРезультата), ФильтрПоВидуПродукции);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПоФильтру.Количество() = 0 Тогда
		
		Если Результат.Количество() > 0 Тогда
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует другим видам продукции'");
			ПримечаниеКРезультатуРазбора.РезультатРазбора    = Результат;
			Возврат Неопределено;
		Иначе
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиНеСоответствуетНиОдномуШаблону;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки не соответствует ни одному шаблону.'");
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли РезультатПоФильтру.Количество() = 1 Тогда
		
		Возврат РезультатПоФильтру[0];
		
	Иначе
		
		ДанныеРезультата = Неопределено;
		Если ОбработатьРезультатНесколькихШаблонов(РезультатПоФильтру, ДанныеРезультата) Тогда
			Возврат ДанныеРезультата;
		КонецЕсли;
		
		// К примеру логистические укаковки длиной 18 символов для ЕГАИС и ИСМП
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует нескольким шаблонам'");
		ПримечаниеКРезультатуРазбора.РезультатРазбора    = РезультатПоФильтру;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Получает из кода маркировки составные части по из позиции в шаблоне.
// При этом в коде маркировки не должно быть недопустимых символов.
//
// Параметры:
//  КодМаркировки                      - Строка.
//  ПозицииЭлементовКМ                 - см. ПозицииЭлементовВШаблонеКодаМаркировки
//  ИмяСвойстваПозиции                 - Строка.
//  ИмяСвойстваДлины                   - Строка.
//  ИменаИдентификаторовКодаМаркировки - Массив из Строка.
//
// Возвращаемое значение:
//  Соответствие
//
Функция ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(КодМаркировки, ПозицииЭлементовКМ, ИмяСвойстваПозиции, ИмяСвойстваДлины, ИменаИдентификаторовКодаМаркировки = Неопределено) Экспорт
	
	// Для идентификатора:
	// - ПозицияИдентификатора
	// - ПозицияИдентификатораСоСкобкой
	// - ДлинаИдентификатора
	//
	// Для значения:
	// - ПозицияЗначения
	// - ПозицияЗначенияСоСкобкой
	// - ДлинаЗначения
	
	ЗначенияЭлементовКодаМаркировки = Новый Соответствие;
	
	Если ИменаИдентификаторовКодаМаркировки = Неопределено Тогда
		
		Для Каждого ДанныеИдентификатораЭлементаКМ Из ПозицииЭлементовКМ Цикл
			
			ИмяИдентификатораЭлемента = ДанныеИдентификатораЭлементаКМ.Ключ;
			ПозицияЗначенияЭлементаКМ = ДанныеИдентификатораЭлементаКМ.Значение;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИмяИдентификатораЭлемента Из ИменаИдентификаторовКодаМаркировки Цикл
			
			ПозицияЗначенияЭлементаКМ = ПозицииЭлементовКМ[ИмяИдентификатораЭлемента];
			
			Если ПозицияЗначенияЭлементаКМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияЭлементовКодаМаркировки;
	
КонецФункции

Функция КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки) Экспорт
	
	ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
	
	ОбщиеМодулиТекущегоШаблона = Новый Массив;
	Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
		МодульРазбораКМ = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		ОбщиеМодулиТекущегоШаблона.Добавить(Новый Структура("Имя, ОбщийМодуль", ИмяОбщегоМодуля, МодульРазбораКМ));
	КонецЦикла;
	
	СоставКодаМаркировки = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	
	ПараметрыОписанияКодаМаркировки = Новый Структура;
	ПараметрыОписанияКодаМаркировки.Вставить("ВидыПродукции",                   ДанныеШаблона.ВидыПродукции);
	ПараметрыОписанияКодаМаркировки.Вставить("ОписаниеЭлементовКодаМаркировки", ДанныеШаблона.ОписаниеЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("НачинаетсяСоСкобки",              ШаблонКодаМаркировки.НачинаетсяСоСкобки);
	ПараметрыОписанияКодаМаркировки.Вставить("ПозицииЭлементовКодаМаркировки",  ДанныеШаблона.ПозицииЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("Шаблон",                          ШаблонКодаМаркировки.Шаблон);
	ПараметрыОписанияКодаМаркировки.Вставить("ТипШтрихкода",                    ШаблонКодаМаркировки.ТипШтрихкода);
	ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки",                     ШаблонКодаМаркировки.ВидУпаковки);
	ПараметрыОписанияКодаМаркировки.Вставить("ОбщиеМодули",                     ОбщиеМодулиТекущегоШаблона);
	ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",                 ПараметрыРазбораКодаМаркировки.МодульКонтекста);
	ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры",         Настройки.ДополнительныеПараметры);
	
	Если Не КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Состав возможных видов продукции мог поменяться
	ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки();
	ДанныеРезультата.ШаблонРазбораКодаМаркировки = ШаблонКодаМаркировки.Шаблон;
	ДанныеРезультата.КодМаркировки               = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода                = ШаблонКодаМаркировки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки                 = ШаблонКодаМаркировки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции               = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки        = СоставКодаМаркировки;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
	КонецЦикла;
	
	ВидУпаковкиДляНормализации  = ШаблонКодаМаркировки.ВидУпаковки;
	ВидПродукцииДляНормализации = ШаблонКодаМаркировки.ВидПродукции;
	
	Если ВидыПродукции.Количество() = 1 Тогда
		ВидПродукцииДляНормализации = ВидыПродукции[0];
	ИначеЕсли ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.Использовать Тогда
		ВидПродукцииНайден = Ложь;
		Для Каждого ВидПродукции Из ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.ВидыПродукции Цикл
			Если ВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПродукцииНайден Тогда
				ВидПродукцииДляНормализации = Неопределено;
				Прервать;
			КонецЕсли;
			ВидПродукцииДляНормализации = ВидПродукции;
			ВидПродукцииНайден = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПолученияНормализированногоКодаМаркировки = Новый Структура("КодМаркировки, ВидУпаковки, ТипШтрихкода, СоставКодаМаркировки");
	ДанныеДляПолученияНормализированногоКодаМаркировки.КодМаркировки        = ДанныеРезультата.КодМаркировки;
	ДанныеДляПолученияНормализированногоКодаМаркировки.ВидУпаковки          = ДанныеРезультата.ВидУпаковки;
	ДанныеДляПолученияНормализированногоКодаМаркировки.ТипШтрихкода         = ДанныеРезультата.ТипШтрихкода;
	ДанныеДляПолученияНормализированногоКодаМаркировки.СоставКодаМаркировки = ДанныеРезультата.СоставКодаМаркировки;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииДляНормализации) Тогда
		ВидПродукцииДляНормализации = ВидыПродукции[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидУпаковкиДляНормализации) И ЗначениеЗаполнено(ВидПродукцииДляНормализации) Тогда
		ВидУпаковкиДляНормализации = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукцииДляНормализации][0];
		ДанныеДляПолученияНормализированногоКодаМаркировки.ВидУпаковки = ВидУпаковкиДляНормализации;
	КонецЕсли;
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировки(
		ДанныеДляПолученияНормализированногоКодаМаркировки, ВидПродукцииДляНормализации);
	
	Возврат ДанныеРезультата;
	
КонецФункции

// Конструктор результата разбора кода маркировки.
// 
// Возвращаемое значение:
//   Структура:
//     * КодМаркировки - Строка.
//     * НормализованныйКодМаркировки - Строка.
//     * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов.
//     * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС.
//     * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС.
//     * ВидыУпаковокПоВидамПродукции - Соответствие.
//     * СоставКодаМаркировки - Структура.
//     * ШаблонРазбораКодаМаркировки - Строка.
//
Функция НовыйРезультатРазбораКодаМаркировки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("КодМаркировки",                "");
	Результат.Вставить("НормализованныйКодМаркировки", "");
	Результат.Вставить("ТипШтрихкода",                 ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка"));
	Результат.Вставить("ВидУпаковки",                  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка")); // Устарело
	Результат.Вставить("ВидыПродукции",                Неопределено);
	Результат.Вставить("ВидыУпаковокПоВидамПродукции", Новый Соответствие);
	Результат.Вставить("СоставКодаМаркировки",         Неопределено);
	Результат.Вставить("ШаблонРазбораКодаМаркировки",  Неопределено);
	Возврат Результат;
КонецФункции

// Инициализировать параметры нормализации кода маркировки
// 
// Возвращаемое значение:
// 	Структура:
// * ВключатьМРЦ - Булево - Признак включения МРЦ
// * ИмяСвойстваКодМаркировки - Строка - Имя свойства для получения кода маркировки
Функция ПараметрыНормализацииКодаМаркировки() Экспорт
	
	ПараметрыНормализации = Новый Структура;
	ПараметрыНормализации.Вставить("ИмяСвойстваКодМаркировки", "КодМаркировки");
	ПараметрыНормализации.Вставить("НачинаетсяСоСкобки",        Истина);
	ПараметрыНормализации.Вставить("ВключатьМРЦ",               Истина); // Табак
	ПараметрыНормализации.Вставить("ВключатьСрокГодности",      Истина); // Молочная продукция
	
	Возврат ПараметрыНормализации;
	
КонецФункции

// Нормализует код маркировки.
// 
// Параметры:
//   РезультатРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//   ПараметрыНормализации - см. ПараметрыНормализацииКодаМаркировки.
//
// Возвращаемое значение:
//   Строка
//
Функция НормализоватьКодМаркировки(РезультатРазбора, ВидПродукции, ПараметрыНормализации = Неопределено) Экспорт
	
	Если ПараметрыНормализации = Неопределено Тогда
		ПараметрыНормализации = ПараметрыНормализацииКодаМаркировки();
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Если РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
			КонецЕсли;
			
			Возврат ШтрихкодыУпаковокКлиентСервер.КодМаркировкиБезСкобок(
				РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки]);
			
		КонецЕсли;
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат СтрШаблон("(00)%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат СтрШаблон("00%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Возврат Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18);
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.АгрегированныйТаможенныйКод") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		ВключатьМРЦ = ПараметрыНормализации.ВключатьМРЦ И РезультатРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			
			Если ВключатьМРЦ Тогда
				
				Возврат СтрШаблон("%1%2%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
			КонецЕсли;
			
		Иначе
			
			Если ВключатьМРЦ Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
						РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				ЭлементыКМ.Добавить("8005");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				Возврат СтрСоединить(ЭлементыКМ);
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				Возврат СтрСоединить(ЭлементыКМ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И Не РезультатРазбора.СоставКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
			
			Возврат СтрШаблон("%1%2",
				РезультатРазбора.СоставКодаМаркировки.GTIN,
				РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		
		ВключатьКодТНВЭД = РезультатРазбора.СоставКодаМаркировки.Свойство("КодТНВЭД")
		                 И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
		
		Если ВключатьКодТНВЭД Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(240)%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить("240");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		
		ВключатьСрокГодности = ПараметрыНормализации.ВключатьСрокГодности
		                     И РезультатРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
		                     И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.ГоденДо);
		
		Если ВключатьСрокГодности Тогда
			
			Если РезультатРазбора.СоставКодаМаркировки.Скоропортящаяся Тогда
				КодЭлемента = "7003";
				ФорматДаты  = "ДФ=yyMMddHHmm;"; // Формат: YYMMDDHHMM
			Иначе
				КодЭлемента = "17";
				ФорматДаты  = "ДФ=yyMMdd;"; // Формат: YYMMDD
			КонецЕсли;
			
			ЗначениеЭлемента = Формат(РезультатРазбора.СоставКодаМаркировки.ГоденДо, ФорматДаты);
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(%3)%4",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					КодЭлемента,
					ЗначениеЭлемента);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить(КодЭлемента);
			ЭлементыКМ.Добавить(ЗначениеЭлемента);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
		Возврат СтрШаблон("(01)%1(21)%2",
			РезультатРазбора.СоставКодаМаркировки.GTIN,
			РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	КонецЕсли;
	
	ЭлементыКМ = Новый Массив;
	ЭлементыКМ.Добавить("01");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
	ЭлементыКМ.Добавить("21");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	Возврат СтрСоединить(ЭлементыКМ);
	
КонецФункции

// Идентификаторы ошибок разобра кода маркировки.
//
// Возвращаемое значение:
//   Структура:
//    * УчетМаркируемойПродукцииНеВедется
//    * ДанныеДляРазбораНекорректны
//    * КодМаркировкиНеСоответствуетНиОдномуШаблону
//    * КодМаркировкиСоответствуетНесколькимШаблонам
//    * КодМаркировкиСоответствуетДругимВидамПродукции
//
Функция ИдентификаторыОшибокРазобраКодаМаркировки() Экспорт
	ИдентификаторОшибки = Новый Структура;
	ИдентификаторОшибки.Вставить("УчетМаркируемойПродукцииНеВедется",              "УчетМаркируемойПродукцииНеВедется");
	ИдентификаторОшибки.Вставить("ДанныеДляРазбораНекорректны",                    "ДанныеДляРазбораНекорректны");
	ИдентификаторОшибки.Вставить("КодМаркировкиНеСоответствуетНиОдномуШаблону",    "КодМаркировкиНеСоответствуетНиОдномуШаблону");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетНесколькимШаблонам",   "КодМаркировкиСоответствуетНесколькимШаблонам");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетДругимВидамПродукции", "КодМаркировкиСоответствуетДругимВидамПродукции");
	ИдентификаторОшибки.Вставить("НекорректныйФорматКодМаркировки",                "НекорректныйФорматКодМаркировки");
	Возврат ИдентификаторОшибки;
КонецФункции

Функция ШаблоныКодовМаркировкиПоОтбору(ШаблоныКодовМаркировки, Отбор) Экспорт
	
	Если ТипЗнч(ШаблоныКодовМаркировки) = Тип("Массив") Тогда
		
		НайденныеШаблоны = Новый Массив;
		
		Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
			
			ШаблонНайден = Истина;
			
			Для Каждого ОтборКлючЗначение Из Отбор Цикл
				Если ШаблонКМ[ОтборКлючЗначение.Ключ] <> ОтборКлючЗначение.Значение Тогда
					ШаблонНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ШаблонНайден Тогда
				НайденныеШаблоны.Добавить(ШаблонКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НайденныеШаблоны = ШаблоныКодовМаркировки.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	Возврат НайденныеШаблоны;
	
КонецФункции

Функция МРЦПоВидуУпаковки(МРЦСтрокой, ВидУпаковки) Экспорт
	
	РезультатПроверки = Новый Структура("ЭтоМРЦ, ЗначениеМРЦ", Ложь, 0);
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		МРЦ        = 0;
		АлфавитМРЦ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ДопустимыеСимволыВКодеМаркировки().БуквыЦифрыЗнакиМРЦ;
		
		Для Индекс = 1 По СтрДлина(МРЦСтрокой) Цикл
			Символ = Сред(МРЦСтрокой, Индекс, 1);
			ИндексСимвола = СтрНайти(АлфавитМРЦ, Символ) - 1;
			Если ИндексСимвола < 0 Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
			МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		КонецЦикла;
		
		// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
		Если МРЦ > 500000 Или МРЦ % 100 > 0 Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		
	Иначе
		
		МРЦ = Число(МРЦСтрокой);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МРЦ) Тогда
		МРЦ = МРЦ / 100;
	КонецЕсли;
	
	РезультатПроверки.ЭтоМРЦ      = Истина;
	РезультатПроверки.ЗначениеМРЦ = МРЦ;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция РезультатРазбораКодаМаркировкиПоФильтру(РезультатРазбораКМ, ФильтрПоВидуПродукции) Экспорт
	
	РезультатПоФильтру = Новый Массив;
	
	Для Каждого ДанныеРезультата Из РезультатРазбораКМ Цикл
		
		ВидыПродукцииПоФильтру = ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ДанныеРезультата.ВидыПродукции);
		
		Если ВидыПродукцииПоФильтру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПоФильтру.Добавить(ДанныеРезультата);
		
		ДанныеРезультата.ВидыПродукции = ВидыПродукцииПоФильтру;
		
		ВидыУпаковокПоВидамПродукции = Новый Соответствие;
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции = ВидыУпаковокПоВидамПродукции;
		
		Если Не ЗначениеЗаполнено(ДанныеРезультата.ВидУпаковки) Тогда
			ВидУпаковки  = Неопределено;
			ВидыУпаковок = Новый Соответствие;
			Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидамПродукции[ВидПродукции] Цикл
					Если ВидыУпаковок[ВидУпаковки] = Неопределено Тогда
						ВидыУпаковок[ВидУпаковки] = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДанныеРезультата.ВидУпаковки = ?(ВидыУпаковок.Количество() = 1, ВидУпаковки, ДанныеРезультата.ВидУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПоФильтру;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

// Устарела. Следует использовать РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки или РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки
Функция НастройкиРазбораКодаМаркировки(ТолькоСервер = Ложь, ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина, ВалидироватьШтрихкодаGS1БезРазделителей = Истина) Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйВызовСервера.НастройкиРазбораКодаМаркировки(ВидыПродукции, ТолькоУчитываемыеВидыПродукции, ВалидироватьШтрихкодаGS1БезРазделителей);
КонецФункции

// Возвращает структуру из строк с допустимыми символами
// 
// Возвращаемое значение:
// 	Структура - допустимые символы в коде маркировки:
// * БуквыЦифрыЗнаки - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”%&’()*+,-./_:;=<>?"
// * БуквыЦифрыЗнакиМРЦ - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?()"
// * Цифры - Строка - "0123456789"
Функция ДопустимыеСимволыВКодеМаркировки() Экспорт
	Алфавит = Новый Структура;
	Алфавит.Вставить("БуквыЦифры",         "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
	Алфавит.Вставить("БуквыЦифрыЗнаки",    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?");
	Алфавит.Вставить("БуквыЦифрыЗнакиМРЦ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?");
	Алфавит.Вставить("Цифры",              "0123456789");
	Возврат Алфавит;
КонецФункции

Функция ТипШтрихкодаИВидУпаковки() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка"));
	Данные.Вставить("ВидУпаковки",  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка"));
	Возврат Данные;
КонецФункции

// Получает позиции элементов в шаблоне кода маркировки.
//
// Параметры:
//  ОписаниеЭлементовКодаМаркировки - см. НастройкиРазбораКодаМаркировки.
//                                    НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонРазбораКодаМаркировки].ОписаниеЭлементовКодаМаркировки
//
// Возвращаемое значение:
//   Соответствие:
//    * Ключ     - Строка    - Значение идентификатора элемента КМ
//    * Значение - Структура:
//       ** Позиция          - Число.
//       ** ПозицияСоСкобкой - Число.
//       ** Длина            - Число.
//
Функция ПозицииЭлементовВШаблонеКодаМаркировки(ОписаниеЭлементовКодаМаркировки) Экспорт
	
	ПозицииЭлементовКМ = Новый Соответствие;
	
	ПозицияЗначенияЭлемента          = 1;
	ПозицияЗначенияЭлементаСоСкобкой = 1;
	
	ПорядковыйНомерЭлемента = 0;
	
	Для Каждого ОписаниеЭлементаКМ Из ОписаниеЭлементовКодаМаркировки Цикл
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1;
		
		ПозицияЗначенияЭлементаКМ = Новый Структура;
		ПозицияЗначенияЭлементаКМ.Вставить("ПорядковыйНомерЭлемента",  ПорядковыйНомерЭлемента);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначения",          0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначенияСоСкобкой", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаЗначения",            ОписаниеЭлементаКМ.Длина);
		
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатора",          0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатораСоСкобкой", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаИдентификатора",            0);
		
		ПозицииЭлементовКМ[ОписаниеЭлементаКМ.Имя] = ПозицияЗначенияЭлементаКМ;
		
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Код) Тогда
			
			ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора            = СтрДлина(ОписаниеЭлементаКМ.Код);
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора          = ПозицияЗначенияЭлемента;
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой + 1;
			
			ПозицияЗначенияЭлемента          = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора          + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора;
			ПозицияЗначенияЭлементаСоСкобкой = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора + 1; // добавляем по "(" и ")"
			
			ПозицияЗначенияЭлементаКМ.ПозицияЗначенияСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой;
			
			ПозицияЗначенияЭлементаСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой + ОписаниеЭлементаКМ.Длина;
			
		КонецЕсли;
		
		ПозицияЗначенияЭлементаКМ.ПозицияЗначения = ПозицияЗначенияЭлемента;
		
		ПозицияЗначенияЭлемента = ПозицияЗначенияЭлемента + ОписаниеЭлементаКМ.Длина;
		
	КонецЦикла;
	
	Возврат ПозицииЭлементовКМ;
	
КонецФункции

Функция СкопироватьСоставКодаМаркировки(СоставКодаМаркировки) Экспорт
	
	НовыйСоставКодаМаркировки = Новый Структура;
	
	Для Каждого КлючЗначение Из СоставКодаМаркировки Цикл
		НовыйСоставКодаМаркировки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат НовыйСоставКодаМаркировки;
	
КонецФункции

#КонецОбласти

Функция ВидУпаковкиСоответствуетРазбору(ВидПродукции, ВидУпаковки, ДанныеРазбора, ЗаполнятьВидПродукцииПодВидУпаковки = Ложь) Экспорт
	
	Если ДанныеРазбора = Неопределено Или Не ЗначениеЗаполнено(ВидУпаковки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		
		Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(ВидУпаковки) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидыПродукцииВидаУпаковки = Новый Массив;
		
		Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
			Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(ВидУпаковки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВидыПродукцииВидаУпаковки.Добавить(ВидПродукции);
		КонецЦикла;
		
		Если ВидыПродукцииВидаУпаковки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗаполнятьВидПродукцииПодВидУпаковки Тогда
			Если ВидыПродукцииВидаУпаковки.Количество() = 1 Тогда
				ВидПродукции = ВидыПродукцииВидаУпаковки[0];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиРазбораКодаМаркировкиДляХэшаНормализации() Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
КонецФункции

Функция НастройкиРазбораКодаМаркировкиДляСохраненияВПул() Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборКодаМаркировки

Функция ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки)
	
	ИмяКолонкиПоиска = "Длина";
	
	Отбор = Новый Структура;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
		КоличествоЭлементов = ПараметрыРазбораКодаМаркировки.РезультатРазбора.ДанныеШтрихкода.Количество();
		
		Отбор.Вставить("КоличествоЭлементов", КоличествоЭлементов);
		
	КонецЕсли;
	
	Отбор.Вставить(ИмяКолонкиПоиска, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
	
	НайденныеШаблоны = ШаблоныКодовМаркировкиПоОтбору(Настройки.ШаблоныКодовМаркировки, Отбор);
	
	Возврат НайденныеШаблоны;
	
КонецФункции

Функция КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки)
	
	ИмяСвойстваПозицииЗначения = "ПозицияЗначения";
	
	// Проверяем наличие идентификаторов применения в шаблоне кода маркировки
	Если ПараметрыОписанияКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		// Коды маркировки с GS1 предварительно обрабатываются методом БПО,
		// МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1,
		// из которого получается код маркировки со скобками
		НачинаетсяСоСкобки = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		
		Если НачинаетсяСоСкобки Тогда
			ИмяСвойстваПозицииЗначения = "ПозицияЗначенияСоСкобкой";
		КонецЕсли;
		
		// Проверку осуществляем с конца
		
		ТекущийИндекс = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки.Количество() - 1;
		Пока ТекущийИндекс >= 0 Цикл
			
			ОписаниеЭлементаКМ        = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ТекущийИндекс];
			ОписаниеПозицииЭлементаКМ = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[ОписаниеЭлементаКМ.Имя];
			
			Если НачинаетсяСоСкобки Тогда
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатораСоСкобкой - 1;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора + 2;
				Идентификатор         = СтрШаблон("(%1)", ОписаниеЭлементаКМ.Код);
			Иначе
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатора;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора;
				Идентификатор         = ОписаниеЭлементаКМ.Код;
			КонецЕсли;
			
			Если Идентификатор <> Сред(ПараметрыРазбораКодаМаркировки.КодМаркировки, ПозицияИдентификатора, ДлинаИдентификатора) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущийИндекс = ТекущийИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначенияЭлементовКМ = ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(ПараметрыРазбораКодаМаркировки.КодМаркировки,
		ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки,ИмяСвойстваПозицииЗначения, "ДлинаЗначения");
	
	ИменаПроверенныхЭлементовКМ = Новый Соответствие;
	ПроверятьАлфавитЭлементов   = ПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов;
	
	// Проверка табачной продукции и альтернативной табачной продукции
	СвойствоПриоритетнойПроверки = "МРЦСтрокой";
	Если ЗначенияЭлементовКМ[СвойствоПриоритетнойПроверки] <> Неопределено Тогда
		
		ИменаПроверенныхЭлементовКМ[СвойствоПриоритетнойПроверки] = Истина;
		
		ИндексЭлементаКМ   = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[СвойствоПриоритетнойПроверки].ПорядковыйНомерЭлемента - 1;
		ОписаниеЭлементаКМ = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ИндексЭлементаКМ];
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(
			ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки,
			ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВидыПродукции = Новый Массив;
		
		АльтернативныйТабак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
		Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(АльтернативныйТабак) <> Неопределено
			И (СоставКодаМаркировки.МРЦСтрокой = "000000" Или СоставКодаМаркировки.МРЦСтрокой = "AAAA")Тогда
			ВидыПродукции.Добавить(АльтернативныйТабак);
		КонецЕсли;
		Табак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(Табак) <> Неопределено Тогда
			ВидыПродукции.Добавить(Табак);
		КонецЕсли;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыОписанияКодаМаркировки.ВидыПродукции = ВидыПродукции;
		
	КонецЕсли;
	
	Для Каждого ОписаниеЭлементаКМ Из ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки Цикл
		
		Если ИменаПроверенныхЭлементовКМ[ОписаниеЭлементаКМ.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(
			ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки,
			ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов)
	
	Значение = ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя];
	
	Если ПроверятьАлфавитЭлементов Тогда
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Алфавит)
			И Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Значение, ОписаниеЭлементаКМ.Алфавит) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Знач Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки)
	
	Для Каждого ДанныеОбщегоМодуля Из ПараметрыОписанияКодаМаркировки.ОбщиеМодули Цикл
		Если Не ДанныеОбщегоМодуля.ОбщийМодуль.ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		ДанныеОбщегоМодуля.ОбщийМодуль.ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
	КонецЦикла;
	
	ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		СоставКодаМаркировки[ОписаниеЭлементаКМ.Имя] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра)
	
	// Можно добавить проверку, на необходимость
	Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
		ОбщийМодуль = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		Если ОбщийМодуль.ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ВидыПродукции)
	
	Если Не ФильтрПоВидуПродукции.Использовать Тогда
		Возврат Новый ФиксированныйМассив(ВидыПродукции);
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрПоВидуПродукции.ВидыПродукции Цикл
		Если ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			Результат.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

Функция ОбработатьРезультатНесколькихШаблонов(Результат, ДанныеРезультата)
	
	// Для табака может подойти два шаблона: GTIN+Серия+КодПроверки и GTIN+Серия+МРЦСтрокой+КодПроверки, берем с МРЦ
	Если Результат.Количество() = 2
		И Результат[0].ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		И Результат[1].ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		Если Результат[0].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[0];
			Возврат Истина;
		ИначеЕсли Результат[1].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[1];
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайденНедопустимыйСимволXML(Знач Текст)
	
	#Если НЕ ВебКлиент Тогда
	
	Возврат НайтиНедопустимыеСимволыXML(Текст) > 0;
	
	#Иначе
	
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
			Или КодСимвола > 10    И КодСимвола < 13
			Или КодСимвола > 13    И КодСимвола < 32
			Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции

Функция РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора, ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки)
	
	Если Не РезультатРазбора.Разобран Тогда
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатРазбора.ОписаниеОшибки) Тогда
		
		СодержитРазделительGS = Истина;
		КодМаркировки         = РезультатРазбора.ПредставлениеШтрихкода;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПродолжитьОбработкуКодаМаркировки = Ложь;
	
	ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.НекорректныйФорматКодМаркировки;
	ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
	
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		
		// Исходный код маркировки не известен
		КодМаркировкиДляСообщенияПользователю = ДанныеДляРазбора.ПредставлениеШтрихкода + "...";
		
	Иначе
		
		ПродолжитьОбработкуКодаМаркировки = Истина;
		
		РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
		
		// Сбрасываем признак GS1 и обрезаем код маркировки
		СодержитРазделительGS = Ложь;
		КодМаркировки         = Лев(ДанныеДляРазбора, СтрНайти(ДанныеДляРазбора, РазделительGS1) - 1);
		
		КодМаркировкиДляСообщенияПользователю = СтрЗаменить(ДанныеДляРазбора, РазделительGS1, "<GS>");;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректный формат код маркировки: %1'"), КодМаркировкиДляСообщенияПользователю)
		+ Символы.ПС + ПримечаниеКРезультатуРазбора.ТекстОшибки;
	
	МодульКонтекста.МодульОбщегоНазначения().СообщитьПользователю(ТекстОшибки);
	
	Возврат ПродолжитьОбработкуКодаМаркировки;
	
КонецФункции

#КонецОбласти

#Область РазборШтрихкодаGS1БезРазделителей

Процедура ПродолжитьРазборШтрихкодаGS1БезРазделителей(Штрихкод, РезультатРазбора, КодыGS1)
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода;
	
	СоответствиеИдентификаторовДат = Новый Соответствие;
	СоответствиеИдентификаторовДат.Вставить("11", Истина);
	СоответствиеИдентификаторовДат.Вставить("12", Истина);
	СоответствиеИдентификаторовДат.Вставить("13", Истина);
	СоответствиеИдентификаторовДат.Вставить("15", Истина);
	СоответствиеИдентификаторовДат.Вставить("17", Истина);
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыGS1[ИдентификаторПрименения];
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыGS1[ИдентификаторПрименения];
				Если ОписаниеКода = Неопределено Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.'"), ИдентификаторПрименения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОшибкаСовместногоПрименения0102 = Ложь;
		Если ИдентификаторПрименения = "01" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["02"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
		ИначеЕсли ИдентификаторПрименения = "02" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["01"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ОшибкаСовместногоПрименения0102 Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Идентификатор применения (02) использован вместе с идентификатором (01).'");
			Возврат;
		КонецЕсли;
		Если РезультатРазбора.ДанныеШтрихкода[ИдентификаторПрименения] <> Неопределено Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Идентификатор применения (%1) дублируется.'"), ИдентификаторПрименения);
				Возврат;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			Если Не ТолькоЦифрыВСтроке(ПоложениеДесятичнойТочкиСтрокой) Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Положение десятичной точки (%1) в идентификаторе (%2) задано не верно.'"), ПоложениеДесятичнойТочкиСтрокой, ИдентификаторПрименения);
				Возврат;
			КонецЕсли;
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
				Если Не ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		
		Если РезультатРазбора.ЗначениеПеременное = Неопределено
			И ОписаниеКода.ПеременнаяДлина > 0
			И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			РезультатРазбора.Разобран = Ложь;
			РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
			РезультатРазбора.ОписаниеКода = ОписаниеКода;
			РезультатРазбора.ЗначениеПеременное = ЗначениеПеременное;
			Возврат;
		КонецЕсли;
		
		Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
			
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
				Если Не ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + Значение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		// Контроль даты yyMMdd
		ОшибкаКонтроляДаты = Ложь;
		Если СоответствиеИдентификаторовДат[ИдентификаторПрименения] <> Неопределено Тогда
			Попытка
				Месяц = Число(Сред(Значение, 3, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			Если Месяц > 12 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
			Попытка
				День = Число(Сред(Значение, 5, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			Если День > 31 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ОшибкаКонтроляДаты Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Ошибка формата даты.'");
			Возврат;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
		// Новый идентификатор применения
		Если ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) Тогда
			РезультатРазбора.ЗначениеПеременное = Неопределено;
			РезультатРазбора.ЗначениеПеременноеОбработано = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатРазбора.ОшибкаРазбора = Ложь;
	РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

Функция ВариантыРазбораШтрихкодаGS1БезРазделителей(Штрихкод) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ЗначениеПеременное");
	РезультатРазбора.Вставить("ЗначениеПеременноеОбработано", Ложь);
	РезультатРазбора.Вставить("ОписаниеКода");
	РезультатРазбора.Вставить("ОшибкаРазбора", Ложь);
	РезультатРазбора.Вставить("Разобран", Ложь);
	РезультатРазбора.Вставить("ОписаниеОшибки");
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода", Новый Соответствие);
	
	КодыGS1 = МенеджерОборудованияМаркировкаКлиентСерверПовтИсп.КодыGS1();
	
	ЧастиШтрихкода = Новый Массив;
	ЧастиШтрихкода.Добавить(Штрихкод);
	
	ЭлементСтека = Новый Структура;
	ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
	ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбора);
	
	Стек = Новый Массив;
	Стек.Добавить(ЭлементСтека);
	
	Пока Стек.Количество() > 0 Цикл
		
		ЭлементСтека = Стек[0];
		Стек.Удалить(0);
		
		Индекс = 0; 
		Для Каждого ЧастьШтрихкода Из ЭлементСтека.ЧастиШтрихкода Цикл
			
			Индекс = Индекс + 1;
			
			ЭтоПоследняяЧасть = (ЭлементСтека.ЧастиШтрихкода.Количество() = Индекс);
			
			РезультатРазбора = ЭлементСтека.РезультатРазбора;
			
			ПродолжитьРазборШтрихкодаGS1БезРазделителей(
				ЧастьШтрихкода,
				РезультатРазбора,
				КодыGS1);
			
			Если РезультатРазбора.ОшибкаРазбора Тогда
				Прервать;
			ИначеЕсли РезультатРазбора.Разобран И ЭтоПоследняяЧасть Тогда
				
				Если ВозвращаемоеЗначение = Неопределено Тогда
					ВозвращаемоеЗначение = Новый Массив;
				КонецЕсли;
				
				ЭлементРезультата = Новый Структура;
				ЭлементРезультата.Вставить("РезультатРазбора",       РезультатРазбора);
				ЭлементРезультата.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
				
				ВозвращаемоеЗначение.Добавить(ЭлементРезультата);
				Прервать;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
				
				МаксимальнаяДлинаЗначенияПеременнойДлины = Мин(
					РезультатРазбора.ОписаниеКода.ПеременнаяДлина, СтрДлина(РезультатРазбора.ЗначениеПеременное));
				
				Для ВариантДлины = 1 По МаксимальнаяДлинаЗначенияПеременнойДлины Цикл
					
					Часть1 = РезультатРазбора.ОписаниеКода.Код + Лев(РезультатРазбора.ЗначениеПеременное, ВариантДлины);
					Часть2 = Сред(РезультатРазбора.ЗначениеПеременное, ВариантДлины + 1);
					
					Если ЗначениеЗаполнено(Часть2) И СтрДлина(Часть2) <= 2 Тогда
						Продолжить;
					КонецЕсли;
					
					ЧастиШтрихкода = Новый Массив;
					ЧастиШтрихкода.Добавить(Часть1);
					Если ЗначениеЗаполнено(Часть2) Тогда
						ЧастиШтрихкода.Добавить(Часть2);
					КонецЕсли;
					
					РезультатРазбораПродолжение = Новый Структура;
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременное",           РезультатРазбора.ЗначениеПеременное);
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременноеОбработано", Истина);
					РезультатРазбораПродолжение.Вставить("ОписаниеКода");
					РезультатРазбораПродолжение.Вставить("ОшибкаРазбора", Ложь);
					РезультатРазбораПродолжение.Вставить("Разобран", Ложь);
					РезультатРазбораПродолжение.Вставить("ОписаниеОшибки");
					РезультатРазбораПродолжение.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
					РезультатРазбораПродолжение.Вставить("ДанныеШтрихкода", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РезультатРазбора.ДанныеШтрихкода));
					
					ЭлементСтека = Новый Структура;
					ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
					ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбораПродолжение);
					
					Стек.Добавить(ЭлементСтека);
					
				КонецЦикла
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТипGS1Число()
	
	Возврат "N";
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - Строка - проверяемая строка.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки)
	
	Если СтрДлина(СтрокаПроверки) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		Если (КодСимвола < 48) Или (КодСимвола > 57) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
