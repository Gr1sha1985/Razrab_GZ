
#Область СлужебныеПроцедурыИФункции

#Область НалоговыйАгент

// Возвращает таблицу задолженности по начисленному НДС в качестве налогового агента на конец дня.
// Порядок получения задолженности и распределения её по срокам уплаты см. в ТекстЗапросаЗадолженностьНалоговогоАгента().
//
// Параметры:
//        РеквизитыДокумента - Структура
//            * ДатаДокумента   - Дата - дата, на конец которой необходимо получить задолженность.
//            * Организация     - СправочникСсылка.Организации - организация по которой необходимо получить задолженность.
//            * ТекущийДокумент - ДокументСсылка.СписаниеСРасчетногоСчета, ДокументСсылка.РасходныйКассовыйОрдер 
//                              - документ, движения которого по погашению задолженности (в этот день) необходимо не учитывать.
// Возвращаемое значение: 
//        ЗадолженностьПоСрокам - ТаблицаЗначений - таблица задолженности по счету 68.32.
//            * Контрагент       - СправочникСсылка.Контрагенты - аналитика задолженности по 68.32.
//            * Договор          - СправочникСсылка.ДоговорыКонтрагентов - аналитика задолженности по 68.32.
//            * ДокументРасчетов - см. вид субконто ДокументыРасчетовСКонтрагентами - аналитика задолженности по 68.32.
//            * Сумма            - Число(15,2) - сумма задолженности.
//            * СрокУплаты       - Дата - срок уплаты задолженности в соответствии с НК РФ.
Функция ЗадолженностьНалоговогоАгентаПоНДС(РеквизитыДокумента) Экспорт
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков",
		Новый Граница(КонецДня(РеквизитыДокумента.ДатаДокумента), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",      РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("ТекущийДокумент" , РеквизитыДокумента.ТекущийДокумент);
	Запрос.УстановитьПараметр("ВидыСубконто",     ВидыСубконто);
	Запрос.Текст = ТекстЗапросаЗадолженностьНалоговогоАгента();
	МассивЗадолженностей = Запрос.ВыполнитьПакет();
	
	Возврат РаспределитьЗадолженностьПоСрокамУплаты(МассивЗадолженностей, РеквизитыДокумента);
	
КонецФункции

Функция ТекстЗапросаЗадолженностьНалоговогоАгента()
	
	// Получаем начисленный налог, подлежащий уплате в качестве налогового агента
	// с учетом ситуации, когда платежный документ проведен.
	
	// Описание пакетов:
	// - таблица движений субконто текущего документа,
	// - данные движений по основной таблице регистра бухгалтерии текущего документа, соединенные с таблицей субконто,
	// - остаток по счету 68.32, дополненный движениями текущего документа,
	// - сгруппированная таблица остатков по 68.32 с аналитикой по виду договора налогового агента,
	// - налог, подлежащий уплате в день начисления (нерезидент, эл. услуги),
	// - налог, подлежаший уплате в течение квартала, следующего за кварталом начисления (аренда, продажа имущества)
	// по этой таблице сроки уплаты налога будут определены в РаспределитьЗадолженностьПоСрокамУплаты().
	
	Возврат
	"ВЫБРАТЬ
	|	ХозрасчетныйСубконто.НомерСтроки,
	|	ХозрасчетныйСубконто.Вид,
	|	ХозрасчетныйСубконто.Значение
	|ПОМЕСТИТЬ ЗначенияСубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Регистратор = &ТекущийДокумент
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.НомерСтроки,
	|	ХозрасчетныйСубконто.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Значение КАК Субконто1,
	|	Договоры.Значение КАК Субконто2,
	|	ДокументыРасчетов.Значение КАК Субконто3,
	|	Хозрасчетный.Сумма КАК СуммаОстатокКт
	|ПОМЕСТИТЬ ДвиженияТекущегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК Договоры
	|		ПО Хозрасчетный.НомерСтроки = Договоры.НомерСтроки
	|			И (Договоры.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК Контрагенты
	|		ПО Хозрасчетный.НомерСтроки = Контрагенты.НомерСтроки
	|			И (Контрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК ДокументыРасчетов
	|		ПО Хозрасчетный.НомерСтроки = ДокументыРасчетов.НомерСтроки
	|			И (ДокументыРасчетов.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|ГДЕ
	|	Хозрасчетный.Регистратор = &ТекущийДокумент
	|	И Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И Хозрасчетный.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность6832.Субконто1 КАК Субконто1,
	|	Задолженность6832.Субконто2 КАК Субконто2,
	|	Задолженность6832.Субконто3 КАК Субконто3,
	|	Задолженность6832.СуммаОстатокКт КАК СуммаОстатокКт
	|ПОМЕСТИТЬ Задолженность6832Предварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента), &ВидыСубконто, Организация = &Организация) КАК Задолженность6832
	|ГДЕ
	|	Задолженность6832.СуммаОстатокКт > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияТекущегоДокумента.Субконто1,
	|	ДвиженияТекущегоДокумента.Субконто2,
	|	ДвиженияТекущегоДокумента.Субконто3,
	|	ДвиженияТекущегоДокумента.СуммаОстатокКт
	|ИЗ
	|	ДвиженияТекущегоДокумента КАК ДвиженияТекущегоДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность6832.Субконто1 КАК Субконто1,
	|	Задолженность6832.Субконто2 КАК Субконто2,
	|	Задолженность6832.Субконто3 КАК Субконто3,
	|	СУММА(Задолженность6832.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	ДоговорыКонтрагентов.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ Задолженность6832
	|ИЗ
	|	Задолженность6832Предварительная КАК Задолженность6832
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Задолженность6832.Субконто2 = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность6832.Субконто1,
	|	Задолженность6832.Субконто3,
	|	Задолженность6832.Субконто2,
	|	ДоговорыКонтрагентов.ВидАгентскогоДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидАгентскогоДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность6832.Субконто1 КАК Контрагент,
	|	Задолженность6832.Субконто2 КАК Договор,
	|	Задолженность6832.Субконто3 КАК ДокументРасчетов,
	|	Задолженность6832.СуммаОстатокКт КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, ДЕНЬ)
	|	КОНЕЦ КАК СрокУплаты
	|ИЗ
	|	Задолженность6832 КАК Задолженность6832
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Задолженность6832.Субконто3 = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	Задолженность6832.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность6832.Субконто1 КАК Контрагент,
	|	Задолженность6832.Субконто2 КАК Договор,
	|	Задолженность6832.Субконто3 КАК ДокументРасчетов,
	|	СчетФактура.СуммаНДСДокумента КАК ИсчисленоНДС,
	|	Задолженность6832.СуммаОстатокКт КАК ОстатокНДС,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.Дата, КВАРТАЛ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ)
	|	КОНЕЦ КАК ПериодОплатыКонтрагенту
	|ИЗ
	|	Задолженность6832 КАК Задолженность6832
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Задолженность6832.Субконто3 = ДанныеПервичныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура
	|		ПО (СчетФактура.ДокументОснование = Задолженность6832.Субконто3)
	|ГДЕ
	|	Задолженность6832.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Аренда), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияИмущества))
	|	И НЕ СчетФактура.ПометкаУдаления"
	
КонецФункции

Функция РаспределитьЗадолженностьПоСрокамУплаты(МассивЗадолженностей, РеквизитыДокумента)
	
	ЗадолженностьПоСрокам = МассивЗадолженностей[4].Выгрузить();
	ЗадолженностьПоАренде = МассивЗадолженностей[5].Выгрузить();
	
	ТекущийКвартал = НачалоКвартала(РеквизитыДокумента.ДатаДокумента);
	
	// Задолженность по аренде разобъем на суммы по срокам уплаты.
	Для Каждого СтрокаТаблицы Из ЗадолженностьПоАренде Цикл
		
		// Определим квартал уплаты налога, сумму ежемесячного платежа.
		КварталУплатыНалога = ДобавитьМесяц(СтрокаТаблицы.ПериодОплатыКонтрагенту, 3);
		ЕжемесячныйПлатеж = Окр(СтрокаТаблицы.ИсчисленоНДС/3, 2);
		ПлатежПоследнегоМесяца = Мин(СтрокаТаблицы.ИсчисленоНДС - 2 * ЕжемесячныйПлатеж, СтрокаТаблицы.ОстатокНДС);
		
		// Чтобы учесть возможные переплаты - начнем с конца.
		// Третий платеж
		НоваяСтрокаЗадолженности = ЗадолженностьПоСрокам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадолженности, СтрокаТаблицы);
		НоваяСтрокаЗадолженности.Сумма      = ПлатежПоследнегоМесяца;
		НоваяСтрокаЗадолженности.СрокУплаты = СрокУплатыНалогаВБюджет(ДобавитьМесяц(КварталУплатыНалога, 2));
		СтрокаТаблицы.ОстатокНДС = СтрокаТаблицы.ОстатокНДС - ПлатежПоследнегоМесяца;
		Если СтрокаТаблицы.ОстатокНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Второй платеж
		НоваяСтрокаЗадолженности = ЗадолженностьПоСрокам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадолженности, СтрокаТаблицы);
		НоваяСтрокаЗадолженности.Сумма = Мин(ЕжемесячныйПлатеж, СтрокаТаблицы.ОстатокНДС);
		НоваяСтрокаЗадолженности.СрокУплаты = СрокУплатыНалогаВБюджет(ДобавитьМесяц(КварталУплатыНалога, 1));
		СтрокаТаблицы.ОстатокНДС = СтрокаТаблицы.ОстатокНДС - НоваяСтрокаЗадолженности.Сумма;
		Если СтрокаТаблицы.ОстатокНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Первый платеж
		НоваяСтрокаЗадолженности = ЗадолженностьПоСрокам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадолженности, СтрокаТаблицы);
		НоваяСтрокаЗадолженности.Сумма = СтрокаТаблицы.ОстатокНДС;
		НоваяСтрокаЗадолженности.СрокУплаты = СрокУплатыНалогаВБюджет(КварталУплатыНалога);
		
	КонецЦикла;
	
	ЗадолженностьПоСрокам.Сортировать("СрокУплаты, Сумма Убыв");
	
	Возврат ЗадолженностьПоСрокам;
	
КонецФункции

Функция СрокУплатыНалогаВБюджет(МесяцУплаты)
	
	День = 24 * 60 * 60;
	ДатаУплатыНалога = НачалоДня(МесяцУплаты) + 24 * День;
		
	// Перенесем на рабочие дни
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат КонецДня(ДатаУплатыНалога);
	КонецЕсли; 
		
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить(ДатаУплатыНалога);
		
	ГрафикПереноса = КалендарныеГрафики.ДатыБлижайшихРабочихДней(
		ПроизводственныйКалендарь, 
		ИсходныеДаты,
		Ложь,
		Ложь,
		Истина);
	
	ДатаПереноса = ?(ЗначениеЗаполнено(ГрафикПереноса[ДатаУплатыНалога]), 
		ГрафикПереноса[ДатаУплатыНалога], ДатаУплатыНалога);
	
	Возврат КонецДня(ДатаПереноса);
	
КонецФункции

#КонецОбласти

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияОтгрузкаКомиссионеру(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	СформироватьДвиженияОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если РаздельныйУчетНДС Тогда

		СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеОтгруженныхТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

	СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация"               // <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при отгрузке товаров определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе отгрузки
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "СтранаПроисхождения,"
	+ "НомерГТД,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СтавкаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитыРегистратора 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Регистратор, "ДоговорКонтрагента, ВидОперации");
		ВидОперацииРегистратора = РеквизитыРегистратора.ВидОперации;
		ДоговорКонтрагента		= РеквизитыРегистратора.ДоговорКонтрагента;
		
		ОтгрузкаБезПереходаПраваСобственности = ВидОперацииРегистратора = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
		ДоговорСКомиссионером = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") =  Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		
		Если ОтгрузкаБезПереходаПраваСобственности Тогда
			НачислятьНДС = НачислятьНДСПоОтгрузке;
		ИначеЕсли ДоговорСКомиссионером Тогда 
			НачислятьНДС = Ложь;
		Иначе
			НачислятьНДС = Истина;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		НачислятьНДС = НЕ НачислятьНДСПоОтгрузке;
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		НачислятьНДС = Истина;
	Иначе	
		НачислятьНДС = Ложь;
	КонецЕсли;

	СпособОценкиМПЗ 		= УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям 	= СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;

	Если РаздельныйУчетНДС Тогда

		ОпределитьВключениеИсключениеНДСИзСтоимости(СписанныеПартииНДС, Реквизиты.НДСВСтоимостиТоваров, Реквизиты);
		ОпределитьПоставщиковПоСписаннымПартиямНДС(СписанныеПартииНДС, Реквизиты.Период);
		ОпределитьИсправленныеСчетаФактуры(СписанныеПартииНДС, Реквизиты);
		
		СписанныеПартииНДС.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		СписанныеПартииНДС.ЗагрузитьКолонку(СписанныеПартииНДС.ВыгрузитьКолонку("Поставщик"), "Покупатель");
		
		Если ВедетсяУчетПоПартиям Тогда
			СписанныеТоварыБухУчет.Индексы.Добавить("ИмяСписка,НомерСтроки,Партия");
		Иначе
			СписанныеТоварыБухУчет.Индексы.Добавить("ИмяСписка,НомерСтроки");
		КонецЕсли;
		
		// Действия по включению НДС в стоимость

		СтрокиВключениеВСтоимость = СписанныеПартииНДС.НайтиСтроки(
			Новый Структура("НДСБылВключенВСтоимость,НДСВключенВСтоимость", Ложь, Истина));
		
		ПустаяТаблицаСписанныеПартии = СписанныеПартииНДС.СкопироватьКолонки();
		ПустаяТаблицаСписанныеПартии.Колонки.Добавить("СуммаБезНДС");
		
		ОпределитьСуммуСписанияНаРасходыРанееПринятогоКВычетуНДС(СтрокиВключениеВСтоимость, Реквизиты);

		ТаблицаУменьшениеВычета = ПодготовитьТаблицуУменьшениеВычетаПриВключенииВСтоимость(СтрокиВключениеВСтоимость, ПустаяТаблицаСписанныеПартии);
		ТаблицаВосстановление   = ПодготовитьТаблицуВосстановлениеПриВключенииВСтоимость(СтрокиВключениеВСтоимость, ПустаяТаблицаСписанныеПартии);
		ЕстьУменьшениеВычета    = ТаблицаУменьшениеВычета.Количество() > 0;
		ЕстьВосстановление      = ТаблицаВосстановление.Количество() > 0;

		Если ЕстьУменьшениеВычета Тогда

			УчетНДС.СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ТаблицаУменьшениеВычета, Движения,, Отказ);
			СформироватьПроводкиВключениеНДСВСтоимостьЗапасов(
				ТаблицаУменьшениеВычета, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

		КонецЕсли;

		Если ЕстьВосстановление Тогда
			
			Если ВерсияУчетаНДС = 1 Тогда
				
				СформироватьДвиженияНДСНачисленныйВосстановлениеНДС(ТаблицаВосстановление, Движения, Отказ);
				
			Иначе
				
				СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДС(
					ТаблицаВосстановление, Реквизиты, Движения, Отказ);
				
			КонецЕсли;
			
			СформироватьПроводкиВключениеНДСВРасходы(
				ТаблицаВосстановление, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

		КонецЕсли;		

		// Действия по исключению НДС Из стоимости

		ТаблицаИсключениеИзСтоимости = СписанныеПартииНДС.Скопировать(
			Новый Структура("НДСБылВключенВСтоимость,НДСВключенВСтоимость", Истина, Ложь));
		ЕстьИсключениеИзСтоимости = ТаблицаИсключениеИзСтоимости.Количество() > 0;

		Если ЕстьИсключениеИзСтоимости Тогда
			СформироватьПроводкиИсключениеНДСИзСтоимости(
				ТаблицаИсключениеИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
			ТаблицаНДСПредъявленныйИсключениеИзСтоимости = ПодготовитьТаблицуНДСПредъявленныйИсключениеНДСИзСтоимости(
				ТаблицаИсключениеИзСтоимости, Реквизиты);
			СформироватьДвиженияНДСПредъявленныйИсключениеНДСИзСтоимости(
				ТаблицаНДСПредъявленныйИсключениеИзСтоимости, Движения, Отказ);
		КонецЕсли;

		// Действия по реализации со ставкой 0%

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("СтавкаНДСДокумента",                Перечисления.СтавкиНДС.НДС0);
		СтруктураОтбора.Вставить("БлокироватьДоПодтвержденияСтавки0", Истина);
		
		СписанныеПартииНДС.Индексы.Добавить("СтавкаНДСДокумента,БлокироватьДоПодтвержденияСтавки0");
		СписанныеПартииСтавка0 = СписанныеПартииНДС.Скопировать(СтруктураОтбора);
			
		ЕстьСтавка0 = СписанныеПартииСтавка0.Количество() > 0;

		Если ЕстьСтавка0 И НачислятьНДС Тогда
			СформироватьДвиженияНДСПредъявленныйРеализация0ПредполагаетсяСтавка0(
				СписанныеПартииСтавка0, Реквизиты, Движения, Отказ);
			СформироватьПроводкиНДСПредъявленныйРеализация0(СписанныеПартииСтавка0, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

	СформироватьДвиженияНДСПоПриобретеннымЦенностямВыбытиеТоваров(СписанныеПартииНДС, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьТаблицуУменьшениеВычетаПриВключенииВСтоимость(СтрокиВключениеВСтоимость, ПустаяТаблицаСписанныеПартии)

	ТаблицаУменьшениеВычета = ПустаяТаблицаСписанныеПартии.СкопироватьКолонки();

	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл

		СтоимостьУменьшениеВычета = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		НДСУменьшениеВычета       = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;

		Если СтоимостьУменьшениеВычета > 0
			ИЛИ НДСУменьшениеВычета > 0 Тогда

			НоваяСтрока = ТаблицаУменьшениеВычета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СтоимостьУменьшениеВычета - НДСУменьшениеВычета;
			НоваяСтрока.НДС         = НДСУменьшениеВычета;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаУменьшениеВычета;

КонецФункции

Функция ПодготовитьТаблицуВосстановлениеПриВключенииВСтоимость(СтрокиВключениеВСтоимость, ПустаяТаблицаСписанныеПартии)

	ТаблицаВосстановление = ПустаяТаблицаСписанныеПартии.СкопироватьКолонки();

	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл

		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			НоваяСтрока = ТаблицаВосстановление.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СтоимостьСписанияНаРасходы - СтрокаТаблицы.НДССписанияНаРасходы;
			НоваяСтрока.НДС         = СтрокаТаблицы.НДССписанияНаРасходы;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаВосстановление;

КонецФункции

// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ

// Формирование движений при оприходовании товаров
//
Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТовары, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		
		СформироватьПроводкиПоступлениеГТД(
			ПодготовитьПараметрыОприходованиеТоваров_НомераГТД(ТаблицаНомераГТД),
			Реквизиты,
			Движения,
			Отказ);
		
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаНомераГТД, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
	
	УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
		
	Если РаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияОприходованиеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыОприходованиеТоваров_НомераГТД(ТаблицаНомераГТД)
	
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание" 	          // <Строка,150>
	;
	НомераГТД = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНомераГТД, СписокОбязательныхКолонок);
	
	Возврат НомераГТД;
	
КонецФункции

Функция ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТовары, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                   // <ДокументСсылка>
	+ "Период,"                        // <Дата>
	+ "Организация,"                   // <СправочникСсылка.Организации>
	+ "Склад,"                         // <СправочникСсылка.Склады>
	+ "Подразделение"                  // <СправочникСсылка.ПодразделенияОрганизаций>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Параметры.Реквизиты.Колонки.Добавить("Контрагент");
		
	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "Количество"               // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Параметры.Вставить("НомераГТД", ПодготовитьПараметрыОприходованиеТоваров_НомераГТД(ТаблицаНомераГТД));

	Возврат Параметры;

КонецФункции

Функция ВыделятьНДСприПоступленииТоваровУслуг(Организация, Дата) Экспорт
	
	СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, Дата);
	
	ВыделятьНДС = СистемаНалогообложения <> Перечисления.СистемыНалогообложения.ОсобыйПорядок
		И СистемаНалогообложения <> Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход
		И Не (СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная И УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата));
	
	Возврат ВыделятьНДС;
	
КонецФункции

// ПЕРЕМЕЩЕНИЕ ТОВАРОВ

// Формирование движений по перемещению товаров
//
Процедура СформироватьДвиженияПеремещениеТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, СписанныеПартииНДС, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	УчетПоПродажнойСтоимости = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ОтправительНТТПоПродажнойСтоимости = УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
			
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет) 
	   И Не ОтправительНТТПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПеремещениеТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	ПолучательНТТПоПродажнойСтоимости = УчетПоПродажнойСтоимости
		И Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	
	Если РаздельныйУчетНДС Тогда
		
		Если ОтправительНТТПоПродажнойСтоимости Тогда
			
			УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеИзНТТ(
				Параметры.Товары, Реквизиты, Движения, Отказ);
			
		Иначе
			
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
			
			Если НЕ ПолучательНТТПоПродажнойСтоимости Тогда
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеНаДругойСклад(
					СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли НЕ УпрощенныйУчетНДС И НЕ ОтправительНТТПоПродажнойСтоимости Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "ПодразделениеПолучатель,"  // <Ссылка на справочник подразделений>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "ТипСкладаОтправителя,"     // <ПеречислениеСсылка.ТипыСкладов>
	+ "СкладПолучатель,"          // <СправочникСсылка.Склады>
	+ "ТипСкладаПолучателя,"       // <ПеречислениеСсылка.ТипыСкладов>
	+ "Контрагент"				  // <СправочникСсылка.Контрагенты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы товаров документа:
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СкладПолучатель,"
	+ "СчетУчетаПолучатель,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровНедостача(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		
		СформироватьПроводкиСписаниеГТД(
			ПодготовитьПараметрыСписаниеТоваровНедостача_Товары(ТаблицаТовары),
			Реквизиты,
			Движения,
			Отказ);
		
		Возврат;
	КонецЕсли;
		
	Параметры = ПодготовитьПараметрыСписаниеТоваровНедостача(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если РаздельныйУчетНДС Тогда

		СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровНедостача_Товары(ТаблицаТовары)
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СтранаПроисхождения,"
	+ "НомерГТД"
	;
	Товары = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок);
		
	Товары.Колонки.Добавить("НовыйСпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	Товары.ЗаполнитьЗначения(Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, "НовыйСпособУчетаНДС");
	
	Возврат Товары;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеТоваровНедостача(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение"             // <Ссылка на справочник подразделений>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Списание товаров по причине недостачи или потери - операция, необлагаемая НДС,
	// при использовании товаров в необлагаемой НДС деятельности сумма НДС включается в стоимость товаров
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "НДСвСтоимостиТоваров");

	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь
	// НДС, ранее принятый к вычету, при недостаче всегда относится на счет 94 "Недостачи и потери"
	Параметры.Реквизиты.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "СчетСписанияНДС");
	Параметры.Реквизиты.Колонки.Добавить("СубконтоСписанияНДС1", Новый ОписаниеТипов("Неопределено"));
	Параметры.Реквизиты.Колонки.Добавить("СубконтоСписанияНДС2", Новый ОписаниеТипов("Неопределено"));
	Параметры.Реквизиты.Колонки.Добавить("СубконтоСписанияНДС3", Новый ОписаниеТипов("Неопределено"));

	// Подготовка таблицы товаров документа.
	Параметры.Вставить("Товары", ПодготовитьПараметрыСписаниеТоваровНедостача_Товары(ТаблицаТовары));
	
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;

	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровНаРасходы(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		
		СформироватьПроводкиСписаниеГТД(
			ПодготовитьПараметрыСписаниеТоваровНаРасходы_Товары(ТаблицаТовары),
			Реквизиты,
			Движения,
			Отказ);
		
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровНаРасходы(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если РаздельныйУчетНДС Тогда

		СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыСписаниеТоваровНаРасходы(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровНаРасходы_Товары(ТаблицаТовары)
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СтранаПроисхождения,"
	+ "НомерГТД,"
	+ "НовыйСпособУчетаНДС"
	;
	Товары = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок);
	
	Возврат Товары;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеТоваровНаРасходы(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "НДСвСтоимостиТоваров,"     // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров>
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Контрагент,"			      // <СправочникСсылка.Контрагенты>
	+ "СписыватьНДСнаКорСчетИАналитикуТовара" // <Булево> - использовать для списания на расходы ранее принятого к вычету НДС
	                                          // кор.счет и аналитику списания товара в бух.учете
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы товаров документа.
	Параметры.Вставить("Товары", ПодготовитьПараметрыСписаниеТоваровНаРасходы_Товары(ТаблицаТовары));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если РаздельныйУчетНДС Тогда

		СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства     = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение"             // <Ссылка на справочник подразделений>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		
		СформироватьПроводкиСписаниеГТД(
			ПодготовитьПараметрыКомплектацияТоваров_Товары(ТаблицаТовары),
			Реквизиты,
			Движения,
			Отказ);
		
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если РаздельныйУчетНДС Тогда

		УчетНДСПереопределяемый.СформироватьДвиженияКомплектацияТоваров(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
		Параметры.Товары.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства     = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыКомплектацияТоваров_Товары(ТаблицаТовары)
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "СтранаПроисхождения,"
	+ "НомерГТД"
	;
	Товары = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок);
	
	Возврат Товары;
	
КонецФункции

Функция ПодготовитьПараметрыКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Склад,"                    // <СправочникСсылка.Склады>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Комплект,"                 // <СправочникСсылка.Номенклатура>
	+ "КоличествоКомплектов,"     // <Число,15,3>
	+ "СчетУчетаКомплектов,"      // <ПланСчетовСсылка.Хозрасчетный>
	+ "Контрагент"       		  // <СправочникСсылка.Контрагенты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы товаров документа.
	Параметры.Вставить("Товары", ПодготовитьПараметрыКомплектацияТоваров_Товары(ТаблицаТовары));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаТоварыСГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСписанныеТоварыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		
		СформироватьПроводкиПоступлениеГТД(
			ПодготовитьПараметрыРазукомплектацияТоваров_ТоварыСГТД(ТаблицаТоварыСГТД),
			Реквизиты,
			Движения,
			Отказ);
		
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаТоварыСГТД, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьПроводкиПоступлениеГТД(Параметры.ТоварыСГТД, Реквизиты, Движения, Отказ);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если РаздельныйУчетНДС Тогда

		УчетНДСПереопределяемый.СформироватьДвиженияРазукомплектацияТоваров(
			Параметры.Комплектующие, Параметры.КомплектующиеБухУчет, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	ИначеЕсли НЕ УпрощенныйУчетНДС Тогда

		ТаблицаКомплекта = Параметры.Комплектующие.СкопироватьКолонки();
		НоваяСтрока = ТаблицаКомплекта.Добавить();
		НоваяСтрока.ИмяСписка    = "Комплектующие";
		НоваяСтрока.Номенклатура = Реквизиты.Комплект;
		НоваяСтрока.Количество   = Реквизиты.КоличествоКомплектов;
		НоваяСтрока.СчетУчета    = Реквизиты.СчетУчетаКомплектов;
		НоваяСтрока.НомерСтрокиДокумента = 1;
		
		УчетНДС.ЗаполнитьВидыЦенностей(ТаблицаКомплекта, Неопределено, "СчетУчета");
		ТаблицаКомплекта.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства     = ТаблицаКомплекта.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
			ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыРазукомплектацияТоваров_ТоварыСГТД(ТаблицаТоварыСГТД)
	
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	ТоварыСГТД = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТоварыСГТД, СписокОбязательныхКолонок);
	
	Возврат ТоварыСГТД;
	
КонецФункции

Функция ПодготовитьПараметрыРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаТоварыСГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "Склад,"                    // <СправочникСсылка.Склады>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Комплект,"                 // <СправочникСсылка.Номенклатура>
	+ "КоличествоКомплектов,"     // <Число,15,3>
	+ "СчетУчетаКомплектов,"      // <ПланСчетовСсылка.Хозрасчетный>
	+ "Контрагент"       		  // <СправочникСсылка.Контрагенты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы комплектующих:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "ДоляСтоимости,"
	+ "СчетУчета,"
	+ "СтранаПроисхождения,"
	+ "НомерГТД"
	;
	Параметры.Вставить("Комплектующие", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКомплектующие, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));
			
	КомплектующиеБухУчет = Параметры.СписанныеТоварыБухУчет;
	КомплектующиеБухУчет.ЗаполнитьЗначения(1, "НомерСтроки");
	
	Параметры.Вставить("КомплектующиеБухУчет", КомплектующиеБухУчет);

	// Подготовка таблицы ТоварыСГТД
	Параметры.Вставить("ТоварыСГТД", ПодготовитьПараметрыРазукомплектацияТоваров_ТоварыСГТД(ТаблицаТоварыСГТД));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПередачаМатериаловВЭксплуатацию(ТаблицаМатериалы, ТаблицаСписанныеМатериалыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМатериалы)
	 Или Не ЗначениеЗаполнено(ТаблицаСписанныеМатериалыБухУчет)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если Не ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 1
		И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период)
	 Или Не УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПередачаМатериаловВЭксплуатацию(ТаблицаМатериалы, ТаблицаСписанныеМатериалыБухУчет, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];

	СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.Материалы, Параметры.СписанныеМатериалыБухУчет, Реквизиты, Отказ);
	УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеМатериалыБухУчет, Реквизиты, Движения, Отказ);
	УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПередачаМатериаловВЭксплуатацию(
		СписанныеПартииНДС, Параметры.Материалы, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыПередачаМатериаловВЭксплуатацию(ТаблицаМатериалы, ТаблицаСписанныеМатериалыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение"             // <Ссылка на справочник подразделений>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы материалов документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "СпособОтраженияРасходов,"
	+ "СчетУчета,"
	+ "Количество"
	;
	Параметры.Вставить("Материалы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМатериалы, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных материалов по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеМатериалыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеМатериалыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОтражениеРасходовПередачаМатериаловВЭксплуатацию(ТаблицаМатериалы) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Материалы", ТаблицаМатериалы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Материалы.ИмяСписка КАК ИмяСписка,
	|	Материалы.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	Материалы.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	&Материалы КАК Материалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.ИмяСписка КАК ИмяСписка,
	|	Материалы.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	СпособыОтраженияРасходов.НомерСтроки КАК НомерСтроки,
	|	СпособыОтраженияРасходов.СчетЗатрат КАК СчетЗатрат,
	|	СпособыОтраженияРасходов.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
	|	СпособыОтраженияРасходов.Субконто1 КАК Субконто1,
	|	СпособыОтраженияРасходов.Субконто2 КАК Субконто2,
	|	СпособыОтраженияРасходов.Субконто3 КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходов.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходов.Субконто1
	|		КОГДА СпособыОтраженияРасходов.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходов.Субконто2
	|		КОГДА СпособыОтраженияРасходов.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияРасходов.Субконто3
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	СпособыОтраженияРасходов.Коэффициент КАК Коэффициент
	|ИЗ
	|	Материалы КАК Материалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходов
	|		ПО Материалы.СпособОтраженияРасходов = СпособыОтраженияРасходов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтрокиДокумента,
	|	НомерСтроки";

	ОтражениеРасходов = Запрос.Выполнить().Выгрузить();
	// Дополнительные колонки для распределения сумм списанных партий
	ОтражениеРасходов.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ОтражениеРасходов.Колонки.Добавить("НДС",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Возврат ОтражениеРасходов;

КонецФункции

Функция ПолучитьТаблицуСписанныеПартииНДС(Товары, СписанныеТоварыБухУчет, Реквизиты, Отказ) Экспорт

	СписанныеПартииНДС = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПоПриобретеннымЦенностям");

	СписанныеПартииНДС.Колонки.Добавить("СтавкаНДСДокумента",
		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	СписанныеПартииНДС.Колонки.Добавить("ИмяСписка",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СписанныеПартииНДС.Колонки.Добавить("НомерСтрокиДокумента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	СписанныеПартииНДС.Колонки.Добавить("ДатаСобытия",
		Новый ОписаниеТипов("Дата"));
	СписанныеПартииНДС.Колонки.Добавить("НДСБылВключенВСтоимость",
		Новый ОписаниеТипов("Булево"));
	СписанныеПартииНДС.Колонки.Добавить("СтоимостьСписанияНаРасходы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("НДССписанияНаРасходы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("СтрокаКУменьшениюВычетаПриВключенииВСтоимость",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	СписанныеПартииНДС.Колонки.Добавить("СтрокаКВосстановлениюПриВключенииВСтоимость",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));

	// Документ отгрузки для регистра "НДС предъявленный, реализация 0"
	СписанныеПартииНДС.Колонки.Добавить("ДокументОтгрузки", Документы.ТипВсеСсылки());
	
	// Признак необходимости блокировки вычета до подтверждения ставки 0%
	СписанныеПартииНДС.Колонки.Добавить("БлокироватьДоПодтвержденияСтавки0", Новый ОписаниеТипов("Булево"));

	Если Товары.Количество() = 0 Тогда
		Возврат СписанныеПартииНДС;
	КонецЕсли;
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
	
	КонтролироватьОстаток	= НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков() 
		И УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	ПустойСклад = Справочники.Склады.ПустаяСсылка();

	ТаблицыОстатковПартийНДС = ПолучитьОстаткиПартийНДС(СписанныеТоварыБухУчет, Реквизиты);

	// Определяем списанные партии товаров

	Для каждого СтрокаДокумента Из Товары Цикл

		ОтборПартийБухУчет = Новый Структура("ИмяСписка,НомерСтроки",
			СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтрокиДокумента);
		СписанныеТоварыПоСтрокеБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(ОтборПартийБухУчет);

		ОтборПартийНДС = Новый Структура("Номенклатура,СчетУчета");
		ЗаполнитьЗначенияСвойств(ОтборПартийНДС, СтрокаДокумента);

		СкладИзБухУчета  = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаДокумента.СчетУчета);
		ПартияИзБухУчета = НЕ СпособОценкиМПЗПоСредней
			И БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчета);
			
		Для каждого СписаннаяПартияБухУчет Из СписанныеТоварыПоСтрокеБухУчет Цикл

			Если ПартияИзБухУчета Тогда
				ОтборПартийНДС.Вставить("Партия", СписаннаяПартияБухУчет.Партия);
			КонецЕсли;
			Если СкладИзБухУчета Тогда
				ОтборПартийНДС.Вставить("Склад", СписаннаяПартияБухУчет.Склад);
			КонецЕсли;

			ОстаткиПартийНДСПоСтроке = ТаблицыОстатковПартийНДС.Товары.Скопировать(ОтборПартийНДС);
			ОстаткиПартийНДСПоСтроке.Сортировать("ДатаПартии,Партия,ДатаСФ,СчетФактура,НДСВключенВСтоимость", Новый СравнениеЗначений);

			КоличествоОсталосьПогасить = СписаннаяПартияБухУчет.Количество;

			Для каждого ОстатокПартии Из ОстаткиПартийНДСПоСтроке Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				ИначеЕсли ОстатокПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Количество = Мин(ОстатокПартии.Количество, КоличествоОсталосьПогасить);

				Стоимость  = Окр(ОстатокПартии.Стоимость * Количество / ОстатокПартии.Количество, 2);
				НДС        = Окр(ОстатокПартии.НДС * Количество / ОстатокПартии.Количество, 2);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

				СтрокаТаблицыОстатков = ТаблицыОстатковПартийНДС.Товары.Найти(ОстатокПартии.НомерСтроки, "НомерСтроки");
				СтрокаТаблицыОстатков.Количество = СтрокаТаблицыОстатков.Количество - Количество;
				СтрокаТаблицыОстатков.Стоимость  = СтрокаТаблицыОстатков.Стоимость - Стоимость;
				СтрокаТаблицыОстатков.НДС        = СтрокаТаблицыОстатков.НДС - НДС;

				НоваяСтрока = СписанныеПартииНДС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОстатокПартии);

				НоваяСтрока.Количество = Количество;
				НоваяСтрока.Стоимость  = Стоимость;
				НоваяСтрока.НДС        = НДС;
				
				// Определяем списанные доп.расходы (пропорционально списанному количеству партий товаров)
				КоэффициентСписанияДопРасходов = Количество / ОстатокПартии.Количество;

				ОтборДопРасходов = Новый Структура("Номенклатура,СчетУчета,Склад,Партия");
				ЗаполнитьЗначенияСвойств(ОтборДопРасходов, ОстатокПартии);
				СтрокиДопРасходов = ТаблицыОстатковПартийНДС.ДопРасходы.НайтиСтроки(ОтборДопРасходов);

				Для каждого СтрокаОстаткаДопРасхода Из СтрокиДопРасходов Цикл

					СписаннаяСтоимость = Окр(СтрокаОстаткаДопРасхода.Стоимость * КоэффициентСписанияДопРасходов, 2);
					СписанныйНДС       = Окр(СтрокаОстаткаДопРасхода.НДС * КоэффициентСписанияДопРасходов, 2);

					НоваяСтрока = СписанныеПартииНДС.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткаДопРасхода);
					НоваяСтрока.Количество = 0;
					НоваяСтрока.Стоимость  = СписаннаяСтоимость;
					НоваяСтрока.НДС        = СписанныйНДС;

					СтрокаОстаткаДопРасхода.Стоимость = СтрокаОстаткаДопРасхода.Стоимость - СписаннаяСтоимость;
					СтрокаОстаткаДопРасхода.НДС       = СтрокаОстаткаДопРасхода.НДС - СписанныйНДС;
					
				КонецЦикла;

			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 И КонтролироватьОстаток Тогда

				ТекстОшибки1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для целей учета НДС не списано %1 товара %2, счет учета: %3'"),
					Формат(КоличествоОсталосьПогасить, "ЧЦ=15; ЧДЦ=3"),
					СтрокаДокумента.Номенклатура,
					СтрокаДокумента.СчетУчета);
				Если СкладИзБухУчета Тогда
					ТекстОшибки2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru=', склад: %1'"),
						СписаннаяПартияБухУчет.Склад);
				Иначе
					ТекстОшибки2 = "";
				КонецЕсли;
				Если ПартияИзБухУчета Тогда
					ТекстОшибки3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru=', партия: %1'"),
						СписаннаяПартияБухУчет.Партия);
				Иначе
					ТекстОшибки3 = "";
				КонецЕсли;
				
				Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ПолеКоличество	= "ДокументОтгрузки";
				Иначе
					ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтрокиДокумента - 1, "ЧН=0; ЧГ=") + "].Количество";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки1 + ТекстОшибки2 + ТекстОшибки3,
					Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
				
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	СписанныеПартииНДС.ЗагрузитьКолонку(СписанныеПартииНДС.ВыгрузитьКолонку("НДСВключенВСтоимость"),
		"НДСБылВключенВСтоимость");

	Возврат СписанныеПартииНДС;

КонецФункции

Функция ПодготовитьТаблицуНДСПредъявленныйИсключениеНДСИзСтоимости(ТаблицаИсключениеИзСтоимости, Реквизиты)

	ТаблицаНДСПредъявленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");

	Если ТаблицаИсключениеИзСтоимости.Количество() = 0 Тогда
		Возврат ТаблицаНДСПредъявленный;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаИсключениеИзСтоимости Цикл
		Если СтрокаТаблицы.Стоимость = 0
			И СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаНДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.СуммаБезНДС = - (СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДС);
		НоваяСтрока.НДС         = - СтрокаТаблицы.НДС;
	КонецЦикла;

	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");

	Возврат ТаблицаНДСПредъявленный;

КонецФункции

Функция ПолучитьТаблицуПартийПоРегиструНДСПоПриобретеннымЦенностям(ТаблицаВозвращаемыеТовары, Реквизиты)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",               Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ДокументОтгрузки",          Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("Организация",               Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаВозвращаемыеТовары", ТаблицаВозвращаемыеТовары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаВозвращаемыеТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностям.Организация,
	|	НДСПоПриобретеннымЦенностям.СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	НДСПоПриобретеннымЦенностям.Склад,
	|	НДСПоПриобретеннымЦенностям.Партия,
	|	НДСПоПриобретеннымЦенностям.СчетФактура,
	|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС,
	|	СУММА(НДСПоПриобретеннымЦенностям.Количество) КАК Количество,
	|	СУММА(НДСПоПриобретеннымЦенностям.Стоимость) КАК Стоимость,
	|	СУММА(НДСПоПриобретеннымЦенностям.НДС) КАК НДС
	|ПОМЕСТИТЬ НДСПоПриобретеннымЦенностям
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностям
	|ГДЕ
	|	НДСПоПриобретеннымЦенностям.Регистратор = &ДокументОтгрузки
	|	И НДСПоПриобретеннымЦенностям.Организация = &Организация
	|	И НДСПоПриобретеннымЦенностям.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностям.СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Организация,
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	НДСПоПриобретеннымЦенностям.Склад,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностям.СчетФактура,
	|	НДСПоПриобретеннымЦенностям.Партия,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	НДСПоПриобретеннымЦенностям.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностям.Организация,
	|	НДСПоПриобретеннымЦенностям.СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Номенклатура КАК Номенклатура,
	|	НДСПоПриобретеннымЦенностям.Склад,
	|	НДСПоПриобретеннымЦенностям.Партия КАК Партия,
	|	НДСПоПриобретеннымЦенностям.СчетФактура КАК СчетФактура,
	|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьКоличество,
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Стоимость, 0) КАК Стоимость,
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.НДС, 0) КАК НДС,
	|	ТаблицаДокумента.Количество КАК КоличествоСписать,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовПартия.Дата, НДСПоПриобретеннымЦенностям.Партия.Дата) КАК ПартияДата,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.Дата, НДСПоПриобретеннымЦенностям.СчетФактура.Дата) КАК СчетФактураДата
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностям
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовПартия
	|			ПО НДСПоПриобретеннымЦенностям.Партия = ДанныеПервичныхДокументовПартия.Документ
	|				И НДСПоПриобретеннымЦенностям.Организация = ДанныеПервичныхДокументовПартия.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|			ПО НДСПоПриобретеннымЦенностям.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|				И НДСПоПриобретеннымЦенностям.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|		ПО ТаблицаДокумента.Номенклатура = НДСПоПриобретеннымЦенностям.Номенклатура
	|			И ТаблицаДокумента.СчетУчета = НДСПоПриобретеннымЦенностям.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияДата УБЫВ,
	|	СчетФактураДата УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращается структура Из 2 таблиц: Товары и ДопРасходы
// Товары - таблица остатков партий товаров с количеством
// ДопРасходы - таблица остатков доп.расходов по тем же партиям, что и в таблице Товары
//
Функция ПолучитьОстаткиПартийНДС(СписанныеТовары, Реквизиты)

	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
		
	СчетаУчета = СписанныеТовары.Скопировать(, "СчетУчета");
	СчетаУчета.Свернуть("СчетУчета");
	СчетаУчета.Колонки.Добавить("ВестиСуммовойУчетПоСкладам", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТаблицы Из СчетаУчета Цикл
		СтрокаТаблицы.ВестиСуммовойУчетПоСкладам = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(
			СтрокаТаблицы.СчетУчета);
	КонецЦикла;

	// Блокируем регистр НДСПоПриобретеннымЦенностям для получения остатков
	Если ТранзакцияАктивна() Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСПоПриобретеннымЦенностям");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.ИсточникДанных = СписанныеТовары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета",    "СчетУчета");
		СуммовойУчетПоСкладамНаВсехСчетах = СчетаУчета.Найти(Ложь, "ВестиСуммовойУчетПоСкладам") = Неопределено;
		Если СуммовойУчетПоСкладамНаВсехСчетах Тогда
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		КонецЕсли;
		Если НЕ СпособОценкиМПЗПоСредней Тогда
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
		КонецЕсли;
		Блокировка.Заблокировать();
	КонецЕсли;

	// Получаем остатки регистра НДСПоПриобретеннымЦенностям
	Запрос = Новый Запрос;
	
	МоментВремениРегистратор = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		МоментСписания = Новый Граница(МоментВремениРегистратор, ВидГраницы.Включая);
	Иначе
		МоментСписания = МоментВремениРегистратор;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("МоментСписания", МоментСписания);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",     СчетаУчета);
	Запрос.УстановитьПараметр("ТаблицаСписанныеТоварыБух", СписанныеТовары);
	
	Если СпособОценкиМПЗПоСредней Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаУчета.СчетУчета КАК СчетУчета,
		|	СчетаУчета.ВестиСуммовойУчетПоСкладам КАК ВестиСуммовойУчетПоСкладам
		|ПОМЕСТИТЬ СчетаУчета
		|ИЗ
		|	&СчетаУчета КАК СчетаУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
		|	ТаблицаСписанныеТоварыБух.Номенклатура КАК Номенклатура,
		|	ТаблицаСписанныеТоварыБух.Склад КАК Склад
		|ПОМЕСТИТЬ ТаблицаСписанныеТоварыБух
		|ИЗ
		|	&ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
		|	ТаблицаСписанныеТоварыБух.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетаУчета.ВестиСуммовойУчетПоСкладам
		|			ТОГДА ТаблицаСписанныеТоварыБух.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад
		|ПОМЕСТИТЬ ТаблицаСписанныхТоваров
		|ИЗ
		|	ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ПО ТаблицаСписанныеТоварыБух.СчетУчета = Хозрасчетный.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
		|		ПО ТаблицаСписанныеТоварыБух.СчетУчета = СчетаУчета.СчетУчета
		|ГДЕ
		|	НЕ ЕСТЬNULL(Хозрасчетный.Забалансовый, ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС,
		|	ЕСТЬNULL(РеквизитыДокументаСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСФ,
		|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РеквизитыДокументаСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) < ДАТАВРЕМЯ(2016, 7, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(СвойстваНоменклатуры.СырьевойТовар, ЛОЖЬ)
		|	КОНЕЦ КАК БлокироватьДоПодтвержденияСтавки0
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
		|			&МоментСписания,
		|			(Организация, СчетУчета, Номенклатура, Склад) В
		|				(ВЫБРАТЬ
		|					ТаблицаСписанныхТоваров.Организация,
		|					ТаблицаСписанныхТоваров.СчетУчета,
		|					ТаблицаСписанныхТоваров.Номенклатура,
		|					ТаблицаСписанныхТоваров.Склад
		|				ИЗ
		|					ТаблицаСписанныхТоваров)) КАК НДСПоПриобретеннымЦенностямОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
		|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
		|			И НДСПоПриобретеннымЦенностямОстатки.Партия = РеквизитыДокументаПартии.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаСчетФактура
		|		ПО (РеквизитыДокументаСчетФактура.Организация = &Организация)
		|			И НДСПоПриобретеннымЦенностямОстатки.СчетФактура = РеквизитыДокументаСчетФактура.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК СвойстваНоменклатуры
		|			ПО СправочникНоменклатура.КодТНВЭД = СвойстваНоменклатуры.Ссылка
		|		ПО НДСПоПриобретеннымЦенностямОстатки.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток >= 0";
	
	Иначе
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаУчета.СчетУчета КАК СчетУчета,
		|	СчетаУчета.ВестиСуммовойУчетПоСкладам КАК ВестиСуммовойУчетПоСкладам
		|ПОМЕСТИТЬ СчетаУчета
		|ИЗ
		|	&СчетаУчета КАК СчетаУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
		|	ТаблицаСписанныеТоварыБух.Номенклатура КАК Номенклатура,
		|	ТаблицаСписанныеТоварыБух.Склад КАК Склад,
		|	ТаблицаСписанныеТоварыБух.Партия КАК Партия
		|ПОМЕСТИТЬ ТаблицаСписанныеТоварыБух
		|ИЗ
		|	&ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
		|	ТаблицаСписанныеТоварыБух.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетаУчета.ВестиСуммовойУчетПоСкладам
		|			ТОГДА ТаблицаСписанныеТоварыБух.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	ТаблицаСписанныеТоварыБух.Партия КАК Партия
		|ПОМЕСТИТЬ ТаблицаСписанныхТоваров
		|ИЗ
		|	ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ПО ТаблицаСписанныеТоварыБух.СчетУчета = Хозрасчетный.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
		|		ПО ТаблицаСписанныеТоварыБух.СчетУчета = СчетаУчета.СчетУчета
		|ГДЕ
		|	НЕ ЕСТЬNULL(Хозрасчетный.Забалансовый, ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	Склад,
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета КАК СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС,
		|	ЕСТЬNULL(РеквизитыДокументаСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСФ,
		|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РеквизитыДокументаСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) < ДАТАВРЕМЯ(2016, 7, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(СвойстваНоменклатуры.СырьевойТовар, ЛОЖЬ)
		|	КОНЕЦ КАК БлокироватьДоПодтвержденияСтавки0
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
		|			&МоментСписания,
		|			(Организация, СчетУчета, Номенклатура, Склад, Партия) В
		|				(ВЫБРАТЬ
		|					ТаблицаСписанныхТоваров.Организация,
		|					ТаблицаСписанныхТоваров.СчетУчета,
		|					ТаблицаСписанныхТоваров.Номенклатура,
		|					ТаблицаСписанныхТоваров.Склад,
		|					ТаблицаСписанныхТоваров.Партия
		|				ИЗ
		|					ТаблицаСписанныхТоваров)) КАК НДСПоПриобретеннымЦенностямОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
		|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
		|			И НДСПоПриобретеннымЦенностямОстатки.Партия = РеквизитыДокументаПартии.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаСчетФактура
		|		ПО (РеквизитыДокументаСчетФактура.Организация = &Организация)
		|			И НДСПоПриобретеннымЦенностямОстатки.СчетФактура = РеквизитыДокументаСчетФактура.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК СвойстваНоменклатуры
		|			ПО СправочникНоменклатура.КодТНВЭД = СвойстваНоменклатуры.Ссылка
		|		ПО НДСПоПриобретеннымЦенностямОстатки.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток >= 0";
	
	КонецЕсли;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Индексы.Добавить("ЕстьКоличество");
	
	ТаблицыПартийНДС = Новый Структура("Товары, ДопРасходы");
	
	ТаблицыПартийНДС.Товары = ТаблицаРезультат.Скопировать(Новый Структура("ЕстьКоличество", Истина));
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицыПартийНДС.Товары, "НомерСтроки");
	ТаблицыПартийНДС.Товары.Индексы.Добавить("Номенклатура,СчетУчета,Склад");
	ТаблицыПартийНДС.Товары.Индексы.Добавить("НомерСтроки");
	
	ТаблицыПартийНДС.ДопРасходы = ТаблицаРезультат.Скопировать(Новый Структура("ЕстьКоличество", Ложь));
	ТаблицыПартийНДС.ДопРасходы.Сортировать("ДатаПартии,Партия", Новый СравнениеЗначений);
	ТаблицыПартийНДС.ДопРасходы.Индексы.Добавить("Номенклатура,СчетУчета,Склад,Партия");

	Возврат ТаблицыПартийНДС;

КонецФункции

// СтрокиВключениеВСтоимость - массив строк таблицы значений СписанныеПартииНДС
//
Функция ПолучитьОстаткиНепринятогоКВычетуНДС(СтрокиВключениеВСтоимость, Реквизиты)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	ТаблицаВключениеВСтоимость = Новый ТаблицаЗначений;
	ТаблицаВключениеВСтоимость.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	ТаблицаВключениеВСтоимость.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаВключениеВСтоимость.Колонки.Добавить("СтавкаНДС",   Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаВключениеВСтоимость.Колонки.Добавить("Поставщик",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл
		НоваяСтрока = ТаблицаВключениеВСтоимость.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаВключениеВСтоимость", ТаблицаВключениеВСтоимость);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	ТаблицаВключениеВСтоимость.СчетФактура КАК СчетФактура,
	|	ТаблицаВключениеВСтоимость.ВидЦенности КАК ВидЦенности,
	|	ТаблицаВключениеВСтоимость.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаВключениеВСтоимость
	|ИЗ
	|	&ТаблицаВключениеВСтоимость КАК ТаблицаВключениеВСтоимость
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментВремени,
	|			(Организация, СчетФактура, ВидЦенности, СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ТаблицаВключениеВСтоимость.Организация,
	|					ТаблицаВключениеВСтоимость.СчетФактура,
	|					ТаблицаВключениеВСтоимость.ВидЦенности,
	|					ТаблицаВключениеВСтоимость.СтавкаНДС
	|				ИЗ
	|					ТаблицаВключениеВСтоимость)) КАК НДСПредъявленныйОстатки
	|ГДЕ
	|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
	|ИТОГИ
	|	МАКСИМУМ(ИсправленныйСчетФактура)
	|ПО
	|	СчетФактура";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	Возврат ТаблицаРезультата;

КонецФункции

Процедура ОпределитьВключениеИсключениеНДСИзСтоимости(СписанныеПартииНДС, НДСВСтоимостиТоваров, Реквизиты = Неопределено)

	// Для документов "Возврат товаров поставщику" и "Поступление из переработки"
	// индивидуальный порядок определения необходимости включения НДС в стоимость
	ОособыйПорядокНДСВключенВСтоимость = Ложь;
	Если Реквизиты <> Неопределено Тогда
		
		Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ОособыйПорядокНДСВключенВСтоимость = Реквизиты.НДСВключенВСтоимость;
			
		ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			ОособыйПорядокНДСВключенВСтоимость = Истина;
			
		КонецЕсли;
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		Если НДСВСтоимостиТоваров <> Неопределено Тогда
			// Необходимость включения/исключения НДС Из стоимости определяется для документа в целом

			Если СтрокаТаблицы.НДСБылВключенВСтоимость
				И НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости
				И ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				// Исключаем Из стоимости партии НДС, ранее включенный в стоимость.
				// Для строк с пустым счетом-фактурой действия по исключению НДС Из стоимости не нужны -
				// пустой СФ говорит о том, что НДС ранее был включен в расходы и больше не влияет на стоимость партий.
				СтрокаТаблицы.НДСВключенВСтоимость   = Ложь;

			ИначеЕсли НЕ СтрокаТаблицы.НДСБылВключенВСтоимость
				И НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
				И СтрокаТаблицы.НДС <> 0 Тогда
				// Включаем в стоимость партии НДС, который не был включен в стоимость ранее.
				// Для партий с НДС = 0 сумма НДС не влияет на стоимость партии,
				// действия по включению в стоимость приведут только к дополнительным ненужным записям регистров
				СтрокаТаблицы.НДСВключенВСтоимость = Истина;

			КонецЕсли;

		Иначе
			// Необходимость включения/исключения НДС Из стоимости определяется по каждой строке
			// в зависимости от указанной в строке документа ставки НДС

			Если СтрокаТаблицы.НДСБылВключенВСтоимость
				И СтрокаТаблицы.СтавкаНДСДокумента <> Перечисления.СтавкиНДС.БезНДС
				И ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура)
				И НЕ ОособыйПорядокНДСВключенВСтоимость Тогда
				// Исключаем Из стоимости партии НДС, ранее включенный в стоимость,
				// если товар реализуется по виду деятельности, облагаемому НДС (в том числе и по 0%).
				// Для строк с пустым счетом-фактурой действия по исключению НДС Из стоимости не нужны -
				// пустой СФ говорит о том, что НДС ранее был включен в расходы и больше не влияет на стоимость партий.
				СтрокаТаблицы.НДСВключенВСтоимость   = Ложь;

			ИначеЕсли НЕ СтрокаТаблицы.НДСБылВключенВСтоимость
				И СтрокаТаблицы.СтавкаНДСДокумента = Перечисления.СтавкиНДС.БезНДС
				И СтрокаТаблицы.НДС <> 0 Тогда
				// Включаем в стоимость партии НДС, который не был включен в стоимость ранее,
				// если товар реализуется по виду деятельности, необлагаемому НДС (со ставкой "Без НДС").
				// Для партий с НДС = 0 сумма НДС не влияет на стоимость партии,
				// действия по включению в стоимость приведут только к дополнительным ненужным записям регистров
				СтрокаТаблицы.НДСВключенВСтоимость = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьСуммуСписанияНаРасходыРанееПринятогоКВычетуНДС(СтрокиВключениеВСтоимость, Реквизиты)

	Если СтрокиВключениеВСтоимость.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОстаткиНепринятогоКВычетуНДС = ПолучитьОстаткиНепринятогоКВычетуНДС(СтрокиВключениеВСтоимость, Реквизиты);
	
	Отбор = Новый Структура("СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,Поставщик");

	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл
		
		СтоимостьСписанияНаРасходы	= СтрокаТаблицы.Стоимость;
		НДССписанияНаРасходы		= СтрокаТаблицы.НДС;
		
		ОстаткиПоСФ = ОстаткиНепринятогоКВычетуНДС.Строки.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
		
		Если НЕ ОстаткиПоСФ = Неопределено Тогда
			
			СтрокаТаблицы.ИсправленныйСчетФактура	= ОстаткиПоСФ.ИсправленныйСчетФактура;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			НайденныеСтроки = ОстаткиПоСФ.Строки.НайтиСтроки(Отбор);
			
			Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
				СтоимостьНеПринятоКВычету = СтрокаОстатков.СуммаБезНДС + СтрокаОстатков.НДС;
				НДСНеПринятоКВычету       = СтрокаОстатков.НДС;
				
				СтоимостьСписанияНаРасходы	= СтоимостьСписанияНаРасходы - СтоимостьНеПринятоКВычету;
				НДССписанияНаРасходы		= НДССписанияНаРасходы - НДСНеПринятоКВычету;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьСписанияНаРасходы = Макс(СтоимостьСписанияНаРасходы, 0);
		СтрокаТаблицы.НДССписанияНаРасходы       = Макс(НДССписанияНаРасходы, 0);

	КонецЦикла;

КонецПроцедуры

// ВЫДАННЫЕ АВАНСЫ

Функция ПодготовитьТаблицуПредъявленногоНДС(ТаблицаРеквизиты, Отказ) Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Период");
	ПустаяТаблица.Колонки.Добавить("ДатаСобытия");
	ПустаяТаблица.Колонки.Добавить("Регистратор");
	ПустаяТаблица.Колонки.Добавить("Организация");
	ПустаяТаблица.Колонки.Добавить("СчетФактура");
	ПустаяТаблица.Колонки.Добавить("ВидЦенности");
	ПустаяТаблица.Колонки.Добавить("КодВидаОперации");
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС");
	ПустаяТаблица.Колонки.Добавить("СчетУчетаНДС");
	ПустаяТаблица.Колонки.Добавить("Поставщик");
	ПустаяТаблица.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблица.Колонки.Добавить("ИсправленныйСчетФактура");
	ПустаяТаблица.Колонки.Добавить("СуммаБезНДС");
	ПустаяТаблица.Колонки.Добавить("НДС");
	ПустаяТаблица.Колонки.Добавить("Содержание");
	ПустаяТаблица.Колонки.Добавить("НомерДокументаОплаты");
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаОплаты");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	Если ВерсияУчетаНДС = 1
		И Не УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Если Не Реквизиты.НДСПредъявленКВычету
	   И Не Реквизиты.НДСИсчисляетсяНалоговымАгентом Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПредъявленногоНДС(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("КодВидаОперации", Реквизиты.КодВидаОперации);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НомерДокументаОплаты", Реквизиты.НомерДокументаОплаты);
	Запрос.УстановитьПараметр("ДатаДокументаОплаты", Реквизиты.ДатаДокументаОплаты);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаСобытия,
	|	""НДС"" КАК Содержание,
	|	Сводный.Организация КАК Организация,
	|	Сводный.СчетФактура КАК СчетФактура,
	|	Сводный.ВидЦенности КАК ВидЦенности,
	|	Сводный.СтавкаНДС КАК СтавкаНДС,
	|	Сводный.СчетУчетаНДС КАК СчетУчетаНДС,
	|	Сводный.Поставщик КАК Поставщик,
	|	Сводный.ДатаОплаты КАК ДатаОплаты,
	|	Сводный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Сводный.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	СУММА(Сводный.СуммаБезНДС * Сводный.ЗнакДвижения) КАК СуммаБезНДС,
	|	СУММА(Сводный.НДС * Сводный.ЗнакДвижения) КАК НДС,
	|	Сводный.КодВидаОперации КАК КодВидаОперации,
	|	&НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	&ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленный.Организация КАК Организация,
	|		НДСПредъявленный.СчетФактура КАК СчетФактура,
	|		НДСПредъявленный.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
	|		НДСПредъявленный.Поставщик КАК Поставщик,
	|		НДСПредъявленный.ДатаОплаты КАК ДатаОплаты,
	|		НДСПредъявленный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		НДСПредъявленный.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|		ВЫБОР
	|			КОГДА НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ КАК ЗнакДвижения,
	|		НДСПредъявленный.СуммаБезНДС КАК СуммаБезНДС,
	|		НДСПредъявленный.НДС КАК НДС,
	|		ВЫБОР
	|			КОГДА &Период < ДАТАВРЕМЯ(2015, 1, 1)
	|				ТОГДА """"
	|			КОГДА НДСПредъявленный.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|					И СчетФактураПолученный.БланкСтрогойОтчетности
	|				ТОГДА ""23""
	|			ИНАЧЕ &КодВидаОперации
	|		КОНЕЦ КАК КодВидаОперации
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|			ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|			ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = НДСПредъявленный.Регистратор
	|	ГДЕ
	|		СчетФактураПолученныйДокументыОснования.Ссылка = &Ссылка
	|		И ((СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.АвансовыйОтчет
	|					ИЛИ СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|						И СчетФактураПолученный.ВозвратЧерезКомиссионера)
	|					И СчетФактураПолученныйДокументыОснования.Ссылка = НДСПредъявленный.СчетФактура
	|				ИЛИ НЕ СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.АвансовыйОтчет
	|					И (НЕ СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|						ИЛИ НЕ СчетФактураПолученный.ВозвратЧерезКомиссионера)
	|					И СчетФактураПолученныйДокументыОснования.ДокументОснование = НДСПредъявленный.СчетФактура)
	|		И НДСПредъявленный.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|		И НДСПредъявленный.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСПредъявленный.Организация,
	|		НДСПредъявленный.СчетФактура,
	|		НДСПредъявленный.ВидЦенности,
	|		НДСПредъявленный.СтавкаНДС,
	|		НДСПредъявленный.СчетУчетаНДС,
	|		НДСПредъявленный.Поставщик,
	|		НДСПредъявленный.ДатаОплаты,
	|		НДСПредъявленный.ДоговорКонтрагента,
	|		НДСПредъявленный.ИсправленныйСчетФактура,
	|		1,
	|		НДСПредъявленный.СуммаБезНДС,
	|		НДСПредъявленный.НДС,
	|		&КодВидаОперации
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|			ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|			ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = НДСПредъявленный.Регистратор
	|	ГДЕ
	|		СчетФактураПолученныйДокументыОснования.Ссылка = &Ссылка
	|		И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|		И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И НДСПредъявленный.Организация = &Организация) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.Организация,
	|	Сводный.СчетФактура,
	|	Сводный.ВидЦенности,
	|	Сводный.КодВидаОперации,
	|	Сводный.СтавкаНДС,
	|	Сводный.СчетУчетаНДС,
	|	Сводный.Поставщик,
	|	Сводный.ДатаОплаты,
	|	Сводный.ДоговорКонтрагента,
	|	Сводный.ИсправленныйСчетФактура
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сводный.СуммаБезНДС * Сводный.ЗнакДвижения) <> 0
	|		ИЛИ СУММА(Сводный.НДС * Сводный.ЗнакДвижения) <> 0)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустаяТаблица;
	Иначе
		
		ТаблицаПредъявленногоНДС = Результат.Выгрузить();
		ТаблицаПредъявленногоНДС.Колонки.Добавить("СчетУчетаЦенности");
		ТаблицаПредъявленногоНДС.ЗаполнитьЗначения(Неопределено, "СчетУчетаЦенности");
		
		СчетаУчетаОСиНМАиОбъектовСтроительства = УчетНДС.ОпределитьСчетаУчетаЦенностей("ВНА", Реквизиты.Период);
		
		ОтфильтрованнаяТаблицаПредъявленногоНДС = ТаблицаПредъявленногоНДС.СкопироватьКолонки();
		
		Для каждого СтрокаДок Из ТаблицаПредъявленногоНДС Цикл

			Если НЕ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
				Если СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.НМА 
					ИЛИ СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.Оборудование
					ИЛИ СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства
					ИЛИ СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.ОС
					ИЛИ СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
					ИЛИ СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
					ИЛИ НЕ (СчетаУчетаОСиНМАиОбъектовСтроительства.НайтиПоЗначению(СтрокаДок.СчетУчетаЦенности) = Неопределено) Тогда 
					
					// Не отражаем вычет для ОС и объектов строительства (в т.ч. СМР),
					// и ценностей, использованных при строительстве
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ОтфильтрованнаяТаблицаПредъявленногоНДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДок);
			
			Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				НоваяСтрока.СтавкаНДС = Реквизиты.СтавкаНДС;
			КонецЕсли;

		КонецЦикла;
		
		Возврат ОтфильтрованнаяТаблицаПредъявленногоНДС;
		
	КонецЕсли; 

КонецФункции

Функция ПодготовитьПараметрыТаблицыПредъявленногоНДС(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "КодВидаОперации,"		// <Строка>
	+ "НДСПредъявленКВычету,"
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

// РАСПРЕДЕЛЕНИЕ НДС

Процедура СформироватьДвиженияРаспределениеНДСКосвенныхРасходов(ТаблицаРеквизиты, ТаблицаНДСКосвенныеРасходы, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСКлиентСервер.Версия(Реквизиты.Период) = 1
	   И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРаспределениеНДСКосвенныхРасходов(ТаблицаРеквизиты, ТаблицаНДСКосвенныеРасходы);
	Реквизиты = Параметры.Реквизиты[0];

	// Подготовка таблицы

	ТаблицаПоКосвеннымРасходам = ПодготовитьТаблицуПоКосвеннымРасходам(Реквизиты, Параметры.ТаблицаПоКосвеннымРасходам);

	ТаблицаДляРаспределения = ТаблицаПоКосвеннымРасходам.Скопировать();
	ТаблицаДляРаспределения.Колонки.Удалить("НДС");
	ТаблицаДляРаспределения.Колонки.Удалить("СуммаБезНДС");
	ТаблицаДляРаспределения.Колонки.НДСВсего.Имя = "НДС";
	ТаблицаДляРаспределения.Колонки.СуммаВсего.Имя = "СуммаБезНДС";

	// Косвенные расходы
	СформироватьДвиженияНДСКосвенныеРасходыРаспределение(Реквизиты, ТаблицаДляРаспределения, Движения, Отказ);

	// Подготовим таблицу для формирования движений по включению/исключению НДС Из стоимости
	ТаблицаВключенияИсключения = ПодготовитьТаблицуВключенияИсключения(Реквизиты, ТаблицаПоКосвеннымРасходам);

	Если НЕ ТаблицаВключенияИсключения = Неопределено Тогда

		// Включение / исключение НДС Из стоимости
		ОтразитьВключениеИсключениеНДСВСтоимость(Реквизиты, ТаблицаВключенияИсключения, Истина, Движения, Отказ);
		ОтразитьВключениеИсключениеНДСВСтоимость(Реквизиты, ТаблицаВключенияИсключения, Ложь, Движения, Отказ);

	КонецЕсли;

	ТаблицаНДСПредъявленыйРеализация0 = ПодготовитьТаблицуНДСПредъявленныйРеализация0(Реквизиты, ТаблицаПоКосвеннымРасходам);

	Если НЕ ТаблицаНДСПредъявленыйРеализация0 = Неопределено Тогда

		// Проводки по распределению НДС по ставке 0%
		СформироватьПроводкиРаспределениеНДСПоСтавке0(ТаблицаНДСПредъявленыйРеализация0, Движения, Отказ);

		// НДС предъявленный реализация 0%
		СформироватьДвиженияНДСПредъявленныйРеализация0РаспределениеНДСПоСтавке0(ТаблицаНДСПредъявленыйРеализация0, Движения, Отказ);

	КонецЕсли;

	ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(Реквизиты, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыРаспределениеНДСКосвенныхРасходов(ТаблицаРеквизиты, ТаблицаПоКосвеннымРасходам)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""

	+ "Регистратор,"
	+ "Период,"
	+ "НачалоПериода,"
	+ "КонецПериода,"
	+ "Организация,"
	+ "СтатьяЗатратНДС,"
	+ "СтатьяЗатратНДСприЕНВД,"
	+ "СчетСписанияНДС,"
	+ "СубконтоСписанияНДС1,"
	+ "СубконтоСписанияНДС2,"
	+ "СубконтоСписанияНДС3,"
	+ "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат,"
	+ "ПодразделениеЗатрат,"
	+ "СпособОценкиМПЗ,"
	+ "ПрименениеПБУ18,"
	+ "ПартионныйУчет,"
	+ "РаздельныйУчетНДСНаСчете19";

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""

	+ "ВидЦенности,"
	+ "Поставщик,"
	+ "СчетФактура,"
	+ "СтавкаНДС,"
	+ "СуммаВсего,"
	+ "НДСВсего,"
	+ "БезНДССумма,"
	+ "БезНДС,"
	+ "НДС0Сумма,"
	+ "ЕНВДСумма,"
	+ "ЕНВДНДС,"
	+ "НДС0,"
	+ "НДССумма,"
	+ "НДС,"
	+ "КлючСтроки,"
	+ "БазисРаспределенияВключаетЕНВД,"
	+ "НДСВключенВСтоимость,"
	+ "СчетаУчетаРасходов,"
	+ "СчетУчетаНДС";

	Параметры.Вставить("ТаблицаПоКосвеннымРасходам", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоКосвеннымРасходам, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПоКосвеннымРасходам(Реквизиты, ТаблицаПоКосвеннымРасходам)
	
	Если Реквизиты.Период >= УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
		ЕНВДОтменен = Истина;
	Иначе
		ЕНВДОтменен = Ложь;
	КонецЕсли;
	
	Таблица = ТаблицаПоКосвеннымРасходам.Скопировать();

	Таблица.Колонки.Добавить("СуммаБезНДС",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("ПроводкаНДС",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("ПроводкаНДС0",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("ПроводкаЕНВД",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("ПроводкаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("НДСДвижений",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("НДСЭтоЕНВД", 	   Новый ОписаниеТипов("Булево"));

	КоличествоСтрок = Таблица.Количество();

	Для каждого СтрокаТаблицы Из Таблица Цикл

		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда

			Продолжить;

		ИначеЕсли СтрокаТаблицы.БезНДССумма + СтрокаТаблицы.БезНДС <> 0 И СтрокаТаблицы.ЕНВДСумма + СтрокаТаблицы.ЕНВДНДС <> 0 Тогда

			// Новая строка - ЕНВД, текущая - без НДС (не ЕНВД)
			НоваяСтрока = Таблица.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"СчетаУчетаРасходов");

			НоваяСтрока.СчетаУчетаРасходов = СтрокаТаблицы.СчетаУчетаРасходов.Скопировать();
			НоваяСтрока.НДСЭтоЕНВД  = Истина;
			НоваяСтрока.БезНДССумма = 0;
			НоваяСтрока.БезНДС 	   	= 0;
			НоваяСтрока.НДС0 	  	= 0;
			НоваяСтрока.НДС0Сумма 	= 0;
			НоваяСтрока.СуммаВсего 	= НоваяСтрока.ЕНВДСумма;
			НоваяСтрока.НДСВсего   	= НоваяСтрока.ЕНВДНДС;

			СтрокаТаблицы.ЕНВДСумма  = 0;
			СтрокаТаблицы.ЕНВДНДС 	 = 0;
			СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.СуммаВсего - НоваяСтрока.ЕНВДСумма;
			СтрокаТаблицы.НДСВсего   = СтрокаТаблицы.НДСВсего - НоваяСтрока.ЕНВДНДС;

			ПодменитьСубконтоСтатьиЗатрат(СтрокаТаблицы.СчетаУчетаРасходов, Реквизиты.СтатьяЗатратНДС);
			ПодменитьСубконтоСтатьиЗатрат(НоваяСтрока.СчетаУчетаРасходов, Реквизиты.СтатьяЗатратНДСприЕНВД);

		ИначеЕсли СтрокаТаблицы.БезНДССумма + СтрокаТаблицы.БезНДС <> 0 Тогда
			
			Если НЕ ЕНВДОтменен Тогда
				
				ПодменитьСубконтоСтатьиЗатрат(СтрокаТаблицы.СчетаУчетаРасходов, Реквизиты.СтатьяЗатратНДС);
				
			КонецЕсли; 

		ИначеЕсли СтрокаТаблицы.ЕНВДСумма + СтрокаТаблицы.ЕНВДНДС <> 0 Тогда

			ПодменитьСубконтоСтатьиЗатрат(СтрокаТаблицы.СчетаУчетаРасходов, Реквизиты.СтатьяЗатратНДСприЕНВД);

		КонецЕсли;

	КонецЦикла;

	// Подготовка сумм для включения и исключения
	Для каждого СтрокаТаблицы Из Таблица Цикл

		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда

			СтрокаТаблицы.СуммаБезНДС  = СтрокаТаблицы.НДССумма + СтрокаТаблицы.НДС0Сумма;
			СтрокаТаблицы.НДСДвижений  = СтрокаТаблицы.НДС + СтрокаТаблицы.НДС0;
			СтрокаТаблицы.ПроводкаНДС  = СтрокаТаблицы.НДС;
			СтрокаТаблицы.ПроводкаНДС0 = СтрокаТаблицы.НДС0;

		Иначе

			СтрокаТаблицы.СуммаБезНДС 	 = СтрокаТаблицы.БезНДССумма + СтрокаТаблицы.ЕНВДСумма;
			СтрокаТаблицы.НДСДвижений 	 = СтрокаТаблицы.БезНДС + СтрокаТаблицы.ЕНВДНДС;
			СтрокаТаблицы.ПроводкаБезНДС = СтрокаТаблицы.БезНДС;
			СтрокаТаблицы.ПроводкаЕНВД 	 = СтрокаТаблицы.ЕНВДНДС;

		КонецЕсли;

	КонецЦикла;

	Возврат Таблица;

КонецФункции

Процедура ПодменитьСубконтоСтатьиЗатрат(ТаблицаРасшифровки, СтатьяЗатрат)

	Для каждого СтрокаТаблицы Из ТаблицаРасшифровки Цикл

		ВидыСубконто = СтрокаТаблицы.СчетЗатрат.ВидыСубконто;
		СтрокаСубконто = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, "ВидСубконто");
		Если СтрокаСубконто <> Неопределено Тогда
			СтрокаТаблицы["Субконто" + СтрокаСубконто.НомерСтроки] = СтатьяЗатрат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция РазвернутьПоВложеннойТаблице(ТаблицаЗначений, КолонкаВложеннойТаблицы, СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок)

	Если ТаблицаЗначений.Количество() = 0 Тогда
		// Таблица не заполнена, сформировать новую таблицу не представляется возможным
		// Отсутствует вложенная таблица, структуру данных выходной таблицы сформировать невозможно
		Возврат Неопределено;
	КонецЕсли;

	КолонкиВложеннойТаблицы = ТаблицаЗначений[0][КолонкаВложеннойТаблицы].Колонки;
	//Заполним значения по тем колонкам, по которым не были заполнены значения ранее
	Для каждого Колонка Из СписокРаспределяемыхКолонок Цикл
		Если НЕ ЗначениеЗаполнено(Колонка.Значение) Тогда
			СписокРаспределяемыхКолонок.Вставить(Колонка.Ключ, Колонка.Ключ);
		КонецЕсли;
		Если КолонкиВложеннойТаблицы.Найти(?(НЕ ЗначениеЗаполнено(Колонка.Значение), Колонка.Ключ, Колонка.Значение)) = Неопределено Тогда
			// Во вложенной таблице не обнаружена колонка, по которой производится распределение.
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;

	НоваяТаблицаЗначений = Новый ТаблицаЗначений();
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
	    Если Колонка.Имя = КолонкаВложеннойТаблицы Тогда
			Продолжить;
	    ИначеЕсли СписокИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		НоваяТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;

	Для каждого Колонка Из КолонкиВложеннойТаблицы Цикл
		Если НЕ НоваяТаблицаЗначений.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Продолжить;
		ИначеЕсли СписокИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		НоваяТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;

	Для каждого СтрокаБазовойТаблицы Из ТаблицаЗначений Цикл

		ТаблицаДляРаспределения = СтрокаБазовойТаблицы[КолонкаВложеннойТаблицы];

		Для каждого СтрокаТаблицыРаспределения Из ТаблицаДляРаспределения Цикл

			СтрокаНовойТаблицы = НоваяТаблицаЗначений.Добавить();

			Для каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл

				Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) Тогда
					СтрокаНовойТаблицы[Колонка.Имя]= СтрокаТаблицыРаспределения[СписокРаспределяемыхКолонок[Колонка.Имя]];

				ИначеЕсли НЕ КолонкиВложеннойТаблицы.Найти(Колонка.Имя) = Неопределено Тогда
					СтрокаНовойТаблицы[Колонка.Имя]= СтрокаТаблицыРаспределения[Колонка.Имя];

				ИначеЕсли НЕ (ТаблицаЗначений.Колонки.Найти(Колонка.Имя)= Неопределено) Тогда
					СтрокаНовойТаблицы[Колонка.Имя] = СтрокаБазовойТаблицы[Колонка.Имя];

				КонецЕсли;

			КонецЦикла; // Для каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл

		КонецЦикла; // Для каждого СтрокаТаблицыРаспределения Из ТаблицаДляРаспределения Цикл

	КонецЦикла; // Для каждого СтрокаБазовойТаблицы Из ТаблицаЗначений Цикл

	Для каждого Колонка Из СписокРаспределяемыхКолонок Цикл
		СписокРаспределяемыхКолонок.Вставить(Колонка.Ключ,Колонка.Ключ);
	КонецЦикла;

	// Распределение базовых данных по распределяемым колонкам
	НоваяТаблицаЗначений = УчетНДС.СформироватьКорректирующиеЗаписи(ТаблицаЗначений,НоваяТаблицаЗначений,СписокРаспределяемыхКолонок);

	Возврат НоваяТаблицаЗначений;

КонецФункции // РазвернутьПоВложеннойТаблице()

Функция ПодготовитьТаблицуВключенияИсключения(Реквизиты, РаспределениеКосвенныхРасходов)

	Распределение = Новый Структура("СуммаБезНДС, НДСДвижений", "СуммаБезНДС", "НДС");
	Отбор		  = Новый Структура("КлючСтроки");
	СписокИсключаемыхКолонок = Новый Структура("БезНДССумма, БезНДС, НДС0, НДС0Сумма, ЕНВДСумма, ЕНВДНДС, СуммаВсего, НДСВсего, НДССумма,НДС");

	ТаблицаВключенияИсключения = РазвернутьПоВложеннойТаблице(РаспределениеКосвенныхРасходов, "СчетаУчетаРасходов", Распределение, СписокИсключаемыхКолонок);

	Если ТаблицаВключенияИсключения = Неопределено Тогда
		Возврат ТаблицаВключенияИсключения;
	КонецЕсли;

	ТаблицаВключенияИсключения.Колонки.СуммаБезНДС.Имя = "Стоимость";
	ТаблицаВключенияИсключения.Колонки.НДСДвижений.Имя = "НДС";
	ТаблицаВключенияИсключения.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаВключенияИсключения.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаВключенияИсключения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаРасходов Из ТаблицаВключенияИсключения Цикл
		Если СтрокаРасходов.НДС = 0 И СтрокаРасходов.Стоимость = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРасходов);
		Иначе
			СтрокаРасходов.Стоимость = СтрокаРасходов.Стоимость + СтрокаРасходов.НДС;
			СтрокаРасходов.Организация = Реквизиты.Организация;
			СтрокаРасходов.ДействияНДСПокупки_ВключитьВСтоимость = НЕ СтрокаРасходов.НДСВключенВСтоимость;
			СтрокаРасходов.ДействияНДСПокупки_ИсключитьИзСтоимости = СтрокаРасходов.НДСВключенВСтоимость;
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаВключенияИсключения.Удалить(СтрокаКУдалению);
	КонецЦикла;

	// Добавление колонок нужных для включения НДС в стоимость
	ТаблицаВключенияИсключения.Колонки.Добавить("СчетСписанияНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВключенияИсключения.Колонки.Добавить("ПодразделениеОрганизации", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДС1");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДС2");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДС3");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСчетСписания", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВключенияИсключения.Колонки.Добавить("КорПодразделениеОрганизации", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписания1");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписания2");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписания3");

	Для каждого СтрокаТаблицы Из ТаблицаВключенияИсключения Цикл

		Если Реквизиты.ДляСписанияНДСИспользоватьСчетИАналитикуУчетаЗатрат ИЛИ СтрокаТаблицы.НДСВключенВСтоимость Тогда

			СтрокаТаблицы.СчетСписанияНДС 		   = СтрокаТаблицы.СчетЗатрат;
			СтрокаТаблицы.ПодразделениеОрганизации = СтрокаТаблицы.ПодразделениеЗатрат;
			СтрокаТаблицы.СубконтоСписанияНДС1 	   = СтрокаТаблицы.Субконто1;
			СтрокаТаблицы.СубконтоСписанияНДС2 	   = СтрокаТаблицы.Субконто2;
			СтрокаТаблицы.СубконтоСписанияНДС3 	   = СтрокаТаблицы.Субконто3;

		Иначе

			СтрокаТаблицы.СчетСписанияНДС 		   = Реквизиты.СчетСписанияНДС;
			СтрокаТаблицы.ПодразделениеОрганизации = Реквизиты.ПодразделениеЗатрат;
			СтрокаТаблицы.СубконтоСписанияНДС1 	   = Реквизиты.СубконтоСписанияНДС1;
			СтрокаТаблицы.СубконтоСписанияНДС2 	   = Реквизиты.СубконтоСписанияНДС2;
			СтрокаТаблицы.СубконтоСписанияНДС3 	   = Реквизиты.СубконтоСписанияНДС3;

		КонецЕсли;

		СтрокаТаблицы.КорСчетСписания 			  = СтрокаТаблицы.СчетЗатрат;
		СтрокаТаблицы.КорПодразделениеОрганизации = СтрокаТаблицы.ПодразделениеЗатрат;
		СтрокаТаблицы.КорСубконтоСписания1 		  = СтрокаТаблицы.Субконто1;
		СтрокаТаблицы.КорСубконтоСписания2 		  = СтрокаТаблицы.Субконто2;
		СтрокаТаблицы.КорСубконтоСписания3 		  = СтрокаТаблицы.Субконто3;

	КонецЦикла;

	Возврат ТаблицаВключенияИсключения;

КонецФункции

Процедура РаспределитьОплатыПоТаблице(ТаблицаНДС, ТаблицаОплат, ОтбиратьПоПараметрам = Ложь, ДопКолонкиСумм = Неопределено)

	Если Не ЗначениеЗаполнено(ТаблицаОплат) Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаОплат.Колонки.Найти("РаспределеннаяСуммаДляНДС") = Неопределено Тогда
		ТаблицаОплат.Колонки.Добавить("РаспределеннаяСуммаДляНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КонецЕсли;

	МассивСумм = Новый Массив;

	СтруктураОтбора = Новый Структура("ДокументРасчетов, ВидЦенности, СтавкаНДС, СчетУчетаНДС");

	Для каждого СтрокаНДС Из ТаблицаНДС Цикл

		Если Перечисления.ВидыЦенностей.ЭтоНалоговыйАгент(СтрокаНДС.ВидЦенности) Тогда
			Продолжить;
		КонецЕсли;

		Если ОтбиратьПоПараметрам Тогда
			СтруктураОтбора.ДокументРасчетов = СтрокаНДС.СчетФактура;
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаНДС);
			ОплатыСОтбором = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
		Иначе
			Если ТаблицаОплат.Колонки.Найти("Контрагент") <> Неопределено
			   И ТаблицаНДС.Колонки.Найти("Покупатель") <> Неопределено
			Тогда
				ОплатыСОтбором = ТаблицаОплат.НайтиСтроки(Новый Структура("Контрагент", СтрокаНДС.Покупатель));
			Иначе
				ОплатыСОтбором = ТаблицаОплат;
			КонецЕсли;
		КонецЕсли;

		Для каждого СтрокаОплаты Из ОплатыСОтбором Цикл

			Если НЕ ОтбиратьПоПараметрам
				И (СтрокаОплаты.ДокументРасчетов = СтрокаНДС.СчетФактура) Тогда
				Продолжить;
			КонецЕсли;

			Если СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС = 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаТаблицыНДС = СтрокаНДС.СуммаБезНДС + СтрокаНДС.НДС;
			СуммаОплаты = ?(СуммаТаблицыНДС > СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС,
							СтрокаОплаты.СуммаБУ - СтрокаОплаты.РаспределеннаяСуммаДляНДС,
							СуммаТаблицыНДС);
			СтрокаОплаты.РаспределеннаяСуммаДляНДС = СтрокаОплаты.РаспределеннаяСуммаДляНДС + СуммаОплаты;

			Если СуммаОплаты < СуммаТаблицыНДС Тогда

				// Распределение колонок СуммаБезНДС, НДС
				МассивСумм.Очистить();
				МассивСумм.Добавить(СтрокаНДС.СуммаБезНДС);
				МассивСумм.Добавить(СтрокаНДС.НДС);

				МассивРаспределенныхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаОплаты, МассивСумм);

				НоваяСтрока = ТаблицаНДС.Вставить(ТаблицаНДС.Индекс(СтрокаНДС) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДС);

				НоваяСтрока.НДС = СтрокаНДС.НДС - МассивРаспределенныхСумм[1];
				НоваяСтрока.СуммаБезНДС = СтрокаНДС.СуммаБезНДС - МассивРаспределенныхСумм[0];

				СтрокаНДС.СуммаБезНДС = СтрокаНДС.СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
				СтрокаНДС.НДС = СтрокаНДС.НДС - НоваяСтрока.НДС;

				// Распределение остальных числовых колонок
				Если ДопКолонкиСумм <> Неопределено Тогда
					Для каждого Колонка Из ДопКолонкиСумм Цикл

						НоваяСтрока[Колонка] = Окр(СтрокаНДС[Колонка] * (СуммаОплаты / СуммаТаблицыНДС), 2);
						СтрокаНДС[Колонка] = СтрокаНДС[Колонка] - НоваяСтрока[Колонка];

					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			СтрокаНДС.ДатаОплаты = СтрокаОплаты.ДатаДокументаРасчетов;

			Прервать;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Проверка остатков по регистру НДС по косвенным регистрам после проведения.
// В случае если они не нулевые, проведение отменяется
Процедура ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(Реквизиты, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", 	 Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Ссылка", 	 Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Включая));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток КАК РасхождениеБезНДС,
	|	НДСКосвенныеРасходыОстатки.НДСОстаток КАК РасхождениеНДС
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Остатки(&Период, Организация = &Организация) КАК НДСКосвенныеРасходыОстатки";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	ПервоеСообщение = Истина;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Пока Выборка.Следующий() Цикл

		Если ПервоеСообщение Тогда
			СтрокаСообщения = НСтр("ru='Обнаружено расхождение данных о суммах НДС по косвенным расходам, подлежащих распределению:'") + Символы.ПС;
			ПервоеСообщение = Ложь;
		Иначе
			СтрокаСообщения = "";
		КонецЕсли;

		СтрокаСообщения = СтрокаСообщения + НСтр("ru=' - Счет-фактура '") + Выборка.СчетФактура + НСтр("ru=', вид ценности '") + Выборка.ВидЦенности + Символы.ПС
					  + НСтр("ru='ставка НДС '")+ Выборка.СтавкаНДС + НСтр("ru=', счет учета НДС '") + Выборка.СчетУчетаНДС
					  + ?(Выборка.НДСВключенВСтоимость, НСтр("ru=', НДС включен в стоимость'"), НСтр("ru=', НДС не включен в стоимость'")) + НСтр("ru=':'");

		Если НЕ Выборка.РасхождениеБезНДС = 0 Тогда

			СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.Таб
				+ ?(Выборка.РасхождениеБезНДС > 0, НСтр("ru=' не распределена'"), НСтр("ru=' распределена не отраженная в составе косвенных расходов '"))
				+ НСтр("ru=' сумма без НДС '") + Формат(?(Выборка.РасхождениеБезНДС < 0, -1, 1) * Выборка.РасхождениеБезНДС, "ЧЦ=15; ЧДЦ=2")
				+ Символы.НПП + Строка(ВалютаРегламентированногоУчета);

		КонецЕсли;

		Если НЕ Выборка.РасхождениеНДС = 0 Тогда

			СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.Таб
				+ ?(Выборка.РасхождениеНДС > 0, НСтр("ru=' не распределен'"), НСтр("ru=' распределен не отраженный в составе косвенных расходов '"))
				+ НСтр("ru=' НДС '") + Формат(?(Выборка.РасхождениеНДС < 0, -1, 1) * Выборка.РасхождениеНДС, "ЧЦ=15; ЧДЦ=2") + Символы.НПП + Строка(ВалютаРегламентированногоУчета);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);

	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуНДСПредъявленныйРеализация0(Реквизиты, РаспределениеКосвенныхРасходов)

	Если РаспределениеКосвенныхРасходов.Итог("НДС0Сумма") + РаспределениеКосвенныхРасходов.Итог("НДС0") = 0 Тогда
		// Нет сумм для распределения
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидЦенности",   Перечисления.ВидыЦенностей.ТоварыНесырьевые);
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
	|	СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход) КАК СуммаПриход
	|ПОМЕСТИТЬ ТаблицаДокументыОтгрузки
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	|			Период,
	|			Организация = &Организация
	|				И ВидЦенности <> &ВидЦенности) КАК НДСРеализация0Обороты
	|ГДЕ
	|	НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументыОтгрузки.ДокументОтгрузки,
	|	ТаблицаДокументыОтгрузки.СуммаПриход
	|ИЗ
	|	ТаблицаДокументыОтгрузки КАК ТаблицаДокументыОтгрузки";

	// Определим реализацию по ставке 0% за налоговый период
	БазоваяТаблицаРаспределения = Запрос.Выполнить().Выгрузить();

	Если БазоваяТаблицаРаспределения.Количество() > 0 Тогда

		Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаДокументыОтгрузки.СуммаПриход КАК СуммаПриход
		|ПОМЕСТИТЬ СписокДокументовОтгрузки
		|ИЗ
		|	ТаблицаДокументыОтгрузки КАК ТаблицаДокументыОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
		|	НДСРеализация0Остатки.Состояние,
		|	СУММА(НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток) КАК СуммаПриход
		|ПОМЕСТИТЬ НеподтвержденныеРеализации
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|			&МоментДокумента,
		|			Организация = &Организация
		|				И СчетФактура В
		|					(ВЫБРАТЬ
		|						СписокДокументовОтгрузки.ДокументОтгрузки
		|					ИЗ
		|						СписокДокументовОтгрузки)) КАК НДСРеализация0Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.Состояние
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0.Состояние КАК Состояние,
		|	НДСПредъявленныйРеализация0.ДокументОтгрузки КАК ДокументОтгрузки,
		|	СписокДокументовОтгрузки.СуммаПриход КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И НЕ СчетФактура В
		|						(ВЫБРАТЬ
		|							НеподтвержденныеРеализации.ДокументОтгрузки
		|						ИЗ
		|							НеподтвержденныеРеализации)) КАК НДСПредъявленныйРеализация0
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокДокументовОтгрузки КАК СписокДокументовОтгрузки
		|		ПО (СписокДокументовОтгрузки.ДокументОтгрузки = НДСПредъявленныйРеализация0.ДокументОтгрузки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеподтвержденныеРеализации.Состояние,
		|	НеподтвержденныеРеализации.ДокументОтгрузки,
		|	НеподтвержденныеРеализации.СуммаПриход
		|ИЗ
		|	НеподтвержденныеРеализации КАК НеподтвержденныеРеализации";

		ТаблицаТекущихСостояний = Запрос.Выполнить().Выгрузить();
		ТаблицаРаспределения = УчетНДС.СформироватьКорректирующиеЗаписи(
			БазоваяТаблицаРаспределения, ТаблицаТекущихСостояний, Новый Структура("СуммаПриход"), , , , Истина);
		ТаблицаРаспределения.Индексы.Добавить("Состояние");
		СтрокиБезСостояния =  ТаблицаРаспределения.НайтиСтроки(Новый Структура("Состояние", Неопределено));
		
		Для каждого Строка Из СтрокиБезСостояния Цикл
			Строка.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		КонецЦикла;

	Иначе
		ТаблицаРаспределения = БазоваяТаблицаРаспределения.Скопировать();
		ТаблицаРаспределения.Колонки.Добавить("Состояние", Новый описаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	КонецЕсли;

	ТаблицаДвижений	= РаспределениеКосвенныхРасходов.Скопировать();
	ТаблицаДвижений.Свернуть("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС", "НДС0Сумма, НДС0");
	ТаблицаДвижений.Колонки.НДС0Сумма.Имя = "СуммаБезНДС";
	ТаблицаДвижений.Колонки.НДС0.Имя = "НДС";

	МассивКоэффициентов = ТаблицаРаспределения.ВыгрузитьКолонку("СуммаПриход");

	ТаблицаДвижений.Колонки.Добавить("СуммыДвижений", Новый ОписаниеТипов("ТаблицаЗначений"));

	Для Каждого СтрокаРасхода Из ТаблицаДвижений Цикл

		СтрокаРасхода.СуммыДвижений = ТаблицаРаспределения.Скопировать();
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("СуммаБезНДС");
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("НДС");
		МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаРасхода.СуммаБезНДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "СуммаБезНДС");
		КонецЕсли;
		МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаРасхода.НДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "НДС");
		КонецЕсли;

	КонецЦикла;

	СписокРаспределяемыхКолонок = Новый Структура("СуммаБезНДС, НДС");
	СписокИсключаемыхКолонок = Новый Структура("СуммаПриход");

	ТаблицаДвижений = РазвернутьПоВложеннойТаблице(ТаблицаДвижений, "СуммыДвижений", СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);

	ТаблицаДвижений.Колонки.Добавить("Событие");
	ТаблицаДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период, ДатаСобытия");
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл

		Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаДвижений;

КонецФункции

Процедура ОтразитьВключениеИсключениеНДСВСтоимость(Реквизиты, ТаблицаСписания, ВключитьВСтоимость, Движения, Отказ)

	Если ТаблицаСписания.Колонки.Найти("ИдентификаторСтроки") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
		Для К = 0 По ТаблицаСписания.Количество() - 1 Цикл
			ТаблицаСписания[К].ИдентификаторСтроки = К;
		КонецЦикла;
	КонецЕсли;

	Если ТаблицаСписания.Колонки.Найти("Количество") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	КонецЕсли;

	Если ТаблицаСписания.Колонки.Найти("СуммаНДСВключенВСтоимость") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДСВключенВСтоимость", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	КонецЕсли;

	Если ТаблицаСписания.Колонки.Найти("СуммаНДССписанНаРасходы") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДССписанНаРасходы", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	КонецЕсли;

	Если ТаблицаСписания.Колонки.Найти("СуммаНДСИсключенИзСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СуммаНДСИсключенИзСтоимости", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	Массив.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	Массив.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	ОписаниеТиповДокументИсправления =  Новый ОписаниеТипов(Массив, , );
	
	Если ТаблицаСписания.Колонки.Найти("ИсправленныйСчетФактура") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ИсправленныйСчетФактура", ОписаниеТиповДокументИсправления);
	КонецЕсли;
    
	Отбор = Новый Структура;

	Если ВключитьВСтоимость Тогда
		Отбор.Вставить("ДействияНДСПокупки_ВключитьВСтоимость", Истина);
	Иначе
		Отбор.Вставить("ДействияНДСПокупки_ИсключитьИзСтоимости", Истина);
	КонецЕсли;

	ДанныеДляОбработки = ТаблицаСписания.Скопировать(Отбор);

	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	КонецЕсли;

	Если ДанныеДляОбработки.Количество() > 0 Тогда
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС И НЕ СтрокаТаблицы.НДСЭтоЕНВД Тогда
				// Не отражать включение НДС в стоимость по ценностям, пришедшим без НДС.
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;

		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;

	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		Если НЕ ВключитьВСтоимость Тогда
			СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
			СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
			СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
		КонецЕсли;
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры", ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НДСПредъявленныйОбороты.ДоговорКонтрагента
	|	КОНЕЦ КАК СчетФактураДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";

	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("Поставщик") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("СчетФактураДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	Если ДанныеДляОбработки.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;

	ДанныеДляОбработки.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");

	Для каждого СтрокаОбрабатываемая Из ДанныеДляОбработки Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаОбрабатываемая.Поставщик) ИЛИ НЕ ЗначениеЗаполнено(СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента) Тогда

			СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");

			Если НЕ СтрокаКонтрагента = Неопределено Тогда
	            СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
	            СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
	            СтрокаОбрабатываемая.ДоговорКонтрагента = СтрокаКонтрагента.ДоговорКонтрагента;
	        КонецЕсли;

			Если НЕ СтрокаОбрабатываемая.СчетФактура.Метаданные().Реквизиты.Найти("Контрагент") = Неопределено Тогда
	            СтрокаОбрабатываемая.Поставщик = СтрокаОбрабатываемая.СчетФактура.Контрагент;
	        КонецЕсли;

			Если НЕ СтрокаОбрабатываемая.СчетФактура.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
	            СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаОбрабатываемая.СчетФактура.ДоговорКонтрагента;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СчетаФактуры)) КАК НДСЗаписиКнигиПокупокОбороты";
	
	ИсправленныеСчетаФактуры = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаОбрабатываемая Из ДанныеДляОбработки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОбрабатываемая.ИсправленныйСчетФактура) Тогда
			СтрокаИсправленныйСчетФактура = ИсправленныеСчетаФактуры.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
			Если НЕ СтрокаИсправленныйСчетФактура = Неопределено Тогда
				СтрокаОбрабатываемая.ИсправленныйСчетФактура = СтрокаИсправленныйСчетФактура.ИсправленныйСчетФактура;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");

	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = Неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли;

	Если ДанныеДляОбработки.Колонки.Найти("ДатаОплаты") = Неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДатаОплаты");
	КонецЕсли;

	Если ВключитьВСтоимость Тогда

		ТаблицаОплатНДС = ДанныеДляОбработки.СкопироватьКолонки();
		ТаблицаОплатНДС.Колонки.Добавить("ДокументРасчетов", Новый ОписаниеТипов(ТаблицаОплатНДС.Колонки.СчетФактура.ТипЗначения.Типы()));
		ТаблицаОплатНДС.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		Если ТаблицаОплатНДС.Колонки.Найти("СуммаБУ") = Неопределено Тогда
			ТаблицаОплатНДС.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		КонецЕсли;

		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

		ДопКолонки = Новый Массив;
		ДопКолонки.Добавить("СуммаБезНДСкСписанию");
		ДопКолонки.Добавить("НДСкСписанию");
		ДопКолонки.Добавить("Стоимость");
		ДопКолонки.Добавить("Количество");

		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И СчетФактура В (&СчетаФактуры)
		|				И ВидЦенности В (&ВидыЦенностей)
		|				И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НДСПредъявленныйОстатки.ДатаОплаты
		|ИТОГИ
		|	МАКСИМУМ(ИсправленныйСчетФактура)
		|ПО
		|	СчетФактура";

		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС");

			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл

				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");

				Если СтрокаОстаткаПоСФ = Неопределено Тогда

					ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					ОбрабатываемаяСтрока.НДС					= 0;

				Иначе

					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;

					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока);
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					
					ОбрабатываемаяСтрока.ИсправленныйСчетФактура = СтрокаОстаткаПоСФ.ИсправленныйСчетФактура;

					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл

						Если ЗначениеЗаполнено(СтрокаОстатка.ДатаОплаты) Тогда
							НоваяСтрокаОплаты = ТаблицаОплатНДС.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаты, ОбрабатываемаяСтрока);
							НоваяСтрокаОплаты.ДокументРасчетов = ОбрабатываемаяСтрока.СчетФактура;
							НоваяСтрокаОплаты.ДатаДокументаРасчетов = СтрокаОстатка.ДатаОплаты;
							НоваяСтрокаОплаты.ДоговорКонтрагента = СтрокаОстатка.ДоговорКонтрагента;
							НоваяСтрокаОплаты.СуммаБУ = СтрокаОстатка.СуммаБезНДС + СтрокаОстатка.НДС;
						КонецЕсли;

						СуммаБезНДС_ВСтоимость = Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость		   = Мин(СтрокаОстатка.НДС,НДСКСписанию);

						СуммаБезНДСКСписанию   = СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию		   = НДСКСписанию - НДС_ВСтоимость;

						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;

						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли;

						Если СуммаБезНДСКСписанию = 0 И НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли;

					КонецЦикла;

					Если НЕ (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию = СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию		  = НДСКСписанию;
						ОбрабатываемаяСтрока.СуммаБезНДС		  = ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС				  = ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		РаспределитьОплатыПоТаблице(ДанныеДляОбработки, ТаблицаОплатНДС, Истина, ДопКолонки);

	КонецЕсли;


	// Отразить в регистре НДСПредъявленный
	ТаблицаДвижений	= ДанныеДляОбработки.Скопировать();

	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений.Удалить(СтрокаКУдалению);
	КонецЦикла;

	Если НЕ ТаблицаДвижений.Количество() = 0 Тогда

		// Расход по НДС Предъявленный
		ТаблицаДвижений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период, ДатаСобытия");

		УчетНДС.СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ТаблицаДвижений, Движения,, Отказ);

	КонецЕсли;

	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	Если ВключитьВСтоимость
		И (ДанныеДляОбработки.Итог("НДСКСписанию") <> 0 ИЛИ ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") <> 0) Тогда

		ТаблицаДвижений = ДанныеДляОбработки.Скопировать();

		ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДСНачислено";
		ТаблицаДвижений.Колонки.НДС.Имя         = "НДСНачислено";

		ТаблицаДвижений.Колонки.СуммаБезНДСКСписанию.Имя = "СуммаБезНДС";
		ТаблицаДвижений.Колонки.НДСКСписанию.Имя         = "НДС";
		ТаблицаДвижений.Колонки.Поставщик.Имя            = "Покупатель";

		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");

		ТаблицаДвижений.Колонки.Добавить("Период",          Новый ОписаниеТипов("Дата"));
		ТаблицаДвижений.Колонки.Добавить("ДатаСобытия",     Новый ОписаниеТипов("Дата"));
		ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период, ДатаСобытия");
		
		//Зачистить таблицу от записей с пустыми суммами
		СтрокиКУдалению = ТаблицаДвижений.НайтиСтроки(Новый Структура("НДС", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;

		Если ВерсияУчетаНДС = 1 Тогда
			// Восстановление НДС в регистре "НДС начисленный"
			СформироватьДвиженияНДСНачисленныйВосстановлениеНДС(ТаблицаДвижений, Движения, Отказ);
		Иначе
			// Восстановление НДС в регистре "НДС продажи", формирование проводок Дт 19 Кт 68.02
			СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДС(ТаблицаДвижений, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

	КолонкиТаблицыСписания = ДанныеДляОбработки.Колонки;

	Если ВключитьВСтоимость Тогда

		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл

			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(
				Реквизиты, ВключитьВСтоимость, СтрокаТаблицыВключения, КолонкиТаблицыСписания, Движения.Хозрасчетный);

		КонецЦикла;

		Если ДанныеДляОбработки.Итог("НДСКСписанию") <> 0 ИЛИ ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") <> 0 Тогда

			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если СтрокаДанных.НДСКСписанию <> 0
					ИЛИ СтрокаДанных.СуммаБезНДСКСписанию <> 0 Тогда

					// Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указания счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки + 1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;

					ДополнительнаяСтрока.СуммаНДССписанНаРасходы = ДополнительнаяСтрока.НДСКСписанию;

					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;

					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС;

				КонецЕсли;
			КонецЦикла;
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);


			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;

			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость Тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаДанных.ИдентификаторСтроки));
					Если СтрокиТаблицы_ДанныеДляОбработки.Количество() > 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки + 1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла;

		КонецЕсли;

	Иначе

		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл

			СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(
				Реквизиты, ВключитьВСтоимость, СтрокаТаблицыВключения, КолонкиТаблицыСписания, Движения.Хозрасчетный);

			СтрокаТаблицыВключения.Стоимость  = СтрокаТаблицыВключения.Стоимость * (-1);
		    СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество * (-1);
		    СтрокаТаблицыВключения.НДС        = СтрокаТаблицыВключения.НДС * (-1);

		КонецЦикла;

	КонецЕсли;

	Для каждого СтрокаСписания Из ТаблицаСписания Цикл

		Если (ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость
			ИЛИ НЕ ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости)
			И ЗначениеЗаполнено(СтрокаСписания.СчетФактура) Тогда

			СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;

		КонецЕсли;

		Если ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость Тогда

			СтрокаСписания.СуммаНДСВключенВСтоимость = СтрокаСписания.НДС - СтрокаСписания.СуммаНДССписанНаРасходы;

		ИначеЕсли НЕ ВключитьВСтоимость И СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости Тогда

			СтрокаСписания.СуммаНДСИсключенИзСтоимости = СтрокаСписания.НДС - СтрокаСписания.СуммаНДССписанНаРасходы;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ, ВЫПОЛНЯЮЩИЕ ДВИЖЕНИЯ ПО РЕГИСТРАМ

//	ДВИЖЕНИЯ РЕГИСТРА "НДС НАЧИСЛЕННЫЙ"

Процедура СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ) Экспорт

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаНДСНачисленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСНачисленный");

	Для каждого СтрокаВыручки Из ТоварыУслуги Цикл

		СтрокаНДСНачисленный = ТаблицаНДСНачисленный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСНачисленный, СтрокаВыручки);

		СтрокаНДСНачисленный.Покупатель    = СтрокаВыручки.Контрагент;
		СтрокаНДСНачисленный.СчетДоходовБУ = СтрокаВыручки.СчетДоходов;

		Если СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаВыручки.СчетДоходов) Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
		ИначеЕсли СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
		Иначе
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;

		СтрокаНДСНачисленный.СуммаБезНДС = СтрокаВыручки.СуммаБезНДСРуб;
		СтрокаНДСНачисленный.НДС         = СтрокаВыручки.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДС, "СчетУчетаНДС"); // 68.02
	// Для операций поступления/реализации договор не заполняется
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаНДСНачисленный.Свернуть("Период,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,
		|ВидНачисления,ДоговорКонтрагента,ДатаОплаты,ДатаСобытия,Событие,Номенклатура,СчетДоходовБУ,СчетУчетаНДС",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаНДСНачисленный Цикл
		Запись = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ) Экспорт

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаНДСНачисленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСНачисленный");

	Для каждого СтрокаВыручки Из ТоварыУслуги Цикл

		Если НЕ СтрокаВыручки.ВыданСФ Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаНДСНачисленный = ТаблицаНДСНачисленный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСНачисленный, СтрокаВыручки);

		СтрокаНДСНачисленный.Покупатель    = СтрокаВыручки.Контрагент;
		СтрокаНДСНачисленный.СчетДоходовБУ = СтрокаВыручки.СчетДоходов;

		Если СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаВыручки.СчетДоходов) Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
		ИначеЕсли СтрокаВыручки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
		Иначе
			СтрокаНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;

		СтрокаНДСНачисленный.СуммаБезНДС = СтрокаВыручки.СуммаБезНДСРуб;
		СтрокаНДСНачисленный.НДС         = СтрокаВыручки.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДС, "СчетУчетаНДС"); // 68.02
	// Для операций поступления/реализации договор не заполняется
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаНДСНачисленный.Свернуть("Период,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,
		|ВидНачисления,ДоговорКонтрагента,ДатаОплаты,ДатаСобытия,Событие,Номенклатура,СчетДоходовБУ,СчетУчетаНДС",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаНДСНачисленный Цикл
		Запись = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйВозвратТоваровОтПокупателя(ДанныеДвижений, Движения, Отказ) Экспорт

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаНДСНачисленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСНачисленный");

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		НоваяСтрока = ТаблицаНДСНачисленный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

		НоваяСтрока.СчетДоходовБУ = СтрокаТаблицы.СчетДоходов;

		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) Тогда
			НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
		ИначеЕсли СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
		Иначе
			НоваяСтрока.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли;

		НоваяСтрока.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
		НоваяСтрока.НДС         = - СтрокаТаблицы.НДС;

	КонецЦикла;

	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДС, "СчетУчетаНДС"); // 68.02
	// Для операций поступления/реализации договор не заполняется
	ТаблицаНДСНачисленный.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	Для каждого СтрокаТаблицы Из ТаблицаНДСНачисленный Цикл
		Запись = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйВосстановлениеНДС(ТаблицаВосстановление, Движения, Отказ)

	Если ТаблицаВосстановление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаВосстановление Цикл

		Запись = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;
		Запись.Событие       = Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Запись = Движения.НДСНачисленный.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);

		Запись.Организация        = Реквизиты.Организация;
		Запись.ДатаСобытия        = Реквизиты.Период;
		Запись.ВидНачисления 	  = Перечисления.НДСВидНачисления.НДСсАвансов;
		Запись.Событие            = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		Запись.ВидЦенности 	      = СтрокаТаблицы.ВидЦенности;
		Запись.Покупатель 	      = СтрокаТаблицы.Контрагент;
		Запись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Запись.СчетФактура 	      = СтрокаТаблицы.СчетФактура;
		Запись.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
		Запись.СуммаБезНДС 		  = СтрокаТаблицы.СуммаБезНДС;
		Запись.НДС         		  = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйПолученныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Запись = Движения.НДСНачисленный.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);

		Запись.Организация        = Реквизиты.Организация;
		Запись.ДатаСобытия        = Реквизиты.Период;
		Запись.ВидНачисления 	  = Перечисления.НДСВидНачисления.НДСсАвансов;
		Запись.Событие            = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		Запись.ВидЦенности 	      = СтрокаТаблицы.ВидЦенности;
		Запись.Покупатель 	      = СтрокаТаблицы.Контрагент;
		Запись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Запись.СчетФактура 	      = СтрокаТаблицы.СчетФактура;
		Запись.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
		Запись.СуммаБезНДС 		  = СтрокаТаблицы.СуммаБезНДС;
		Запись.НДС         		  = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

// Отражение суммовой разницы в регистре НДСНачисленный
//
Процедура СформироватьДвиженияНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСуммовыеРазницы)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	СуммовыеРазницы = Параметры.СуммовыеРазницы;

	Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;

	Для каждого СтрокаРазницы Из СуммовыеРазницы Цикл

		СуммоваяРазница = СтрокаРазницы.Разница * ЗнакОстатков;

		Если СуммоваяРазница > 0 И СтрокаРазницы.НДС <> 0 
			И СтрокаРазницы.ДатаДокументаРасчетов < '20111001' Тогда

			Движение = Движения.НДСНачисленный.ДобавитьПриход();

			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

			Движение.Покупатель    = СтрокаРазницы.Контрагент;
			Движение.СтавкаНДС 	   = СтрокаРазницы.СтавкаНДС;
			Движение.СчетФактура   = Реквизиты.Регистратор;
			Движение.ВидЦенности   = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
			Движение.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
			Движение.Событие 	   = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			Движение.ДатаСобытия   = Реквизиты.Период;
			Движение.НДС           = СтрокаРазницы.НДС;
			Движение.СуммаБезНДС   = СтрокаРазницы.Разница - СтрокаРазницы.НДС;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияКнигаПродажСуммовыеРазницы
//
Функция ПодготовитьПараметрыНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы реквизитов
	СписокОбязательныхКолонок = ""

	+ "Период,"                //
	+ "Организация,"           //
	+ "Регистратор,"           //
	+ "НаправлениеДвижения";   //

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы суммовых разниц
	СписокОбязательныхКолонок = ""

	+ "Контрагент,"            //
	+ "ДоговорКонтрагента,"    //
	+ "Подразделение,"         //
	+ "Разница,"               //
	+ "СтавкаНДС,"             //
	+ "ДатаДокументаРасчетов," //
	+ "НДС";     			   //

	Параметры.Вставить("СуммовыеРазницы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСуммовыеРазницы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНДСНачисленныйРозничнаяПродажа(ТаблицаЦенности, Движения, Отказ) Экспорт

	Для каждого СтрокаЦенности Из ТаблицаЦенности Цикл

		Движение = Движения.НДСНачисленный.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаЦенности);

		Движение.СчетФактура   = СтрокаЦенности.ДокументОснование;
		Движение.ДатаОплаты    = СтрокаЦенности.Период;
		Движение.ДатаСобытия   = СтрокаЦенности.Период;

		Движение.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		Движение.ВидЦенности   = Перечисления.ВидыЦенностей.Товары;
		Движение.Событие       = Перечисления.СобытияПоНДСПродажи.Реализация;
		
		Движение.СчетДоходовБУ = СтрокаЦенности.СчетДоходов;
		Движение.СчетУчетаНДС  = ПланыСчетов.Хозрасчетный.НДС;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаАвансы Цикл

		Движение = Движения.НДСНачисленный.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.Покупатель  		= Реквизиты.Контрагент;
		Движение.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
		Движение.ДатаСобытия 		= Реквизиты.Период;
		Движение.СчетФактура 		= Реквизиты.ДокументОснование;

		Движение.СтавкаНДС			= СтрокаТаблицы.СтавкаНДС;
		Движение.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДС;
		Движение.НДС 				= СтрокаТаблицы.СуммаНДС;
		Движение.ВидЦенности 		= СтрокаТаблицы.ВидЦенности;

		Движение.ВидНачисления 		= Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		Движение.Событие 			= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Движение.СчетУчетаНДС		= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Для каждого СтрокаРеализации Из ТаблицаПоРеализации Цикл

		Движение = Движения.НДСНачисленный.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРеализации);
		
		Движение.Организация	= Реквизиты.Организация;
		Движение.ДатаСобытия	= Реквизиты.Период;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, ТаблицаНДСНачисленный, Движения, Отказ) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаНДСНачисленный Цикл

		Движение = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйСтавка0КурсоваяРазница(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если СтрокаТаблицы.СуммаБезНДС = 0 И СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Запись = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ) Экспорт
	
	СчетНачисленияНДС = ПланыСчетов.Хозрасчетный.НДС;
	Для каждого СтрокаТаблицы Из СМРХозспособом Цикл
		Движение = Движения.НДСНачисленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты, ,"СчетУчетаНДС");
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы, ,"СчетУчетаНДС");
		Движение.СчетУчетаНДС = СчетНачисленияНДС;
	КонецЦикла;
	
	Движения.НДСНачисленный.Записывать = Истина;
КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Движение = Движения.НДСНачисленный.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
        		
		Движение.Покупатель 		= СтрокаТаблицы.Покупатель;
		Движение.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Движение.СчетФактура 	    = Реквизиты.Регистратор;
		
		Движение.ВидНачисления = Перечисления.ВидыНачисленийНДС.РеализацияТоваровУслуг;
		Движение.Номенклатура = СтрокаТаблицы.Номенклатура;
		Движение.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		
		Движение.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		Движение.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
		Движение.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
		Движение.НДС 		 = СтрокаТаблицы.НДС;
		Движение.Событие 	 = Перечисления.СобытияПоНДСПродажи.Реализация;
		Движение.ДатаСобытия = Реквизиты.Период;

	КонецЦикла;

	Движения.НДСНачисленный.Записывать = Истина;
	
КонецПроцедуры	

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ, РЕАЛИЗАЦИЯ 0%"

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0ПредполагаетсяСтавка0(СписанныеПартииСтавка0, Реквизиты, Движения, Отказ)

	Для каждого СтрокаТаблицы Из СписанныеПартииСтавка0 Цикл

		Если СтрокаТаблицы.СчетФактура = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли; 
		
		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			Запись.ДокументОтгрузки = Реквизиты.Регистратор;
		КонецЕсли;
	
		Запись.Состояние        = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		Запись.Событие          = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		Запись.СуммаБезНДС      = СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0ВычетПоРеализации(ТаблицаДвижений, Движения, Отказ) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, ТаблицаСнятиеБлокировкиВычета, Движения, Отказ) Экспорт

	Для каждого СтрокаБлокировки Из ТаблицаСнятиеБлокировкиВычета Цикл
		
		// Погашение суммы предположения 0%
	
		Движение = Движения.НДСПредъявленныйРеализация0.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаБлокировки);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Состояние		  = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
	
		// Отражение подтверждения/неподтверждения 0%
	
		Движение = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаБлокировки);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0РаспределениеНДСПоСтавке0(ТаблицаДвижений, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ЗАПИСИ КНИГИ ПРОДАЖ"

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДС(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Реквизиты.Период);
	Если ВерсияКодовВидовОпераций > 1 Тогда
		// При восстановлении НДС применяется код вида операции "21".
		КодВидаОперации = "21";
	Иначе
		// При восстановлении НДС применяется код вида операции, указанный в счете-фактуре.
		КодВидаОперации = "";
	КонецЕсли;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(КодВидаОперации,       "КодВидаОперации");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,КодВидаОперации,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента,ИсправленныйСчетФактура",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
	ЕстьСпособУчетаНДС = ТоварыУслуги.Колонки.Найти("СпособУчетаНДС") <> Неопределено;
	
	Для каждого ТекСтрокаВычета Из ТоварыУслуги Цикл
		
		Если ТекСтрокаВычета.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проводка по восстановлению НДС на 19 счет 
		Движение	= Движения.Хозрасчетный.Добавить();
		Движение.Период			= Реквизиты.Период;
		Движение.Организация	= Реквизиты.Организация;
		Движение.Сумма			= ТекСтрокаВычета.НДС;
		Движение.Содержание		= "Восстановление НДС";
		
		Движение.СчетДт	= ТекСтрокаВычета.СчетУчетаНДС; // 19.хх
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
		Если ЕстьСпособУчетаНДС Тогда
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СпособыУчетаНДС", ТекСтрокаВычета.СпособУчетаНДС);
		КонецЕсли;
		
		Движение.СчетКт	= ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЦикла; 

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО ПРИОБРЕТЕННЫМ ЦЕННОСТЯМ"

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Товары, Реквизиты, Движения, Отказ) Экспорт
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаСчетУчетаЗабалансовый = Товары.Колонки.Найти("СчетУчетаЗабалансовый") <> Неопределено;
	ВключениеВСтоимостьвТаблице 	 = Товары.Колонки.Найти("НДСВключенВСтоимость") <> Неопределено;
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		
		// По объектам строительства записи регистра НДСПоПриобретеннымЦенностям не делаются
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКолонкаСчетУчетаЗабалансовый И СтрокаТаблицы.СчетУчетаЗабалансовый Тогда
			Продолжить;
		КонецЕсли;
		
		// Если раздельный учет НДС не ведется движения по регистру формируются с целью блокировки вычета НДС
		// по объектам основных средств. Исключим блокировку НДС по приобретенному оборудованию.
		Если НЕ РаздельныйУчетНДС
		      И СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаБезНДСРуб = 0
			И СтрокаТаблицы.СуммаНДСРуб = 0
			И СтрокаТаблицы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Движения.НДСПоПриобретеннымЦенностям.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,
			"Период,Организация");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы,
			"Номенклатура,Склад,Партия,СчетФактура,СчетУчета,СчетУчетаНДС,СтавкаНДС,ВидЦенности,Количество");
		Стоимость	= СтрокаТаблицы.СуммаБезНДСРуб + СтрокаТаблицы.СуммаНДСРуб;	
		СуммаНДС 	= СтрокаТаблицы.СуммаНДСРуб;
		Если ВключениеВСтоимостьвТаблице Тогда 
			Запись.НДСВключенВСтоимость = СтрокаТаблицы.НДСВключенВСтоимость;
			Если Не СтрокаТаблицы.ПредъявленСчетФактура Тогда 
				Стоимость = 0;
				СуммаНДС  = 0;
			КонецЕсли;
		Иначе
			Запись.НДСВключенВСтоимость = Реквизиты.НДСВключенВСтоимость;
		КонецЕсли;	
		Если НЕ БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетУчета) Тогда
			Запись.Склад = Неопределено;
		КонецЕсли;
		
		Запись.Стоимость = Стоимость;
		Запись.НДС       = СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямВыбытиеТоваров(СписанныеПартииНДС, Движения, Отказ)

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		Если СтрокаТаблицы.НДСБылВключенВСтоимость <> СтрокаТаблицы.НДСВключенВСтоимость Тогда

			ЗаписьСторно = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьСторно, СтрокаТаблицы);
			ЗаписьСторно.НДСВключенВСтоимость = СтрокаТаблицы.НДСБылВключенВСтоимость;
			ЗаписьСторно.Количество = -ЗаписьСторно.Количество;
			ЗаписьСторно.Стоимость  = -ЗаписьСторно.Стоимость;
			ЗаписьСторно.НДС        = -ЗаписьСторно.НДС;

			ЗаписьПриход = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьПриход, СтрокаТаблицы);
			ЗаписьПриход.Стоимость  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьПриход.НДС        = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;

		КонецЕсли;

		ЗаписьРасход = Движения.НДСпоПриобретеннымЦенностям.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(ЗаписьРасход, СтрокаТаблицы);
		ЗаписьРасход.Стоимость  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		ЗаписьРасход.НДС        = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;

		// Если при включении НДС в стоимость было определено,
		// что часть суммы НДС ранее принята к вычету и ее следует восстановить,
		// то на эту часть делаются доп.движения НДСпоПриобретеннымЦенностям с пустым количеством и счетом-фактурой.
		// В дальнейшем такие записи будут исключаться при определении необходимости
		// включения / исключения НДС Из стоимости
		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			ЗаписьПриходПринятогоКВычету = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьПриходПринятогоКВычету, СтрокаТаблицы);
			ЗаписьПриходПринятогоКВычету.Стоимость   = СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.НДС         = СтрокаТаблицы.НДССписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.СчетФактура = Неопределено;
			ЗаписьПриходПринятогоКВычету.Количество  = 0;

			ЗаписьРасходПринятогоКВычету = Движения.НДСпоПриобретеннымЦенностям.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(ЗаписьРасходПринятогоКВычету, СтрокаТаблицы);
			ЗаписьРасходПринятогоКВычету.Стоимость   = СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьРасходПринятогоКВычету.НДС         = СтрокаТаблицы.НДССписанияНаРасходы;
			ЗаписьРасходПринятогоКВычету.СчетФактура = Неопределено;
			ЗаписьРасходПринятогоКВычету.Количество  = 0;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеНаДругойСклад(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт
	
	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		// Новый счет учета определяем по таблице списанных партий бух.учета
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(
			Новый Структура("ИмяСписка,НомерСтроки",
			СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента));
		СчетУчетаПолучатель  = СтрокиСписанияБухУчет[0].КорСчетСписания;
		// Склад записывается в движения, только если на счете есть аналитика по складам и ведется учет по сумме
		ВедетсяСкладскойУчет = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СчетУчетаПолучатель);

		ЗаписьПриход = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(ЗаписьПриход, СтрокаТаблицы);
		ЗаписьПриход.Стоимость  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		ЗаписьПриход.НДС        = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;
		ЗаписьПриход.СчетУчета  = СчетУчетаПолучатель;
		ЗаписьПриход.Склад      = ?(ВедетсяСкладскойУчет, Реквизиты.СкладПолучатель, Неопределено);

		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			ЗаписьПриходПринятогоКВычету = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьПриходПринятогоКВычету, СтрокаТаблицы);
			ЗаписьПриходПринятогоКВычету.Стоимость   = СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.НДС         = СтрокаТаблицы.НДССписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.СчетФактура = Неопределено;
			ЗаписьПриходПринятогоКВычету.Количество  = 0;
			ЗаписьПриходПринятогоКВычету.СчетУчета   = СчетУчетаПолучатель;
			ЗаписьПриходПринятогоКВычету.Склад       = ?(ВедетсяСкладскойУчет, Реквизиты.СкладПолучатель, Неопределено);

		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеИзНТТ(Товары, Реквизиты, Движения, Отказ) Экспорт

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Товары Цикл

		Запись = Движения.НДСПоПриобретеннымЦенностям.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,     "Период,Организация");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы, "Номенклатура,ВидЦенности,Количество");
		Запись.Партия    = Реквизиты.Регистратор;
		Запись.СчетУчета = СтрокаТаблицы.СчетУчетаПолучатель;
		Если НЕ БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Запись.СчетУчета) Тогда
			Запись.Склад = Неопределено;
		Иначе
			Запись.Склад = СтрокаТаблицы.СкладПолучатель;
		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеОтгруженныхТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Движения, Отказ) Экспорт

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		// Новый счет учета определяем по таблице списанных партий бух.учета
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(
			Новый Структура("ИмяСписка,НомерСтроки",
			СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента));
		СчетУчетаПолучатель  = СтрокиСписанияБухУчет[0].КорСчетСписания;

		ЗаписьПриход = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(ЗаписьПриход, СтрокаТаблицы);
		ЗаписьПриход.Стоимость  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		ЗаписьПриход.НДС        = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;
		ЗаписьПриход.СчетУчета  = СчетУчетаПолучатель;
		ЗаписьПриход.Склад      = Неопределено;

		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			ЗаписьПриходПринятогоКВычету = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьПриходПринятогоКВычету, СтрокаТаблицы);
			ЗаписьПриходПринятогоКВычету.Стоимость   = СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.НДС         = СтрокаТаблицы.НДССписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.СчетФактура = Неопределено;
			ЗаписьПриходПринятогоКВычету.Количество  = 0;
			ЗаписьПриходПринятогоКВычету.СчетУчета   = СчетУчетаПолучатель;
			ЗаписьПриходПринятогоКВычету.Склад       = Неопределено;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямОприходованиеТоваров(Товары, Реквизиты, Движения, Отказ) Экспорт

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Товары Цикл

		Запись = Движения.НДСПоПриобретеннымЦенностям.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,
			"Период,Организация,Склад");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы,
			"Номенклатура,СчетУчета,ВидЦенности,Количество");
		Если НЕ БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетУчета) Тогда
			Запись.Склад = Неопределено;
		КонецЕсли;
		Запись.Партия = Реквизиты.Регистратор;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеКомплекта(СписанныеПартииНДС, Реквизиты, Движения, Отказ) Экспорт
	
	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Приходуем комплект (только количество) со ставкой "Без НДС" и без счета-фактуры
	Запись = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
	Запись.Период       = Реквизиты.Период;
	Запись.Организация  = Реквизиты.Организация;
	Запись.СчетУчета    = Реквизиты.СчетУчетаКомплектов;
	Запись.Номенклатура = Реквизиты.Комплект;
	// Склад записывается в движения, только если на счете есть аналитика по складам и ведется учет по сумме
	ВедетсяСкладскойУчет = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(Реквизиты.СчетУчетаКомплектов);
	Если ВедетсяСкладскойУчет Тогда
		Запись.Склад    = Реквизиты.Склад;
	КонецЕсли;
	Запись.Партия       = Реквизиты.Регистратор; // Партия - документ комплектации
	Запись.СчетФактура  = Неопределено;
	Запись.ВидЦенности  = УчетНДС.ОпределитьВидЦенности(Реквизиты.СчетУчетаКомплектов);
	Запись.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; // 19.03
	Запись.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
	Если Реквизиты.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		Запись.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	Запись.Количество   = Реквизиты.КоличествоКомплектов;
	Запись.Стоимость    = 0;
	Запись.НДС          = 0;
	
	СписанныеПартииНДС.Свернуть("
		|СчетФактура, НДСВключенВСтоимость, ВидЦенности, СчетУчетаНДС, СтавкаНДС",
		"Стоимость, НДС, СтоимостьСписанияНаРасходы, НДССписанияНаРасходы");
	
	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		ЗаписьПриход = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(ЗаписьПриход, СтрокаТаблицы);
		
		ЗаписьПриход.Период       = Реквизиты.Период;
		ЗаписьПриход.Организация  = Реквизиты.Организация;
		ЗаписьПриход.Номенклатура = Реквизиты.Комплект;
		ЗаписьПриход.Партия       = Реквизиты.Регистратор; // Партия - документ комплектации
		ЗаписьПриход.СчетУчета    = Реквизиты.СчетУчетаКомплектов;
		Если ВедетсяСкладскойУчет Тогда
			ЗаписьПриход.Склад = Реквизиты.Склад;
		КонецЕсли;
		
		ЗаписьПриход.Количество = 0;
		ЗаписьПриход.Стоимость  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		ЗаписьПриход.НДС        = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;

		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			ЗаписьПриходПринятогоКВычету = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗаписьПриходПринятогоКВычету, СтрокаТаблицы);
			
			ЗаписьПриходПринятогоКВычету.Период       = Реквизиты.Период;
			ЗаписьПриходПринятогоКВычету.Организация  = Реквизиты.Организация;
			ЗаписьПриходПринятогоКВычету.Номенклатура = Реквизиты.Комплект;
			ЗаписьПриходПринятогоКВычету.Партия       = Реквизиты.Регистратор; // Партия - документ комплектации
			ЗаписьПриходПринятогоКВычету.СчетФактура  = Неопределено;
			ЗаписьПриходПринятогоКВычету.СчетУчета    = Реквизиты.СчетУчетаКомплектов;
			Если ВедетсяСкладскойУчет Тогда
				ЗаписьПриход.Склад = Реквизиты.Склад;
			КонецЕсли;
			
			ЗаписьПриходПринятогоКВычету.Количество = 0;
			ЗаписьПриходПринятогоКВычету.Стоимость  = СтрокаТаблицы.СтоимостьСписанияНаРасходы;
			ЗаписьПриходПринятогоКВычету.НДС        = СтрокаТаблицы.НДССписанияНаРасходы;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеКомплектующих(Комплектующие, СписанныеПартииНДС, Реквизиты, Движения, Отказ) Экспорт
	
	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСпоПриобретеннымЦенностям");
	ТаблицаДвижений.Колонки.Добавить("ДоляСтоимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	Для каждого СтрокаТаблицы Из Комплектующие Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,
			"Номенклатура,СчетУчета,Количество,ДоляСтоимости");
		// Склад записывается в движения, только если на счете есть аналитика по складам и ведется учет по сумме
		ВедетсяСкладскойУчет = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетУчета);
		Если ВедетсяСкладскойУчет Тогда
			НоваяСтрока.Склад = Реквизиты.Склад;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия"); // Партия - документ разукомплектации
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ, "СчетУчетаНДС"); // 19.03
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
	Если Реквизиты.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
	КонецЕсли;
	УчетНДС.ЗаполнитьВидыЦенностей(ТаблицаДвижений, Неопределено, "СчетУчета");

	// Приходуем комплектующие (только количество) со ставкой "Без НДС" и без счета-фактуры
	Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		Запись = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
	КонецЦикла;

	// Распределяем стоимость и НДС каждой списанной партии комплекта между всеми комплектующими
	// пропорционально указанной в документе разукомплектации доле стоимости комплектующей

	// Количество в этих движениях не заполняется, они отражаются аналогично доп.расходам
	ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		Если СтрокаТаблицы.Стоимость = 0
			И СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Стоимость = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СтоимостьСписанияНаРасходы;
		НДС       = СтрокаТаблицы.НДС - СтрокаТаблицы.НДССписанияНаРасходы;

		Если Стоимость > 0
			ИЛИ НДС > 0 Тогда

			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Стоимость, ТаблицаДвижений, "Стоимость", "ДоляСтоимости");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				НДС, ТаблицаДвижений, "НДС", "ДоляСтоимости");

			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.ВидЦенности,          "ВидЦенности");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.СчетФактура,          "СчетФактура");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.СчетУчетаНДС,         "СчетУчетаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.СтавкаНДС,            "СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.НДСВключенВСтоимость, "НДСВключенВСтоимость");

			Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл
				Запись = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
			КонецЦикла;

		КонецЕсли;

		Если СтрокаТаблицы.СтоимостьСписанияНаРасходы > 0
			ИЛИ СтрокаТаблицы.НДССписанияНаРасходы > 0 Тогда

			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СтрокаТаблицы.СтоимостьСписанияНаРасходы, ТаблицаДвижений, "Стоимость", "ДоляСтоимости");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СтрокаТаблицы.НДССписанияНаРасходы, ТаблицаДвижений, "НДС", "ДоляСтоимости");

			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.ВидЦенности,          "ВидЦенности");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,                       "СчетФактура");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.СчетУчетаНДС,         "СчетУчетаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.СтавкаНДС,            "СтавкаНДС");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаТаблицы.НДСВключенВСтоимость, "НДСВключенВСтоимость");

			Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл
				Запись = Движения.НДСпоПриобретеннымЦенностям.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностям(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПоПриобретеннымЦенностям.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаВозвращаемыеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПартий = ПолучитьТаблицуПартийПоРегиструНДСПоПриобретеннымЦенностям(ТаблицаВозвращаемыеТовары, Реквизиты);
	
	Если ТаблицаПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ТаблицаПартий.Индексы.Добавить("ЕстьКоличество");
	
	ТаблицаПартийТовары = ТаблицаПартий.Скопировать(Новый Структура("ЕстьКоличество", Истина));
	ТаблицаПартийДопРасходы = ТаблицаПартий.Скопировать(Новый Структура("ЕстьКоличество", Ложь));
	
	Для Каждого СтрокаТаблицы Из ТаблицаВозвращаемыеТовары Цикл
		
		КоличествоОсталосьПогасить = СтрокаТаблицы.Количество;
	
		Если ПартионныйУчет Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, СчетУчета, Партия");
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура, СчетУчета");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		
		ПартииСписания = ТаблицаПартийТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого ПартияСписания Из ПартииСписания Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			ИначеЕсли ПартияСписания.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(ПартияСписания.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
			
			Если ПартияСписания.Количество = Количество Тогда
				Стоимость = ПартияСписания.Стоимость;
				НДС       = ПартияСписания.НДС;
			Иначе
				Стоимость = (ПартияСписания.Стоимость/ПартияСписания.Количество) * Количество;
				НДС       = (ПартияСписания.НДС/ПартияСписания.Количество) * Количество;
			КонецЕсли;
			
			Движение = Движения.НДСПоПриобретеннымЦенностям.ДобавитьРасход();
			
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			ЗаполнитьЗначенияСвойств(Движение, ПартияСписания);
			
			Движение.Количество = - Количество;
			Движение.Стоимость  = - Стоимость;
			Движение.НДС        = - НДС;
			
			КоэффициентСписанияДопРасходов = Количество / ПартияСписания.Количество;
			
			СтруктураПоискаДопРасходы = Новый Структура("Номенклатура,СчетУчета,Партия",
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, ПартияСписания.Партия);
			ПартииДопРасходов = ТаблицаПартийДопРасходы.НайтиСтроки(СтруктураПоискаДопРасходы);

			Для Каждого ПартияДопРасходов Из ПартииДопРасходов Цикл
				
				СписаннаяСтоимость = Окр(ПартияДопРасходов.Стоимость * КоэффициентСписанияДопРасходов, 2);
				СписанныйНДС       = Окр(ПартияДопРасходов.НДС * КоэффициентСписанияДопРасходов, 2);

				Движение = Движения.НДСПоПриобретеннымЦенностям.ДобавитьРасход();
				
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				ЗаполнитьЗначенияСвойств(Движение, ПартияДопРасходов);
				
				Движение.Количество = 0;
				Движение.Стоимость  = - СписаннаяСтоимость;
				Движение.НДС        = - СписанныйНДС;
			
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЦикла;

	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;
	
КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО КОСВЕННЫМ РАСХОДАМ"

Процедура СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ) Экспорт

	Если РаспределеляемыеРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВключениеВСтоимостьВТаблице = РаспределеляемыеРасходы.Колонки.Найти("НДСВключенВСтоимость") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из РаспределеляемыеРасходы Цикл

		Запись = Движения.НДСКосвенныеРасходы.Добавить();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,
			"Период,Организация");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы,
			"СчетФактура,СчетУчетаНДС,СтавкаНДС,ВидЦенности,СчетЗатрат,ПодразделениеЗатрат,СтатьяЗатрат,
			|Субконто1,Субконто2,Субконто3");

		Если ВключениеВСтоимостьВТаблице Тогда 
			Запись.НДСВключенВСтоимость = СтрокаТаблицы.НДСВключенВСтоимость;
		Иначе
			Запись.НДСВключенВСтоимость = Реквизиты.НДСВключенВСтоимость;
		КонецЕсли;
		
		Запись.СуммаБезНДС  = СтрокаТаблицы.СуммаБезНДСРуб;
		Запись.НДС          = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;

	Движения.НДСКосвенныеРасходы.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходыСписаниеТоваровНаРасходы(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	СчетаРаспределяемыхРасходов  = ПолучитьСчетаУчетаРаспределяемыхРасходов();
	СтатьиНераспределяемыхЗатрат = ПолучитьСтатьиНераспределяемыхЗатрат();

	ТаблицаНДСКосвенныеРасходы = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСКосвенныеРасходы");

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
		СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];

		Если ТипЗнч(СтрокаСписанияБухУчет.КорСубконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = СтрокаСписанияБухУчет.КорСубконто1;
		ИначеЕсли ТипЗнч(СтрокаСписанияБухУчет.КорСубконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = СтрокаСписанияБухУчет.КорСубконто2;
		ИначеЕсли ТипЗнч(СтрокаСписанияБухУчет.КорСубконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = СтрокаСписанияБухУчет.КорСубконто3;
		Иначе
			СтатьяЗатрат = Неопределено;
		КонецЕсли;

		Если СчетаРаспределяемыхРасходов.Найти(СтрокаСписанияБухУчет.КорСчетСписания) = Неопределено
			ИЛИ СтатьиНераспределяемыхЗатрат.Найти(СтатьяЗатрат) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Стоимость = 0 И СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;	

		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			ИЛИ СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНДСКосвенныеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

		НоваяСтрока.СуммаБезНДС  = СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДС;
		НоваяСтрока.СчетЗатрат   = СтрокаСписанияБухУчет.КорСчетСписания;
		НоваяСтрока.Субконто1    = СтрокаСписанияБухУчет.КорСубконто1;
		НоваяСтрока.Субконто2    = СтрокаСписанияБухУчет.КорСубконто2;
		НоваяСтрока.Субконто3    = СтрокаСписанияБухУчет.КорСубконто3;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.ПодразделениеЗатрат = СтрокаСписанияБухУчет.КорПодразделение;

	КонецЦикла;

	СформироватьДвиженияНДСКосвенныеРасходы(ТаблицаНДСКосвенныеРасходы, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходыПередачаМатериаловВЭксплуатацию(СписанныеПартииНДС, ОтражениеРасходов, Реквизиты, Движения, Отказ) Экспорт

	СчетаРаспределяемыхРасходов  = ПолучитьСчетаУчетаРаспределяемыхРасходов();
	СтатьиНераспределяемыхЗатрат = ПолучитьСтатьиНераспределяемыхЗатрат();

	ТаблицаНДСКосвенныеРасходы = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСКосвенныеРасходы");

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		Отбор = Новый Структура("ИмяСписка,НомерСтрокиДокумента", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		ОтражениеРасходовПоСтроке = ОтражениеРасходов.Скопировать(Отбор);
		Если ОтражениеРасходовПоСтроке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СтрокаТаблицы.Стоимость, ОтражениеРасходовПоСтроке, "Стоимость", "Коэффициент");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			СтрокаТаблицы.НДС, ОтражениеРасходовПоСтроке, "НДС", "Коэффициент");

		Для каждого СтрокаТаблицыРасходов Из ОтражениеРасходовПоСтроке Цикл

			Если СчетаРаспределяемыхРасходов.Найти(СтрокаТаблицыРасходов.СчетЗатрат) = Неопределено
				ИЛИ СтатьиНераспределяемыхЗатрат.Найти(СтрокаТаблицыРасходов.СтатьяЗатрат) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблицаНДСКосвенныеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРасходов,
				"СчетЗатрат,Субконто1,Субконто2,Субконто3,СтатьяЗатрат,ПодразделениеЗатрат,НДС");
			НоваяСтрока.СуммаБезНДС = СтрокаТаблицыРасходов.Стоимость - СтрокаТаблицыРасходов.НДС;

		КонецЦикла;

	КонецЦикла;

	СформироватьДвиженияНДСКосвенныеРасходы(ТаблицаНДСКосвенныеРасходы, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходы(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСКосвенныеРасходы.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСКосвенныеРасходы.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходыРаспределение(Реквизиты, ТаблицаНДСКосвенныеРасходы, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаНДСКосвенныеРасходы Цикл

		Движение = Движения.НДСКосвенныеРасходы.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

	КонецЦикла;

	Движения.НДСКосвенныеРасходы.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ"

Процедура СформироватьДвиженияНДСПредъявленныйИсключениеНДСИзСтоимости(ТаблицаИсключениеНДС, Движения, Отказ) Экспорт

	Если ТаблицаИсключениеНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаИсключениеНДС Цикл

		Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС С АВАНСОВ"

Процедура СформироватьДвиженияНДССАвансовВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДССАвансов.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);

		НоваяЗапись.Организация = Реквизиты.Организация;
		НоваяЗапись.Покупатель 	= СтрокаТаблицы.Контрагент;
		НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;

		НоваяЗапись.ВидЦенности  = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.СчетФактура  = СтрокаТаблицы.СчетФактура;
		НоваяЗапись.СтавкаНДС 	 = СтрокаТаблицы.СтавкаНДС;
		НоваяЗапись.ДатаСобытия	 = Реквизиты.Период;
		НоваяЗапись.СуммаБезНДС  = СтрокаТаблицы.СуммаБезНДС;
		НоваяЗапись.НДС          = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДССАвансов.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСсАвансовПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Запись = Движения.НДСсАвансов.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);

		Запись.ВалютнаяСуммаСНДС  = СтрокаТаблицы.СуммаВВалютеРасчетов;
		Запись.ВалютаАванса       = СтрокаТаблицы.ВалютаДокумента;
		Запись.ДатаСобытия        = Реквизиты.Период;
		Запись.Организация		  = Реквизиты.Организация;
		Запись.ВидЦенности		  = СтрокаТаблицы.ВидЦенности;
		Запись.Покупатель		  = СтрокаТаблицы.Контрагент;
		Запись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Запись.СчетФактура        = СтрокаТаблицы.СчетФактура;
		Запись.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
		Запись.СуммаБезНДС		  = СтрокаТаблицы.СуммаБезНДС;
		Запись.НДС				  = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСсАвансов.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСсАвансовЗачетПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Запись = Движения.НДСсАвансов.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);

		Запись.ВалютнаяСуммаСНДС  = СтрокаТаблицы.ВалютнаяСумма;
		Запись.ВалютаАванса       = СтрокаТаблицы.ВалютаДокумента;
		Запись.ДатаСобытия        = Реквизиты.Период;
		Запись.Организация		  = Реквизиты.Организация;
		Запись.ВидЦенности		  = СтрокаТаблицы.ВидЦенности;
		Запись.Покупатель		  = СтрокаТаблицы.Поставщик;
		Запись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		Запись.СчетФактура        = СтрокаТаблицы.СчетФактура;
		Запись.СтавкаНДС          = СтрокаТаблицы.СтавкаНДС;
		Запись.СуммаБезНДС		  = СтрокаТаблицы.СуммаБезНДС;
		Запись.НДС				  = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.НДСсАвансов.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ РЕГИСТРА "НДС АВАНСЫ ПО ДОГОВОРАМ КОМИССИИ"

Процедура СформироватьДвиженияАвансыПоДоговорамКомиссии(ТаблицаРеквизиты, ТаблицаПоДенежнымСредствам, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыАвансыПоДоговорамКомиссии(ТаблицаРеквизиты, ТаблицаПоДенежнымСредствам);
	Реквизиты = Параметры.Реквизиты[0];
	
	СтруктураТаблиц = ПолучитьТаблицуАвансовПоДоговорамКомиссии(Реквизиты, Параметры.ДенежныеСредства);
		
	СформироватьДвиженияПолученАвансОтПокупателя(Реквизиты, СтруктураТаблиц.ТаблицаАвансы, Движения, Отказ);
	
	Если СтруктураТаблиц.ТаблицаЗачетАвансов.Количество() > 0 Тогда
		 СформироватьДвиженияЗачетАвансаПокупателя(Реквизиты, СтруктураТаблиц.ТаблицаЗачетАвансов, Движения, Отказ);
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьПараметрыАвансыПоДоговорамКомиссии(ТаблицаРеквизиты, ТаблицаПоДенежнымСредствам) 
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"
	+ "Организация,"
	+ "Период,"
	+ "Контрагент";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "ВидОтчетаПоПлатежам,"
	+ "Покупатель,"
	+ "ДатаСобытия,"
	+ "СуммаБезНДС,"
	+ "СтавкаНДС,"
	+ "НДС";
	
	Параметры.Вставить("ДенежныеСредства", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоДенежнымСредствам, СписокОбязательныхКолонок));
		
	Возврат Параметры;
		
КонецФункции

Процедура СформироватьДвиженияПолученАвансОтПокупателя(Реквизиты, ТаблицаАвансы, Движения, Отказ)
		
	Для каждого СтрокаАванса Из ТаблицаАвансы Цикл
		
		Движение = Движения.НДСАвансыПоДоговорамКомиссии.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаАванса);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Комиссионер = Реквизиты.Контрагент;
		Движение.СчетФактура = Реквизиты.Регистратор;
		
	КонецЦикла;
	
	Движения.НДСАвансыПоДоговорамКомиссии.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияЗачетАвансаПокупателя(Реквизиты, ТаблицаЗачетАвансов, Движения, Отказ)
	
	ТаблицаОстатков = ПолучитьНезачтенныеАвансыПоДоговорамКомиссии(Реквизиты, ТаблицаЗачетАвансов);
	
	ТаблицаОстатков.Индексы.Добавить("Покупатель, СтавкаНДС");
	
	ТаблицаЗачетАвансов.Свернуть("Покупатель, СтавкаНДС", "СуммаБезНДС, НДС");
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Реквизиты.Период);
	Если ВерсияКодовВидовОпераций > 1 Тогда
		// При вычете НДС с аванса полученного применяется код вида операции "22".
		КодВидаОперации = "22";
	Иначе
		// При вычете НДС с аванса полученного применяется код вида операции, указанный в счете-фактуре.
		КодВидаОперации = "";
	КонецЕсли;
	
	Для Каждого СтрокаЗачетаАванса Из ТаблицаЗачетАвансов Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, СтавкаНДС");
		СтруктураПоиска.Покупатель = СтрокаЗачетаАванса.Покупатель;
		СтруктураПоиска.СтавкаНДС = СтрокаЗачетаАванса.СтавкаНДС;
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		// Зачет аванса
		Для Каждого СтрокаОстатка Из НайденныеСтроки Цикл
			
			Списать = Мин(СтрокаОстатка.СуммаБезНДСОстаток, СтрокаЗачетаАванса.СуммаБезНДС);
			СписатьНДС = Мин(СтрокаОстатка.НДСОстаток, СтрокаЗачетаАванса.НДС);
			
			СуммаБезНДСВычет = Мин(СтрокаОстатка.СуммаБезКВычету, СтрокаЗачетаАванса.СуммаБезНДС);
			СуммаНДСВычет = Мин(СтрокаОстатка.НДСКВычету, СтрокаЗачетаАванса.НДС);
			
			Если Списать > 0 Тогда
				
				// Зачет сумм в регистре "НДС авансы по договорам комиссии"
				Движение = Движения.НДСАвансыПоДоговорамКомиссии.ДобавитьРасход();
				
				Движение.ДатаСобытия = СтрокаОстатка.ДатаСобытия;
				Движение.Комиссионер = Реквизиты.Контрагент;
				Движение.СчетФактура = СтрокаОстатка.СчетФактура;
				Движение.Организация = Реквизиты.Организация;
				Движение.Покупатель  = СтрокаОстатка.Покупатель;
				Движение.СтавкаНДС   = СтрокаОстатка.СтавкаНДС;
				Движение.Период		 = Реквизиты.Период;
				Движение.СуммаБезНДС = Списать;
				Движение.НДС		 = СписатьНДС;
				
				Если СуммаБезНДСВычет > 0 ИЛИ СуммаНДСВычет > 0 Тогда
				
					// Движение по вычету в регистре "НДС покупки"
					Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
					
					Движение.ВидЦенности     = Перечисления.ВидыЦенностей.АвансыПолученные;
					Движение.ДатаОплаты      = Реквизиты.Период;
					Движение.ДатаСобытия     = Реквизиты.Период;
					Движение.НДС             = СуммаНДСВычет;
					Движение.Организация     = Реквизиты.Организация;
					Движение.Период          = Реквизиты.Период;
					Движение.Поставщик       = СтрокаОстатка.Покупатель;
					Движение.Событие         = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
					Движение.СтавкаНДС       = СтрокаОстатка.СтавкаНДС;
					Движение.СуммаБезНДС     = СуммаБезНДСВычет;
					Движение.СчетУчетаНДС    = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
					Движение.СчетФактура     = СтрокаОстатка.СчетФактураКнигаПродаж;
					Движение.КодВидаОперации = КодВидаОперации;
					
					Движение.ИсправленныйСчетФактура = СтрокаОстатка.ИсправленныйСчетФактура;
					
					// Проводка по вычету
					Движение = Движения.Хозрасчетный.Добавить();
					
					Движение.Период 	 = Реквизиты.Период;
					Движение.Организация = Реквизиты.Организация;
					Движение.Сумма 		 = СуммаНДСВычет;
					
					Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
					БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
					
					Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
					БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаОстатка.Покупатель);
					БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные", СтрокаОстатка.СчетФактураКнигаПродаж);
					
					Движение.Содержание = "Вычет НДС по предоплате";
					
				КонецЕсли;
				
				СтрокаЗачетаАванса.СуммаБезНДС = СтрокаЗачетаАванса.СуммаБезНДС - Макс(Списать, СуммаБезНДСВычет);
				СтрокаЗачетаАванса.НДС = СтрокаЗачетаАванса.НДС - Макс(СписатьНДС, СуммаНДСВычет);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСАвансыПоДоговорамКомиссии.Записывать = Истина;
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	

Функция ПолучитьТаблицуАвансовПоДоговорамКомиссии(Реквизиты, ТаблицаПоДенежнымСредствам)
	
	СтруктураТаблиц = Новый Структура("ТаблицаАвансы, ТаблицаЗачетАвансов");
	
	Отбор	= Новый Структура("ВидОтчетаПоПлатежам");
	
	ТаблицаПоДенежнымСредствам.Индексы.Добавить("ВидОтчетаПоПлатежам");
	
	Отбор.ВидОтчетаПоПлатежам	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс;
	НайденныеСтрокиАвансы	= ТаблицаПоДенежнымСредствам.НайтиСтроки(Отбор);
	СтруктураТаблиц.ТаблицаАвансы	= ТаблицаПоДенежнымСредствам.Скопировать(НайденныеСтрокиАвансы);
	
	Отбор.ВидОтчетаПоПлатежам	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса;
	НайденныеСтрокиЗачетАванса	= ТаблицаПоДенежнымСредствам.НайтиСтроки(Отбор);
	СтруктураТаблиц.ТаблицаЗачетАвансов	= ТаблицаПоДенежнымСредствам.Скопировать(НайденныеСтрокиЗачетАванса);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПолучитьНезачтенныеАвансыПоДоговорамКомиссии(Реквизиты, ТаблицаЗачетАвансов)
	
	МоментВремени = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",     МоментВремени);
	Запрос.УстановитьПараметр("Дата",              Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",       Реквизиты.Организация);
	Запрос.УстановитьПараметр("Комиссионер",       Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СписокПокупателей", ТаблицаЗачетАвансов.ВыгрузитьКолонку("Покупатель"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродажОбороты.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТКнигаПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&Дата,
	|			,
	|			ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|				И Организация = &Организация
	|				И Покупатель В (&СписокПокупателей)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ИсправленныйСчетФактура,
	|	СтавкаНДС,
	|	Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТКнигаПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&Дата,
	|			,
	|			ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|				И Организация = &Организация
	|				И Поставщик В (&СписокПокупателей)) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ИсправленныйСчетФактура,
	|	СтавкаНДС,
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КнигаПродаж.Покупатель КАК Покупатель,
	|	КнигаПродаж.СчетФактура,
	|	КнигаПродаж.СтавкаНДС КАК СтавкаНДС,
	|	КнигаПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(КнигаПродаж.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	КнигаПродаж.ИсправленныйСчетФактура,
	|	СУММА(ЕСТЬNULL(КнигаПродаж.СуммаБезНДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.СуммаБезНДСОборот, 0)) КАК СуммаБезНДСОборот,
	|	СУММА(ЕСТЬNULL(КнигаПродаж.НДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.НДСОборот, 0)) КАК НДСОборот
	|ПОМЕСТИТЬ ВТНДСКВычету
	|ИЗ
	|	ВТКнигаПродаж КАК КнигаПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКнигаПокупок КАК КнигаПокупок
	|		ПО КнигаПродаж.СчетФактура = КнигаПокупок.СчетФактура
	|			И КнигаПродаж.ИсправленныйСчетФактура = КнигаПокупок.ИсправленныйСчетФактура
	|			И КнигаПродаж.СтавкаНДС = КнигаПокупок.СтавкаНДС
	|			И КнигаПродаж.Покупатель = КнигаПокупок.Поставщик
	|ГДЕ
	|	ЕСТЬNULL(КнигаПродаж.СуммаБезНДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.СуммаБезНДСОборот, 0) > 0
	|	И ЕСТЬNULL(КнигаПродаж.НДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.НДСОборот, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаПродаж.Покупатель,
	|	КнигаПродаж.СчетФактура,
	|	КнигаПродаж.СтавкаНДС,
	|	КнигаПродаж.ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(КнигаПродаж.ДатаСобытия, ДЕНЬ),
	|	КнигаПродаж.ИсправленныйСчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	СтавкаНДС,
	|	ДокументОплаты,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСАвансыПоДоговорамКомиссииОстатки.СчетФактура КАК СчетФактура,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСАвансыПоДоговорамКомиссииОстатки.Покупатель КАК Покупатель,
	|	НДСАвансыПоДоговорамКомиссииОстатки.ДатаСобытия КАК ДатаСобытия,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СуммаБезНДСОстаток,
	|	НДСАвансыПоДоговорамКомиссииОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТАвансыПоДоговорамКомиссии
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И Комиссионер = &Комиссионер
	|				И Покупатель В (&СписокПокупателей)) КАК НДСАвансыПоДоговорамКомиссииОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	ДатаСобытия,
	|	СтавкаНДС,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАвансыПоДоговорамКомиссии.СчетФактура,
	|	ВТАвансыПоДоговорамКомиссии.СтавкаНДС,
	|	ВТАвансыПоДоговорамКомиссии.Покупатель,
	|	ВТАвансыПоДоговорамКомиссии.ДатаСобытия,
	|	ВТАвансыПоДоговорамКомиссии.СуммаБезНДСОстаток,
	|	ВТАвансыПоДоговорамКомиссии.НДСОстаток,
	|	ВТНДСКВычету.СчетФактура КАК СчетФактураКнигаПродаж,
	|	ВТНДСКВычету.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЕСТЬNULL(ВТНДСКВычету.СуммаБезНДСОборот, 0) КАК СуммаБезКВычету,
	|	ЕСТЬNULL(ВТНДСКВычету.НДСОборот, 0) КАК НДСКВычету
	|ИЗ
	|	ВТАвансыПоДоговорамКомиссии КАК ВТАвансыПоДоговорамКомиссии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСКВычету КАК ВТНДСКВычету
	|		ПО ВТАвансыПоДоговорамКомиссии.СчетФактура = ВТНДСКВычету.ДокументОплаты
	|			И ВТАвансыПоДоговорамКомиссии.СтавкаНДС = ВТНДСКВычету.СтавкаНДС
	|			И ВТАвансыПоДоговорамКомиссии.Покупатель = ВТНДСКВычету.Покупатель
	|			И ВТАвансыПоДоговорамКомиссии.ДатаСобытия = ВТНДСКВычету.ДатаСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТАвансыПоДоговорамКомиссии.ДатаСобытия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

//	ДВИЖЕНИЯ РЕГИСТРА БУХГАЛТЕРИИ

Процедура СформироватьПроводкиПоступлениеГТД(НомераГТД, Реквизиты, Движения, Отказ) Экспорт

	Если НомераГТД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из НомераГТД Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ГТД;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"НомераГТД", СтрокаТаблицы.НомерГТД);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения);

		Проводка.КоличествоДт = СтрокаТаблицы.Количество;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСписаниеГТД(Товары, Реквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(Товары) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчетовДляГТД = УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД();
	
	СтрокиИмпортныхТоваров = Новый Массив;
	Для каждого СтрокаТаблицы Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
			ИЛИ МассивСчетовДляГТД.Найти(СтрокаТаблицы.СчетУчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокиИмпортныхТоваров.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Если СтрокиИмпортныхТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки Кт ГТД
	
	ИмпортныеТовары = Товары.Скопировать(СтрокиИмпортныхТоваров);
	МассивТоваров   = ИмпортныеТовары.ВыгрузитьКолонку("Номенклатура");
	МассивТоваров   = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивТоваров);
	
	ИмпортныеТовары.Сортировать("ИмяСписка,НомерСтрокиДокумента");
	ИмпортныеТовары.Свернуть("Номенклатура,НомерГТД,СтранаПроисхождения", "Количество");
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ИмпортныеТовары);

	КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков()
		И НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период);

	Если КонтролироватьОстаток Тогда
		// Запрос к остаткам выполняем только в том случае, если необходимо их контролировать.
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмпортныеТовары", ИмпортныеТовары);
		Запрос.УстановитьПараметр("МассивТоваров",   МассивТоваров);
		Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
		Запрос.УстановитьПараметр("Организация",     Реквизиты.Организация);
		Запрос.УстановитьПараметр("ВидыСубконто",    ПланыСчетов.Хозрасчетный.ГТД.ВидыСубконто.ВыгрузитьКолонку("ВидСубконто"));
		Запрос.Текст = ТекстЗапросаСписаниеГТД();
		Результат    = Запрос.Выполнить();

		// При выполнении запроса в таблицу будет добавлена колонка КоличествоОстаток из Хозрасчетного по счету ГТД.
		ИмпортныеТовары = Результат.Выгрузить();
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ИмпортныеТовары Цикл

		Если КонтролироватьОстаток Тогда
			КоличествоВПроводке = Мин(СтрокаТаблицы.Количество, СтрокаТаблицы.КоличествоОстаток);
		Иначе
			КоличествоВПроводке = СтрокаТаблицы.Количество;
		КонецЕсли; 

		Если КоличествоВПроводке > 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "Списаны МПЗ";

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ГТД;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"Номенклатура", СтрокаТаблицы.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"НомераГТД", СтрокаТаблицы.НомерГТД);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СтраныПроисхождения", СтрокаТаблицы.СтранаПроисхождения);

			Проводка.КоличествоКт = КоличествоВПроводке;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВключениеНДСВСтоимостьЗапасов(СтрокиТаблицыУменьшениеВычета, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ)

	Если СтрокиТаблицыУменьшениеВычета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиМПЗ 		= УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям 	= СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ВидСубконтоПартии 		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
    
	// Проводки по включению НДС в стоимость запасов
	// Дт <Корсчет списания> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из СтрокиТаблицыУменьшениеВычета Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = "НДС включен в стоимость запасов";

		Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		Если ВедетсяУчетПоПартиям Тогда
			Отбор.Вставить("Партия", СтрокаТаблицы.Партия);
			СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
			Если СтрокиСписанияБухУчет.Количество() = 0 Тогда
				Отбор.Удалить("Партия");
				СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
			КонецЕсли;
		Иначе
			СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
		КонецЕсли;
		СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];

		Проводка.СчетДт = СтрокаСписанияБухУчет.КорСчетСписания;
		Для НомерСубконто = 1 По 3 Цикл
			ВидСубконто = СтрокаСписанияБухУчет["ВидКорСубконто" + НомерСубконто];
			Если НЕ ВедетсяУчетПоПартиям И ВидСубконто = ВидСубконтоПартии Тогда
				Продолжить;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				ВидСубконто, СтрокаСписанияБухУчет["КорСубконто" + НомерСубконто]);
		КонецЦикла;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если ВедетсяУчетПоПартиям Тогда
			Если СвойстваСчетаДт.ВидСубконто1 = ВидСубконтоПартии
				ИЛИ СвойстваСчетаДт.ВидСубконто2 = ВидСубконтоПартии
				ИЛИ СвойстваСчетаДт.ВидСубконто3 = ВидСубконтоПартии Тогда
				Если НЕ ЗначениеЗаполнено(Проводка.СубконтоДт[ВидСубконтоПартии]) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
						ВидСубконтоПартии, СтрокаСписанияБухУчет.Партия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаСписанияБухУчет.КорПодразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		Проводка.СубконтоКт.Контрагенты  = СтрокаТаблицы.Поставщик;
		Проводка.СубконтоКт.СФПолученные = СтрокаТаблицы.СчетФактура;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВключениеНДСВРасходы(СтрокиВключениеВСтоимость, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ)

	// Проводки по отнесению НДС, ранее принятого к вычету, на расходы
	// Дт <Счет списания НДС> Кт <Счет учета НДС>
	// или (если СписыватьНДСнаКорСчетИАналитикуТовара = Истина)
	// Дт <Счет списания товара> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл

		Если СтрокаТаблицы.НДССписанияНаРасходы = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДССписанияНаРасходы;
		Проводка.Содержание  = "Списан на расходы НДС, ранее принятый к вычету";

		Если Реквизиты.СписыватьНДСнаКорСчетИАналитикуТовара Тогда

			Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
			СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
			СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];

			Проводка.СчетДт = СтрокаСписанияБухУчет.КорСчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"Партии", СтрокаСписанияБухУчет.Партия);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СтрокаСписанияБухУчет.ВидКорСубконто1, СтрокаСписанияБухУчет.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СтрокаСписанияБухУчет.ВидКорСубконто2, СтрокаСписанияБухУчет.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СтрокаСписанияБухУчет.ВидКорСубконто3, СтрокаСписанияБухУчет.КорСубконто3);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаСписанияБухУчет.КорПодразделение;
			КонецЕсли;

		Иначе

			Проводка.СчетДт = Реквизиты.СчетСписанияНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоСписанияНДС1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоСписанияНДС2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СубконтоСписанияНДС3);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		Проводка.СубконтоКт.Контрагенты  = СтрокаТаблицы.Поставщик;
		Проводка.СубконтоКт.СФПолученные = СтрокаТаблицы.СчетФактура;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиИсключениеНДСИзСтоимости(ТаблицаИсключениеНДСИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	// Проводки по исключению НДС Из стоимости
	// дебет <Корсчет списания> Кт <Счет учета НДС> сторно

	Если ТаблицаИсключениеНДСИзСтоимости.Количество() = 0
		ИЛИ ТаблицаИсключениеНДСИзСтоимости.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
		
	Для каждого СтрокаТаблицы Из ТаблицаИсключениеНДСИзСтоимости Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаТаблицы.НДС;
		Проводка.Содержание  = "НДС исключен из стоимости МПЗ";

		Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		Если НЕ СпособОценкиМПЗПоСредней Тогда
			Отбор.Вставить("Партия", СтрокаТаблицы.Партия);
		КонецЕсли;
		
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
		СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];
		
		Проводка.СчетДт = СтрокаСписанияБухУчет.КорСчетСписания;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Партии", СтрокаСписанияБухУчет.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто1, СтрокаСписанияБухУчет.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто2, СтрокаСписанияБухУчет.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто3, СтрокаСписанияБухУчет.КорСубконто3);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаСписанияБухУчет.КорПодразделение;
		КонецЕсли;
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		Проводка.СубконтоКт.Контрагенты  = СтрокаТаблицы.Поставщик;
		Проводка.СубконтоКт.СФПолученные = СтрокаТаблицы.СчетФактура;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНДСПредъявленныйРеализация0(СписанныеПартииСтавка0, Реквизиты, Движения, Отказ)

	// Проводки, соответствующие движениям регистра НДСПредъявленныйРеализация0
	// Дт 19.07 Кт <Счет учета НДС>

	Если СписанныеПартииСтавка0.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СписанныеПартииСтавка0 Цикл

		Если СтрокаТаблицы.СчетФактура = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли; 
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = "В связи с применением НДС 0% по реализации";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0; // 19.07
	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаТаблицы.ДокументОтгрузки);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", Реквизиты.Регистратор);
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРаспределениеНДСПоСтавке0(ТаблицаДвижений, Движения, Отказ)

	Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл

		Если СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Движение = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);

		Движение.Сумма = СтрокаДвижения.НДС;
		Движение.Содержание = "НДС по косв. расх. (по реализ., предполаг. НДС 0%)";

		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);

		Движение.СчетКт = СтрокаДвижения.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоВключениюИсключениюНДСИзСтоимости(Реквизиты, ВключитьВСтоимость = Истина, СтрокаСписания, КолонкиСтрокиСписания, НаборДвиженийХозрасчетный)

	Если ВключитьВСтоимость Тогда
		ЕстьКолонкаНДСКСписанию = (НЕ КолонкиСтрокиСписания.Найти("НДСКСписанию") = Неопределено);
	КонецЕсли;

	Если СтрокаСписания.НДС = 0 И (НЕ (ВключитьВСтоимость И ЕстьКолонкаНДСКСписанию И НЕ СтрокаСписания.НДСКСписанию = 0)) Тогда
		//Формирование проводки не требуется
		Возврат;
	КонецЕсли;

	СообщениеОбОшибке = "БУ: Не хватает данных для формирования проводки по " + ?(ВключитьВСтоимость, "включению НДС в стоимость МПЗ", "исключению НДС Из стоимости МПЗ:");
	ДостаточноДанных = Истина;
	ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Ложь;
	ИспользоватьКорСчетСписанияПриСписанииНаРасходыНУ = Ложь;

	Если НЕ ЗначениеЗаполнено(СтрокаСписания.СчетФактура) Тогда
		// Строки без указания счета-фактуры (основания) не отрабатываются в специальных операциях по НДС
		Возврат;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " счет-фактура <"+Строка(СтрокаСписания.СчетФактура)+">";

		Если (НЕ ЗначениеЗаполнено(СтрокаСписания.СчетУчетаНДС)) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете учета НДС";
			ДостаточноДанных = Ложь;
		КонецЕсли;

		// Для списания на расходы необходим "СчетСписанияНДС" в строке т.ч.
		Если ВключитьВСтоимость
			И (ЕстьКолонкаНДСКСписанию И НЕ СтрокаСписания.НДСКСписанию = 0) // Есть НДС к списанию на отдельный счет
			И ?(КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено, Истина, НЕ ЗначениеЗаполнено(СтрокаСписания.СчетСписанияНДС)) Тогда

			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено Тогда
			    ИспользоватьКорСчетСписанияПриСписанииНаРасходы = Истина;
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы)";
				ДостаточноДанных = Ложь;
			КонецЕсли;

		КонецЕсли;

		Если ВключитьВСтоимость
			И (ЕстьКолонкаНДСКСписанию И НЕ СтрокаСписания.НДСКСписанию = 0)
			И ?(КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено, Истина, НЕ ЗначениеЗаполнено(СтрокаСписания.СчетСписанияНДС)) Тогда

			Если КолонкиСтрокиСписания.Найти("СчетСписанияНДС") = Неопределено Тогда
			    ИспользоватьКорСчетСписанияПриСписанииНаРасходыНУ = Истина;
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете списания НДС (при отнесении на расходы в налоговом учете)";
				ДостаточноДанных = Ложь;
			КонецЕсли;

		КонецЕсли;

		// Для включения в стоимость (исключения Из стоимости) необходим "КорСчетСписания" в строке т.ч.
		Если ((ВключитьВСтоимость
			И НЕ (СтрокаСписания.НДС = 0)) // НДС только к списанию на отдельный счет
			ИЛИ НЕ ВключитьВСтоимость ИЛИ ИспользоватьКорСчетСписанияПриСписанииНаРасходы)
			И ?(КолонкиСтрокиСписания.Найти("КорСчетСписания") = Неопределено,Истина,НЕ ЗначениеЗаполнено(СтрокаСписания.КорСчетСписания)) Тогда

			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + " - отсутствует информация о счете отнесения себестоимости ТМЦ";
			ДостаточноДанных = Ложь;

		КонецЕсли;

	КонецЕсли;

	ЕстьПартияВСтрокеСписания = КолонкиСтрокиСписания.Найти("Партия") <> Неопределено;

	Если ДостаточноДанных Тогда

		// отразим факт включения НДС в стоимость (исключения Из стоимости) соответствующей проводкой
		Если ВключитьВСтоимость Тогда

			СуммаКВключениюВСтоимость = СтрокаСписания.НДС;
			СуммаКСписанию = ?(ЕстьКолонкаНДСКСписанию,СтрокаСписания.НДСКСписанию, 0);

			Если НЕ СуммаКВключениюВСтоимость = 0 Тогда

				МассивКоррСубконто = Новый Массив(3);
				Для НомерСубконто = 1 По 3 Цикл
					Если Не КолонкиСтрокиСписания.Найти("КорСубконтоСписания" + НомерСубконто) = Неопределено Тогда
						МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания" + НомерСубконто];
					КонецЕсли;
				КонецЦикла;

				// проводка, отражающая включение НДС в стоимость
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = Реквизиты.Период;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт = СтрокаСписания.КорСчетСписания;

				Если Реквизиты.ПартионныйУчет И ЕстьПартияВСтрокеСписания И БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт)
					И НЕ СтрокаСписания.ПартияОтсутствуетВБУ Тогда
					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;
				КонецЕсли;

				Для каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл

					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;

				КонецЦикла;

				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);

				СтрокаСписанияПроводка.Содержание = "НДС включен в стоимость МПЗ";
				СтрокаСписанияПроводка.Сумма      = СуммаКВключениюВСтоимость;

			КонецЕсли;

			Если НЕ СуммаКСписанию = 0 Тогда
				Если ИспользоватьКорСчетСписанияПриСписанииНаРасходы Тогда
				    СчетСписания = СтрокаСписания.КорСчетСписания;
					МассивКоррСубконто = Новый Массив(3);
					Для НомерСубконто = 1 По 3 Цикл
						Если НЕ КолонкиСтрокиСписания.Найти("КорСубконтоСписания" + НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто - 1] = СтрокаСписания["КорСубконтоСписания" + НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				Иначе
				    СчетСписания = СтрокаСписания.СчетСписанияНДС;
					МассивКоррСубконто = Новый Массив(3);
					Для НомерСубконто = 1 По 3 Цикл
						Если НЕ КолонкиСтрокиСписания.Найти("СубконтоСписанияНДС" + НомерСубконто)= Неопределено Тогда
							МассивКоррСубконто[НомерСубконто - 1] = СтрокаСписания["СубконтоСписанияНДС" + НомерСубконто];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				// проводка, отражающая списание НДС на расходы
				СтрокаСписанияПроводка = НаборДвиженийХозрасчетный.Добавить();
				СтрокаСписанияПроводка.Период       = Реквизиты.Период;
				СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
				СтрокаСписанияПроводка.СчетДт 		= СчетСписания;

				Если Реквизиты.ПартионныйУчет И ЕстьПартияВСтрокеСписания И БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт)
					И НЕ СтрокаСписания.ПартияОтсутствуетВБУ Тогда

					СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;

				КонецЕсли;

				Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл
					Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
					ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
						СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
					КонецЕсли;
				КонецЦикла;

				СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
				БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);

				СтрокаСписанияПроводка.Содержание = "НДС списан на расходы";
				СтрокаСписанияПроводка.Сумма      = СуммаКСписанию;

			КонецЕсли;

		Иначе

			МассивКоррСубконто = новый Массив(3);
			Для НомерСубконто = 1 По 3 Цикл
				Если НЕ КолонкиСтрокиСписания.Найти("КорСубконтоСписания"+НомерСубконто)= Неопределено Тогда
					МассивКоррСубконто[НомерСубконто-1] = СтрокаСписания["КорСубконтоСписания"+НомерСубконто];
				КонецЕсли;
			КонецЦикла;

			// обратная проводка, отражающая исключение НДС Из стоимости при
			// передаче Из розницы ЕНВД в опт

			СтрокаСписанияПроводка 				= НаборДвиженийХозрасчетный.Добавить();
			СтрокаСписанияПроводка.Период       = Реквизиты.Период;
			СтрокаСписанияПроводка.Организация  = СтрокаСписания.Организация;
			СтрокаСписанияПроводка.СчетДт 		= СтрокаСписания.КорСчетСписания;

			Если Реквизиты.ПартионныйУчет И ЕстьПартияВСтрокеСписания И БухгалтерскийУчет.НаСчетеВедетсяПартионныйУчет(СтрокаСписанияПроводка.СчетДт)
				И НЕ СтрокаСписания.ПартияОтсутствуетВБУ Тогда

				СтрокаСписанияПроводка.СубконтоДт.Партии = СтрокаСписания.Партия;

			КонецЕсли;

			Для Каждого ВидСубконто Из СтрокаСписанияПроводка.СчетДт.ВидыСубконто Цикл

				Если ЗначениеЗаполнено(МассивКоррСубконто[0]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[0])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[0]);
				ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[1]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[1])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[1]);
				ИначеЕсли ЗначениеЗаполнено(МассивКоррСубконто[2]) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(МассивКоррСубконто[2])) Тогда
					СтрокаСписанияПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, МассивКоррСубконто[2]);
				КонецЕсли;

			КонецЦикла;

			СтрокаСписанияПроводка.СчетКт = СтрокаСписания.СчетУчетаНДС; // 19.хх

			БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "Контрагенты", СтрокаСписания.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаСписанияПроводка.СчетКт, СтрокаСписанияПроводка.СубконтоКт, "СФПолученные", СтрокаСписания.СчетФактура);

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				СтрокаСписанияПроводка, СтрокаСписания.КорПодразделениеОрганизации, СтрокаСписания.КорПодразделениеОрганизации);

			СтрокаСписанияПроводка.Содержание = "НДС исключен из стоимости МПЗ";
			СтрокаСписанияПроводка.Сумма      = СтрокаСписания.НДС;

		КонецЕсли;

	КонецЕсли;

	НаборДвиженийХозрасчетный.Записывать = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ДВИЖЕНИЯ НДС ДОКУМЕНТА КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ

Функция ПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(Реквизиты)
	
	Перем СчетФактура;
	
	Если НЕ Реквизиты.РаздельныйУчетНДС Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВестиСкладскойУчетБУ = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	СкладДляДвижения = ?(ВестиСкладскойУчетБУ, Реквизиты.Склад, Справочники.Склады.ПустаяСсылка());
	
	СчетФактура = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение,
		Реквизиты.Регистратор, Реквизиты.ДокументПоступленияСсылка);
		
	МоментДокумента = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                          Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация",                     Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментДокумента",                 МоментДокумента);
	Запрос.УстановитьПараметр("Курс",                            Реквизиты.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",                       Реквизиты.КратностьДокумента);
	Запрос.УстановитьПараметр("Склад",                           СкладДляДвижения);
	Запрос.УстановитьПараметр("СчетФактура",                     СчетФактура);
	Запрос.УстановитьПараметр("ИсправляемыйДокументПоступления", Реквизиты.ДокументПоступленияСсылка);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.КоличествоДоИзменения >= КорректировкаПоступленияТовары.Количество
	|			ТОГДА &ИсправляемыйДокументПоступления
	|		ИНАЧЕ &СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	&ИсправляемыйДокументПоступления КАК Партия,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество - КорректировкаПоступленияТовары.КоличествоДоИзменения КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
	|	КОНЕЦ КАК Стоимость,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор,
	|	ЛОЖЬ КАК НоваяСтрока,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСМножитель
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения <> 0
	|	И НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправляемыйДокументПоступления,
	|	&Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступленияТовары.СчетУчета,
	|	КорректировкаПоступленияТовары.СчетУчетаНДС,
	|	КорректировкаПоступленияТовары.Ссылка.Дата,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения = 0
	|	И НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый";
		
	ТаблицаКорректировки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКорректировки Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенностиПоОперации(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , Ложь);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаКорректировки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.Партия,
	|	ТаблицаДокумента.Склад,
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Стоимость,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.НоваяСтрока,
	|	ТаблицаДокумента.СтавкаНДСМножитель
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура КАК Номенклатура,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности КАК ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.Склад КАК Склад,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
	|ПОМЕСТИТЬ НДСПоПриобретеннымЦенностям
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйДокументПоступления) КАК НДСПоПриобретеннымЦенностямОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ВидЦенности,
	|	Склад,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДокумента.СчетФактура,
	|	ВТТаблицаДокумента.Партия,
	|	ВТТаблицаДокумента.Склад,
	|	ВТТаблицаДокумента.ВидЦенности,
	|	ВТТаблицаДокумента.Номенклатура,
	|	ВТТаблицаДокумента.СтавкаНДС,
	|	ВТТаблицаДокумента.Количество,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) * ВТТаблицаДокумента.СтавкаНДСМножитель КАК НДС,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) КАК Стоимость,
	|	ВТТаблицаДокумента.СчетУчета,
	|	ВТТаблицаДокумента.СчетУчетаНДС,
	|	ВТТаблицаДокумента.Период,
	|	ВТТаблицаДокумента.Организация,
	|	ВТТаблицаДокумента.НомерСтроки,
	|	ВТТаблицаДокумента.Регистратор,
	|	ВТТаблицаДокумента.НоваяСтрока,
	|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
	|ИЗ
	|	ВТТаблицаДокумента КАК ВТТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностямОстатки
	|		ПО ВТТаблицаДокумента.Номенклатура = НДСПоПриобретеннымЦенностямОстатки.Номенклатура
	|			И ВТТаблицаДокумента.ВидЦенности = НДСПоПриобретеннымЦенностямОстатки.ВидЦенности
	|			И ВТТаблицаДокумента.Склад = НДСПоПриобретеннымЦенностямОстатки.Склад
	|			И ВТТаблицаДокумента.СчетУчетаНДС = НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток > 0
	|			ИЛИ ВТТаблицаДокумента.НоваяСтрока)";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(РеквизитыДокумента, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(РеквизитыДокумента);

	Если Не ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл 
				
		Движение = Движения.НДСПоПриобретеннымЦенностям.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
	
	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", Реквизиты.ДокументПоступленияСсылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ИсправленныйСчетФактура,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НДСВключенВСтоимость)
	|					И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА НДСПредъявленный.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВключенный,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА НДСПредъявленный.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСПредъявленный,
	|	МИНИМУМ(НДСПредъявленный.Период) КАК ПериодДвижения
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура = &ИсправляемыйДокумент
	|	И НДСПредъявленный.Регистратор <> &Ссылка
	|	И НДСПредъявленный.Период < &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ИсправленныйСчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС,
	|	ВидЦенности,
	|	СчетУчетаНДС,
	|	ПериодДвижения УБЫВ
	|"; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ОписаниеТиповЧисло12_10 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 10));
	
	// Определяем коэффициент по последней по дате корректировке
	ТаблицаКоэффициентов = Новый ТаблицаЗначений;
	ТаблицаКоэффициентов.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаКоэффициентов.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаКоэффициентов.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаКоэффициентов.Колонки.Добавить("НДСКоэффициент", 		ОписаниеТиповЧисло12_10);
	ТаблицаКоэффициентов.Колонки.Добавить("СуммаБезНДСКоэффициент", ОписаниеТиповЧисло12_10);
	
	ЕстьДанные = Выборка.Следующий();
	
	Пока ЕстьДанные Цикл
	
		ТекущаяСтавкаНДС 	= Выборка.СтавкаНДС;
		ТекущийВидЦенности 	= Выборка.ВидЦенности;
		ТекущийСчетУчетаНДС	= Выборка.СчетУчетаНДС;
		ТекущийКоэффициент 	= Неопределено;
		
		Пока ЕстьДанные
				И Выборка.СтавкаНДС = ТекущаяСтавкаНДС
				И Выборка.ВидЦенности = ТекущийВидЦенности
				И Выборка.СчетУчетаНДС = ТекущийСчетУчетаНДС Цикл
	
			Если ТекущийКоэффициент = Неопределено Тогда
				ТекущийКоэффициент = ?(Выборка.НДСПредъявленный <> 0, Выборка.НДСВключенный / Выборка.НДСПредъявленный, 0);
			КонецЕсли;
			ЕстьДанные = Выборка.Следующий();
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаКоэффициентов.Добавить();
		НоваяСтрока.СтавкаНДС 		= ТекущаяСтавкаНДС;
		НоваяСтрока.ВидЦенности 	= ТекущийВидЦенности;
		НоваяСтрока.СчетУчетаНДС 	= ТекущийСчетУчетаНДС;
		НоваяСтрока.НДСКоэффициент	= ТекущийКоэффициент;
		НоваяСтрока.СуммаБезНДСКоэффициент	= ТекущийКоэффициент;
	
	КонецЦикла;
	
	Возврат ТаблицаКоэффициентов;
	
КонецФункции	

Процедура СформироватьДвиженияКорректировкаНДСКосвенныхРасходов(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
	Если НЕ Реквизиты.РаздельныйУчетНДС 
		ИЛИ ТаблицаДвижений = Неопределено
		ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДатаИсходногоСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументПоступленияСсылка, "Дата"); 
	
	Если НачалоКвартала(ДатаИсходногоСчетаФактуры) <> НачалоКвартала(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		СтатьяЗатрат = СтрокаДвижения.СтатьяЗатрат;
		
		Если ЗначениеЗаполнено(СтатьяЗатрат)
			И (СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения 
			ИЛИ СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты) Тогда 
			
			Если СтрокаДвижения.НДС = 0 И СтрокаДвижения.СуммаБезНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвиженияКР = Движения.НДСКосвенныеРасходы.Добавить();		
			ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР, СтрокаДвижения);
			
			СтрокаДвиженияКР.НДСВключенВСтоимость = Реквизиты.НДСВключенВСтоимость;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Движения.НДСКосвенныеРасходы.Записывать = Истина;
    	
КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "Рублевые суммы документов в валюте"

Функция ПолучитьТабличнуюЧастьДокументаПоИмениСписка(ИмяСписка, НомерСтрокиДокумента)

	// Определим табличную часть документа
	ИмяСпискаВРег = ВРег(ИмяСписка);
	ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка();
	Если НомерСтрокиДокумента = 0 Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяСписка) Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка();
	ИначеЕсли ИмяСпискаВРег = "ТОВАРЫ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.Товары;
	ИначеЕсли ИмяСпискаВРег = "УСЛУГИ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.Услуги;
	ИначеЕсли ИмяСпискаВРег = "АГЕНТСКИЕУСЛУГИ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.АгентскиеУслуги;
	ИначеЕсли ИмяСпискаВРег = "ВОЗВРАТНАЯТАРА" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ВозвратнаяТара;
	ИначеЕсли ИмяСпискаВРег = "ТАБЛИЦАНЕМАТЕРИАЛЬНЫЕАКТИВЫ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.НематериальныеАктивы;
	ИначеЕсли ИмяСпискаВРег = "НМА" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка();
	ИначеЕсли ИмяСпискаВРег = "ОБОРУДОВАНИЕ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.Оборудование;
	ИначеЕсли ИмяСпискаВРег = "ОБЪЕКТЫСТРОИТЕЛЬСТВА" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ОбъектыСтроительства;
	ИначеЕсли ИмяСпискаВРег = "ОПЛАТАПОСТАВЩИКАМ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ОплатаПоставщикам;
	ИначеЕсли ИмяСпискаВРег = "ОС" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ОС;
	ИначеЕсли ИмяСпискаВРег = "ТОВАРЫИУСЛУГИ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ТоварыИУслуги;
	ИначеЕсли ИмяСпискаВРег = "ПРОЧЕЕ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.Прочее;
	ИначеЕсли ИмяСпискаВРег = "ТОВАРЫДОИЗМЕНЕНИЯ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ТоварыДоИзменения;
	ИначеЕсли ИмяСпискаВРег = "УСЛУГИДОИЗМЕНЕНИЯ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.УслугиДоИзменения;
	ИначеЕсли ИмяСпискаВРег = "АГЕНТСКИЕУСЛУГИДОИЗМЕНЕНИЯ" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.АгентскиеУслугиДоИзменения;
	ИначеЕсли ИмяСпискаВРег = "ПРЕДМЕТЫЛИЗИНГА" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ПредметыЛизинга;
	ИначеЕсли ИмяСпискаВРег = "ОСНОВНЫЕСРЕДСТВА" Тогда
		ТабличнаяЧастьДокумента = Перечисления.ТабличныеЧастиДокументов.ОсновныеСредства;
	Иначе
		ТабличнаяЧастьДокумента = Неопределено;
	КонецЕсли;

	Возврат ТабличнаяЧастьДокумента;

КонецФункции

Процедура ВыполнитьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаДокумента, Реквизиты, НДСВключенВСтоимость, БезНДС, Движения)
	
	// Свернем строки в таблице, чтобы не было дублей
	Если БезНДС Тогда
		ТаблицаДокумента.Свернуть("ИмяСписка, НомерСтроки", "СуммаРуб");
	Иначе
		ТаблицаДокумента.Свернуть("ИмяСписка, НомерСтроки", "СуммаБУ, СуммаНДСРуб, СуммаБезНДСРуб");
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		// Определим табличную часть документа
		ТабличнаяЧастьДокумента = ПолучитьТабличнуюЧастьДокументаПоИмениСписка(СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтроки);
		
		Если ТабличнаяЧастьДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Движение = Движения.РублевыеСуммыДокументовВВалюте.Добавить();
		// Свойства
		Движение.Период = Реквизиты.Период;
		
		// Измерения
		Движение.ТабличнаяЧастьДокумента 	= ТабличнаяЧастьДокумента;
		Движение.НомерСтрокиДокумента		= СтрокаТаблицы.НомерСтроки;
		Движение.Организация				= Реквизиты.Организация;
		
		// Ресурсы
		Если БезНДС Тогда
			
			Движение.Всего            = СтрокаТаблицы.СуммаРуб;
			Движение.НДС			  = 0;
			Движение.НалоговаяБазаНДС = 0;
			
		Иначе	
			
			Если НДСВключенВСтоимость Тогда
				Движение.Всего					= СтрокаТаблицы.СуммаБУ;
			Иначе
				Движение.Всего					= СтрокаТаблицы.СуммаБУ + СтрокаТаблицы.СуммаНДСРуб;
			КонецЕсли;
			
			Движение.НДС						= СтрокаТаблицы.СуммаНДСРуб;
			Движение.НалоговаяБазаНДС			= СтрокаТаблицы.СуммаБезНДСРуб;
			
		КонецЕсли;
		
	КонецЦикла;

	Движения.РублевыеСуммыДокументовВВалюте.Записывать = Истина;
	
КонецПроцедуры	

Процедура СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		// Движения выполняются только для документов в иностранной валюте и у.е.
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ТаблицаДокумента, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ВыполнитьДвиженияРублевыеСуммыДокументовВВалюте(Параметры.ТаблицаДокумента, Реквизиты, Реквизиты.НДСВключенВСтоимость, Ложь, Движения);

КонецПроцедуры

Функция ПодготовитьПараметрыРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ТаблицаДокумента, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"	  	  // <СправочникСсылка.Валюты>
	+ "НДСВключенВСтоимость"	  // <Булево>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы по табличной части документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"  			  // <Строка>
	+ "НомерСтроки," 	  		  // <Число(5, 0)>
	+ "СуммаБезНДСРуб,"			  // <Число(15, 2)>
	+ "СуммаБУ,"				  // <Число(15, 2)>
	+ "СуммаНДСРуб"				  // <Число(15, 2)>
	;
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		// Движения выполняются только для документов в иностранной валюте и у.е.
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРублевыеСуммыДокументовВВалюте(ТаблицаДокумента, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВыполнитьДвиженияРублевыеСуммыДокументовВВалюте(Параметры.ТаблицаДокумента, Реквизиты, Истина, Ложь, Движения);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРублевыеСуммыДокументовВВалюте(ТаблицаДокумента, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "ВалютаДокумента"	  	  	  // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы по табличной части документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"  			  // <Строка>
	+ "НомерСтроки," 	  		  // <Число(5, 0)>
	+ "СуммаБезНДСРуб,"			  // <Число(15, 2)>
	+ "СуммаБУ,"				  // <Число(15, 2)>
	+ "СуммаНДСРуб"				  // <Число(15, 2)>
	;
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		// Движения выполняются только для документов в иностранной валюте и у.е.
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРублевыеСуммыДокументовВВалютеБезНДС(ТаблицаДокумента, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ВыполнитьДвиженияРублевыеСуммыДокументовВВалюте(Параметры.ТаблицаДокумента, Реквизиты, Истина, Истина, Движения);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРублевыеСуммыДокументовВВалютеБезНДС(ТаблицаДокумента, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "ВалютаДокумента"	  		  // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы по табличной части документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"  			  // <Строка>
	+ "НомерСтроки," 	  		  // <Число(5, 0)>
	+ "СуммаРуб"				  // <Число(15, 2)>
	;
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОпределитьПоставщиковПоСписаннымПартиямНДС(СписанныеПартии, Период)

	ПоставщикиУжеОпределены = СписанныеПартии.Колонки.Найти("Поставщик") <> Неопределено;
	Если ПоставщикиУжеОпределены Тогда
		Возврат;
	КонецЕсли;

	СписанныеПартии.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	// Готовим таблицу счетов-фактур, по которым нужно найти поставщиков.
	ТаблицаСчетовФактур = СписанныеПартии.СкопироватьКолонки("СчетФактура");
	// Поставщики нужны только в некоторых случаях:
	// - если НДС включается в стоимость партии
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		СписанныеПартии.Скопировать(
		Новый Структура("НДСБылВключенВСтоимость,НДСВключенВСтоимость", Ложь, Истина), "СчетФактура"),
		ТаблицаСчетовФактур);
	// - если НДС исключается Из стоимости партии
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		СписанныеПартии.Скопировать(
		Новый Структура("НДСБылВключенВСтоимость,НДСВключенВСтоимость", Истина, Ложь), "СчетФактура"),
		ТаблицаСчетовФактур);
	// - если партия реализуется со ставкой 0%
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		СписанныеПартии.Скопировать(
		Новый Структура("СтавкаНДСДокумента", Перечисления.СтавкиНДС.НДС0), "СчетФактура"),
		ТаблицаСчетовФактур);

	Если ТаблицаСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСчетовФактур = ПолучитьПараметрыСчетовФактурПоНДСПредъявленный(ТаблицаСчетовФактур);

	ПараметрыСчетовФактур.Индексы.Добавить("СчетФактура");
	Для каждого СтрокаТаблицы Из СписанныеПартии Цикл
		СтрокаПараметровСФ = ПараметрыСчетовФактур.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
		Если СтрокаПараметровСФ <> Неопределено Тогда
			СтрокаТаблицы.Поставщик = СтрокаПараметровСФ.Поставщик;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметрыСчетовФактурПоНДСПредъявленный(ТаблицаСчетовФактур) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСчетовФактур", ТаблицаСчетовФактур);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетовФактур.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	&ТаблицаСчетовФактур КАК ТаблицаСчетовФактур
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.Поставщик КАК Поставщик,
	|	НДСПредъявленный.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК ТаблицаСчетовФактур
	|		ПО НДСПредъявленный.СчетФактура = ТаблицаСчетовФактур.СчетФактура
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСПредъявленный.СуммаБезНДС > 0";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультата;

КонецФункции

Функция ТекстЗапросаСписаниеГТД()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ИмпортныеТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	НомерГТД,
	|	СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОстатки.Субконто3 КАК СтранаПроисхождения,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&МассивТоваров)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	НомерГТД,
	|	СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЕСТЬNULL(ОстаткиГТД.Количество, 0) КАК КоличествоОстаток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|		ПО ТаблицаТовары.Номенклатура = ОстаткиГТД.Номенклатура
	|			И ТаблицаТовары.НомерГТД = ОстаткиГТД.НомерГТД
	|			И ТаблицаТовары.СтранаПроисхождения = ОстаткиГТД.СтранаПроисхождения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

// Возвращает таблицу расходов, суммы НДС по которым подлежат распределению
// между облагаемой и необлагаемой НДС деятельностью
//
Функция ОпределитьРаспределеляемыеРасходы(ТаблицаРасходов) Экспорт

	СчетаРаспределяемыхРасходов  = ПолучитьСчетаУчетаРаспределяемыхРасходов();
	СтатьиНераспределяемыхЗатрат = ПолучитьСтатьиНераспределяемыхЗатрат();
	
	РаспределеляемыеРасходы = ТаблицаРасходов.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из ТаблицаРасходов Цикл
		
		Если  СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
			И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0
			И СчетаРаспределяемыхРасходов.Найти(СтрокаТаблицы.СчетЗатрат) <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
			И СтатьиНераспределяемыхЗатрат.Найти(СтрокаТаблицы.СтатьяЗатрат) = Неопределено Тогда
			
			НоваяСтрока = РаспределеляемыеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЕсли;

	КонецЦикла;

	Возврат РаспределеляемыеРасходы;

КонецФункции

// Возвращает массив бухгалтерских счетов расходов, суммы НДС по которым подлежат распределению
// между облагаемой и необлагаемой НДС деятельностью
//
Функция ПолучитьСчетаУчетаРаспределяемыхРасходов()

	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	ПредопределенныеСчетаУчетаРасходов = Новый Массив;
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ОсновноеПроизводство);        // 20
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ВспомогательныеПроизводства); // 23
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ОбщепроизводственныеРасходы); // 25
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ОбщехозяйственныеРасходы);    // 26
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ОбслуживающиеПроизводства);   // 29
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.ИздержкиОбращения);           // 44.01
	ПредопределенныеСчетаУчетаРасходов.Добавить(ПланСчетов.КоммерческиеРасходы);         // 44.02
 
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчетаУчетаРасходов);

КонецФункции

// Возвращает массив статей затрат, суммы НДС по которым не подлежат распределению
// между облагаемой и необлагаемой НДС деятельностью
//
Функция ПолучитьСтатьиНераспределяемыхЗатрат()

	// Не распределяется НДС по статьям затрат с признаком ЕНВД.
	// По таким затратам НДС должен включаться в стоимость первичными документами

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)";

	СтатьиНераспределяемыхЗатрат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат СтатьиНераспределяемыхЗатрат;

КонецФункции

// Функция возвращает поле "Продавец" из счета-фактуры, введенного по указанному документу-основанию.
//
Функция ПолучитьПродавцаИзСчетаФактурыОснованияКорректировкиРеализации(ДокументыКорректировки) Экспорт

	Результат = Неопределено;

	ДокументРеализации = Неопределено; 
	Для Каждого ДокументКорректировки Из ДокументыКорректировки Цикл
		Если ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументКорректировки, "ДокументРеализации");
			ДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(РеквизитыДокумента.ДокументРеализации, Истина);
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Если ДокументРеализации = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСФ.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ДокументСФ.Продавец,
	|	ДокументСФ.Контрагент
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ДокументСФ
	|ГДЕ
	|	ДокументСФ.Ссылка = &ДокументРеализации
	|	И НЕ ДокументСФ.ПометкаУдаления
	|	И ДокументСФ.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И ДокументСФ.Продавец <> ДокументСФ.Контрагент
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
			Если ЗначениеЗаполнено(Выборка.Продавец) И Выборка.Продавец <> Выборка.Контрагент Тогда
				Результат = Выборка.Продавец;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПродавцаИзСчетаФактурыОснованияКорректировкиРеализации()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПЕЧАТЬ СЧЕТОВ-ФАКТУР

Функция ПечатьСчетовФактур(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура451");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());
	Запрос.Текст	= ТекстЗапросаПоСчетамФактурам;
	Результаты		= Запрос.ВыполнитьПакет();

	ПервыйДокумент = Истина;

	ВыборкаСФ	= Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ПлатежноРасчетныеДокументы	= Неопределено;
	Если Результаты.Количество() > 1 И НЕ Результаты[1].Пустой() Тогда
		ПлатежноРасчетныеДокументы	= Результаты[1].Выгрузить();
		ПлатежноРасчетныеДокументы.Индексы.Добавить("СчетФактура");
	КонецЕсли;
	
	ДанныеСчетаФактуры = Новый Структура(
		"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,ИспользуетсяПостановлениеНДС1137,НеподтверждениеНулевойСтавки,СводныйКомиссионный");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Ложь;
	ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки = Ложь;
	ДанныеСчетаФактуры.СводныйКомиссионный = Ложь;
	Пока ВыборкаСФ.Следующий() Цикл

		ТаблицаДокумента = Неопределено;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаСФ);
			ПараметрыОснования = УчетНДС.ПодготовитьДанныеДляПечатиСчетовФактур(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
			
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			Иначе
				Реквизиты = ПараметрыОснования.Реквизиты[0];
			КонецЕсли; 
				
			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Вывод шапки

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = ПодготовитьДанныеШапкиСчетаФактуры(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы);
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод заголовка таблицы

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод табличной части

		ОбластьМакета = Макет.ПолучитьОбласть("Строка");

		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
				ОбластьМакета.Параметры.СуммаБезНДС  = "--";
			КонецЕсли;	
			ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
		ОбластьМакета.Параметры.ИтогоВсего    = ТаблицаДокумента.Итог("Всего");
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);
			
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция КППНаДату(Ссылка, ДатаСведений) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Справочники.Контрагенты.КППНаДату(Ссылка, ДатаСведений);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Справочники.Организации.КППНаДату(Ссылка, ДатаСведений);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат Справочники.ПодразделенияОрганизаций.КППНаДату(Ссылка, ДатаСведений);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПечатьКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты    = Запрос.ВыполнитьПакет();

	ПервыйДокумент = Истина;

	ВыборкаСФ	= Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	Пока ВыборкаСФ.Следующий() Цикл

		ТаблицаДокумента = Неопределено;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыОснования = УчетНДС.ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(
				ВыборкаПоОснованиям.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
				
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			Иначе
				Реквизиты = ПараметрыОснования.Реквизиты[0];
			КонецЕсли; 
				
			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДокумента = Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Вывод шапки

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = УчетНДС.ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, Ложь);
		
		ОбластьМакета.Параметры.Номер = ДанныеШапки.Номер;
		ОбластьМакета.Параметры.Дата  = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.НаименованиеПродавца = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.АдресПродавца = ДанныеШапки.АдресПродавца;
		ОбластьМакета.Параметры.ИННКПППродавца = ДанныеШапки.ИННКПППродавца;
		ОбластьМакета.Параметры.НаименованиеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННКПППокупателя = ДанныеШапки.ИННКПППокупателя;
		
		РеквизитыОснований = "";
		
		Для каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
			РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") + "№ " + Основание.НомерСчетаФактуры + " от " 
				+ Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
		КонецЦикла;
	
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод заголовка таблицы

		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод табличной части

		ОбластьМакета = Макет.ПолучитьОбласть("Строка");

		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.РазницаБезНДСУменьшение	= ТаблицаДокумента.Итог("РазницаБезНДСУменьшение");
		ОбластьМакета.Параметры.РазницаБезНДСУвеличение	= ТаблицаДокумента.Итог("РазницаБезНДСУвеличение");
		ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ТаблицаДокумента.Итог("РазницаСНДСУменьшение");
		ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ТаблицаДокумента.Итог("РазницаСНДСУвеличение");
		ОбластьМакета.Параметры.РазницаНДСУменьшение    = ТаблицаДокумента.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение    = ТаблицаДокумента.Итог("РазницаНДСУвеличение");
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПодготовитьДанныеШапкиСчетаФактуры(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы)

	ДанныеШапки = Новый Структура;

	Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
		ДанныеШапки.Вставить("Номер", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь));
	Иначе
		ДанныеШапки.Вставить("Номер", ВыборкаСФ.Номер);
	КонецЕсли;
	ДанныеШапки.Вставить("Дата", Формат(ВыборкаСФ.Дата, "ДФ='дд ММММ гггг'") + " г.");

	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.Дата);
	ДанныеШапки.Вставить("ПредставлениеПоставщика",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
	ДанныеШапки.Вставить("АдресПоставщика",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	
	КПППоставщика = КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.Дата);
	ДанныеШапки.Вставить("ИННпоставщика",
		СведенияОПоставщике.ИНН + ?(ЗначениеЗаполнено(КПППоставщика), "/" + КППпоставщика, ""));
	
	СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.Дата);
	ДанныеШапки.Вставить("ПредставлениеПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
	ДанныеШапки.Вставить("АдресПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	ИНН = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	КПП = КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.Дата);
	ДанныеШапки.Вставить("ИННпокупателя",
		ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, ""));

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", "");
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Грузоотправитель)
		И ТипЗнч(Реквизиты.Грузоотправитель) <> Тип("Строка") Тогда
		СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель, ВыборкаСФ.Дата);
		ДанныеШапки.Вставить("ПредставлениеГрузоотправителя",
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,"));
	Иначе
		ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", Реквизиты.Грузоотправитель);
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ДанныеШапки.Вставить("ПредставлениеГрузополучателя", "");
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Грузополучатель) Тогда
		СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузополучатель, ВыборкаСФ.Дата);
		ДанныеШапки.Вставить("ПредставлениеГрузополучателя",
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,"));
	Иначе
		ДанныеШапки.Вставить("ПредставлениеГрузополучателя", Реквизиты.Грузополучатель);
	КонецЕсли;

	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
			ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
		Иначе
			ДанныеШапки.Вставить("ФИОПБОЮЛ",		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФамилияИнициалыФизлица,"));
			ДанныеШапки.Вставить("Свидетельство",	ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		КонецЕсли;
	КонецЕсли;
	
	// Платежно-расчетный документ
	ПоДокументу = "";
	Если ТипЗнч(ПлатежноРасчетныеДокументы) = Тип("ТаблицаЗначений") Тогда
		Отбор = Новый Структура("СчетФактура", ВыборкаСФ.СчетФактура);
		НайденныеСтроки = ПлатежноРасчетныеДокументы.НайтиСтроки(Отбор);
		Для каждого ДокументОплаты Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(ДокументОплаты.НомерДокумента)
				И ЗначениеЗаполнено(ДокументОплаты.ДатаДокумента) Тогда
				ПоДокументу = ПоДокументу + ?(ПустаяСтрока(ПоДокументу), "",", ")
					+ ДокументОплаты.НомерДокумента + " от " + Формат(ДокументОплаты.ДатаДокумента, "ДЛФ='Д'") + " г.";
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(ПоДокументу) Тогда
		ПоДокументу = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("ПоДокументу", ПоДокументу);
	
	Если ВыборкаСФ.ЭтоСчетФактураВыданный
		И ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты") 
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, ВыборкаСФ.Дата);
		
		НаименованиеКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
		ЮридическийАдресКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,");
		ИННКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", 
			"Составлен комиссионером (агентом): " + НаименованиеКомиссионера 
			+ ", " + ЮридическийАдресКомиссионера 
			+ ", ИНН/КПП: " + ИННКомиссионера 
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	Иначе
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	КонецЕсли;		

    Возврат ДанныеШапки;

КонецФункции

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл

		ТекПараметр = ОбластьМакета.Параметры.Получить(т);

		Если (СтрНайти(ТекПараметр, "Продавец:") <> 0)
		   И (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "Адрес:") <> 0)
			И (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			И (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			И (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   	И (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   	И (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");

		ИначеЕсли (СтрНайти(ТекПараметр, "Покупатель:") <> 0)
		   	И (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");

		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			И (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");

		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Возвращает для обособленного подразделения не выделенного на отдельный баланс представление,
// включающее полное наименование и фактический адрес, 
// представление используется для заполнения строки "Грузоотправитель и его адрес" печатной формы счета-фактуры
//
// Параметры:
//   ПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизации - подразделение,
//                              для которого необходимо определить представление
// Возвращаемое значение:
//  Строка - полное наименование и фактический адрес обособленного подразделения
Функция СведенияОПодразделенииОрганизации(ПодразделениеОрганизации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации)
		ИЛИ ТипЗнч(ПодразделениеОрганизации) <> Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат "";
	КонецЕсли;
	
	ПолноеНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеОрганизации, "НаименованиеПолное");
	
	МассивОбъектовКИ = Новый Массив;
	МассивОбъектовКИ.Добавить(ПодразделениеОрганизации);
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций);
	ТаблицаКИ = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(МассивОбъектовКИ, Неопределено, МассивВидовКИ);
	
	ФактическийАдрес = "";
	
	Для Каждого СтрокаТаблицыКИ Из ТаблицаКИ Цикл
		Если СтрокаТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
		   И СтрокаТаблицыКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций Тогда
			ФактическийАдрес = СтрокаТаблицыКИ.Представление;
		КонецЕсли;
	КонецЦикла;
	
	МассивСведений = Новый Массив;
	МассивСведений.Добавить(ПолноеНаименование);
	МассивСведений.Добавить(ФактическийАдрес);
	
	СтрокаРезультата = СтрСоединить(МассивСведений, ",");
	
	Возврат СокрЛП(СтрокаРезультата);
	
КонецФункции

Функция НужноОжидатьОкончаниеАктуализации(РеквизитыСФ, ПараметрыЗаписи) Экспорт
	
	Если РеквизитыСФ = Неопределено
		Или Не РеквизитыСФ.Свойство("ФоновоеВыполнение") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В фоновом задании идет актуализация перед выпиской счета-фактуры.
	
	РеквизитыСФ.ДлительнаяОперация.Вставить("АдресХранилищаСОшибками", РеквизитыСФ.АдресХранилищаСОшибками);
	ПараметрыЗаписи.Вставить("ДлительнаяОперация", РеквизитыСФ.ДлительнаяОперация);
	
	Возврат Истина;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт

	ТипОснования = ТипЗнч(ДокументСсылка);

	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНДСКВычету") Тогда
		Возврат ПолучитьТаблицуОтражениеНДСКВычету(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат ПолучитьТаблицуСчетФактураПолученный(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат ПолучитьТаблицуАвансовыйОтчет(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Если ДляКнигиПродаж Тогда
			Возврат ПолучитьТаблицуОтчетКомиссионераОПродажахДляКнигиПродаж(ДокументСсылка, Ошибка);
		Иначе
			Возврат ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументСсылка, Ошибка);
		КонецЕсли;
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат ПолучитьТаблицуРеализацияТоваровУслуг(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Возврат ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат ПолучитьТаблицуСчетФактураВыданный(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		Возврат ПолучитьТаблицуОтражениеНачисленияНДС(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Возврат ПолучитьТаблицуПриходныйКассовыйОрдер(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Возврат ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		Возврат ПолучитьТаблицуПоступлениеИзПереработки(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Возврат ПолучитьТаблицуПоступлениеДопРасходов(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		Возврат ПолучитьТаблицуРеализацияУслугПоПереработке(ДокументСсылка, Ошибка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Возврат ПолучитьТаблицуВозвратТоваровПоставщику(ДокументСсылка, Ошибка);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		Возврат ПолучитьТаблицуГТДИмпорт(ДокументСсылка, Ошибка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьТаблицуГТДИмпорт(ДокументСсылка, Ошибка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК НомерТаблицы,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.Количество,
	|	ГТДИмпортТовары.ФактурнаяСтоимость КАК Цена,
	|	ГТДИмпортТовары.ФактурнаяСтоимость КАК Сумма,
	|	ГТДИмпортТовары.ФактурнаяСтоимость КАК СуммаБезНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СуммаНДС КАК НДС,
	|	ГТДИмпортТовары.Ссылка.НомерГТД КАК НомерГТД,
	|	ГТДИмпортТовары.СтранаПроисхождения,
	|	ГТДИмпортТовары.СчетУчета КАК СчетЗатрат,
	|	ГТДИмпортТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ КАК ЭтоКомиссия
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ПО (ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела)
	|ГДЕ
	|	ГТДИмпортТовары.Ссылка = &Ссылка
	|	И ГТДИмпортРазделы.Ссылка = &Ссылка";

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуПоступлениеТоваровУслуг(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК НомерТаблицы,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугОборудование.Сумма - ПоступлениеТоваровУслугОборудование.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугОборудование.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК НДС,
	|	ПоступлениеТоваровУслугОборудование.НомерГТД,
	|	ПоступлениеТоваровУслугОборудование.СтранаПроисхождения,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчетаБУ,
	|	ПоступлениеТоваровУслугОборудование.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК CчетЗатрат,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ КАК ЭтоКомиссия
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.ОбъектСтроительства,
	|	1,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугОбъектыСтроительства.Сумма - ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугОбъектыСтроительства.Сумма
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СтавкаНДС,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СчетУчета,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.НомерСтроки,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|ГДЕ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма - ПоступлениеТоваровУслугТовары.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.СчетУчета.Забалансовый, ЛОЖЬ)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Сумма - ПоступлениеТоваровУслугУслуги.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Сумма
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.НомерСтроки,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Количество,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Цена,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугАгентскиеУслуги.Сумма - ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугАгентскиеУслуги.Сумма
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СчетРасчетов,
	|	NULL,
	|	NULL,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.НомерСтроки,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ПоступлениеТоваровУслугТопливо.Номенклатура,
	|	ПоступлениеТоваровУслугТопливо.Количество,
	|	ПоступлениеТоваровУслугТопливо.Цена,
	|	ПоступлениеТоваровУслугТопливо.Сумма,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТопливо.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТопливо.Сумма - ПоступлениеТоваровУслугТопливо.СуммаНДС
	|		ИНАЧЕ ПоступлениеТоваровУслугТопливо.Сумма
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТопливо.СтавкаНДС,
	|	ПоступлениеТоваровУслугТопливо.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТопливоВБаке),
	|	ПоступлениеТоваровУслугТопливо.СчетУчетаНДС,
	|	NULL,
	|	ПоступлениеТоваровУслугТопливо.НомерСтроки,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Топливо КАК ПоступлениеТоваровУслугТопливо
	|ГДЕ
	|	ПоступлениеТоваровУслугТопливо.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТаблицы,
	|	НомерСтроки";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуОтражениеНДСКВычету(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеНДСКВычетуТоварыИУслуги.НомерСтроки,
	|	ОтражениеНДСКВычетуТоварыИУслуги.ВидЦенности,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Номенклатура,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Сумма,
	|	ВЫБОР
	|		КОГДА ОтражениеНДСКВычетуТоварыИУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ОтражениеНДСКВычетуТоварыИУслуги.Сумма - ОтражениеНДСКВычетуТоварыИУслуги.СуммаНДС
	|		ИНАЧЕ ОтражениеНДСКВычетуТоварыИУслуги.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ОтражениеНДСКВычетуТоварыИУслуги.СтавкаНДС,
	|	ОтражениеНДСКВычетуТоварыИУслуги.СуммаНДС КАК НДС,
	|	ОтражениеНДСКВычетуТоварыИУслуги.СчетЗатрат,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Субконто1,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Субконто2,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Субконто3,
	|	ОтражениеНДСКВычетуТоварыИУслуги.СчетУчетаНДС,
	|	ОтражениеНДСКВычетуТоварыИУслуги.Событие,
	|	ЕСТЬNULL(ОтражениеНДСКВычетуТоварыИУслуги.СчетЗатрат.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
	|ИЗ
	|	Документ.ОтражениеНДСКВычету.ТоварыИУслуги КАК ОтражениеНДСКВычетуТоварыИУслуги
	|ГДЕ
	|	ОтражениеНДСКВычетуТоварыИУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтражениеНДСКВычетуТоварыИУслуги.НомерСтроки";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуСчетФактураПолученный(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основания.ДокументОснование КАК ДокументОснование,
	|	Основания.ДокументОснование.Проведен КАК ДокументОснованиеПроведен,
	|	Основания.ДокументОснование.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Основания.ДокументОснование.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основания.НомерСтроки";

	ТаблицаПоДокументамОснованиям = Запрос.Выполнить().Выгрузить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученныйАвансы.Сумма,
	|	СчетФактураПолученныйАвансы.СуммаНДС КАК НДС,
	|	СчетФактураПолученныйАвансы.СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.Авансы КАК СчетФактураПолученныйАвансы
	|ГДЕ
	|	СчетФактураПолученныйАвансы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученныйАвансы.НомерСтроки";

	РезультатЗапросаПоАвансам = Запрос.Выполнить().Выгрузить();


	Если ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда

		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");

		СтрокаОснования = ТаблицаПоДокументамОснованиям[0];

		СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам;

		ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных;

		ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);

		ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
		ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ДокументСсылка.Контрагент, "Поставщик");
		ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ДокументСсылка.Контрагент, "Контрагент");
		ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ДокументСсылка.ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ДокументСсылка.Контрагент, "СуммаБезНДС");
		ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДС");
		ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДСПоРеализации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДСПоРеализации");
		ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
		ТаблицаПоАвансам.Колонки.Добавить("ЭтоКомиссия", Новый ОписаниеТипов("Булево"));
		ТаблицаПоАвансам.ЗаполнитьЗначения(Ложь, "ЭтоКомиссия");

		Для каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл

			СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;

		КонецЦикла;

	Иначе

		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");

		Для каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				СтрокаОснования.НДСВключенВСтоимость = Ложь;
				СтрокаОснования.СуммаВключаетНДС = Ложь;
			КонецЕсли;

			Если СтрокаОснования.НДСВключенВСтоимость = Null Тогда
				СтрокаОснования.НДСВключенВСтоимость = Ложь;
			КонецЕсли;

			Если СтрокаОснования.НДСВключенВСтоимость Тогда
				Продолжить;
			КонецЕсли;

			СтрокаОснования.ТаблицаДанных = ПолучитьТаблицуДокументаНДС(СтрокаОснования.ДокументОснование);

			Если СтрокаОснования.ТаблицаДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				СтрокиКУдалению = Новый Массив;
				Для каждого СтрокаТаблицы Из СтрокаОснования.ТаблицаДанных Цикл
					Если СтрокаТаблицы.СчетФактура <> ДокументСсылка Тогда
						СтрокиКУдалению.Добавить(СтрокаТаблицы);
					КонецЕсли;
				КонецЦикла;

				Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					СтрокаОснования.ТаблицаДанных.Удалить(СтрокаКУдалению);
				КонецЦикла;
			КонецЕсли;

			Если СтрокаОснования.ТаблицаДанных.Колонки.Найти("СчетФактура") = Неопределено Тогда

				СтрокаОснования.ТаблицаДанных.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов(ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения));
				СтрокаОснования.ТаблицаДанных.ЗаполнитьЗначения(СтрокаОснования.ДокументОснование, "СчетФактура");

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	ТаблицаПоВсемДокументам = Неопределено;
	Для каждого СтрокаТаблицы Из ТаблицаПоДокументамОснованиям Цикл
		Если ТаблицаПоВсемДокументам = Неопределено Тогда
			ТаблицаПоВсемДокументам = СтрокаТаблицы.ТаблицаДанных;
		Иначе
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтрокаТаблицы.ТаблицаДанных, ТаблицаПоВсемДокументам);
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаПоВсемДокументам;

КонецФункции

Функция ПолучитьТаблицуАвансовыйОтчет(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АвансовыйОтчетТовары.Номенклатура,
		|	АвансовыйОтчетТовары.Количество,
		|	АвансовыйОтчетТовары.Цена,
		|	АвансовыйОтчетТовары.Сумма,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			АвансовыйОтчетТовары.Сумма - АвансовыйОтчетТовары.СуммаНДС
		|		ИНАЧЕ
		|			АвансовыйОтчетТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	АвансовыйОтчетТовары.СтавкаНДС,
		|	АвансовыйОтчетТовары.СуммаНДС КАК НДС,
		|	АвансовыйОтчетТовары.НомерГТД,
		|	АвансовыйОтчетТовары.СтранаПроисхождения,
		|	АвансовыйОтчетТовары.СчетУчета,
		|	АвансовыйОтчетТовары.СчетУчетаНДС,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК Субконто3,
		|	АвансовыйОтчетТовары.СчетФактура,
		|	АвансовыйОтчетТовары.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(АвансовыйОтчетТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		|ГДЕ
		|	АвансовыйОтчетТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвансовыйОтчетПрочее.Номенклатура,
		|	1,
		|	АвансовыйОтчетПрочее.Сумма КАК Цена,
		|	АвансовыйОтчетПрочее.Сумма,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС ТОГДА
		|			АвансовыйОтчетПрочее.Сумма - АвансовыйОтчетПрочее.СуммаНДС
		|		ИНАЧЕ
		|			АвансовыйОтчетПрочее.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	АвансовыйОтчетПрочее.СтавкаНДС,
		|	АвансовыйОтчетПрочее.СуммаНДС,
		|	NULL,
		|	NULL,
		|	АвансовыйОтчетПрочее.СчетЗатрат,
		|	АвансовыйОтчетПрочее.СчетУчетаНДС,
		|	АвансовыйОтчетПрочее.Субконто1,
		|	АвансовыйОтчетПрочее.Субконто2,
		|	АвансовыйОтчетПрочее.Субконто3,
		|	АвансовыйОтчетПрочее.СчетФактура,
		|	АвансовыйОтчетПрочее.НомерСтроки,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		|ГДЕ
		|	АвансовыйОтчетПрочее.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажах(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	// По вознаграждению комиссионера
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВознаграждения.Ссылка,
	|	СУММА(СуммыВознаграждения.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(СуммыВознаграждения.НДС) КАК НДС
	|ПОМЕСТИТЬ ВТ_СуммыВознаграждения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажахТовары.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения - ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения
	|			ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения
	|		КОНЕЦ КАК СуммаБезНДС,
	|		ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения КАК НДС
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|	ГДЕ
	|		ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажахТовары.Ссылка,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения - ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения
	|			ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения
	|		КОНЕЦ,
	|		ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахТовары
	|	ГДЕ
	|		ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка) КАК СуммыВознаграждения
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыВознаграждения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ИСТИНА КАК Услуга,
	|	1 КАК Количество,
	|	ЕСТЬNULL(ВТ_СуммыВознаграждения.СуммаБезНДС + ВТ_СуммыВознаграждения.НДС, 0) КАК Сумма,
	|	ЕСТЬNULL(ВТ_СуммыВознаграждения.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	Док.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ЕСТЬNULL(ВТ_СуммыВознаграждения.НДС, 0) КАК НДС,
	|	Док.СчетУчетаЗатрат КАК СчетЗатрат,
	|	Док.СчетУчетаНДС КАК СчетУчетаНДС,
	|	Док.Субконто1 КАК Субконто1,
	|	Док.Субконто2 КАК Субконто2,
	|	Док.Субконто3 КАК Субконто3,
	|	""Комиссионное вознаграждение"" КАК Содержание,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДоходов,
	|	НЕОПРЕДЕЛЕНО КАК Субконто,
	|	Док.СчетУчетаЗатрат КАК СчетРасходов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчетаНДСПоРеализации,
	|	ЕСТЬNULL(ВТ_СуммыВознаграждения.СуммаБезНДС + ВТ_СуммыВознаграждения.НДС, 0) КАК СуммаВознаграждения,
	|	ЕСТЬNULL(ВТ_СуммыВознаграждения.НДС, 0) КАК СуммаНДСВознаграждения,
	|	ЛОЖЬ КАК ЭтоКомиссия
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыВознаграждения КАК ВТ_СуммыВознаграждения
	|		ПО Док.Ссылка = ВТ_СуммыВознаграждения.Ссылка
	|ГДЕ
	|	Док.Ссылка = &Ссылка";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуОтчетКомиссионераОПродажахДляКнигиПродаж(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	// По реализованным товарам и услугам
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахТовары.Номенклатура,
		|	ОтчетКомиссионераОПродажахТовары.Количество,
		|	ОтчетКомиссионераОПродажахТовары.Цена,
		|	ОтчетКомиссионераОПродажахТовары.Сумма,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			ОтчетКомиссионераОПродажахТовары.Сумма - ОтчетКомиссионераОПродажахТовары.СуммаНДС
		|		ИНАЧЕ
		|			ОтчетКомиссионераОПродажахТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахТовары.СуммаНДС КАК НДС,
		|	ОтчетКомиссионераОПродажахТовары.СчетУчета КАК СчетУчетаБУ,
		|	ОтчетКомиссионераОПродажахТовары.СчетДоходов КАК СчетДоходовБУ,
		|	ОтчетКомиссионераОПродажахТовары.Субконто КАК СубконтоБУ,
		|	ОтчетКомиссионераОПродажахТовары.СчетУчетаНДСПоРеализации,
		|	ОтчетКомиссионераОПродажахТовары.СчетРасходов,
		|	ОтчетКомиссионераОПродажахТовары.СтранаПроисхождения,
		|	ОтчетКомиссионераОПродажахТовары.НомерГТД,
		|	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
		|ГДЕ
		|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахУслуги.Номенклатура,
		|	ОтчетКомиссионераОПродажахУслуги.Количество,
		|	ОтчетКомиссионераОПродажахУслуги.Цена,
		|	ОтчетКомиссионераОПродажахУслуги.Сумма,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераОПродажахУслуги.Ссылка.СуммаВключаетНДС ТОГДА
		|			ОтчетКомиссионераОПродажахУслуги.Сумма - ОтчетКомиссионераОПродажахУслуги.СуммаНДС
		|		ИНАЧЕ
		|			ОтчетКомиссионераОПродажахУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ОтчетКомиссионераОПродажахУслуги.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахУслуги.СуммаНДС,
		|	NULL,
		|	ОтчетКомиссионераОПродажахУслуги.СчетДоходов,
		|	ОтчетКомиссионераОПродажахУслуги.Субконто,
		|	ОтчетКомиссионераОПродажахУслуги.СчетУчетаНДСПоРеализации,
		|	ОтчетКомиссионераОПродажахУслуги.СчетРасходов,
		|	NULL,
		|	NULL,
		|	ОтчетКомиссионераОПродажахУслуги.НомерСтроки,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
		|ГДЕ
		|	ОтчетКомиссионераОПродажахУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуРеализацияТоваровУслуг(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
		|		ИНАЧЕ
		|			РеализацияТоваровУслугТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК НДС,
		|	РеализацияТоваровУслугТовары.СчетУчета КАК СчетУчетаБУ,
		|	РеализацияТоваровУслугТовары.СчетДоходов КАК СчетДоходовБУ,
		|	РеализацияТоваровУслугТовары.Субконто КАК СубконтоБУ,
		|	РеализацияТоваровУслугТовары.СчетУчетаНДСПоРеализации,
		|	РеализацияТоваровУслугТовары.СчетРасходов,
		|	РеализацияТоваровУслугТовары.НомерГТД,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС ТОГДА
		|			РеализацияТоваровУслугУслуги.Сумма - РеализацияТоваровУслугУслуги.СуммаНДС
		|		ИНАЧЕ
		|			РеализацияТоваровУслугУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	NULL,
		|	РеализацияТоваровУслугУслуги.СчетДоходов,
		|	РеализацияТоваровУслугУслуги.Субконто,
		|	РеализацияТоваровУслугУслуги.СчетУчетаНДСПоРеализации,
		|	РеализацияТоваровУслугУслуги.СчетРасходов,
		|	NULL,
		|	NULL,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
		|	РеализацияТоваровУслугАгентскиеУслуги.Количество,
		|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
		|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Ссылка.СуммаВключаетНДС ТОГДА
		|			РеализацияТоваровУслугАгентскиеУслуги.Сумма - РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС
		|		ИНАЧЕ
		|			РеализацияТоваровУслугАгентскиеУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
		|	NULL,
		|	РеализацияТоваровУслугАгентскиеУслуги.СчетРасчетов,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки,
		|	ИСТИНА
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуОтчетОРозничныхПродажах(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахТовары.Номенклатура,
		|	ОтчетОРозничныхПродажахТовары.Количество,
		|	ОтчетОРозничныхПродажахТовары.Цена,
		|	ОтчетОРозничныхПродажахТовары.Сумма,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			ОтчетОРозничныхПродажахТовары.Сумма - ОтчетОРозничныхПродажахТовары.СуммаНДС
		|		ИНАЧЕ
		|			ОтчетОРозничныхПродажахТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ОтчетОРозничныхПродажахТовары.СтавкаНДС,
		|	ОтчетОРозничныхПродажахТовары.СуммаНДС КАК НДС,
		|	ОтчетОРозничныхПродажахТовары.СчетУчета КАК СчетУчетаБУ,
		|	ОтчетОРозничныхПродажахТовары.СчетУчетаНДСПоРеализации,
		|	ОтчетОРозничныхПродажахТовары.СчетДоходов КАК СчетДоходовБУ,
		|	ОтчетОРозничныхПродажахТовары.Субконто КАК СубконтоБУ,
		|	ОтчетОРозничныхПродажахТовары.НомерГТД,
		|	ОтчетОРозничныхПродажахТовары.СтранаПроисхождения,
		|	ЕСТЬNULL(ОтчетОРозничныхПродажахТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|ГДЕ
		|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажахТовары.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуРеализацияОтгруженныхТоваров(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.ДокументОтгрузки);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС
		|		ИНАЧЕ
		|			РеализацияТоваровУслугТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК НДС,
		|	РеализацияТоваровУслугТовары.СчетУчета КАК СчетУчетаБУ,
		|	РеализацияТоваровУслугТовары.СчетДоходов КАК СчетДоходовБУ,
		|	РеализацияТоваровУслугТовары.Субконто КАК СубконтоБУ,
		|	РеализацияТоваровУслугТовары.СчетУчетаНДСПоРеализации,
		|	РеализацияТоваровУслугТовары.СчетРасходов,
		|	РеализацияТоваровУслугТовары.НомерГТД,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслугТовары.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуОтражениеНачисленияНДС(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОтражениеНачисленияНДСТоварыИУслуги.НомерСтроки,
		|	ОтражениеНачисленияНДСТоварыИУслуги.ВидЦенности,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Номенклатура,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Количество,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Цена,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Сумма,
		|	ВЫБОР
		|		КОГДА ОтражениеНачисленияНДСТоварыИУслуги.Ссылка.СуммаВключаетНДС ТОГДА
		|			ОтражениеНачисленияНДСТоварыИУслуги.Сумма - ОтражениеНачисленияНДСТоварыИУслуги.СуммаНДС
		|		ИНАЧЕ
		|			ОтражениеНачисленияНДСТоварыИУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СтавкаНДС,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СуммаНДС КАК НДС,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СчетУчета КАК СчетУчетаБУ,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СчетДоходов КАК СчетДоходовБУ,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Субконто КАК СубконтоБУ,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СчетУчетаНДСПоРеализации,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СтранаПроисхождения,
		|	ОтражениеНачисленияНДСТоварыИУслуги.НомерГТД,
		|	ОтражениеНачисленияНДСТоварыИУслуги.Событие,
		|	ОтражениеНачисленияНДСТоварыИУслуги.СторнирующаяЗаписьДопЛиста,
		|	ЕСТЬNULL(ОтражениеНачисленияНДСТоварыИУслуги.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ОтражениеНачисленияНДС.ТоварыИУслуги КАК ОтражениеНачисленияНДСТоварыИУслуги
		|ГДЕ
		|	ОтражениеНачисленияНДСТоварыИУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтражениеНачисленияНДСТоварыИУслуги.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуСчетФактураВыданный(ДокументСсылка, Ошибка)
	
	Перем ТаблицаПоДокументамОснованиям, ТаблицаПоДокументуОснования;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументСсылка, "ВидСчетаФактуры, СтавкаНДС, ДокументОснование, Сумма, СуммаНДС");
		
	Если РеквизитыДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Для каждого СтрокаТаблицы Из ДокументСсылка.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
				ДокументОснованиеСсылка = СтрокаТаблицы.ДокументОснование;
				ТаблицаПоДокументуОснования = ПолучитьТаблицуДокументаНДС(ДокументОснованиеСсылка, Ошибка);
				Если ТаблицаПоДокументуОснования <> Неопределено Тогда
					Если ТаблицаПоДокументамОснованиям = Неопределено Тогда
						ТаблицаПоДокументамОснованиям = ТаблицаПоДокументуОснования.Скопировать();
					Иначе
						ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументуОснования, ТаблицаПоДокументамОснованиям);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТаблицаПоДокументамОснованиям;
		
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.Колонки.Добавить("СчетФактура");
	ТаблицаДокумента.Колонки.Добавить("Сумма");
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.Колонки.Добавить("НДС");
	ТаблицаДокумента.Колонки.Добавить("СчетУчетаНДС");
	ТаблицаДокумента.Колонки.Добавить("Событие");
	ТаблицаДокумента.Колонки.Добавить("ЭтоКомиссия", Новый ОписаниеТипов("Булево"));
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	Если РеквизитыДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		Если СоответствиеСтавок[РеквизитыДокумента.СтавкаНДС] = Неопределено Тогда
			НоваяСтрока.СтавкаНДС = РеквизитыДокумента.СтавкаНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = СоответствиеСтавок[РеквизитыДокумента.СтавкаНДС];
		КонецЕсли;
	Иначе
		НоваяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
		НоваяСтрока.СтавкаНДС   = РеквизитыДокумента.СтавкаНДС;
	КонецЕсли;
	
	НоваяСтрока.СчетФактура  = РеквизитыДокумента.ДокументОснование;
	НоваяСтрока.Сумма        = РеквизитыДокумента.Сумма - РеквизитыДокумента.СуммаНДС;
	НоваяСтрока.НДС          = РеквизитыДокумента.СуммаНДС;
	НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
	НоваяСтрока.Событие      = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
	НоваяСтрока.ЭтоКомиссия  = Истина;
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПолучитьТаблицуВозвратТоваровОтПокупателя(ДокументОбъект, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Количество,
		|	ВозвратТоваровОтПокупателяТовары.Цена,
		|	ВозвратТоваровОтПокупателяТовары.Сумма,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС ТОГДА
		|			ВозвратТоваровОтПокупателяТовары.Сумма - ВозвратТоваровОтПокупателяТовары.СуммаНДС
		|		ИНАЧЕ
		|			ВозвратТоваровОтПокупателяТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК НДС,
		|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчетаБУ,
		|	ВозвратТоваровОтПокупателяТовары.СчетДоходов КАК СчетДоходовБУ,
		|	ВозвратТоваровОтПокупателяТовары.СчетРасходов,
		|	ВозвратТоваровОтПокупателяТовары.Субконто КАК СубконтоБУ,
		|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации,
		|	ВозвратТоваровОтПокупателяТовары.НомерГТД,
		|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуПриходныйКассовыйОрдер(ДокументОбъект, Ошибка)

	Если НЕ (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		И ДокументОбъект.ВыручкаСНТТ
		И УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК НДСВал,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	0 КАК СуммаБезНДСВал,
	|	0 КАК СчетДоходов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВал
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.НомерСтроки";

	ТаблицаВыручки = Запрос.Выполнить().Выгрузить();

	ТаблицаВыручки.Колонки.Добавить("Сумма");
	ТаблицаВыручки.Колонки.Добавить("НДС");
	ТаблицаВыручки.Колонки.Добавить("СуммаБезНДС");
	ТаблицаВыручки.Колонки.Добавить("Ценность");

	Если УчетнаяПолитика.Существует(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		СчетаУчетаВНТТ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
			ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.Дата,
			Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(ДокументОбъект.Организация, ДокументОбъект.Дата)));
		ТаблицаВыручки.ЗаполнитьЗначения(СчетаУчетаВНТТ.СчетДоходовОтРеализации, "СчетДоходов");
	КонецЕсли;

	ТаблицаВыручки.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары, "ВидЦенности");

	Если НЕ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда

		СуммаДокументаВВалютеРеглУчета = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТаблицаВыручки.Итог("СуммаВал"),
																	ДокументОбъект.ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить(),
																	ДокументОбъект.КурсДокумента, 1,
																	ДокументОбъект.КратностьДокумента, 1);
		Если НЕ СуммаДокументаВВалютеРеглУчета = 0  Тогда
			ТаблицаВыручки.ЗагрузитьКолонку(ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаДокументаВВалютеРеглУчета, ТаблицаВыручки.ВыгрузитьКолонку("СуммаВал")),"Сумма");
			НДСВВалютеРегУчета = Окр(СуммаДокументаВВалютеРеглУчета * ТаблицаВыручки.Итог("НДСВал") / ТаблицаВыручки.Итог("СуммаВал"), 2);
			Если НДСВВалютеРегУчета = 0  Тогда
				ТаблицаВыручки.ЗаполнитьЗначения(0,"НДС");
			Иначе
				ТаблицаВыручки.ЗагрузитьКолонку(ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСВВалютеРегУчета,ТаблицаВыручки.ВыгрузитьКолонку("НДСВал")),"НДС");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("СуммаВал"), "Сумма");
		ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("НДСВал"), "НДС");
	КонецЕсли;

	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл
		СтрокаВыручки.СуммаБезНДС = СтрокаВыручки.Сумма - СтрокаВыручки.НДС;
		СтрокаВыручки.СуммаБезНДСВал = СтрокаВыручки.СуммаВал - СтрокаВыручки.НДСВал;
	КонецЦикла;

	ТаблицаВыручки.Колонки.Добавить("ДокументОплаты");
	ТаблицаВыручки.Колонки.Добавить("ДатаОплаты");
	ТаблицаВыручки.Колонки.Добавить("СчетУчетаНДСПоРеализации");
	ТаблицаВыручки.Колонки.Добавить("ЭтоКомиссия");
	ТаблицаВыручки.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "ДокументОплаты");
	ТаблицаВыручки.ЗаполнитьЗначения(ДокументОбъект.Дата, "ДатаОплаты");
	ТаблицаВыручки.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Продажи_НДС, "СчетУчетаНДСПоРеализации");
	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "ЭтоКомиссия");

	Возврат ТаблицаВыручки;

КонецФункции

Функция ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(ДокументОбъект, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
		|	АктОбОказанииПроизводственныхУслугУслуги.Количество,
		|	АктОбОказанииПроизводственныхУслугУслуги.Цена,
		|	АктОбОказанииПроизводственныхУслугУслуги.Сумма,
		|	ВЫБОР
		|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС ТОГДА
		|			АктОбОказанииПроизводственныхУслугУслуги.Сумма - АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС
		|		ИНАЧЕ
		|			АктОбОказанииПроизводственныхУслугУслуги.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС,
		|	АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС КАК НДС,
		|	Неопределено КАК СчетУчетаБУ,
		|	АктОбОказанииПроизводственныхУслугУслуги.СчетДоходов КАК СчетДоходовБУ,
		|	АктОбОказанииПроизводственныхУслугУслуги.СчетРасходов,
		|	АктОбОказанииПроизводственныхУслугУслуги.Субконто КАК СубконтоБУ,
		|	АктОбОказанииПроизводственныхУслугУслуги.СчетУчетаНДСПоРеализации,
		|	АктОбОказанииПроизводственныхУслугУслуги.НоменклатурнаяГруппа,
		|	АктОбОказанииПроизводственныхУслугУслуги.СчетЗатрат,
		|	АктОбОказанииПроизводственныхУслугУслуги.ПлановаяСтоимость,
		|	АктОбОказанииПроизводственныхУслугУслуги.СуммаПлановая,
		|	АктОбОказанииПроизводственныхУслугУслуги.Спецификация,
		|	Неопределено КАК НомерГТД,
		|	Неопределено КАК СтранаПроисхождения,
		|	ЛОЖЬ КАК ЭтоКомиссия
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|ГДЕ
		|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	АктОбОказанииПроизводственныхУслугУслуги.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуПоступлениеИзПереработки(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Номенклатура  КАК Номенклатура,
		|	Док.Количество    КАК Количество,
		|	Док.Цена          КАК Цена,
		|	Док.Сумма         КАК Сумма,
		|	ВЫБОР
		|		КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА
		|			Док.Сумма - Док.СуммаНДС
		|		ИНАЧЕ
		|			Док.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	Док.СтавкаНДС     КАК СтавкаНДС,
		|	Док.СчетУчетаНДС  КАК СчетУчетаНДС,
		|	Док.Ссылка.СчетЗатрат  КАК СчетЗатрат,
		|	Док.СтатьяЗатрат  КАК СтатьяЗатрат,
		|	Док.СуммаНДС      КАК НДС,
		|	Док.СуммаНДС      КАК СуммаНДС,
		|	Док.Содержание    КАК Содержание,
		|	Док.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ЛОЖЬ КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Услуги КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуПоступлениеДопРасходов(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.НомерСтроки                                   КАК НомерСтроки,
		|	Док.Номенклатура                                  КАК Номенклатура,
		|	Док.Номенклатура.Услуга                           КАК Услуга,
		|	Док.Количество                                    КАК Количество,
		|	Док.Ссылка.СуммаДокумента 						  КАК СуммаДокумента,
		|	Док.Ссылка.СуммаНДС		 						  КАК СуммаНДСДокумента,
		|	Док.Ссылка.СпособРаспределения					  КАК СпособРаспределения,
		|	ЕСТЬNULL(Док.Ссылка.СуммаВключаетНДС, ЛОЖЬ)		  КАК СуммаВключаетНДС,
		|	Док.Сумма                                         КАК Сумма,
		|	ВЫБОР
		|		КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА
		|			Док.Сумма - Док.СуммаНДС
		|		ИНАЧЕ
		|			Док.Сумма
		|	КОНЕЦ                                             КАК СуммаБезНДС,
		|	Док.СуммаНДС                                      КАК НДС,
		|	Док.СуммаТовара                                   КАК СуммаТовара,
		|	Док.ДокументПартии                                КАК ДокументОприходования,
		|	Док.ДокументПартии.Склад                          КАК Склад,
		|	Док.ДокументПартии.ПодразделениеОрганизации       КАК ПодразделениеОрганизации,
		|	Док.ДокументПартии.ДоговорКонтрагента		      КАК ВидДоговораПартии,
		|	ДокументПартии.ВидОперации                        КАК ДокументПартииВидОперации,
		|	Док.Ссылка.СтавкаНДС                              КАК СтавкаНДС,
		|	Док.СчетУчета                                     КАК СчетУчета,
		|	Док.СчетУчета.Забалансовый                        КАК СчетУчетаБУЗабалансовый,
		|	Док.СчетУчетаНДС                                  КАК СчетУчетаНДС,
		|	Док.СчетУчетаНУ                                   КАК СчетУчетаНУ,
		|	Док.СтатьяЗатратНУ                                КАК СтатьяЗатратНУ,
		|	Док.ОтражениеВУСН                                 КАК ОтражениеВУСН,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
		|	Неопределено                                      КАК Ценность,
		|	ЛОЖЬ                                      		  КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";

	// Заменим обращение к реквизитам договора через переопределяемую функцию.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Док.ДокументПартии.ДоговорКонтрагента",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидДоговора("Док.ДокументПартии.ДоговорКонтрагента"));

	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	ТаблицаДокумента.Колонки.Добавить("СуммаРаспределеннаяИзШапки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокумента.Колонки.Добавить("СуммаНДСРаспределеннаяИзШапки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Если ТаблицаДокумента.Количество() > 0 Тогда
		СтрокаДокумента 		= ТаблицаДокумента[0];
		СуммаКРаспределению		= СтрокаДокумента.СуммаДокумента;
		СуммаНДСКРаспределению	= СтрокаДокумента.СуммаНДСДокумента;
		
		Если СтрокаДокумента.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			ИмяКолонкиПропорции = "Количество";
		Иначе
			ИмяКолонкиПропорции = "СуммаТовара";
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаКРаспределению, ТаблицаДокумента,
											"СуммаРаспределеннаяИзШапки", ИмяКолонкиПропорции);
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДСКРаспределению, ТаблицаДокумента,
											"СуммаНДСРаспределеннаяИзШапки", ИмяКолонкиПропорции);

		Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			
			СтрокаТаблицы.Сумма    = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаРаспределеннаяИзШапки;
			СтрокаТаблицы.НДС      = СтрокаТаблицы.НДС   + СтрокаТаблицы.СуммаНДСРаспределеннаяИзШапки; 
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС; 
			
		КонецЦикла;
			
	КонецЕсли;

	Возврат ТаблицаДокумента;

КонецФункции

Функция ПолучитьТаблицуРеализацияУслугПоПереработке(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка	                                      КАК Ссылка,
		|	Док.НомерСтроки                                   КАК НомерСтроки,
		|	Док.Номенклатура                                  КАК Номенклатура,
		|	Док.Количество                                    КАК Количество,
		|	ВЫБОР
		|		КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА
		|			Док.Сумма - Док.СуммаНДС
		|		ИНАЧЕ
		|			Док.Сумма
		|	КОНЕЦ                                             КАК СуммаБезНДС,
		|	Док.СуммаНДС                                      КАК НДС,
		|	Док.СтавкаНДС                              		  КАК СтавкаНДС,
		|	ЛОЖЬ КАК ЭтоКомиссия
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке.Услуги КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьТаблицуВозвратТоваровПоставщику(ДокументСсылка, Ошибка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС
		|		ИНАЧЕ ТаблицаТовары.Сумма
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ТаблицаТовары.СуммаНДС КАК НДС,
		|	ТаблицаТовары.СтавкаНДС,
		|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтроки";		

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//	Возвращает КПП контрагента, укзанного в реквизите ИмяРеквизитаОтправителяПолучателя,
//	в том случае, если контрагент является подразделением контрагента документа
//
//	ИмяРеквизитаОтправителяПолучателя <Строка>	- "Грузоотправитель" или "Грузополучатель",
//												в зависимости от типа документа
//
Функция ПолучитьКПППодразделенияКонтрагента(ДокументСсылка, ИмяРеквизитаОтправителяПолучателя) Экспорт
	
	Перем КПП;
	
	КПП	= "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат КПП;
	КонецЕсли;
	
	МетаданныеДокумента	= ДокументСсылка.Метаданные();
	Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокумента)
		ИЛИ НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаОтправителяПолучателя, МетаданныеДокумента) Тогда
		// В документе нет Грузоотправителя/Грузополучателя, например, при оказании услуг
		Возврат КПП;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Грузополучатель.КПП КАК КПП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
	|	И РеализацияТоваровУслуг.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РеализацияТоваровУслуг.Грузополучатель <> РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ГоловнойКонтрагент = РеализацияТоваровУслуг.Контрагент
	|	И РеализацияТоваровУслуг.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И РеализацияТоваровУслуг.Грузополучатель.ОбособленноеПодразделение";
		
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг", МетаданныеДокумента.Имя);
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "Грузополучатель", ИмяРеквизитаОтправителяПолучателя);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КПП	= Выборка.КПП;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

// Заполняет КодТНВЭД в табличных частях при обмене в документах:
// - РеализацияТоваровУслуг;
// - КорректировкаРеализации;
// - ВозвратТоваровПоставщику;
// - ОтчетКомиссионераОПродажах.
Процедура ЗаполнитьКодТНВЭДОбъекта(ДокументОбъект) Экспорт 
	
	ТипОбъекта = ТипЗнч(ДокументОбъект);
	Если ТипОбъекта <> Тип("ДокументОбъект.РеализацияТоваровУслуг")
		И ТипОбъекта <> Тип("ДокументОбъект.КорректировкаРеализации")
		И ТипОбъекта <> Тип("ДокументОбъект.ВозвратТоваровПоставщику")
		И ТипОбъекта <> Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда 
		Возврат;
	КонецЕсли;
	
	ВедетсяУчетНДСПоФЗ150         = УчетНДС.ВедетсяУчетНДСПоФЗ150(ДокументОбъект.Дата);
	Если Не ВедетсяУчетНДСПоФЗ150 Тогда
		Возврат;
	КонецЕсли;
	
	// Для документа "ОтчетКомиссионераОПродажах" происходит более сложная 
	// проверка страны (для каждой строки таблицы "Покупатели") перед записью объекта.
	Если ТипОбъекта <> Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда 
		СтранаРегистрацииКонтрагента  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "СтранаРегистрации");
		РеализацияВЕАЭС               = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
		Если Не РеализацияВЕАЭС Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
			И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "КодТНВЭД");
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
				СтрокаТаблицы.КодТНВЭД = КодТНВЭД;
			КонецЕсли;
			Если ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации")
				И Не ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭДДоИзменения) Тогда
				СтрокаТаблицы.КодТНВЭДДоИзменения = КодТНВЭД;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ
//////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// УСТАНОВКА ПАРАМЕТРОВ ПОСТАНОВЛЕНИЯ 1137

// процедура устанавливает начало действия постановления 1137
// ДатаНачалаДействия - дата начала действия постановления 1133
//
Процедура УстановитьДатуНачалаДействияПостановления1137(ДатаНачалаДействия) Экспорт
	
	ДатаНачалаДействия1137 = НачалоДня(ДатаНачалаДействия);
	ПараметрыИБ = РегистрыСведений.ПараметрыРегламентированногоУчета.СоздатьНаборЗаписей();
	ПараметрыИБ.Прочитать();
	ПараметрыИБТаблица = ПараметрыИБ.Выгрузить();
	
	СуществуетЗаписьСДатойНачалаДействия = Ложь;
	
	Для Каждого СтрокаПараметра Из ПараметрыИБТаблица Цикл
		Если ДатаНачалаДействия1137 = '00010101' Тогда
			СтрокаПараметра.ИспользуетсяПостановлениеНДС1137 = Ложь;
		Иначе
			Если СтрокаПараметра.ИспользуетсяПостановлениеНДС1137 И СтрокаПараметра.Период<ДатаНачалаДействия1137 Тогда
				СтрокаПараметра.ИспользуетсяПостановлениеНДС1137 = Ложь;
			КонецЕсли;
			Если НЕ СтрокаПараметра.ИспользуетсяПостановлениеНДС1137 И СтрокаПараметра.Период>=ДатаНачалаДействия1137 Тогда
				СтрокаПараметра.ИспользуетсяПостановлениеНДС1137 = Истина;
			КонецЕсли;
			Если ДатаНачалаДействия1137 = СтрокаПараметра.Период Тогда
				СуществуетЗаписьСДатойНачалаДействия = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СуществуетЗаписьСДатойНачалаДействия И 
		ДатаНачалаДействия1137 <> '00010101' Тогда
		
		НоваяЗапись = ПараметрыИБТаблица.Добавить();
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Период",ДатаНачалаДействия1137);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыИнформационнойБазыСрезПоследних.*
		|ИЗ
		|	РегистрСведений.ПараметрыРегламентированногоУчета.СрезПоследних(&Период, ) КАК ПараметрыИнформационнойБазыСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЕсли;
		
		НоваяЗапись.Период = ДатаНачалаДействия;
		НоваяЗапись.ИспользуетсяПостановлениеНДС1137 = Истина;
	КонецЕсли;
	
	//Удалим лишние записи
	ПараметрыИБТаблица.Сортировать("Период");
	ПредыдущаяЗапись = Неопределено;
	СписокРесурсов = ПараметрыИБ.Метаданные().Ресурсы;
	МассивУдаляемыхЗаписей = Новый Массив();
	Для Каждого СтрокаПараметр Из ПараметрыИБТаблица Цикл
		Если ПредыдущаяЗапись = Неопределено Тогда
			ПредыдущаяЗапись = СтрокаПараметр;
		Иначе
			ЗаписиОдинаковые = Истина;
			Для Каждого Ресурс Из СписокРесурсов Цикл
				Если ПредыдущаяЗапись[Ресурс.Имя] <> СтрокаПараметр[Ресурс.Имя] Тогда
					ЗаписиОдинаковые = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ЗаписиОдинаковые Тогда
				МассивУдаляемыхЗаписей.Добавить(СтрокаПараметр);
			Иначе
				ПредыдущаяЗапись = СтрокаПараметр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхЗаписей Цикл
		ПараметрыИБТаблица.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ПараметрыИБ.Загрузить(ПараметрыИБТаблица);
	ПараметрыИБ.Записать(Истина);
	
КонецПроцедуры

// Функция получает дату начала действия постановления 1137 по НДС
//
Функция ПолучитьДатуНачалаДействияПостановления1137() Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(ПараметрыРегламентированногоУчета.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
		|ИЗ
		|	РегистрСведений.ПараметрыРегламентированногоУчета КАК ПараметрыРегламентированногоУчета
		|ГДЕ
		|	ПараметрыРегламентированногоУчета.ИспользуетсяПостановлениеНДС1137 = ИСТИНА";
		
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат(Выборка.Период);
	КонецЕсли;
	Возврат('00010101');
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СТАРЫЕ ПРОЦЕДУРЫ

//	Добавляет при необходимости и заполняет незаполненные значения колонки "ИсправленныйСчетФактура"
//
Процедура ОпределитьИсправленныеСчетаФактуры(СписанныеПартии, Реквизиты, СписокСчетовФактур = Неопределено) Экспорт
	Если СписокСчетовФактур <> Неопределено И СписокСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокСчетовФактур = Неопределено Тогда
		Если СписанныеПартии.Колонки.Найти("ИсправленныйСчетФактура") = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
			МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			МассивТипов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
			МассивТипов.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
			
			СписанныеПартии.Колонки.Добавить("ИсправленныйСчетФактура", Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСчетовФактур = Неопределено Тогда
		СписокСчетовФактур = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
			СписанныеПартии.ВыгрузитьКолонку("СчетФактура"), Истина);
	Иначе
		СписокСчетовФактур.Свернуть("СчетФактура");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("КонецПериода",       Новый Граница(Новый МоментВремени(
		Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ИсправленныйСчетФактура <> НЕОПРЕДЕЛЕНО) КАК НДСЗаписиКнигиПокупокОбороты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИсправленныеСчетаФактуры = Результат.Выгрузить();
	ИсправленныеСчетаФактуры.Индексы.Добавить("СчетФактура");
	
	Для каждого СтрокаТаблицы Из СписанныеПартии Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИсправленныйСчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ИсправленныеСчетаФактуры.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТаблицы.ИсправленныйСчетФактура = НайденнаяСтрока.ИсправленныйСчетФактура;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	КНИГИ ПОКУПОК И ПРОДАЖ 914

//	КНИГА ПОКУПОК 914
   
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерГТД) Тогда
		ОбластьМакета.Параметры.НомерГТД = "---";
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьОтчетКнигаПокупок914(Знач ПараметрыОтчета, АдресХранилища) Экспорт

	Если ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора)
		ИЛИ ПараметрыОтчета.ВыводитьПокупателейПоАвансам
		ИЛИ ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		СтандартнаяФорма = Ложь;
	Иначе
		СтандартнаяФорма = Истина;
	КонецЕсли;
	
	СписокСообщений = Новый СписокЗначений();

	Если НЕ ПараметрыОтчета.ВключатьОбособленныеПодразделения Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(ПараметрыОтчета.Организация);
	КонецЕсли;

	Если НЕ ПараметрыОтчета.ВыводитьТолькоДопЛисты Тогда
		СформироватьОсновнойРаздел(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма);
	КонецЕсли;

	Если ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		СформироватьДополнительныеЛисты(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма, СписокСообщений);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("СписокСообщений", СписокСообщений);

	ПоместитьВоВременноеХранилище(ПараметрыОтчета, АдресХранилища);

КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре)

	Секция.Параметры.Заполнить(ЗаписьКниги.Строки[0]);
	Секция.Параметры.ВсегоПокупок 	   = ЗаписьКниги.ВсегоПокупок;
	Секция.Параметры.СуммаБезНДС18 	   = ЗаписьКниги.СуммаБезНДС18;
	Секция.Параметры.НДС18 			   = ЗаписьКниги.НДС18;
	Секция.Параметры.СуммаБезНДС10 	   = ЗаписьКниги.СуммаБезНДС10;
	Секция.Параметры.НДС10 			   = ЗаписьКниги.НДС10;
	Секция.Параметры.НДС0 			   = ЗаписьКниги.НДС0;
	Секция.Параметры.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Если ЗаписьКниги.ОъединятьСчетФактуры = Истина Тогда
			Секция.Параметры.СчетФактура = Новый СписокЗначений;
		Иначе
			Секция.Параметры.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
		КонецЕсли
	КонецЕсли;

	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], Секция);
	Секция.Параметры.ДатаНомер = ДатаНомер;

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";

	СуммаСНДС = 0;

	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;

		Если СтрокаЗаписи.ОъединятьСчетФактуры = Истина Тогда
			Секция.Параметры.СчетФактура.Добавить(СтрокаЗаписи.СчетФактураДокументРасшифровка);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаЗаписи.СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаЗаписи.СчетФактура.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;

		Если СтрокаДополнительнойИнформации <> Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Секция.Параметры.ДатаОплаты = ТекстОплаты;
	Секция.Параметры.ДатаОприходования = ТекстДатаОприходования;
	Секция.Параметры.НомерГТД = ТекстНомерГТД;

	ПроставитьПрочеркиВПустыеПоля(Секция);

КонецПроцедуры

Процедура СформироватьОсновнойРаздел(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";

	СписокСчетовФактур = Неопределено;
	Результат = ПолучитьЗаписиКнигиПокупок(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, СтандартнаяФорма);

	Макет = ПолучитьОбщийМакет("КнигаПокупок914");

	/////////////////////////////////////////////////////////////////////////
	// Вывод шапки книги покупок
	Если СтандартнаяФорма Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации = "" + ПараметрыОтчета.Организация.ИНН + ?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация.КПП), "", ("/" + ПараметрыОтчета.Организация.КПП));
	Если НЕ СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) Тогда
		Если ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
			НадписьОтбор = НСтр("ru='Отбор: Контрагент в группе %Контрагент%'");
		Иначе
			НадписьОтбор = НСтр("ru='Отбор: Контрагент = %Контрагент%'");
		КонецЕсли;
		Секция.Параметры.УстановленныйОтбор = СтрЗаменить(НадписьОтбор, "%Контрагент%", ПараметрыОтчета.КонтрагентДляОтбора);
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);
	// Вывод шапки книги покупок
	/////////////////////////////////////////////////////////////////////////

	ИтогПоОрганизации = Новый Структура;

	Если НЕ Результат.Пустой() Тогда
		ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
        		
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФ(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур);

		Секция = Макет.ПолучитьОбласть("Строка");
		Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
			СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
			СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
		КонецЕсли;

		Счетчик = 0; // Счетчик строк книги покупок

		Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И НЕ СтандартнаяФорма Тогда
			Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
				СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
				ТабличныйДокумент.Вывести(СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
				Для Каждого ИтогПоНалоговыйПериод Из ИтогПоКонтрагенту.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоНалоговыйПериод.Строки Цикл

						Счетчик = Счетчик + 1;
						Секция.Параметры.Ном = Счетчик;

						ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре);

						ТабличныйДокумент.Вывести(Секция);

					КонецЦикла;
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
			КонецЦикла;
		Иначе
			Для Каждого ИтогПоНалоговыйПериод Из ИтогПоОрганизации.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоНалоговыйПериод.Строки Цикл

					Счетчик = Счетчик + 1;
					Секция.Параметры.Ном = Счетчик;

					ЗаполнитьСтрокуКнигиПокупок(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре);

					ТабличныйДокумент.Вывести(Секция);

				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(ИтогПоОрганизации);

	ТабличныйДокумент.Вывести(Секция);

	ВывестиПодвал(ПараметрыОтчета, ТабличныйДокумент, Макет);

	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");

	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
	ПроверкаКонтрагентов.ДобавитьРазделОтчета(ПараметрыОтчета, НСтр("ru = 'Основной раздел'"), 1, ТабличныйДокумент);

КонецПроцедуры

Процедура ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре)

	СтрокаДополнительнойИнформации = Неопределено;
	ДатаНомер = ОпределитьДатуИНомерСФ(ЗаписьКниги.Строки[0], Секция);

	Секция.Параметры.Заполнить(ЗаписьКниги);

	Секция.Параметры.Заполнить(ЗаписьКниги.Строки[0]);
	Секция.Параметры.ВсегоПокупок = ЗаписьКниги.ВсегоПокупок;
	Секция.Параметры.СуммаБезНДС18 = ЗаписьКниги.СуммаБезНДС18;
	Секция.Параметры.НДС18 = ЗаписьКниги.НДС18;
	Секция.Параметры.СуммаБезНДС10 = ЗаписьКниги.СуммаБезНДС10;
	Секция.Параметры.НДС10 = ЗаписьКниги.НДС10;
	Секция.Параметры.НДС0 = ЗаписьКниги.НДС0;
	Секция.Параметры.СуммаСовсемБезНДС = ЗаписьКниги.СуммаСовсемБезНДС;
	Если ЗначениеЗаполнено(ЗаписьКниги.Строки[0].СчетФактураДокумент) Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.Строки[0].СчетФактураДокумент;
	КонецЕсли;

	Секция.Параметры.ДатаНомер = ДатаНомер;
	Секция.Параметры.НомерГТД = ?(СтрокаДополнительнойИнформации = Неопределено, "", СтрокаДополнительнойИнформации.ГТДиСтрана);

	ТекстОплаты = "";
	ТекстДатаОприходования = "";
	СписокДатОплат = Новый СписокЗначений();
	СписокДатОприходования = Новый СписокЗначений();
	ТекстНомерГТД = "";

	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОприходования) Тогда
			Если СписокДатОприходования.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстДатаОприходования = ТекстДатаОприходования + ?(НЕ ЗначениеЗаполнено(ТекстДатаОприходования), "", ","+Символы.ПС) + Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy");
				СписокДатОприходования.Добавить(Формат(СтрокаЗаписи.ДатаОприходования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаписи.СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаЗаписи.СчетФактура.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;

		Если СтрокаДополнительнойИнформации <> Неопределено Тогда
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") + СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
			КонецЕсли;
        КонецЕсли;

	КонецЦикла;

	Секция.Параметры.ДатаОплаты = ТекстОплаты;
	Секция.Параметры.ДатаОприходования = ТекстДатаОприходования;
	Секция.Параметры.НомерГТД = ТекстНомерГТД;

	ПроставитьПрочеркиВПустыеПоля(Секция);

КонецПроцедуры

Процедура СформироватьДополнительныеЛисты(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма, СписокСообщений)

	НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;

	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистов(СписокОрганизаций, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода, НДСНалоговыйПериод);

	СтрокаСообщения = "";
	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
					|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
					|Для этого необходимо взвести флаг ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""'"), СтатусСообщения.Информация);
		КонецЕсли;
		Если ПараметрыОтчета.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
					|Построение дополнительных листов за текущий налоговый период не требуется'"), СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
					|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
					|Для этого необходимо взвести флаг ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!'"), СтатусСообщения.Информация);
		КонецЕсли;
		Если ПараметрыОтчета.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
					|Построение дополнительных листов за корректируемый налоговый период не требуется'"), СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Если флаг ФормироватьДополнительныеЛисты не установлен, продолжать не надо
	// При этом, если доп. листы есть, об этом было сообщено пользователю
	Если НЕ ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = Неопределено;
	// Получение записей дополнительных листов
	Результат = ПолучитьЗаписиДополнительныхЛистов(СписокОрганизаций, ПараметрыОтчета, НДСНалоговыйПериод, СписокСчетовФактур, СтандартнаяФорма);

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НомерОтображаемогоПериода = 0;

	Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПокупок914");
	Секция = Макет.ПолучитьОбласть("Строка");
	СтрокаИтого = Макет.ПолучитьОбласть("Итого");
	СтрокаВсего = Макет.ПолучитьОбласть("Всего");

	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
		СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
	КонецЕсли;

	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
    	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФ(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, Истина);

	Для Каждого ИтогПоПериодам ИЗ ДеревоЗаписей.Строки Цикл;

		НомерЛиста = 0;

		/////////////////////////////////////////////////////////////////////////
		// Добавление новой страницы панели разделов для вывода доп. листа
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупокДопЛист";

		// Добавление новой страницы панели разделов для вывода доп. листа
		/////////////////////////////////////////////////////////////////////////

		Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодам.Строки Цикл;
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабличныйДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;

			ВывестиШапкуДопЛиста(ПараметрыОтчета, ТабличныйДокумент, Макет, ИтогПоПериодамКорректировки, НомерЛиста, СтандартнаяФорма); //НачалоПериода, КонецПериода, НДСНалоговыйПериод,

			ИтогЗаПериод = ПолучитьИтогиЗаПериод(ПараметрыОтчета.Организация, ИтогПоПериодамКорректировки.НалоговыйПериод, КонецДня(ИтогПоПериодамКорректировки.КонецНалоговогоПериода),ИтогПоПериодамКорректировки.ДатаОформления);
			Если НЕ ИтогЗаПериод.Пустой() Тогда
				ИтогЗаПериод = ИтогЗаПериод.Выгрузить()[0];
			Иначе
				ИтогЗаПериод = Новый Структура;
				ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			КонецЕсли;
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);

			ТабличныйДокумент.Вывести(СтрокаИтого);

			Счетчик = 0;

			Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И НЕ СтандартнаяФорма Тогда
				Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
					СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
					ТабличныйДокумент.Вывести(СекцияКонтрагент);
					ТабличныйДокумент.НачатьГруппуСтрок();
					Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
						Для Каждого РазделениеПоСтавкамДляАванса Из ЗаписьПоСФ.Строки Цикл
							Для Каждого ЗаписьКниги Из РазделениеПоСтавкамДляАванса.Строки Цикл

								Счетчик = Счетчик + 1;
								Секция.Параметры.Ном = Счетчик;

								ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре);

								ТабличныйДокумент.Вывести(Секция);

								ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
								ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
								ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
								ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
								ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
								ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
								ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;

							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
					ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
				КонецЦикла;
			Иначе
				Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
					Для Каждого РазделениеПоСтавкамДляАванса Из ЗаписьПоСФ.Строки Цикл
						Для Каждого ЗаписьКниги Из РазделениеПоСтавкамДляАванса.Строки Цикл

							Счетчик = Счетчик + 1;
							Секция.Параметры.Ном = Счетчик;

							ЗаполнитьСтрокуДополнительногоЛиста(Секция, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре);

							ТабличныйДокумент.Вывести(Секция);

							ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
							ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
							ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
							ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
							ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
							ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
							ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;

						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабличныйДокумент.Вывести(СтрокаВсего);

			ВывестиПодвал(ПараметрыОтчета, ТабличныйДокумент, Макет);

		КонецЦикла;

		ПроверкаКонтрагентов.ДобавитьРазделОтчета(
			ПараметрыОтчета, 
			"Доп.листы за " + НалоговыйПериод, 
			НомерОтображаемогоПериода + 1, // первый раздел - основной раздел книги
			ТабличныйДокумент, 
			Новый Структура("ЭтоДопЛист", Истина));

	КонецЦикла;

КонецПроцедуры

Процедура ВывестиШапкуДопЛиста(ПараметрыОтчета, ТабличныйДокумент, Макет, ЗаписьКниги, НомерЛиста, СтандартнаяФорма)

	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	Если СтандартнаяФорма Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("Шапка");
	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерЛиста;
	КонецЕсли;
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(ЗаписьКниги.НалоговыйПериод, КонецДня(ЗаписьКниги.КонецНалоговогоПериода), "ФП = Истина");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации = "" + ПараметрыОтчета.Организация.ИНН + ?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация.КПП), "", ("/" + ПараметрыОтчета.Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(ЗаписьКниги.ДатаОформления, "ДФ=dd.MM.yyyy");
	Если НЕ СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + ПараметрыОтчета.КонтрагентДляОтбора;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);

КонецПроцедуры

// Возвращает дату и номер счета-фактуры
// Определяет строку доп. информации, присваивает значение переменной СтрокаДополнительнойИнформации
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, Секция = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный")
			ИЛИ НЕ ЗаписьКниги.УдалятьЛидирующиеНули Тогда
			// НЕ требуется удаление префиксов в номере документа
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		Иначе
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаписьКниги.НомерСчетаФактуры, Истина, Ложь);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" + ЗаписьКниги.СчетФактура.НомерВходящегоДокумента;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаписьКниги.СчетФактура.Номер, Истина, Ложь);
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаписьКниги.СчетФактура.Номер, Истина, Ложь);
	Иначе
		Если ЗаписьКниги.НаАванс Тогда
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаАванс(
				ЗаписьКниги.СчетФактура, , , ЗаписьКниги.ДоговорАванса);
		Иначе
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ЗаписьКниги.СчетФактура);
		КонецЕсли;

		Если Документ <> Неопределено Тогда
			ДатаНомер = "" + Формат(Документ.Дата, "ДФ=dd.MM.yyyy") + ", №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Ложь);

			Если (ЗаписьКниги.НаАванс) и не Секция = Неопределено Тогда
				Секция.Параметры.СчетФактура = Документ;
			КонецЕсли;
		Иначе
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ЗаписьКниги.СчетФактура);
			Если Документ <> Неопределено Тогда
				ДатаНомер = "" + Формат(Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" + Документ.НомерВходящегоДокумента;
			Иначе
				ДатаНомер = "";
			КонецЕсли
		КонецЕсли;

	КонецЕсли;

	Возврат ДатаНомер;

КонецФункции

Процедура ВывестиПодвал(ПараметрыОтчета, ТабличныйДокумент, Макет)

	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) Тогда
		ИмяОрг = "";
		Свидетельство = "";
	Иначе
		ИмяОрг = ОтветственныеЛица.РуководительПредставление;
		СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
		Свидетельство = СведенияОЮрФизЛице.Свидетельство;
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяБух        = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	Секция.Параметры.ИмяОрг        = ИмяОрг;
	Секция.Параметры.Свидетельство = Свидетельство;

	ТабличныйДокумент.Вывести(Секция);

КонецПроцедуры

// Получает записи книги покупок за период
//
Функция ПолучитьЗаписиКнигиПокупок(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, СтандартнаяФорма)

	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	УстановитьПараметрыЗапросаКнигиПокупок(ПараметрыОтчета, Запрос, СписокОрганизаций, СтандартнаяФорма);

	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	НДСЗаписиКнигиПокупокОбороты.Период КАК Период,
	 |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ КАК Контрагент,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ КАК ПродавецИНН,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ КАК ПродавецКПП,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |				КОНЕЦ
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ КАК ДатаОплаты,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, КВАРТАЛ)
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА ВЫБОР
	 |						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |					КОНЕЦ
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	 |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС0,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаСовсемБезНДС,
	 |	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |					И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |						ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 |						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 |					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ КАК Продавец,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	 |			ТОГДА ""---""
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ КАК ДатаОприходования,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК НаАванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ КАК СтавкаНДС_Аванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	 |			ТОГДА НЕОПРЕДЕЛЕНО
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 |	КОНЕЦ КАК ДоговорАванса,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	 |				И (НЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДокументОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура
	 |	КОНЕЦ КАК ДокументОснованиеСчетаФактуры
	 |ПОМЕСТИТЬ ЗаписиКнигиПокупок
	 |ИЗ
	 |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			Квартал,
	 |			Организация В (&Организация)
	 |				И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)
	 |				И ВЫБОР
	 |					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	 |						ТОГДА Поставщик = &КонтрагентДляОтбора
	 |					ИНАЧЕ ИСТИНА
	 |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	 |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	 |	НДСЗаписиКнигиПокупокОбороты.Период,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |				КОНЕЦ
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	 |			ТОГДА ""---""
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, КВАРТАЛ)
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА ВЫБОР
	 |						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |					КОНЕЦ
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	 |		КОНЕЦ, ДЕНЬ),
	 |	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |					И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |						ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 |						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 |					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	 |			ТОГДА НЕОПРЕДЕЛЕНО
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	 |				И (НЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДокументОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	СчетФактура";

	Если НЕ СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) И ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Поставщик = &КонтрагентДляОтбора", "Поставщик В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;

	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
				   |ИЗ
				   |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");

	ПолучитьСчетаФактурыДокументы(Запрос);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписиКнигиПокупок.Период КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ЗаписиКнигиПокупок.Продавец КАК Продавец,
	|	ЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	|	ЗаписиКнигиПокупок.ПродавецИНН КАК ПродавецИНН,
	|	ЗаписиКнигиПокупок.ПродавецКПП КАК ПродавецКПП,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	ТаблицаСчетаФактурыДокументы.ОъединятьСчетФактуры КАК ОъединятьСчетФактуры
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(СчетФактураДата),
	|	МИНИМУМ(ДатаОприходования),
	|	МАКСИМУМ(НаАванс),
	|	СУММА(ВсегоПокупок),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(ОъединятьСчетФактуры)
	|ПО
	|	ОБЩИЕ,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДокумент";

	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И НЕ СтандартнаяФорма Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
				   |	ОБЩИЕ,", "ПО
				   |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции

// Получает записи книги покупок за период
//
Функция ПолучитьЗаписиДополнительныхЛистов(СписокОрганизаций, ПараметрыОтчета, НДСНалоговыйПериод, СписокСчетовФактур, СтандартнаяФорма)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	УстановитьПараметрыЗапросаКнигиПокупок(ПараметрыОтчета, Запрос, СписокОрганизаций, СтандартнаяФорма);

	Запрос.Текст =
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ КАК Контрагент,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ КАК ПродавецИНН,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ КАК ПродавецКПП,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |				КОНЕЦ
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ КАК ДатаОплаты,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |			ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	 |	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС18,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаБезНДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС10,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК НДС0,
	 |	СУММА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК СуммаСовсемБезНДС,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата КАК СчетФактураДата,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |					И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |						ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 |						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 |					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ КАК Продавец,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ КАК ДатаОприходования,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК НаАванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ КАК СтавкаНДС_Аванс,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	 |			ТОГДА НЕОПРЕДЕЛЕНО
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 |	КОНЕЦ КАК ДоговорАванса,
	 |	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	 |	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	 |	НДСЗаписиКнигиПокупокОбороты.Период КАК ДатаОформления,
	 |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	 |				И (НЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДокументОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура
	 |	КОНЕЦ КАК ДокументОснованиеСчетаФактуры
	 |ПОМЕСТИТЬ ЗаписиКнигиПокупок
	 |ИЗ
	 |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	 |			&НачалоПериода,
	 |			&КонецПериода,
	 |			День,
	 |			Организация В (&Организация)
	 |				И ЗаписьДополнительногоЛиста = ИСТИНА
	 |				И ВЫБОР
	 |					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	 |						ТОГДА Поставщик = &КонтрагентДляОтбора
	 |					ИНАЧЕ ИСТИНА
	 |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	 |	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	 |	НДСЗаписиКнигиПокупокОбороты.Событие,
	 |	НДСЗаписиКнигиПокупокОбороты.Организация,
	 |	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата,
	 |	НДСЗаписиКнигиПокупокОбороты.Период,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |				КОНЕЦ
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |	КОНЕЦ,
	 |	НАЧАЛОПЕРИОДА(ВЫБОР
	 |			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	 |			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	 |				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |			ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |		КОНЕЦ, ДЕНЬ),
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	 |			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СуммовыеРазницы)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ,
	 |	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ),
	 |	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ),
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	 |			ТОГДА НЕОПРЕДЕЛЕНО
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	 |	КОНЕЦ,
	 |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	 |				И (НЕ НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДокументОплаты
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |				И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |					ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |				И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	 |		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	 |	КОНЕЦ,
	 |	ВЫБОР
	 |		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	 |					И ((НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	 |						ИЛИ (НЕ &ВыводитьПокупателейПоАвансам))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	 |					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 |							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	 |				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	 |			ТОГДА ВЫБОР
	 |					КОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	 |						ТОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеСокращенное, 1, 250)
	 |					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	 |				КОНЕЦ
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	 |					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	 |				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	 |			КОНЕЦ
	 |	КОНЕЦ
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	СчетФактура";

	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА",
								"ЗаписьДополнительногоЛиста = ИСТИНА
								|И КорректируемыйПериод >= &НачалоПериода
								|И КорректируемыйПериод <= &КонецПериода");
	КонецЕсли;

	Если НЕ СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) И ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Поставщик = &КонтрагентДляОтбора", "Поставщик В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;

	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
				   |ИЗ
				   |	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");

	ПолучитьСчетаФактурыДокументы(Запрос);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписиКнигиПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ЗаписиКнигиПокупок.Продавец КАК Продавец,
	|	ЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	|	ЗаписиКнигиПокупок.ПродавецИНН КАК ПродавецИНН,
	|	ЗаписиКнигиПокупок.ПродавецКПП КАК ПродавецКПП,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.НомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПокупок.ДатаОформления КАК ДатаОформления,
	|	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули) КАК Приоритеты
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(СчетФактураДата),
	|	МИНИМУМ(ДатаОприходования),
	|	МАКСИМУМ(НаАванс),
	|	СУММА(ВсегоПокупок),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(КонецНалоговогоПериода)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДокумент,
	|	СтавкаНДС_Аванс,
	|	ДоговорАванса";

	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И НЕ СтандартнаяФорма Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
				   |	НалоговыйПериод,
				   |	ДатаОформления,", "ПО
				   |	НалоговыйПериод,
				   |	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции

// Устанавливает параметры запроса книги покупок
//
Процедура УстановитьПараметрыЗапросаКнигиПокупок(ПараметрыОтчета, Запрос, СписокОрганизаций, СтандартнаяФорма)

	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",  СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора));
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", ПараметрыОтчета.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПокупателейПоАвансам", ПараметрыОтчета.ВыводитьПокупателейПоАвансам);

	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);

	ВидыЦенностей_СобственныеСФ = новый массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
    ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыВыданные", Перечисления.ВидыЦенностей.АвансыВыданные);
	ВидыЦенностей_СуммовыеРазницы = новый массив;
	ВидыЦенностей_СуммовыеРазницы.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);

	Запрос.УстановитьПараметр("ВидыЦенностей_СуммовыеРазницы", ВидыЦенностей_СуммовыеРазницы);

	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
    ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", 
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());

КонецПроцедуры

// Получает страну происхождения и номер ГТД по списку счетов-фактур в виде, отражаемом в книге покупок
//
Функция ПолучитьДополнительнуюИнформациюПоСФ(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)

	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;

	// Дополнение по ГТД и стране происхождения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Ссылка КАК СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1) КАК КоличествоЭлементов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ОтражениеНДСКВычету.ТоварыИУслуги КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.СчетФактура В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактура,
	|	СтранаПроисхождения";

	Запрос.УстановитьПараметр("СписокСФ",СписокСчетовФактур);

	ДополнительнаяИнформацияПоСФ =  Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана");
	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), СтрокаСФ);
	КонецЦикла;

	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаИнформации = "";
		Для каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения) + " ";
			ГТДРез = "";
			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл 
				ГТДРез = ГТДРез+ ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
			КонецЦикла;
			СтрокаИнформации = СтрокаИнформации + ГТДРез;
		КонецЦикла;
		СтрокаСФ.ГТДиСтрана = СтрокаИнформации;

	КонецЦикла;
    	
	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре;

КонецФункции

Функция ПолучитьИтогиЗаПериод(СписокОрганизаций, НачалоПериода, КонецПериода, ДатаФормированияДопЛиста)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|			    И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&МоментФормированияДопЛиста,
	|			Период,
	|			Организация В (&Организация)
	|			    И ЗаписьДополнительногоЛиста = ИСТИНА
	|			    И КорректируемыйПериод >= &НачалоПериода
	|			    И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";

	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста",Новый Граница(НачалоДня(ДатаФормированияДопЛиста),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"	, СписокОрганизаций);

	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);

	ВидыЦенностей_АвансыПолученные = новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);

	Возврат Запрос.Выполнить();

КонецФункции

Процедура ПолучитьСчетаФактурыДокументы(Запрос)
    	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументы.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет,
	|	СчетаФактурыДокументы.УдалятьЛидирующиеНули,
	|	СчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокументРасшифровка
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументыПредварительная
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураПолученный.ДокументОснование КАК СчетФактура,
	|			СчетФактураПолученный.Ссылка.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|			СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорАванса,
	|			2 КАК Приоритет,
	|			ЛОЖЬ КАК УдалятьЛидирующиеНули
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|			И НЕ СчетФактураПолученный.Ссылка.Исправление
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.ДокументОснование,
	|			СчетФактураВыданный.Ссылка.Номер,
	|			СчетФактураВыданный.Ссылка.Дата,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|						ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			3,
	|			ИСТИНА
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И НЕ СчетФактураВыданный.Ссылка.Исправление
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			4,
	|			ИСТИНА
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И НЕ ГТДИмпорт.ПометкаУдаления
	|			И ГТДИмпорт.Организация В(&Организация)) КАК СчетаФактурыДокументы
	|		ПО (ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|				ИЛИ ЗаписиКнигиПокупок.ДокументОплаты = СчетаФактурыДокументы.СчетФактура)
	|			И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (НЕ ЗаписиКнигиПокупок.НаАванс
	|				ИЛИ СчетаФактурыДокументы.НаАванс
	|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетФактураДокументКонтрагент,
	|	ВложенныйЗапрос.ДоговорАванса,
	|	ВложенныйЗапрос.НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КолвоСФ = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВложенныйЗапрос.УчитыватьСФ
	|	КОНЕЦ КАК ОъединятьСФ,
	|	ВложенныйЗапрос.СчетФактураДокумент
	|ПОМЕСТИТЬ ВТ_ОбъединениеСФ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент КАК СчетФактураДокументКонтрагент,
	|		ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|		ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК КолвоСФ,
	|		ВЫБОР
	|			КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК УчитыватьСФ,
	|		МАКСИМУМ(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент
	|	ИЗ
	|		ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент,
	|		ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|		ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры,
	|		ВЫБОР
	|			КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры,
	|	ВТ_ОбъединениеСФ.СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СтавкаНДСАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.Приоритет,
	|	ТаблицаСчетаФактурыДокументыПредварительная.УдалятьЛидирующиеНули,
	|	ВТ_ОбъединениеСФ.ОъединятьСФ КАК ОъединятьСчетФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокументРасшифровка
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументыПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъединениеСФ КАК ВТ_ОбъединениеСФ
	|		ПО ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокумент.Контрагент = ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент
	|			И ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса = ВТ_ОбъединениеСФ.ДоговорАванса
	|			И ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры = ВТ_ОбъединениеСФ.НомерСчетаФактуры";

	Запрос.Выполнить();

КонецПроцедуры

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистов(СписокОрганизаций, НачалоПериода, КонецПериода, НДСНалоговыйПериод)

	СтруктураПараметров = Новый Структура("ТекущийПериод, КорректируемыйПериод");
	СтруктураПараметров.ТекущийПериод = Ложь;
	СтруктураПараметров.КорректируемыйПериод = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДопЛисты,
		|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
		|	НДСЗаписиКнигиПокупокОбороты.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&НачалоПериода
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА
		|				И КорректируемыйПериод >= &НачалоПериода
		|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
		|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.Период";

	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, СписокОрганизаций);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;

	Результат = Результат.Выгрузить();

	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

//	КНИГА ПРОДАЖ 914

Процедура СформироватьОтчетКнигаПродаж914(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) 
		ИЛИ ПараметрыОтчета.ВыводитьПродавцовПоАвансам
		ИЛИ ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		СтандартнаяФорма = Ложь;
	Иначе
		СтандартнаяФорма = Истина;
	КонецЕсли;
	
	СписокСообщений = Новый СписокЗначений();
	
	Если Не ПараметрыОтчета.ВключатьОбособленныеПодразделения Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(ПараметрыОтчета.Организация);
	КонецЕсли;
	
	Если Не ПараметрыОтчета.ВыводитьТолькоДопЛисты Тогда
		СформироватьОсновнойРазделПродажи(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма);
	КонецЕсли;
	
	Если ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда 
		СформироватьДополнительныеЛистыПродажи(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма, СписокСообщений);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("СписокСообщений", СписокСообщений);
	
	ПоместитьВоВременноеХранилище(ПараметрыОтчета, АдресХранилища);
			
КонецПроцедуры

Процедура СформироватьОсновнойРазделПродажи(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма)
	
	Макет = ПолучитьОбщийМакет("КнигаПродаж914");
		
	ТабличныйДокумент = Новый ТабличныйДокумент;	
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПродаж";
	
	// Вывод шапки
	Если СтандартнаяФорма Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода      = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода       = Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации      = "" + ПараметрыОтчета.Организация.ИНН + ?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация.КПП), "", ("/" + ПараметрыОтчета.Организация.КПП));
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) Тогда
		Если ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
			НадписьОтбор = НСтр("ru = 'Отбор: Контрагент в группе %КонтрагентДляОтбора%'");
		Иначе
			НадписьОтбор = НСтр("ru = 'Отбор: Контрагент = %КонтрагентДляОтбора%'");
		КонецЕсли;
		Секция.Параметры.УстановленныйОтбор = СтрЗаменить(НадписьОтбор, "%КонтрагентДляОтбора%", ПараметрыОтчета.КонтрагентДляОтбора);
	КонецЕсли;
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		Секция.Параметры.УстановленныйОтбор = Секция.Параметры.УстановленныйОтбор + Символы.ПС + "Группировка: По Контрагентам";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
	// Анализ ИБ для формирования книги продаж
	СписокСчетовФактур = Неопределено;
	Результат = ПолучитьЗаписиКнигиПродаж(СписокОрганизаций, СписокСчетовФактур, ПараметрыОтчета, СтандартнаяФорма);
	
	ИтогПоОрганизации = Новый Структура;
	
	Если Не Результат.Пустой() Тогда
		
		ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
			
		Секция = Макет.ПолучитьОбласть("Строка");
		Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
			СекцияКонтрагент      = Макет.ПолучитьОбласть("Контрагент");
			СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
		КонецЕсли;
		
		Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И Не СтандартнаяФорма Тогда
			Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
				СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
				ТабличныйДокумент.Вывести(СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
				Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
					Для Каждого ПорядокОтражения Из НалоговыеПериоды.Строки Цикл
						Для Каждого СтрокаПоПорядокОтражения Из ПорядокОтражения.Строки Цикл
							Для Каждого ЗаписьКниги Из СтрокаПоПорядокОтражения.Строки Цикл
								ЗаполнитьСтрокуКнигиПродаж(Секция, ЗаписьКниги, Ложь, ПараметрыОтчета);
								ТабличныйДокумент.Вывести(Секция);
							КонецЦикла; 
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
			КонецЦикла;
		Иначе
			Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
				Для Каждого ПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого СтрокаПоПорядокОтражения Из ПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги Из СтрокаПоПорядокОтражения.Строки Цикл
							ЗаполнитьСтрокуКнигиПродаж(Секция, ЗаписьКниги, Ложь, ПараметрыОтчета);
							ТабличныйДокумент.Вывести(Секция);
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(ИтогПоОрганизации);
		
	ТабличныйДокумент.Вывести(Секция);
		
	// Вывод подвала
	ВывестиПодвалПродажи(ТабличныйДокумент, Макет, ПараметрыОтчета);

	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
				
	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
	ПроверкаКонтрагентов.ДобавитьРазделОтчета(ПараметрыОтчета, НСтр("ru = 'Основной раздел'"), 1, ТабличныйДокумент);
		
КонецПроцедуры

Процедура СформироватьДополнительныеЛистыПродажи(СписокОрганизаций, ПараметрыОтчета, СтандартнаяФорма, СписокСообщений)
	
	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистовПродажи(СписокОрганизаций, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод 
				Или Не ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
			|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""'"), СтатусСообщения.Информация);
		КонецЕсли;
		Если ПараметрыОтчета.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
			|Построение дополнительных листов за текущий налоговый период не требуется'"), СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод Или Не ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
			|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!'"), СтатусСообщения.Информация);
		КонецЕсли;
		Если ПараметрыОтчета.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
			|Построение дополнительных листов за корректируемый налоговый период не требуется'"), СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.ФормироватьДополнительныеЛисты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПроверитьНаличиеДопЛистовПродажи(СписокОрганизаций, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
		
	СписокСчетовФактур = Неопределено;
	Результат = ПолучитьЗаписиДополнительныхЛистовПродажи(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, СтандартнаяФорма);
		
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
		
	Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж914");
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОБух");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		ПараметрыОтчета.Организация, 
		ТекущаяДатаСеанса(),
		СписокПоказателей);
	
	Секция = Макет.ПолучитьОбласть("Строка");
	СтрокаИтого = Макет.ПолучитьОбласть("Итого");
	СтрокаВсего = Макет.ПолучитьОбласть("Всего");
		
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
		СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
	КонецЕсли;
	
	НомерОтображаемогоПериода = 0;
	
	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Получение дополнительной информации по счетам-фактурам
	СписокСчетовФактур = Неопределено;
	
	Для Каждого ИтогПоПериодам Из ДеревоЗаписей.Строки Цикл;
		
		НомерЛиста = 0;
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
				
		ТабличныйДокумент = Новый ТабличныйДокумент;	
		ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб         = Истина;
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПродаж";
	
		Для Каждого ИтогПоПериодамКорректировки Из ИтогПоПериодам.Строки Цикл
			// Формирование шапки доп. листа
			НомерЛиста = НомерЛиста + 1;
				
			ВывестиШапкуДопЛистаПродажи(ТабличныйДокумент, Макет, ИтогПоПериодамКорректировки, НомерЛиста, ПараметрыОтчета, СтандартнаяФорма); 

			ИтогЗаПериод = ПолучитьИтогиЗаПериодПродажи(ПараметрыОтчета.Организация, ИтогПоПериодамКорректировки.НалоговыйПериод, 
				КонецДня(ИтогПоПериодамКорректировки.КонецНалоговогоПериода), ИтогПоПериодамКорректировки.ДатаОформления);
			Если Не ИтогЗаПериод.Пустой() Тогда
				ИтогЗаПериод = ИтогЗаПериод.Выгрузить()[0];
			Иначе
				ИтогЗаПериод = Новый Структура;
				ИтогЗаПериод.Вставить("ВсегоПродаж"      , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС10"    , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС10"            , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаБезНДС18"    , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС18"            , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("НДС0"             , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			КонецЕсли;
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
			
			ТабличныйДокумент.Вывести(СтрокаИтого);

			Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И Не СтандартнаяФорма Тогда
				Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
					СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
					ТабличныйДокумент.Вывести(СекцияКонтрагент);
					ТабличныйДокумент.НачатьГруппуСтрок();
					Для Каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
						Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
							Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
								ЗаполнитьСтрокуДополнительногоЛистаПродажи(Секция, ЗаписьКниги, ПараметрыОтчета);
								
								ТабличныйДокумент.Вывести(Секция);
								
								ИтогЗаПериод.ВсегоПродаж       = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
								ИтогЗаПериод.СуммаБезНДС10     = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
								ИтогЗаПериод.НДС10             = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
								ИтогЗаПериод.СуммаБезНДС18     = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
								ИтогЗаПериод.НДС18             = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
								ИтогЗаПериод.НДС0              = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
								ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
							КонецЦикла; 
						КонецЦикла; 
					КонецЦикла;  
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
					ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
				КонецЦикла;
			Иначе	
				Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
					Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
						Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
							ЗаполнитьСтрокуДополнительногоЛистаПродажи(Секция, ЗаписьКниги, ПараметрыОтчета);
							
							ТабличныйДокумент.Вывести(Секция);
							
							ИтогЗаПериод.ВсегоПродаж       = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
							ИтогЗаПериод.СуммаБезНДС10     = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
							ИтогЗаПериод.НДС10             = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
							ИтогЗаПериод.СуммаБезНДС18     = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
							ИтогЗаПериод.НДС18             = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
							ИтогЗаПериод.НДС0              = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
							ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЕсли;
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабличныйДокумент.Вывести(СтрокаВсего);
					
			// Вывод подвала
			ВывестиПодвалПродажи(ТабличныйДокумент, Макет, ПараметрыОтчета);
			
		КонецЦикла;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб        = Истина;
		
		ПроверкаКонтрагентов.ДобавитьРазделОтчета(
			ПараметрыОтчета, 
			"Доп.листы за " + НалоговыйПериод, 
			НомерОтображаемогоПериода + 1, // первый раздел - основной раздел книги
			ТабличныйДокумент, 
			Новый Структура("ЭтоДопЛист", Истина));
		
	КонецЦикла;
		
	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
КонецПроцедуры 

// Функция осуществляет первичную обработку результатов запроса к движениям регистра НДСПродажи,
// и по данным запроса заполняет таблицу значений, на основании которой, будет напечатана книга продаж
// Параметры:
// 	Результат - ссылка на результаты выполнения запроса к данным регистра "НДСПродажи"
//  
Функция ПолучитьЗаписиКнигиПродаж(СписокОрганизаций, СписокСчетовФактур, ПараметрыОтчета, СтандартнаяФорма)
	
	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода"	          , ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	          , КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация"		          , СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту"     , ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора));
	Запрос.УстановитьПараметр("КонтрагентДляОтбора"       , ПараметрыОтчета.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", ПараметрыОтчета.ВыводитьПродавцовПоАвансам);
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0   = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностей_СобственныеСФ, Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммоваяРазница);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И (НЕ &ВыводитьПродавцовПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродажОбороты.Период КАК Период,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорАванса,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			Организация В (&Организация)
	|				И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|						ТОГДА Покупатель = &КонтрагентДляОтбора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.Организация,
	|	НДСЗаписиКнигиПродажОбороты.Период,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И (НЕ &ВыводитьПродавцовПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	Если Не СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) И ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Покупатель = &КонтрагентДляОтбора", "Покупатель В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыПродажи(Запрос);

	// Создаем общий запрос                                    
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.Период КАК НалоговыйПериод,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, Квартал) КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактураДата КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ЗаписиКнигиПродаж.Контрагент,
	|	ЗаписиКнигиПродаж.Контрагент.ИНН КАК ПокупательИНН,
	|	ЗаписиКнигиПродаж.Контрагент.КПП КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
	|			ТОГДА ""Розничная продажа""
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	ЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (НастройкиУчетаНДС.Организация = ЗаписиКнигиПродаж.Организация)
	|			И (НастройкиУчетаНДС.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(НастройкиУчетаНДС.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|				ГДЕ
	|					ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.Дата, &КонецПериода) >= НастройкиУчетаНДС.Период
	|					И НастройкиУчетаНДС.Организация = ЗаписиКнигиПродаж.Организация))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	СчетФактура,
	|	ДатаОплаты,
	|	НомерСчетаФактуры
	|ИТОГИ
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	СУММА(ВсегоПродаж),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС)
	|ПО
	|	ОБЩИЕ,
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДокумент,
	|	ДоговорАванса";
	
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И Не СтандартнаяФорма Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьСтрокуКнигиПродаж(Секция, ЗаписьКниги, ЭтоДетальнаяЗапись = Ложь, ПараметрыОтчета)
	
	Секция.Параметры.Заполнить(ЗаписьКниги);
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.Строки[0].СчетФактура;
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ЗаписьКниги.Строки[0];
	КонецЕсли;
	
	Секция.Параметры.Контрагент		= РасшифровкаДанныхПокупателя.Контрагент;
	Секция.Параметры.Покупатель		= РасшифровкаДанныхПокупателя.Покупатель;
	Секция.Параметры.ПокупательИНН	= РасшифровкаДанныхПокупателя.ПокупательИНН;
	Секция.Параметры.ПокупательКПП	= РасшифровкаДанныхПокупателя.ПокупательКПП;
	
	ЗаполнениеДатыИНомераСФПродажи(РасшифровкаДанныхПокупателя, Секция, ПараметрыОтчета);
		
	ТекстОплаты = "";
	СписокДатОплат = Новый списокЗначений();
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Секция.Параметры.ДатаОплаты = ТекстОплаты;
			
	ПроставитьПрочеркиВПустыеПоляПродажи(Секция);
	
КонецПроцедуры 

Процедура ВывестиШапкуДопЛистаПродажи(ТабличныйДокумент, Макет, ЗаписьКниги, НомерЛиста, ПараметрыОтчета, СтандартнаяФорма)
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если СтандартнаяФорма Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерЛиста;
	КонецЕсли;

	Секция.Параметры.Период = ПредставлениеПериода(ЗаписьКниги.НалоговыйПериод, КонецДня(ЗаписьКниги.КонецНалоговогоПериода), "ФП = Истина");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННОрганизации      = "" + ПараметрыОтчета.Организация.ИНН + ?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация.КПП), "", ("/" + ПараметрыОтчета.Организация.КПП));
	Секция.Параметры.ДатаСоставления     = Формат(ЗаписьКниги.ДатаОформления, "ДФ=dd.MM.yyyy");
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) Тогда
		Если ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
			НадписьОтбор = НСтр("ru = 'Отбор: Контрагент в группе %КонтрагентДляОтбора%'");
		Иначе
			НадписьОтбор = НСтр("ru = 'Отбор: Контрагент = %КонтрагентДляОтбора%'");
		КонецЕсли;
		Секция.Параметры.УстановленныйОтбор = СтрЗаменить(НадписьОтбор, "%Контрагент%", ПараметрыОтчета.КонтрагентДляОтбора);
	КонецЕсли;
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		Секция.Параметры.УстановленныйОтбор = "" + Секция.Параметры.УстановленныйОтбор + Символы.ПС + "Группировка: По Контрагентам";
	КонецЕсли;
	ТабличныйДокумент.Вывести(Секция);
		
КонецПроцедуры

Процедура ВывестиПодвалПродажи(ТабличныйДокумент, Макет, ПараметрыОтчета)
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) Тогда
		ИмяОрг = "";
		Свидетельство = "";
	Иначе
		ИмяОрг = ОтветственныеЛица.РуководительПредставление;
		СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация);
		Свидетельство = СведенияОЮрФизЛице.Свидетельство;
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяБух        = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
	Секция.Параметры.ИмяОрг        = ИмяОрг;
	Секция.Параметры.Свидетельство = Свидетельство;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры 

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистовПродажи(СписокОрганизаций, НачалоПериода, КонецПериода)
	
	СтруктураПараметров = Новый Структура("ТекущийПериод, КорректируемыйПериод");
	СтруктураПараметров.ТекущийПериод        = Ложь;
	СтруктураПараметров.КорректируемыйПериод = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДопЛисты,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	&НачалоПериода
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			,
		|			День,
		|			Организация В (&Организация)
		|				И ЗаписьДополнительногоЛиста = ИСТИНА
		|				И КорректируемыйПериод >= &НачалоПериода
		|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"	 , СписокОрганизаций);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоляПродажи(ОбластьМакета)
		
	Если ОбластьМакета.Параметры.Покупатель = "Розничная продажа" Тогда
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПокупательИНН) Тогда
			ОбластьМакета.Параметры.ПокупательИНН = "---";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПокупательКПП) Тогда
			ОбластьМакета.Параметры.ПокупательКПП = "---";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Заполняет некоторые параметры строки: 
// ДатаНомер и СчетФактура(по авансам)
Процедура ЗаполнениеДатыИНомераСФПродажи(ЗаписьКниги, Секция, ПараметрыОтчета)
		
	ДатаНомер = ОпределитьДатуИНомерСФПродажи(ЗаписьКниги, Секция, ПараметрыОтчета);
		
	Секция.Параметры.ДатаНомер = ДатаНомер;
		
КонецПроцедуры

// Заполняет некоторые параметры строки: 
// ДатаНомер и СчетФактура(по авансам)
Функция ОпределитьДатуИНомерСФПродажи(ЗаписьКниги, Секция = Неопределено, ПараметрыОтчета)
		
	Если Не ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат "";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			// Не требуется удаление префиксов в номере документа
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.НомерСчетаФактуры);
		Иначе
			ПараметрыОбъекта = Новый Структура("Дата, Номер, Организация", 
				ЗаписьКниги.ДатаСчетаФактуры, ЗаписьКниги.НомерСчетаФактуры, ПараметрыОтчета.Организация);
			ДатаНомер = "" + Формат(ЗаписьКниги.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") + ", №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыОбъекта.Номер, Истина, Ложь);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" 
			+ ЗаписьКниги.СчетФактура.НомерВходящегоДокумента;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" 
			+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаписьКниги.СчетФактура.Номер, Истина, Ложь);
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ДатаНомер = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" 
			+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаписьКниги.СчетФактура.Номер, Истина, Ложь);
	Иначе
		Если ЗаписьКниги.НаАванс Тогда
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаАванс(ЗаписьКниги.СчетФактура, , , ЗаписьКниги.ДоговорАванса);
		ИначеЕсли ЗаписьКниги.НаСуммовуюРазницу Тогда
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаСуммовуюРазницу(ЗаписьКниги.СчетФактура);
		Иначе
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ЗаписьКниги.СчетФактура);
		КонецЕсли; 
		
		Если Документ <> Неопределено Тогда
			ДатаНомер = "" + Формат(Документ.Дата, "ДФ=dd.MM.yyyy") + ", №" 
				+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Ложь);
			
			Если (ЗаписьКниги.НаАванс ИЛИ ЗаписьКниги.НаСуммовуюРазницу) И Секция <> Неопределено Тогда
				Секция.Параметры.СчетФактура = Документ;
			КонецЕсли; 
		Иначе
			Документ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ЗаписьКниги.СчетФактура);
			Если Документ <> Неопределено Тогда
				ДатаНомер = "" + Формат(Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") + ", №" + Документ.НомерВходящегоДокумента;
			Иначе
				ДатаНомер = "";
			КонецЕсли
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат ДатаНомер;
		
КонецФункции

Процедура ЗаполнитьСтрокуДополнительногоЛистаПродажи(Секция, ЗаписьКниги, ПараметрыОтчета)
	
	Секция.Параметры.Заполнить(ЗаписьКниги);
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		Секция.Параметры.СчетФактура = ЗаписьКниги.Строки[0].СчетФактура;
	КонецЕсли;
		
	Секция.Параметры.Покупатель		= ЗаписьКниги.Строки[0].Покупатель;
	Секция.Параметры.ПокупательИНН	= ЗаписьКниги.Строки[0].ПокупательИНН;
	Секция.Параметры.ПокупательКПП	= ЗаписьКниги.Строки[0].ПокупательКПП;
	Секция.Параметры.Контрагент		= ЗаписьКниги.Строки[0].Контрагент;
		
	ЗаполнениеДатыИНомераСФПродажи(ЗаписьКниги.Строки[0], Секция, ПараметрыОтчета);
		
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений;
	Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Секция.Параметры.ДатаОплаты = ТекстОплаты;
		
	ПроставитьПрочеркиВПустыеПоляПродажи(Секция);
									
КонецПроцедуры

Процедура ПолучитьСчетаФактурыДокументыПродажи(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактура,
	|			ОтчетОРозничныхПродажах.Номер КАК НомерСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Дата КАК ДатаСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			ЛОЖЬ КАК НаСуммовуюРазницу,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
	|			1 КАК Приоритет
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ГДЕ
	|			ОтчетОРозничныхПродажах.Проведен
	|			И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|			И ОтчетОРозничныхПродажах.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ПриходныйКассовыйОрдер.Номер,
	|			ПриходныйКассовыйОрдер.Дата,
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			2
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|			И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
	|			И ПриходныйКассовыйОрдер.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.ДокументОснование,
	|			СчетФактураВыданный.Ссылка.Номер,
	|			СчетФактураВыданный.Ссылка.Дата,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			3
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И НЕ СчетФактураВыданный.Ссылка.Исправление
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураПолученный.ДокументОснование,
	|			СчетФактураПолученный.Ссылка.НомерВходящегоДокумента,
	|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|			СчетФактураПолученный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ЛОЖЬ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			5
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|			И НЕ СчетФактураПолученный.Ссылка.Исправление
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			6
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И НЕ ГТДИмпорт.ПометкаУдаления
	|			И ГТДИмпорт.Организация В(&Организация)) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьИтогиЗаПериодПродажи(СписокОрганизаций, НачалоПериода, КонецПериода, ДатаФормированияДопЛиста)
	
	// Создаем общий запрос                                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И (ЗаписьДополнительногоЛиста = ИСТИНА
	|						И КорректируемыйПериод >= &НачалоПериода
	|						И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода"             , НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"              , КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"               , СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(ДатаФормированияДопЛиста),ВидГраницы.Исключая));
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0   = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"  , СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция осуществляет первичную обработку результатов запроса к движениям регистра НДСПродажи,
// и по данным запроса заполняет таблицу значений, на основании которой, будет напечатана книга продаж
// Параметры:
// 	Результат - ссылка на результаты выполнения запроса к данным регистра "НДСПродажи"
// 
Функция ПолучитьЗаписиДополнительныхЛистовПродажи(СписокОрганизаций, ПараметрыОтчета, СписокСчетовФактур, СтандартнаяФорма)
	
	// Создаем общий запрос                                       
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода"	          , ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	          , КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация"		          , СписокОрганизаций);
	Запрос.УстановитьПараметр("НалоговыйПериодМесяц"      , Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("НалоговыйПериодКвартал"    , Перечисления.Периодичность.Квартал);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту"     , ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора));
	Запрос.УстановитьПараметр("КонтрагентДляОтбора"       , ПараметрыОтчета.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", ПараметрыОтчета.ВыводитьПродавцовПоАвансам);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0   = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"  , СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностей_СобственныеСФ, Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммоваяРазница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И (НЕ &ВыводитьПродавцовПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорАванса,
	|	НДСЗаписиКнигиПродажОбороты.Период КАК Период,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|						ТОГДА Покупатель = &КонтрагентДляОтбора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.Организация,
	|	НДСЗаписиКнигиПродажОбороты.Период,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И (НЕ &ВыводитьПродавцовПоАвансам)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	Если ПараметрыОтчета.ДополнительныеЛистыЗаТекущийПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
		"ЗаписьДополнительногоЛиста = ИСТИНА 
		|И КорректируемыйПериод >= &НачалоПериода 
		|И КорректируемыйПериод <= &КонецПериода");
	КонецЕсли;
	
	Если Не СтандартнаяФорма И ЗначениеЗаполнено(ПараметрыОтчета.КонтрагентДляОтбора) И ПараметрыОтчета.КонтрагентДляОтбора.ЭтоГруппа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Покупатель = &КонтрагентДляОтбора", "Покупатель В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыПродажи(Запрос);
	
	Запрос.Текст =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактура.Дата КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ЗаписиКнигиПродаж.Контрагент,
	|	ЗаписиКнигиПродаж.Контрагент.ИНН КАК ПокупательИНН,
	|	ЗаписиКнигиПродаж.Контрагент.КПП КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РозничнаяВыручка)
	|			ТОГДА ""Розничная продажа""
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|				И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Организации).НаименованиеСокращенное, 1, 250)
	|		КОГДА ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	ЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.Период КАК ДатаОформления,
	|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактураДокумент
	|				ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			КОНЕЦ)
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА Приоритеты.СчетФактураДокумент = ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|				ИНАЧЕ Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			КОНЕЦ)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО (НастройкиУчетаНДС.Организация = ЗаписиКнигиПродаж.Организация)
	|			И (НастройкиУчетаНДС.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(НастройкиУчетаНДС.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|				ГДЕ
	|					ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.Дата, &КонецПериода) >= НастройкиУчетаНДС.Период
	|					И НастройкиУчетаНДС.Организация = ЗаписиКнигиПродаж.Организация))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	СУММА(ВсегоПродаж),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактура,
	|	ДоговорАванса,
	|	СторнирующаяЗаписьДопЛиста";
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам И Не СтандартнаяФорма Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления,", "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ЖУРНАЛ УЧЕТА СЧЕТОВ-ФАКТУР 914

// Формирование отчета в виде табличного документа.
 // Параметры:
 //  ТабличныйДокумент - макет отчета.
Процедура СформироватьОтчетЖурналУчетаСчетовФактур914(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Макет = ПолучитьОбщийМакет("ЖурналУчетаВыданныхСчетовФактур");
	
	// Вывод шапки
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.НачалоПериода = Формат(ПараметрыОтчета.НалоговыйПериод, "ДФ=dd.MM.yyyy");
	
	Если ПараметрыОтчета.Свойство("КонецПериодаОтчета") Тогда
		Секция.Параметры.КонецПериода = Формат(КонецДня(ПараметрыОтчета.КонецПериодаОтчета), "ДФ=dd.MM.yyyy");
	Иначе
		Секция.Параметры.КонецПериода = Формат(КонецКвартала(ПараметрыОтчета.НалоговыйПериод), "ДФ=dd.MM.yyyy");	
	КонецЕсли;
	
	СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Секция.Параметры.НазваниеОрганизации = ПредставлениеОрганизации;
	ТабличныйДокумент.Вывести(Секция);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПараметрыОтчета.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	СоответствиеТиповИПредставлений = Новый Соответствие();
	ПараметрыОтчета.Вставить("СоответствиеТиповИПредставлений", СоответствиеТиповИПредставлений);
	ТипыДокументов = Документы.ТипВсеСсылки();
	ПараметрыОтчета.Вставить("ТипыДокументов", ТипыДокументов);
	
	// Выполнение запроса.
	Результат = ПодготовитьОтчетКВыводуНаПечать(ПараметрыОтчета);
	
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Строка");
		ТабличныйДокумент.Вывести(Секция);
				
	КонецЕсли; 
	
	Секция = Макет.ПолучитьОбласть("Строка");
	Счетчик = 1;
	
	Если Не ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме и ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		//Режим построения с группировкой по контрагенту
		СекцияКонтрагента = Макет.ПолучитьОбласть("Контрагент");
		ГруппировкаПоКонтрагенту = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		Пока ГруппировкаПоКонтрагенту.Следующий() Цикл
			СекцияКонтрагента.Параметры.Заполнить(ГруппировкаПоКонтрагенту);
			ТабличныйДокумент.Вывести(СекцияКонтрагента,1);
		
			Документ = ГруппировкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Документ.Следующий() Цикл
				Секция.Параметры.Заполнить(Документ);
				
				Если Документ.СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ДокументыОснования = Документ.Выбрать();
					Пока ДокументыОснования.Следующий() Цикл
						Секция.Параметры.НПП = Счетчик;
						Если ВыводСтрокиКорректировочногоСФ(ПараметрыОтчета, Документ, Секция) Тогда
							ТабличныйДокумент.Вывести(Секция, 2);
							Счетчик = Счетчик + 1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Секция.Параметры.НПП = Счетчик;
					Если ВыводСтроки(ПараметрыОтчета, Документ, Секция) Тогда
						ТабличныйДокумент.Вывести(Секция, 2);
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	Иначе
		// Простой режим
		Документ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока Документ.Следующий() Цикл
			Секция.Параметры.Заполнить(Документ);
			
			Если Документ.СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				ДокументыОснования = Документ.Выбрать();
				Пока ДокументыОснования.Следующий() Цикл
					Секция.Параметры.НПП = Счетчик;
					Если ВыводСтрокиКорректировочногоСФ(ПараметрыОтчета, Документ, Секция) Тогда
						ТабличныйДокумент.Вывести(Секция);
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Секция.Параметры.НПП = Счетчик;
				Если ВыводСтроки(ПараметрыОтчета, Документ, Секция) Тогда
					ТабличныйДокумент.Вывести(Секция);
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	СформироватьМакетПолученныхСчетовФактур(ПараметрыОтчета,ТабличныйДокумент);
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
	Результат = Новый Структура("СформированныйЖурнал", ТабличныйДокумент);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
КонецПроцедуры

Процедура СформироватьМакетПолученныхСчетовФактур(ПараметрыОтчета,ТабличныйДокумент) Экспорт
	
	Макет = ПолучитьОбщийМакет("ЖурналУчетаПолученныхСчетовФактур");

	// Вывод шапки
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.НачалоПериода = Формат(ПараметрыОтчета.НалоговыйПериод, "ДФ=dd.MM.yyyy");
	
	Если ПараметрыОтчета.Свойство("КонецПериодаОтчета") Тогда
		Секция.Параметры.КонецПериода = Формат(КонецДня(ПараметрыОтчета.КонецПериодаОтчета), "ДФ=dd.MM.yyyy");
	Иначе
		Секция.Параметры.КонецПериода = Формат(КонецКвартала(ПараметрыОтчета.НалоговыйПериод), "ДФ=dd.MM.yyyy");	
	КонецЕсли;
	
	СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Секция.Параметры.НазваниеОрганизации = ПредставлениеОрганизации;
	ТабличныйДокумент.Вывести(Секция);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПараметрыОтчета.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	СоответствиеТиповИПредставлений = Новый Соответствие();
	ПараметрыОтчета.Вставить("СоответствиеТиповИПредставлений", СоответствиеТиповИПредставлений);
	ТипыДокументов = Документы.ТипВсеСсылки();
	ПараметрыОтчета.Вставить("ТипыДокументов", ТипыДокументов);
	
	// Выполнение запроса.
	Результат = ПодготовитьОтчетКВыводуНаПечатьПолученные(ПараметрыОтчета);
	
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Строка");
		ТабличныйДокумент.Вывести(Секция);
		Возврат;
		
	КонецЕсли; 
	
	Секция  = Макет.ПолучитьОбласть("Строка");
	Счетчик = 1;
	
	Если не ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме и ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		
		//Режим построения с группировкой по контрагенту
		СекцияКонтрагента = Макет.ПолучитьОбласть("Контрагент");
		ГруппировкаПоКонтрагенту = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		Пока ГруппировкаПоКонтрагенту.Следующий() Цикл
			СекцияКонтрагента.Параметры.Заполнить(ГруппировкаПоКонтрагенту);
			ТабличныйДокумент.Вывести(СекцияКонтрагента,1);
		
			СчетФактура = ГруппировкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока СчетФактура.Следующий() Цикл
				
				Если ТипЗнч(СчетФактура.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") 
					И СчетФактура.СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					Документ = СчетФактура.Выбрать();
					Пока Документ.Следующий() Цикл
						Секция.Параметры.НПП = Счетчик;
						ВыводСтрокиКорректировочногоСФПолученного(ПараметрыОтчета, Документ, Секция);
						ТабличныйДокумент.Вывести(Секция, 2);
						Счетчик = Счетчик + 1;
					КонецЦикла;
				Иначе
					Секция.Параметры.НПП = Счетчик;
					ВыводСтрокиПолученный(ПараметрыОтчета, СчетФактура, Секция);
					ТабличныйДокумент.Вывести(Секция, 2);
					Счетчик = Счетчик + 1;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЦикла; 
		
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	Иначе
		// Простой режим
		
		СчетФактура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока СчетФактура.Следующий() Цикл
			
			Если ТипЗнч(СчетФактура.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") 
				И СчетФактура.СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				Документ = СчетФактура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Документ.Следующий() Цикл
					Секция.Параметры.НПП = Счетчик;
					ВыводСтрокиКорректировочногоСФПолученного(ПараметрыОтчета, Документ, Секция);
					ТабличныйДокумент.Вывести(Секция);
					Счетчик = Счетчик + 1;
				КонецЦикла;
			Иначе
				Секция.Параметры.НПП = Счетчик;
				ВыводСтрокиПолученный(ПараметрыОтчета, СчетФактура, Секция);
				ТабличныйДокумент.Вывести(Секция);
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыводСтроки(ПараметрыОтчета, Документ, Секция)
	Перем ПараметрыСФ;
	
	ДокументыОснования = Документ.Выбрать();
	
	ПредставлениеОснования = "";
	
	ВывестиОрганизацию = Ложь;
	
	Пока ДокументыОснования.Следующий() Цикл
		
		ТипДокументаОснования = ТипЗнч(ДокументыОснования.ДокументОснование);
		
		Если ДокументыОснования.ЭтоНепередаваемыйСчетФактура Тогда
			// Не выводятся счета-фактуры на СМР для собственного потребления
			Продолжить;
		КонецЕсли;
		
		Если ДокументыОснования.ЭтоНепередаваемыйСчетФактура Тогда
			ВывестиОрганизацию = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеОснования) Тогда
			Секция.Параметры.ДокументОснование = ДокументыОснования.ДокументОснование;
		Иначе
			ПредставлениеОснования = ПредставлениеОснования + Символы.ПС;
		КонецЕсли; 
		
		ПредставлениеТипа = ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипДокументаОснования);
		
		Если Не ПредставлениеТипа = Неопределено Тогда
			Если ДокументыОснования.ДокументОснование <> Неопределено Тогда
				Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументыОснования.ДокументОснование.Номер, Истина, Ложь);
			Иначе
				Номер = "";
			КонецЕсли;
			ПредставлениеОснования = ПредставлениеОснования + ПредставлениеТипа + " № " + Номер + " от "+ Формат(ДокументыОснования.ДокументОснование.Дата, "ДФ=dd.MM.yyyy") + " г.";
		Иначе	
			ПредставлениеОснования = ПредставлениеОснования + Строка(ДокументыОснования.ДокументОснование);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ПредставлениеОснования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Документ.ОпределитьПараметрыСчетаФактуры Тогда
		
		ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(Документ.СчетФактура);
		Секция.Параметры.Сумма = ?(ПараметрыСФ.СуммаДокумента = 0, "", 
			Формат(ПараметрыСФ.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(ПараметрыСФ.ВалютаДокумента));
		
		Секция.Параметры.Контрагент = ПараметрыСФ.Контрагент;
		Если ЗначениеЗаполнено(ПараметрыСФ.Контрагент)  Тогда
			КонтрагентНаименование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСФ.Контрагент, "НаименованиеПолное,Наименование");
			Секция.Параметры.КонтрагентНаименование = ?(ПустаяСтрока(КонтрагентНаименование.НаименованиеПолное), 
				СокрЛП(КонтрагентНаименование.Наименование), СокрЛП(КонтрагентНаименование.НаименованиеПолное));
		КонецЕсли; 
				
	Иначе
			
		Секция.Параметры.Сумма = ?(Документ.СуммаДокумента = 0, 
			"", Формат(Документ.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(Документ.ВалютаДокумента));
				
	КонецЕсли; 
	
	Если ВывестиОрганизацию Тогда
		Секция.Параметры.Контрагент = Документ.Организация;
		Секция.Параметры.КонтрагентНаименование = ?(ПустаяСтрока(Документ.ОрганизацияНаименование), 
			СокрЛП(Документ.Организация), СокрЛП(Документ.ОрганизацияНаименование));
	КонецЕсли; 
	
	Секция.Параметры.ПредставлениеОснования = ПредставлениеОснования;
	
	Секция.Параметры.ДатаНомер = Формат(Документ.Дата, "ДФ=dd.MM.yyyy") + ", № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Ложь);
	
	Возврат Истина;
	
КонецФункции // ВыводСтроки(ПараметрыОтчета, )

Процедура ВыводСтрокиПолученный(ПараметрыОтчета, СчетФактура, Секция)
	Перем ПараметрыСФ;

	Если СчетФактура.ОпределитьПараметрыСчетаФактуры Тогда
		ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(СчетФактура.СчетФактура);
		Секция.Параметры.Сумма = ?(ПараметрыСФ.СуммаДокумента = 0, 
			"", Формат(ПараметрыСФ.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(ПараметрыСФ.ВалютаДокумента));
		ПредставлениеОснования = "";
		УстановитьПараметры = Истина;
		
		Документ = СчетФактура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Документ.Следующий() Цикл
			Если УстановитьПараметры Тогда
				УстановитьПараметры = Ложь;
				Секция.Параметры.Заполнить(Документ);
			КонецЕсли;					
			Если ПустаяСтрока(ПредставлениеОснования) Тогда
				Секция.Параметры.ДокументОснование = Документ.ДокументОснование;
			Иначе
				ПредставлениеОснования = ПредставлениеОснования + Символы.ПС;
			КонецЕсли; 
					
			ПредставлениеТипа = ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипЗнч(Документ.ДокументОснование));
					
			Если Не ПредставлениеТипа = Неопределено Тогда
				ПредставлениеОснования = ПредставлениеОснования + ПредставлениеТипа 
					+ " № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.ДокументОснование.Номер, Истина, Ложь)
					+ " от "+ Формат(Документ.ДокументОснованиеДата, "ДФ=dd.MM.yyyy") + " г.";
			Иначе	
				ПредставлениеОснования = ПредставлениеОснования + Строка(Документ.ДокументОснование);
			КонецЕсли; 
			Секция.Параметры.ПредставлениеОснования = ПредставлениеОснования;
					
			Секция.Параметры.Контрагент = ПараметрыСФ.Контрагент;
			Если ЗначениеЗаполнено(ПараметрыСФ.Контрагент)  Тогда
				КонтрагентНаименование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСФ.Контрагент, "НаименованиеПолное,Наименование");
				Секция.Параметры.КонтрагентНаименование = ?(ПустаяСтрока(КонтрагентНаименование.НаименованиеПолное), 
					СокрЛП(КонтрагентНаименование.Наименование), СокрЛП(КонтрагентНаименование.НаименованиеПолное));
			КонецЕсли; 
			Секция.Параметры.ДатаНомер = Формат(Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") 
				+ ", № " + Документ.НомерВходящегоДокумента;
		КонецЦикла;
		
	Иначе
		
		Документ = СчетФактура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		УстановитьПараметры = Истина;
		ПредставлениеОснования = "";
		
		Пока Документ.Следующий() Цикл
			Если УстановитьПараметры Тогда
				УстановитьПараметры = Ложь;
				Секция.Параметры.Заполнить(Документ);
				Секция.Параметры.Сумма = ?(СчетФактура.СуммаДокумента = 0, 
					"", Формат(СчетФактура.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(Документ.ВалютаДокумента));
			КонецЕсли;					
			Если ПустаяСтрока(ПредставлениеОснования) Тогда
				Секция.Параметры.ДокументОснование = Документ.ДокументОснование;
			Иначе
				ПредставлениеОснования = ПредставлениеОснования+Символы.ПС;
			КонецЕсли; 
			ПредставлениеТипа = ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипЗнч(Документ.ДокументОснование));
			Если Не ПредставлениеТипа = Неопределено Тогда
				ПредставлениеОснования = ПредставлениеОснования + ПредставлениеТипа
					+ " № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.ДокументОснованиеНомер, Истина, Ложь)
					+ " от " + Формат(Документ.ДокументОснованиеДата, "ДФ=dd.MM.yyyy") + " г.";
			Иначе	
				ПредставлениеОснования = ПредставлениеОснования + Строка(Документ.ДокументОснование);
			КонецЕсли; 
			Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			    Секция.Параметры.ДатаНомер = "ГТД № " + Документ.НомерВходящегоДокумента;
			Иначе
				Секция.Параметры.ДатаНомер = Формат(Документ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") 
					+ ", № " + Документ.НомерВходящегоДокумента;
			КонецЕсли;
		КонецЦикла;
		Секция.Параметры.ПредставлениеОснования = ПредставлениеОснования;

	КонецЕсли;
	
КонецПроцедуры

Функция ВыводСтрокиКорректировочногоСФ(ПараметрыОтчета, Документ, Секция)
	
	НомерСФ = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.НомерДокументаОснования, Истина, Ложь);
	ДатаСФ  = Формат(Документ.ДатаДокументаОснования, "ДФ=dd.MM.yyyy");
	
	ТипДокументаОснования = ТипЗнч(Документ.ДокументОснование);
	ПредставлениеТипа     = ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипДокументаОснования);
	
	Если ПредставлениеТипа <> Неопределено Тогда
		ПредставлениеОснования = ПредставлениеТипа + " № " + НомерСФ + " от " + ДатаСФ + " г.";
	Иначе	
		ПредставлениеОснования = Строка(Документ.ДокументОснование);
	КонецЕсли; 
	
	Секция.Параметры.ПредставлениеОснования = ПредставлениеОснования;
	
	Секция.Параметры.ДокументОснование = Документ.ДокументОснование;
	
	Секция.Параметры.Сумма = ?(Документ.СуммаДокумента = 0, 
		"", Формат(Документ.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(Документ.ВалютаДокумента));
	
	Секция.Параметры.ДатаНомер = Формат(Документ.Дата, "ДФ=dd.MM.yyyy") 
		+ ", № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Ложь);
	
	Возврат Истина;
	
КонецФункции // ВыводСтрокиКорректировочногоСФ(ПараметрыОтчета, )

Процедура ВыводСтрокиКорректировочногоСФПолученного(ПараметрыОтчета, СчетФактура, Секция)
	
	ДатаСФ = Формат(СчетФактура.ДокументОснованиеДата, "ДФ=dd.MM.yyyy");
	ПредставлениеТипа = ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипЗнч(СчетФактура.ДокументОснование));
	Если Не ПредставлениеТипа = Неопределено Тогда
		ПредставлениеОснования = ПредставлениеТипа + " № " + СчетФактура.ДокументОснованиеНомер + " от " + ДатаСФ + " г.";
	Иначе	
		ПредставлениеОснования = Строка(СчетФактура.ДокументОснование);
	КонецЕсли; 
	
	Секция.Параметры.Заполнить(СчетФактура);
	Секция.Параметры.Сумма = ?(СчетФактура.СуммаДокумента = 0, 
		"", Формат(СчетФактура.СуммаДокумента, "ЧЦ=19; ЧДЦ=2") + " " + Строка(СчетФактура.ВалютаДокумента));
	Секция.Параметры.ДокументОснование      = СчетФактура.ДокументОснование;
	Секция.Параметры.ПредставлениеОснования = ПредставлениеОснования;
	Секция.Параметры.ДатаНомер = Формат(СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy") 
		+ ", № " + СчетФактура.НомерВходящегоДокумента;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПоТипу(ПараметрыОтчета, ТипЗначения)
	
	Представление =  ПараметрыОтчета.СоответствиеТиповИПредставлений[ТипЗначения];
	Если Представление = Неопределено Тогда
		Если ТипЗначения <> ТипЗнч(Неопределено) И Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
			Представление = Метаданные.НайтиПоТипу(ТипЗначения).Представление();
		Иначе
			Представление = "";	
		КонецЕсли; 
		
		ПараметрыОтчета.СоответствиеТиповИПредставлений.Вставить(ТипЗначения, Представление);
	КонецЕсли; 
	
	Возврат Представление; 
	
КонецФункции

 // Функция осуществляет первичную обработку результатов запроса к движениям регистра НДСПродажи,
 // и по данным запроса заполняет таблицу значений, на основании которой, будет напечатана книга продаж
 // Параметры:
 // 	Результат - ссылка на результаты выполнения запроса к данным регистра "НДСПродажи"
 //  МоментОпределенияНалоговойБазыНДС
Функция ПодготовитьОтчетКВыводуНаПечать(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =        
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеестрСчетовФактур.Организация КАК Организация,
	|	РеестрСчетовФактур.СчетФактура КАК СчетФактура,
	|	РеестрСчетовФактур.Дата КАК Дата,
	|	РеестрСчетовФактур.Номер КАК Номер,
	|	РеестрСчетовФактур.Контрагент КАК Контрагент,
	|	РеестрСчетовФактур.СуммаДокумента КАК СуммаДокумента,
	|	РеестрСчетовФактур.ВалютаДокумента КАК ВалютаДокумента,
	|	РеестрСчетовФактур.ДокументОснование,
	|	РеестрСчетовФактур.ДатаДокументаОснования,
	|	РеестрСчетовФактур.НомерДокументаОснования,
	|	ВЫБОР
	|		КОГДА РеестрСчетовФактур.ДокументОснование ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	|				ИЛИ РеестрСчетовФактур.ДокументОснование ССЫЛКА Документ.ПринятиеКУчетуОС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНепередаваемыйСчетФактура,
	|	ВЫБОР
	|		КОГДА РеестрСчетовФактур.Контрагент ЕСТЬ NULL 
	|				ИЛИ РеестрСчетовФактур.СуммаДокумента ЕСТЬ NULL 
	|				ИЛИ РеестрСчетовФактур.ВалютаДокумента ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОпределитьПараметрыСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(РеестрСчетовФактур.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА РеестрСчетовФактур.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(РеестрСчетовФактур.Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(РеестрСчетовФактур.Организация.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА РеестрСчетовФактур.Организация.Наименование
	|		ИНАЧЕ ПОДСТРОКА(РеестрСчетовФактур.Организация.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК ОрганизацияНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураВыданный.Ссылка КАК СчетФактура,
	|		СчетФактураВыданный.Ссылка.Дата КАК Дата,
	|		СчетФактураВыданный.Ссылка.Номер КАК Номер,
	|		СчетФактураВыданный.Ссылка.Организация КАК Организация,
	|		СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|		СчетФактураВыданный.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|		СчетФактураВыданный.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|		СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|		СчетФактураВыданный.ДокументОснование.Дата КАК ДатаДокументаОснования,
	|		СчетФактураВыданный.ДокументОснование.Номер КАК НомерДокументаОснования
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|	ГДЕ
	|		НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|		И СчетФактураВыданный.Ссылка.Организация = &Организация
	|		И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|				ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс))
	|		И СчетФактураВыданный.Ссылка.Дата >= &НачалоПериода
	|		И СчетФактураВыданный.Ссылка.Дата <= &КонецПериода
	|		И НЕ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировочныйСчетФактура.Ссылка,
	|		КорректировочныйСчетФактура.Ссылка.Дата,
	|		КорректировочныйСчетФактура.Ссылка.Номер,
	|		КорректировочныйСчетФактура.Ссылка.Организация,
	|		КорректировочныйСчетФактура.Ссылка.Контрагент,
	|		-КорректировочныйСчетФактура.Ссылка.СуммаУменьшение,
	|		КорректировочныйСчетФактура.Ссылка.ВалютаДокумента,
	|		КорректировочныйСчетФактура.ДокументОснование,
	|		КорректировочныйСчетФактура.ДокументОснование.Дата,
	|		КорректировочныйСчетФактура.ДокументОснование.Номер
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК КорректировочныйСчетФактура
	|	ГДЕ
	|		НЕ КорректировочныйСчетФактура.Ссылка.ПометкаУдаления
	|		И КорректировочныйСчетФактура.Ссылка.Организация = &Организация
	|		И КорректировочныйСчетФактура.Ссылка.Дата >= &НачалоПериода
	|		И КорректировочныйСчетФактура.Ссылка.Дата <= &КонецПериода
	|		И КорректировочныйСчетФактура.Ссылка.СуммаУменьшение > 0
	|		И КорректировочныйСчетФактура.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировочныйСчетФактура.Ссылка,
	|		КорректировочныйСчетФактура.Ссылка.Дата,
	|		КорректировочныйСчетФактура.Ссылка.Номер,
	|		КорректировочныйСчетФактура.Ссылка.Организация,
	|		КорректировочныйСчетФактура.Ссылка.Контрагент,
	|		КорректировочныйСчетФактура.Ссылка.СуммаУвеличение,
	|		КорректировочныйСчетФактура.Ссылка.ВалютаДокумента,
	|		КорректировочныйСчетФактура.ДокументОснование,
	|		КорректировочныйСчетФактура.ДокументОснование.Дата,
	|		КорректировочныйСчетФактура.ДокументОснование.Номер
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК КорректировочныйСчетФактура
	|	ГДЕ
	|		НЕ КорректировочныйСчетФактура.Ссылка.ПометкаУдаления
	|		И КорректировочныйСчетФактура.Ссылка.Организация = &Организация
	|		И КорректировочныйСчетФактура.Ссылка.Дата >= &НачалоПериода
	|		И КорректировочныйСчетФактура.Ссылка.Дата <= &КонецПериода
	|		И (КорректировочныйСчетФактура.Ссылка.СуммаУвеличение > 0
	|				ИЛИ КорректировочныйСчетФактура.Ссылка.СуммаУвеличение = 0
	|					И КорректировочныйСчетФактура.Ссылка.СуммаУменьшение = 0)
	|		И КорректировочныйСчетФактура.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)) КАК РеестрСчетовФактур
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту
	|				ТОГДА РеестрСчетовФактур.Контрагент В ИЕРАРХИИ (&Контрагент)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(СуммаДокумента),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(ЭтоНепередаваемыйСчетФактура),
	|	МАКСИМУМ(ОпределитьПараметрыСчетаФактуры),
	|	МАКСИМУМ(КонтрагентНаименование),
	|	МАКСИМУМ(ОрганизацияНаименование)
	|ПО
	|	СчетФактура";
	
	Если не ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме и ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"МАКСИМУМ(ОрганизацияНаименование)
		|ПО
		|	СчетФактура", 
		"МАКСИМУМ(ОрганизацияНаименование)
		|ПО
		|	Контрагент, СчетФактура");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
		|	КонтрагентНаименование, ");
	КонецЕсли; 	
	
	Если ПараметрыОтчета.Свойство("КонецПериодаОтчета") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НалоговыйПериод);
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериодаОтчета));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НалоговыйПериод);
		Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(ПараметрыОтчета.НалоговыйПериод));	
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме 
		И ПараметрыОтчета.ОтбиратьПоКонтрагенту 
		И Не ПараметрыОтчета.КонтрагентДляОтбора = Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент", ПараметрыОтчета.КонтрагентДляОтбора);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Заполняет таблицу значений, на основании которой, будет напечатана книга продаж
// Параметры:
// 	Результат - ссылка на результаты выполнения запроса к данным регистра "НДСПродажи"
//  МоментОпределенияНалоговойБазыНДС
Функция ПодготовитьОтчетКВыводуНаПечатьПолученные(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеестрСчетовФактур.СчетФактура КАК СчетФактура,
	|	РеестрСчетовФактур.ДатаРегистрации КАК ДатаРегистрации,
	|	РеестрСчетовФактур.ДатаВходящегоДокумента,
	|	РеестрСчетовФактур.НомерВходящегоДокумента,
	|	РеестрСчетовФактур.СуммаДокумента,
	|	ВЫБОР КОГДА ЕСТЬNULL(РеестрСчетовФактур.ВалютаДокумента, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА &ВалютаРегламентированногоУчета ИНАЧЕ РеестрСчетовФактур.ВалютаДокумента КОНЕЦ КАК ВалютаДокумента,
	|	РеестрСчетовФактур.Контрагент,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(РеестрСчетовФактур.Контрагент.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА РеестрСчетовФактур.Контрагент.Наименование
	|		ИНАЧЕ ПОДСТРОКА(РеестрСчетовФактур.Контрагент.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК КонтрагентНаименование,
	|	РеестрСчетовФактур.ДокументОснование,
	|	РеестрСчетовФактур.ДокументОснованиеДата,
	|	РеестрСчетовФактур.ДокументОснованиеНомер,
	|	РеестрСчетовФактур.ОпределитьПараметрыСчетаФактуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураПолученный.Ссылка КАК СчетФактура,
	|		СчетФактураПолученный.Ссылка.Дата КАК ДатаРегистрации,
	|		СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|		ВЫБОР 
	|			КОГДА СчетФактураПолученный.Ссылка.СформированПриВводеНачальныхОстатковНДС 
	|				ТОГДА СчетФактураПолученный.Ссылка.СуммаДокумента 
	|			КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаАванс) 
	|				ТОГДА СчетФактураПолученный.Ссылка.СуммаДокумента 
	|			ИНАЧЕ СчетФактураПолученный.ДокументОснование.СуммаДокумента 
	|		КОНЕЦ КАК СуммаДокумента,
	|		СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|		СчетФактураПолученный.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|		ВЫБОР
	|			КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаАванс) 
	|				ТОГДА СчетФактураПолученный.Ссылка.Контрагент
	|			КОГДА СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.АвансовыйОтчет
	|				ТОГДА ВложенныйЗапрос.Контрагент
	|			ИНАЧЕ СчетФактураПолученный.ДокументОснование.Контрагент
	|		КОНЕЦ КАК Контрагент,
	|		СчетФактураПолученный.ДокументОснование.ВалютаДокумента КАК ВалютаДокумента,
	|		ВЫБОР
	|			КОГДА НЕ СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаАванс) И СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.АвансовыйОтчет
	|					ИЛИ СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА ИСТИНА
	|			КОГДА НЕ СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаАванс) И (СчетФактураПолученный.ДокументОснование.ДоговорКонтрагента.Владелец ЕСТЬ NULL 
	|					ИЛИ СчетФактураПолученный.ДокументОснование.СуммаДокумента ЕСТЬ NULL) 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОпределитьПараметрыСчетаФактуры,
	|		СчетФактураПолученный.ДокументОснование.Дата КАК ДокументОснованиеДата,
	|		СчетФактураПолученный.ДокументОснование.Номер КАК ДокументОснованиеНомер
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				КонтрагентПоАО.Ссылка КАК АО,
	|				КонтрагентПоАО.СчетФактура КАК СчетФактура,
	|				КонтрагентПоАО.Контрагент КАК Контрагент
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АвансовыйОтчетТовары.СчетФактура КАК СчетФактура,
	|					АвансовыйОтчетТовары.Поставщик КАК Контрагент,
	|					АвансовыйОтчетТовары.Ссылка КАК Ссылка
	|				ИЗ
	|					Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					АвансовыйОтчетПрочее.СчетФактура,
	|					АвансовыйОтчетПрочее.Поставщик,
	|					АвансовыйОтчетПрочее.Ссылка
	|				ИЗ
	|					Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее) КАК КонтрагентПоАО) КАК ВложенныйЗапрос
	|			ПО СчетФактураПолученный.ДокументОснование = ВложенныйЗапрос.АО
	|				И СчетФактураПолученный.Ссылка = ВложенныйЗапрос.СчетФактура
	|	ГДЕ
	|		(НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	|		И СчетФактураПолученный.Ссылка.Дата >= &НачалоПериода
	|		И СчетФактураПолученный.Ссылка.Дата <= &КонецПериода
	|		И СчетФактураПолученный.Ссылка.Организация = &Организация
	|		И (НЕ СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))		
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГТДИмпортТовары.Ссылка,
	|		ГТДИмпортТовары.Ссылка.Дата,
	|		ГТДИмпортТовары.Ссылка,
	|		СУММА(ГТДИмпортТовары.ФактурнаяСтоимость),
	|		NULL,
	|		ГТДИмпортТовары.Ссылка.НомерГТД,
	|		ГТДИмпортТовары.Ссылка.Контрагент,
	|		ГТДИмпортТовары.Ссылка.ВалютаДокумента,
	|		ЛОЖЬ,
	|		ГТДИмпортТовары.Ссылка.Дата,
	|		ГТДИмпортТовары.Ссылка.Номер
	|	ИЗ
	|		Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|	ГДЕ
	|		(НЕ ГТДИмпортТовары.Ссылка.ПометкаУдаления)
	|		И ГТДИмпортТовары.Ссылка.Дата >= &НачалоПериода
	|		И ГТДИмпортТовары.Ссылка.Дата <= &КонецПериода
	|		И ГТДИмпортТовары.Ссылка.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГТДИмпортТовары.Ссылка,
	|		ГТДИмпортТовары.Ссылка.Дата,
	|		ГТДИмпортТовары.Ссылка.НомерГТД,
	|		ГТДИмпортТовары.Ссылка.Контрагент,
	|		ГТДИмпортТовары.Ссылка.Номер,
	|		ГТДИмпортТовары.Ссылка,
	|		ГТДИмпортТовары.Ссылка.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировочныйСчетФактураПолученный.Ссылка,
	|		КорректировочныйСчетФактураПолученный.Ссылка.Дата,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование,
	|		-КорректировочныйСчетФактураПолученный.Ссылка.СуммаУменьшение,
	|		КорректировочныйСчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|		КорректировочныйСчетФактураПолученный.Ссылка.НомерВходящегоДокумента,
	|		КорректировочныйСчетФактураПолученный.Ссылка.Контрагент,
	|		КорректировочныйСчетФактураПолученный.Ссылка.ВалютаДокумента,
	|		ЛОЖЬ,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование.Дата,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование.Номер
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК КорректировочныйСчетФактураПолученный
	|	ГДЕ
	|		(НЕ КорректировочныйСчетФактураПолученный.Ссылка.ПометкаУдаления)
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Дата >= &НачалоПериода
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Дата <= &КонецПериода
	|		И КорректировочныйСчетФактураПолученный.Ссылка.СуммаУменьшение > 0
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Организация = &Организация
	|		И КорректировочныйСчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировочныйСчетФактураПолученный.Ссылка,
	|		КорректировочныйСчетФактураПолученный.Ссылка.Дата,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование,
	|		КорректировочныйСчетФактураПолученный.Ссылка.СуммаУвеличение,
	|		КорректировочныйСчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|		КорректировочныйСчетФактураПолученный.Ссылка.НомерВходящегоДокумента,
	|		КорректировочныйСчетФактураПолученный.Ссылка.Контрагент,
	|		КорректировочныйСчетФактураПолученный.Ссылка.ВалютаДокумента,
	|		ЛОЖЬ,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование.Дата,
	|		КорректировочныйСчетФактураПолученный.ДокументОснование.Номер
	|	ИЗ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК КорректировочныйСчетФактураПолученный
	|	ГДЕ
	|		(НЕ КорректировочныйСчетФактураПолученный.Ссылка.ПометкаУдаления)
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Дата >= &НачалоПериода
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Дата <= &КонецПериода
	|		И (КорректировочныйСчетФактураПолученный.Ссылка.СуммаУвеличение > 0 
	|			ИЛИ КорректировочныйСчетФактураПолученный.Ссылка.СуммаУвеличение = 0 
	|			И КорректировочныйСчетФактураПолученный.Ссылка.СуммаУменьшение = 0)
	|		И КорректировочныйСчетФактураПолученный.Ссылка.Организация = &Организация
	|		И КорректировочныйСчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)) КАК РеестрСчетовФактур
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту
	|				ТОГДА РеестрСчетовФактур.Контрагент В ИЕРАРХИИ (&КонтрагентДляОтбора)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации,
	|	ДатаВходящегоДокумента
	|ИТОГИ
	|	СУММА(СуммаДокумента),
	|	МАКСИМУМ(ОпределитьПараметрыСчетаФактуры)
	|ПО	СчетФактура";
	
	Если НЕ ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме И ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"
			|ИТОГИ
			|	СУММА(СуммаДокумента),
			|	МАКСИМУМ(ОпределитьПараметрыСчетаФактуры)
			|ПО	СчетФактура",
			"
			|ИТОГИ
			|	СУММА(СуммаДокумента),
			|	МАКСИМУМ(ОпределитьПараметрыСчетаФактуры)
			|ПО	Контрагент, СчетФактура");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
		|КонтрагентНаименование, ");
	КонецЕсли; 
	
	Если ПараметрыОтчета.Свойство("КонецПериодаОтчета") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НалоговыйПериод);
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериодаОтчета));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НалоговыйПериод);
		Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(ПараметрыОтчета.НалоговыйПериод));	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ПараметрыОтчета.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме 
		И ПараметрыОтчета.ОтбиратьПоКонтрагенту 
		И НЕ ПараметрыОтчета.КонтрагентДляОтбора = Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", ПараметрыОтчета.КонтрагентДляОтбора);

	Возврат Запрос.Выполнить();

КонецФункции

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямВвозТоваровИзТаможенногоСоюза(Товары, Реквизиты, Движения, Отказ) Экспорт
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		
		Запись = Движения.НДСПоПриобретеннымЦенностям.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты,
			"Период,Организация,НДСВключенВСтоимость");
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы,
			"Номенклатура,Склад,Партия,СчетФактура,СчетУчета,СчетУчетаНДС,СтавкаНДС,ВидЦенности,Количество,Стоимость,НДС");
		Если НЕ БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетУчета) Тогда
			Запись.Склад = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСПоПриобретеннымЦенностям.Записывать = Истина;
	
КонецПроцедуры

// ПЕЧАТНЫЕ ФОРМЫ ПРИ ВВОЗЕ ТОВАРОВ ИЗ ТАМОЖЕННОГО СОЮЗА

Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = Документы.ЗаявлениеОВвозеТоваров.ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = Документы.ЗаявлениеОВвозеТоваров.ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПодготовитьТаблицуРублевыеСуммыПоОтгрузкеВУЕ(ТаблицаРублевыеСуммы, ТаблицаРеквизиты) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.РасчетыВУсловныхЕдиницах
	 Или Не Реквизиты.НДСНачисленПриОтгрузке Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРублевыеСуммыПоОтгрузкеВУЕ(ТаблицаРублевыеСуммы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ИменаКолонок = Новый Структура("СуммаБезНДС,НДС", "СуммаБезНДСРуб", "СуммаНДСРуб");
	УчетНДС.РаспределитьНачисленныйПриОтгрузкеНДСПоТаблице(Параметры.ТаблицаДокумента, Реквизиты, ИменаКолонок);
	ТаблицаРублевыеСуммы = Параметры.ТаблицаДокумента;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРублевыеСуммыПоОтгрузкеВУЕ(ТаблицаДокумента, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Период,"                   // <Дата>
	+ "ДокументОтгрузки,"         // <ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПередачаОС> - документ отгрузки
	+ "РасчетыВУсловныхЕдиницах," // <Булево> - признак договора в условных единицах
	+ "НДСНачисленПриОтгрузке"    // <Булево> - признак начисления НДС в момент отгрузки
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"      // <Строка>
	+ "НомерСтроки,"    // <Число(5, 0)>
	+ "СуммаБезНДСРуб," // <Число(15, 2)>
	+ "СуммаБУ,"        // <Число(15, 2)>
	+ "СуммаНДСРуб"     // <Число(15, 2)>
	;
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Находит неиспользуемые ключи аналитики связанные с помеченными на удаление объектами и устанавливает
// у таких ключей пометку на удаление.
// Ключи считаются свободными если они ссылаются на документ помеченные на удаление и не участвуют в движениях
// регистра накопления НДСРаздельный.
//
Процедура ПометитьНаУдалениеНеиспользуемыеКлючиАналитики() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлючиАналитикиУчетаНДС.Ссылка
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНДС КАК КлючиАналитикиУчетаНДС";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПоиска = Новый Массив;
	ТипыРегистраторов = Метаданные.РегистрыНакопления.НДСРаздельныйУчет.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		ДокументСсылка = Новый(ТипРегистратора);
		ОбластьПоиска.Добавить(ДокументСсылка.Метаданные().ПолноеИмя());
	КонецЦикла;
	ДокументыСКлючамиАналитики = НайтиПомеченныеНаУдаление(Новый Массив, ОбластьПоиска);
	
	Если ДокументыСКлючамиАналитики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыСКлючамиАналитики", ДокументыСКлючамиАналитики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючиАналитикиУчетаНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КлючиАналитикиНДС
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНДС КАК КлючиАналитикиУчетаНДС
	|ГДЕ
	|	КлючиАналитикиУчетаНДС.СчетФактура В(&ДокументыСКлючамиАналитики)
	|	И НЕ КлючиАналитикиУчетаНДС.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаЗатрат.Ссылка
	|ПОМЕСТИТЬ КлючиАналитикиУчетЗатрат
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаЗатрат КАК КлючиАналитикиУчетаЗатрат
	|ГДЕ
	|	КлючиАналитикиУчетаЗатрат.Субконто1 В(&ДокументыСКлючамиАналитики)
	|	И НЕ КлючиАналитикиУчетаЗатрат.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаЗатрат.Ссылка
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаЗатрат КАК КлючиАналитикиУчетаЗатрат
	|ГДЕ
	|	КлючиАналитикиУчетаЗатрат.Субконто2 В(&ДокументыСКлючамиАналитики)
	|	И НЕ КлючиАналитикиУчетаЗатрат.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаЗатрат.Ссылка
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаЗатрат КАК КлючиАналитикиУчетаЗатрат
	|ГДЕ
	|	КлючиАналитикиУчетаЗатрат.Субконто3 В(&ДокументыСКлючамиАналитики)
	|	И НЕ КлючиАналитикиУчетаЗатрат.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиНДС.Ссылка КАК Ссылка,
	|	НДСРаздельныйУчет.Партия КАК Партия
	|ПОМЕСТИТЬ НеиспользуемыеКлючиАналитикиНДС
	|ИЗ
	|	КлючиАналитикиНДС КАК КлючиАналитикиНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ПО КлючиАналитикиНДС.Ссылка = НДСРаздельныйУчет.АналитикаУчетаНДС
	|ГДЕ
	|	НДСРаздельныйУчет.Партия ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетЗатрат.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НеиспользуемыеКлючиАналитикиУчетЗатрат
	|ИЗ
	|	КлючиАналитикиУчетЗатрат КАК КлючиАналитикиУчетЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ПО КлючиАналитикиУчетЗатрат.Ссылка = НДСРаздельныйУчет.АналитикаУчетаЗатрат
	|ГДЕ
	|	НДСРаздельныйУчет.Партия ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеиспользуемыеКлючиАналитикиНДС.Ссылка
	|ИЗ
	|	НеиспользуемыеКлючиАналитикиНДС КАК НеиспользуемыеКлючиАналитикиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НеиспользуемыеКлючиАналитикиУчетЗатрат.Ссылка
	|ИЗ
	|	НеиспользуемыеКлючиАналитикиУчетЗатрат КАК НеиспользуемыеКлючиАналитикиУчетЗатрат";
	
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		КлючАналитики = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		КлючАналитики.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЕстьНепроведеныеОснованияСчетаФактуры(ТаблицаОснований, ТекущееОснование) Экспорт
	
	ДокументыОснования = ТаблицаОснований.ВыгрузитьКолонку("ДокументОснование");
	Индекс = ДокументыОснования.Найти(ТекущееОснование);
	Если Индекс <> Неопределено Тогда
		ДокументыОснования.Удалить(Индекс);
	КонецЕсли;
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналОпераций.Ссылка КАК Ссылка
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	ЖурналОпераций.Ссылка В(&ДокументыОснования)
	|	И НЕ ЖурналОпераций.Проведен";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция УстановитьУправляемуюБлокировку(ИмяДокументаСчетаФактуры, ПодчиненныеСчетаФактуры) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки                = Блокировка.Добавить("Документ." + ИмяДокументаСчетаФактуры);
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПодчиненныеСчетаФактуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Попытка
		
		Блокировка.Заблокировать();
		Отказ = Ложь;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось заблокировать документы
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы[ИмяДокументаСчетаФактуры],
			,
			ТекстСообщения);

		Отказ = Истина;

	КонецПопытки;
	
	Возврат Не Отказ;
	
КонецФункции

Функция ПечатьСводныхСправок(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСводнымСправкам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СводнаяСправка";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СводнаяСправка");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст	= ТекстЗапросаПоСводнымСправкам;
	Результаты		= Запрос.ВыполнитьПакет();
	
	ПервыйДокумент = Истина;
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ПараметрыОснования = ПодготовитьДанныеДляПечатиСводныхСправок(ВыборкаСФ.СчетФактура);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		Иначе
			Реквизиты = ПараметрыОснования.Реквизиты[0];
		КонецЕсли;
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		Если ТаблицаДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Вывод шапки
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = ПодготовитьДанныеШапкиСчетаФактуры(ВыборкаСФ, Реквизиты, "");
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывод заголовка таблицы
		
		Если Реквизиты.Дата >= '20190101' 
			И Макет.Области.Найти("ЗаголовокТаблицы2019") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы2019");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывод табличной части
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			ОбластьМакета.Параметры.ПредставлениеДокумента = СтрШаблон(НСтр("ru='%1 %2 от %3'"),
																	СтрокаДокумента.НазваниеДокумента,
																	СтрокаДокумента.НомерДокумента,
																	Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоВсего         = ТаблицаДокумента.Итог("Всего");
		ОбластьМакета.Параметры.ИтогоСуммаНДС18    = ТаблицаДокумента.Итог("СуммаНДС18");
		ОбластьМакета.Параметры.ИтогоСуммаБезНДС18 = ТаблицаДокумента.Итог("СуммаБезНДС18");
		ОбластьМакета.Параметры.ИтогоСуммаНДС10    = ТаблицаДокумента.Итог("СуммаНДС10");
		ОбластьМакета.Параметры.ИтогоСуммаБезНДС10 = ТаблицаДокумента.Итог("СуммаБезНДС10");
		ОбластьМакета.Параметры.ИтогоСуммаБезНДС   = ТаблицаДокумента.Итог("СуммаБезНДС");
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);
			
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьКорректировочныхСправок(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоКорректировочнымСправкам, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа         = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочнаяСправка";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочнаяСправка");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст	= ТекстЗапросаПоКорректировочнымСправкам;
	Результаты		= Запрос.ВыполнитьПакет();
	
	ПервыйДокумент = Истина;
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ПараметрыОснования = ПодготовитьДанныеДляПечатиКорректировочныхСправок(ВыборкаСФ.СчетФактура);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		Иначе
			Реквизиты = ПараметрыОснования.Реквизиты[0];
		КонецЕсли;
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		Если ТаблицаДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Вывод шапки
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ДанныеШапки   = ПодготовитьДанныеШапкиСчетаФактуры(ВыборкаСФ, Реквизиты, "");
		ОбластьМакета.Параметры.Заполнить(Реквизиты);
		ОбластьМакета.Параметры.ДатаИсходного = Формат(Реквизиты.ДатаИсходного, "ДФ='дд ММММ гггг'") + " г.";
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывод заголовка таблицы
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывод табличной части
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
			ОбластьМакета.Параметры.ПредставлениеДокумента = СтрШаблон(НСтр("ru='%1 %2 от %3'"),
																	СтрокаДокумента.НазваниеДокумента,
																	СтрокаДокумента.НомерДокумента,
																	Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывод итоговых сумм

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСуммаДокумента    = ТаблицаДокумента.Итог("СуммаДокумента");
		ОбластьМакета.Параметры.ИтогоСуммаНДСДокумента = ТаблицаДокумента.Итог("СуммаНДСДокумента");
		ПроставитьПрочеркиВПустыеПоляСчетаФактуры(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывод подвала

		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабДокумент, ВыборкаСФ, ОбъектыПечати, ПараметрыПечати);
			
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПодготовитьДанныеДляПечатиСводныхСправок(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПоставщика,
	|	"""" КАК Покупатель,
	|	НЕОПРЕДЕЛЕНО КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК ЕстьТовары
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Ссылка,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК Всего,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|					ИЛИ НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ""Приходный кассовый ордер""
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ""Отчет комиссионера (агента) о продажах""
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ОплатаПлатежнойКартой
	|			ТОГДА ""Оплата по платежной карте""
	|		ИНАЧЕ ""Отчет о розничных продажах""
	|	КОНЕЦ КАК НазваниеДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК Дата,
	|	ДокументыОснования.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = ДанныеПервичныхДокументов.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОснования КАК ДокументыОснования
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = ДокументыОснования.ДокументОснование
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА ВЫБОР
	|						КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ""Приходный кассовый ордер""
	|		ИНАЧЕ ""Отчет о розничных продажах""
	|	КОНЕЦ,
	|	ДокументыОснования.НомерСтроки,
	|	ДанныеПервичныхДокументов.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	НомерСтроки,
	|	Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("Реквизиты",        Результат[0].Выгрузить());
	НомераТаблиц.Вставить("ТаблицаДокумента", Результат[2].Выгрузить());
	
	Возврат НомераТаблиц;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиКорректировочныхСправок(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПоставщика,
	|	"""" КАК Покупатель,
	|	НЕОПРЕДЕЛЕНО КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	Реквизиты.НомерИсходногоДокумента КАК НомерИсходного,
	|	Реквизиты.ДатаИсходногоДокумента КАК ДатаИсходного
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.КорректировочнаяСправка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ОснованияИсходнойСправки
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = ОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &ИсходнаяСправка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = ОтчетКомиссионераОПродажах.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &ИсходнаяСправка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВозвратыПоОРП
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Сделка В
	|			(ВЫБРАТЬ
	|				ОснованияИсходнойСправки.ДокументОснование
	|			ИЗ
	|				ОснованияИсходнойСправки)
	|	И ВозвратТоваровОтПокупателя.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОснованияИсходнойСправки.ДокументОснование КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	ОснованияИсходнойСправки КАК ОснованияИсходнойСправки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратыПоОРП.Ссылка
	|ИЗ
	|	ВозвратыПоОРП КАК ВозвратыПоОРП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.Регистратор КАК Ссылка,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	СУММА(НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС) КАК СуммаДокумента,
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК СуммаНДСДокумента,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ""Отчет о розничных продажах""
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ""Отчет комиссионера (агента) о продажах""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК НазваниеДокумента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО НДСЗаписиКнигиПокупок.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Регистратор В(&ДокументыОснования)
	|	И НДСЗаписиКнигиПокупок.СчетФактура В
	|			(ВЫБРАТЬ
	|				СчетаФактуры.СчетФактура
	|			ИЗ
	|				СчетаФактуры)
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ""Отчет о розничных продажах""
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ""Отчет комиссионера (агента) о продажах""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ";
	
	МассивДокументовОснований = Ссылка.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	ДокументыОснования = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДокументовОснований, Истина);
	
	Запрос.УстановитьПараметр("Ссылка",             Ссылка);
	Запрос.УстановитьПараметр("ИсходнаяСправка",    Ссылка.ИсправляемыйСчетФактура);
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Ссылка.Дата));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(Ссылка.Дата));
	
	Результат = Запрос.ВыполнитьПакет();
	
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("Реквизиты",        Результат[0].Выгрузить());
	НомераТаблиц.Вставить("ТаблицаДокумента", Результат[4].Выгрузить());
	
	Возврат НомераТаблиц;
	
КонецФункции

// Записывает количество операций по реализации металлолома в ПРОФ-версии программы.
//
Процедура СобратьСтатистикуПоОперациямПродажиМеталлолома() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Активность
	|	И НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НалогИсчисляетПокупатель)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС > 0
	|	И НДСЗаписиКнигиПродаж.Период >= ДАТАВРЕМЯ(2018, 1, 1)
	|	И НДСЗаписиКнигиПродаж.Период <= ДАТАВРЕМЯ(2018, 3, 31)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"РегистрНакопления.НДСЗаписиКнигиПродаж.ОперацииМеталлолом", Выборка.Количество);
	
КонецПроцедуры

#КонецОбласти 