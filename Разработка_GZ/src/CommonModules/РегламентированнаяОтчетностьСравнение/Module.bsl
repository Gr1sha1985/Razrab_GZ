////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для проведения сравнения данных
// регламентированных отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет сравнение показателей переданной формы регламентированного отчета с показателями выбранного отчета,
// результат передается в форму для представления результата сравнения.
//
// Параметры:
//  ФормаОтчета        - Форма клиентского приложения - Форма регламентированного отчета.
//  ПараметрыОтчета    - Структура                    - Параметры отчета из формы, соответствующие схеме выгрузки.
//  ДанныеДляСравнения - Структура                    - Данные, необходимые для процедуры сравнения в фоновом задании.
//  ДеревоДляСравнения - Дерево значений              - Текущая схема выгрузки формы отчета в виде дерева значений.
//
// Возвращаемое значение:
//   Булево  - Истина, если сравнение показателей отчетов прошло успешно.
//
Функция СравнениеОтчетов(ФормаОтчета, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения) Экспорт
	
	Перем НастройкиСравнения;
	Перем ТекстыПравилСравнения; // тип - соответствие (ключ - имя области, значение - текст обработчика)
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ФормаОтчета, "мДанныеОтчета") Тогда
		ФормаОтчета.мДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	СообщениеОбОшибке = Новый Структура("Способ,ТекстСообщения", "СообщениеПоУмолчанию", "");
	ДанныеДляСравнения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	ДокументОтчетаЛевый = ФормаОтчета.СтруктураРеквизитовФормы.мСохраненныйДок;
	ПредставлениеДокументаРеглОтч = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДокументОтчетаЛевый);
	
	ДанныеДляСравнения.Вставить("ДокументОтчетаЛевый", ДокументОтчетаЛевый);
	ДанныеДляСравнения.Вставить("ДокументОтчетаЛевыйПредставление", ПредставлениеДокументаРеглОтч);
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ФормаОтчета, "мДанныеОтчета") Тогда
		СообщениеОбОшибке.Способ = "Предупреждение";
		СообщениеОбОшибке.ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Возможность сравнения для отчета ""%1"" за выбранный период не поддерживается.'"),
			ПредставлениеДокументаРеглОтч);
		Возврат Ложь;
	КонецЕсли;
	
	РазрешитьСравнение = Неопределено;
	ПравилаСравнения = РегламентированнаяОтчетностьВызовСервера.ПравилаСравненияДляФормы(ФормаОтчета.ИмяФормы, НастройкиСравнения);
	Если ТипЗнч(НастройкиСравнения) <> Тип("Структура")
		ИЛИ НЕ НастройкиСравнения.Свойство("РазрешитьСравнение", РазрешитьСравнение) ИЛИ РазрешитьСравнение <> Истина Тогда
		СообщениеОбОшибке.Способ = "Предупреждение";
		СообщениеОбОшибке.ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Возможность сравнения для отчета ""%1"" за выбранный период не поддерживается.'"),
			ПредставлениеДокументаРеглОтч);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстыПравилСравнения = СодержимоеОбластейПравилСравнения(ПравилаСравнения, НастройкиСравнения);
	
	Если ТипЗнч(ДеревоДляСравнения) <> Тип("ДеревоЗначений") И ТипЗнч(ДеревоДляСравнения) <> Тип("Структура") Тогда
		СообщениеОбОшибке.Способ = "Предупреждение";
		СообщениеОбОшибке.ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Возможность сравнения для отчета ""%1"" не реализована.'"),
			ПредставлениеДокументаРеглОтч);
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстФормыОтчета = Новый Структура("РазделыОтчета");
	ЗаполнитьЗначенияСвойств(КонтекстФормыОтчета, ФормаОтчета);
	Если КонтекстФормыОтчета.РазделыОтчета <> Неопределено Тогда
		КонтекстФормыОтчета.РазделыОтчета = ФормаОтчета.РеквизитФормыВЗначение("РазделыОтчета", Тип("ДеревоЗначений"));
	Иначе
		КонтекстФормыОтчета.РазделыОтчета = РазделыОтчетаПоУмолчанию(ФормаОтчета);
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ДеревоДляСравнения",    ДеревоДляСравнения);
	ПараметрыВыполнения.Вставить("ПараметрыОтчета",       ПараметрыОтчета);
	ПараметрыВыполнения.Вставить("ТекстыПравилСравнения", ТекстыПравилСравнения);
	ПараметрыВыполнения.Вставить("КонтекстФормыОтчета",   КонтекстФормыОтчета);
	ПараметрыВыполнения.Вставить("ДанныеДляСравнения",    ДанныеДляСравнения);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ФормаОтчета.УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Сравнение регламентированных отчетов'");
	ПараметрыЗапуска.ДополнительныйРезультат = Истина;
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	
	ИмяПроцедуры = "РегламентированнаяОтчетностьСравнение.СравнениеОтчетовДлительнаяОперация";
	РезультатДлительнойОперации = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
	ДанныеДляСравнения.Вставить("РезультатДлительнойОперации", РезультатДлительнойОперации);
	
	Возврат Истина;
	
КонецФункции

// Выполняется в фоновом задании.
Процедура СравнениеОтчетовДлительнаяОперация(ПараметрыПроцедуры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	ДеревоДляСравнения    = ПараметрыПроцедуры.ДеревоДляСравнения;
	ПараметрыОтчета       = ПараметрыПроцедуры.ПараметрыОтчета;
	ТекстыПравилСравнения = ПараметрыПроцедуры.ТекстыПравилСравнения;
	КонтекстФормыОтчета   = ПараметрыПроцедуры.КонтекстФормыОтчета;
	ДанныеДляСравнения    = ПараметрыПроцедуры.ДанныеДляСравнения;
	
	СтраницыРезультатовСравнения = Новый ТаблицаЗначений;
	СтраницыРезультатовСравнения.Колонки.Добавить("КодСтраницы",    Новый ОписаниеТипов("Строка"));
	СтраницыРезультатовСравнения.Колонки.Добавить("ИмяРаздела",     Новый ОписаниеТипов("Строка"));
	СтраницыРезультатовСравнения.Колонки.Добавить("ТабДокВсе",      Новый ОписаниеТипов("ТабличныйДокумент"));
	СтраницыРезультатовСравнения.Колонки.Добавить("ТабДокРазличия", Новый ОписаниеТипов("ТабличныйДокумент"));
	
	КонтекстФормыОтчета.Вставить("СтраницыРезультатовСравнения", СтраницыРезультатовСравнения);
	
	Попытка
		// Выполняем обработчик перед сравнением отчетов (можно модифицировать дерево выгрузки).
		ПараметрыОбработчика = Новый Структура("ДеревоДляСравнения,ПараметрыОтчета", ДеревоДляСравнения, ПараметрыОтчета);
		ВыполнитьАлгоритмВБезопасномРежиме(ТекстОбработчикаПоИмени(ТекстыПравилСравнения, "ПередСравнением"), ПараметрыОбработчика);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось обработать схему выгрузки отчета! %1'"), ОписаниеОшибки));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Сравнение данных регламентированных отчетов'"),
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
			
		ПоместитьВоВременноеХранилище(Ложь, АдресРезультата);
		
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru='
		|Сравниваются данные отчетов'");
	ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения);
	
	Попытка
		СравнитьДанныеДвухОтчетов(ДанныеДляСравнения, ДеревоДляСравнения, ПараметрыОтчета, КонтекстФормыОтчета);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось сравнить данные отчетов! %1'"), ОписаниеОшибки));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Сравнение данных регламентированных отчетов'"),
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		ПоместитьВоВременноеХранилище(Ложь, АдресРезультата);
		
		Возврат;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Истина, АдресРезультата);
	
	ПоместитьВоВременноеХранилище(КонтекстФормыОтчета, АдресДополнительногоРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СравнитьДанныеДвухОтчетов(ДанныеДляСравнения, ДеревоДляСравнения, ПараметрыОтчета, КонтекстФормыОтчета)
	
	СтраницыРезультатовСравнения = КонтекстФормыОтчета.СтраницыРезультатовСравнения;
	
	ДеревоРазделовОтчета = КонтекстФормыОтчета.РазделыОтчета;
	ОбработатьДеревоРазделовОтчета(ДеревоРазделовОтчета, ПараметрыОтчета);
	
	ДанныеДокументОтчетаЛевый  = ПолучитьДанныеСохраненногоДокумента(ДанныеДляСравнения.ДокументОтчетаЛевый);
	ДанныеДокументОтчетаПравый = ПолучитьДанныеСохраненногоДокумента(ДанныеДляСравнения.ДокументОтчетаПравый);
	
	ТабДокМакет = ПолучитьОбщийМакет("РезультатСравненияОтчетов");
	
	Префикс = "ПолеТабличногоДокумента";
	
	// Сравнение данных уникальных разделов.
	ДанныеУникальныхРазделовЛевый  = ДанныеДокументОтчетаЛевый.ПоказателиОтчета;
	ДанныеУникальныхРазделовПравый = ДанныеДокументОтчетаПравый.ПоказателиОтчета;
	Если ТипЗнч(ДанныеУникальныхРазделовЛевый) = Тип("Структура")
	  И ТипЗнч(ДанныеУникальныхРазделовПравый) = Тип("Структура") Тогда
		Для Каждого ДанныеРаздела Из ДанныеУникальныхРазделовЛевый Цикл
			
			СтраницаРазделаЛевый = ДанныеРаздела.Значение;
			
			СтраницаРазделаПравый = Неопределено;
			ДанныеУникальныхРазделовПравый.Свойство(ДанныеРаздела.Ключ, СтраницаРазделаПравый);
			
			ИмяРаздела = СтрЗаменить(ДанныеРаздела.Ключ, Префикс, "");
			
			ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(
				Новый Структура("КолонкаРазделыОтчетаСокрНаим", ИмяРаздела), Истина);
			Если НЕ ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
				ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(
					Новый Структура("КолонкаРазделыОтчетаСокрНаим", ДанныеРаздела.Ключ), Истина);
				Для Каждого СтрокаРаздел Из ОтобранныеСтроки Цикл
					СтрокаРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
				КонецЦикла;
			КонецЕсли;
			ОписаниеСтраницы    = ИмяРаздела;
			РазделМногострочный = Ложь;
			Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
				ОписаниеСтраницы = ОтобранныеСтроки[0].КолонкаРазделыОтчета;
			КонецЕсли;
			
			СтраницаРезультата = СтраницыРезультатовСравнения.Добавить();
			СтраницаРезультата.ИмяРаздела = ИмяРаздела;
			
			ВывестиСекциюЗаголовок(ТабДокМакет, СтраницаРезультата, ОписаниеСтраницы);
			
			ЕстьРазличия = ВыводРезультатаСравненияДвухСтраниц(
				ТабДокМакет, СтраницаРезультата, ИмяРаздела,
				СтраницаРазделаЛевый, СтраницаРазделаПравый,
				ДанныеДокументОтчетаЛевый, ДанныеДокументОтчетаПравый,
				ДеревоДляСравнения, ПараметрыОтчета, ,РазделМногострочный);
			
			Если ЕстьРазличия Тогда
				Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
					СтрокаДерева.ЕстьРазличия = ЕстьРазличия;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сравнение данных многостраничных разделов.
	ДанныеМногостраничныхРазделовЛевый  = ДанныеДокументОтчетаЛевый.ДанныеМногостраничныхРазделов;
	ДанныеМногостраничныхРазделовПравый = ДанныеДокументОтчетаПравый.ДанныеМногостраничныхРазделов;
	
	Если ТипЗнч(ДанныеМногостраничныхРазделовЛевый) = Тип("Структура")
	  И ТипЗнч(ДанныеМногостраничныхРазделовПравый) = Тип("Структура") Тогда
		Для Каждого ДанныеРаздела Из ДанныеМногостраничныхРазделовЛевый Цикл
			
			СтраницыРазделаЛевый = ДанныеРаздела.Значение;
			
			СтраницыРазделаПравый = Неопределено;
			ДанныеМногостраничныхРазделовПравый.Свойство(ДанныеРаздела.Ключ, СтраницыРазделаПравый);
			
			ИмяРаздела = СтрЗаменить(ДанныеРаздела.Ключ, Префикс, "");
			
			ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(
				Новый Структура("КолонкаРазделыОтчетаСокрНаим", ИмяРаздела));
				
			ОписаниеСтраницы = ИмяРаздела;
			РазделМногострочный = Ложь;
			Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
				ОписаниеСтраницы = ОтобранныеСтроки[0].КолонкаРазделыОтчета;
			КонецЕсли;
			
			Если ТипЗнч(СтраницыРазделаЛевый) <> Тип("ТаблицаЗначений") ИЛИ СтраницыРазделаЛевый.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'В данных документа отчета (первого) не найден многостраничный раздел ""%1"".'"), ИмяРаздела));
				Возврат;
			КонецЕсли;
			Если ТипЗнч(СтраницыРазделаПравый) <> Тип("ТаблицаЗначений") ИЛИ СтраницыРазделаПравый.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'В данных документа отчета (второго) не найден многостраничный раздел ""%1"".'"), ИмяРаздела));
				Возврат;
			КонецЕсли;
			
			ЕстьРазличия = Ложь;
			
			СтатусСтраницы = 0;
			КоличествоСтраницЛевый  = СтраницыРазделаЛевый.Количество();
			КоличествоСтраницПравый = СтраницыРазделаПравый.Количество();
			Для НомерСтраницы = 1 По Макс(КоличествоСтраницЛевый, КоличествоСтраницПравый) Цикл
				
				Если НомерСтраницы > КоличествоСтраницЛевый Тогда
					СтраницаРазделаЛевый = Новый Структура;
					СтатусСтраницы = 1; // страница отсутствует в левом отчете (существует в правом)
				Иначе
					СтраницаРазделаЛевый = СтраницыРазделаЛевый[НомерСтраницы - 1].Данные;
				КонецЕсли;
				Если НомерСтраницы > КоличествоСтраницПравый Тогда
					СтраницаРазделаПравый = Новый Структура;
					СтатусСтраницы = 2; // страница отсутствует в правом отчете (существует в левом)
				Иначе
					СтраницаРазделаПравый = СтраницыРазделаПравый[НомерСтраницы - 1].Данные;
				КонецЕсли;
				
				СтраницаРезультата = СтраницыРезультатовСравнения.Добавить();
				СтраницаРезультата.ИмяРаздела  = ИмяРаздела;
				СтраницаРезультата.КодСтраницы = Формат(НомерСтраницы, "ЧГ=");
				
				ВывестиСекциюЗаголовок(ТабДокМакет, СтраницаРезультата, ОписаниеСтраницы + ", " +
					СтрШаблон(НСтр("ru = 'стр. %1'"), СтраницаРезультата.КодСтраницы));
					
				ЕстьРазличияНаСтранице = ВыводРезультатаСравненияДвухСтраниц(
						ТабДокМакет, СтраницаРезультата, ИмяРаздела,
						СтраницаРазделаЛевый, СтраницаРазделаПравый,
						ДанныеДокументОтчетаЛевый, ДанныеДокументОтчетаПравый,
						ДеревоДляСравнения, ПараметрыОтчета,
						НомерСтраницы, РазделМногострочный);
				
				Если ЕстьРазличияНаСтранице Тогда
					ЕстьРазличия = Истина;
				КонецЕсли;
				
				УстановитьСтатусСтраницы(ОтобранныеСтроки, СтатусСтраницы, НомерСтраницы, ЕстьРазличияНаСтранице);
				
				ОбластьПерваяКолонкаВсе      = СтраницаРезультата.ТабДокВсе.Область(, 1, , 1);
				ОбластьПерваяКолонкаРазличия = СтраницаРезультата.ТабДокРазличия.Область(, 1, , 1);
				Если СтатусСтраницы > 0 Тогда
					Если СтатусСтраницы = 1 Тогда
						ЦветФона = Новый Цвет(255, 204, 153);
					ИначеЕсли СтатусСтраницы = 2 Тогда
						ЦветФона = Новый Цвет(204, 255, 204);
					Иначе
						Продолжить;
					КонецЕсли;
					ОбластьПерваяКолонкаВсе.ЦветФона = ЦветФона;
					ОбластьПерваяКолонкаРазличия.ЦветФона = ЦветФона;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьРазличия Тогда
				Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
					СтрокаДерева.ЕстьРазличия = ЕстьРазличия;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сравнение данных многоуровневых разделов.
	ДанныеМногоуровневыхРазделовЛевый  = ДанныеДокументОтчетаЛевый.ДанныеМногоуровневыхРазделов;
	ДанныеМногоуровневыхРазделовПравый = ДанныеДокументОтчетаПравый.ДанныеМногоуровневыхРазделов;
	
	Если ТипЗнч(ДанныеМногоуровневыхРазделовЛевый) = Тип("Структура")
	  И ТипЗнч(ДанныеМногоуровневыхРазделовПравый) = Тип("Структура") Тогда
		Для Каждого ДанныеРаздела Из ДанныеМногоуровневыхРазделовЛевый Цикл
			
			СтраницыРазделаЛевый = ДанныеРаздела.Значение;
			
			СтраницыРазделаПравый = Неопределено;
			ДанныеМногоуровневыхРазделовПравый.Свойство(ДанныеРаздела.Ключ, СтраницыРазделаПравый);
			
			ИмяРаздела = СтрЗаменить(ДанныеРаздела.Ключ, Префикс, "");
			
			ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(
				Новый Структура("КолонкаРазделыОтчетаСокрНаим", ИмяРаздела));
				
			ОписаниеСтраницы = ИмяРаздела;
			РазделМногострочный = Ложь;
			Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
				ОписаниеСтраницы = ОтобранныеСтроки[0].КолонкаРазделыОтчета;
			КонецЕсли;
			
			Если ТипЗнч(СтраницыРазделаЛевый) <> Тип("ДеревоЗначений") ИЛИ СтраницыРазделаЛевый.Строки.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'В данных документа отчета (первого) не найден многоуровневый раздел ""%1"".'"), ИмяРаздела));
				Возврат;
			КонецЕсли;
			Если ТипЗнч(СтраницыРазделаПравый) <> Тип("ДеревоЗначений") ИЛИ СтраницыРазделаПравый.Строки.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'В данных документа отчета (второго) не найден многоуровневый раздел ""%1"".'"), ИмяРаздела));
				Возврат;
			КонецЕсли;
			
			ЕстьРазличия = Ложь;
			
			ТаблицаДанныхМУР = ТаблицаДанныхМногоуровневыхРазделов(СтраницыРазделаЛевый, СтраницыРазделаПравый);
			
			Для Каждого СтрокаДанныхМУР Из ТаблицаДанныхМУР Цикл
				
				КодСтраницы = СтрокаДанныхМУР.КодСтраницы;
				
				НомерСтраницы  = СтрокаДанныхМУР.АдресСтраницы;
				СтатусСтраницы = СтрокаДанныхМУР.СтатусСтраницы;
				
				СтраницаРазделаЛевый  = СтрокаДанныхМУР.ДанныеРазделаЛевый;
				СтраницаРазделаПравый = СтрокаДанныхМУР.ДанныеРазделаПравый;
				
				СтраницаРезультата = СтраницыРезультатовСравнения.Добавить();
				СтраницаРезультата.ИмяРаздела  = ИмяРаздела;
				СтраницаРезультата.КодСтраницы = КодСтраницы;
				
				ВывестиСекциюЗаголовок(ТабДокМакет, СтраницаРезультата, ОписаниеСтраницы + ", " +
					СтрШаблон(НСтр("ru = 'стр. %1'"), СтрЗаменить(КодСтраницы, "_", "/")));
					
				ЕстьРазличияНаСтранице = ВыводРезультатаСравненияДвухСтраниц(
						ТабДокМакет, СтраницаРезультата, ИмяРаздела,
						СтраницаРазделаЛевый, СтраницаРазделаПравый,
						ДанныеДокументОтчетаЛевый, ДанныеДокументОтчетаПравый,
						ДеревоДляСравнения, ПараметрыОтчета,
						НомерСтраницы, РазделМногострочный);
				
				Если ЕстьРазличияНаСтранице Тогда
					ЕстьРазличия = Истина;
				КонецЕсли;
				
				УстановитьСтатусСтраницы(ОтобранныеСтроки, СтатусСтраницы, НомерСтраницы, ЕстьРазличияНаСтранице);
				
				ОбластьПерваяКолонкаВсе      = СтраницаРезультата.ТабДокВсе.Область(, 1, , 1);
				ОбластьПерваяКолонкаРазличия = СтраницаРезультата.ТабДокРазличия.Область(, 1, , 1);
				Если СтатусСтраницы > 0 Тогда
					Если СтатусСтраницы = 1 Тогда
						ЦветФона = Новый Цвет(255, 204, 153);
					ИначеЕсли СтатусСтраницы = 2 Тогда
						ЦветФона = Новый Цвет(204, 255, 204);
					Иначе
						Продолжить;
					КонецЕсли;
					ОбластьПерваяКолонкаВсе.ЦветФона = ЦветФона;
					ОбластьПерваяКолонкаРазличия.ЦветФона = ЦветФона;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьРазличия Тогда
				Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
					СтрокаДерева.ЕстьРазличия = ЕстьРазличия;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДеревоРазделовОтчета(ДеревоРазделовОтчета, ПараметрыОтчета)
	
	ЭтоДекларацияНДС = Ложь;
	
	КНД = "";
	Если ПараметрыОтчета.Свойство("КНД", КНД) Тогда
		Если КНД = "1151001" Тогда
			ЭтоДекларацияНДС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "РазделМногостраничный");
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "РазделМногострочный");
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "КодСтраницы",    Новый ОписаниеТипов("Строка"));
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "СтатусСтраницы", Новый ОписаниеТипов("Число"));
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделовОтчета, "ЕстьРазличия");
	
	ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(Новый Структура("ЕстьРазличия", Ложь), Истина);
	Если ЭтоДекларацияНДС Тогда // для декларации по НДС выводим только первые 7 разделов
		УдаляемыеСтроки = Новый Массив;
		Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
			Если СтрокаДерева.Родитель = Неопределено Тогда
				СтрНомерРаздела = СтрРазделить(СтрЗаменить(СтрокаДерева.КолонкаРазделыОтчетаСокрНаим, "Раздел", ""), "_")[0];
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрНомерРаздела) И Число(" " + СтрНомерРаздела) > 7 Тогда
					УдаляемыеСтроки.Добавить(СтрокаДерева);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ДеревоРазделовОтчета.Строки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОтобранныеСтроки = ДеревоРазделовОтчета.Строки.НайтиСтроки(Новый Структура("ЕстьРазличия", Ложь), Истина);
	Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
		КодСтраницы = "" + Формат(СтрокаДерева.КолонкаНомерСтраницыРазделаОтчета, "ЧГ=");
		РодительЭлемента = СтрокаДерева.Родитель;
		Пока РодительЭлемента <> Неопределено И РодительЭлемента.Уровень() > 0 Цикл
			СтрНомерСтраницы = Формат(РодительЭлемента.КолонкаНомерСтраницыРазделаОтчета, "ЧГ=");
			КодСтраницы = ?(ПустаяСтрока(СтрНомерСтраницы), "", СтрНомерСтраницы + "_") + КодСтраницы;
			РодительЭлемента = РодительЭлемента.Родитель;
		КонецЦикла;
		СтрокаДерева.КодСтраницы = КодСтраницы;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ОтобранныеСтроки Цикл
		Если ПустаяСтрока(СтрокаДерева.КодСтраницы) Тогда
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				СтрокаДерева.КодСтраницы = СтрокаДерева.Строки[0].КодСтраницы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусСтраницы(ОтобранныеСтроки, СтатусСтраницы, НомерСтраницы, ЕстьРазличия)
	
	Если НомерСтраницы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодСтраницы = "";
	
	Если ТипЗнч(НомерСтраницы) = Тип("Число") Тогда
		КодСтраницы = Формат(НомерСтраницы, "ЧГ=");
	ИначеЕсли ТипЗнч(НомерСтраницы) = Тип("Массив") Тогда
		Для Каждого ЭлементНомераСтраницы Из НомерСтраницы Цикл
			КодСтраницы = КодСтраницы + ?(ЗначениеЗаполнено(КодСтраницы), "_", "") + Формат(ЭлементНомераСтраницы, "ЧГ=");
		КонецЦикла;
	Иначе
		КодСтраницы = СокрЛП(НомерСтраницы);
	КонецЕсли;
	
	Для Каждого ЭлементПервогоУровня Из ОтобранныеСтроки Цикл
		
		Если ЭлементПервогоУровня.Строки.Количество() = 0 Тогда
			Если ПустаяСтрока(ЭлементПервогоУровня.КодСтраницы) Тогда
				ЭлементПервогоУровня.КодСтраницы = "1";
			КонецЕсли;
			ЭлементПервогоУровня.СтатусСтраницы = СтатусСтраницы;
			ЭлементПервогоУровня.ЕстьРазличия   = ЕстьРазличия;
			Продолжить;
		КонецЕсли;
		
		СтрокаНайдена = Ложь;
		
		ПодчиненныеЭлементы = ЭлементПервогоУровня.Строки.НайтиСтроки(Новый Структура("КодСтраницы", КодСтраницы), Истина);
		
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
			ПодчиненныйЭлемент.СтатусСтраницы = СтатусСтраницы;
			ПодчиненныйЭлемент.ЕстьРазличия   = ЕстьРазличия;
			СтрокаНайдена = Истина;
			
			Если ПодчиненныйЭлемент.Родитель <> Неопределено Тогда
				Если ПодчиненныйЭлемент.Родитель.СтатусСтраницы = 3 Тогда
					Если ПодчиненныйЭлемент.Родитель.Строки.Индекс(ПодчиненныйЭлемент) = 0 Тогда
						ПодчиненныйЭлемент.Родитель.КодСтраницы = ПодчиненныйЭлемент.КодСтраницы;
					КонецЕсли;
					Если ЕстьРазличия Тогда
						ПодчиненныйЭлемент.Родитель.ЕстьРазличия = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СтрокаНайдена Тогда
			Если ТипЗнч(НомерСтраницы) = Тип("Число") Тогда
				ЭлементПерваяСтраница = ЭлементПервогоУровня.Строки[0];
				КоличествоСтраниц = ЭлементПервогоУровня.Строки.Количество();
				Для НомНовойСтраницы = КоличествоСтраниц + 1 По НомерСтраницы Цикл
					НоваяСтраница = ЭлементПервогоУровня.Строки.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтраница, ЭлементПерваяСтраница, ,"Родитель,Строки");
					ЭлементыНаименования = СтрРазделить(НоваяСтраница.КолонкаРазделыОтчета, " ");
					ЭлементыНаименования[ЭлементыНаименования.ВГраница()] = КодСтраницы;
					
					НоваяСтраница.КолонкаРазделыОтчета = СтрСоединить(ЭлементыНаименования, " ");
					НоваяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
					НоваяСтраница.КодСтраницы = КодСтраницы;
					НоваяСтраница.СтатусСтраницы = СтатусСтраницы;
					НоваяСтраница.ЕстьРазличия   = ЕстьРазличия;
				КонецЦикла;
			ИначеЕсли ТипЗнч(НомерСтраницы) = Тип("Массив") Тогда
				НоваяСтраница = НоваяСтраницаВДеревеОтчетов(ЭлементПервогоУровня, НомерСтраницы);
				
				НоваяСтраница.СтатусСтраницы = СтатусСтраницы;
				НоваяСтраница.ЕстьРазличия   = ЕстьРазличия;
				
				Если НоваяСтраница.Родитель <> Неопределено Тогда
					Если НоваяСтраница.Родитель.СтатусСтраницы = 3 Тогда
						Если НоваяСтраница.Родитель.Строки.Индекс(НоваяСтраница) = 0 Тогда
							НоваяСтраница.Родитель.КодСтраницы = НоваяСтраница.КодСтраницы;
						КонецЕсли;
						Если ЕстьРазличия Тогда
							НоваяСтраница.Родитель.ЕстьРазличия = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСекциюЗаголовок(МакетРезультата, СтраницаРезультата, ОписаниеСтраницы)
	
	ОбластьЗаголовок = МакетРезультата.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Области.ОписаниеСтраницы.Текст = ОписаниеСтраницы;
	
	СтраницаРезультата.ТабДокВсе.Вывести(ОбластьЗаголовок);
	СтраницаРезультата.ТабДокРазличия.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ВывестиСекциюСтрокаДанных(МакетРезультата, СтраницаРезультата, ЗначенияПолей, ОтметитьРазличия = Ложь)
	
	ОбластьСтрокаДанных = МакетРезультата.ПолучитьОбласть("СтрокаДанных");
	
	ОбластьСтрокаДанных.Области.Номер.Текст                = ЗначенияПолей.НомерПоПорядку;
	ОбластьСтрокаДанных.Области.ОписаниеПоказателя.Текст   = ЗначенияПолей.ОписаниеПоказателя;
	ОбластьСтрокаДанных.Области.ЗначениеЛевое.Текст        = ЗначенияПолей.ЗначениеПоказателяЛевое;
	ОбластьСтрокаДанных.Области.ЗначениеПравое.Текст       = ЗначенияПолей.ЗначениеПоказателяПравое;
	ОбластьСтрокаДанных.Области.АбсолютнаяРазница.Текст    = ЗначенияПолей.АбсолютнаяРазница;
	ОбластьСтрокаДанных.Области.ОтносительнаяРазница.Текст = ЗначенияПолей.ОтносительнаяРазница;
	ОбластьСтрокаДанных.Области.Комментарий.Текст          = ЗначенияПолей.Комментарий;
	
	ОбластьСтрокаДанных.Области.ЗначениеЛевое.Расшифровка      = ЗначенияПолей.РасшифровкаПоказателяЛевая;
	ОбластьСтрокаДанных.Области.ЗначениеПравое.Расшифровка     = ЗначенияПолей.РасшифровкаПоказателяПравая;
	
	Если ОтметитьРазличия Тогда
		ОбластьСтрокаДанных.Область(, 2, , 8).ЦветФона = ЦветаСтиля.ЦветФонаШапкиОтчета;
		
		СтраницаРезультата.ТабДокВсе.Вывести(ОбластьСтрокаДанных);
		
		ОбластьСтрокаДанных.Области.Номер.Текст = ЗначенияПолей.НомерПоПорядкуРазличия;
		
		СтраницаРезультата.ТабДокРазличия.Вывести(ОбластьСтрокаДанных);
	Иначе
		СтраницаРезультата.ТабДокВсе.Вывести(ОбластьСтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСекциюИнформация(МакетРезультата, СтраницаРезультата, ТекстИнфо, ТолькоЕслиНетДанных = Ложь)
	
	ОбластьПустаяСтрока = МакетРезультата.ПолучитьОбласть("ПустаяСтрока");
	ОбластьИнформация   = МакетРезультата.ПолучитьОбласть("Информация");
	
	ОбластьИнформация.Области.ТекстИнфо.Текст = ТекстИнфо;
	
	Если НЕ ТолькоЕслиНетДанных
		ИЛИ (ТолькоЕслиНетДанных И СтраницаРезультата.ТабДокВсе.Области.Найти("СтрокаДанных") = Неопределено) Тогда
		Если ПустаяСтрока(ТекстИнфо) Тогда
			ОбластьИнформация.Области.ТекстИнфо.Текст =
				НСтр("ru = 'В разделе нет показателей числового типа'");
		КонецЕсли;
		СтраницаРезультата.ТабДокВсе.Вывести(ОбластьПустаяСтрока);
		СтраницаРезультата.ТабДокВсе.Вывести(ОбластьИнформация);
	КонецЕсли;
	
	Если НЕ ТолькоЕслиНетДанных
		ИЛИ (ТолькоЕслиНетДанных И СтраницаРезультата.ТабДокРазличия.Области.Найти("СтрокаДанных") = Неопределено) Тогда
		Если ПустаяСтрока(ТекстИнфо) Тогда
			ОбластьИнформация.Области.ТекстИнфо.Текст =
				НСтр("ru = 'Нет различий'");
		КонецЕсли;
		СтраницаРезультата.ТабДокРазличия.Вывести(ОбластьПустаяСтрока);
		СтраницаРезультата.ТабДокРазличия.Вывести(ОбластьИнформация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоменятьМестамиЗначенияПеременных(Перем1, Перем2)
	
	ПеремП = Перем1;
	Перем1 = Перем2;
	Перем2 = ПеремП;
	
КонецПроцедуры

Функция ТаблицаДанныхМногоуровневыхРазделов(ДеревоРазделаЛевый, ДеревоРазделаПравый)
	
	ТаблицаРазделов = Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("КодСтраницы",           Новый ОписаниеТипов("Строка"));
	ТаблицаРазделов.Колонки.Добавить("АдресСтраницы",         Новый ОписаниеТипов("Массив"));
	ТаблицаРазделов.Колонки.Добавить("СтатусСтраницы",        Новый ОписаниеТипов("Число"));
	ТаблицаРазделов.Колонки.Добавить("ДанныеРазделаЛевый",    Новый ОписаниеТипов("Структура"));
	ТаблицаРазделов.Колонки.Добавить("ДанныеРазделаПравый",   Новый ОписаниеТипов("Структура"));
	ТаблицаРазделов.Колонки.Добавить("КодСтраницыСортировка", Новый ОписаниеТипов("Строка"));
	
	ТаблицаРазделов.Индексы.Добавить("КодСтраницы");
	ТаблицаРазделов.Индексы.Добавить("КодСтраницыСортировка");
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделаЛевый, "Отбор");
	СтрокиДереваРазделаЛевый = ДеревоРазделаЛевый.Строки.НайтиСтроки(Новый Структура("Отбор", Ложь), Истина);
	Для Каждого СтрокаДереваРазделаЛевый Из СтрокиДереваРазделаЛевый Цикл
		
		НоваяСтрокаТаблицы = ТаблицаРазделов.Добавить();
		НоваяСтрокаТаблицы.АдресСтраницы = АдресСтраницыМУР(СтрокаДереваРазделаЛевый, НоваяСтрокаТаблицы.КодСтраницы);
		НоваяСтрокаТаблицы.КодСтраницыСортировка = КодСтраницыДляСортировки(НоваяСтрокаТаблицы.АдресСтраницы);
		
		Если СтрокаДереваРазделаЛевый.Данные = Неопределено Тогда
			НоваяСтрокаТаблицы.СтатусСтраницы = 3;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы.ДанныеРазделаЛевый  = СтрокаДереваРазделаЛевый.Данные;
		
		ДанныеРазделаПравый = ДанныеСтраницыМУР(ДеревоРазделаПравый, НоваяСтрокаТаблицы.АдресСтраницы);
		Если ДанныеРазделаПравый <> Неопределено Тогда
			НоваяСтрокаТаблицы.ДанныеРазделаПравый = ДанныеРазделаПравый;
		Иначе
			НоваяСтрокаТаблицы.СтатусСтраницы = 2;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(ДеревоРазделаПравый, "Отбор");
	СтрокиДереваРазделаПравый = ДеревоРазделаПравый.Строки.НайтиСтроки(Новый Структура("Отбор", Ложь), Истина);
	Для Каждого СтрокаДереваРазделаПравый Из СтрокиДереваРазделаПравый Цикл
		
		КодСтраницы = "";
		АдресСтраницы = АдресСтраницыМУР(СтрокаДереваРазделаПравый, КодСтраницы);
		
		Если ТаблицаРазделов.Найти(КодСтраницы, "КодСтраницы") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = ТаблицаРазделов.Добавить();
		НоваяСтрокаТаблицы.КодСтраницы   = КодСтраницы;
		НоваяСтрокаТаблицы.АдресСтраницы = АдресСтраницы;
		
		НоваяСтрокаТаблицы.КодСтраницыСортировка = КодСтраницыДляСортировки(АдресСтраницы);
		
		Если СтрокаДереваРазделаПравый.Данные = Неопределено Тогда
			НоваяСтрокаТаблицы.СтатусСтраницы = 3;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы.ДанныеРазделаПравый = СтрокаДереваРазделаПравый.Данные;
		
		ДанныеРазделаЛевый = ДанныеСтраницыМУР(ДеревоРазделаЛевый, АдресСтраницы);
		Если ДанныеРазделаЛевый <> Неопределено Тогда
			НоваяСтрокаТаблицы.ДанныеРазделаЛевый = ДанныеРазделаЛевый;
		Иначе
			НоваяСтрокаТаблицы.СтатусСтраницы = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРазделов.Сортировать("КодСтраницыСортировка");
	
	Возврат ТаблицаРазделов;
	
КонецФункции

Функция РазделыОтчетаПоУмолчанию(ФормаОтчета)
	
	РазделыОтчета = Новый ДеревоЗначений;
	РазделыОтчета.Колонки.Добавить("КолонкаРазделыОтчета",              Новый ОписаниеТипов("Строка"));
	РазделыОтчета.Колонки.Добавить("ИндексКартинки",                    Новый ОписаниеТипов("Число"));
	РазделыОтчета.Колонки.Добавить("КолонкаРазделыОтчетаСокрНаим",      Новый ОписаниеТипов("Строка"));
	РазделыОтчета.Колонки.Добавить("КолонкаНомерСтраницыРазделаОтчета", Новый ОписаниеТипов("Число"));
	РазделыОтчета.Колонки.Добавить("РазделМногостраничный",             Новый ОписаниеТипов("Булево"));
	РазделыОтчета.Колонки.Добавить("РазделМногострочный",               Новый ОписаниеТипов("Булево"));
	
	ЭлементРазделовОтчета = РазделыОтчета.Строки.Добавить();
	ЭлементРазделовОтчета.ИндексКартинки = 1;
	ПозицияОгр = СтрНайти(ФормаОтчета.Заголовок, " за ");
	ЭлементРазделовОтчета.КолонкаРазделыОтчета = ?(ПозицияОгр > 0,
		Лев(ФормаОтчета.Заголовок, ПозицияОгр - 1), ФормаОтчета.Заголовок);
	ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "ФормаОтчета";
	ЭлементРазделовОтчета.РазделМногостраничный = Ложь;
	ЭлементРазделовОтчета.РазделМногострочный = 
		РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ФормаОтчета, "мТаблицаМногострочныхРазделов");
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция СписокЗначенийПолейСтрокиДанных()
	
	ЗначенияПолей = Новый Структура();
	
	ЗначенияПолей.Вставить("НомерПоПорядку",              "");
	ЗначенияПолей.Вставить("НомерПоПорядкуРазличия",      "");
	ЗначенияПолей.Вставить("ОписаниеПоказателя",          "");
	ЗначенияПолей.Вставить("ЗначениеПоказателяЛевое",     "");
	ЗначенияПолей.Вставить("РасшифровкаПоказателяЛевая",  "");
	ЗначенияПолей.Вставить("ЗначениеПоказателяПравое",    "");
	ЗначенияПолей.Вставить("РасшифровкаПоказателяПравая", "");
	ЗначенияПолей.Вставить("АбсолютнаяРазница",          "-");
	ЗначенияПолей.Вставить("ОтносительнаяРазница",       "-");
	ЗначенияПолей.Вставить("Комментарий",                 "");
	
	Возврат ЗначенияПолей;
	
КонецФункции

Функция ПредставлениеДляСортировки(Сведения)
	
	Перем Представление;
	
	Если ЗначениеЗаполнено(Сведения.Раздел) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сведения.Раздел, 6, "_");
		Представление = Представление + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сведения.Строка, 4, "_");
		Представление = Представление + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сведения.СтрИндекс, 20, "_");
		Представление = Представление + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сведения.Графа, 3, "_");
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Сведения.ИмяПоказателя + Сведения.СтрИндекс, 33, "_");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьДанныеСохраненногоДокумента(СохраненныйДок)
	
	СохраненныйДокОбъект = СохраненныйДок.ПолучитьОбъект();
	СохраненныйДокОбъект.Прочитать();
	
	// Извлекаем структуру сохраненных данных отчета
	СтруктураДанныхОтчета = СохраненныйДокОбъект.ДанныеОтчета.Получить();
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоказателиОтчета");
	ДанныеОтчета.Вставить("ДанныеМногострочныхРазделов");
	ДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов");
	ДанныеОтчета.Вставить("ДанныеМногоуровневыхРазделов");
	ДанныеОтчета.Вставить("СтруктураМногострочныхЧастей"); // используется в бухотчетности
	ДанныеОтчета.Вставить("СоставДополнительныхСтрок");    // используется в бухотчетности
	
	ЗаполнитьЗначенияСвойств(ДанныеОтчета, СтруктураДанныхОтчета);
	
	ДанныеОтчета.Вставить("СтруктураДанныхОтчета", СтруктураДанныхОтчета);
	ДанныеОтчета.Вставить("СписокЗаполненныхРазделов", Новый СписокЗначений);
	ДанныеОтчета.Вставить("ДокументОтчета", СохраненныйДок);
	
	//// Выполняем обработчик после получения данных сохраненного отчета.
	//ПараметрыОбработчика = Новый Структура("ДанныеОтчета,ДеревоДляСравнения,ПараметрыОтчета", ДанныеОтчета, ДеревоДляСравнения, ПараметрыОтчета);
	//ВыполнитьАлгоритмВБезопасномРежиме(ТекстОбработчикаПоИмени(ТекстыПравилСравнения, "ПослеСравнения"), ПараметрыОбработчика);
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция ПолучитьРасшифровкуПоказателя(ИмяПоказателя, ИмяСтраницы, НомерСтраницы,
									  СсылкаНаОтчет, ДопВозможности = Неопределено)
	НомСтраницы = "";
	
	Если ТипЗнч(НомерСтраницы) = Тип("Число") Тогда
		НомСтраницы = Формат(НомерСтраницы, "ЧГ=");
	ИначеЕсли ТипЗнч(НомерСтраницы) = Тип("Массив") Тогда
		Для Каждого ЭлементНомераСтраницы Из НомерСтраницы Цикл
			НомСтраницы = НомСтраницы + ?(ЗначениеЗаполнено(НомСтраницы), ",", "") + Формат(ЭлементНомераСтраницы, "ЧГ=");
		КонецЦикла;
	Иначе
		НомСтраницы = СокрЛП(НомерСтраницы);
	КонецЕсли;
	
	Расшифровка = Новый Структура;
	
	Расшифровка.Вставить("ИмяПоказателя", ИмяПоказателя);
	Расшифровка.Вставить("ИмяСтраницы",   ИмяСтраницы);
	Расшифровка.Вставить("Страница",      НомСтраницы);
	Расшифровка.Вставить("СсылкаНаОтчет", СсылкаНаОтчет);
	
	Расшифровка.Вставить("ДополнительныеВозможности", ДопВозможности);
	
	Возврат Расшифровка;
	
КонецФункции

Функция ВыводРезультатаСравненияДвухСтраниц(
			ТабДокМакет, СтраницаРезультата, ИмяРаздела,
			СтраницаРазделаЛевый, СтраницаРазделаПравый,
			ДанныеРазделовЛевый, ДанныеРазделовПравый,
			ДеревоДляСравнения, ПараметрыОтчета,
			НомерСтраницы = 0, РазделМногострочный = Ложь)
			
	ЕстьРазличия = Ложь;
	
	ПроверенныеПоказатели = Новый Соответствие;
	ДанныеСтраницыСписок  = Новый СписокЗначений;
	
	// Показатели, которые не нужно проверять.
	ПроверенныеПоказатели.Вставить("НомерКорректировки", Истина);
	
	СтраницаРаздела = СтраницаРазделаЛевый;
	
	Раздел = "";
	Для Проход = 1 По 2 Цикл
		
		Если Проход = 2 Тогда // на 2-м проходе используем данные раздела правого документа.
			Если СтраницаРазделаПравый = Неопределено Тогда
				Прервать;
			КонецЕсли;
			СтраницаРаздела = СтраницаРазделаПравый;
		КонецЕсли;
		
		Для Каждого ПоказательРаздела Из СтраницаРаздела Цикл
			
			ИмяПоказателя = ПоказательРаздела.Ключ;
			
			ЗначениеПоказателяЛевое = ПоказательРаздела.Значение;
			Если ТипЗнч(ЗначениеПоказателяЛевое) = Тип("Число") Тогда
				
				Сведения = СведенияОПоказателе(ИмяПоказателя, ПараметрыОтчета);
				Если НЕ РазделМногострочный И ЗначениеЗаполнено(Сведения.Индекс) Тогда
					//Продолжить;
				КонецЕсли;
				
				Если ПроверенныеПоказатели[ИмяПоказателя] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПроверенныеПоказатели.Вставить(ИмяПоказателя, Проход);
				
				Если ЗначениеЗаполнено(Раздел) Тогда
					Если Раздел <> Сведения.Раздел Тогда
						Если СтрНачинаетсяС(Сведения.Раздел, "1") Тогда
							Продолжить;
						Иначе
							Раздел = Сведения.Раздел;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(Сведения.Раздел) Тогда
					Раздел = Сведения.Раздел;
				КонецЕсли;
				
				ЗначениеПоказателяПравое = ЗначениеПоказателяИзДанныхОтчета(
					ИмяРаздела, Сведения.ИмяПоказателя,
					?(Проход = 2, ДанныеРазделовЛевый, ДанныеРазделовПравый),
					ПараметрыОтчета, НомерСтраницы, Сведения.Индекс);
					
				Если Проход = 2 Тогда // на 2-м проходе меняем местами значения переменных.
					ПоменятьМестамиЗначенияПеременных(ЗначениеПоказателяЛевое, ЗначениеПоказателяПравое);
				КонецЕсли;
				
				ЗначенияПолей = СписокЗначенийПолейСтрокиДанных(); // пустая структура данных строки для вывода
				
				ОписаниеПоказателя = ПредставлениеПоказателя("",
					Сведения.Строка, Сведения.Графа, Сведения.Индекс);
				
				ЗначенияПолей.ОписаниеПоказателя = ?(ЗначениеЗаполнено(ОписаниеПоказателя),
					ОписаниеПоказателя, Сведения.ИмяПоказателя);
				
				ЗначенияПолей.ЗначениеПоказателяЛевое =
					?(ЗначениеПоказателяЛевое = Неопределено, "-",
					?(ТипЗнч(ЗначениеПоказателяЛевое) = Тип("Число"),
					Формат(ЗначениеПоказателяЛевое, "ЧН="), ЗначениеПоказателяЛевое));
				ЗначенияПолей.РасшифровкаПоказателяЛевая = ПолучитьРасшифровкуПоказателя(
					?(ЗначениеПоказателяЛевое = Неопределено, "R1C1", ИмяПоказателя),
					ИмяРаздела, НомерСтраницы, ДанныеРазделовЛевый.ДокументОтчета);
				
				СтрокиСхемы = ДеревоДляСравнения.Строки.НайтиСтроки(
					Новый Структура("Раздел,Ключ", ИмяРаздела, Сведения.ИмяПоказателя), Истина);
				Если ЗначениеЗаполнено(СтрокиСхемы) Тогда
					ЗначенияПолей.Комментарий = СокрЛП(СтрокиСхемы[0].Представление);
				ИначеЕсли ЭтоБухОтчетность(ПараметрыОтчета) Тогда
					СтрокиСхемы = ДеревоДляСравнения.Строки.НайтиСтроки(
						Новый Структура("Раздел,Ключ", "", "П2" + Сред(Сведения.ИмяПоказателя, 3)), Истина);
					Если ЗначениеЗаполнено(СтрокиСхемы) Тогда
						ЗначенияПолей.Комментарий = СокрЛП(СтрокиСхемы[0].Представление);
					КонецЕсли;
				Иначе
					СтрокиСхемы = ДеревоДляСравнения.Строки.НайтиСтроки(
						Новый Структура("Ключ", Сведения.ИмяПоказателя), Истина);
					Если ЗначениеЗаполнено(СтрокиСхемы) Тогда
						ЗначенияПолей.Комментарий = СокрЛП(СтрокиСхемы[0].Представление);
					КонецЕсли;
				КонецЕсли;
				
				ПоказателиОтличаются = ЗначениеПоказателяЛевое <> ЗначениеПоказателяПравое;
				Если ПоказателиОтличаются Тогда
					ЕстьРазличия = Истина;
				КонецЕсли;
				
				Если ЗначениеПоказателяПравое = Неопределено Тогда
					ЗначенияПолей.ЗначениеПоказателяПравое = "-";
				ИначеЕсли ТипЗнч(ЗначениеПоказателяПравое) = Тип("Число") Тогда
					ЗначенияПолей.ЗначениеПоказателяПравое = Формат(ЗначениеПоказателяПравое, "ЧН=");
					Если ТипЗнч(ЗначениеПоказателяЛевое) = Тип("Число") Тогда
						АбсолютнаяРазница = ЗначениеПоказателяПравое - ЗначениеПоказателяЛевое;
						ЗначенияПолей.АбсолютнаяРазница = Формат(АбсолютнаяРазница, "");
						
						Если ЗначениеПоказателяЛевое <> 0 Тогда
							ОтносительнаяРазница = Окр((АбсолютнаяРазница / ЗначениеПоказателяЛевое) * 100, 2);
							ЗначенияПолей.ОтносительнаяРазница = Формат(ОтносительнаяРазница, "");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ЗначенияПолей.ЗначениеПоказателяПравое = ЗначениеПоказателяПравое;
				КонецЕсли;
				
				ЗначенияПолей.РасшифровкаПоказателяПравая = ПолучитьРасшифровкуПоказателя(
					?(ЗначениеПоказателяПравое = Неопределено, "R1C1", ИмяПоказателя),
					ИмяРаздела, НомерСтраницы, ДанныеРазделовПравый.ДокументОтчета);
				
				ЗначениеЭлементаДанныхСтраницы = Новый Структура();
				ЗначениеЭлементаДанныхСтраницы.Вставить("ЗначенияПолей", ЗначенияПолей);
				ЗначениеЭлементаДанныхСтраницы.Вставить("ПоказателиОтличаются", ПоказателиОтличаются);
				
				ДанныеСтраницыСписок.Добавить(ЗначениеЭлементаДанныхСтраницы,
					ПредставлениеДляСортировки(Сведения), ПоказателиОтличаются);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДанныеСтраницыСписок.СортироватьПоПредставлению();
	
	НомерПоПорядку         = 0;
	НомерПоПорядкуРазличия = 0;
	Для Каждого ЭлементСпискаДанных Из ДанныеСтраницыСписок Цикл
		ЗначениеЭлемента = ЭлементСпискаДанных.Значение;
		
		НомерПоПорядку = НомерПоПорядку + 1;
		ЗначениеЭлемента.ЗначенияПолей.НомерПоПорядку = Формат(НомерПоПорядку, "ЧГ=");
		
		Если ЭлементСпискаДанных.Пометка Тогда
			НомерПоПорядкуРазличия = НомерПоПорядкуРазличия + 1;
			ЗначениеЭлемента.ЗначенияПолей.НомерПоПорядкуРазличия = Формат(НомерПоПорядкуРазличия, "ЧГ=");
		КонецЕсли;
		
		ВывестиСекциюСтрокаДанных(ТабДокМакет, СтраницаРезультата,
			ЗначениеЭлемента.ЗначенияПолей, ЗначениеЭлемента.ПоказателиОтличаются);
	КонецЦикла;
	
	ВывестиСекциюИнформация(ТабДокМакет, СтраницаРезультата, "", Истина); // только если нет данных в ТД
	
	Возврат ЕстьРазличия;
	
КонецФункции

Функция ЗначениеПоказателяИзДанныхОтчета(Раздел, Показатель, ДанныеОтчета, ПараметрыОтчета, НомерСтраницы = 0, НомерСтроки = 0)
	
	Префикс = "ПолеТабличногоДокумента";
	
	СтраницаРаздела = Неопределено;
	
	// Будет присвоено значение "Истина", если раздел многоуровневый многострочный
	// и есть колонка "ДанныеМногострочныхЧастей" в дереве многоуровневого раздела.
	ЕстьДанныеМногострочныхЧастейМнУр = Неопределено;
	
	Если ТипЗнч(НомерСтраницы) = Тип("Массив") Тогда // раздел многоуровневый (многостраничный)
		
		Если ДанныеОтчета.ДанныеМногоуровневыхРазделов = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные многоуровневой части документа отчета. Ошибка в разделе: ""%1"".'"), Раздел);
		КонецЕсли;
		
		МногоуровневыйРаздел = Неопределено;
		ИмяРаздела = СтрЗаменить(Раздел, Префикс, "");
		ДанныеОтчета.ДанныеМногоуровневыхРазделов.Свойство(ИмяРаздела, МногоуровневыйРаздел);
		
		Если ТипЗнч(МногоуровневыйРаздел) <> Тип("ДеревоЗначений") ИЛИ МногоуровневыйРаздел.Строки.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В данных документа отчета не найден многоуровневый раздел ""%1"" для показателя ""%2"".'"),
				Раздел, Показатель));
			Возврат Неопределено;
		КонецЕсли;
		
		Если НомерСтраницы.Количество() = 0 Тогда
			НомСтраницы = Новый Массив;
			НомСтраницы.Добавить(1); // хотя бы одна страница в разделе должна присутствовать
		Иначе
			НомСтраницы = НомерСтраницы;
		КонецЕсли;
		
		ВетвьДерева  = МногоуровневыйРаздел;
		ВетвьШаблона = ВетвьДерева;
		Для Каждого НомСтраницыЭлемент Из НомСтраницы Цикл
			НомерСтрокиШаблона = Мин(ВетвьШаблона.Строки.Количество(), НомСтраницыЭлемент);
			Если НомерСтрокиШаблона = 0 Тогда
				ВетвьДерева = МногоуровневыйРаздел;
				Прервать;
			КонецЕсли;
			
			ВетвьШаблона = ВетвьШаблона.Строки[НомерСтрокиШаблона - 1];
			
			КоличествоСтрокВетви = ВетвьДерева.Строки.Количество();
			Если НомСтраницыЭлемент > КоличествоСтрокВетви Тогда
				Возврат Неопределено;
			Иначе
				ВетвьДерева = ВетвьДерева.Строки[НомСтраницыЭлемент - 1];
			КонецЕсли;
		КонецЦикла;
		
		Если ВетвьДерева = МногоуровневыйРаздел Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В данных документа отчета не найдена страница многоуровневого раздела ""%1"" для показателя ""%2"".'"),
				Раздел, Показатель));
			Возврат Неопределено;
		КонецЕсли;
		
		СтраницаРаздела = ВетвьДерева.Данные;
		
		Если СтраницаРаздела = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда // массив не пустой - определена многоуровневая многострочность в разделе
			Если МногоуровневыйРаздел.Колонки.Найти("ДанныеМногострочныхЧастей") <> Неопределено Тогда
				ЕстьДанныеМногострочныхЧастейМнУр = Истина;
				
				КлючМногострочнойЧасти = Новый Массив;
				ДанныеМногострочнойЧастиШаблонаМассив = Новый Массив;
				КлючИДанныеМногострочнойЧастиМУР(ВетвьШаблона, Показатель, КлючМногострочнойЧасти, ДанныеМногострочнойЧастиШаблонаМассив);
				
				Если ЗначениеЗаполнено(ДанныеМногострочнойЧастиШаблонаМассив) Тогда
					МаксИндКлюч = КлючМногострочнойЧасти.ВГраница();
					
					МаксИндЭлемент = НомерСтроки.ВГраница();
					Для ИндЭлемент = 0 По МаксИндЭлемент Цикл
						НомерСтрокиЭлемент = НомерСтроки[ИндЭлемент];
						
						ИндКлюч = Мин(ИндЭлемент, МаксИндКлюч);
						КлючМногострочнойЧастиЭлемент = КлючМногострочнойЧасти[ИндКлюч];
						
						ДанныеМногострочнойЧастиШаблона = ДанныеМногострочнойЧастиШаблонаМассив[ИндКлюч]; // в массиве результат рекурсивного поиска
						ДанныеМногострочнойЧасти = ВетвьДерева.ДанныеМногострочныхЧастей[КлючМногострочнойЧастиЭлемент];
						
						НомерСтрокиШаблона = Мин(ДанныеМногострочнойЧастиШаблона.Строки.Количество(), НомерСтрокиЭлемент);
						СтрокаМногострочнойЧастиШаблона = ДанныеМногострочнойЧастиШаблона.Строки[НомерСтрокиШаблона - 1];
						
						КоличествоСтрокМногострочнойЧасти = ДанныеМногострочнойЧасти.Строки.Количество();
						Если НомерСтрокиЭлемент > КоличествоСтрокМногострочнойЧасти Тогда
							Возврат Неопределено;
						Иначе
							ВетвьДерева = ДанныеМногострочнойЧасти.Строки[НомерСтрокиЭлемент - 1];
						КонецЕсли;
					КонецЦикла;
					
					СтраницаРаздела = ВетвьДерева.Данные;
				КонецЕсли;
			Иначе
				ЕстьДанныеМногострочныхЧастейМнУр = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НомерСтраницы > 0 Тогда // раздел многостраничный
		
		Если ДанныеОтчета.ДанныеМногостраничныхРазделов = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные многостраничной части документа отчета. Ошибка в разделе: ""%1"".'"), Раздел);
		КонецЕсли;
		
		МногостраничныйРаздел = Неопределено;
		ИмяРаздела = СтрЗаменить(Раздел, Префикс, "");
		ДанныеОтчета.ДанныеМногостраничныхРазделов.Свойство(ИмяРаздела, МногостраничныйРаздел);
		
		Если ТипЗнч(МногостраничныйРаздел) <> Тип("ТаблицаЗначений") ИЛИ МногостраничныйРаздел.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В данных документа отчета не найден многостраничный раздел ""%1"" для показателя ""%2"".'"),
				Раздел, Показатель));
			Возврат Неопределено;
		КонецЕсли;
		
		Если НомерСтраницы > МногостраничныйРаздел.Количество() Тогда
			Возврат Неопределено;
		Иначе
			СтраницаРаздела = МногостраничныйРаздел[НомерСтраницы - 1].Данные;
		КонецЕсли;
		
	Иначе // обычный (одностраничный) раздел
		
		Если СтрНачинаетсяС(Раздел, Префикс) Тогда
			ДанныеОтчета.ПоказателиОтчета.Свойство(Раздел, СтраницаРаздела);
			Если СтраницаРаздела = Неопределено Тогда
				ДанныеОтчета.ПоказателиОтчета.Свойство(СтрЗаменить(Раздел, Префикс, ""), СтраницаРаздела);
			КонецЕсли;
		Иначе
			ДанныеОтчета.ПоказателиОтчета.Свойство(Префикс + Раздел, СтраницаРаздела);
			Если СтраницаРаздела = Неопределено Тогда
				ДанныеОтчета.ПоказателиОтчета.Свойство(Раздел, СтраницаРаздела);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(СтраницаРаздела) <> Тип("Структура") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В данных документа отчета не найден раздел ""%1"" для показателя ""%2"".'"),
				Раздел, Показатель));
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеПоказателя = Неопределено;
	
	Если НомерСтроки = 0 ИЛИ (ТипЗнч(НомерСтроки) = Тип("Массив") И ЕстьДанныеМногострочныхЧастейМнУр <> Ложь) Тогда // обычные и многоуровневые разделы
		СтраницаРаздела.Свойство(Показатель, ЗначениеПоказателя);
	Иначе
		НомСтроки = ?(ТипЗнч(НомерСтроки) = Тип("Массив"), НомерСтроки[НомерСтроки.ВГраница()], НомерСтроки);
		КодПоказателя = Показатель + "_" + Формат(НомСтроки, "ЧГ=");
		КодПоказателяДляПоиска = Показатель + "_1";
		Если СтраницаРаздела.Свойство(КодПоказателяДляПоиска, ЗначениеПоказателя)
			ИЛИ ПоказательНайденАльтернативнымСпособом(
					СтраницаРаздела, КодПоказателяДляПоиска, КодПоказателя, ЗначениеПоказателя, ПараметрыОтчета) Тогда
			СтраницаРаздела.Свойство(КодПоказателя, ЗначениеПоказателя);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'В данных раздела ""%1"" документа отчета не найден показатель ""%2"" многострочной части.'"),
				Раздел, Показатель));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ПоказательНайденАльтернативнымСпособом(СтраницаРаздела,
											   КодПоказателяДляПоиска,
											   КодПоказателя,
											   ЗначениеПоказателя,
											   ПараметрыОтчета)
	Перем КНД;
	
	// Сюда попадаем, если ранее не найдено свойство по указанному имени.
	Если ПараметрыОтчета.Свойство("КНД", КНД) Тогда
		Если КНД = "0710099"
		 ИЛИ КНД = "0710098"
		 ИЛИ КНД = "0710097"
		 ИЛИ КНД = "0710096" Тогда // только для бухотчетности
			Если Лев(КодПоказателяДляПоиска, 2) = "П2" Тогда
				Если СтраницаРаздела.Свойство("П1" + Сред(КодПоказателяДляПоиска, 3), ЗначениеПоказателя) Тогда
					КодПоказателя = "П1" + Сред(КодПоказателя, 3);
					Возврат Истина;
				ИначеЕсли СтраницаРаздела.Свойство("П0" + Сред(КодПоказателяДляПоиска, 3), ЗначениеПоказателя) Тогда
					КодПоказателя = "П0" + Сред(КодПоказателя, 3);
					Возврат Истина;
				Иначе
					ПозРазделителя = СтрНайти(КодПоказателя, "_", НаправлениеПоиска.СКонца);
					Если ПозРазделителя > 0 Тогда
						КодПоказателяБезСчетчика = "П0" + Сред(КодПоказателя, 3, ПозРазделителя - 3);
						КодСчетчика = Сред(КодПоказателя, ПозРазделителя + 1);
						КодПоказателяДляПоиска = Лев(КодПоказателяБезСчетчика, СтрДлина(КодПоказателяБезСчетчика) - 2)
							+ КодСчетчика + "01";
						КодПоказателяДляПоиска = СтрЗаменить(КодПоказателяДляПоиска, "П00010", "П0001");
						ЗначениеПоказателя = 0;
						Если СтраницаРаздела.Свойство(КодПоказателяДляПоиска) Тогда
							КодПоказателя = Лев(КодПоказателяДляПоиска, СтрДлина(КодПоказателяДляПоиска) - 2) + Прав(КодПоказателяБезСчетчика, 2);
							СтраницаРаздела.Свойство(КодПоказателя, ЗначениеПоказателя);
							Возврат Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СодержимоеОбластейПравилСравнения(Знач ПравилаСравнения, НастройкиСравнения)
	
	ОбластиПравилСравнения = Новый Соответствие;
	
	Если ТипЗнч(ПравилаСравнения) = Тип("ТекстовыйДокумент") И ТипЗнч(НастройкиСравнения) = Тип("Структура") Тогда
		
		ИмяФайлаНастроек = Неопределено;
		Если НастройкиСравнения.Свойство("ИмяФайлаНастроек", ИмяФайлаНастроек) И ЗначениеЗаполнено(ИмяФайлаНастроек) Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь) = Истина Тогда
				ПравилаСравненияИзФайла = Новый ТекстовыйДокумент;
				Попытка
					ПравилаСравненияИзФайла.Прочитать(ИмяФайлаНастроек);
					ПравилаСравнения = ПравилаСравненияИзФайла;
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Используются обработчики из файла настроек сравнения ""%1"".'"), ИмяФайлаНастроек));
				Исключение
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не найден файл настроек сравнения ""%1"": %2.'"), ИмяФайлаНастроек,
						РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ИнформацияОбОшибке().Описание)));
					ПравилаСравненияИзФайла = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ОписанияОбластейОбработчиков = Неопределено;
		Если НЕ НастройкиСравнения.Свойство("ОбластиОбработчиков", ОписанияОбластейОбработчиков)
			ИЛИ ТипЗнч(ОписанияОбластейОбработчиков) <> Тип("Структура") Тогда
			Возврат ОбластиПравилСравнения;
		КонецЕсли;
		
		КоличествоСтрокПравилСравнения = ПравилаСравнения.КоличествоСтрок();
		Для НомСтрокиПравилСравнения = 1 По КоличествоСтрокПравилСравнения Цикл
			СтрокаПравилСравнения = ПравилаСравнения.ПолучитьСтроку(НомСтрокиПравилСравнения);
			НомПозицииНачалаОбласти = СтрНайти(СтрокаПравилСравнения, "#Область");
			Если НомПозицииНачалаОбласти > 0 Тогда
				ИмяОбласти = СокрЛП(Сред(СтрокаПравилСравнения, НомПозицииНачалаОбласти + 9));
				
				ИмяОбработчика = "";
				Для Каждого ОписаниеОбластиОбработчика Из ОписанияОбластейОбработчиков Цикл
					Если ОписаниеОбластиОбработчика.Значение = ИмяОбласти Тогда
						ИмяОбработчика = ОписаниеОбластиОбработчика.Ключ;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(ИмяОбработчика) И НЕ ПустаяСтрока(ИмяОбласти) Тогда
					ОбластьОбработчика = ПравилаСравнения.ПолучитьОбласть(ИмяОбласти);
					
					ОбластьОбработчика.УдалитьСтроку(1);
					КоличествоСтрокОбласти = ОбластьОбработчика.КоличествоСтрок();
					ОбластьОбработчика.УдалитьСтроку(КоличествоСтрокОбласти);
					
					ОбластиПравилСравнения.Вставить(ИмяОбработчика, ОбластьОбработчика.ПолучитьТекст());
					
					НомСтрокиПравилСравнения = НомСтрокиПравилСравнения + КоличествоСтрокОбласти;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбластиПравилСравнения;
	
КонецФункции

Функция ТекстОбработчикаПоИмени(ТекстыПравилСравнения, ИмяОбработчика)
	
	ПустойОбработчик = ";";
	
	Если ТипЗнч(ТекстыПравилСравнения) = Тип("Соответствие") Тогда
		
		ТекстОбработчика = ТекстыПравилСравнения.Получить(ИмяОбработчика);
		
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Возврат ТекстОбработчика;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПустойОбработчик;
	
КонецФункции

Функция СведенияОПоказателе(ИмяОбласти, ПараметрыОтчета)
	
	ЭтоБО = ЭтоБухОтчетность(ПараметрыОтчета);
	
	СписокКлючей = "ИмяПоказателя,Индекс,СтрИндекс,Раздел,Строка,Графа";
	Сведения = Новый Структура(СписокКлючей, "", 0, "", "", "", "");
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	МассивИндекса = Новый Массив;
	
	Если КолСтрок > 0 Тогда
		Для Инд = 0 По КолСтрок - 1 Цикл
			Если Инд = 0 Тогда
				Сведения.ИмяПоказателя = МассивСтрок[Инд];
			Иначе
				СтрИндекс = МассивСтрок[Инд];
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндекс) Тогда
					Сведения.СтрИндекс = Сведения.СтрИндекс + ?(ПустаяСтрока(Сведения.СтрИндекс), "", "_") + СтрИндекс;
					МассивИндекса.Добавить(Число(" " + СтрИндекс));
				Иначе
					Сведения.ИмяПоказателя = Сведения.ИмяПоказателя + "_" + СтрИндекс;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сведения.ИмяПоказателя = ИмяОбласти;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивИндекса) Тогда
		Если МассивИндекса.Количество() = 1 Тогда
			Сведения.Индекс = МассивИндекса[0];
		Иначе
			Сведения.Индекс = МассивИндекса;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Сведения.ИмяПоказателя, "П") Тогда
		
		Сведения.Раздел = РазделПоКодуПоказателя(Сведения.ИмяПоказателя, ЭтоБО);
		
		СтрокаПоказателя = СтрокаПоКодуПоказателя(Сведения.ИмяПоказателя, ЭтоБО);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоказателя) Тогда
			Сведения.Строка = СтрокаПоказателя;
		КонецЕсли;
		
		ГрафаПоказателя = ГрафаПоКодуПоказателя(Сведения.ИмяПоказателя);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГрафаПоказателя) Тогда
			Сведения.Графа = ГрафаПоказателя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция РазделПоКодуПоказателя(КодПоказателя, ЭтоБО = Ложь)
	Если ЭтоБО Тогда
		Возврат Сред(КодПоказателя, 3, 5);
	КонецЕсли;
	Возврат Сред(КодПоказателя, 2, 5);
КонецФункции

Функция СтрокаПоКодуПоказателя(КодПоказателя, ЭтоБО = Ложь)
	Если ЭтоБО Тогда
		Возврат Сред(КодПоказателя, 7, 5);
	ИначеЕсли СтрДлина(КодПоказателя) < 13 Тогда
		Возврат Лев(Прав(КодПоказателя, 5), 3);
	КонецЕсли;
	Возврат Сред(КодПоказателя, 9, 3);
КонецФункции

Функция ГрафаПоКодуПоказателя(КодПоказателя)
	Возврат Прав(КодПоказателя, 2);
КонецФункции

Функция КодСтраницыДляСортировки(АдресСтраницы)
	
	СортКодСтраницы = "";
	
	Если ТипЗнч(АдресСтраницы) = Тип("Число") Тогда
		СортКодСтраницы = Формат(АдресСтраницы, "ЧЦ=6; ЧН=; ЧВН=; ЧГ=");
	ИначеЕсли ТипЗнч(АдресСтраницы) = Тип("Массив") Тогда
		Для Каждого ЭлементАдресаСтраницы Из АдресСтраницы Цикл
			СортКодСтраницы = СортКодСтраницы
				+ ?(ЗначениеЗаполнено(СортКодСтраницы), "_", "") + Формат(ЭлементАдресаСтраницы, "ЧЦ=6; ЧН=; ЧВН=; ЧГ=");
		КонецЦикла;
	Иначе
		СортКодСтраницы = Прав("000000" + СокрЛП(АдресСтраницы), 6);
	КонецЕсли;
	
	Возврат СортКодСтраницы;
	
КонецФункции

Функция ЭтоБухОтчетность(ПараметрыОтчета)
	
	Перем КНД;
	
	Если ПараметрыОтчета.Свойство("КНД", КНД) Тогда
		Если КНД = "0710099"
		 ИЛИ КНД = "0710098"
		 ИЛИ КНД = "0710097"
		 ИЛИ КНД = "0710096" Тогда // только для бухотчетности
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПредставлениеПоказателя(Раздел, Строка, Графа, Индекс = 0)
	
	Представление = "";
	
	Если ЗначениеЗаполнено(Раздел) Тогда
		Представление = СтрШаблон(НСтр("ru = 'раздел %1'"), Раздел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ")
			+ СтрШаблон(НСтр("ru = 'строка %1'"), Строка);
		Если ЗначениеЗаполнено(Индекс) Тогда
			Представление = Представление + " (";
			Если ТипЗнч(Индекс) = Тип("Массив") Тогда
				Для Инд = 0 По Индекс.ВГраница() Цикл
					Представление = Представление + ?(Инд = 0, "", "/") + Формат(Индекс[Инд], "ЧГ=");
				КонецЦикла;
			Иначе
				Представление = Представление + Формат(Индекс, "ЧГ=");
			КонецЕсли;
			Представление = Представление + ")";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Графа) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Графа) И Число(" " + Графа) <> 0 Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ")
			+ СтрШаблон(НСтр("ru = 'графа %1'"), Графа);
	КонецЕсли;
	
	Возврат ВРег(Лев(Представление, 1)) + Сред(Представление, 2);
	
КонецФункции

Функция АдресСтраницыМУР(СтрокаДереваРаздела, СтрКодСтраницы = "")
	
	СтрКодСтраницы = "";
	
	КодСтраницы = Новый Массив;
	
	СтрокаДерева = СтрокаДереваРаздела;
	РодительЭлемента = ?(СтрокаДерева.Родитель = Неопределено, СтрокаДерева.Владелец(), СтрокаДерева.Родитель);
	Пока Истина Цикл
		КодСтраницы.Вставить(0, РодительЭлемента.Строки.Индекс(СтрокаДерева) + 1);
		
		Если ТипЗнч(РодительЭлемента) = Тип("ДеревоЗначений") Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаДерева = РодительЭлемента;
		
		РодительЭлемента = СтрокаДерева.Родитель;
		Если РодительЭлемента = Неопределено Тогда
			РодительЭлемента = СтрокаДерева.Владелец();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементКода Из КодСтраницы Цикл
		СтрКодСтраницы = СтрКодСтраницы + ?(ПустаяСтрока(СтрКодСтраницы), "", "_") + Формат(ЭлементКода, "ЧГ=");
	КонецЦикла;
	
	Возврат КодСтраницы;
	
КонецФункции

Функция ДанныеСтраницыМУР(ДеревоРаздела, НомерСтраницы)
	
	ВетвьДерева  = ДеревоРаздела;
	
	Для Каждого НомСтраницыЭлемент Из НомерСтраницы Цикл
		КоличествоСтрокВетви = ВетвьДерева.Строки.Количество();
		Если НомСтраницыЭлемент > КоличествоСтрокВетви Тогда
			Возврат Неопределено;
		Иначе
			ВетвьДерева = ВетвьДерева.Строки[НомСтраницыЭлемент - 1];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВетвьДерева.Данные;
	
КонецФункции

Функция НоваяСтраницаВДеревеОтчетов(ЭлементДереваОтчетов, НомерСтраницы);
	
	ВетвьДерева  = ЭлементДереваОтчетов;
	ВетвьШаблона = ВетвьДерева;
	
	КодСтраницы = "";
	
	Для Каждого НомСтраницыЭлемент Из НомерСтраницы Цикл
		
		КонечныйЭлементШаблона = Ложь;
		Если ВетвьШаблона.Строки.Количество() > 0 Тогда
			НомерСтрокиШаблона = Мин(ВетвьШаблона.Строки.Количество(), НомСтраницыЭлемент);
			Если СтрНачинаетсяС(ВетвьШаблона.Строки[НомерСтрокиШаблона - 1].КолонкаРазделыОтчета, "Стр") Тогда
				ВетвьШаблона = ВетвьШаблона.Строки[0];
			Иначе
				ВетвьШаблона = ВетвьШаблона.Строки[НомерСтрокиШаблона - 1];
			КонецЕсли;
		Иначе
			КонечныйЭлементШаблона = Истина;
		КонецЕсли;
		
		Если КонечныйЭлементШаблона Тогда
			ВетвьДерева.КодСтраницы = КодСтраницы + ?(ПустаяСтрока(КодСтраницы), "", "_") + "1";
			Возврат ВетвьДерева;
		КонецЕсли;
		
		КоличествоСтрокВетви = ВетвьДерева.Строки.Количество();
		Если НомСтраницыЭлемент > КоличествоСтрокВетви Тогда
			СкопированнаяВетвьДерева = ВетвьШаблона;
			Для Индекс = КоличествоСтрокВетви По НомСтраницыЭлемент - 1 Цикл
				СкопированнаяВетвьДерева = ВетвьДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СкопированнаяВетвьДерева, ВетвьШаблона, , "Родитель,Строки");
				СкопированнаяВетвьДерева.КолонкаНомерСтраницыРазделаОтчета = Индекс + 1;
				СкопированнаяВетвьДерева.КодСтраницы = КодСтраницы
					+ ?(ПустаяСтрока(КодСтраницы), "", "_") + Формат(Индекс + 1, "ЧГ=");
				Если СтрНачинаетсяС(СкопированнаяВетвьДерева.КолонкаРазделыОтчета, "Стр") Тогда
					ЭлементыНаименования = СтрРазделить(СкопированнаяВетвьДерева.КолонкаРазделыОтчета, " ");
					ЭлементыНаименования[ЭлементыНаименования.ВГраница()] = Формат(Индекс + 1, "ЧГ=");
					СкопированнаяВетвьДерева.КолонкаРазделыОтчета = СтрСоединить(ЭлементыНаименования, " ");
				КонецЕсли;
			КонецЦикла;
			ВетвьДерева = СкопированнаяВетвьДерева;
		Иначе
			ВетвьДерева = ВетвьДерева.Строки[НомСтраницыЭлемент - 1];
		КонецЕсли;
		
		КодСтраницы = КодСтраницы + ?(ПустаяСтрока(КодСтраницы), "", "_") + Формат(НомСтраницыЭлемент, "ЧГ=");
		
	КонецЦикла;
	
	Возврат ВетвьДерева;
	
КонецФункции

Процедура КлючИДанныеМногострочнойЧастиМУР(СтраницаМУР, КлючДляПоиска, КлючМногострочнойЧасти, ДанныеМногострочнойЧасти)
	
	// Тип параметра КлючМногострочнойЧасти   - массив.
	// Тип параметра ДанныеМногострочнойЧасти - массив.
	
	Для Каждого ГруппаМногострочнойЧасти Из СтраницаМУР.ДанныеМногострочныхЧастей Цикл
		
		ТекущиеДанныеМногострочнойЧасти = ГруппаМногострочнойЧасти.Значение;
		
		Если ТипЗнч(ТекущиеДанныеМногострочнойЧасти) = Тип("ДеревоЗначений")
			И ТекущиеДанныеМногострочнойЧасти.Строки.Количество() > 0 Тогда
			
			Если ТекущиеДанныеМногострочнойЧасти.Строки[0].Данные.Свойство(КлючДляПоиска) Тогда
				КлючМногострочнойЧасти.Добавить(ГруппаМногострочнойЧасти.Ключ);
				ДанныеМногострочнойЧасти.Добавить(ТекущиеДанныеМногострочнойЧасти);
				Прервать;
			Иначе
				КлючИДанныеМногострочнойЧастиМУР(ТекущиеДанныеМногострочнойЧасти.Строки[0],
					КлючДляПоиска, КлючМногострочнойЧасти, ДанныеМногострочнойЧасти);
				
				Если ЗначениеЗаполнено(ДанныеМногострочнойЧасти) Тогда
					КлючМногострочнойЧасти.Вставить(0, ГруппаМногострочнойЧасти.Ключ);
					ДанныеМногострочнойЧасти.Вставить(0, ТекущиеДанныеМногострочнойЧасти);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуВДеревоЕслиНеНайдена(УзелДерева, ИмяКолонки, ОписаниеТиповКолонки = Неопределено)
	
	Перем Дерево;
	
	Если ТипЗнч(УзелДерева) = Тип("ДеревоЗначений") Тогда
		Дерево = УзелДерева;
	Иначе
		Дерево = УзелДерева.Владелец();
	КонецЕсли;
	
	Если Дерево.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Дерево.Колонки.Добавить(ИмяКолонки, ?(ОписаниеТиповКолонки = Неопределено, Новый ОписаниеТипов("Булево"), ОписаниеТиповКолонки));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
//  безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
//  присутствующих в составе конфигурации. В результате при выполнении алгоритма:
//   - игнорируются попытки установки привилегированного режима,
//   - запрещаются все внешние (по отношению к платформе 1С:Предприятие) действия (COM,
//     загрузка внешних компонент, запуск внешних приложений и команд операционной системы,
//     доступ к файловой системе и Интернет-ресурсам),
//   - запрещается отключение использования разделителей сеанса,
//   - запрещается изменение значений разделителей сеанса (если разделение данным разделителем не
//     является условно выключенным),
//   - запрещается изменение объектов, которые управляют состоянием условного разделения.
//
// Параметры:
//  Алгоритм  - Строка       - содержащая произвольный алгоритм на встроенном языке 1С:Предприятия.
//  П         - Произвольный - в качестве значения данного параметра может быть передано значение,
//    которое требуется для выполнения алгоритма (при этом в тексте алгоритма обращение к данному
//    значению должно осуществляться как к имени переменной "П").
//
Процедура ВыполнитьАлгоритмВБезопасномРежиме(Знач Алгоритм, Знач П = Неопределено)
	
	УстановитьБезопасныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Выполнить Алгоритм;
	
КонецПроцедуры

#КонецОбласти
