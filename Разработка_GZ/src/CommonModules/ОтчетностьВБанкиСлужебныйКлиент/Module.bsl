////////////////////////////////////////////////////////////////////////////////
// ОтчетностьВБанкиСлужебный: механизм отправки отчетов в банки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Отправляет отчет в банк.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//         * РезультатВызова - Булево - если Истина - то отчет успешно отправлен.
//         * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  Отчет - ДокументСсылка.РегламентированныйОтчет - ссылка на отчет;
//  Организация - СправочникСсылка.Организации - ссылка на организацию;
//  Банк - ОпределяемыйТип.СправочникБанки - ссылка на банк;
//  ДвоичныеДанныеОтчета - ДвоичныеДанные - двоичные данные отправляемого отчета.
//  ИмяФайла - Строка - имя отправляемого файла
//
Процедура ОтправитьОтчетВБанк(ОписаниеОповещения, Отчет, Организация, Банк, ДвоичныеДанныеОтчета, ИмяФайла) Экспорт
	
	ПодключенаИнтернетПоддержка = Ложь;
	СоглашениеПринято = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("ТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	ПараметрыКлиента.Вставить("ВерсияОС", СистемнаяИнформация.ВерсияОС);

	ВозможнаОтправка = ОтчетностьВБанкиСлужебныйВызовСервера.ВозможнаОтправкаОтчета(
		Организация, Банк, ПараметрыКлиента, ПодключенаИнтернетПоддержка, СоглашениеПринято);
	
	Если НЕ ВозможнаОтправка Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Банк", Банк);
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеОтчета", ДвоичныеДанныеОтчета);
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиОтчета", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("Отчет", Отчет);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("СоглашениеПринято", СоглашениеПринято);
	
	Если Не ПодключенаИнтернетПоддержка Тогда
		ТекстВопроса = НСтр("ru = 'Для отправки отчета в банк необходимо подключиться к интернет-поддержке пользователей.
							|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПродолжитьОтправкуОтчетаПослеПодключенияИнтернетПоддержки(ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьКомпонентуVPNKeyTLS(ДополнительныеПараметры)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПодключенияВКСбербанка", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	Если ПодсистемаВнешниеКомпонентыСуществует() Тогда
		ПараметрыПодключения = ПараметрыПодключения();
		ПараметрыПодключения.ТекстПояснения = 
			НСтр("ru = 'Для отправки отчета требуется внешняя компонента VPN-Key-TLS.'");
			
		ПодключитьКомпоненту(ОписаниеОповещения, "VPNKeyTLS",,ПараметрыПодключения);
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Отправка отчета невозможна, так как в программе отсутствует подсистема работы с внешними компонентами.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Регламентированная отчетность.Отчетность в банки. Не удалось подключить внешнюю компоненту VPN-Key-TLS, 
                               |так как в программе отсутствует подсистема БСП СтандартныеПодсистемы.ВнешниеКомпоненты.'") + ОписаниеОшибки;
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСообщения, "Ошибка");
		
		Результат = Новый Структура;
		Результат.Вставить("Подключено", Ложь);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыСоглашения(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;

	ПодключитьКомпонентуVPNKeyTLS(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	Иначе
		ПродолжитьОтправкуОтчетаПослеПодключенияИнтернетПоддержки(ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОтправкуОтчетаПослеПодключенияИнтернетПоддержки(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.СоглашениеПринято Тогда
		
		ПодключитьКомпонентуVPNKeyTLS(ДополнительныеПараметры);
		
	Иначе
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыСоглашения", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.Соглашение", , , , , , ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодключенияВКСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Подключено Тогда
		Операция = НСтр("ru = 'Подключение внешней коспоненты.'");
		ТекстОшибки = Результат.ОписаниеОшибки;
		ТекстСообщения = НСтр("ru = 'Не удалось найти внешнюю компоненту для работы с токеном. Обратитесь к администратору.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат.ПодключаемыйМодуль;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
		
	Оповещение = Новый ОписаниеОповещения("ПолучитьПараметрыТокенаПослеТихогоСтартаСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуТихогоСтартаСбербанк", ЭтотОбъект);
	ПодключаемыйМодуль.НачатьВызовТихийСтарт(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьПараметрыТокенаПослеТихогоСтартаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при запуске клиента токена.
									|Убедитесь, что токен вставлен в компьютер'");
		ТекстОшибки = НСтр("ru = 'Внешний модуль VpnKey-TLS при запуске Start.exe токена вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		Операция = НСтр("ru = 'Запуск клиента токена.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПолученияИнформацииОТокене = Новый ОписаниеОповещения("ПослеПолученияИнформацииОТокенеСбербанк",
		ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПолученияИнформацииОТокенеСбербанк", ЭтотОбъект);
	
	ВерсияПрошивки = 0;
	ТипУстройства = "";

	Попытка
		ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПолучитьПараметрыVPNKeyTLS(
			ОповещениеПослеПолученияИнформацииОТокене, ВерсияПрошивки, ТипУстройства);
	Исключение
		Операция = НСтр("ru = 'Получение информации о банковском ключе'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'При получении информации о токене произошла ошибка:
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	КонецПопытки
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииОТокенеСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Получение информации о банковском ключе'");
		ТекстОшибки = НСтр("ru = 'При получении информации о токене произошла ошибка.
							|Внешний модуль VpnKey-TLS вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ТипУстройства = ПараметрыВызова.Получить(1);
	
	ДополнительныеПараметры.Вставить("ТипУстройства", ТипУстройства);
	
	Если ТипУстройства = "SCR" Тогда // экранный токен
		Оповещение = Новый ОписаниеОповещения("ПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры,
			"ОбработатьОшибкуПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект);
		ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПредъявитьПинЭкр(Оповещение);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПослеВводаДанныхАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ЗапросПинКодаСбербанк", , , , , , Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВводаДанныхАутентификацииСбербанк(ДанныеАутентификации, ДополнительныеПараметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено ИЛИ ДанныеАутентификации = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	НомерКонтейнера = ДанныеАутентификации.НомерКонтейнера;
	ПинКод = ДанныеАутентификации.ПинКод;
	
	ДополнительныеПараметры.Вставить("НомерКонтейнера", НомерКонтейнера);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПредъявитьПин(Оповещение, НомерКонтейнера, ПинКод);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияИнформацииОТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении информации о токене произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение информации о токене.'");
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	
КонецПроцедуры

Процедура ПослеПредъявленияПинаНаТокенеСбербанк(РезультатАвторизации, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатАвторизации = 0 Тогда
		
		ОповещениеПослеПолученияСпискаИдентификаторов = Новый ОписаниеОповещения(
			"ПослеПолученияСпискаСертификатовСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры,
			"ОбработатьОшибкуПолученияСпискаИдентификаторовСертификатов", ЭтотОбъект);
		
		ИдентификаторыСертификатов = "";

		ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПолучитьСписокИдентСертификатовVPNKeyTLS(
			ОповещениеПослеПолученияСпискаИдентификаторов, "0", ИдентификаторыСертификатов);

		
	Иначе
			
		Если РезультатАвторизации = 28 Тогда
			
			ШаблонСообщения = НСтр("ru = 'PIN%1 заблокирован после трех неверных попыток ввода пароля. 
                                    |Для разблокировки воспользуйтесь PUK%1-кодом, который указан в конверте рядом с PIN%1-кодом. 
                                    |PUK%1-код нужно вводить через браузер, предварительно запустив start.exe на токене. 
                                    |После трех неверных попыток ввода PUK%1-кода пользователь будет заблокирован.'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.НомерКонтейнера);
			
			ПоказатьПредупреждение(,ТекстСообщения);

		ИначеЕсли РезультатАвторизации = 25 ИЛИ РезультатАвторизации = 27 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Учетная запись (PIN%1) заблокирована после трех неверных попыток PUK%1-кода. 
                                    |Для создания новой учетной записи (PIN%1) обратитесь в тех. поддержку Банка.'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.НомерКонтейнера);
			
			ПоказатьПредупреждение(,ТекстСообщения);
			
		ИначеЕсли РезультатАвторизации = 29 ИЛИ РезультатАвторизации = 30 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Неверные данные аутентификации (PIN%1 или пароль). 
                                    |Учетная запись (PIN%1) будет заблокирована после трех неверных попыток ввода пароля.'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.НомерКонтейнера);
			
			ПоказатьПредупреждение(,ТекстСообщения);
			
		Иначе
			ОчиститьСообщения();
			
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить проверку PIN и пароля. 
                                   |Извлеките токен из компьютера, подключите его заново и повторите отправку.'");
			
			ТекстОшибки = НСтр("ru = 'Внешний модуль VpnKey-TLS при авторизации на токене вернул код ошибки: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатАвторизации);
			
			Операция = НСтр("ru = 'Авторизация на токене'");
			
			ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияСпискаСертификатовСТокенаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		ШаблонОшибки = НСтр("ru = 'При получении списка сертификатов на банковском ключе произошла ошибка.
							|Внешний модуль VpnKey-TLS при получении списка доступных сертификатов вернул код ошибки: %1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, РезультатВызова);
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСертификатов = ПараметрыВызова[1];
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		ИдентификаторСертификата = Текст;
		Прервать;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден ни один сертификат на токене'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатАсинхроннойПодписиСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПодписиСбербанк", ЭтотОбъект);
		
	СтрокаПодписи = Base64Строка(ДополнительныеПараметры.ДвоичныеДанныеОтчета);
		
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПодписатьДанныеЧерезVPNKeyTLSФорматPKCS7(
		Оповещение, СтрокаПодписи, ИдентификаторСертификата, "-1", "0", "1");
		
КонецПроцедуры

Процедура ОбработатьОшибкуПодписиСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При подписи данных произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Подпись данных.'");
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	
КонецПроцедуры

Процедура ОбработатьРезультатАсинхроннойПодписиСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
							|Внешний модуль VpnKey-TLS при подписании вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ДополнительныеПараметры.ПодключаемыйМодуль;
	ТипУстройства = ДополнительныеПараметры.ТипУстройства;
	Представление = НСтр("ru = 'Отчет в банк.'");
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДанныхПодписи", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ТипУстройства = "UNKNOWN" ИЛИ ТипУстройства = "ORDINARY" Тогда
		
		ПолучитьПодписанныеДанныеСбербанк(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль);
	
	Иначе // сенсорный или экранный
		ПараметрыФормы = Новый Структура("ОбъектПодписи, ТипУстройства", Представление, ТипУстройства);
		ОткрытьФорму("Отчет.БухгалтерскаяОтчетностьВБанк.Форма.ОжиданиеПодписиСбербанк", ПараметрыФормы, , ,
			, , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеПолученияДанныхПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьДвоичныеДанные = Base64Значение(Результат.ЭП);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыКлиента = Новый Структура;
	ПараметрыКлиента.Вставить("ТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	ПараметрыКлиента.Вставить("ВерсияОС", СистемнаяИнформация.ВерсияОС);
	
	ОперацияВыполненаУспешно = ОтчетностьВБанкиСлужебныйВызовСервера.ОтправитьДанныеВБанк(
		ДополнительныеПараметры.Организация, ДополнительныеПараметры.Банк, ДополнительныеПараметры.ДвоичныеДанныеОтчета,
		ДополнительныеПараметры.ИмяФайла, ЭлектроннаяПодписьДвоичныеДанные, ПараметрыКлиента, ДополнительныеПараметры.Отчет, ТекущаяДата());
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, ОперацияВыполненаУспешно);
	
КонецПроцедуры

Процедура ПолучитьПодписанныеДанныеСбербанк(Оповещение, ПодключаемыйМодуль)
	
	Состояние = 0;
	ЭП = "";
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	Параметры.Вставить("ОповещениеПослеПолученияПодписи", Оповещение);
	
	ОповещениеВызова = Новый ОписаниеОповещения("ПослеПопыткиПолученияДанныхПодписиСбербанк", ЭтотОбъект, Параметры,
		"ОбработатьОшибкуПолученияДанныхПодписиСбербанк", ЭтотОбъект);

	ПодключаемыйМодуль.НачатьВызовПолучитьДанныеПодписиИзVPNKeyTLSPKCS7(ОповещениеВызова, Состояние, ЭП);
	
КонецПроцедуры

Процедура ПослеПопыткиПолученияДанныхПодписиСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
								|Внешний модуль VpnKey-TLS при подписании вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Состояние = ПараметрыВызова.Получить(0);
	
	Если Состояние = "COMPLETE" Тогда
		Результат = Новый Структура("Успех, ЭП", Истина, ПараметрыВызова.Получить(1));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	ИначеЕсли Состояние = "FAILED" ИЛИ Состояние = "REJECTED" Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
								|Код состояния: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Состояние);
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	Иначе
		ПолучитьПодписанныеДанныеСбербанк(
			ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, ДополнительныеПараметры.ПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияДанныхПодписиСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении данных подписи произошла ошибка:
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение данных подписи'");
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробнаяИнформация);
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСпискаИдентификаторовСертификатов(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Операция = НСтр("ru = 'Получение списка сертификатов с токена'");
	ТекстСообщения = НСтр("ru = 'Не удалось получить информацию о сертификатах с токена'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПослеПредъявленияПинаНаТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При аутентификации на токене произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Предъявление пин-кода на токене'");
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	
КонецПроцедуры

Процедура ОбработатьОшибкуТихогоСтартаСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При запуске программы банка произошла ошибка:
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Запуск программы Start.exe'");
	ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОтчета, Ложь);
	
КонецПроцедуры

#Область ОболочкаДляАПИБСП_ВнешниеКомпоненты

Функция ПодсистемаВнешниеКомпонентыСуществует()
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты");

КонецФункции

Функция ПараметрыПодключения()
	
	Если ПодсистемаВнешниеКомпонентыСуществует() Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ВнешниеКомпонентыКлиент");
		Возврат Модуль.ПараметрыПодключения();
	КонецЕсли;
	
КонецФункции

Процедура ПодключитьКомпоненту(Оповещение, Идентификатор, Версия = Неопределено, ПараметрыПодключения = Неопределено) Экспорт
	
	Если ПодсистемаВнешниеКомпонентыСуществует() Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ВнешниеКомпонентыКлиент");
		Модуль.ПодключитьКомпоненту(Оповещение, Идентификатор, Версия, ПараметрыПодключения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
