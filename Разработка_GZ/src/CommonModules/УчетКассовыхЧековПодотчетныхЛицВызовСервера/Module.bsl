
#Область ПрограммныйИнтерфейс

// Получает данные выбора номенклатуры для события автоподбора номенклатуры.
//
// Параметры:
//  Параметры				 - Структура - см. УчетКассовыхЧековПодотчетныхЛицКлиент.НоменклатураАвтоПодбор
//  НоменклатураНаименование - Строка - наименование номенклатуры из чека
// 
// Возвращаемое значение:
//  СписокЗначений - варианты создания номенклатуры по виду номенклатуры, плюс варианты номенклатуры по полнотекстовому поиску
//
Функция ДанныеВыбораНоменклатуры(Параметры, НоменклатураНаименование) Экспорт
	
	ДанныеВыбора = РаботаСНоменклатуройВызовСервера.ДанныеВыбораНоменклатуры(Параметры, Ложь, Истина);
	
	ДополнитьДанныеВыбораВариантамиИзБазы(ДанныеВыбора, НоменклатураНаименование);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Получает ставку НДС и единицу измерения из чека подотчетника. Используется при создании новой номенклатуры.
//
// Параметры:
//  Чек						 - ДокументСсылка.КассовыйЧекПодотчетногоЛица - ссылка на чек
//  НоменклатураНаименование - Строка - наименование номенклатуры из чека
// 
// Возвращаемое значение:
//  Структура - СтавкаНДС, ЕдиницаИзмерения
//
Функция ДанныеЧека(Чек, НоменклатураНаименование) Экспорт
	
	ДанныеЧека = Новый Структура;
	ДанныеЧека.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	ДанныеЧека.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Документ.КассовыйЧекПодотчетногоЛица.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.НоменклатураНаименование = &НоменклатураНаименование";
	
	Запрос.УстановитьПараметр("Ссылка", Чек);
	Запрос.УстановитьПараметр("НоменклатураНаименование", НоменклатураНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека.СтавкаНДС = Выборка.СтавкаНДС;
		ДанныеЧека.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат ДанныеЧека;
	
КонецФункции

// Сохраняет отключение видимости баннера о том, что подключен аппаратный сканер штрихкода.
//
Процедура СохранитьОтключениеВидимостиБаннераПодключенАппаратныйСканер() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ВРег("ДокументДляЗагрузкиКассовыхЧеков"),
		ВРег("ПодключенАппаратныйСканер"),
		Ложь);
	
КонецПроцедуры

#Область ФормыСписков

// Выполняет регулярную проверку сообщений мобильного приложения, отправленных через шину мобильных приложений.
// Предназначена для вызова из подключаемого обработчика ожидания из формы списка документов расходов.
// 
// Порядок использования следующий:
// 1. В форме списка размещается реквизит, хранящий необходимость регулярной проверки сообщений и интервал этой проверки
// 2. В ПриСозданииНаСервере вызывается РегистрыСведений.МобильноеПриложениеСканированиеЧеков.НачатьПроверкуСообщенийИзФормыСписка,
//    возвращающая интервал регулярной проверки, либо пустое значение (Неопределено или 0), если регулярная проверка не нужна.
//    Это значение записывается в реквизит из п. 1
// 3. Если значение не пустое, то в ПриОткрытии запускается обработчик оповещения с интервалом из п. 2.
//    Обработчик оповещения содержит вызов этой процедуры.
// 
Процедура НачатьПроверкуСообщенийИзФормыСписка() Экспорт
	
	РегистрыСведений.МобильноеПриложениеСканированиеЧеков.НачатьПроверкуСообщенийИзФормыСписка();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗапускДлительныхОпераций 

// Методы асинхронного запуска действий на сервере - см. УчетКассовыхЧековПодотчетныхЛицКлиент
// Все вызывают одноименные методы из УчетКассовыхЧековПодотчетныхЛиц с тем же набором параметров

Функция НачатьПодготовкуСодержимогоЧеков(Знач ЗагружаемыеЧеки, Знач АдресДанныеФормы, Знач ИдентификаторФормы) Экспорт
	
	Возврат УчетКассовыхЧековПодотчетныхЛиц.НачатьПодготовкуСодержимогоЧеков(
		ЗагружаемыеЧеки,
		АдресДанныеФормы,
		ИдентификаторФормы);
		
КонецФункции

Функция НачатьОбновлениеЧековКЗагрузке(Знач АдресДанныеФормы, Знач ИдентификаторФормы) Экспорт
	
	Возврат УчетКассовыхЧековПодотчетныхЛиц.НачатьОбновлениеЧековКЗагрузке(АдресДанныеФормы, ИдентификаторФормы);
	
КонецФункции

Функция ЗавершитьОбновлениеЧековКЗагрузке(Знач АдресДанныеФормы, Знач АдресОбновленныеДанные) Экспорт
	
	Возврат УчетКассовыхЧековПодотчетныхЛиц.ЗавершитьОбновлениеЧековКЗагрузке(АдресДанныеФормы, АдресОбновленныеДанные);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьДанныеВыбораВариантамиИзБазы(ДанныеВыбора, НоменклатураНаименование)
	
	НайденнаяНоменклатура = НайтиНоменклатуруПоНаименованию(НоменклатураНаименование);
	Для Каждого ЭлементСписка Из НайденнаяНоменклатура Цикл
		Если ДанныеВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиНоменклатуруПоНаименованию(Знач Наименование)
	
	НайденнаяНоменклатура = Новый СписокЗначений;
	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	РезультатыПоиска = НайтиОбъектыПоНаименованию(Наименование, МетаданныеНоменклатуры);
	
	// Если нашли хоть что-то, то дальше не ищем.
	Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
		Для каждого Элемент Из РезультатыПоиска Цикл
			НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	// Проверка, что полнотекстовый поиск отключен
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	// Если не нашли, то пробуем полнотекстовый поиск.
	КоличествоВариантовПоиска = 20;
	РезультатыПоиска = НайтиОбъектыПолнотекстовымПоиском(
	"""" + Наименование + """", МетаданныеНоменклатуры, КоличествоВариантовПоиска, "Наименование");
	
	// Если нашли хоть что-то, то дальше не ищем.
	Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
		Для каждого Элемент Из РезультатыПоиска Цикл
			НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	// Если не нашли, то пробуем полнотекстовый поиск по словам.
	КоличествоСлов = 5;
	КоличествоРезультатовНаСлово = 100;
	РезультатыПоиска = НайтиОбъектыПолнотекстовымПоискомПоСловам(
	Наименование, МетаданныеНоменклатуры, КоличествоСлов, КоличествоРезультатовНаСлово, "Наименование");
	
	// Если нашли хоть что-то, то дальше не ищем.
	Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
		Для каждого Элемент Из РезультатыПоиска Цикл
			НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
	
	// Если не нашли, то пробуем полнотекстовый поиск по синонимам.
	КоличествоСлов = 5;
	КоличествоРезультатов = 20;
	РезультатыПоиска = НайтиОбъектыПолнотекстовымПоискомПоСинонимам(
	Наименование, МетаданныеНоменклатуры, КоличествоСлов, КоличествоРезультатов, "Наименование");
	
	// Если нашли хоть что-то, то дальше не ищем.
	Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
		Для каждого Элемент Из РезультатыПоиска Цикл
			НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		Возврат НайденнаяНоменклатура;
	КонецЕсли;
		
	Возврат НайденнаяНоменклатура;
	
КонецФункции

Функция НайтиОбъектыПоНаименованию(Знач Наименование, Знач МетаданныеОбъекта)
	
	ПроверятьИерархию = Ложь;
	Если МетаданныеОбъекта.Иерархический 
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ПроверятьИерархию = Истина;
	КонецЕсли;
	
	// Поиск в начале наименования.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	Таблица.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И &УсловиеПоИерархии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", МетаданныеОбъекта.ПолноеИмя());
	
	УсловиеПоИерархии = "ИСТИНА";
	Если ПроверятьИерархию Тогда
		УсловиеПоИерархии = "НЕ ЭтоГруппа";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИерархии", УсловиеПоИерархии);
	
	НайденныеОбъекты = Новый СписокЗначений;
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат НайденныеОбъекты;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		НайденныеОбъекты.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоиском(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоРезультатов, Знач Реквизит = Неопределено)
	
	ПроверятьИерархию = Ложь;
	Если МетаданныеОбъекта.Иерархический 
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ПроверятьИерархию = Истина;
	КонецЕсли;
	
	НайденныеОбъекты = Новый СписокЗначений;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(ТекстПоиска, КоличествоРезультатов);
	СписокПоиска.ОбластьПоиска.Добавить(МетаданныеОбъекта);
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		Возврат НайденныеОбъекты;
	КонецПопытки;
	РезультатПоиска = Новый СписокЗначений;
	Для Каждого Элемент Из СписокПоиска Цикл
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РеквизитРезультата = РеквизитРезультатаПолнотекстовогоПоиска(Элемент);
			Если СтрНайти(РеквизитРезультата, Реквизит) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		РезультатПоиска.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Если ПроверятьИерархию Тогда
		ЗначенияЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(РезультатПоиска.ВыгрузитьЗначения(), "ЭтоГруппа");
		Для каждого КлючЗначение Из ЗначенияЭтоГруппа Цикл
			Если КлючЗначение.Значение = Истина Тогда // ЭтоГруппа
				ЭлементСписка = РезультатПоиска.НайтиПоЗначению(КлючЗначение.Ключ);
				РезультатПоиска.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(РезультатПоиска.ВыгрузитьЗначения(), "ПометкаУдаления");
	Для каждого КлючЗначение Из ЗначенияПометкаУдаления Цикл
		Если КлючЗначение.Значение = Истина Тогда // ПометкаУдаления
			ЭлементСписка = РезультатПоиска.НайтиПоЗначению(КлючЗначение.Ключ);
			РезультатПоиска.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из РезультатПоиска Цикл
		НайденныеОбъекты.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоискомПоСловам(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоСлов, Знач КоличествоРезультатовНаСлово, Знач Реквизит = Неопределено)
	
	Результаты = Новый ТаблицаЗначений;
	Результаты.Колонки.Добавить("Объект");
	Результаты.Колонки.Добавить("Представление");
	Результаты.Колонки.Добавить("Количество");
	
	НаборСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТекстПоиска);
	
	ОбработаноСлов = 0;
	
	Для каждого Слово Из НаборСлов Цикл
		
		Если КороткоеСлово(Слово) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденоПоСлову = НайтиОбъектыПолнотекстовымПоиском("""" + Слово + """", МетаданныеОбъекта, КоличествоРезультатовНаСлово, Реквизит);
		
		Для каждого Элемент Из НайденоПоСлову Цикл
			СтрокаОбъекта = Результаты.Найти(Элемент.Значение, "Объект");
			Если СтрокаОбъекта = Неопределено Тогда
				СтрокаОбъекта = Результаты.Добавить();
				СтрокаОбъекта.Объект = Элемент.Значение;
				СтрокаОбъекта.Представление = Элемент.Представление;
				СтрокаОбъекта.Количество = 1;
			Иначе
				СтрокаОбъекта.Количество = СтрокаОбъекта.Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбработаноСлов = ОбработаноСлов + 1;
		
		Если ОбработаноСлов >= КоличествоСлов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныеОбъекты = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат НайденныеОбъекты;
	КонецЕсли;
	
	Результаты.Сортировать("Количество Убыв");
	МаксКоличество = Результаты[0].Количество;
	
	Для каждого СтрокаОбъекта Из Результаты Цикл
		Если СтрокаОбъекта.Количество < МаксКоличество Тогда
			Прервать;
		КонецЕсли;
		НайденныеОбъекты.Добавить(СтрокаОбъекта.Объект, СтрокаОбъекта.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоискомПоСинонимам(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоСлов, Знач КоличествоРезультатов, Знач Реквизит = Неопределено)
	
	НаборСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТекстПоиска);
	ОбработаноСлов = 0;
	СтрокаПоиска = "";
	
	Для каждого Слово Из НаборСлов Цикл
		Если КороткоеСлово(Слово) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			СтрокаПоиска = СтрокаПоиска + " ИЛИ ";
		КонецЕсли;
		СтрокаПоиска = СтрокаПоиска + "!" + Слово;
		ОбработаноСлов = ОбработаноСлов + 1;
		Если ОбработаноСлов >= КоличествоСлов Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеОбъекты = НайтиОбъектыПолнотекстовымПоиском(СтрокаПоиска, МетаданныеОбъекта, КоличествоРезультатов, Реквизит);
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция КороткоеСлово(Слово)
	
	// Механика полнотекстового поиска не умеет исключать союзы, предлоги и тому подобные служебные слова.
	// Поэтому пытаемся их исключить ограничением длины слова.
	// Обычно семантически значимые слова в русском языке имеют длину от трех букв.
	МинимальнаяДлинаСлова = 3;
	
	Возврат СтрДлина(Слово) < МинимальнаяДлинаСлова;
	
КонецФункции

Функция РеквизитРезультатаПолнотекстовогоПоиска(Знач РезультатПоиска)
	
	Индекс = СтрНайти(РезультатПоиска.Описание, ":");
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(РезультатПоиска.Описание, Индекс - 1);
	
КонецФункции

#КонецОбласти
