////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РАСШИФРОВОК БУХГАЛТЕРСКОЙ ОТЧЕТНОСТИ ДЛЯ БАНКОВ
//  Модуль предназначен для заполнения отчетов с расшифровками показателей
//  бухгалтерской отчетности, отправляемых в банк.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет отчет "Расшифровки бухгалтерской отчетности" по данным информационной базы.
// Вызывается из РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет().
//
// Параметры:
//   ИДРедакцииОтчета - Строка - имя формы регл. отчета.
//   ПараметрыОтчета - Структура - параметры регл. отчета.
//   Контейнер - Структура - данные регл. отчета.
//
Процедура ЗаполнитьРасшифровкиБухгалтерскойОтчетности(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
		ЗаполнитьОтчетРасшифровкиБухгалтерскойОтчетностиФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные xml-файла выгрузки плана счетов.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, данные которой выгружаются.
//
// Возвращаемое значение:
//	ДвоичныеДанные - Данные xml-файла.
//
Функция ВыгрузитьПланСчетов(Организация) Экспорт
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиПланаСчетов(Организация);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяВременногоФайла, "windows-1251");
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(КомпоновщикXML, "ИдФайл",    ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(КомпоновщикXML, "ВерсПрог",  ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(КомпоновщикXML, "ВерсФорм",  ПараметрыВыгрузки.ВерсФорм);
	
	ВывестиУзел_ПланСчетов_Документ(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОтчетРасшифровкиБухгалтерскойОтчетностиФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер)
	
	Если ПараметрыОтчета.РасшифровкиПоказателей = Неопределено Тогда
		ПараметрыОтчета.РасшифровкиПоказателей = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Заполнить_ОСВ(ПараметрыОтчета);
	
	Заполнить_АнализСчета(ПараметрыОтчета);
	
	Заполнить_Операции(ПараметрыОтчета);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура Заполнить_ОСВ(ПараметрыОтчета)
	
	ИмяРаздела = "ОборотноСальдоваяВедомость";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеИПредставлениеСтраницы = Неопределено;
		
		НачалоПериода = НачалоМесяца(СтраницаРаздела.Параметры.ДатаНачалаПериода);
		КонецПериода  = КонецМесяца(СтраницаРаздела.Параметры.ДатаКонцаПериода);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("СписокОрганизаций", ПараметрыОтчета.СписокОрганизаций);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
		ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
		
		ДанныеИПредставлениеСтраницы = Новый Структура;
		
		Заполнить_ОСВ_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
		
		СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить_АнализСчета(ПараметрыОтчета)
	
	ИмяРаздела = "АнализСчета";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	ТипДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	ПериодыОтчетов = Новый ТаблицаЗначений;
	ПериодыОтчетов.Колонки.Добавить("НачалоПериода", ТипДата);
	ПериодыОтчетов.Колонки.Добавить("КонецПериода",  ТипДата);
	ПериодыОтчетов.Колонки.Добавить("ПрефиксВидаФайла",  ТипСтрока);
	ПериодыОтчетов.Колонки.Добавить("ШаблонИмениФайла",  ТипСтрока);
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОтчета = СтраницаРаздела.Параметры.Счет;
		Если ЗначениеЗаполнено(СчетОтчета)
		   И СчетОтмеченВСписке(СчетОтчета, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетОтчета);
			
			ПрефиксВидаФайла = "АнализСчета" + "." + СчетОтчета.УникальныйИдентификатор() + ".";
			ШаблонИмениФайла = "Сегмент %1 анализа счета " + СвойстваСчета.Код;
			
			ПериодыОтчетов.Очистить();
			Если СтраницаРаздела.Параметры.Свойство("ДатаНачалаПериода") Тогда
				// Отчет формируется за несколько периодов, сами периоды указаны во вложенных строках.
				Для Каждого СтрокаПериода Из СтраницаРаздела.Строки Цикл
					ПериодОтчета = ПериодыОтчетов.Добавить();
					ПериодОтчета.НачалоПериода = НачалоМесяца(СтрокаПериода.Параметры.ДатаНачалаПериода);
					ПериодОтчета.КонецПериода  = КонецМесяца(СтрокаПериода.Параметры.ДатаКонцаПериода);
					ПериодОтчета.ПрефиксВидаФайла = ПрефиксВидаФайла 
						+ СтрокаГГММ_ГГММ(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода) + ".";
					ПериодОтчета.ШаблонИмениФайла = ШаблонИмениФайла 
						+ " за " + ПредставлениеПериода(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода);
				КонецЦикла;
				
			Иначе
				// Отчет строится за один период - последний месяц периода отчета.
				ПериодОтчета = ПериодыОтчетов.Добавить();
				ПериодОтчета.КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
				ПериодОтчета.НачалоПериода = НачалоМесяца(ПериодОтчета.КонецПериода);
				ПериодОтчета.ПрефиксВидаФайла = ПрефиксВидаФайла;
				ПериодОтчета.ШаблонИмениФайла = ШаблонИмениФайла;
				
			КонецЕсли;
			
			Для Каждого ПериодОтчета Из ПериодыОтчетов Цикл
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("Организация",       ПараметрыОтчета.Организация);
				ПараметрыЗаполнения.Вставить("СписокОрганизаций", ПараметрыОтчета.СписокОрганизаций);
				ПараметрыЗаполнения.Вставить("Счет",          СтраницаРаздела.Параметры.Счет);
				ПараметрыЗаполнения.Вставить("НачалоПериода", ПериодОтчета.НачалоПериода);
				ПараметрыЗаполнения.Вставить("КонецПериода",  ПериодОтчета.КонецПериода);
				ПараметрыЗаполнения.Вставить("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
				ПараметрыЗаполнения.Вставить("ПрефиксВидаФайла",        ПериодОтчета.ПрефиксВидаФайла);
				ПараметрыЗаполнения.Вставить("ШаблонИмениФайла",        ПериодОтчета.ШаблонИмениФайла);
				
				Заполнить_АнализСчета_ЗаПериод(ПараметрыЗаполнения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить_Операции(ПараметрыОтчета)
	
	ИмяРаздела = "ОперацииПоБанковскимСчетам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	ПараметрыРаздела = ПараметрыРаздела_Операции();
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл // По каждому бух.счету
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетВерхнегоУровня = СтраницаРаздела.Параметры.Счет;
		
		Если НЕ ЗначениеЗаполнено(СчетВерхнегоУровня)
		 ИЛИ НЕ СчетОтмеченВСписке(СчетВерхнегоУровня, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетВерхнегоУровня);
		
		ПараметрыРаздела.СчетВерхнегоУровня     = СчетВерхнегоУровня;
		ПараметрыРаздела.КодСчетаВерхнегоУровня = СвойстваСчета.Код;
		ПараметрыРаздела.СчетаВИерархии         = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		
		Для Каждого СтрокаПериода Из СтраницаРаздела.Строки Цикл // По периодам отчета
			ПараметрыРаздела.НачалоПериода  = НачалоДня(СтрокаПериода.Параметры.ДатаНачалаПериода);
			ПараметрыРаздела.КонецПериода   = КонецДня(СтрокаПериода.Параметры.ДатаКонцаПериода);
			
			ПараметрыРаздела.ПрефиксВидаФайла = "БанковскиеСчета" + "."
				+ СчетВерхнегоУровня.УникальныйИдентификатор() + "."
				+ СтрокаГГММ_ГГММ(ПараметрыРаздела.НачалоПериода, ПараметрыРаздела.КонецПериода) + ".";
			
			ПараметрыРаздела.ИмяФайла = "Сегмент %НомерСегмента% перечня проводок по счету %БанковскийСчет% за "
				+ ПредставлениеПериода(ПараметрыРаздела.НачалоПериода, ПараметрыРаздела.КонецПериода);
			
			СводныеДанные = Заполнить_Операции_СводныеСведения(ПараметрыОтчета, ПараметрыРаздела);
			
			Заполнить_Операции_ДетальныеСведения(ПараметрыОтчета, ПараметрыРаздела);
			
			ДанныеИПредставлениеСтраницы = Новый Структура;
			
			ДанныеИПредставлениеСтраницы.Вставить("Данные", СводныеДанные);
			ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
			
			СтрокаПериода.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
			
		КонецЦикла; // По периодам отчета
		
	КонецЦикла; // По каждому бух.счету
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

#Область ОборотноСальдоваяВедомость

Процедура Заполнить_ОСВ_ЗаПериод(ЗаполняемаяСтруктура, ПараметрыЗаполнения)
	
	СписокОрганизаций = ПараметрыЗаполнения.СписокОрганизаций;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый КАК Забалансовый,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК СчетКод,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Наименование КАК СчетНаименование,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок
		|ИТОГИ
		|	СУММА(СНД),
		|	СУММА(СНК),
		|	СУММА(ДО),
		|	СУММА(КО),
		|	СУММА(СКД),
		|	СУММА(СКК)
		|ПО
		|	Забалансовый,
		|	Счет ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СведенияОСВ_Балансовые = Новый ДеревоЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя = "Забалансовый" Тогда
			Продолжить;
		КонецЕсли;
		СведенияОСВ_Балансовые.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	СведенияОСВ_Забалансовые = СведенияОСВ_Балансовые.Скопировать();
	
	ДанныеЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаПоБалансу Из ДанныеЗапроса.Строки Цикл
		Если СтрокаПоБалансу.Забалансовый Тогда
			НоваяСтрокаОСВ = СведенияОСВ_Забалансовые.Строки.Добавить();
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаПоБалансу);
			РассчитатьИтогиОСВ(СведенияОСВ_Забалансовые);
		Иначе
			НоваяСтрокаОСВ = СведенияОСВ_Балансовые.Строки.Добавить();
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаПоБалансу);
			РассчитатьИтогиОСВ(СведенияОСВ_Балансовые);
		КонецЕсли;
	КонецЦикла;
	
	СведенияОСВ = Новый Структура;
	СведенияОСВ.Вставить("Балансовые", СведенияОСВ_Балансовые);
	СведенияОСВ.Вставить("Забалансовые", СведенияОСВ_Забалансовые);
	
	ЗаполняемаяСтруктура.Вставить("Данные", СведенияОСВ);
	ЗаполняемаяСтруктура.Вставить("Представление", Неопределено);
	
КонецПроцедуры

Процедура ВнестиСтрокиВСведенияОСВ(СведенияОСВ, ДанныеЗапроса)
	
	Для Каждого СтрокаДанных Из ДанныеЗапроса.Строки Цикл
		ЭтоДетальнаяЗапись = (СтрокаДанных.Строки.Количество() = 0);
		Если НЕ ЭтоДетальнаяЗапись Тогда
			НоваяСтрокаОСВ = СведенияОСВ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОСВ, СтрокаДанных);
			
			ВнестиСтрокиВСведенияОСВ(НоваяСтрокаОСВ, СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтогиОСВ(СведенияОСВ)
	
	ИтоговаяСтрока = СведенияОСВ.Строки[0];
	
	СНД = 0;
	СНК = 0;
	ДО = 0;
	КО = 0;
	СКД = 0;
	СКК = 0;
	
	Для Каждого СтрокаСчета Из ИтоговаяСтрока.Строки Цикл
		СНД = СНД + СтрокаСчета.СНД;
		СНК = СНК + СтрокаСчета.СНК;
		ДО  = ДО  + СтрокаСчета.ДО;
		КО  = КО  + СтрокаСчета.КО;
		СКД = СКД + СтрокаСчета.СКД;
		СКК = СКК + СтрокаСчета.СКК;
	КонецЦикла;
	
	ИтоговаяСтрока.СНД = СНД;
	ИтоговаяСтрока.СНК = СНК;
	ИтоговаяСтрока.ДО  = ДО;
	ИтоговаяСтрока.КО  = КО;
	ИтоговаяСтрока.СКД = СКД;
	ИтоговаяСтрока.СКК = СКК;
	
КонецПроцедуры

#КонецОбласти

#Область АнализСчета

Процедура Заполнить_АнализСчета_ЗаПериод(ПараметрыЗаполнения)
	
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ПрефиксВидаФайла = ПараметрыЗаполнения.ПрефиксВидаФайла;
	ШаблонИмениФайла = ПараметрыЗаполнения.ШаблонИмениФайла;
	
	ПрефиксВидаФайлаИтоги = СтрЗаменить(ПрефиксВидаФайла, "АнализСчета", "АнализСчетаИтоги");
	ИмяФайлаИтоги         = СтрЗаменить(ШаблонИмениФайла, "Сегмент %1 анализа счета", "Итоги анализа счета");
	
	// Удаление сохраненных данных.
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ПрефиксВидаФайла + "%");
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ПрефиксВидаФайлаИтоги + "%");
	
	Запрос = ЗапросАнализСчета(ПараметрыЗаполнения);
	
	ИтогиАнализаСчета = Новый Структура();
	ИтогиАнализаСчета.Вставить("СНД", 0);
	ИтогиАнализаСчета.Вставить("СНК", 0);
	ИтогиАнализаСчета.Вставить("ДО",  0);
	ИтогиАнализаСчета.Вставить("КО",  0);
	ИтогиАнализаСчета.Вставить("СКД", 0);
	ИтогиАнализаСчета.Вставить("СКК", 0);
	
	ВеличинаОтсечки = 3000;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // уровень 0 - общие итоги
	ВыборкаИтоги.Следующий();
	
	ЗаполнитьЗначенияСвойств(ИтогиАнализаСчета, ВыборкаИтоги);
	
	ВыборкаПоСчетам = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // уровень 1
	
	ТаблицаДанныхСтраницы = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаДанныхСтраницы.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаДанныхСтраницы.Колонки.Добавить("Уровень",
		ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные",                  ТаблицаДанныхСтраницы);
	ПараметрыЗаписи.Вставить("УровеньДетальныхЗаписей", 4);
	ПараметрыЗаписи.Вставить("ПрефиксВидаФайла",        ПрефиксВидаФайла);
	ПараметрыЗаписи.Вставить("ШаблонИмениФайла",        ШаблонИмениФайла);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		НоваяСтрокаДанных = ТаблицаДанныхСтраницы.Добавить();
		НоваяСтрокаДанных.Уровень = ВыборкаПоСчетам.Уровень();
		НакопленоЗаписей = НакопленоЗаписей + 1;
		ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
			НоваяСтрокаДанных, ВыборкаПоСчетам, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", СтрШаблон(ШаблонИмениФайла, СтрокаЧГ0(НомерСегмента)));
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиАнализаСчета);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайлаИтоги + "0");
	ПараметрыЗаписи.Вставить("ИмяФайла", ИмяФайлаИтоги);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
	СтрокаТаблицыДанных, Выборка, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи)
	
	УровеньВыборки = Выборка.Уровень();
	
	// Заполним строку таблицы данных по выборке
	// В зависимости от того, сколько строк в выборке на нижних уровнях, строка данных может:
	//  - либо содержать содержать данные по всем аналитикам более детальных уровней (счет, субконто1, субконто2),
	//  - либо содержать сводные данные без аналитики или по части аналитики нижних уровней - тогда данные 
	//    по полному набору аналитики содержатся в подчиненных строках.
	ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, Выборка); // пока без аналитики нижних уровней
	
	ВыборкаПодчиненныхСтрок = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УровеньПодчиненнойВыборки = ВыборкаПодчиненныхСтрок.Уровень();
	
	ТаблицаДанных = СтрокаТаблицыДанных.Владелец();
	
	Если УровеньПодчиненнойВыборки = ПараметрыЗаписи.УровеньДетальныхЗаписей Тогда
		// Если на следующем уровне выборки находятся детальные строки, то в текущей строке данных не требуется заполнять
		// аналитику с более низкого уровня. Вместо этого в таблице данных создадим новые строки по подчиненной выборке.
		
		Пока ВыборкаПодчиненныхСтрок.Следующий() Цикл
			СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			СтрокаТаблицыДанных.Уровень = УровеньПодчиненнойВыборки;
			НакопленоЗаписей = НакопленоЗаписей + 1;
			ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок);
		КонецЦикла;
		
	ИначеЕсли ВыборкаПодчиненныхСтрок.Количество() > 1 Тогда  
		// Если на следующем уровне выборки несколько строк, то в текущей строке данных не требуется заполнять
		// аналитику с более низкого уровня. Вместо этого в таблице данных создадим новые строки по подчиненной выборке.
		
		Пока ВыборкаПодчиненныхСтрок.Следующий() Цикл
			СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			СтрокаТаблицыДанных.Уровень = УровеньПодчиненнойВыборки;
			НакопленоЗаписей = НакопленоЗаписей + 1;
			ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
				СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
		КонецЦикла;
				
	Иначе
		// Дополним данные родительской строки аналитикой из единственной подчиненной строки.
		// Строку подчиненного уровня в таблице данных не создаем.
		ВыборкаПодчиненныхСтрок.Следующий();
		ДополнитьТаблицуДанныхПоВыборке_АнализСчета(
			СтрокаТаблицыДанных, ВыборкаПодчиненныхСтрок, НакопленоЗаписей, НомерСегмента, ВеличинаОтсечки, ПараметрыЗаписи);
		
	КонецЕсли;
	
	// После обработки очередной записи 1-го или 2-го уровня (Счет или Субконто1) проверим,
	// не пора ли сбросить данные сегмента в регистр.
	Если УровеньВыборки < 3 И НакопленоЗаписей >= ВеличинаОтсечки Тогда
		// Сброс в регистр по отсечке.
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПараметрыЗаписи.ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", СтрШаблон(ПараметрыЗаписи.ШаблонИмениФайла, СтрокаЧГ0(НомерСегмента)));
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		
		ТаблицаДанных.Очистить();
		НомерСегмента = НомерСегмента + 1;
		НакопленоЗаписей = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыДанныхПоВыборке_АнализСчета(СтрокаТаблицыДанных, Выборка)
	
	УровеньВыборки = Выборка.Уровень();
	
	ПоляВыборки = Новый Массив;
	
	Для Уровень = 1 По УровеньВыборки Цикл
		Если Уровень = 1 Тогда
			ПоляВыборки.Добавить("Счет");
			ПоляВыборки.Добавить("КодСчета");
			
		ИначеЕсли Уровень = 2 Тогда
			ПоляВыборки.Добавить("Субконто1");
			ПоляВыборки.Добавить("Субконто1ИНН");
			ПоляВыборки.Добавить("Субконто1КПП");
			СтрокаТаблицыДанных.ПредставлениеСубконто1 = Строка(Выборка.Субконто1);
			
		ИначеЕсли Уровень = 3 Тогда
			ПоляВыборки.Добавить("Субконто2");
			ПоляВыборки.Добавить("Субконто2ИНН");
			ПоляВыборки.Добавить("Субконто2КПП");
			СтрокаТаблицыДанных.ПредставлениеСубконто2 = Строка(Выборка.Субконто2);
			
		ИначеЕсли Уровень = 4 Тогда
			ПоляВыборки.Добавить("КорСчет");
			ПоляВыборки.Добавить("КодКорСчета");
			ПоляВыборки.Добавить("ДетальнаяЗапись");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если строка заполняется по данным выборки подчиненных строк (УровеньВыборки > СтрокаТаблицыДанных.Уровень),
	// то суммы не трогаем.
	Если УровеньВыборки = СтрокаТаблицыДанных.Уровень Тогда
		ПоляВыборки.Добавить("СНД");
		ПоляВыборки.Добавить("СНК");
		ПоляВыборки.Добавить("ДО");
		ПоляВыборки.Добавить("КО");
		ПоляВыборки.Добавить("СКД");
		ПоляВыборки.Добавить("СКК");
	КонецЕсли;
	
	СтрокаСвойств = СтрСоединить(ПоляВыборки, ",");
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, Выборка, СтрокаСвойств);
	
КонецПроцедуры

#Область ПараметрыОтправкиСчетов

Функция ПараметрыОтправкиСчета(ОтправляемыйСчет)
	
	ПараметрыСчета = Новый ТаблицаЗначений;
	ПараметрыСчета.Колонки.Добавить("Счета");
	ПараметрыСчета.Колонки.Добавить("Субконто");
	
	СтрокаПараметров = ПараметрыСчета.Добавить(); // Для счетов отправляемых без аналитики
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета);
	
	ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета);
	
	Возврат ПараметрыСчета;
	
КонецФункции

Процедура УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета) Экспорт
	
	Если ОтправляемыйСчет = Счет("01") Тогда
		УстановитьПараметрыСчета_01(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("02") Тогда
		УстановитьПараметрыСчета_02(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("03") Тогда
		УстановитьПараметрыСчета_03(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("04") Тогда
		УстановитьПараметрыСчета_04(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("05") Тогда
		УстановитьПараметрыСчета_05(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("07") Тогда
		УстановитьПараметрыСчета_07(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("08") Тогда
		УстановитьПараметрыСчета_08(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("09") Тогда
		УстановитьПараметрыСчета_09(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("10") Тогда
		УстановитьПараметрыСчета_10(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("20") Тогда
		УстановитьПараметрыСчета_20(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("21") Тогда
		УстановитьПараметрыСчета_21(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("23") Тогда
		УстановитьПараметрыСчета_23(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("25") Тогда
		УстановитьПараметрыСчета_25(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("26") Тогда
		УстановитьПараметрыСчета_26(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("28") Тогда
		УстановитьПараметрыСчета_28(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("29") Тогда
		УстановитьПараметрыСчета_29(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("41") Тогда
		УстановитьПараметрыСчета_41(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("43") Тогда
		УстановитьПараметрыСчета_43(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("44") Тогда
		УстановитьПараметрыСчета_44(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("45") Тогда
		УстановитьПараметрыСчета_45(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("50") Тогда
		УстановитьПараметрыСчета_50(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("51") Тогда
		УстановитьПараметрыСчета_51(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("52") Тогда
		УстановитьПараметрыСчета_52(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("55") Тогда
		УстановитьПараметрыСчета_55(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("57") Тогда
		УстановитьПараметрыСчета_57(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("58") Тогда
		УстановитьПараметрыСчета_58(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("59") Тогда
		УстановитьПараметрыСчета_59(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("60") Тогда
		УстановитьПараметрыСчета_60(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("62") Тогда
		УстановитьПараметрыСчета_62(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("63") Тогда
		УстановитьПараметрыСчета_63(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("66") Тогда
		УстановитьПараметрыСчета_66(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("67") Тогда
		УстановитьПараметрыСчета_67(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("68") Тогда
		УстановитьПараметрыСчета_68(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("69") Тогда
		УстановитьПараметрыСчета_69(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("70") Тогда
		УстановитьПараметрыСчета_70(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("71") Тогда
		УстановитьПараметрыСчета_71(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("75") Тогда
		УстановитьПараметрыСчета_75(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("76") Тогда
		УстановитьПараметрыСчета_76(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("77") Тогда
		УстановитьПараметрыСчета_77(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("79") Тогда
		УстановитьПараметрыСчета_79(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("80") Тогда
		УстановитьПараметрыСчета_80(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("81") Тогда
		УстановитьПараметрыСчета_81(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("86") Тогда
		УстановитьПараметрыСчета_86(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("90") Тогда
		УстановитьПараметрыСчета_90(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("91") Тогда
		УстановитьПараметрыСчета_91(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("001") Тогда
		УстановитьПараметрыСчета_001(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("003") Тогда
		УстановитьПараметрыСчета_003(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("004") Тогда
		УстановитьПараметрыСчета_004(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("005") Тогда
		УстановитьПараметрыСчета_005(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("007") Тогда
		УстановитьПараметрыСчета_007(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("008") Тогда
		УстановитьПараметрыСчета_008(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("009") Тогда
		УстановитьПараметрыСчета_009(ПараметрыСчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_01(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_02(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_03(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_04(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_05(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_07(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_08(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбъектыСтроительства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РасходыНаНИОКР");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_09(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_10(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_20(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_21(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_23(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_25(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_26(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_28(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_29(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_41(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_43(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_44(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_45(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_50(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_51(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_52(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_55(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_57(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_58(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_59(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_60(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_62(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_63(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_66(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_67(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_68(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_69(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_70(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_71(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_75(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_76(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_77(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_79(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбособленныеПодразделения");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_80(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_81(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Учредители,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_86(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НазначениеЦелевыхСредств,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_90(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_91(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ПрочиеДоходыИРасходы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_001(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_003(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_004(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_005(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_007(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_008(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_009(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура ДобавитьВидыСубконоПоСчету(ПараметрыСчета, СписокВидовСубконто)
	
	СтрокаПараметров = ПараметрыСчета.Добавить();
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	ВидыСубконто = СтрРазделить(СписокВидовСубконто, ",", Ложь);
	
	Для Каждого ВидСубконто Из ВидыСубконто Цикл
		СтрокаПараметров.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ВидСубконто]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета)
	
	Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ОтправляемыйСчет);
	
	КоличествоСочетаний = ПараметрыСчета.Количество();
	
	Для Каждого Субсчет Из Субсчета Цикл
		СтрокаПараметра = ПараметрыСчета[0]; // для счетов с неподдерживаемой аналитикой
		
		Для Инд = 1 По КоличествоСочетаний - 1 Цикл
			Если СчетУдовлетворяетАналитике(Субсчет, ПараметрыСчета[Инд].Субконто) Тогда
				СтрокаПараметра = ПараметрыСчета[Инд];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаПараметра.Счета.Добавить(Субсчет);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетУдовлетворяетАналитике(СчетУчета, НаборСубконто)
	
	ВсеСубконтоНайдены = Истина;
	
	Для Каждого Субконто Из НаборСубконто Цикл
		ВсеСубконтоНайдены = ВсеСубконтоНайдены
			И СчетУчета.ВидыСубконто.Найти(Субконто) <> Неопределено;
	КонецЦикла;
	
	Возврат ВсеСубконтоНайдены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Операции

Функция ПараметрыРаздела_Операции()
	
	ПараметрыРаздела = Новый Структура();
	ПараметрыРаздела.Вставить("СчетВерхнегоУровня", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыРаздела.Вставить("КодСчетаВерхнегоУровня", "");
	ПараметрыРаздела.Вставить("НачалоПериода", '0001-01-01');
	ПараметрыРаздела.Вставить("КонецПериода",  '0001-01-01');
	ПараметрыРаздела.Вставить("СчетаВИерархии", Новый Массив);
	
	// Шаблоны для полей регистра ДополнительныеФайлыРегламентированныхОтчетов
	ПараметрыРаздела.Вставить("ИмяФайла",         "");
	ПараметрыРаздела.Вставить("ПрефиксВидаФайла", "");
	
	Возврат ПараметрыРаздела;
	
КонецФункции

Функция Заполнить_Операции_НовыеСводныеДанные()
	
	ТипДенежнаяСумма = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	СводныеДанные = Новый ДеревоЗначений;
	
	СводныеДанные.Колонки.Добавить("Счет");
	СводныеДанные.Колонки.Добавить("Представление");
	СводныеДанные.Колонки.Добавить("Расшифровка");
	СводныеДанные.Колонки.Добавить("ЗаголовокВалюта");
	СводныеДанные.Колонки.Добавить("Валютный", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("НомерСчета");
	СводныеДанные.Колонки.Добавить("БИКБанка");
	СводныеДанные.Колонки.Добавить("НаименованиеБанка");
	СводныеДанные.Колонки.Добавить("КодВалюты");
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеКт", ТипДенежнаяСумма);
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалКт", ТипДенежнаяСумма);
	
	Возврат СводныеДанные;
	
КонецФункции

Функция Заполнить_Операции_НовыйЗапросСПараметрами(ПараметрыОтчета, ПараметрыРаздела)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыОтчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРаздела.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРаздела.КонецПериода);
	Запрос.УстановитьПараметр("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
	
	Возврат Запрос;
	
КонецФункции

Функция Заполнить_Операции_СводныеСведения(ПараметрыОтчета, ПараметрыРаздела)
	
	СводныеДанные = Заполнить_Операции_НовыеСводныеДанные();
	
	СтрокаСчетаВерхнегоУровня = СводныеДанные.Строки.Добавить();
	СтрокаСчетаВерхнегоУровня.Счет          = ПараметрыРаздела.СчетВерхнегоУровня;
	СтрокаСчетаВерхнегоУровня.Представление = ПараметрыРаздела.КодСчетаВерхнегоУровня;
	
	Запрос = Заполнить_Операции_НовыйЗапросСПараметрами(ПараметрыОтчета, ПараметрыРаздела);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК Представление,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотыДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотыКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаУчета), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|ИТОГИ
		|	СУММА(СальдоНачальноеДт),
		|	СУММА(СальдоНачальноеКт),
		|	СУММА(СуммаОборотДт),
		|	СУММА(СуммаОборотКт),
		|	СУММА(СальдоКонечноеДт),
		|	СУММА(СальдоКонечноеКт)
		|ПО
		|	Счет ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("СчетаУчета", ПараметрыРаздела.СчетаВИерархии);
	
	ВыборкаПоСчету = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	Если ВыборкаПоСчету.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаСчетаВерхнегоУровня, ВыборкаПоСчету);
		
		СтрокиПоСубсчетам = СтрокаСчетаВерхнегоУровня.Строки;
		ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если ВыборкаПоСубсчетам.Количество() = 0 Тогда
			ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать();
		КонецЕсли;
		
		Пока ВыборкаПоСубсчетам.Следующий() Цикл
			Заполнить_Операции_СводныеСведенияПоСубсчету(
				СтрокиПоСубсчетам, ВыборкаПоСубсчетам, Запрос);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СводныеДанные;
	
КонецФункции

Процедура Заполнить_Операции_СводныеСведенияПоСубсчету(СтрокиПоСубсчетам, ВыборкаПоСубсчетам, Запрос)
	
	Если ВыборкаПоСубсчетам.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		НоваяСтрокаСубсчета = СтрокиПоСубсчетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСубсчета, ВыборкаПоСубсчетам);
		
		// Рекурсивный разбор субсчетов.
		Выборка = ВыборкаПоСубсчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если Выборка.Количество() = 0 Тогда
			Выборка = ВыборкаПоСубсчетам.Выбрать();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Заполнить_Операции_СводныеСведенияПоСубсчету(
				НоваяСтрокаСубсчета.Строки, Выборка, Запрос);
		КонецЦикла;
		
	Иначе
		СтрокиПоБанковскимСчетам = СтрокиПоСубсчетам;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Счет,
			|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1) КАК Представление,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Валютный
			|			ТОГДА ""Вал.""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ЗаголовокВалюта,
			|	БанковскиеСчета.Валютный КАК Валютный,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.БИКБанка КАК БИКБанка,
			|	БанковскиеСчета.НаименованиеБанка КАК НаименованиеБанка,
			|	БанковскиеСчета.КодВалюты КАК КодВалюты,
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотыДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотыКт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК СальдоНачальноеВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК СальдоНачальноеВалКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ОборотыВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ОборотыВалКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК СальдоКонечноеВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК СальдоКонечноеВалКт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет = &СчетУчетаБС, &СубконтоБанковскиеСчета, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаПереопределяемый КАК БанковскиеСчета
			|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = БанковскиеСчета.Счет
			|
			|УПОРЯДОЧИТЬ ПО
			|	Счет
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		СубконтоБанковскиеСчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета;
		Запрос.УстановитьПараметр("СубконтоБанковскиеСчета", СубконтоБанковскиеСчета);
		Запрос.УстановитьПараметр("СчетУчетаБС", ВыборкаПоСубсчетам.Счет);
		
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
		ВыборкаПоБанковскимСчетам = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоБанковскимСчетам.Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаБанковскогоСчета = СтрокиПоБанковскимСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБанковскогоСчета, ВыборкаПоБанковскимСчетам);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Заполнить_Операции_ДетальныеСведения(ПараметрыОтчета, ПараметрыРаздела)
	
	РегламентированныйОтчет = ПараметрыОтчета.РегламентированныйОтчет;
	
	Запрос = Заполнить_Операции_НовыйЗапросСПараметрами(ПараметрыОтчета, ПараметрыРаздела);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаОперации,
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ВЫБОР
		|					КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
		|					КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
		|					КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|				КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|				КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|					ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|			КОНЕЦ
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоДт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйДвиженияССубконто.СубконтоКт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|	КОНЕЦ КАК Договор,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт, 0)
		|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт, 0)
		|	КОНЕЦ КАК СуммаВал,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Назначение,
		|	ВТ_ДокументыПоСчету.НомерВходящегоДокумента КАК НомерДокумента,
		|	ВТ_ДокументыПоСчету.ДатаВходящегоДокумента КАК ДатаДокумента,
		|	ВТ_ДокументыПоСчету.ВидОперации КАК ВидОперации,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаДт,
		|	ВЫБОР
		|		КОГДА НЕ ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКт,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВалДт,
		|	ВЫБОР
		|		КОГДА НЕ ХозрасчетныйДвиженияССубконто.СчетДт В (&СчетаУчета)
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаВалКт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт.Наименование КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт.Наименование КАК ВалютаКт
		|ПОМЕСТИТЬ ВТ_ОперацииПоСчету
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Активность
		|				И Организация В (&СписокОрганизаций)
		|				И Счет В (&СчетаУчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоСчетуПереопределяемый КАК ВТ_ДокументыПоСчету
		|		ПО ХозрасчетныйДвиженияССубконто.Регистратор = ВТ_ДокументыПоСчету.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОперацииПоСчету.ДатаОперации КАК ДатаОперации,
		|	ВТ_ОперацииПоСчету.Документ КАК Документ,
		|	ВТ_ОперацииПоСчету.НомерСтроки КАК НомерСтроки,
		|	ВТ_ОперацииПоСчету.СчетДт КАК СчетДт,
		|	ВТ_ОперацииПоСчету.СчетКт КАК СчетКт,
		|	ВТ_ОперацииПоСчету.БанковскийСчет КАК БанковскийСчет,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Контрагент) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Договор) КАК Договор,
		|	ВТ_ОперацииПоСчету.СуммаВал КАК СуммаВал,
		|	ВТ_ОперацииПоСчету.Сумма КАК Сумма,
		|	ВТ_ОперацииПоСчету.Назначение КАК Назначение,
		|	ВТ_ОперацииПоСчету.НомерДокумента КАК НомерДокумента,
		|	ВТ_ОперацииПоСчету.ДатаДокумента КАК ДатаДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.ВидОперации) КАК ВидОперации,
		|	ВТ_ОперацииПоСчету.СуммаДт КАК СуммаДт,
		|	ВТ_ОперацииПоСчету.СуммаКт КАК СуммаКт,
		|	ВТ_ОперацииПоСчету.СуммаВалДт КАК СуммаВалДт,
		|	ВТ_ОперацииПоСчету.СуммаВалКт КАК СуммаВалКт,
		|	ВТ_ОперацииПоСчету.ВалютаДт КАК ВалютаДт,
		|	ВТ_ОперацииПоСчету.ВалютаКт КАК ВалютаКт,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КПП,
		|	ВТ_ОперацииПоСчету.СчетДт.Код КАК СчетДтКод,
		|	ВТ_ОперацииПоСчету.СчетКт.Код КАК СчетКтКод
		|ИЗ
		|	ВТ_ОперацииПоСчету КАК ВТ_ОперацииПоСчету
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ВТ_ОперацииПоСчету.Контрагент = ВТ_ДанныеКонтрагентов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОперации,
		|	Документ,
		|	НомерСтроки
		|ИТОГИ ПО
		|	БанковскийСчет";
	
	Запрос.УстановитьПараметр("СчетаУчета", ПараметрыРаздела.СчетаВИерархии);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентов",
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоКонтрагентов());
	Запрос.УстановитьПараметр("ВидыСубконтоДоговоров",
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоДоговоров());
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Организация", "В (&СписокОрганизаций)");
	
	ВыборкаПоБанковскимСчетам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПрефиксВидаФайла = ПараметрыРаздела.ПрефиксВидаФайла;
	ВеличинаОтсечки = 1000;
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("ДатаОперации", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("Документ");
	ТаблицаОпераций.Колонки.Добавить("ВходящийДокумент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Назначение", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетДтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетКтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаДт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаКт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВал", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ТаблицаОпераций);
	
	// Очистка регистра от ранее заполненных сведений.
	ШаблонОтбора = ПрефиксВидаФайла + "%";
	ВыборкаСегментов = ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
	Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
		БанковскийСчет = ВыборкаПоБанковскимСчетам.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксПоБанковскомуСчету = ПрефиксВидаФайла
		                          + БанковскийСчет.УникальныйИдентификатор() + ".";
		БанковскийСчетНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Наименование");
		
		ТаблицаОпераций.Очистить();
		
		НомерСегмента = 1;
		НакопленоЗаписей = 0;
		
		ВыборкаПоОперациям = ВыборкаПоБанковскимСчетам.Выбрать();
		
		Пока ВыборкаПоОперациям.Следующий() Цикл
			НоваяСтрокаДанных = ТаблицаОпераций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, ВыборкаПоОперациям);
			
			Если ЗначениеЗаполнено(НоваяСтрокаДанных.НомерДокумента) Тогда
				НоваяСтрокаДанных.ВходящийДокумент = "№" + СокрЛП(НоваяСтрокаДанных.НомерДокумента);
				
				Если ЗначениеЗаполнено(НоваяСтрокаДанных.ДатаДокумента) Тогда
					НоваяСтрокаДанных.ВходящийДокумент = НоваяСтрокаДанных.ВходящийДокумент + " от "
					                                   + Формат(НоваяСтрокаДанных.ДатаДокумента, "ДЛФ=D");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалДт = 0 Тогда
				НоваяСтрокаДанных.ВалютаДт = "";
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалКт = 0 Тогда
				НоваяСтрокаДанных.ВалютаКт = "";
			КонецЕсли;
			
			НакопленоЗаписей = НакопленоЗаписей + 1;
			Если НакопленоЗаписей < ВеличинаОтсечки Тогда
				Продолжить; // накопление данных в таблице
			КонецЕсли;
			
			// Сброс в регистр по отсечке.
			ИмяФайла = ПараметрыРаздела.ИмяФайла;
			ИмяФайла = СтрЗаменить(ИмяФайла, "%НомерСегмента%", СтрокаЧГ0(НомерСегмента));
			ИмяФайла = СтрЗаменить(ИмяФайла, "%БанковскийСчет%",БанковскийСчетНаименование);
			
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковскомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла",                ИмяФайла);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей",       НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
			
			ТаблицаОпераций.Очистить();
			НомерСегмента = НомерСегмента + 1;
			НакопленоЗаписей = 0;
			
		КонецЦикла;
		
		// Сброс в регистр финального непустого сегмента или пустого первого сегмента.
		Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
			ИмяФайла = ПараметрыРаздела.ИмяФайла;
			ИмяФайла = СтрЗаменить(ИмяФайла, "%НомерСегмента%", СтрокаЧГ0(НомерСегмента));
			ИмяФайла = СтрЗаменить(ИмяФайла, "%БанковскийСчет%",БанковскийСчетНаименование);
			
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковскомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла",                ИмяФайла);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей",       НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПланаСчетов

Функция ПараметрыВыгрузкиПланаСчетов(Организация)
	
	Сегодня = ТекущаяДатаСеанса();
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ИННФЛ, ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, Сегодня, СтрокаСведений);
		
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсФорм", "1.01.02");
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(Сегодня, "ДФ=dd.MM.yyyy"));
	ПараметрыВыгрузки.Вставить("ИдФайл",   "BANK_COA_" + СведенияОбОрганизации.ИННЮЛ);
		
	ПараметрыОтправителя = Новый Структура;
	ПараметрыОтправителя.Вставить("Наим", "");
	ПараметрыОтправителя.Вставить("ИНН",  "");
	ПараметрыОтправителя.Вставить("КПП",  "");
	
	Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		ПараметрыОтправителя.Наим = СведенияОбОрганизации.НаимЮЛПол;
		ПараметрыОтправителя.ИНН  = СведенияОбОрганизации.ИННЮЛ;
		ПараметрыОтправителя.КПП  = СведенияОбОрганизации.КППЮЛ;
		ПараметрыВыгрузки.ИдФайл = ПараметрыВыгрузки.ИдФайл + СведенияОбОрганизации.КППЮЛ;
		
	Иначе
		
		ПараметрыОтправителя.Наим = СведенияОбОрганизации.ФИОРук;
		ПараметрыОтправителя.ИНН  = СведенияОбОрганизации.ИННФЛ;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Отправитель", ПараметрыОтправителя);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзел_ПланСчетов_Документ(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок, "Д");
	
	ВывестиУзел_Организация(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ПланСчетов_БухгалтерскиеСчета(Компоновщик);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
КонецПроцедуры

Процедура ВывестиУзел_Организация(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Организация");
	
	Отправитель = ПараметрыВыгрузки.Отправитель;
	
	ВывестиАтрибут(Компоновщик, "Наим",  Отправитель.Наим, "Т,1000");
	ВывестиАтрибут(Компоновщик, "ИНН",   Отправитель.ИНН,  "Т"); // Может быть 10 или 12 символов.
	ВывестиНеобязательныйАтрибут(Компоновщик, "КПП", Отправитель.КПП,  "Т,9");
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Организация
	
КонецПроцедуры

Процедура ВывестиУзел_ПланСчетов_БухгалтерскиеСчета(Компоновщик)
	
	ДеревоСчетов = ОтчетностьВБанкиСлужебный.ДеревоСчетовБУ(Истина);
	
	Если ДеревоСчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("БухгалтерскиеСчета");
	
	СтрокиУровня1 = ДеревоСчетов.Строки;
	
	Для Каждого Выборка1Уровня Из СтрокиУровня1 Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", Выборка1Уровня.Код, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", Выборка1Уровня.Наименование, "Т,120");
		ВывестиАтрибут(Компоновщик, "Тип", Выборка1Уровня.Вид, "Т,2");
		ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка1Уровня.Забалансовый, 1, 0), "Ч,1");
		
		СтрокиУровня2 = Выборка1Уровня.Строки;
		
		Для Каждого Выборка2Уровня Из СтрокиУровня2 Цикл
			Если Выборка2Уровня.Ссылка = Выборка1Уровня.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Компоновщик.ЗаписатьНачалоЭлемента("Счет");
			
			ВывестиАтрибут(Компоновщик, "Код", Выборка2Уровня.Код, "Т,8");
			ВывестиАтрибут(Компоновщик, "Наименование", Выборка2Уровня.Наименование, "Т,120");
			ВывестиАтрибут(Компоновщик, "Тип", Выборка2Уровня.Вид, "Т,2");
			ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка2Уровня.Забалансовый, 1, 0), "Ч,1");
			
			СтрокиУровня3 = Выборка2Уровня.Строки;
			
			Для Каждого Выборка3Уровня Из СтрокиУровня3 Цикл
				Если Выборка3Уровня.Ссылка = Выборка2Уровня.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("Счет");
				
				ВывестиАтрибут(Компоновщик, "Код", Выборка3Уровня.Код, "Т,8");
				ВывестиАтрибут(Компоновщик, "Наименование", Выборка3Уровня.Наименование, "Т,120");
				ВывестиАтрибут(Компоновщик, "Тип", Выборка3Уровня.Вид, "Т,2");
				ВывестиАтрибут(Компоновщик, "Забалансовый", ?(Выборка3Уровня.Забалансовый, 1, 0), "Ч,1");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // Счет
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // Счет
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БухгалтерскиеСчета
	
КонецПроцедуры

#КонецОбласти

Функция СтрокаГГММ_ГГММ(ДатаНачала, ДатаОкончания)
	
	Суффикс = "";
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаНачала, "ДФ='ггММ'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Суффикс = Суффикс + "_" + Формат(ДатаОкончания, "ДФ='ггММ'");
	КонецЕсли;
	
	Суффикс = Сред(Суффикс, 2);
	
	Возврат Суффикс;
	
КонецФункции

Процедура ОчиститьДанныеОтчетаВРегистреДополнительныхФайловПоШаблону(РегламентированныйОтчет, ШаблонОтбора) Экспорт 
	
	ВыборкаСегментов = ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросАнализСчета(ПараметрыЗаполнения)
	
	СписокОрганизаций = ПараметрыЗаполнения.СписокОрганизаций;
	Счет = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	// ВНИМАНИЕ! Код обработки результата запроса рассчитывает на 5 уровней выборки
	// (где 0 - общие итоги, а 4 - детальные записи, которые выгружаются в xml-файл) - см. секцию ИТОГИ ниже.
	// При этом записи нижнего уровня (4) с признаком ДетальнаяЗапись=ЛОЖЬ в форму отчета не попадают -
	// они нужны только для выгрузки в xml.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	"""" КАК ПредставлениеСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	"""" КАК ПредставлениеСубконто2,
		|	NULL КАК КорСчет,
		|	"""" КАК КодКорСчета,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
		|	NULL КАК Субконто1ИНН,
		|	NULL КАК Субконто1КПП,
		|	NULL КАК Субконто2ИНН,
		|	NULL КАК Субконто2КПП,
		|	ЛОЖЬ КАК ДетальнаяЗапись
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета0), , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		|	ХозрасчетныйОстаткиИОбороты.Субконто2,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		|	NULL,
		|	"""",
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	ВТ_ДанныеКонтрагентов1.ИНН,
		|	ВТ_ДанныеКонтрагентов1.КПП,
		|	ВТ_ДанныеКонтрагентов2.ИНН,
		|	ВТ_ДанныеКонтрагентов2.КПП,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1),
		|	ХозрасчетныйОбороты.Субконто2,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2),
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета), &ВидыСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстИмениТаблицыОборотов = "ХозрасчетныйОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ХозрасчетныйОстаткиИОбороты.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", """");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ХозрасчетныйОбороты.Субконто2", "НЕОПРЕДЕЛЕНО");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса,
				"ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2)", """");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты", ТекстИмениТаблицыОборотов);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
		+ "
		|УПОРЯДОЧИТЬ ПО
		|	Счет,
		|	Субконто1,
		|	Субконто2,
		|	ДетальнаяЗапись,
		|	КорСчет
		|ИТОГИ
		|	МАКСИМУМ(КодСчета) КАК КодСчета,
		|	МАКСИМУМ(Субконто1ИНН) КАК Субконто1ИНН,
		|	МАКСИМУМ(Субконто1КПП) КАК Субконто1КПП,
		|	МАКСИМУМ(Субконто2ИНН) КАК Субконто2ИНН,
		|	МАКСИМУМ(Субконто2КПП) КАК Субконто2КПП,
		|	ЛОЖЬ КАК ДетальнаяЗапись,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНД
		|		КОНЕЦ) КАК СНД,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СНК
		|		КОНЕЦ) КАК СНК,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА ДО
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДО,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА КО
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КО,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКД
		|		КОНЕЦ) КАК СКД,
		|	СУММА(ВЫБОР
		|			КОГДА ДетальнаяЗапись
		|				ТОГДА 0
		|			ИНАЧЕ СКК
		|		КОНЕЦ) КАК СКК
		|ПО
		|	ОБЩИЕ,
		|	Счет,
		|	Субконто1,
		|	Субконто2
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &Организация", "В (&СписокОрганизаций)");
	
	Возврат Запрос;
	
КонецФункции

Функция СчетОтмеченВСписке(СчетОтчета, СписокСчетов)
	
	СтрокаСчета = СписокСчетов.Найти(СчетОтчета, "Счет");
	
	Возврат СтрокаСчета <> Неопределено И СтрокаСчета.Включен;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

#Область ОберткиФункцийИПроцедур

Процедура ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи)
	
	ЗаполнениеОтчетностиВБанки.ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Функция ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора)
	
	Возврат ЗаполнениеОтчетностиВБанки.ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
КонецФункции

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти
