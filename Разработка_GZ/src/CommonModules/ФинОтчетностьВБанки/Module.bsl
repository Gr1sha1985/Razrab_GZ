#Область ПрограммныйИнтерфейс

// Оповещаем об отправке.
Процедура ОповеститьОбОтправке(Организация = Неопределено) Экспорт
	
	ПараметрыСменыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыСменыЭтапа.Организация = Организация;
	ПараметрыСменыЭтапа.Имя = 
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаОтправкаСообщений();
		
	ДлительныеОперацииОбменаСБанками.ОповеститьОСменеЭтапаОбмена(
		ПараметрыСменыЭтапа);
	
КонецПроцедуры

// Оповещаем о шифровании и подписании.
Процедура ОповеститьОШифровании(Организация = Неопределено) Экспорт
	
	ПараметрыСменыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыСменыЭтапа.Организация = Организация;
	ПараметрыСменыЭтапа.Имя = 
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПодписаниеШифрованиеСообщений();
		
	ДлительныеОперацииОбменаСБанками.ОповеститьОСменеЭтапаОбмена(
		ПараметрыСменыЭтапа);
	
КонецПроцедуры

// Выполняет подписание и отправку отчета на сервере.
// Перед вызовом фонового задания необходимо получить сеансовый ключ сервиса криптографии.
// Предназначена для вызова в качестве метода фонового задания.
//
// Параметры:
//	Параметры - Структура - Содержит ключи:
//      * ТипТранзакции - ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.
//		* ПредметОбмена - ОпределяемыйТип.ПредметОбменаСБанками - отчет.
//      * ОтпечатокСертификата - Строка - сертификат, используемый для подписания файлов.
//		* Банк - СправочникСсылка.БанкиУниверсальногоОбмена - элемент справочника БанкиУниверсальногоОбмена, в которые нужно отправить отчет.
//		* Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками, Неопределено - ссылка на документооборот.
//		* ПараметрыОтбораСертификата - Структура - см. ЗаявкиНаКредитКлиентСервер.ПараметрыОтбораСертификата()
//		* ИдентификаторЖурналаОпераций - Строка - идентификатор журнала операций с файлами.
//
Процедура ПодписатьЗашифроватьВОблакеИОтправить(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Транзакция");
	
	ТипТранзакции = Параметры.ТипТранзакции;
	ОтпечатокСертификата = Параметры.ОтпечатокСертификата;
	ИдентификаторЖурналаОпераций = Параметры.ИдентификаторЖурналаОпераций;
	ПараметрыОтбораСертификата = Параметры.ПараметрыОтбораСертификата;
	ПредметОбмена = Параметры.ПредметОбмена;
	Документооборот = Параметры.Документооборот;
	Банк = Параметры.Банк;
	МаркерыБезопасности = Параметры.МаркерыБезопасности;
	
	УниверсальныйОбменСБанками.
		УстановитьМаркерыБезопасностиСервисаКриптографии(МаркерыБезопасности);
	
	// Выполняем криптооперации и сжатие.
	РезультатОперации = УниверсальныйОбменСБанками.ПодписатьИЗашифроватьДанныеВЖурналеОперацийСФайлами(
		ИдентификаторЖурналаОпераций,
		ОтпечатокСертификата,,
		ПараметрыОтбораСертификата);
	Если НЕ РезультатОперации.Выполнено Тогда
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(РезультатОперации.ОписаниеОшибки);
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
	КонецЕсли;
	
	// Создание транзакции.
	Если Результат.Выполнено Тогда
		
		Если Документооборот <> Неопределено Тогда
			ДокументооборотыПолучателей = Новый Соответствие;
			ДокументооборотыПолучателей.Вставить(Банк, Документооборот);
		Иначе
			ДокументооборотыПолучателей = Неопределено;
		КонецЕсли;
		
		// Создание транзакций обмена с банками.
		ПараметрыТранзакций = УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();
		ПараметрыТранзакций.ИдентификаторВоВременномХранилище = ИдентификаторЖурналаОпераций;
		ПараметрыТранзакций.Сервис                      = Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность;
		ПараметрыТранзакций.ТипДокументооборота         = Перечисления.ДокументооборотыОбменаСБанками.ФинансоваяОтчетность;
		ПараметрыТранзакций.ТипТранзакции               = ТипТранзакции;
		ПараметрыТранзакций.Предмет                     = ПредметОбмена;
		ПараметрыТранзакций.ДокументооборотыПолучателей = ДокументооборотыПолучателей;
		ПараметрыТранзакций.ОтпечатокСертификатаПодписи = ОтпечатокСертификата;
		ПараметрыТранзакций.Организация =
			УниверсальныйОбменСБанками.ОрганизацияПредмета(
				Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
				ПредметОбмена);

		РезультатОперации = УниверсальныйОбменСБанками.
			СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(ПараметрыТранзакций);
		Если НЕ РезультатОперации.Выполнено Тогда
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(РезультатОперации.ОписаниеОшибки);
			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Иначе
			Результат.Транзакция = РезультатОперации.Транзакции[0];
		КонецЕсли;
		
	КонецЕсли;
	
	// Отправка транзакции.
	Если Результат.Выполнено Тогда
		
		РезультатОперации = УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(
			Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
			РезультатОперации.Транзакции);
		НеОтправленныеТранзакции = РезультатОперации.НеОтправленныеТранзакции;
		Если Не РезультатОперации.Выполнено Тогда
			ДлительныеОперацииОбменаСБанкамиКлиентСервер.ВывестиОшибку(РезультатОперации.ОписаниеОшибки);
			УниверсальныйОбменСБанками.ПометитьНаУдалениеТранзакции(НеОтправленныеТранзакции);
			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеПредмета(Предмет, БезИмениБанка = Ложь) Экспорт
	
	ПоляПредмета = Новый Структура();
	ПоляПредмета.Вставить("Дата", "Дата");
	ПоляПредмета.Вставить("ОрганизацияНаименование", "Организация.Наименование");
	ПоляПредмета.Вставить("БанкНаименование",        "Банк.Наименование");

	РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, ПоляПредмета);
	
	ПериодСтрокой = ЗаполнениеФинОтчетностиВБанкиКлиентСервер.ПредставлениеПериодаОтчета(
		НачалоМесяца(РеквизитыПредмета.Дата), КонецМесяца(РеквизитыПредмета.Дата));

	Если БезИмениБанка Тогда
		Шаблон    = НСтр("ru = 'Отчет за %1 (%2)'");
		Результат = СтрШаблон(Шаблон,
			ПериодСтрокой, РеквизитыПредмета.ОрганизацияНаименование);
	Иначе
		Шаблон    = НСтр("ru = 'Отчет для %1 за %2 (%3)'");
		Результат = СтрШаблон(Шаблон, 
			РеквизитыПредмета.БанкНаименование, ПериодСтрокой, РеквизитыПредмета.ОрганизацияНаименование);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСервисаОтправкиФинансовойОтчетностиВБанки(ИмяПараметра = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ДанныеСервисаОтправкиФинансовойОтчетностиВБанки.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
		// Извлекаем конкретный параметр.
		ЗначениеПараметра = Неопределено;
		Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
		Результат = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьДанныеСервисаОтправкиФинансовойОтчетностиВБанки(Знач Данные, ИмяПараметра = "") Экспорт
	
	Если ПустаяСтрока(ИмяПараметра) И ТипЗнч(Данные) <> Тип("Структура") Тогда
		// Ожидаем структуру, а было передано что-то другое.
		ВызватьИсключение НСтр("ru='Передан неверный тип данных.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
		// Устанавливаем конкретный параметра.
		ДанныеИзБД = ДанныеСервисаОтправкиФинансовойОтчетностиВБанки();
		Если ДанныеИзБД = Неопределено Тогда
			ДанныеИзБД = Новый Структура;
		КонецЕсли;
		ДанныеИзБД.Вставить(ИмяПараметра, Данные);
		Данные = ДанныеИзБД;
	КонецЕсли;
	
	НовоеЗначение = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДанныеСервисаОтправкиФинансовойОтчетностиВБанки.Установить(НовоеЗначение);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Процедура ПослеЗавершенияОбменаПоСервису() Экспорт
	
	УстановитьДанныеСервисаОтправкиФинансовойОтчетностиВБанки(ТекущаяУниверсальнаяДата(),
		ФинОтчетностьВБанкиКлиентСервер.ИмяПараметраДатыПоследнегоОбмена());
	
КонецПроцедуры

Процедура СтатусДокументооборота(Документооборот, ОписаниеСтатуса) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.
		ЗначенияРеквизитовОбъекта(Документооборот, "ДатаПоследнейТранзакции, Предмет");
	ДатаПоследнейТранзакции = ЗначенияРеквизитов.ДатаПоследнейТранзакции;
	Предмет = ЗначенияРеквизитов.Предмет;
	
	ПоследнийДокументооборот =
		УниверсальныйОбменСБанками.ПоследнийДокументооборотПоПредмету(Предмет);
	
	Если (УниверсальноеВремя(ТекущаяДатаСеанса()) -
		УниверсальноеВремя(ДатаПоследнейТранзакции) < 3600 * 24 * 30)
		И ПоследнийДокументооборот = Документооборот Тогда
			ОписаниеСтатуса.Завершен       = Ложь;
			ОписаниеСтатуса.ОжидаетсяОтвет = Истина;
	Иначе
		// Обмен по документообороту отключаем если прошло более 30 дней после последней транзкции
		// или отчет был отправлен повторно.
		ОписаниеСтатуса.Завершен       = Истина;
		ОписаниеСтатуса.ОжидаетсяОтвет = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает актуальный статус отправки для указанного отчета.
//
// Параметры:
//	Предмет - ДокументСсылка.ФинОтчетВБанк - Ссылка на объект с данными отчета.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СтатусыОтправкиФинОтчетностиВБанки
//
Функция СтатусОтчета(Предмет) Экспорт

	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат Перечисления.СтатусыОтправкиФинОтчетностиВБанки.НеОтправлено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЖурналСтатусовФинОтчетностиВБанки.Статус
	|ИЗ
	|	РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки КАК ЖурналСтатусовФинОтчетностиВБанки
	|ГДЕ
	|	ЖурналСтатусовФинОтчетностиВБанки.Предмет = &Предмет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	КонецЕсли;
	
	Возврат Перечисления.СтатусыОтправкиФинОтчетностиВБанки.НеОтправлено;

КонецФункции

// См. УниверсальныйОбменСБанкамиПереопределяемый.ПриРасшифровкеТранзакции
Процедура ПриРасшифровкеТранзакции(Транзакция, Результат) Экспорт
	
КонецПроцедуры

// См. УниверсальныйОбменСБанкамиПереопределяемый.ПриПолученииТранзакции
Процедура ПриПолученииТранзакции(Транзакция, Результат) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДанныеТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
		
		Предмет = ДанныеТранзакции.Предмет;
		Документооборот = ДанныеТранзакции.Документооборот;
		ТипТранзакции = ДанныеТранзакции.ТипТранзакции;
		
		ПоследнийДокументооборот = УниверсальныйОбменСБанками.ПоследнийДокументооборотПоПредмету(Предмет);
		
		Если Документооборот <> ПоследнийДокументооборот Тогда
			// Транзакция отправлена на предыдущую отправку, игнорируем её.
			Возврат;
		КонецЕсли;
		
		НовыйСтатус = Неопределено;
		
		Если ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ИзвещениеОПолученииОтчетности Тогда
			НовыйСтатус = ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено();
		
		ИначеЕсли ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьСдана Тогда
			НовыйСтатус = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано();
			
		ИначеЕсли ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьНеПринята Тогда
			НовыйСтатус = ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено();
			
		КонецЕсли;
		
		ЭтоОшибка = ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанками.Ошибка;
		
		Если ЗначениеЗаполнено(НовыйСтатус)
			ИЛИ ЭтоОшибка Тогда
				Параметры = ПараметрыУстановкиСтатусаПредмета();
				ЗаполнитьЗначенияСвойств(Параметры, ДанныеТранзакции);
				// Сообщение с извещением о получении не отображается как новое.
				Непрочтенное = НовыйСтатус <> ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено();
				УстановитьСтатусПредметаВЖурнале(Параметры, НовыйСтатус, Непрочтенное);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйСтатус)
			И НовыйСтатус = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано() Тогда
			ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиФинОтчетности(Предмет, НовыйСтатус);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УниверсальныйОбменСБанкамиПереопределяемый.ПриОтправкеТранзакции
Процедура ПриОтправкеТранзакции(Транзакция, Результат) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДанныеТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
		
		СтатусОтчета = "";
		Если ДанныеТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.Отчетность Тогда
			Параметры = ПараметрыУстановкиСтатусаПредмета();
			ЗаполнитьЗначенияСвойств(Параметры, ДанныеТранзакции);
			Параметры.ДатаОтправки = ДанныеТранзакции.ДатаТранспорта;
			УстановитьСтатусПредметаВЖурнале(Параметры, Перечисления.СтатусыОтправкиФинОтчетностиВБанки.Отправлено);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик начала получения данных о сервисе заявок на кредит.
// Предназначена для вызова из модуля форм, в которых требуются актуальные данные о сервисе.
//
// Параметры:
//  Форма - УправляемаяФорма - должна содержать реквизиты СведенияОСервисе И СведенияОДлительнойОперации
//
Процедура НачатьОбновлениеДанныхСервиса(Форма) Экспорт 

	СведенияОСервисе = Форма.СведенияОСервисе;
	СведенияОДлительнойОперации = Форма.СведенияОДлительнойОперации;
	
	Если Форма.ТолькоПросмотр 
		ИЛИ СведенияОСервисе.ДанныеАктуальны
		ИЛИ СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		// Обновление не требуется или невозможно.
		Возврат;
	КонецЕсли;
	
	Если СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса <> Неопределено Тогда
		// Не завершено предыдущее фоновое задание, новое не запускаем.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение           = 0; // Не ждем завершения.
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление данных сервиса отправки 1С:ФинОтчетности'");
	
	СведенияОДлительнойОперации.Имя = "ОбновитьДанныеСервиса";
	СведенияОДлительнойОперации.ДлительнаяОперацияОбновленияДанныхСервиса = ДлительныеОперации.ВыполнитьВФоне(
		"ФинОтчетностьВБанки.ОбновитьДанныеСервиса",
		Новый Структура(),
		ПараметрыВыполнения);

КонецПроцедуры

// Обновляет внешние компоненты через интернет в фоновом процессе.
//
// Параметры:
//  Параметры - Структура - параметры фоновой процедуры. Содержит поля:
//      * Отбор - Структура - (необзательный) содержит параметры отбора документооборотов.
//  Адрес - Строка - адрес временного хранилища, в который помещается массив.
//
Процедура ОбновитьСтатусыОтчетов(Параметры, Адрес) Экспорт
	
	// Скачивание данных с сервера обмена с банками в рег.задании выполняется под полными правами,
	// поэтому если вызываем его интерактивно, то самостоятельно включаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Отбор", Неопределено);
	
	УниверсальныйОбменСБанками.ЗапуститьУниверсальныйОбменСБанкамиПоСервису(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		Адрес,
		Отбор);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет таблицу этапов отправки заявки.
//
// Параметры:
//	РеквизитыДокументооборота - Структура - см. УниверсальныйОбменСБанками.РеквизитыДокументооборота().
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры формы.
//	ТаблицаЭтаповОтправки - ТаблицаЗначений - см. УниверсальныйОбменСБанками.ЗаготовкаТаблицыЭтаповОтправки().
//
Процедура ЗаполнитьТаблицуЭтаповОтправки(РеквизитыДокументооборота, ДополнительныеПараметры, ТаблицаЭтаповОтправки) Экспорт
	
	ДатаОтправкиОтчетности  = '0001-01-01';
	МожноДобавлятьЭтапы     = Истина;
	СтрокаЭтапаДоставлено   = Неопределено;
	
	ВключаяПомеченныеНаУдаление = РеквизитыДокументооборота.Документооборот.ПометкаУдаления;
	Транзакции = УниверсальныйОбменСБанками.
		ТранзакцииПоДокументообороту(РеквизитыДокументооборота.Документооборот,, ВключаяПомеченныеНаУдаление);
	ТаблицаДанныхТранзакций = УниверсальныйОбменСБанками.РеквизитыТранзакций(Транзакции);
	
	// 1. Отправка отчетности.
	СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
		ТаблицаДанныхТранзакций,
		Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.Отчетность);

	Если СведенияОТранзакции <> Неопределено Тогда
		ДатаОтправкиОтчетности = СведенияОТранзакции.ДатаТранспорта;

		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено'");
		СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Истина;
		СтрокаЭтапа.Транзакция					= СведенияОТранзакции.Транзакция;
		СтрокаЭтапа.СостояниеДокументооборота	= УниверсальныйОбменСБанкамиКлиентСервер.
			СостояниеДокументооборотаНачат();
		
	Иначе
		// Отчет вообще не был отправлена.
		СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не отправлено'");
		СтрокаЭтапа.Дата						= '0001-01-01';
		СтрокаЭтапа.КомментарийКСостоянию		= "";
		СтрокаЭтапа.ЭтапПройден					= Истина;
		СтрокаЭтапа.СостояниеДокументооборота	= УниверсальныйОбменСБанкамиКлиентСервер.
			СостояниеДокументооборотаНеНачат();
		
		// Другие этапы не показываем.
		МожноДобавлятьЭтапы = Ложь;
	КонецЕсли;
	
	// 2. Доставлено в банк
	Если МожноДобавлятьЭтапы Тогда

		СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
			ТаблицаДанныхТранзакций,
			Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ИзвещениеОПолученииОтчетности,
			ДатаОтправкиОтчетности);
		
		Если СведенияОТранзакции <> Неопределено Тогда
			
			// Положительный протокол.
			СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
			СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено'");
			СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
			СтрокаЭтапа.КомментарийКСостоянию		= "";
			СтрокаЭтапа.ЭтапПройден					= Истина;
			//СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru='Квитанция о доставке'");
			СтрокаЭтапа.Протокол					= "КвитанцияОДоставке";
			СтрокаЭтапа.Транзакция					= СведенияОТранзакции.Транзакция;
			СтрокаЭтапа.СостояниеДокументооборота	= УниверсальныйОбменСБанкамиКлиентСервер.
				СостояниеДокументооборотаПоложительныйРезультат();
			
			// Если далее будет найдена транзакция "Сдано" или "Отклонено", то отметим "Доставлено" как промежуточный статус.
			СтрокаЭтапаДоставлено = СтрокаЭтапа;
				
		КонецЕсли;

	КонецЕсли;

	// 3. Результат обработки отчетности.
	Если МожноДобавлятьЭтапы Тогда
		
		ТипыДляПоиска = Новый Массив;
		ТипыДляПоиска.Добавить(Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьСдана);
		ТипыДляПоиска.Добавить(Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьНеПринята);
		
		СведенияОТранзакции = УниверсальныйОбменСБанками.НайтиТранзакциюВТаблице(
			ТаблицаДанныхТранзакций,
			ТипыДляПоиска,
			ДатаОтправкиОтчетности);
		
		Если СведенияОТранзакции <> Неопределено Тогда
			
			// Пришёл протокол от банка.
			Если СведенияОТранзакции.ТипТранзакции = 
					Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьСдана Тогда
					
				// Положительный протокол.
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Сдано'");
				СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.ЭтапПройден					= Истина;
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru='Квитанция о приеме'");
				СтрокаЭтапа.Протокол					= "КвитанцияОПриеме";
				СтрокаЭтапа.Транзакция					= СведенияОТранзакции.Транзакция;
				СтрокаЭтапа.СостояниеДокументооборота	= УниверсальныйОбменСБанкамиКлиентСервер.
					СостояниеДокументооборотаПоложительныйРезультат();
				
			ИначеЕсли СведенияОТранзакции.ТипТранзакции = 
					Перечисления.ТипыТранзакцийОбменаСБанкамиФинОтчетность.ОтчетностьНеПринята Тогда
					
				СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
				СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отклонено'");
				СтрокаЭтапа.Дата						= СведенияОТранзакции.ДатаТранспорта;
				СтрокаЭтапа.КомментарийКСостоянию		= "";
				СтрокаЭтапа.ЭтапПройден					= Истина;
				СтрокаЭтапа.НаименованиеПротокола		= НСтр("ru='Причины отказа'");
				СтрокаЭтапа.Протокол					= "ПричиныОтказа";
				СтрокаЭтапа.Транзакция					= СведенияОТранзакции.Транзакция;
				СтрокаЭтапа.СостояниеДокументооборота	= УниверсальныйОбменСБанкамиКлиентСервер.
					СостояниеДокументооборотаОтрицательныйРезультат();
				
			КонецЕсли;
			
			// Строку этапа Доставлено выделяем как промежуточный статус.
			Если СтрокаЭтапаДоставлено <> Неопределено Тогда
				СтрокаЭтапаДоставлено.СостояниеДокументооборота = УниверсальныйОбменСБанкамиКлиентСервер.
						СостояниеДокументооборотаНачат();
			КонецЕсли;
				
			// Другие этапы не показываем.
			МожноДобавлятьЭтапы = Ложь;
			
		КонецЕсли;

	КонецЕсли;
	
	// Если при обмене возникали ошибки, то они выводятся форма этапов отправки самостоятельно.

КонецПроцедуры

// Возвращает цвет фона для статуса отчета.
//
// Параметры:
//	СтатусОтчета - Перечисления.СтатусыОтправкиФинОтчетностиВБанки - Статус отчета.
//
// Возвращаемое занчение:
//	Цвет
//
Функция ЦветФонаСтатусаОтчета(СтатусОтчета) Экспорт

	Результат = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;

	Если СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено() Тогда
		Результат = ЦветаСтиля.ЦветФонаТекущейОтправки;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено() Тогда
		Результат = ЦветаСтиля.ЦветФонаОшибкиОтправки;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка() Тогда
		Результат = ЦветаСтиля.ЦветФонаОшибкиОтправки;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено()
		ИЛИ СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано() Тогда
			Результат = ЦветаСтиля.ЦветФонаУдачнойОтправки;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает цвет текста для статуса отчета.
//
// Параметры:
//	СтатусОтчета - Перечисления.СтатусыОтправкиФинОтчетностиВБанки - Статус отчета.
//
// Возвращаемое занчение:
//	Цвет
//
Функция ЦветТекстаСтатусаОтчета(СтатусОтчета) Экспорт

	Результат = ЦветаСтиля.ЦветТекстаПоля;

	Если СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено() Тогда
		Результат = ЦветаСтиля.ЦветНезавершившейсяОтправкиБРО;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено() Тогда
		Результат = ЦветаСтиля.ЦветОшибкиОтправкиБРО;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка() Тогда
		Результат = ЦветаСтиля.ЦветОшибкиОтправкиБРО;

	ИначеЕсли СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено()
		ИЛИ СтатусОтчета = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано() Тогда
			Результат = ЦветаСтиля.ЦветУспешнойОтправкиБРО;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращаем Истина, если последней полученной транзакцией была Ошибка.
Функция ЕстьКритическиеОшибкиДокументооборота(Документооборот, ДополнительныеПараметры) Экспорт
	
	Транзакции = УниверсальныйОбменСБанками.ТранзакцииПоДокументообороту(Документооборот);
	ЕстьКритическиеОшибки = Ложь;
	
	Для каждого Транзакция Из Транзакции Цикл
		ДанныеТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакции[0]);
		Если ДанныеТранзакции.Статус <> Перечисления.СтатусыТранзакцийОбменаСБанками.Получена Тогда
			Продолжить;
		Иначе
			Если ДанныеТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанками.Ошибка Тогда
				ЕстьКритическиеОшибки = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьКритическиеОшибки;
	
КонецФункции

Функция ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		Возврат НСтр("ru = 'Обновлено несколько дней назад'");
	КонецЕсли;
	
	ВременнаяРазница = ТекущаяУниверсальнаяДата() - ДатаПоследнегоОбновления;
	
	НадписьВремяОбновления = "";
	Если ВременнаяРазница < 0 Тогда
		НадписьВремяОбновления = "";
	ИначеЕсли ВременнаяРазница < 1 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено только что'");
	ИначеЕсли ВременнаяРазница < 15 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено менее 15 минут назад'");
	ИначеЕсли ВременнаяРазница < 30 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено 15 минут назад'");
	ИначеЕсли ВременнаяРазница < 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено полчаса назад'");
	ИначеЕсли ВременнаяРазница < 2 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено час назад'");
	ИначеЕсли ВременнаяРазница < 24 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько часов назад'");
	ИначеЕсли ВременнаяРазница < 48 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено вчера'");
	Иначе
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько дней назад'");
	КонецЕсли;
	
	Возврат НадписьВремяОбновления;
	
КонецФункции

Функция ДатаПоследнегоОбновленияСобытий() Экспорт
	
	Возврат ФинОтчетностьВБанки.ДанныеСервисаОтправкиФинансовойОтчетностиВБанки(
		ФинОтчетностьВБанкиКлиентСервер.ИмяПараметраДатыПоследнегоОбмена());
	
КонецФункции

Функция ГруппаНовогоСобытияДокументооборота(ДанныеГрупп, ПараметрыСобытия) Экспорт
	
	ЗавершенныеСостояния = Новый Массив;
	ЗавершенныеСостояния.Добавить(ФинОтчетностьВБанкиКлиентСервер.СтатусСдано());
	ЗавершенныеСостояния.Добавить(ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено());
	ЗавершенныеСостояния.Добавить(ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка());
	
	НезавершенныеСостояния = Новый Массив;
	НезавершенныеСостояния.Добавить(ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено());
	НезавершенныеСостояния.Добавить(ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено());
	
	Если ЗавершенныеСостояния.Найти(ПараметрыСобытия.Статус) <> Неопределено Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.ГруппаЗавершенныеОтправки();
	ИначеЕсли НезавершенныеСостояния.Найти(ПараметрыСобытия.Статус) <> Неопределено Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.ГруппаНеЗавершенныеОтправки();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ГруппыСобытийСервиса(ДанныеГрупп) Экспорт
	
	Группа = УниверсальныйОбменСБанками.НоваяГруппаСобытий(
		ФинОтчетностьВБанкиКлиентСервер.ГруппаЗавершенныеОтправки(),
		"Завершенные отправки");
	Группа.НадписьНовыхНет = НСтр("ru = 'Новых нет'");
	Группа.ЗаголовокНедавноПросмотренных = НСтр("ru='Недавно завершенные отправки'");
	Группа.Порядок = 0;
	Группа.ШаблонНеНулевогоКоличестваСобытий = НСтр("ru='Завершенные отправки (%1)'");
	Группа.ПодсчетКоличестваНовыхСобытий = Истина;
	УниверсальныйОбменСБанками.ДобавитьГруппуСобытий(ДанныеГрупп, Группа);
	
	Группа = УниверсальныйОбменСБанками.НоваяГруппаСобытий(
		ФинОтчетностьВБанкиКлиентСервер.ГруппаНеЗавершенныеОтправки(),
		"Незавершенные отправки");
	Группа.НадписьНовыхНет = НСтр("ru = 'Незавершенных нет'");
	Группа.ЗаголовокНедавноПросмотренных = "";
	Группа.Отступ = "     ";
	Группа.ВсегдаНепросмотренные = Истина;
	Группа.Порядок = 1;
	Группа.ШаблонНеНулевогоКоличестваСобытий = НСтр("ru='Незавершенные отправки (%1)'");
	Группа.ПодсчетКоличестваНовыхСобытий = Истина;
	УниверсальныйОбменСБанками.ДобавитьГруппуСобытий(ДанныеГрупп, Группа);
	
КонецПроцедуры

Функция ПометитьПредметыПрочтенными(Предметы) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналОтчетовСтатусы.Предмет,
	|	ЖурналОтчетовСтатусы.Непрочтенное
	|ИЗ
	|	РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки КАК ЖурналОтчетовСтатусы
	|ГДЕ
	|	ЖурналОтчетовСтатусы.Предмет В(&Предметы)";

	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Непрочтенное Тогда
			
			Предмет = Выборка.Предмет;
			Результат.Добавить(Предмет);
			
			НаборЗаписей = РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Предмет.Установить(Предмет);
			НаборЗаписей.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.Непрочтенное = Ложь;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует список банков, в которые можно передавать отчетность.
//
// Параметры:
//	ВключаяНеактивные - Булево - Признак включения в список банков, которые на текущий момент являются неактивными.
//
// Возвращаемое значение:
//	СписокЗначений - список банков.
//
Функция ДоступныеБанки(ВключаяНеактивные = Ложь) Экспорт
	
	Результат = Новый СписокЗначений;

	// Отчетность в Сбербанк доступна всегда.
	БанкПоУмолчанию = ОтчетностьВБанкиСлужебный.БанкЗаемщикаПоУмолчанию();
	Если ЗначениеЗаполнено(БанкПоУмолчанию) Тогда
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкПоУмолчанию, "Наименование");
		Результат.Добавить(БанкПоУмолчанию, РеквизитыБанка.Наименование);
	КонецЕсли;
	
	// Среди остальных банков даем выбирать только те, для которых доступна передача отчетности.
	ХарактеристикиФинОтчетности = УниверсальныйОбменСБанками.ХарактеристикиУслугБанков(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		Перечисления.ХарактеристикиСервисаФинансовойОтчетности.КомплектыОтчетностиПоВерсиямСервиса); 
		
	ДоступныеБанки = ХарактеристикиФинОтчетности.ВыгрузитьКолонку("Банк");
		
	Если ВключаяНеактивные Тогда
		// Некоторые банки, которые сейчас являются неактивными, раньше могли быть активны.
		// Поэтому если по ним созданы отчеты, то показываем их тоже.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЖурналСтатусовФинОтчетностиВБанки.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.ЖурналСтатусовФинОтчетностиВБанки КАК ЖурналСтатусовФинОтчетностиВБанки
		|ГДЕ
		|	ЖурналСтатусовФинОтчетностиВБанки.Банк ССЫЛКА Справочник.БанкиУниверсальногоОбмена";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ДоступныеБанки.Найти(Выборка.Банк) = Неопределено Тогда
				ДоступныеБанки.Добавить(Выборка.Банк);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если ДоступныеБанки.Количество() = 0 Тогда
		// Нет других доступных банков.
		Возврат Результат;
	КонецЕсли;
		
	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		ДоступныеБанки,
		"Наименование");
		
	Для каждого РеквизитБанка Из РеквизитыБанков Цикл
		Результат.Добавить(РеквизитБанка.Банк, РеквизитБанка.Наименование);
	КонецЦикла;
	
	// Отсортируем по алфавиту.
	Результат.СортироватьПоПредставлению();
	
	Возврат Результат;

КонецФункции

Функция СтатусОтчетностиВБанкиВСтатусФинОтчетности(СтатусСтрокой) Экспорт

	Если СтатусСтрокой = НСтр("ru = 'Не отправлено'") Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусНеОтправлено();

	ИначеЕсли СтатусСтрокой = НСтр("ru = 'Отправлено'") Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено();

	ИначеЕсли СтатусСтрокой = НСтр("ru = 'Доставлено'") Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено();

	ИначеЕсли СтатусСтрокой = НСтр("ru = 'Отклонено'") Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено();

	ИначеЕсли СтатусСтрокой = НСтр("ru = 'Ошибка'") Тогда
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка();
	
	Иначе
		Возврат ФинОтчетностьВБанкиКлиентСервер.СтатусНеОтправлено();
		
	КонецЕсли;

КонецФункции

Функция ОпределитьСостояниеСдачиОтчетности(Статус) Экспорт
	
	Результат = Неопределено;
	
	Если Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусОтклонено()
		ИЛИ Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусОшибка() Тогда
		Результат = Перечисления.СостоянияДокументооборотаОбменаСБанками.ОтрицательныйРезультат;

	ИначеЕсли Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусСдано() Тогда
		Результат = Перечисления.СостоянияДокументооборотаОбменаСБанками.ПоложительныйРезультат;

	ИначеЕсли Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусОтправлено()
		ИЛИ Статус = ФинОтчетностьВБанкиКлиентСервер.СтатусДоставлено() Тогда
		Результат = Перечисления.СостоянияДокументооборотаОбменаСБанками.Начат;

	Иначе
		Результат = Перечисления.СостоянияДокументооборотаОбменаСБанками.НеНачат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СброситьВерсиюУслугБанка() Экспорт
	
	УниверсальныйОбменСБанками.СброситьВерсиюУслугБанка(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
	
КонецПроцедуры

// Выполняет обновление сервиса 1С:ФинОтчетности и возвращает признак успешности выполнения.
//
// Параметры:
//	ВызыватьИсключение - Булево - Истина, если необходимо выбросить исключение в случае ошибки.
//
// Возвращаемое значение:
//	Булево - Истина, если данные успешно обновлены, иначе Ложь.
//
Функция ОбновитьДанныеСервисаФинОтчетности(ВызыватьИсключение) Экспорт

	СведенияОСервисе = УниверсальныйОбменСБанками.СведенияОСервисе(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);

	Если СведенияОСервисе.ДанныеАктуальны Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СведенияОСервисе.ТребуетсяПодключениеИнтернетПоддержки Тогда
		Возврат Ложь;
	КонецЕсли;

	Успешно = Ложь;

	Попытка
		УниверсальныйОбменСБанками.АктуализироватьДанныеСервиса(Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность);
		Успешно = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации("ФинОтчетностьВБанки.ОбновитьДанныеСервиса",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
			
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обновление данных о банках и характеристиках сервиса финансовая отчетность.
// Предназначена для вызова в качестве метода фонового задания.
// Вызывается из формы списка отчетов.
//
Процедура ОбновитьДанныеСервиса(Параметры, АдресХранилища) Экспорт

	ОбновитьДанныеСервисаФинОтчетности(Истина);

КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи() документа РегламентированныйОтчет для регистрации
// отчетности в Сбербанк в общем списке отчетов в банки.
//
Процедура ФинОтчетностьВБанкиПриЗаписиРегламентированногоОтчета(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ
		ИЛИ Источник.ИсточникОтчета <> "БухгалтерскаяОтчетностьВБанк"
		ИЛИ НЕ ЗначениеЗаполнено(Источник.Банк) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУстановкиСтатуса = ПараметрыУстановкиСтатусаПредмета();
	ПараметрыУстановкиСтатуса.Организация      = Источник.Организация;
	ПараметрыУстановкиСтатуса.Предмет          = Источник.Ссылка;
	ПараметрыУстановкиСтатуса.Банк             = Источник.Банк;
	ПараметрыУстановкиСтатуса.Наименование     = НаименованиеОтчетностиВСбербанк();
	ПараметрыУстановкиСтатуса.ДатаНачала       = Источник.ДатаНачала;
	ПараметрыУстановкиСтатуса.ДатаОкончания    = Источник.ДатаОкончания;
	ПараметрыУстановкиСтатуса.Комментарий      = Источник.Комментарий;
	ПараметрыУстановкиСтатуса.ПометкаУдаления  = Источник.ПометкаУдаления;
	
	НовыйСтатус = СтатусОтчетностиВБанкиВСтатусФинОтчетности(Источник.СтатусОтчета);
	УстановитьСтатусПредметаВЖурнале(ПараметрыУстановкиСтатуса, НовыйСтатус);

КонецПроцедуры

Функция НаименованиеОтчетностиВСбербанк() Экспорт

	Возврат НСтр("ru = 'Бухгалтерская отчетность для Сбербанка'");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыУстановкиСтатусаПредмета()
	
	ТипДата 			= Новый ОписаниеТипов("Дата");
	ТипОрганизации 		= Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипБанки 			= Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена");
	ТипДокументообороты	= Новый ОписаниеТипов("СправочникСсылка.ДокументооборотыОбменаСБанками");
	ТипыТранзакций 		= Метаданные.ОпределяемыеТипы.ТипыТранзакцийОбменаСБанками.Тип;
	ТипПредметы 		= Метаданные.ОпределяемыеТипы.ПредметОбменаСБанками.Тип;
	
	Результат = Новый Структура;
	// Организация статуса.
	Результат.Вставить("Организация",			ТипОрганизации.ПривестиЗначение(Неопределено));
	// Предмет статуса.
	Результат.Вставить("Предмет",				ТипПредметы.ПривестиЗначение(Неопределено));
	// Дата отправки транзакции.
	Результат.Вставить("ДатаОтправки",			ТипДата.ПривестиЗначение(Неопределено));
	// Дата сохрания предмета.
	Результат.Вставить("ДатаЗаписиПредмета",	ТипДата.ПривестиЗначение(Неопределено));
	// Документооборот.
	Результат.Вставить("Документооборот",		ТипДокументообороты.ПривестиЗначение(Неопределено));
	// Тип транзакции статуса.
	Результат.Вставить("ТипТранзакции",			ТипыТранзакций.ПривестиЗначение(Неопределено));
	// Банк, в который отправлен предмет.
	Результат.Вставить("Банк",					ТипБанки.ПривестиЗначение(Неопределено));
	// Наименование пакета отчетности.
	Результат.Вставить("Наименование",			Неопределено);
	// Дата начала периода предмета.
	Результат.Вставить("ДатаНачала",			ТипДата.ПривестиЗначение(Неопределено));
	// Дата окончания периода предмета, Дата.
	Результат.Вставить("ДатаОкончания",			ТипДата.ПривестиЗначение(Неопределено));
	// Комментарий к статусу, Строка.
	Результат.Вставить("Комментарий",			Неопределено);
	// Признак пометки удаления, Булево.
	Результат.Вставить("ПометкаУдаления",		Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСтатусПредметаВЖурнале(ПараметрыУстановкиСтатуса, Статус, Непрочтенное = Ложь)
	
	Предмет            = ПараметрыУстановкиСтатуса.Предмет;
	ДатаОтправки       = ПараметрыУстановкиСтатуса.ДатаОтправки;
	ДатаЗаписиПредмета = ПараметрыУстановкиСтатуса.ДатаЗаписиПредмета;
	Банк               = ПараметрыУстановкиСтатуса.Банк;
	Наименование       = ПараметрыУстановкиСтатуса.Наименование;
	ДатаНачала         = ПараметрыУстановкиСтатуса.ДатаНачала;
	ДатаОкончания      = ПараметрыУстановкиСтатуса.ДатаОкончания;
	Комментарий        = ПараметрыУстановкиСтатуса.Комментарий;
	ПометкаУдаления    = ПараметрыУстановкиСтатуса.ПометкаУдаления;
	ТипТранзакции      = ПараметрыУстановкиСтатуса.ТипТранзакции;
	Документооборот    = ПараметрыУстановкиСтатуса.Документооборот;
	
	Организация = УниверсальныйОбменСБанками.ОрганизацияПредмета(
		Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
		Предмет);
	
	Менеджер = РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки.СоздатьМенеджерЗаписи();
	Менеджер.Организация 	= Организация;
	Менеджер.Предмет 		= Предмет;
	Менеджер.Прочитать();
	
	ЕстьКритическиеОшибки =
		УниверсальныйОбменСБанками.ЕстьКритическиеОшибкиДокументооборота(
			Перечисления.СервисыОбменаСБанками.ФинансоваяОтчетность,
			Документооборот,
			Новый Структура);
			
	Менеджер.ЕстьКритическиеОшибки = ЕстьКритическиеОшибки;
		
	Менеджер.Организация 	= Организация;
	Менеджер.Предмет 		= Предмет;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Менеджер.Банк 		= Банк;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Статус) Тогда
		Менеджер.Статус = Статус;
		Менеджер.СостояниеСдачиОтчетности = ОпределитьСостояниеСдачиОтчетности(Статус);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтправки) Тогда
		Менеджер.ДатаОтправки = ДатаОтправки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗаписиПредмета) Тогда
		Менеджер.ДатаЗаписиПредмета = ДатаЗаписиПредмета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Менеджер.Наименование = Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Менеджер.ДатаНачала = ДатаНачала;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Менеджер.ДатаОкончания = ДатаОкончания;
	КонецЕсли;

	Если Комментарий <> Неопределено Тогда
		Менеджер.Комментарий = Комментарий;
	КонецЕсли;

	Если ПометкаУдаления <> Неопределено Тогда
		Менеджер.ПометкаУдаления = ПометкаУдаления;
	КонецЕсли;
	
	Менеджер.Непрочтенное = Непрочтенное;
	Менеджер.ЕстьКритическиеОшибки = ЕстьКритическиеОшибки;
	
	Менеджер.Записать(Истина);
	
КонецПроцедуры

Функция ДобавитьУзелXML(
		Родитель,
		Код,
		ЭтоАтрибут = Ложь,
		Значение = Неопределено,
		Необязательный = Ложь,
		ЭтоCDATA = Ложь,
		МаксимальнаяДлинаСтрокиССокращением = Неопределено) Экспорт

	
	Возврат УниверсальныйОбменСБанками.ДобавитьУзелXML(
		Родитель,
		Код,
		ЭтоАтрибут,
		Значение,
		Необязательный,
		ЭтоCDATA,
		МаксимальнаяДлинаСтрокиССокращением);
	
КонецФункции

#КонецОбласти