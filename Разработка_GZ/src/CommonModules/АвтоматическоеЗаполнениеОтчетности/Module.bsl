
#Область ПрограммныйИнтерфейс

// Процедура составляет перечень заполняемых библиотекой показателей.
//
// Параметры:
//  ПоказателиОтчета - Структура - состав полей определяет БРО
//
Процедура ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000201", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000401", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000402", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000403", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000404", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000405", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000501", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000502", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000503", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000504", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000505", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000506", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000507", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000508", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000509", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000601", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000602", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020001003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020003103", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020003203", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004201", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004301", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004302", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004204", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004304", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004205", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020004305", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020005101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020005201", Истина, Ложь);
	
КонецПроцедуры

// Процедура заполняет в переданном "контейнере" известные библиотеке показатели.
//
// Параметры:
//  ПараметрыОтчета - Структура - состав полей определяет БРО
//  Контейнер - Структура - состав полей определяет БРО
//
Процедура ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПоказателиОтчета);
	
	ДанныеПриложения2 = Контейнер.Приложение2[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеПриложения2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Если ТипЗнч(ДанныеПриложения2[КлючИЗначение.Ключ]) = Тип("Число") Тогда
				ДанныеПриложения2[КлючИЗначение.Ключ] = 0
			Иначе
				ДанныеПриложения2[КлючИЗначение.Ключ] = ""
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Контейнер.Приложение2.Очистить();
	
	ДанныеДопСтрокПриложения2 = Новый Структура("П0000200040, П0000200051", Контейнер.Приложение2_ДанныеДопСтрокДоходыИВычеты.Выгрузить(), Контейнер.Приложение2_ДанныеДопСтрокСтандартныеВычеты.Выгрузить());
	Для каждого КлючИЗначение Из ДанныеДопСтрокПриложения2 Цикл
		КлючИЗначение.Значение.Очистить();
	КонецЦикла;
	
	Если КонецГода(ДатаКонцаПериодаОтчета) <> КонецМесяца(ДатаКонцаПериодаОтчета) Тогда
		СтраницаПриложения2 = Контейнер.Приложение2.Добавить(); // первая и единственная страница
		СтраницаПриложения2.Данные.Добавить(ДанныеПриложения2);
		СтраницаПриложения2.ДанныеДопСтрок.Добавить(ДанныеДопСтрокПриложения2, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НалоговыйПериод", Год(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПервичныеДокументы.Ссылка
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Сотрудники КАК ПервичныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль КАК СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль
	|		ПО ПервичныеДокументы.Ссылка = СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Ссылка
	|ГДЕ
	|	СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.НалоговыйПериод = &НалоговыйПериод
	|	И НЕ СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.ПометкаУдаления
	|	И СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Проведен
	|	И СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Организация = &Организация";
	
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
		СтраницаПриложения2 = Контейнер.Приложение2.Добавить(); // первая и единственная страница
		СтраницаПриложения2.Данные.Добавить(ДанныеПриложения2);
		СтраницаПриложения2.ДанныеДопСтрок.Добавить(ДанныеДопСтрокПриложения2, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
	Иначе
		
		// Копия для создания других страниц.
		СтруктураПолейПриложения2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПриложения2);
		СтруктураПолейДопСтрокПриложения2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДопСтрокПриложения2);
		
		УчетНДФЛ.СоздатьВТСтавкиНалогаЧислом(Запрос.МенеджерВременныхТаблиц);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Получатели.Сотрудник,
		|	Получатели.НомерСправки КАК П000020000101,
		|	Получатели.Ссылка.Дата КАК П000020000102,
		|	""00"" КАК П000020000103,
		|	Получатели.ИНН КАК П000020000201,
		|	Получатели.Фамилия КАК П000020000301,
		|	Получатели.Имя КАК П000020000302,
		|	Получатели.Отчество КАК П000020000303,
		|	Получатели.СтатусНалогоплательщика,
		|	Получатели.ДатаРождения КАК П000020000402,
		|	ЕСТЬNULL(Получатели.Гражданство.Код, """") КАК П000020000403,
		|	ЕСТЬNULL(Получатели.ВидДокумента.КодМВД, """") КАК П000020000404,
		|	Получатели.СерияДокумента + "" "" + Получатели.НомерДокумента КАК П000020000405,
		|	Получатели.Адрес,
		|	Получатели.АдресЗарубежом,
		|	ЕСТЬNULL(СтавкиНалогаЧислом.Размер, 0) * 100 КАК П000020001003,
		|	ВЫБОР
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|			ТОГДА Получатели.ИсчисленоПоСтавке13
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|			ТОГДА Получатели.ИсчисленоПоСтавке30
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|			ТОГДА Получатели.ИсчисленоПоСтавке35
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|			ТОГДА Получатели.ИсчисленоПоСтавке9
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|			ТОГДА Получатели.ИсчисленоПоСтавке15
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000020003003,
		|	ВЫБОР
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|			ТОГДА Получатели.УдержаноПоСтавке13
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|			ТОГДА Получатели.УдержаноПоСтавке30
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|			ТОГДА Получатели.УдержаноПоСтавке35
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|			ТОГДА Получатели.УдержаноПоСтавке9
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|			ТОГДА Получатели.УдержаноПоСтавке15
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000020003103,
		|	ВЫБОР
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|			ТОГДА Получатели.ПеречисленоПоСтавке13
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|			ТОГДА Получатели.ПеречисленоПоСтавке30
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|			ТОГДА Получатели.ПеречисленоПоСтавке35
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|			ТОГДА Получатели.ПеречисленоПоСтавке9
		|		КОГДА Получатели.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|			ТОГДА Получатели.ПеречисленоПоСтавке15
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000020003203
		|ИЗ
		|	Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.Сотрудники КАК Получатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаЧислом КАК СтавкиНалогаЧислом
		|		ПО Получатели.Ставка = СтавкиНалогаЧислом.СтавкаНалогообложения
		|ГДЕ
		|	Получатели.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДокументы КАК Документы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	П000020000101
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.НомерСправки КАК НомерСправки,
		|	Доходы.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года КАК П000020004001,
		|	СУММА(Доходы.СуммаДохода) КАК П000020004101,
		|	ВЫБОР
		|		КОГДА Доходы.СуммаВычета = 0
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА Доходы.Ссылка.НалоговыйПериод < 2015
		|						ТОГДА Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года
		|					КОГДА Доходы.Ссылка.НалоговыйПериод < 2016
		|						ТОГДА Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2015Года
		|					ИНАЧЕ Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2016Года
		|				КОНЕЦ, """")
		|	КОНЕЦ КАК КодВычета,
		|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета
		|ИЗ
		|	Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.СведенияОДоходах КАК Доходы
		|ГДЕ
		|	Доходы.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДокументы КАК Документы)
		|	И Доходы.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.НомерСправки,
		|	Доходы.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года,
		|	ВЫБОР
		|		КОГДА Доходы.СуммаВычета = 0
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА Доходы.Ссылка.НалоговыйПериод < 2015
		|						ТОГДА Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года
		|					КОГДА Доходы.Ссылка.НалоговыйПериод < 2016
		|						ТОГДА Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2015Года
		|					ИНАЧЕ Доходы.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2016Года
		|				КОНЕЦ, """")
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСправки,
		|	П000020004001,
		|	КодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вычеты.НомерСправки КАК НомерСправки,
		|	ВЫБОР
		|		КОГДА Вычеты.Ссылка.НалоговыйПериод < 2015
		|			ТОГДА Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года
		|		КОГДА Вычеты.Ссылка.НалоговыйПериод < 2016
		|			ТОГДА Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2015Года
		|		ИНАЧЕ Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2016Года
		|	КОНЕЦ КАК П000020005101,
		|	СУММА(Вычеты.СуммаВычета) КАК П000020005201
		|ИЗ
		|	Документ.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль.СведенияОВычетах КАК Вычеты
		|ГДЕ
		|	Вычеты.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДокументы КАК Документы)
		|	И Вычеты.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Вычеты.НомерСправки,
		|	ВЫБОР
		|		КОГДА Вычеты.Ссылка.НалоговыйПериод < 2015
		|			ТОГДА Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года
		|		КОГДА Вычеты.Ссылка.НалоговыйПериод < 2016
		|			ТОГДА Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2015Года
		|		ИНАЧЕ Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2016Года
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСправки,
		|	П000020005101";
		
		Запрос.Текст = ТекстЗапроса;
		Результаты = Запрос.ВыполнитьПакет();
		Справки = Результаты[0].Выбрать();
		Доходы = Результаты[1].Выгрузить();
		Вычеты = Результаты[2].Выбрать();
		
		ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
		
		СоответствиеКодовСтран = Новый Соответствие;
		СоответствиеИменСтран = Новый Соответствие;
		СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
		СоответствиеКодовДоходов = Новый Соответствие;
		СоответствиеКодовФНССтатусамНДФЛ = Новый Соответствие;
		УчетНДФЛ.ПрочитатьКлассификаторыВСоответствия(
				СоответствиеКодовСтран, 
				СоответствиеИменСтран, 
				СоответствиеДокументовУдостоверяющихЛичность,
				СоответствиеКодовДоходов,
				СоответствиеКодовФНССтатусамНДФЛ);
		
		// -------------------------------------------------------------------------------
		// Вывод данных в отчет
		
		СтруктураПоиска = Новый Структура("НомерСправки");
		СтруктураПоискаВычетовКДоходам = Новый Структура("П000020004001");
		Пока Справки.Следующий() Цикл
			
			ДанныеПриложения2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПриложения2);
			ДанныеДопСтрокПриложения2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейДопСтрокПриложения2);

			СтраницаПриложения2 = Контейнер.Приложение2.Добавить(); // новая страница
			СтраницаПриложения2.Данные.Добавить(ДанныеПриложения2);
			СтраницаПриложения2.ДанныеДопСтрок.Добавить(ДанныеДопСтрокПриложения2, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			
			ЗаполнитьЗначенияСвойств(ДанныеПриложения2, Справки);
			СтруктураПоиска.НомерСправки = Справки.П000020000101;
			
			Описание = СоответствиеКодовФНССтатусамНДФЛ.Получить(Справки.СтатусНалогоплательщика);
			ДанныеПриложения2.П000020000401 = ?(Описание = Неопределено, "", Описание.КодФНС);
			
			СтруктураАдреса = ОбщегоНазначения.СкопироватьРекурсивно(ПустаяСтруктураАдреса);
			Если ЗначениеЗаполнено(Справки.Адрес) Тогда
				СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
						Справки.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			КонецЕсли;
			ДанныеПриложения2.П000020000501 = СтруктураАдреса.Индекс;
			ДанныеПриложения2.П000020000502 = СтруктураАдреса.КодРегиона;
			ДанныеПриложения2.П000020000503 = СтруктураАдреса.Район;
			ДанныеПриложения2.П000020000504 = СтруктураАдреса.Город;
			ДанныеПриложения2.П000020000505 = СтруктураАдреса.НаселенныйПункт;
			ДанныеПриложения2.П000020000506 = СтруктураАдреса.Улица;
			ДанныеПриложения2.П000020000507 = СтруктураАдреса.Дом;
			ДанныеПриложения2.П000020000508 = СтруктураАдреса.Корпус;
			ДанныеПриложения2.П000020000509 = СтруктураАдреса.Квартира;
			
			Если ЗначениеЗаполнено(Справки.АдресЗарубежом) Тогда
				СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
						Справки.АдресЗаРубежом, Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
				ДанныеПриложения2.П000020000601 = СоответствиеИменСтран[СтруктураАдреса.Страна];
				ДанныеПриложения2.П000020000602 = СтруктураАдреса.Представление;
			Иначе // очищаем адресные данные
				ДанныеПриложения2.П000020000601 = "";
				ДанныеПриложения2.П000020000602 = "";
			КонецЕсли;
			
			ТаблицаДоходов = ДанныеДопСтрокПриложения2.П0000200040;
			ДоходыСправки = Доходы.Скопировать(Доходы.НайтиСтроки(СтруктураПоиска));
			ИтогоДоходов = ДоходыСправки.Скопировать();
			ИтогоДоходов.Свернуть("П000020004001", "П000020004101");
			Для каждого СтрокаДохода Из ИтогоДоходов Цикл
				СтрокаДанных = ТаблицаДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДохода);
				ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетовКДоходам, СтрокаДохода);
				НомерВычета = 1;
				Для каждого СтрокаВычета Из ДоходыСправки.НайтиСтроки(СтруктураПоискаВычетовКДоходам) Цикл
					СтрокаДанных["П00002000420" + НомерВычета] = СтрокаВычета.КодВычета;
					СтрокаДанных["П00002000430" + НомерВычета] = СтрокаВычета.СуммаВычета;
					Если НомерВычета = 5 Тогда
						Прервать;
					КонецЕсли;
					НомерВычета = НомерВычета + 1;
				КонецЦикла;
			КонецЦикла;
			
			ТаблицаВычетов = ДанныеДопСтрокПриложения2.П0000200051;
			Вычеты.Сбросить();
			Пока Вычеты.НайтиСледующий(СтруктураПоиска) Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаВычетов.Добавить(), Вычеты);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль, Истина);
	Списки.Вставить(Метаданные.Справочники.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыльПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

#КонецОбласти

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "75c02143-c53a-40c5-a99d-af23628b4f30", Метаданные.Документы.СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль);
	
КонецПроцедуры

#КонецОбласти

