////////////////////////////////////////////////////////////////////////////////
// Подсистема "Индивидуальный предприниматель"
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает дату начала применения схемы расчета авансовых платежей предпринимателем
// (п. 7 ст. 1 Федерального закона от 15.04.2019 N 63-ФЗ)
//
// Возвращаемое значение:
//   Дата
//
Функция ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Экспорт
	
	Возврат Дата('20200101');
	
КонецФункции

// Возвращает признак ввода начальных остатков по счету 68.21 - НДФЛ индивидуального предпринимателя
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой требуется проверить остатки по счету.
//
// Возвращаемое значение:
//   Булево
//
Функция НачальныеОстаткиПоНалогуВведены(Организация) Экспорт
	
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(
		Организация, ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК ВводНачальныхОстатковРасчетыПоНалогамИСборам
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Проведен
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Организация = &Организация
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.ОтражатьВБухгалтерскомУчете
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета В(&СчетНачисленияНалога)");
	
	Запрос.УстановитьПараметр("СчетНачисленияНалога",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя)); // 68.21
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает период, за который уплачивается налог.
//
// Параметры:
//  ПоказательПериода - Строка - Показатель периода платежа в бюджет.
//  ДатаПлатежа       - Дата - дата платежного документа.
//
// Возвращаемое значение:
//   Дата - начало квартала, за который уплачивается налог;
//          для налога за год - начало последнего квартала в году.
//
Функция НалоговыйПериодПоПлатежнымДанным(ПоказательПериода, ДатаПлатежа) Экспорт
	
	ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ПоказательПериода);
	
	Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
		
		НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ДатаПлатежа, -1));
		
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьГод() Тогда
		
		НалоговыйПериод = НачалоКвартала(КонецГода(ОписаниеПериода.Дата));
		
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьПолугодие() Тогда
		
		НалоговыйПериод = НачалоКвартала(ДобавитьМесяц(ОписаниеПериода.Дата, 3));
		
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал()
		Или ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц() Тогда
		
		НалоговыйПериод = НачалоКвартала(ОписаниеПериода.Дата);
		
	Иначе
		
		НалоговыйПериод = ДатаПлатежа;
		
	КонецЕсли;
	
	Возврат НалоговыйПериод;
	
КонецФункции

// Определяет периодичность налогового платежа в зависимости от оплачиваемого периода.
//
// Параметры:
//  НалоговыйПериод - Дата - оплачиваемый период
//
// Возвращаемое значение:
//   ПеречислениеСсылка.Периодичность, возможные значения:
//    * Год, если платеж за последний квартал (налог за год)
//    * Квартал, если платеж за все остальные кварталы (авансовый платеж).
Функция ПериодичностьНалоговогоПлатежа(НалоговыйПериод) Экспорт
	
	Если КонецКвартала(НалоговыйПериод) = КонецГода(НалоговыйПериод) Тогда
		// Платеж за последний квартал года - это налог за год.
		Возврат Перечисления.Периодичность.Год;
	Иначе
		// За периоды кроме последнего квартала года уплачивается ежеквартальный авансовый платеж.
		Возврат Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
КонецФункции

// Возвращает наиболее вероятный период (квартал), за который уплачивается НДФЛ
//
// Параметры:
//   ДатаПлатежа - Дата - Дата платежа фактическая
//
// Возвращаемое значение:
//   Дата - начало квартала, за который выполняется платеж
//
Функция РелевантныйПериодНалоговогоПлатежа(ДатаПлатежа) Экспорт
	
	// Обработаем наиболее вероятные сценарии:
	// - до 15 июля - оплата налога за год
	// - в срок с начала апреля до 25 апреля - уплата авансового платежа
	// - после 15 июля - уплата авансового платежа
	
	ДеньУплатыАвансаПоУмолчанию = ДеньУплатыАвансовогоПлатежаПоУмолчанию();
	СрокУплатыНалогаЗаГод = СрокУплатыНалогаПоУмолчанию(ДобавитьМесяц(ДатаПлатежа, -12));
	
	Если Месяц(ДатаПлатежа) = 4 И День(ДатаПлатежа) <= ДеньУплатыАвансаПоУмолчанию Тогда
		
		НалоговыйПериод = НачалоКвартала(ДобавитьМесяц(ДатаПлатежа, -3));
		
	ИначеЕсли ДатаПлатежа < СрокУплатыНалогаЗаГод Тогда
		
		НалоговыйПериод = НачалоКвартала(НачалоГода(ДатаПлатежа) - 1);
		
	Иначе
		
		НалоговыйПериод = НачалоКвартала(ДобавитьМесяц(ДатаПлатежа, -3));
		
	КонецЕсли;
	
	Возврат НалоговыйПериод;
	
КонецФункции

// Возвращает календарный срок уплаты налога на доходы физических лиц
//
// Параметры:
//   Период - Дата - Дата в пределах года, за который определяется срок уплаты налога
//
// Возвращаемое значение:
//   Дата
//
Функция СрокУплатыНалогаПоУмолчанию(Период) Экспорт
	
	Возврат Дата(Год(Период) + 1, 07, 15);
	
КонецФункции

// Возвращает признак того, применяется ли освобождение от уплаты налога по НДФЛ
//
// Параметры:
//   Период      - Дата - Дата, для которой определяется освобождение от налога
//   Организация - СправочникСсылка.Организации - организация, для которой выполняется проверка освобождения от налога
//
// Возвращаемое значение:
//   Булево
//
Функция ПрименяетсяОсвобождениеОтНалога(Организация, Период) Экспорт
	
	Если НалоговыйУчет.ВозможноОсвобождениеОтНалога(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель(), Период)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область РасчетыПоНДФЛ

// Определяет сумму отраженных в бухгалтерском учете (уплаченных) платежей по налогу НДФЛ за указанный период.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - Налогоплательщик.
//  НачалоПериода - Дата - Дата и время начала анализируемого периода.
//  КонецПериода  - Дата - Дата и время окончания анализируемого периода.
//
// Возвращаемое значение:
//  Число - сумма уплаченного налога (авансовых платежей).
//
Функция УплаченныйНалогЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода
		Или Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Период поиска с учетом авансовых платежей, совершенных в прошлом году
	НачалоГода = НачалоГода(НачалоГода(НачалоПериода) - 1);
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаОрганизации)); // 50.01
	СчетаДенежныхСредств.Добавить(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));   // 51
	
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         Новый Граница(НачалоГода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачала",            НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",         КонецПериода);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаДенежныхСредств",  СчетаДенежныхСредств);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			СчетДт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаДенежныхСредств),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|				ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|				ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|			ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Сумма;
	
КонецФункции

// Возвращает остаток расчетов по НДФЛ на конец периода.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - налогоплательщик.
//   Период      - Дата - Дата и время, на которую будет рассчитан остаток.
//
// Возвращаемое значение:
//   Число - остаток расчетов по налогу:
//           если отрицательный - имеется непогашенная задолженность;
//           если положительный - имеется переплата по налогу.
//
Функция ОстатокРасчетовПоНДФЛ(Организация, Период) Экспорт
	
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков",       Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0) КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Остаток;
	
КонецФункции

// Определяет остаток неоплаченного налога за периоды ранее переданного.
// Остаток определяется исходя изо всех оплат за прошлые налоговые периоды независимо от даты фактических платежей.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, для которой требуются сведения.
//  ТекущийПериод - Дата - дата в пределах налогового периода (года),
//                         на начало которого требуется остаток расчетов за прошлые годы.
//
// Возвращаемое значение:
//   Число - остаток расчетов по налогу:
//           если отрицательный - имеется непогашенная задолженность за прошлые годы;
//           если положительный - имеется переплата по налогу за прошлые годы.
//
Функция ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, ТекущийПериод) Экспорт
	
	ДатаНачалаУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	// Если учет еще не ведется, или передан год до первого года ведения учета,
	// расчеты за предыдущие годы заведомо нулевые.
	Если ДатаНачалаУчета = Неопределено Или Год(ДатаНачалаУчета) > Год(ТекущийПериод) Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",             НачалоГода(ТекущийПериод));
	Запрос.УстановитьПараметр("КонецПредыдущегоГода",   Новый Граница(НачалоГода(ТекущийПериод) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("СчетНачисленияНалога",   СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаОплатыНалога",      СчетаОплатыНалога);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	// Данные о расчетах по налогу за предыдущие налоговые периоды определяются следующим образом:
	// 1. Получаем платежи за предыдущие налоговые периоды, совершенные в текущем налоговом периоде.
	// 2. Суммируем с суммой задолженности по НДФЛ на начало текущего налогового периода
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ДанныеЗаполнения.СуммаПлатежа) КАК СуммаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК СуммаПлатежа
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоГода,
	|				,
	|				Регистратор,
	|				СчетДт В (&СчетНачисленияНалога),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|				СчетКт В (&СчетаОплатыНалога),
	|				,
	|				Организация = &Организация
	|					И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|					ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|				КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|					ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ < &НачалоГода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ХозрасчетныйОстатки.СуммаОстаток), 0)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&КонецПредыдущегоГода,
	|				Счет В (&СчетНачисленияНалога),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|				Организация = &Организация
	|					И Субконто1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОстатки) КАК ДанныеЗаполнения";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].СуммаПлатежа;
	
КонецФункции

// Получает развернутые по годам расчеты по налогу за налоговые периоды ранее переданного.
// Оплаченный налог за каждый год определяется исходя изо всех оплат, в которых указан период в пределах года,
// независимо от даты фактических платежей.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, для которой требуются сведения.
//  ТекущийПериод - Дата - дата в пределах налогового периода (года),
//                         на начало которого требуются данные расчетов за прошлые годы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - развернутые по годам суммы расчетов по налогу, состав см. в НоваяТаблицаРасчетовПоНалогу().
//
Функция РасчетыПоНалогуЗаПредыдущиеПериоды(Организация, ТекущийПериод) Экспорт
	
	ТаблицаРасчетов = НоваяТаблицаРасчетовПоНалогу();
	
	ДатаНачалаУчетаРасчетов = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	// Если учет еще не ведется, суммы налога за предыдущие годы заведомо нулевые.
	Если Не ЗначениеЗаполнено(ДатаНачалаУчетаРасчетов) Или Год(ДатаНачалаУчетаРасчетов) > Год(ТекущийПериод) Тогда
		Возврат ТаблицаРасчетов;
	КонецЕсли;
	
	НачалоПериода = НачалоГода(ДобавитьМесяц(ДатаНачалаУчетаРасчетов, - 12)); // Начало года ввода первых документов, включая ввод остатков.
	КонецПериода  = НачалоГода(ТекущийПериод) - 1;                            // Конец года, предшествующего переданному.
	
	Периоды = КалендарьБухгалтера.Периоды(НачалоПериода, КонецПериода, Перечисления.Периодичность.Год);
	
	Если НЕ ЗначениеЗаполнено(Периоды) Тогда
		Возврат ТаблицаРасчетов;
	КонецЕсли;
	
	// Для получения расчетов за каждый налоговый период определяется начисленный налог за период (год),
	// затем из начислений вычитаются платежи за данный налоговый период и переплата за прошлые годы при ее наличии.
	
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // Кт 68.21
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонецПериода);
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога",  СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаОплатыНалога",      СчетаОплатыНалога);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, ГОД) КАК НалоговыйПериод,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Начислено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Год,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	|			НЕ КорСчет В (&СчетаОплатыНалога),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументУплаты,
	|	ХозрасчетныйОбороты.Период КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		КОГДА ХозрасчетныйОбороты.СуммаОборот < 0
	|			ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаПлатежа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	|			КорСчет В (&СчетаОплатыНалога),
	|			) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Начисления = Результат[Результат.ВГраница() - 1].Выгрузить();
	Платежи    = Результат[Результат.ВГраница()].Выгрузить();
	
	Для Каждого НалоговыйПериод Из Периоды Цикл
		
		Начислено = 0;
		Уплачено  = 0;
		
		НачалоНалоговогоПериода = НачалоГода(НалоговыйПериод);
		КонецНалоговогоПериода  = КонецГода(НалоговыйПериод);
		
		СтрокаРасчетов = Начисления.Найти(НалоговыйПериод, "НалоговыйПериод");
		Если СтрокаРасчетов <> Неопределено Тогда
			Начислено = СтрокаРасчетов.Начислено;
		КонецЕсли;
		
		Для Каждого Платеж Из Платежи Цикл
			// Определим налоговый период для операций, в которых он явно не указан.
			Если НЕ ЗначениеЗаполнено(Платеж.НалоговыйПериод) Тогда
				Платеж.НалоговыйПериод = РелевантныйПериодНалоговогоПлатежа(Платеж.ДатаПлатежа);
			КонецЕсли;
			
			Если Платеж.НалоговыйПериод <= КонецНалоговогоПериода И Платеж.НалоговыйПериод >= НачалоНалоговогоПериода Тогда
				Уплачено = Уплачено + Платеж.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаРасчетов.Добавить();
		
		НоваяСтрока.НалоговыйПериод = НалоговыйПериод;
		НоваяСтрока.Начислено = Начислено;
		НоваяСтрока.Уплачено  = Уплачено;
		
		ОстатокРасчетов = Уплачено - Начислено;
		
		Если ОстатокРасчетов > 0 Тогда
			НоваяСтрока.Переплата = ОстатокРасчетов;
		Иначе
			НоваяСтрока.Задолженность = - ОстатокРасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

#КонецОбласти

#Область НачислениеНДФЛ

// Описывает контекст, в котором выполняется расчет налога НФДЛ - организацию, период и т.п.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - налогоплательщик.
//  ПериодРасчета - Дата - дата из последнего квартала отчетного периода, за который рассчитывается налог.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована, или не применяет НДФЛ,
//                 или же налог в данном периоде не исчисляется в силу п. 2 статьи 55 НК РФ.
//
Функция НовыйКонтекстРасчетаНалога(Организация, ПериодРасчета) Экспорт
	
	Перем ДатаИзменения;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоОтчетногоПериода = НачалоКвартала(ПериодРасчета);
	КонецОтчетногоПериода  = КонецКвартала(ПериодРасчета);
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		КонецОтчетногоПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, ,
		ДатаРегистрации);
	
	НалоговыйПериодПропущен = УчетДоходовИРасходовПредпринимателя.НалоговыйПериодПропущен(
		Организация, КонецОтчетногоПериода, ДатаРегистрации);
	
	Если КонецОтчетногоПериода < НалоговыйПериод.Начало Или НалоговыйПериодПропущен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, КонецОтчетногоПериода, ДатаИзменения);
	
	Если Не ПлательщикНДФЛ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФормыОтчета = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(КонецОтчетногоПериода);
	
	КонтекстРасчета = Новый Структура;
	
	КонтекстРасчета.Вставить("Организация",             Организация);
	КонтекстРасчета.Вставить("Период",                  ПериодРасчета);
	КонтекстРасчета.Вставить("ИмяФормыДекларации3НДФЛ", ИмяФормыОтчета);
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", НалоговыйПериод.Начало);
	КонтекстРасчета.Вставить("КонецОтчетногоПериода",   КонецОтчетногоПериода);
	КонтекстРасчета.Вставить("НачалоГода",              НалоговыйПериод.Период);
	КонтекстРасчета.Вставить("ПлательщикНДФЛ",          ПлательщикНДФЛ);
	
	// Если организация зарегистрирована в текущем году, не имеет смысла рассчитывать налог с начала года.
	НачалоПериодаРасчета = Макс(НалоговыйПериод.Период, НалоговыйПериод.Начало);
	
	ЭтоПервыйОтчетныйПериод      = (НачалоОтчетногоПериода = НачалоКвартала(НачалоПериодаРасчета));
	ЭтоЗавершающийОтчетныйПериод = (КонецОтчетногоПериода = КонецКвартала(НалоговыйПериод.Конец));
	
	КонтекстРасчета.Вставить("ЭтоПервыйОтчетныйПериод",      ЭтоПервыйОтчетныйПериод);
	КонтекстРасчета.Вставить("ЭтоЗавершающийОтчетныйПериод", ЭтоЗавершающийОтчетныйПериод);
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Определяет сумму отраженных в бухгалтерском учете начислений по НДФЛ за указанный период.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - Налогоплательщик.
//  НачалоПериода - Дата - Дата и время начала анализируемого периода.
//  КонецПериода  - Дата - Дата и время окончания анализируемого периода.
//
// Возвращаемое значение:
//  Число - сумма уплаченного налога (авансовых платежей).
//
Функция НачисленныйНалогЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода
		Или Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетОтраженияНалога = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // 99.01.1
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",          Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетОтраженияНалога",   СчетОтраженияНалога);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Сумма;
	
КонецФункции

// Возвращает таблицу отраженных в бухгалтерском учете (уплаченных) платежей по налогу НДФЛ за указанный период.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - Налогоплательщик.
//  НачалоПериода - Дата - Дата и время начала анализируемого периода.
//  КонецПериода  - Дата - Дата и время окончания анализируемого периода.
//
// Возвращаемое значение:
//  ТаблицаЗначений - документы авансовых платежей.
//
Функция УплаченныйНалогЗаПериодПоДокументам(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода
		Или Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Уплаченный налог за период с учетом авансовых платежей, совершенных в прошлом году
	НачалоГода = НачалоГода(НачалоГода(НачалоПериода) - 1);
	КонецГода  = КонецГода(КонецПериода);
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.КассаОрганизации)); // 50.01
	СчетаДенежныхСредств.Добавить(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));   // 51
	
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         Новый Граница(НачалоГода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачала",            НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",         КонецПериода);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаДенежныхСредств",  СчетаДенежныхСредств);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК СуммаОплаты,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_Выписки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			СчетДт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаДенежныхСредств),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.СчетДт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Выписки.ДокументОплаты КАК ДокументОплаты,
	|	ВТ_Выписки.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ВТ_Выписки.НалоговыйПериод КАК НалоговыйПериод,
	|	ВТ_Выписки.ВидПлатежа КАК ВидПлатежа,
	|	ВТ_Выписки.СчетУчета КАК СчетУчета
	|ИЗ
	|	ВТ_Выписки КАК ВТ_Выписки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ВТ_Выписки.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВТ_Выписки.НалоговыйПериод МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Рассчитывает налог НДФЛ по данным информационной базы и возвращает данные
// для отражения начисленного налога в проводках и во вспомогательных регистрах для справки-расчета.
//
// Параметры:
//  КонтекстРасчета - Структура - см. НовыйКонтекстРасчета().
//
// Возвращаемое значение:
//  Структура - содержит таблицы для отражения начисленного налога в бухучете и для формирования справки-расчета:
//     * ТаблицаПроводок       - ТаблицаЗначений - см. НалоговыйУчет.НоваяТаблицаНачисленияНалога()
//     * ТаблицаСправкиРасчета - ТаблицаЗначений - см. НоваяТаблицаСправкиРасчетаНалога()
//
Функция ПодготовитьТаблицыРасчетаНДФЛ(КонтекстРасчета) Экспорт
	
	ТаблицаПроводок       = НалоговыйУчет.НоваяТаблицаНачисленияНалога();
	ТаблицаСправкиРасчета = НоваяТаблицаСправкиРасчетаНалога();
	
	РассчитатьНДФЛ(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета);
	
	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("ТаблицаПроводок",       ТаблицаПроводок);
	РезультатРасчета.Вставить("ТаблицаСправкиРасчета", ТаблицаСправкиРасчета);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Выполняет запись движений в базу
//
// Параметры:
//   Проводки      - ТаблицаЗначений - Данные, необходимые для записи с РегистрБухгалтерии.Хозрасчетный
//   СправкаРасчет - ТаблицаЗначений - Данные, необходимые для записи в РегистрСведений.ИПРасчетНДФЛ
//   Реквизиты     - ТаблицаЗначений - Реквизиты регламентной операции
//   Движения      - КоллекцияДвижений - Движения регламентной операции
//
// Возвращаемое значение:
Процедура СформироватьДвиженияНачислениеНДФЛ(Проводки, СправкаРасчет, Реквизиты, Движения) Экспорт

	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыНачисленияНалога(Проводки, СправкаРасчет, Реквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводка по начислению налога.
	Для Каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетДт, Проводка.СубконтоДт);
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетКт, Проводка.СубконтоКт);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	// Данные для справки-расчета.
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		Параметры.СправкаРасчет,
		Параметры.Реквизиты,
		"ИПРасчетНДФЛ");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхВычета

// Конструктор параметров записи данных стандартных вычетов.
//
// Параметры:
//   Организация          - СправочникСсылка.Организации - Организация, для которой указывается вычет
//   НачалоПериода        - Дата - Начало периода действия вычета
//   КонецПериода         - Дата - Конец периода действия вычета
//   ИмяОбъектаМетаданных - Строка - Наименование регистра, напр. РегистрСведений.ИПСтандартныеВычетыНаДетей
//
// Возвращаемое значение:
//   Структура
//
Функция НовыйРеквизитыЗаписиВычета(Организация, НачалоПериода, КонецПериода, ИмяОбъектаМетаданных) Экспорт
	
	РеквизитыЗаписи = Новый Структура;
	РеквизитыЗаписи.Вставить("Организация",  Организация);                  // СправочникСсылка.Организации
	РеквизитыЗаписи.Вставить("Период",       НачалоПериода);                // Дата
	РеквизитыЗаписи.Вставить("КонецПериода", КонецПериода);                 // Дата
	РеквизитыЗаписи.Вставить("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных); // Строка - Наименование регистра, напр. РегистрСведений.ИПСтандартныеВычетыНаДетей
	
	Возврат РеквизитыЗаписи;
	
КонецФункции

// Выполняет запись данных в регистр стандартных вычетов
//
// Параметры:
//   ПараметрыВычета - ТаблицаЗначений - Данные для записи в регистр.
//   РеквизитыЗаписи - Структура - см. НовыйРеквизитыЗаписиВычета()
//
Процедура СохранитьСтандартныйВычетЗаПериод(ПараметрыВычета, РеквизитыЗаписи) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РеквизитыЗаписи.ИмяОбъектаМетаданных);
	
	ВычетыЗаПериод = МенеджерОбъекта.ДанныеВычетаЗаПериод(
		РеквизитыЗаписи.Организация, РеквизитыЗаписи.Период, РеквизитыЗаписи.КонецПериода);
	
	ОтчетныйГод = Год(РеквизитыЗаписи.КонецПериода);
	
	// Удаляем строки за выбранный период
	ИндексЗаписи = 0;
	Для Каждого ТекущийВычет Из ВычетыЗаПериод Цикл
		
		МенеджерЗаписи = МенеджерОбъекта.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущийВычет);
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
	НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(РеквизитыЗаписи.Организация);
	НаборЗаписей.Прочитать();
	
	// Вычет не применяется
	Если Не ЗначениеЗаполнено(ПараметрыВычета) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, РеквизитыЗаписи);
		НаборЗаписей.Записать();
		
	Иначе
		
		// Запись переданных данных
		Для Каждого ТекущийВычет Из ПараметрыВычета Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущийВычет);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, РеквизитыЗаписи);
			НоваяЗапись.Период = Дата(ОтчетныйГод, ТекущийВычет.НомерМесяца, 1);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	// Данные являются первичными для расчета начислений по НДФЛ,
	// поэтому необходимо сбить регламентную операцию "Расчет НДФЛ ИП" за последний месяц
	СдвинутьГраницуАктуальностиРасчетНДФЛДляИП(РеквизитыЗаписи.Организация, РеквизитыЗаписи.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСуммыВычета

// Конструктор параметров расчета суммы стандартного вычета.
//
// Возвращаемое значение:
//   Структура
//
Функция НовыйПараметрыВычета() Экспорт
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Организация");              // СправочникСсылка.Организации
	СтруктураРезультат.Вставить("НачалоПериода");            // Дата
	СтруктураРезультат.Вставить("КонецПериода");             // Дата
	СтруктураРезультат.Вставить("КоличествоМесяцев", 0);     // Число - Количество месяцев применения вычета
	СтруктураРезультат.Вставить("ВыбраннаяФорма", "");       // Имя формы регламентированного отчета для Декларации 3-НДФЛ
	СтруктураРезультат.Вставить("ВычетЗаВесьПериод", Ложь);  // Булево
	СтруктураРезультат.Вставить("ИмяОбъектаМетаданных", ""); // Строка - Полное имя объекта метаданного (напр., РегистрСведений.ИПСтандартныеВычетыНаДетей)
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Конструктор параметров расчета суммы стандартного вычета.
//
// Параметры:
//   Организация       - СправочникСсылка.Организации - Организация, для которой применяется вычет
//   НачалоПериода     - Число - Дата начала периода расчета вычета
//   КонецПериода      - Дата - Конец периода расчета вычета
//   ВыбраннаяФорма    - Строка - наименование формы отчета для Декларации 3-НДФЛ
//
// Возвращаемое значение:
//   Структура
//
Функция НовыеПараметрыРасчетаДоходыИРасходыПредпринимателя(Организация, НачалоПериода, КонецПериода, ВыбраннаяФорма) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация",                  Организация);    // СправочникСсылка.Организации
	ПараметрыРасчета.Вставить("НачалоПериода",                НачалоПериода);  // Дата
	ПараметрыРасчета.Вставить("КонецПериода",                 КонецПериода);   // Дата
	ПараметрыРасчета.Вставить("ВыбраннаяФорма",               ВыбраннаяФорма); // Форма отчета Декларация 3-НДФЛ
	ПараметрыРасчета.Вставить("УникальныйИдентификаторФормы", "");             // Строка
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Возвращает рассчитанные значения согласно КУДиР ИП за период:
//  - сумма доходов
//  - сумма расходов
//  - сумма предела для применения стандартного вычета на детей
//  - количество месяцев, для которых применяется стандартный вычет на детей
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыеПараметрыРасчетаДоходыИРасходыПредпринимателя()
//
// Возвращаемое значение:
//   Структура - см. НовыйРезультатРасчетаДоходыРасходыПредпринимателя()
//
Функция СведенияОДоходахИВычетах(ПараметрыВыполнения) Экспорт
	
	ДанныеРезультат = НовыйРезультатРасчетаДоходыРасходыПредпринимателя();
	
	Если ПараметрыВыполнения.НачалоПериода > ПараметрыВыполнения.КонецПериода Тогда 
		Возврат ДанныеРезультат;
	КонецЕсли;
	
	ТаблицаДоходовРасходов =
		УчетДоходовИРасходовПредпринимателя.ДоходыРасходыОтПредпринимательскойДеятельностиЗаПериод3НДФЛ(ПараметрыВыполнения);
	
	// Дополним таблицу месяцами, в которых у предпринимателя не было доходов и расходов
	МесяцНачало = 1;
	МесяцКонец  = Месяц(ПараметрыВыполнения.КонецПериода);
	ОтчетныйГод = Год(ПараметрыВыполнения.НачалоПериода);
	
	Для НомерМесяца = МесяцНачало По МесяцКонец Цикл
		
		Период = Дата(ОтчетныйГод, НомерМесяца, 1);
		Если ТаблицаДоходовРасходов.Найти(Период, "Период") = Неопределено Тогда
			НоваяСтрока = ТаблицаДоходовРасходов.Добавить();
			НоваяСтрока.Период = Период;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоходовРасходов.Сортировать("Период");
	
	// Рассчитаем количество месяцев вычета с учетом пределов
	ПределыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ПараметрыВыполнения.ВыбраннаяФорма);
	ДанныеРезультат.ПределВычетаНаДетейДоходы = ПределыВычетов.ВычетНаДетейДоходы;
	
	ОбщаяСуммаДоходов = 0;
	Для Каждого СтрокаДоходыРасходы Из ТаблицаДоходовРасходов Цикл
		
		ОбщаяСуммаДоходов = ОбщаяСуммаДоходов + СтрокаДоходыРасходы.ИтогоДоходов;
		ДанныеРезультат.Доходы  = ДанныеРезультат.Доходы + СтрокаДоходыРасходы.ИтогоДоходов;
		ДанныеРезультат.Расходы = ДанныеРезультат.Расходы + СтрокаДоходыРасходы.ИтогоРасходов;
		ДанныеРезультат.ПрочиеДоходы = ДанныеРезультат.ПрочиеДоходы + СтрокаДоходыРасходы.ПрочиеДоходы;
		
		Если ОбщаяСуммаДоходов < ПределыВычетов.ВычетНаДетейДоходы Тогда
			ДанныеРезультат.КоличествоМесяцевВычетНаДетей = ДанныеРезультат.КоличествоМесяцевВычетНаДетей + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеРезультат;
	
КонецФункции

// Возвращает таблицу с данными о вычетах помесячно за выбранный период.
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыйПараметрыВычета()
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДанныеВычетаПоМесяцамЗаПериод(ПараметрыВыполнения) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыВыполнения.ИмяОбъектаМетаданных);
	ДанныеВычетов = МенеджерОбъекта.ДанныеВычетаЗаПериод(ПараметрыВыполнения.Организация,
		ПараметрыВыполнения.НачалоПериода, ПараметрыВыполнения.КонецПериода);
	
	ДанныеВычетов.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ДанныеВычетов.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаСтрока(8));  // Представление месяца
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ВыбраннаяФорма) Тогда
		ВыбраннаяФорма = ПараметрыВыполнения.ВыбраннаяФорма;
	Иначе
		ВыбраннаяФорма = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(ПараметрыВыполнения.НачалоПериода);
	КонецЕсли;
	
	РазмерыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.РазмерыВычетов(ВыбраннаяФорма);
	
	МесяцНачало = 1;
	МесяцКонец  = Месяц(ПараметрыВыполнения.КонецПериода);
	
	// Добавим недостающие периоды в таблицу по действующим данным
	ДобавитьНедостающиеПериодыВТаблицу(ДанныеВычетов, МесяцКонец);
	
	// Удалим строку с данными предыдущего отчетного периода
	СтрокаПредыдущийПериод = ДанныеВычетов.Найти(0, "НомерМесяца");
	Если ЗначениеЗаполнено(ДанныеВычетов) И СтрокаПредыдущийПериод <> Неопределено Тогда
		ДанныеВычетов.Удалить(СтрокаПредыдущийПериод);
	КонецЕсли;
	
	// Отсортируем данные по порядку
	ДанныеВычетов.Сортировать("НомерМесяца");
	
	Если ПараметрыВыполнения.ВычетЗаВесьПериод Тогда
		КоличествоМесяцев = МесяцКонец - МесяцНачало + 1;
	Иначе
		КоличествоМесяцев = ПараметрыВыполнения.КоличествоМесяцев;
	КонецЕсли;
	
	// Расчет суммы вычета с учетом количества месяцев к применению
	Для Каждого ТекущаяСтрока Из ДанныеВычетов Цикл
		
		Если ТекущаяСтрока.НомерМесяца <= КоличествоМесяцев Тогда
			ТекущаяСтрока.СуммаВычета = МенеджерОбъекта.РазмерТекущегоВычета(ТекущаяСтрока, РазмерыВычетов);
		КонецЕсли;
		
		ТекущаяСтрока.Месяц = ОбщегоНазначенияБПКлиентСервер.ПредставлениеМесяца(ТекущаяСтрока.НомерМесяца);
		
	КонецЦикла;
	
	Возврат ДанныеВычетов;
	
КонецФункции

// Возвращает сумму вычета за выбранный период.
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыйПараметрыВычета()
//
// Возвращаемое значение:
//   Число
//
Функция СуммаСтандартногоВычета(ПараметрыВыполнения) Экспорт
	
	СуммаВычета   = 0;
	ТаблицаДанных = ДанныеВычетаПоМесяцамЗаПериод(ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
		СуммаВычета = ТаблицаДанных.Итог("СуммаВычета");
	КонецЕсли;
	
	Возврат СуммаВычета;
	
КонецФункции

// Рассчитывает сумму профессионального вычета, на который имеет право предприниматель
//
// Параметры:
//   СуммаРасходов                - Число - Сумма подтвержденных расходов по данным КУДиР ИП
//   СуммаДоходов                 - Число - Сумма подтвержденных доходов по данным КУДиР ИП
//   ВыбраннаяФорма               - Строка - Имя действующей формы декларации 3-НДФЛ на период расчета налога
//   ЭтоЗавершающийОтчетныйПериод - Булево - Признак, указывающий, является ли период расчета налога завершающим в налоговом периоде
//
// Возвращаемое значение:
//   Число
//
Функция СуммаПрофессиональногоВычета(СуммаРасходов, СуммаДоходов, ВыбраннаяФорма, ЭтоЗавершающийОтчетныйПериод) Экспорт
	
	Если ЭтоЗавершающийОтчетныйПериод И СуммаРасходов = 0 Тогда
		// Абз. 4 п. 1 ст. 221 НК РФ
		// Если ИП не в состоянии документально подтвердить свои расходы,
		// профессиональный налоговый вычет производится в размере 20% общей суммы доходов
		КоэффициентВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(ВыбраннаяФорма) / 100;
		Результат = СуммаДоходов * КоэффициентВычета;
	Иначе
		Результат = СуммаРасходов;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДеньУплатыАвансовогоПлатежаПоУмолчанию()
	
	Возврат 25;
	
КонецФункции

Процедура ДобавитьНедостающиеПериодыВТаблицу(ДанныеВычетов, КоличествоМесяцев)
	
	// Если в таблице вычетов не добавлены все строки по месяцам,
	// тогда следует добавить значения, исходя из данных действующих периодов
	Если КоличествоМесяцев >= ДанныеВычетов.Количество() Тогда
		
		Для Каждого ТекущаяСтрока Из ДанныеВычетов Цикл
			
			НомерМесяцаСледующий = ТекущаяСтрока.НомерМесяца + 1;
			// Проверим, есть ли в таблице месяц, следующий за текущим:
			// если нет, тогда добавим строку в таблицу вычетов, исходя их данных текущей строки
			Если НомерМесяцаСледующий <= КоличествоМесяцев
				И ДанныеВычетов.Найти(НомерМесяцаСледующий, "НомерМесяца") = Неопределено Тогда
				
				НоваяСтрока = ДанныеВычетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.НомерМесяца = НомерМесяцаСледующий;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаРасчетовПоНалогу()
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	
	ТаблицаРасчетов.Колонки.Добавить("НалоговыйПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРасчетов.Колонки.Добавить("Начислено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Уплачено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Переплата", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Задолженность", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

Функция НоваяТаблицаСправкиРасчетаНалога()
	
	ТипСтандартнаяСумма                = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ТипСтандартнаяСуммаНеотрицательная = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("Доходы",                ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ВидВычета",             Новый ОписаниеТипов("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	Результат.Колонки.Добавить("СуммаВычета",           ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("НалоговаяБаза",         ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогИсчисленныйВсего", ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("АвансовыеПлатежи",      ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогКУплате",          ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("Переплата",             ТипСтандартнаяСумма);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатРасчетаДоходыРасходыПредпринимателя()
	
	ДанныеРезультат = Новый Структура;
	ДанныеРезультат.Вставить("Доходы", 0);
	ДанныеРезультат.Вставить("Расходы", 0);
	ДанныеРезультат.Вставить("КоличествоМесяцевВычетНаДетей", 0);
	ДанныеРезультат.Вставить("ПределВычетаНаДетейДоходы", 0);
	ДанныеРезультат.Вставить("ПрочиеДоходы", 0);
	
	Возврат ДанныеРезультат;
	
КонецФункции

Функция ПодготовитьПараметрыНачисленияНалога(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	Разделитель = ",";
	
	СписокОбязательныхКолонок = Новый Массив;
	СписокОбязательныхКолонок.Добавить("Период");      // <Дата> - период движений - дата документа
	СписокОбязательныхКолонок.Добавить("Регистратор"); // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
	СписокОбязательныхКолонок.Добавить("Организация"); // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СтрСоединить(СписокОбязательныхКолонок, Разделитель)));
		
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = Новый Массив;
	СписокОбязательныхКолонок.Добавить("СчетДт");                 // <ПланСчетовСсылка.Хозрасчетный> - счет дебета
	СписокОбязательныхКолонок.Добавить("СчетКт");                 // <ПланСчетовСсылка.Хозрасчетный> - счет кредита
	СписокОбязательныхКолонок.Добавить("ПрибылиИУбытки");         // <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
	СписокОбязательныхКолонок.Добавить("ВидыПлатежейВГосБюджет"); // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
	СписокОбязательныхКолонок.Добавить("Сумма");                  // <Число, 15, 2> - сумма проводки
	СписокОбязательныхКолонок.Добавить("Содержание");             // <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СтрСоединить(СписокОбязательныхКолонок, Разделитель)));
		
	// Подготовка таблицы Параметры.СправкаРасчет
	
	СписокОбязательныхКолонок = Новый Массив;
	СписокОбязательныхКолонок.Добавить("ПериодРасчета");         // <Дата> - период расчета (конец квартала)
	СписокОбязательныхКолонок.Добавить("Доходы");                // <Число, 15, 2> - сумма доходов за период (с начала года)
	СписокОбязательныхКолонок.Добавить("ВидВычета");             // <ПеречислениеСсылка.ВычетыФизическихЛиц>
	СписокОбязательныхКолонок.Добавить("СуммаВычета");           // <Число, 15, 2> - сумма расходов за период (с начала года)
	СписокОбязательныхКолонок.Добавить("НалоговаяБаза");         // <Число, 15, 2> - налоговая база с начала года
	СписокОбязательныхКолонок.Добавить("СтавкаНалога");          // <Число,  5, 2> - ставка налога НДФЛ
	СписокОбязательныхКолонок.Добавить("НалогИсчисленныйВсего"); // <Число, 15, 2> - сумма фактически исчисленного налога с начала года по текущий квартал включительно
	СписокОбязательныхКолонок.Добавить("АвансовыеПлатежи");      // <Число, 15, 2> - сумма исчисленных в предыдущих кварталах (с начала года) авансовых платежей по налогу
	СписокОбязательныхКолонок.Добавить("НалогКУплате");          // <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
	СписокОбязательныхКолонок.Добавить("Переплата");             // <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
	
	Параметры.Вставить("СправкаРасчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСправкиРасчета, СтрСоединить(СписокОбязательныхКолонок, Разделитель)));
	
	Возврат Параметры;

КонецФункции

Процедура РассчитатьНДФЛ(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета)
	
	Если КонтекстРасчета.Период < ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ() Тогда
		Возврат;
	КонецЕсли;
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.НДФЛ_ИП; // Кт 68.21.1
	СчетНачисленияНалогаСвышеПредела = ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины; // Кт 68.21.2
	
	// Расчет доходов и расходов
	
	ПараметрыРасчета = НовыеПараметрыРасчетаДоходыИРасходыПредпринимателя(
		КонтекстРасчета.Организация,
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецОтчетногоПериода,
		КонтекстРасчета.ИмяФормыДекларации3НДФЛ);
	
	ДоходыРасходы = СведенияОДоходахИВычетах(ПараметрыРасчета);
	
	Доходы                       = ДоходыРасходы.Доходы;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	ВозвратыПокупателям          = 0;
	
	// Стандартные вычеты
	
	ПараметрыВычета = НовыйПараметрыВычета();
	ПараметрыВычета.НачалоПериода     = КонтекстРасчета.НачалоНалоговогоПериода;
	ПараметрыВычета.КонецПериода      = КонтекстРасчета.КонецОтчетногоПериода;
	ПараметрыВычета.Организация       = КонтекстРасчета.Организация;
	ПараметрыВычета.ВыбраннаяФорма    = КонтекстРасчета.ИмяФормыДекларации3НДФЛ;
	ПараметрыВычета.ВычетЗаВесьПериод = Истина;
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаНалогоплательщика";
	
	СтандартныйВычетНаНалогоплательщика = СуммаСтандартногоВычета(ПараметрыВычета);
	
	ПараметрыВычета.ИмяОбъектаМетаданных = "РегистрСведений.ИПСтандартныеВычетыНаДетей";
	ПараметрыВычета.КоличествоМесяцев = ДоходыРасходы.КоличествоМесяцевВычетНаДетей;
	ПараметрыВычета.ВычетЗаВесьПериод = Ложь;
	СтандартныйВычетНаДетей = СуммаСтандартногоВычета(ПараметрыВычета);
	
	СтандартныйВычет = СтандартныйВычетНаДетей + СтандартныйВычетНаНалогоплательщика;
	
	// Расчет налога
	
	Если Не КонтекстРасчета.ЭтоПервыйОтчетныйПериод Тогда
		
		КонецПредыдущегоКвартала = НачалоКвартала(КонтекстРасчета.КонецОтчетногоПериода) - 1;
		ИсчисленоЗаПредыдущиеПериоды = НачисленныйНалогЗаПериод(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
		
	Иначе
		
		КонецПредыдущегоКвартала = '00010101';
		
	КонецЕсли;
	
	ПрофессиональныйВычет = СуммаПрофессиональногоВычета(ДоходыРасходы.Расходы,
		ДоходыРасходы.Доходы,
		КонтекстРасчета.ИмяФормыДекларации3НДФЛ,
		КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод);
	
	НалоговаяБаза = Макс(Доходы - ПрофессиональныйВычет - СтандартныйВычет, 0);
	НалогСНачалаГодаВсего = УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(НалоговаяБаза, КонтекстРасчета.Период);
	
	НалогКУплате = 0;
	НалогКУплатеСвышеПредела = 0;
	СтавкиНалога = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию(КонтекстРасчета.Период);
	ПределНалоговойБазы = УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки();
	ПрименяетсяПовышеннаяСтавка = СтавкиНалога.СтавкаНДФЛПовышенная <> Неопределено;
	
	ПараметрыНачисления = НовыйПараметрыОтраженияНачисленийПоНДФЛ();
	ЗаполнитьЗначенияСвойств(ПараметрыНачисления, КонтекстРасчета);
	ПараметрыНачисления.НалогИсчисленныйВсего = НалогСНачалаГодаВсего;
	ПараметрыНачисления.АвансовыеПлатежи = ИсчисленоЗаПредыдущиеПериоды;
	ПараметрыНачисления.Доходы = Доходы;
	ЕстьПереплата = (НалогСНачалаГодаВсего < ИсчисленоЗаПредыдущиеПериоды);
	
	Если ПрименяетсяПовышеннаяСтавка И ЕстьПереплата Тогда
		
		// Необходимо скорректировать сумму, исчисленную за предыдущие периоды в году, как переплату по счетам 68.21
		СуммаКорректировки = ИсчисленоЗаПредыдущиеПериоды - НалогСНачалаГодаВсего;
		НачисленоПоСчетам = НачисленныйНалогПоСчетамУчета(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода,
			КонецПредыдущегоКвартала);
		
		Если ЗначениеЗаполнено(НачисленоПоСчетам) Тогда
			
			Для Каждого ТекущаяСтрока Из НачисленоПоСчетам Цикл
				
				Если СуммаКорректировки <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыНачисления.Сумма = -Мин(СуммаКорректировки, ТекущаяСтрока.Сумма);
				ПараметрыНачисления.Счет = ТекущаяСтрока.Счет;
				
				Если ТекущаяСтрока.Счет = СчетНачисленияНалогаСвышеПредела Тогда
					ПараметрыНачисления.НалоговаяБаза = Макс(0, НалоговаяБаза - ПределНалоговойБазы);
					ПараметрыНачисления.СтавкаНалога = СтавкиНалога.СтавкаНДФЛПовышенная;
				ИначеЕсли НалоговаяБаза > ПределНалоговойБазы Тогда
					ПараметрыНачисления.НалоговаяБаза = ПределНалоговойБазы;
					ПараметрыНачисления.СтавкаНалога = СтавкиНалога.СтавкаНДФЛ;
				Иначе
					ПараметрыНачисления.НалоговаяБаза = НалоговаяБаза;
					ПараметрыНачисления.СтавкаНалога = СтавкиНалога.СтавкаНДФЛ;
				КонецЕсли;
				
				ДобавитьПроводкиПоНачислениюНалога(ТаблицаПроводок, ТаблицаСправкиРасчета, ПараметрыНачисления);
				
				СуммаКорректировки = СуммаКорректировки + ПараметрыНачисления.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПрименяетсяПовышеннаяСтавка И НалоговаяБаза > ПределНалоговойБазы Тогда
		
		НалогКУплате = Макс(0, ПределНалоговойБазы * СтавкиНалога.СтавкаНДФЛ / 100 - ИсчисленоЗаПредыдущиеПериоды);
		НалогКУплатеСвышеПредела = НалогСНачалаГодаВсего - ИсчисленоЗаПредыдущиеПериоды - НалогКУплате;
		
	Иначе
		
		НалогКУплате = Окр(НалогСНачалаГодаВсего - ИсчисленоЗаПредыдущиеПериоды, 0);
		
	КонецЕсли;
	
	// Данные для проводки по начислению налога
	Если НалоговаяБаза > 0 И НалогКУплате <> 0 Тогда
		
		ПараметрыНачисления.Сумма = НалогКУплате;
		ПараметрыНачисления.Счет = СчетНачисленияНалога;
		ПараметрыНачисления.СтавкаНалога = СтавкиНалога.СтавкаНДФЛ;
		ПараметрыНачисления.НалоговаяБаза = ?(НалогКУплатеСвышеПредела > 0, ПределНалоговойБазы, НалоговаяБаза);
		ДобавитьПроводкиПоНачислениюНалога(ТаблицаПроводок, ТаблицаСправкиРасчета, ПараметрыНачисления);
		
	ИначеЕсли НалоговаяБаза > 0 И Не ЕстьПереплата Тогда
		
		// запишем в справку-расчет данные о рассчитанной сумме по базовой ставке
		СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
		СтрокаСправки.ПериодРасчета = КонтекстРасчета.Период;
		ЗаполнитьЗначенияСвойств(СтрокаСправки, ПараметрыНачисления);
		СтрокаСправки.СтавкаНалога  = СтавкиНалога.СтавкаНДФЛ;
		СтрокаСправки.НалоговаяБаза = ?(ПрименяетсяПовышеннаяСтавка, ПределНалоговойБазы, НалоговаяБаза);
		
	КонецЕсли;
	
	// Запись справки-расчета по вычетам
	
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	СтрокаСправки.ПериодРасчета = КонтекстРасчета.Период;
	СтрокаСправки.ВидВычета     = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	СтрокаСправки.СуммаВычета   = ПрофессиональныйВычет;
	
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	СтрокаСправки.ПериодРасчета = КонтекстРасчета.Период;
	СтрокаСправки.ВидВычета     = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей;
	СтрокаСправки.СуммаВычета   = СтандартныйВычетНаДетей;
	
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	СтрокаСправки.ПериодРасчета = КонтекстРасчета.Период;
	СтрокаСправки.ВидВычета     = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика;
	СтрокаСправки.СуммаВычета   = СтандартныйВычетНаНалогоплательщика;
	
	// Отражение суммы налога свыше предельной величины 
	
	Если НалоговаяБаза > 0 И НалогКУплатеСвышеПредела > 0 Тогда
		
		ПараметрыНачисления.Сумма = НалогКУплатеСвышеПредела;
		ПараметрыНачисления.Счет = СчетНачисленияНалогаСвышеПредела;
		ПараметрыНачисления.СтавкаНалога = СтавкиНалога.СтавкаНДФЛПовышенная;
		ПараметрыНачисления.НалоговаяБаза = НалоговаяБаза - ПределНалоговойБазы;
		ДобавитьПроводкиПоНачислениюНалога(ТаблицаПроводок, ТаблицаСправкиРасчета, ПараметрыНачисления);
	
	КонецЕсли;
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	НалогКУплатеВсего = НалогКУплате + НалогКУплатеСвышеПредела;
	Если НалогКУплатеВсего > 0 И ПрименяетсяОсвобождениеОтНалога(КонтекстРасчета.Организация, КонтекстРасчета.Период) Тогда
		
		НалоговыйУчет.ДополнитьПроводкамиПоОсвобождениюОтНалога(
			ТаблицаПроводок,
			КонтекстРасчета.Период,
			СчетНачисленияНалога,
			НалогКУплатеВсего);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыОтраженияНачисленийПоНДФЛ()
	
	Результат = Новый Структура;
	Результат.Вставить("Период");
	Результат.Вставить("КонецОтчетногоПериода");
	Результат.Вставить("НачалоГода");
	Результат.Вставить("Счет");
	Результат.Вставить("ЭтоЗавершающийОтчетныйПериод", Ложь);
	Результат.Вставить("СтавкаНалога", 0);
	Результат.Вставить("НалогИсчисленныйВсего", 0);
	Результат.Вставить("АвансовыеПлатежи", 0);
	Результат.Вставить("Доходы", 0);
	Результат.Вставить("НалоговаяБаза", 0);
	Результат.Вставить("Сумма", 0);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПроводкиПоНачислениюНалога(ТаблицаПроводок, ТаблицаСправкиРасчета, ПараметрыНачисления)
	
	СчетОтраженияНалога = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалогаСвышеПредела = ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины; // Кт 68.21.2
	
	СтрокаПроводки = ТаблицаПроводок.Добавить();
	
	СтрокаПроводки.СчетДт                 = СчетОтраженияНалога;
	СтрокаПроводки.СчетКт                 = ПараметрыНачисления.Счет;
	СтрокаПроводки.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
	СтрокаПроводки.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	СтрокаПроводки.Сумма                  = ПараметрыНачисления.Сумма;
	СтрокаПроводки.Содержание             = СодержаниеПроводкиНачислениеНалога(ПараметрыНачисления);
	
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСправки, ПараметрыНачисления);
	
	СтрокаСправки.ПериодРасчета = ПараметрыНачисления.Период;
	
	Если ПараметрыНачисления.Сумма > 0 Тогда
		СтрокаСправки.НалогКУплате = ПараметрыНачисления.Сумма;
	Иначе
		СтрокаСправки.Переплата = -ПараметрыНачисления.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Функция НачисленныйНалогПоСчетамУчета(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода
		Или Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетОтраженияНалога = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // 99.01.1
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя); // 68.21
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",          Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетОтраженияНалога",   СчетОтраженияНалога);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("Счет68212", ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СчетКт = &Счет68212
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет,
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СчетКт = &Счет68212
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Сдвигает границу актуальности операции "Расчет НДФЛ для ИП"
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо сдвинуть границу актуальности
//   Период      - Дата - Период операции
//
Процедура СдвинутьГраницуАктуальностиРасчетНДФЛДляИП(Организация, Период)
	
	УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.РасчетНДФЛДляИП;
	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(УстаревшаяРегламентнаяОперация);
	
	РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
		Организация, Период, НомерГруппы, УстаревшаяРегламентнаяОперация, Истина);
	
КонецПроцедуры

Функция СодержаниеПроводкиНачислениеНалога(Реквизиты)
	
	Содержание = "";
	
	ПредставлениеПериода = ПредставлениеПериода(Реквизиты.НачалоГода, Реквизиты.КонецОтчетногоПериода, "ФП=Истина");
	
	Если Реквизиты.ЭтоЗавершающийОтчетныйПериод Тогда
		Содержание = СтрШаблон(НСтр("ru = 'Начислен налог на доходы физических лиц за %1'"), ПредставлениеПериода);
	ИначеЕсли Реквизиты.Счет = ПланыСчетов.Хозрасчетный.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины Тогда
		Содержание = СтрШаблон(НСтр("ru = 'Начислен авансовый платеж по налогу на доходы физических лиц за %1, исчисленный с налоговой базы свыше %2'"),
			ПредставлениеПериода,
			УчетНДФЛПредпринимателяКлиентСервер.ГраницаНалоговойБазыДляПримененияПовышеннойСтавки());
	Иначе
		Содержание = СтрШаблон(НСтр("ru = 'Начислен авансовый платеж по налогу на доходы физических лиц за %1'"), 
			ПредставлениеПериода);
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

#КонецОбласти