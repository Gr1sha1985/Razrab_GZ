
#Область ПрограммныйИнтерфейс

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
//	- Контейнер         - Структура - модифицируемый параметр; данные отчета которые нужно заполнить.
//	- ИмяОтчета         - Строка    - идентификатор отчета (имя отчета в метаданных).
//	- ИмяРедакцииОтчета - Строка    - идентификатор редакции отчета (имя формы в метаданных).
// 	- ПараметрыОтчета   - Структура - структура параметров отчета, должна содержать ключи:
//		- Организация 						  - СправочникСсылка.Организации.
//		- мДатаНачалаПериодаОтчета 			  - Дата.
//		- мДатаКонцаПериодаОтчета 			  - Дата.
//		- Периодичность			 			  - ПеречислениеСсылка.Периодичность.
//		- АдресВременногоХранилищаРасшифровки - Строка.
//
Процедура ЗаполнитьФормуСтатистики(Контейнер, Знач ИмяОтчета, Знач ИмяРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Показатели = ПоказателиФормыСтатистики(
		ИмяОтчета,
		ИмяРедакцииОтчета,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.мДатаНачалаПериодаОтчета,
		ПараметрыОтчета.мДатаКонцаПериодаОтчета,
		ПараметрыОтчета.Периодичность);
		
	// Некоторые формы статистики заполняются по организации в целом, включая все филиалы и обособленные подразделения...
	Если НЕ ПараметрыОтчета.Свойство("ЗаполняетсяВЦеломПоОрганизации") Тогда
		ПараметрыОтчета.Вставить("ЗаполняетсяВЦеломПоОрганизации", Ложь);
	КонецЕсли;	
	
	ПараметрыОтчета.Вставить("Организации", Новый СписокЗначений);
	
	// Для ИП заполнение всегда выполняется в целом по организации
	ЭтоИП = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация);
		
	Если ЭтоИП Тогда
		ПараметрыОтчета.ЗаполняетсяВЦеломПоОрганизации = Истина;
		ПараметрыОтчета.Организации.Добавить(ПараметрыОтчета.Организация);
	Иначе	
		
		ФормыЗаполняемыеПоВсейОрганизации = Новый Массив;
		ЗаполнениеФормСтатистикиПоОбособленнымПодразделениям.ДобавитьФормыЗаполняемыеВЦеломПоОрганизации(ФормыЗаполняемыеПоВсейОрганизации);
		
		Если ФормыЗаполняемыеПоВсейОрганизации.Количество() = 0 // это не КОРП, заполнение по ОП не требуется
			 Или ФормыЗаполняемыеПоВсейОрганизации.Найти(ИмяОтчета) <> Неопределено Тогда
			ПараметрыОтчета.Организации.ЗагрузитьЗначения(БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация));
			ПараметрыОтчета.ЗаполняетсяВЦеломПоОрганизации = Истина;
		Иначе
			ПараметрыОтчета.Организации.Добавить(ПараметрыОтчета.Организация);
		КонецЕсли;	
	
	КонецЕсли;
	
	// ... а некоторые формы статистики заполняются отдельно по каждому обособленному подразделению,
	// а также по организации без обособленных подразделений.
	Если НЕ ПараметрыОтчета.Свойство("ЗаполняетсяПоКаждомуОП") Тогда
		ПараметрыОтчета.Вставить("ЗаполняетсяПоКаждомуОП", Ложь);
	КонецЕсли;
	
	ОтборПоОбособленнымПодразделениям = Неопределено;
	
	Если ЭтоИП Тогда
		ПараметрыОтчета.ЗаполняетсяПоКаждомуОП = Ложь;
	Иначе	
	
		ФормыЗаполняемыеПоКаждомуОП = Новый Массив;
		ЗаполнениеФормСтатистикиПоОбособленнымПодразделениям.ДобавитьФормыЗаполняемыеОтдельноПоОбособленнымПодразделениям(ФормыЗаполняемыеПоКаждомуОП);
	
		Если ФормыЗаполняемыеПоКаждомуОП.Найти(ИмяОтчета) <> Неопределено Тогда	
			
			ПараметрыОтчета.ЗаполняетсяПоКаждомуОП = Истина;
			
			Если ПараметрыОтчета.Свойство("ОбособленноеПодразделение") 
				И ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений") Тогда
			
				ЗаполнениеФормСтатистикиПоОбособленнымПодразделениям.ЗаполнитьОтборПоОбособленнымПодразделениям(
					ОтборПоОбособленнымПодразделениям,
					ПараметрыОтчета.Организация,
					ПараметрыОтчета.ОбособленноеПодразделение,
					ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений);
				
			КонецЕсли;	
			
		КонецЕсли;	
	
	КонецЕсли;
	
	РассчитатьЗначенияПоказателей(Показатели, ТаблицаРасшифровки, ПараметрыОтчета, ОтборПоОбособленнымПодразделениям);
	
	ЗаполнитьКонтейнерФормыСтатистики(Контейнер, Показатели, ТаблицаРасшифровки);
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы.
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	
КонецПроцедуры

// Инициализирует коллекцию с описаниями показателей.
// Возвращаемое значение:
//	- ТаблицаЗначений:
//	* ИмяПоля - Строка -Имя поля. Как правило, начинается с символа "П" и содержит 13 знаков.
//	* ОбъектНаблюдения - СправочникСсылка.ОбъектыСтатистическогоНаблюдения -
//		Объект наблюдения источник информации для заполнения показателя.
//	* ИсточникДанных - ПеречислениеСсылка.ИсточникиДанныхСтатистическихПоказателей -
//		Свойство настраиваемого объекта наблюдения.
//	* Характеристика - Строка - Характеристика объекта наблюдения.
//	* ОбщаяНастройка - Строка - Свойство объекта наблюдения, XML-представление настройки (отбора),
//		заданного для объекта наблюдения.
//	* Настройка - Строка - Свойство объекта наблюдения, XML-представление пользовательской настройки.
//	* Детализировать - Булево - Некоторые объекты могут характеризоваться списком показателей.
//	* Аналитика - ТипыКлассификаторов - Значение элемента списка, характеризующего объект.
//	* Организация - СправочникСсылка.Организации - Организация по данным которой предполагается заполнения.
//	* НачалоПериода - Дата - Дата начала периода за который нужно выбирать данные.
//	* КонецПериода - Дата - Дата конца периода за который нужно выбирать данные.
//	* ДополнительныйАлгоритм - ПеречислениеСсылка.ДополнительныеАлгоритмыЗаполненияФормСтатистики -
//		Дополнительный алгоритм который должен быть применен до или после расчета.
//	* Группировка - Булево - Признак того что, значения этого показателя должны быть сгруппированы.
//	* Значение - Число,Строка - Значение показателя.
//	* НаименованиеПоказателя - Строка -Наименование статистического показателя.
//	* ДеревоНастроек - ТаблицаЗначений - Иерархия настроек примененных для получения показателя.
//	* ПримененнаяНастройка - Строка - Итоговая настройка которая была применена.
//	* Используется - Булево - Определяет, используется ли показатель для заполнения.
//	* НастройкаИзДополнительныхАлгоритмов - Строка - Свойство объекта наблюдения, добавленное дополнительным алгоритмом.
//
Функция НовыйОписаниеПоказателей() Экспорт
	
	// Некоторые объекты могут характеризоваться списком показателей, например, выручка в разрезе ОКПД.
	ТипыКлассификаторов = Новый Массив;
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторВидовЭкономическойДеятельности"));
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторПродукцииПоВидамДеятельности"));
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторУслугНаселению"));
	ТипыКлассификаторов.Добавить(Тип("Строка"));
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("ИмяПоля",                Новый ОписаниеТипов("Строка")); // Как правило, начинается с символа "П" и содержит 13 знаков. Но в отдельных случаях может быть и строкой другого вида.
	Показатели.Колонки.Добавить("НомерСтрокиОтчета",      Новый ОписаниеТипов("Строка")); // Номер строки формы статистики. Нужен для описания расшифровываемого показателя.
	Показатели.Колонки.Добавить("ОбъектНаблюдения",       Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтатистическогоНаблюдения"));
	Показатели.Колонки.Добавить("ИсточникДанных",         Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхСтатистическихПоказателей")); // Свойство настраиваемого объекта наблюдения.
	Показатели.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("Строка")); // Характеристика объекта наблюдения
	Показатели.Колонки.Добавить("ОбщаяНастройка",         Новый ОписаниеТипов("Строка")); // Свойство объекта наблюдения, XML-представление настройки (отбора), заданного для объекта наблюдения.
	Показатели.Колонки.Добавить("Настройка",              Новый ОписаниеТипов("Строка")); // Свойство объекта наблюдения, XML-представление пользовательской настройки (задается для каждой организации).
	Показатели.Колонки.Добавить("Детализировать",         Новый ОписаниеТипов("Булево")); // Некоторые объекты могут характеризоваться списком показателей, например, классификатором ОКПД.
	Показатели.Колонки.Добавить("Аналитика",              Новый ОписаниеТипов(ТипыКлассификаторов)); // Значение элемента списка, характеризующего объект.
	Показатели.Колонки.Добавить("Организация",            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Показатели.Колонки.Добавить("НачалоПериода",          Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Показатели.Колонки.Добавить("КонецПериода",           Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Показатели.Колонки.Добавить("ДополнительныйАлгоритм", Новый ОписаниеТипов("ПеречислениеСсылка.ДополнительныеАлгоритмыЗаполненияФормСтатистики"));
	Показатели.Колонки.Добавить("Группировка",            Новый ОписаниеТипов("Булево")); // Признак того что, значения этого показателя должны быть сгруппированы.
	
	Показатели.Колонки.Добавить("Значение",               Новый ОписаниеТипов("Число,Строка"));
	// Колонки используемые для расшифровки отчета.
	Показатели.Колонки.Добавить("НаименованиеПоказателя", Новый ОписаниеТипов("Строка")); // наименование статистического показателя.
	Показатели.Колонки.Добавить("ДеревоНастроек", 		  Новый ОписаниеТипов("ТаблицаЗначений")); // Иерархия настроек примененных для получения показателя.
	Показатели.Колонки.Добавить("ПримененнаяНастройка",	  Новый ОписаниеТипов("Строка")); // Итоговая настройка.
	
	Показатели.Колонки.Добавить("Используется",           Новый ОписаниеТипов("Булево")); // Определяет, используется ли показатель для заполнения.
	
	Показатели.Колонки.Добавить("НастройкаИзДополнительныхАлгоритмов", Новый ОписаниеТипов("Строка")); // Свойство объекта наблюдения, добавленное дополнительным алгоритмом, XML-представление пользовательской настройки.
	
	Возврат Показатели;
	
КонецФункции

// Инициализирует коллекцию с описаниями настроек.
//	Возвращаемое значение:
//	ТаблицаЗначений:
//	* ОбъектНаблюдения - СправочникСсылка.ОбъектыСтатистическогоНаблюдения - Объект наблюдения.
//	* Отбор - Строка - XML-представление отбора.
//	* ГруппаНастроек - Число - Определяет группу настроек, в которую будет выведен отбор: 1 - "Настройки заполнения", 2 - "Предопределенные настройки".
//	* Аналитика - СправочникСсылка.КлассификаторВидовЭкономическойДеятельности, 
//		СправочникСсылка.КлассификаторПродукцииПоВидамДеятельности,
//		СправочникСсылка.КлассификаторУслугНаселению,
//		Строка - Значение элемента списка, характеризующего объект.
//
Функция НовыйДеревоНастроек() Экспорт
	
	// Некоторые объекты могут характеризоваться списком показателей, например, выручка в разрезе ОКПД.
	ТипыКлассификаторов = Новый Массив;
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторВидовЭкономическойДеятельности"));
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторПродукцииПоВидамДеятельности"));
	ТипыКлассификаторов.Добавить(Тип("СправочникСсылка.КлассификаторУслугНаселению"));
	ТипыКлассификаторов.Добавить(Тип("Строка"));
	
	ДеревоНастроек = Новый ТаблицаЗначений;
	ДеревоНастроек.Колонки.Добавить("ОбъектНаблюдения", Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтатистическогоНаблюдения"));
	ДеревоНастроек.Колонки.Добавить("Отбор", 			Новый ОписаниеТипов("Строка"));
	ДеревоНастроек.Колонки.Добавить("ГруппаНастроек", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0))); // Определяет группу настроек, в которую будет выведен отбор: 1 - "Настройки заполнения", 2 - "Предопределенные настройки".
	ДеревоНастроек.Колонки.Добавить("Аналитика",		Новый ОписаниеТипов(ТипыКлассификаторов,,,,Новый КвалификаторыСтроки(255))); // Значение элемента списка, характеризующего объект.
	
	Возврат ДеревоНастроек;
	
КонецФункции

// Возвращает коллекцию показателей формы статистики.
// Параметры:
//	ИмяОтчета - Строка - Идентификатор регламентированного отчета (например: РегламентированныйОтчетСтатистикаФормаП1).
//	ИмяРедакцииОтчета - Строка- Идентификатор редакции регламентированного отчета отчета (например: ФормаОтчета2016Кв1).
//	Организация - СправочникСсылка.Организации - Организация для которой будут получены настройки показателей.
//	НачалоПериода - Дата - Дата начала периода отчета.
//	КонецПериода - Дата - Дата конца отчетного периода.
//	Периодичность - ПеречислениеСсылка.Периодичность - Периодичность отчета.
// Возвращаемое значение:
// ТаблицаЗначений - Коллекция показателей формы статистики с необходимыми настройками, подробнее см. НовыйОписаниеПоказателей().
//
Функция ПоказателиФормыСтатистики(ИмяОтчета, ИмяРедакцииОтчета, Организация, НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	РегламентированныйОтчет = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИмяОтчета);
	
	Если РегламентированныйОтчет = Неопределено Тогда
		Возврат НовыйОписаниеПоказателей();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ИмяРедакцииОтчета",       ИмяРедакцииОтчета);
	Запрос.УстановитьПараметр("РегламентированныйОтчет", РегламентированныйОтчет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоляФорм.Код КАК КодПоля,
	|	ПоляФорм.ИмяПоля КАК ИмяПоля,
	|	ПоляФорм.СтатистическийПоказатель.Владелец КАК ОбъектНаблюдения,
	|	ПоляФорм.СтатистическийПоказатель.Владелец.ИсточникДанных КАК ИсточникДанных,
	|	ПоляФорм.СтатистическийПоказатель.Владелец.Настройка КАК ОбщаяНастройка,
	|	ПоляФорм.СтатистическийПоказатель.ХарактеристикаОбъектаНаблюдения КАК Характеристика,
	|	Настройки.Настройка КАК Настройка,
	|	ЛОЖЬ КАК Детализировать,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ПоляФорм.Период КАК Период,
	|	ПоляФорм.СНачалаГода КАК СНачалаГода,
	|	ПоляФорм.ДоКонцаГода КАК ДоКонцаГода,
	|	ПоляФорм.ДополнительныйАлгоритм КАК ДополнительныйАлгоритм,
	|	ПоляФорм.НомерСтрокиОтчета КАК НомерСтрокиОтчета,
	|	NULL КАК ЗначениеУпорядочиванияАналитики,
	|	ПоляФорм.СтатистическийПоказатель.Наименование КАК НаименованиеПоказателя,
	|	ВЫБОР
	|		КОГДА НЕ ПоляФорм.СтатистическийПоказатель.Владелец.ТребуетНастройки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕстьNULL(Настройки.Заполнять, ЛОЖЬ)
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаЗаполненияФормСтатистики КАК Настройки
	|		ПО ПоляФорм.СтатистическийПоказатель.Владелец = Настройки.ОбъектНаблюдения
	|			И (Настройки.Организация = &Организация)
	|ГДЕ
	|	ПоляФорм.Владелец.Владелец = &РегламентированныйОтчет
	|	И ПоляФорм.Владелец.Код = &ИмяРедакцииОтчета
	|	И НЕ ПоляФорм.ЭтоГруппа
	|	И НЕ ПоляФорм.СтатистическийПоказатель.Детализировать
	|	И НЕ ПоляФорм.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоляФорм.Код,
	|	ПоляФорм.ИмяПоля,
	|	Настройки.ОбъектНаблюдения,
	|	Настройки.ОбъектНаблюдения.ИсточникДанных,
	|	Настройки.ОбъектНаблюдения.Настройка,
	|	ПоляФорм.СтатистическийПоказатель.ХарактеристикаОбъектаНаблюдения,
	|	Настройки.Настройка,
	|	ИСТИНА,
	|	Настройки.ДетализацияОбъектаНаблюдения,
	|	ПоляФорм.Период,
	|	ПоляФорм.СНачалаГода,
	|	ПоляФорм.ДоКонцаГода,
	|	ПоляФорм.ДополнительныйАлгоритм,
	|	ПоляФорм.НомерСтрокиОтчета,
	|	Настройки.ДетализацияОбъектаНаблюдения.Код,
	|	ПоляФорм.СтатистическийПоказатель.Наименование,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФорм
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаЗаполненияСвободныхСтрокФормСтатистики КАК Настройки
	|		ПО ПоляФорм.СтатистическийПоказатель.Владелец = Настройки.ОбъектНаблюдения
	|ГДЕ
	|	ПоляФорм.Владелец.Владелец = &РегламентированныйОтчет
	|	И ПоляФорм.Владелец.Код = &ИмяРедакцииОтчета
	|	И НЕ ПоляФорм.ЭтоГруппа
	|	И Настройки.Организация = &Организация
	|	И ПоляФорм.СтатистическийПоказатель.Детализировать
	|	И НЕ ПоляФорм.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяПоля,
	|	НомерСтрокиОтчета,
	|	КодПоля,
	|	ЗначениеУпорядочиванияАналитики";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Показатели = НовыйОписаниеПоказателей();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПоказателя = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
		ЗаполнитьПериодПоказателя(ОписаниеПоказателя, Выборка, НачалоПериода, КонецПериода, Периодичность);
		
	КонецЦикла;
	
	Показатели.ЗаполнитьЗначения(Организация, "Организация");
	
	УдалитьПоказателиКоторыеНеТребуетсяЗаполнять(Показатели, ИмяОтчета, ИмяРедакцииОтчета, КонецПериода);
	
	// Учтем настройки, определенные источниками данных.
	Перечисления.ИсточникиДанныхСтатистическихПоказателей.ДобавитьОтборПоАдресамКонтрагентов(Показатели);
	Перечисления.ИсточникиДанныхСтатистическихПоказателей.СгруппироватьПоказатели(Показатели);
	
	// В результате работы дополнительных алгоритмов может измениться признак "Используется" у различных показателей.
	Перечисления.ДополнительныеАлгоритмыЗаполненияФормСтатистики.ПрименитьПередУдалениемНеиспользуемыхПоказателей(Показатели);
	
	// Удаляем неиспользуемые показатели, в том числе и те, которые перестали использоваться из-за применения алгоритмов.
	НеиспользуемыеПоказатели = Показатели.НайтиСтроки(Новый Структура("Используется", Ложь));
	Для Каждого НеиспользуемыйПоказатель Из НеиспользуемыеПоказатели Цикл
		Показатели.Удалить(НеиспользуемыйПоказатель);
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Рассчитывает значения статистических показателей - заполняет колонку Значение в переданной таблице.
//
// Параметры:
//	Показатели 						 	 - ТаблицаЗначений - данные, которые нужно рассчитать.
//              							Структура таблицы описана в НовыйОписаниеПоказателей().
//  ТаблицаРасшифровки					 - заполняется при выполнении алгоритма, предназначена для передачи даннных между разными его частями.
//											Структура таблицы описана в ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки().
//  ПараметрыОтчета						 - Структура - структура параметров отчета.
//  ОтборПоОбособленнымПодразделениям	 - ОтборКомпоновкиДанных или Неопределено - отбор, добавляемый в настройки отбора всех показателей
//
Процедура РассчитатьЗначенияПоказателей(Показатели, ТаблицаРасшифровки, ПараметрыОтчета, ОтборПоОбособленнымПодразделениям = Неопределено) Экспорт

	Перечисления.ДополнительныеАлгоритмыЗаполненияФормСтатистики.ПрименитьДоРасчетаПоказателей(Показатели, ПараметрыОтчета, ТаблицаРасшифровки);
	
	ХранилищеНастроек = ПодготовитьХранилищеНастроек(Показатели);
	
	// В некоторых случаях для выполнения настроек и получения данных используются разные схемы компоновки.
	// При этом один источник данных может использовать _набор_, несколько схем - для разных характеристик разные схемы.
	// Поэтому в некоторых случаях все потребные показатели одного объекта наблюдения нельзя рассчитать одним запросом.
	// Для того, чтобы идентифицировать набор показателей одного объекта, которые могут быть рассчитаны совместно,
	// используется "технологическая" колонка РазделИсточникаДанных. Она будет удалена по окончании процедуры.
	Показатели.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("Строка")); 
	Для Каждого Показатель Из Показатели Цикл
		Показатель.РазделИсточникаДанных = Перечисления.ИсточникиДанныхСтатистическихПоказателей.РазделИсточникаДанных(
			Показатель.ИсточникДанных,
			Показатель.Характеристика);
	КонецЦикла;
	
	// Рассчитываем не каждый показатель отдельно, а группируем их с точки зрения эффективности расчета - 
	// одним запросом рассчитаем все характеристики объекта наблюдения за конкретный период.
	ИзмеренияДляРасчета = "ОбъектНаблюдения, РазделИсточникаДанных, Детализировать, Аналитика, Организация, НачалоПериода, КонецПериода, НастройкаИзДополнительныхАлгоритмов, Группировка";
	ИндексОтбораХарактеристик = Показатели.Индексы.Добавить(ИзмеренияДляРасчета); // Индекс удалим в конце процедуры.
	
	ЗапросыДляВыполнения = Показатели.Скопировать();
	ЗапросыДляВыполнения.Свернуть(ИзмеренияДляРасчета);
	
	ПараметрыЗапроса = Новый Структура(ИзмеренияДляРасчета);
	
	ВнешниеДанные = Новый Структура; // Будут дополняться ниже по потребности.
		
	Для Каждого ОписаниеЗапроса Из ЗапросыДляВыполнения Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ОписаниеЗапроса);
		Характеристики = Показатели.НайтиСтроки(ПараметрыЗапроса); // Каждый запрос позволяет получить набор характеристики.
		
		// Большинство источников данных (СКД) поддерживает параметризацию по списку организаций.
		// Если это так, то подменим в параметрах источника данных выбранную организацию на список организаций.
		Если Перечисления.ИсточникиДанныхСтатистическихПоказателей.ИсточникПоддерживаетСписокОрганизаций(ОписаниеЗапроса.ОбъектНаблюдения.ИсточникДанных) Тогда
			ПараметрыЗапроса.Вставить("Организация", ПараметрыОтчета.Организации);
		КонецЕсли;	
		
		СхемаКомпоновки = Перечисления.ИсточникиДанныхСтатистическихПоказателей.СхемаКомпоновкиДанных(
			ОписаниеЗапроса.ОбъектНаблюдения.ИсточникДанных,
			ОписаниеЗапроса.РазделИсточникаДанных);
			
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		
		Если ОписаниеЗапроса.Группировка Тогда
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			Для Каждого Характеристика Из Характеристики Цикл
				ПолеГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти(Характеристика.Характеристика);
				Если ПолеГруппировки <> Неопределено И НЕ ПолеГруппировки.Ресурс Тогда
					НовоеПолеГруппировки 		= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеПолеГруппировки.Поле 	= ПолеГруппировки.Поле;
				КонецЕсли;
			КонецЦикла;
			
			Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
				Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
			КонецЕсли;
			
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек.Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
			Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;
		
		// Создадим дерево настроек, будем складывать в него настройки 
		// в разрезе объектов наблюдения и аналитики.
		ДеревоНастроек = НовыйДеревоНастроек();
		
		// Подготовим отбор из настройки и настройки из дополнительных алгоритмов.
		// Примененная настройка затем передается в параметры для формирования расшифровки.
		ПримененнаяНастройка = Новый ОтборКомпоновкиДанных;
		
		Настройка = ПолучитьНастройку(ХранилищеНастроек, ОписаниеЗапроса, ДеревоНастроек);
		
		Если Настройка <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, Настройка, Ложь);
		КонецЕсли;
		
		НастройкаИзДополнительныхАлгоритмов = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеЗапроса.НастройкаИзДополнительныхАлгоритмов) Тогда
			НастройкаИзДополнительныхАлгоритмов = ПолучитьОтборКомпоновкиДанных(ОписаниеЗапроса.НастройкаИзДополнительныхАлгоритмов);
			Если НастройкаИзДополнительныхАлгоритмов <> Неопределено Тогда
				// Добавим строку в дерево настроек для настройки из дополнительных алгоритмов.
				СтрокаДерева = ДеревоНастроек.Добавить();
				
				СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
				СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкаИзДополнительныхАлгоритмов);
				СтрокаДерева.Аналитика 			= ОписаниеЗапроса.Аналитика;
				СтрокаДерева.ГруппаНастроек 	= 1;
				
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, НастройкаИзДополнительныхАлгоритмов, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		// Наложим отбор по обособленному подразделению.
		Если ОтборПоОбособленнымПодразделениям <> Неопределено Тогда
			
			// Добавим строку в дерево настроек для настройки из дополнительных алгоритмов.
			СтрокаДерева = ДеревоНастроек.Добавить();
			
			СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
			СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(ОтборПоОбособленнымПодразделениям);
			СтрокаДерева.Аналитика 			= ОписаниеЗапроса.Аналитика;
			СтрокаДерева.ГруппаНастроек 	= 1;
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, ОтборПоОбособленнымПодразделениям, Ложь);
			
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, ПримененнаяНастройка, Ложь);
		
		// Передадим значения параметров.
		Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ПараметрКонецПериода = Неопределено;
		// Добавим дополнительные параметры.
		Если ПараметрыЗапроса.Свойство("КонецПериода", ПараметрКонецПериода) Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек.Настройки,
				"КонецПериодаГраница", 
				Новый Граница(КонецДня(ПараметрКонецПериода), ВидГраницы.Включая));
		КонецЕсли;
		
		Если ОписаниеЗапроса.РазделИсточникаДанных = "ПрибыльУбыток" Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек.Настройки,
				"ПрименяетсяУСН", 
				УчетнаяПолитика.ПрименяетсяУСН(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		КонецЕсли;	
		
		// Добавим поля для получения только тех характеристик, которые требуется указать в форме статистики.
		Для Каждого Характеристика Из Характеристики Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, Характеристика.Характеристика);
		КонецЦикла;
		
		КомпоновщикНастроек.Восстановить();
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Получим данные
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(
			СхемаКомпоновки,
			НастройкиДляКомпоновкиМакета,
			, // ДанныеРасшифровки
			, // МакетОформления
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
		ПодготовитьВнешниеДанные(МакетКомпоновки, ВнешниеДанные);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеДанные);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыЗапроса.Группировка Тогда
			
			ПоляОтбора = Новый Массив;
			
			Для Каждого ПолеРезультата Из РезультатЗапроса.Колонки Цикл
				
				ДоступноеПолеОтбора = НастройкиДляКомпоновкиМакета.ДоступныеПоляВыбора.Элементы.Найти(ПолеРезультата.Имя);
				
				Если ДоступноеПолеОтбора <> Неопределено И НЕ ДоступноеПолеОтбора.Ресурс Тогда
					
					ПоляОтбора.Добавить(Строка(ДоступноеПолеОтбора.Поле));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
				
				ЗначенияАналитики = Новый Массив;
				ЗначенияАналитики.Добавить(РезультатЗапроса.Индекс(СтрокаРезультата) + 1);
				Для Каждого ПолеОтбора Из ПоляОтбора Цикл
					ЗначенияАналитики.Добавить(СтрокаРезультата[ПолеОтбора]);
				КонецЦикла;
				
				ЗначениеАналитики = СтрСоединить(ЗначенияАналитики, ", ");
				
				Для Каждого Характеристика Из Характеристики Цикл
					НовыйПоказатель = Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПоказатель, Характеристика);
					НовыйПоказатель.Значение = СтрокаРезультата[Характеристика.Характеристика];
					
					ПримененнаяНастройкаГруппировки = Новый ОтборКомпоновкиДанных;
					КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройкаГруппировки, ПримененнаяНастройка, Ложь);
					
					Для Каждого ПолеОтбора Из ПоляОтбора Цикл
						Если ПолеОтбора <> Характеристика.Характеристика Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПримененнаяНастройкаГруппировки, ПолеОтбора, СтрокаРезультата[ПолеОтбора]);
						КонецЕсли;
					КонецЦикла;
					
					НовыйПоказатель.Аналитика = ЗначениеАналитики;
					НовыйПоказатель.ПримененнаяНастройка = ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройкаГруппировки);
					
					ДеревоНастроекГруппировки = ДеревоНастроек.Скопировать();
					
					СтрокаДерева = ДеревоНастроекГруппировки.Добавить();
					
					СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
					СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройкаГруппировки);
					СтрокаДерева.Аналитика 			= ЗначениеАналитики;
					СтрокаДерева.ГруппаНастроек 	= 2;
					
					НовыйПоказатель.ДеревоНастроек = ДеревоНастроекГруппировки;
					
				КонецЦикла;
			КонецЦикла;
			
			// Удалим исходные характеристики
			Для Каждого Характеристика Из Характеристики Цикл
				Показатели.Удалить(Характеристика);
			КонецЦикла;
			
		Иначе
			
			// Запомним итоговую настройку
			ПримененнаяНастройкаВXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройка);
			
			Для Каждого Характеристика Из Характеристики Цикл
				Характеристика.Значение = РезультатЗапроса[0][Характеристика.Характеристика]; // Результат содержит не более одной строки.
				// Значения сохраняемые для расшифровки отчета
				Характеристика.ДеревоНастроек 		= ДеревоНастроек;
				Характеристика.ПримененнаяНастройка = ПримененнаяНастройкаВXML;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Некоторые показатели рассчитываются в результате применения доп. алгоритмов после основного расчета (в частности, вычитание).
	// В этом случае для результирующего показателя уже будет заполнена расшифровка (см. ПрименитьПослеРасчетаПоказателей()).
	// Для таких показателей вводим особый признак, чтобы далее при заполнении контейнера статистики не дублировать расшифровку.
	Показатели.Колонки.Добавить("РасшифровкаЗаполнена", Новый ОписаниеТипов("Булево")); 
	
	Перечисления.ДополнительныеАлгоритмыЗаполненияФормСтатистики.ПрименитьПослеРасчетаПоказателей(Показатели, ТаблицаРасшифровки);
	
	Показатели.Индексы.Удалить(ИндексОтбораХарактеристик);
	Показатели.Колонки.Удалить("РазделИсточникаДанных");
	
КонецПроцедуры

// Заполняет список полей формы, заполняемых автоматически.
// 
// Параметры:
// 	ЗаполняемыеПоля   - Структура - коллекция полей в формате БРО (дополняется элементами).
//	ИмяОтчета         - Строка - имя отчета в метаданных.
//  ИмяРедакцииОтчета - Строка - имя формы отчета в метаданных.
//  Период            - Дата - Дата, по которой определяется список "сезонных" полей - тех, которые нужно заполнять не в каждом периоде.
//
Процедура ЗаполнитьСписокАвтозаполняемыхПолей(ЗаполняемыеПоля, Знач ИмяОтчета, ИмяРедакцииОтчета, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОтчета",         ИмяОтчета);
	Запрос.УстановитьПараметр("ИмяРедакцииОтчета", ИмяРедакцииОтчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоляФормСтатистики.ИмяПоля КАК ИмяПоля,
	|	ПоляФормСтатистики.СтатистическийПоказатель.Владелец КАК ОбъектНаблюдения,
	|	ПоляФормСтатистики.СтатистическийПоказатель.ХарактеристикаОбъектаНаблюдения КАК Характеристика,
	|	ПоляФормСтатистики.Период КАК Период,
	|	ПоляФормСтатистики.СНачалаГода КАК СНачалаГода
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФормСтатистики
	|ГДЕ
	|	ПоляФормСтатистики.Владелец.Код = &ИмяРедакцииОтчета
	|	И ПоляФормСтатистики.Владелец.Владелец.ИсточникОтчета = &ИмяОтчета
	|	И НЕ ПоляФормСтатистики.ПометкаУдаления
	|	И НЕ ПоляФормСтатистики.ЭтоГруппа
	|	И ПоляФормСтатистики.СтатистическийПоказатель <> ЗНАЧЕНИЕ(Справочник.СтатистическиеПоказатели.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Эту форму заполнять не умеем
		Возврат;
	КонецЕсли;
	
	НеЗаполняемыеПоля = ИнтерфейсыВзаимодействияБРО.ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяОтчета, ИмяРедакцииОтчета, Период);
	
	НеЗаполняемыеПоляПоиск = Новый Соответствие; // Используем соответствие в качестве индекса для ускорения поиска.
	Для каждого ИмяПоля Из НеЗаполняемыеПоля Цикл
		НеЗаполняемыеПоляПоиск.Вставить(ИмяПоля, Истина);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПолеЗаполняется = (НеЗаполняемыеПоляПоиск[Выборка.ИмяПоля] = Неопределено);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ЗаполняемыеПоля, Выборка.ИмяПоля, ПолеЗаполняется, Ложь); // Расшифровки пока нет.
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список форм статистики для которых может быть выполнена настройка заполнения.
// Параметры:
//	Отбор - Структура - Поля отбора форм статистики:
//	* ИмяОтчета - Строка - Имя регламентированного отчета.
//	* ИмяФормы - Строка - Версия формы регламентированного отчета.
// Возвращаемое значение:
//	ТаблицаЗначений:
//	* ИмяРегламентированногоОтчета - Строка - Имя регламентированного отчета.
//	* ФормаСтатистики - СправочникСсылка.ФормыСтатистики - Форма статистики.
//
Функция НастраиваемыеФормыСтатистики(Знач Отбор = Неопределено) Экспорт
	
	ПоляОтбора = Новый Структура("ИмяОтчета, ИмяФормы");
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПоляОтбора, Отбор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОтчета", ПоляОтбора.ИмяОтчета);
	Запрос.УстановитьПараметр("ИмяФормы",  ПоляОтбора.ИмяФормы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоляФормСтатистики.Владелец.Владелец.ИсточникОтчета КАК ИмяРегламентированногоОтчета,
	|	ПоляФормСтатистики.Владелец КАК ФормаСтатистики
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФормСтатистики
	|ГДЕ
	|	НЕ ПоляФормСтатистики.ПометкаУдаления
	|	И ПоляФормСтатистики.СтатистическийПоказатель.Владелец.ТребуетНастройки";
	
	Если ПоляОтбора.ИмяОтчета <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			| И ПоляФормСтатистики.Владелец.Владелец.ИсточникОтчета = &ИмяОтчета";
	КонецЕсли;
	
	Если ПоляОтбора.ИмяФормы <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			| И ПоляФормСтатистики.Владелец.Код = &ИмяФормы";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПравилаРасчетаПоказателей

Процедура ЗаполнитьПериодПоказателя(ОписаниеПоказателя, ПравилоЗаполнения, Знач НачалоПериода, Знач КонецПериода, Знач Периодичность)
	
	// Так как в месяцах разное количество дней, то вместо даты окончания периода используем дату начала следующего месяца.
	// А в конце функции сделаем обратное преобразование.
	КонецПериода = КонецМесяца(КонецПериода) + 1;
	
	Если ПравилоЗаполнения.Период = Перечисления.ОтносительныеПериодыОтчетности.ПредыдущийПериод Тогда
			
		// Учтем периодичность отчета
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			ДлинаПериода = 12;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			ДлинаПериода = 6;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			ДлинаПериода = 3;
		Иначе
			// Декада, день, неделя - периоды не кратные месяцу, не поддерживаются
			ДлинаПериода = 1;
		КонецЕсли;
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -ДлинаПериода);
		КонецПериода  = ДобавитьМесяц(КонецПериода,  -ДлинаПериода);
			
	ИначеЕсли ПравилоЗаполнения.Период = Перечисления.ОтносительныеПериодыОтчетности.АналогичныйПериодПредыдущегоГода Тогда
			
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -12);
		КонецПериода  = ДобавитьМесяц(КонецПериода,  -12);
	ИначеЕсли ПравилоЗаполнения.Период = Перечисления.ОтносительныеПериодыОтчетности.СледующийПериод Тогда
		
		// Учтем периодичность отчета
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			ДлинаПериода = 12;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			ДлинаПериода = 6;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			ДлинаПериода = 3;
		Иначе
			// Декада, день, неделя - периоды не кратные месяцу, не поддерживаются
			ДлинаПериода = 1;
		КонецЕсли;
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, ДлинаПериода);
		КонецПериода  = ДобавитьМесяц(КонецПериода,  ДлинаПериода);
		
	КонецЕсли;
	
	Если ПравилоЗаполнения.СНачалаГода Тогда
		НачалоПериода = НачалоГода(НачалоПериода);
	КонецЕсли;
	
	Если ПравилоЗаполнения.ДоКонцаГода Тогда
		КонецПериода = КонецГода(КонецПериода - 1);
	Иначе
		КонецПериода = КонецПериода - 1;
	КонецЕсли;
	
	ОписаниеПоказателя.НачалоПериода = НачалоПериода;
	ОписаниеПоказателя.КонецПериода  = КонецПериода;
	
КонецПроцедуры

Процедура УдалитьПоказателиКоторыеНеТребуетсяЗаполнять(ПравилаЗаполнения, ИмяОтчета, ИмяРедакцииОтчета, Период)
	
	// Как правило, следует удалить все показатели, которые не требуются получателю отчета.
	// Но иногда может оказаться, что часть таких показателей следует оставить, 
	// потому что через них рассчитываются и требуемые показатели.
	
	ПоляКУдалению = ИнтерфейсыВзаимодействияБРО.ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяОтчета, ИмяРедакцииОтчета, Период);
	Если ПоляКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКУдалениюПоиск = Новый Соответствие; // Используем соответствие в качестве индекса для ускорения поиска
	Для Каждого ИмяПоля Из ПоляКУдалению Цикл
		ПоляКУдалениюПоиск.Вставить(ИмяПоля, Истина);
	КонецЦикла;
	
	КоличествоСтрок = ПравилаЗаполнения.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		
		Правило = ПравилаЗаполнения[КоличествоСтрок - ОбратныйИндекс];
		
		Если ПоляКУдалениюПоиск[Правило.ИмяПоля] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Этот показатель в данном периоде заполнять не требуется
		ПравилаЗаполнения.Удалить(Правило);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсФормСтатистики

Процедура ЗаполнитьКонтейнерФормыСтатистики(Контейнер, Показатели, ТаблицаРасшифровки)
	
	// Контейнер - это структура, которая содержит "разделы".
	// Имена разделов (ключи) контейнера семантикой не нагружены.
	// Разделы (свойства контейнера) могут быть двух типов:
	// - структуры, ключи которых - имена полей
	// - таблицы (многострочные поля), колонки которых - имена полей
	// Контейнер содержит значения полей. Он может содержать и те поля, которые не заполняются в этой процедуре.
	
	// Опишем контейнер так, чтобы было легко определить, к каким разделам какие поля относятся.
	МногострочныеРазделыКонтейнера = Новый Соответствие; // Ключ - имя раздела, значение - есть данные для заполнения.
	СоставКонтейнера = Новый Соответствие; // Ключ - имя поля, значение - раздел.
	Для Каждого Раздел Из Контейнер Цикл
		Если ТипЗнч(Раздел.Значение) = Тип("ТаблицаЗначений") Тогда
			МногострочныеРазделыКонтейнера.Вставить(Раздел.Ключ, Ложь);
			Для Каждого ОписаниеПоля Из Раздел.Значение.Колонки Цикл
				СоставКонтейнера.Вставить(ОписаниеПоля.Имя, Раздел.Ключ);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Раздел.Значение) = Тип("Структура") Тогда
			Для Каждого ОписаниеПоля Из Раздел.Значение Цикл
				СоставКонтейнера.Вставить(ОписаниеПоля.Ключ, Раздел.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Укажем для каждого показателя, к какому разделу он относится.
	Показатели.Колонки.Добавить("РазделКонтейнера", Новый ОписаниеТипов("Строка"));
	Для Каждого Показатель Из Показатели Цикл
		Показатель.РазделКонтейнера = СоставКонтейнера[Показатель.ИмяПоля];
		Если МногострочныеРазделыКонтейнера[Показатель.РазделКонтейнера] = Ложь Тогда
			// Заполняется в этой процедуре
			МногострочныеРазделыКонтейнера.Вставить(Показатель.РазделКонтейнера, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Очистим заполняемые данные
	// ... в многострочных разделах
	Для Каждого КлючИЗначение Из МногострочныеРазделыКонтейнера Цикл
		Если КлючИЗначение.Значение Тогда
			Контейнер[КлючИЗначение.Ключ].Очистить();
		КонецЕсли;
	КонецЦикла;
	// ... в остальных разделах
	Для Каждого Показатель Из Показатели Цикл
		Если ЗначениеЗаполнено(Показатель.РазделКонтейнера) 
			И МногострочныеРазделыКонтейнера[Показатель.РазделКонтейнера] = Неопределено Тогда
			Контейнер[Показатель.РазделКонтейнера][Показатель.ИмяПоля] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Сгруппируем показатели свободных строк по строкам и разделам.
	// При этом постараемся не сильно нарушить порядок строк внутри раздела.
	КлючевыеПоляСвободнойСтроки = "РазделКонтейнера, Аналитика";
	МаксимальныйНомерСтроки = Новый Соответствие;
	
	НомераСвободныхСтрок = Показатели.СкопироватьКолонки(КлючевыеПоляСвободнойСтроки);
	НомераСвободныхСтрок.Индексы.Добавить(КлючевыеПоляСвободнойСтроки);
	НомераСвободныхСтрок.Колонки.Добавить("ИндексВРазделе", Новый ОписаниеТипов("Число")); // Строки нумеруются в рамках раздела
	
	ПоискСвободнойСтроки = Новый Структура(КлючевыеПоляСвободнойСтроки);
	
	Для Каждого Показатель Из Показатели Цикл
		Если Не Показатель.Детализировать Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПоискСвободнойСтроки, Показатель);
		Если НомераСвободныхСтрок.НайтиСтроки(ПоискСвободнойСтроки).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НомераСвободныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Показатель);
		
		НоваяСтрока.ИндексВРазделе = МаксимальныйНомерСтроки[НоваяСтрока.РазделКонтейнера];// Используем неявное преобразование к числу
		МаксимальныйНомерСтроки.Вставить(НоваяСтрока.РазделКонтейнера, НоваяСтрока.ИндексВРазделе + 1);
	КонецЦикла;
	
	// Заполним контейнер
	Для Каждого Показатель Из Показатели Цикл
		
		ИмяРаздела = Показатель.РазделКонтейнера;
		
		Если Не ЗначениеЗаполнено(ИмяРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		Раздел = Контейнер[ИмяРаздела];
		
		Если МногострочныеРазделыКонтейнера[ИмяРаздела] = Неопределено Тогда
			
			Значение = ДополнитьЗначение(Показатель.Значение, Раздел[Показатель.ИмяПоля]);
			Раздел.Вставить(Показатель.ИмяПоля, Значение);
			
			// При заполнении контейнера сложим данные нужные для расшифровки отчета в отдельную таблицу.
			ДополнительныеПараметрыРасшифровки = Новый Структура(СтруктураДополнительныхПараметровРасшифровки());
			
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыРасшифровки, Показатель);
			
			Если Показатель.РасшифровкаЗаполнена Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				Показатель.ИмяПоля, 				//ИмяПоказателя 
				Показатель.НаименованиеПоказателя,	//НаименованиеПоказателя 
				"+",								//ЗнакОперации 
				Показатель.Характеристика,			//НаименованиеСлагаемого 
				Показатель.Значение,				//Сумма 
				ИмяРаздела,							//ИмяРаздела 
				ДополнительныеПараметрыРасшифровки	//ДополнительныеПараметры
				);
			
		ИначеЕсли Показатель.Детализировать Тогда
			
			ЗаполнитьЗначенияСвойств(ПоискСвободнойСтроки, Показатель);
			ОписаниеНомераСвободнойСтроки = НомераСвободныхСтрок.НайтиСтроки(ПоискСвободнойСтроки)[0];
			ИндексСтроки = ОписаниеНомераСвободнойСтроки.ИндексВРазделе;
			
			Пока Раздел.Количество() <= ИндексСтроки Цикл
				Раздел.Добавить();
			КонецЦикла;
			
			ЗаполняемаяСтрока = Раздел[ИндексСтроки];
			
			Значение = ЗаполняемаяСтрока[Показатель.ИмяПоля];
			ЗаполняемаяСтрока[Показатель.ИмяПоля] = ДополнитьЗначение(Показатель.Значение, Значение);
			
			// При заполнении контейнера сложим данные нужные для расшифровки отчета в отдельную таблицу.
			ДополнительныеПараметрыРасшифровки = Новый Структура(СтруктураДополнительныхПараметровРасшифровки());
			
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыРасшифровки, Показатель);
			
			Если Показатель.РасшифровкаЗаполнена Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				Показатель.ИмяПоля + "_" + (ИндексСтроки + 1), 	//ИмяПоказателя.
				Показатель.НаименованиеПоказателя,				//НаименованиеПоказателя.
				"+",											//ЗнакОперации 
				Показатель.Характеристика,						//НаименованиеСлагаемого.
				Показатель.Значение,							//Сумма.
				ИмяРаздела,										//ИмяРаздела.
				ДополнительныеПараметрыРасшифровки				//ДополнительныеПараметры.
				);
			
		Иначе // Странный способ хранения. Сложим все в первую строку.
			
			Если Раздел.Количество() = 0 Тогда
				ЗаполняемаяСтрока = Раздел.Добавить();
			Иначе
				ЗаполняемаяСтрока = Раздел[0];
			КонецЕсли;
			
			Значение = ЗаполняемаяСтрока[Показатель.ИмяПоля];
			ЗаполняемаяСтрока[Показатель.ИмяПоля] = ДополнитьЗначение(Показатель.Значение, Значение);
			
			// При заполнении контейнера сложим данные для расшифровки отчета в отдельную таблицу.
			ДополнительныеПараметрыРасшифровки = Новый Структура(СтруктураДополнительныхПараметровРасшифровки());
			
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыРасшифровки, Показатель);
			
			Если Показатель.РасшифровкаЗаполнена Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ТаблицаРасшифровки,
				Показатель.ИмяПоля + "_1", 			//ИмяПоказателя.
				Показатель.НаименованиеПоказателя,	//НаименованиеПоказателя.
				"+",								//ЗнакОперации.
				Показатель.Характеристика,			//НаименованиеСлагаемого.
				Показатель.Значение,				//Сумма.
				ИмяРаздела,							//ИмяРаздела.
				ДополнительныеПараметрыРасшифровки	//ДополнительныеПараметры.
				);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Показатели.Колонки.Удалить("РазделКонтейнера");
	Показатели.Колонки.Удалить("РасшифровкаЗаполнена");
	
КонецПроцедуры

Функция ДополнитьЗначение(Дополнительное, Дополняемое)
	
	Если ТипЗнч(Дополняемое) = Тип("Число") 
		И ТипЗнч(Дополнительное) = Тип("Число") Тогда
		Возврат Дополнительное + Дополняемое;
	ИначеЕсли ТипЗнч(Дополняемое) = Тип("Число") Тогда
		Возврат Дополняемое;
	Иначе
		Возврат Дополнительное;
	КонецЕсли;

КонецФункции

Функция СтруктураДополнительныхПараметровРасшифровки() Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	ДополнительныеПараметры.Добавить("Аналитика");
	ДополнительныеПараметры.Добавить("Детализировать");
	ДополнительныеПараметры.Добавить("ИсточникДанных");
	ДополнительныеПараметры.Добавить("ПримененнаяНастройка");
	ДополнительныеПараметры.Добавить("ОбъектНаблюдения");
	ДополнительныеПараметры.Добавить("Характеристика");
	ДополнительныеПараметры.Добавить("НачалоПериода");
	ДополнительныеПараметры.Добавить("КонецПериода");
	ДополнительныеПараметры.Добавить("ДеревоНастроек");
	ДополнительныеПараметры.Добавить("ДополнительныйАлгоритм");
	ДополнительныеПараметры.Добавить("НомерСтрокиОтчета");
	
	Возврат СтрСоединить(ДополнительныеПараметры, ", ");
	
КонецФункции

#КонецОбласти

#Область ВнешниеНаборыДанных

Функция ПодготовитьВнешниеДанные(МакетКомпоновки, ВнешниеДанные) Экспорт
	
	Для Каждого ОписаниеОбъекта Из ОбъектыВнешнихНаборовДанных(МакетКомпоновки.НаборыДанных) Цикл
		
		ИмяОбъекта = ОписаниеОбъекта.Ключ;
		
		Если ВнешниеДанные.Свойство(ИмяОбъекта) Тогда
			Продолжить;
		КонецЕсли;
			
		ОбъектВнешнихДанных = ЗаполнениеФормСтатистикиПереопределяемый.ВнешниеДанные(ИмяОбъекта);
		
		Если ОбъектВнешнихДанных = Неопределено Тогда
			Возврат Ложь;
		Иначе
			ВнешниеДанные.Вставить(ИмяОбъекта, ОбъектВнешнихДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСхемамиКомпоновкиДанных

Функция ОбъектыВнешнихНаборовДанных(НаборыДанных)
	
	Объекты = Новый Структура;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			
			Объекты.Вставить(НаборДанных.ИмяОбъекта);
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Для Каждого Объект Из ОбъектыВнешнихНаборовДанных(НаборДанных.Элементы) Цикл
				Объекты.Вставить(Объект.Ключ, Объект.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объекты;
	
КонецФункции
	
// РАБОТА С НАСТРОЙКАМИ
//
// Эмулируем пользовательские настройки.
// - Удаляем из общих настроек доступные пользователю.
// - Добавляем к ним пользовательские.

Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, ОбъектНаблюдения, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Инициализируем компоновщик настроек.
	Если ЗначениеЗаполнено(ОбъектНаблюдения.ИсточникДанных) Тогда
		Схема = Перечисления.ИсточникиДанныхСтатистическихПоказателей.СхемаКомпоновкиДанных(ОбъектНаблюдения.ИсточникДанных);
	Иначе
		КомпоновщикНастроек.Инициализировать(Неопределено);
		Возврат;
	КонецЕсли;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификаторФормы));
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	// Применим настройки из объекта наблюдения.
	ЗагрузитьНастройку(КомпоновщикНастроек, ОбъектНаблюдения.Настройка);
		
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроекПользователя(КомпоновщикНастроек, ОбъектНаблюдения, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Списком доступных полей можем управлять только на уровне схемы.
	// (Можем еще определять состав пользовательских настроек,
	// но это не подходит, так как лишит пользователя возможности добавлять отборы через точку.).
	// Поэтому
	// - получим список полей, для которых включена возможность пользовательской настройки.
	//   (для этого используем компоновщик, не выведенный на форму).
	// - применим этот список к схеме и инициализируем модифицированной схемой компоновщик на форме.
	// - уберем из отбора на форме недоступные и неважные отборы.
	
	ОбщиеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(ОбщиеНастройки, ОбъектНаблюдения);
	
	ПоляОтбораДоступныеПользователю = Новый Массив;
	ЗаполнитьРекурсивноПоляОтбораДоступныеПользователю(ПоляОтбораДоступныеПользователю, ОбщиеНастройки.Настройки.Отбор);
	
	// Подготовим схему, в которой доступность полей отбора будет соответствовать общей настройке.
	Схема = Перечисления.ИсточникиДанныхСтатистическихПоказателей.СхемаКомпоновкиДанных(ОбъектНаблюдения.ИсточникДанных);
	
	ОграничитьИспользованиеПолейВОтбореРекурсивно(Схема.НаборыДанных, ПоляОтбораДоступныеПользователю);
	
	// Инициализируем компоновщик на форме.
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификаторФормы));
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	// Заполним значения по умолчанию.
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, ОбщиеНастройки.Настройки.Отбор);
	УдалитьПоляИзОтбораРекурсивно(КомпоновщикНастроек.Настройки.Отбор, "ДляРедактированияНастроекПользователем");
		
	
КонецПроцедуры

Процедура ЗаполнитьРекурсивноПоляОтбораДоступныеПользователю(ПоляОтбораДоступныеПользователю, Отбор)
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьРекурсивноПоляОтбораДоступныеПользователю(ПоляОтбораДоступныеПользователю, Элемент);
		Иначе
			
			Если Не ЗначениеЗаполнено(Элемент.ИдентификаторПользовательскойНастройки) ИЛИ ПолеЗапрещеноВКонфигурации(Элемент.ЛевоеЗначение) Тогда
				// Это недоступно пользователю
				Продолжить;
			КонецЕсли;
			
			ДобавитьПутьКДанным(ПоляОтбораДоступныеПользователю, Элемент.ЛевоеЗначение);
			ДобавитьПутьКДанным(ПоляОтбораДоступныеПользователю, Элемент.ПравоеЗначение);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПутьКДанным(ПоляОтбораДоступныеПользователю, ЗначениеОтбора)
	
	Если ТипЗнч(ЗначениеОтбора) <> Тип("ПолеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ПолныйПутьКДанным = Строка(ЗначениеОтбора);
	
	Если ПоляОтбораДоступныеПользователю.Найти(ПолныйПутьКДанным) <> Неопределено Тогда // Коллекция заведомо небольшая, поэтому здесь и далее используем поиск без индекса.
		// Избежим дублей элементов.
		Возврат;
	КонецЕсли;
	
	ПоляОтбораДоступныеПользователю.Добавить(ПолныйПутьКДанным);
		
	// Путь может включать обращение к реквизитам (ПолеОтбора.Реквизит). Кроме того, путь может вести к группе полей (Группа.ПолеОтбора).
	// Поэтому добавим и все "подпути" (в этих примерах - ПолеОтбора и Группа), а когда будем применять поля к схеме, то группы отсеются.
	
	ЭлементыПолногоПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПутьКДанным, ".");
	КоличествоВложенныхПутей = ЭлементыПолногоПути.Количество()-2; // Полный путь исключаем
	Для ИндексПути = 0 По КоличествоВложенныхПутей Цикл 
		
		ЭлементыПутиКДанным = Новый Массив;
		Для ИндексЭлементаПути = 0 По ИндексПути Цикл
			ЭлементыПутиКДанным.Добавить(ЭлементыПолногоПути[ИндексЭлементаПути]);
		КонецЦикла;
		
		ПутьКДанным = СтрСоединить(ЭлементыПутиКДанным, ".");
		
		Если ПоляОтбораДоступныеПользователю.Найти(ПутьКДанным) = Неопределено Тогда // Выше проверяли полный путь, здесь - частные.
			ПоляОтбораДоступныеПользователю.Добавить(ПутьКДанным);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ИмяПоляОбособленноеПодразделение()
	// В СКД источников данных статистических показателей поле "ОбособленноеПодразделение"
	// используется для отбора по подразделению.
	Возврат "ОбособленноеПодразделение";
	
КонецФункции

Функция ПолеЗапрещеноВКонфигурации(Поле)
	// Настройка отбора по подразделению имеет смысл
	// только когда включен учет по подразделениям.
	Возврат НЕ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() 
		И Строка(Поле) = ИмяПоляОбособленноеПодразделение();
	
КонецФункции

Процедура ОграничитьИспользованиеПолейВОтбореРекурсивно(НаборыДанных, ПоляОтбораДоступныеПользователю)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл // Вложенные наборы не интересуют, потому что их поля наследуются на верхний уровень.
		
		Для Каждого Поле Из НаборДанных.Поля Цикл
			
			Если Поле.ОграничениеИспользования.Условие И Поле.ОграничениеИспользованияРеквизитов.Условие Тогда
				// Такое поле заведомо будет отсутствовать в общих настройках.
				Продолжить;
			КонецЕсли;
			
			Если ПоляОтбораДоступныеПользователю.Найти(Поле.ПутьКДанным) = Неопределено Тогда
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ОграничитьИспользованиеПолейВОтбореРекурсивно(НаборДанных.Элементы, ПоляОтбораДоступныеПользователю);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьПоляИзОтбораРекурсивно(Отбор, Режим)
	
	// Удалим недоступные и неважные поля из отбора.
	
	КоличествоЭлементов = Отбор.Элементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		
		Индекс  = КоличествоЭлементов - ОбратныйИндекс;
		Элемент = Отбор.Элементы[Индекс];
		Удалить = Ложь;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			УдалитьПоляИзОтбораРекурсивно(Элемент, Режим);
			Если Элемент.Элементы.Количество() = 0 Тогда
				Удалить = Истина;
			КонецЕсли;
		Иначе
			Если Режим = "ДляРедактированияНастроекПользователем" Тогда
				Удалить = ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки) 
					Или (Не Элемент.Использование И Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный)
					Или (Не Элемент.Использование И ПолеЗапрещеноВКонфигурации(Элемент.ЛевоеЗначение));
			ИначеЕсли Режим = "ДляПримененияОбщихНастроек" Тогда
				Удалить = Не ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки);
			Иначе
				Удалить = Ложь;
			КонецЕсли;
					
		КонецЕсли;
		
		Если Удалить Тогда
			Отбор.Элементы.Удалить(Индекс);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНастройку(КомпоновщикНастроек, Настройка, Очищать = Истина) Экспорт
	
	Отбор = ПолучитьОтборКомпоновкиДанных(Настройка);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, Отбор, Очищать);
		
КонецПроцедуры

Функция ПолучитьОтборКомпоновкиДанных(Настройка) Экспорт
	
	Если ПустаяСтрока(Настройка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Отбор = ОбщегоНазначения.ЗначениеИзСтрокиXML(Настройка);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Справочники.СтатистическиеПоказатели.УстановитьСсылкиНаПредопределенныеЭлементыВОтборе(Отбор);
	
	Возврат Отбор;
	
КонецФункции

Функция СериализоватьРезультатНастройки(КомпоновщикНастроек) Экспорт
	
	РезультатНастройки = Новый Структура;
	РезультатНастройки.Вставить("Настройка",              "");
	РезультатНастройки.Вставить("ПредставлениеНастройки", "");
	
	Попытка
		РезультатНастройки.Вставить("Настройка", ОбщегоНазначения.ЗначениеВСтрокуXML(КомпоновщикНастроек.Настройки.Отбор));
	Исключение
		// Не удалось сериализовать настройки, запишем информацию в журнал.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сохранение настроек форм статистики'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	РезультатНастройки.Вставить("ПредставлениеНастройки", Строка(КомпоновщикНастроек.Настройки.Отбор));
	
	Возврат РезультатНастройки;
	
КонецФункции

Процедура ДобавитьОтборВСериализованнуюНастройку(СериализованнаяНастройка, Знач ИмяПоля, Знач Значение, Знач ВидСравнения) Экспорт
	
	Отбор = ПолучитьОтборКомпоновкиДанных(СериализованнаяНастройка);
	Если Отбор = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отбор = КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, ИмяПоля, Значение, ВидСравнения);
	
	Попытка
		СериализованнаяНастройка = ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
	Исключение
		// Не удалось сериализовать настройки, запишем информацию в журнал.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сохранение настроек форм статистики'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИерархияНастроек

Функция ПодготовитьХранилищеНастроек(Показатели)
	
	ПоляИдентификатораНастройки = ПоляИдентификатораНастройки();
	ПоляДляХранилища = ПоляИдентификатораНастройки + ",Настройка";
	
	Хранилище = Показатели.Скопировать(,ПоляДляХранилища);
	Хранилище.Свернуть(ПоляДляХранилища);
	Хранилище.Колонки.Добавить("ОтборОпределен", Новый ОписаниеТипов("Булево"));
	Хранилище.Колонки.Добавить("Отбор",          Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	Хранилище.Колонки.Добавить("ДеревоНастроек", Новый ОписаниеТипов("ТаблицаЗначений"));
	Хранилище.Индексы.Добавить(ПоляИдентификатораНастройки);
	Возврат Хранилище;
	
КонецФункции

Функция ПолучитьНастройку(Хранилище, ОписаниеЗапроса, ДеревоНастроек)
	
	Поиск = Новый Структура(ПоляИдентификатораНастройки());
	ЗаполнитьЗначенияСвойств(Поиск, ОписаниеЗапроса);
	Настройка = Хранилище.НайтиСтроки(Поиск);
	
	Если Настройка.Количество() > 0 Тогда
		Настройка = Настройка[0];
	Иначе
		// Такое может быть, если данные об одном из родительских объектов в форме не требуются
		// или настройка для не выполнена (потому что не требуется или по иной причине).
		Настройка = Хранилище.Добавить();
		ЗаполнитьЗначенияСвойств(Настройка, Поиск);
		
		// Если данные объекта на требуются в форме, то настройка может быть задана, но еще не прочитана.
		ПоискНастройки = Новый Структура("Организация, ОбъектНаблюдения");
		ЗаполнитьЗначенияСвойств(ПоискНастройки, Поиск);
		ДанныеРегистра = РегистрыСведений.НастройкаЗаполненияФормСтатистики.Получить(ПоискНастройки);
		Если ДанныеРегистра.Заполнять Тогда
			Настройка.Настройка = ДанныеРегистра.Настройка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройка.ОтборОпределен Тогда
		
		// Если отбор уже прочитан, восстанавливаем дерево настроек.
		ДеревоНастроек = Настройка.ДеревоНастроек.Скопировать();

		Возврат Настройка.Отбор;
		
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если ОписаниеЗапроса.Детализировать Тогда
		
		// Сводная настройка и все вышележащие.
		Поиск.Вставить("ОбъектНаблюдения", ОписаниеЗапроса.ОбъектНаблюдения);
		Поиск.Вставить("Детализировать",   Ложь);
		Поиск.Вставить("Аналитика",        Неопределено);
		
		Отбор = ПолучитьНастройку(Хранилище, Поиск, ДеревоНастроек);
		
		Отборы.Добавить(Отбор);
		
	Иначе
		
		// Все вышележащие
		Если ЗначениеЗаполнено(ОписаниеЗапроса.ОбъектНаблюдения.Родитель) Тогда
		
			Поиск.Вставить("ОбъектНаблюдения", ОписаниеЗапроса.ОбъектНаблюдения.Родитель);
			Поиск.Вставить("Детализировать",   Ложь);
			Поиск.Вставить("Аналитика",        Неопределено);
			
			Отбор = ПолучитьНастройку(Хранилище, Поиск, ДеревоНастроек);
			
			Отборы.Добавить(Отбор);
			
		КонецЕсли;
		
		// Заданная для текущего уровня разработчиком (общая для объекта).
		Отбор = ПолучитьОтборКомпоновкиДанных(ОписаниеЗапроса.ОбъектНаблюдения.Настройка);
		Если Отбор <> Неопределено Тогда
			УдалитьПоляИзОтбораРекурсивно(Отбор, "ДляПримененияОбщихНастроек"); // Из общих настроек берем только недоступные пользователю.
		КонецЕсли;
		Отборы.Добавить(Отбор);
		
		// До того как сложить отборы вместе, добавим строку в дерево настроек.
		СтрокаДерева = ДеревоНастроек.Добавить();
		
		СтрокаДерева.ОбъектНаблюдения 	= Настройка.ОбъектНаблюдения;
		СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
		СтрокаДерева.Аналитика 			= Настройка.Аналитика;
		СтрокаДерева.ГруппаНастроек 	= 2;
		
	КонецЕсли;
	
	// Отбор текущей строки.
	Отбор = ПолучитьОтборКомпоновкиДанных(Настройка.Настройка);
	Отборы.Добавить(Отбор);
	
	// До того как сложить отборы вместе, добавим строку в дерево настроек.
	СтрокаДерева = ДеревоНастроек.Добавить();
	
	СтрокаДерева.ОбъектНаблюдения 	= Настройка.ОбъектНаблюдения;
	СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
	СтрокаДерева.Аналитика 			= Настройка.Аналитика;
	СтрокаДерева.ГруппаНастроек 	= 1;
	
	// Сложим отборы вместе.
	СуммаНастроек = Новый НастройкиКомпоновкиДанных;
	
	Для Каждого Отбор Из Отборы Цикл
		Если Отбор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(СуммаНастроек.Отбор, Отбор, Ложь);
		
	КонецЦикла;
	
	// Сохраним копию дерева настроек, чтобы не собирать его заново
	// если захотим прочитать эту настройку еще раз.
	Настройка.ДеревоНастроек = ДеревоНастроек.Скопировать();
	Настройка.ОтборОпределен = Истина;
	Настройка.Отбор 		 = СуммаНастроек.Отбор;
	
	Возврат Настройка.Отбор;
	
КонецФункции

Функция ПоляИдентификатораНастройки()
	Возврат "ОбъектНаблюдения,Детализировать,Аналитика,Организация";
КонецФункции

#КонецОбласти

#КонецОбласти

