
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет диагностику обмена электронными документами.
// В зависимости от значений свойств параметра ПараметрыВыполнения после выполнения диагностики
// либо открывает форму с отображением результатов диагностики, либо выполняет указанное в параметре оповещение.
// Виды выполняемых проверок:
//      * Интернет-соединение
//          ** Наличие интернет-соединения
//          ** Активность сервисов: работоспособны ли ресурсы: https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//          ** Доступность сервисов: доступны ли из клиентского приложения ресурсы: https://1c-edo.ru,
//             https://1c-api.taxcom.ru, и т.п.
//          ** Наличие корневых сертификатов сервисов: установлены ли в хранилище сертификатов корневые сертификаты ресурсов:
//             https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//      * Криптография
//          ** Наличие программы криптографии: установлена ли программа для защиты информации.
//          ** Наличие корневого сертификата ГУЦ: установлен ли в хранилище сертификатов сертификат
//             головного удостоверяющего центра.
//          ** Наличие сертификатов: имеются ли в программе сертификаты для работы с электронным документооборотом.
//          ** Неполученные сертификаты: имеются ли заказанные, но не полученные сертификаты для работы
//             с электронным документооборотом.
//          ** Непривязанные сертификаты: имеются ли сертификаты, не привязанные к учетным записям (требующие
//             регистрации в сервисе).
//          ** Проверки сертификатов:
//              *** Наличие сертификата в личном списке: установлен ли сертификат в личный список (личное хранилище)
//                  на компьютере.
//              *** Корректность данных сертификата: проверка данных сертификата с помощью программы электронной подписи
//                  и шифрования.
//                  Данные сертификата, загруженные из файла сертификата или другим путем, могут быть некорректны по разным
//                  причинам, но самые частые следующие:
//                  - закончился срок действия сертификата;
//                  - сертификат в списке отозванных.
//              *** Наличие программы для подписания и расшифровки: имеется ли на компьютере программа, указанная в сертификате
//                  для закрытого ключа, которая позволяет подписывать и расшифровывать данные.
//              *** Подписание данных: возможно ли подписать данные закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//              *** Проверка созданной подписи: возможна ли проверка имеющейся подписи открытым ключом сертификата с помощью
//                  программы электронной подписи и шифрования.
//              *** Шифрование данных: возможно ли шифрование данных открытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования.
//              *** Расшифровка данных: возможна ли расшифровка данных закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//      * Работа с файлами
//          ** Длина пути к файлу: не превышает ли длина пути к файлу 256 символов.
//      * Интернет-поддержка
//          ** Внедрение БИП: внедрена ли в конфигурацию библиотека интернет-поддержки.
//          ** Корректность данных интернет-поддержки: верно ли указаны логин и пароль от сервиса интернет-поддержки.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры выполнения диагностики,
//                        см. ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики.
// 
// Возвращаемое значение:
//   - Структура - Результат диагностики, см. ОбменСКонтрагентамиДиагностика.НовыйРезультатДиагностики.
//
// Пример:
//  // Вариант 1
//	ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
//  ПараметрыВыполнения.ВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение());
//  ОбменСКонтрагентамиДиагностикаКлиент.ВыполнитьДиагностику(ПараметрыВыполнения);
//  // Вариант 2
//  ОбменСКонтрагентамиДиагностикаКлиент.ВыполнитьДиагностику();
//
Процедура ВыполнитьДиагностику(ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПараметрыОткрытияМастера = Неопределено Тогда
		ПараметрыВыполнения.ПараметрыОткрытияМастера = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
	КонецЕсли;
	
	ПараметрыВыполнения.ОткрыватьОкноДиагностики = ПараметрыВыполнения.ОповещениеОЗавершении = Неопределено;
		
	ПодготовитьКлиентскиеДанные(ПараметрыВыполнения);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеСлужебныйКлиент.ПриОпределенииПараметровВидаОшибки.
Процедура ПриОпределенииПараметровВидаОшибки(ВидОшибки, ПараметрыВидаОшибки) Экспорт
	
	ПараметрыВидаОшибки.Статус = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.СтатусОшибкиВажная();
	
	Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиИнтернетСоединение()
			Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография()
			Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиИнтернетПоддержка()
			Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиРаботаСФайлами() Тогда
			
			ОбработчикВыполненияДиагностики = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьМастерДиагностики";
			ПараметрыВидаОшибки.ВыполнятьОбработчикАвтоматически = Истина;
			ПараметрыВидаОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикВыполненияДиагностики;
			ПредставлениеПроверки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ПолучитьСклонение(ВидОшибки, "Родительный");
			ПараметрыВидаОшибки.ЗаголовокПроблемы = СтрШаблон(НСтр("ru = 'Ошибка %1'"), ПредставлениеПроверки);
			ПараметрыВидаОшибки.ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику %1'"), ПредставлениеПроверки);
			ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выполните", ОбработчикВыполненияДиагностики);
			
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОбновлениеВерсииЭДЗакрытПринудительно() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронный документ закрыт принудительно'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Были изменены ключевые реквизиты, участвующие в электронном документообороте'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Создайте"">Создайте</a> новый электронный документ'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Создайте", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьФормуСозданияНовогоЭД");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОбновлениеВерсииЭДТребуетсяАннулирование() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Электронный документ стал неактуальным'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Были изменены ключевые реквизиты, участвующие в электронном документообороте'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Создайте"">Аннулируйте старый и создайте</a> новый электронный документ'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Создайте", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьФормуАннулированияСтарогоЭДИСозданияНового");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиПовторноеПолучениеПакета() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось сохранить пакет электронного документа'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Обратитесь"">Обратитесь</a> в тех. поддержку'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Обратитесь", ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработчикОткрытияФормыОбращенияВТехподдержку());
		
	ИначеЕсли ВидОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ВидОшибкиМаршрутПодписания()
		Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиМаршрутПодписанияПодписиУжеУстановлены() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибки в настройках маршрута подписания'");
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиМаршрутПодписанияПодписиУжеУстановлены() Тогда
			ПараметрыВидаОшибки.ОписаниеПроблемы = ОбменСКонтрагентамиДиагностикаКлиентСервер.ПояснениеОшибкиПодписиУжеУстановлены();
		Иначе 
			ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет доступных сертификатов для подписания документов'");
		КонецЕсли;
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Проверьте"">Проверьте:</a>
		|1. Доступность сертификатов, указанных в маршруте подписания.
		|2. Пользователей, указанных в сертификатах.'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Проверьте", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьОшибкиМаршрутовПодписания");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиИсходящийЭДОтветногоТитула() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Для полученного ответного титула не найден исходящий ЭД.'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = ОбменСКонтрагентамиДиагностикаКлиентСервер.ПояснениеОшибкиНенайденногоИсходящегоЭДДляОтветногоТитула();
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Выберите"">Выберите</a> дальнейшее действие'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выберите", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьОшибкиИсходящегоЭДОтветногоТитула");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиЕстьНеполученныеЭД() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Получены не все документы'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Дата запроса получения данных оператора ЭДО ограничивает получение документов'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Выберите"">Выберите</a> дальнейшее действие'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выберите", "ОбменСКонтрагентамиДиагностикаКлиент.ПоказатьДействияПриНаличииНеполученныхДокументов");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиЕстьНеполученныеПриглашения() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Получены не все приглашения к обмену электронными документами'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = 
			НСтр("ru = 'Дата запроса получения данных оператора ЭДО ограничивает получение приглашений к обмену электронными документами'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Выберите"">Выберите</a> дальнейшее действие'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выберите", "ОбменСКонтрагентамиДиагностикаКлиент.ПоказатьДействияПриНаличииНеполученныхПриглашений");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиВидДокументаНеПоддерживается() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка при чтении электронного документа'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Данный вид электронного документа не поддерживается в текущей версии программы.'"));
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = '<a href = ""Обновите"">Обновите</a> конфигурацию до актуальной версии или <a href = ""обратитесь"">обратитесь</a> в тех. поддержку'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Обновите", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьОбработкуОбновлениеПрограммы");
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("обратитесь", ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработчикОткрытияФормыОбращенияВТехподдержку());
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиЕстьУчетныеЗаписиБезСертификатов() Тогда
		
		ОбработчикОткрытияПомощника = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПомощникРегистрацииСертификатов";
		ПараметрыВидаОшибки.ВыполнятьОбработчикАвтоматически = Истина;
		ПараметрыВидаОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикОткрытияПомощника;
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось подписать документы'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Нет доступного сертификата для подписания документов'"));
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = '<a href = ""Добавьте"">Добавьте</a> сертификат для учетной записи'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Добавьте", ОбработчикОткрытияПомощника);
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеВключеноИспользованиеОбменаЭД() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось выполнить операцию'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Использование обмена электронными документами выключено'"));
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы <a href = ""включить"">включить</a> использование обмена электронными документами.'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("включить", "ОбменСКонтрагентамиДиагностикаКлиент.ВключитьИспользованиеОбменаЭД");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиДляСертификатаНетПодписываемогоВидаДокумента() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствует доступный сертификат для подписания документов'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Для сертификата в списке ""Подписываемые виды документов"" нет данного вида документа'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Проверьте"">Проверьте</a> подписываемые виды документов в сертификате'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Проверьте", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьСертификаты");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОтсутствуетСертификатДляПодписания() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствует доступный сертификат для подписания документов'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'В процессе подписания электронного документа не найден ни один из доступных сертификатов ЭП.'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Проверьте"">Проверьте</a> настройки электронных подписей.'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Проверьте", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьНастройкиЭлектроннойПодписи");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиАвтоматическоеСозданиеКонтрагента() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Автоматическое создание контрагента невозможно'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Выключена опция ""Создавать контрагентов автоматически""'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'Заполните контрагента и <a href = ""примите"">примите</a> приглашение'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("примите", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПриглашения");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНетПравНаОбработкуДокументов() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Нарушение прав доступа'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет прав на обработку электронных документов'");
		
		СинонимРоли = ОбменСКонтрагентамиДиагностикаВызовСервера.СинонимРолиДобавлениеИзменениеЭлектронныхДокументов();
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Обратитесь к администратору для добавления роли ""%1"" в профиль групп доступа.'"), СинонимРоли));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеПринятоПриглашение()
		Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяСогласиеНаПриглашениеОтправкаДокументов() Тогда
		
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеПринятоПриглашение() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать пакет электронного документа'");
			ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'Необходимо <a href = ""принять"">принять</a> приглашение.
				|После того как оно будет принято, пакет можно будет распаковать.'"));
		ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяСогласиеНаПриглашениеОтправкаДокументов() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось отправить электронный документ'");
			ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'Необходимо <a href = ""принять"">принять</a> приглашение.
				|После того как оно будет принято, документ можно будет отправить.'"));
		КонецЕсли;
		
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Не принято приглашение к обмену электронными документами'");
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("принять", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПриглашения");
		ПараметрыВидаОшибки.ПараметрыОбработчиков.Вставить("принять", Новый Структура("Группировать", Истина));
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОжидаетсяСогласиеНаПриглашение()
		Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОжидаемСогласияНаПриглашениеОтправкаДокументов() Тогда
		
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОжидаетсяСогласиеНаПриглашение() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать пакет электронного документа'");
		ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОжидаемСогласияНаПриглашениеОтправкаДокументов() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось отправить электронный документ'");
		КонецЕсли;
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Приглашение к обмену электронными документами находится в статусе ""Ожидаем согласие""'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			НСтр("ru = 'Уточните у контрагента, принял ли он <a href = ""приглашение"">приглашение</a>.
					   |Если приглашение принято - <a href = ""обратитесь"">обратитесь</a> в тех. поддержку'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("приглашение", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПриглашения");
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("обратитесь", ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработчикОткрытияФормыОбращенияВТехподдержку());
		ПараметрыВидаОшибки.ПараметрыОбработчиков.Вставить("приглашение", Новый Структура("Группировать", Истина));
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяОтправкаПриглашения()
		Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяОтправкаПриглашенияОтправкаДокументов() Тогда
		
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяОтправкаПриглашения() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать пакет электронного документа'");
			ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				НСтр("ru = 'Чтобы продолжить обмен электронными документами с контрагентом, отправьте <a href = ""приглашение"">приглашение</a>.
					   |После того как оно будет принято, пакет можно будет распаковать.'"));
		ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиТребуетсяОтправкаПриглашенияОтправкаДокументов() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось отправить электронный документ'");
			ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				НСтр("ru = 'Чтобы продолжить обмен электронными документами с контрагентом, отправьте <a href = ""приглашение"">приглашение</a>.
					   |После того как оно будет принято, документ можно будет отправить.'"));
		КонецЕсли;
		
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Приглашение к обмену электронными документами еще не было отправлено'");
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("приглашение", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПриглашения");
		ПараметрыВидаОшибки.ПараметрыОбработчиков.Вставить("приглашение", Новый Структура("Группировать", Истина));
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОшибкаПриглашения()
		Или ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОшибкаПриглашенияОтправкаДокументов() Тогда
		
		Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОшибкаПриглашения() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать пакет электронного документа'");
		ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОшибкаПриглашенияОтправкаДокументов() Тогда
			ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось отправить электронный документ'");
		КонецЕсли;
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Приглашение к обмену электронными документами находится в статусе ""Ошибка""'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Обратитесь"">Обратитесь</a> в тех. поддержку'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Обратитесь", ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработчикОткрытияФормыОбращенияВТехподдержку());
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНетПриглашения() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось распаковать пакет электронного документа'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Не настроена связь с контрагентом'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Обратитесь"">Обратитесь</a> в тех. поддержку'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Обратитесь", ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработчикОткрытияФормыОбращенияВТехподдержку());
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеУказанОбратныйАдресКонтрагента() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось сформировать пакет электронного документа'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Не заполнен обратный адрес контрагента'");
		ПараметрыВидаОшибки.ОписаниеРешения = НСтр("ru = 'Рекомендуется обновить конфигурацию информационной базы корреспондента
			|или заполните значение реквизита ""обратный адрес"" в карточке входящего документа'");
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНетПравНаИзменениеИнформацииПоУчетнойЗаписи() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Нет прав на изменение информации по учетной записи'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Идентификатор ЭДО привязан к логину интернет-поддержки, отличному от текущего'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'Способ устранения описан <a href = ""http://1c-edo.ru/handbook/24/4358/"">здесь</a>'"));
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.Статус = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.СтатусОшибкиОбычная();
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиПодписьНеверна() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось обработать электронный документ'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Документ содержит невалидные подписи'");
		ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику криптографии. Если это не помогло решить проблему,
			|ознакомьтесь со статьями <a href = ""http://1c-edo.ru/handbook/24/2595/#1"">здесь</a> и <a href = ""https://its.1c.ru/db/metbud81#content:5784:hdoc"">здесь</a>.'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ОписаниеРешения);
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выполните", "ОбменСКонтрагентамиДиагностикаКлиент.ВыполнитьДиагностикуКриптографии");
		
	ИначеЕсли ВидОшибки = ВидОшибкиНеУстановленаПечатнаяФормаПоУмолчаниюВнутреннийЭДО() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось сформировать электронный документ'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Не установлена печатная форма по умолчанию'");
		ОписаниеРешения = НСтр("ru = '<a href = ""Выберите"">Выберите</a> печатную форму, которую следует использовать по умолчанию'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ОписаниеРешения);
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		ПараметрыВидаОшибки.ОбработчикиНажатия.Вставить("Выберите", "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьНастройкиВнутреннегоЭДО");
		
	ИначеЕсли ВидОшибки = ВидОшибкиНетПравДляНастройкиЭДО() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось сформировать электронный документ'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет прав для настройки электронного документооборота'");
		ОписаниеРешения = НСтр("ru = 'Обратитесь к администратору'");
		ОписаниеРешения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ОписаниеРешения);
		ПараметрыВидаОшибки.ОписаниеРешения = ОписаниеРешения;
		
	ИначеЕсли ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНедействительныйПользователь() Тогда
		
		ПараметрыВидаОшибки.ЗаголовокПроблемы = НСтр("ru = 'Пользователь недействителен'");
		ПараметрыВидаОшибки.ОписаниеПроблемы = НСтр("ru = 'Обработка электронных документов запрещена'");
		ПараметрыВидаОшибки.ОписаниеРешения = НСтр("ru = 'Обратитесь к администратору для настройки параметров пользователя.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОшибкиСертификатовВыбор(Форма, Элемент, Поле, ГруппаОшибкиСертификатов) Экспорт
	
	Если Поле = Форма.Элементы.ОшибкиСертификатовСертификат Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	ИначеЕсли Поле = Форма.Элементы.ОшибкиСертификатовОшибки Тогда
		ОткрытьОшибкиСертификата(Форма, Элемент.ТекущиеДанные.Сертификат, Элемент.ТекущиеДанные.Ошибки);
	КонецЕсли;
	ГруппаОшибкиСертификатов.Скрыть();
	
КонецПроцедуры

Функция ТекстПредупреждения(Ошибки) Экспорт
	
	ВидыОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ВидОшибки");
	
	ВидыДиагностики = Новый Массив;
	ОбменСКонтрагентамиДиагностикаКлиентСервер.ОшибкиДиагностируются(Ошибки, ВидыДиагностики);
	ДляВсехОшибокЕстьМастерДиагностики = ВидыОшибок.Количество() = ВидыДиагностики.Количество();
	Если ДляВсехОшибокЕстьМастерДиагностики Тогда
		Текст = НСтр("ru = 'Возникли проблемы с %1. <a style=""font: ЖирныйШрифтБЭД"" href=""Нажмите"">Нажмите</a>, чтобы провести диагностику.'");
		ТекстПредупреждения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Текст, ОбменСКонтрагентамиДиагностикаКлиентСервер.ПредставлениеОшибок(Ошибки));
	Иначе
		Текст = НСтр("ru = 'При выполнении операции возникли проблемы. <a style=""font: ЖирныйШрифтБЭД"" href=""Нажмите"">Нажмите</a>, чтобы посмотреть список ошибок.'");
		ТекстПредупреждения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Текст);
	КонецЕсли;
	
	Возврат ТекстПредупреждения; 
	
КонецФункции

Процедура ОткрытьСписокСертификатов(Сертификаты, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьЭлементТаблицы";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Ложь;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", Сертификаты);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ПоказатьДанныеВСписке(Данные, ОбработчикПолученияПредставлений, Заголовок = "") Экспорт
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	ПараметрыИсправленияОшибок.Заголовок = Заголовок;
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьЭлементТаблицы";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Данные", Данные);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ПараметрыПредставленияДанных = Новый Структура;
	ПараметрыПредставленияДанных.Вставить("ОбработчикПолученияПредставлений", ОбработчикПолученияПредставлений);
	Параметры.Вставить("ПараметрыПредставленияДанных", ПараметрыПредставленияДанных);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Функция ВидОшибкиНетПравДляНастройкиЭДО() Экспорт
	
	Возврат "НетПравДляНастройкиЭДО";
	
КонецФункции

Функция ВидОшибкиНеУстановленаПечатнаяФормаПоУмолчаниюВнутреннийЭДО() Экспорт
	
	Возврат "ВидОшибкиНеУстановленаПечатнаяФормаПоУмолчаниюВнутреннийЭДО";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Диагностика 

Процедура ПодготовитьКлиентскиеДанные(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ИнформационнаяБазаФайловая = ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая();
	#Если Не ВебКлиент Тогда
		ПараметрыВыполнения.ИмяКомпьютераКлиент = ИмяКомпьютера();
	#КонецЕсли
	НужноПолучитьКлиентскиеОтпечатки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография())
	Или ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации())
	Или (ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение())
		И ПараметрыВыполнения.Отбор.УчетнаяЗапись.Количество() = 0 И ПараметрыВыполнения.Отбор.Сертификат.Количество() = 0);
		
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография())
		Или НужноПолучитьКлиентскиеОтпечатки Тогда
		
		ПараметрыКриптографии = ПараметрыКриптографии();
		
		ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыКриптографии);
		
		Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширения", ЭтотОбъект, ПараметрыВыполнения);
		ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, Оповещение);
		
	Иначе
		ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения)
	
	ПараметрыВыполненияСервер = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыполнения);
	ПараметрыВыполненияСервер.Удалить("ОповещениеОЗавершении");
	ПараметрыВыполненияСервер.Удалить("ПараметрыОткрытияМастера");
		
	Если ПараметрыВыполнения.ОткрыватьОкноДиагностики Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ОбщийМодуль.ОбменСКонтрагентамиДиагностикаКлиент.ПослеПодготовкиКлиентскихДанных");
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ФормаДиагностикиЗакрытие", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФорму("Обработка.ОбменСКонтрагентамиДиагностика.Форма.ДиагностикаЭДО",
			ПараметрыВыполненияСервер,,,,, ОбработчикЗакрытия);
	Иначе
		ДлительнаяОперация = ОбменСКонтрагентамиДиагностикаВызовСервера.ВыполнитьДиагностику(ПараметрыВыполненияСервер);
		ПараметрыВыполнения.ДлительнаяОперация = ДлительнаяОперация;
		ПродолжитьВыполнениеДиагностики(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеДиагностики(ПараметрыВыполнения) Экспорт
	
	ДлительнаяОперация = ПараметрыВыполнения.ДлительнаяОперация;
	ОповещениеОЗавершении = ПараметрыВыполнения.ОповещениеОЗавершении;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершенииСервернойДиагностики = Новый ОписаниеОповещения("ПослеВыполненияСервернойДиагностики", ЭтотОбъект, ПараметрыВыполнения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершенииСервернойДиагностики, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеВыполненияСервернойДиагностики(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Статус = "Отменено" Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.РезультатДиагностики = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()) Тогда
		РезультатДиагностикиКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
			ПараметрыВыполнения.РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		СертификатыДляПроверки = РезультатДиагностикиКриптографии.ПривязанныеКУчетнымЗаписямСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СертификатыДляПроверки, ПараметрыВыполнения.ДополнительныеСертификатыДляПроверки, Истина);
		ПараметрыВыполнения.СертификатыДляПроверки = СертификатыДляПроверки;
	
		Контекст = Новый Структура;
		Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ЗапроситьПаролиСертификатов(Контекст);
	Иначе
		ВыполнитьКлиентскуюДиагностику(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКлиентскуюДиагностику(ПараметрыВыполнения)
	
	Замер = ОценкаПроизводительностиКлиент.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ОбменСКонтрагентамиДиагностикаКлиент.ВыполнитьКлиентскуюДиагностику");
	ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте = Замер;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеВыполненияКлиентскойДиагностики", ЭтотОбъект);
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ДиагностикаКриптографии", ЭтотОбъект, Контекст));
	Обработчики.Добавить(Новый ОписаниеОповещения("ТестАутентификации", ЭтотОбъект, Контекст));
	АсинхронныйЦиклНачать(ОбработчикЗавершения, Неопределено, Обработчики, Контекст);
	
КонецПроцедуры

Процедура ПослеВыполненияКлиентскойДиагностики(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыВыполненияДляОтчета = Новый Структура;
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()) Тогда
		
		РезультатДиагностикиКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(Контекст.ПараметрыВыполнения.РезультатДиагностики,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		ОбщийРезультат = Истина;
		Для каждого РезультатВидаДиагностики Из РезультатДиагностикиКриптографии.Результаты Цикл
			ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
		КонецЦикла; 
		РезультатДиагностикиКриптографии.Результат = ОбщийРезультат;
		
		ПараметрыВыполненияДляОтчета.Вставить("ИнформационнаяБазаФайловая");
		ПараметрыВыполненияДляОтчета.Вставить("ИмяКомпьютераКлиент");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияДляОтчета, Контекст.ПараметрыВыполнения);
		
	КонецЕсли;
	
	РезультатДиагностикиТестАутентификации = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
	Если РезультатДиагностикиТестАутентификации <> Неопределено Тогда
		ОбщийРезультат = Истина;
		Для каждого РезультатВидаДиагностики Из РезультатДиагностикиТестАутентификации.Результаты Цикл
			ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
		КонецЦикла; 
		РезультатДиагностикиТестАутентификации.Результат = ОбщийРезультат;
	КонецЕсли;
	
	ОбменСКонтрагентамиДиагностикаВызовСервера.ЗаполнитьОтчетыДляАдминистратора(Контекст.ПараметрыВыполнения.РезультатДиагностики,
		Контекст.ПараметрыВыполнения.ВидыДиагностики, ПараметрыВыполненияДляОтчета);
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
	КонецЦикла;
	Контекст.ПараметрыВыполнения.РезультатДиагностики.Результат = ОбщийРезультат;
	
	Для каждого Сертификат Из Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями Цикл
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Неопределено);
	КонецЦикла;
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()) Тогда
		Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями.Очистить();
		Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Очистить();
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗакончитьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте, 1);
	
	ВыполнитьОбработкуОповещения(Контекст.ПараметрыВыполнения.ОповещениеОЗавершении, Контекст.ПараметрыВыполнения.РезультатДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область ДиагностикаКриптографии

Процедура ДиагностикаКриптографии(Результат, Контекст) Экспорт
	
	Если Не ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()) Тогда
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаКлиенте
		И Контекст.ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте Тогда
		ОпределитьНаличиеКорневогоСертификатаГУЦ(Контекст);
	Иначе
		ПослеОпределенияНаличияКорневыхСертификатовГУЦ(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьПаролиСертификатов(Контекст) 
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗапросаПаролейСертификатов", ЭтотОбъект, Контекст);
	ВыполнятьПроверкиСертификатовВВебКлиенте = Контекст.ПараметрыВыполнения.ВыполнятьПроверкиСертификатовВВебКлиенте;
	
	Если ВозможенЗапросДополнительныхРазрешений() И Не ВыполнятьПроверкиСертификатовВВебКлиенте Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Неопределено);
	Иначе 
		РезультатДиагностикиКриптографии = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография;
		Сертификаты = Контекст.ПараметрыВыполнения.СертификатыДляПроверки;
		
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("ВвестиПарольСертификата", ЭтотОбъект));
		Обработчики.Добавить(Новый ОписаниеОповещения("СохранитьРезультатВводаПароля", ЭтотОбъект));
		
		АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст.ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиПарольСертификата(Сертификат, Контекст) Экспорт
	
	РезультатДиагностикиКриптографии = Контекст.РезультатДиагностики.Результаты.Криптография;
	СертификатЕстьВЛичномХранилище = РезультатДиагностикиКриптографии.СертификатыОтсутствующиеВЛичномХранилище.Найти(Сертификат) = Неопределено;
	ЭтоОблачныйСертификат = РезультатДиагностикиКриптографии.ОблачныеСертификаты.Найти(Сертификат) <> Неопределено;
	ПарольСертификата = РезультатДиагностикиКриптографии.ПаролиСертификатов[Сертификат];
	Если Не ЗначениеЗаполнено(ПарольСертификата) И Не ЭтоОблачныйСертификат
		И Контекст.СертификатыСУстановленнымиПаролями.Найти(Сертификат) = Неопределено
		И СертификатЕстьВЛичномХранилище Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сертификат", Сертификат);
		ПараметрыФормы.Вставить("Пояснение", Контекст.ПояснениеФормыВводаПароляСертификата);
		ФормаВводаПароля = ОткрытьФорму("Обработка.ОбменСКонтрагентамиДиагностика.Форма.ВводПароляСертификата",
			ПараметрыФормы,,,,, АсинхронныйЦиклСледующийОбработчик(Контекст),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Контекст.Вставить("ФормаВводаПароля", ФормаВводаПароля);
	Иначе 
		Если ЭтоОблачныйСертификат Или Не СертификатЕстьВЛичномХранилище Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, "");
		ИначеЕсли ЗначениеЗаполнено(ПарольСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ПарольСертификата);
		КонецЕсли;
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатВводаПароля(Результат, Контекст) Экспорт
	
	Если Контекст.Свойство("ФормаВводаПароля")
		И Контекст.ФормаВводаПароля.ЗавершениеРаботыПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	Сертификат = АсинхронныйЦиклТекущийЭлементДанных(Контекст);
	Если Результат = Истина Тогда
		Контекст.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Добавить(Сертификат);
		Контекст.СертификатыСУстановленнымиПаролями.Добавить(Сертификат)
	КонецЕсли;
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура ПослеЗапросаПаролейСертификатов(Результат, Контекст) Экспорт
	
	ВыполнитьКлиентскуюДиагностику(Контекст.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ОпределитьНаличиеКорневогоСертификатаГУЦ(Контекст)
	
	ПараметрыВыполнения = Контекст.ПараметрыВыполнения;
	НаличиеКорневогоСертификатаГУЦСервер = ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер;
	Если ПараметрыВыполнения.ЕстьКриптографияНаКлиенте И ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте
		И НаличиеКорневогоСертификатаГУЦСервер.Сертификаты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ИнициализацияСертификатаПослеСозданияМенеджераКриптографии",
			ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
	Иначе
		ПослеПоискаСертификата(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияСертификатаПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
		Результат.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилищаСертификатовКриптографии.КорневыеСертификаты);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияХранилищаСертификатов(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ХранилищеСертификатовКриптографии") Тогда
		Контекст.Вставить("ХранилищеСертификатов", Результат);
		ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеОпределенияНаличияКорневыхСертификатовГУЦ", ЭтотОбъект, Контекст);
		Сертификаты = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер.Сертификаты;
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("НайтиСертификатПоОтпечатку", ЭтотОбъект, Контекст));
		АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоОтпечатку(Результат, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПоискаСертификата", ЭтотОбъект, Контекст);
	Контекст.ХранилищеСертификатов.НачатьПоискПоОтпечатку(Оповещение, АсинхронныйЦиклТекущийЭлементДанных(Контекст).Отпечаток);
	
КонецПроцедуры

Процедура ПослеПоискаСертификата(Результат, Контекст) Экспорт
	
	РезультатКриптография = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
	ОписаниеСертификата = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(АсинхронныйЦиклТекущийЭлементДанных(Контекст));
	Если ОписаниеСертификата <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("СертификатКриптографии") Тогда
			ОписаниеСертификата.Результат = Истина;
		Иначе
			Если ТипЗнч(Результат) = Тип("Строка") Тогда
				ШаблонОшибки = НСтр("ru = 'Ошибка при проверке наличия корневого сертификата ГУЦ: %1'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонОшибки, Результат));
			ИначеЕсли Контекст.ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте = Истина Тогда
				ОписаниеСертификата.Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦКлиент.Сертификаты.Добавить(ОписаниеСертификата);
	КонецЕсли;
	
	Если Контекст.Свойство("ИмяВременногоКаталога") Тогда
		УдаляемыйФайл = Контекст.ИмяВременногоКаталога;
	ИначеЕсли Контекст.Свойство("ИмяВременногоФайла") Тогда
		УдаляемыйФайл = Контекст.ИмяВременногоФайла;
	КонецЕсли;
	
	Если УдаляемыйФайл <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияФайлов", ЭтотОбъект, Контекст, "ПриОшибкеУдаленияФайлов", ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, УдаляемыйФайл);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияКорневыхСертификатовГУЦ(Результат, Контекст) Экспорт
	
	РезультатКриптография = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		
	ОбменСКонтрагентамиДиагностикаКлиентСервер.ЗаполнитьРезультатПроверкиКорневыхСертификатовГУЦ(РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦКлиент);
	ОпределитьНаличиеУстановленныхПрограмм(Контекст);
	
КонецПроцедуры

Процедура ПослеУдаленияФайлов(Контекст) Экспорт
	
	ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	
КонецПроцедуры

Процедура ПриОшибкеУдаленияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст) 
	
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура ОпределитьНаличиеУстановленныхПрограмм(Контекст)
	
	РезультатДиагностикиКриптографии = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография;
	Если РезультатДиагностикиКриптографии.ИспользоватьЭлектроннуюПодписьВМоделиСервиса И Не РезультатДиагностикиКриптографии.ЕстьНеоблачныеСертификаты Тогда
		РезультатПроверки = Новый Массив;
		ОписаниеПрограммы = Новый Структура;
		ОписаниеПрограммы.Вставить("ТипПрограммы", 0);
		ОписаниеПрограммы.Вставить("РезультатПроверкиНаКлиенте", "");
		ОписаниеПрограммы.Вставить("РезультатПроверкиНаСервере", НСтр("ru = 'Не установлена на сервере'"));
		РезультатПроверки.Добавить(ОписаниеПрограммы);
		ПослеПоискаУстановленныхПрограмм(РезультатПроверки, Контекст);
	Иначе 
		Оповещение = Новый ОписаниеОповещения("ПослеПоискаУстановленныхПрограмм", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(Оповещение, Новый Массив, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПоискаУстановленныхПрограмм(Результат, Контекст) Экспорт
	
	УстановленаНаКлиенте = Ложь;
	УстановленаНаСервере = Ложь;
	Для каждого ОписаниеПрограммы Из Результат Цикл
		Если ОписаниеПрограммы.ТипПрограммы <> 1 Тогда
			УстановленаНаКлиенте = УстановленаНаКлиенте Или Не ЗначениеЗаполнено(ОписаниеПрограммы.РезультатПроверкиНаКлиенте);
			УстановленаНаСервере = УстановленаНаСервере Или Не ЗначениеЗаполнено(ОписаниеПрограммы.РезультатПроверкиНаСервере);
		КонецЕсли;
	КонецЦикла;
	РезультатыКриптография = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты;
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаКлиенте Тогда
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Результат = УстановленаНаКлиенте;
	КонецЕсли;
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаСервере Тогда
		РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Результат = УстановленаНаСервере;
	КонецЕсли;
	
	РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Краткая = НСтр("ru = 'Установите программу криптографии'");
	РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Подробная =
	НСтр("ru = 'Установите программу криптографии.
	|Инструкция:
	|https://its.1c.ru/db/content/metod81/src/appsolutionselffinanced/signature/i8105832.htm
	|https://its.1c.ru/db/content/metod81/src/appsolutionselffinanced/signature/i8105834.htm'");

	РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Рекомендация.Краткая =
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Краткая;
	РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Рекомендация.Подробная =
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Подробная;
	
	ПослеОпределенияНаличияУстановленныхПрограмм(Контекст);
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияУстановленныхПрограмм(Контекст) 
	
	ПроверкиСертификатов(Контекст);
	
КонецПроцедуры

Процедура ПроверкиСертификатов(Контекст)
	
	ОценкаПроизводительностиКлиент.ЗафиксироватьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте,
		1, "ПередВыполнениемПроверокСертификатов");
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверкиСертификатовПослеЦикла", ЭтотОбъект, Контекст);
	Сертификаты = Контекст.ПараметрыВыполнения.СертификатыДляПроверки;
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ПроверитьСертификат", ЭтотОбъект));
	
	АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПроверитьСертификат(Сертификат, Контекст) Экспорт
	
	ПараметрыПроверкиСертификата = Новый Структура;
	ПараметрыПроверкиСертификата.Вставить("ПараметрыВыполнения", Контекст);
	ПараметрыПроверкиСертификата.Вставить("БезПодтверждения", Истина);
	ПараметрыПроверкиСертификата.Вставить("ПроверкаПриВыборе", Истина);
	ПараметрыПроверкиСертификата.Вставить("Результат", Неопределено);
	ПараметрыПроверкиСертификата.Вставить("ОбработкаРезультата", Новый ОписаниеОповещения("ПослеПроверкиСертификата", ЭтотОбъект, ПараметрыПроверкиСертификата));
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияФормыПроверкиСертификата", ЭтотОбъект, ПараметрыПроверкиСертификата);
	
	ПараметрыПроверкиСертификата.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	Если Контекст.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Найти(Сертификат) <> Неопределено Тогда
		ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ПараметрыПроверкиСертификата);
	Иначе 
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Результат <> Неопределено Тогда
		ДополнительныеПараметры.Результат.ПроверкиПройдены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыПроверкиСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатДиагностики = ДополнительныеПараметры.ПараметрыВыполнения.РезультатДиагностики;
	
	РезультатПроверкиСертификата = Новый Структура;
	РезультатПроверкиСертификата.Вставить("ОбщийРезультатПроверок", Неопределено);
	РезультатПроверкиСертификата.Вставить("ПроверкиНаКлиенте", Неопределено);
	РезультатПроверкиСертификата.Вставить("ПроверкиНаСервере", Неопределено);
	РезультатПроверкиСертификата.Вставить("Рекомендации", Новый Структура);
	
	Сертификат = АсинхронныйЦиклТекущийЭлементДанных(ДополнительныеПараметры.ПараметрыВыполнения);
	
	Если ДополнительныеПараметры.Результат = Неопределено Тогда
		РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов.Сертификаты.Вставить(Сертификат, РезультатПроверкиСертификата);
	Иначе
		ДополнительныеПараметры.Результат.ПроверкиПройдены = Истина;
		
		ОбщийРезультатПроверок = ОбъединитьРезультатыПроверокСертификатов(ДополнительныеПараметры.Результат);
		Если ДополнительныеПараметры.Результат.ПроверкиНаКлиенте = Неопределено Тогда
			ПроверкиНаКлиенте = Неопределено;
		Иначе 
			ПроверкиНаКлиенте = ДополнительныеПараметры.Результат.ПроверкиНаКлиенте;
		КонецЕсли;
		Если ДополнительныеПараметры.Результат.ПроверкиНаСервере = Неопределено Тогда
			ПроверкиНаСервере = Неопределено;
		Иначе 
			ПроверкиНаСервере = ДополнительныеПараметры.Результат.ПроверкиНаСервере;
		КонецЕсли;
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(ОбщийРезультатПроверок);
		Если Не ВсеПроверкиУспешны Тогда
			РезультатПроверкиСертификата.ОбщийРезультатПроверок = ОбщийРезультатПроверок;
			РезультатПроверкиСертификата.ПроверкиНаКлиенте      = ПроверкиНаКлиенте;
			РезультатПроверкиСертификата.ПроверкиНаСервере      = ПроверкиНаСервере;
			РезультатПроверкиСертификата.Рекомендации           = РекомендацииПроверокСертификата();
			РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов.Сертификаты.Вставить(Сертификат, РезультатПроверкиСертификата);
		КонецЕсли;
	КонецЕсли;
	
	АсинхронныйЦиклВыполнитьСледующийОбработчик(ДополнительныеПараметры, ДополнительныеПараметры.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПроверкиСертификатовПослеЦикла(Результат, Контекст) Экспорт
	
	Если (Результат.ЕстьКриптографияНаКлиенте Или Результат.ЕстьКриптографияНаСервере) И Результат.ЕстьМенеджерКриптографииНаКлиенте Тогда
		ПроверкиСертификатов = Результат.РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов;
		ПроверкиСертификатов.Результат = ПроверкиСертификатов.Сертификаты.Количество() = 0;
	КонецЕсли;
	КоличествоДанных = Контекст.ПараметрыВыполнения.СертификатыДляПроверки.Количество();
	ОценкаПроизводительностиКлиент.ЗафиксироватьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте, КоличествоДанных, "ПослеВыполненияПроверокСертификатов");
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Неопределено, Контекст);
	
КонецПроцедуры

Функция ОбъединитьРезультатыПроверокСертификатов(РезультатыПроверок) Экспорт
	
	ПараметрыКриптографии = ПараметрыКриптографии();
	
	Если ПараметрыКриптографии.ЕстьКриптографияНаКлиенте И Не ПараметрыКриптографии.ЕстьКриптографияНаСервере Тогда
		Возврат РезультатыПроверок.ПроверкиНаКлиенте;
	ИначеЕсли ПараметрыКриптографии.ЕстьКриптографияНаСервере И Не ПараметрыКриптографии.ЕстьКриптографияНаКлиенте Тогда
		Возврат РезультатыПроверок.ПроверкиНаСервере;
	Иначе 
		Результат = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатыПроверок.ПроверкиНаКлиенте);
		ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере();
		СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
		Для каждого КлючИЗначение Из Результат Цикл
			Если КлючИЗначение.Ключ = "ЗаконныйСертификат" Тогда
				Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ] Тогда
					Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
				Иначе 
					Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
				КонецЕсли;
			ИначеЕсли КлючИЗначение.Ключ = "ДанныеСертификата" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "НаличиеПрограммы" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "НаличиеСертификата" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Подписание" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "ПроверкаПодписи" Тогда
				ОбъединитьРезультатыПроверокПоФлагуПроверять(КлючИЗначение, ПроверятьЭлектронныеПодписиНаСервере, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Расшифровка" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Шифрование" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат)
	
	Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]
		И РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ] Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	Иначе 
		Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ] Тогда
			ПроверкиСОшибкой = РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ];
		Иначе 
			ПроверкиСОшибкой = РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ];
		КонецЕсли;
		Результат.Вставить(КлючИЗначение.Ключ, ПроверкиСОшибкой);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат)
	
	Если СоздаватьЭлектронныеПодписиНаСервере Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
	Иначе 
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	КонецЕсли;

КонецПроцедуры

Процедура ОбъединитьРезультатыПроверокПоФлагуПроверять(КлючИЗначение, ПроверятьЭлектронныеПодписиНаСервере, РезультатыПроверок, Результат)
	
	Если ПроверятьЭлектронныеПодписиНаСервере Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
	Иначе 
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	КонецЕсли;

КонецПроцедуры

Функция ВсеПроверкиСертификатаВыполненыУспешно(РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ПроверкиНаКлиенте = Неопределено И РезультатПроверки.ПроверкиНаСервере = Неопределено Тогда
		ВсеПроверкиУспешны = Ложь;
	ИначеЕсли РезультатПроверки.ПроверкиНаКлиенте = Неопределено Тогда
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаСервере);
	ИначеЕсли РезультатПроверки.ПроверкиНаСервере = Неопределено Тогда
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаКлиенте);
	Иначе
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаКлиенте)
		И ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаСервере);
	КонецЕсли;
	
	Возврат ВсеПроверкиУспешны;
	
КонецФункции

Функция ВидПроверкиСертификатаВыполненУспешно(Проверки)
	
	Для каждого КлючИЗначение Из Проверки Цикл
		Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка") И КлючИЗначение.Значение <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РекомендацииПроверокСертификата() 
	
	Рекомендации = Новый Структура;
	Рекомендации.Вставить("НаличиеСертификата", НСтр("ru = 'Установите сертификат в личный список(личное хранилище на компьютере) и свяжите его с закрытым ключом.'"));
	Рекомендации.Вставить("ДанныеСертификата",  НСтр("ru = 'Проверьте, не закончился ли срок действия сертификата, нет ли сертификата в списке отозванных.'"));
	Рекомендации.Вставить("НаличиеПрограммы",   НСтр("ru = 'Установите программу криптографии, указанную в сертификате.'"));
	Рекомендации.Вставить("Подписание",         НСтр("ru = 'Проверьте правильность введенного пароля'"));
	Рекомендации.Вставить("ПроверкаПодписи",    НСтр("ru = ''"));
	Рекомендации.Вставить("Шифрование",         НСтр("ru = ''"));
	Рекомендации.Вставить("Расшифровка",        НСтр("ru = 'Проверьте правильность введенного пароля'"));
	
	Возврат Рекомендации;
	
КонецФункции 

Процедура ПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Если РасширениеУстановлено = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПовторнойУстановкиРасширения", ЭтотОбъект, ПараметрыВыполнения);
		ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Оповещение);
	Иначе 
		ПослеПовторнойУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеПовторнойУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Если РасширениеУстановлено = Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ПараметрыВыполнения);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
	Иначе 
		Если РасширениеУстановлено = Ложь Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось подключить расширение работы с криптографией'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСозданияМенеджераКриптографии(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ПараметрыВыполнения);
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
	Иначе 
		ПослеПолученияОтпечатковСертификатов(Неопределено, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковСертификатов(Результат, ПараметрыВыполнения) Экспорт
	
	МассивОтпечатковСертификатовКлиент = Новый Массив;
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		Для каждого КлючИЗначение Из Результат Цикл
			ПараметрыВыполнения.МассивОтпечатковСертификатовКлиент.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестАутентификации

Процедура ТестАутентификации(Результат, Контекст) Экспорт
	
	Если Не ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации()) Тогда
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ПроверитьСвязьЭДО", ЭтотОбъект));
	УчетныеЗаписи = Новый Массив;
	Для каждого ДанныеУчетнойЗаписи Из Контекст.ПараметрыВыполнения.РезультатДиагностики.ДанныеУчетныхЗаписей Цикл
		Если Не ДанныеУчетнойЗаписи.Значение.ЭтоПрямойОбмен Тогда
			УчетныеЗаписи.Добавить(ДанныеУчетнойЗаписи.Ключ);
		КонецЕсли;
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ПослеТестаАутентификации", ЭтотОбъект); 
	АсинхронныйЦиклНачать(Оповещение, УчетныеЗаписи, Обработчики, Контекст);
	
КонецПроцедуры

Процедура ПослеТестаАутентификации(Контекст, ДополнительныеПараметры) Экспорт
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.СкрыватьРезультатТестаАутентификации(Контекст.ПараметрыВыполнения.РезультатДиагностики) Тогда
		Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Удалить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
	Иначе 
		РезультатДиагностикиТестАутентификации = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
			Контекст.ПараметрыВыполнения.РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
		РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.Результат =
			РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.УчетныеЗаписи.Количество() = 0;
	КонецЕсли;
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура ПроверитьСвязьЭДО(Результат, Контекст) Экспорт
	
	ИдентификаторЭДО = АсинхронныйЦиклТекущийЭлементДанных(Контекст);
	// Получаем доступные сертификаты без учета пользователя, поскольку тест профиля и его администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		Контекст.ПараметрыВыполнения.МассивОтпечатковСертификатовКлиент, ИдентификаторЭДО,, Ложь);
	
	КоличествоСертификатовСОтказомОтВводаПароля = 0;
	МассивСертификатов = Новый Массив;
	ЕстьСвойство = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		СвойствоСертификата = Неопределено;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			И КлючЗначение.Значение.Свойство("ПарольПолучен", ЕстьСвойство) И ЕстьСвойство = Истина
			И КлючЗначение.Значение.Свойство("ПарольПользователя", СвойствоСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(КлючЗначение.Ключ, СвойствоСертификата);
		КонецЕсли;
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
		Если Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			КоличествоСертификатовСОтказомОтВводаПароля = КоличествоСертификатовСОтказомОтВводаПароля + 1;
		КонецЕсли;
	КонецЦикла;
	
	КонтекстТестаАутентификации = Новый Структура;
	КонтекстТестаАутентификации.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	КонтекстТестаАутентификации.Вставить("Контекст", Контекст);
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		РезультатыДиагностикиКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
			Контекст.ПараметрыВыполнения.РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()).Результаты;
		ЕстьПрограммаКриптографии = РезультатыДиагностикиКриптографии.НаличиеПрограммыКриптографииКлиент.Результат = Истина
			Или РезультатыДиагностикиКриптографии.НаличиеПрограммыКриптографииСервер.Результат = Истина;
			
		Если Не ЕстьПрограммаКриптографии Тогда
			ТекстОшибки = НСтр("ru = 'Отсутствует программа криптографии. Тест не выполнен.'");
		Иначе 
			ТекстОшибки = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.
			|Чтобы добавить сертификат, перейдите на вкладку ""Сертификаты"" учетной записи ЭДО и нажмите кнопку ""Добавить""'");
		КонецЕсли;
		ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, ТекстОшибки);
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	Если КоличествоСертификатовСОтказомОтВводаПароля = МассивСертификатов.Количество() Тогда
		Для каждого Сертификат Из МассивСертификатов Цикл
			ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, "", Сертификат, Ложь);
		КонецЦикла;
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеРасшифровкиМаркеров", ЭтотОбъект, Контекст);
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("РасшифроватьМаркерТестАутентификации", ЭтотОбъект));
	АсинхронныйЦиклНачать(Оповещение, МассивСертификатов, Обработчики, КонтекстТестаАутентификации);
	
КонецПроцедуры

Процедура ПослеРасшифровкиМаркеров(Результат, Контекст) Экспорт
	
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура РасшифроватьМаркерТестАутентификации(Сертификат, КонтекстТестаАутентификации) Экспорт
	
	ПараметрыВыполненияДиагностики = КонтекстТестаАутентификации.Контекст.ПараметрыВыполнения;
	Если ПараметрыВыполненияДиагностики.СертификатыСУстановленнымиПаролями.Найти(Сертификат) = Неопределено Тогда
		ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, "", Сертификат, Ложь);
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, КонтекстТестаАутентификации);
		Возврат;
	КонецЕсли;
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, КонтекстТестаАутентификации);
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация,
		ПараметрыВыполненияДиагностики.РезультатДиагностики.ДанныеУчетныхЗаписей[КонтекстТестаАутентификации.ИдентификаторЭДО].НаименованиеУчетнойЗаписи);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",           "");
	ОписаниеДанных.Вставить("Операция",                  Операция);
	ОписаниеДанных.Вставить("ОтборСертификатов",         ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат));
	ОписаниеДанных.Вставить("ИзменятьНабор",             Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",       Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",         Истина);
	ОписаниеДанных.Вставить("Данные",                    ОбработкаПолученияМаркера);
	ОписаниеДанных.Вставить("БезПодтверждения",          Истина);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение",      Истина);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, КонтекстТестаАутентификации);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

Процедура ПолучениеМаркераДляВыбранногоСертификата(Знач РезультатВыполнения, КонтекстТестаАутентификации) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, КонтекстТестаАутентификации);
		Возврат;
	КонецЕсли;
	
	КонтекстТестаАутентификации.Вставить("СертификатПодписи", РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	КонтекстТестаАутентификации.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(КонтекстТестаАутентификации);
	
КонецПроцедуры

Процедура ПолучениеМаркераДляВыбранногоСертификатаПродолжить(КонтекстТестаАутентификации)
	
	ИдентификаторЭДО = КонтекстТестаАутентификации.ИдентификаторЭДО;
	ДанныеУчетнойЗаписи = КонтекстТестаАутентификации.Контекст.ПараметрыВыполнения.РезультатДиагностики.ДанныеУчетныхЗаписей[ИдентификаторЭДО];
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        КонтекстТестаАутентификации.СертификатПодписи);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           ДанныеУчетнойЗаписи.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ИдентификаторЭДО);
	
	ДополнительныеПараметрыЗапросаМаркера = ОбменСКонтрагентамиСлужебныйКлиент.НовыеПараметрыПолученияЗашифрованногоМаркера();
	ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена = Ложь;
	ДополнительныеПараметрыЗапросаМаркера.КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ДополнительныеПараметрыЗапросаМаркера);
		
	КонтекстОперации = ДополнительныеПараметрыЗапросаМаркера.КонтекстОперации;
	Если ЗашифрованныеДанные = Неопределено Тогда
		Для каждого Ошибка Из КонтекстОперации.Диагностика.Ошибки Цикл
			ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, Ошибка.КраткоеПредставлениеОшибки,
				АсинхронныйЦиклТекущийЭлементДанных(КонтекстТестаАутентификации));
		КонецЦикла;
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, КонтекстТестаАутентификации);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметрыЗапросаМаркера.ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификатаАутентификация", ЭтотОбъект, КонтекстТестаАутентификации),
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = КонтекстТестаАутентификации.РезультатВыполнения;
	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	
	ЕстьОшибки = Ложь;
	Если ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		Результат = РезультатВыполнения.ОписаниеДанных;
	Иначе 
		ОписаниеОшибки = НСтр("ru = 'Не удалось пройти аутентификацию в сервисе оператора ЭДО.'");
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в журнале регистрации.'"));
		ЕстьОшибки = Истина; 
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, Результат);
	
КонецПроцедуры

Процедура ПолучениеМаркераДляВыбранногоСертификатаАутентификация(ПараметрыАутентификации, КонтекстТестаАутентификации) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, КонтекстТестаАутентификации);
		Возврат;
	КонецЕсли;
	
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(КонтекстТестаАутентификации);
	
КонецПроцедуры

Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, КонтекстТестаАутентификации) Экспорт
	
	ИдентификаторЭДО = КонтекстТестаАутентификации.ИдентификаторЭДО;
	ДанныеУчетнойЗаписи = КонтекстТестаАутентификации.Контекст.ПараметрыВыполнения.РезультатДиагностики.ДанныеУчетныхЗаписей[ИдентификаторЭДО];
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		РезультатДиагностикиТестАутентификации = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
				КонтекстТестаАутентификации.Контекст.ПараметрыВыполнения.РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
		Сертификат = АсинхронныйЦиклТекущийЭлементДанных(КонтекстТестаАутентификации);
		Если РезультатВыполнения.Успех = Истина Тогда
			Если ДанныеУчетнойЗаписи.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
				СверитьУчетныеДанныеСОператором(КонтекстТестаАутентификации,
					РезультатВыполнения.РасшифрованныеДанные, ИдентификаторЭДО, Сертификат);
			КонецЕсли;
		Иначе 
			ТекстОшибки = "";
			Если Не РезультатВыполнения.Свойство("ОписаниеОшибки", ТекстОшибки) Тогда
				ТекстОшибки = "";
			КонецЕсли;
			ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, ТекстОшибки,
				Сертификат, Не РезультатВыполнения.Отказ);
		КонецЕсли;
	КонецЕсли;
	
	АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, КонтекстТестаАутентификации);
	
КонецПроцедуры

Процедура СверитьУчетныеДанныеСОператором(КонтекстТестаАутентификации, РасшифрованныйМаркер, ИдентификаторЭДО, Сертификат)
	
	УчетныеДанныеОператора = ОбменСКонтрагентамиДиагностикаВызовСервера.УчетныеДанныеАбонентаТакском(РасшифрованныйМаркер);
	Если УчетныеДанныеОператора <> Неопределено Тогда
		Если УчетныеДанныеОператора.ИдентификаторОрганизации <> ИдентификаторЭДО Тогда
			ШаблонСообщения = НСтр("ru = 'Идентификатор организации ""%1"", привязанный к учетной записи, отличается от указанного.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетныеДанныеОператора.ИдентификаторОрганизации);
			ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, ТекстСообщения, Сертификат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуТестаАутентификации(КонтекстТестаАутентификации, Ошибка,
	Сертификат = Неопределено, ТестВыполнялся = Истина) 
	
	РезультатДиагностики = КонтекстТестаАутентификации.Контекст.ПараметрыВыполнения.РезультатДиагностики;
	РезультатДиагностикиТестАутентификации = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(
		РезультатДиагностики, ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
		
	ДанныеУчетнойЗаписи = РезультатДиагностики.ДанныеУчетныхЗаписей[КонтекстТестаАутентификации.ИдентификаторЭДО];
	РезультатТестаАутентификации = Новый Структура;
	РезультатТестаАутентификации.Вставить("Идентификатор",  КонтекстТестаАутентификации.ИдентификаторЭДО);
	РезультатТестаАутентификации.Вставить("УчетнаяЗапись",  ДанныеУчетнойЗаписи.НаименованиеУчетнойЗаписи);
	РезультатТестаАутентификации.Вставить("Сертификат",     Сертификат);
	РезультатТестаАутентификации.Вставить("Ошибка",         ?(Ошибка = "" И Не ТестВыполнялся, НСтр("ru = 'Проверка не выполнялась'"), Ошибка));
	РезультатТестаАутентификации.Вставить("ТестВыполнялся", ТестВыполнялся);
	
	РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.УчетныеЗаписи.Добавить(РезультатТестаАутентификации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиФормыОшибок

Процедура ОткрытьМастерДиагностики(КонтекстОперации, ПараметрыОбработкиОшибок) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	ВидыДиагностики = Новый Массив;
	ОбменСКонтрагентамиДиагностикаКлиентСервер.ОшибкиДиагностируются(Ошибки, ВидыДиагностики);
	Если ПараметрыОбработкиОшибок = Неопределено Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
	КонецЕсли;
	
	ПараметрыОбработкиОшибок.Ошибки = Ошибки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пояснение", КонтекстОперации.ЗаголовокОперации);
	ПараметрыФормы.Вставить("Ошибки", Ошибки);
	ПараметрыФормы.Вставить("ВозможенПовторДействия", ТипЗнч(ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия) = Тип("ОписаниеОповещения"));
	ПараметрыОбработкиОшибок.ПараметрыФормы = ПараметрыФормы;
	
	ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	
	Если ВидыДиагностики.Количество() = 1
		И ВидыДиагностики[0] = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами() Тогда
		// Мастер диагностики работы с файлами может быть открыт только из формы ошибок (когда ошибка уже произошла).
		// Поэтому, длину пути к каталогу временных файлов не проверяем заново, а сразу показываем ошибку.
		ПараметрыВыполнения.ДиагностикаРаботыСФайламиВРежимеОтображенияРезультата = Истина;
	КонецЕсли;
	ПараметрыВыполнения.ПараметрыФормы = ПараметрыФормы;
	ПараметрыВыполнения.ВидыДиагностики = ВидыДиагностики;
	ПараметрыВыполнения.ПараметрыОткрытияМастера = ПараметрыОбработкиОшибок;
	
	Сертификаты = Неопределено; 
	Если ПараметрыОбработкиОшибок.Отбор.Свойство("Сертификат", Сертификаты)
		И ЗначениеЗаполнено(Сертификаты) Тогда
		ПараметрыВыполнения.Отбор.Вставить("Сертификат", Сертификаты);
	Иначе 
		УчетныеЗаписи = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "УчетнаяЗапись");
		ПараметрыВыполнения.Отбор.Вставить("УчетнаяЗапись", УчетныеЗаписи);
	КонецЕсли;
	
	Сертификаты = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "Сертификат");
	Для каждого Сертификат Из Сертификаты Цикл
		Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
			ПараметрыВыполнения.ДополнительныеСертификатыДляПроверки.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьДиагностику(ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияНовогоЭД(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	УчетныеДокументы = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "СсылкаНаОбъект");
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		СоответствиеОшибокДанным.Вставить(Ошибка.СсылкаНаОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();

	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Создать'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.СоздатьЭлектронныйДокумент";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Истина;
	
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = СоответствиеОшибокДанным;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", УчетныеДокументы);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьФормуАннулированияСтарогоЭДИСозданияНового(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	УчетныеДокументы = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(КонтекстОперации.Диагностика.Ошибки, "СсылкаНаОбъект");
	
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из КонтекстОперации.Диагностика.Ошибки Цикл
		СоответствиеОшибокДанным.Вставить(Ошибка.СсылкаНаОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Аннулировать старый и создать новый'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.АннулироватьСтарыйЭДИСоздатьНовый";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Ложь;
	
	ДополнительныеПараметрыОбработчиков = Новый Структура;
	ДополнительныеПараметрыОбработчиков.Вставить("СоответствиеОшибокДанным", СоответствиеОшибокДанным);
	ДополнительныеПараметрыОбработчиков.Вставить("КонтекстОперации", КонтекстОперации);
	
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = ДополнительныеПараметрыОбработчиков;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", УчетныеДокументы);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьОшибкиМаршрутовПодписания(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	Маршруты = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "СсылкаНаОбъект");
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Если Ошибки.Количество() > 0 Тогда
		ПараметрыВидаОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ПараметрыВидаОшибки(Ошибки[0].ВидОшибки);
		ПараметрыИсправленияОшибок.Заголовок = ПараметрыВидаОшибки.ЗаголовокПроблемы;
	КонецЕсли;
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Посмотреть маршрут'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьЭлементТаблицы";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Данные", Маршруты);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьОшибкиИсходящегоЭДОтветногоТитула(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	
	ПакетыЭД = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "СсылкаНаОбъект");
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		СоответствиеОшибокДанным.Вставить(Ошибка.СсылкаНаОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Добавить пакет в исключения'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ДобавитьПакетВИсключения";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Удалить учетную запись и связанные данные'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.УдалитьУчетнуюЗаписьИСвязанныеДанные";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Если Ошибки.Количество() > 0 Тогда
		ПараметрыВидаОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ПараметрыВидаОшибки(Ошибки[0].ВидОшибки);
		ПараметрыИсправленияОшибок.Заголовок = ПараметрыВидаОшибки.ЗаголовокПроблемы;
	КонецЕсли;
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Истина;
	
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = СоответствиеОшибокДанным;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ПакетыЭД);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ПоказатьДействияПриНаличииНеполученныхДокументов(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Изменить дату запроса данных в учетной записи ЭДО'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ИзменитьДатуЗапросаДанных";
	Команда.Подсказка = НСтр("ru = 'Если дата получения документов не сдвигалась вручную, рекомендуется выбрать этот пункт, чтобы получить документы.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Игнорировать предупреждение'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ИгнорироватьПредупреждениеОНеполученныхДокументах";
	Команда.Подсказка = НСтр("ru = 'Выберите этот пункт, если дата получения документов менялась вручную осознанно.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстОперации, ДополнительныеПараметры, ПараметрыИсправленияОшибок.Команды);
	
КонецПроцедуры

Процедура ПоказатьДействияПриНаличииНеполученныхПриглашений(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Изменить дату запроса данных в учетной записи ЭДО'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ИзменитьДатуЗапросаДанных";
	Команда.Подсказка = НСтр("ru = 'Если дата получения приглашений не сдвигалась вручную, рекомендуется выбрать этот пункт, чтобы получить приглашения.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Игнорировать предупреждение'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ИгнорироватьПредупреждениеОНеполученныхДокументах";
	Команда.Подсказка = НСтр("ru = 'Выберите этот пункт, если дата получения приглашений менялась вручную осознанно.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстОперации, ДополнительныеПараметры, ПараметрыИсправленияОшибок.Команды);
	
КонецПроцедуры

Процедура ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстОперации, ДополнительныеПараметры, Команды)
	
	УчетныеЗаписи = Новый Массив;
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из КонтекстОперации.Диагностика.Ошибки Цикл
		УчетныеЗаписи.Добавить(Ошибка.УчетнаяЗапись);
		СоответствиеОшибокДанным.Вставить(Ошибка.УчетнаяЗапись, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	
	Для каждого Команда Из Команды Цикл
		ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	КонецЦикла;
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Истина;
	
	ДополнительныеПараметрыОбработчиков = Новый Структура;
	ДополнительныеПараметрыОбработчиков.Вставить("КонтекстОперации", КонтекстОперации);
	ДополнительныеПараметрыОбработчиков.Вставить("СоответствиеОшибокДанным", СоответствиеОшибокДанным);
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = ДополнительныеПараметрыОбработчиков;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", УчетныеЗаписи);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ПараметрыПредставленияДанных = Новый Структура;
	ПараметрыПредставленияДанных.Вставить("ОбработчикПолученияПредставлений", "ОбменСКонтрагентамиВнутренний.ПолучитьДанныеУчетныхЗаписей");
	Параметры.Вставить("ПараметрыПредставленияДанных", ПараметрыПредставленияДанных);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьПомощникРегистрацииСертификатов(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	ДополнительныеДанные = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ДополнительныеДанные");
	Если ДополнительныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРегистрации = ДополнительныеДанные[0];
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПомощникаРегистрацииСертификатов(ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ВключитьИспользованиеОбменаЭД(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	ОбменСКонтрагентамиДиагностикаВызовСервера.ВключитьИспользованиеОбменаЭД();
	
	ВидыОшибок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиНеВключеноИспользованиеОбменаЭД());
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ВидыОшибок);
	
КонецПроцедуры

Процедура ОткрытьСертификаты(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	ДополнительныеДанные = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ДополнительныеДанные");
	
	Сертификаты = Новый Массив;
	Для каждого Элемент Из ДополнительныеДанные Цикл
		Если Сертификаты.Найти(Элемент.Сертификат) = Неопределено Тогда
			Сертификаты.Добавить(Элемент.Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	Если Ошибки.Количество() > 0 Тогда
		ПараметрыВидаОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ПараметрыВидаОшибки(Ошибки[0].ВидОшибки);
		ПараметрыИсправленияОшибок.Заголовок = ПараметрыВидаОшибки.ЗаголовокПроблемы;
	КонецЕсли;
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Посмотреть сертификат'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьЭлементТаблицы";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Данные", Сертификаты);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьПриглашения(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	ДополнительныеДанные = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ДополнительныеДанные");
	
	Приглашения = Новый Массив;
	Группировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Группировать", Ложь);
	
	Для каждого Данные Из ДополнительныеДанные Цикл
		Если Группировать Тогда
			Если Приглашения.Найти(Данные.Приглашение) = Неопределено Тогда
				Приглашения.Добавить(Данные.Приглашение);
			КонецЕсли;
		Иначе 
			Приглашения.Добавить(Данные.Приглашение);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		Если СоответствиеОшибокДанным[Ошибка.ДополнительныеДанные.Приглашение] = Неопределено Тогда
			СоответствиеОшибокДанным.Вставить(Ошибка.ДополнительныеДанные.Приглашение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
		Иначе 
			СоответствиеОшибокДанным[Ошибка.ДополнительныеДанные.Приглашение].Добавить(Ошибка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	Если Ошибки.Количество() > 0 Тогда
		ПараметрыВидаОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ПараметрыВидаОшибки(Ошибки[0].ВидОшибки);
		ПараметрыИсправленияОшибок.Заголовок = ПараметрыВидаОшибки.ЗаголовокПроблемы;
	КонецЕсли;
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть приглашение'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьПриглашение";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.ОбработчикСобытияВыбор = Команда;
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = СоответствиеОшибокДанным;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Данные", Приглашения);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ПараметрыПредставленияДанных = Новый Структура;
	ПараметрыПредставленияДанных.Вставить("ОбработчикПолученияПредставлений",
		"ОбменСКонтрагентамиВнутренний.ДанныеПриглашений");
	Параметры.Вставить("ПараметрыПредставленияДанных", ПараметрыПредставленияДанных);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ОткрытьНастройкиВнутреннегоЭДО(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	Ошибки = КонтекстОперации.Диагностика.Ошибки;
	ДополнительныеДанные = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ДополнительныеДанные");
	
	Организации = Новый Массив;
	
	Для каждого Данные Из ДополнительныеДанные Цикл
		Если Организации.Найти(Данные.Организация) = Неопределено Тогда
			Организации.Добавить(Данные.Организация);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		Если СоответствиеОшибокДанным[Ошибка.ДополнительныеДанные] = Неопределено Тогда
			СоответствиеОшибокДанным.Вставить(Ошибка.ДополнительныеДанные, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
		Иначе 
			СоответствиеОшибокДанным[Ошибка.ДополнительныеДанные].Добавить(Ошибка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИсправленияОшибок = НовыеПараметрыИсправленияОшибок();
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	Если Ошибки.Количество() > 0 Тогда
		ПараметрыВидаОшибки = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ПараметрыВидаОшибки(Ошибки[0].ВидОшибки);
		ПараметрыИсправленияОшибок.Заголовок = ПараметрыВидаОшибки.ЗаголовокПроблемы;
	КонецЕсли;
	
	Команда = НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть настройку'");
	Команда.Обработчик = "ОбменСКонтрагентамиДиагностикаКлиент.ОткрытьНастройкуВнутреннегоЭДО";
	
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.ОбработчикСобытияВыбор = Команда;
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = СоответствиеОшибокДанным;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Данные", Организации);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ИсправитьОшибки(Параметры);
	
КонецПроцедуры

Процедура ВыполнитьДиагностикуКриптографии(КонтекстОперации, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = ОбменСКонтрагентамиДиагностикаКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	ПараметрыВыполнения.ВидыДиагностики.Добавить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
	ВыполнитьДиагностику(ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИсправленияОшибок 

Процедура ДобавитьПакетВИсключения(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = ОбменСКонтрагентамиДиагностикаВызовСервера.НачатьДобавлениеПакетовВИсключения(Результат);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	
	Описание = Новый ОписаниеОповещения("ПослеДобавленияПакетовВИсключения", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеДобавленияПакетовВИсключения(Результат, СоответствиеОшибокДанным) Экспорт
	
	Если Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'При добавлении пакетов ЭД в исключения произошла ошибка: %1'"), Результат.КраткоеПредставлениеОшибки));
	Иначе 
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ПолучитьИсправленныеОшибки(РезультатПроцедуры, СоответствиеОшибокДанным));
		Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", РезультатПроцедуры);
		Оповестить("ОбновитьТекущиеДелаЭДО");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьУчетнуюЗаписьИСвязанныеДанные(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = ОбменСКонтрагентамиДиагностикаВызовСервера.НачатьУдалениеУчетныхЗаписей(Результат);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	
	Описание = Новый ОписаниеОповещения("ПослеУдаленияУчетныхЗаписей", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеУдаленияУчетныхЗаписей(Результат, СоответствиеОшибокДанным) Экспорт
	
	Если Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При удалении учетных записей произошла ошибка'") + Результат.КраткоеПредставлениеОшибки);
	Иначе 
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Для каждого УчетнаяЗапись Из РезультатПроцедуры.ОшибкиУдаления Цикл
			ШаблонСообщения = НСтр("ru = 'Ошибка при удалении учетной записи с идентификатором %1'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщения, УчетнаяЗапись));
		КонецЦикла;
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ПолучитьИсправленныеОшибки(РезультатПроцедуры.ОбработанныеПакетыЭД, СоответствиеОшибокДанным));
		Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", РезультатПроцедуры.ОбработанныеПакетыЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлектронныйДокумент(Результат, СоответствиеОшибокДанным) Экспорт
	
	Для каждого Документ Из Результат Цикл
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД(Документ);
	КонецЦикла;
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ПолучитьИсправленныеОшибки(Результат, СоответствиеОшибокДанным));
	Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", Результат);
	
КонецПроцедуры

Процедура АннулироватьСтарыйЭДИСоздатьНовый(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДополнительныхДанных = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(ДополнительныеПараметры.КонтекстОперации.Диагностика.Ошибки,
		"ДополнительныеДанные", Новый Структура("СсылкаНаОбъект", Результат[0]));
	
	Если МассивДополнительныхДанных.Количество() Тогда
		ДополнительныеДанные = МассивДополнительныхДанных[0];
		Контекст = Новый Структура;
		Контекст.Вставить("Документ", Результат[0]);
		Контекст.Вставить("СоответствиеОшибокДанным", ДополнительныеПараметры.СоответствиеОшибокДанным);
		ОписаниеОповещения = Новый ОписаниеОповещения("АннулироватьСтарыйЭДИСоздатьНовыйПродолжить", ЭтотОбъект, Контекст);
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(ДополнительныеДанные.ФайлЭлектронногоДокумента, Ложь,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура АннулироватьСтарыйЭДИСоздатьНовыйПродолжить(Результат, Контекст) Экспорт
	
	Если Результат Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД(Контекст.Документ);
		ТекстСообщения = НСтр("ru = 'Контрагенту отправлено предложение об аннулировании неактуальной версии документа.
									|Документооборот будет аннулирован после получения ответа от контрагента.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предложение об аннулировании не было отправлено.
		|Отправить его можно из старой версии документа (команда ""ЭДО -> Открыть электронные документы"")'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ВидыОшибок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиОбновлениеВерсииЭДТребуетсяАннулирование());
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ВидыОшибок);
	ИсправленныеОшибки = ПолучитьИсправленныеОшибки(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.Документ), Контекст.СоответствиеОшибокДанным);
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
	
КонецПроцедуры

Процедура ОткрытьЭлементТаблицы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для каждого СтрокаРезультата Из Результат Цикл
			ПоказатьЗначение(, СтрокаРезультата);
			Прервать;
		КонецЦикла;
	Иначе 
		ПоказатьЗначение(, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДатуЗапросаДанных(Результат, ДополнительныеПараметры) Экспорт
	
	ИсправленныеОшибки = Неопределено;
	ОбменСКонтрагентамиДиагностикаВызовСервера.ИзменитьДатуЗапросаДанных(Результат,
		ДополнительныеПараметры.КонтекстОперации, ДополнительныеПараметры.СоответствиеОшибокДанным,
		ИсправленныеОшибки);
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
	Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", Результат);
	
КонецПроцедуры

Процедура ИгнорироватьПредупреждениеОНеполученныхДокументах(Результат, ДополнительныеПараметры) Экспорт
	
	ИсправленныеОшибки = Неопределено;
	ОбменСКонтрагентамиДиагностикаВызовСервера.ИгнорироватьПредупреждениеОНеполученныхДокументах(Результат,
		ДополнительныеПараметры.КонтекстОперации, ДополнительныеПараметры.СоответствиеОшибокДанным,
		ИсправленныеОшибки);
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
	Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", Результат);
	
КонецПроцедуры

Функция НовыеПараметрыИсправленияОшибок() 
	
	ПараметрыИсправленияОшибок = Новый Структура;
	ПараметрыИсправленияОшибок.Вставить("Заголовок",                           "");
	ПараметрыИсправленияОшибок.Вставить("Команды",                             Новый Массив);
	ПараметрыИсправленияОшибок.Вставить("МножественныйВыбор",                  Ложь);
	ПараметрыИсправленияОшибок.Вставить("СкрытьКнопкуПросмотреть",             Ложь);
	ПараметрыИсправленияОшибок.Вставить("ДополнительныеПараметрыОбработчиков", Неопределено);
	ПараметрыИсправленияОшибок.Вставить("ОбработчикСобытияВыбор",              Неопределено);
	
	Возврат ПараметрыИсправленияОшибок;
	
КонецФункции

Процедура ИсправитьОшибки(Параметры)
	
	Команды = Параметры.ПараметрыИсправленияОшибок.Команды;
	Если Параметры.Данные.Количество() = 1
		И Команды.Количество() = 1 Тогда
		ВыполнитьОбработчикИсправленияОшибки(Команды[0].Обработчик,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Данные[0]),
			Параметры.ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков);
	Иначе
		ОткрытьФорму("Обработка.ОбменСКонтрагентамиДиагностика.Форма.ИсправлениеОшибок", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикИсправленияОшибки(Обработчик, ОбрабатываемыеДанные, ДополнительныеПараметры) Экспорт
	
	ЧастиОбработчика = СтрРазделить(Обработчик, ".");
	Оповещение = Новый ОписаниеОповещения(ЧастиОбработчика[1], ОбщегоНазначенияКлиент.ОбщийМодуль(ЧастиОбработчика[0]), ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(Оповещение, ОбрабатываемыеДанные);
	
КонецПроцедуры

Процедура ОткрытьОбработкуОбновлениеПрограммы(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
	
КонецПроцедуры

Функция НовоеОписаниеКомандыФормыИсправленияОшибок() 
	
	Команда = Новый Структура;
	Команда.Вставить("Заголовок", "");
	Команда.Вставить("Обработчик", "");
	Команда.Вставить("Подсказка", "");
	
	Возврат Команда;
	
КонецФункции

Функция ПолучитьИсправленныеОшибки(РезультатПроцедуры, СоответствиеОшибокДанным)
	
	ИсправленныеОшибки = Новый Массив;
	Для каждого КлючИЗначение Из СоответствиеОшибокДанным Цикл
		Если РезультатПроцедуры.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсправленныеОшибки, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправленныеОшибки;

КонецФункции

Процедура ОткрытьПриглашение(Приглашение, СоответствиеОшибокДанным) Экспорт
	
	Если ТипЗнч(Приглашение) = Тип("Массив") И Приглашение.Количество() Тогда
		Приглашение = Приглашение[0];
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Приглашение);
	ПараметрыИсправленияОшибок = Новый Структура;
	ПараметрыИсправленияОшибок.Вставить("ИсправленныеОшибки", СоответствиеОшибокДанным[Приглашение]);
	ПараметрыФормы.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьНастройкуВнутреннегоЭДО(Организации, СоответствиеОшибокДанным) Экспорт
	
	Если Организации.Количество() Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиВнутреннегоЭДО(Организации[0]);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область РаботаССертификатами

#Область ПросмотрСертификата

Процедура ПосмотретьСертификат(АдресСертификата) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Оповещение = Новый ОписаниеОповещения("ПосмотретьСертификатПослеПредупреждения", ЭтотОбъект, Контекст);
	
	Если ВозможенЗапросДополнительныхРазрешений() Тогда
		ПоказатьПредупреждение(Оповещение, НСтр("ru = 'При просмотре сертификата браузер может запросить дополнительные разрешения.'"));
	Иначе 
		ПосмотретьСертификатПослеПредупреждения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПосмотретьСертификатПослеПредупреждения(Контекст) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(Контекст.АдресСертификата,,"cer");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаСертификата

Процедура УстановитьКорневойСертификатГУЦ(АдресСертификата, ОтпечатокСертификата = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Контекст.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ТекстВопроса = НСтр("ru = 'После нажатия кнопки ""ОК"" начнется загрузка и установка с сайта Головного удостоверяющего центра в доверенное хранилище
	|операционной системы корневого сертификата Минкомсвязи России. Убедитесь в подлинности сертификата, сравните отпечаток,
	|который будет отображен в окне предупреждения о безопасности, с <a href = ""https://e-trust.gosuslugi.ru/mainca"">информацией</a>,
	|опубликованной на портале уполномоченного федерального органа в области электронной подписи.'");
	
	Если ВозможенЗапросДополнительныхРазрешений() Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'При установке сертификата браузер может запросить дополнительные разрешения.'");
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса);
	Оповещение = Новый ОписаниеОповещения("ВопросУстановкаКорневогоСертификатаЗавершение", ЭтотОбъект, Контекст);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, НСтр("ru = 'Установка корневого сертификата'"));
	
КонецПроцедуры

Процедура ВопросУстановкаКорневогоСертификатаЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		УстановитьСертификат(Контекст.АдресСертификата, Контекст.ОтпечатокСертификата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификат(АдресСертификата, ОтпечатокСертификата = Неопределено) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСертификатПослеСохраненияВФайл", ЭтотОбъект);
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
	Контекст.Вставить("ОписаниеОшибки", "");
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Контекст.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	Контекст.Вставить("НазначениеРасширенияДляРаботыСФайлами",
		НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить расширение для веб-клиента 1С:Предприятия.'"));
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии",
		НСтр("ru = 'Для установки сертификата сертификата требуется
					|внешняя компонента «Криптография (CryptS)».'"));
	СоздатьОбъектКриптографииИСохранитьСертификатВФайл(Контекст);
	
КонецПроцедуры

Процедура УстановитьСертификатПослеСохраненияВФайл(РезультатСохранения, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановкаСертификатаЗавершение", ЭтотОбъект);
	РезультатСохранения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если Не РезультатСохранения.Результат Тогда
		Возврат;
	КонецЕсли;
	РезультатСохранения.Криптография.НачатьВызовИмпортироватьСертификат(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеВызоваИмпортироватьСертификат", ЭтотОбъект, РезультатСохранения,
			"УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат", ЭтотОбъект),
		РезультатСохранения.ИмяФайла, "ROOT");
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Контекст.Криптография = Неопределено;
	
	Контекст.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС по причине:
		           |%1'"),
		ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Неопределено);
	УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(Неопределено, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификат(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Результат);
	
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваИмпортироватьСертификат;
	
	АктивноеОкно().Активизировать();
	
	Если Результат <> Истина И Не ЗначениеЗаполнено(Контекст.ОписаниеОшибки) Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС.'");
	КонецЕсли;
	
	АктивноеОкно().Активизировать();
	
	Если Контекст.ОтпечатокСертификата = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатПослеИнициализацииСертификата", ЭтотОбъект, Контекст);
		КорневойСертификат = Новый СертификатКриптографии();
		КорневойСертификат.НачатьИнициализацию(Оповещение, Контекст.ИмяФайла);
	Иначе 
		УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(Контекст.ОтпечатокСертификата, Контекст);
	КонецЕсли;
	
КонецПроцедуры 

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеИнициализацииСертификата(КорневойСертификат, Контекст) Экспорт
	
	УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(КорневойСертификат.Отпечаток, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(Отпечаток, Контекст)
	
	ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПоискаКорневогоСертификата", ЭтотОбъект, Контекст),
		Base64Строка(Отпечаток),
		Ложь,
		Истина);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеПоискаКорневогоСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СертификатКриптографии") Тогда
		Если Результат = Неопределено Тогда
			ОшибкаПоиска =
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер.'");
		Иначе
			ОшибкаПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер по причине:
				           |%1'"),
				Результат);
		КонецЕсли;
		Контекст.ОписаниеОшибки = СокрЛ(Контекст.ОписаниеОшибки + Символы.ПС + Символы.ПС) + ОшибкаПоиска;
		УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	Контекст.ОписаниеОшибки = "";
	
	УстановитьСертификатУдалитьВременныйКаталогИЗавершить(
		Не ЗначениеЗаполнено(Контекст.ОписаниеОшибки), Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Результат, Контекст)
	
	Контекст.Вставить("Результат", Результат);
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеУдаленияВременногоКаталога", ЭтотОбъект, Контекст),
		Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеУдаленияВременногоКаталога(Контекст) Экспорт
	
	Если Контекст.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении,
			Новый Структура("Результат, ОписаниеОшибки", Контекст.Результат, Контекст.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаСертификатаЗавершение(РезультатУстановки, Контекст) Экспорт
	
	Если Не РезультатУстановки.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатУстановки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Сертификат установлен в хранилище операционной системы'"); 
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаСпискаОтзываСертификата

Процедура УстановитьСписокОтзываСертификата(АдресСертификата)
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Оповещение = Новый ОписаниеОповещения("УстановитьСписокОтзываСертификатаПослеПредупреждения", ЭтотОбъект, Контекст);
	
	Если ВозможенЗапросДополнительныхРазрешений() Тогда
		ПоказатьПредупреждение(Оповещение, НСтр("ru = 'При установке списка отзыва браузер может запросить дополнительные разрешения.'"));
	Иначе 
		УстановитьСписокОтзываСертификатаПослеПредупреждения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСписокОтзываСертификатаПослеПредупреждения(Контекст) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСписокОтзываПослеСохраненияСертификатаВФайл", ЭтотОбъект);
	Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
	Контекст.Вставить("ОписаниеОшибки", "");
	Контекст.Вставить("НазначениеРасширенияДляРаботыСФайлами",
		НСтр("ru = 'Для установки списка отзыва на компьютер требуется
					|установить расширение для веб-клиента 1С:Предприятия.'"));
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии",
		НСтр("ru = 'Для установки списка отзыва сертификата требуется
					|внешняя компонента «Криптография (CryptS)».'"));
	СоздатьОбъектКриптографииИСохранитьСертификатВФайл(Контекст);
	
КонецПроцедуры

Процедура УстановитьСписокОтзываПослеСохраненияСертификатаВФайл(РезультатСохранения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатСохранения.Результат Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения.Вставить("ОписаниеОшибки", "");
	СертификатКриптографии = Новый СертификатКриптографии;
	СертификатКриптографии.НачатьИнициализацию(
		Новый ОписаниеОповещения("УстановитьСписокОтзываПослеИнициализацииСертификата", ЭтотОбъект, РезультатСохранения),
		РезультатСохранения.ИмяФайла);
	
КонецПроцедуры

Процедура УстановитьСписокОтзываПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановкаСпискаОтзываЗавершение", ЭтотОбъект);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВызоваНачатьВызовНайтиСертификат", ЭтотОбъект, Контекст);
	Контекст.Криптография.НачатьВызовНайтиСертификат(Оповещение, НРег("" + СертификатКриптографии.СерийныйНомер),
		ЭлектроннаяПодписьКлиент.ПредставлениеИздателя(СертификатКриптографии));
	
КонецПроцедуры

Процедура ПослеВызоваНачатьВызовНайтиСертификат(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Результат Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияТочкиРаспространенияCRL", ЭтотОбъект, Контекст);
		Контекст.Криптография.НачатьПолучениеТочкиРаспространенияCRL(Оповещение);
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат не найден в хранилище, установка списка отзыва невозможна.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияТочкиРаспространенияCRL(ТочкиРаспространенияCRL, Контекст) Экспорт
	
	АдресаСписковОтзыва = СтрРазделить(ТочкиРаспространенияCRL, Символы.ПС, Ложь);
	Если АдресаСписковОтзыва.Количество() Тогда
		#Если ВебКлиент Тогда
			РезультатЗагрузки = ОбменСКонтрагентамиДиагностикаВызовСервера.СкачатьФайлВоВременноеХранилище(АдресаСписковОтзыва[0]);
		#Иначе 
			ПараметрыПолученияФайла = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
			ПараметрыПолученияФайла.ПутьДляСохранения = Контекст.ИмяФайла;
			РезультатЗагрузки = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(
				АдресаСписковОтзыва[0], ПараметрыПолученияФайла);
		#КонецЕсли 
		
		Если Не РезультатЗагрузки.Статус Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка при загрузке списка отзыва сертификата:'")
			+ Символы.ПС + РезультатЗагрузки.СообщениеОбОшибке);
			Возврат; 
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеПолученияСпискаОтзыва", ЭтотОбъект, Контекст);
			ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(Контекст.ИмяФайла,
				РезультатЗагрузки.Путь);
			ПолучаемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеПередаваемогоФайла);
			НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы,, Ложь);
		#Иначе 
			ИмпортироватьCRL(Контекст);
		#КонецЕсли
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать адрес списка отзыва сертификата, установка списка отзыва невозможна.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияСпискаОтзыва(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;
	
	ИмпортироватьCRL(Контекст);
	
КонецПроцедуры

Процедура ИмпортироватьCRL(Контекст)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВызоваИмпортироватьCRL", ЭтотОбъект, Контекст,
		"ПослеОшибкиВызоваИмпортироватьCRL", ЭтотОбъект);
	Контекст.Криптография.НачатьВызовИмпортироватьCRL(Оповещение, Контекст.ИмяФайла, "MY");
	
КонецПроцедуры

Процедура ПослеОшибкиВызоваИмпортироватьCRL(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
	СтандартнаяОбработка = Ложь;
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
			"ПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

Процедура ПослеВызоваИмпортироватьCRL(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
			"ПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

Процедура ПослеПолученияСписокОшибок(Ошибки, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка при установке списка отзыва:'") + Символы.ПС + Ошибки);
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Список отзыва сертификата установлен'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаСпискаОтзываЗавершение(РезультатУстановки, Контекст) Экспорт
	
	Если Не РезультатУстановки.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатУстановки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Список отзыва установлен в хранилище операционной системы'"); 
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатами_СлужебныеПроцедуры

Процедура СоздатьОбъектКриптографииИСохранитьСертификатВФайл(Контекст) 
	
	СоздатьОбъектКриптографии(Новый ОписаниеОповещения(
			"ДействиеССертификатомПослеСозданияОбъектаКриптографии", ЭтотОбъект, Контекст),
			Контекст.НазначениеРасширенияДляРаботыСФайлами,
			Контекст.НазначениеВнешнейКомпонентыКриптографии);
	
КонецПроцедуры

Процедура СоздатьОбъектКриптографии(ОбработкаПродолжения, НазначениеРасширенияДляРаботыСФайлами, НазначениеВнешнейКомпонентыКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии", НазначениеВнешнейКомпонентыКриптографии);
	Контекст.Вставить("Криптография", Неопределено);
	Контекст.Вставить("РаботаСДвоичнымиДанными", Неопределено);
	Контекст.Вставить("ОписаниеОшибки", "");
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами",
			ЭтотОбъект, Контекст),
		НазначениеРасширенияДляРаботыСФайлами,
		Ложь);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения,
			НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = Контекст.НазначениеВнешнейКомпонентыКриптографии;
	// Объект создается на одно действие до исключения, кэширование на время сеанса не подходит.
	ПараметрыПодключения.Кэшировать = Ложь;
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("BinaryDataS");
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("CryptS");
	
	// РаботаСДвоичнымиДанными.
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияКомпоненты",
			ЭтотОбъект, Контекст), Неопределено,
		"Обработка.ОбменСКонтрагентамиДиагностика.Макет.КомпонентаОбмена",
		ПараметрыПодключения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПодключенияКомпоненты(Результат, Контекст) Экспорт
	
	Если Результат.Подключено Тогда
		Контекст.РаботаСДвоичнымиДанными = Результат.ПодключаемыйМодуль.Получить("BinaryDataS");
		Контекст.Криптография = Результат.ПодключаемыйМодуль.Получить("CryptS");
	Иначе
		Контекст.РаботаСДвоичнымиДанными = Неопределено;
		Контекст.Криптография = Неопределено;
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			// Пользователь отказался от установки внешней компоненты.
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения,
				НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Иначе
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
				Результат.ОписаниеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Криптография.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках", ЭтотОбъект, Контекст),
		Истина);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках(Контекст) Экспорт
	
	ОписаниеМенеджераКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.ОписаниеМенеджераКриптографииWindows();
	
	Контекст.Криптография.НачатьВызовСоздатьМенеджераКриптографии(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии", ЭтотОбъект, Контекст,
			"СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии", ЭтотОбъект),
		ОписаниеМенеджераКриптографии.ИмяПрограммы,
		ОписаниеМенеджераКриптографии.ПутьКПрограмме,
		ОписаниеМенеджераКриптографии.ТипПрограммы);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Программа электронной подписи не доступна через внешнюю компоненту по причине:
			           |%1'"),
			ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = НовыйРезультатСозданияОбъектаКриптографии(Истина);
	ЗаполнитьЗначенияСвойств(РезультатСоздания, Контекст);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатСоздания);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке(Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
	
КонецПроцедуры

Процедура ДействиеССертификатомПослеСозданияОбъектаКриптографии(РезультатСоздания, Контекст) Экспорт
	
	Если РезультатСоздания.Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
			"ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст));
	Иначе 
		Контекст.Вставить("Криптография");
		Контекст.Вставить("РаботаСДвоичнымиДанными");
		ЗаполнитьЗначенияСвойств(Контекст, РезультатСоздания);
		ДействиеССертификатомПослеУспехаСозданияОбъектаКриптографии(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлено расширение для работы с файлами.'");
	Иначе
		НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
			"ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлено расширение для работы с криптографией.'");
	Иначе
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлена внешняя компонента.'");
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеУспехаСозданияОбъектаКриптографии(Контекст)
	
	ПолучитьКаталогВременныхФайловКомпоненты(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеПолученияКаталогаВременныхФайловКомпоненты", ЭтотОбъект, Контекст), Контекст);
	
КонецПроцедуры

// Создание каталога временных файлов компоненты ExtIntgr.
Процедура ПолучитьКаталогВременныхФайловКомпоненты(Оповещение, Контекст)
	
	Контекст.Вставить("Оповещение", Оповещение);
	
	Контекст.РаботаСДвоичнымиДанными.НачатьВызовПолучитьКаталогВременныхФайлов(Новый ОписаниеОповещения(
			"ПолучитьКаталогВременныхФайловКомпонентыПослеВызова", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьКаталогВременныхФайловКомпоненты.
Процедура ПолучитьКаталогВременныхФайловКомпонентыПослеВызова(Каталог, ПараметрыВызова, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение,
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог));
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияКаталогаВременныхФайловКомпоненты(Каталог, Контекст) Экспорт
	
	Контекст.Вставить("ВременныйКаталог", Каталог + НовыйСжатыйУникальныйИдентификатор());
	
	Контекст.ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		Контекст.ВременныйКаталог);
	
	Контекст.Вставить("ИмяФайлаКорневогоСертификата", "root.cer");
	
	Вызовы = Новый Массив;
	ДобавитьВызов(Вызовы, "НачатьСозданиеКаталога",  Контекст.ВременныйКаталог,
		Неопределено, Неопределено, Неопределено, Неопределено);
	ПолучаемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ОписаниеПередаваемогоФайла(Контекст.ВременныйКаталог + Контекст.ИмяФайлаКорневогоСертификата,
		Контекст.АдресСертификата));
	ДобавитьВызов(Вызовы, "НачатьПолучениеФайлов", ПолучаемыеФайлы, Контекст.ВременныйКаталог,
		Ложь, Неопределено, Неопределено);
	ДобавитьВызов(Вызовы, "НачатьУдалениеФайлов",  Контекст.ВременныйКаталог,
		Неопределено, Неопределено, Неопределено, Неопределено);
	НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеПолученияРазрешений", ЭтотОбъект, Контекст), Вызовы);
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если Не РазрешенияПолучены Тогда
		Контекст.ОписаниеОшибки =
			НСтр("ru = 'Сохранение сертификатов во временную папку отменено пользователем.'");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеКаталога(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеСозданияКаталога", ЭтотОбъект, Контекст), Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеСозданияКаталога(ИмяКаталога, Контекст) Экспорт
	
	ПолучаемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ОписаниеПередаваемогоФайла(Контекст.ВременныйКаталог + Контекст.ИмяФайлаКорневогоСертификата,
		Контекст.АдресСертификата));
	Оповещение = Новый ОписаниеОповещения("ДействиеССертификатомПослеПолученияФайлов", ЭтотОбъект, Контекст);
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, Контекст.ВременныйКаталог, Ложь);
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохраненияФайла = Новый Структура;
	РезультатСохраненияФайла.Вставить("ИмяФайла", ПолученныеФайлы[0].ПолноеИмя);
	РезультатСохраненияФайла.Вставить("Криптография", Контекст.Криптография);
	РезультатСохраненияФайла.Вставить("РаботаСДвоичнымиДанными", Контекст.РаботаСДвоичнымиДанными);
	РезультатСохраненияФайла.Вставить("ВременныйКаталог", Контекст.ВременныйКаталог);
	РезультатСохраненияФайла.Вставить("ОписаниеОшибки", Контекст.ОписаниеОшибки);
	РезультатСохраненияФайла.Вставить("Результат", Истина);
	ОтпечатокСертификата = Неопределено;
	Контекст.Свойство("ОтпечатокСертификата", ОтпечатокСертификата);
	РезультатСохраненияФайла.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатСохраненияФайла);
	
КонецПроцедуры

Процедура ДобавитьВызов(Вызовы, Метод, П1, П2, П3, П4, П5)
	
	Вызов = Новый Массив;
	Вызов.Добавить(Метод);
	Вызов.Добавить(П1);
	Вызов.Добавить(П2);
	Вызов.Добавить(П3);
	Вызов.Добавить(П4);
	Вызов.Добавить(П5);
	
	Вызовы.Добавить(Вызов);
	
КонецПроцедуры

Функция НовыйСжатыйУникальныйИдентификатор()
	
	Возврат НРег(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	
КонецФункции

Функция ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Возврат Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
КонецФункции

Функция НовыйРезультатСозданияОбъектаКриптографии(Результат, Криптография = Неопределено, РаботаСДвоичнымиДанными = Неопределено) 
	
	РезультатСозданияОбъектаКриптографии = Новый Структура;
	РезультатСозданияОбъектаКриптографии.Вставить("Результат",               Результат);
	РезультатСозданияОбъектаКриптографии.Вставить("Криптография",            Криптография);
	РезультатСозданияОбъектаКриптографии.Вставить("РаботаСДвоичнымиДанными", РаботаСДвоичнымиДанными);
	
	Возврат РезультатСозданияОбъектаКриптографии;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область АсинхронныйЦикл

Процедура АсинхронныйЦиклНачать(ОбработчикЗавершения, Данные, Обработчики, Контекст) 
	
	Если Данные = Неопределено Тогда
		Данные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	КонецЕсли;
	КонтекстЦикла = Новый Структура;
	КонтекстЦикла.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	КонтекстЦикла.Вставить("Данные", Данные);
	КонтекстЦикла.Вставить("Обработчики", Обработчики);
	КонтекстЦикла.Вставить("СчетчикДанных", 0);
	КонтекстЦикла.Вставить("СчетчикОбработчиков", 0);
	КонтекстЦикла.Вставить("ТекущийУровеньВложенности", 0);
	
	Если Контекст.Свойство("АсинхронныйЦикл") Тогда
		ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
		ТекущийАсинхронныйЦикл.Вставить("АсинхронныйЦикл", КонтекстЦикла);
		Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности = Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности + 1;
	Иначе 
		Контекст.Вставить("АсинхронныйЦикл", КонтекстЦикла);
	КонецЕсли;
	
	АсинхронныйЦиклНачало(Контекст);
	
КонецПроцедуры

Процедура АсинхронныйЦиклВыполнитьСледующийОбработчик(Результат, Контекст) Экспорт
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	ТекущийАсинхронныйЦикл.СчетчикОбработчиков = ТекущийАсинхронныйЦикл.СчетчикОбработчиков + 1;
	АсинхронныйЦиклНачало(Контекст, Результат);
	
КонецПроцедуры

Функция АсинхронныйЦиклСледующийОбработчик(Контекст)
	
	НовыйОбработчик = Новый ОписаниеОповещения("АсинхронныйЦиклВыполнитьСледующийОбработчик", ЭтотОбъект, Контекст);
	Возврат НовыйОбработчик;
	
КонецФункции

Процедура АсинхронныйЦиклНачало(Контекст, РезультатВыполненияОбработчика = Неопределено)
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	Если ТекущийАсинхронныйЦикл.СчетчикДанных > ТекущийАсинхронныйЦикл.Данные.ВГраница() Тогда
		АсинхронныйЦиклЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ТекущийАсинхронныйЦикл.СчетчикОбработчиков > ТекущийАсинхронныйЦикл.Обработчики.ВГраница() Тогда
		ТекущийАсинхронныйЦикл.СчетчикДанных = ТекущийАсинхронныйЦикл.СчетчикДанных + 1;
		ТекущийАсинхронныйЦикл.СчетчикОбработчиков = 0;
		АсинхронныйЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементДанных = ТекущийАсинхронныйЦикл.Данные[ТекущийАсинхронныйЦикл.СчетчикДанных];
	ТекущийОбработчик = ТекущийАсинхронныйЦикл.Обработчики[ТекущийАсинхронныйЦикл.СчетчикОбработчиков];
	
	Оповещение = Новый ОписаниеОповещения(ТекущийОбработчик.ИмяПроцедуры, ТекущийОбработчик.Модуль, Контекст);
	ВыполнитьОбработкуОповещения(Оповещение, ?(РезультатВыполненияОбработчика = Неопределено, ТекущийЭлементДанных, РезультатВыполненияОбработчика));
	
КонецПроцедуры

Функция АсинхронныйЦиклТекущийЦикл(Контекст) 
	
	ТекущийЦикл = Контекст.АсинхронныйЦикл;
	Для Сч = 0 По Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности - 1 Цикл
		ТекущийЦикл = ТекущийЦикл.АсинхронныйЦикл;
	КонецЦикла;
	
	Возврат ТекущийЦикл;
	
КонецФункции

Функция АсинхронныйЦиклТекущийЭлементДанных(Контекст)
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	Возврат ТекущийАсинхронныйЦикл.Данные[ТекущийАсинхронныйЦикл.СчетчикДанных];
	
КонецФункции

Процедура АсинхронныйЦиклЗавершение(Контекст) 
	
	ТекущийАсинхронныйЦикл = АсинхронныйЦиклТекущийЦикл(Контекст);
	ОбработчикЗавершения = ТекущийАсинхронныйЦикл.ОбработчикЗавершения;
	Если Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности > 0 Тогда
		Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности = Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности - 1;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Контекст);
	
КонецПроцедуры

#КОнецОбласти

#Область Прочее 

Функция СоответствиеВидовДиагностикиВидамОшибок() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетСоединение(),
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиИнтернетСоединение());
	Соответствие.Вставить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография(),
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиКриптография());
	Соответствие.Вставить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиИнтернетПоддержка(),
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиИнтернетПоддержка());
	Соответствие.Вставить(ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиРаботаСФайлами(),
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиРаботаСФайлами());
	
	Возврат Соответствие;
	
КонецФункции

Функция ДействиеПовторитьДействие() Экспорт
	
	Возврат "ПовторитьДействие";
	
КонецФункции

Процедура ФормаДиагностикиЗакрытие(РезультатЗакрытия, Контекст) Экспорт
	
	Обработчик = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
		Если РезультатЗакрытия = ДействиеПовторитьДействие() Тогда
			Обработчик = Контекст.ПараметрыОткрытияМастера.ОбработчикПовторенияДействия;
		КонецЕсли;
	Иначе 
		Обработчик = Контекст.ПараметрыОткрытияМастера.ОбработчикЗакрытия;
	КонецЕсли;
	
	ГруппаПредупреждения = Контекст.ПараметрыОткрытияМастера.ГруппаПредупреждения;
	Если РезультатЗакрытия = Истина И ГруппаПредупреждения <> Неопределено Тогда
		Если ТипЗнч(ГруппаПредупреждения) = Тип("ДекорацияФормы") Тогда
			ГруппаПредупреждения.Заголовок = "";
		Иначе 
			ГруппаПредупреждения.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Обработчик, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыКриптографии()
	
	ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере();
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
	
	ПараметрыКриптографии = Новый Структура;
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаСервере", ПроверятьЭлектронныеПодписиНаСервере Или СоздаватьЭлектронныеПодписиНаСервере);
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаКлиенте", Не ПроверятьЭлектронныеПодписиНаСервере Или Не СоздаватьЭлектронныеПодписиНаСервере);
	
	Возврат ПараметрыКриптографии;
	
КонецФункции

Функция ВозможенЗапросДополнительныхРазрешений() 
	
	#Если ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.16.0") < 0;
	#Иначе 
		Возврат Ложь;
	#КонецЕсли
	
КонецФункции 

Процедура ОткрытьНастройкиЭлектроннойПодписи(Ошибки, Контекст = Неопределено) Экспорт
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
КонецПроцедуры

#Область ОшибкиСертификатов

Процедура ОткрытьОшибкиСертификата(Форма, Сертификат, Ошибки) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЕстьКриптографияНаКлиенте");
	ПараметрыФормы.Вставить("ЕстьКриптографияНаСервере");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыКриптографии());
	ПараметрыФормы.Вставить("Сертификат", Сертификат);
	ПараметрыФормы.Вставить("РезультатПроверки", Ошибки);
	ПараметрыФормы.Вставить("СкрытьПароль", Форма.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Найти(Сертификат) <> Неопределено);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентамиДиагностика.Форма.ПроверкаСертификата", ПараметрыФормы);
	
КонецПроцедуры

Процедура МетодикаУстраненияОшибкиСертификатаОбработкаНавигационнойСсылки(НавигационнаяСсылка, Контекст) Экспорт
	
	ЧастиСтроки = СтрЗаменить(НавигационнаяСсылка,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.РазделительПараметровМетодикиУстраненияОшибок(),
		Символы.ПС);
	ЧастиСтроки = СтрРазделить(ЧастиСтроки, Символы.ПС);
	Если ЧастиСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ЧастиСтроки[0];
	ЧастиСтроки.Удалить(0);
	Параметры = ЧастиСтроки;
	
	Если Действие = "УстановкаСпискаОтзываСертификатов" Тогда
		УстановитьСписокОтзываСертификата(Контекст.АдресСертификата);
	ИначеЕсли Действие = "УстановкаКорневогоСертификатаГУЦ" Тогда
		ДействиеССертификатомГУЦ(Параметры[0], Параметры[1]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеССертификатомГУЦ(Действие, URL)
	
	ДанныеСертификата = ОбменСКонтрагентамиДиагностикаВызовСервера.СкачатьФайлСертификатаГУЦ(URL);
	РезультатЗагрузки = ДанныеСертификата.РезультатЗагрузки;
	
	Если РезультатЗагрузки.Статус Тогда
		Если Действие = "Просмотр" Тогда
			ПосмотретьСертификат(РезультатЗагрузки.Путь);
		ИначеЕсли Действие = "Установка" Тогда
			УстановитьКорневойСертификатГУЦ(РезультатЗагрузки.Путь, ДанныеСертификата.Отпечаток);
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка при загрузке корневого сертификата ГУЦ:'")
			+ Символы.ПС + РезультатЗагрузки.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

