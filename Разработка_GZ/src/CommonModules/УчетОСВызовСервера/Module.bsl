// Функция рассчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
// - СтоимостьПР
// - СтоимостьВР
//
Функция РассчитатьСтоимостьОбъектаСтроительства(Знач Организация, Знач ПодразделениеОрганизации, Знач Период, Знач СчетУчета, Знач ОбъектСтроительства) Экспорт

	СтруктураСтоимостьОбъектаСтроительства = Новый Структура;
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПР", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВР", 0);
	
	Если ТипЗнч(Период) = Тип("Граница") Тогда
		ГраницаПолученияОстатков = Период;
	Иначе
		ГраницаПолученияОстатков = Новый Граница(Период);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                   ГраницаПолученияОстатков);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СчетУчета",                СчетУчета);
	Запрос.УстановитьПараметр("ОбъектСтроительства",      ОбъектСтроительства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = &СчетУчета,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|			Субконто1 = &ОбъектСтроительства
	|				И Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )) КАК ХозрасчетныйОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураСтоимостьОбъектаСтроительства, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураСтоимостьОбъектаСтроительства;

КонецФункции

// Функция возвращает параметры начисления амортизационной премии в виде структуры
// СчетУчетаЗатратПоАмортизационнойПремии
// ПодразделениеОрганизацииПоАмортизационнойПремии
// Субконто1
// Субконто2
// Субконто3
Функция ПолучитьПараметрыНачисленияАмортизационнойПремии(Знач СпособыОтраженияРасходовПоАмортизации) Экспорт
	
	СтатьяЗатратАмортизационнаяПремия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.АмортизационнаяПремия");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СпособыОтраженияРасходовПоАмортизации);
	Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат,
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|	КОНЕЦ КАК Субконто3
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураРезультата = Новый Структура;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СпособОтраженияРаcходов = РезультатЗапроса.Выгрузить()[0];
			
		СтруктураРезультата.Вставить("СчетУчетаЗатратПоАмортизационнойПремии", СпособОтраженияРаcходов.СчетЗатрат);
		
		СтруктураРезультата.Вставить("ПодразделениеОрганизацииПоАмортизационнойПремии", СпособОтраженияРаcходов.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто1) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии1", СпособОтраженияРаcходов.Субконто1);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто2) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии2", СпособОтраженияРаcходов.Субконто2);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто3) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии3", СпособОтраженияРаcходов.Субконто3);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция возвращает параметры начисления амортизационной премии
//
// Параметры:
// ОС - СправочникСсылка.ОсновныеСредства
// Организация - СправочникСсылка.Организации
// Дата - Дата
//
// Возвращаемое значение:
// Структура
//    * СчетУчетаЗатратПоАмортизационнойПремии
//    * ПодразделениеОрганизацииПоАмортизационнойПремии
//    * Субконто1
//    * Субконто2
//    * Субконто3
//
Функция ПараметрыНачисленияАмортизационнойПремии(Знач ОС, Знач Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           Дата);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&Период,
	|		Организация = &Организация
	|			И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		СпособОтраженияРасходовПоАмортизации = РезультатЗапроса.Выгрузить()[0].СпособОтраженияРасходовПоАмортизации;
		СтруктураПараметровАмортизационнойПремии = ПолучитьПараметрыНачисленияАмортизационнойПремии(СпособОтраженияРасходовПоАмортизации);
		Возврат СтруктураПараметровАмортизационнойПремии;
	КонецЕсли;

КонецФункции

// Функция возвращает список макетов документов для печати документа Принятие к учету ОС
Функция ПолучитьСписокМакетовОС1(МассивОбъектов) Экспорт
	
	СписокМакетов = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОСОС.Ссылка КАК ПринятиеКУчетуОС,
	|	МАКСИМУМ(ПринятиеКУчетуОСОС.ОсновноеСредство.ГруппаОС) КАК ГруппаОС,
	|	КОЛИЧЕСТВО(ПринятиеКУчетуОСОС.ОсновноеСредство) КАК КоличествоОС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
	|ГДЕ
	|	ПринятиеКУчетуОСОС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринятиеКУчетуОСОС.Ссылка";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		ЕстьОС1 = Ложь;
		ЕстьОС1а = Ложь;
		ЕстьОС1б = Ложь;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоОС > 1 Тогда
				
				Если НЕ ЕстьОС1б Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "ОС1б", ",ОС1б");
					ЕстьОС1б = Истина;
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ГруппаОС = Перечисления.ГруппыОС.Здания 
					ИЛИ Выборка.ГруппаОС = Перечисления.ГруппыОС.Сооружения Тогда
					
					Если НЕ ЕстьОС1а Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "ОС1а", ",ОС1а");
						ЕстьОС1а = Истина;
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЕстьОС1 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "ОС1", ",ОС1");
						ЕстьОС1 = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьОС1 И ЕстьОС1а И ЕстьОС1б Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат СписокМакетов;
	
КонецФункции