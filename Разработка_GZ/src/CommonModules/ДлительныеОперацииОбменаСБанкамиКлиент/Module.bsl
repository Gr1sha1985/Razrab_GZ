#Область ПрограммныйИнтерфейс

Функция ИмяСобытияЗавершениеОбновления() Экспорт
	
	Возврат "ЗавершениеОбновленияОбменСБанками";
	
КонецФункции

Функция ИмяСобытияЗавершениеРасшифровки() Экспорт
	
	Возврат "ЗавершениеРасшифровкиОбменСБанками";
	
КонецФункции

Функция ИмяСобытияУдачнаяОтправка() Экспорт
	
	Возврат "УдачнаяОтправкаОбменСБанками";
	
КонецФункции

Функция ИмяСобытияНеУдачнаяОтправка() Экспорт
	
	Возврат "НеУдачнаяОтправкаОбменСБанками";
	
КонецФункции

Функция ИмяСобытияЗавершитьОтправкуБезДальнейшихДействий() Экспорт
	
	Возврат "ЗавершитьОтправкуБезДальнейшихДействийОбменСБанками";
	
КонецФункции

Функция ИмяСобытияИзмененияПризнакаЧтенияСообщенийФоновогоЗадания() Экспорт
	
	Возврат "ИзменениеПризнакаЧтенияСообщенийФоновогоЗадания";
	
КонецФункции

Функция ИмяСобытияУточнениеЭтапа() Экспорт
	
	Возврат "УточнениеЭтапаОбменСБанками";
	
КонецФункции

Функция ИмяСобытияСменыИдентификатораФоновогоЗадания() Экспорт
	
	Возврат "СменаИдентификатораФоновогоЗадания";
	
КонецФункции

Функция ИмяСобытияСменаЭтапаРасшифровки() Экспорт
	
	Возврат "СменаЭтапаРасшифровкиОбменСБанками";
	
КонецФункции

Функция ИмяСобытияСменаЭтапаОбмена() Экспорт
	
	Возврат "СменаЭтапаОбменаОбменСБанками";
	
КонецФункции

Функция ИмяСобытияДобавлениеЭтапа() Экспорт
	
	Возврат "ДобавлениеЭтапаОбменаОбменСБанками";
	
КонецФункции

Функция ИмяСобытияПолучениеВсехОшибокОперации() Экспорт
	
	Возврат "ПолучениеВсехОшибокДлительнойОперации";
	
КонецФункции

#Область Отправка

Функция ПоказатьФормуДлительнойОтправки(Сервис,
	ПараметрыДлительнойОперации,
	ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Возврат ПоказатьФормуДлительнойОперации(Сервис,
		ПараметрыДлительнойОперации,
		ПараметрыОткрытияФормы);
	
КонецФункции

#КонецОбласти

#Область ОбменИРасшифровка

Функция ПоказатьФормуРасшифровки(Сервис,
	ПараметрыДлительнойОперации,
	ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Возврат ПоказатьФормуДлительнойОперации(Сервис,
		ПараметрыДлительнойОперации,
		ПараметрыОткрытияФормы);
	
КонецФункции

Функция ПоказатьФормуОбмена(Сервис,
	ПараметрыДлительнойОперации,
	ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Возврат ПоказатьФормуДлительнойОперации(Сервис,
		ПараметрыДлительнойОперации,
		ПараметрыОткрытияФормы);
	
КонецФункции

// Параметры:
//  Сервис - Перечисление.СервисыОбменаСБанками - сервис для открытия формы.
//  ДополнительныеПараметры - Структура - структура с полями:
//    *ОповещениеОбратногоВызова - Оповещение - оповещения для возврата из процедуры.
Функция ПоказатьФормуДлительнойОперации(Сервис,
	ПараметрыДлительнойОперации,
	ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Если ЭтоПопыткаОткрытияВторогоОкнаДлительнойОперации(ПараметрыДлительнойОперации.ПараметрыРежима) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыДлительнойОперации.Свойство("ОповещениеОбратногоВызова") Тогда
		ПараметрыДлительнойОперации.Вставить("ОповещениеОбратногоВызова", Неопределено);
	КонецЕсли;
	
	Если НЕ ПараметрыДлительнойОперации.Свойство("Сервис") Тогда
		ПараметрыДлительнойОперации.Вставить("Сервис", Сервис);
	КонецЕсли;
	
	Владелец = Неопределено;
	Если ПараметрыОткрытияФормы <> Неопределено Тогда
		ПараметрыОткрытияФормы.Свойство("Владелец", Владелец);
	КонецЕсли;
	
	Если Владелец <> Неопределено Тогда
		ПараметрыДлительнойОперации.Вставить("ИдентификаторФормыПолучателя", Владелец.УникальныйИдентификатор);
	Иначе
		АктивнаяФорма = ТекущаяАктивнаяФорма();
		Если АктивнаяФорма = Неопределено Тогда
			ПараметрыДлительнойОперации.Вставить("ИдентификаторФормыПолучателя", Новый УникальныйИдентификатор);
		Иначе
			ПараметрыДлительнойОперации.Вставить("ИдентификаторФормыПолучателя", АктивнаяФорма.УникальныйИдентификатор);
			Владелец = АктивнаяФорма;
		КонецЕсли;
	КонецЕсли;
	
	ЗапомнитьПараметрыДлительнойОперации(ПараметрыДлительнойОперации);
	
	ДанныеДляОткрытияФормы = УниверсальныйОбменСБанкамиКлиент.РазобратьПараметрыФормы(ПараметрыОткрытияФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьФормуПослеДлительнойОперации", 
		ЭтотОбъект,
		ПараметрыДлительнойОперации);
	
	// Если не передавать владельца, то панель отправки отчета перерисовываться не будет.
	Форма = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперацияОбменаСБанками",
		ПараметрыДлительнойОперации,
		Владелец,
		ДанныеДляОткрытияФормы.Уникальность,
		ДанныеДляОткрытияФормы.Окно,
		ДанныеДляОткрытияФормы.НавигационнаяСсылка,
		ОписаниеОповещения,
		ДанныеДляОткрытияФормы.РежимОткрытияОкна);
	
	Возврат Форма;

КонецФункции

Процедура ОповеститьОбИзмененииПризнакаЧтенияСообщенийФоновогоЗадания(Параметры) Экспорт
	
	Оповестить(ИмяСобытияИзмененияПризнакаЧтенияСообщенийФоновогоЗадания(), Параметры);
	
КонецПроцедуры

Процедура ОповеститьОбУточненииЭтаповСобытия(Параметры) Экспорт
	
	Оповестить(ИмяСобытияУточнениеЭтапа(), Параметры);
	
КонецПроцедуры

Процедура ОповеститьОСменеИдентификатораФоновогоЗадания(Параметры) Экспорт
	
	Оповестить(ИмяСобытияСменыИдентификатораФоновогоЗадания(), Параметры);
	
КонецПроцедуры

Процедура ОповеститьОДобавленииЭтапа(Параметры) Экспорт
	
	Оповестить(ИмяСобытияДобавлениеЭтапа(), Параметры);
	
КонецПроцедуры

// Оповещение формы бублика о начале нового этапа обмена.
// Используется для наращивания процента.
// 
Процедура ОповеститьОСменеЭтапаОбмена(Параметры) Экспорт
	
	Оповестить(ИмяСобытияСменаЭтапаОбмена(), Параметры);
	
КонецПроцедуры

// Оповещение формы бублика о начале нового этапа обмена.
// Используется для наращивания процента.
// 
Процедура ОповеститьОСменеЭтапаРасшифровки(Параметры) Экспорт
	
	Оповестить(ИмяСобытияСменаЭтапаРасшифровки(), Параметры);
	
КонецПроцедуры

Процедура ОповеститьОЗавершенииОбмена() Экспорт
	
	Оповестить(ИмяСобытияЗавершениеОбновления());
	
КонецПроцедуры

Процедура ОповеститьОЗавершенииРасшифровки(Параметры) Экспорт
	
	Оповестить(ИмяСобытияЗавершениеРасшифровки(), Параметры);
	
КонецПроцедуры

Процедура ОповеститьОбУдачнойОтправке() Экспорт
	
	Оповестить(ИмяСобытияУдачнаяОтправка());
	
КонецПроцедуры

Процедура ОповеститьОНеУдачнойОтправке() Экспорт
	
	Оповестить(ИмяСобытияНеУдачнаяОтправка());
	
КонецПроцедуры

Процедура ЗакрытьФормуДлительнойОтправкиБезДальнейшихДействий() Экспорт

	Оповестить(ИмяСобытияЗавершитьОтправкуБезДальнейшихДействий());

КонецПроцедуры

Функция ПараметрыДлительнойОтправки() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыРежима",
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПараметрыРежимаОтправки());
	ДополнительныеПараметры.Вставить("Предмет", Неопределено);
	
КонецФункции

Функция ПараметрыДлительногоОбмена() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыРежима",
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПараметрыРежимаОбмена());
	ДополнительныеПараметры.Вставить("Предмет",								Неопределено);
	ДополнительныеПараметры.Вставить("Организации", 						Неопределено);
	ДополнительныеПараметры.Вставить("ВыводитьПроценты", 					Истина);
	ДополнительныеПараметры.Вставить("ОбщееКоличествоЭтапов", 				0);
	ДополнительныеПараметры.Вставить("АдресДереваНовыхСобытий",				"");
	ДополнительныеПараметры.Вставить("РазрешитьЗакрытиеФормы", 				Ложь);
	ДополнительныеПараметры.Вставить("ИдентификаторФоновогоЗаданияОбмена", 	Неопределено);
	ДополнительныеПараметры.Вставить("ЗаголовокПредмета", 					"");
	ДополнительныеПараметры.Вставить("ЭтапыОбмена", 						Неопределено);
	// Используется для немедленного отображения результата отправки предмента.
	ДополнительныеПараметры.Вставить("РезультатОтправки", 					Неопределено);
	
	Возврат ДополнительныеПараметры;
	 
КонецФункции

Функция ПараметрыУниверсальногоДлительногоДействия() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыРежима",
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПараметрыРежимаУниверсальногоОжидания());
	ДополнительныеПараметры.Вставить("РазрешитьЗакрытиеФормы", Истина);
	
	Возврат ДополнительныеПараметры;
	 
КонецФункции

Функция ПараметрыРасшифровки() Экспорт
	
	Результат = ПараметрыДлительногоОбмена();
	Результат.ПараметрыРежима =
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ПараметрыРежимаРасшифровки();
	Результат.РазрешитьЗакрытиеФормы = Ложь;
	
	Возврат Результат;
	 
КонецФункции

Процедура ОповеститьОНевозможностиОбновитьСтатусОтчета() Экспорт
	
	Оповестить("Невозможно обновить состояние отчета");
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ИзменитьПараметрыДлительнойОтправкиКлиентСервер(КлючПараметра, НовоеЗначение) Экспорт
	
	// Клиент
	ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИзменитьПараметрыДлительнойОтправки(КлючПараметра, НовоеЗначение);
	// Сервер
	ДлительныеОперацииОбменаСБанкамиВызовСервера.ИзменитьПараметрыДлительнойОтправкиСервер(КлючПараметра, НовоеЗначение);
	
КонецПроцедуры

Процедура ЗапомнитьПараметрыДлительнойОперации(
		Параметры, 
		ИмяПараметраПриложения = "БанкКоннект.ПараметрыДлительнойОперации") Экспорт

	//ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Параметры);

КонецПроцедуры

Функция ЭтоПопыткаОткрытияВторогоОкнаДлительнойОперации(ПараметрыРежима)
		
	Если НЕ ФормаДлительнойОперацииЕстьСредиОткрытых() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// Описание того, что хотят запустить.
	Если ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимОтправка() Тогда
		ТекстПредупреждения = НСтр("ru = 'Отправка не может быть начата.'");
	ИначеЕсли ПараметрыРежима.Режим = ДлительныеОперацииОбменаСБанкамиКлиентСервер.РежимРасшифровка() Тогда
		ТекстПредупреждения = НСтр("ru = 'Расшифровка не может быть начата.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Действие не может быть начато.'");
	КонецЕсли;
	
	ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = '
                   |Дождитесь завершения предыдущей операции.'");
				   
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	Возврат Истина;

КонецФункции

Функция ФормаДлительнойОперацииЕстьСредиОткрытых() Экспорт
	
	Возврат ФормаЕстьСредиОткрытых("ДлительнаяОперацияОбменаСБанками");
	
КонецФункции

Функция ФормаЕстьСредиОткрытых(ЧастьИмениФормы) Экспорт
	
	Окна = ПолучитьОкна();
	
	Если Окна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ТипЗнч(ОткрытоеОкно) = Тип("ОкноКлиентскогоПриложения") 
			И ОткрытоеОкно.Содержимое.Количество() = 1
			И Найти(ОткрытоеОкно.Содержимое[0].ИмяФормы, ЧастьИмениФормы) <> 0 Тогда
			
			Возврат ОткрытоеОкно.Содержимое[0].Открыта();
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТекущаяАктивнаяФорма()

	АктивноеОкно = АктивноеОкно();
	// Запоминаем окно, в которое будут выводиться сообщения об ошибках
	// чтобы исключить вывод сообщений в окно бублика.
	// Иначе при закрытии бублика все сообщения об ошибках потеряются.
	
	Если АктивноеОкно = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		ТекущееОкно  = АктивноеОкно().Содержимое;
		АктивнаяФорма = Неопределено;
		Для каждого ТекущаяФорма Из ТекущееОкно Цикл
			АктивнаяФорма = ТекущаяФорма;
			Прервать;
		КонецЦикла;
		
		Возврат АктивнаяФорма;
		
	КонецЕсли;

КонецФункции

Функция ОшибкиКлиент() Экспорт
	
	ПараметрыОтправки = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		ЗначенияПараметровДлительнойОперации();
	Возврат ПараметрыОтправки["Ошибки"];
	
КонецФункции

Функция ОшибкиКлиентСервер() Экспорт
	
	// Сервер
	ОшибкиСервер = ДлительныеОперацииОбменаСБанкамиВызовСервера.ОшибкиСервер();
	ОшибкиСервер = Новый Массив(ОшибкиСервер);
	
	// Клиент
	ОшибкиКлиент = ОшибкиКлиент();
	ОшибкиКлиент = Новый Массив(ОшибкиКлиент);
	
	// Объединяем ошибки с клиента и сервера.
	ВсеОшибки = ОшибкиКлиент;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОшибки, ОшибкиСервер);
	
	ВсеОшибки = Новый ФиксированныйМассив(ВсеОшибки);
	
	Возврат ВсеОшибки;
	
КонецФункции

Процедура ОчиститьПараметрыДлительнойОтправкиКлиентСервер() Экспорт

	// Клиент
	ДлительныеОперацииОбменаСБанкамиКлиентСервер.ОчиститьПараметрыДлительнойОтправки();
	// Сервер
	ДлительныеОперацииОбменаСБанкамиВызовСервера.ОчиститьПараметрыДлительнойОтправкиСервер();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьОбменСБанкамиОНовыхИОшибках(Результат, ДополнительныеПараметры)

	Если Результат.ЕстьНовые Тогда
		
		ПараметрыОповещения = Неопределено;
		Если Результат.ЕстьОшибки Тогда
			ПараметрыОповещения = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Оповестить("ПолученыНовыеСообщенияОбменаСБанками", ПараметрыОповещения);
			
	КонецЕсли;

КонецПроцедуры

Процедура ПоказатьФормуПослеДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.ЗакрытьБезДальнейшихДействий Тогда
			
			// Ничего не делаем если форму бублика:
			// - закрыли по крестику.
			// - закрыли по кнопке Закрыть при наличии другой кнопки.
			ОповеститьОбменСБанкамиОНовыхИОшибках(Результат, ДополнительныеПараметры);
			
		ИначеЕсли Результат.ЕстьОшибки И НЕ Результат.ЕстьНовые Тогда
			
			ПоказатьОшибки(Результат, ДополнительныеПараметры);
			
		ИначеЕсли Результат.ЕстьНовые ИЛИ Результат.ЕстьОшибки Тогда
			
			ПоказатьНовые(Результат, ДополнительныеПараметры);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьОшибки(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьОшибкиЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Вставить("Результат", Результат);
	
	ОткрытьФорму("ОбщаяФорма.ОшибкиДлительнойОперацииОбменаСБанками",
		Результат,,,,,
		ОписаниеОповещения);

КонецПроцедуры

Процедура ПоказатьОшибкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Результат = ДополнительныеПараметры.Результат;
	
	Если ОповещениеОбратногоВызова <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьНовые(Результат, ДополнительныеПараметры)
	
	Сервис = ДополнительныеПараметры.Сервис;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если Результат.ЕстьОшибки Тогда
		
		АдресСведенийПоОшибкам = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		ДополнительныеПараметры.Вставить("АдресСведенийПоОшибкам", АдресСведенийПоОшибкам);
		
	КонецЕсли;
	
	УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуНовыхСобытий(Сервис, Ложь, ДополнительныеПараметры);
	
	Если ОповещениеОбратногоВызова <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти