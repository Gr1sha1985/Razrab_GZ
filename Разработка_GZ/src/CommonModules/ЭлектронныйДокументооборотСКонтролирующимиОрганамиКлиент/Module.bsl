
////////////////////////////////////////////////////////////////////////////////
// Электронный документооборот с контролирующими органами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОткрытьПротоколОтправки

Процедура ОткрытьПротоколОтправки(Форма, КонтролирующийОрган) Экспорт
	
	Если КонтролирующийОрган = "ФСС" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиФССЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиФСРАРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		ДополнительныеПараметры = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколОтправкиФТСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		
		СвойстваПротоколаСервисСОС = СдачаОтчетностиЧерезСервисСпецоператораВызовСервера.ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет);
		СвойстваПротоколаЭДО = ДокументооборотСКОВызовСервера.ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет);
		
		ДатаПротоколаСервисСОС = ПолучитьДатуПротокола(СвойстваПротоколаСервисСОС);
		ДатаПротоколаЭДО = ПолучитьДатуПротокола(СвойстваПротоколаЭДО);
		
		Если ДатаПротоколаСервисСОС = '00010101' И ДатаПротоколаЭДО = '00010101' Тогда
			ПоказатьПредупреждение(, "Протокол не найден.");
			Возврат;
		ИначеЕсли ДатаПротоколаЭДО > ДатаПротоколаСервисСОС Тогда
			ПоказатьЗначение(, СвойстваПротоколаЭДО.Протокол);
		Иначе
			СдачаОтчетностиЧерезСервисСпецоператораКлиент.ПоказатьПротокол(Форма)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиФСС(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиФСРАРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиФСРАР(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиРПН(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправкиФТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ОткрытьПротоколОтправкиФТС(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		Форма,
		КонтролирующийОрган,
		КодРегионаВФорме = Неопределено,
		Знач ЭтоОтправкаИзФормыОтчетность = Ложь,
		Знач СсылкаНаОтчет = Неопределено,
		Знач ОрганизацияОтчета = Неопределено,
		Знач АдресГотовыхДанных = Неопределено,
		Знач ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	#Область НеИспользуется1СОтчетность
	
	Если ЭтоОтправкаИзФормыОтчетность Тогда
		ЭтоТипРегламентированныйОтчет = (ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет"));
	Иначе
		ЭтоТипРегламентированныйОтчет = РегламентированнаяОтчетностьЗагрузкаКлиент.ЭтоФормаРегламентированногоОтчета(Форма);
	КонецЕсли;
	
	Если ЭтоТипРегламентированныйОтчет И НЕ РегламентированнаяОтчетностьВызовСервера.Используется1СОтчетность() Тогда
		Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
			// Сохраняем перед отправкой.
			Если Форма.Модифицированность Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма",                        Форма);
				ДополнительныеПараметры.Вставить("КонтролирующийОрган",          КонтролирующийОрган);
				ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
				ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
				ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПродолжитьОтправкуПослеСохраненияРегОтчетаНеИспользуется1СОтчетность", ЭтотОбъект, ДополнительныеПараметры);
				Форма.СохранитьНаКлиенте(, ОписаниеОповещения);
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СсылкаНаОтчет = Неопределено Тогда
			СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		КонецЕсли;
		
		ОтправитьВКонтролирующийОрганНеИспользуется1СОтчетность(
			СсылкаНаОтчет, КонтролирующийОрган, Форма, ЭтоОтправкаИзФормыОтчетность);
		
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если КонтролирующийОрган = "ФСС" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма",                        Форма);
		ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
		ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
		ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФССЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма",                        Форма);
		ДополнительныеПараметры.Вставить("КодРегионаВФорме",             КодРегионаВФорме);
		ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
		ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
		ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
		ДополнительныеПараметры.Вставить("АдресГотовыхДанных",           АдресГотовыхДанных);
		ДополнительныеПараметры.Вставить("ИмяФайлаГотовыхДанных",        ИмяФайлаГотовыхДанных);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФСРАРЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма",                        Форма);
		ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
		ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
		ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма",                        Форма);
		ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
		ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
		ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФТСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли КонтролирующийОрган = "БанкРоссии" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма",                        Форма);
		ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
		ДополнительныеПараметры.Вставить("СсылкаНаОтчет",                СсылкаНаОтчет);
		ДополнительныеПараметры.Вставить("ОрганизацияОтчета",            ОрганизацияОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганБанкРоссииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	Иначе
		
		ДокументооборотСКОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
			Форма,
			КонтролирующийОрган,
			ЭтоОтправкаИзФормыОтчетность,
			СсылкаНаОтчет,
			ОрганизацияОтчета);
			
	КонецЕсли;

КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма                        = ДополнительныеПараметры.Форма;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет                = ДополнительныеПараметры.СсылкаНаОтчет;
	ОрганизацияОтчета            = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент            = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСС(
		Форма,
		ЭтоОтправкаИзФормыОтчетность,
		СсылкаНаОтчет,
		ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФСРАРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма 							= ДополнительныеПараметры.Форма;
	КодРегионаВФорме 				= ДополнительныеПараметры.КодРегионаВФорме;
	ЭтоОтправкаИзФормыОтчетность 	= ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет 					= ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета 				= ДополнительныеПараметры.ОрганизацияОтчета;
	АдресГотовыхДанных 				= ДополнительныеПараметры.АдресГотовыхДанных;
	ИмяФайлаГотовыхДанных 			= ДополнительныеПараметры.ИмяФайлаГотовыхДанных;
	КонтекстЭДОКлиент 				= Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСРАР(
		Форма,
		КодРегионаВФорме,
		ЭтоОтправкаИзФормыОтчетность,
		СсылкаНаОтчет,
		ОрганизацияОтчета,
		АдресГотовыхДанных,
		ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляРПН(Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганФТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЭтоОтправкаИзФормыОтчетность = ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет; 
	ОрганизацияОтчета = ДополнительныеПараметры.ОрганизацияОтчета;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФТС(Форма, ЭтоОтправкаИзФормыОтчетность, СсылкаНаОтчет, ОрганизацияОтчета);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганБанкРоссииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляБанкаРоссии(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#Область НеИспользуется1СОтчетность

Процедура ПродолжитьОтправкуПослеСохраненияРегОтчетаНеИспользуется1СОтчетность(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СсылкаНаОтчет = Неопределено Тогда
		ДополнительныеПараметры.СсылкаНаОтчет
			= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(ДополнительныеПараметры.Форма);
	КонецЕсли;
	
	ОтправитьВКонтролирующийОрганНеИспользуется1СОтчетность(
		ДополнительныеПараметры.СсылкаНаОтчет, ДополнительныеПараметры.КонтролирующийОрган,
		ДополнительныеПараметры.Форма, ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность);
	
КонецПроцедуры

Процедура ОтправитьВКонтролирующийОрганНеИспользуется1СОтчетность(СсылкаНаОтчет, КонтролирующийОрган, Форма, ЭтоОтправкаИзФормыОтчетность) Экспорт
	
	ДанныеВыгрузки = Новый Структура();
	
	ТипОтправляемогоДокумента = ТипЗнч(СсылкаНаОтчет);
	
	Приложения = Неопределено;
	
	Если ТипОтправляемогоДокумента = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		// Выгружаем.
		ТекстВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		КодировкаФайлаВыгрузки = "";
		ТипФайлаВыгрузки = "";
		РезультатВыгрузки = СдачаОтчетностиЧерезСервисСпецоператораКлиент.ВыгрузитьРегламентированныйОтчет(СсылкаНаОтчет, Ложь, ТекстВыгрузки, ИмяФайлаВыгрузки, КодировкаФайлаВыгрузки, ТипФайлаВыгрузки, Приложения, Форма.УникальныйИдентификатор);
		Если НЕ РезультатВыгрузки Тогда
			ТекстСообщения = НСтр("ru = 'Отправка отчета прервана.'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстВыгрузки) И ТипЗнч(ИмяФайлаВыгрузки) = Тип("Массив") И ИмяФайлаВыгрузки.Количество() = 1
			И ТипЗнч(Приложения) = Тип("Массив") И Приложения.Количество() > 0 И ТипЗнч(Приложения[0]) = Тип("Структура") Тогда
			ТекстВыгрузки = Приложения[0].АдресФайлаВыгрузки;
			ИмяФайлаВыгрузки = ИмяФайлаВыгрузки[0];
			ТипФайлаВыгрузки = Приложения[0].ТипФайлаВыгрузки;
			Приложения = Неопределено;
		КонецЕсли;
		
		ДанныеВыгрузки.Вставить("ТекстВыгрузки", ТекстВыгрузки);
		ДанныеВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
		ДанныеВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
		ДанныеВыгрузки.Вставить("ТипФайлаВыгрузки", ТипФайлаВыгрузки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Поддерживается отправка только регламентированных отчетов. Отправка отчета прервана.'");
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приложения) Тогда
		ИндексПриложения = 0;
		Пока ИндексПриложения < Приложения.Количество() Цикл
			Если Приложения[ИндексПриложения].ТипФайлаВыгрузки = "ПояснительнаяЗапискаКЕНВД" Тогда
				ДополнительныеВложенияДляОтправки = Новый СписокЗначений;
				ДополнительныеВложенияДляОтправки.Добавить(Приложения[ИндексПриложения].АдресФайлаВыгрузки,
					Приложения[ИндексПриложения].ИмяФайлаВыгрузки);
					
				ДанныеВыгрузки.Вставить("ДополнительныеВложенияДляОтправки", ДополнительныеВложенияДляОтправки);
				
				Приложения.Удалить(ИндексПриложения);
			Иначе
				ИндексПриложения = ИндексПриложения + 1;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеВыгрузки.Вставить("Приложения", Приложения);
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОтправитьВКонтролирующийОрганНеИспользуется1СОтчетность(
		СсылкаНаОтчет, КонтролирующийОрган, Форма, ЭтоОтправкаИзФормыОтчетность, ДанныеВыгрузки);
		
	Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
		// Оповещаем о завершении отправки
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Организация", ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма));
		ПараметрыОповещения.Вставить("Ссылка", СсылкаНаОтчет);
		Оповестить("Завершение отправки", ПараметрыОповещения, СсылкаНаОтчет);
	Иначе
		ДлительнаяОтправкаКлиент.ОповеститьОЗавершенииОбмена();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверитьВИнтернете

Процедура ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ДокументооборотСКОКлиент.ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПроверитьВИнтернете(Форма, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ДокументооборотСКОКлиент.ПроверитьВИнтернете(Форма, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой1СОтчетность

Процедура ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация = Неопределено, ПоказыватьКнопки = Неопределено) Экспорт
	
	ПарметрыОткрытия = Новый Структура();
	
	Если Организация <> Неопределено Тогда
		ПарметрыОткрытия.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ПоказыватьКнопки <> Неопределено Тогда
		ПарметрыОткрытия.Вставить("ПоказыватьКнопки", ПоказыватьКнопки);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключениеЗавершение", 
		ЭтотОбъект, 
		ПарметрыОткрытия);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПредложениеОформитьЗаявлениеНаПодключение", ПарметрыОткрытия,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключениеЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		
		Если ВходящийКонтекст.Свойство("Организация") Тогда
			Организация = ВходящийКонтекст.Организация;
		Иначе
			Организация = Неопределено;
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Организация,,,,,,Истина);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - Открыть форму мастера заявления на подключение или список, если заявление уже создано
//
// Параметры:
//  Организация				 - СпровочникСсылка.Организация - Если указана, мастер открывается с отбором по этой организации.
//  ВладелецОткрываемойФормы - ФормаКлиентскогоПриложения - форма, которая будет указана в качестве владельца для
//                             открываемой формы мастера.
//  ЗначениеКопирования		 - ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи - документ, который будет скопирован в новый
//  ВидЗаявления			 - Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи:
//          * ПервичноеЗаявление - ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
//          * ВторичноеЗаявление - ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
//  ПараметрыОткрытияМастера - Структура - параметры открытия формы заявления
//  ВыполняемоеОповещение    - ОписаниеОповещения - действие, которое будет выполнено после всех действий с заявлением.
//  ОткрыватьСписокЕслиЕстьЗаявление - Булево - Если Истина, то при наличии заявления будет открываться список заявлений. Если Ложь, то мастер.
//
Процедура ОткрытьФормуМастераЗаявленияНаПодключение(
		Организация 				= Неопределено, 
		ВладелецОткрываемойФормы 	= Неопределено,
		ЗначениеКопирования 		= Неопределено,
		ВидЗаявления 				= Неопределено,
		ПараметрыОткрытияМастера	= Неопределено,
		ВыполняемоеОповещение		= Неопределено,
		ОткрыватьСписокЕслиЕстьЗаявление = Ложь,
		НовыйСертификат             = Неопределено) Экспорт
		
	ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
	ДополнительныеПараметры.Вставить("Организация", 			 Организация);
	ДополнительныеПараметры.Вставить("ВладелецОткрываемойФормы", ВладелецОткрываемойФормы);
	ДополнительныеПараметры.Вставить("ЗначениеКопирования", 	 ЗначениеКопирования);
	ДополнительныеПараметры.Вставить("ВидЗаявления", 			 ВидЗаявления);
	ДополнительныеПараметры.Вставить("ПараметрыОткрытияМастера", ПараметрыОткрытияМастера);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",    ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ОткрыватьСписокЕслиЕстьЗаявление", ОткрыватьСписокЕслиЕстьЗаявление);
	ДополнительныеПараметры.Вставить("НовыйСертификат",          НовыйСертификат);
	
	ОткрытьФормуМастераЗаявленияНаПодключениеСлужебный(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьФормуМастераЗаявленияНаПодключениеСлужебный(ДополнительныеПараметры) Экспорт
	
	// Очень важно! Процедуру нельзя переносить в контейнер!
	// иначе не срабатывают обработчики ожидания и не отрывается форма мастера.
	// Особенность платформы 10185510.
	ПутьКОбъекту = ДокументооборотСКОВызовСервера.ПутьКОбъекту();
	
	Если ПутьКОбъекту = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Подключение к электронному документообороту невозможно: недостаточно прав.'"));
	Иначе
		
		Организация = ДополнительныеПараметры.Организация;

		Если ДополнительныеПараметры.Свойство("ОткрыватьСписокЕслиЕстьЗаявление") 
			И ДополнительныеПараметры.ОткрыватьСписокЕслиЕстьЗаявление 
			И ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЕстьЗаявления(Организация) Тогда
			
			// Внимание! Внутрь не передается обработчик оповещения
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение(Организация);
			
		Иначе
			
			ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
			// Не сереализуются, поэтому удаляем их из параметров и передаем в параметры процедуры ОткрытьФорму.
			ПараметрыФормы.Удалить("ВыполняемоеОповещение");
			ПараметрыФормы.Удалить("ВладелецОткрываемойФормы");
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОткрытьФормуЗаявления_ПослеОпределенияВидаФормы", 
				ЭтотОбъект, 
				ДополнительныеПараметры.ВыполняемоеОповещение);
				
			ОткрытьФорму(ПутьКОбъекту + ".Форма.Мастер_ОпределениеОткрываемойФормы", 
				ПараметрыФормы, 
				, 
				,
				,
				,
				ОписаниеОповещения);
				
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Так же эта процедура вызывается из формы Мастер_ОпределениеОткрываемойФормы
Процедура ОткрытьФормуЗаявления_ПослеОпределенияВидаФормы(Результат, ВыполняемоеОповещение) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь отказался от подключения к интернет поддержке пользователй.
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	
	ПараметрыПриложения.Вставить("БРО.ПараметрыОткрытияЗаявленияНаПодключение", ДополнительныеПараметры);
	
	// Обход ошибок платформы, исправленных в 8.3.11
	// {#10172430#}: Дочерняя форма исчезает при переключении в другое окно, родительская форма остается заблокированной
	// {#10177195#}: Блокируется форма "1С:Отчетность"
	// Ошибка воспроизводится в случае, если форма открывается и быстро закрывается программно, 
	// хотя фактически не успела закрыться.
	
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуМастераЗаявленияНаПодключение", 1, Истина);
	
КонецПроцедуры

Процедура ОткрытьФормуЗаявления_ПослеЗакрытияФормыБублика() Экспорт
	
	ДополнительныеПараметры = ПараметрыПриложения["БРО.ПараметрыОткрытияЗаявленияНаПодключение"];
	ПараметрыПриложения.Удалить("БРО.ПараметрыОткрытияЗаявленияНаПодключение");
	
	Результат 				= ДополнительныеПараметры.Результат;
	ВыполняемоеОповещение 	= ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если НЕ ОткрытьФормуЗаявления_ПродолжитьОткрытиеМастера(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуЗаявления_Завершение", 
		ЭтотОбъект,
		ВыполняемоеОповещение);
		
	// Чтобы потом хранить эти параметры в одном месте и при необходимости в исходном виде передать следующей форме.
	// Используется в форме Мастер_КонфликтКриптопровайдеров
	ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат.Параметры);
	ПараметрыФормы.Вставить("Параметры", Результат.Параметры);
		
	ОткрытьФорму(
		Результат.ИмяФормы, 
		ПараметрыФормы,
		,
		Новый УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		Результат.РежимОткрытияОкнаФормы);
			
КонецПроцедуры
	
Функция ОткрытьФормуЗаявления_ПродолжитьОткрытиеМастера(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтказалисьОтСозданияЗаявления = Результат.ИмяФормы = "";
	
	Если ОтказалисьОтСозданияЗаявления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
Процедура ОткрытьФормуЗаявления_Завершение(Результат, ВыполняемоеОповещение) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоздатьНовоеЗаявление") Тогда
		
		// Зайдем в эту ветку, если:
		// 1) заявление с первого раза не отправилось
		// и это вторая попытка создания заявления по кнопке "Подготовить новое заявление"
		// 2) в первичном заявлении оказалось, что уже есть учетная запись и пользователь
		// решил перейти к созданию заявления на изменение.
					
		ОткрытьФормуМастераЗаявленияНаПодключениеСлужебный(Результат);
			
	Иначе
			
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗаявленийНаПодключение(Организация = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуСпискаЗаявленийНаПодключениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗаявленийНаПодключениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Организация = ДополнительныеПараметры.Организация;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Подключение к электронному документообороту невозможно: недостаточно прав.'"));
		
	Иначе
		
		КонтекстЭДОКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуНастроекОбмена(Организация = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастроекОбменаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуНастроекОбменаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Организация = ДополнительныеПараметры.Организация;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Подключение к электронному документообороту невозможно: недостаточно прав.'"));
		
	Иначе
		
		КонтекстЭДОКлиент.ОткрытьФормуНастроекОбмена(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПараметрыПодключенияК1СОтчетности(Параметр, ФормаВладельца) Экспорт
	
	ТребуетсяПроверкаПараметров = Ложь;
	
	Если ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипФизЛица() Тогда
		
		// Изменилось физ лицо
		ТребуетсяПроверкаПараметров = Истина;
		Оповестить("Запись_ВладельцаИлиБухгалтера",,Параметр);
		
	ИначеЕсли ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипОрганизации() Тогда
		
		// Изменилась организация
		УчетнаяЗаписьОрганизации = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УчетнаяЗаписьОрганизации(Параметр);
		Если ЗначениеЗаполнено(УчетнаяЗаписьОрганизации) Тогда
			
			ТребуетсяПроверкаПараметров = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяПроверкаПараметров Тогда
		
		// Проверка прав
		ДополнительныеПараметры = Новый Структура("Параметр, ФормаВладельца", Параметр, ФормаВладельца);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПараметрыПодключенияК1СОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПараметрыПодключенияК1СОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент 	= Результат.КонтекстЭДО;
	Параметр 			= ДополнительныеПараметры.Параметр;
	ФормаВладельца 		= ДополнительныеПараметры.ФормаВладельца;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипФизЛица() Тогда
		
		// Изменилось физ лицо
		Организации = КонтекстЭДОКлиент.ОрганизацияФизЛицаИзДокументаЗаявления(Параметр);
		Для каждого Организация Из Организации Цикл
			КонтекстЭДОКлиент.ПоказатьФормуПредупрежденияОбИзменившихсяНастройкахПодключения(Организация, ФормаВладельца);
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(Параметр) = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ТипОрганизации() Тогда
		
		// Изменилась организация
		Организация = Параметр;
		КонтекстЭДОКлиент.ПоказатьФормуПредупрежденияОбИзменившихсяНастройкахПодключения(Организация, ФормаВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьКакПрочтенное(Ссылка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтметитьКакПрочтенное(Ссылка);
	Оповестить("Пометка прочтенным", , Ссылка);
	
КонецПроцедуры

// Открывает форму 1С-Отчетность на разделе "Новые"
//
Процедура Открыть1СОтчетностьНаЗакладкеНовое() Экспорт
	
	ПараметрыФормы = Новый Структура("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Новое"));
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");

КонецПроцедуры

#КонецОбласти

#Область ВыбратьКодОрганаТОГС

// Открывает форму выбора кодов ТОГС.
// ДополнительныеПараметры 	- Структура - возможные ключи структуры:
//	- ТекущийКодТОГС 		- Используется для позиционирования в списке на текущем ТОГС
//	- КодРегиона 			- по региону ищется текущй ТОГС и на нем позиционируется.
//	- Элемент 				- Элемент, для которого осуществляется выбор и в который будет 
//								возвращаться результат методом ОповеститьОВыборе.
//	- ОписаниеОповещения 	- используется в случае, если после выбора необходимо продолжть выполнение кода.
//
Процедура ВыбратьКодОрганаТОГС(ДополнительныеПараметры) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКодОрганаТОГСПослеПолученияКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	// В процедуре ниже ничего не писать - это асинхронный метод!

КонецПроцедуры

Процедура ВыбратьКодОрганаТОГСПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ВыбратьКодОрганаТОГС(ВходящийКонтекст);
	
КонецПроцедуры
 	
Процедура ВыбратьСотрудникаИзСписка(ОповещениеОЗавершении, Сотрудник, Организация, Владелец, СтандартнаяОбработка) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ВыбратьСотрудникаИзСписка(
		ОповещениеОЗавершении, Сотрудник, Организация, Владелец, СтандартнаяОбработка);
	
КонецПроцедуры
	
#КонецОбласти

// Открывает последний протокол по ссылке на отправляемый объект.
//
// Параметры:
//  Ссылка					 - ДокументСсылка, СправочникСсылка - ссылка на объект, отправляемый в контролирующие органы.
//  КонтролирующийОрган		 - Строка или Перечисление.ТипыКонтролирующихОрганов
//  Протокол				 - Строка или СправочникСсылка.ЦиклыОбмена/ОтправкиХХХХ или Неопределено:
//		- Идентификатор отправки (ЦиклыОбмена.Идентификатор) или ИдентификаторОтправкиНаСервере для отправок.
//		- Ссылка на цикл обмена или отправку.
//		- Если протокол не указан, то берется последний цикл обмена или отправка.
Процедура ПоказатьПротоколОтправки(Ссылка, КонтролирующийОрган = "ФНС", Протокол = Неопределено) Экспорт

	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ссылка", 				Ссылка);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("Протокол", 			Протокол);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПоследнийПротоколОтправкиЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);

КонецПроцедуры

Процедура ОткрытьПоследнийПротоколОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Ссылка 				= ДополнительныеПараметры.Ссылка;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	Протокол 			= ДополнительныеПараметры.Протокол;
	
	Если ТипЗнч(Протокол) = Тип("Строка") Тогда
		// Значит у нас идентификатор отправки, а не ссылка на отправку.
		Протокол = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтправкаПоИдентификатору(Протокол);
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОткрытьПротокол(Ссылка, КонтролирующийОрган, Протокол);
	
КонецПроцедуры

Процедура ОткрытьФормуСотрудникаНаРеквизите(ОповещениеОЗавершении, ФормаВладелец, Сотрудник, ЗначениеРеквизита, ИмяРеквизита) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуСотрудникаНаРеквизите(Сотрудник, ИмяРеквизита, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Если ИмяРеквизита = "СНИЛС" Тогда
			ОткрытьФорму(
				"Справочник.МакетыПенсионныхДел.Форма.ВводСНИЛС",
				Новый Структура("Сотрудник,СНИЛС", Сотрудник, ЗначениеРеквизита),
				ФормаВладелец,,,,
				ОповещениеОЗавершении);
		ИначеЕсли ИмяРеквизита = "АдресРегистрации" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Заголовок",               НСтр("ru = 'Ввод адреса'"));
			Параметры.Вставить("Представление", 		   ЗначениеРеквизита);
			Параметры.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(Параметры, , ОповещениеОЗавершении);
		ИначеЕсли ИмяРеквизита = "Телефон" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Заголовок",               НСтр("ru = 'Ввод телефона'"));
			Параметры.Вставить("Представление", 		   ЗначениеРеквизита);
			Параметры.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(Параметры, , ОповещениеОЗавершении);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗапросНаСверкуПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;

	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ПоказыватьРекламу 	= ВходящийКонтекст.ПоказыватьРекламу;
	Организация 		= ВходящийКонтекст.Организация;
	ВидУслуги 			= ВходящийКонтекст.ВидСверки;
	
	Если ПоказыватьРекламу
		И ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НужноПоказатьРекламу1СОтчетности(Организация) Тогда
		
		ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
		
	Иначе
		
		КонтекстЭДОКлиент.СоздатьЗапросНаСверку(Организация, ВидУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОтправкуИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтправкуИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОбновитьОтправкуИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку и организацию
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка 		= ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация = ДокументооборотСФССКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка 		= ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФСРАРКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка 		= ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСРПНКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		Ссылка 		= ДокументооборотСФТСКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФТСКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "БанкРоссии" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВБанкРоссии") Тогда
			МодульДокументооборотСБанкомРоссииКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСБанкомРоссииКлиентСервер");
			Ссылка 		= МодульДокументооборотСБанкомРоссииКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
			Организация	= МодульДокументооборотСБанкомРоссииКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);	
		КонецЕсли;
	Иначе
		Ссылка 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Получаем организацию из регистра сведений
		Сведения = КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Ссылка);
		Организация = Сведения.Организация;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиент.ОрганизацияПодключенаКНаправлению(Организация, КонтролирующийОрган) Тогда
		Возврат;
	КонецЕсли;
	
	// Отправка извещений
	ВыбранныеОрганизации = Новый Массив;
	ВыбранныеОрганизации.Добавить(Организация);
	
	ВыводитьПроценты = КонтролирующийОрган <> "ФСС" 
		И КонтролирующийОрган <> "ФСРАР"
		И КонтролирующийОрган <> "РПН"
		И КонтролирующийОрган <> "ФТС"
		И КонтролирующийОрган <> "БанкРоссии";
		
	ПараметрыДлительногоОбмена = ДлительнаяОтправкаКлиент.ПараметрыДлительногоОбмена();
	ПараметрыДлительногоОбмена.Организации 			= ВыбранныеОрганизации;
	ПараметрыДлительногоОбмена.ВыводитьПроценты 	= ВыводитьПроценты;
	ПараметрыДлительногоОбмена.ЭтоОбменИзОтчета 	= Истина;
	ПараметрыДлительногоОбмена.ОтчетСсылка 			= Ссылка;
	
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительногоОбмена(ПараметрыДлительногоОбмена) Тогда  // Обмен из панели отправки.
		Возврат;
	КонецЕсли;
	
	КонтекстДлительнойОперации = Новый Структура();
	КонтекстДлительнойОперации.Вставить("Форма",               Форма);
	КонтекстДлительнойОперации.Вставить("КонтролирующийОрган", КонтролирующийОрган);
	КонтекстДлительнойОперации.Вставить("Ссылка",              Ссылка);
	КонтекстДлительнойОперации.Вставить("Организация",         Организация);
	КонтекстДлительнойОперации.Вставить("КонтекстЭДОКлиент",   КонтекстЭДОКлиент);
	
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(КонтекстДлительнойОперации);
	
	// Глобальный обработчик из модуля ДлительнаяОтправкаКлиентГлобальный.
	ПодключитьОбработчикОжидания("Подключаемый_ОсуществитьОбменПоОрганизацииИзПанелиОтправки", 0.1, Истина);
	
КонецПроцедуры
	
Процедура ОсуществитьОбменПоОрганизацииИзПанелиОтправки() Экспорт
	
	ДополнительныеПараметры = ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПанельСостоянияОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма 				= ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	Организация 		= ДополнительныеПараметры.Организация;
	Ссылка 				= ДополнительныеПараметры.Ссылка;
	КонтекстЭДОКлиент 	= ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	ДополнительныеПараметры.Удалить("КонтекстЭДОКлиент");
	
	КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(
		Форма,
		Организация,
		ОписаниеОповещения,
		КонтролирующийОрган,
		Ссылка);

КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОтправкаКлиент.ОповеститьОЗавершенииОбмена(); // Обмен из панели отправки
	
	Форма 				= ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	Организация 		= ДополнительныеПараметры.Организация;
	Ссылка 				= ДополнительныеПараметры.Ссылка;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
	// Оповещаем о завершении отправки
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Организация);
	ПараметрыОповещения.Вставить("Ссылка", Ссылка);
	Оповестить("Завершение отправки", ПараметрыОповещения, Ссылка);
	
КонецПроцедуры

Процедура ОткрытьПротоколИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПротоколИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьПротоколИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;

	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		Ссылка = ДокументооборотСФТСКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОткрытьПротокол(Ссылка, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ОткрытьКритическиеОшибкиИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		Ссылка = ДокументооборотСФТСКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Ссылка", Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКритическиеОшибкиИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьКритическиеОшибкиИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Открываем критические ошибки
	КонтекстЭДОКлиент.ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку и организацию
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка 		= ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация = ДокументооборотСФССКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка 		= ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФСРАРКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка 		= ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСРПНКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		Ссылка 		= ДокументооборотСФТСКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСФТСКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	Иначе
		Ссылка 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
		Организация	= ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Получаем организацию из регистра сведений
		Сведения = КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Ссылка);
		Организация = Сведения.Организация;
	КонецЕсли;
	
	// Отправка извещений
	ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиПослеОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ОтправитьНеотправленныеИзвещенияОПриеме(Ссылка, Организация, КонтролирующийОрган, ОписаниеОповещения);
	
	
КонецПроцедуры

Процедура ОтправитьНеотправленноеИзвещениеИзПанелиОтправкиПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
	ПослеОтправкиНеотправленногоИзвещения();
	
КонецПроцедуры

Процедура ОткрытьСостояниеОтправкиИзПанелиОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	// По форме получаем ссылку
	Если КонтролирующийОрган = "ФСС" Тогда
		Ссылка = ДокументооборотСФССКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФСРАР" Тогда
		Ссылка = ДокументооборотСФСРАРКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "РПН" Тогда
		Ссылка = ДокументооборотСРПНКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ИначеЕсли КонтролирующийОрган = "ФТС" Тогда
		Ссылка = ДокументооборотСФТСКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	Иначе
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	// Получаем КонтекстЭДОКлиент
	
	ДополнительныеПараметры = Новый Структура("Ссылка", Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСостояниеОтправкиИзПанелиОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьСостояниеОтправкиИзПанелиОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Отображение формы статуса
	КонтекстЭДОКлиент.ПоказатьФормуСтатусовОтправки(Ссылка);
	
КонецПроцедуры

Процедура ПоказатьСостояниеОтправкиОтчетаПереопределяемый(Ссылка, СтандартнаяОбработка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПоказатьСостояниеОтправкиОтчета(Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтправитьВКонтролирующийОрганПереопределяемый(Ссылка, ВидКонтролирующегоОргана, КодКонтролирующегоОргана, СтандартнаяОбработка) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОтправитьВКонтролирующийОрган(Ссылка, ВидКонтролирующегоОргана, КодКонтролирующегоОргана, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПереопределяемый(Ссылка, СтандартнаяОбработка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПроверитьВИнтернете(Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОтборВидОтчетаНачалоВыбора(МассивВидовОтчетов) Экспорт
	
	// Сворачиваем макеты пенсионных дел в один элемент отбора.
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("Макет пенсионного дела");
	ВидыДокументов.Добавить("Заявление о назначении пенсии");
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ВидОтчета Из МассивВидовОтчетов Цикл
		Для каждого ВидДокумента Из ВидыДокументов Цикл
			Если СтрНайти(ВидОтчета, ВидДокумента) Тогда
				ЭлементыДляУдаления.Добавить(ВидОтчета);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивВидовОтчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивВидовОтчетов, ЭлементыДляУдаления);
	Если ЗначениеЗаполнено(ЭлементыДляУдаления) Тогда
		Для каждого ВидДокумента Из ВидыДокументов Цикл
			МассивВидовОтчетов.Добавить(ВидДокумента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// ОТПРАВКА ПОЯСНЕНИЯ ПО ДЕКЛАРАЦИИ ПО НДС
////////////////////////////////////////////////////////////////////////////////

Процедура ОтправитьПояснение(
		КонтекстЭДОКлиент,
		Пояснение,
		Организация,
		УникальныйИдентификатор,
		ОповещениеПослеОтправки,
		ДопТекст = Неопределено) Экспорт
	
	СведенияОЗаполнении = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СведенияОЗаполненииПоясненияКДекларацииПоНДС(Пояснение);
	
	Если НЕ СведенияОЗаполнении.ЕстьСтрокиДляОтправки Тогда
		Если СведенияОЗаполнении.ЕстьИзмененияПоНДС Тогда
			ТекстПредупреждения = НСтр("ru = 'Все строки, в которых указан ответ, содержат изменения в сумме начисленного НДС.
						|Отправка пояснения невозможна, внесите исправления в учетные данные и сформируйте корректирующую декларацию.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Нет ни одной строки, в которой указан ответ.
						|Отправка пояснения невозможна.'");
		КонецЕсли;
		ПоказатьПредупреждение( , ТекстПредупреждения, , НСтр("ru = 'Невозможно отправить пояснение'"));
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений();
	
	МассивСообщений = Новый Массив();
	
	Если СведенияОЗаполнении.ЕстьИзмененияПоНДС Тогда
		МассивСообщений.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Внимание!'"), , Новый Цвет(225, 40, 40)));
		МассивСообщений.Добавить(Новый ФорматированнаяСтрока(
								НСтр("ru = '
									|Изменилась сумма начисленного НДС. 
									|Внесите исправления в учетные данные и сформируйте корректирующую декларацию.
									|Строки, содержащие изменения по начисленному НДС, в пояснение включены не будут.'")));
		Кнопки.Добавить("ПОДГОТОВИТЬДЕКЛАРАЦИЮ", "Перейти к журналу отчетов");
	КонецЕсли;
	
	Кнопки.Добавить("ОТПРАВИТЬ", "Отправить пояснение");
	
	ТекстНеотвеченныеСтроки = "";
	Если СведенияОЗаполнении.ЕстьНеОтвеченныеСтроки Тогда
		Если СведенияОЗаполнении.ЕстьИзмененияПоНДС Тогда
			МассивСообщений.Добавить("
									|
									|");
		КонецЕсли;
		МассивСообщений.Добавить(Новый ФорматированнаяСтрока(
								НСтр("ru = 'В ФНС будут отправлены все те строки пояснения, по которым указан ответ.
								|Уточнение по остальным строкам требования можно будет отправить позже в другом пояснении.'")));
	КонецЕсли;
	
	Кнопки.Добавить("ОТМЕНА", "Отмена");
	
	Если ДопТекст <> Неопределено Тогда
		МассивСообщений.Добавить(ДопТекст);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент",        КонтекстЭДОКлиент);
	ДополнительныеПараметры.Вставить("Пояснение",                Пояснение);
	ДополнительныеПараметры.Вставить("Организация",              Организация);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор",  УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправки",  ОповещениеПослеОтправки);
	
	Если МассивСообщений.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбУточненнойДекларацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, Новый ФорматированнаяСтрока(МассивСообщений), Кнопки, , , НСтр("ru = 'Отправка пояснения'"));
	Иначе
		ВопросОбУточненнойДекларацииЗавершение("ОТПРАВИТЬ", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросОбУточненнойДекларацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент 		= ДополнительныеПараметры.КонтекстЭДОКлиент;
	Пояснение 				= ДополнительныеПараметры.Пояснение;
		
	Если Результат = "ОТПРАВИТЬ" Тогда
		
		Организация 			= ДополнительныеПараметры.Организация;
		УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
		ОповещениеПослеОтправки = ДополнительныеПараметры.ОповещениеПослеОтправки;
		
		КонтекстЭДОКлиент.ОтправкаОтветаНаТребованиеПоясненийКДекларацииНДС(
			Пояснение,
			Организация,
			УникальныйИдентификатор,
			ОповещениеПослеОтправки);
		
	ИначеЕсли Результат = "ПОДГОТОВИТЬДЕКЛАРАЦИЮ" Тогда
		
		КонтекстЭДОКлиент.ПодготовитьКорректирующуюДекларациюПоНДСИзПояснения(Пояснение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьДиалогОшибкиДоступаВИнтернет(ОписаниеОшибки, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки(ВыполняемоеОповещение) Тогда
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ОписаниеОшибки);
	Иначе
		ПараметрыФормы = Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьДиалогОшибкиДоступаВИнтернетЗавершение", ЭтотОбъект, ВыполняемоеОповещение);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ОшибкаДоступаВИнтернет", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьДиалогОшибкиДоступаВИнтернетЗавершение(Результат, ВыполняемоеОповещение) Экспорт
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьОтправкуОтчета(Ссылка, Организация, Наименование, ОповещениеОЗакрытии) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ссылка", 				Ссылка);
	ДополнительныеПараметры.Вставить("Наименование", 		Наименование);
	ДополнительныеПараметры.Вставить("Организация", 		Организация);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", 		Наименование);
	ДополнительныеПараметры.Вставить("СтраницаЖурнала", 
		ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
	ДополнительныеПараметры.Вставить("РежимВыбора", 		Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьОтправкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);

КонецПроцедуры
	
Процедура ВыбратьОтправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = ДополнительныеПараметры.ОповещениеОЗакрытии;
	ДополнительныеПараметры.Удалить("ОповещениеОЗакрытии");
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВсеОтправки",
		ДополнительныеПараметры,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Процедура определяет, открывать или нет из формы "1С-Отчетность" файлы, присоединенные к объекту.
//
// Параметры:
//  ПараметрыПроверки - Структура:
//   "Владелец"             - СправочникСсылка, ДокументСсылка - ссылка на объект;
//   "ТекстПредупреждения"  - Строка - если заполнен и СтандартнаяОбработка = Ложь, то будет выведено предупреждение;
//   "СтандартнаяОбработка" - Булево - если Ложь, открытие присоединенных файлов не выполняется.
//
Процедура ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки) Экспорт
	
	Если ТипЗнч(ПараметрыПроверки.Владелец) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		ПараметрыПроверки.СтандартнаяОбработка = Ложь;
		ПараметрыПроверки.ТекстПредупреждения = НСтр("ru = 'Присоединение файлов к ""Макету пенсионного дела"" должно выполняться из основной формы.'");
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПроверки.Владелец) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда
		ПараметрыПроверки.СтандартнаяОбработка = Ложь;
		ПараметрыПроверки.ТекстПредупреждения = НСтр("ru = 'Присоединение файлов к ""Заявлению о назначении и доставке пенсии"" должно выполняться из основной формы.'");
	КонецЕсли;
		
КонецПроцедуры

Функция ФормаОткрыта(ИмяФормы) Экспорт
	
	Окна = ПолучитьОкна();
	
	Если Окна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ОткрытоеОкно <> Неопределено Тогда
			ТекущаяФорма = ОткрытоеОкно.ПолучитьСодержимое();
			Если ТипЗнч(ТекущаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				Если СтрНайти(ТекущаяФорма.ИмяФормы, ИмяФормы) <> 0 Тогда 
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область СЭДОФСС

Функция ВидОперацииСЭДОФССПодписать() Экспорт
	
	Возврат "Подписать";
	
КонецФункции

Функция ВидОперацииСЭДОФССОтписать() Экспорт
	
	Возврат "Отписать";
	
КонецФункции

Функция ТипСобытияСЭДОФССИзменениеСостоянияЭЛН() Экспорт
	
	Возврат "CHANGE_STATE_MO";
	
КонецФункции

Процедура ПолучитьВходящиеСообщенияСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Организации = ДополнительныеПараметры.Организации;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(
		ОповещениеОбратногоВызова,
		Организации);
	
КонецПроцедуры

Процедура МетаданныеВходящихСообщенийСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Организации = ДополнительныеПараметры.Организации;
	ДатаСообщений = ДополнительныеПараметры.ДатаСообщений;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.МетаданныеВходящихСообщенийОрганизацийСЭДОФСС(ОповещениеОбратногоВызова,
		Организации,
		ДатаСообщений);
	
КонецПроцедуры

Процедура ПолучитьСообщенияСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Организация = ДополнительныеПараметры.Организация;
	Идентификаторы = ДополнительныеПараметры.Идентификаторы;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучитьСообщенияСЭДОФСС(ОповещениеОбратногоВызова,
		Организация,
		Идентификаторы);

КонецПроцедуры

Процедура ПодписатьОтписатьСписокСНИСЛСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	СНИЛСыСотрудниковОрганизаций = ДополнительныеПараметры.СНИЛСыСотрудниковОрганизаций;
	Операция = ДополнительныеПараметры.Операция;
	ТипСобытия = ДополнительныеПараметры.ТипСобытия;
	ПринудительноОткрепить = ДополнительныеПараметры.ПринудительноОткрепить;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Операция = ВидОперацииСЭДОФССПодписать() Тогда
		// В массив СНИЛС сотрудников добавляем параметр принудительного открепления.
		СНИЛСыСотрудниковОрганизацийПодписка = Новый Соответствие;
		Для каждого КлючЗначение Из СНИЛСыСотрудниковОрганизаций Цикл
			Организация = КлючЗначение.Ключ;
			СНИЛСыСотрудников = Новый Массив;
			Для каждого СНИЛС Из КлючЗначение.Значение Цикл
				ПараметрыПодписки = Новый Структура;
				ПараметрыПодписки.Вставить("СНИЛС", СНИЛС);
				ПараметрыПодписки.Вставить("ПринудительноОткрепить", ПринудительноОткрепить);
				СНИЛСыСотрудников.Добавить(ПараметрыПодписки);
			КонецЦикла;
			СНИЛСыСотрудниковОрганизацийПодписка.Вставить(Организация, СНИЛСыСотрудников);
		КонецЦикла;
		КонтекстЭДОКлиент.ПодписатьОтписатьСотрудниковОрганизацийНаУведомленияЭЛНСЭДОФСС(
			ОповещениеОбратногоВызова,
			СНИЛСыСотрудниковОрганизацийПодписка,
			Операция);
	Иначе
		КонтекстЭДОКлиент.ПодписатьОтписатьСотрудниковОрганизацийНаУведомленияЭЛНСЭДОФСС(
			ОповещениеОбратногоВызова,
			СНИЛСыСотрудниковОрганизаций,
			Операция);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьОтписатьСтрахователяСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Организация = ДополнительныеПараметры.Организация;
	Операция = ДополнительныеПараметры.Операция;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Операция = ВидОперацииСЭДОФССПодписать() Тогда
		КонтекстЭДОКлиент.ПодписатьСтрахователяНаУведомленияПоЭЛН(ОповещениеОбратногоВызова,
			Организация);
	Иначе
		КонтекстЭДОКлиент.ОтписатьСтрахователяОтУведомленийПоЭЛН(ОповещениеОбратногоВызова,
			Организация);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПодтверждениеПрочтенияСообщенийСЭДОФССПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Организация = ДополнительныеПараметры.Организация;
	ИдентификаторыСообщений = ДополнительныеПараметры.ИдентификаторыСообщений;
	ПослеОтправкиПолучитьВходящие = ДополнительныеПараметры.ПослеОтправкиПолучитьВходящие;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПодтверждениеПрочтенияСообщенийСЭДОФСС(ОповещениеОбратногоВызова,
		Организация,
		ИдентификаторыСообщений,
		ПослеОтправкиПолучитьВходящие);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЛисткамиНетрудоспособностиСФСС

Процедура ПолучитьДанныеЭЛНИзФССПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ВыполняемоеОповещение 	= ВходящийКонтекст.ВыполняемоеОповещение;
	ЗапросДляПолученияЭЛН 	= ВходящийКонтекст.ЗапросДляПолученияЭЛН;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучитьДанныеЭЛНИзФСС(ВыполняемоеОповещение, ЗапросДляПолученияЭЛН);
	
КонецПроцедуры

Процедура ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФССПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ВыполняемоеОповещение 		= ВходящийКонтекст.ВыполняемоеОповещение;
	ВыгрузкаРеестраДанныхЭЛН 	= ВходящийКонтекст.ВыгрузкаРеестраДанныхЭЛН;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС(ВыполняемоеОповещение, ВыгрузкаРеестраДанныхЭЛН);
	
КонецПроцедуры

Процедура АдресПодписанногоSOAPЗагрузкиЭЛНВФССПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ВыполняемоеОповещение 	= ВходящийКонтекст.ВыполняемоеОповещение;
	ОрганизацияСсылка 		= ВходящийКонтекст.ОрганизацияСсылка;
	РегистрационныйНомерФСС = ВходящийКонтекст.РегистрационныйНомерФСС;
	ВыгрузкаЭЛН 			= ВходящийКонтекст.ВыгрузкаЭЛН;
	ЗашифроватьSOAP 		= ВходящийКонтекст.ЗашифроватьSOAP;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.АдресПодписанногоSOAPЗагрузкиЭЛНВФСС(
		ВыполняемоеОповещение,
		ОрганизацияСсылка,
		РегистрационныйНомерФСС,
		ВыгрузкаЭЛН,
		ЗашифроватьSOAP);
	
КонецПроцедуры

Процедура АдресПодписанногоSOAPОперацииСЭЛНВФССПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ВыполняемоеОповещение 		= ВходящийКонтекст.ВыполняемоеОповещение;
	ВыгрузкаЗапросаОперацииСЭЛН = ВходящийКонтекст.ВыгрузкаЗапросаОперацииСЭЛН;
	ЗашифроватьSOAP 			= ВходящийКонтекст.ЗашифроватьSOAP;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.АдресПодписанногоSOAPОперацииСЭЛНВФСС(
		ВыполняемоеОповещение,
		ВыгрузкаЗапросаОперацииСЭЛН,
		ЗашифроватьSOAP);
	
КонецПроцедуры

Процедура ПроверитьПодписьSOAPОтветаЭЛНВФССПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ВыполняемоеОповещение 		= ВходящийКонтекст.ВыполняемоеОповещение;
	ОрганизацияСсылка 			= ВходящийКонтекст.ОрганизацияСсылка;
	АдресПодписанногоОтветаSOAP = ВходящийКонтекст.АдресПодписанногоОтветаSOAP;
	РасшифроватьSOAP 			= ВходящийКонтекст.РасшифроватьSOAP;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПроверитьПодписьSOAPОтветаЭЛНВФСС(
		ВыполняемоеОповещение,
		ОрганизацияСсылка,
		АдресПодписанногоОтветаSOAP,
		РасшифроватьSOAP);
	
КонецПроцедуры

#КонецОбласти

#Область ДляПереопределенияВРасширениях

Процедура ТранспортноеСообщение_ПослеЗавершенияРасшифровки() Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры
 
Процедура ПослеОтправкиНеотправленногоИзвещения() Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры

Процедура ПослеЗавершенияДлительногоДействия() Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры

Процедура ФормаСостоянияОтправки_ПослеОтправкиНеотправленногоИзвещения() Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры

Процедура ФормаНовыхСобытий_ПослеОткрытия() Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры

Процедура ПослеЗавершенияРасшифровки(Результат, ВходящийКонтекст) Экспорт

	// Это событие будет переопределено в расширении
	Выполнено = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьОтчетИзФормы1СОтчетность(Форма, КонтекстЭДОКлиент, ТекущиеДанные) Экспорт
	
	ТекущиеДанныеНаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование);
	
	// Переопределяем отправку в контролирующий орган
	ВыполнитьСтандартнуюОтправкуОтчета = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьВКонтролирующийОрганПереопределяемый(
		ТекущиеДанные.РегламентированныйОтчет, 
		ТекущиеДанные.ВидКонтролирующегоОргана, 
		ТекущиеДанные.КодКонтролирующегоОргана, 
		ВыполнитьСтандартнуюОтправкуОтчета);

	// Если отправка была выполнена в переопределяемой процедуре, то стандартную отправку не выполняем
	Если ВыполнитьСтандартнуюОтправкуОтчета Тогда
		Если КонтекстЭДОКлиент = Неопределено Тогда
			
			РегламентированнаяОтчетностьКлиент.ПоказатьИВернутьОшибку(
				Форма, 
				Форма.ТекстОшибкиИнициализацииКонтекстаЭДО);
				
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган
			И ТекущиеДанныеНаименованиеОтчета <> "Подтверждение вида деятельности" Тогда
			
			Текст = НСтр("ru = 'Отправка отчета в электронном виде не предусмотрена законодательством.
												|Отчет сдается в бумажном виде'");
			
			РегламентированнаяОтчетностьКлиент.ПоказатьИВернутьОшибку(
				Форма, 
				Текст);
				
			Возврат;
			
		Иначе
			
			Ссылка = ТекущиеДанные.РегламентированныйОтчет;
			
			КонтролирующийОрган = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИмяПеречисления(ТекущиеДанные.ВидКонтролирующегоОргана);
			
			Если ЗначениеЗаполнено(КонтролирующийОрган) Тогда
				Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.МакетыПенсионныхДел")
					ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда

					Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда
						ЕстьОшибка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СканыЗаявленийНеПриложены(Ссылка);
						Если ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки(, Истина) Тогда
							ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке();
						КонецЕсли;
						Если ЕстьОшибка Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;

					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("Форма", Форма);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ОтправитьПисьмоИзФормы1СОтчетность_Завершение", 
						ЭтотОбъект,
						ДополнительныеПараметры);
					
					КонтекстЭДОКлиент.ОтправкаМакетаПенсионногоДелаИЗаявления(
						Ссылка, 
						ТекущиеДанные.Организация, 
						ОписаниеОповещения);
					
				Иначе
						
					КраткоеИмяФормы = ДлительнаяОтправкаКлиентСервер.ИмяФормыПоПолномуИмени(Форма.ИмяФормы);
					ЭтоОтправкаИзФормы1СОтчетность = КраткоеИмяФормы = "РегламентированнаяОтчетность";
					
					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("КонтролирующийОрган", КонтролирующийОрган);
					ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
					ДополнительныеПараметры.Вставить("Организация", ТекущиеДанные.Организация);
					ДополнительныеПараметры.Вставить("Форма", Форма);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ОтправитьОтчетПодтверждениеОтправкиОтчетаЗавершение", 
						ЭтотОбъект, 
						ДополнительныеПараметры);
						
					КонтекстЭДОКлиент.ПодтверждениеОтправкиОтчета(
						Форма, 
						ОписаниеОповещения, 
						Ссылка,
						ЭтоОтправкаИзФормы1СОтчетность);
					
				КонецЕсли;
					
			Иначе
				
				Текст = НСтр("ru = 'Не указан контролирующий орган. Отправка невозможна'");
				РегламентированнаяОтчетностьКлиент.ПоказатьИВернутьОшибку(
					Форма, 
					Текст);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОтправитьОтчетПодтверждениеОтправкиОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", 
			РегламентированнаяОтчетностьКлиент, 
			ДополнительныеПараметры);
			
		РегламентированнаяОтчетностьКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
		Возврат;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтправитьОтчетПослеПроверок", 
			РегламентированнаяОтчетностьКлиент, 
			ДополнительныеПараметры);
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмоИзФормы1СОтчетность_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	Форма.ОтправитьПисьмаЗавершение(Результат, ВходящийКонтекст);
	
КонецПроцедуры

#Область ТикетыВЗаявлении

Процедура ПерейтиНаПортал() Экспорт
	
	URLСтраницыПорталаПоддержки = МодульИнтернетПоддержкаПользователейКлиентСервер().URLСтраницыПорталаПоддержки();
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке(URLСтраницыПорталаПоддержки);
	
КонецПроцедуры

Функция МодульИнтернетПоддержкаПользователейКлиентСервер() Экспорт
	
	Попытка
		Возврат ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиентСервер");
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

Функция МодульИнтернетПоддержкаПользователейКлиент() Экспорт
	
	Попытка
		Возврат ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#КонецОбласти

Функция ПолучитьДатуПротокола(СвойстваПротокола)
	
	Если СвойстваПротокола = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если СвойстваПротокола.Дата = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат СвойстваПротокола.Дата;
	
КонецФункции

#Область ОбработкаКартинок

#Область ПараметрыМетодаДобавитьФайлы

Функция ПараметрыВыбораКартинок_ОтветНаТребованиеДокументов(МножественныйВыбор = Истина) Экспорт
	
	Требования = ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 	Требования.ДопустимыеТипыФайлов);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерФайла", 60*1024*1024);
	ДополнительныеПараметры.Вставить("ВозвращатьРазмер", 		Истина);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", 		МножественныйВыбор);
	ДополнительныеПараметры.Вставить("Требования", 		        Требования);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ПараметрыВыбораКартинок_Письма(Тип) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 	"");
	ДополнительныеПараметры.Вставить("ВозвращатьРазмер", 		Истина);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", 		Истина);
	
	Если Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС") Тогда
		ДополнительныеПараметры.Вставить("Требования", ТребованияКИзображениямВПисьмахВФНС());
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#Область ТребованияКИзображениям


Функция ТребованияКИзображениямОтветаНаТребованиеДокументов() Экспорт
	
	// Требования установлены ПРИКАЗом от 18 января 2017 г. N ММВ-7-6/16@ (ответ на требование документов). 
	// Расширение имени файла - tif | jpg | pdf | png. К файлам, содержащим отсканированные изображения, предъявляются следующие требования: 
	// черно-белое изображение с разрешением отсканированного документа не менее 150 и не более 300 точек на дюйм 
	// с использованием 256 градаций серого цвета. ФНС проверяет только те свойства, которые есть в картинке.
	
	ПараметрыМетода = ОперацииСФайламиЭДКОКлиент.ТребованияКСканам();
	
	ПараметрыМетода.Вставить("ДопустимыеТипыФайлов", 	    "jpg;tif;png;pdf");
	ПараметрыМетода.Вставить("ГлубинаЦвета", 				"БитНаПиксел8"); // 2^8 = 256
	ПараметрыМетода.Вставить("ПреобразоватьВОттенкиСерого", Истина);
	ПараметрыМетода.Вставить("МинимальнаяПлотность",		150);
	ПараметрыМетода.Вставить("МаксимальнаяПлотность", 		300);
	ПараметрыМетода.Вставить("МаксимальныйРазмерФайла", 	60*1024*1024);
	ПараметрыМетода.Вставить("Пояснение", 					НСтр("ru = 'Суммарный размер файлов должен быть не более 72 Мб'"));
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция ТребованияКИзображениямВПисьмахВФНС(ИгнорироватьОшибки = Ложь) Экспорт
	
	// Требования установлены ПРИКАЗом от 9 ноября 2010 г. N ММВ-7-6/535@ (общие требования для пакетов ФНС). 
	// Для неформализованных документов в форматах JPEG, TIFF, а также изображений, вложенных в документы формата 
	// PDF, RTF, Microsoft Word, Microsoft Excel, Open Document Text, Document Spreadsheet, 
	// Open XML Word и Open XML Spreadsheet, содержащих отсканированные изображения, предъявляются следующие требования: 
	// черно-белое изображение с разрешением отсканированного документа не менее 150 и не более 300 точек на дюйм с 
	// использованием 256 градаций серого цвета. ФНС проверяет только те свойства, которые есть в картинке.
	
	ПараметрыМетода = ОперацииСФайламиЭДКОКлиент.ТребованияКСканам();
	
	ПараметрыМетода.Вставить("ДопустимыеТипыФайлов", 		ДопустимыеТипыФайловПисемВФНС());
	ПараметрыМетода.Вставить("ГлубинаЦвета", 				"БитНаПиксел8"); // 2^8 = 256
	ПараметрыМетода.Вставить("ПреобразоватьВОттенкиСерого", Истина);
	ПараметрыМетода.Вставить("МинимальнаяПлотность",		150);
	ПараметрыМетода.Вставить("МаксимальнаяПлотность", 		300);
	ПараметрыМетода.Вставить("РазрешатьДругиеТипы",         Истина);
	ПараметрыМетода.Вставить("ИгнорироватьОшибки",          ИгнорироватьОшибки);
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция ТребованияКИзображениямВМакетахПенсионныхДел(ДопустимыеТипыФайлов, МаксимальныйРазмерФайла, ИгнорироватьОшибки = Ложь) Экспорт
	
	ПараметрыМетода = ОперацииСФайламиЭДКОКлиент.ТребованияКСканам();
	
	ПараметрыМетода.Вставить("ДопустимыеТипыФайлов", 	    ДопустимыеТипыФайлов); // Присылает Калуга
	ПараметрыМетода.Вставить("МаксимальныйРазмерФайла", 	МаксимальныйРазмерФайла); // Присылает Калуга
	ПараметрыМетода.Вставить("МаксимальнаяПлотность", 		300);
	ПараметрыМетода.Вставить("ГлубинаЦвета", 				"БитНаПиксел24");
	ПараметрыМетода.Вставить("Пояснение", 					НСтр("ru = 'Письма, содержащие изображения, не соответствующие указанным требованиям, могут быть не приняты ПФР.'"));
	ПараметрыМетода.Вставить("ИгнорироватьОшибки",          ИгнорироватьОшибки);
	ПараметрыМетода.Вставить("РасширениеПоУмолчанию",       РасширениеПоУмолчаниюИзДопустимыхТипов(ДопустимыеТипыФайлов)); // Присылает Калуга 
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция ТребованияКИзображениямВЗаявленииПо1СОтчетности() Экспорт
	
	ДополнительныеПараметры = ОперацииСФайламиЭДКОКлиент.ТребованияКСканам();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 		"jpeg;jpg;png;pdf");
	ДополнительныеПараметры.Вставить("ГлубинаЦвета", 				"БитНаПиксел24");
	ДополнительныеПараметры.Вставить("ПреобразоватьВОттенкиСерого", Ложь);
	ДополнительныеПараметры.Вставить("МинимальнаяПлотность", 		150);
	ДополнительныеПараметры.Вставить("МаксимальнаяПлотность", 		400);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерФайла", 	10 * 1024 * 1024);

	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ТребованияКИзображениямВЗаявленииНаПенсию(ДопустимыеТипыФайлов, МаксимальныйРазмерФайла, ИгнорироватьОшибки = Ложь) Экспорт
	
	Требования = Новый Структура;
	
	ДополнительныеПараметры = ОперацииСФайламиЭДКОКлиент.ТребованияКСканам();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 		ДопустимыеТипыФайлов);  // Присылает Калуга
	ДополнительныеПараметры.Вставить("ГлубинаЦвета", 				"БитНаПиксел24");
	ДополнительныеПараметры.Вставить("ПреобразоватьВОттенкиСерого", Ложь);
	ДополнительныеПараметры.Вставить("МинимальнаяПлотность", 		150);
	ДополнительныеПараметры.Вставить("МаксимальнаяПлотность", 		400);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерФайла", 	МаксимальныйРазмерФайла); // Присылает Калуга
	ДополнительныеПараметры.Вставить("ИгнорироватьОшибки",          ИгнорироватьОшибки);
	ДополнительныеПараметры.Вставить("РасширениеПоУмолчанию",       РасширениеПоУмолчаниюИзДопустимыхТипов(ДопустимыеТипыФайлов)); // Присылает Калуга

	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция РасширениеПоУмолчаниюИзДопустимыхТипов(ДопустимыеТипыФайлов)
	
	Если ЗначениеЗаполнено(ДопустимыеТипыФайлов) Тогда
		ДопустимыеТипыФайловМассив = СтрРазделить(ДопустимыеТипыФайлов, ";");
		РасширениеПоУмолчанию      = ДопустимыеТипыФайловМассив[0];
	Иначе
		РасширениеПоУмолчанию      = ОперацииСФайламиЭДКОКлиент.РасширениеПоУмолчанию();
	КонецЕсли;
	
	Возврат РасширениеПоУмолчанию;

КонецФункции	

Функция ДопустимыеТипыФайловПисемВФНС()
	
	ДопустимыеТипыФайлов = Новый Массив;
	ДопустимыеТипыФайлов.Добавить(ФорматКартинки.JPEG);
	ДопустимыеТипыФайлов.Добавить(ФорматКартинки.TIFF);
	ДопустимыеТипыФайлов.Добавить(ФорматКартинки.PNG);
	ДопустимыеТипыФайлов.Добавить("pdf");
	
	Расширения = ОперацииСФайламиЭДКОВызовСервера.РасширенияПоФорматам(ДопустимыеТипыФайлов);
	
	Расширения = СтрСоединить(Расширения, ";");
	
	Возврат Расширения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОрганизацияФоновыхЗаданий

Процедура ФоноваяОперацияПоРасшифровкеСообщений_Результат(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = ВходящийКонтекст.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ФоноваяОперацияПоРасшифровкеСообщений_Результат(ДлительнаяОперация, ВходящийКонтекст);
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяОтправка

Процедура ВернутьОшибку(Форма = Неопределено, ТекстОшибки = "") Экспорт
	
	ФормаГрупповойОтправки = ДлительнаяОтправкаКлиент.ФормаГрупповойОтправкиИзОткрытых();
	Если ФормаГрупповойОтправки <> Неопределено Тогда
		Если ФормаГрупповойОтправки.ВыполняетсяОтправка	Тогда
			ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ТекстОшибки);
		ИначеЕсли ФормаГрупповойОтправки.ВыполняетсяПроверка Тогда
			ДлительнаяОтправкаКлиент.ОповеститьОРезультатеПроверкиВИнтернете(Ложь, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИВернутьОшибку(Форма = Неопределено, ТекстОшибки = "") Экспорт
	
	ЭтоГрупповаяОтправка = ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки(Форма, Истина);
	
	Если ЭтоГрупповаяОтправка Тогда
		ВернутьОшибку(Форма, ТекстОшибки);
	Иначе
		ПоказатьПредупреждение( , ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьИВернутьОшибку(Форма, ТекстОшибки = "") Экспорт
	
	ЭтоГрупповаяОтправка = ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки(Форма, Истина);
	ОповещениеОЗавершении = ДлительнаяОтправкаКлиент.ОповещениеОЗавершенииГрупповогоДействия(Форма);
	
	Если ЭтоГрупповаяОтправка Тогда
		ВернутьОшибку(Форма, ТекстОшибки);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
