#Область ПрограммныйИнтерфейс

// Формирует текст сообщения об ошибках банковского счета в зависимости от результата проверки
//
// Параметры:
//  РезультатПроверки - Структура - состав полей см. НовыйРезультатПроверкиСчета
//  ПризнакСчета - Структура - см. НовыйПризнакСчета
//
// Возвращаемое значение:
//  Строка - текст с предупреждением для проверяемого счета. Если для счета нет предупреждения,
//           то возвращается пустая строка
//
Функция ТекстОшибкиБанковскогоСчета(РезультатПроверки, ПризнакСчета) Экспорт
	
	ТекстОшибки = "";
	
	Если РезультатПроверки.ДеятельностьБанкаПрекращена Тогда
		ТекстОшибки = НСтр("ru = 'БИК банка не найден в классификаторе банков ЦБ РФ'");
	ИначеЕсли РезультатПроверки.ПомеченНаУдаление Тогда
		Если ПризнакСчета.СчетОрганизации Тогда
			ТекстОшибки = НСтр("ru = 'Счет организации помечен на удаление'");
		ИначеЕсли ПризнакСчета.СчетКонтрагента Тогда
			ТекстОшибки = НСтр("ru = 'Счет контрагента помечен на удаление'");
		ИначеЕсли ПризнакСчета.СчетСотрудника Тогда
			ТекстОшибки = НСтр("ru = 'Счет сотрудника помечен на удаление'");
		КонецЕсли;
	ИначеЕсли РезультатПроверки.Закрыт Тогда
		Если ПризнакСчета.СчетОрганизации Тогда
			ТекстОшибки = НСтр("ru = 'Счет организации закрыт'");
		ИначеЕсли ПризнакСчета.СчетКонтрагента Тогда
			ТекстОшибки = НСтр("ru = 'Счет контрагента закрыт'");
		ИначеЕсли ПризнакСчета.СчетСотрудника Тогда
			ТекстОшибки = НСтр("ru = 'Счет сотрудника закрыт'");
		КонецЕсли;
	ИначеЕсли РезультатПроверки.НеОткрыт Тогда
		Если ПризнакСчета.СчетОрганизации Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Счет организации открыт с %1'"), Формат(РезультатПроверки.ДатаОткрытия, "ДЛФ=D"));
		ИначеЕсли ПризнакСчета.СчетКонтрагента Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Счет контрагента открыт с %1'"), Формат(РезультатПроверки.ДатаОткрытия, "ДЛФ=D"));
		ИначеЕсли ПризнакСчета.СчетСотрудника Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Счет сотрудника открыт с %1'"), Формат(РезультатПроверки.ДатаОткрытия, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает результат проверки банковского счета на наличие ошибок
//
// Параметры:
//  Счет - СправочникСсылка.БанковскиеСчета - проверяемый счет
//  ДатаПроверки - Дата - дата, на которую проводится проверка
//
// Возвращаемое значение:
//  Структура - ключи структуры соответствуют именам колонок таблицы, возвращаемой функцией НовыйРезультатПроверкиСчета
//
Функция ПроверитьКорректностьБанковскогоСчета(Счет, Знач ДатаПроверки = Неопределено) Экспорт
	
	ДанныеДляПроверки = НовыеДанныеДляПроверкиСчетов();
	СтрокаПроверяемыхДанных = ДанныеДляПроверки.Добавить();
	СтрокаПроверяемыхДанных.Счет = Счет;
	СтрокаПроверяемыхДанных.ПроверяемаяДата = ДатаПроверки;
	РезультатПроверки = ПроверитьКорректностьБанковскихСчетов(ДанныеДляПроверки);
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатПроверки[0]);
	
КонецФункции

// Возвращает результат проверки банковских счетов на наличие ошибок
//
// Параметры:
//  ПроверяемыеЗначения - ТаблицаЗначений - см. НовыеДанныеДляПроверкиСчетов
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатПроверкиСчета
//
Функция ПроверитьКорректностьБанковскихСчетов(ПроверяемыеЗначения) Экспорт
	
	РезультатПроверки = НовыйРезультатПроверкиСчета();
	ПроверяемыеСчета = ОбщегоНазначения.ВыгрузитьКолонку(ПроверяемыеЗначения, "Счет", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления,
		|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
		|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия,
		|	БанковскиеСчета.Банк КАК Банк,
		|	БанковскиеСчета.Банк.РучноеИзменение КАК БанкРучноеИзменение,
		|	БанковскиеСчета.Владелец КАК Владелец
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Ссылка В(&ПроверяемыеСчета)";
	
	Запрос.УстановитьПараметр("ПроверяемыеСчета", ПроверяемыеСчета);
	ДанныеСчетов = Запрос.Выполнить().Выгрузить();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Значение Из ПроверяемыеЗначения Цикл
		ПроверяемаяДата = ?(ЗначениеЗаполнено(Значение.ПроверяемаяДата), Значение.ПроверяемаяДата, ДатаСеанса);
		СтрокаРезультата = РезультатПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, Значение);
		СтрокаРезультата.ПроверяемаяДата = ПроверяемаяДата;
		ДанныеСчета = ДанныеСчетов.Найти(Значение.Счет, "Ссылка");
		Если ДанныеСчета <> Неопределено Тогда
			СтрокаРезультата.ДеятельностьБанкаПрекращена = ДеятельностьБанкаПрекращена(ДанныеСчета.БанкРучноеИзменение);
			СтрокаРезультата.ПомеченНаУдаление = ДанныеСчета.ПометкаУдаления;
			СтрокаРезультата.Закрыт =
				ЗначениеЗаполнено(ДанныеСчета.ДатаЗакрытия) И ДанныеСчета.ДатаЗакрытия <= ПроверяемаяДата;
			СтрокаРезультата.НеОткрыт =
				ЗначениеЗаполнено(ДанныеСчета.ДатаОткрытия) И ДанныеСчета.ДатаОткрытия > ПроверяемаяДата;
			СтрокаРезультата.ДатаОткрытия = ДанныеСчета.ДатаОткрытия;
			СтрокаРезультата.Владелец = ДанныеСчета.Владелец;
			СтрокаРезультата.ЕстьОшибки = СтрокаРезультата.ДеятельностьБанкаПрекращена Или СтрокаРезультата.ПомеченНаУдаление
				Или СтрокаРезультата.Закрыт Или СтрокаРезультата.НеОткрыт;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак недействующего банка по реквизиту банка РучноеИзменение.
//
// Параметры:
//  РучноеИзменение - Число - если 3, то деятельность прекращена.
// 
// Возвращаемое значение:
//  Булево -  признак недействующего банка.
//
Функция ДеятельностьБанкаПрекращена(РучноеИзменение) Экспорт
	
	Возврат ?(РучноеИзменение = 3, Истина, Ложь);
	
КонецФункции

// Конструктор параметра "ПроверяемыеЗначения" функции "ПроверитьКорректностьБанковскихСчетов"
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция НовыеДанныеДляПроверкиСчетов() Экспорт
	
	ДанныеДляПроверки = Новый ТаблицаЗначений;
	ДанныеДляПроверки.Колонки.Добавить("Счет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ДанныеДляПроверки.Колонки.Добавить("ПроверяемаяДата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Возврат ДанныеДляПроверки;
	
КонецФункции

// Конструктор параметра "ПризнакСчета" функции "ТекстОшибкиБанковскогоСчета"
//
// Возвращаемое значение:
//  Структура
//
Функция НовыйПризнакСчета() Экспорт
	
	ПризнакиСчета= Новый Структура;
	ПризнакиСчета.Вставить("СчетОрганизации", Ложь);
	ПризнакиСчета.Вставить("СчетКонтрагента", Ложь);
	ПризнакиСчета.Вставить("СчетСотрудника", Ложь);
	Возврат ПризнакиСчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРезультатПроверкиСчета()
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ТипыВладельцевСчетов = Новый Массив;
	ТипыВладельцевСчетов.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыВладельцевСчетов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипыВладельцевСчетов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	РезультатПроверки = Новый ТаблицаЗначений;
	РезультатПроверки.Колонки.Добавить("Счет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	РезультатПроверки.Колонки.Добавить("ПроверяемаяДата", ОписаниеТипаДата);
	РезультатПроверки.Колонки.Добавить("ДеятельностьБанкаПрекращена", ОписаниеТипаБулево);
	РезультатПроверки.Колонки.Добавить("ПомеченНаУдаление", ОписаниеТипаБулево);
	РезультатПроверки.Колонки.Добавить("Закрыт", ОписаниеТипаБулево);
	РезультатПроверки.Колонки.Добавить("НеОткрыт", ОписаниеТипаБулево);
	РезультатПроверки.Колонки.Добавить("ДатаОткрытия", ОписаниеТипаДата);
	РезультатПроверки.Колонки.Добавить("Владелец", Новый ОписаниеТипов(ТипыВладельцевСчетов));
	РезультатПроверки.Колонки.Добавить("ЕстьОшибки", ОписаниеТипаБулево);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти




