//////////////////////////////////////////////////////////////////////////////
// Процедуры обмена данными с мобильной бухгалтерией.

#Область ПрограмныйИнтерфейс
Функция ВерсияСервиса() Экспорт
	
	Возврат ТекущаяВерсияСервиса();
	
КонецФункции

Функция ТекущаяВерсияСервиса()
	Возврат 16;
КонецФункции

Функция ОбменДаннымиВключен() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК ПланОбмена
	|ГДЕ
	|	НЕ ПланОбмена.ПометкаУдаления
	|	И НЕ ПланОбмена.ЭтотУзел";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#Область События

Процедура МобильнаяБухгалтерияУдалениеОбъектаПередУдалением(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ МобильнаяБухгалтерияПовтИсп.ОбменДаннымиВключен() Тогда
		Возврат;
	КонецЕсли;

	ДанныеУзловОбмена = ДанныеУзловДляРегистрацииИзменений(Источник.ОбменДанными.Отправитель);
	Если ДанныеУзловОбмена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоОрганизации = Неопределено;
	УзлыПолучатели     = Новый Массив;
	
	Если Справочники.Организации.КоличествоОрганизаций() > 1 Тогда
			
		ОбъектМетаданных = Источник.Метаданные();
		Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
			РеквизитОрганизация = "Организация";
		Иначе
			РеквизитОрганизация = ИмяРеквизитаОрганизацияСправочника(ОбъектМетаданных);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(РеквизитОрганизация) Тогда
			
			ЗначениеРеквизита = Источник[РеквизитОрганизация];
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.Организации") Тогда
				ОтборПоОрганизации = ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоОрганизации = Неопределено Тогда
		
		УзлыПолучатели = ДанныеУзловОбмена.ВыгрузитьКолонку("Узел");
		
	Иначе
				
		Отбор = Новый Структура("Организация", ЗначениеРеквизита);
		
		Для каждого ДанныеУзла Из ДанныеУзловОбмена.НайтиСтроки(Отбор) Цикл
			
			УзлыПолучатели.Добавить(ДанныеУзла.Узел);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнитьПолучателей(Источник, УзлыПолучатели);

КонецПроцедуры

Процедура МобильнаяБухгалтерияИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МобильнаяБухгалтерияПовтИсп.ОбменДаннымиВключен() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУзловОбмена = ДанныеУзловДляРегистрацииИзменений(Источник.ОбменДанными.Отправитель);
	Если ДанныеУзловОбмена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчитыватьОтборПоОрганизации = Справочники.Организации.КоличествоОрганизаций() > 1;
	
	Если УчитыватьОтборПоОрганизации Тогда
		ПроверяемыеРеквизиты = "Организация, Дата";
	Иначе
		ПроверяемыеРеквизиты = "Дата";
	КонецЕсли;
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Источник.Ссылка);
	Если НЕ ЭтоНовый Тогда
		РеквизитыДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ПроверяемыеРеквизиты);
	КонецЕсли;
	РеквизитыПослеИзменения = Новый Структура(ПроверяемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(РеквизитыПослеИзменения, Источник);
	
	УзлыПолучатели = Новый Массив;
	Для каждого ДанныеУзла Из ДанныеУзловОбмена Цикл
		
		Если УчитыватьОтборПоОрганизации Тогда
			Если ЭтоНовый Тогда
				УсловиеПоОрганизацииВыполнено = РеквизитыПослеИзменения.Организация = ДанныеУзла.Организация;
			Иначе
				УсловиеПоОрганизацииВыполнено = РеквизитыДоИзменения.Организация = ДанныеУзла.Организация
					ИЛИ РеквизитыПослеИзменения.Организация = ДанныеУзла.Организация;
			КонецЕсли;
		Иначе
			УсловиеПоОрганизацииВыполнено = Истина;
		КонецЕсли;
		
		//Если объект был отправлен ранее - его регистрируем, чтобы отправить удаление
		Если ЭтоНовый Тогда
			УсловиеПоПериодуВыполнено = РеквизитыПослеИзменения.Дата >= ДанныеУзла.ДатаНачалаВыгрузки;
		Иначе
			УсловиеПоПериодуВыполнено = РеквизитыПослеИзменения.Дата >= ДанныеУзла.ДатаНачалаВыгрузки
				ИЛИ РеквизитыДоИзменения.Дата >= ДанныеУзла.ДатаНачалаВыгрузки;
		КонецЕсли;
		
		Если УсловиеПоОрганизацииВыполнено
			И УсловиеПоПериодуВыполнено Тогда
			
			УзлыПолучатели.Добавить(ДанныеУзла.Узел);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьПолучателей(Источник, УзлыПолучатели);
	
КонецПроцедуры

Процедура МобильнаяБухгалтерияИзменениеНабораЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ МобильнаяБухгалтерияПовтИсп.ОбменДаннымиВключен() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУзловОбмена = ДанныеУзловДляРегистрацииИзменений(Источник.ОбменДанными.Отправитель);
	Если ДанныеУзловОбмена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияНабора =  Неопределено;
	
	Если Справочники.Организации.КоличествоОрганизаций() > 1 Тогда
		
		//Если отбор по организации отсутствует или не задан - набор регистрируется во все узлы и фильтруется при выгрузке
		//В ином случае, организация в измерении не менялась - достаточно проверить ее в новом наборе
		
		РеквизитОрганизация = "";
		
		Для Каждого ПроверяемыйРеквизит Из ВозможныеИменаИзмеренияОрганизацияРегистраСведений() Цикл
			ОтборПоОрганизации = Источник.Отбор.Найти(ПроверяемыйРеквизит);
					
			Если ОтборПоОрганизации <> Неопределено И ОтборПоОрганизации.Использование Тогда
				РеквизитОрганизация = ПроверяемыйРеквизит;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(РеквизитОрганизация) Тогда
			
			ЗначениеРеквизита = Источник.Отбор[РеквизитОрганизация].Значение;
			Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.Организации") Тогда
				ОрганизацияНабора = ЗначениеРеквизита;
			КонецЕсли;
									
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияНабора) Тогда
		
		УзлыПолучатели = Новый Массив;
	
		Отбор = Новый Структура("Организация", ОрганизацияНабора);
		
		Для каждого ДанныеУзла Из ДанныеУзловОбмена.НайтиСтроки(Отбор) Цикл
			
			УзлыПолучатели.Добавить(ДанныеУзла.Узел);
			
		КонецЦикла;
		
	Иначе
		
		УзлыПолучатели = ДанныеУзловОбмена.ВыгрузитьКолонку("Узел");
				
	КонецЕсли;
	
	ДополнитьПолучателей(Источник, УзлыПолучатели);
	
КонецПроцедуры

Процедура МобильнаяБухгалтерияИзменениеСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ МобильнаяБухгалтерияПовтИсп.ОбменДаннымиВключен() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУзловОбмена = ДанныеУзловДляРегистрацииИзменений(Источник.ОбменДанными.Отправитель);
	Если ДанныеУзловОбмена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзлыПолучатели = Новый Массив;
	
	ЕстьОтборПоОрганизации = Справочники.Организации.КоличествоОрганизаций() > 1;
	
	Если ЕстьОтборПоОрганизации Тогда
		
		ОбъектМетаданных = Источник.Метаданные();
		РеквизитОрганизация = ИмяРеквизитаОрганизацияСправочника(ОбъектМетаданных);
		
		ЕстьОтборПоОрганизации  = НЕ ПустаяСтрока(РеквизитОрганизация);
			
		Если ЕстьОтборПоОрганизации Тогда 
			ОрганизацияДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, РеквизитОрганизация);
			ОрганизацияПослеИзменения = Источник[РеквизитОрганизация];
			
			Если ТипЗнч(ОрганизацияДоИзменения) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ОрганизацияПослеИзменения) = Тип("СправочникСсылка.Организации") Тогда
							
				Для каждого ДанныеУзла Из ДанныеУзловОбмена Цикл
					
					Если ОрганизацияПослеИзменения = ДанныеУзла.Организация
						ИЛИ ОрганизацияДоИзменения = ДанныеУзла.Организация Тогда
						УзлыПолучатели.Добавить(ДанныеУзла.Узел);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьОтборПоОрганизации Тогда
	 	УзлыПолучатели = ДанныеУзловОбмена.ВыгрузитьКолонку("Узел");
	КонецЕсли;
	
	ДополнитьПолучателей(Источник, УзлыПолучатели);
	
КонецПроцедуры

Функция ДанныеУзловДляРегистрацииИзменений(УзелОтправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПланОбмена.Ссылка КАК Узел,
	|	ПланОбмена.ДатаНачалаВыгрузки КАК ДатаНачалаВыгрузки,
	|	ПланОбмена.Организация КАК Организация
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК ПланОбмена
	|ГДЕ
	|	НЕ ПланОбмена.ПометкаУдаления
	|	И НЕ ПланОбмена.ЭтотУзел
	|	И ПланОбмена.Ссылка <> &Отправитель";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Отправитель", УзелОтправитель);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

//Разбирает сообщение обмена, полученное из мобильной бухгалтерии
//загружает полученные данные и записывает объекты (проводит документы).
//
// Параметры:
//   УзелОбменаКод              - Строка, код узла обмена мобильного устройства.
//   УзелОбменаИмя              - Строка, имя мобильного устройства. Используется при создании нового узла обмена.
//   ДанныеМобильногоПриложения - ХранилищеЗначения, содержащее xml с данными обмена.
//   СообщениеОбОшибке          - Строка, возвращает текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - результат загрузки - "Истина", если загрузка прошла успешно.
//
Функция ЗагрузитьДанныеМобильногоПриложения(УзелОбменаКод, УзелОбменаИмя, ДанныеМобильногоПриложения, СообщениеОбОшибке) Экспорт
	
	//Сформируем структуру параметров синхронизации
	СтруктураПараметров = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя);
	
	СообщениеОбменаСтрокаXML = ДанныеМобильногоПриложения.Получить();
	Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
		РазобратьПолученноеСообщение(СтруктураПараметров, СообщениеОбменаСтрокаXML, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Собирает сообщение обмена для отправки в мобильную бухгалтерию.
//
// Параметры:
//   УзелОбменаКод              - Строка, код узла обмена мобильного устройства.
//   УзелОбменаИмя              - Строка, имя мобильного устройства. Используется при создании нового узла обмена.
//   СообщениеОбОшибке          - Строка, возвращает текст сообщения об ошибке.
//	 Отбор                      - Массив, Неопределено - Отбор, для передачи в ПланыОбмена.ВыбратьИзменения().
//
// Возвращаемое значение:
//   ХранилищеЗначения - хранилище, содержащее xml с данными обмена.
//
Функция ВыгрузитьДанныеВМобильноеПриложение(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке, Отбор = Неопределено) Экспорт
	
	Попытка
		//Сформируем структуру параметров синхронизации
		СтруктураПараметров = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя);
		
		ПриИзмененииВерсииСхемы(СтруктураПараметров);
		
		ОбновитьЗадачи(СтруктураПараметров.Организация, 90);
		
		СообщениеОбменаСтрокаXML = ПодготовитьСообщениеВыгрузки(СтруктураПараметров, Отбор);
		
		
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбменаСтрокаXML = "";
		ЗарегистрироватьОшибкуОбмена(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			"МобильнаяБухгалтерия.ВыгрузитьДанныеВМобильноеПриложение");
	КонецПопытки;
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(СообщениеОбменаСтрокаXML, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
	
КонецФункции

#Область АдресныйКлассификатор

//AutocompletePopulationPoint
Функция СписокАвтоподбораНаселенногоПункта(СтрокаПоиска, Параметры) Экспорт
	
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораНаселенногоПункта(СтрокаПоиска, Параметры);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

//GetPopulationPointInfo
Функция СписокРеквизитовНаселенныйПункт(СведенияОбАдресе) Экспорт
	
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.СписокРеквизитовНаселенныйПункт(СведенияОбАдресе);
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
	
КонецФункции

//SetMunicipalData
Функция УстановитьМуниципальныеСведения(Знач НаселенныйПунктДетально, Знач ОКТМО) Экспорт
	
	АдресныйКлассификаторСлужебный.УстановитьМуниципальныеСведения(НаселенныйПунктДетально, ОКТМО);
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(НаселенныйПунктДетально, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
	
КонецФункции

//AutocompleteAdress
Функция АдресныеОбъектыУровня(СтрокаПоиска, ИдентификаторАдресногоОбъекта, Параметры) Экспорт
	
	Результат = АдресныйКлассификаторСлужебный.АдресныеОбъектыУровня(ИдентификаторАдресногоОбъекта, Параметры.Уровень, Параметры.ТипАдреса, СтрокаПоиска);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

//CheckAdress
Функция РезультатПроверкиАдресовПоКлассификатору(Параметры) Экспорт
	
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Параметры.Адрес, Параметры.ВидКонтактнойИнформации);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
	
КонецФункции

//GetHouseList
Функция СписокДомов(СтрокаПоиска, ИдентификаторАдресногоОбъекта) Экспорт
	
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

//GetAdressID
Процедура УстановитьИдентификаторыАдреса(Адрес) Экспорт
	АдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Адрес);
КонецПроцедуры

//Возвращает истину если расчет налогов должен вестись на стороне БП
Функция РасширеннаяФункциональность(Организация, Дата, ПроверятьАктуальностьЗакрытиеМесяца) Экспорт
	
	ТребуетсяРасчетВБП = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ТребуетсяРасчетВБП;
	КонецЕсли;
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	
	Если ЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		//Не поддерживаемый режим налогообложения
		
		ТребуетсяРасчетВБП = Истина;
		
	ИначеЕсли НЕ УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата)
		И НЕ УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Дата)
		И НЕ УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, Дата) Тогда
		//Не поддерживаемый режим налогообложения
		
		ТребуетсяРасчетВБП = Истина;
		
	ИначеЕсли //Не поддерживаемые операци
		ПолучитьФункциональнуюОпцию("ВедетсяОтгрузкаБезПереходаПраваСобственности")
		ИЛИ ПолучитьФункциональнуюОпцию("ВедетсяУчетДенежныхДокументов")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКорректировочныеДокументы")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПакетноеВыставлениеАктов")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПлатежныеТребования")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты")
		//Не поддерживаемые настройки
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры")
		//Не поддерживаемые договоры
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров")
		ИЛИ ПолучитьФункциональнуюОпцию("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС") Тогда
		
		ТребуетсяРасчетВБП = Истина;
		
	Иначе
		Если УчетнаяПолитика.ПлательщикЕНВД (Организация, Дата) Тогда
			//Проверим совместимость настроек ЕНВД
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
			|			КОГДА ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|				ТОГДА Организации.РегистрацияВНалоговомОргане
			|			ИНАЧЕ ВидыДеятельностиЕНВД.РегистрацияВНалоговомОргане
			|		КОНЕЦ) КАК РегистрацияВНалоговомОргане
			|ИЗ
			|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
			|		ПО ВидыДеятельностиЕНВД.Владелец = Организации.Ссылка
			|ГДЕ
			|	ВидыДеятельностиЕНВД.Владелец = &Организация
			|	И НЕ ВидыДеятельностиЕНВД.ПометкаУдаления
			|	И Организации.Ссылка = &Организация";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.РегистрацияВНалоговомОргане > 1 Тогда
					ТребуетсяРасчетВБП = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		//Проверим наличие "запрещенных" документов
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Организация = &Организация
		|	И ВозвратТоваровОтПокупателя.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВозвратТоваровПоставщику.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Организация = &Организация
		|	И ВозвратТоваровПоставщику.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОприходованиеТоваров.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
		|ГДЕ
		|	ОприходованиеТоваров.Организация = &Организация
		|	И ОприходованиеТоваров.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаДолга.Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.Организация = &Организация
		|	И КорректировкаДолга.Проведен";
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ТребуетсяРасчетВБП = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяРасчетВБП 
		И ПроверятьАктуальностьЗакрытиеМесяца
		И День(Дата) > 10 Тогда
		
		//Проверим актуальность и если есть платный тариф запланируем актуализацию
		ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
		ПараметрыПроверки.Организация = Организация;
		ПараметрыПроверки.Период      = КонецМесяца(ДобавитьМесяц(Дата, -1));
		ПараметрыПроверки.ПроверятьКонстантуАктуальностиДанныхУчета = Ложь; // Актуальность проверяем вне зависимости от настройки приложения.
		ПараметрыПроверки.ТребуетсяПолнаяАктуализация = Истина; // Отложенные расчеты не проверяем, даже если они по какой-либо причине включены.
		ПараметрыПроверки.АктуализироватьВесьПериод = Ложь;
		
		РезультатПроверки = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
		
		Если РезультатПроверки.ТребуетсяАктуализация
			И РезультатПроверки.АктуализацияДоступна
			И РезультатПроверки.АктуализацияВозможна Тогда
			
			Если НачалоМесяца(РезультатПроверки.ДатаАктуальности) < НачалоМесяца(Дата) Тогда
				Организации = Новый Массив;
				Организации.Добавить(Организация);
				ИнтеграцияСбанками.ЗапланироватьАктуализациюУчетаПоОрганизациям(Организации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТребуетсяРасчетВБП;
	
КонецФункции

// Процедура - обработчик обновления
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьГоловнойКонтрагентВСервисе(Параметры) Экспорт
	
	// в локальных базах не требуется обновлениие
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ МобильнаяБухгалтерияПовтИсп.ОбменДаннымиВключен() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ГоловнойКонтрагент = Объект.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

Функция ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ОписаниеОшибки) Экспорт
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	ЭтоЮрЛицо = (СтрДлина(ИННОбъекта) = 10);
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИННОбъекта);
			ЕГРЮЛ  = СведенияОКонтрагенте.ЕГРЮЛ;
			
			РеквизитыОрганизации = Новый Структура;
			Если ЗначениеЗаполнено(ЕГРЮЛ) Тогда
				РеквизитыОрганизации.Вставить("Наименование",            ЕГРЮЛ.Наименование);
				РеквизитыОрганизации.Вставить("НаименованиеПолное",      ЕГРЮЛ.НаименованиеПолное);
				РеквизитыОрганизации.Вставить("НаименованиеСокращенное", ЕГРЮЛ.НаименованиеСокращенное);
				РеквизитыОрганизации.Вставить("ИНН",                     ЕГРЮЛ.ИНН);
				РеквизитыОрганизации.Вставить("КПП",                     ЕГРЮЛ.КПП);
				РеквизитыОрганизации.Вставить("РегистрационныйНомер",    ЕГРЮЛ.РегистрационныйНомер);
				РеквизитыОрганизации.Вставить("ДатаРегистрации",         ЕГРЮЛ.ДатаРегистрации);
				РеквизитыОрганизации.Вставить("ЮридическийАдрес",        ЕГРЮЛ.ЮридическийАдрес);
				РеквизитыОрганизации.Вставить("КодОКВЭД",
					?(ЗначениеЗаполнено(ЕГРЮЛ.ВидДеятельности), ЕГРЮЛ.ВидДеятельности.Код, Неопределено));
				РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",
					?(ЗначениеЗаполнено(ЕГРЮЛ.ВидДеятельности) И ЕГРЮЛ.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
				РеквизитыОрганизации.Вставить("ОписаниеОшибки",          СведенияОКонтрагенте.ОписаниеОшибки);
				
				
				Если ЗначениеЗаполнено(ЕГРЮЛ.РегистрацияВФСС) Тогда
					РеквизитыОрганизации.Вставить("РегистрацияВФСС", ЕГРЮЛ.РегистрацияВФСС);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЕГРЮЛ.РегистрацияВНалоговомОргане) Тогда
					РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане", ЕГРЮЛ.РегистрацияВНалоговомОргане);
				КонецЕсли;
				
				РеквизитыОрганизации.Вставить("Руководитель");
				Если ЗначениеЗаполнено(ЕГРЮЛ.Руководители) Тогда
					
					Руководитель = Новый Структура("Фамилия, Имя, Отчество, ИНН, Должность");
					ЗаполнитьЗначенияСвойств(Руководитель, ЕГРЮЛ.Руководители[0]);
					РеквизитыОрганизации.Руководитель = Руководитель;
				КонецЕсли;
			Иначе
				ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
				РеквизитыОрганизации.Вставить("ОписаниеОшибки", СтрШаблон(ШаблонОписанияОшибки, ИННОбъекта));
			КонецЕсли;
		Иначе
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
			РеквизитыОрганизации.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности), РеквизитыОрганизации.ВидДеятельности.Код, Неопределено));
			РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности) И РеквизитыОрганизации.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
		
		РеквизитыОрганизации.Вставить("ЭтоЮридическоеЛицо", РезультатПроверки.ЭтоЮрЛицо);
		
		// Также передадим в мобильное приложение полные реквизиты отделения ФСС, если известна регистрация в ФСС,
		// чтобы можно было создать контрагента для перечисления взносов ФСС НС.
		Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			Если РеквизитыОрганизации.Свойство("РегистрацияВФСС")
				И ТипЗнч(РеквизитыОрганизации.РегистрацияВФСС) = Тип("Структура") Тогда
			
				РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(РеквизитыОрганизации.РегистрацияВФСС.КодПодчиненности);

				Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
					РеквизитыОрганизации.Вставить("РеквизитыОтделенияФСС", РеквизитыОтделенияФСС);
					// Заменим ссылки на сериализованную строку GUID.
					РеквизитыОтделенияФСС.Ссылка = СериализоватьСсылку(РеквизитыОтделенияФСС.Ссылка);
					Если РеквизитыОтделенияФСС.ПлатежныеРеквизиты <> Неопределено Тогда
						РеквизитыОтделенияФСС.ПлатежныеРеквизиты.БанковскийСчет = СериализоватьСсылку(РеквизитыОтделенияФСС.ПлатежныеРеквизиты.БанковскийСчет);
						РеквизитыОтделенияФСС.ПлатежныеРеквизиты.Банк = СериализоватьСсылку(РеквизитыОтделенияФСС.ПлатежныеРеквизиты.Банк);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РеквизитыОрганизации.Свойство("РегистрацияВНалоговомОргане")
				И ТипЗнч(РеквизитыОрганизации.РегистрацияВНалоговомОргане) = Тип("Структура")
				И НЕ ЗначениеЗаполнено(РеквизитыОрганизации.РегистрацияВНалоговомОргане.ОКТМО)
				И РеквизитыОрганизации.Свойство("ЮридическийАдрес")
				И ТипЗнч(РеквизитыОрганизации.ЮридическийАдрес) = Тип("Структура") Тогда
				ЗначениеАдресаJSON =  РеквизитыОрганизации.ЮридическийАдрес.КонтактнаяИнформация;
				СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON);
				Если ТипЗнч(СведенияОНалоговомОргане) = Тип("Структура") Тогда
					РеквизитыОрганизации.РегистрацияВНалоговомОргане.ОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
		Иначе
			Возврат Новый ХранилищеЗначения(РеквизитыОрганизации, Новый СжатиеДанных(9));
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(ЗначениеАдресаJSON, "Сервис1С");
	
	Сведения = Новый Структура();
	Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
	
	Возврат Сведения;
	
КонецФункции

// Возвращает Истина, если текущая область данных используется для обмена с мобильной бухгалтерией.
//
// Возвращаемое значение:
//	Булево.
//
Функция ИспользуетсяОбменСМобильнойБухгалтерией() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильнаяБухгалтерия.ЭтотУзел());
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильнаяБухгалтерия.Ссылка
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК МобильнаяБухгалтерия
	|ГДЕ
	|	МобильнаяБухгалтерия.Ссылка <> &ЭтотУзел
	|	И НЕ МобильнаяБухгалтерия.ПометкаУдаления";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ПолучитьСостояниеФоновогоЗадания(ИдентификаторФоновогоЗадания, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	СостояниеЗадания  = СостояниеФоновогоЗадания.Отменено;
	
	УстановитьПривилегированныйРежим(Истина);
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторФоновогоЗадания));
	
	Если ФоновоеЗадание = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка синхронизации: не найдено фоновое задание'");
	ИначеЕсли ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
		СостояниеЗадания  = ФоновоеЗадание.Состояние;
	Иначе
		СостояниеЗадания = ФоновоеЗадание.Состояние;
	КонецЕсли;
	
	СостояниеЗаданияСтрокой = "";
	Если СостояниеЗадания = СостояниеФоновогоЗадания.Активно Тогда
		СостояниеЗаданияСтрокой = "Активно";
	ИначеЕсли СостояниеЗадания = СостояниеФоновогоЗадания.Завершено Тогда
		СостояниеЗаданияСтрокой = "Завершено";
	ИначеЕсли СостояниеЗадания = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		СостояниеЗаданияСтрокой = "ЗавершеноАварийно";
	ИначеЕсли СостояниеЗадания = СостояниеФоновогоЗадания.Отменено Тогда
		СостояниеЗаданияСтрокой = "Отменено";
	КонецЕсли;
	
	// Если фоновое задание завершено, то прочитаем сообщения пользователю из очереди фонового задания.
	// Среди них может быть служебное с результатом выполнения фонового задания.
	РезультатЗадания    = Неопределено;
	РезультатВыполнения = Неопределено;

	Если ФоновоеЗадание <> Неопределено И СостояниеЗаданияСтрокой <> "Активно" Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
		ПрефиксСлужебногоСообщения = СообщениеРезультатаФоновогоЗадания();
		Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
			Если СтрНачинаетсяС(СообщениеПользователю.Текст, ПрефиксСлужебногоСообщения) Тогда
				ПередаваемыйТекст   = Сред(СообщениеПользователю.Текст, СтрДлина(ПрефиксСлужебногоСообщения) + 1);
				РезультатЗадания = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПередаваемыйТекст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания <> Неопределено Тогда
		// Если фоновое задание передало результат своего выполнения,
		// то передадим его вызывающему методу.
		Если РезультатЗадания.Свойство("СообщениеОбОшибке")
			И ЗначениеЗаполнено(РезультатЗадания.СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = РезультатЗадания.СообщениеОбОшибке;
		КонецЕсли;

		Если РезультатЗадания.Свойство("РезультатВыполнения") Тогда
			РезультатВыполнения = РезультатЗадания.РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовим структуру - шаблон ответа операции.
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СообщениеОбОшибке", 		  СообщениеОбОшибке);
	ВозвращаемаяСтруктура.Вставить("СостояниеФоновогоЗадания", 	  СостояниеЗаданияСтрокой);
	Если РезультатВыполнения <> Неопределено Тогда
		ВозвращаемаяСтруктура.Вставить("РезультатВыполнения",   РезультатВыполнения);
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ВозвращаемаяСтруктура, Новый СжатиеДанных(9));
	
КонецФункции

#Область РегламентированныеОтчеты

Функция ОтправитьДекларациюНаEmail(СсылкаНаОтчет, ОписаниеОшибки) Экспорт
	Перем АдресПараметровПроксиВоВременномХранилище, ПараметрыСформированногоОтчета, СообщениеОбОшибке;
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ОписаниеОшибки = НСтр("ru = 'В базе данных, выполняющей подготовку декларации, не включено разделение данных.'");
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныйОтчет = ДесериализоватьИПроверитьСсылкуНаОтчет(СсылкаНаОтчет, СообщениеОбОшибке);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = СохраненныйОтчет.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда // Регламентированный отчет не синхронизирован с БП
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке декларации на e-mail из мобильной бухгалтерии передана некорректная ссылка на сохраненный регламентированный отчет'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить декларацию из мобильного приложения.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВыгрузки = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(СохраненныйОтчет);
	
	Если НЕ РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ЗарегистрироватьОшибкиОбмена(РезультатВыгрузки.Ошибки,
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
			
		ПодробноеОписаниеОшибки = Новый Массив;
		ПодробноеОписаниеОшибки.Добавить(НСтр("ru = 'Декларация не прошла форматно-логический контроль. '"));
		Для каждого Ошибка Из РезультатВыгрузки.Ошибки Цикл
			ПодробноеОписаниеОшибки.Добавить(Ошибка);
		КонецЦикла;

		ОписаниеОшибки = СтрСоединить(ПодробноеОписаниеОшибки);
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Неверный формат адреса хранилища при формировании файла выгрузки налоговой декларации'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Неверный формат адреса хранилища при формировани файла выгрузки налоговой декларации.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	// Подготавливаем файл для формирования машиночитаемого бланка
	ДвоичныеДанныеXML = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
	
	ПараметрыОтправки = ПараметрыОтправкиНаПочту(Объект.НаименованиеОтчета, Объект.ПредставлениеПериода, РезультатВыгрузки, ДвоичныеДанныеXML);
	
	Если ЗначениеЗаполнено(ПараметрыОтправки.СообщениеОбОшибке) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = ПараметрыОтправки.СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = Новый ТекстовыйДокумент;
	ЧтениеДанных  = Новый ЧтениеДанных(ДвоичныеДанныеXML);
	
	ЧтениеДанных.КодировкаТекста = РезультатВыгрузки.КодировкаФайлаВыгрузки;
	Пока НЕ ЧтениеДанных.ЧтениеЗавершено Цикл
		ТекстВыгрузки.ДобавитьСтроку(ЧтениеДанных.ПрочитатьСтроку());
	КонецЦикла; 
	
	АдресФайлаВыгрузкиВоВременномХранилище = РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
			ТекстВыгрузки.ПолучитьТекст(),
			Строка(Новый УникальныйИдентификатор),
			РезультатВыгрузки.КодировкаФайлаВыгрузки);

	
	ФайлВыгрузкиВоВременномХранилище = Новый Структура;
	ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки",                 РезультатВыгрузки.КодировкаФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки",                       РезультатВыгрузки.ИмяФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиВоВременномХранилище);
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(СохраненныйОтчет.ИсточникОтчета, СохраненныйОтчет.ВыбраннаяФорма);
	
	ВывестиМашиночитаемуюФормуЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(
			ИмяФормыОтчета, Неопределено, ФайлВыгрузкиВоВременномХранилище,
			ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище);
			
	Если НЕ ВывестиМашиночитаемуюФормуЧерезВебСервис Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При формировании машиночитаемого бланка произошла ошибка вызова сервиса'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	
	ОтправитьМашиночитаемуюФормуНаEmail = РегламентированнаяОтчетностьВызовСервера.ОтправитьМашиночитаемуюФормуНаEmail(ПараметрыОтправки, ПараметрыСформированногоОтчета, СообщениеОбОшибке);
	
	Если НЕ ОтправитьМашиночитаемуюФормуНаEmail Тогда
		
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке машиночитаемого бланка произошла ошибка вызова сервиса'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
			
		ОписаниеОшибки = СообщениеОбОшибке;
			
		Возврат Ложь;
	КонецЕсли;

	ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(
		Новый Структура("Ссылка", СохраненныйОтчет));
	Если ВыборкаЖОС.Следующий()
		И РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(
			ВыборкаЖОС.СостояниеСдачиОтчетности) Тогда
		ЗаписьЖОС = ВыборкаЖОС.ПолучитьМенеджерЗаписи();
		ЗаписьЖОС.Статус = "Сдано";
		ЗаписьЖОС.Записать();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ОтправитьУведомлениеНаEmail(СсылкаНаОтчет, ОписаниеОшибки) Экспорт
	
	Перем АдресПараметровПроксиВоВременномХранилище, ПараметрыСформированногоОтчета, СообщениеОбОшибке;
	Перем НаименованиеОтчета, ПредставлениеПериода, ИмяМакетаПечатнойФормы;
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ОписаниеОшибки = НСтр("ru = 'В базе данных, выполняющей подготовку отчета, не включено разделение данных.'");
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныйОтчет = ДесериализоватьИПроверитьСсылкуНаОтчет(СсылкаНаОтчет, СообщениеОбОшибке);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = СохраненныйОтчет.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда // Отчет не синхронизирован с БП
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке отчета на e-mail из мобильной бухгалтерии передана некорректная ссылка на сохраненный отчет'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить отчет из мобильного приложения.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ИмяФормы = "Форма2020_1" Тогда
		ИмяМакетаПечатнойФормы = "TIFF_2020_1";
	Иначе
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Формат выгрузки для формы %1 не поддерживается'"), Объект.ИмяФормы);
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеПериода = Формат(Объект.Дата, "ДЛФ=D");
	НаименованиеОтчета   = Объект.ВидУведомления;
	
	РезультатыВыгрузки = Объект.ВыгрузитьДокумент();
	
	Если Не ЗначениеЗаполнено(РезультатыВыгрузки) Тогда
		ОписаниеОшибки = "";
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		Если ЗначениеЗаполнено(Сообщения) Тогда
			Для Каждого Сообщение из Сообщения Цикл
				ОписаниеОшибки = ОписаниеОшибки + Сообщение.Текст + " ";
			КонецЦикла;
		КонецЕсли;
		
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Не удалось сформировать файл выгрузки отчета'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВыгрузки = РезультатыВыгрузки[0];
	
	Если НЕ ЭтоАдресВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Неверный формат адреса хранилища при формировании файла выгрузки отчета'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Неверный формат адреса хранилища при формировани файла выгрузки отчета.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	// Подготавливаем файл для формирования машиночитаемого бланка
	ДвоичныеДанныеXML = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
	
	ПараметрыОтправки = ПараметрыОтправкиНаПочту(НаименованиеОтчета, ПредставлениеПериода, РезультатВыгрузки, ДвоичныеДанныеXML);
	
	Если ЗначениеЗаполнено(ПараметрыОтправки.СообщениеОбОшибке) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = ПараметрыОтправки.СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	//опечатка в идентификаторе БРО
	ТекстВыгрузки = "";
	Если Не РезультатВыгрузки.Свойство("ТестВыгрузки", ТекстВыгрузки) Тогда
		РезультатВыгрузки.Свойство("ТекстВыгрузки", ТекстВыгрузки);
	КонецЕсли;
	
	АдресФайлаВыгрузкиВоВременномХранилище = РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
			ТекстВыгрузки,
			Строка(Новый УникальныйИдентификатор),
			РезультатВыгрузки.КодировкаВыгрузки);
	
	ФайлВыгрузкиВоВременномХранилище = Новый Структура;
	ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки",                 РезультатВыгрузки.КодировкаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки",                       РезультатВыгрузки.ИмяФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиВоВременномХранилище);
	
	ДанныеМакета = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ИмяМакетаПечатнойФормы);
	
	ВывестиМашиночитаемуюФормуЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахЧерезВебСервис(
		ФайлВыгрузкиВоВременномХранилище,
		ПараметрыСформированногоОтчета,
		АдресПараметровПроксиВоВременномХранилище,
		ДанныеМакета);
		
	ОписаниеОшибки = "";
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Если ЗначениеЗаполнено(Сообщения) Тогда
		Для Каждого Сообщение из Сообщения Цикл
			ОписаниеОшибки = ОписаниеОшибки + Сообщение.Текст + " ";
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВывестиМашиночитаемуюФормуЧерезВебСервис Тогда
		ЗарегистрироватьОшибкуОбмена(
		НСтр("ru = 'При формировании машиночитаемого бланка произошла ошибка вызова сервиса'"),
		НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	
	ОтправитьМашиночитаемуюФормуНаEmail = РегламентированнаяОтчетностьВызовСервера.ОтправитьМашиночитаемуюФормуНаEmail(ПараметрыОтправки, ПараметрыСформированногоОтчета, СообщениеОбОшибке);
	
	Если НЕ ОтправитьМашиночитаемуюФормуНаEmail Тогда
		
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке машиночитаемого бланка произошла ошибка вызова сервиса'"),
			НСтр("ru = 'Получение отчета на e-mail из мобильной бухгалтерии'"));
			
		ОписаниеОшибки = СообщениеОбОшибке;
			
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПараметрыОтправкиНаПочту(НаименованиеОтчета, ПредставлениеПериода, РезультатВыгрузки, ДвоичныеДанныеXML)
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("СообщениеОбОшибке");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЭлектроннаяПочтаПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ТекущийПользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя, , Истина);
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочтаПользователя) Тогда
		ПолучательСообщения = Новый Структура;
		ПолучательСообщения.Вставить("Представление", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование"));
		ПолучательСообщения.Вставить("Адрес",         ЭлектроннаяПочтаПользователя);
		
		ПараметрыОтправки.Вставить("Кому", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучательСообщения));
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось определить адрес электронной почты'");
		ЗарегистрироватьОшибкуОбмена(
			ТекстОшибки,
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ПараметрыОтправки.СообщениеОбОшибке = ТекстОшибки;
		
		Возврат ПараметрыОтправки;
	КонецЕсли;
	
	Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 за %2'"),
		НаименованиеОтчета,
		СокрЛП(ПредставлениеПериода));
	
	Тело = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Во вложении файл PDF с печатной формой отчета %1 за %2 и XML для сдачи отчета в электронном виде.'"),
		НаименованиеОтчета,
		СокрЛП(ПредставлениеПериода));
		
	ПараметрыОтправки.Вставить("Тема", Тема);
	ПараметрыОтправки.Вставить("Тело", Тело);
	
	
	Вложения = Новый Соответствие;
	Если РезультатВыгрузки.Свойство("ТекстВыгрузки") 
		И ТипЗнч(РезультатВыгрузки.ТекстВыгрузки) = Тип("Массив") Тогда
		Для Каждого ФайлОтчета из РезультатВыгрузки.ТекстВыгрузки Цикл
			ДвоичныеДанныеПоСтроке = ПолучитьИзВременногоХранилища(ФайлОтчета.АдресФайлаВыгрузки);
			Вложения.Вставить(ФайлОтчета.ИмяФайлаВыгрузки, ДвоичныеДанныеПоСтроке);
		КонецЦикла;
	Иначе
		Вложения.Вставить(РезультатВыгрузки.ИмяФайлаВыгрузки, ДвоичныеДанныеXML);
	КонецЕсли;
	
	ПараметрыОтправки.Вставить("Вложения", Вложения);

	Возврат ПараметрыОтправки;
КонецФункции

Функция НачатьОтправкуДекларацииИспользуяДокументооборотСКОВФоне(СсылкаНаОтчет, ПовторнаяОтправка, СообщениеОбОшибке) Экспорт

	СохраненныйОтчет = ДесериализоватьИПроверитьСсылкуНаОтчет(СсылкаНаОтчет, СообщениеОбОшибке);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет) Тогда
		Возврат "";
	КонецЕсли;
	
	// Сами действия по проверке и запросу временного пароля выполняем в фоновом задании,
	// т.к. сервис криптографии может обрабатывать запрос длительное время.
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("СохраненныйОтчет",  СохраненныйОтчет);
	ПараметрыПроцедуры.Вставить("ПовторнаяОтправка", ПовторнаяОтправка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МобильнаяБухгалтерия.НачатьОтправкуДекларацииИспользуяДокументооборотСКО",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ?(ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания), Строка(ДлительнаяОперация.ИдентификаторЗадания), "");

КонецФункции

Функция ЗавершитьОтправкуДекларацииИспользуяДокументооборотСКОВФоне(ВременныйПароль, СсылкаНаОтчет, СообщениеОбОшибке) Экспорт

	СохраненныйОтчет = ДесериализоватьИПроверитьСсылкуНаОтчет(СсылкаНаОтчет, СообщениеОбОшибке);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет) Тогда
		Возврат "";
	КонецЕсли;
	
	// Сами действия по проверке и запросу временного пароля выполняем в фоновом задании,
	// т.к. сервис криптографии может обрабатывать запрос длительное время.
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("СохраненныйОтчет",  СохраненныйОтчет);
	ПараметрыПроцедуры.Вставить("ВременныйПароль",   ВременныйПароль);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МобильнаяБухгалтерия.ЗавершитьОтправкуДекларацииИспользуяДокументооборотСКО",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ?(ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания), Строка(ДлительнаяОперация.ИдентификаторЗадания), "");

КонецФункции

Функция ПроверитьСтатусыОтправкиОтчетовВФоне(ИдентификаторОрганизации, СообщениеОбОшибке) Экспорт

	СообщениеОбОшибке = "";
	ИдентификаторФоновогоЗадания = "";

	Организация = ДесериализоватьСсылкуНаСправочник(ИдентификаторОрганизации, "Организации");

	// Выбираем отчеты с незавершенным статусом отправки.
	// При работе из мобильной бухгалтерии такими могут быть отчеты, отправленные в ФСС, по которым не получен протокол.
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	НезавершенныеОтправкиФСС = КонтекстЭДОСервер.НезавершенныеПоследниеОтправкиФССПоОрганизации(Организация);

	Если НезавершенныеОтправкиФСС.Количество() = 0 Тогда
		// Нет никаких ранее отправленных отчетов, по которым требуется получить статус.
		Возврат "";
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.АдресРезультата = ""; // Результат не требуется помещать во временное хранилище.

	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	ПараметрыПроцедуры.Вставить("НезавершенныеОтправкиФСС", НезавершенныеОтправкиФСС);

	РезультатДлительнойОперации = ДлительныеОперации.ВыполнитьВФоне(
		"МобильнаяБухгалтерия.ПроверитьСтатусыОтправкиОтчетов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		СообщениеОбОшибке = РезультатДлительнойОперации.ПодробноеПредставлениеОшибки;
	Иначе
		ИдентификаторФоновогоЗадания = Строка(РезультатДлительнойОперации.ИдентификаторЗадания);
	КонецЕсли;

	Возврат ИдентификаторФоновогоЗадания;

КонецФункции

Функция ПреобразоватьДанныеРеглОтчетаМПДляБРО(ДанныеМП, ИмяФормыОтчета)
	
	ИсточникОтчета = ДанныеМП.ВидОтчета;
	
	Если ТипЗнч(ДанныеМП.ДанныеОтчета) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
	
		Если ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			
			Контейнер = Новый Структура;
			Контейнер.Вставить("Раздел21", Новый Структура);
			
			ЗаполнитьДекларациюУСН2015Кв1(ДанныеМП, Контейнер);
			
			Возврат Контейнер;
		
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = УчетЕНВД.ИдентификаторДекларации() Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2016Кв1"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2017Кв1" Тогда
			
			Контейнер = НовыйКонтейнерДанныхДекларацииЕНВД2016Кв1();
			ЗаполнитьДекларациюЕНВД2016Кв1(ДанныеМП, Контейнер);
			
			Возврат Контейнер;
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв1"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2018Кв3"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2018Кв4" Тогда
			
			Контейнер = НовыйКонтейнерДанныхДекларацииЕНВД2018Кв1();
			ЗаполнитьДекларациюЕНВД2018Кв1(ДанныеМП, Контейнер);
			
			Возврат Контейнер;
			
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2020Кв1" Тогда
			
			Возврат ДанныеМП.ДанныеОтчета;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Неопределено; // Другие формы не обрабатываются
	
КонецФункции

Функция ПреобразоватьДанныеРеглОтчетаБРОДляМП(ИсточникОтчета, ИмяФормыОтчета, ДанныеБРО)
	
	Если ТипЗнч(ДанныеБРО) <> Тип("Структура")
		ИЛИ НЕ ДанныеБРО.Свойство("ПоказателиОтчета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		Если ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			Возврат ПолучитьДанныеДекларацииУСН2015кв1(ДанныеБРО);
		КонецЕсли;
	ИначеЕсли ИсточникОтчета = УчетЕНВД.ИдентификаторДекларации() Тогда
		Если ИмяФормыОтчета = "ФормаОтчета2016Кв1"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2017Кв1" Тогда
			Возврат ПолучитьДанныеДекларацииЕНВД2016Кв1(ДанныеБРО);
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв1"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2018Кв3"
			ИЛИ ИмяФормыОтчета = "ФормаОтчета2018Кв4" Тогда
			Возврат ПолучитьДанныеДекларацииЕНВД2018Кв1(ДанныеБРО);
		КонецЕсли;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель" Тогда
		Если ИмяФормыОтчета = "ФормаОтчета2020Кв1" Тогда
			Возврат ДанныеБРО;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено; // Другие формы не обрабатываются
	
КонецФункции

Функция ПреобразоватьДанныеУведомленияМБДляБРО(СтрокаЗаполнения)
	
	Если СтрокаЗаполнения.ИмяОтчета = "РегламентированноеУведомлениеУменьшениеНалогаНаСтраховыеВзносы" Тогда
		
		ДанныеУведомления = СтрокаЗаполнения.ДанныеУведомления.Получить();

		Если ТипЗнч(ДанныеУведомления) <> Тип("Структура")
			ИЛИ Не ЗначениеЗаполнено(ДанныеУведомления) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Контейнер = Новый Структура;
		
		ЛистА = НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы();
		Для каждого СведенияОПатенте Из ДанныеУведомления.ЛистА Цикл
			ДанныеЛистаА = ЛистА.Добавить();
			ДанныеЛистаА.ДатаВыдПат  = СведенияОПатенте.ДатаВыдачиПатента;
			ДанныеЛистаА.НомерПат    = СведенияОПатенте.НомерПатента;
			ДанныеЛистаА.СумНалПатУм = СведенияОПатенте.СуммаНалогаПоПатенту;
		КонецЦикла;
		
		Контейнер.Вставить("ЛистА", ЛистА);
		ЛистБ = НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы();
		
		ЛистБ.ОбщСумНалПатУм = ДанныеУведомления.ЛистБ.СуммаНалогаПоПатентам;
		ЛистБ.ПрНП = ?(ДанныеУведомления.ЛистБ.ИспользуетсяТрудНаемныхРаботников, "1", "2");
		ЛистБ.СумСтрВзнУмНал = ДанныеУведомления.ЛистБ.СуммаСтраховыхВзносов;
		
		Контейнер.Вставить("ЛистБ", ЛистБ);
		
		Возврат Контейнер;
		
	КонецЕсли;
	
	Возврат Неопределено; // Другие формы не обрабатываются
	
КонецФункции

Функция ПреобразоватьДанныеУведомленияБРОДляМБ(ИмяОтчета, ИмяФормыОтчета, ДанныеБРО)
	
	Если ТипЗнч(ДанныеБРО) <> Тип("Структура")
		ИЛИ НЕ ДанныеБРО.Свойство("ДанныеУведомления") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяОтчета = "РегламентированноеУведомлениеУменьшениеНалогаНаСтраховыеВзносы" Тогда
		Если ИмяФормыОтчета = "Форма2020_1" Тогда
			
			Контейнер = Новый Структура;
			
			ЛистА = Новый Массив();
			ЛистБ = Новый Структура("СуммаСтраховыхВзносов, ИспользуетсяТрудНаемныхРаботников, СуммаНалогаПоПатентам", 0, Ложь, 0);
			
			ДанныеУведомленияЛистА = ДанныеБРО.ДанныеДопСтрокБД.МнгСтр;
			Для каждого СведенияОПатенте Из ДанныеУведомленияЛистА Цикл
				
				ОписаниеЛистА = Новый Структура("ДатаВыдачиПатента, НомерПатента, СуммаНалогаПоПатенту");
				ОписаниеЛистА.ДатаВыдачиПатента    = СведенияОПатенте.ДатаВыдПат;
				ОписаниеЛистА.НомерПатента         = СведенияОПатенте.НомерПат;
				ОписаниеЛистА.СуммаНалогаПоПатенту = СведенияОПатенте.СумНалПатУм;
				
				ЛистА.Добавить(ОписаниеЛистА);
			КонецЦикла;
			
			Контейнер.Вставить("ЛистА", ЛистА);
			
			ДанныеУведомления = ДанныеБРО.ДанныеУведомления;
			
			ЛистБ.СуммаНалогаПоПатентам             = ДанныеУведомления.ЛистБ.ОбщСумНалПатУм;
			ЛистБ.ИспользуетсяТрудНаемныхРаботников = (ДанныеУведомления.ЛистБ.ПрНП = "1");
			ЛистБ.СуммаСтраховыхВзносов             = ДанныеУведомления.ЛистБ.СумСтрВзнУмНал;
			
			Контейнер.Вставить("ЛистБ", ЛистБ);
			
			
			Возврат Контейнер; // Другие формы не обрабатываются
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
	
КонецФункции

#КонецОбласти

Функция ПрочитатьПризнакИзменений(УзелОбменаКод, УзелОбменаИмя) Экспорт
	//Сформируем структуру параметров синхронизации
	СтруктураПараметров = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.УзелОбмена) Тогда
		ШаблонЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	%2.Узел КАК Узел
		|ИЗ
		|	%1.Изменения КАК %2
		|ГДЕ
		|	%2.Узел = &Узел";
		
		СоставЗапроса = Новый Массив;
		Для каждого ОбъектМетаданных Из ПланыОбмена.МобильнаяБухгалтерия.Состав() Цикл
			СоставЗапроса.Добавить(СтрШаблон(ШаблонЗапроса, ОбъектМетаданных, "Таблица_"+СоставЗапроса.Количество()));
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(СоставЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ"+Символы.ПС);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел", СтруктураПараметров.УзелОбмена);
		Запрос.Текст = ТекстЗапроса; 
		
		Возврат НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя, ПерваяСинхронизация = Ложь)
	
	СтруктураПараметров = СоздатьСтруктуруПараметровСинхронизации();
	СтруктураПараметров.УзелОбменаКод = УзелОбменаКод;
	СтруктураПараметров.ПерваяСинхронизация = ПерваяСинхронизация;
	
	ЗаполнитьПараметрыОбменаПоИмениУзла(СтруктураПараметров, УзелОбменаИмя);
	
	//Найдем узлы обмена. Если это первая синхронизация, создадим узлы обмена
	НайтиСоздатьУзлыОбмена(СтруктураПараметров);

	//Дополним параметры обмена
	СписокРеквизитовУзла = "Организация, РасчетНалоговВБП, ДатаСинхронизации, ДатаНачалаВыгрузки, ПервичнаяИнициализацияВыполнена";
	РеквизитыУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.УзелОбмена, СписокРеквизитовУзла);
	СтруктураПараметров.Организация = РеквизитыУзла.Организация;
	СтруктураПараметров.ДатаСинхронизации = РеквизитыУзла.ДатаСинхронизации;
	СтруктураПараметров.РасчетНалоговВБП = РеквизитыУзла.РасчетНалоговВБП;
	СтруктураПараметров.ДатаНачалаВыгрузки = РеквизитыУзла.ДатаНачалаВыгрузки;
	СтруктураПараметров.ПервичнаяИнициализацияВыполнена = РеквизитыУзла.ПервичнаяИнициализацияВыполнена;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков КАК ДатаВводаНачальныхОстатков
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаНачалаРаботы = Дата(1,1,1);
	Если Выборка.Следующий() Тогда
		ДатаНачалаРаботы = КонецМесяца(Выборка.ДатаВводаНачальныхОстатков)+1;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачалаРаботы) Тогда
		ДатаПервогоПроведенногоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(СтруктураПараметров.Организация);
		Если ЗначениеЗаполнено(ДатаПервогоПроведенногоДокумента) Тогда
			ДатаНачалаРаботы = НачалоГода(ДатаПервогоПроведенногоДокумента);
		Иначе
			ДатаНачалаРаботы = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ПроверитьУстановитьДатуВводаНачальныхОстатков(ДатаНачалаРаботы - 1, СтруктураПараметров.Организация);
	КонецЕсли;
	СтруктураПараметров.ДатаНачалаРаботы = ДатаНачалаРаботы;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СоздатьУзелОбмена(НастройкиУзлаБП, СообщениеОбОшибке) Экспорт
	
	СтруктураПараметров = СоздатьСтруктуруПараметровСинхронизации();
	
	СтруктураПараметров.УзелОбменаКод = НастройкиУзлаБП.УзелОбменаКод;
	СтруктураПараметров.УзелОбменаИмя = НастройкиУзлаБП.УзелОбменаИмя;
	СтруктураПараметров.Организация = ДесериализоватьСсылкуНаСправочник(НастройкиУзлаБП.UIDОрганизации, "Организации");
	
	Если НастройкиУзлаБП.Свойство("ДатаНачалаВыгрузки") Тогда
		СтруктураПараметров.ДатаНачалаВыгрузки = НастройкиУзлаБП.ДатаНачалаВыгрузки;
	КонецЕсли;
	
	//Найдем узлы обмена. Если это первая синхронизация, создадим узлы обмена
	НайтиСоздатьУзлыОбмена(СтруктураПараметров);
	
КонецПроцедуры

Функция ПодготовитьОтборДляВыгрузкиВМобильноеПриложение(ПараметрыОтбора, СообщениеОбОшибке) Экспорт
	
	ПараметрыОтбора = СериализаторXDTO.ПрочитатьXDTO(ПараметрыОтбора);
	
	Если ТипЗнч(ПараметрыОтбора) <> Тип("Структура") Тогда
		СообщениеОбОшибке = "Не корректный отбор для загрузки данных из бухгалтерии.";
		Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если (СтрНайти(ВРЕГ(ПараметрыОтбора.ПолноеИмяОбъекта), "ДОКУМЕНТ") <> 0
		ИЛИ СтрНайти(ВРЕГ(ПараметрыОтбора.ПолноеИмяОбъекта), "СПРАВОЧНИК") <> 0)
		И ТипЗнч(ПараметрыОтбора.Значение) <> Тип("Структура") Тогда
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПараметрыОтбора.ПолноеИмяОбъекта);
		Если МетаданныеОбъекта <> Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыОтбора.ПолноеИмяОбъекта);
		КонецЕсли;
		
		Если МенеджерОбъекта <> Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор(ПараметрыОтбора.Значение);
			Отбор = МенеджерОбъекта.ПолучитьСсылку(Идентификатор);
		Иначе
			СообщениеОбОшибке = "Не определен тип значения отбора.";
			Отбор = Неопределено;
		КонецЕсли;
	
	ИначеЕсли ПараметрыОтбора.ПолноеИмяОбъекта = "РегистрСведений.ЗадачиБухгалтера" Тогда
		
		ОрганизацияСсылка = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыОтбора.Значение.Организация, "Организации");
		Если ПараметрыОтбора.Значение.ИдПравила = "ПАТЕНТ" Тогда
			Правило = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(ПараметрыОтбора.Значение.ИдЗадачи, "Патенты");
		Иначе
			Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
											ПараметрыОтбора.Значение.ИдЗадачи, 
											ПараметрыОтбора.Значение.ИдПравила);
		КонецЕсли;
										
		НаборЗаписей = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОрганизацияСсылка);
		НаборЗаписей.Отбор.ПериодСобытия.Установить(ПараметрыОтбора.Значение.ПериодСобытия);
		НаборЗаписей.Отбор.Правило.Установить(Правило);
		НаборЗаписей.Отбор.РегистрацияВНалоговомОргане.Установить(Справочники.НалоговыеОрганы.ПустаяСсылка());
		НаборЗаписей.Прочитать();
		
		Отбор = НаборЗаписей;
	Иначе
		
		СообщениеОбОшибке = "Переданный отбор не поддерживается.";
		Отбор = Неопределено;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ПечатьДокумента(ПечатныеФормы, ТипДокумента, Ссылка, СтруктураПараметров, СообщениеОбОшибке) Экспорт
	
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXDTO(СтруктураПараметров);
	МассивПечатныхФорм  = СериализаторXDTO.ПрочитатьXDTO(ПечатныеФормы);
	ДокСсылка           = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(Ссылка, ТипДокумента);
	
	ФорматФайла         = ?(СтруктураПараметров.Свойство("ФорматФайла"), СтруктураПараметров.ФорматФайла, ".pdf");
	Если НРег(ФорматФайла) = ".pdf" Тогда
		ИмяФайла        = ПолучитьИмяВременногоФайла("pdf");
		ФорматПакета    = ТипФайлаПакетаОтображаемыхДокументов.PDF;
		ФорматДокумента = СтандартныеПодсистемыСервер.ТипФайлаТабличногоДокументаPDF();
	ИначеЕсли НРег(ФорматФайла) = ".xlsx" Тогда
		ИмяФайла        = ПолучитьИмяВременногоФайла("xlsx");
		ФорматПакета    = ТипФайлаПакетаОтображаемыхДокументов.XLSX;
		ФорматДокумента = ТипФайлаТабличногоДокумента.XLSX;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	ПечатьИПодпись      = ?(СтруктураПараметров.Свойство("ПечатьИПодпись"), СтруктураПараметров.ПечатьИПодпись, Ложь);
	Пакет               = ?(СтруктураПараметров.Свойство("Пакет"), СтруктураПараметров.Пакет, Истина);
	
	ПечатныеФормыОбъекта        = Неопределено;
	ЕстьОшибки                  = Ложь;
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСчетаФактуры" ,"");
	Результат.Вставить("ДатаСчетаФактуры"  ,"");
	Результат.Вставить("Вложения"          ,Новый Массив);
	Результат.Вставить("Получатель"        ,"");
	Результат.Вставить("Текст"             ,"");
	Результат.Вставить("Тема"              ,"");
	
	ПечатныеФормы = Новый Массив;
	
	Если ЗначениеЗаполнено(ДокСсылка) И ОбщегоНазначения.СсылкаСуществует(ДокСсылка) Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДокСсылка);
		
		КомандыОтправки = ОтправкаПочтовыхСообщений.КомандыОтправки();
		КомандыОтправки.Колонки.Добавить("ОбъектыОтправки");
		Документы[ТипДокумента].ДобавитьКомандыОтправки(КомандыОтправки);
		
		Для Каждого ИмяПечатнойФормы Из МассивПечатныхФорм Цикл
			
			Если ИмяПечатнойФормы = "СчетФактура"
				ИЛИ ИмяПечатнойФормы = "УниверсальныйПередаточныйДокумент" Тогда
				
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Организация, Дата");
				ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(РеквизитыОснования.Организация, РеквизитыОснования.Дата);
				
				//Для неплательщика НДС при печати УПД СФ не создаем (печатаем УПД со статусом 2)
				Если ПлательщикНДС ИЛИ ИмяПечатнойФормы = "СчетФактура" Тогда
					
					ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
					ПараметрыСоздания.Основание = ДокСсылка;
					РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
					Если РеквизитыСФ = Неопределено Тогда
						СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru=' Не удалось оформить счет-фактуру'");
						Продолжить;
					Иначе
						ЗаполнитьЗначенияСвойств(Результат, РеквизитыСФ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПечатныеФормыОбъекта = Неопределено;
			
			ОписаниеКоманды = КомандыОтправки.Найти(ИмяПечатнойФормы, "Идентификатор");
			Если ОписаниеКоманды <> Неопределено Тогда
				ОписаниеКоманды.ОбъектыОтправки = МассивОбъектов;
				Если ПустаяСтрока(ОписаниеКоманды.МенеджерПечати) Тогда
					ОписаниеКоманды.МенеджерПечати = "Документ." + ТипДокумента;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
					ИмяОбработчика = ОписаниеКоманды.Обработчик;
					Обработчик = ИмяОбработчика + "(ОписаниеКоманды, ЕстьОшибки)";
					ПечатныеФормыОбъекта = Вычислить(Обработчик);
				ИначеЕсли ОписаниеКоманды.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
					ПечатныеФормыОбъекта = ОтправкаПочтовыхСообщений.ПечатныеФормыИзВнешнегоИсточника(ОписаниеКоманды);
				Иначе
					ПечатныеФормыОбъекта = ОтправкаПочтовыхСообщений.ПечатныеФормы(ОписаниеКоманды);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПечатныеФормыОбъекта <> Неопределено Тогда
				ПечатныеФормыОбъекта.ПараметрыВывода.Вставить("ФормироватьЭД", Ложь);
				ПечатныеФормы.Добавить(ПечатныеФормыОбъекта);
			Иначе
				СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru=' Не удалось сформировать печатную форму'") + " " + ИмяПечатнойФормы;
			КонецЕсли;
		КонецЦикла;
		
		Если ПечатьИПодпись Тогда
			УправлениеПечатьюБП.ДобавитьФаксимилеПриОтправке(ПечатныеФормы);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("УпаковатьВАрхив", Ложь);
		ДополнительныеПараметры.Вставить("ФорматыСохранения", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматДокумента));
		МенеджерПечати       = "Документ." + ТипДокумента;
		ПараметрыПисьма      = ОтправкаПочтовыхСообщений.ПараметрыЭлектронногоПисьма(ПечатныеФормы, МенеджерПечати, ДополнительныеПараметры);
		Результат.Получатель = ПараметрыПисьма.Получатель;
		Результат.Текст      = ПараметрыПисьма.Текст;
		Результат.Тема       = ПараметрыПисьма.Тема;
		
		Если Пакет 
			И ЗначениеЗаполнено(ПараметрыПисьма.Вложения)
			И ПараметрыПисьма.Вложения.Количество() > 1 Тогда
			Для Каждого ПечатныеФормыОбъекта Из ПечатныеФормы Цикл
				ТабличныйДокумент = ПечатныеФормыОбъекта.ТабличныеДокументы[0].Значение;
				ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
			КонецЦикла;
			
			ПакетОтображаемыхДокументов.Записать(ИмяФайла, ФорматПакета);
			ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
			УдалитьФайлы(ИмяФайла);
			
			СтруктураЭлемента = Новый Структура;
			СтруктураЭлемента.Вставить("Файл"         , ДанныеФайла);
			СтруктураЭлемента.Вставить("Представление", СтрЗаменить(Результат.Тема, ".", " ") + ФорматФайла);
			Результат.Вложения.Добавить(СтруктураЭлемента);
		ИначеЕсли ЗначениеЗаполнено(ПараметрыПисьма.Вложения) Тогда
			Для Каждого ПечатнаяФорма Из ПараметрыПисьма.Вложения Цикл
				СтруктураЭлемента = Новый Структура;
				СтруктураЭлемента.Вставить("Файл"         , ПолучитьИзВременногоХранилища(ПечатнаяФорма.АдресВоВременномХранилище));
				СтруктураЭлемента.Вставить("Представление", ПечатнаяФорма.Представление);
				Результат.Вложения.Добавить(СтруктураЭлемента);
			КонецЦикла;
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось создать электронный документ. Сохраните изменения и попробуйте снова'");
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка синхронизации данных. Выполните синхронизацию и попробуйте снова'");
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьСведенияОбОрганизации(ИНН, СообщениеОбОшибке) Экспорт
	
	ИНН 		= СокрП(ИНН);
	ЭтоЮрЛицо   = (СтрДлина(ИНН) = 10);
	
	РеквизитыКонтрагента = Неопределено;
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
			ЕГРЮЛ  = СведенияОКонтрагенте.ЕГРЮЛ;
			
			РеквизитыКонтрагента = Новый Структура;
			Если ЗначениеЗаполнено(ЕГРЮЛ) Тогда
				РеквизитыКонтрагента.Вставить("Наименование",            ЕГРЮЛ.Наименование);
				РеквизитыКонтрагента.Вставить("НаименованиеПолное",      ЕГРЮЛ.НаименованиеПолное);
				РеквизитыКонтрагента.Вставить("НаименованиеСокращенное", ЕГРЮЛ.НаименованиеСокращенное);
				РеквизитыКонтрагента.Вставить("ИНН",                     ЕГРЮЛ.ИНН);
				РеквизитыКонтрагента.Вставить("КПП",                     ЕГРЮЛ.КПП);
				РеквизитыКонтрагента.Вставить("ДатаРегистрации",         ЕГРЮЛ.ДатаРегистрации);
				РеквизитыКонтрагента.Вставить("ЮридическийАдрес",        ЕГРЮЛ.ЮридическийАдрес);
				РеквизитыКонтрагента.Вставить("КодОКВЭД",
					?(ЗначениеЗаполнено(ЕГРЮЛ.ВидДеятельности), ЕГРЮЛ.ВидДеятельности.Код, Неопределено));
				РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",
					?(ЗначениеЗаполнено(ЕГРЮЛ.ВидДеятельности) И ЕГРЮЛ.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
				РеквизитыКонтрагента.Вставить("ОписаниеОшибки",          СведенияОКонтрагенте.ОписаниеОшибки);
				
				РеквизитыКонтрагента.Вставить("Руководитель");
				Если ЗначениеЗаполнено(ЕГРЮЛ.Руководители) Тогда
					
					Руководитель = Новый Структура("Фамилия, Имя, Отчество, ИНН, Должность");
					ЗаполнитьЗначенияСвойств(Руководитель, ЕГРЮЛ.Руководители[0]);
					РеквизитыКонтрагента.Руководитель = Руководитель;
				КонецЕсли;
			Иначе
				ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
				РеквизитыКонтрагента.Вставить("ОписаниеОшибки", СтрШаблон(ШаблонОписанияОшибки, ИНН));
			КонецЕсли;
		Иначе
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
			РеквизитыКонтрагента.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
			РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, "ЮридическоеЛицо", "ФизическоеЛицо"));
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			СообщениеОбОшибке = РеквизитыКонтрагента.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(РеквизитыКонтрагента, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьДосьеКонтрагента(ИНН, СообщениеОбОшибке) Экспорт
	
	ИНН              = СокрЛП(ИНН);
	ЭтоЮрЛицо        = (СтрДлина(ИНН) = 10);
	
	ДосьеКонтрагента  = Новый Структура;
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		АдресХранилища = ПоместитьВоВременноеХранилище("",);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("ИНН"              , ИНН);
		ПараметрыОтчета.Вставить("Контрагент"       , Контрагент);
		ПараметрыОтчета.Вставить("СостояниеДосье"   , "");
		ПараметрыОтчета.Вставить("СостояниеПроверки", "");
		
		ОписаниеОшибки = "Досье слишком большое или сервер сейчас перегружен, попробуйте поднее.";
		
		Для Шаг = 1 По 128 Цикл
			
			Отчеты.ДосьеКонтрагента.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
			ДанныеОтчета   = ПолучитьИзВременногоХранилища(АдресХранилища);
			
			//Если ошибка
			Если ДанныеОтчета.СостояниеДосье = "Завершено"
				И ДанныеОтчета.СостояниеПроверки = "Завершено" Тогда
				
				ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
				Прервать;
			КонецЕсли;
			
			//Если отчет сформирован
			Если ДанныеОтчета.СостояниеДосье = "СформированОтчет"
				И ДанныеОтчета.СостояниеПроверки = "СформированОтчет" Тогда
				
				ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
				Прервать;
			КонецЕсли;
			
			ПараметрыОтчета.Вставить("СостояниеДосье"   , ДанныеОтчета.СостояниеДосье);
			ПараметрыОтчета.Вставить("СостояниеПроверки", ДанныеОтчета.СостояниеПроверки);
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			ТаблицаРазделов = Новый ТаблицаЗначений;
			ТаблицаРазделов.Колонки.Добавить("ИмяРаздела");
			ТаблицаРазделов.Колонки.Добавить("Заголовок");
			ТаблицаРазделов.Колонки.Добавить("ТД");
			ТаблицаРазделов.Колонки.Добавить("КоличествоСтраниц");
			ТаблицаРазделов.Колонки.Добавить("НомерСтраницы");
						
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатГлавное";
			СтрокаРаздела.Заголовок 	= "Главное";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатДанныеГосРеестров";
			СтрокаРаздела.Заголовок 	= ?(ДанныеОтчета.ЭтоЮридическоеЛицо, "Данные ЕГРЮЛ", "Данные ЕГРИП");
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатБухгалтерскаяОтчетность";
			СтрокаРаздела.Заголовок 	= "Бухгалтерская отчетность";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатАнализОтчетности";
			СтрокаРаздела.Заголовок 	= "Анализ отчетности";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатФинансовыйАнализ";
			СтрокаРаздела.Заголовок 	= "Финансовый анализ";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатПроверки";
			СтрокаРаздела.Заголовок 	= "Проверки";
			
			КоличествоСтраниц = 0;
			
			ДанныеДосье    = ДанныеОтчета.ДанныеДосье;
			
			ДанныеПроверки = Неопределено;
			Если ДанныеОтчета.Свойство("ДанныеПроверки", ДанныеПроверки) Тогда
				ДанныеПроверки = Новый Структура;
			КонецЕсли; 
				
			НаименованиеКонтрагента = ДанныеДосье.НаименованиеКонтрагента;
			
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				
				Если ДанныеДосье.Свойство(Раздел.ИмяРаздела)
					ИЛИ ДанныеПроверки.Свойство(Раздел.ИмяРаздела) Тогда
					
					ИсходныйТабличныйДокумент = ?(ДанныеДосье.Свойство(Раздел.ИмяРаздела) , 
						ДанныеДосье[Раздел.ИмяРаздела], ДанныеПроверки[Раздел.ИмяРаздела]);
					ИсходныйТабличныйДокумент.АвтоМасштаб = Истина;
					
					//Развернем группировки
					Отбор = Новый Структура("ИмяДокумента", Раздел.ИмяРаздела);
					СтрокиТаблицы = ?(ДанныеДосье.Свойство(Раздел.ИмяРаздела), 
						ДанныеДосье.ОбластиРасшифровки.НайтиСтроки(Отбор), ДанныеПроверки.ОбластиРасшифровки.НайтиСтроки(Отбор));
					Для Каждого СтрокаОбласти Из СтрокиТаблицы Цикл
						НомерСтрокиЕще = СтрокаОбласти.ПерваяСтрока - 1;
						ИсходныйТабличныйДокумент.Область(НомерСтрокиЕще, , НомерСтрокиЕще).Видимость = Ложь;
						ИсходныйТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока-1).Видимость = Истина;
					КонецЦикла;
					Раздел.ТД = ИсходныйТабличныйДокумент;
					Раздел.КоличествоСтраниц = ИсходныйТабличныйДокумент.КоличествоСтраниц();
					Раздел.НомерСтраницы = КоличествоСтраниц + 1;
					КоличествоСтраниц = КоличествоСтраниц + Раздел.КоличествоСтраниц;
				Иначе
					Раздел.КоличествоСтраниц = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.АвтоМасштаб			= Истина;
			ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
			ТабличныйДокумент.ПолеСверху			= 10;
			ТабличныйДокумент.ПолеСнизу				= 10;
			ТабличныйДокумент.ПолеСлева          	= 5;
			ТабличныйДокумент.ПолеСправа         	= 5;
			
			Макет = ПланыОбмена.МобильноеПриложениеПредприниматель.ПолучитьМакет("МакетОглавление");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.ЗаголовокОтчета = НСтр("ru='Досье контрагента '") + НаименованиеКонтрагента;
			ОбластьМакета.Параметры.ДатаОтчета		= Формат(ТекущаяДатаСеанса(), "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Разделитель");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Содержание");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				Если Раздел.КоличествоСтраниц = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Заполнить(Раздел);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Отступ");
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				Если Раздел.КоличествоСтраниц = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Раздел.ИмяРаздела <> "РезультатГлавное" Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();					
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Разделитель");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ТабличныйДокумент.Вывести(Раздел.ТД);
			КонецЦикла;
			
			ИмяФайла = СтрШаблон(НСтр("ru='Досье контрагента %1'"), 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, "")) 
				+ ".pdf";
			КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
			ПолноеИмяФайла         = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);

			ТабличныйДокумент.Записать(ПолноеИмяФайла, СтандартныеПодсистемыСервер.ТипФайлаТабличногоДокументаPDF());
			
			ДосьеКонтрагента.Вставить("Файл", Новый ДвоичныеДанные(ПолноеИмяФайла));
			ДосьеКонтрагента.Вставить("ИмяФайла", ИмяФайла);
			
			УдалитьФайлы(ПолноеИмяФайла);
		
		Иначе
			СообщениеОбОшибке = ДанныеОтчета.ОписаниеОшибки;
		КонецЕсли;
		
	Иначе
		СообщениеОбОшибке = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ДосьеКонтрагента, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьНомерДокумента(УзелОбменаКод, ВидДокумента, ДатаДокумента, СообщениеОбОшибке) Экспорт
	
	НомерДокумента = "";
	УзелПриложения  = ПланыОбмена.МобильнаяБухгалтерия.НайтиПоКоду(УзелОбменаКод);
	Попытка
		Организация    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПриложения, "Организация");
		
		ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.Дата = ДатаДокумента;
		ДокументОбъект.УстановитьНовыйНомер();
		НомерДокумента = ДокументОбъект.Номер;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат НомерДокумента;
	
КонецФункции

Функция ЗарегистрироватьИзмененияПоЗапросу(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке, ПараметрыОтбора) Экспорт
	
	Результат       = Ложь;
	ПараметрыОтбора = СериализаторXDTO.ПрочитатьXDTO(ПараметрыОтбора);
	
	Если ТипЗнч(ПараметрыОтбора) <> Тип("Структура") Тогда
		СообщениеОбОшибке = "Не корректный отбор для регистрации изменений.";
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПараметрыОтбора.ПолноеИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		СообщениеОбОшибке = "Не определен тип объекта для регистрации изменений.";
		Возврат Результат;
	КонецЕсли;
	
	Если (СтрНайти(ВРЕГ(ПараметрыОтбора.ПолноеИмяОбъекта), "ДОКУМЕНТ") <> 0
		ИЛИ СтрНайти(ВРЕГ(ПараметрыОтбора.ПолноеИмяОбъекта), "СПРАВОЧНИК") <> 0)
		И ЗначениеЗаполнено(ПараметрыОтбора.Значение) Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыОтбора.ПолноеИмяОбъекта);
		Если МенеджерОбъекта = Неопределено Тогда
			СообщениеОбОшибке = "Не определен менеджер объекта для регистрации изменений.";
			Возврат Результат;
		КонецЕсли;
		Идентификатор = Новый УникальныйИдентификатор(ПараметрыОтбора.Значение);
		Отбор = МенеджерОбъекта.ПолучитьСсылку(Идентификатор);
	Иначе
		Отбор = Новый Массив();
		Отбор.Добавить(МетаданныеОбъекта);
	КонецЕсли;
	
	Попытка
		//Сформируем структуру параметров синхронизации
		СтруктураПараметров = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя);
		Если ТипЗнч(Отбор) = Тип("Массив") Тогда
			ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(СтруктураПараметров, Отбор);
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Отбор);
		КонецЕсли;
		Результат = Истина;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			"МобильнаяБухгалтерия.ЗарегистрироватьИзмененияПоЗапросу");
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеКПолучениюВФоне(УзелОбменаКод, УзелОбменаИмя, РазмерЧастиФайла, ПерваяСинхронизация, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	//Сформируем структуру параметров синхронизации
	ПараметрыОбмена = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя, ПерваяСинхронизация);
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	//Для файловой ИБ фоновые задания запускаются по очереди, выполнение синхронизация приоритетнее
	Если НЕ ЭтоФайловаяИБ Тогда
		// Действия по актуализации выполняем в фоновом задании,
		// т.к. выполнение может занять длительное время.
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("Организация", ПараметрыОбмена.Организация);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"МобильнаяБухгалтерия.АктуализироватьДанныеЗадачиБухгалтера",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
	КонецЕсли;
	
	// Подготавливаем данные к выгрузке из информационной базы
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыОбмена);
	МассивПараметров.Добавить(РазмерЧастиФайла);
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("ПараметрыОбмена",  ПараметрыОбмена);
	ПараметрыПроцедуры.Вставить("РазмерЧастиФайла", РазмерЧастиФайла);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МобильнаяБухгалтерия.ПодготовитьДанныеДляВыгрузки",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат ?(ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания), Строка(ДлительнаяОперация.ИдентификаторЗадания), "");
	
КонецФункции

//Готовит сообщение обмена для отправки в МП, в параметрах указывается узел-получатель и имя временного файла для записи сообщения,
//а также номер последнего успешно принятого в МП сообщения для очистки устаревшей регистрации изменений
Процедура ПодготовитьДанныеДляВыгрузки(Параметры, АдресРезультата) Экспорт
	
	ПараметрыОбмена = Параметры.ПараметрыОбмена;
	РазмерЧастиФайла = Параметры.РазмерЧастиФайла;
	
	РезультатЗадания = Новый Структура();
	РезультатЗадания.Вставить("СообщениеОбОшибке",   "");
	РезультатЗадания.Вставить("РезультатВыполнения", Неопределено);

	Попытка
		
		КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
		Если КаталогВременныхФайлов = СокрЛП(КаталогВременныхФайлов()) Тогда
			// Если создаем файл в стандартном каталоге, то имя файла формируем стандартным методом.
			ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");		
		Иначе
			// Если создаем файл в отдельно выделенном каталоге, то имя файла формируем самостоятельно.
			ИмяФайла = Строка(Новый УникальныйИдентификатор()) + ".xml";
			ПолноеИмяФайла         = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);
		КонецЕсли;
		
		ПодготовитьСообщениеВыгрузки(ПараметрыОбмена,, ПолноеИмяФайла);
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Поместить файл во временное хранилище.
		ИдентификаторФайлаВоВременномХранилище = Строка(ОбменДаннымиСервер.ПоместитьФайлВХранилище(ПолноеИмяФайла));
		
		// Создаем временный каталог для хранения частей файла данных.
		ВременныйКаталог                     = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(
			ИдентификаторФайлаВоВременномХранилище);
		ИмяНеразделенногоФайла               = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			ВременныйКаталог, ИдентификаторФайлаВоВременномХранилище + ".xml");
		
		СоздатьКаталог(ВременныйКаталог);
		КопироватьФайл(ПолноеИмяФайла, ИмяНеразделенногоФайла);
		
		
		// Разделение файла на части.
		ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, РазмерЧастиФайла * 1024);
		
		
		РезультатЗадания.РезультатВыполнения = Новый Структура("ИдентификаторФайла, КоличествоЧастейФайла", ИдентификаторФайлаВоВременномХранилище, ИменаФайлов.Количество());
		
	Исключение
		РезультатЗадания.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(РезультатЗадания.СообщениеОбОшибке, "МобильнаяБухгалтерия.ПодготовитьДанныеДляВыгрузки");
	КонецПопытки;
	
	// Записываем в качестве служебного сообщения в очередь сообщений фонового задания результат выполнения задания.
	// АдресРезультата не используем, т.к. временное хранилище будет удалено после окончания сеанса веб-сервиса,
	// который запустил текущее фоновое задание по генерации пароля.
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СообщениеРезультатаФоновогоЗадания()); // Вставляем маркер служебного сообщения.
	МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатЗадания));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСтрок));
	
	// Удалим исходный XML файл, т.к. он больше не требуется.
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
		// Зарегистрируем факт того, что не получилось удалить файл, но не будет из-за этого прерывать работу.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'МобильнаяБухгалтерия.ПодготовитьДанныеДляВыгрузки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон(НСтр("ru = 'Не удалось удалить файл %1: %2'",ОбщегоНазначения.КодОсновногоЯзыка()), 
				ПолноеИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

Функция ОсновныеПоказатели(УзелОбменаКод, УзелОбменаИмя) Экспорт
	
	//Сформируем структуру параметров синхронизации
	СтруктураПараметров = ПараметрыОбмена(УзелОбменаКод, УзелОбменаИмя);
	
	Организация = СтруктураПараметров.Организация;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоМесяца = НачалоМесяца(ТекущаяДата);
	ПериодГодНазад = ДобавитьМесяц(ТекущаяДата, -12);
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(13,0);
	
	ОстаткиДС = ПолучитьОстаткиДенежныхСредств(Организация, ТекущаяДата);
	ОстаткиДСПрошлыйМесяц = ПолучитьОстаткиДенежныхСредств(Организация, НачалоМесяца);
	
	ОсновныеПоказатели = НовыйОсновныеПоказатели();
	
	РасшифровкаПоказателейДС = НовыйОсновныеПоказатели();
	Для каждого ОстаткиДСПоСчетам Из ОстаткиДС Цикл
		НоваяСтрока = РасшифровкаПоказателейДС.Добавить();
		НоваяСтрока.РасшифровкаПоказателя = СериализоватьСсылку(ОстаткиДСПоСчетам.БанковскийСчет);
		НоваяСтрока.ЗначениеПоказателя = ОстаткиДСПоСчетам.Сумма;
		ДанныеПрошлыйМесяц = ОстаткиДСПрошлыйМесяц.Найти(ОстаткиДСПоСчетам.БанковскийСчет, "БанковскийСчет");
		Если ДанныеПрошлыйМесяц <> Неопределено Тогда
			НоваяСтрока.ЗначениеПоказателяПрошлыйПериод = ДанныеПрошлыйМесяц.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	НовыйПоказатель = ОсновныеПоказатели.Добавить();
	НовыйПоказатель.ИмяПоказателя = "ОстатокДенежныхСредств";
	НовыйПоказатель.РасшифровкаПоказателя = РасшифровкаПоказателейДС;
	НовыйПоказатель.ЗначениеПоказателя = РасшифровкаПоказателейДС.Итог("ЗначениеПоказателя");
	НовыйПоказатель.ЗначениеПоказателяПрошлыйПериод = РасшифровкаПоказателейДС.Итог("ЗначениеПоказателяПрошлыйПериод");
	
	ЗадолженностьПокупателей = Отчеты.ЗадолженностьПокупателей.ПолучитьЗадолженностьПокупателейДляМонитораРуководителяСводно(Организация, ТекущаяДата);
	ЗадолженностьПокупателейПрошлыйПериод = Отчеты.ЗадолженностьПокупателей.ПолучитьЗадолженностьПокупателейДляМонитораРуководителяСводно(Организация, НачалоМесяца);
	
	НовыйПоказатель = ОсновныеПоказатели.Добавить();
	НовыйПоказатель.ИмяПоказателя = "ЗадолженностьПокупателей";
	НовыйПоказатель.ЗначениеПоказателя = ЗадолженностьПокупателей[0].Сумма;
	НовыйПоказатель.ЗначениеПоказателяПрошлыйПериод = ЗадолженностьПокупателейПрошлыйПериод[0].Сумма;
	
	ЗадолженностьПоставщикам = Отчеты.ЗадолженностьПоставщикам.ПолучитьЗадолженностьПоставщикамДляМонитораРуководителяСводно(Организация, ТекущаяДата);
	ЗадолженностьПоставщикамПрошлыйПериод = Отчеты.ЗадолженностьПоставщикам.ПолучитьЗадолженностьПоставщикамДляМонитораРуководителяСводно(Организация, НачалоМесяца);
	
	НовыйПоказатель = ОсновныеПоказатели.Добавить();
	НовыйПоказатель.ИмяПоказателя = "ЗадолженностьПоставщикам";
	НовыйПоказатель.ЗначениеПоказателя = ЗадолженностьПоставщикам[0].Сумма;
	НовыйПоказатель.ЗначениеПоказателяПрошлыйПериод = ЗадолженностьПоставщикамПрошлыйПериод[0].Сумма;
	
	ДанныеПродажи = ПолучитьПродажиЗаПериод(Организация, НачалоГода(ТекущаяДата), ТекущаяДата);
	ДанныеПродажиПрошлыйПериод = ПолучитьПродажиЗаПериод(Организация, НачалоГода(ПериодГодНазад),ПериодГодНазад);
	
	НовыйПоказатель = ОсновныеПоказатели.Добавить();
	НовыйПоказатель.ИмяПоказателя = "Продажи";
	НовыйПоказатель.ЗначениеПоказателя = ДанныеПродажи[0].Сумма;
	НовыйПоказатель.ЗначениеПоказателяПрошлыйПериод = ДанныеПродажиПрошлыйПериод[0].Сумма;
	
	Возврат Новый ХранилищеЗначения(ОсновныеПоказатели, Новый СжатиеДанных(9));
	
КонецФункции

Функция НовыйОсновныеПоказатели()
	
	ОсновныеПоказатели = Новый ТаблицаЗначений;
	ОсновныеПоказатели.Колонки.Добавить("ИмяПоказателя", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОсновныеПоказатели.Колонки.Добавить("РасшифровкаПоказателя");
	ОсновныеПоказатели.Колонки.Добавить("ЗначениеПоказателя", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ОсновныеПоказатели.Колонки.Добавить("ЗначениеПоказателяПрошлыйПериод", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат ОсновныеПоказатели;
	
КонецФункции

// Формирует таблицу данных по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредств(Организация, Дата)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КонецДня(ТекущаяДатаСеанса()) = КонецДня(Дата) Тогда
		// Если остатки получаются "на сегодня", то обращаемся к текущим итогам регистра.
		Запрос.УстановитьПараметр("Период", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	КонецЕсли;
	Запрос.УстановитьПараметр("ВедетсяУчетПоВалютам", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	// ВалютаРегламентированногоУчета пронадобится еще раз ниже
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	// Получим список счетов кассы для отбора
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал)); 
	Запрос.УстановитьПараметр("СчетаКассы", СписокСчетов);
	
	// Получим список счетов безналичных расчетов для отбора
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);    // 52
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);   // 57
	СписокСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(СписокСчетов);
	
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокСчетов, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты)); 
	
	Запрос.УстановитьПараметр("СчетаУчетаБезналичные", СписокСчетов);
	
	Запрос.УстановитьПараметр("СубконтоБанковскиеСчета", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаКассы), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|				ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
		|		КОНЕЦ)
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаБезналичные), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ПО БанковскиеСчета.Ссылка = ХозрасчетныйОстатки.Субконто1
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	БанковскиеСчета.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции 

Функция ПолучитьПродажиЗаПериод(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	
	СчетаВыручки = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетаВыручки", СчетаВыручки);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручки), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция НачатьНастройкуОтчетности(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, СообщениеОбОшибке) Экспорт
	
	Результат = Ложь;
	
	Попытка
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Результат = КонтекстЭДОСервер.НачатьНастройкуПодключенияСМобильного(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, СообщениеОбОшибке);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке, "НачатьНастройкуОтчетности");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗавершитьНастройкуОтчетности(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, ВременныйПароль, СообщениеОбОшибке) Экспорт
	
	Результат = Ложь;
	
	Попытка
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Результат = КонтекстЭДОСервер.ЗавершитьНастройкуПодключенияСМобильного(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, ВременныйПароль, СообщениеОбОшибке);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке, "ЗавершитьНастройкуОтчетности");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьОперацииЯндексКасса(СтруктураПараметров)
	Перем ВидОперацииОплатаПлатежнойКартой;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексКассой")
		ИЛИ НЕ ЕстьНастройкаЯндексКассыДляОрганизации(СтруктураПараметров.Организация, ВидОперацииОплатаПлатежнойКартой) Тогда
		
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("ВидОперацииОплатаПлатежнойКартой", ВидОперацииОплатаПлатежнойКартой);
	
	ПериодЗагрузки = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаНачалаВыгрузки) Тогда
		ПериодЗагрузки.Вставить("ДатаНачала",    СтруктураПараметров.ДатаНачалаВыгрузки);
		ПериодЗагрузки.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	КонецЕсли; 
	
	ИнтеграцияСЯндексКассой.ЗагрузитьОперацииПоЯндексКассе(ПериодЗагрузки, СтруктураПараметров.Организация)

КонецПроцедуры

Функция ЕстьДоступЯндексКасса(Организация, АдресСтраницыПредоставленияДоступа) Экспорт
	СсылкаОрганизация = ДесериализоватьСсылкуНаСправочник(Организация, "Организации");
	
	ЕстьДоступ = (ИнтеграцияСЯндексКассой.ЕстьДоступКЯндексКассе(СсылкаОрганизация) = ИСТИНА);
	Если НЕ ЕстьДоступ Тогда
		АдресСтраницыПредоставленияДоступа = ИнтеграцияСЯндексКассой.АдресСтраницыПредоставленияДоступа();
	КонецЕсли; 
		
	Возврат ЕстьДоступ;
КонецФункции

Функция ПлатежнаяСсылка(СсылкаСчетНаОплату, ОтсутствуетДоступ) Экспорт

	Ссылка = ДесериализоватьСсылкуНаДокумент(СсылкаСчетНаОплату, "СчетНаОплатуПокупателю");
	
	Возврат ИнтеграцияСЯндексКассой.ПлатежнаяСсылка(Ссылка, ОтсутствуетДоступ);

КонецФункции

#КонецОбласти

#Область ЗагрузитьДанные

Процедура РазобратьПолученноеСообщение(СтруктураПараметров, СообщениеОбменаСтрокаXML, СообщениеОбОшибке)
	Перем ДанныеРегистрацииВНалоговомОргане;
	
	ДатаНачалаРаботы = СтруктураПараметров.ДатаНачалаРаботы;
	Организация      = СтруктураПараметров.Организация;
	
	ПерезаполнитьВесьСписокЗадач = Ложь;
	
	СсылкаНаФайлПодписьРуководителя = Неопределено;
	
	ИзмененияНастроек = Новый Структура();
	
	НастройкиПриложения      = Неопределено;
	НастройкиПользователя    = Неопределено;
	НастройкиУчетнойПолитики = Новый Структура;
	
	ВидыОбменаСБанком = Новый ТаблицаЗначений;
	ВидыОбменаСБанком.Колонки.Добавить("БанковскийСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ВидыОбменаСБанком.Колонки.Добавить("ВидОбмена",      Новый ОписаниеТипов("Строка"));
	ВидыОбменаСБанком.Колонки.Добавить("Удалить",        Новый ОписаниеТипов("Булево"));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбменаСтрокаXML);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	URIПространстваИмен = "http://www.1c.ru/EA/MobileAccounting";
	
	РегистрацииВНалоговомОргане = Новый ТаблицаЗначений;
	РегистрацииВНалоговомОргане.Колонки.Добавить("Владелец");
	РегистрацииВНалоговомОргане.Колонки.Добавить("КодНалоговогоОргана");
	РегистрацииВНалоговомОргане.Колонки.Добавить("КПП",  Новый ОписаниеТипов("Строка"));
	РегистрацииВНалоговомОргане.Колонки.Добавить("КодПоОКТМО");
	
	ПроведениеДокументов = Новый ТаблицаЗначений;
	ПроведениеДокументов.Колонки.Добавить("Ссылка");
	ПроведениеДокументов.Колонки.Добавить("Дата");
	// Сортировка документов в пределах одной секунды - по умолчанию у большинства документов порядок = 0, 
	// у особых видов документов может отличаться.
	ТипБулево = Новый ОписаниеТипов("Булево");
	ПроведениеДокументов.Колонки.Добавить("ПорядокСортировки",      Новый ОписаниеТипов("Число"));
	ПроведениеДокументов.Колонки.Добавить("Провести",               ТипБулево);
	ПроведениеДокументов.Колонки.Добавить("Удаление",               ТипБулево);
	ПроведениеДокументов.Колонки.Добавить("ЗаполнитьСчета",         ТипБулево);
	ПроведениеДокументов.Колонки.Добавить("ЗаполнитьНДФЛ",          ТипБулево);
	ПроведениеДокументов.Колонки.Добавить("ОжидаетПолученияНомера", ТипБулево);
	ПроведениеДокументов.Колонки.Добавить("ОжидаетЗаполнения", ТипБулево);
	
	ЗаполнениеОтчетности = Новый ТаблицаЗначений;
	ЗаполнениеОтчетности.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ЗаполнениеОтчетности.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗаполнениеОтчетности.Колонки.Добавить("ВидОтчета",           ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ЗаполнениеОтчетности.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(4));
	ЗаполнениеОтчетности.Колонки.Добавить("КПП",                 ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ЗаполнениеОтчетности.Колонки.Добавить("ДатаНачала",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗаполнениеОтчетности.Колонки.Добавить("ДатаОкончания",       ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗаполнениеОтчетности.Колонки.Добавить("ДанныеОтчета");
	
	ЗаполнениеУведомлений = Новый ТаблицаЗначений;
	ЗаполнениеУведомлений.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
	ЗаполнениеУведомлений.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗаполнениеУведомлений.Колонки.Добавить("ВидУведомления",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения"));
	ЗаполнениеУведомлений.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(4));
	ЗаполнениеУведомлений.Колонки.Добавить("ИмяОтчета",           ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ЗаполнениеУведомлений.Колонки.Добавить("ИмяФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ЗаполнениеУведомлений.Колонки.Добавить("ДатаПодписи",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗаполнениеУведомлений.Колонки.Добавить("ДанныеУведомления");
	
	ОтложенныеСтатусыУведомлений = Новый ТаблицаЗначений;
	ОтложенныеСтатусыУведомлений.Колонки.Добавить("Уведомление",              Новый ОписаниеТипов("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
	ОтложенныеСтатусыУведомлений.Колонки.Добавить("ПометкаУдаления",          Новый ОписаниеТипов("Булево"));
	ОтложенныеСтатусыУведомлений.Колонки.Добавить("СтатусОтправки",           ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОтложенныеСтатусыУведомлений.Колонки.Добавить("СостояниеСдачиОтчетности", Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	
	Пока ЧтениеXML.URIПространстваИмен = URIПространстваИмен Цикл
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ЧтениеXML.Имя);
		ОбъектXDTO     = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		
		// Константы
		Если ОбъектXDTO.Тип().Имя = "ДатаНачалаРаботы" Тогда
			
			ЗагрузитьКонстантуДатаНачалаРаботы(ОбъектXDTO, ДатаНачалаРаботы);
			
			Если СтруктураПараметров.ДатаНачалаРаботы <> ДатаНачалаРаботы Тогда
			
				ИзмененияНастроек.Вставить("ДатаНачалаРаботы", ДатаНачалаРаботы);
				
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ИспользоватьИнтеграциюСЯндексКассой" Тогда
			
			ЗагрузитьИспользоватьИнтеграциюСЯндексКассой(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		// Справочники
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВестиУчетПоДоговорам" Тогда
			
			ЗагрузитьВестиУчетПоДоговорам(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		// Справочники
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Банк" Тогда
			
			ЗагрузитьБанк(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "БанковскийСчет" Тогда
			
			ЗагрузитьБанковскийСчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВидДеятельностиЕНВД" Тогда
			
			ЗагрузитьВидДеятельностиЕНВД(ОбъектXDTO, СтруктураПараметров.УзелОбмена, РегистрацииВНалоговомОргане);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВидыОбменаСБанком" Тогда
			
			ЗагрузитьВидыОбменаСБанком(ОбъектXDTO, ВидыОбменаСБанком);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ДоговорКонтрагента" Тогда
			
			ЗагрузитьДоговорыКонтрагентов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "Должности" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьДолжности(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ДополнительныеУсловия" Тогда
			
			ЗагрузитьДополнительныеУсловия(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЕдиницаИзмерения" Тогда
			
			ЗагрузитьЕдиницуИзмерения(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "Контрагент" Тогда
			
			ЗагрузитьКонтрагента(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкаОбменаСБанками" Тогда
			
			ЗагрузитьНастройкуОбменаСБанками(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкаЯндексКассы" Тогда
			
			ЗагрузитьНастройкиЯндексКассы(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Номенклатура" Тогда
			
			ЗагрузитьНоменклатуру(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
		
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Организация" Тогда
			
			ОрганизацияДоЗагрузки = Организация;
			ЗагрузитьОрганизацию(ОбъектXDTO, СтруктураПараметров.УзелОбмена, Организация, РегистрацииВНалоговомОргане, СсылкаНаФайлПодписьРуководителя);
			
			Если ОрганизацияДоЗагрузки <> Организация Тогда
				ИзмененияНастроек.Вставить("Организация", Организация);
			КонецЕсли;
			Если ОбъектXDTO.ИПИспользуетТрудНаемныхРаботников <> УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
				ИзмененияНастроек.Вставить("ИПИспользуетТрудНаемныхРаботников", Истина);
			КонецЕсли;
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Патент" Тогда
			
			ЗагрузитьПатент(ОбъектXDTO, СтруктураПараметров.УзелОбмена, РегистрацииВНалоговомОргане);
			
			Если СтруктураПараметров.РасчетНалоговВБП Тогда
				ПерезаполнитьВесьСписокЗадач = Истина;
			КонецЕсли;
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПрисоединенныйФайлОрганизация" Тогда
			
			ЗагрузитьОрганизацииПрисоединенныеФайлы(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ФизическиеЛицаПрисоединенныеФайлы" Тогда
			
			ЗагрузитьФизическиеЛицаПрисоединенныеФайлы(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "Сотрудники" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьСотрудники(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтранаМира" Тогда
			
			ЗагрузитьСтраныМира(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ФизическиеЛица" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьФизическиеЛица(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		// Документы
		ИначеЕсли ОбъектXDTO.Тип().Имя = "АктСверкиВзаиморасчетов" Тогда
			
			ЗагрузитьАктСверкиВзаиморасчетов(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
		
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВводНачальныхОстатков" Тогда
			
			ЗагрузитьВводНачальныхОстатков(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВедомостьНаВыплатуЗарплатыВБанк" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьВедомостьНаВыплатуЗарплатыВБанк(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ВедомостьНаВыплатуЗарплатыВКассу" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьВедомостьНаВыплатуЗарплатыВКассу(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаписьКУДиР" Тогда
			
			ЗагрузитьЗаписьКУДиР(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОплатаПлатежнойКартой" Тогда
			
			ЗагрузитьОплатуПлатежнойКартой(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов)

		ИначеЕсли ОбъектXDTO.Тип().Имя = "СведенияОЗастрахованныхЛицахСЗВ_М" Тогда
			
			ЗагрузитьСведенияОЗастрахованныхЛицахСЗВ_М(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаявлениеАбонентаСпецоператораСвязи" 
			ИЛИ ОбъектXDTO.Тип().Имя = "ЗаявлениеАбонентаСпецоператораСвязиСПолучателями" Тогда
			
			ЗагрузитьЗаявлениеАбонентаСпецоператораСвязи(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "НачислениеЗарплаты" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьНачислениеЗарплаты(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПлатежноеПоручение" Тогда
			
			ЗагрузитьПлатежноеПоручение(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПоступлениеНаРасчетныйСчет" Тогда
			
			ЗагрузитьПоступлениеНаРасчетныйСчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПоступлениеТоваровУслуг" Тогда
			
			ЗагрузитьПоступлениеТоваровУслуг(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПриходныйКассовыйОрдер" Тогда
			
			ЗагрузитьПриходныйКассовыйОрдер(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "РасходныйКассовыйОрдер" Тогда
			
			ЗагрузитьРасходныйКассовыйОрдер(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РасходыНаОнлайнКассы" Тогда
			
			ЗагрузитьРасходыНаОнлайнКассы(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов, РегистрацииВНалоговомОргане);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РеализацияТоваровУслуг" Тогда
			
			ЗагрузитьРеализацияТоваровУслуг(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "РегламентированныйОтчет" Тогда
			
			ЗагрузитьРегламентированныйОтчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ЗаполнениеОтчетности, РегистрацииВНалоговомОргане);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "РозничнаяПродажа" Тогда
			
			ЗагрузитьРозничнаяПродажа(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
		
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СписаниеСРасчетногоСчета" Тогда
			
			ЗагрузитьСписаниеСРасчетногоСчета(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "СчетНаОплатуПокупателю" Тогда
			
			ЗагрузитьСчетНаОплатуПокупателю(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "УведомлениеОСпецрежимахНалогообложения" Тогда
			
			ЗагрузитьУведомлениеОСпецрежимахНалогообложения(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ЗаполнениеУведомлений, РегистрацииВНалоговомОргане);
			
		// РегистрыСведений
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОтветственныеЛицаОрганизаций" Тогда
			
			ЗагрузитьОтветственныеЛицаОрганизаций(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ДокументыФизическихЛиц" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьДокументыФизическихЛиц(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
		
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаписьПараметрыОбменСБанками" Тогда
			
			ЗагрузитьПараметрОбменаСБанками(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
		
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкиПродленияСроковНалоговОтчетов" Тогда
			
			ЗагрузитьНастройкиПродленияСроковНалоговОтчетов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
			ПерезаполнитьВесьСписокЗадач = Истина;
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкиСистемыНалогообложения" Тогда
			
			ЗагрузитьНастройкиСистемыНалогообложения(ОбъектXDTO, НастройкиУчетнойПолитики);
			
			ИзмененияНастроек.Вставить("НастройкиУчетнойПолитики");
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкиУчетаУСН" Тогда
			
			ЗагрузитьНастройкиУчетаУСН(ОбъектXDTO, НастройкиУчетнойПолитики);
			
			ИзмененияНастроек.Вставить("НастройкиУчетнойПолитики");

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОсновныеДоговорыКонтрагента" Тогда
			
			ЗагрузитьОсновныеДоговорыКонтрагента(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РегиональныеОсобенностиЕНВД" Тогда
			
			ЗагрузитьРегиональныеОсобенностиЕНВД(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СостоянияБанковскихДокументов" Тогда
			
			ЗагрузитьСостоянияБанковскихДокументов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтатусДокумента.РеализацияТоваровУслуг"
			ИЛИ ОбъектXDTO.Тип().Имя = "СтатусДокумента.СчетНаОплатуПокупателю" Тогда
			
			ЗагрузитьСтатусыДокументов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ТекущиеКадровыеДанныеСотрудников" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьТекущиеКадровыеДанныеСотрудников(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ТекущаяТарифнаяСтавкаСотрудников" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьТекущаяТарифнаяСтавкаСотрудников(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "ФизическиеПоказателиЕНВД" Тогда
			
			ЗагрузитьФизическиеПоказателиЕНВД(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "БухучетЗарплатыСотрудников" Тогда
			
			ЗагрузитьБухучетЗарплатыСотрудников(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		ИначеЕсли ОбъектXDTO.Тип().Имя = "СписокЗадач" Тогда
			
			ЗагрузитьСписокЗадач(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтатусыОтчетов" Тогда
			
			ЗагрузитьСтатусыОтчетов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СостоянияИнтеграцииСПлатформойСамозанятые" Тогда
			
			ЗагрузитьСостоянияИнтеграцииСПлатформойСамозанятые(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "УменьшениеНалогаПСНнаСтраховыеВзносы" Тогда
			
			ЗагрузитьУменьшениеНалогаПСНнаСтраховыеВзносы(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЖурналОтправокУведомлений" Тогда
			
			ЗагрузитьЖурналОтправокВКонтролирующиеОрганы(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ОтложенныеСтатусыУведомлений);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ФИОФизическихЛиц" Тогда
			
			МобильнаяБухгалтерияЗарплата.ЗагрузитьФИОФизическихЛиц(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЦеныНоменклатуры" Тогда
			
			ЗагрузитьЦеныНоменклатуры(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЧекиНПД" Тогда
			
			ЗагрузитьЧекиНПД(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ШтрихкодыНоменклатуры" Тогда
			
			ЗагрузитьШтрихкодыНоменклатуры(ОбъектXDTO, СтруктураПараметров.УзелОбмена);

		// Прочее
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОбщиеНастройки" Тогда
			
			ЗагрузитьНастройкиПриложения(ОбъектXDTO, НастройкиПриложения);
			
			ИзмененияНастроек.Вставить("НастройкиПриложения", НастройкиПриложения);
			
		// Прочее
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкиПользователя" Тогда
			
			ЗагрузитьНастройкиПользователя(ОбъектXDTO, НастройкиПользователя);
			
			ИзмененияНастроек.Вставить("НастройкиПользователя", НастройкиПользователя);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "УдалениеОбъекта" Тогда
			
			ЗагрузитьУдалениеОбъекта(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
			//Особая обработка
			Если ОбъектXDTO.ТипОбъекта = "БанковскийСчет" Тогда
				ИмяОбъекта = ИмяОбъектаПоМенеджеру(ИмяМенеджераИзXDTOОбъекта(ОбъектXDTO));
				СсылкаИБ = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, ИмяОбъекта);
				
				ВидОбменаСБанком = ВидыОбменаСБанком.Добавить();
				ВидОбменаСБанком.БанковскийСчет = СсылкаИБ;
				ВидОбменаСБанком.Удалить = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	Если ИзмененияНастроек.Количество() > 0 Тогда
		
		РеквизитыНастроекПриложения = СтрРазделить("НастройкиПриложения, Организация", ",");
		НовыеЗначенияНастроекПриложения = Новый Структура();
		Для Каждого РеквизитНастройки Из РеквизитыНастроекПриложения Цикл
			ЗначениеРеквизита = Неопределено;
			Если ИзмененияНастроек.Свойство(РеквизитНастройки, ЗначениеРеквизита) Тогда
				НовыеЗначенияНастроекПриложения.Вставить(РеквизитНастройки, ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;

		//Загружена первая организация
		Если ИзмененияНастроек.Свойство("Организация") Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
				УзелОбменаОбъект = СтруктураПараметров.УзелОбмена.ПолучитьОбъект();
				УзелОбменаОбъект.Организация = Организация;
				УзелОбменаОбъект.Записать();
				
				СтруктураПараметров.Организация = Организация;
				
				Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации")
					И Справочники.Организации.ЭтоЮрЛицо(СтруктураПараметров.Организация) Тогда
					Константы.ИспользоватьДокументыРеализации.Установить(Истина);
				КонецЕсли;
				
			ИначеЕсли Справочники.Организации.ЭтоЮрЛицо(СтруктураПараметров.Организация) Тогда
				МобильнаяБухгалтерияЗарплата.ПроверитьУстановитьНастройкиЗарплаты(СтруктураПараметров.Организация);
			КонецЕсли;
		КонецЕсли;
		
		Если НовыеЗначенияНастроекПриложения.Количество() >0
			ИЛИ ИзмененияНастроек.Свойство("НастройкиПользователя")
			ИЛИ ВидыОбменаСБанком.Количество() > 0 Тогда
		
			УзелОбъект = СтруктураПараметров.ЦентральныйУзел.ПолучитьОбъект();
			Если НовыеЗначенияНастроекПриложения.Количество() > 0 Тогда
				
				Настройка = УзелОбъект.НастройкиПриложения.Найти(СтруктураПараметров.Организация, "Организация");;
				Если Настройка = Неопределено Тогда
					Настройка             = УзелОбъект.НастройкиПриложения.Добавить();
					Настройка.Организация = СтруктураПараметров.Организация;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Настройка, НовыеЗначенияНастроекПриложения);
			КонецЕсли;
			
			Если ИзмененияНастроек.Свойство("НастройкиПользователя") Тогда
				Пользователь = Пользователи.ТекущийПользователь();
				Настройка = УзелОбъект.НастройкиПользователя.Найти(Пользователь, "Пользователь");
				Если Настройка = Неопределено Тогда
					Настройка =  УзелОбъект.НастройкиПользователя.Добавить();
					Настройка.Пользователь = Пользователь;
				КонецЕсли;
				Настройка.НастройкиПользователя = НастройкиПользователя;
			КонецЕсли;
			
			Для каждого СтрокаИзменений Из ВидыОбменаСБанком Цикл
				СтрокаУзла = УзелОбъект.ВидыОбменаСБанком.Найти(СтрокаИзменений.БанковскийСчет, "БанковскийСчет");
				Если СтрокаУзла = Неопределено Тогда
					СтрокаУзла = УзелОбъект.ВидыОбменаСБанком.Добавить();
				ИначеЕсли СтрокаИзменений.Удалить Тогда
					УзелОбъект.ВидыОбменаСБанком.Удалить(СтрокаУзла);
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаУзла, СтрокаИзменений);
			КонецЦикла;
			
			УзелОбъект.ОбменДанными.Загрузка = Истина;
			УзелОбъект.Записать();
		КонецЕсли;
		
		Если ИзмененияНастроек.Свойство("ДатаНачалаРаботы") Тогда
			
			ДатаВводаНачальныхОстатков = НачалоМесяца(ДатаНачалаРаботы) -1;
			ПроверитьУстановитьДатуВводаНачальныхОстатков(ДатаВводаНачальныхОстатков, СтруктураПараметров.Организация, СтруктураПараметров.УзелОбмена);
		
		КонецЕсли;
		
		Если ИзмененияНастроек.Свойство("ИПИспользуетТрудНаемныхРаботников") Тогда
			МобильнаяБухгалтерияЗарплата.ПроверитьУстановитьНастройкиЗарплаты(СтруктураПараметров.Организация);
		КонецЕсли;
		
		
		НастройкиВлияющиеНаПересчет = СтрРазделить("ДатаНачалаРаботы,Организация,ИПИспользуетТрудНаемныхРаботников,НастройкиУчетнойПолитики", ",");
		Для Каждого ИмяНастройки Из НастройкиВлияющиеНаПересчет Цикл
			Если ИзмененияНастроек.Свойство(ИмяНастройки) Тогда
				ПерезаполнитьВесьСписокЗадач = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзмененияНастроек.Свойство("НастройкиУчетнойПолитики") Тогда
			
			// Для старых версий приложений очистим настройки учетной политики
			Если СтруктураПараметров.ВерсияСхемы < 5 Тогда
				УдалитьНастройкиУчетнойПолитики(СтруктураПараметров.Организация);
				
				Если НастройкиУчетнойПолитики.Свойство("НастройкиСистемыНалогообложения") Тогда
					ДатаПервойУчетнойПолитики = НачалоГода(ДобавитьМесяц(ДатаНачалаРаботы,-12));
					Для каждого Запись Из НастройкиУчетнойПолитики.НастройкиСистемыНалогообложения Цикл
						Запись.Период = ДатаПервойУчетнойПолитики;
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли; 
			
			
			УстановитьУчетнуюПолитику(СтруктураПараметров.Организация, НастройкиУчетнойПолитики);
		Иначе
			// Начальные настройки для устаревших приложений
			
			ЕстьИзмененияВлияющиеНаУчет = Ложь;
			
			Для Каждого ИмяНастройки Из НастройкиВлияющиеНаПересчет Цикл
				Если ИзмененияНастроек.Свойство(ИмяНастройки) Тогда
					ЕстьИзмененияВлияющиеНаУчет = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьИзмененияВлияющиеНаУчет Тогда
				
				// Учетную политику создаем так, чтобы поддержать заполнение налоговых деклараций за прошлый год.
				ПроверитьУстановитьУчетнуюПолитикуПоУмолчанию(СтруктураПараметров.Организация, ДобавитьМесяц(ДатаНачалаРаботы, -12));
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОсновнаяРегистрацияВНалоговомОргане = Неопределено;
	
	Для Каждого ДанныеРегистрацииВНалоговомОргане ИЗ РегистрацииВНалоговомОргане Цикл
		// Заполнение кода налогового органа
		
		РегистрацияВНО = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
			СтруктураПараметров.Организация,
			ДанныеРегистрацииВНалоговомОргане.КПП,
			ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
			
		ЗаписатьРегистрациюВНалоговомОргане(РегистрацияВНО, СтруктураПараметров.Организация, ДанныеРегистрацииВНалоговомОргане);
		
		Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.Владелец) Тогда
			
			ЗаполняемыйОбъект = ДанныеРегистрацииВНалоговомОргане.Владелец.ПолучитьОбъект();
			Если ТипЗнч(ДанныеРегистрацииВНалоговомОргане.Владелец) = Тип("СправочникСсылка.Патенты") Тогда
				ЗаполняемыйОбъект.НалоговыйОрган = РегистрацияВНО;
			Иначе
				ЗаполняемыйОбъект.РегистрацияВНалоговомОргане = РегистрацияВНО;
				Если ТипЗнч(ДанныеРегистрацииВНалоговомОргане.Владелец) = Тип("СправочникСсылка.Организации") Тогда
					ОсновнаяРегистрацияВНалоговомОргане = РегистрацияВНО;
					ЗаполняемыйОбъект.НаименованиеНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНО, "Наименование");
				КонецЕсли;
			КонецЕсли;
			
			ЗаполняемыйОбъект.ОбменДанными.Загрузка    = Истина;
			ЗаполняемыйОбъект.ОбменДанными.Отправитель = СтруктураПараметров.УзелОбмена;
			ЗаполняемыйОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОсновнаяРегистрацияВНалоговомОргане) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период
		|ИЗ
		|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
		|ГДЕ
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
		ПериодыЗаписей = Запрос.Выполнить().Выгрузить();
		Если ПериодыЗаписей.Количество() = 1 Тогда
			ПериодЗаписи = ПериодыЗаписей[0].Период;
		Иначе
			ПериодЗаписи = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодЗаписи) Тогда
			// Обновляем регистр с историей регистрации БЗК в налоговом органе для самой организации и ее основного подразделения.
			СтруктурныеЕдиницы = Новый Массив;
			СтруктурныеЕдиницы.Добавить(Организация);
			ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Организация, Истина);
			Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
				СтруктурныеЕдиницы.Добавить(ОсновноеПодразделение);
			КонецЕсли;
			
			Для каждого СтруктурнаяЕдиница Из СтруктурныеЕдиницы Цикл
				НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
				НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
				
				СтрокаНабораЗаписей = НаборЗаписей.Добавить();
				СтрокаНабораЗаписей.Период                      = ПериодЗаписи;
				СтрокаНабораЗаписей.СтруктурнаяЕдиница          = СтруктурнаяЕдиница;
				СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = ОсновнаяРегистрацияВНалоговомОргане;
				
				Если НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей) Тогда
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	//Для совместимости со схемой формата <14
	
	Если СсылкаНаФайлПодписьРуководителя <> Неопределено Тогда
		
		//Считаем, что изменение в организации и файл подписи приходят одним пакетом
		ПеренестиФайлПодписиРуководителяВПрисоединенныеФайлыФизлиц(
			СтруктураПараметров.Организация,
			СсылкаНаФайлПодписьРуководителя);
		
	КонецЕсли;
	
	//Проведение документов
	ПроведениеДокументов.Сортировать("Дата Возр, ПорядокСортировки Возр");
	
	Для Каждого Документ Из ПроведениеДокументов Цикл
		Попытка
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект) Тогда
				ЗарегистрироватьОшибкуОбмена(
					НСтр("ru = 'Из Мобильной бухгалтерии загружен документ ранее даты запрета изменения данных'"), 
					"МобильнаяБухгалтерия.РазобратьПолученноеСообщение", Документ.Ссылка);
			КонецЕсли;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			
			Если Документ.Провести И ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Если Документ.ЗаполнитьСчета Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
				СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Отбор);
			КонецЕсли;
			
			Если Документ.ЗаполнитьНДФЛ Тогда
				
				МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.Ссылка);
				ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(ДокументОбъект);
				
				Зарплата = ДокументОбъект.Зарплата.Выгрузить();
				
				НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
				Зарплата, 
				ПараметрыЗаполнения.ОписаниеОперации, 
				ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
				ПараметрыЗаполнения.Финансирование,
				Документ.Ссылка);
				
				Если Зарплата.Колонки.Найти("НомерЛицевогоСчета") <> Неопределено Тогда
					Зарплата.Колонки.Удалить("НомерЛицевогоСчета");
				КонецЕсли;
				
				ДокументОбъект.ЗагрузитьВыплаты(Зарплата, НДФЛ);
				
			КонецЕсли;
			
			Если Документ.ОжидаетЗаполнения Тогда
				ЗаполнитьАктСверкиПоДаннымИБ(ДокументОбъект);
			КонецЕсли;
			
			//Отправим документ обратно
			Если НЕ Документ.ОжидаетПолученияНомера И НЕ Документ.ОжидаетЗаполнения Тогда
				ДокументОбъект.ОбменДанными.Отправитель = СтруктураПараметров.УзелОбмена;
			КонецЕсли;
			
			Если Документ.Провести Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Если Документ.Удаление Тогда
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗарегистрироватьОшибкуОбмена(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), 
				"МобильнаяБухгалтерия.РазобратьПолученноеСообщение");
		КонецПопытки
	КонецЦикла;
	
	// Заполнение регламентированных отчетов по итогам перепроведения документов
	ЗаполнитьРегламентированныеОтчеты(СтруктураПараметров, ЗаполнениеОтчетности, СообщениеОбОшибке);
	
	// Заполнение уведомления по итогам перепроведения документов
	ЗаполнитьУведомления(СтруктураПараметров, ЗаполнениеУведомлений, ОтложенныеСтатусыУведомлений, СообщениеОбОшибке);
	
	Если ПерезаполнитьВесьСписокЗадач Тогда
		
		ОбновитьЗадачи(СтруктураПараметров.Организация, 90, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление задач по указанной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой проверяется актуальность задач.
//	БыстроеОбновление - Булево - Признак необходимости проверки актуальности задач перед обновлением.
//		Если Истина, то в случае, когда задачи актуальны, обновление не запускается.
//
Процедура ОбновитьЗадачи(Организация, УпреждениеЗаполнения, БыстроеОбновление = Истина) Экспорт
	
	Если БыстроеОбновление Тогда
		
		МинимальныйГоризонтАктуальностиЗадач = ТекущаяДатаСеанса() + 30 * 86400;
		
		ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
		Если МинимальныйГоризонтАктуальностиЗадач <= КонецМесяца(ДатаАктуальности) Тогда
			// Перезаполнение списка задач не требуется
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(Организация, УпреждениеЗаполнения, , Ложь);
	
КонецПроцедуры

#Область Константы

Функция ЗагрузитьВестиУчетПоДоговорам(Данные, УзелОбмена)
	
	Менеджер = Константы.ВестиУчетПоДоговорам.СоздатьМенеджерЗначения();
	Менеджер.Значение                 = Данные.Значение;
	Менеджер.ОбменДанными.Загрузка    = Истина;
	Менеджер.ОбменДанными.Отправитель = УзелОбмена;
	Менеджер.Записать();
	
КонецФункции

Функция ЗагрузитьИспользоватьИнтеграциюСЯндексКассой(Данные, УзелОбмена)
	
	Менеджер = Константы.ИспользоватьИнтеграциюСЯндексКассой.СоздатьМенеджерЗначения();
	Менеджер.Значение                 = Данные.Значение;
	Менеджер.ОбменДанными.Загрузка    = Истина;
	Менеджер.ОбменДанными.Отправитель = УзелОбмена;
	Менеджер.Записать();
	
КонецФункции

#КонецОбласти

#Область НСИ
Процедура ЗагрузитьБанк(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Банки");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Банки.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Страна = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(ОбъектXDTO.Код, ОбъектXDTO.КоррСчет);
	Если ЗначениеЗаполнено(БанкПоКлассификатору) Тогда 
		ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкПоКлассификатору, "Родитель, Родитель.Код");
		Если ЗначениеЗаполнено(ДанныеБанка.Родитель) Тогда 
			Регион = Справочники.Банки.СсылкаНаБанк(ДанныеБанка.РодительКод, Истина);
			Если НЕ ЗначениеЗаполнено(Регион) Тогда
				МассивБанковИзКлассификатора = Новый Массив;
				МассивБанковИзКлассификатора.Добавить(ДанныеБанка.Родитель);
				ИерархияРодителей = РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
				Если ИерархияРодителей.Количество() > 0 Тогда
					Регион = ИерархияРодителей[ИерархияРодителей.ВГраница()];
				КонецЕсли;
			КонецЕсли;
			Объект.Родитель = Регион;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.КоррСчет        = ОбъектXDTO.КоррСчет;
	Объект.Город           = ОбъектXDTO.Город;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанковскийСчет(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "БанковскиеСчета");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВидСчета = "Расчетный";
		Объект.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Если ОбъектXDTO.ЭтоСчетОрганизации Тогда
		Объект.Владелец    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Организации");
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ЭтоСчетФизическогоЛица) И ОбъектXDTO.ЭтоСчетФизическогоЛица Тогда
		Объект.Владелец    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "ФизическиеЛица");
	Иначе
		Объект.Владелец    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Контрагенты");
	КонецЕсли;
	
	Объект.НомерСчета          = ОбъектXDTO.НомерСчета;
	Объект.Банк                = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Банк, "Банки");
	Объект.ТекстКорреспондента = ОбъектXDTO.ТекстКорреспондента;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьВидДеятельностиЕНВД(ОбъектXDTO, УзелОбмена, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ВидыДеятельностиЕНВД");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ВидыДеятельностиЕНВД.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.Владелец            = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Организации");
	Объект.Адрес               = ОбъектXDTO.Адрес;
	Объект.АдресСтрокой        = ОбъектXDTO.АдресСтрокой;
	Объект.КодПоОКТМО          = ОбъектXDTO.КодПоОКТМО;
	Объект.ДатаНачала          = ОбъектXDTO.ДатаНачала;
	Объект.ДатаПрекращения     = ОбъектXDTO.ДатаПрекращения;
	Объект.КодВидаДеятельности = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.НайтиПоКоду(ОбъектXDTO.КодВидаДеятельности);
	
	Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
		НовыеДанныеРегистрацииВНалоговомОргане                     = ДанныеРегистрацииВНалоговомОргане.Добавить();
		НовыеДанныеРегистрацииВНалоговомОргане.Владелец            = Ссылка;
		НовыеДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
		НовыеДанныеРегистрацииВНалоговомОргане.КПП                 = ОбъектXDTO.КПП;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьПатент(ОбъектXDTO, УзелОбмена, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Патенты");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Патенты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	Объект.Владелец        = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Организации");
	
	Объект.НомерПатента   = ОбъектXDTO.НомерПатента;
	Объект.ДатаВыдачи    = ОбъектXDTO.ДатаВыдачи;
	Объект.КБК           = ОбъектXDTO.КБК;
	Объект.КодПоОКТМО    = ОбъектXDTO.КодПоОКТМО;
	Объект.ДатаНачала    = ОбъектXDTO.ДатаНачала;
	Объект.ДатаОкончания = ОбъектXDTO.ДатаОкончания;
	
	Если ОбъектXDTO.СуммаОсвобожденияОтНалога <> Неопределено Тогда
		Объект.СуммаОсвобожденияОтНалога = ОбъектXDTO.СуммаОсвобожденияОтНалога;
	КонецЕсли;
	
	Объект.СуммаПервогоПлатежа = ОбъектXDTO.СуммаПервогоПлатежа;
	Объект.СуммаВторогоПлатежа = ОбъектXDTO.СуммаВторогоПлатежа;
	Объект.ДатаПервогоПлатежа  = ОбъектXDTO.ДатаПервогоПлатежа;
	Объект.ДатаВторогоПлатежа  = ОбъектXDTO.ДатаВторогоПлатежа;
	
	Объект.ПотенциальноВозможныйГодовойДоход = ОбъектXDTO.ПотенциальноВозможныйГодовойДоход;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
		Объект.ПостановкаНаУчетВНалоговомОргане  = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане;
		НовыеДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане.Добавить();
		НовыеДанныеРегистрацииВНалоговомОргане.Владелец = Ссылка;
		НовыеДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
	Иначе
		Объект.ПостановкаНаУчетВНалоговомОргане  = Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьДополнительныеУсловия(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "ДополнительныеУсловия");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ДополнительныеУсловия.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код				= ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	Объект.ИмяМакета		= ОбъектXDTO.КлючевыеСвойства.ИмяМакета;
	
	Объект.ТекстУсловий		= ОбъектXDTO.ТекстУсловий;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЕдиницуИзмерения(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "КлассификаторЕдиницИзмерения");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код				= ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьКонтрагента(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Контрагенты");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЮридическоеФизическоеЛицо) Тогда
		Если ОбъектXDTO.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ИначеЕсли ОбъектXDTO.ЮридическоеФизическоеЛицо = "ФизическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Если СтрДлина(ОбъектXDTO.ИНН) = 12 Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьКлючевыеСвойства(ОбъектXDTO.СтранаРегистрации) Тогда
		Объект.СтранаРегистрации = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.СтранаРегистрации, "СтраныМира");
	Иначе
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Объект.ИНН                       = ОбъектXDTO.ИНН;
	Объект.КПП                       = ОбъектXDTO.КПП;
	Объект.СвидетельствоСерияНомер   = ОбъектXDTO.СвидетельствоСерияНомер;
	Объект.СвидетельствоДатаВыдачи   = ОбъектXDTO.СвидетельствоДатаВыдачи;
	Объект.КодГосударственногоОргана = ОбъектXDTO.КодГосударственногоОргана;
	Объект.ГосударственныйОрган      = ОбъектXDTO.ГосударственныйОрган;
	Если ОбъектXDTO.ВидГосударственногоОргана = "НалоговыйОрган" Тогда
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "ОрганПФР" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "ОрганФСС" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "Прочий" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли; 
	
	Объект.ОсновнойБанковскийСчет    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОсновнойБанковскийСчет, "БанковскиеСчета");
	
	Если НЕ ЭтоНовый Тогда
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		
		Для Каждого ВидКИ Из ВидыКИ Цикл
			Отбор = Новый Структура("Вид", ВидКИ);
			Для каждого СтрокаКИ Из Объект.КонтактнаяИнформация.НайтиСтроки(Отбор) Цикл
				Объект.КонтактнаяИнформация.Удалить(СтрокаКИ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаКИ Из ОбъектXDTO.КонтактнаяИнформация Цикл
		
		ВидыКИ = Новый Массив;
		Если СтрокаКИ.ВидКИ = "ЮридическийАдрес" Тогда
			
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
			
		ИначеЕсли СтрокаКИ.ВидКИ = "Телефон" Тогда
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ИначеЕсли СтрокаКИ.ВидКИ = "АдресЭлектроннойПочты" Тогда
			ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		КонецЕсли;
		
		Для каждого ВидКи Из ВидыКИ Цикл
			Если ПустаяСтрока(СтрокаКИ.Значение) 
			 И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
				ЗначениеКИ = СтрокаКИ.ЗначенияПолей;
			Иначе
				ЗначениеКИ = СтрокаКИ.Значение;
			КонецЕсли;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Объект, ЗначениеКИ, ВидКИ,, Ложь);
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ЭтоНовый Тогда
		Если Объект.ИсторияКПП.Количество() > 1 Тогда
			Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП, Объект.ИсторияКПП);
		КонецЕсли;
		
		Если Объект.ИсторияНаименований.Количество() > 1 Тогда
			Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеПолное, Объект.ИсторияНаименований);
		КонецЕсли;
		
		Если Объект.ИсторияКонтактнойИнформации.Количество() > 1 Тогда
			УправлениеКонтактнойИнформациейБП.ПередЗаписьюИсторииКонтактнойИнформацииОбъекта(Объект);
		КонецЕсли;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиСистемыНалогообложения(ОбъектXDTO, НастройкиУчетнойПолитики)
	
	Если ОбъектXDTO.Записи.Количество()> 0 Тогда
		НастройкиСистемыНалогообложения = Неопределено;
		Если НЕ НастройкиУчетнойПолитики.Свойство("НастройкиСистемыНалогообложения", НастройкиСистемыНалогообложения) Тогда
			НастройкиУчетнойПолитики.Вставить("НастройкиСистемыНалогообложения", Новый Массив);
		КонецЕсли;
		
		Для каждого Запись Из ОбъектXDTO.Записи Цикл
			НастройкиСистемыНалогообложения = Новый Структура;
			НастройкиСистемыНалогообложения.Вставить("Период",                                  Запись.Период);
			НастройкиСистемыНалогообложения.Вставить("ИсходнаяДата",                            ПервоеНепустоеЗначение(Запись.ИсходнаяДата, Запись.Период));
			НастройкиСистемыНалогообложения.Вставить("ПлательщикЕНВД",                          Запись.ПлательщикЕНВД);
			НастройкиСистемыНалогообложения.Вставить("ПлательщикНДС",                           ПервоеНепустоеЗначение(Запись.ПлательщикНДС, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяУСНПатент",                    Запись.ПрименяетсяПатент);
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяУСНДоходы",                    ПервоеНепустоеЗначение(Запись.ПрименяетсяУСНДоходы, Истина));
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяУСНДоходыМинусРасходы",        ПервоеНепустоеЗначение(Запись.ПрименяетсяУСНДоходыМинусРасходы, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", ПервоеНепустоеЗначение(Запись.ПрименяетсяОсобыйПорядокНалогообложения, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяНалогНаПрофессиональныйДоход", ПервоеНепустоеЗначение(Запись.ПрименяетсяНалогНаПрофессиональныйДоход, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ПлательщикНалогаНаПрибыль",               ПервоеНепустоеЗначение(Запись.ПлательщикНалогаНаПрибыль, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ПрименяетсяУСН",                          ПервоеНепустоеЗначение(Запись.ПрименяетсяУСН, Ложь));
			НастройкиСистемыНалогообложения.Вставить("ДатаИзменения",                           Запись.ДатаИзменения);
			
			НастройкиУчетнойПолитики.НастройкиСистемыНалогообложения.Добавить(НастройкиСистемыНалогообложения);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиПродленияСроковНалоговОтчетов(ОбъектXDTO, УзелОбмена)
	
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	
	НаборЗаписей = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	СохраняемыеДанные = Новый Структура;
	СохраняемыеДанные.Вставить("ДеятельностьОтнесенаКПострадавшимОтКоронавируса", Ложь);
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СохраняемыеДанные, НаборЗаписей[0]);
		НаборЗаписей.Очистить();
	КонецЕсли;

	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация                  = Организация;
		НоваяЗапись.МерыУстойчивогоРазвития      = Запись.МерыУстойчивогоРазвития;
		НоваяЗапись.МерыУстойчивогоРазвитияМикро = Запись.МерыУстойчивогоРазвитияМикро;
		НоваяЗапись.РаботаетВНерабочиеДни        = Запись.РаботаетВНерабочиеДни;
		НоваяЗапись.ПеренестиСрокиОтчетовВФонды  = Запись.ПеренестиСрокиОтчетовВФонды;
		НоваяЗапись.ДатаУплатыУСНЗа2019Год       = Запись.ДатаУплатыУСНЗа2019Год;
		НоваяЗапись.ДатаУплатыУСНЗа1Кв2020       = Запись.ДатаУплатыУСНЗа1Кв2020;
		НоваяЗапись.ДатаУплатыУСНЗа2Кв2020       = Запись.ДатаУплатыУСНЗа2Кв2020;
		НоваяЗапись.ДатаУплатыУСНЗа3Кв2020       = Запись.ДатаУплатыУСНЗа3Кв2020;
		НоваяЗапись.ДатаУплатыЕНВДЗа1Кв2020      = Запись.ДатаУплатыЕНВДЗа1Кв2020;
		НоваяЗапись.ДатаУплатыЕНВДЗа2Кв2020      = Запись.ДатаУплатыЕНВДЗа2Кв2020;
		НоваяЗапись.ДатаУплатыЕНВДЗа3Кв2020      = Запись.ДатаУплатыЕНВДЗа3Кв2020;
		
		// Новые реквизиты были переданы в пакете
		Если Запись.ДеятельностьОтнесенаКПострадавшимОтКоронавируса <> Неопределено Тогда
			НоваяЗапись.ДеятельностьОтнесенаКПострадавшимОтКоронавируса = 
							Запись.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СохраняемыеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиУчетаУСН(ОбъектXDTO, НастройкиУчетнойПолитики)
	
	//удаление записи не обрабатываем, т.к. выгрузка содержит все записи регистра
	Период = ОбъектXDTO.ПериодОтбор;
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	
	НастройкиУчетаУСН = Неопределено;
	Если НЕ НастройкиУчетнойПолитики.Свойство("НастройкиУчетаУСН", НастройкиУчетаУСН) Тогда
		ТипОтражениеАванса = Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокОтраженияАвансов");
		ТипПатент = Новый ОписаниеТипов("СправочникСсылка.Патенты");
		
		НастройкиУчетаУСН = Новый ТаблицаЗначений;
		НастройкиУчетаУСН.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		НастройкиУчетаУСН.Колонки.Добавить("СтавкаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(4,2));
		НастройкиУчетаУСН.Колонки.Добавить("НалоговыеКаникулы", Новый ОписаниеТипов("Булево"));
		НастройкиУчетаУСН.Колонки.Добавить("ПорядокОтраженияАванса", ТипОтражениеАванса);
		НастройкиУчетаУСН.Колонки.Добавить("Патент", ТипПатент);
		НастройкиУчетаУСН.Колонки.Добавить("ИсходнаяДата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		
		ПорядокОтраженияАванса = ЗначениеПеречисленияПоИмени(
			Перечисления.ПорядокОтраженияАвансов,
			Запись.ПорядокОтраженияАванса);
		
		НоваяЗапись = НастройкиУчетаУСН.Добавить();
		НоваяЗапись.Период                 = Период;
		НоваяЗапись.ПорядокОтраженияАванса = ПорядокОтраженияАванса;
		НоваяЗапись.СтавкаНалога           = Запись.СтавкаНалога;
		НоваяЗапись.НалоговыеКаникулы      = ?(НоваяЗапись.СтавкаНалога = 0, Истина, Ложь);
		НоваяЗапись.Патент                 = ДесериализоватьСсылкуНаСправочник(Запись.Патент, "Патенты");
		НоваяЗапись.ИсходнаяДата           = Запись.ИсходнаяДата;
		
	КонецЦикла;
	
	НастройкиУчетнойПолитики.Вставить("НастройкиУчетаУСН", НастройкиУчетаУСН)
	
КонецПроцедуры

Процедура ЗагрузитьКонстантуДатаНачалаРаботы(ОбъектXDTO, ДатаНачалаРаботы)
	
	ДатаНачалаРаботы = ОбъектXDTO.ДатаНачалаРаботыЗначение;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкуОбменаСБанками(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "НастройкиОбменСБанками");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.Банк              = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Банк, "Банки");
	Объект.Организация       = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.АдресСервера             = ОбъектXDTO.АдресСервера;
	Объект.ВерсияФормата            = ОбъектXDTO.ВерсияФормата;
	Объект.ИдентификаторОрганизации = ОбъектXDTO.ИдентификаторОрганизации;
	Объект.ИмяПользователя          = ОбъектXDTO.ИмяПользователя;
	Объект.Недействительна          = ОбъектXDTO.Недействительна;
	
	Если ОбъектXDTO.ПрограммаБанка = "СбербанкОнлайн" Тогда
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		Объект.ИмяВнешнегоМодуля = "VPNKeyTLS";
		Если Объект.ИсходящиеДокументы.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
			НоваяСтрока.Формировать = Истина;
		КонецЕсли;
	Иначе
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Если Объект.ИсходящиеДокументы.Количество() = 0 Тогда
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников;
			НоваяСтрока.Формировать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		Константы.ИспользоватьОбменСБанками.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНоменклатуру(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Номенклатура");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.Номенклатура.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.Наименование;
	Объект.Код				= ОбъектXDTO.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
	
	Объект.НаименованиеПолное   = ОбъектXDTO.НаименованиеПолное;
	Если ЭтоНовый Тогда
		Объект.ВидНоменклатуры      = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(ОбъектXDTO.Услуга);
		Объект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	ИначеЕсли Объект.Услуга <> ОбъектXDTO.Услуга Тогда
		Объект.ВидНоменклатуры      = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(ОбъектXDTO.Услуга);
	КонецЕсли;
	
	Объект.Услуга           = ОбъектXDTO.Услуга;
	Объект.ЕдиницаИзмерения = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.ЕдиницаИзмерения, "КлассификаторЕдиницИзмерения");
	СтавкаНДС               = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Объект.ВидСтавкиНДС     = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	
	Если Не ЭтоНовый Тогда
		Если Объект.ИсторияВидаСтавкиНДС.Количество() > 1 Тогда
			Справочники.Номенклатура.УстановитьАктуальноеЗначениеИсторииВидаСтавкиНДС(Объект.ВидСтавкиНДС, Объект.ИсторияВидаСтавкиНДС);
		КонецЕсли;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьОрганизацию(ОбъектXDTO, УзелОбмена, Организация, ДанныеРегистрацииВНалоговомОргане, СсылкаНаФайлПодписьРуководителя)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Организации");
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Организации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.СтранаРегистрации         = Справочники.СтраныМира.Россия;
		Объект.ГоловнаяОрганизация       = Ссылка;
		Объект.ОбособленноеПодразделение = Ложь;
		Объект.КодОКОПФ = "12300";
		Объект.КодОКФС  = "16";
		Объект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
		
		Если НЕ Константы.НачалоРаботы.Получить() Тогда
			Константы.НачалоРаботы.Установить(Истина);
			Константы.ВидБизнесаОсновной.Установить(Перечисления.ВидыБизнеса.Другое);
		КонецЕсли;
	КонецЕсли;
		
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.НаименованиеСокращенное   = ОбъектXDTO.НаименованиеСокращенное;
	Объект.НаименованиеПолное        = ОбъектXDTO.НаименованиеПолное;
	Объект.ИНН                       = ОбъектXDTO.ИНН;
	Объект.КПП                       = ОбъектXDTO.КПП;
	Объект.ФамилияИП                 = ОбъектXDTO.ФамилияИП;
	Объект.ИмяИП                     = ОбъектXDTO.ИмяИП;
	Объект.ОтчествоИП                = ОбъектXDTO.ОтчествоИП;
	Объект.КодПоОКПО                 = ОбъектXDTO.КодПоОКПО;
	Объект.ИПРегистрационныйНомерПФР = ОбъектXDTO.ИПРегистрационныйНомерПФР;
	Если ЗначениеЗаполнено(ОбъектXDTO.КодОрганаПФР) Тогда
		Объект.КодОрганаПФР          = ОбъектXDTO.КодОрганаПФР;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.РегистрационныйНомерПФР) Тогда
		Объект.РегистрационныйНомерПФР   = ОбъектXDTO.РегистрационныйНомерПФР;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.КодПодчиненностиФСС) Тогда
		Объект.КодПодчиненностиФСС       = ОбъектXDTO.КодПодчиненностиФСС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.РегистрационныйНомерФСС) Тогда
		Объект.РегистрационныйНомерФСС   = ОбъектXDTO.РегистрационныйНомерФСС;
	КонецЕсли;
	Объект.КодОКВЭД2                 = ОбъектXDTO.КодОКВЭД2;
	Объект.ДатаРегистрации           = ОбъектXDTO.ДатаРегистрации;
	Объект.КодНалоговогоОргана       = ОбъектXDTO.КодНалоговогоОргана;
	Объект.СвидетельствоСерияНомер = ОбъектXDTO.СвидетельствоСерияНомер;
	Объект.СвидетельствоДатаВыдачи = ОбъектXDTO.СвидетельствоДатаВыдачи;
	Если ЗначениеЗаполнено(ОбъектXDTO.ОГРН) Тогда
		Объект.ОГРН = ОбъектXDTO.ОГРН;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
		НовыйДанныеРегистрацииВНалоговомОргане                     = ДанныеРегистрацииВНалоговомОргане.Добавить();
		НовыйДанныеРегистрацииВНалоговомОргане.Владелец            = Ссылка;
		НовыйДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
		НовыйДанныеРегистрацииВНалоговомОргане.КПП                 = ОбъектXDTO.КПП;
		НовыйДанныеРегистрацииВНалоговомОргане.КодПоОКТМО          = ОбъектXDTO.КодПоОКТМО;
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОсновнойБанковскийСчет, "БанковскиеСчета");
	
	Объект.ФайлЛоготип             = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлЛоготип, "ОрганизацииПрисоединенныеФайлы");
	Объект.ФайлПечать              = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлПечать, "ОрганизацииПрисоединенныеФайлы");
	
	//Схема формата >= 14 не передают свойство ФайлПодписьРуководителя
	Если ОбъектXDTO.ФайлПодписьРуководителя <> Неопределено Тогда
		//Старое мобильное приложение
		//Добавленный файл подписи будет сконвертирован и прикреплен к физлицу руководителя
		//Ограничения: не удаляем старые файлы, не конвертируем существующие файлы - они были обработаны обновлением
		ФайлПодписьРуководителя = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлПодписьРуководителя, "ОрганизацииПрисоединенныеФайлы");
		
		Если ЗначениеЗаполнено(ФайлПодписьРуководителя)
			И НЕ ОбщегоНазначения.СсылкаСуществует(ФайлПодписьРуководителя) Тогда
			СсылкаНаФайлПодписьРуководителя = ФайлПодписьРуководителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮридическоеФизическоеЛицо = ЗначениеПеречисленияПоИмени(Перечисления.ЮридическоеФизическоеЛицо, ОбъектXDTO.ЮридическоеФизическоеЛицо);
	Иначе
		// Для совместимости со старыми приложениями ИП6%
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли; 
	
	Если ЕстьКлючевыеСвойства(ОбъектXDTO.ДополнительныеУсловияПоУмолчанию) Тогда
		Объект.ДополнительныеУсловияПоУмолчанию
			= ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.ДополнительныеУсловияПоУмолчанию, "ДополнительныеУсловия");
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Объект, ОбъектXDTO.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Объект, ОбъектXDTO.ТелефонОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ЗначениеЗаполнено(Объект.ФамилияИП) 
		И ЗначениеЗаполнено(Объект.ИмяИП) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
			// Если из мобильной бухгалтерии передана ссылка на физлицо-ИП, 
			// то проверим, есть ли такая запись в справочнике физических лиц БП,
			// если есть, то просто свяжем организацию и физлицо, иначе создадим новое физлицо.
			
			ФизЛицоСсылка = Неопределено;
			Если ЗначениеЗаполнено(ОбъектXDTO.ИндивидуальныйПредприниматель) Тогда
				ФизЛицоСсылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ИндивидуальныйПредприниматель, "ФизическиеЛица");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФизЛицоСсылка) И ОбщегоНазначения.СсылкаСуществует(ФизЛицоСсылка) Тогда
				Объект.ИндивидуальныйПредприниматель = ФизЛицоСсылка;
			Иначе
				ФИО = Новый Структура("Фамилия, Имя, Отчество", Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
				ДанныеФизическогоЛица = Новый Структура("ИНН", Объект.ИНН);
				Если ЗначениеЗаполнено(ФизЛицоСсылка) Тогда
					ДанныеФизическогоЛица.Вставить("Ссылка", ФизЛицоСсылка);
				КонецЕсли;
			
				// Создаем нового физлицо с тем идентификатором, который передан из мобильного (если есть).
				ФизлицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица);
				Объект.ИндивидуальныйПредприниматель = ФизлицоОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем реквизиты регистрации в ПФР и ФСС.
	ЗаписатьРегистрациюВОрганеПФР(Объект);
	
	ЗаписатьРегистрациюВОрганеФСС(Объект);
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	Организация = Ссылка;
	
КонецПроцедуры

Процедура ЗагрузитьПараметрОбменаСБанками(ОбъектXDTO, УзелОбмена)
	
	НастройкаОбмена = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.НастройкаОбмена, "НастройкиОбменСБанками");
	
	ПараметрыОбменСБанкамиНаборЗаписей = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
	ПараметрыОбменСБанкамиНаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	
	ПараметрыОбменСБанкамиЗапись = ПараметрыОбменСБанкамиНаборЗаписей.Добавить();
	ПараметрыОбменСБанкамиЗапись.НастройкаОбмена          = НастройкаОбмена;
	ПараметрыОбменСБанкамиЗапись.ПоследняяДатаПолученияЭД = ОбъектXDTO.ПоследняяДатаПолученияЭД;
	
	ПараметрыОбменСБанкамиНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПараметрыОбменСБанкамиНаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	ПараметрыОбменСБанкамиНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыДокументов(ОбъектXDTO, УзелОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипДокумента = Неопределено;
	Статус = Неопределено;
	Если ОбъектXDTO.Тип().Имя = "СтатусДокумента.СчетНаОплатуПокупателю" Тогда
		ТипДокумента = "СчетНаОплатуПокупателю";
		Если ОбъектXDTO.Статус = "НеОплачен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.НеОплачен;
		ИначеЕсли ОбъектXDTO.Статус = "Оплачен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.Оплачен;
		ИначеЕсли ОбъектXDTO.Статус = "ОплаченЧастично" Тогда
			Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично;
		ИначеЕсли ОбъектXDTO.Статус = "Отменен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.Отменен;
		КонецЕсли;
	ИначеЕсли ОбъектXDTO.Тип().Имя = "СтатусДокумента.РеализацияТоваровУслуг" Тогда
		ТипДокумента = "РеализацияТоваровУслуг";
		Если ОбъектXDTO.Статус = "Подписан" Тогда
			Статус = Перечисления.СтатусыДокументовРеализации.Подписан;
		ИначеЕсли ОбъектXDTO.Статус = "НеПодписан" Тогда
			Статус = Перечисления.СтатусыДокументовРеализации.НеПодписан;
		КонецЕсли;
	КонецЕсли;
	
	Документ = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Документ, ТипДокумента);
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	РегистрСтатусыДокументов = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	РегистрСтатусыДокументов.Отбор.Документ.Установить(Документ);
	
	Запись = РегистрСтатусыДокументов.Добавить();
	Запись.Документ = Документ;
	Запись.Организация = Организация;
	Запись.Статус   = Статус;
	
	РегистрСтатусыДокументов.ОбменДанными.Загрузка = Истина;
	РегистрСтатусыДокументов.ОбменДанными.Отправитель = УзелОбмена;
	РегистрСтатусыДокументов.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗагрузитьСостоянияБанковскихДокументов(ОбъектXDTO, УзелОбмена)
	
	Организация    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	СсылкаНаОбъект = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.СсылкаНаОбъект, "ПлатежноеПоручение");
	Состояние      = ЗначениеПеречисленияПоИмени(Перечисления.СостоянияБанковскихДокументов, ОбъектXDTO.Состояние);
	
	НаборЗаписей = РегистрыСведений.СостоянияБанковскихДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Организация    = Организация;
	НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	НоваяЗапись.Состояние      = Состояние;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	НаборЗаписей.Записать();
	
	ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(СсылкаНаОбъект);
	
КонецПроцедуры

Процедура ЗагрузитьВидыОбменаСБанком(ОбъектXDTO, ВидыОбменаСБанком)
	
	БанковскийСчет = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчет, "БанковскиеСчета");
	ВидОбмена      = ОбъектXDTO.ВидОбмена;
	
	НоваяСтрока = ВидыОбменаСБанком.Добавить();
	НоваяСтрока.БанковскийСчет = БанковскийСчет;
	НоваяСтрока.ВидОбмена      = ВидОбмена;
	
КонецПроцедуры

Процедура ЗагрузитьСтраныМира(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "СтраныМира");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.СтраныМира.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код             = ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	Объект.КодАльфа2          = ОбъектXDTO.КодАльфа2;
	Объект.КодАльфа3          = ОбъектXDTO.КодАльфа3;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЦеныНоменклатуры(ОбъектXDTO, УзелОбмена)
	
	Номенклатура = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Номенклатура, "Номенклатура");
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СпособыЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.СпособЗаполненияЦены.Установить(СпособыЗаполненияЦен);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Номенклатура         = Номенклатура;
	НоваяЗапись.Цена                 = ОбъектXDTO.Цена;
	НоваяЗапись.Валюта               = Валюта;
	НоваяЗапись.ЦенаВключаетНДС      = Истина;
	НоваяЗапись.СпособЗаполненияЦены = СпособыЗаполненияЦен;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьШтрихкодыНоменклатуры(ОбъектXDTO, УзелОбмена)
	
	Номенклатура = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Номенклатура, "Номенклатура");
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Штрихкод.Установить(ОбъектXDTO.Штрихкод);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Номенклатура         = Номенклатура;
	НоваяЗапись.Штрихкод             = ОбъектXDTO.Штрихкод;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРегиональныеОсобенностиЕНВД(ОбъектXDTO, УзелОбмена)
	
	ВидДеятельностиЕНВД = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВидДеятельностиОтбор, "ВидыДеятельностиЕНВД");
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Период = ОбъектXDTO.ПериодОтбор;
	
	НаборЗаписей = РегистрыСведений.РегиональныеОсобенностиЕНВД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ВидДеятельности.Установить(ВидДеятельностиЕНВД);
	
	Для Каждого Запись ИЗ  ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период                    = Период;
		НоваяЗапись.ВидДеятельности           = ВидДеятельностиЕНВД;
		НоваяЗапись.Организация               = Организация;
		НоваяЗапись.НалоговаяСтавка           = Запись.НалоговаяСтавка;
		НоваяЗапись.КорректирующийКоэффициент = Запись.КорректирующийКоэффициент;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьФизическиеПоказателиЕНВД(ОбъектXDTO, УзелОбмена)
	
	ВидДеятельностиЕНВД = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВидДеятельностиОтбор, "ВидыДеятельностиЕНВД");
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Период = ОбъектXDTO.ПериодОтбор;
	
	НаборЗаписей = РегистрыСведений.ФизическиеПоказателиЕНВД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ВидДеятельности.Установить(ВидДеятельностиЕНВД);
	
	Для Каждого Запись ИЗ  ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период               = Период;
		НоваяЗапись.ВидДеятельности      = ВидДеятельностиЕНВД;
		НоваяЗапись.Организация          = Организация;
		НоваяЗапись.ФизическийПоказатель = Запись.ФизическийПоказатель;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьОсновныеДоговорыКонтрагента(ОбъектXDTO, УзелОбмена)
	
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Контрагент = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.КонтрагентОтбор, "Контрагенты");
	ИспользоватьДоговоры = ЗначениеЗаполнено(ОбъектXDTO.ВидДоговораОтбор);
	
	Если ИспользоватьДоговоры Тогда
		
		ВидДоговора = ЗначениеПеречисленияПоИмени(Перечисления.ВидыДоговоровКонтрагентов, ОбъектXDTO.ВидДоговораОтбор);
		
		НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Отбор.ВидДоговора.Установить(ВидДоговора);
		
		Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Контрагент  = Контрагент;
			НоваяЗапись.ВидДоговора = ВидДоговора;
			НоваяЗапись.Договор     = ДесериализоватьСсылкуНаСправочник(Запись.Договор, "ДоговорыКонтрагентов");
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
		
		НаборЗаписей.Записать();
		
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
			
			ОсновнойДоговор = ОсновнойДоговорКонтрагента(Неопределено, Организация, Контрагент, ВалютаРегламентированногоУчета, ВидДоговора);
			Если Не ЗначениеЗаполнено(ОсновнойДоговор) Тогда
				Продолжить;
			КонецЕсли;
			
			Договор = ОсновнойДоговор.ПолучитьОбъект();
			Договор.Номер = Запись.Номер;
			Договор.Дата  = Запись.Дата;
			Договор.ОбменДанными.Загрузка = Истина;
			Договор.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьБухучетЗарплатыСотрудников(ОбъектXDTO, УзелОбмена) Экспорт
	
	Сотрудник = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СотрудникОтбор, "Сотрудники");
	Период = ОбъектXDTO.ПериодОтбор;
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	
	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период         = Период;
		НоваяЗапись.Сотрудник      = Сотрудник;
		НоваяЗапись.ОтношениеКЕНВД = ЗначениеПеречисленияПоИмени(Перечисления.ОтношениеКЕНВДЗатратНаЗарплату, Запись.ОтношениеКЕНВД);
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСписокЗадач(ОбъектXDTO, УзелОбмена)
	
	//Если есть ХешЗадачи
	Если ОбъектXDTO.Записи.Количество() > 0 И
		ЗначениеЗаполнено(ОбъектXDTO.Записи[0].ХешЗадачи) Тогда
		
		КлючЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючЗадачиПоХешу(ОбъектXDTO.Записи[0].ХешЗадачи);
		Если КлючЗадачи <> Неопределено Тогда
			РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(КлючЗадачи, ОбъектXDTO.Записи[0].ВАрхиве);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//Если не задан ХешЗадачи
	Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	ПериодСобытия = ОбъектXDTO.ПериодСобытияОтбор;
	ИдЗадачи = ОбъектXDTO.ИдентификаторЗадачиОтбор;
	ИдПравила = ОбъектXDTO.ИдентификаторПравилаОтбор;
	
	Если ИдПравила = "ПАТЕНТ" Тогда
		Правило = ДесериализоватьСсылкуНаСправочник(ИдЗадачи, "Патенты");
	Иначе
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(ИдЗадачи, ИдПравила);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ПериодСобытия.Установить(ПериодСобытия);
	НаборЗаписей.Отбор.Правило.Установить(Правило);
	НаборЗаписей.Отбор.РегистрацияВНалоговомОргане.Установить(Справочники.НалоговыеОрганы.ПустаяСсылка());
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0
		И ОбъектXDTO.Записи.Количество() > 0 Тогда
		НаборЗаписей[0].ВАрхиве = ОбъектXDTO.Записи[0].ВАрхиве;
		НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОтветственныеЛицаОрганизаций(ОбъектXDTO, УзелОбмена)
	ОтветственноеЛицо  = ЗначениеПеречисленияПоИмени(Перечисления.ОтветственныеЛицаОрганизаций, ОбъектXDTO.ОтветственноеЛицоОтбор);
	СтруктурнаяЕдиница = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СтруктурнаяЕдиницаОтбор, "Организации");
	
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", СтруктурнаяЕдиница, ОтветственноеЛицо);
	
	ТаблицаЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(,Отбор);
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		Период = ТаблицаЗаписей[0].Период;
	Иначе
		Период = Дата("19800101");
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
	НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(ОтветственноеЛицо);
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из ОбъектXDTO.Записи Цикл
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
		Иначе
			НоваяЗапись = НаборЗаписей[0];
		КонецЕсли;
		
		НоваяЗапись.Период             = Период;
		НоваяЗапись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		НоваяЗапись.ОтветственноеЛицо  = ОтветственноеЛицо;
		НоваяЗапись.Должность          = ДесериализоватьСсылкуНаСправочник(Запись.Должность, "Должности");
		НоваяЗапись.ФизическоеЛицо     = ДесериализоватьСсылкуНаСправочник(Запись.ФизическоеЛицо, "ФизическиеЛица");
	КонецЦикла; 
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗагрузитьДоговорыКонтрагентов(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ДоговорыКонтрагентов");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		
		Если ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
		Иначе
			Объект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Объект.ВалютаВзаиморасчетов = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			Объект.Организация          = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
		КонецЕсли;
		
		Объект.УстановитьСсылкуНового(Ссылка);
		
	КонецЕсли;
	
	Объект.Наименование         = ОбъектXDTO.Наименование;
	Объект.Код                  = ОбъектXDTO.Код;
	Объект.ПометкаУдаления      = ОбъектXDTO.ПометкаУдаления;
	Объект.Владелец             = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Контрагенты");
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Объект.Номер                = ОбъектXDTO.Номер;
		Объект.Дата                 = ОбъектXDTO.Дата;
		Объект.ВидДоговора          = ЗначениеПеречисленияПоИмени(Перечисления.ВидыДоговоровКонтрагентов, ОбъектXDTO.ВидДоговора);
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыОтчетов(ОбъектXDTO, УзелОбмена)
	
	Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Если ОбъектXDTO.ВидДокумента = "СведенияОЗастрахованныхЛицахСЗВ_М" Тогда
		Отчет = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ОтчетОтбор, "СведенияОЗастрахованныхЛицахСЗВ_М");
	Иначе
		Отчет = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ОтчетОтбор, "РегламентированныйОтчет");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Отчет) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Ссылка.Установить(Отчет);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0
		И ОбъектXDTO.Записи.Количество() > 0 Тогда
		НаборЗаписей[0].СостояниеСдачиОтчетности = ЗначениеПеречисленияПоИмени(Перечисления.СостояниеСдачиОтчетности, ОбъектXDTO.Записи[0].СостояниеСдачиОтчетности);
		НаборЗаписей[0].Статус = ОбъектXDTO.Записи[0].Статус;
		ПометкаУдаления = ОбъектXDTO.Записи[0].ПометкаУдаления;
		Если ЗначениеЗаполнено(ПометкаУдаления) Тогда
			НаборЗаписей[0].ПометкаУдаления = ПометкаУдаления;
			ТекущийИндексКартинки = НаборЗаписей[0].ИндексКартинки;
			Если ТекущийИндексКартинки  > 1 И ПометкаУдаления Тогда
				НаборЗаписей[0].ИндексКартинки  = ТекущийИндексКартинки - 2;
			ИначеЕсли ТекущийИндексКартинки  <= 1 И НЕ ПометкаУдаления Тогда
				НаборЗаписей[0].ИндексКартинки  = ТекущийИндексКартинки + 2;
			КонецЕсли; 
		КонецЕсли; 
		НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСостоянияИнтеграцииСПлатформойСамозанятые(ОбъектXDTO, УзелОбмена)
	
	Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	
	НаборЗаписей = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	
	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Организация         = Организация;
		//Для сохранения обратной совместимости
		Если Запись.Состояние = "НеНастроено" Тогда
			Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
		ИначеЕсли Запись.Состояние = "НеПривязано" Тогда
			Если ЗначениеЗаполнено(Запись.ИдентификаторЗаявки) Тогда
				Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен;
			Иначе
				Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует;
			КонецЕсли;
		Иначе
			Состояние = ЗначениеПеречисленияПоИмени(Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые, Запись.Состояние);
		КонецЕсли;
		ЗаписьНабора.Состояние           = Состояние;
		ЗаписьНабора.ИдентификаторЗаявки = Запись.ИдентификаторЗаявки;
		ЗаписьНабора.ДатаВремяСобытия    = Запись.ДатаВремяСобытия;
		ЗаписьНабора.ИдентификаторПриложения = Запись.ИдентификаторПриложения;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЧекиНПД(ОбъектXDTO, УзелОбмена) Экспорт
	
	Если ОбъектXDTO.ТипДокументОснованиеОтбор = "ПриходныйКассовыйОрдер" Тогда
		ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснованиеОтбор, "ПриходныйКассовыйОрдер");
	ИначеЕсли ОбъектXDTO.ТипДокументОснованиеОтбор = "РасходныйКассовыйОрдер" Тогда
		ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснованиеОтбор, "РасходныйКассовыйОрдер");
	ИначеЕсли ОбъектXDTO.ТипДокументОснованиеОтбор = "ПоступлениеНаРасчетныйСчет" Тогда
		ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснованиеОтбор, "ПоступлениеНаРасчетныйСчет");
	ИначеЕсли ОбъектXDTO.ТипДокументОснованиеОтбор = "СписаниеСРасчетногоСчета" Тогда
		ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснованиеОтбор, "СписаниеСРасчетногоСчета");
	ИначеЕсли ОбъектXDTO.ТипДокументОснованиеОтбор = "ОтчетОРозничныхПродажах" Тогда
		ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснованиеОтбор, "ОтчетОРозничныхПродажах");
	Иначе
		Возврат;
	КонецЕсли;
	
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	
	НаборЗаписей = РегистрыСведений.ЧекиНПД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОснование);
	
	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация           = Организация;
		НоваяЗапись.ДокументОснование     = ДокументОснование;
		НоваяЗапись.Состояние             = ЗначениеПеречисленияПоИмени(Перечисления.СостоянияЧековНПД, Запись.Состояние);
		НоваяЗапись.СуммаЧека             = Запись.СуммаЧека;
		НоваяЗапись.НомерЧека             = Запись.НомерЧека;
		НоваяЗапись.ДатаЧека              = Запись.ДатаЧека;
		НоваяЗапись.ДатаАннулированияЧека = Запись.ДатаАннулированияЧека;
		НоваяЗапись.ПричинаОтменыЧека     =
			Перечисления.ПричиныОтменыЧекаНПД.ПричинаПоПредставлению(Запись.ПричинаАннулирования);
		НоваяЗапись.АдресЧекаНаСайте      = Запись.АдресЧекаНаСайте;
		НоваяЗапись.ПроизведенВозвратПоЧеку      = Запись.ПроизведенВозвратПоЧеку;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьОрганизацииПрисоединенныеФайлы(ОбъектXDTO, УзелОбмена)
	
	ЗагрузитьФайлы(ОбъектXDTO, "ОрганизацииПрисоединенныеФайлы", УзелОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьФизическиеЛицаПрисоединенныеФайлы(ОбъектXDTO, УзелОбмена)
	
	ЗагрузитьФайлы(ОбъектXDTO, "ФизическиеЛицаПрисоединенныеФайлы", УзелОбмена);
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиЯндексКассы(ОбъектXDTO, УзелОбмена)
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "НастройкиЯндексКассы");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.НастройкиЯндексКассы.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.Наименование             = УзелОбмена.Организация;
		Объект.ОтправкаЧековЧерезЯндекс = Ложь;
		Объект.СДоговором               = Истина;
		ОБъект.Организация              = УзелОбмена.Организация;
	КонецЕсли;
	
	Объект.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
	
	Объект.ИдентификаторМагазина = ОбъектXDTO.ИдентификаторМагазина;
	Объект.ИдентификаторВитрины  = ОбъектXDTO.ИдентификаторВитрины;
	Объект.Недействительна       = ОбъектXDTO.Недействительна;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	РегистрыСведений.СтатусОбменовСЯндексКассой.ОбновитьЗначениеРеквизитаОрганизация(Объект.Ссылка, Объект.Организация);
КонецПроцедуры

Процедура ЗагрузитьУменьшениеНалогаПСНнаСтраховыеВзносы(ОбъектXDTO, УзелОбмена)
	
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	Патент      = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ПатентОтбор, "Патенты");
	Уведомление = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.УведомлениеОтбор, "УведомлениеОСпецрежимахНалогообложения");
	
	НаборЗаписей = РегистрыСведений.УменьшениеНалогаПСНнаСтраховыеВзносы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Патент.Установить(Патент);
	НаборЗаписей.Отбор.Уведомление.Установить(Уведомление);
	
	Для Каждого Запись ИЗ ОбъектXDTO.Записи Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Организация = Организация;
		ЗаписьНабора.Патент      = Патент;
		ЗаписьНабора.Уведомление = Уведомление;
		ЗаписьНабора.Сумма       = Запись.Сумма;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЖурналОтправокВКонтролирующиеОрганы(ОбъектXDTO, УзелОбмена, ОтложенныеСтатусыУведомлений)
	
	Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ОрганизацияОтбор, "Организации");
	ОтчетСсылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.СсылкаОтбор, "УведомлениеОСпецрежимахНалогообложения");
	
	Если Не ЗначениеЗаполнено(ОтчетСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектXDTO.Записи.Количество() > 0 Тогда 
		ЗаписьСтатусов = ОтложенныеСтатусыУведомлений.Добавить();
		ЗаписьСтатусов.Уведомление = ОтчетСсылка; 
		ЗаписьСтатусов.СостояниеСдачиОтчетности = ЗначениеПеречисленияПоИмени(Перечисления.СостояниеСдачиОтчетности,
		ОбъектXDTO.Записи[0].СостояниеСдачиОтчетности);
		ЗаписьСтатусов.СтатусОтправки           = ОбъектXDTO.Записи[0].СтатусОтправки;
		ЗаписьСтатусов.ПометкаУдаления          = ОбъектXDTO.Записи[0].ПометкаУдаления;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ЗагрузитьВводНачальныхОстатков(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ВводНачальныхОстатков");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Организация	= Организация;
	Объект.Номер 		= ОбъектXDTO.Номер;
	Объект.Дата			= ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		
		Объект.ОтражатьВБухгалтерскомУчете 	= Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
		Объект.ОтражатьПоСпециальнымРегистрам = Истина;
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	Если ОбъектXDTO.РазделУчета = "РасчетыПоНалогамИСборам" Тогда
		Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
		ЗагрузитьВводНачальныхОстатковРасчетыПоНалогамИСборам(ОбъектXDTO, Объект);
	ИначеЕсли ОбъектXDTO.РазделУчета = "ДенежныеСредства" Тогда
		Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
		ЗагрузитьВводНачальныхОстатковДенежныеСредства(ОбъектXDTO, Объект);
	ИначеЕсли ОбъектXDTO.РазделУчета = "РасчетыСПоставщикамиИПодрядчиками" Тогда
		Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
		ЗагрузитьВводНачальныхОстатковРасчетыСКонтрагентами(ОбъектXDTO, Объект);
	ИначеЕсли ОбъектXDTO.РазделУчета = "РасчетыСПокупателямиИЗаказчиками" Тогда
		Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
		ЗагрузитьВводНачальныхОстатковРасчетыСКонтрагентами(ОбъектXDTO, Объект);
	ИначеЕсли ОбъектXDTO.РазделУчета = "Товары" Тогда
		Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
		ЗагрузитьВводНачальныхОстатковНоменклатураНаСкладе(ОбъектXDTO, Объект);
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьВводНачальныхОстатковРасчетыПоНалогамИСборам(ОбъектXDTO, Объект)
	
	СопоставлятьИзменения = Объект.РасчетыПоНалогамИСборам.Количество() > 0;
	ТаблицаДокументаПосле = Объект.РасчетыПоНалогамИСборам;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.РасчетыПоНалогамИСборам.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;

	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.РасчетыПоНалогамИСборам Цикл
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		Если ЗагружаемаяСтрокаТЧ.Сумма < 0 Тогда
			НоваяСтрока.Сумма = - ЗагружаемаяСтрокаТЧ.Сумма;
		Иначе
			НоваяСтрока.СуммаКт = ЗагружаемаяСтрокаТЧ.Сумма;
		КонецЕсли;
		
		Если ЗагружаемаяСтрокаТЧ.ВидНалога = "УСН_Доходы" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН;
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "ЕНВД" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ЕНВД;
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "ФиксированныеВзносы_ПФР" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "ФиксированныеВзносы_ФФОМС" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "НДФЛ" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ; //68.01
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины; //68.01.2
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС; //69.02.7
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "СтраховыеВзносы_ФСС" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС; //69.01
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ; //69.11
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		ИначеЕсли ЗагружаемаяСтрокаТЧ.ВидНалога = "СтраховыеВзносы_ФФОМС" Тогда
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФФОМС; //69.03.1
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		
		КлючевыеПоля = "СчетУчета,ВидПлатежаВБюджет";
		Восстанавливать = "УровеньБюджета, РегистрацияВНалоговомОргане, СтатьяЗатрат, ВидНалога, ХарактерДеятельности, НоменклатурнаяГруппа, ОтражениеВУСН";
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, Восстанавливать);
		
		//Не все виды налога передаются в мобильное. Поэтому добавляем и заменяем существующие
		ЗначенияКлючевыхПолей = ТаблицаДокументаПосле.Выгрузить(, КлючевыеПоля);
		ЗначенияКлючевыхПолей.Свернуть(КлючевыеПоля);
		Для Каждого ПоляОтбора Из ЗначенияКлючевыхПолей Цикл
			Отбор = Новый Структура(КлючевыеПоля);
			ЗаполнитьЗначенияСвойств(Отбор, ПоляОтбора);
			Для Каждого УдаляемаяСтрока Из ТаблицаДокументаДо.НайтиСтроки(Отбор) Цикл
				ТаблицаДокументаДо.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокументаДо, ТаблицаДокументаПосле);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьВводНачальныхОстатковДенежныеСредства(ОбъектXDTO, Объект)
	
	СопоставлятьИзменения = Объект.БухСправка.Количество() > 0;
	ТаблицаДокументаПосле = Объект.БухСправка;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.БухСправка.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ДенежныеСредства Цикл
		
		БанковскийСчет = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.БанковскийСчет, "БанковскиеСчета");
		Если ЗначениеЗаполнено(БанковскийСчет)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Валютный") = Истина Тогда
			//Данные счета будут восстановлены из исходной таблицы
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			НоваяСтрока.Сумма = ЗагружаемаяСтрокаТЧ.Сумма;
			НоваяСтрока.Субконто1 = БанковскийСчет;
		Иначе
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			НоваяСтрока.Сумма = ЗагружаемаяСтрокаТЧ.Сумма;
		КонецЕсли;
		
		НоваяСтрока.Сумма = ЗагружаемаяСтрокаТЧ.Сумма;
		
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		
		КлючевыеПоля = "СчетУчета,Субконто1";
		ВосстановитьПоля = "Субконто2, Субконто3";
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, ВосстановитьПоля);
		
		Для Каждого СтрокаДокумента Из ТаблицаДокументаДо Цикл
			
			//Восстановим строки, которые не выгружаем
			Если СтрокаДокумента.СчетУчета <> ПланыСчетов.Хозрасчетный.КассаОрганизации
				И СтрокаДокумента.СчетУчета <> ПланыСчетов.Хозрасчетный.РасчетныеСчета Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДокументаПосле.Добавить(), СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВводНачальныхОстатковРасчетыСКонтрагентами(ОбъектXDTO, Объект)
	
	СопоставлятьИзменения = Объект.РасчетыСКонтрагентами.Количество() > 0;
	ТаблицаДокументаПосле = Объект.РасчетыСКонтрагентами;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.РасчетыСКонтрагентами.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.РасчетыСКонтрагентами Цикл
		Контрагент = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Контрагент, "Контрагенты");
		ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.ДоговорКонтрагента, "ДоговорыКонтрагентов");
		
		
		Если Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
			НоваяСтрока = ТаблицаДокументаПосле.Добавить();
			
			НоваяСтрока.Контрагент         = Контрагент;
			НоваяСтрока.Валюта             = ВалютаРеглУчета;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
			Иначе
				НоваяСтрока.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(
					Неопределено, Объект.Организация, Контрагент, ВалютаРеглУчета, 
					Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			КонецЕсли;
			НоваяСтрока.Документ           = ПолучитьДокументРасчетовСКонтрагентом(
				Объект.Организация, Контрагент, НоваяСтрока.ДоговорКонтрагента, ОбъектXDTO.Дата);
				
			Если ЗагружаемаяСтрокаТЧ.Сумма > 0 Тогда
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
				НоваяСтрока.Сумма     = ЗагружаемаяСтрокаТЧ.Сумма;
				НоваяСтрока.Аванс     = Истина;
			Иначе
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
				НоваяСтрока.СуммаКт   = - ЗагружаемаяСтрокаТЧ.Сумма;
				НоваяСтрока.Аванс     = Ложь;
			КонецЕсли;
			
		ИначеЕсли Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками Тогда
			НоваяСтрока = ТаблицаДокументаПосле.Добавить();
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Валюта             = ВалютаРеглУчета;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
			Иначе
				НоваяСтрока.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(
					Неопределено, Объект.Организация, Контрагент, ВалютаРеглУчета, 
					Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			КонецЕсли;

			НоваяСтрока.Документ           = ПолучитьДокументРасчетовСКонтрагентом(
				Объект.Организация, Контрагент, НоваяСтрока.ДоговорКонтрагента, ОбъектXDTO.Дата);
			
			Если ЗагружаемаяСтрокаТЧ.Сумма < 0 Тогда
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				НоваяСтрока.СуммаКт   = - ЗагружаемаяСтрокаТЧ.Сумма;
				НоваяСтрока.Аванс     = Истина;
			Иначе
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				НоваяСтрока.Сумма     = ЗагружаемаяСтрокаТЧ.Сумма;
				НоваяСтрока.Аванс     = Ложь;
			КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		
		//Расчеты в валюте не выгружаются в мобильное - восстановим их как есть
		Для Каждого СтрокаДокумента Из ТаблицаДокументаДо Цикл
			СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.СчетУчета);
			Если СвойстваСчетаРасчетов.Валютный Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДокументаПосле.Добавить(), СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВводНачальныхОстатковНоменклатураНаСкладе(ОбъектXDTO, Объект)
	
	Объект.НоменклатураНаСкладе.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.НоменклатураНаСкладе Цикл
		
		НоваяСтрока              = Объект.НоменклатураНаСкладе.Добавить();
		НоваяСтрока.Номенклатура = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Склад        = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		НоваяСтрока.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		НоваяСтрока.Количество   = ЗагружаемаяСтрокаТЧ.Количество;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры

Процедура ЗагрузитьЗаписьКУДиР(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ЗаписьКУДиР");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаписьКУДиР.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Патент      = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Патент, "Патенты");
	
	Если Объект.Строки.Количество() = 0 Тогда
		Объект.Строки.Добавить();
	КонецЕсли;
	
	Объект.Строки[0].ДатаНомер  = ОбъектXDTO.ДатаНомерПервичногоДокумента;
	
	Объект.Строки[0].ДатаПервичногоДокумента  = ОбъектXDTO.ДатаПервичногоДокумента;
	Объект.Строки[0].НомерПервичногоДокумента = ОбъектXDTO.НомерПервичногоДокумента;
	
	Объект.Строки[0].Содержание = ОбъектXDTO.СодержаниеОперации;
	Если ЗначениеЗаполнено(ОбъектXDTO.ДоходЕНВД) Тогда
		Объект.Строки[0].ДоходыЕНВД = Истина;
		Объект.Строки[0].Графа5     = ОбъектXDTO.ДоходЕНВД;
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ДоходПатент) Тогда
		Объект.Строки[0].ДоходыЕНВД = Ложь;
		Объект.Строки[0].Графа4     = ОбъектXDTO.ДоходПатент;
		Объект.ДеятельностьНаПатенте = Истина;
	Иначе
		Объект.Строки[0].ДоходыЕНВД = Ложь;
		Объект.Строки[0].Графа5     = ОбъектXDTO.ДоходУСН;
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЗаявлениеАбонентаСпецоператораСвязи(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ЗаявлениеАбонентаСпецоператораСвязи");
	Объект = Ссылка.ПолучитьОбъект();
	
	НовыйДокумент = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаявлениеАбонентаСпецоператораСвязи.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		НовыйДокумент = Истина;
	КонецЕсли;
	
	Объект.Номер			= ОбъектXDTO.Номер;
	Объект.Дата				= ОбъектXDTO.Дата;
	
	Объект.ПометкаУдаления  = ОбъектXDTO.ПометкаУдаления;
	Объект.Организация		= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	//Объект.АдресФактический
	Объект.АдресЮридический               = ОбъектXDTO.АдресЮридический;
	Объект.ВладелецЭЦП                    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
	Если СокрЛП(ОбъектXDTO.ВладелецЭЦПГражданство) = "РОССИЯ" Тогда
		Объект.ВладелецЭЦПГражданство     = Справочники.СтраныМира.Россия;
	Иначе
		Объект.ВладелецЭЦПГражданство     = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВладелецЭЦПГражданство, "СтраныМира");
	КонецЕсли;
	Объект.ВладелецЭЦПДатаВыдачиДокумента = ОбъектXDTO.ВладелецЭЦПДатаВыдачиДокумента;
	Объект.ВладелецЭЦПДатаРождения        = ОбъектXDTO.ВладелецЭЦПДатаРождения;
	//Объект.ВладелецЭЦПДолжность
	Объект.ВладелецЭЦПИмя                 = ОбъектXDTO.ВладелецЭЦПИмя;
	Объект.ВладелецЭЦПКемВыданДокумент    = ОбъектXDTO.ВладелецЭЦПКемВыданДокумент;
	Объект.ВладелецЭЦПКодПодразделения    = ОбъектXDTO.ВладелецЭЦПКодПодразделения;
	Объект.ВладелецЭЦПМестоРождения       = ОбъектXDTO.ВладелецЭЦПМестоРождения;
	Объект.ВладелецЭЦПНомерДокумента      = ОбъектXDTO.ВладелецЭЦПНомерДокумента;
	Объект.ВладелецЭЦПОтчество            = ОбъектXDTO.ВладелецЭЦПОтчество;
	//Объект.ВладелецЭЦППодразделение
	Объект.ВладелецЭЦППол                 = ЗначениеПеречисленияПоИмени(Перечисления.ПолФизическогоЛица, ОбъектXDTO.ВладелецЭЦППол);
	Объект.ВладелецЭЦПСерияДокумента      = ОбъектXDTO.ВладелецЭЦПСерияДокумента;
	Объект.ВладелецЭЦПСНИЛС               = ОбъектXDTO.ВладелецЭЦПСНИЛС;
	Объект.ВладелецЭЦПФамилия             = ОбъектXDTO.ВладелецЭЦПФамилия;
	//Объект.ГенерацияКлючейТолькоДляФСРАР
	//Объект.ДатаВыдачиЛицензииФСРАР
	//Объект.ДатаОтправкиЗаявления
	//Объект.ДатаПолученияОтвета
	//Объект.ДатаСозданияУчетнойЗаписи
	//Объект.ДополнительныйКодФСС
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторДокументооборота) Тогда
		Объект.ИдентификаторДокументооборота = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	КонецЕсли;
	//Объект.ИдентификаторКлючевогоКонтейнера
	//Объект.ИдентификаторПроверкиТелефонаДляПаролей
	//Объект.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей
	Объект.ИНН                            = ОбъектXDTO.ИНН;
	Объект.КодНалоговогоОрганаЭДО         = ОбъектXDTO.КодНалоговогоОрганаЭДО;
	//Объект.КодРегионаФСРАР
	//Объект.Комментарий
	//Объект.КПП
	Объект.КраткоеНаименование            = ОбъектXDTO.КраткоеНаименование;
	Объект.НастройкаЗавершена             = ОбъектXDTO.НастройкаЗавершена;
	//Объект.НомерЛицензииФСРАР
	//Объект.НомерОсновнойПоставки1с
	Объект.ОГРН                           = ОбъектXDTO.ОГРН;
	//Объект.ОператорЭДО
	//Объект.ПодатьЗаявкуНаПодключениеРПН
	//Объект.ПодатьЗаявкуНаПодключениеФТС
	//Объект.ПодатьЗаявкуНаСертификатДляФСРАР
	//Объект.ПодключитьЭДО
	//Объект.ПодписатьЭП
	Объект.ПолноеНаименование             = ОбъектXDTO.ПолноеНаименование;
	//Объект.ПризнакКрупнейшегоНалогоплательщика
	//Объект.ПризнакОбособленногоПодразделения
	//Объект.ПризнакУполномоченногоПредставителя
	//Объект.ПутьКонтейнерЗакрытогоКлюча
	//Объект.ПутьКонтейнерЗакрытогоКлючаФСРАР
	Объект.РегНомерПФР                    = ОбъектXDTO.РегНомерПФР;
	Объект.РегНомерФСС                    = ОбъектXDTO.РегНомерФСС;
	//Объект.СерияЛицензииФСРАР
	//Объект.Сертификат
	Объект.Статус                         = ЗначениеПеречисленияПоИмени(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи, ОбъектXDTO.Статус);
	Объект.СтатусКомментарий              = ОбъектXDTO.СтатусКомментарий;
	Если Объект.ТелефонМобильный = Объект.ТелефонМобильныйДляАвторизации Тогда
		Объект.ТелефонМобильный = ОбъектXDTO.ТелефонМобильныйДляАвторизации;
	КонецЕсли;
	Если Объект.ТелефонОсновной = Объект.ТелефонМобильныйДляАвторизации Тогда
		Объект.ТелефонОсновной = ОбъектXDTO.ТелефонМобильныйДляАвторизации;
	КонецЕсли;
	Объект.ТелефонМобильныйДляАвторизации = ОбъектXDTO.ТелефонМобильныйДляАвторизации;
	//Объект.ТелефонДополнительный
	//Объект.ТипДекларантаФСРАР
	Объект.ТипЗаявления                   = ЗначениеПеречисленияПоИмени(Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи, ОбъектXDTO.ТипЗаявления);
	//Объект.ТипКриптопровайдера
	//Объект.ТипОрганизации
	//Объект.ТребуетсяРаспискаВПолученииСертификата
	//Объект.УчетнаяЗапись
	Объект.ЭлектроннаяПочта               = ОбъектXDTO.ЭлектроннаяПочта;
	//Объект.ЭлектроннаяПочтаАутентификация
	//Объект.РеквизитыСертификата

	Если НовыйДокумент Тогда
		Объект.АдресФактический                 = Объект.АдресЮридический;
		Объект.ВладелецЭЦПТип                   = Перечисления.ТипыВладельцевЭЦП.Руководитель;
		Объект.Ответственный                    = Пользователи.ТекущийПользователь();
		Объект.СпецоператорСвязи                = Перечисления.СпецоператорыСвязи.КалугаАстрал;
		Объект.ЭлектроннаяПодписьВМоделиСервиса = Истина;
		Объект.ВладелецЭЦПВидДокумента          = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		Объект.ЭтоУпрощенноеЗаявление           = Истина;
		
		Если ОбъектXDTO.Тип().Имя <> "ЗаявлениеАбонентаСпецоператораСвязиСПолучателями" Тогда
			Получатель = Объект.Получатели.Добавить();
			Получатель.ТипПолучателя                = Перечисления.ТипыКонтролирующихОрганов.ФНС;
			Получатель.КодПолучателя                = ОбъектXDTO.КодНалоговогоОрганаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.Тип().Имя = "ЗаявлениеАбонентаСпецоператораСвязиСПолучателями" Тогда
		Объект.Получатели.Очистить();
		Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Получатели Цикл
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.ТипПолучателя = ЗначениеПеречисленияПоИмени(Перечисления.ТипыКонтролирующихОрганов, ЗагружаемаяСтрокаТЧ.ТипПолучателя);
			НоваяСтрока.КодПолучателя = ЗагружаемаяСтрокаТЧ.КодПолучателя;
		КонецЦикла;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
КонецПроцедуры

Процедура ЗагрузитьПлатежноеПоручение(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПлатежноеПоручение");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовыйДокумент = (Объект = Неопределено);
	Если ЭтоНовыйДокумент Тогда
		Объект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ИзмененПериодДокумента = ЭтоНовыйДокумент ИЛИ ГОД(Объект.Дата) <> ГОД(ОбъектXDTO.Дата);
	УстановитьНовыйНомер = ПустаяСтрока(ОбъектXDTO.Номер)
		И ИзмененПериодДокумента;
		
	Объект.Организация  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Дата         = ОбъектXDTO.Дата;
	
	Если УстановитьНовыйНомер Тогда
		Объект.УстановитьНовыйНомер();
	Иначе
		Объект.Номер = ОбъектXDTO.Номер;
	КонецЕсли;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен ИЛИ УстановитьНовыйНомер Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
		НоваяСтрока.ОжидаетПолученияНомера = УстановитьНовыйНомер;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.ВидОперации = ЗначениеПеречисленияПоИмени(Перечисления.ВидыОперацийСписаниеДенежныхСредств, ОбъектXDTO.ВидОперации);
	
	Объект.СчетОрганизации = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		Объект.Контрагент  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "ФизическиеЛица");
	Иначе
		Объект.Контрагент         = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
		Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	КонецЕсли;
	Объект.СчетКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	Объект.СуммаДокумента  = ОбъектXDTO.Сумма;
	Объект.СтавкаНДС       = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Объект.СуммаНДС        = ОбъектXDTO.СуммаНДС;
	Объект.КодОКАТО        = ОбъектXDTO.КодОКАТО;
	
	ЭтоПеречислениеЗарплаты =
		Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
	Если ЭтоПеречислениеЗарплаты
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Объект.КодВыплат = ОбъектXDTO.КодВыплат;
		Если ЗначениеЗаполнено(ОбъектXDTO.КодВидаДохода) Тогда
			Объект.КодВидаДохода = ОбъектXDTO.КодВидаДохода;
		ИначеЕсли ЭтоПеречислениеЗарплаты
			И ПустаяСтрока(Объект.КодВидаДохода) // в БП значение может быть заполнено
			И УчетДенежныхСредствКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(Объект.Дата) Тогда
			Объект.КодВидаДохода = "1"; // Значение по умолчанию для перечисление заработной платы.
		КонецЕсли;
	Иначе
		Объект.КодВыплат     = "";
		Объект.КодВидаДохода = "";
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ОбъектXDTO.НазначениеПлатежа;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ПлатежнаяВедомость) Тогда
		Объект.ПлатежнаяВедомость = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ПлатежнаяВедомость, "ВедомостьНаВыплатуЗарплатыВБанк");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ВидНалоговогоОбязательства = ЗначениеПеречисленияПоИмени(Перечисления.ВидыПлатежейВГосБюджет, ОбъектXDTO.ВидНалоговогоОбязательства);
		Если НЕ ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
		Если ОбъектXDTO.ВидНалога = "УСН_Доходы" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы, Истина);
			Если Месяц(ОбъектXDTO.ПериодНачисления) < 10 Тогда
				Объект.ПоказательПериода = "КВ." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=КК.yyyy");
			Иначе
				Объект.ПоказательПериода = "ГД.00." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=yyyy");
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.ВидНалога = "ЕНВД" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕНВД, Истина);
			Объект.ПоказательПериода = "КВ." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=КК.yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
			Объект.ПоказательПериода = "ГД.00." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
			Объект.ПоказательПериода = "ГД.00." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=yyyy");
			Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
				ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, Истина);
			Объект.ПоказательПериода = "ГД.00." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=yyyy");
		ИначеЕсли СтрНайти(ОбъектXDTO.ВидНалога, "ПСН_") > 0 Тогда
			ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
			Объект.ПоказательПериода = "ГД.00." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ, Истина);
			Объект.ПоказательПериода = "МС." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=MM.yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
				Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины, Истина);
			Объект.ПоказательПериода = "МС." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=MM.yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть, Истина);
			Объект.ПоказательПериода = "МС." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=MM.yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС, Истина);
			Объект.ПоказательПериода = "МС." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=MM.yyyy");
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, Истина);
			Объект.ПоказательПериода = "0";
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС, Истина);
			Объект.ПоказательПериода = "МС." + Формат(ОбъектXDTO.ПериодНачисления, "ДФ=MM.yyyy");
		Иначе
			Если ЗначениеЗаполнено(ОбъектXDTO.ВидНалога) Тогда
				ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
			ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.КодБК) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОбъектXDTO.КодБК, Истина);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Налог) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектXDTO.ПоказательПериода) Тогда
			Объект.ПоказательПериода  = ОбъектXDTO.ПоказательПериода;
		КонецЕсли;
		
		Объект.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		Объект.ПеречислениеВБюджет    = Истина;
		Объект.ВидПеречисленияВБюджет = ?(ЗначениеЗаполнено(ОбъектXDTO.ВидПеречисленияВБюджет),
			ЗначениеПеречисленияПоИмени(Перечисления.ВидыПеречисленийВБюджет, ОбъектXDTO.ВидПеречисленияВБюджет),
			Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж);
		Объект.КодБК                  = ОбъектXDTO.КодБК;
		
		Объект.ИдентификаторПлатежа = ОбъектXDTO.ИдентификаторПлатежа;
		Объект.СтатусСоставителя    = ОбъектXDTO.СтатусСоставителя;
		Объект.ПоказательОснования  = ОбъектXDTO.ПоказательОснования;
		Объект.ПоказательНомера     = ОбъектXDTO.ПоказательНомера;
		Объект.ПоказательДаты       = ОбъектXDTO.ПоказательДаты;
		Объект.ПоказательТипа       = ОбъектXDTO.ПоказательТипа;
		Объект.ОчередностьПлатежа   = ОбъектXDTO.ОчередностьПлатежа;
		
		РеквизитыПлательщикаПолучателя = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Объект.Организация,
			Объект.СчетОрганизации,
			Объект.Контрагент,
			Объект.СчетКонтрагента,
			Истина,
			ОбъектXDTO.ПериодНачисления);
		
	Иначе
		РеквизитыПлательщикаПолучателя = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Объект.Организация,
			Объект.СчетОрганизации,
			Объект.Контрагент,
			Объект.СчетКонтрагента);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлательщикаПолучателя,
		"ИННПлательщика, ИННПолучателя, КПППлательщика, КПППолучателя, ТекстПлательщика, ТекстПолучателя");
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьПоступлениеНаРасчетныйСчет(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПоступлениеНаРасчетныйСчет");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	КонецЕсли;
	
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Дата        = ОбъектXDTO.Дата;
	Объект.Номер = ОбъектXDTO.Номер;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Если ОбъектXDTO.ВидОперации = "ОплатаЧерезПосредника" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	Иначе
		Объект.ВидОперации = ЗначениеПеречисленияПоИмени(Перечисления.ВидыОперацийПоступлениеДенежныхСредств, ОбъектXDTO.ВидОперации);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		И (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		Объект.СубконтоКт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
		Объект.Содержание_УСН = "Прочий приход денежных средств.";
	КонецЕсли;
	
	Объект.Контрагент         = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Объект.СуммаДокумента     = ОбъектXDTO.Сумма;
	Объект.СуммаУслуг         = ОбъектXDTO.СуммаКомиссии;
	Объект.Графа5_УСН         = ОбъектXDTO.ДоходУСН;
	Объект.СчетОрганизации    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Объект.СчетКонтрагента    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	Объект.ДатаВходящегоДокумента  = ОбъектXDTO.ДатаПлатежногоПоручения;
	Объект.НомерВходящегоДокумента = ОбъектXDTO.НомерПлатежногоПоручения;
	Объект.НазначениеПлатежа       = ОбъектXDTO.НазначениеПлатежа;
	
	Объект.Патент = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Патент, "Патенты");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
	
	//Из мобильного приложения могут прийти изменения только для однострочного докуменнта
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, ВалютаРегламентированногоУчета);
		Иначе
			СтрокаРасшифровки.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасшифровки.ДоходыУСН    = ОбъектXDTO.ДоходУСН;
	СтрокаРасшифровки.СуммаПлатежа = ОбъектXDTO.Сумма;
	СтрокаРасшифровки.СуммаУслуг   = ОбъектXDTO.СуммаКомиссии;
	
	ПараметрыПлатежа = Новый Структура("Дата, ВалютаДокумента", Объект.Дата, Объект.ВалютаДокумента);
	ЗаполнитьСуммаВзаиморасчетовСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, ПараметрыПлатежа);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Объект.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаРасшифровки.КурсВзаиморасчетов;
	КонецЕсли;
	
	СтавкаНДС = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		//Мобильное приложение не умеет передавать ставку и сумму НДС
		ПлательщикНДС = Ложь;
		СтрокаРасшифровки.СтавкаНДС = ПоступлениеНаРасчетныйСчетФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата,
			Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПлательщикНДС);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаРасшифровки);
	Иначе
		СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
		СтрокаРасшифровки.СуммаНДС  = ОбъектXDTO.СуммаНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ДоходЕНВД) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД;
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ДоходПатент) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Объект.Патент;
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ДоходУСН) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
	Иначе
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ПустаяСсылка();
	КонецЕсли;
	
	СтрокаРасшифровки.УслугаНПД = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.УслугаНПД, "Номенклатура");
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьПоступлениеТоваровУслуг(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПоступлениеТоваровУслуг");
	Объект = Ссылка.ПолучитьОбъект();
	
	НовыйДокумент = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		НовыйДокумент = Истина;
	КонецЕсли;
	
	Объект.Организация	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Дата			= ОбъектXDTO.Дата;
	Объект.Номер = ОбъектXDTO.Номер;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если ОбъектXDTO.ВидОперации = "Товары" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	ИначеЕсли ОбъектXDTO.ВидОперации = "Услуги" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	КонецЕсли;
	
	Объект.Контрагент					= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента			 = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Объект.СуммаДокумента				= ОбъектXDTO.СуммаДокумента;
	Объект.СуммаВключаетНДС				= ОбъектXDTO.СуммаВключаетНДС;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.Склад) Тогда
		Объект.Склад = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Склад, "Склады");
	Иначе
		Объект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.ДатаВходящегоДокумента) Тогда
		Объект.ДатаВходящегоДокумента = ОбъектXDTO.ДатаВходящегоДокумента;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектXDTO.НомерВходящегоДокумента) Тогда
		Объект.НомерВходящегоДокумента = ОбъектXDTO.НомерВходящегоДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВалютаДоговора         = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Объект.ВалютаДокумента = ?(ЗначениеЗаполнено(ВалютаДоговора), ВалютаДоговора, 
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ВалютаДокумента    = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
			Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		СтруктураКурсаВзаиморасчетов   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата) Тогда
			Объект.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	СопоставлятьИзменения = Объект.Товары.Количество() > 0;
	ТаблицаДокументаПосле = Объект.Товары;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.Товары.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Товары Цикл
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС		= ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		НоваяСтрока.СуммаНДС		= ЗагружаемаяСтрокаТЧ.СуммаНДС;
		НоваяСтрока.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		КлючевыеПоля = "Номенклатура,Цена,СтавкаНДС";
		КолонкиДляИсключения = "НомерСтроки,Количество,Сумма,СуммаНДС";
		КолонкиДляВключения = "";
		Для Каждого Колонка Из ТаблицаДокументаДо.Колонки Цикл	
			ИмяКолонки = Колонка.Имя;
			Если СтрНайти(КолонкиДляИсключения, ИмяКолонки) = 0 Тогда
				КолонкиДляВключения = КолонкиДляВключения + ?(ЗначениеЗаполнено(КолонкиДляВключения), ",", "") + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, КолонкиДляВключения);
	КонецЕсли;
	
	//Табличную часть Услуги, по возможности, не очищаем, а корректируем
	//Не очищаем строки если совпадает номенкатура (содержание) и ставка НДС
	ИндексТЧ = 0;
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Услуги Цикл
		
		Номенклатура  = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		СтавкаНДС     = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		СтатьяЗатрат  = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.СтатьяЗатрат, "СтатьиЗатрат");
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		СтрокаОбъекта = Неопределено;
		
		Пока Объект.Услуги.Количество() > ИндексТЧ Цикл
			СтрокаОбъекта = Объект.Услуги[ИндексТЧ];
			Если ((ЗначениеЗаполнено(Номенклатура) И Номенклатура = СтрокаОбъекта.Номенклатура) ИЛИ
				(НЕ ЗначениеЗаполнено(Номенклатура) И ЗагружаемаяСтрокаТЧ.Содержание = СтрокаОбъекта.Содержание)) И
				СтавкаНДС = СтрокаОбъекта.СтавкаНДС Тогда
				//Строка подходит
				Прервать;
			Иначе
				Объект.Услуги.Удалить(СтрокаОбъекта);
				СтрокаОбъекта = Неопределено;
			КонецЕсли;				
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОбъекта) Тогда
			СтрокаОбъекта = Объект.Услуги.Добавить();
			СтрокаОбъекта.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОбъекта.СчетЗатрат)
			И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			СвойстваСчета           = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаОбъекта.СчетЗатрат);
			ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
			Если СвойстваСчета.ВидСубконто1 = ВидСубконтоСтатьиЗатрат Тогда
				СтрокаОбъекта.Субконто1 = СтатьяЗатрат;
			ИначеЕсли СвойстваСчета.ВидСубконто2 = ВидСубконтоСтатьиЗатрат Тогда
				СтрокаОбъекта.Субконто2 = СтатьяЗатрат;
			ИначеЕсли СвойстваСчета.ВидСубконто3 = ВидСубконтоСтатьиЗатрат Тогда
				СтрокаОбъекта.Субконто3 = СтатьяЗатрат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОбъекта.Номенклатура  = Номенклатура;
		СтрокаОбъекта.Содержание    = ЗагружаемаяСтрокаТЧ.Содержание;
		СтрокаОбъекта.Количество    = ЗагружаемаяСтрокаТЧ.Количество;
		СтрокаОбъекта.Цена          = ЗагружаемаяСтрокаТЧ.Цена;
		СтрокаОбъекта.Сумма         = ЗагружаемаяСтрокаТЧ.Сумма;
		СтрокаОбъекта.СтавкаНДС     = СтавкаНДС;
		СтрокаОбъекта.СуммаНДС      = ЗагружаемаяСтрокаТЧ.СуммаНДС;
		СтрокаОбъекта.ОтражениеВУСН = ЗначениеПеречисленияПоИмени(Перечисления.ОтражениеВУСН, ЗагружаемаяСтрокаТЧ.ОтражениеВУСН);
		
		ИндексТЧ = ИндексТЧ + 1;
	КонецЦикла;
	
	//Очистим строки, оставшиеся после загрузки
	Пока Объект.Услуги.Количество() > ИндексТЧ Цикл
		Объект.Услуги.Удалить(ИндексТЧ);
	КонецЦикла;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
		
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ДатаСчетаФактуры)
		И ЗначениеЗаполнено(ОбъектXDTO.НомерСчетаФактуры) Тогда
		//Проверим наличие счета-фактуры
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.Ссылка);
		//Создадим счет-фактуру
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание = Объект.Ссылка;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = ОбъектXDTO.НомерСчетаФактуры;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ОбъектXDTO.ДатаСчетаФактуры;
			УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления") Тогда
		Константы.ИспользоватьДокументыПоступления.Установить(Истина);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗагрузитьПриходныйКассовыйОрдер(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПриходныйКассовыйОрдер");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.ВидОперации = ЗначениеПеречисленияПоИмени(Перечисления.ВидыОперацийПКО, ОбъектXDTO.ВидОперации);
	
	Объект.Организация     = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		Объект.Контрагент = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Иначе
		Объект.Контрагент = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
		Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		Объект.СубконтоКт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
		Объект.Содержание_УСН = "Прочий приход денежных средств.";
	КонецЕсли;
		
	Объект.СуммаДокумента  = ОбъектXDTO.Сумма;
	Объект.Основание       = ОбъектXDTO.Основание;
	
	Объект.Патент = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Патент, "Патенты");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
	Если ЗначениеЗаполнено(ОбъектXDTO.ДоходЕНВД) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД;
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ДоходПатент) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Объект.Патент;
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.ДоходУСН) Тогда
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
	Иначе
		СтрокаРасшифровки.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ПустаяСсылка();
	КонецЕсли;
	
	//Мобильное приложение может передать только однострочный документ
	Если Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтрокаРасшифровки.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, ВалютаРегламентированногоУчета);
		Иначе
			СтрокаРасшифровки.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Графа5_УСН              = ОбъектXDTO.ДоходУСН;
	СтрокаРасшифровки.ДоходыУСН    = ОбъектXDTO.ДоходУСН;
	СтрокаРасшифровки.СуммаПлатежа = ОбъектXDTO.Сумма;
	
	ПараметрыПлатежа = Новый Структура("Дата, ВалютаДокумента", Объект.Дата, Объект.ВалютаДокумента);
	ЗаполнитьСуммаВзаиморасчетовСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, ПараметрыПлатежа);
	
	СтавкаНДС = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		//Мобильное приложение еще не умеет передавать ставку и сумму НДС
		ПлательщикНДС = Ложь;
		СтрокаРасшифровки.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		
		ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаРасшифровки);
	Иначе
		СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
		СтрокаРасшифровки.СуммаНДС  = ОбъектXDTO.СуммаНДС;
	КонецЕсли;
	
	СтрокаРасшифровки.УслугаНПД = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.УслугаНПД, "Номенклатура");
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРасходныйКассовыйОрдер(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РасходныйКассовыйОрдер");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.ВидОперации = ЗначениеПеречисленияПоИмени(Перечисления.ВидыОперацийРКО, ОбъектXDTO.ВидОперации);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		И (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
		Объект.Содержание_УСН = "Прочий расход денежных средств.";
	КонецЕсли;
	
	Объект.Организация     = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Объект.Контрагент  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "ФизическиеЛица");
	Иначе
		Объект.Контрагент  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
		Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	КонецЕсли;
	Объект.СчетОрганизации = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Объект.СчетКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	Объект.СуммаДокумента  = ОбъектXDTO.Сумма;
	Объект.Графа7_УСН      = ОбъектXDTO.РасходУСН;
	Объект.Основание       = ОбъектXDTO.Основание;
	Объект.КодОКАТО        = ОбъектXDTO.КодОКАТО;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ВидНалоговогоОбязательства = ЗначениеПеречисленияПоИмени(Перечисления.ВидыПлатежейВГосБюджет, ОбъектXDTO.ВидНалоговогоОбязательства);
		Если НЕ ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
		Если ОбъектXDTO.ВидНалога = "УСН_Доходы" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ЕНВД" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕНВД, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
			Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
				ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, Истина);
		ИначеЕсли СтрНайти(ОбъектXDTO.ВидНалога, "ПСН_") > 0 Тогда
			ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
				Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС, Истина);
		ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.КодБК) Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОбъектXDTO.КодБК, Истина);
		Иначе
			Если ЗначениеЗаполнено(ОбъектXDTO.ВидНалога) Тогда
				ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
			ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.КодБК) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОбъектXDTO.КодБК, Истина);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Налог) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидНалоговогоОбязательства <> ВидНалоговогоОбязательства Тогда
			Объект.СубконтоДт1 = Неопределено;
		КонецЕсли;
		
		Объект.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		Объект.НалоговыйПериод            = ОбъектXDTO.ПериодНачисления;
		
		Объект.ВидПеречисленияВБюджет = ?(ЗначениеЗаполнено(ОбъектXDTO.ВидПеречисленияВБюджет),
			ЗначениеПеречисленияПоИмени(Перечисления.ВидыПеречисленийВБюджет, ОбъектXDTO.ВидПеречисленияВБюджет),
			Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж);
		Объект.КодБК                   = ОбъектXDTO.КодБК;
		Объект.ИдентификаторПлатежа    = ОбъектXDTO.ИдентификаторПлатежа;
		Объект.СтатусСоставителя       = ОбъектXDTO.СтатусСоставителя;
		Объект.ПоказательОснования     = ОбъектXDTO.ПоказательОснования;
		Объект.ПоказательНомера        = ОбъектXDTO.ПоказательНомера;
		Объект.ПоказательДаты          = ОбъектXDTO.ПоказательДаты;
		Объект.ПоказательТипа          = ОбъектXDTO.ПоказательТипа;
		Объект.ПоказательПериода       = ОбъектXDTO.ПоказательПериода;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита 
		И НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам) Тогда
		СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
	КонецЕсли;
	
	// Выплата зарплаты.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		И ЗначениеЗаполнено(ОбъектXDTO.ПлатежнаяВедомость) Тогда
		Объект.ПлатежнаяВедомость = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ПлатежнаяВедомость, "ВедомостьНаВыплатуЗарплатыВКассу");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		И ЗначениеЗаполнено(ОбъектXDTO.ПлатежнаяВедомость) Тогда
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		НоваяСтрока = Объект.ВыплатаЗаработнойПлаты.Добавить();
		НоваяСтрока.Ведомость     = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ПлатежнаяВедомость, "ВедомостьНаВыплатуЗарплатыВКассу");
		НоваяСтрока.СуммаКВыплате = ОбъектXDTO.Сумма;
	КонецЕсли;
	
		//Мобильное приложение может передать только однострочный документ
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтрокаРасшифровки.ДоговорКонтрагента       = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, ВалютаРегламентированногоУчета);
		Иначе
			СтрокаРасшифровки.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасшифровки.СуммаПлатежа        = ОбъектXDTO.Сумма;
	
	ПараметрыПлатежа = Новый Структура("Дата, ВалютаДокумента", Объект.Дата, Объект.ВалютаДокумента);
	ЗаполнитьСуммаВзаиморасчетовСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, ПараметрыПлатежа);
	
	СтавкаНДС = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		//Мобильное приложение еще не умеет передавать ставку и сумму НДС
		ПлательщикНДС = Ложь;
		СтрокаРасшифровки.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаРасшифровки);
		
	Иначе
		СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
		СтрокаРасшифровки.СуммаНДС  = ОбъектXDTO.СуммаНДС;
	КонецЕсли;
	
	Объект.НомерЧекаНПД  = ОбъектXDTO.НомерЧекаНПД;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРасходыНаОнлайнКассы(ОбъектXDTO, УзелОбмена, ПроведениеДокументов, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РасходыНаОнлайнКассыУменьшающиеНалоги");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.РасходыНаОнлайнКассыУменьшающиеНалоги.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
		НовыеДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане.Добавить();
		НовыеДанныеРегистрацииВНалоговомОргане.Владелец = Ссылка;
		НовыеДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
	КонецЕсли;
	
	Объект.УменьшаемыйНалог = Перечисления.ВидыНалоговУменьшаемыхНаРасходыККТ.ЕНВД;
	
	Объект.Модель               = ОбъектXDTO.Модель;
	Объект.ЗаводскойНомер       = ОбъектXDTO.ЗаводскойНомер;
	Объект.ДатаРегистрации      = ОбъектXDTO.ДатаРегистрации;
	Объект.РегистрационныйНомер = ОбъектXDTO.РегистрационныйНомер;
	Объект.СуммаДокумента       = ОбъектXDTO.СуммаДокумента;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРеализацияТоваровУслуг(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РеализацияТоваровУслуг");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовыйДокумент = (Объект = Неопределено);
	Если ЭтоНовыйДокумент Тогда
		Объект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		//Заполняем реквизиты нового объекта значениями по умолчанию
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	ИзмененаДатаДокумента = Объект.Дата <> ОбъектXDTO.Дата;
	ИзмененПериодДокумента = ЭтоНовыйДокумент ИЛИ ГОД(Объект.Дата) <> ГОД(ОбъектXDTO.Дата);
	УстановитьНовыйНомер = ПустаяСтрока(ОбъектXDTO.Номер)
		И ИзмененПериодДокумента;
		
	Объект.Дата        = ОбъектXDTO.Дата;
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	Если УстановитьНовыйНомер Тогда
		Объект.УстановитьНовыйНомер();
	Иначе
		Объект.Номер = ОбъектXDTO.Номер;
	КонецЕсли;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен ИЛИ УстановитьНовыйНомер Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
		НоваяСтрока.ОжидаетПолученияНомера = УстановитьНовыйНомер;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если ОбъектXDTO.ВидОперации = "Товары" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	ИначеЕсли ОбъектXDTO.ВидОперации = "Услуги" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	КонецЕсли;
	
	Объект.Контрагент					= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДоговорКонтрагента			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	
	Если ЗначениеЗаполнено(ОбъектXDTO.Склад) Тогда
		Объект.Склад = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Склад, "Склады");
	Иначе
		Объект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВалютаДоговора         = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Объект.ВалютаДокумента = ?(ЗначениеЗаполнено(ВалютаДоговора), ВалютаДоговора, 
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ВалютаДокумента    = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
			Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	Объект.БанковскийСчетОрганизации	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчетОрганизации, "БанковскиеСчета");
	Объект.СчетНаОплатуПокупателю		= ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.СчетНаОплатуПокупателю, "СчетНаОплатуПокупателю");
	Объект.СуммаДокумента				= ОбъектXDTO.СуммаДокумента;
	
	Объект.СуммаВключаетНДС        = ОбъектXDTO.СуммаВключаетНДС;
	СтруктураКурсаВзаиморасчетов   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Объект.Патент                = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Патент, "Патенты");
	Объект.ДеятельностьНаПатенте = ОбъектXDTO.ОтражениеДоходов = "ДоходПатент";
	
	ОсобыйПорядокНалогообложения = ОбъектXDTO.ОтражениеДоходов = "ДоходЕНВД" ИЛИ ОбъектXDTO.ОтражениеДоходов = "ДоходПатент";
	СчетДоходов  = ?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД,             ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	СчетРасходов = ?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	
	СопоставлятьИзменения = Объект.Товары.Количество() > 0;
	ТаблицаДокументаПосле = Объект.Товары;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.Товары.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Товары Цикл
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.СтавкаНДС		= ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		НоваяСтрока.СуммаНДС		= ЗагружаемаяСтрокаТЧ.СуммаНДС;
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		НоваяСтрока.СчетДоходов		= СчетДоходов;
		НоваяСтрока.СчетРасходов	= СчетРасходов;
		
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		КлючевыеПоля = "Номенклатура,Цена,СтавкаНДС";
		КолонкиДляИсключения = "НомерСтроки,Количество,Сумма,СуммаНДС";
		КолонкиДляВключения = "";
		Для Каждого Колонка Из ТаблицаДокументаДо.Колонки Цикл	
			ИмяКолонки = Колонка.Имя;
			Если СтрНайти(КолонкиДляИсключения, ИмяКолонки) = 0 Тогда
				КолонкиДляВключения = КолонкиДляВключения + ?(ЗначениеЗаполнено(КолонкиДляВключения), ",", "") + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, КолонкиДляВключения);
	КонецЕсли;
	
	СопоставлятьИзменения = Объект.Услуги.Количество() > 0;
	ТаблицаДокументаПосле = Объект.Услуги;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.Услуги.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Услуги Цикл
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Содержание		= ЗагружаемаяСтрокаТЧ.Содержание;
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.СтавкаНДС		= ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		НоваяСтрока.СуммаНДС		= ЗагружаемаяСтрокаТЧ.СуммаНДС;
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		НоваяСтрока.СчетДоходов		= СчетДоходов;
		НоваяСтрока.СчетРасходов	= СчетРасходов;
		
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		КлючевыеПоля = "Номенклатура,Содержание,Цена,СтавкаНДС";
		КолонкиДляИсключения = "НомерСтроки,Количество,Сумма,СуммаНДС";
		КолонкиДляВключения = "";
		Для Каждого Колонка Из ТаблицаДокументаДо.Колонки Цикл	
			ИмяКолонки = Колонка.Имя;
			Если СтрНайти(КолонкиДляИсключения, ИмяКолонки) = 0 Тогда
				КолонкиДляВключения = КолонкиДляВключения + ?(ЗначениеЗаполнено(КолонкиДляВключения), ",", "") + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, КолонкиДляВключения);
	КонецЕсли;
	
	Объект.ДокументБезНДС = (Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС") = 0);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
	//синхронизируем данные
	Если НЕ ЭтоНовыйДокумент Тогда
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(Объект.Ссылка);
		Если СчетФактура.Получить(Объект.Ссылка) <> Неопределено Тогда
			СчетФактураОбъект = СчетФактура.Получить(Объект.Ссылка).ПолучитьОбъект();
			
			Если СчетФактураОбъект <> Неопределено Тогда
				
				Попытка
					СчетФактураОбъект.Заблокировать();
					
					Если ИзмененаДатаДокумента Тогда
						СчетФактураОбъект.Дата = Объект.Дата;
					КонецЕсли;
					
					//При записи будет выполнена синхронизация
					СчетФактураОбъект.Записать();
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
							СчетФактура);
					ЗарегистрироватьОшибкуОбмена(ТекстСообщения, "МобильнаяБухгалтерия.ЗагрузитьРеализацияТоваровУслуг", СчетФактураОбъект.Ссылка);
				КонецПопытки;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРегламентированныйОтчет(ОбъектXDTO, УзелОбмена, ЗаполнениеОтчетности, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РегламентированныйОтчет");
	Объект = Ссылка.ПолучитьОбъект();
	
	Новыйобъект = Ложь;
	Если Объект = Неопределено Тогда
		Новыйобъект = Истина;
		// Отчет требуется создать
		Объект = Документы.РегламентированныйОтчет.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.Дата = ОбъектXDTO.ДатаОкончания;
		Объект.УстановитьВремя();
	КонецЕсли;
	
	// Записываем ссылку для передачи в БРО
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	Если НЕ ОбъектXDTO.ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
			НовыйДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане.Добавить();
			НовыйДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
			НовыйДанныеРегистрацииВНалоговомОргане.КПП = ОбъектXDTO.КПП;
		КонецЕсли;
		
		// Регистрируем регл. отчет к заполнению
		НоваяСтрока = ЗаполнениеОтчетности.Добавить();
		НоваяСтрока.Ссылка        = Объект.Ссылка;
		НоваяСтрока.Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
		НоваяСтрока.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
		НоваяСтрока.ВидОтчета     = ОбъектXDTO.ВидОтчета;
		НоваяСтрока.КПП           = ОбъектXDTO.КПП;
		НоваяСтрока.ДатаНачала    = ОбъектXDTO.ДатаНачала;
		НоваяСтрока.ДатаОкончания = ОбъектXDTO.ДатаОкончания;
		НоваяСтрока.ДанныеОтчета  = ОбъектXDTO.ДанныеОтчета.Получить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияОЗастрахованныхЛицахСЗВ_М(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СведенияОЗастрахованныхЛицахСЗВ_М");
	Объект = Ссылка.ПолучитьОбъект();
	Новыйобъект = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Исходная;
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата	 = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления  = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.ОтчетныйПериод = ОбъектXDTO.ОтчетныйПериод;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
	Если НЕ ОбъектXDTO.ПометкаУдаления Тогда
		ДанныеДляЗаполнения = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ДанныеДляЗаполнения(Объект);
		Объект.Сотрудники.Очистить();
		Объект.Сотрудники.Загрузить(ДанныеДляЗаполнения);
		Объект.ОбменДанными.Загрузка		= Истина;
		Объект.ОбменДанными.Отправитель		= УзелОбмена;
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСписаниеСРасчетногоСчета(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СписаниеСРасчетногоСчета");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Объект.НеПодтвержденоВыпискойБанка = ОбъектXDTO.НеПодтвержденоВыпискойБанка;
	
	Проведен = ОбъектXDTO.Проведен И Не ОбъектXDTO.НеПодтвержденоВыпискойБанка;
	Если Объект.Проведен Или Не ОбъектXDTO.ПометкаУдаления Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектXDTO.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	Иначе
		Объект.ВидОперации = ЗначениеПеречисленияПоИмени(
			Перечисления.ВидыОперацийСписаниеДенежныхСредств,
			ОбъектXDTO.ВидОперации);
	КонецЕсли;
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		И (НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
		Объект.Содержание_УСН = "Прочий расход денежных средств.";
	КонецЕсли;
	
	Объект.Организация     = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		Объект.Контрагент  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "ФизическиеЛица");
	Иначе
		Объект.Контрагент  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
		Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	КонецЕсли;
	Объект.СчетОрганизации = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Объект.СчетКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	Объект.ДокументОснование = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ДокументОснование, "ПлатежноеПоручение");
	Если ЗначениеЗаполнено(ОбъектXDTO.ПлатежнаяВедомость) Тогда
		Объект.ПлатежнаяВедомость = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.ПлатежнаяВедомость, "ВедомостьНаВыплатуЗарплатыВБанк");
	КонецЕсли;
	
	Объект.СуммаДокумента  = ОбъектXDTO.Сумма;
	Объект.Графа7_УСН      = ОбъектXDTO.РасходУСН;
	Объект.ДатаВходящегоДокумента  = ОбъектXDTO.ДатаПлатежногоПоручения;
	Объект.НомерВходящегоДокумента = ОбъектXDTO.НомерПлатежногоПоручения;
	Объект.НазначениеПлатежа       = ОбъектXDTO.НазначениеПлатежа;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ВидНалоговогоОбязательства = ЗначениеПеречисленияПоИмени(Перечисления.ВидыПлатежейВГосБюджет, ОбъектXDTO.ВидНалоговогоОбязательства);
		Если НЕ ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
		Если ОбъектXDTO.ВидНалога = "УСН_Доходы" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ЕНВД" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ЕНВД, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
			Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
				ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, Истина);
		ИначеЕсли СтрНайти(ОбъектXDTO.ВидНалога, "ПСН_") Тогда
			ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
				Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, Истина);
		ИначеЕсли ОбъектXDTO.ВидНалога = "СтраховыеВзносы_ФФОМС" Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС, Истина);
		Иначе
			Если ЗначениеЗаполнено(ОбъектXDTO.ВидНалога) Тогда
				ВидНалога = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, ОбъектXDTO.ВидНалога);
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.Налог) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
			КонецЕсли;
		КонецЕсли;
		
		
		Если Объект.ВидНалоговогоОбязательства <> ВидНалоговогоОбязательства Тогда
			Объект.СубконтоДт1 = Неопределено;
		КонецЕсли;
		Объект.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		Объект.НалоговыйПериод = ОбъектXDTO.ПериодНачисления;
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
	
	СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		И НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам) Тогда
		СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
	КонецЕсли;
	
	//Мобильное приложение может передать только однострочный документ
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтрокаРасшифровки.ДоговорКонтрагента       = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, ВалютаРегламентированногоУчета);
		Иначе
			СтрокаРасшифровки.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРасшифровки.СуммаПлатежа        = ОбъектXDTO.Сумма;
	ПараметрыПлатежа = Новый Структура("Дата, ВалютаДокумента", Объект.Дата, Объект.ВалютаДокумента);
	ЗаполнитьСуммаВзаиморасчетовСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, ПараметрыПлатежа);
	
	СтавкаНДС = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ОбъектXDTO.СтавкаНДС);
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		//Мобильное приложение еще не умеет передавать ставку и сумму НДС
		ПлательщикНДС = Ложь;
		СтрокаРасшифровки.СтавкаНДС = СписаниеСРасчетногоСчетаФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата, Объект.ВидОперации, Объект.ДоговорКонтрагента, ПлательщикНДС);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаРасшифровки);
	Иначе
		СтрокаРасшифровки.СтавкаНДС = СтавкаНДС;
		СтрокаРасшифровки.СуммаНДС  = ОбъектXDTO.СуммаНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДокументОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
			Ссылка, Объект.ДокументОснование, Объект.ВидОперации, Объект.Проведен);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Объект.ДокументОснование = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Объект.НомерЧекаНПД  = ОбъектXDTO.НомерЧекаНПД;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСчетНаОплатуПокупателю(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СчетНаОплатуПокупателю");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовыйДокумент = (Объект = Неопределено);
	Если ЭтоНовыйДокумент Тогда
		Объект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	ИзмененПериодДокумента = ЭтоНовыйДокумент ИЛИ ГОД(Объект.Дата) <> ГОД(ОбъектXDTO.Дата);
	УстановитьНовыйНомер = ПустаяСтрока(ОбъектXDTO.Номер)
		И ИзмененПериодДокумента;
	
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	Объект.Дата              = ОбъектXDTO.Дата;
	
	Если УстановитьНовыйНомер Тогда
		Объект.УстановитьНовыйНомер();
	Иначе
		Объект.Номер = ОбъектXDTO.Номер;
	КонецЕсли;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен ИЛИ УстановитьНовыйНомер Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
		НоваяСтрока.ОжидаетПолученияНомера = УстановитьНовыйНомер;
	Иначе
		Объект.ПометкаУдаления  = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Контрагент			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.СтруктурнаяЕдиница	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчет, "БанковскиеСчета");
	Объект.СуммаДокумента		= ОбъектXDTO.СуммаДокумента;
	Объект.СуммаВключаетНДС		= ОбъектXDTO.СуммаВключаетНДС;
	
	// Пришедшие из мобильного приложения документы всегда имеют скидку по строкам
	Объект.СуммаСкидки = 0;
	
	Объект.ОрганизацияПолучатель = Объект.Организация;
	Объект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента, "ДоговорыКонтрагентов");
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
		И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
			Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Объект.ДополнительныеУсловия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДополнительныеУсловияПоУмолчанию");
	
	Объект.Товары.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ТоварыУслуги Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Содержание		= ЗагружаемаяСтрокаТЧ.Содержание;
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.ПроцентСкидки	= ЗагружаемаяСтрокаТЧ.ПроцентСкидки;
		НоваяСтрока.СуммаСкидки		= ЗагружаемаяСтрокаТЧ.СуммаСкидки;
		
		НоваяСтрока.СуммаНДС		= ЗагружаемаяСтрокаТЧ.СуммаНДС;
		НоваяСтрока.СтавкаНДС		= ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ДокументБезНДС       = (Объект.Товары.Итог("СуммаНДС") = 0);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРозничнаяПродажа(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ОтчетОРозничныхПродажах");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.СуммаВключаетНДС = Истина;
		Объект.ВалютаДокумента  = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Объект.ВидОперации      = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		Объект.СчетКасса        = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		
	КонецЕсли;
	
	Объект.Номер = ОбъектXDTO.Номер;
	Объект.Дата	 = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.ЗаполнитьСчета = Истина;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
	Иначе
		Объект.ПометкаУдаления  = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.СуммаДокумента = ОбъектXDTO.СуммаДокумента;
	
	Объект.Патент                = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Патент, "Патенты");
	Объект.ДеятельностьНаПатенте = ОбъектXDTO.ОтражениеДоходов = "ДоходПатент";
	
	Если ЗначениеЗаполнено(ОбъектXDTO.Склад) Тогда
		Объект.Склад = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Склад, "Склады");
	Иначе
		Объект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли; 
	
	ОсобыйПорядокНалогообложения = ОбъектXDTO.ОтражениеДоходов = "ДоходЕНВД" ИЛИ ОбъектXDTO.ОтражениеДоходов = "ДоходПатент";
	СчетДоходов  = ?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД,             ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	СчетРасходов = ?(ОсобыйПорядокНалогообложения, ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	
	СопоставлятьИзменения = Объект.Товары.Количество() > 0;
	ТаблицаДокументаПосле = Объект.Товары;
	Если СопоставлятьИзменения Тогда
		ТаблицаДокументаДо = Объект.Товары.Выгрузить();
		ТаблицаДокументаПосле.Очистить();
	Иначе
		ТаблицаДокументаДо = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ТоварыУслуги Цикл
		НоваяСтрока = ТаблицаДокументаПосле.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Сумма			= ?(Объект.СуммаВключаетНДС, ЗагружаемаяСтрокаТЧ.Сумма, ЗагружаемаяСтрокаТЧ.Сумма - ЗагружаемаяСтрокаТЧ.СуммаНДС);
		НоваяСтрока.Цена			= ?(Объект.СуммаВключаетНДС, ЗагружаемаяСтрокаТЧ.Цена,
			?(НоваяСтрока.Количество <> 0, НоваяСтрока.Сумма / НоваяСтрока.Количество, НоваяСтрока.Сумма));
		
		НоваяСтрока.СуммаНДС  = ЗагружаемаяСтрокаТЧ.СуммаНДС;
		НоваяСтрока.СтавкаНДС = ЗначениеПеречисленияПоИмени(Перечисления.СтавкиНДС, ЗагружаемаяСтрокаТЧ.СтавкаНДС);
		
		НоваяСтрока.СчетДоходов		= СчетДоходов;
		НоваяСтрока.СчетРасходов	= СчетРасходов;
		
	КонецЦикла;
	
	Если СопоставлятьИзменения Тогда
		КлючевыеПоля = "Номенклатура,Цена,СтавкаНДС";
		КолонкиДляИсключения = "НомерСтроки,Количество,Сумма,СуммаНДС";
		КолонкиДляВключения = "";
		Для Каждого Колонка Из ТаблицаДокументаДо.Колонки Цикл	
			ИмяКолонки = Колонка.Имя;
			Если СтрНайти(КолонкиДляИсключения, ИмяКолонки) = 0 Тогда
				КолонкиДляВключения = КолонкиДляВключения + ?(ЗначениеЗаполнено(КолонкиДляВключения), ",", "") + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТаблицаДокументаПосле, ТаблицаДокументаДо, КлючевыеПоля, КолонкиДляВключения);
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Оплата Цикл
		НоваяСтрока = Объект.Оплата.Добавить();
		ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.ДоговорКонтрагента, "ДоговорыКонтрагентов");
		Контрагент	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Контрагент, "Контрагенты");
		НоваяСтрока.ВидОплаты = ПолучитьСоздатьВидОплатыПоКонтрагенту(Объект.Организация, Контрагент, ДоговорКонтрагента);
		НоваяСтрока.СуммаОплаты = ЗагружаемаяСтрокаТЧ.Сумма;
		
	КонецЦикла;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля") Тогда
		Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьАктСверкиВзаиморасчетов(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "АктСверкиВзаиморасчетов");
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовыйДокумент = (Объект = Неопределено);
	Если ЭтоНовыйДокумент Тогда
		Объект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	ИзмененПериодДокумента = ЭтоНовыйДокумент ИЛИ ГОД(Объект.Дата) <> ГОД(ОбъектXDTO.Дата);
	УстановитьНовыйНомер = ПустаяСтрока(ОбъектXDTO.Номер)
		И ИзмененПериодДокумента;
	
	Объект.Организация       = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Дата  = ОбъектXDTO.Дата;
	
	Если УстановитьНовыйНомер Тогда
		Объект.УстановитьНовыйНомер();
	Иначе
		Объект.Номер = ОбъектXDTO.Номер;
	КонецЕсли;
	
	ОжидаетЗаполненияПоДаннымСервиса = ОбъектXDTO.ОжидаетЗаполнения = Истина;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен
		ИЛИ ОжидаетЗаполненияПоДаннымСервиса ИЛИ УстановитьНовыйНомер Тогда
		НоваяСтрока = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ПорядокСортировки = ?(ОжидаетЗаполненияПоДаннымСервиса, 1, 0); // Акт сверки необходимо заполнить после загрузки всех документов расчетов
		НоваяСтрока.ОжидаетПолученияНомера = УстановитьНовыйНомер;
		НоваяСтрока.ОжидаетЗаполнения = ОжидаетЗаполненияПоДаннымСервиса;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	ИзмененПризнакСверкаСогласована = Объект.СверкаСогласована <> ОбъектXDTO.СверкаСогласована;
	Объект.СверкаСогласована = ОбъектXDTO.СверкаСогласована;
	
	ДоступноЗаполнениеПоДаннымПриложения = НЕ (ОбъектXDTO.ЗаполненВСервисе = Истина);
	Если ДоступноЗаполнениеПоДаннымПриложения Тогда
		Объект.Контрагент         = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент,  "Контрагенты");
		Объект.ДоговорКонтрагента = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ДоговорКонтрагента,  "ДоговорыКонтрагентов");
		Объект.ДатаНачала         = ОбъектXDTO.ДатаНачала;
		Объект.ДатаОкончания      = ОбъектXDTO.ДатаОкончания;
		
		Если ЭтоНовыйДокумент Тогда
			Объект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			Объект.ПредставительОрганизации = Документы.АктСверкиВзаиморасчетов.ПредставительОрганизации(Объект.Организация, Объект.Дата);
			Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент,  "ОсновноеКонтактноеЛицо");
		КонецЕсли;
		
		Если Объект.СписокСчетов.Количество() = 0 Тогда
			ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
			ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
			ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
			ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
			Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
		КонецЕсли;
		
		Если НЕ ОжидаетЗаполненияПоДаннымСервиса Тогда
			Объект.ОстатокНаНачало   = ОбъектXDTO.ОстатокНаНачало;
			
			Объект.ПоДаннымОрганизации.Очистить();
			Объект.ПоДаннымКонтрагента.Очистить();
			
			Для каждого СтрокаАктаСверки Из ОбъектXDTO.ПоДаннымОрганизации Цикл
				НоваяСтрока = Объект.ПоДаннымОрганизации.Добавить();
				НоваяСтрока.Дата          = СтрокаАктаСверки.Дата;
				Если ЗначениеЗаполнено(СтрокаАктаСверки.ДокументТип) Тогда
					НоваяСтрока.Документ  = ДесериализоватьСсылкуНаДокумент(СтрокаАктаСверки.Документ, СтрокаАктаСверки.ДокументТип);
				КонецЕсли;
				НоваяСтрока.Представление = СтрокаАктаСверки.Представление;
				НоваяСтрока.Дебет         = СтрокаАктаСверки.Дебет;
				НоваяСтрока.Кредит        = СтрокаАктаСверки.Кредит;
				НоваяСтрока.Договор       = ДесериализоватьСсылкуНаСправочник(СтрокаАктаСверки.Договор, "ДоговорыКонтрагентов");
				Если Объект.СверкаСогласована Тогда
					НоваяСтрокаК = Объект.ПоДаннымКонтрагента.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаК, НоваяСтрока);
					НоваяСтрокаК.Дебет         = СтрокаАктаСверки.Кредит;
					НоваяСтрокаК.Кредит        = СтрокаАктаСверки.Дебет;
					НоваяСтрокаК.Представление = Документы.АктСверкиВзаиморасчетов.ПредставлениеДокументаПоДаннымКонтрагента(
					СтрокаАктаСверки.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИзмененПризнакСверкаСогласована Тогда
		Если Объект.СверкаСогласована И Объект.ПоДаннымКонтрагента.Количество() = 0 Тогда
			Для каждого СтрокаАктаСверки Из Объект.ПоДаннымОрганизации Цикл
				НоваяСтрокаК = Объект.ПоДаннымКонтрагента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаК, СтрокаАктаСверки);
				НоваяСтрокаК.Дебет         = СтрокаАктаСверки.Кредит;
				НоваяСтрокаК.Кредит        = СтрокаАктаСверки.Дебет;
				НоваяСтрокаК.Представление = Документы.АктСверкиВзаиморасчетов.ПредставлениеДокументаПоДаннымКонтрагента(
					СтрокаАктаСверки.Представление);
			КонецЦикла;
			Объект.Расхождение = 0;
		ИначеЕсли НЕ Объект.СверкаСогласована Тогда
			Объект.ПоДаннымКонтрагента.Очистить();
			Объект.Расхождение = 0;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьОплатуПлатежнойКартой(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ОплатаПлатежнойКартой");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Дата        = ОбъектXDTO.Дата;
	Объект.Номер       = ОбъектXDTO.Номер;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	
	УслугаНПД    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.УслугаНПД, "Номенклатура");
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Объект.РасшифровкаПлатежа[0].УслугаНПД = УслугаНПД;
	КонецЕсли; 
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОСпецрежимахНалогообложения(ОбъектXDTO, УзелОбмена, ЗаполнениеУведомлений, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "УведомлениеОСпецрежимахНалогообложения");
	Объект = Ссылка.ПолучитьОбъект();
	
	НовыйОбъект = (Объект = Неопределено);
	Если НовыйОбъект Тогда
		// Отчет требуется создать
		Объект = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйНомер();
		
		Объект.Дата        = ОбъектXDTO.Дата;
		Объект.ДатаПодписи = ОбъектXDTO.ДатаПодписи;
		Объект.УстановитьВремя();
	КонецЕсли;
	
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы;
	
	Если Не ЗначениеЗаполнено(ОбъектXDTO.ИмяОтчета) Тогда
		Объект.ИмяОтчета      = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
			Объект.ВидУведомления);
		Объект.ИмяФормы       = РегламентированнаяОтчетность.ПолучитьАктуальнуюФормуУведомления(Объект.ВидУведомления, Объект.Дата);
	Иначе
		Объект.ИмяОтчета        = ОбъектXDTO.ИмяОтчета;
		Объект.ИмяФормы         = ОбъектXDTO.ИмяФормы;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	Если НЕ ОбъектXDTO.ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(ОбъектXDTO.КодНалоговогоОргана) Тогда
			НовыйДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане.Добавить();
			НовыйДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
		КонецЕсли;
		
		// Регистрируем регл. отчет к заполнению
		НоваяСтрока = ЗаполнениеУведомлений.Добавить();
		НоваяСтрока.КодНалоговогоОргана = ОбъектXDTO.КодНалоговогоОргана;
		НоваяСтрока.Ссылка              = Объект.Ссылка;
		НоваяСтрока.Организация         = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
		НоваяСтрока.ВидУведомления      = Объект.ВидУведомления;
		НоваяСтрока.ИмяОтчета           = Объект.ИмяОтчета;
		НоваяСтрока.ИмяФормы            = Объект.ИмяФормы;
		НоваяСтрока.ДанныеУведомления   = ОбъектXDTO.ДанныеУведомления;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьУдалениеОбъекта(ОбъектXDTO, УзелОбмена)
	
	УдаляемыеОбъекты = Новый ТаблицаЗначений;
	УдаляемыеОбъекты.Колонки.Добавить("Ссылка");
	УдаляемыеОбъекты.Колонки.Добавить("ОчищатьДвижения", Новый ОписаниеТипов("Булево"));
	УдаляемыеОбъекты.Колонки.Добавить("ПроверятьДатуЗапретаИзменения", Новый ОписаниеТипов("Булево"));
	УдаляемыеОбъекты.Колонки.Добавить("УчаствуетВОбмене", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСписокУдаляемыхОбъектов(УдаляемыеОбъекты, ОбъектXDTO);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Запись Из УдаляемыеОбъекты Цикл
		
		Ссылка = Запись.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Запись.ПроверятьДатуЗапретаИзменения
			И ДатыЗапретаИзменения.ИзменениеЗапрещено(Объект) Тогда
			ЗарегистрироватьОшибкуОбмена(НСтр("ru = 'В Мобильной бухгалтерии удален объект ранее даты запрета изменения данных'"), 
			"МобильнаяБухгалтерия.ЗагрузитьУдалениеОбъекта", Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Запись.ОчищатьДвижения И Объект.Проведен Тогда
			Попытка
				
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗарегистрироватьОшибкуОбмена(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), 
				"МобильнаяБухгалтерия.ЗагрузитьУдалениеОбъекта");
			КонецПопытки
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Если Запись.УчаствуетВОбмене Тогда
			Объект.ОбменДанными.Отправитель = УзелОбмена;
		КонецЕсли;
		Объект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиПриложения(ОбъектXDTO, НастройкиПриложения)
	
	НастройкиПриложения = ОбъектXDTO.Значение;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиПользователя(ОбъектXDTO, НастройкиПользователя)
	
	НастройкиПользователя = ОбъектXDTO.Значение;
	
КонецПроцедуры

Функция ИмяМенеджераИзXDTOОбъекта(ОбъектXDTO)
	
	ТипОбъекта = ОбъектXDTO.ТипОбъекта;
	
	// Справочникии
	Если ТипОбъекта = "Банк" Тогда
		Возврат "Справочники.Банки";
	ИначеЕсли ТипОбъекта = "БанковскийСчет" Тогда
		Возврат "Справочники.БанковскиеСчета";
	ИначеЕсли ТипОбъекта = "ВидДеятельностиЕНВД" Тогда
		Возврат "Справочники.ВидыДеятельностиЕНВД";
	ИначеЕсли ТипОбъекта = "ДоговорКонтрагента" Тогда
		Возврат "Справочники.ДоговорыКонтрагентов";
	ИначеЕсли ТипОбъекта = "Должности" Тогда
		Возврат "Справочники.Должности";
	ИначеЕсли ТипОбъекта = "ДополнительныеУсловия" Тогда
		Возврат "Справочники.ДополнительныеУсловия";
	ИначеЕсли ТипОбъекта = "ЕдиницаИзмерения" Тогда
		Возврат "Справочники.КлассификаторЕдиницИзмерения";
	ИначеЕсли ТипОбъекта = "Контрагент" Тогда
		Возврат "Справочники.Контрагенты";
	ИначеЕсли ТипОбъекта = "НастройкаОбменаСБанками" Тогда
		Возврат "Справочники.НастройкиОбменСБанками";
	ИначеЕсли ТипОбъекта = "Номенклатура" Тогда
		Возврат "Справочники.Номенклатура";
	ИначеЕсли ТипОбъекта = "Патент" Тогда
		Возврат "Справочники.Патенты";
	ИначеЕсли ТипОбъекта = "ПрисоединенныйФайлОрганизация" Тогда
		Возврат "Справочники.ОрганизацииПрисоединенныеФайлы";
	ИначеЕсли ТипОбъекта = "Сотрудники" Тогда
		Возврат "Справочники.Сотрудники";
	ИначеЕсли ТипОбъекта = "СтранаМира" Тогда
		Возврат "Справочники.СтраныМира";
	ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
		Возврат "Справочники.ФизическиеЛица";
	ИначеЕсли ТипОбъекта = "ФизическиеЛицаПрисоединенныеФайлы" Тогда
		Возврат "Справочники.ФизическиеЛицаПрисоединенныеФайлы";

	// Документы
	ИначеЕсли ТипОбъекта = "АктСверкиВзаиморасчетов" Тогда
		Возврат "Документы.АктСверкиВзаиморасчетов";
	ИначеЕсли ТипОбъекта = "ВедомостьНаВыплатуЗарплатыВБанк" Тогда
		Возврат "Документы.ВедомостьНаВыплатуЗарплатыВБанк";
	ИначеЕсли ТипОбъекта = "ВедомостьНаВыплатуЗарплатыВКассу" Тогда
		Возврат "Документы.ВедомостьНаВыплатуЗарплатыВКассу";
	ИначеЕсли ТипОбъекта = "ВводНачальныхОстатков" Тогда
		Возврат "Документы.ВводНачальныхОстатков";
	ИначеЕсли ТипОбъекта = "ЗаписьКУДиР" Тогда
		Возврат "Документы.ЗаписьКУДиР";
	ИначеЕсли ТипОбъекта = "ЗаявлениеАбонентаСпецоператораСвязи" Тогда
		Возврат "Документы.ЗаявлениеАбонентаСпецоператораСвязи";
	ИначеЕсли ТипОбъекта = "НачислениеЗарплаты" Тогда
		Возврат "Документы.НачислениеЗарплаты";
	ИначеЕсли ТипОбъекта = "ПлатежноеПоручение" Тогда
		Возврат "Документы.ПлатежноеПоручение";
	ИначеЕсли ТипОбъекта = "ПоступлениеНаРасчетныйСчет" Тогда
		Возврат "Документы.ПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипОбъекта = "ПоступлениеТоваровУслуг" Тогда
		Возврат "Документы.ПоступлениеТоваровУслуг";
	ИначеЕсли ТипОбъекта = "ПриходныйКассовыйОрдер" Тогда
		Возврат "Документы.ПриходныйКассовыйОрдер";
	ИначеЕсли ТипОбъекта = "РасходныйКассовыйОрдер" Тогда
		Возврат "Документы.РасходныйКассовыйОрдер";
	ИначеЕсли ТипОбъекта = "РасходыНаОнлайнКассы" Тогда
		Возврат "Документы.РасходыНаОнлайнКассыУменьшающиеНалоги";
	ИначеЕсли ТипОбъекта = "РеализацияТоваровУслуг" Тогда
		Возврат "Документы.РеализацияТоваровУслуг";
	ИначеЕсли ТипОбъекта = "РегламентированныйОтчет" Тогда
		Возврат "Документы.РегламентированныйОтчет";
	ИначеЕсли ТипОбъекта = "РозничнаяПродажа" Тогда
		Возврат "Документы.ОтчетОРозничныхПродажах";
	ИначеЕсли ТипОбъекта = "СведенияОЗастрахованныхЛицахСЗВ_М" Тогда
		Возврат "Документы.СведенияОЗастрахованныхЛицахСЗВ_М";
	ИначеЕсли ТипОбъекта = "СписаниеСРасчетногоСчета" Тогда
		Возврат "Документы.СписаниеСРасчетногоСчета";
	ИначеЕсли ТипОбъекта = "СчетНаОплатуПокупателю" Тогда
		Возврат "Документы.СчетНаОплатуПокупателю";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура АктуализироватьДанныеЗадачиБухгалтера(Параметры, АдресРезультата) Экспорт
	
	КалендарьБухгалтера.ОбновитьЗадачи(Параметры.Организация, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСписокУдаляемыхОбъектов(УдаляемыеОбъекты, ОбъектXDTO)
	
	ИмяМенеджераОбъекта = ИмяМенеджераИзXDTOОбъекта(ОбъектXDTO);
	ИмяОбъекта = ИмяОбъектаПоМенеджеру(ИмяМенеджераОбъекта);
	
	Если СтрНайти(ИмяМенеджераОбъекта, "Справочники.") Тогда
		
		НоваяЗапись = УдаляемыеОбъекты.Добавить();
		НоваяЗапись.Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, ИмяОбъекта);
		НоваяЗапись.УчаствуетВОбмене = Истина;
		
	ИначеЕсли СтрНайти(ИмяМенеджераОбъекта, "Документы.") Тогда
		
		Если ИмяОбъекта = "РегламентированныйОтчет"
			ИЛИ ИмяОбъекта = "ЗаявлениеАбонентаСпецоператораСвязи"
			ИЛИ ИмяОбъекта = "СведенияОЗастрахованныхЛицахСЗВ_М"
			ИЛИ ИмяОбъекта = "УведомлениеОСпецрежимахНалогообложения" Тогда
			ОчищатьДвижения = Ложь;
			ПроверятьДатуЗапретаИзменения = Ложь;
		Иначе
			ОчищатьДвижения = Истина;
			ПроверятьДатуЗапретаИзменения = Истина;
		КонецЕсли;
		
		СсылкаНаДокумент = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, ИмяОбъекта);
		
		НоваяЗапись = УдаляемыеОбъекты.Добавить();
		НоваяЗапись.Ссылка = СсылкаНаДокумент;
		НоваяЗапись.ОчищатьДвижения = ОчищатьДвижения;
		НоваяЗапись.ПроверятьДатуЗапретаИзменения = ПроверятьДатуЗапретаИзменения;
		НоваяЗапись.УчаствуетВОбмене = Истина;
		
		Если ИмяОбъекта = "РеализацияТоваровУслуг" Тогда
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(СсылкаНаДокумент,, Истина);
			Если СчетФактура.Получить(СсылкаНаДокумент) <> Неопределено Тогда
				НоваяЗапись = УдаляемыеОбъекты.Добавить();
				НоваяЗапись.Ссылка = СчетФактура.Получить(СсылкаНаДокумент);
				НоваяЗапись.ОчищатьДвижения = Истина;
				НоваяЗапись.ПроверятьДатуЗапретаИзменения = Истина;
				НоваяЗапись.УчаствуетВОбмене = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбъектаПоМенеджеру(ИмяМенеджера)
	Возврат СтрЗаменить(СтрЗаменить(ИмяМенеджера, "Справочники.", ""), "Документы.", "");
КонецФункции

Процедура ЗагрузитьФайлы(ОбъектXDTO, ИмяОбъектаМетаданных, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, ИмяОбъектаМетаданных);
	Объект = Ссылка.ПолучитьОбъект();
	
	Если ИмяОбъектаМетаданных = "ОрганизацииПрисоединенныеФайлы" Тогда
		ВладелецФайла   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВладелецФайла, "Организации");
	ИначеЕсли ИмяОбъектаМетаданных = "ФизическиеЛицаПрисоединенныеФайлы" Тогда
		ВладелецФайла   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВладелецФайла, "ФизическиеЛица");
	КонецЕсли;
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Base64Значение(ОбъектXDTO.ХранимыйФайл));
	Если Объект <> Неопределено Тогда
		
		ИнформацияОФайле = Новый Структура();
		ИнформацияОФайле.Вставить("ИмяБезРасширения", ОбъектXDTO.Наименование);
		ИнформацияОФайле.Вставить("Расширение", ОбъектXDTO.Расширение);
		ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная", УниверсальноеВремя(ОбъектXDTO.ДатаСоздания));
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		
		РаботаСФайлами.ОбновитьФайл(Ссылка, ИнформацияОФайле);
	Иначе
		
		ИнформацияОФайле = Новый Структура();
		ИнформацияОФайле.Вставить("Автор");
		ИнформацияОФайле.Вставить("ВладелецФайлов", ВладелецФайла);
		ИнформацияОФайле.Вставить("ИмяБезРасширения", ОбъектXDTO.Наименование);
		ИнформацияОФайле.Вставить("РасширениеБезТочки", ОбъектXDTO.Расширение);
		ИнформацияОФайле.Вставить("ВремяИзмененияУниверсальное", УниверсальноеВремя(ОбъектXDTO.ДатаСоздания));
		
		Ссылка = РаботаСФайлами.ДобавитьФайл(ИнформацияОФайле, АдресФайлаВоВременномХранилище, "", ОбъектXDTO.Описание, Ссылка);
		
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле", Неопределено);
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьДанные
#Область Константы

Функция ВыгрузитьВестиУчетПоДоговорам(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ВестиУчетПоДоговорам");
	ПередаваемыйОбъект.Значение = Данные.Значение;
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьИспользоватьИнтеграциюСЯндексКассой(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ИспользоватьИнтеграциюСЯндексКассой");
	ПередаваемыйОбъект.Значение = Данные.Значение;
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

Функция ПодготовитьСообщениеВыгрузки(СтруктураПараметров, Отбор = Неопределено, ПолноеИмяФайлаОбмена = "")
	
	// Сформируем сообщение обмена с изменениями для передачи в мобильное приложение.
	ЗаписьXML = Новый ЗаписьXML;
	Если ПустаяСтрока(ПолноеИмяФайлаОбмена) Тогда
		//Заполним новый файл
		ЗаписьXML.УстановитьСтроку("UTF-8");
	Иначе
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаОбмена);
	КонецЕсли;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, СтруктураПараметров.УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("",    "http://www.1c.ru/EA/MobileAccounting");
	
	//Измененные объекты
	Если Отбор = Неопределено Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтруктураПараметров.УзелОбмена, ЗаписьСообщения.НомерСообщения);
	Иначе
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтруктураПараметров.УзелОбмена, ЗаписьСообщения.НомерСообщения, Отбор);
	КонецЕсли;
	
	ЗагрузитьОперацииЯндексКасса(СтруктураПараметров);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПлатежноеПоручение")
			И Данные.Организация = СтруктураПараметров.Организация
			И Данные.Дата >= СтруктураПараметров.ДатаНачалаВыгрузки Тогда
			ДокументОснование = Документы.ПлатежноеПоручение.НайтиДокументСписания(Данные.Ссылка, Данные.ДокументОснование);
			Если Не ЗначениеЗаполнено(ДокументОснование)
				И РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Данные.Ссылка)
					<> Перечисления.СостоянияБанковскихДокументов.Оплачено Тогда
					
				Попытка
					
					ДокументСписание = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
					ДокументСписание.Заполнить(Данные.Ссылка);
					ДокументСписание.Дата = Данные.Дата;
					ДокументСписание.ПометкаУдаления = Данные.ПометкаУдаления;
					ДокументСписание.НеПодтвержденоВыпискойБанка =
						РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(
							ДокументОснование) <> Перечисления.СостоянияБанковскихДокументов.Оплачено;
					ДокументСписание.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
					
					Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
						И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ДокументСписание.ВидОперации)
						И Не ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
						ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Контрагент, ВалютаДокумента");
						ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ДокументСписание);
						ПараметрыПлатежа.Вставить("ОплатаВВалюте", Ложь);
						ДокументСписание.РасшифровкаПлатежа[0].ДоговорКонтрагента =
							УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
					КонецЕсли;
					
				
					ДокументСписание.Записать();
				Исключение
					// Не смогли сформировать банковский документ, значит и ПП исключаем из обмена,
					// т.к. ее не будет видно.
					ЗарегистрироватьОшибкуОбмена(
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						НСтр("ru = 'Создание банковского документа при выгрузке платежного поручения'"));
					Продолжить;
				КонецПопытки;
				
				ОбъектXDTO = ПолучитьОбъектXDTO(ДокументСписание, СтруктураПараметров);
				Если ОбъектXDTO = Неопределено Тогда
					// Не смогли сформировать XDTO банковского документа, значит и платежное поручение исключаем из текущего обмена.
					// В следующем обмене оба документа будут выгружаться стандартными методами обмена.
					Продолжить;
				Иначе
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
					СтруктураПараметров.КолВыгружено = СтруктураПараметров.КолВыгружено + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO = ПолучитьОбъектXDTO(Данные, СтруктураПараметров);
		Если ОбъектXDTO = Неопределено Тогда
			Продолжить;
		Иначе
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		КонецЕсли;
		
		СтруктураПараметров.КолВыгружено = СтруктураПараметров.КолВыгружено + 1;
		
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.Организации") Тогда
			//Передадим прочие общие настройки
			ОбщиеНастройки = ВыгрузитьНастройкиПриложения(СтруктураПараметров);
			Если ОбщиеНастройки <> Неопределено Тогда
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбщиеНастройки);
			КонецЕсли;
			
			НастройкиПользователя = ВыгрузитьНастройкиПользователя(СтруктураПараметров);
			
			Если НастройкиПользователя <> Неопределено Тогда
				ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, НастройкиПользователя);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.БанковскиеСчета") 
			И ТипЗнч(Данные.Владелец) = Тип("СправочникСсылка.Организации") Тогда
			//Передадим вид обмена с банком.
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВыгрузитьВидыОбменаСБанком(Данные.Ссылка, СтруктураПараметров));
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.ПервичнаяИнициализацияВыполнена Тогда
		ПрефиксУзла = ВыгрузитьПрефиксУзла(СтруктураПараметров);
		Если ПрефиксУзла <> Неопределено Тогда
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПрефиксУзла);
		КонецЕсли;
		
		НастройкиБазы = ВыгрузитьАдресБазыСообщений();
		Если НастройкиБазы <> Неопределено Тогда
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, НастройкиБазы);
		КонецЕсли; 
		
		НастройкаЭлектроннойПодписи = ВыгрузитьЭлектроннаяПодписьВМоделиСервиса();
		Если НастройкаЭлектроннойПодписи <> Неопределено Тогда
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, НастройкаЭлектроннойПодписи);
		КонецЕсли; 
		
	КонецЕсли;
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПолучитьОбъектXDTO(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("КонстантаМенеджерЗначения.ИспользоватьНесколькоСкладов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьИспользоватьНесколькоСкладов(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("КонстантаМенеджерЗначения.ВестиУчетПоДоговорам") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьВестиУчетПоДоговорам(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("КонстантаМенеджерЗначения.ИнтерфейсИнтеграцииСБанком") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьИнтеграцияСБанком();
		
	ИначеЕсли ТипЗнч(Данные) = Тип("КонстантаМенеджерЗначения.ИспользоватьИнтеграциюСЯндексКассой") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьИспользоватьИнтеграциюСЯндексКассой(Данные);
		
	// Справочники
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Банки") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьБанки(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьБанковскиеСчета(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьДоговорыКонтрагентов(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ВидыДеятельностиЕНВД") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьВидДеятельностиЕНВД(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Должности") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьДолжности(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДополнительныеУсловия") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьДополнительныеУсловия(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КлассификаторЕдиницИзмерения") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьКлассификаторЕдиницИзмерения(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьКонтрагенты(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.НастройкиОбменСБанками") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиОбменСБанками(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.НастройкиЯндексКассы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиЯндексКассы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНоменклатура(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Организации") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОрганизации(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ОрганизацииПрисоединенныеФайлы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОрганизацииПрисоединенныеФайлы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Патенты") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПатент(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Сотрудники") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьСотрудники(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Склады") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСклады(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтраныМира") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтраныМира(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьФизическиеЛица(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ФизическиеЛицаПрисоединенныеФайлы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьФизическиеЛицаПрисоединенныеФайлы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтатьиЗатрат") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтатьиЗатрат(Данные);
		
	// Документы
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.АктСверкиВзаиморасчетов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьАктСверкиВзаиморасчетов(Данные, СтруктураПараметров);
	
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ВводНачальныхОстатков") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьВводНачальныхОстатков(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьВедомостьНаВыплатуЗарплатыВБанк(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьВедомостьНаВыплатуЗарплатыВКассу(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОплатаПлатежнойКартой") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОплатаПлатежнойКартой(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаписьКУДиР") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЗаписьКУДиР(Данные, СтруктураПараметров);
	
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЗаявлениеАбонентаСпецоператораСвязи(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.НачислениеЗарплаты") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьНачислениеЗарплаты(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.БольничныйЛист") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьБольничныйЛист(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.Отпуск") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьОтпуск(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОтчетОРозничныхПродажах(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПлатежноеПоручение(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПоступлениеНаРасчетныйСчет(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПоступлениеТоваровУслуг(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПриходныйКассовыйОрдер(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРасходныйКассовыйОрдер(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходыНаОнлайнКассыУменьшающиеНалоги") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРасходыНаОнлайнКассы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРеализацияТоваровУслуг(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРегламентированныйОтчет(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСписаниеСРасчетногоСчета(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСчетНаОплатуПокупателю(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСведенияОЗастрахованныхЛицахСЗВ_М(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьУведомлениеОСпецрежимахНалогообложения(Данные, СтруктураПараметров);
		
	// РегистрыСведений
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОтветственныеЛицаОрганизаций(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ДокументыФизическихЛиц") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьДокументыФизическихЛиц(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЖурналОтчетовСтатусы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтатусыОтчетов(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЖурналОтправокВКонтролирующиеОрганы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЖурналОтправокВКонтролирующиеОрганы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.НастройкиСистемыНалогообложения") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиСистемыНалогообложения(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.НастройкиУчетаУСН") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиУчетаУСН(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.НастройкиПродленияСроковНалоговОтчетов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиПродленияСроковНалоговОтчетов(Данные, СтруктураПараметров);
	
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ОсновныеДоговорыКонтрагента") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОсновныеДоговорыКонтрагента(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПараметрыОбменСБанками") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПараметрыОбменСБанками(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.УменьшениеНалогаПСНнаСтраховыеВзносы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьУменьшениеНалогаПСНнаСтраховыеВзносы(Данные, СтруктураПараметров);
			
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.РегиональныеОсобенностиЕНВД") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРегиональныеОсобенностиЕНВД(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СтатусыДокументов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтатусыДокументов(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СостоянияБанковскихДокументов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСостоянияБанковскихДокументов(Данные, СтруктураПараметров);

	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТекущиеКадровыеДанныеСотрудников") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьТекущиеКадровыеДанныеСотрудников(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ТекущаяТарифнаяСтавкаСотрудников") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьТекущаяТарифнаяСтавкаСотрудников(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ФизическиеПоказателиЕНВД") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьФизическиеПоказателиЕНВД(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.БухучетЗарплатыСотрудников") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьБухучетЗарплатыСотрудников(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЗадачиБухгалтера") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСписокЗадач(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СостоянияИнтеграцииСПлатформойСамозанятые") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСостоянияИнтеграцииСПлатформойСамозанятые(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ФИОФизическихЛиц") Тогда
		
		ПередаваемыйОбъект = МобильнаяБухгалтерияЗарплата.ВыгрузитьФИОФизическихЛиц(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыДокументов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЦеныНоменклатуры(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЧекиНПД") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЧекиНПД(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьШтрихкодыНоменклатуры(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ДатыВводаНачальныхОстатков") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьДатаНачалаРаботыИЗДатыВводаНачальныхОстатков(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#Область НСИ

Функция ВыгрузитьБанки(Данные)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Банк");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.Код             = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КоррСчет        = Данные.КоррСчет;
	ПередаваемыйОбъект.Город           = Данные.Город;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьБанковскиеСчета(Данные, СтруктураПараметров)
	
	ЭтоСчетОрганизации = ТипЗнч(Данные.Владелец) = Тип("СправочникСсылка.Организации");
	Если ЭтоСчетОрганизации И Данные.Владелец <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("БанковскийСчет");
	ПередаваемыйОбъект.Ссылка              = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование        = Данные.Наименование;
	ПередаваемыйОбъект.Код                 = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления     = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Владелец            = СериализоватьСсылку(Данные.Владелец);
	ПередаваемыйОбъект.ЭтоСчетОрганизации  = ЭтоСчетОрганизации;
	
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		ПередаваемыйОбъект.ЭтоСчетФизическогоЛица = (ТипЗнч(Данные.Владелец) = Тип("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
	ПередаваемыйОбъект.НомерСчета          = Данные.НомерСчета;
	ПередаваемыйОбъект.Банк                = СериализоватьСсылку(Данные.Банк);
	ПередаваемыйОбъект.ТекстКорреспондента = Данные.ТекстКорреспондента;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		
		ПередаваемыйОбъект.Валютный = Данные.Валютный;
		ПередаваемыйОбъект.ВалютаДенежныхСредствПредставление = Строка(Данные.ВалютаДенежныхСредств);
		
		//Счета контрагентов в валюте и иностранных банках так же недоступны в мобильном
		ЭтоБанкРФ = Ложь;
		Если ЗначениеЗаполнено(Данные.Банк) Тогда
			КодБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Банк, "Код");
			ЭтоБанкРФ = БанковскиеПравила.ЭтоБИКБанкаРФ(КодБанка);
		КонецЕсли;
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = Данные.Валютный ИЛИ НЕ ЭтоБанкРФ;
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьВидДеятельностиЕНВД(Данные, СтруктураПараметров)
	
	Если Данные.Владелец <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ВидДеятельностиЕНВД");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	КодВидаДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.КодВидаДеятельности, "Код");
	ПередаваемыйОбъект.Адрес               = Данные.Адрес;
	ПередаваемыйОбъект.АдресСтрокой        = Данные.АдресСтрокой;
	ПередаваемыйОбъект.КодПоОКТМО          = Данные.КодПоОКТМО;
	ПередаваемыйОбъект.ДатаНачала          = Данные.ДатаНачала;
	ПередаваемыйОбъект.ДатаПрекращения     = Данные.ДатаПрекращения;
	ПередаваемыйОбъект.КодВидаДеятельности = КодВидаДеятельности;
	Если ЗначениеЗаполнено(Данные.РегистрацияВНалоговомОргане) Тогда
		РеквизитыРегистрацииВНалоговомОргане    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.РегистрацияВНалоговомОргане, "Код, КПП");
		ПередаваемыйОбъект.КодНалоговогоОргана  = РеквизитыРегистрацииВНалоговомОргане.Код;
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.КПП                  = РеквизитыРегистрацииВНалоговомОргане.КПП;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПатент(Данные, СтруктураПараметров)
	
	Если Данные.Владелец <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Патент");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Код             = Данные.Код;
	
	ПередаваемыйОбъект.НомерПатента        = Данные.НомерПатента;
	ПередаваемыйОбъект.ДатаВыдачи          = Данные.ДатаВыдачи;
	ПередаваемыйОбъект.КодПоОКТМО          = Данные.КодПоОКТМО;
	ПередаваемыйОбъект.КБК                 = Данные.КБК;
	ПередаваемыйОбъект.ДатаНачала          = Данные.ДатаНачала;
	ПередаваемыйОбъект.ДатаОкончания       = Данные.ДатаОкончания;
	
	ПередаваемыйОбъект.ДатаПервогоПлатежа  = Данные.ДатаПервогоПлатежа;
	ПередаваемыйОбъект.СуммаПервогоПлатежа = Данные.СуммаПервогоПлатежа;
	ПередаваемыйОбъект.ДатаВторогоПлатежа  = Данные.ДатаВторогоПлатежа;
	ПередаваемыйОбъект.СуммаВторогоПлатежа = Данные.СуммаВторогоПлатежа;
	
	ПередаваемыйОбъект.ПотенциальноВозможныйГодовойДоход = Данные.ПотенциальноВозможныйГодовойДоход;
	
	Если СтруктураПараметров.ВерсияСхемы >= 15 Тогда
		ПередаваемыйОбъект.СуммаОсвобожденияОтНалога = Данные.СуммаОсвобожденияОтНалога;
	КонецЕсли;
	
	Если Данные.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане
		И ЗначениеЗаполнено(Данные.НалоговыйОрган) Тогда
		ПередаваемыйОбъект.КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.НалоговыйОрган, "Код");
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьВидыОбменаСБанком(БанковскийСчет, СтруктураПараметров)
	Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(БанковскийСчет) Тогда
		ВидОбмена = "Интеграция";
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БанковскийСчет",  БанковскийСчет);
		Запрос.УстановитьПараметр("ЦентральныйУзел", СтруктураПараметров.ЦентральныйУзел);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОбменаСБанком.ВидОбмена
		|ИЗ
		|	ПланОбмена.МобильнаяБухгалтерия.ВидыОбменаСБанком КАК ВидыОбменаСБанком
		|ГДЕ
		|	ВидыОбменаСБанком.Ссылка = &ЦентральныйУзел
		|	И ВидыОбменаСБанком.БанковскийСчет = &БанковскийСчет";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			ВидОбмена = "НетОбмена";
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВидОбмена = Выборка.ВидОбмена;
		КонецЕсли;
	КонецЕсли; 
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ВидыОбменаСБанком");
	ПередаваемыйОбъект.БанковскийСчет = СериализоватьСсылку(БанковскийСчет);
	ПередаваемыйОбъект.ВидОбмена      = ВидОбмена;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьДополнительныеУсловия(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДополнительныеУсловия");
	КлючевыеСвойства = СоздатьОбъектXDTO("ДополнительныеУсловияКлючевыеСвойства");
	КлючевыеСвойства.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование    = Данные.Наименование;
	КлючевыеСвойства.Код             = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления = Данные.ПометкаУдаления;
	КлючевыеСвойства.ИмяМакета       = Данные.ИмяМакета;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.ТекстУсловий       = Данные.ТекстУсловий;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьКлассификаторЕдиницИзмерения(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЕдиницаИзмерения");
	
	КлючевыеСвойства = СоздатьОбъектXDTO("ЕдиницаИзмеренияКлючевыеСвойства");
	КлючевыеСвойства.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование       = Данные.Наименование;
	КлючевыеСвойства.Код                = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьКонтрагенты(Данные, СтруктураПараметров)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Контрагент");
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.ИНН                = Данные.ИНН;
	ПередаваемыйОбъект.КПП                = Данные.КПП;
	
	ПередаваемыйОбъект.СвидетельствоСерияНомер   = Данные.СвидетельствоСерияНомер;
	ПередаваемыйОбъект.СвидетельствоДатаВыдачи   = Данные.СвидетельствоДатаВыдачи;
	
	ПередаваемыйОбъект.ОсновнойБанковскийСчет    = СериализоватьСсылку(Данные.ОсновнойБанковскийСчет);
	
	ПередаваемыйОбъект.СтранаРегистрации   = СоздатьКлючевыеСвойстваПоСсылке(Данные.СтранаРегистрации, "СтранаМира");
	
	Если Данные.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	ИначеЕсли Данные.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо = "ФизическоеЛицо";
	КонецЕсли;
	
	ПередаваемыйОбъект.КодГосударственногоОргана = Данные.КодГосударственногоОргана;
	ПередаваемыйОбъект.ГосударственныйОрган      = Данные.ГосударственныйОрган;
	Если Данные.ВидГосударственногоОргана  = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		ПередаваемыйОбъект.ВидГосударственногоОргана = "НалоговыйОрган";
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда 
		ПередаваемыйОбъект.ВидГосударственногоОргана = "ОрганПФР"
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда 
		ПередаваемыйОбъект.ВидГосударственногоОргана = "ОрганФСС"
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
		ПередаваемыйОбъект.ВидГосударственногоОргана = "Прочий"
	КонецЕсли; 
	
	СоответствиеКИ = Новый Соответствие;
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
	СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, "АдресЭлектроннойПочты");
	Для каждого СтрокаКИ Из Данные.КонтактнаяИнформация Цикл
		ВидКИ = СоответствиеКИ.Получить(СтрокаКИ.Вид);
		Если ВидКИ <> Неопределено Тогда
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("КонтактнаяИнформация.Строка");
			
			ДобавляемаяСтрока.ВидКИ = ВидКИ;
			
			Если СтруктураПараметров.ВерсияСхемы >= 3 Тогда
				ДобавляемаяСтрока.Значение = СтрокаКИ.Значение;
			КонецЕсли;
			
			ДобавляемаяСтрока.ЗначенияПолей = 
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
			
			ПередаваемыйОбъект.КонтактнаяИнформация.Добавить(ДобавляемаяСтрока);
			
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиОбменСБанками(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкаОбменаСБанками");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация              = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Банк                     = СериализоватьСсылку(Данные.Банк);
	ПередаваемыйОбъект.АдресСервера             = Данные.АдресСервера;
	ПередаваемыйОбъект.ВерсияФормата            = Данные.ВерсияФормата;
	ПередаваемыйОбъект.ИдентификаторОрганизации = Данные.ИдентификаторОрганизации;
	ПередаваемыйОбъект.ИмяПользователя          = Данные.ИмяПользователя;
	ПередаваемыйОбъект.Недействительна          = Данные.Недействительна;
	
	Если Данные.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ПередаваемыйОбъект.ПрограммаБанка = "СбербанкОнлайн";
	ИначеЕсли Данные.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		ПередаваемыйОбъект.ПрограммаБанка = "АсинхронныйОбмен";
	Иначе
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНоменклатура(Данные, СтруктураПараметров)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Номенклатура");
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.Услуга             = Данные.Услуга;
	ПередаваемыйОбъект.ЕдиницаИзмерения   = СоздатьКлючевыеСвойстваПоСсылке(Данные.ЕдиницаИзмерения, "ЕдиницаИзмерения");
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.СтавкаНДС =
			ИмяЗначенияПеречисления(Перечисления.СтавкиНДС.СтавкаНДС(Данные.ВидСтавкиНДС, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОрганизации(Данные, СтруктураПараметров)
	
	Если Данные.Ссылка <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Организация");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.Код             = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо = ИмяЗначенияПеречисления(Данные.ЮридическоеФизическоеЛицо);
	КонецЕсли;
	
	ПередаваемыйОбъект.НаименованиеПолное        = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.НаименованиеСокращенное   = Данные.НаименованиеСокращенное;
	ПередаваемыйОбъект.ИНН                       = Данные.ИНН;
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.КПП                   = Данные.КПП;
		ПередаваемыйОбъект.Префикс               = Данные.Префикс;
	КонецЕсли;
	ПередаваемыйОбъект.ФамилияИП                 = Данные.ФамилияИП;
	ПередаваемыйОбъект.ИмяИП                     = Данные.ИмяИП;
	ПередаваемыйОбъект.ОтчествоИП                = Данные.ОтчествоИП;
	ПередаваемыйОбъект.КодПоОКПО                 = Данные.КодПоОКПО;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		ПередаваемыйОбъект.ОГРН                      = Данные.ОГРН;
		ПередаваемыйОбъект.КодОрганаПФР              = Данные.КодОрганаПФР;
		ПередаваемыйОбъект.РегистрационныйНомерПФР   = Данные.РегистрационныйНомерПФР;
		ПередаваемыйОбъект.КодПодчиненностиФСС       = Данные.КодПодчиненностиФСС;
		ПередаваемыйОбъект.РегистрационныйНомерФСС   = Данные.РегистрационныйНомерФСС;
	КонецЕсли;
	ПередаваемыйОбъект.ИПРегистрационныйНомерПФР = Данные.ИПРегистрационныйНомерПФР;
	ПередаваемыйОбъект.КодОКВЭД2                 = Данные.КодОКВЭД2;
	ПередаваемыйОбъект.СвидетельствоСерияНомер   = Данные.СвидетельствоСерияНомер;
	ПередаваемыйОбъект.СвидетельствоДатаВыдачи   = Данные.СвидетельствоДатаВыдачи;
	ПередаваемыйОбъект.ФайлЛоготип               = СериализоватьСсылку(Данные.ФайлЛоготип);
	ПередаваемыйОбъект.ФайлПечать                = СериализоватьСсылку(Данные.ФайлПечать);
	
	ПередаваемыйОбъект.ОсновнойБанковскийСчет    = СериализоватьСсылку(Данные.ОсновнойБанковскийСчет);
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.ВариантНаименованияДляПечатныхФорм = ИмяЗначенияПеречисления(Данные.ВариантНаименованияДляПечатныхФорм);
	КонецЕсли;
	Если СтруктураПараметров.ВерсияСхемы >= 1 Тогда
		ПередаваемыйОбъект.ИндивидуальныйПредприниматель = СериализоватьСсылку(Данные.ИндивидуальныйПредприниматель);
	КонецЕсли;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		ПередаваемыйОбъект.ИПИспользуетТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Данные.Ссылка);
	КонецЕсли;
		
	ПередаваемыйОбъект.ДополнительныеУсловияПоУмолчанию =
		СоздатьКлючевыеСвойстваПоСсылке(Данные.ДополнительныеУсловияПоУмолчанию, "ДополнительныеУсловия");
	
	Если ЗначениеЗаполнено(Данные.РегистрацияВНалоговомОргане) Тогда
		ДанныеРегистрацииВНалоговомОргане          = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.РегистрацияВНалоговомОргане, "Код, КодПоОКТМО");
		
		ПередаваемыйОбъект.КодПоОКТМО              = ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО;
		ПередаваемыйОбъект.КодНалоговогоОргана     = ДанныеРегистрацииВНалоговомОргане.Код;
	КонецЕсли; 
	ПередаваемыйОбъект.ДатаРегистрации         = Данные.ДатаРегистрации;
	
	Для каждого СтрокаКИ Из Данные.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации ИЛИ
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			ЗначениеКИ = СтрокаКИ.ЗначенияПолей;
			Если СтруктураПараметров.ВерсияСхемы >= 3 Тогда
				Если НЕ ПустаяСтрока(СтрокаКИ.Значение) Тогда
					ЗначениеКИ = СтрокаКИ.Значение;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
				ПередаваемыйОбъект.ЮрАдресОрганизации = ЗначениеКИ;
			ИначеЕсли СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
				ПередаваемыйОбъект.ТелефонОрганизации = ЗначениеКИ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьСтраныМира(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СтранаМира");
	
	КлючевыеСвойства = СоздатьОбъектXDTO("СтранаМираКлючевыеСвойства");
	КлючевыеСвойства.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование       = Данные.Наименование;
	КлючевыеСвойства.Код                = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.КодАльфа2          = Данные.КодАльфа2;
	ПередаваемыйОбъект.КодАльфа3          = Данные.КодАльфа3;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПараметрыОбменСБанками(Данные)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() > 0 Тогда
		ПараметрыОбменСБанками = Данные[0];
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗаписьПараметрыОбменСБанками");
		ЗаполнитьЗначенияСвойств(ПередаваемыйОбъект, ПараметрыОбменСБанками, , "НастройкаОбмена"); 
		ПередаваемыйОбъект.НастройкаОбмена = СериализоватьСсылку(ПараметрыОбменСБанками.НастройкаОбмена);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСостоянияБанковскихДокументов(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() > 0 
		И Данные[0].Организация = СтруктураПараметров.Организация Тогда
		ПараметрыОбменСБанками = Данные[0];
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СостоянияБанковскихДокументов");
		ПередаваемыйОбъект.Организация    = СериализоватьСсылку(Данные[0].Организация);
		ПередаваемыйОбъект.СсылкаНаОбъект = СериализоватьСсылку(Данные[0].СсылкаНаОбъект);
		ПередаваемыйОбъект.Состояние      = ИмяЗначенияПеречисления(Данные[0].Состояние);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСтатусыДокументов(Данные, СтруктураПараметров)
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаписи = Данные[0];
	
	Если ДанныеЗаписи.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемаяЗапись = Неопределено;
	Если ТипЗнч(ДанныеЗаписи.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СтатусДокумента.РеализацияТоваровУслуг");
		
		ПередаваемаяЗапись.Организация = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Документ    = СериализоватьСсылку(ДанныеЗаписи.Документ);
		
		Если ДанныеЗаписи.Статус = Перечисления.СтатусыДокументовРеализации.Подписан Тогда
			ПередаваемаяЗапись.Статус = "Подписан";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусыДокументовРеализации.НеПодписан Тогда
			ПередаваемаяЗапись.Статус = "НеПодписан";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаписи.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СтатусДокумента.СчетНаОплатуПокупателю");
		
		ПередаваемаяЗапись.Организация = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Документ = СериализоватьСсылку(ДанныеЗаписи.Документ);
		
		Если ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.НеОплачен Тогда
			ПередаваемаяЗапись.Статус = "НеОплачен";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.Оплачен Тогда
			ПередаваемаяЗапись.Статус = "Оплачен";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично Тогда
			ПередаваемаяЗапись.Статус = "ОплаченЧастично";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.Отменен Тогда
			ПередаваемаяЗапись.Статус = "Отменен";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПередаваемаяЗапись;
	
КонецФункции

Функция ВыгрузитьСтатусыОтчетов(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтчетСсылка = Данные.Отбор.Ссылка.Значение;
	
	Отчет       = СериализоватьСсылку(ОтчетСсылка);
	Организация = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СтатусыОтчетов");
	ПередаваемыйОбъект.ОтчетОтбор       = Отчет;
	ПередаваемыйОбъект.ОрганизацияОтбор = Организация;
	ЗапрещеноРедактироватьВМобильном = Ложь;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		Если ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
			ПередаваемыйОбъект.ВидДокумента = "СведенияОЗастрахованныхЛицахСЗВ_М";
		ИначеЕсли ТипЗнч(ОтчетСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ПередаваемыйОбъект.ВидДокумента = "РегламентированныйОтчет";
			
			Если ОбщегоНазначения.СсылкаСуществует(ОтчетСсылка) Тогда
				ПараметрыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтчетСсылка, "ИсточникОтчета, ДатаОкончания");
				
				Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ИсточникОтчета) Тогда
					Возврат Неопределено;
				КонецЕсли; 
				
				Попытка
					ИмяФормыРеглОтчета   = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ПараметрыОтчета.ИсточникОтчета, ПараметрыОтчета.ДатаОкончания);
					ОперацииСРеглОтчетом = РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(ПараметрыОтчета.ИсточникОтчета, ИмяФормыРеглОтчета);
					
					ЗапрещеноРедактироватьВМобильном = ПараметрыОтчета.ИсточникОтчета <> "РегламентированныйОтчетСтатистикаФорма1Предприниматель"
						И Не (ОперацииСРеглОтчетом.ВыгрузкаНаСервере
							Или ОперацииСРеглОтчетом.ПечатьСоШтрихкодомPDF417НаСервере 
							Или ОперацииСРеглОтчетом.ПечатьБезШтрихкодаPDF417НаСервере);
				Исключение
					ЗапрещеноРедактироватьВМобильном = Истина;
					
					ТекстОшибки = НСтр("ru = 'Попытка выгрузки из мобильной бухгалтерии отчета с идентификатором %1'");
					
					ЗарегистрироватьОшибкуОбмена(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПараметрыОтчета.ИсточникОтчета), 
						"МобильнаяБухгалтерия.ВыгрузитьСтатусыОтчетов");
				КонецПопытки; 
				
			Иначе
				ЗапрещеноРедактироватьВМобильном = Истина;
			КонецЕсли; 
			
		Иначе
			ЗапрещеноРедактироватьВМобильном = Истина;
		КонецЕсли;
	КонецЕсли;

	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СтатусыОтчетов.Запись");
		ПередаваемаяЗапись.Организация                    = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Отчет                           = Отчет;
		ПередаваемаяЗапись.Статус                          = ДанныеЗаписи.Статус;
		ПередаваемаяЗапись.СостояниеСдачиОтчетности        = ИмяЗначенияПеречисления(ДанныеЗаписи.СостояниеСдачиОтчетности);
		ПередаваемаяЗапись.ЕстьКритическиеОшибкиОтправки   = ДанныеЗаписи.ЕстьКритическиеОшибкиОтправки;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяЗапись.НаименованиеОтчета               = ДанныеЗаписи.НаименованиеОтчета;
			ПередаваемаяЗапись.ФинансовыйПериод                 = ДанныеЗаписи.ФинансовыйПериод;
			ПередаваемаяЗапись.ПометкаУдаления                  = ДанныеЗаписи.ПометкаУдаления;
			ПередаваемаяЗапись.ЗапрещеноРедактироватьВМобильном = ЗапрещеноРедактироватьВМобильном;
			ПередаваемаяЗапись.ВариантОтчета                    = ДанныеЗаписи.ВариантОтчета;
			ПередаваемаяЗапись.ДатаОкончания                    = ДанныеЗаписи.ДатаОкончания;
		КонецЕсли;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЦеныНоменклатуры(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() > 0 
		И Данные[0].СпособЗаполненияЦены = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ЦеныНоменклатуры");
		ПередаваемыйОбъект.Номенклатура = СериализоватьСсылку(Данные[0].Номенклатура);
		Если Данные[0].Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			ПередаваемыйОбъект.Цена = Данные[0].Цена;
		Иначе
			ПередаваемыйОбъект.Цена = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьШтрихкодыНоменклатуры(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Количество() > 0 Тогда
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ШтрихкодыНоменклатуры");
		ПередаваемыйОбъект.Номенклатура = СериализоватьСсылку(Данные[0].Номенклатура);
		ПередаваемыйОбъект.Штрихкод		= Данные[0].Штрихкод;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьФизическиеПоказателиЕНВД(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ФизическиеПоказателиЕНВД");
	ПередаваемыйОбъект.ПериодОтбор          = Данные.Отбор.Период.Значение;
	ПередаваемыйОбъект.ОрганизацияОтбор     = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	ПередаваемыйОбъект.ВидДеятельностиОтбор = СериализоватьСсылку(Данные.Отбор.ВидДеятельности.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("ФизическиеПоказателиЕНВД.Запись");
		ПередаваемаяЗапись.Период    = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Организация    = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.ВидДеятельности = СериализоватьСсылку(ДанныеЗаписи.ВидДеятельности);
		ПередаваемаяЗапись.ФизическийПоказатель = ДанныеЗаписи.ФизическийПоказатель;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРегиональныеОсобенностиЕНВД(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РегиональныеОсобенностиЕНВД");
	ПередаваемыйОбъект.ПериодОтбор          = Данные.Отбор.Период.Значение;
	ПередаваемыйОбъект.ОрганизацияОтбор     = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	ПередаваемыйОбъект.ВидДеятельностиОтбор = СериализоватьСсылку(Данные.Отбор.ВидДеятельности.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("РегиональныеОсобенностиЕНВД.Запись");
		ПередаваемаяЗапись.Период    = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Организация    = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.ВидДеятельности = СериализоватьСсылку(ДанныеЗаписи.ВидДеятельности);
		ПередаваемаяЗапись.КорректирующийКоэффициент = ДанныеЗаписи.КорректирующийКоэффициент;
		ПередаваемаяЗапись.НалоговаяСтавка = ДанныеЗаписи.НалоговаяСтавка;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиСистемыНалогообложения(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкиСистемыНалогообложения");
	ПередаваемыйОбъект.ПериодОтбор          = Данные.Отбор.Период.Значение;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("НастройкиСистемыНалогообложения.Запись");
		ПередаваемаяЗапись.Период                           = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Организация                      = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.ПлательщикЕНВД                   = ДанныеЗаписи.ПлательщикЕНВД;
		ПередаваемаяЗапись.ПрименяетсяПатент                = ДанныеЗаписи.ПрименяетсяУСНПатент;
		
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяЗапись.ИсходнаяДата                            = ДанныеЗаписи.Период;
			ПередаваемаяЗапись.ПлательщикНДС                           = ДанныеЗаписи.ПлательщикНДС;
			ПередаваемаяЗапись.ПрименяетсяУСНДоходы                    = ДанныеЗаписи.ПрименяетсяУСНДоходы;
			ПередаваемаяЗапись.ПрименяетсяУСНДоходыМинусРасходы        = ДанныеЗаписи.ПрименяетсяУСНДоходыМинусРасходы;
			ПередаваемаяЗапись.ПрименяетсяОсобыйПорядокНалогообложения = ДанныеЗаписи.ПрименяетсяОсобыйПорядокНалогообложения;
		КонецЕсли;
		
		Если СтруктураПараметров.ВерсияСхемы >=6 Тогда
			ПередаваемаяЗапись.ПрименяетсяНалогНаПрофессиональныйДоход = ДанныеЗаписи.ПрименяетсяНалогНаПрофессиональныйДоход;
			ПередаваемаяЗапись.ПлательщикНалогаНаПрибыль               = ДанныеЗаписи.ПлательщикНалогаНаПрибыль;
			ПередаваемаяЗапись.ПрименяетсяУСН                          = ДанныеЗаписи.ПрименяетсяУСН;
			ПередаваемаяЗапись.ДатаИзменения                           = ДанныеЗаписи.ДатаИзменения;
		КонецЕсли;
		
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиУчетаУСН(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;

	Организация = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкиУчетаУСН");
	ПередаваемыйОбъект.ПериодОтбор      = Данные.Отбор.Период.Значение;
	ПередаваемыйОбъект.ОрганизацияОтбор = Организация;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		Если ДанныеЗаписи.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД Тогда
			Значение = "ДоходЕНВД";
		ИначеЕсли ДанныеЗаписи.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент Тогда
			Значение = "ДоходПатент";
		Иначе
			Значение = "ДоходУСН";
		КонецЕсли;
		ПередаваемаяЗапись = СоздатьОбъектXDTO("НастройкиУчетаУСН.Запись");
		ПередаваемаяЗапись.Период    = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Организация            = Организация;
		ПередаваемаяЗапись.ПорядокОтраженияАванса = Значение;
		ПередаваемаяЗапись.СтавкаНалога = ДанныеЗаписи.СтавкаНалога;
		ПередаваемаяЗапись.Патент = СериализоватьСсылку(ДанныеЗаписи.Патент);
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиПродленияСроковНалоговОтчетов(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;

	Организация = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкиПродленияСроковНалоговОтчетов");
	ПередаваемыйОбъект.ОрганизацияОтбор = Организация;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("НастройкиПродленияСроковНалоговОтчетов.Запись");
		ПередаваемаяЗапись.Организация                  = Организация;
		ПередаваемаяЗапись.МерыУстойчивогоРазвития      = ДанныеЗаписи.МерыУстойчивогоРазвития;
		ПередаваемаяЗапись.МерыУстойчивогоРазвитияМикро = ДанныеЗаписи.МерыУстойчивогоРазвитияМикро;
		ПередаваемаяЗапись.РаботаетВНерабочиеДни        = ДанныеЗаписи.РаботаетВНерабочиеДни;
		ПередаваемаяЗапись.ПеренестиСрокиОтчетовВФонды  = ДанныеЗаписи.ПеренестиСрокиОтчетовВФонды;
		
		Если СтруктураПараметров.ВерсияСхемы >= 11 Тогда
			ПередаваемаяЗапись.ДатаУплатыУСНЗа2019Год       = ДанныеЗаписи.ДатаУплатыУСНЗа2019Год;
			ПередаваемаяЗапись.ДатаУплатыУСНЗа1Кв2020       = ДанныеЗаписи.ДатаУплатыУСНЗа1Кв2020;
			ПередаваемаяЗапись.ДатаУплатыУСНЗа2Кв2020       = ДанныеЗаписи.ДатаУплатыУСНЗа2Кв2020;
			ПередаваемаяЗапись.ДатаУплатыУСНЗа3Кв2020       = ДанныеЗаписи.ДатаУплатыУСНЗа3Кв2020;
			ПередаваемаяЗапись.ДатаУплатыЕНВДЗа1Кв2020      = ДанныеЗаписи.ДатаУплатыЕНВДЗа1Кв2020;
			ПередаваемаяЗапись.ДатаУплатыЕНВДЗа2Кв2020      = ДанныеЗаписи.ДатаУплатыЕНВДЗа2Кв2020;
			ПередаваемаяЗапись.ДатаУплатыЕНВДЗа3Кв2020      = ДанныеЗаписи.ДатаУплатыЕНВДЗа3Кв2020;
		КонецЕсли;
		
		Если СтруктураПараметров.ВерсияСхемы >= 15 Тогда
			ПередаваемаяЗапись.ДеятельностьОтнесенаКПострадавшимОтКоронавируса =
							ДанныеЗаписи.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
		КонецЕсли;
		
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОсновныеДоговорыКонтрагента(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыгружатьДоговор = СтруктураПараметров.ВерсияСхемы >= 5;
	
	Если НЕ ВыгружатьДоговор
		И Данные.Отбор.ВидДоговора.Значение <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Организация = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	Контрагент  = СериализоватьСсылку(Данные.Отбор.Контрагент.Значение);
	ВидДоговора  = ИмяЗначенияПеречисления(Данные.Отбор.ВидДоговора.Значение);
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОсновныеДоговорыКонтрагента");
	ПередаваемыйОбъект.ОрганизацияОтбор = Организация;
	ПередаваемыйОбъект.КонтрагентОтбор  = Контрагент;
	
	Если ВыгружатьДоговор Тогда
		ПередаваемыйОбъект.ВидДоговораОтбор = ВидДоговора;
	КонецЕсли;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеЗаписи.Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		ПередаваемаяЗапись = СоздатьОбъектXDTO("ОсновныеДоговорыКонтрагента.Запись");
		ПередаваемаяЗапись.Организация = Организация;
		ПередаваемаяЗапись.Контрагент  = Контрагент;
		
		Если ВыгружатьДоговор Тогда
			ПередаваемаяЗапись.ВидДоговора = ВидДоговора;
			ПередаваемаяЗапись.Договор     = СериализоватьСсылку(ДанныеЗаписи.Договор);
		Иначе
			
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаписи.Договор, "Номер, Дата");
			ПередаваемаяЗапись.Номер = ДанныеДоговора.Номер;
			ПередаваемаяЗапись.Дата  = ДанныеДоговора.Дата;
			
		КонецЕсли;
		
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
		
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьИнтеграцияСБанком()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ИнтеграцияСБанком");
	ПередаваемыйОбъект.ИнтеграцияСБанкомЗначение = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьБухучетЗарплатыСотрудников(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("БухучетЗарплатыСотрудников");
	ПередаваемыйОбъект.ПериодОтбор      = Данные.Отбор.Период.Значение;
	ПередаваемыйОбъект.СотрудникОтбор   = СериализоватьСсылку(Данные.Отбор.Сотрудник.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("БухучетЗарплатыСотрудников.Запись");
		ПередаваемаяЗапись.Период         = ДанныеЗаписи.Период;
		ПередаваемаяЗапись.Сотрудник      = СериализоватьСсылку(ДанныеЗаписи.Сотрудник);
		ПередаваемаяЗапись.ОтношениеКЕНВД = ИмяЗначенияПеречисления(ДанныеЗаписи.ОтношениеКЕНВД);
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСписокЗадач(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	//Сведения списка задач дополняют данные мобильной бухгалтерии, поэтому удаление не передаем
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Сведения списка задач дополняют данные мобильной бухгалтерии, поэтому удаление не передаем
	Если ТипЗнч(Данные.Отбор.Правило.Значение) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		
		РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.Отбор.Правило.Значение, "Код, Владелец.Код, Действие");
		
		Если РеквизитыПравила.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
			//И РеквизитыПравила.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.Проверка
			//И РеквизитыПравила.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж
			И РеквизитыПравила.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата
			И РеквизитыПравила.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СписокЗадач");
		ПередаваемыйОбъект.ИдентификаторПравилаОтбор   = РеквизитыПравила.Код;
		ПередаваемыйОбъект.ИдентификаторЗадачиОтбор    = РеквизитыПравила.ВладелецКод;
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ТипПравила                  = "СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов";
		КонецЕсли;
		Действие = РеквизитыПравила.Действие;
		
	ИначеЕсли СтруктураПараметров.ВерсияСхемы < 5 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(Данные.Отбор.Правило.Значение) = Тип("СправочникСсылка.Патенты") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СписокЗадач");
		ПередаваемыйОбъект.ИдентификаторПравилаОтбор   = "ПАТЕНТ";
		ПередаваемыйОбъект.ИдентификаторЗадачиОтбор    = СериализоватьСсылку(Данные.Отбор.Правило.Значение);
		ПередаваемыйОбъект.ТипПравила                  = "СправочникСсылка.Патенты";
		Действие = Перечисления.ВидыДействийКалендаряБухгалтера.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Данные.Отбор.Правило.Значение) = Тип("СправочникСсылка.ПроверкиКонтролирующимиОрганами") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СписокЗадач");
		ПередаваемыйОбъект.ИдентификаторПравилаОтбор   = "ПРОВЕРКА";
		ПередаваемыйОбъект.ИдентификаторЗадачиОтбор    = СериализоватьСсылку(Данные.Отбор.Правило.Значение);
		ПередаваемыйОбъект.ТипПравила                  = "СправочникСсылка.ПроверкиКонтролирующимиОрганами";
		Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Проверка;
		
	ИначеЕсли ТипЗнч(Данные.Отбор.Правило.Значение) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("СписокЗадач");
		ПередаваемыйОбъект.ИдентификаторПравилаОтбор   = "ПЛАТЕЖ";
		ПередаваемыйОбъект.ИдентификаторЗадачиОтбор    = СериализоватьСсылку(Данные.Отбор.Правило.Значение);
		ПередаваемыйОбъект.ТипПравила                  = "СправочникСсылка.ПравилаРегулярныхПлатежей";
		Действие = Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПередаваемыйОбъект.ОрганизацияОтбор            = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	ПередаваемыйОбъект.ПериодСобытияОтбор          = Данные.Отбор.ПериодСобытия.Значение;
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.РегистрацияВНалоговомОргане = СериализоватьСсылку(Данные.Отбор.РегистрацияВНалоговомОргане.Значение);
	КонецЕсли;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СписокЗадач.Запись");
		ПередаваемаяЗапись.ПериодСобытия = ДанныеЗаписи.ПериодСобытия;
		ПередаваемаяЗапись.Организация   = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.ИдентификаторПравила = ПередаваемыйОбъект.ИдентификаторПравилаОтбор;
		ПередаваемаяЗапись.ИдентификаторЗадачи  = ПередаваемыйОбъект.ИдентификаторЗадачиОтбор;
		ПередаваемаяЗапись.Срок                 = ДанныеЗаписи.Срок;
		ПередаваемаяЗапись.ВАрхиве              = ДанныеЗаписи.ВАрхиве;
		ПередаваемаяЗапись.Статус               = ДанныеЗаписи.Статус;
		ПередаваемаяЗапись.НачалоВыполнения     = ДанныеЗаписи.НачалоВыполнения;
		
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемаяЗапись.Действие         = ИмяЗначенияПеречисления(Действие);
			ПередаваемаяЗапись.Наименование     = ДанныеЗаписи.Наименование;
			ПередаваемаяЗапись.Периодичность    = ИмяЗначенияПеречисления(ДанныеЗаписи.Периодичность);
			ПередаваемаяЗапись.ХешЗадачи        = ДанныеЗаписи.ХешЗадачи;
		КонецЕсли;
		
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСтатьиЗатрат(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СтатьиЗатрат");
	ПередаваемыйОбъект.Ссылка                = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование          = Данные.Наименование;
	ПередаваемыйОбъект.Код                   = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления       = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.КлючПредопределенного = Данные.ИмяПредопределенныхДанных;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОтветственныеЛицаОрганизаций(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.СтруктурнаяЕдиница.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выгружаем всегда только последнее значение
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Данные.Отбор.СтруктурнаяЕдиница.Значение, Данные.Отбор.ОтветственноеЛицо.Значение);
	Если РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(,Отбор)[0].Период <> Данные.Отбор.Период.Значение Тогда
		Возврат Неопределено
	КонецЕсли; 
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОтветственныеЛицаОрганизаций");
	
	ПередаваемыйОбъект.СтруктурнаяЕдиницаОтбор = СериализоватьСсылку(Данные.Отбор.СтруктурнаяЕдиница.Значение);
	ПередаваемыйОбъект.ОтветственноеЛицоОтбор  = ИмяЗначенияПеречисления(Данные.Отбор.ОтветственноеЛицо.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("ОтветственныеЛицаОрганизаций.Запись");
		
		ПередаваемаяЗапись.СтруктурнаяЕдиница = СериализоватьСсылку(ДанныеЗаписи.СтруктурнаяЕдиница);
		ПередаваемаяЗапись.ОтветственноеЛицо  = ИмяЗначенияПеречисления(ДанныеЗаписи.ОтветственноеЛицо);
		ПередаваемаяЗапись.ФизическоеЛицо     = СериализоватьСсылку(ДанныеЗаписи.ФизическоеЛицо);
		ПередаваемаяЗапись.Должность          = СериализоватьСсылку(ДанныеЗаписи.Должность);
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьДоговорыКонтрагентов(Данные, СтруктураПараметров)
	
	Если НЕ Данные.ЭтоГруппа
		И Данные.Организация <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДоговорКонтрагента");
	
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.Код             = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Владелец      = СериализоватьСсылку(Данные.Владелец);
	ПередаваемыйОбъект.Родитель      = СериализоватьСсылку(Данные.Родитель);
	ПередаваемыйОбъект.ЭтоГруппа     = Данные.ЭтоГруппа;
	Если НЕ Данные.ЭтоГруппа Тогда
		ПередаваемыйОбъект.Номер         = Данные.Номер;
		ПередаваемыйОбъект.Дата          = Данные.Дата;
		ПередаваемыйОбъект.ВидДоговора   = ИмяЗначенияПеречисления(Данные.ВидДоговора);
		ПередаваемыйОбъект.Организация   = СериализоватьСсылку(Данные.Организация);
		ПередаваемыйОбъект.Валютный      = Данные.Валютный;
		ПередаваемыйОбъект.ОплатаВВалюте = Данные.ОплатаВВалюте;
		ПередаваемыйОбъект.ВалютаВзаиморасчетовПредставление = Строка(Данные.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = Данные.ЭтоГруппа
		ИЛИ Данные.Валютный
		ИЛИ ВидыДоговоровКонтрагентаРедактируемыхВМобильномПриложении().Найти(Данные.ВидДоговора) = Неопределено;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСклады(Данные, СтруктураПараметров)
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Склады");
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьИспользоватьНесколькоСкладов(СтруктураПараметров)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ИспользоватьНесколькоСкладов");
	ПередаваемыйОбъект.ИспользоватьНесколькоСкладовЗначение = Константы.ИспользоватьНесколькоСкладов.Получить();
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьДатаНачалаРаботыИЗДатыВводаНачальныхОстатков(Данные, СтруктураПараметров)
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачалаРаботы = ?(Данные.Количество() = 0, Дата(1,1,1), КонецМесяца(Данные[0].ДатаВводаНачальныхОстатков) + 1);
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДатаНачалаРаботы");
	ПередаваемыйОбъект.ДатаНачалаРаботыЗначение = ДатаНачалаРаботы;
	
	СтруктураПараметров.ДатаНачалаРаботы = ДатаНачалаРаботы;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСостоянияИнтеграцииСПлатформойСамозанятые(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	//Сведения списка задач дополняют данные мобильной бухгалтерии, поэтому удаление не передаем
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СостоянияИнтеграцииСПлатформойСамозанятые");
	ПередаваемыйОбъект.ОрганизацияОтбор         = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		
		Если СтруктураПараметров.ВерсияСхемы >= 8 Тогда
			Состояние = ИмяЗначенияПеречисления(ДанныеЗаписи.Состояние);
		Иначе
			Если ДанныеЗаписи.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.УдалитьНеНастроено Тогда
				Состояние = "НеНастроено";
			ИначеЕсли ДанныеЗаписи.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтправлен
				ИЛИ ДанныеЗаписи.Состояние = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ЗапросОтклонен Тогда
				Состояние = "НеПривязано";
			Иначе
				Состояние = ИмяЗначенияПеречисления(ДанныеЗаписи.Состояние);
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СостоянияИнтеграцииСПлатформойСамозанятые.Запись");
		ПередаваемаяЗапись.Организация          = ПередаваемыйОбъект.ОрганизацияОтбор;
		ПередаваемаяЗапись.Состояние            = Состояние;
		ПередаваемаяЗапись.ИдентификаторЗаявки  = ДанныеЗаписи.ИдентификаторЗаявки;
		ПередаваемаяЗапись.ДатаВремяСобытия     = ДанныеЗаписи.ДатаВремяСобытия;
		ПередаваемаяЗапись.ИдентификаторПриложения = ДанныеЗаписи.ИдентификаторПриложения;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЧекиНПД(Данные, СтруктураПараметров)
	
	Перем ТипДокумента;
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОснование = Данные.Отбор.ДокументОснование.Значение;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ТипДокумента = "ПриходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ТипДокумента = "РасходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ТипДокумента = "ПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ТипДокумента = "СписаниеСРасчетногоСчета";
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ТипДокумента = "ОтчетОРозничныхПродажах";
	Иначе
		// Записи неподдерживаемых документов в БП не передаем
		Возврат Неопределено;
	КонецЕсли;
	
	
	ПередаваемыйОбъект                           = СоздатьОбъектXDTO("ЧекиНПД");
	ПередаваемыйОбъект.ОрганизацияОтбор          = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	ПередаваемыйОбъект.ДокументОснованиеОтбор    = СериализоватьСсылку(ДокументОснование);
	ПередаваемыйОбъект.ТипДокументОснованиеОтбор = ТипДокумента;
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("ЧекиНПД.Запись");
		ПередаваемаяЗапись.Организация           = ПередаваемыйОбъект.ОрганизацияОтбор;
		ПередаваемаяЗапись.ДокументОснование     = ПередаваемыйОбъект.ДокументОснованиеОтбор;
		ПередаваемаяЗапись.ТипДокументОснование  = ТипДокумента;
		Если ДанныеЗаписи.Состояние = Перечисления.СостоянияЧековНПД.ОжидаетОтправкиВФНС Тогда
			// Для обратной совместимости
			СостояниеЧекаНПД = Перечисления.СостоянияЧековНПД.Зарегистрирован;
		Иначе
			СостояниеЧекаНПД = ДанныеЗаписи.Состояние;
		КонецЕсли;
		ПередаваемаяЗапись.Состояние             = ОбщегоНазначения.ИмяЗначенияПеречисления(СостояниеЧекаНПД);
		ПередаваемаяЗапись.СуммаЧека             = ДанныеЗаписи.СуммаЧека;
		ПередаваемаяЗапись.НомерЧека             = ДанныеЗаписи.НомерЧека;
		ПередаваемаяЗапись.ДатаЧека              = ДанныеЗаписи.ДатаЧека;
		ПередаваемаяЗапись.ДатаАннулированияЧека = ДанныеЗаписи.ДатаАннулированияЧека;
		ПередаваемаяЗапись.ПричинаАннулирования  = 
			Перечисления.ПричиныОтменыЧекаНПД.ПредставлениеПричины(ДанныеЗаписи.ПричинаОтменыЧека);
		ПередаваемаяЗапись.АдресЧекаНаСайте      = ДанныеЗаписи.АдресЧекаНаСайте;
		ПередаваемаяЗапись.ПроизведенВозвратПоЧеку      = ДанныеЗаписи.ПроизведенВозвратПоЧеку;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЭлектроннаяПодписьВМоделиСервиса()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЭлектроннаяПодписьВМоделиСервиса");
	ПередаваемыйОбъект.ЭлектроннаяПодписьВМоделиСервисаЗначение = ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОрганизацииПрисоединенныеФайлы(Данные, СтруктураПараметров)
	
	Выгружать = (Данные.ВладелецФайла = СтруктураПараметров.Организация);
	
	Если Выгружать Тогда
		СсылкиНаИзображения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.ВладелецФайла,
			"ФайлЛоготип,ФайлПечать");
		
		Выгружать = СсылкиНаИзображения.ФайлЛоготип = Данные.Ссылка
			ИЛИ СсылкиНаИзображения.ФайлПечать = Данные.Ссылка;
		
	КонецЕсли;
	
	Если НЕ Выгружать Тогда
		//Из-за изменения места хранеия факсимиле подписи, не удаляем в мобильном файлы, до выпуска обновления
		Если СтруктураПараметров.ВерсияСхемы >= 14 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыгрузитьПрисоединенныеФайлы(Данные, "ПрисоединенныйФайлОрганизация", СтруктураПараметров);
	
КонецФункции

Функция ВыгрузитьФизическиеЛицаПрисоединенныеФайлы(Данные, СтруктураПараметров)
	
	СсылкаНаИзображение = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(Данные.ВладелецФайла);
	
	Выгружать = (СсылкаНаИзображение = Данные.Ссылка);
	
	Если НЕ Выгружать Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыгрузитьПрисоединенныеФайлы(Данные, "ФизическиеЛицаПрисоединенныеФайлы", СтруктураПараметров);
	
КонецФункции

Функция ВыгрузитьПрисоединенныеФайлы(Данные, ИмяОбъектаОбмена, СтруктураПараметров)
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Данные.Ссылка, Ложь);
	Выгружать = ДвоичныеДанныеФайла <> Неопределено;
	
	Если НЕ Выгружать Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO(ИмяОбъектаОбмена);
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.ВладелецФайла   = СериализоватьСсылку(Данные.ВладелецФайла);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ДатаСоздания    = Данные.ДатаСоздания;
	ПередаваемыйОбъект.Размер          = Данные.Размер;
	ПередаваемыйОбъект.Описание        = Данные.Описание;
	ПередаваемыйОбъект.Расширение      = Данные.Расширение;
	
	ПередаваемыйОбъект.ХранимыйФайл    = Base64Строка(ДвоичныеДанныеФайла);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиЯндексКассы(Данные, СтруктураПараметров)
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкаЯндексКассы");
	
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ИдентификаторМагазина = Данные.ИдентификаторМагазина;
	ПередаваемыйОбъект.ИдентификаторВитрины  = Данные.ИдентификаторВитрины;
	ПередаваемыйОбъект.Недействительна       = Данные.Недействительна;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьЖурналОтправокВКонтролирующиеОрганы(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация
		Или Данные.Отбор.СтраницаЖурнала.Значение <> Перечисления.СтраницыЖурналаОтчетность.Уведомления
		Или ТипЗнч(Данные.Отбор.Ссылка.Значение) <> Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтчетСсылка = Данные.Отбор.Ссылка.Значение;
	
	Если ОбщегоНазначения.СсылкаСуществует(ОтчетСсылка) Тогда
		ПараметрыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтчетСсылка, "ВидУведомления, ИмяОтчета");
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ВидУведомления)
			ИЛИ ПараметрыОтчета.ВидУведомления <> Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Отчет       = СериализоватьСсылку(ОтчетСсылка);
	Организация = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЖурналОтправокУведомлений");
	ПередаваемыйОбъект.СсылкаОтбор      = Отчет;
	ПередаваемыйОбъект.ОрганизацияОтбор = Организация;

	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("ЖурналОтправокУведомлений.Запись");
		ПередаваемаяЗапись.Организация                      = Организация;
		ПередаваемаяЗапись.Ссылка                           = Отчет;
		
		ПередаваемаяЗапись.СтатусОтправки                     = ДанныеЗаписи.СтатусОтправки;
		ПередаваемаяЗапись.СостояниеСдачиОтчетности           = ИмяЗначенияПеречисления(ДанныеЗаписи.СостояниеСдачиОтчетности);
		ПередаваемаяЗапись.ЕстьКритическиеОшибкиОтправки      = ДанныеЗаписи.ЕстьКритическиеОшибкиОтправки;
		ПередаваемаяЗапись.КодКонтролирующегоОргана           = ДанныеЗаписи.КодКонтролирующегоОргана;
		ПередаваемаяЗапись.ДатаОтправки                       = ДанныеЗаписи.ДатаОтправки;
		ПередаваемаяЗапись.ДатаСоздания                       = ДанныеЗаписи.ДатаСоздания;
		ПередаваемаяЗапись.ПометкаУдаления                    = ДанныеЗаписи.ПометкаУдаления;
		ПередаваемаяЗапись.ЗапрещеноРедактироватьВМобильном = Ложь;
		
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьУменьшениеНалогаПСНнаСтраховыеВзносы(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Отбор.Организация.Значение <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект                           = СоздатьОбъектXDTO("УменьшениеНалогаПСНнаСтраховыеВзносы");
	ПередаваемыйОбъект.ОрганизацияОтбор          = СериализоватьСсылку(Данные.Отбор.Организация.Значение);
	ПередаваемыйОбъект.ПатентОтбор               = СериализоватьСсылку(Данные.Отбор.Патент.Значение);
	ПередаваемыйОбъект.УведомлениеОтбор          = СериализоватьСсылку(Данные.Отбор.Уведомление.Значение);
	
	Для каждого ДанныеЗаписи Из Данные Цикл
		ПередаваемаяЗапись = СоздатьОбъектXDTO("УменьшениеНалогаПСНнаСтраховыеВзносы.Запись");
		ПередаваемаяЗапись.Организация = ПередаваемыйОбъект.ОрганизацияОтбор;
		ПередаваемаяЗапись.Патент      = ПередаваемыйОбъект.ПатентОтбор;
		ПередаваемаяЗапись.Уведомление = ПередаваемыйОбъект.УведомлениеОтбор;
		ПередаваемаяЗапись.Сумма       = ДанныеЗаписи.Сумма;
		ПередаваемыйОбъект.Записи.Добавить(ПередаваемаяЗапись);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область Документы

Функция ВыгрузитьВводНачальныхОстатков(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки
		ИЛИ (Данные.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
		И Данные.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
		И Данные.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		И Данные.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		И Данные.РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.Товары) Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ВводНачальныхОстатков");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.РазделУчета     = ИмяЗначенияПеречисления(Данные.РазделУчета);
	
	Для каждого СтрокаДокумента Из Данные.РасчетыПоНалогамИСборам Цикл
		
		ВидНалога = "";
		
		Если СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "УСН_Доходы";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ЕНВД
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "ЕНВД";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "ФиксированныеВзносы_ПФР";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
			
			ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "ФиксированныеВзносы_ФФОМС";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "НДФЛ";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "СтраховыеВзносы_ФСС";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ";
			
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ФФОМС
			И СтрокаДокумента.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			ВидНалога = "СтраховыеВзносы_ФФОМС";
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ВводНачальныхОстатков.РасчетыПоНалогамИСборам");
		ПередаваемаяСтрокаТЧ.Сумма = - СтрокаДокумента.Сумма + СтрокаДокумента.СуммаКт;
		ПередаваемаяСтрокаТЧ.ВидНалога = ВидНалога;
		
		ПередаваемыйОбъект.РасчетыПоНалогамИСборам.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из Данные.БухСправка Цикл
		
		Если СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			БанковскийСчет = Неопределено;
		ИначеЕсли СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета
			ИЛИ СтрокаДокумента.СчетУчета = ПланыСчетов.Хозрасчетный.ВалютныеСчета Тогда
			БанковскийСчет = СтрокаДокумента.Субконто1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ВводНачальныхОстатков.ДенежныеСредства");
		Если ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Валютный") Тогда
			ПередаваемаяСтрокаТЧ.Сумма = СтрокаДокумента.ВалютнаяСумма;
		Иначе
			ПередаваемаяСтрокаТЧ.Сумма = СтрокаДокумента.Сумма;
		КонецЕсли;
		ПередаваемаяСтрокаТЧ.БанковскийСчет = СериализоватьСсылку(БанковскийСчет);
		
		ПередаваемыйОбъект.ДенежныеСредства.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из Данные.РасчетыСКонтрагентами Цикл
		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.СчетУчета);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Продолжить;
		КонецЕсли;
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ВводНачальныхОстатков.РасчетыСКонтрагентами");
		ПередаваемаяСтрокаТЧ.Сумма              = СтрокаДокумента.Сумма - СтрокаДокумента.СуммаКт;
		ПередаваемаяСтрокаТЧ.Контрагент         = СериализоватьСсылку(СтрокаДокумента.Контрагент);
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.ДоговорКонтрагента = СериализоватьСсылку(СтрокаДокумента.ДоговорКонтрагента);
		КонецЕсли;
		ПередаваемыйОбъект.РасчетыСКонтрагентами.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из Данные.НоменклатураНаСкладе Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ВводНачальныхОстатков.НоменклатураНаСкладе");
		ПередаваемаяСтрокаТЧ.Количество = СтрокаДокумента.Количество;
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаДокумента.Номенклатура);
		
		ПередаваемыйОбъект.НоменклатураНаСкладе.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЗаписьКУДиР(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Строки.Количество() = 0 Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗаписьКУДиР");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	Если Данные.ДеятельностьНаПатенте Тогда
		ПередаваемыйОбъект.Патент          = СериализоватьСсылку(Данные.Патент);
	КонецЕсли;
	
	ПередаваемыйОбъект.ДатаНомерПервичногоДокумента = Данные.Строки[0].ДатаНомер;
	ПередаваемыйОбъект.ДатаПервичногоДокумента      = Данные.Строки[0].ДатаПервичногоДокумента;
	ПередаваемыйОбъект.НомерПервичногоДокумента     = Данные.Строки[0].НомерПервичногоДокумента;
	ПередаваемыйОбъект.СодержаниеОперации           = Данные.Строки[0].Содержание;
	
	Если Данные.ДеятельностьНаПатенте Тогда
		ПередаваемыйОбъект.ДоходПатент = Данные.Строки[0].Графа4;
		ПередаваемыйОбъект.ДоходУСН    = 0;
		ПередаваемыйОбъект.ДоходЕНВД   = 0;
	ИначеЕсли Данные.Строки[0].ДоходыЕНВД Тогда
		ПередаваемыйОбъект.ДоходПатент = 0;
		ПередаваемыйОбъект.ДоходУСН    = 0;
		ПередаваемыйОбъект.ДоходЕНВД   = Данные.Строки[0].Графа5;
	Иначе
		ПередаваемыйОбъект.ДоходПатент = 0;
		ПередаваемыйОбъект.ДоходУСН    = Данные.Строки[0].Графа5;
		ПередаваемыйОбъект.ДоходЕНВД   = 0;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЗаявлениеАбонентаСпецоператораСвязи(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если НЕ КонтекстЭДОСервер.ЗаявлениеАбонентаВМобильном(Данные.Ссылка, СтруктураПараметров.Организация) Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗаявлениеАбонентаСпецоператораСвязиСПолучателями");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Ложь;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация                    = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.КраткоеНаименование            = Данные.КраткоеНаименование;
	ПередаваемыйОбъект.ПолноеНаименование             = Данные.ПолноеНаименование;

	ПередаваемыйОбъект.АдресЮридический               = Данные.АдресЮридический;
	//ПередаваемыйОбъект.ВладелецЭЦП
	Если Данные.ВладелецЭЦПГражданство = Справочники.СтраныМира.Россия Тогда
		ПередаваемыйОбъект.ВладелецЭЦПГражданство     = "РОССИЯ";
	Иначе
		ПередаваемыйОбъект.ВладелецЭЦПГражданство     = СериализоватьСсылку(Данные.ВладелецЭЦПГражданство);
	КонецЕсли;
	ПередаваемыйОбъект.ВладелецЭЦПДатаВыдачиДокумента = Данные.ВладелецЭЦПДатаВыдачиДокумента;
	ПередаваемыйОбъект.ВладелецЭЦПДатаРождения        = Данные.ВладелецЭЦПДатаРождения;
	ПередаваемыйОбъект.ВладелецЭЦПИмя                 = Данные.ВладелецЭЦПИмя;
	ПередаваемыйОбъект.ВладелецЭЦПКемВыданДокумент    = Данные.ВладелецЭЦПКемВыданДокумент;
	ПередаваемыйОбъект.ВладелецЭЦПКодПодразделения    = Данные.ВладелецЭЦПКодПодразделения;
	ПередаваемыйОбъект.ВладелецЭЦПМестоРождения       = Данные.ВладелецЭЦПМестоРождения;
	ПередаваемыйОбъект.ВладелецЭЦПНомерДокумента      = Данные.ВладелецЭЦПНомерДокумента;
	ПередаваемыйОбъект.ВладелецЭЦПОтчество            = Данные.ВладелецЭЦПОтчество;
	ПередаваемыйОбъект.ВладелецЭЦППол                 = ИмяЗначенияПеречисления(Данные.ВладелецЭЦППол);
	ПередаваемыйОбъект.ВладелецЭЦПСерияДокумента      = Данные.ВладелецЭЦПСерияДокумента;
	ПередаваемыйОбъект.ВладелецЭЦПСНИЛС               = Данные.ВладелецЭЦПСНИЛС;
	ПередаваемыйОбъект.ВладелецЭЦПФамилия             = Данные.ВладелецЭЦПФамилия;
	ПередаваемыйОбъект.ИНН                            = Данные.ИНН;
	ПередаваемыйОбъект.КодНалоговогоОрганаЭДО         = Данные.КодНалоговогоОрганаЭДО;
	ПередаваемыйОбъект.НастройкаЗавершена             = Данные.НастройкаЗавершена;
	ПередаваемыйОбъект.ОГРН                           = Данные.ОГРН;
	ПередаваемыйОбъект.РегНомерПФР                    = Данные.РегНомерПФР;
	ПередаваемыйОбъект.РегНомерФСС                    = Данные.РегНомерФСС;
	ПередаваемыйОбъект.Статус                         = ИмяЗначенияПеречисления(Данные.Статус);
	ПередаваемыйОбъект.СтатусКомментарий              = Данные.СтатусКомментарий;
	ПередаваемыйОбъект.ТелефонМобильныйДляАвторизации = Данные.ТелефонМобильныйДляАвторизации;
	ПередаваемыйОбъект.ТипЗаявления                   = ИмяЗначенияПеречисления(Данные.ТипЗаявления);
	ПередаваемыйОбъект.ЭлектроннаяПочта               = Данные.ЭлектроннаяПочта;
	ПередаваемыйОбъект.ЭлектроннаяПочтаАутентификация = Данные.ЭлектроннаяПочтаАутентификация;
	
	ПередаваемыйОбъект.ДатаОтправкиЗаявления          = Данные.ДатаОтправкиЗаявления;
	ПередаваемыйОбъект.ДатаПолученияОтвета            = Данные.ДатаПолученияОтвета;
	ПередаваемыйОбъект.ДатаСозданияУчетнойЗаписи      = Данные.ДатаСозданияУчетнойЗаписи;
	
	Для Каждого СтрокаТЧ Из Данные.Получатели Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ЗаявлениеАбонентаСпецоператораСвязи.Получатели");
		ПередаваемаяСтрокаТЧ.ТипПолучателя = ИмяЗначенияПеречисления(СтрокаТЧ.ТипПолучателя);
		ПередаваемаяСтрокаТЧ.КодПолучателя = СтрокаТЧ.КодПолучателя;
		ПередаваемыйОбъект.Получатели.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПлатежноеПоручение(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПлатежноеПоручение");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации = ИмяЗначенияПеречисления(Данные.ВидОперации);
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
	КонецЕсли;
	ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента = СериализоватьСсылку(Данные.СчетКонтрагента);
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	ПередаваемыйОбъект.СтавкаНДС       = ИмяЗначенияПеречисления(Данные.СтавкаНДС);
	ПередаваемыйОбъект.СуммаНДС        = Данные.СуммаНДС;
	ПередаваемыйОбъект.КодОКАТО        = Данные.КодОКАТО;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		ПередаваемыйОбъект.ПлатежнаяВедомость = СериализоватьСсылку(Данные.ПлатежнаяВедомость);
	КонецЕсли;
	
	ПередаваемыйОбъект.НазначениеПлатежа = Данные.НазначениеПлатежа;
	
	Если СтруктураПараметров.ВерсияСхемы >= 12 Тогда
		ПередаваемыйОбъект.КодВыплат     = Данные.КодВыплат;
		ПередаваемыйОбъект.КодВидаДохода = Данные.КодВидаДохода;
	КонецЕсли;
	
	Если Данные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		Или Данные.ПеречислениеВБюджет И ЗначениеЗаполнено(Данные.СтатусСоставителя) Тогда
		ОписаниеВидаНалога = ОписаниеВидаНалога(Данные.Налог, Данные.ВидНалоговогоОбязательства, СтруктураПараметров.ВерсияСхемы);
		Если ЗначениеЗаполнено(ОписаниеВидаНалога.ВидНалога) Тогда
			ПередаваемыйОбъект.ВидНалога = ОписаниеВидаНалога.ВидНалога;
		ИначеЕсли СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ВидНалога = "ПрочиеНалогиИСборы";
		КонецЕсли;
		Если СтруктураПараметров.ВерсияСхемы >= 1 Тогда
			ПередаваемыйОбъект.ВидНалоговогоОбязательства = ОписаниеВидаНалога.ВидНалоговогоОбязательства;
		КонецЕсли;
		
		ПередаваемыйОбъект.КодБК                = Данные.КодБК;
		ПередаваемыйОбъект.ИдентификаторПлатежа = Данные.ИдентификаторПлатежа;
		ПередаваемыйОбъект.СтатусСоставителя    = Данные.СтатусСоставителя;
		ПередаваемыйОбъект.ПоказательОснования  = Данные.ПоказательОснования;
		ПередаваемыйОбъект.ПоказательНомера     = Данные.ПоказательНомера;
		ПередаваемыйОбъект.ПоказательДаты       = Данные.ПоказательДаты;
		ПередаваемыйОбъект.ПоказательТипа       = Данные.ПоказательТипа;
		ПередаваемыйОбъект.ПоказательПериода    = Данные.ПоказательПериода;
		ПередаваемыйОбъект.ОчередностьПлатежа   = Данные.ОчередностьПлатежа;
		
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ВидПеречисленияВБюджет = ИмяЗначенияПеречисления(Данные.ВидПеречисленияВБюджет);
		КонецЕсли;
		
		Год   = 0;
		Месяц = 1;
		
		ВидПериода = Лев(Данные.ПоказательПериода, 3);
		Если ВидПериода = "ГД."
			ИЛИ ВидПериода = "КВ." Тогда
			ТекстГод = Сред(Данные.ПоказательПериода, 7);
			Если СтрДлина(ТекстГод) = 4
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстГод, Истина, Ложь) 
				И Лев(ТекстГод, 2) = "20" Тогда
				Год = Число(ТекстГод);
			КонецЕсли;
			Если ВидПериода = "КВ." Тогда
				ТекстКвартал = Сред(Данные.ПоказательПериода, 4, 2);
				Если СтрДлина(ТекстКвартал) = 2
					И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстКвартал, Истина, Ложь) Тогда 
					Месяц = Число(ТекстКвартал) * 3 - 2;
				КонецЕсли;
			КонецЕсли;
			Если ВидПериода = "ГД." И ПередаваемыйОбъект.ВидНалога = "УСН_Доходы" Тогда
				Месяц = 10;
			КонецЕсли;
		ИначеЕсли ВидПериода = "МС." Тогда
			// Строка вида "МС.мм.гггг"
			//              1234567890
			ТекстГод = Сред(Данные.ПоказательПериода, 7);
			Если СтрДлина(ТекстГод) = 4
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстГод, Истина, Ложь) 
				И Лев(ТекстГод, 2) = "20" Тогда
				Год = Число(ТекстГод);
			КонецЕсли;
			ТекстМесяц = Сред(Данные.ПоказательПериода, 4, 2);
			Если СтрДлина(ТекстМесяц) = 2
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстМесяц, Истина, Ложь) Тогда 
				Месяц = Число(ТекстМесяц);
			КонецЕсли;
		КонецЕсли;
		Если Год > 0 И Месяц <= 12 Тогда
			ПередаваемыйОбъект.ПериодНачисления = Дата(Год, Месяц, 1);
		ИначеЕсли ПередаваемыйОбъект.ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ" Тогда
			// Для страховых взносов ФСС НС по умолчанию считаем за месяц, предшествующий дате платежного поручения.
			ПередаваемыйОбъект.ПериодНачисления = ДобавитьМесяц(НачалоМесяца(Данные.Дата), -1);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = ДокументЗапрещеноРедактироватьВМобильномПриложении(Данные);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПоступлениеНаРасчетныйСчет(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПоступлениеНаРасчетныйСчет");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	Если Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ПередаваемыйОбъект.ВидОперации = "ОплатаЧерезПосредника";
	Иначе
		ПередаваемыйОбъект.ВидОперации = ИмяЗначенияПеречисления(Данные.ВидОперации);
	КонецЕсли;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(Данные.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
	КонецЕсли;
	ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента = СериализоватьСсылку(Данные.СчетКонтрагента);
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	СуммаКомиссии                      = 0;
	Если Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		СуммаКомиссии = Макс(Данные.СуммаУслуг, Данные.РасшифровкаПлатежа.Итог("СуммаУслуг"));
	КонецЕсли;
	ПередаваемыйОбъект.СуммаКомиссии   = СуммаКомиссии;
	
	ПередаваемыйОбъект.ДоходЕНВД = 0;
	ПередаваемыйОбъект.ДоходПатент = 0;
	ПередаваемыйОбъект.ДоходУСН = 0;
	Если ЗначениеЗаполнено(Данные.Патент) Тогда
		ПередаваемыйОбъект.ДоходПатент = Данные.СуммаДокумента + СуммаКомиссии;
		ПередаваемыйОбъект.Патент          = СериализоватьСсылку(Данные.Патент);
	ИначеЕсли Данные.РасшифровкаПлатежа.Найти(Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД, "ПорядокОтраженияАванса") <> Неопределено Тогда
		//ЕНВД только для операций с расшифровкой
		ПередаваемыйОбъект.ДоходЕНВД   = Данные.СуммаДокумента + СуммаКомиссии;
	ИначеЕсли (Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		ИЛИ Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
		И Данные.Графа5_УСН = 0
		И Данные.РасшифровкаПлатежа.Найти(Перечисления.ПорядокОтраженияАвансов.ДоходУСН, "ПорядокОтраженияАванса") <> Неопределено Тогда
		ПередаваемыйОбъект.ДоходУСН   = Данные.СуммаДокумента + СуммаКомиссии;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСН(Данные.Организация, Данные.Дата) Тогда
		ПередаваемыйОбъект.ДоходУСН        = Макс(Данные.Графа5_УСН, Данные.РасшифровкаПлатежа.Итог("ДоходыУСН"));
	КонецЕсли;
	
	ПередаваемыйОбъект.ДатаПлатежногоПоручения  = Данные.ДатаВходящегоДокумента;
	ПередаваемыйОбъект.НомерПлатежногоПоручения = Данные.НомерВходящегоДокумента;
	ПередаваемыйОбъект.НазначениеПлатежа        = Данные.НазначениеПлатежа;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПередаваемыйОбъект.СтавкаНДС       = ИмяЗначенияПеречисления(Данные.РасшифровкаПлатежа[0].СтавкаНДС);
			ПередаваемыйОбъект.СуммаНДС        = Данные.РасшифровкаПлатежа.Итог("СуммаНДС");
		КонецЕсли;
		
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = ДокументЗапрещеноРедактироватьВМобильномПриложении(Данные);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 6 И Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПередаваемыйОбъект.УслугаНПД = СериализоватьСсылку(Данные.РасшифровкаПлатежа[0].УслугаНПД);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПоступлениеТоваровУслуг(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		ВидОперации = "Товары";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		ВидОперации = "Услуги";
	Иначе
		Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПоступлениеТоваровУслуг");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации               = ВидОперации;
	ПередаваемыйОбъект.Организация               = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент                = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.Склад                     = СериализоватьСсылку(Данные.Склад);
		ПередаваемыйОбъект.ДоговорКонтрагента        = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.СуммаВключаетНДС          = Данные.СуммаВключаетНДС;
		ПередаваемыйОбъект.ДатаВходящегоДокумента    = Данные.ДатаВходящегоДокумента;
		ПередаваемыйОбъект.НомерВходящегоДокумента   = Данные.НомерВходящегоДокумента;
		
		РеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном(Данные.Ссылка);
		Если РеквизитыСФ <> Неопределено Тогда
			ПередаваемыйОбъект.ДатаСчетаФактуры    = РеквизитыСФ.ДатаСчетаФактуры;
			ПередаваемыйОбъект.НомерСчетаФактуры   = РеквизитыСФ.НомерСчетаФактуры;
		КонецЕсли;
	КонецЕсли; 
	ПередаваемыйОбъект.СуммаДокумента            = Данные.СуммаДокумента;
	
	Для Каждого СтрокаТЧ Из Данные.Товары Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			//Документы с расчетными ставками в МП не поддерживаются
			Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ПоступлениеТоваровУслуг.Товары");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СуммаНДС  = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СтавкаНДС = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		
		ПередаваемыйОбъект.Товары.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Данные.Услуги Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			//Документы с расчетными ставками в МП не поддерживаются
			Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
				Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("ПоступлениеТоваровУслуг.Услуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Содержание   = СтрокаТЧ.Содержание;
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СуммаНДС  = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СтавкаНДС = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
			ПередаваемаяСтрокаТЧ.ОтражениеВУСН = ИмяЗначенияПеречисления(СтрокаТЧ.ОтражениеВУСН);
			
			Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПередаваемаяСтрокаТЧ.СтатьяЗатрат = СериализоватьСсылку(СтрокаТЧ.Субконто1);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПередаваемаяСтрокаТЧ.СтатьяЗатрат = СериализоватьСсылку(СтрокаТЧ.Субконто2);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				ПередаваемаяСтрокаТЧ.СтатьяЗатрат = СериализоватьСсылку(СтрокаТЧ.Субконто3);
			КонецЕсли;
				
		КонецЕсли;
		
		ПередаваемыйОбъект.Услуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьПриходныйКассовыйОрдер(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.ВалютаДокумента <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПриходныйКассовыйОрдер");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации     = ИмяЗначенияПеречисления(Данные.ВидОперации);
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	Если Данные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.Контрагент);
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		ПередаваемыйОбъект.Контрагент = Неопределено;
	Иначе
		ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	ПередаваемыйОбъект.ДоходЕНВД   = 0;
	ПередаваемыйОбъект.ДоходПатент = 0;
	ПередаваемыйОбъект.ДоходУСН    = 0;
	Если ЗначениеЗаполнено(Данные.Патент) Тогда
		ПередаваемыйОбъект.ДоходПатент = Данные.СуммаДокумента;
		ПередаваемыйОбъект.Патент          = СериализоватьСсылку(Данные.Патент);
	ИначеЕсли Данные.РасшифровкаПлатежа.Найти(Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД, "ПорядокОтраженияАванса") <> Неопределено Тогда
		//ЕНВД только для операций с расшифровкой
		ПередаваемыйОбъект.ДоходЕНВД        = Данные.СуммаДокумента;
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя 
		И Данные.Графа5_УСН = 0
		И Данные.РасшифровкаПлатежа.Найти(Перечисления.ПорядокОтраженияАвансов.ДоходУСН, "ПорядокОтраженияАванса") <> Неопределено Тогда
		ПередаваемыйОбъект.ДоходУСН        = Данные.СуммаДокумента;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСН(Данные.Организация, Данные.Дата) Тогда
		ПередаваемыйОбъект.ДоходУСН        = Макс(Данные.Графа5_УСН, Данные.РасшифровкаПлатежа.Итог("ДоходыУСН"));
	КонецЕсли;
	
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	ПередаваемыйОбъект.Основание       = Данные.Основание;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПередаваемыйОбъект.СтавкаНДС       = ИмяЗначенияПеречисления(Данные.РасшифровкаПлатежа[0].СтавкаНДС);
			ПередаваемыйОбъект.СуммаНДС        = Данные.РасшифровкаПлатежа.Итог("СуммаНДС");
		КонецЕсли;
		
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = ДокументЗапрещеноРедактироватьВМобильномПриложении(Данные);
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 6 И Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПередаваемыйОбъект.УслугаНПД = СериализоватьСсылку(Данные.РасшифровкаПлатежа[0].УслугаНПД);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРасходныйКассовыйОрдер(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.ВалютаДокумента <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РасходныйКассовыйОрдер");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации = ИмяЗначенияПеречисления(Данные.ВидОперации);
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента = СериализоватьСсылку(Данные.СчетКонтрагента);
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	ПередаваемыйОбъект.Основание       = Данные.Основание;
	ПередаваемыйОбъект.КодОКАТО        = Данные.КодОКАТО;
	
	Если Данные.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ОписаниеВидаНалога = ОписаниеВидаНалога(Данные.Налог, Данные.ВидНалоговогоОбязательства, СтруктураПараметров.ВерсияСхемы);
		Если ЗначениеЗаполнено(ОписаниеВидаНалога.ВидНалога) Тогда
			ПередаваемыйОбъект.ВидНалога = ОписаниеВидаНалога.ВидНалога;
		ИначеЕсли НЕ СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ВидНалога = "ПрочиеНалогиИСборы";
		КонецЕсли;
		Если СтруктураПараметров.ВерсияСхемы >= 1 Тогда
			ПередаваемыйОбъект.ВидНалоговогоОбязательства = ОписаниеВидаНалога.ВидНалоговогоОбязательства;
		КонецЕсли;
		
		ПередаваемыйОбъект.КодБК                = Данные.КодБК;
		ПередаваемыйОбъект.ИдентификаторПлатежа = Данные.ИдентификаторПлатежа;
		ПередаваемыйОбъект.СтатусСоставителя    = Данные.СтатусСоставителя;
		ПередаваемыйОбъект.ПоказательОснования  = Данные.ПоказательОснования;
		ПередаваемыйОбъект.ПоказательНомера     = Данные.ПоказательНомера;
		ПередаваемыйОбъект.ПоказательДаты       = Данные.ПоказательДаты;
		ПередаваемыйОбъект.ПоказательТипа       = Данные.ПоказательТипа;
		ПередаваемыйОбъект.ПоказательПериода    = Данные.ПоказательПериода;
		
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ВидПеречисленияВБюджет = ИмяЗначенияПеречисления(Данные.ВидПеречисленияВБюджет);
		КонецЕсли;
		
		ПередаваемыйОбъект.ПериодНачисления = Данные.НалоговыйПериод;
	КонецЕсли;
	
	ЗапрещеноРедактироватьВМобильном = Ложь;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		// В мобильной бухгалтерии поддерживается только одна платежная ведомость для одного расходного кассового ордера.
		Если Данные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			Если ТипЗнч(Данные.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
				И ЗначениеЗаполнено(Данные.ПлатежнаяВедомость) Тогда
				ПередаваемыйОбъект.ПлатежнаяВедомость = СериализоватьСсылку(Данные.ПлатежнаяВедомость);
			Иначе
				ЗапрещеноРедактироватьВМобильном = Истина;
			КонецЕсли;
		ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			Если Данные.ВыплатаЗаработнойПлаты.Количество() = 1
				И ТипЗнч(Данные.ВыплатаЗаработнойПлаты[0].Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
				И ЗначениеЗаполнено(Данные.ВыплатаЗаработнойПлаты[0].Ведомость) Тогда
				ПередаваемыйОбъект.ПлатежнаяВедомость = СериализоватьСсылку(Данные.ВыплатаЗаработнойПлаты[0].Ведомость);
			Иначе
				ЗапрещеноРедактироватьВМобильном = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПередаваемыйОбъект.СтавкаНДС       = ИмяЗначенияПеречисления(Данные.РасшифровкаПлатежа[0].СтавкаНДС);
			ПередаваемыйОбъект.СуммаНДС        = Данные.РасшифровкаПлатежа.Итог("СуммаНДС");
		КонецЕсли;
		
		ПередаваемыйОбъект.ДоговорКонтрагента     = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = ЗапрещеноРедактироватьВМобильном ИЛИ ДокументЗапрещеноРедактироватьВМобильномПриложении(Данные);

	КонецЕсли;
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.РасходУСН = Данные.Графа7_УСН;
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 6 Тогда
		ПередаваемыйОбъект.НомерЧекаНПД  = Данные.НомерЧекаНПД;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРасходыНаОнлайнКассы(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.УменьшаемыйНалог <> Перечисления.ВидыНалоговУменьшаемыхНаРасходыККТ.ЕНВД Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РасходыНаОнлайнКассы");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация         = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Данные.РегистрацияВНалоговомОргане, "Код");
	
	ПередаваемыйОбъект.Модель               = Данные.Модель;
	ПередаваемыйОбъект.ЗаводскойНомер       = Данные.ЗаводскойНомер;
	ПередаваемыйОбъект.ДатаРегистрации      = Данные.ДатаРегистрации;
	ПередаваемыйОбъект.РегистрационныйНомер = Данные.РегистрационныйНомер;
	ПередаваемыйОбъект.СуммаДокумента       = Данные.СуммаДокумента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРеализацияТоваровУслуг(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если Данные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		ВидОперации = "Товары";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		ВидОперации = "Услуги";
	Иначе
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РеализацияТоваровУслуг");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации               = ВидОперации;
	ПередаваемыйОбъект.Организация               = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент                = СериализоватьСсылку(Данные.Контрагент);
	
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ЗапрещеноПечататьВМобильном = Ложь;
		
		ПередаваемыйОбъект.Склад                            = СериализоватьСсылку(Данные.Склад);
		ПередаваемыйОбъект.ДоговорКонтрагента               = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.СуммаВключаетНДС                 = Данные.СуммаВключаетНДС;
		
		//Проверим возможность редактирования и печати на стороне мобильного
		Если ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
			ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если ЗначениеЗаполнено(ВалютаДоговора) 
				И ВалютаДоговора <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = (ВалютаДоговора <> Данные.ВалютаДокумента);
				ЗапрещеноПечататьВМобильном      = (ВалютаДоговора <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			КонецЕсли;
		Конецесли;
		ПередаваемыйОбъект.ЗапрещеноПечататьВМобильном = ЗапрещеноПечататьВМобильном
					ИЛИ ЗначениеЗаполнено(Данные.Грузоотправитель)
					ИЛИ ЗначениеЗаполнено(Данные.Грузополучатель);
	КонецЕсли;
	ПередаваемыйОбъект.БанковскийСчетОрганизации = СериализоватьСсылку(Данные.БанковскийСчетОрганизации);
	ПередаваемыйОбъект.СчетНаОплатуПокупателю    = СериализоватьСсылку(Данные.СчетНаОплатуПокупателю);
	
	ПередаваемыйОбъект.СуммаДокумента            = Данные.СуммаДокумента;
	
	СтрокаДляАнализаСчетовУчета = Неопределено;
	Если Данные.Товары.Количество()> 0 Тогда
		СтрокаДляАнализаСчетовУчета = Данные.Товары[0];
	ИначеЕсли Данные.Услуги.Количество()> 0 Тогда
		СтрокаДляАнализаСчетовУчета = Данные.Услуги[0];
	КонецЕсли;
	
	Если Данные.ДеятельностьНаПатенте Тогда
		ПередаваемыйОбъект.ОтражениеДоходов = "ДоходПатент";
		ПередаваемыйОбъект.Патент = СериализоватьСсылку(Данные.Патент);
	ИначеЕсли СтрокаДляАнализаСчетовУчета <> Неопределено
		И СтрокаДляАнализаСчетовУчета.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД Тогда
		ПередаваемыйОбъект.ОтражениеДоходов = "ДоходЕНВД";
	Иначе
		Если УчетнаяПолитика.ПрименяетсяУСН(Данные.Организация, Данные.Дата) Тогда
			ПередаваемыйОбъект.ОтражениеДоходов = "ДоходУСН";
		Иначе
			ПередаваемыйОбъект.ОтражениеДоходов = "ДоходОСН";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Данные.Товары Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			//Документы с расчетными ставками в МП не поддерживаются
			Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
				Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РеализацияТоваровУслуг.Товары");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СуммаНДС     = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СтавкаНДС    = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		
		ПередаваемыйОбъект.Товары.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Данные.Услуги Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			//Документы с расчетными ставками в МП не поддерживаются
			Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
				Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РеализацияТоваровУслуг.Услуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Содержание   = СтрокаТЧ.Содержание;
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СуммаНДС     = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СтавкаНДС    = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		
		ПередаваемыйОбъект.Услуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРегламентированныйОтчет(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РегламентированныйОтчет");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	
	ПередаваемыйОбъект.КодНалоговогоОргана     = Данные.КодНалоговогоОргана;
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.КПП     = Данные.КПП;
	КонецЕсли;
	
	ПередаваемыйОбъект.ВидОтчета     = Данные.ИсточникОтчета;
	ПередаваемыйОбъект.ДатаНачала    = Данные.ДатаНачала;
	ПередаваемыйОбъект.ДатаОкончания = Данные.ДатаОкончания;
	ПередаваемыйОбъект.ДатаПодписи   = Данные.ДатаПодписи;
	Если СтруктураПараметров.ВерсияСхемы >= 1 Тогда
		ПередаваемыйОбъект.Вид           = Данные.Вид;
	КонецЕсли;
	Если СтруктураПараметров.ВерсияСхемы >= 2 Тогда
		ПередаваемыйОбъект.ПредставлениеПериода = Данные.ПредставлениеПериода;
	КонецЕсли;
	
	СохраненныеДанныеРеглОтчета = Данные.ДанныеОтчета.Получить();
	
	ДанныеОтчетаДляПередачи = ПреобразоватьДанныеРеглОтчетаБРОДляМП(Данные.ИсточникОтчета,
		Данные.ВыбраннаяФорма, СохраненныеДанныеРеглОтчета);
	
	ПередаваемыйОбъект.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчетаДляПередачи, Новый СжатиеДанных(9));
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСведенияОЗастрахованныхЛицахСЗВ_М(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СведенияОЗастрахованныхЛицахСЗВ_М");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.ОтчетныйПериод  = Данные.ОтчетныйПериод;
	ПередаваемыйОбъект.ТипФормы        = ИмяЗначенияПеречисления(Данные.ТипФормы);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСписаниеСРасчетногоСчета(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СписаниеСРасчетногоСчета");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.НеПодтвержденоВыпискойБанка = Данные.НеПодтвержденоВыпискойБанка;
	
	ПередаваемыйОбъект.ВидОперации     = ИмяЗначенияПеречисления(Данные.ВидОперации);
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
	КонецЕсли;
	ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента = СериализоватьСсылку(Данные.СчетКонтрагента);
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	ПередаваемыйОбъект.ДатаПлатежногоПоручения  = Данные.ДатаВходящегоДокумента;
	ПередаваемыйОбъект.НомерПлатежногоПоручения = Данные.НомерВходящегоДокумента;
	ПередаваемыйОбъект.НазначениеПлатежа        = Данные.НазначениеПлатежа;
	
	ДокументОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Данные.Ссылка, Данные.ДокументОснование, Данные.ВидОперации, Данные.Проведен);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПередаваемыйОбъект.ДокументОснование = СериализоватьСсылку(ДокументОснование);
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 2
		И Данные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		И ТипЗнч(Данные.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ПередаваемыйОбъект.ПлатежнаяВедомость = СериализоватьСсылку(Данные.ПлатежнаяВедомость);
	КонецЕсли;
	
	Если Данные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ОписаниеВидаНалога = ОписаниеВидаНалога(Данные.Налог, Данные.ВидНалоговогоОбязательства, СтруктураПараметров.ВерсияСхемы);
		Если ЗначениеЗаполнено(ОписаниеВидаНалога.ВидНалога) Тогда
			ПередаваемыйОбъект.ВидНалога = ОписаниеВидаНалога.ВидНалога;
		ИначеЕсли НЕ СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемыйОбъект.ВидНалога = "ПрочиеНалогиИСборы";
		КонецЕсли;
		Если СтруктураПараметров.ВерсияСхемы >= 1 Тогда
			ПередаваемыйОбъект.ВидНалоговогоОбязательства = ОписаниеВидаНалога.ВидНалоговогоОбязательства;
		КонецЕсли;
		ПередаваемыйОбъект.ПериодНачисления = Данные.НалоговыйПериод;
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПередаваемыйОбъект.СтавкаНДС = ИмяЗначенияПеречисления(Данные.РасшифровкаПлатежа[0].СтавкаНДС);
			ПередаваемыйОбъект.СуммаНДС  = Данные.РасшифровкаПлатежа.Итог("СуммаНДС");
		КонецЕсли;
		
		ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = ДокументЗапрещеноРедактироватьВМобильномПриложении(Данные);
		
	КонецЕсли;
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.РасходУСН = Данные.Графа7_УСН;
	КонецЕсли;
	
	Если СтруктураПараметров.ВерсияСхемы >= 6 Тогда
		ПередаваемыйОбъект.НомерЧекаНПД  = Данные.НомерЧекаНПД;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСчетНаОплатуПокупателю(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СчетНаОплатуПокупателю");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ТаблицаТовары = Данные.Товары.Выгрузить();
	
	ЕстьСкидкаНаДокумент = (Данные.СуммаСкидки > 0);
	
	ПередаваемыйОбъект.Организация        = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент         = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ПередаваемыйОбъект.СуммаВключаетНДС   = Данные.СуммаВключаетНДС;
		
		Если ЕстьСкидкаНаДокумент Тогда
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Данные.СуммаСкидки, ТаблицаТовары, "СуммаСкидки", "Сумма");
		КонецЕсли; 
		
		//Проверим возможность редактирования и печати на стороне мобильного
		Если ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
			ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если ЗначениеЗаполнено(ВалютаДоговора) 
				И ВалютаДоговора <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				ПередаваемыйОбъект.ЗапрещеноРедактироватьВМобильном = (ВалютаДоговора <> Данные.ВалютаДокумента);
				ПередаваемыйОбъект.ЗапрещеноПечататьВМобильном      = (ВалютаДоговора <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			КонецЕсли;
		Конецесли;
	КонецЕсли;
	ПередаваемыйОбъект.БанковскийСчет     = СериализоватьСсылку(Данные.СтруктурнаяЕдиница);
	ПередаваемыйОбъект.СуммаДокумента     = Данные.СуммаДокумента;
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			//Документы с расчетными ставками в МП не поддерживаются
			Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
				Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("СчетНаОплатуПокупателю.ТоварыУслуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Содержание   = СтрокаТЧ.Содержание;
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СтавкаНДС     = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
			ПередаваемаяСтрокаТЧ.СуммаНДС      = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СуммаСкидки   = СтрокаТЧ.СуммаСкидки;
			Если ЕстьСкидкаНаДокумент И СтрокаТЧ.Сумма<>0 Тогда
				ПередаваемаяСтрокаТЧ.ПроцентСкидки = Окр(СтрокаТЧ.СуммаСкидки/СтрокаТЧ.Сумма * 100, 2);
			Иначе
				ПередаваемаяСтрокаТЧ.ПроцентСкидки = СтрокаТЧ.ПроцентСкидки;
			КонецЕсли;
		КонецЕсли;
		
		ПередаваемыйОбъект.ТоварыУслуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОтчетОРозничныхПродажах(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Склад)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Склад, "ТипСклада") = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РозничнаяПродажа");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
		ПередаваемыйОбъект.Склад           = СериализоватьСсылку(Данные.Склад);
	КонецЕсли; 
	ПередаваемыйОбъект.СуммаДокумента  = Данные.СуммаДокумента;
	
	Если Данные.ДеятельностьНаПатенте Тогда
		ПередаваемыйОбъект.ОтражениеДоходов = "ДоходПатент";
		ПередаваемыйОбъект.Патент          = СериализоватьСсылку(Данные.Патент);
	ИначеЕсли Данные.Товары.Количество()> 0
		И Данные.Товары[0].СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД Тогда
		ПередаваемыйОбъект.ОтражениеДоходов = "ДоходЕНВД";
	Иначе
		Если УчетнаяПолитика.ПрименяетсяУСН(Данные.Организация, Данные.Дата) Тогда
			ПередаваемыйОбъект.ОтражениеДоходов = "ДоходУСН";
		Иначе
			ПередаваемыйОбъект.ОтражениеДоходов = "ДоходОСН";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Данные.Товары Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РозничнаяПродажа.ТоварыУслуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Сумма        = ?(Данные.СуммаВключаетНДС, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС);
		ПередаваемаяСтрокаТЧ.Цена         = ?(Данные.СуммаВключаетНДС, СтрокаТЧ.Цена, 
			?(СтрокаТЧ.Количество <> 0, Окр(ПередаваемаяСтрокаТЧ.Сумма/ СтрокаТЧ.Количество, 2), ПередаваемаяСтрокаТЧ.Сумма));
		
		Если СтруктураПараметров.ВерсияСхемы >=5 Тогда
			ПередаваемаяСтрокаТЧ.СуммаНДС  = СтрокаТЧ.СуммаНДС;
			ПередаваемаяСтрокаТЧ.СтавкаНДС = ИмяЗначенияПеречисления(СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		
		ПередаваемыйОбъект.ТоварыУслуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	ВыгружатьДоговор = СтруктураПараметров.ВерсияСхемы >=5;
	
	ТаблицаОплат = ПолучитьТаблицуОплатДляВыгрузки(Данные.Ссылка);
	Для Каждого СтрокаТЧ Из ТаблицаОплат Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РозничнаяПродажа.Оплата");
		Если ВыгружатьДоговор Тогда
			ПередаваемаяСтрокаТЧ.ДоговорКонтрагента = СериализоватьСсылку(СтрокаТЧ.ДоговорКонтрагента);
		КонецЕсли;
		ПередаваемаяСтрокаТЧ.Контрагент = СериализоватьСсылку(СтрокаТЧ.Контрагент);
		ПередаваемаяСтрокаТЧ.Сумма      = СтрокаТЧ.Сумма;
		
		ПередаваемыйОбъект.Оплата.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьАктСверкиВзаиморасчетов(Данные, СтруктураПараметров)
		
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("АктСверкиВзаиморасчетов");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация       = СериализоватьСсылку(Данные.Организация);
	ПередаваемыйОбъект.Контрагент        = СериализоватьСсылку(Данные.Контрагент);
	Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
		ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
		ДокументВВалюте = Данные.ВалютаДокумента <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ПередаваемыйОбъект.ВалютаДокументаПредставление = ?( ДокументВВалюте, Строка(Данные.ВалютаДокумента), "");
		ПередаваемыйОбъект.ЗапрещеноПечататьВМобильном = ДокументВВалюте
			ИЛИ Данные.РазбитьПоДоговорам ИЛИ Данные.Расхождение <> 0;
	КонецЕсли;
	ПередаваемыйОбъект.ДатаНачала        = Данные.ДатаНачала;
	ПередаваемыйОбъект.ДатаОкончания     = Данные.ДатаОкончания;
	ПередаваемыйОбъект.ОстатокНаНачало   = Данные.ОстатокНаНачало;
	ПередаваемыйОбъект.СверкаСогласована = Данные.СверкаСогласована;
	
	Для каждого СтрокаДокумента Из Данные.ПоДаннымОрганизации Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("АктСверкиВзаиморасчетов.ПоДаннымОрганизации");
		ПередаваемаяСтрокаТЧ.Дата          = СтрокаДокумента.Дата;
		ПередаваемаяСтрокаТЧ.Дебет         = СтрокаДокумента.Дебет;
		ПередаваемаяСтрокаТЧ.Кредит        = СтрокаДокумента.Кредит;
		ПередаваемаяСтрокаТЧ.Представление = СтрокаДокумента.Представление;
		ПередаваемаяСтрокаТЧ.Документ      = СериализоватьСсылку(СтрокаДокумента.Документ);
		Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			ПередаваемаяСтрокаТЧ.ДокументТип   = СтрокаДокумента.Документ.Метаданные().Имя;
		КонецЕсли;
		
		Если СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ПередаваемаяСтрокаТЧ.Договор = СериализоватьСсылку(СтрокаДокумента.Договор);
		КонецЕсли;
		
		ПередаваемыйОбъект.ПоДаннымОрганизации.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОплатаПлатежнойКартой(Данные, СтруктураПараметров)
	Перем ВидОплатыЯндексКасса;
	
	Если НЕ СтруктураПараметров.Свойство("ВидОперацииОплатаПлатежнойКартой", ВидОплатыЯндексКасса)
		ИЛИ НЕ ЗначениеЗаполнено(ВидОплатыЯндексКасса) 
		ИЛИ ВидОплатыЯндексКасса <> Данные.ВидОплаты Тогда
	
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки Тогда
		Если СтруктураПараметров.ВерсияСхемы >= 7 Тогда
			Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ОплатаПлатежнойКартой");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(Данные.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.ДоговорКонтрагента = СериализоватьСсылку(Данные.ДоговорКонтрагента);
	ПередаваемыйОбъект.Сумма           = Данные.СуммаДокумента;
	
	Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПередаваемыйОбъект.УслугаНПД = СериализоватьСсылку(Данные.РасшифровкаПлатежа[0].УслугаНПД);
	КонецЕсли; 
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьУведомлениеОСпецрежимахНалогообложения(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация
		ИЛИ Данные.Дата < СтруктураПараметров.ДатаНачалаВыгрузки
		ИЛИ Данные.ВидУведомления <> Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы Тогда
		Возврат ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("УведомлениеОСпецрежимахНалогообложения");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.ДатаПодписи     = Данные.ДатаПодписи;
	
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.РегистрацияВИФНС, "Код");
	ПередаваемыйОбъект.КодНалоговогоОргана = КодИФНС;
	ПередаваемыйОбъект.ИмяОтчета           = Данные.ИмяОтчета;
	ПередаваемыйОбъект.ИмяФормы            = Данные.ИмяФормы;
	
	ДанныеУведомления = ПреобразоватьДанныеУведомленияБРОДляМБ(Данные.ИмяОтчета,
		Данные.ИмяФормы, Данные.ДанныеУведомления.Получить());
	
	ПередаваемыйОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеУведомления, Новый СжатиеДанных(9));
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

Функция ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("УдалениеОбъекта");
	ПередаваемыйОбъект.Ссылка = СериализоватьСсылку(Данные.Ссылка);
	
	// Справочники
	Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Банки") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Банк";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "БанковскийСчет";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ВидыДеятельностиЕНВД") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ВидДеятельностиЕНВД";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ДоговорКонтрагента";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Должности") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Должности";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ДополнительныеУсловия") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ДополнительныеУсловия";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ЕдиницаИзмерения";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Контрагент";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "НастройкаОбменаСБанками";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Номенклатура";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Организации")
		И Данные.Ссылка <> СтруктураПараметров.Организация Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Организация";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ОрганизацииПрисоединенныеФайлы") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПрисоединенныйФайлОрганизация";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ФизическиеЛицаПрисоединенныеФайлы") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ФизическиеЛицаПрисоединенныеФайлы";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Патенты") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Патент";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Сотрудники") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Сотрудники";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СтатьиЗатрат";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтраныМира") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СтранаМира";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ФизическиеЛица";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Склады") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Склады";
	
	// Документы
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ВводНачальныхОстатков";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ВедомостьНаВыплатуЗарплатыВБанк";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ВедомостьНаВыплатуЗарплатыВКассу";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаписьКУДиР") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ЗаписьКУДиР";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ЗаявлениеАбонентаСпецоператораСвязи";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "НачислениеЗарплаты";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "БольничныйЛист";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.Отпуск") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Отпуск";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РозничнаяПродажа";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПлатежноеПоручение";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПриходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РасходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходыНаОнлайнКассыУменьшающиеНалоги") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РасходыНаОнлайнКассы";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РеализацияТоваровУслуг";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РегламентированныйОтчет";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СведенияОЗастрахованныхЛицахСЗВ_М";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СписаниеСРасчетногоСчета";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СчетНаОплатуПокупателю";
	Иначе
		ПередаваемыйОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиПриложения(СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильнаяБухгалтерияНастройкиПриложения.НастройкиПриложения КАК НастройкиПриложения
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия.НастройкиПриложения КАК МобильнаяБухгалтерияНастройкиПриложения
	|ГДЕ
	|	МобильнаяБухгалтерияНастройкиПриложения.Организация = &Организация
	|	И МобильнаяБухгалтерияНастройкиПриложения.Ссылка.ЭтотУзел";
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Настройки = Запрос.Выполнить().Выбрать();
	
	Если Настройки.Следующий() Тогда
		
		ЗначенияНастроек = Настройки.НастройкиПриложения.Получить();
		Если ТипЗнч(ЗначенияНастроек) = Тип("Структура") Тогда
			
			ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщиеНастройки");
			ПередаваемыйОбъект.Значение = Настройки.НастройкиПриложения;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиПользователя(СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МобильнаяБухгалтерияНастройкиПользователя.НастройкиПользователя КАК НастройкиПользователя
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия.НастройкиПользователя КАК МобильнаяБухгалтерияНастройкиПользователя
	|ГДЕ
	|	МобильнаяБухгалтерияНастройкиПользователя.Пользователь = &Пользователь
	|	И МобильнаяБухгалтерияНастройкиПользователя.Ссылка.ЭтотУзел";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Настройки = Запрос.Выполнить().Выбрать();
	
	Если Настройки.Следующий() Тогда
	
		ЗначенияНастроек = Настройки.НастройкиПользователя.Получить();
		Если ТипЗнч(ЗначенияНастроек) = Тип("Структура") Тогда
			//Выгружаем тем же объектом, что и ОбщиеНастройки, для обратной совместимости
			ПередаваемыйОбъект = СоздатьОбъектXDTO("ОбщиеНастройки");
			ПередаваемыйОбъект.Значение = Настройки.НастройкиПользователя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьАдресБазыСообщений()
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("БазаСообщений");
	ПередаваемыйОбъект.АдресБазыСообщений = "";
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПрефиксУзла(СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПрефиксПриложения");
	ПередаваемыйОбъект.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.УзелОбмена, "Префикс");
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Процедура ПриИзмененииВерсииСхемы(СтруктураПараметров)
	
	ТекущаяВерсияСхемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.УзелОбмена, "ВерсияСхемы");
	Если СтруктураПараметров.ВерсияСхемы = ТекущаяВерсияСхемы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВесьСписокЗадач = Ложь;
	
	Если НЕ СтруктураПараметров.ПерваяСинхронизация Тогда
		Если ТекущаяВерсияСхемы < 5 И СтруктураПараметров.ВерсияСхемы >= 5 Тогда
			ВыполнитьПереходКУчетуПоДоговорамКонтрагентов(СтруктураПараметров);
			ПолучитьДанныеДокументовПоступления(СтруктураПараметров);
			ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.Справочники.СтатьиЗатрат);
			ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.Справочники.Склады);
			
			Отбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Метаданные.РегистрыСведений.ЗадачиБухгалтера);
			ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(СтруктураПараметров, Отбор);
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Организация = &Организация
				|	И ПоступлениеТоваровУслуг.Дата >= &ДатаНачалаВыгрузки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|ГДЕ
				|	РеализацияТоваровУслуг.Организация = &Организация
				|	И РеализацияТоваровУслуг.Дата >= &ДатаНачалаВыгрузки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОтчетОРозничныхПродажах.Ссылка
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
				|ГДЕ
				|	ОтчетОРозничныхПродажах.Организация = &Организация
				|	И ОтчетОРозничныхПродажах.Дата >= &ДатаНачалаВыгрузки";
				Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", СтруктураПараметров.ДатаНачалаВыгрузки);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.Ссылка);
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	
		Если ТекущаяВерсияСхемы < 9 И СтруктураПараметров.ВерсияСхемы >= 9 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
		КонецЕсли;
		
		Если ТекущаяВерсияСхемы < 10 И СтруктураПараметров.ВерсияСхемы >= 10 Тогда
			ОбновитьВесьСписокЗадач = Истина;
		КонецЕсли;
		
		Если ТекущаяВерсияСхемы < 14 И СтруктураПараметров.ВерсияСхемы >= 14 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛицаПрисоединенныеФайлы.Ссылка КАК Ссылка,
			|	ФизическиеЛицаПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	Справочник.ФизическиеЛицаПрисоединенныеФайлы КАК ФизическиеЛицаПрисоединенныеФайлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ПО ФизическиеЛицаПрисоединенныеФайлы.ВладелецФайла = ФизическиеЛица.Ссылка
			|			И ФизическиеЛицаПрисоединенныеФайлы.Ссылка = ФизическиеЛица.ФаксимилеПодписи
			|ГДЕ
			|	НЕ ФизическиеЛицаПрисоединенныеФайлы.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.Ссылка);
				ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.ВладелецФайла);
			КонецЦикла;
		
		КонецЕсли;
		
		Если (ТекущаяВерсияСхемы < 10 И СтруктураПараметров.ВерсияСхемы >= 10)
				ИЛИ (ТекущаяВерсияСхемы < 15 И СтруктураПараметров.ВерсияСхемы >= 15) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов);
		КонецЕсли;
		
		Если ТекущаяВерсияСхемы < 15 И СтруктураПараметров.ВерсияСхемы >= 15 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Патенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Патенты КАК Патенты
			|ГДЕ
			|	Патенты.СуммаОсвобожденияОтНалога <> 0
			|	И Патенты.Владелец = &Организация";
			Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.Ссылка);
			КонецЦикла;
		
		КонецЕсли;
		
		Если ТекущаяВерсияСхемы < 16 И СтруктураПараметров.ВерсияСхемы >= 16 Тогда
			
			Если Справочники.Патенты.ПатентыОрганизации(СтруктураПараметров.Организация, Дата(2021,1,1)).Количество()> 0 Тогда;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Уведомления.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.УведомлениеОСпецрежимахНалогообложения КАК Уведомления
				|ГДЕ
				|	Уведомления.ВидУведомления = &ВидУведомления
				|	И Уведомления.Организация = &Организация";
				Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				Запрос.УстановитьПараметр("ВидУведомления",
					Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.Ссылка);
				КонецЦикла;
				
				ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.РегистрыСведений.УменьшениеНалогаПСНнаСтраховыеВзносы);
				
				ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Метаданные.РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы);
				
			КонецЕсли;
				
				
		КонецЕсли;

		
	КонецЕсли;
	
	УзелОбменаОбъект = СтруктураПараметров.УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.ВерсияСхемы           = СтруктураПараметров.ВерсияСхемы;
	УзелОбменаОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбменаОбъект.Записать();
	
	//Потеницально долгие обработчики, которые могут превысить время таймаута соединения вынесем после основных обработчиков
	Если ОбновитьВесьСписокЗадач Тогда
		//обновим весь список задач
		ОбновитьЗадачи(СтруктураПараметров.Организация, 90, Ложь);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеМетоды

Процедура ЗаписатьРегистрациюВНалоговомОргане(РегистрацияВНалоговомОргане, Организация, ДанныеРегистрацииВНалоговомОргане)
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияОбъект = РегистрацияВНалоговомОргане.ПолучитьОбъект();
		
	Иначе
		
		РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
			ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
	
		РегистрацияОбъект.Владелец         = Организация;
		РегистрацияОбъект.Код              = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		РегистрацияОбъект.КодРегиона       = Лев(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана, 2);
		
		Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
			РегистрацияОбъект.Наименование     = РеквизитыНалоговогоОргана.Наименование;
			РегистрацияОбъект.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
		Иначе
			РегистрацияОбъект.Наименование     = "Налоговый орган "+ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
			РегистрацияОбъект.НаименованиеИФНС = "Налоговый орган "+ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		КонецЕсли;
		
	КонецЕсли;
	
	//Вместе с декларацией не приходит КодОКТМО
	Если ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО <> Неопределено Тогда
		РегистрацияОбъект.КодПоОКТМО       = ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО;
	КонецЕсли;
	
	РегистрацияОбъект.КПП                  = ДанныеРегистрацииВНалоговомОргане.КПП;
	
	РегистрацияОбъект.ОбменДанными.Загрузка = Истина;
	РегистрацияОбъект.Записать();
	
	РегистрацияВНалоговомОргане = РегистрацияОбъект.Ссылка;
	
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВОрганеПФР(ОрганизацияОбъект)
	
	Ссылка = ?(ОрганизацияОбъект.Ссылка.Пустая(), ОрганизацияОбъект.ПолучитьСсылкуНового(), ОрганизацияОбъект.Ссылка);
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодОрганаПФР) Тогда
		
		РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(
			Лев(ОрганизацияОбъект.КодОрганаПФР, 3));
		
		Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.Наименование) Тогда
			ОрганизацияОбъект.НаименованиеТерриториальногоОрганаПФР = РеквизитыОтделенияПФР.Наименование;
		Иначе
			ОрганизацияОбъект.НаименованиеТерриториальногоОрганаПФР = 
				СтрШаблон("Территориальный орган ПФР %1", ОрганизацияОбъект.КодОрганаПФР);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.РегистрационныйНомерПФР) Тогда
		ДатаЗаписиРегистрации = ДатаЗаписиРегистрацииПФР(Ссылка);
		
		// История регистраций в органе ПФР.
		НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(ДатаЗаписиРегистрации);
		
		СтрокаНабораЗаписей = НаборЗаписей.Добавить();
		СтрокаНабораЗаписей.Период                  = ДатаЗаписиРегистрации;
		СтрокаНабораЗаписей.Организация             = Ссылка;
		СтрокаНабораЗаписей.РегистрационныйНомерПФР = ОрганизацияОбъект.РегистрационныйНомерПФР;
		
		Если ДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей) Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаЗаписиРегистрацииПФР(Организация)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ДатаПоследнейЗаписи = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.ДатаОтсчетаПериодическихСведений();
	
	Запрос.УстановитьПараметр("ДатаОтсчетаПериодическихСведений", ДатаПоследнейЗаписи);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ИсторияРегистрацийВОрганеПФР.Период), &ДатаОтсчетаПериодическихСведений) КАК Период
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	|ГДЕ
	|	ИсторияРегистрацийВОрганеПФР.Организация = &Организация";
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультата.Следующий() Тогда
		ДатаПоследнейЗаписи = ВыборкаРезультата.Период;
	КонецЕсли;
	
	Возврат ДатаПоследнейЗаписи;
КонецФункции
 

Процедура ЗаписатьРегистрациюВОрганеФСС(ОрганизацияОбъект)

	Если НЕ ЗначениеЗаполнено(ОрганизацияОбъект.КодПодчиненностиФСС) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(ОрганизацияОбъект.КодПодчиненностиФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС) Тогда
		ОрганизацияОбъект.НаименованиеТерриториальногоОрганаФСС = РеквизитыОтделенияФСС.Наименование;
	Иначе
		ОрганизацияОбъект.НаименованиеТерриториальногоОрганаФСС = 
			СтрШаблон("Территориальный орган ФСС %1", Лев(ОрганизацияОбъект.КодПодчиненностиФСС, 4));
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьУстановитьУчетнуюПолитикуПоУмолчанию(Организация, Дата)
	
	Если НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Дата) = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Организация", Организация);
		ДанныеЗаполнения.Вставить("Период", НачалоГода(Дата));
		
		ДанныеЗаполнения.Вставить("ВариантБухгалтерскойОтчетности", Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий);
		ДанныеЗаполнения.Вставить("СистемаНалогообложения",         Перечисления.СистемыНалогообложения.Упрощенная);
		ДанныеЗаполнения.Вставить("ОбъектНалогообложенияУСН",       Перечисления.ОбъектыНалогообложенияПоУСН.Доходы);
		
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУчетнуюПолитику(Организация, НастройкиУчетнойПолитики)
	
	НастройкиСистемыНалогообложения = Неопределено;
	Если НастройкиУчетнойПолитики.Свойство("НастройкиСистемыНалогообложения", НастройкиСистемыНалогообложения) Тогда
		
		Для каждого НастройкаСистемыНалогообложения Из НастройкиСистемыНалогообложения Цикл
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Организация", Организация);
			ДанныеЗаполнения.Вставить("Период",                         НастройкаСистемыНалогообложения.Период);
			ДанныеЗаполнения.Вставить("ПлательщикНДС",                  НастройкаСистемыНалогообложения.ПлательщикНДС);
			ДанныеЗаполнения.Вставить("ВариантБухгалтерскойОтчетности", Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий);
			Если НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходы ИЛИ НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы Тогда
				ДанныеЗаполнения.Вставить("СистемаНалогообложения",           Перечисления.СистемыНалогообложения.Упрощенная);
				Если НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходы Тогда
					ДанныеЗаполнения.Вставить("ОбъектНалогообложенияУСН",         Перечисления.ОбъектыНалогообложенияПоУСН.Доходы);
				ИначеЕсли НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы Тогда 
					ДанныеЗаполнения.Вставить("ОбъектНалогообложенияУСН",         Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы);
				КонецЕсли; 
				ДанныеЗаполнения.Вставить("ПрименяетсяУСНДоходы",             НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходы);
				ДанныеЗаполнения.Вставить("ПрименяетсяУСНДоходыМинусРасходы", НастройкаСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы);
			ИначеЕсли НастройкаСистемыНалогообложения.ПрименяетсяОсобыйПорядокНалогообложения Тогда 
				ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.ОсобыйПорядок);
			ИначеЕсли НастройкаСистемыНалогообложения.ПрименяетсяНалогНаПрофессиональныйДоход Тогда 
				ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход);
			Иначе
				ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.Общая);
			КонецЕсли; 
			ДанныеЗаполнения.Вставить("ДатаИзменения",        НастройкаСистемыНалогообложения.ДатаИзменения);
			ДанныеЗаполнения.Вставить("ПлательщикЕНВД",       НастройкаСистемыНалогообложения.ПлательщикЕНВД);
			ДанныеЗаполнения.Вставить("ПрименяетсяУСНПатент", НастройкаСистемыНалогообложения.ПрименяетсяУСНПатент);
			
			КлючЗаписиНовойУчетнойПолитики       = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, НастройкаСистемыНалогообложения.Период);
			КлючЗаписиДействующейУчетнойПолитики = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация);
			
			Если ЗначениеЗаполнено(НастройкаСистемыНалогообложения.ИсходнаяДата) Тогда
				КлючЗаписиИсходнойУчетнойПолитики = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, НастройкаСистемыНалогообложения.ИсходнаяДата);
			Иначе
				КлючЗаписиИсходнойУчетнойПолитики = Неопределено;
			КонецЕсли;
			
			ЕстьУчетнаяПолитикаНаНовуюДату    = КлючЗаписиНовойУчетнойПолитики <> Неопределено И (КлючЗаписиНовойУчетнойПолитики.Период = НастройкаСистемыНалогообложения.Период);
			ЕстьУчетнаяПолитикаНаИсходнуюДату = КлючЗаписиИсходнойУчетнойПолитики <>  Неопределено И КлючЗаписиИсходнойУчетнойПолитики.Период = НастройкаСистемыНалогообложения.ИсходнаяДата;
			
			Если ЕстьУчетнаяПолитикаНаНовуюДату Тогда
				// Если на новую дату есть учетная политика, то перезапишем ее (при этом неважно новая она или старая)
				НаборЗаписей = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					РегистрыСведений.НастройкиСистемыНалогообложения.УстановкаНастроекПоУмолчанию(НаборЗаписей[0], ДанныеЗаполнения);
					Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаИзменения) Тогда
						НаборЗаписей[0].ДатаИзменения = ДанныеЗаполнения.ДатаИзменения;
					КонецЕсли;
					
					Если ДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей) Тогда
						ЗарегистрироватьОшибкуОбмена(
							НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учетной политики раньше даты запрета изменения данных'"),
							"МобильнаяБухгалтерия.УстановитьУчетнуюПолитику");
					КонецЕсли;
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ЗарегистрироватьОшибкуОбмена(
							НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учетной политики раньше даты запрета изменения данных'"), 
							"МобильнаяБухгалтерия.УстановитьУчетнуюПолитику");
					КонецПопытки;
				КонецЕсли; 
			Иначе
				Если ЕстьУчетнаяПолитикаНаИсходнуюДату Тогда
					// Если запись была изменена
					ДатаИсходнойУчетнойПолитики = НастройкаСистемыНалогообложения.ИсходнаяДата;
				ИначеЕсли КлючЗаписиНовойУчетнойПолитики <> Неопределено Тогда 
					// Если исходной политики не было, берем предыдущую
					ДатаИсходнойУчетнойПолитики = КлючЗаписиНовойУчетнойПолитики.Период;
				ИначеЕсли КлючЗаписиДействующейУчетнойПолитики <> Неопределено Тогда 
					// Если это будет первая учетная политика по организации
					ДатаИсходнойУчетнойПолитики = КлючЗаписиДействующейУчетнойПолитики.Период;
				Иначе
					// Если нет вообше никакой учетной политики по организации
					ДатаИсходнойУчетнойПолитики = Неопределено;
				КонецЕсли;
				
				Если ДатаИсходнойУчетнойПолитики <> Неопределено Тогда
					// Если на новую нет, но есть на исходную, то скопируем учетную политику на новую дату
					СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(
						"НастройкиСистемыНалогообложения", 
						Организация, 
						ДатаИсходнойУчетнойПолитики, 
						ДанныеЗаполнения.Период, 
						ДанныеЗаполнения);
				Иначе
					// И только если нет совсем никакой учетной политики
					НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	НастройкиУчетаУСН = Неопределено;
	Если НастройкиУчетнойПолитики.Свойство("НастройкиУчетаУСН", НастройкиУчетаУСН) Тогда
		
		Для Каждого НастройкаУчетаУСН Из НастройкиУчетаУСН Цикл
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Период",                           НастройкаУчетаУСН.Период);
			ДанныеЗаполнения.Вставить("Организация",                      Организация);
			Если ЗначениеЗаполнено(НастройкаУчетаУСН.ПорядокОтраженияАванса) Тогда
				ДанныеЗаполнения.Вставить("ПорядокОтраженияАванса",           НастройкаУчетаУСН.ПорядокОтраженияАванса);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("СтавкаНалога",                     НастройкаУчетаУСН.СтавкаНалога);
			ДанныеЗаполнения.Вставить("НалоговыеКаникулы",                НастройкаУчетаУСН.НалоговыеКаникулы);
			ДанныеЗаполнения.Вставить("Патент",                           НастройкаУчетаУСН.Патент);
			
			КлючЗаписиНовойУчетнойПолитики    = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиУчетаУСН", Организация, НастройкаУчетаУСН.Период);
			
			Если ЗначениеЗаполнено(НастройкаУчетаУСН.ИсходнаяДата) Тогда
				КлючЗаписиИсходнойУчетнойПолитики = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиУчетаУСН", Организация, НастройкаУчетаУСН.ИсходнаяДата);
			Иначе
				КлючЗаписиИсходнойУчетнойПолитики = Неопределено;
			КонецЕсли;
			
			ЕстьУчетнаяПолитикаНаИсходнуюДату = КлючЗаписиИсходнойУчетнойПолитики <>  Неопределено И (КлючЗаписиИсходнойУчетнойПолитики.Период = НастройкаУчетаУСН.ИсходнаяДата);
			ЕстьУчетнаяПолитикаНаНовуюДату    = КлючЗаписиНовойУчетнойПолитики <> Неопределено И (КлючЗаписиНовойУчетнойПолитики.Период = НастройкаУчетаУСН.Период);
			
			
			Если ЕстьУчетнаяПолитикаНаНовуюДату Тогда
				// Если на новую дату есть учетная политика, то перезапишем ее (при этом неважно новая она или старая)
				НаборЗаписей = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					РегистрыСведений.НастройкиУчетаУСН.УстановкаНастроекПоУмолчанию(НаборЗаписей[0], ДанныеЗаполнения);
					
					Если ДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей) Тогда
						ЗарегистрироватьОшибкуОбмена(НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учета УСН раньше даты запрета изменения данных'"), 
							"МобильнаяБухгалтерия.УстановитьУчетнуюПолитику.НастройкиУчетаУСН");
					КонецЕсли;
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ЗарегистрироватьОшибкуОбмена(НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учета УСН раньше даты запрета изменения данных'"), 
							"МобильнаяБухгалтерия.УстановитьУчетнуюПолитику.НастройкиУчетаУСН");
					КонецПопытки; 
				КонецЕсли; 
			ИначеЕсли ЕстьУчетнаяПолитикаНаИсходнуюДату Тогда 
				// Если на новую нет, но есть на исходную, то скопируем учетную политику на новую дату
				СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиУчетаУСН", Организация, НастройкаУчетаУСН.ИсходнаяДата, ДанныеЗаполнения.Период, ДанныеЗаполнения);
			Иначе
				// Если такой записи настроек учетной политики не было и нет в БП - создадим ее
				НаборЗаписей = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				
				ЗаписьНастройкиУСН = НаборЗаписей.Добавить();
				
				РегистрыСведений.НастройкиУчетаУСН.УстановкаНастроекПоУмолчанию(ЗаписьНастройкиУСН, ДанныеЗаполнения);
				
				Если ДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей) Тогда
					ЗарегистрироватьОшибкуОбмена(НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учета УСН раньше даты запрета изменения данных'"), 
						"МобильнаяБухгалтерия.УстановитьУчетнуюПолитику.НастройкиУчетаУСН");
				КонецЕсли;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
				НаборЗаписей.Записать();
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьПараметрыУчетнойПолитикиНаНовуюДату(ИмяРегистра, Организация, ДатаИсточника, ДатаПриемника, КорректируемыеДанные)
	КлючЗаписи = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, ДатаИсточника);
	Если КлючЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяУчетнаяПолитика = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	ТекущаяУчетнаяПолитика.Организация = Организация;
	ТекущаяУчетнаяПолитика.Период      = КлючЗаписи.Период;
	ТекущаяУчетнаяПолитика.Прочитать();
	
	НоваяУчетнаяПолитика = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НоваяУчетнаяПолитика.Отбор.Организация.Установить(Организация);
	НоваяУчетнаяПолитика.Отбор.Период.Установить(ДатаПриемника);
	НоваяУчетнаяПолитика.Прочитать();
	Если НоваяУчетнаяПолитика.Количество() = 0 Тогда
		ЗаписьУчетнойПолитики = НоваяУчетнаяПолитика.Добавить();
	Иначе
		ЗаписьУчетнойПолитики = НоваяУчетнаяПолитика[0];
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(ЗаписьУчетнойПолитики, ТекущаяУчетнаяПолитика);
	ЗаписьУчетнойПолитики.Период = ДатаПриемника;
	Если КорректируемыеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЗаписьУчетнойПолитики, КорректируемыеДанные);
	КонецЕсли;
	
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено(НоваяУчетнаяПолитика) Тогда
		ТекстОшибки = НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учетной политики %1 раньше даты запрета изменения данных'");
		
		ЗарегистрироватьОшибкуОбмена(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРегистра), 
			"МобильнаяБухгалтерия.СкопироватьПараметрыУчетнойПолитики");
	КонецЕсли;
	НоваяУчетнаяПолитика.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	
	Попытка
		НоваяУчетнаяПолитика.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Из мобильной бухгалтерии загружена настройка учетной политики %1 раньше даты запрета изменения данных'");
		
		ЗарегистрироватьОшибкуОбмена(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРегистра), 
			"МобильнаяБухгалтерия.СкопироватьПараметрыУчетнойПолитики");
	КонецПопытки; 
КонецПроцедуры

Процедура ПроверитьУстановитьНастройкиИБ()
	
	МенеджерКонстанты = Константы.НастройкаЗаполненияЦеныПродажи.СоздатьМенеджерЗначения();
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Значение = Перечисления.НастройкаЗаполненияЦеныПродажи.Номенклатура;
	МенеджерКонстанты.Записать();
	
КонецПроцедуры

Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора = Неопределено)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	Если ВидДоговора = Неопределено Тогда
		ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	КонецЕсли;
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Выборка.Договор;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		Возврат СоздатьОсновнойДоговорКонтрагента(ГоловнаяОрганизация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора);
		
	КонецЕсли;
КонецФункции

Функция СоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, ВалютаВзаиморасчетов, ВидДоговора)
	
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	Наименование = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	ЗначенияЗаполнения.Вставить("Наименование", Наименование);
	
	НовыйОбъект.Заполнить(ЗначенияЗаполнения);
	НовыйОбъект.УстановитьНовыйКод();
	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	НовыйОбъект.Записать();
	
	УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка, Организация, Контрагент, ВидДоговора);
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента"
Процедура УстановитьОсновнойДоговорКонтрагента(Договор, Организация, Контрагент, ВидДоговора)
	
	Набор = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.Контрагент.Установить(Контрагент);
	Набор.Отбор.ВидДоговора.Установить(ВидДоговора);
	
	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.Контрагент  = Контрагент;
	НоваяЗапись.ВидДоговора = ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
КонецПроцедуры

Функция ОписаниеВидаНалога(ВидНалогаИПлатежаВБюджет, ВидНалоговогоОбязательства, ВерсияСхемы = 0)
	
	ОписаниеВидаНалога = Новый Структура("ВидНалога, ВидНалоговогоОбязательства");
	
	СпрМенеджер = Справочники.ВидыНалоговИПлатежейВБюджет;
	ВидыНалогов = Перечисления.ВидыНалогов;
	ВидНалога = "";
	ВидНО = ИмяЗначенияПеречисления(ВидНалоговогоОбязательства);
	
	Если ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.УСН_Доходы, Ложь) Тогда
		
		ВидНалога = "УСН_Доходы";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Ложь)
		И ВидНалоговогоОбязательства <> Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		
		ВидНалога = "ФиксированныеВзносы_ПФР";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Ложь)
		И ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		
		ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов";
		ВидНО = ИмяЗначенияПеречисления(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.ФиксированныеВзносы_ФФОМС, Ложь) Тогда
		
		ВидНалога = "ФиксированныеВзносы_ФФОМС";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ЕНВД, Ложь) Тогда
		
		ВидНалога = "ЕНВД";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_ВнутригородскойРайон, Ложь) Тогда
		
		ВидНалога = "ПСН_ВнутригородскойРайон";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_ГородскойОкруг, Ложь) Тогда
		
		ВидНалога = "ПСН_ГородскойОкруг";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_ГородскойОкругСВнутригородскимДелением, Ложь) Тогда
		
		ВидНалога = "ПСН_ГородскойОкругСВнутригородскимДелением";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_ГородФедеральногоЗначения, Ложь) Тогда
		
		ВидНалога = "ПСН_ГородФедеральногоЗначения";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_МуниципальныйОкруг, Ложь) Тогда
		
		ВидНалога = "ПСН_МуниципальныйОкруг";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		Перечисления.ВидыНалогов.ПСН_МуниципальныйРайон, Ложь) Тогда
		
		ВидНалога = "ПСН_МуниципальныйРайон";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.НДФЛ, Ложь) Тогда
		
		ВидНалога = "НДФЛ";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины, Ложь) Тогда
		
		ВидНалога = "НДФЛ_ДоходыСвышеПредельнойВеличины";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(
		ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть, Ложь) Тогда
		
		ВидНалога = "СтраховыеВзносы_ПФР_СтраховаяЧасть";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(ВидыНалогов.СтраховыеВзносы_ФСС, Ложь) Тогда
		
		ВидНалога = "СтраховыеВзносы_ФСС";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, Ложь) Тогда
		
		ВидНалога = "СтраховыеВзносы_ФСС_НСиПЗ";
		
	ИначеЕсли ВидНалогаИПлатежаВБюджет = СпрМенеджер.НалогПоВиду(ВидыНалогов.СтраховыеВзносы_ФФОМС, Ложь) Тогда
		
		ВидНалога = "СтраховыеВзносы_ФФОМС";
		
	Иначе
		
		Если ВерсияСхемы >= 5 Тогда
			ВидНалогаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНалогаИПлатежаВБюджет, "ВидНалога");
			Если ЗначениеЗаполнено(ВидНалогаСсылка) Тогда
				ВидНалога = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидНалогаСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеВидаНалога.ВидНалога                  = ВидНалога;
	ОписаниеВидаНалога.ВидНалоговогоОбязательства = ВидНО;
	
	Возврат ОписаниеВидаНалога;
	
КонецФункции

// Возвращает значение второго параметра в случае, если первый параметр не заполнен.
// В противном случае будет возвращено значение первого параметра
//
// Параметры:
//  ПроверяемоеЗначение  - произвольный тип - проверяемое значение
//  ВозвращаемоеЗначение - произвольный тип - возвращаемое значение, если значение ПроверяемоеЗначение есть NULL
//
// Возвращаемое значение:
//  ПроверяемоеЗначение - если его значение не пустое, ВозвращаемоеЗначение - в ином случае.
//
Функция ПервоеНепустоеЗначение(ПроверяемоеЗначение, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат ПроверяемоеЗначение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РегламентированныеОтчеты

Процедура ЗаполнитьРегламентированныеОтчеты(СтруктураПараметров, ЗаполнениеОтчетности, СообщениеОбОшибке)
	
	Для каждого СтрокаЗаполнения Из ЗаполнениеОтчетности Цикл
		
		ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			СтрокаЗаполнения.ВидОтчета, СтрокаЗаполнения.ДатаОкончания);
		
		ДанныеДляЗаполнения = ?(СтруктураПараметров.РасчетНалоговВБП, 
			Неопределено, ПреобразоватьДанныеРеглОтчетаМПДляБРО(СтрокаЗаполнения, ИмяФормыОтчета));
		
		Если ДанныеДляЗаполнения <> Неопределено Тогда 
			// Все хорошо, есть данные заполнения
		ИначеЕсли  РегламентированныеОтчетыСАвтоЗаполнением().Найти(СтрокаЗаполнения.ВидОтчета) <> Неопределено Тогда
		ИначеЕсли СтруктураПараметров.РасчетНалоговВБП 
			И НЕ РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(СтрокаЗаполнения.ВидОтчета, ИмяФормыОтчета).АвтоФормированиеНаСервере Тогда
			
			Возврат;
		КонецЕслИ;
		
		ПараметрыСоздания = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
		
		ПараметрыСоздания.ИсточникОтчета           = СтрокаЗаполнения.ВидОтчета;
		ПараметрыСоздания.ИмяФормыОтчета           = ИмяФормыОтчета;
		ПараметрыСоздания.Организация              = СтрокаЗаполнения.Организация;
		ПараметрыСоздания.ДатаНачала               = СтрокаЗаполнения.ДатаНачала;
		ПараметрыСоздания.ДатаОкончания            = СтрокаЗаполнения.ДатаОкончания;
		ПараметрыСоздания.ВнешниеДанные            = ДанныеДляЗаполнения;
		ПараметрыСоздания.ЗаполнятьВнешнимиДанными = ДанныеДляЗаполнения <> Неопределено;
		ПараметрыСоздания.СсылкаНаСохрРеглОтчет    = СтрокаЗаполнения.Ссылка;
		ПараметрыСоздания.Вставить("КПП", "");
		ПараметрыСоздания.Вставить("РегистрацияВНалоговомОргане");
		ПараметрыСоздания.Вставить("НалоговыйОрган");
		ПараметрыСоздания.Вставить("ОКТМО");
		Если ЗначениеЗаполнено(СтрокаЗаполнения.КодНалоговогоОргана) Тогда
			ПараметрыСоздания.Вставить("НалоговыйОрган", СтрокаЗаполнения.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗаполнения.КПП) Тогда
			ПараметрыСоздания.Вставить("КПП", СтрокаЗаполнения.КПП);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПараметрыСоздания.НалоговыйОрган) Тогда
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
				ПараметрыСоздания.Организация, ПараметрыСоздания.КПП, ПараметрыСоздания.НалоговыйОрган);
		Иначе
			РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСоздания.Организация, "РегистрацияВНалоговомОргане");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
			РеквизитыНалоговогоОргана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО, Код, КПП");
			ПараметрыСоздания.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			ПараметрыСоздания.НалоговыйОрган              = РеквизитыНалоговогоОргана.Код;
			ПараметрыСоздания.ОКТМО                       = РеквизитыНалоговогоОргана.КодПоОКТМО;
			ПараметрыСоздания.КПП                         = РеквизитыНалоговогоОргана.КПП;
		КонецЕсли;
		
		ПараметрыСоздания.Вставить("РезультатАвтоформирования", Новый Массив);
		
		ЗаполненныйОтчет = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
			ПараметрыСоздания.ИсточникОтчета,
			ПараметрыСоздания.Организация,
			ПараметрыСоздания.ДатаНачала,
			ПараметрыСоздания.ДатаОкончания,
			Ложь,
			ИмяФормыОтчета,
			ПараметрыСоздания);
		
		Если ТипЗнч(ЗаполненныйОтчет) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			ЗарегистрироватьОшибкиОбмена(ПараметрыСоздания.Ошибки,
				НСтр("ru = 'Загрузка данных из мобильной бухгалтерии. Загрузка регламентированного отчета'"));
				
			Если ТипЗнч(ПараметрыСоздания.РезультатАвтоформирования) = Тип("Массив")
				И ПараметрыСоздания.РезультатАвтоформирования.Количество() > 0 Тогда
				СообщениеОбОшибке = ПараметрыСоздания.РезультатАвтоформирования[0];
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Ошибка при переносе данных декларации в базу данных, выполняющую подготовку выгрузки декларации'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДесериализоватьИПроверитьСсылкуНаОтчет(СсылкаНаОтчет, СообщениеОбОшибке)

	// Из старых версий мобильных приложений ссылка может приходить без указания типа, 
	// тогда считаем, что это обычный РегламентированныйОтчет.
	СохраненныйОтчет = ДесериализоватьСсылку(СсылкаНаОтчет, Документы.РегламентированныйОтчет);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет) ИЛИ НЕ ОбщегоНазначения.СсылкаСуществует(СохраненныйОтчет) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке отчета на e-mail из мобильной бухгалтерии передана некорректная ссылка'"),
			НСтр("ru = 'Подготовка отчета через 1С-Отчетность из мобильной бухгалтерии'"));
		
		СообщениеОбОшибке = НСтр("ru = 'Отчет отсутсвует в ИБ на сервере'");
		
		Возврат Неопределено;
	КонецЕсли;

	Возврат СохраненныйОтчет;

КонецФункции

Процедура НачатьОтправкуДекларацииИспользуяДокументооборотСКО(Параметры, АдресРезультата) Экспорт

	РезультатЗадания = Новый Структура();
	РезультатЗадания.Вставить("СообщениеОбОшибке",   "");
	РезультатЗадания.Вставить("РезультатВыполнения", Неопределено);

	// Проверяем возможность отправить подготовленный отчет без собственно отправки.
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();

	Попытка
	
		ПараметрыОтправки = КонтекстЭДОСервер.НовыеПараметрыОтправки();
		ПараметрыОтправки.ТолькоПроверкаБезОтправки = Истина;
	
		КонтекстЭДОСервер.ОтправитьРегламентированныйОтчет(
			Параметры.СохраненныйОтчет,
			РезультатЗадания.СообщениеОбОшибке,
			ПараметрыОтправки);
			
		// Если отчет успешно прошел проверки, то запрашиваем у сервиса криптографии отправку временного пароля для подписания отчета.
		Если НЕ ЗначениеЗаполнено(РезультатЗадания.СообщениеОбОшибке) Тогда
			РезультатЗадания.РезультатВыполнения = КонтекстЭДОСервер.ПолучитьВременныйПарольДляОбъектаОтправки(
				Параметры.СохраненныйОтчет,
				"phone", // Считаем, что при работе с мобильного устройства пароли приходят на него же.
				Параметры.ПовторнаяОтправка,
				РезультатЗадания.СообщениеОбОшибке);
		КонецЕсли;

	Исключение
		РезультатЗадания.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(РезультатЗадания.СообщениеОбОшибке, "МобильнаяБухгалтерия.НачатьОтправкуДекларацииИспользуяДокументооборотСКО");
	КонецПопытки;
	
	// Записываем в качестве служебного сообщения в очередь сообщений фонового задания результат выполнения задания.
	// АдресРезультата не используем, т.к. временное хранилище будет удалено после окончания сеанса веб-сервиса,
	// который запустил текущее фоновое задание по генерации пароля.
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СообщениеРезультатаФоновогоЗадания()); // Вставляем маркер служебного сообщения.
	МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатЗадания));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСтрок));

КонецПроцедуры

Процедура ЗавершитьОтправкуДекларацииИспользуяДокументооборотСКО(Параметры, АдресРезультата) Экспорт

	РезультатЗадания = Новый Структура();
	РезультатЗадания.Вставить("СообщениеОбОшибке", "");

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Попытка
		КонтекстЭДОСервер.ПодтвердитьВременныйПарольДляОбъектаОтправки(
			Параметры.СохраненныйОтчет,
			Параметры.ВременныйПароль,
			РезультатЗадания.СообщениеОбОшибке);

		// Отправляем отчет.
		Если НЕ ЗначениеЗаполнено(РезультатЗадания.СообщениеОбОшибке) Тогда
			ПараметрыОтправки = КонтекстЭДОСервер.НовыеПараметрыОтправки();
			// Настройка учетной записи должна была быть выполнена перед получением временного пароля.
			// Сейчас уже настройки учетной записи не меняем.
			ПараметрыОтправки.ТребуетсяАвтонастройкаУчетнойЗаписи = Ложь;
			
			КонтекстЭДОСервер.ОтправитьРегламентированныйОтчет(
				Параметры.СохраненныйОтчет,
				РезультатЗадания.СообщениеОбОшибке,
				ПараметрыОтправки);
		КонецЕсли;
	Исключение
		РезультатЗадания.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(РезультатЗадания.СообщениеОбОшибке, "МобильнаяБухгалтерия.ЗавершитьОтправкуДекларацииИспользуяДокументооборотСКО");
	КонецПопытки;

	// Записываем в качестве служебного сообщения в очередь сообщений фонового задания результат выполнения задания.
	// АдресРезультата не используем, т.к. временное хранилище будет удалено после окончания сеанса веб-сервиса,
	// который запустил текущее фоновое задание по генерации пароля.
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СообщениеРезультатаФоновогоЗадания()); // Вставляем маркер служебного сообщения.
	МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатЗадания));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСтрок));

КонецПроцедуры

Процедура ПроверитьСтатусыОтправкиОтчетов(Параметры, АдресХранилища) Экспорт

	РезультатЗадания = Новый Структура();
	РезультатЗадания.Вставить("СообщениеОбОшибке", "");

	// Выбираем отчеты с незавершенным статусом отправки.
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Попытка
	
		Ошибки = Новый Массив;
	
		// Незавершенные отправки в ФСС.
		Для каждого ОтправкаСсылка Из Параметры.НезавершенныеОтправкиФСС Цикл
	
			ПолученРезультатОтСервераФСС = Ложь;
			НастройкиССервера = Неопределено;
			КонтекстЭДОСервер.ОбновитьРезультатКонкретнойОтправкиФССССервера(ОтправкаСсылка, ПолученРезультатОтСервераФСС, НастройкиССервера);
			
			Если НЕ ПолученРезультатОтСервераФСС
				И ТипЗнч(НастройкиССервера) = Тип("Структура")
				И НастройкиССервера.Свойство("ПредставлениеОтчетаОшибки") Тогда
				Ошибки.Добавить(НастройкиССервера.ПредставлениеОтчетаОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ошибки.Количество() > 0 Тогда
			РезультатЗадания.СообщениеОбОшибке = СтрСоединить(Ошибки, Символы.ПС);
		КонецЕсли;

	Исключение
		РезультатЗадания.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(РезультатЗадания.СообщениеОбОшибке, "МобильнаяБухгалтерия.ПроверитьСтатусыОтправкиОтчетов");
	КонецПопытки;

	// Записываем в качестве служебного сообщения в очередь сообщений фонового задания результат выполнения задания.
	// АдресРезультата не используем, т.к. временное хранилище будет удалено после окончания сеанса веб-сервиса,
	// который запустил текущее фоновое задание по генерации пароля.
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(СообщениеРезультатаФоновогоЗадания()); // Вставляем маркер служебного сообщения. 
	МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатЗадания));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСтрок));

КонецПроцедуры

Функция СообщениеРезультатаФоновогоЗадания()
	Возврат "{МобильнаяБухгалтерия.РезультатДлительнойОперации}";
КонецФункции

// Формирует печатную форму документа регламентированной отчетности.
//
// Параметры:
//	ВидДокумента - Строка - Имя документа, как оно указано в метаданных.
//	СерСсылка - Строка - Сериализованная ссылка на документ.
//	Период - Дата - Дата отчетного периода, за который подготавливается отчетность в ПФР.
//	Перезаполнить - Булево - Признак необходимости перезаполнения документа перед формированием печатной формы.
//	СообщениеОбОшибке - Строка - Текст сообщения об ошибке, если она возникла в процессе выполнения.
//		Иначе будет возвращена пустая строка.
// 
// Возвращаемое значение:
//	ХранилищеЗначения - Содержит сформированный табличный документ.
//
Функция ПечатьДокументаРегламентированнойОтчетности(ВидДокумента, СерСсылка, СообщениеОбОшибке) Экспорт
	
	Если СтрНайти(ВидДокумента, "РегламентированныйОтчет") Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(СерСсылка, "РегламентированныйОтчет");
		
		ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			ВидДокумента, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаОкончания"));
	ИначеЕсли СтрНайти(ВидДокумента, "РегламентированноеУведомлениеУменьшениеНалогаНаСтраховыеВзносы") Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(СерСсылка, "УведомлениеОСпецрежимахНалогообложения");
	Иначе
		Ссылка = ДесериализоватьСсылкуНаДокумент(СерСсылка, ВидДокумента);
		
		ИмяФормыОтчета = Неопределено;
	КонецЕсли;
	
	Если ВидДокумента = "СведенияОЗастрахованныхЛицахСЗВ_М" Тогда
		МассивОбъектов = Новый Массив();
		МассивОбъектов.Добавить(Ссылка);
		ТабличныйДокумент = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.МобильнаяБухгалтерия_СформироватьПечатнуюФормуСЗВ_М(МассивОбъектов, Новый СписокЗначений);
	ИначеЕсли ВидДокумента = "РегламентированноеУведомлениеУменьшениеНалогаНаСтраховыеВзносы" Тогда
		
		ЛистыУведомления = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ПечатьУведомленияБРО(Ссылка);
		
		ИмяФайла     = ПолучитьИмяВременногоФайла("pdf");
		ФорматПакета = ТипФайлаПакетаОтображаемыхДокументов.PDF;
		
		ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
		
		Для Каждого Эл Из ЛистыУведомления Цикл
			
			ПакетТаблДок.Состав.Добавить(Эл.Значение[0]);
			
		КонецЦикла;
		
		ПакетТаблДок.Записать(ИмяФайла, ФорматПакета);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
		
		ИмяФайлаПечатногоБланка = СтрЗаменить(Строка(Ссылка),".","_") + ".pdf";
		ИмяФайлаПечатногоБланка = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка,"_");
		
		ТабличныйДокумент = Новый Структура();
		ТабличныйДокумент.Вставить("ФайлПечатногоБланка", ДанныеФайла);
		ТабличныйДокумент.Вставить("ИмяФайлаПечатногоБланка", ИмяФайлаПечатногоБланка);
		
	ИначеЕсли РегламентированныеОтчетыСАвтоЗаполнением().Найти(ВидДокумента) <> Неопределено 
		ИЛИ (ИмяФормыОтчета <> Неопределено 
				И РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(ВидДокумента, ИмяФормыОтчета).ПечатьБезШтрихкодаPDF417НаСервере) Тогда 
			
		ДанныеДляПечати = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкРегламентированногоОтчета(Ссылка);
			
		Если ЗначениеЗаполнено(ДанныеДляПечати) Тогда
			ТабличныйДокумент = Новый Структура();
			ТабличныйДокумент.Вставить("ФайлПечатногоБланка", ПолучитьИзВременногоХранилища(ДанныеДляПечати.АдресПечатногоБланка));
			ТабличныйДокумент.Вставить("ИмяФайлаПечатногоБланка", ДанныеДляПечати.ИмяФайлаПечатногоБланка);
		КонецЕсли;
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
	
КонецФункции

// Возращает виды регламентированных отчетов, которые требуется заполнять автоматически на стороне 1С:Бухгалтерии.
//
// Параметры:
//
// Возвращаемое значение:
//	Структура - виды регламентированных отчетов содержатся в ключах.
//
Функция РегламентированныеОтчетыСАвтоЗаполнением() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("РегламентированныйОтчет6НДФЛ");
	Результат.Добавить("РегламентированныйОтчет6_НДФЛ");
	Результат.Добавить("РегламентированныйОтчет4ФСС");
	Результат.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьУведомления(СтруктураПараметров, ЗаполнениеУведомлений, ОтложенныеСтатусыУведомлений, СообщениеОбОшибке)
	
	Для каждого СтрокаЗаполнения Из ЗаполнениеУведомлений Цикл
		
		ДанныеДляЗаполнения = ПреобразоватьДанныеУведомленияМБДляБРО(СтрокаЗаполнения);
			
		Если ДанныеДляЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕслИ;
		
		МенеджерОтчета = Отчеты[СтрокаЗаполнения.ИмяОтчета];
		
		Если ЗначениеЗаполнено(СтрокаЗаполнения.КодНалоговогоОргана) Тогда
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
				СтрокаЗаполнения.Организация, "", СтрокаЗаполнения.КодНалоговогоОргана);
		Иначе
			РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗаполнения.Организация, "РегистрацияВНалоговомОргане");
		КонецЕсли;
		
		Попытка
			ЗаполненныйОтчет = МенеджерОтчета.СформироватьНовоеУведомлениеПоДаннымЗаполнения(
				СтрокаЗаполнения.Организация,
				РегистрацияВНалоговомОргане,
				ДанныеДляЗаполнения,
				СтрокаЗаполнения.Ссылка);
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗарегистрироватьОшибкуОбмена(ТекстОшибки,
				НСтр("ru = 'Загрузка данных из мобильной бухгалтерии. Загрузка уведомления'"));
				
			СообщениеОбОшибке = ТекстОшибки +
				НСтр("ru = 'Ошибка при переносе данных в базу данных, выполняющую подготовку уведомления'");
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтатусУведомления Из ОтложенныеСтатусыУведомлений Цикл
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(СтатусУведомления.Уведомление);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей[0], СтатусУведомления, "СостояниеСдачиОтчетности, СтатусОтправки, ПометкаУдаления");
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДекларацияЕНВД

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларациюЕНВД2016Кв1(ДанныеМП, Контейнер)
	
	Перем Раздел2, Раздел3;
	
	КлючиПоказателей = КлючиПоказателейДекларацииЕНВД2016Кв1();
	ДанныеЗаполнения = ДанныеМП.ДанныеОтчета;
	
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	ДатаНачалаПериодаОтчета = ДанныеМП.ДатаНачала;
	ДатаКонцаПериодаОтчета = ДанныеМП.ДатаОкончания;
	Организация = ДанныеМП.Организация;
	Период = ДанныеМП.ДатаОкончания;
	
	Если ВидыДеятельности = Неопределено Тогда
		Контейнер = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") Тогда
		
		// Обеспечим нужное количество страниц:
		КоличествоСтраницНужно  = Макс(ВидыДеятельности.Количество(), 1);
		КоличествоСтраницСейчас = Раздел2.Количество();
		
		// - удалим лишние
		Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
			// a. КоличествоСтраницНужно - это меньше, чем сейчас
			// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
			Раздел2.Удалить(КоличествоСтраницНужно);
		КонецЦикла;
		
		// - добавим недостающие
		Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
			ДобавитьСтраницуРазделаДекларации(Раздел2);
		КонецЦикла;
		
		Для Индекс = 0 По ВидыДеятельности.Количество() - 1 Цикл
			
			ВидДеятельности = ДанныеЗаполнения.ВидыДеятельности[Индекс];
			
			ДанныеРаздела2 = Раздел2[Индекс].Данные;
			ДанныеДопСтрокРаздела2 = Раздел2[Индекс].ДанныеДопСтрок;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Код, ВидДеятельности.Код);
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Индекс,          СведенияОбАдресе.Индекс);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодРегиона,      СведенияОбАдресе.КодРегиона);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Район,           СведенияОбАдресе.Район);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Город,           СведенияОбАдресе.Город);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НаселенныйПункт, СведенияОбАдресе.НаселенныйПункт);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Улица,           СведенияОбАдресе.Улица);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерДома,       СведенияОбАдресе.Здание.Номер);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерКорпуса,   ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, ""));
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерОфиса,     ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, ""));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодПоОКТМО, ВидДеятельности.КодПоОКТМО);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КоэффициентДефлятор,       ВидДеятельности.КоэффициентДефлятор);
			ДанныеРаздела2.Вставить(КлючиПоказателей.БазоваяДоходность,         ВидДеятельности.БазоваяДоходность);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КорректирующийКоэффициент, ВидДеятельности.КорректирующийКоэффициент);
			
			Если НачалоДня(ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаНачала И ВидДеятельности.ДатаНачала <= НачалоДня(ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
			КонецЕсли;
			
			Если НачалоДня(ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаПрекращения И ВидДеятельности.ДатаПрекращения <= НачалоДня(ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
			КонецЕсли;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель1, ВидДеятельности.ФизическийПоказатель1);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель2, ВидДеятельности.ФизическийПоказатель2);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель3, ВидДеятельности.ФизическийПоказатель3);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.НалоговаяСтавка, ВидДеятельности.НалоговаяСтавка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		ИспользуетсяТрудНаемныхРаботников = Ложь;
		Если НЕ ДанныеЗаполнения.Свойство("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников) Тогда
			ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		КонецЕсли;
		
		Раздел3.Вставить(КлючиПоказателей.ПризнакНалогоплательщика, ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
		
		СуммаСтраховыхВзносов = 0;
		СуммаСтраховыхВзносовЗаСебя = 0;
		ДанныеЗаполнения.Свойство("СуммаСтраховыхВзносов", СуммаСтраховыхВзносов);
		ДанныеЗаполнения.Свойство("СуммаСтраховыхВзносовЗаСебя", СуммаСтраховыхВзносовЗаСебя);
		
		Если ИспользуетсяТрудНаемныхРаботников Тогда
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов, СуммаСтраховыхВзносов);
			
			УменьшатьНалогНаВзносыИПРаботодателя = УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период);
			Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
			Иначе
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, 0);
			КонецЕсли;
		Иначе
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов,       0);
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларациюЕНВД2018Кв1(ДанныеМП, Контейнер)
	
	Перем Раздел2, Раздел3, Раздел4;
	
	КлючиПоказателей = КлючиПоказателейДекларацииЕНВД2018Кв1();
	ДанныеЗаполнения = ДанныеМП.ДанныеОтчета;
	
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	ДатаНачалаПериодаОтчета = ДанныеМП.ДатаНачала;
	ДатаКонцаПериодаОтчета = ДанныеМП.ДатаОкончания;
	Организация = ДанныеМП.Организация;
	Период = ДанныеМП.ДатаОкончания;
	
	Если ВидыДеятельности = Неопределено Тогда
		Контейнер = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") Тогда
		
		// Обеспечим нужное количество страниц:
		КоличествоСтраницНужно  = Макс(ВидыДеятельности.Количество(), 1);
		КоличествоСтраницСейчас = Раздел2.Количество();
		
		// - удалим лишние
		Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
			// a. КоличествоСтраницНужно - это меньше, чем сейчас
			// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
			Раздел2.Удалить(КоличествоСтраницНужно);
		КонецЦикла;
		
		// - добавим недостающие
		Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
			ДобавитьСтраницуРазделаДекларации(Раздел2);
		КонецЦикла;
		
		Для Индекс = 0 По ВидыДеятельности.Количество() - 1 Цикл
			
			ВидДеятельности = ДанныеЗаполнения.ВидыДеятельности[Индекс];
			
			ДанныеРаздела2 = Раздел2[Индекс].Данные;
			ДанныеДопСтрокРаздела2 = Раздел2[Индекс].ДанныеДопСтрок;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Код, ВидДеятельности.Код);
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Индекс,          СведенияОбАдресе.Индекс);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодРегиона,      СведенияОбАдресе.КодРегиона);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Район,           СведенияОбАдресе.Район);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Город,           СведенияОбАдресе.Город);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НаселенныйПункт, СведенияОбАдресе.НаселенныйПункт);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Улица,           СведенияОбАдресе.Улица);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерДома,       СведенияОбАдресе.Здание.Номер);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерКорпуса,   ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, ""));
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерОфиса,     ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, ""));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодПоОКТМО, ВидДеятельности.КодПоОКТМО);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КоэффициентДефлятор,       ВидДеятельности.КоэффициентДефлятор);
			ДанныеРаздела2.Вставить(КлючиПоказателей.БазоваяДоходность,         ВидДеятельности.БазоваяДоходность);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КорректирующийКоэффициент, ВидДеятельности.КорректирующийКоэффициент);
			
			Если НачалоДня(ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаНачала И ВидДеятельности.ДатаНачала <= НачалоДня(ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
			КонецЕсли;
			
			Если НачалоДня(ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаПрекращения И ВидДеятельности.ДатаПрекращения <= НачалоДня(ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
			КонецЕсли;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель1, ВидДеятельности.ФизическийПоказатель1);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель2, ВидДеятельности.ФизическийПоказатель2);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель3, ВидДеятельности.ФизическийПоказатель3);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.НалоговаяСтавка, ВидДеятельности.НалоговаяСтавка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		ИспользуетсяТрудНаемныхРаботников = Ложь;
		Если НЕ ДанныеЗаполнения.Свойство("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников) Тогда
			ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		КонецЕсли;
		
		Раздел3.Вставить(КлючиПоказателей.ПризнакНалогоплательщика, ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
		
		СуммаСтраховыхВзносов = 0;
		СуммаСтраховыхВзносовЗаСебя = 0;
		ДанныеЗаполнения.Свойство("СуммаСтраховыхВзносов", СуммаСтраховыхВзносов);
		ДанныеЗаполнения.Свойство("СуммаСтраховыхВзносовЗаСебя", СуммаСтраховыхВзносовЗаСебя);
		
		Если ИспользуетсяТрудНаемныхРаботников Тогда
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов, СуммаСтраховыхВзносов);
			
			УменьшатьНалогНаВзносыИПРаботодателя = УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период);
			Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
			Иначе
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, 0);
			КонецЕсли;
		Иначе
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов,       0);
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел4_ДанныеДопСтрок", Раздел4) И ТипЗнч(Раздел4) = Тип("ТаблицаЗначений") Тогда
		
		РасходыНаОнлайнКассы = Неопределено;
		ДанныеЗаполнения.Свойство("РасходыНаОнлайнКассы", РасходыНаОнлайнКассы);
		
		Если ЗначениеЗаполнено(РасходыНаОнлайнКассы) Тогда
			
			Для Каждого ДанныеРасхода Из РасходыНаОнлайнКассы Цикл
				
				СтрокаКонтейнера = Раздел4.Добавить();
				
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить(КлючиПоказателей.МодельККТ,               ДанныеРасхода.Модель);
				ДанныеСтроки.Вставить(КлючиПоказателей.ЗаводскойНомерККТ,       ДанныеРасхода.ЗаводскойНомер);
				ДанныеСтроки.Вставить(КлючиПоказателей.РегистрационныйНомерККТ, ДанныеРасхода.РегистрационныйНомер);
				ДанныеСтроки.Вставить(КлючиПоказателей.ДатаРегистрацииККТ,      ДанныеРасхода.ДатаРегистрации);
				ДанныеСтроки.Вставить(КлючиПоказателей.РасходыНаККТ,            ДанныеРасхода.Сумма);
				
				ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, ДанныеСтроки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Функция ПолучитьДанныеДекларацииЕНВД2016Кв1(ДанныеОтчета)
	
	Перем Раздел2, Раздел3;
	
	КлючиПоказателей = КлючиПоказателейДекларацииЕНВД2016Кв1();
	
	МнСтрЧасть = ДанныеОтчета.ДанныеМногостраничныхРазделов;
	Показатели = ДанныеОтчета.ПоказателиОтчета;
	
	СтруктураДанныхОтчета = Новый Структура();
	
	ВидыДеятельности = Новый Массив;
	Если МнСтрЧасть.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") И Раздел2.Количество() > 0  Тогда
		Для Каждого ДанныеРаздела2 Из Раздел2 Цикл
			ДанныеРаздела = ДанныеРаздела2.Данные;
			ВидДеятельности = Новый Структура();
			
			ЗначенияПолейАдреса = Новый Структура();
			ЗначенияПолейАдреса.Вставить("Индекс",          ДанныеРаздела[КлючиПоказателей.Индекс]);
			ЗначенияПолейАдреса.Вставить("КодРегиона",      ДанныеРаздела[КлючиПоказателей.КодРегиона]);
			ЗначенияПолейАдреса.Вставить("Район",           ДанныеРаздела[КлючиПоказателей.Район]);
			ЗначенияПолейАдреса.Вставить("Город",           ДанныеРаздела[КлючиПоказателей.Город]);
			ЗначенияПолейАдреса.Вставить("НаселенныйПункт", ДанныеРаздела[КлючиПоказателей.НаселенныйПункт]);
			ЗначенияПолейАдреса.Вставить("Улица",           ДанныеРаздела[КлючиПоказателей.Улица]);
			ЗначенияПолейАдреса.Вставить("Дом",             ДанныеРаздела[КлючиПоказателей.НомерДома]);
			ЗначенияПолейАдреса.Вставить("Корпус",          ДанныеРаздела[КлючиПоказателей.НомерКорпуса]);
			ЗначенияПолейАдреса.Вставить("ОФис",            ДанныеРаздела[КлючиПоказателей.НомерОфиса]);
			
			ВидКонтактнойИнформацииАдреса = Справочники.ВидыДеятельностиЕНВД.ВидКонтактнойИнформацииАдреса();
			
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЗначенияПолейАдреса, "", ВидКонтактнойИнформацииАдреса);
			Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML);
			
			ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Адрес);
			
			ВидДеятельности.Вставить("Адрес", Адрес);
			ВидДеятельности.Вставить("АдресСтрокой", ПредставлениеАдреса);
			
			ВидДеятельности.Вставить("ФизическийПоказатель1", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель1]);
			ВидДеятельности.Вставить("ФизическийПоказатель2", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель2]);
			ВидДеятельности.Вставить("ФизическийПоказатель3", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель3]);
			
			ВидДеятельности.Вставить("Код",                       ДанныеРаздела[КлючиПоказателей.Код]);
			ВидДеятельности.Вставить("КодПоОКТМО",                ДанныеРаздела[КлючиПоказателей.КодПоОКТМО]);
			ВидДеятельности.Вставить("КорректирующийКоэффициент", ДанныеРаздела[КлючиПоказателей.КорректирующийКоэффициент]);
			ВидДеятельности.Вставить("КоэффициентДефлятор",       ДанныеРаздела[КлючиПоказателей.КоэффициентДефлятор]);
			ВидДеятельности.Вставить("БазоваяДоходность",         ДанныеРаздела[КлючиПоказателей.БазоваяДоходность]);
			ВидДеятельности.Вставить("НалоговаяСтавка",           ДанныеРаздела[КлючиПоказателей.НалоговаяСтавка]);
			
			ВидДеятельности.Вставить("ДатаНачала",      ДанныеРаздела[КлючиПоказателей.ДатаПостановкиНаУчет]);
			ВидДеятельности.Вставить("ДатаПрекращения", ДанныеРаздела[КлючиПоказателей.ДатаСнятияСУчета]);
			
			ВидыДеятельности.Добавить(ВидДеятельности);
		КонецЦикла;
		СтруктураДанныхОтчета.Вставить("ВидыДеятельности", ВидыДеятельности);
	Иначе
		СтруктураДанныхОтчета.Вставить("ВидыДеятельности");
	КонецЕсли;
	
	Если Показатели.Свойство("ПолеТабличногоДокументаРаздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		СтруктураДанныхОтчета.Вставить("СуммаСтраховыхВзносов", Раздел3[КлючиПоказателей.СуммаСтраховыхВзносов]);
		СтруктураДанныхОтчета.Вставить("СуммаСтраховыхВзносовЗаСебя", Раздел3[КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя]);
		
		ИспользуетсяТрудНаемныхРаботников = ?(Раздел3[КлючиПоказателей.ПризнакНалогоплательщика] = "1", Истина, Ложь);
		СтруктураДанныхОтчета.Вставить("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников);
		
	КонецЕсли;
	
	Возврат СтруктураДанныхОтчета;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Функция ПолучитьДанныеДекларацииЕНВД2018Кв1(ДанныеОтчета)
	
	Перем Раздел2, Раздел3, Раздел4;
	
	КлючиПоказателей = КлючиПоказателейДекларацииЕНВД2018Кв1();
	
	МнСтрЧасть = ДанныеОтчета.ДанныеМногостраничныхРазделов;
	Показатели = ДанныеОтчета.ПоказателиОтчета;
	Таблицы    = ДанныеОтчета.ДанныеМногострочныхРазделов;
	
	СтруктураДанныхОтчета = Новый Структура();
	
	ВидыДеятельности = Новый Массив;
	Если МнСтрЧасть.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") И Раздел2.Количество() > 0  Тогда
		Для Каждого ДанныеРаздела2 Из Раздел2 Цикл
			ДанныеРаздела = ДанныеРаздела2.Данные;
			ВидДеятельности = Новый Структура();
			
			ЗначенияПолейАдреса = Новый Структура();
			ЗначенияПолейАдреса.Вставить("Индекс",          ДанныеРаздела[КлючиПоказателей.Индекс]);
			ЗначенияПолейАдреса.Вставить("КодРегиона",      ДанныеРаздела[КлючиПоказателей.КодРегиона]);
			ЗначенияПолейАдреса.Вставить("Район",           ДанныеРаздела[КлючиПоказателей.Район]);
			ЗначенияПолейАдреса.Вставить("Город",           ДанныеРаздела[КлючиПоказателей.Город]);
			ЗначенияПолейАдреса.Вставить("НаселенныйПункт", ДанныеРаздела[КлючиПоказателей.НаселенныйПункт]);
			ЗначенияПолейАдреса.Вставить("Улица",           ДанныеРаздела[КлючиПоказателей.Улица]);
			ЗначенияПолейАдреса.Вставить("Дом",             ДанныеРаздела[КлючиПоказателей.НомерДома]);
			ЗначенияПолейАдреса.Вставить("Корпус",          ДанныеРаздела[КлючиПоказателей.НомерКорпуса]);
			ЗначенияПолейАдреса.Вставить("ОФис",            ДанныеРаздела[КлючиПоказателей.НомерОфиса]);
			
			ВидКонтактнойИнформацииАдреса = Справочники.ВидыДеятельностиЕНВД.ВидКонтактнойИнформацииАдреса();
			
			АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЗначенияПолейАдреса, "", ВидКонтактнойИнформацииАдреса);
			Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML);
			
			ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Адрес);
			
			ВидДеятельности.Вставить("Адрес", Адрес);
			ВидДеятельности.Вставить("АдресСтрокой", ПредставлениеАдреса);
			
			ВидДеятельности.Вставить("ФизическийПоказатель1", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель1]);
			ВидДеятельности.Вставить("ФизическийПоказатель2", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель2]);
			ВидДеятельности.Вставить("ФизическийПоказатель3", ДанныеРаздела[КлючиПоказателей.ФизическийПоказатель3]);
			
			ВидДеятельности.Вставить("Код",                       ДанныеРаздела[КлючиПоказателей.Код]);
			ВидДеятельности.Вставить("КодПоОКТМО",                ДанныеРаздела[КлючиПоказателей.КодПоОКТМО]);
			ВидДеятельности.Вставить("КорректирующийКоэффициент", ДанныеРаздела[КлючиПоказателей.КорректирующийКоэффициент]);
			ВидДеятельности.Вставить("КоэффициентДефлятор",       ДанныеРаздела[КлючиПоказателей.КоэффициентДефлятор]);
			ВидДеятельности.Вставить("БазоваяДоходность",         ДанныеРаздела[КлючиПоказателей.БазоваяДоходность]);
			ВидДеятельности.Вставить("НалоговаяСтавка",           ДанныеРаздела[КлючиПоказателей.НалоговаяСтавка]);
			
			ВидДеятельности.Вставить("ДатаНачала",      ДанныеРаздела[КлючиПоказателей.ДатаПостановкиНаУчет]);
			ВидДеятельности.Вставить("ДатаПрекращения", ДанныеРаздела[КлючиПоказателей.ДатаСнятияСУчета]);
			
			ВидыДеятельности.Добавить(ВидДеятельности);
		КонецЦикла;
		СтруктураДанныхОтчета.Вставить("ВидыДеятельности", ВидыДеятельности);
	Иначе
		СтруктураДанныхОтчета.Вставить("ВидыДеятельности");
	КонецЕсли;
	
	Если Показатели.Свойство("ПолеТабличногоДокументаРаздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		СтруктураДанныхОтчета.Вставить("СуммаСтраховыхВзносов", Раздел3[КлючиПоказателей.СуммаСтраховыхВзносов]);
		СтруктураДанныхОтчета.Вставить("СуммаСтраховыхВзносовЗаСебя", Раздел3[КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя]);
		
		ИспользуетсяТрудНаемныхРаботников = ?(Раздел3[КлючиПоказателей.ПризнакНалогоплательщика] = "1", Истина, Ложь);
		СтруктураДанныхОтчета.Вставить("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников);
		
	КонецЕсли;
	
	РасходыНаОнлайнКассы = Неопределено;
	
	Если Таблицы.Свойство("П00004000", Раздел4) И ТипЗнч(Раздел4) = Тип("ТаблицаЗначений") Тогда
		
		РасходыНаОнлайнКассы = Новый Массив;
		
		Для Каждого СтрокаРаздела4 Из Раздел4 Цикл
			
			Расход = Новый Структура;
			Расход.Вставить("Модель",               СтрокаРаздела4[КлючиПоказателей.МодельККТ]);
			Расход.Вставить("ЗаводскойНомер",       СтрокаРаздела4[КлючиПоказателей.ЗаводскойНомерККТ]);
			Расход.Вставить("РегистрационныйНомер", СтрокаРаздела4[КлючиПоказателей.РегистрационныйНомерККТ]);
			Расход.Вставить("ДатаРегистрации",      СтрокаРаздела4[КлючиПоказателей.ДатаРегистрацииККТ]);
			Расход.Вставить("Сумма",                СтрокаРаздела4[КлючиПоказателей.РасходыНаККТ]);
			
			РасходыНаОнлайнКассы.Добавить(Расход);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДанныхОтчета.Вставить("РасходыНаОнлайнКассы", РасходыНаОнлайнКассы);
	
	Возврат СтруктураДанныхОтчета;
	
КонецФункции

Функция НовыйКонтейнерДанныхДекларацииЕНВД2016Кв1()
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Раздел2", ДанныеДопСтраниц.Раздел2);
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция НовыйКонтейнерДанныхДекларацииЕНВД2018Кв1()
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Раздел2", ДанныеДопСтраниц.Раздел2);
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	// Раздел 4
	
	ДанныеРаздела4 = Новый ТаблицаЗначений;
	
	ДанныеРаздела4.Колонки.Добавить("П000040001003", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ДанныеРаздела4.Колонки.Добавить("П000040002003", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРаздела4.Колонки.Добавить("П000040003003", ОбщегоНазначения.ОписаниеТипаСтрока(16));
	ДанныеРаздела4.Колонки.Добавить("П000040004003", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеРаздела4.Колонки.Добавить("П000040005003",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	РазделыОтчета.Вставить("Раздел4_ДанныеДопСтрок", ДанныеРаздела4);
	
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ДобавитьСтраницуРазделаДекларации(Раздел)
	
	НоваяСтраница = Раздел.Добавить();
	Образец = Раздел[0];
	НоваяСтраница.Данные         = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.Данные);
	НоваяСтраница.ДанныеДопСтрок = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.ДанныеДопСтрок);
	
КонецПроцедуры

Функция КлючиПоказателейДекларацииЕНВД2016Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2
	
	КлючиПоказателей.Вставить("Код", "П000020001000");
	
	КлючиПоказателей.Вставить("Индекс",          "П000020002001");
	КлючиПоказателей.Вставить("КодРегиона",      "П000020002002");
	КлючиПоказателей.Вставить("Район",           "П000020002003");
	КлючиПоказателей.Вставить("Город",           "П000020002004");
	КлючиПоказателей.Вставить("НаселенныйПункт", "П000020002005");
	КлючиПоказателей.Вставить("Улица",           "П000020002006");
	КлючиПоказателей.Вставить("НомерДома",       "П000020002007");
	КлючиПоказателей.Вставить("НомерКорпуса",    "П000020002008");
	КлючиПоказателей.Вставить("НомерОфиса",      "П000020002009");
	
	КлючиПоказателей.Вставить("КодПоОКТМО", "П000020003000");
	
	КлючиПоказателей.Вставить("БазоваяДоходность",         "П000020004003");
	КлючиПоказателей.Вставить("КоэффициентДефлятор",       "П000020005003");
	КлючиПоказателей.Вставить("КорректирующийКоэффициент", "П000020006003");
	
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Да",  "П000020006101");
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Нет", "П000020006102");
	КлючиПоказателей.Вставить("ДатаПостановкиНаУчет", "П000020006201_1");
	
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Да",  "П000020006401");
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Нет", "П000020006402");
	КлючиПоказателей.Вставить("ДатаСнятияСУчета", "П000020006501_1");
	
	КлючиПоказателей.Вставить("ФизическийПоказатель1", "П000020007002");
	КлючиПоказателей.Вставить("ФизическийПоказатель2", "П000020008002");
	КлючиПоказателей.Вставить("ФизическийПоказатель3", "П000020009002");
	
	КлючиПоказателей.Вставить("НалоговаяСтавка", "П000020010503");
	
	// Раздел 3
	
	КлючиПоказателей.Вставить("ПризнакНалогоплательщика", "П000030000503");
	
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносов",       "П000030002003");
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносовЗаСебя", "П000030003003");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция КлючиПоказателейДекларацииЕНВД2018Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2
	
	КлючиПоказателей.Вставить("Код", "П000020001000");
	
	КлючиПоказателей.Вставить("Индекс",          "П000020002001");
	КлючиПоказателей.Вставить("КодРегиона",      "П000020002002");
	КлючиПоказателей.Вставить("Район",           "П000020002003");
	КлючиПоказателей.Вставить("Город",           "П000020002004");
	КлючиПоказателей.Вставить("НаселенныйПункт", "П000020002005");
	КлючиПоказателей.Вставить("Улица",           "П000020002006");
	КлючиПоказателей.Вставить("НомерДома",       "П000020002007");
	КлючиПоказателей.Вставить("НомерКорпуса",    "П000020002008");
	КлючиПоказателей.Вставить("НомерОфиса",      "П000020002009");
	
	КлючиПоказателей.Вставить("КодПоОКТМО", "П000020003000");
	
	КлючиПоказателей.Вставить("БазоваяДоходность",         "П000020004003");
	КлючиПоказателей.Вставить("КоэффициентДефлятор",       "П000020005003");
	КлючиПоказателей.Вставить("КорректирующийКоэффициент", "П000020006003");
	
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Да",  "П000020006101");
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Нет", "П000020006102");
	КлючиПоказателей.Вставить("ДатаПостановкиНаУчет", "П000020006201_1");
	
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Да",  "П000020006401");
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Нет", "П000020006402");
	КлючиПоказателей.Вставить("ДатаСнятияСУчета", "П000020006501_1");
	
	КлючиПоказателей.Вставить("ФизическийПоказатель1", "П000020007002");
	КлючиПоказателей.Вставить("ФизическийПоказатель2", "П000020008002");
	КлючиПоказателей.Вставить("ФизическийПоказатель3", "П000020009002");
	
	КлючиПоказателей.Вставить("НалоговаяСтавка", "П000020010503");
	
	// Раздел 3
	
	КлючиПоказателей.Вставить("ПризнакНалогоплательщика", "П000030000503");
	
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносов",       "П000030002003");
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносовЗаСебя", "П000030003003");
	
	// Раздел 4
	КлючиПоказателей.Вставить("МодельККТ",               "П000040001003");
	КлючиПоказателей.Вставить("ЗаводскойНомерККТ",       "П000040002003");
	КлючиПоказателей.Вставить("РегистрационныйНомерККТ", "П000040003003");
	КлючиПоказателей.Вставить("ДатаРегистрацииККТ",      "П000040004003");
	КлючиПоказателей.Вставить("РасходыНаККТ",            "П000040005003");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Процедура ВставитьЗначениеДопСтроки(ДанныеДопСтрок, КлючПоказателя, Значение)
	
	Перем ТаблицаПоказателя;
	
	СоставКлюча = СтрРазделить(КлючПоказателя, "_");
	Если СоставКлюча.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СоставКлюча[0];
	ИмяТаблицы = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2);
	
	ДанныеДопСтрок.Свойство(ИмяТаблицы, ТаблицаПоказателя);
	Если ТаблицаПоказателя = Неопределено Тогда
		ТаблицаПоказателя = Новый ТаблицаЗначений;
		ТаблицаПоказателя.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
	
	ТаблицаПоказателя.Очистить();
	НоваяСтрока = ТаблицаПоказателя.Добавить();
	НоваяСтрока[ИмяКолонки] = Значение;
	
	ДанныеДопСтрок.Вставить(ИмяТаблицы, ТаблицаПоказателя);
	
КонецПроцедуры

Функция ПредставлениеФлажка(Значение)
	
	Возврат ?(Значение, "V", "");
	
КонецФункции

#КонецОбласти

#Область ДекларацияУСН

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Функция ПолучитьДанныеДекларацииУСН2015кв1(ДанныеОтчета)
	
	Раздел21 = Неопределено;
	ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРаздел21", Раздел21);
	
	Если Раздел21 = Неопределено Тогда
		// Отсутствуют сохраненные данные раздела 2.1 отчета
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеМП = Новый Структура;
	
	ДанныеМП.Вставить("СтавкаНалога", Раздел21.П002110012003);
	
	ИспользуетсяТрудНаемныхРаботников = ?(Раздел21["П002110010203"] = "1", Истина, Ложь);
	ДанныеМП.Вставить("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников);
	
	ДоходыПредыдущихКварталов = 0;
	ВзносыПредыдущихКварталов = 0;
	
	Для НомерКвартала = 1 По 4 Цикл
		Индекс = НомерКвартала - 1;
		
		ДоходыТекущегоПериода = Раздел21["П002110011" + Индекс + "03"];
		ВзносыТекущегоПериода = Раздел21["П002110014" + Индекс + "03"];
		СтавкаНалогаЗаКвартал = Раздел21["П002110012" + Индекс + "03"];
		
		// Доходы и взносы в МП хранятся за каждый квартал, без нарастающего итога
		ДанныеМП.Вставить("Доходы" + НомерКвартала + "Квартал", ДоходыТекущегоПериода - ДоходыПредыдущихКварталов);
		ДанныеМП.Вставить("СтраховыеВзносы" + НомерКвартала + "Квартал", ВзносыТекущегоПериода - ВзносыПредыдущихКварталов);
		ДанныеМП.Вставить("СтавкаНалога" + НомерКвартала + "Квартал", СтавкаНалогаЗаКвартал);
		
		ДоходыПредыдущихКварталов = ДоходыТекущегоПериода;
		ВзносыПредыдущихКварталов = ВзносыТекущегоПериода;
	КонецЦикла;
	
	Возврат ДанныеМП;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларациюУСН2015Кв1(ДанныеМП, Контейнер)
	
	ДанныеОтчета = ДанныеМП.ДанныеОтчета; 
	
	ДоходыНарастающимИтогом = 0;
	ВзносыНарастающимИтогом = 0;
	
	СтавкаНалогаУСН = 6; // По умолчанию
	Если ДанныеОтчета.Свойство("СтавкаНалога") И ТипЗнч(ДанныеОтчета.СтавкаНалога) = Тип("Число") Тогда
		СтавкаНалогаУСН = ДанныеОтчета.СтавкаНалога;
	КонецЕсли;
	
	ИспользуетсяТрудНаемныхРаботников = Ложь;
	Если НЕ ДанныеОтчета.Свойство("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников) Тогда
		ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(ДанныеМП.Организация);
	КонецЕсли;
	Контейнер.Раздел21.Вставить("П002110010203", ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
	
	Для НомерКвартала = 1 По 4 Цикл
		ДоходыЗаКвартал = 0;
		ВзносыЗаКвартал = 0;
		СтавкаНалогаЗаКвартал = 0;
		
		Если ДанныеОтчета.Свойство("Доходы" + НомерКвартала + "Квартал", ДоходыЗаКвартал) Тогда
			ДоходыНарастающимИтогом = ДоходыНарастающимИтогом + ДоходыЗаКвартал;
		КонецЕсли;
		Если ДанныеОтчета.Свойство("СтраховыеВзносы" + НомерКвартала + "Квартал", ВзносыЗаКвартал) Тогда
			ВзносыНарастающимИтогом = ВзносыНарастающимИтогом + ВзносыЗаКвартал;
		КонецЕсли;
		Если НЕ ДанныеОтчета.Свойство("СтавкаНалога" + НомерКвартала + "Квартал", СтавкаНалогаЗаКвартал) Тогда
			СтавкаНалогаЗаКвартал = СтавкаНалогаУСН;
		КонецЕсли;
		
		Индекс = НомерКвартала - 1;
		
		Контейнер.Раздел21.Вставить("П002110011" + Индекс + "03", ДоходыНарастающимИтогом);
		Контейнер.Раздел21.Вставить("П002110014" + Индекс + "03", ВзносыНарастающимИтогом);
		
		Контейнер.Раздел21.Вставить("П002110012" + Индекс + "03", СтавкаНалогаЗаКвартал);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура НайтиСоздатьУзлыОбмена(СтруктураПараметров)
	
	СтруктураПараметров.ЦентральныйУзел = ПланыОбмена.МобильнаяБухгалтерия.ЭтотУзел();
	СписокРеквизитовЦентральногоУзла = "Код, Организация";
	РеквизитыЦентральногоУзла        = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ЦентральныйУзел, СписокРеквизитовЦентральногоУзла);
	
	Если НЕ ЗначениеЗаполнено(РеквизитыЦентральногоУзла.Код) Тогда
		
		УзелОбъект = СтруктураПараметров.ЦентральныйУзел.ПолучитьОбъект();
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Код = "001";
		УзелОбъект.Наименование = "Центральный";
		УзелОбъект.Записать();
		
		//Установим начальные настройки
		Если Справочники.Организации.КоличествоОрганизаций() = 0 Тогда
			ПроверитьУстановитьНастройкиИБ();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЦентральногоУзла.Организация) Тогда
		//Узел организации может быть передан явно
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			СтруктураПараметров.Организация = РеквизитыЦентральногоУзла.Организация;
		КонецЕсли;
		ПеренестиНастройкиПриложения(СтруктураПараметров);
	КонецЕсли;
	
	СтруктураПараметров.УзелОбмена = ПланыОбмена.МобильнаяБухгалтерия.НайтиПоКоду(СтруктураПараметров.УзелОбменаКод);
	Если СтруктураПараметров.УзелОбмена.Пустая() Тогда
		
		//Узел организации может быть передан явно
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			СтруктураПараметров.Организация = Организация;
		КонецЕсли;
		
		НовыйУзел = ПланыОбмена.МобильнаяБухгалтерия.СоздатьУзел();
		НовыйУзел.Код                = СтруктураПараметров.УзелОбменаКод;
		НовыйУзел.Наименование       = СтруктураПараметров.УзелОбменаИмя;
		НовыйУзел.Организация        = СтруктураПараметров.Организация;
		НовыйУзел.ДатаНачалаВыгрузки = СтруктураПараметров.ДатаНачалаВыгрузки;
		НовыйУзел.Префикс            = ПолучитьПрефиксНовогоУзлаОбмена();
		
		НовыйУзел.Записать();
		
		СтруктураПараметров.УзелОбмена             = НовыйУзел.Ссылка;
		
		ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(СтруктураПараметров);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбменаПоИмениУзла(Параметры, ИмяУзлаОбмена)
	
	ВерсияСхемы = 0;
	УзелОбменаИмя = "";
	//В имени содержится номер версии схемы обмена в формате "version=X"
	//От имени отделен символом ";"
	Если ЗначениеЗаполнено(ИмяУзлаОбмена) Тогда
		СписокПараметровИзСтроки = СтрРазделить(ИмяУзлаОбмена, ";");
		Для Каждого ЗначениеПараметра Из СписокПараметровИзСтроки Цикл
			Если СтрНачинаетсяС(ЗначениеПараметра, "version=") Тогда
				ВерсияСхемыСтрокой = СтрЗаменить(ЗначениеПараметра, "version=", "");
				ВерсияСхемы = ?(ПустаяСтрока(ВерсияСхемыСтрокой), ВерсияСхемы, Число(ВерсияСхемыСтрокой));
			КонецЕсли;
		КонецЦикла;
		УзелОбменаИмя = СписокПараметровИзСтроки[0];
	КонецЕсли;
	
	Параметры.ВерсияСхемы = ВерсияСхемы;
	Параметры.УзелОбменаИмя = УзелОбменаИмя;
	
КонецПроцедуры

Функция СоздатьСтруктуруПараметровСинхронизации()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УзелОбмена",                     Неопределено);
	СтруктураПараметров.Вставить("УзелОбменаКод",                  "");
	СтруктураПараметров.Вставить("УзелОбменаИмя",                  "");
	СтруктураПараметров.Вставить("ПерваяСинхронизация",            Ложь);
	СтруктураПараметров.Вставить("ВерсияСхемы",                    0);
	СтруктураПараметров.Вставить("ЦентральныйУзел",                Неопределено);
	СтруктураПараметров.Вставить("Организация",                    Неопределено);
	СтруктураПараметров.Вставить("ДатаНачалаРаботы",               '00010101');
	СтруктураПараметров.Вставить("ДатаСинхронизации",              '00010101');
	СтруктураПараметров.Вставить("ДатаНачалаВыгрузки",             '00010101');
	СтруктураПараметров.Вставить("РасчетНалоговВБП",                Ложь);
	СтруктураПараметров.Вставить("КолВыгружено",                    0);
	СтруктураПараметров.Вставить("ПервичнаяИнициализацияВыполнена", Истина);
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СериализоватьСсылку(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		СсылкаСериализованная = Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		СсылкаСериализованная = "";
	КонецЕсли;
	
	Возврат СсылкаСериализованная;
	
КонецФункции

Функция ДесериализоватьСсылкуНаСправочник(СсылкаСериализованная, ИмяОбъекта) Экспорт
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Справочники[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьКлючевыеСвойстваПоСсылке(Ссылка, ИмяОбъекта)
	
	КлючевыеСвойства = СоздатьОбъектXDTO(ИмяОбъекта + "КлючевыеСвойства");
	КлючевыеПоля = Новый Массив;
	Для Каждого Свойство Из КлючевыеСвойства.Тип().Свойства Цикл
		Если Свойство.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		КлючевыеПоля.Добавить(Свойство.Имя);
	КонецЦикла;
	КлючевыеСвойства.Ссылка = СериализоватьСсылку(Ссылка);
	
	ЗаполнитьЗначенияСвойств(КлючевыеСвойства, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтрСоединить(КлючевыеПоля,",")));
	
	Возврат КлючевыеСвойства;
	
КонецФункции

Функция ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(КлючевыеСвойства, ИмяОбъекта)
	
	МенеджерОбъекта = Справочники[ИмяОбъекта];
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(КлючевыеСвойства.Ссылка, ИмяОбъекта);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Результат = Неопределено;
		Если ИмяОбъекта = "ДополнительныеУсловия" Тогда
			Результат = МенеджерОбъекта.НайтиПоРеквизиту("ИмяМакета", КлючевыеСвойства.ИмяМакета);
		ИначеЕсли ИмяОбъекта = "КлассификаторЕдиницИзмерения"
			ИЛИ ИмяОбъекта = "СтраныМира" Тогда
			Если ЗначениеЗаполнено(КлючевыеСвойства.Код) Тогда
				Результат = МенеджерОбъекта.НайтиПоКоду(КлючевыеСвойства.Код);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ЕстьКлючевыеСвойства(ОбъектXDTOКлючевыеСвойства)
	
	ЕстьКлючевыеСвойства = Ложь;
	Попытка
		ЕстьКлючевыеСвойства = ОбъектXDTOКлючевыеСвойства.Свойства().Количество()> 0;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьКлючевыеСвойства;
	
КонецФункции

Функция ДесериализоватьСсылкуНаДокумент(СсылкаСериализованная, ИмяОбъекта) Экспорт
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Документы[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Документы[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ДесериализоватьСсылку(Знач СсылкаСериализованная, МенеджерОбъектаПоУмолчанию = Неопределено) Экспорт
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Неопределено;
	Иначе
		ПозицияДвоеточия = СтрНайти(СсылкаСериализованная, ":");
		Если ПозицияДвоеточия = 0 Тогда
			// В ссылке явный тип не передан, используем тип по умолчанию.
			МенеджерОбъекта = МенеджерОбъектаПоУмолчанию;
		Иначе
			ПолноеИмяОбъекта  = Лев(СсылкаСериализованная, ПозицияДвоеточия - 1);
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			Если МетаданныеОбъекта <> Неопределено Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
			КонецЕсли;
			
			// GUID ссылки задается после ":".
			СсылкаСериализованная = Сред(СсылкаСериализованная, ПозицияДвоеточия + 1);
		КонецЕсли;

		Если МенеджерОбъекта <> Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
			Ссылка = МенеджерОбъекта.ПолучитьСсылку(Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьОбъектXDTO(ТипОбъекта) Экспорт
	
	URIПространстваИмен = "http://www.1c.ru/EA/MobileAccounting";
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, ТипОбъекта));
	
КонецФункции

Функция ЗарегистрироватьОшибкиОбмена(Ошибки, ИмяСобытия)
	
	Для каждого Ошибка Из Ошибки Цикл
		ЗарегистрироватьОшибкуОбмена(Ошибка, ИмяСобытия);
	КонецЦикла;
	
КонецФункции

Функция ЗарегистрироватьОшибкуОбмена(ТекстОшибки, ИмяСобытия, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.MobileAccounting, Данные, ТекстОшибки);
	
КонецФункции

Функция ПолучитьДокументРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента, Дата)
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументРасчетовСКонтрагентом.Ссылка
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Организация = &Организация
	|	И ДокументРасчетовСКонтрагентом.Контрагент = &Контрагент
	|	И ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРасчетовСКонтрагентом.Дата";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		ДокументРасчетов                    = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		ДокументРасчетов.Дата               = Дата;
		ДокументРасчетов.Организация        = Организация;
		ДокументРасчетов.Контрагент         = Контрагент;
		ДокументРасчетов.ВалютаДокумента    = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		ДокументРасчетов.ДоговорКонтрагента = ДоговорКонтрагента;
					
		ДокументРасчетов.Записать();
		
		Возврат ДокументРасчетов.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьВидОплатыПоКонтрагенту(Организация, Контрагент, ДоговорКонтрагента = Неопределено)
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидОплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидОплаты
	|ГДЕ
	|	ВидОплаты.Организация = &Организация
	|	И ВидОплаты.Контрагент = &Контрагент
	|	И &ДоговорКонтрагента
	|	И НЕ ВидОплаты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОплаты.Код";
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоговорКонтрагента", "ВидОплаты.ДоговорКонтрагента = &ДоговорКонтрагента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоговорКонтрагента", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		ВидОплаты                    = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		ВидОплаты.Наименование       = "Эквайринг " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
		ВидОплаты.ТипОплаты          = Перечисления.ТипыОплат.ПлатежнаяКарта;
		ВидОплаты.СчетУчетаРасчетов  = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		ВидОплаты.Организация        = Организация;
		ВидОплаты.Контрагент         = Контрагент;
		ВидОплаты.ДоговорКонтрагента = ДоговорКонтрагента;
		
		Если НЕ ЗначениеЗаполнено(ВидОплаты.ДоговорКонтрагента) Тогда
			ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			ВидОплаты.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(
					Неопределено, Организация, Контрагент, ВалютаРеглУчета, 
					Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		КонецЕсли;
		
		ВидОплаты.Записать();
		
		Возврат ВидОплаты.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуОплатДляВыгрузки(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК Сумма,
	|	ВидыОплатОрганизаций.Контрагент КАК Контрагент,
	|	ВидыОплатОрганизаций.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыОплатОрганизаций.Контрагент,
	|	ВидыОплатОрганизаций.ДоговорКонтрагента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает ссылку на значение перечисления по имени.
//
// Параметры:
//  ПеречислениеМенеджер - ПеречислениеМенеджер - менеджер перечисления, для которого необходимо получить ссылку.
//  ИмяЗначения - Строка - имя перечисления, для которого необходимо получить ссылку.
//
// Возвращаемое значение:
//  ПеречислениеСсылка - ссылка на значение перечисления. Пустая ссылка, если значения с таким именем нет.
//
Функция ЗначениеПеречисленияПоИмени(ПеречислениеМенеджер, ИмяЗначения)
	
	ПустаяСсылка = ПеречислениеМенеджер.ПустаяСсылка();
	Если ПустаяСтрока(ИмяЗначения) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	ОбъектМетаданных     = ПустаяСсылка.Метаданные();
	ЗначениеПеречисления = ОбъектМетаданных.ЗначенияПеречисления.Найти(ИмяЗначения);
	Если ЗначениеПеречисления = Неопределено Тогда
		Возврат ПустаяСсылка;
	Иначе
		ИндексЗначения = ОбъектМетаданных.ЗначенияПеречисления.Индекс(ЗначениеПеречисления);
		Возврат ПеречислениеМенеджер[ИндексЗначения];
	КонецЕсли;
	
КонецФункции

// Функция-обертка для ОбщегоНазначения.ИмяЗначенияПеречисления. Перед преобразование проверяет на не пустое значение
//
// Параметры:
//  ЗначениеПеречисления - ПеречислениеСсылка - менеджер перечисления, для которого необходимо получить ссылку.
//
// Возвращаемое значение:
// ИмяЗначения - Строка
//
Функция ИмяЗначенияПеречисления(ЗначениеПеречисления)
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
	
КонецФункции

// Возвращает строку вида "ТипОбъекта.ИмяОбъекта:GUIDСсылки".
//
Функция СериализоватьТипИСсылку(Ссылка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Ссылка);
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипСсылки);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("%1:%2", МетаданныеОбъекта.ПолноеИмя(), СериализоватьСсылку(Ссылка));

КонецФункции

Процедура ЗаполнитьСуммаВзаиморасчетовСтрокиРасшифровкиПлатежа(СтрокаПлатежа, ПараметрыПлатежа)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
		
		СтрокаПлатежа.КратностьВзаиморасчетов = 1;
		СтрокаПлатежа.КурсВзаиморасчетов      = 1;
		СтрокаПлатежа.СуммаВзаиморасчетов     = СтрокаПлатежа.СуммаПлатежа;
		
	Иначе
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтрокаПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		Если СвойстваДоговора.РасчетыВУсловныхЕдиницах Тогда
			СтрокаПлатежа.КратностьВзаиморасчетов = 1;
			СтрокаПлатежа.КурсВзаиморасчетов      = 1;
			СтрокаПлатежа.СуммаВзаиморасчетов     = СтрокаПлатежа.СуммаПлатежа;
		Иначе
		
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
			
			СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			СтрокаПлатежа.СуммаВзаиморасчетов     = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатежа.СуммаПлатежа,
				ПараметрыПлатежа.ВалютаДокумента, СвойстваДоговора.ВалютаВзаиморасчетов,
				1, СтрокаПлатежа.КурсВзаиморасчетов,
				1, СтрокаПлатежа.КратностьВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция АктуализироватьРасчетНалоговВФоне(ПараметрыАктуализации, СообщениеОбОшибке) Экспорт
	
	// Действия по актуализации выполняем в фоновом задании,
	// т.к. выполнение может занять длительное время.
	
	ПараметрыПроцедуры = Новый Структура();
	ПараметрыПроцедуры.Вставить("ПараметрыАктуализации", ПараметрыАктуализации);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"МобильнаяБухгалтерия.АктуализироватьРасчетНалогов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Если ДлительнаяОперация.Статус = "Выполняется" 
		ИЛИ ДлительнаяОперация.Статус = "Выполнено" Тогда
		СообщениеОбОшибке = "";
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщениеОбОшибке = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		СообщениеОбОшибке =  НСтр("ru = 'Не удалось запустить актуализацию.'");
	КонецЕсли;
		
	Возврат ?(ЗначениеЗаполнено(ДлительнаяОперация.ИдентификаторЗадания), Строка(ДлительнаяОперация.ИдентификаторЗадания), "");
	
КонецФункции

Процедура АктуализироватьРасчетНалогов(Параметры, АдресРезультата) Экспорт
	
	РезультатЗадания = Новый Структура();
	РезультатЗадания.Вставить("СообщениеОбОшибке",   "");
	РезультатЗадания.Вставить("РезультатВыполнения", Неопределено);
	
	Попытка
		РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(Параметры.ПараметрыАктуализации, Ложь);
		РезультатЗадания.РезультатВыполнения = РезультатВыполнения.ЗаданиеВыполнено;
	Исключение
		РезультатЗадания.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Записываем в качестве служебного сообщения в очередь сообщений фонового задания результат выполнения задания.
	// АдресРезультата не используем, т.к. временное хранилище будет удалено после окончания сеанса веб-сервиса,
	// который запустил текущее фоновое задание по генерации пароля.
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СообщениеРезультатаФоновогоЗадания()); // Вставляем маркер служебного сообщения.
	МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(РезультатЗадания));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСтрок));
	
КонецПроцедуры

Функция ПолучитьПрефиксНовогоУзлаОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МобильнаяБухгалтерия.Ссылка) КАК КоличествоУзлов
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК МобильнаяБухгалтерия";
	
	УзлыИБ = Запрос.Выполнить().Выгрузить()[0];
	КоличествоУзлов = УзлыИБ.КоличествоУзлов; //всегда есть 1 узел
	
	НомерНовогоУзла = ?(КоличествоУзлов > 99, КоличествоУзлов - Цел(КоличествоУзлов/100)*100 + 1, КоличествоУзлов);
	
	Возврат СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНовогоУзла, 2, "0", "Слева");
	
КонецФункции

Процедура ЗаполнитьАктСверкиПоДаннымИБ(Объект)
	
	СтруктураПараметров = Новый Структура;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураПараметров.Вставить("ДатаНачала",                    Объект.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",                 Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация",                   Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("СОбособленнымиПодразделениями", Объект.СОбособленнымиПодразделениями);
	СтруктураПараметров.Вставить("ВыводитьСчетаФактуры",          Объект.ВыводитьСчетаФактуры);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    Объект.СверкаСогласована);
	СтруктураПараметров.Вставить("Валюта", ?((Объект.ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, Объект.ВалютаДокумента));
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, Объект.ДоговорКонтрагента));
	
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	АдресХранилища 		= ПоместитьВоВременноеХранилище(Неопределено);
	Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Объект.ОстатокНаНачало = 0;
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") 
		И СтруктураДанных.Успешно Тогда
		
		Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
		Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
		Если Объект.СверкаСогласована Тогда
			Объект.ПоДаннымКонтрагента.Загрузить(СтруктураДанных.ПоДаннымКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУстановитьДатуВводаНачальныхОстатков(ДатаВводаНачальныхОстатков, Организация, УзелОбменаОтправитель = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
	КонецЕсли;
	
	Если НачалоГода(НаборЗаписей[0].ДатаВводаНачальныхОстатков)
		<> НачалоГода(ДатаВводаНачальныхОстатков) Тогда
		НаборЗаписей[0].Организация = Организация;
		НаборЗаписей[0].ДатаВводаНачальныхОстатков = ДатаВводаНачальныхОстатков;
	Иначе
		Возврат;
	КонецЕсли;
	
	//Если не передан узел  - регистрируем изменения дял выгрузки обратно
	Если УзелОбменаОтправитель <> Неопределено Тогда
		НаборЗаписей.ОбменДанными.Отправитель = УзелОбменаОтправитель;
	КонецЕсли;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьНастройкиУчетнойПолитики(Организация)
	
	НастройкиУчетаУСН = РегистрыСведений.НастройкиУчетаУСН.СоздатьНаборЗаписей();
	НастройкиУчетаУСН.Отбор.Организация.Установить(Организация);
	
	НастройкиУчетаНДС = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
	НастройкиУчетаНДС.Отбор.Организация.Установить(Организация);
	
	НастройкиУчетаНДФЛ = РегистрыСведений.НастройкиУчетаНДФЛ.СоздатьНаборЗаписей();
	НастройкиУчетаНДФЛ.Отбор.Организация.Установить(Организация);
	
	НастройкиБухгалтерскогоУчета = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НастройкиБухгалтерскогоУчета.Отбор.Организация.Установить(Организация);
	
	НастройкиУчетаНалогаНаПрибыль = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьНаборЗаписей();
	НастройкиУчетаНалогаНаПрибыль.Отбор.Организация.Установить(Организация);
	
	НастройкиСистемыНалогообложения = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	НастройкиСистемыНалогообложения.Отбор.Организация.Установить(Организация);
	
	НастройкиУчетаСтраховыхВзносовИП = РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП.Отбор.Организация.Установить(Организация);
	
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.СоздатьНаборЗаписей();
	НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.Отбор.Организация.Установить(Организация);
	
	НачатьТранзакцию();
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаУСН);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДС);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНДФЛ);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиБухгалтерскогоУчета);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаНалогаНаПрибыль);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиСистемыНалогообложения);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#Область РегистрацияИзмененийНачальнойВыгрузкиДанных

// Выполняет регистрацию изменений для начальной выгрузки данных с учетом даты начала выгрузки и списка организаций.
// Процедура является универсальной и может быть использована для регистрации изменений данных по дате начала выгрузки
// и списку организаций для объектных типов данных и наборов записей регистров.
// Если список организаций не задан (Организации = Неопределено), то изменения регистрируются только по дате начала
// выгрузки.
// Регистрации подлежат данные для всех объектов метаданных, включенных в состав плана обмена.
// Если для объекта метаданных в составе плана обмена установлен признак авторегистрации
// или если признак авторегистрации не установлен и правила регистрации не заданы,
// то регистрация изменений будет выполнена безусловно для всех данных этого типа.
// Если для объекта метаданных заданы правила регистрации, то регистрация изменений будет выполнена 
// с учетом даты начала выгрузки и списка организаций.
// Для документов поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Для бизнес-процессов и для задач поддерживается регистрация изменений по дате начала выгрузки.
// Для наборов записей регистров поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Данная процедура может служить прототипом для разработки собственных процедур регистрации изменений
// для начальной выгрузки данных.
//
// Параметры:
//
//  Получатель - ПланОбменаСсылка - Узел плана обмена,
//               для которого требуется выполнить регистрацию изменений данных.
//  ДатаНачалаВыгрузки - Дата - дата, относительно которой необходимо выполнить
//               регистрацию изменений данных для выгрузки. Изменения будут зарегистрированы для данных,
//               которые на оси времени располагаются после этой даты.
//  Организация - СправочникСсылка.Организация - Организация, для которой необходимо выполнить регистрацию
//               изменений данных.
//
Процедура ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(ПараметрыОбмена, ДанныеОтбора = Неопределено) Экспорт
	
	Получатель = ПараметрыОбмена.УзелОбмена;
	Организация = ПараметрыОбмена.Организация;
	ДатаНачалаВыгрузки = ПараметрыОбмена.ДатаНачалаВыгрузки;
	
	Если Справочники.Организации.КоличествоОрганизаций() = 1 Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена.МобильнаяБухгалтерия.Состав;
	
	ИспользоватьФильтрПоМетаданным = (ТипЗнч(ДанныеОтбора) = Тип("Массив"));
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ИспользоватьФильтрПоМетаданным
			И ДанныеОтбора.Найти(ЭлементСоставаПланаОбмена.Метаданные) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбъектМетаданных = ЭлементСоставаПланаОбмена.Метаданные;
		ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда // Документы
				
				Если ЗначениеЗаполнено(Организация) ИЛИ ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
									
					Выборка = ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизации(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организация);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда // Справочники
				
				Если ОбъектМетаданных = Справочники.Банки Тогда
					
					Выборка = ВыборкаИспользуемыхБанков();
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
					
					ИмяРеквизитаОрганизация = ИмяРеквизитаОрганизацияСправочника(ОбъектМетаданных);
					
					Если НЕ ПустаяСтрока(ИмяРеквизитаОрганизация) Тогда // Регистрация по организациям.
						
						Выборка = ВыборкаСправочниковПоОрганизации(ПолноеИмяОбъекта, ИмяРеквизитаОрганизация, Организация);
						
						Пока Выборка.Следующий() Цикл
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
							
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда // Регистры сведений
				
				// Регистры сведений (независимые).
				Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					Выборка = Неопределено;
					
					ОтборПоСвойствам = Новый Соответствие();
					Если ОбъектМетаданных = Метаданные.РегистрыСведений.ЗадачиБухгалтера Тогда
						
						ОтборПоСвойствам.Вставить("Таблица.ВАрхиве = &ЗначениеПараметра" , Ложь);
					ИначеЕсли ОбъектМетаданных = Метаданные.РегистрыСведений.СтатусыДокументов Тогда
						
						ОтборПоСвойствам.Вставить("(Таблица.Документ ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ Таблица.Документ ССЫЛКА Документ.СчетНаОплатуПокупателю)", Неопределено);
						Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
							ОтборПоСвойствам.Вставить("Таблица.Документ.Дата >= &ЗначениеПараметра", ДатаНачалаВыгрузки);
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
						Если ОбъектМетаданных = Метаданные.РегистрыСведений.СостоянияБанковскихДокументов Тогда
							ОтборПоСвойствам.Вставить("Таблица.СсылкаНаОбъект.Дата >= &ЗначениеПараметра", ДатаНачалаВыгрузки);
						ИначеЕсли ОбъектМетаданных = Метаданные.РегистрыСведений.ЧекиНПД Тогда
							ОтборПоСвойствам.Вставить("Таблица.ДокументОснование.Дата >= &ЗначениеПараметра", ДатаНачалаВыгрузки);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Организация) ИЛИ ОтборПоСвойствам.Количество() > 0 Тогда
						
						ОсновнойОтбор = ОсновнойОтборРегистраСведений(ОбъектМетаданных);
					    						
						ИмяИзмеренияОрганизация = ИмяИзмеренияОрганизацияНабора(ОбъектМетаданных, ОсновнойОтбор);
					
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ИмяИзмеренияОрганизация, Организация, ОтборПоСвойствам);
							
						Если Выборка <> Неопределено И Выборка.Количество() > 0 Тогда
							
							НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
							
							Пока Выборка.Следующий() Цикл
								
								Для Каждого ИмяИзмерения Из ОсновнойОтбор Цикл
									
									НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка[ИмяИзмерения];
									НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
									
								КонецЦикла;
								
								ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
								
							КонецЦикла;
							
							Продолжить;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ЭлементСоставаПланаОбмена.Метаданные);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизации(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организация)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Организация = &Организация
	|	И &ОтборПоДате";
	
	Если Организация = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Организация = &Организация", "Истина");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДате", "Таблица.Дата >= &ДатаНачалаВыгрузки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДате", "Истина");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаИспользуемыхБанков()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанковскиеСчета.Банк КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанковскиеСчета.БанкДляРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета";

	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаСправочниковПоОрганизации(ПолноеИмяОбъекта, РеквизитОрганизация, Организация)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	&РеквизитОрганизация ССЫЛКА Справочник.Организации
	|	И &РеквизитОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	НЕ &РеквизитОрганизация ССЫЛКА Справочник.Организации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитОрганизация", "Таблица." + РеквизитОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ИмяИзмеренияОрганизация, Организация, ОтборПоСвойствам)
	
	Запрос = Новый Запрос;
						
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ИмяИзмеренияОрганизация) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Измерения
		|ИЗ
		|	&ПолноеИмяОбъекта КАК Таблица
		|ГДЕ
		|	&Отбор";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Измерения
		|ИЗ
		|	&ПолноеИмяОбъекта КАК Таблица
		|ГДЕ
		|	&ИзмерениеОрганизация ССЫЛКА Справочник.Организации
		|	И &ИзмерениеОрганизация = &Организация
		|	И &Отбор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Измерения
		|ИЗ
		|	&ПолноеИмяОбъекта КАК Таблица
		|ГДЕ
		|	НЕ &ИзмерениеОрганизация ССЫЛКА Справочник.Организации
		|	И &Отбор";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмерениеОрганизация", "Таблица." + ИмяИзмеренияОрганизация);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	УсловияОтбора = Новый Массив;
	
	Если ЗначениеЗаполнено(ОтборПоСвойствам) Тогда
		Сч = 1;
		Для Каждого ЭлементОтбора Из ОтборПоСвойствам Цикл
			ТекстУсловия = ЭлементОтбора.Ключ;
			
			Если ЭлементОтбора.Значение <> Неопределено Тогда
				ИмяПараметра = "ЗначениеПараметра" + Сч;
				ТекстУсловия = СтрЗаменить(ТекстУсловия, "ЗначениеПараметра", ИмяПараметра);
				Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
				Сч = Сч + 1;
			КонецЕсли;
			УсловияОтбора.Добавить(ТекстУсловия);
		КонецЦикла;
	Иначе
		УсловияОтбора.Добавить("ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", СтрСоединить(УсловияОтбора, " И "));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ОсновнойОтборРегистраСведений(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Процедура дополняет список узлов-получателей объекта переданными значениями.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект и т.п. - объект, для которого выполняется правило регистрации.
//  Узлы   - Массив - узлы плана обмена, которые необходимо добавить в список узлов-получателей объекта.
//
Процедура ДополнитьПолучателей(Объект, Узлы)
	
	Для Каждого Элемент Из Узлы Цикл
		
		Попытка
			Объект.ОбменДанными.Получатели.Добавить(Элемент);
		Исключение
			ИмяПланаОбмена = Элемент.Метаданные().Имя;
			ОбъектМетаданных = Объект.Метаданные();
			СтрокаСообщения = НСтр("ru = 'Для состава плана обмена [ИмяПланаОбмена] не указана регистрация объекта [ПолноеИмя]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПолноеИмя]",      ОбъектМетаданных.ПолноеИмя());
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяРеквизитаОрганизацияСправочника(ОбъектМетаданных)
	
	ИмяРеквизитаОрганизация = "";
	
	ТипОрганизацияСсылка = Тип("СправочникСсылка.Организации");
	
	Если ОбъектМетаданных = Метаданные.Справочники.Организации Тогда
		ИмяРеквизитаОрганизация = "Ссылка";
	ИначеЕсли ОбъектМетаданных = Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы Тогда
		ИмяРеквизитаОрганизация = "ВладелецФайла";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ОбъектМетаданных) Тогда
		ИмяРеквизитаОрганизация = "Организация";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ГоловнаяОрганизация", ОбъектМетаданных) Тогда
		ИмяРеквизитаОрганизация = "ГоловнаяОрганизация";
	ИначеЕсли ОбъектМетаданных.Владельцы.Количество()> 0
		И ОбъектМетаданных.Владельцы.Содержит(Метаданные.Справочники.Организации) Тогда
		ИмяРеквизитаОрганизация = "Владелец";
	КонецЕсли;
	
	Возврат ИмяРеквизитаОрганизация;
	
КонецФункции

Функция ИмяИзмеренияОрганизацияНабора(ОбъектМетаданных, ОсновнойОтбор)
	
	ИмяРеквизитаОрганизация = "";
	
	ТипОрганизацияСсылка = Тип("СправочникСсылка.Организации");
	
	Для Каждого ПроверяемыйРеквизит Из ВозможныеИменаИзмеренияОрганизацияРегистраСведений() Цикл
		ОтборПоОрганизации = ОсновнойОтбор.Найти(ПроверяемыйРеквизит);
		Если ОтборПоОрганизации <> Неопределено
			И ОбъектМетаданных.Измерения[ПроверяемыйРеквизит].Тип.СодержитТип(ТипОрганизацияСсылка) Тогда
			ИмяРеквизитаОрганизация = ПроверяемыйРеквизит;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяРеквизитаОрганизация;
	
КонецФункции

Функция ВозможныеИменаИзмеренияОрганизацияРегистраСведений()
	
	ПроверяемыйРеквизиты = Новый Массив;
	ПроверяемыйРеквизиты.Добавить("Организация");
	ПроверяемыйРеквизиты.Добавить("ГоловнаяОрганизация");
	ПроверяемыйРеквизиты.Добавить("СтруктурнаяЕдиница");
	ПроверяемыйРеквизиты.Добавить("ФизическоеЛицо");
	
	Возврат ПроверяемыйРеквизиты;
	
КонецФункции

#КонецОбласти

#Область РасчетНалогов

Функция НачатьРасчетНалогов(СтруктураПараметров, СообщениеОбОшибке) Экспорт
	
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXDTO(СтруктураПараметров);
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации         = Неопределено;
	УникальныйИдентификаторФормы             = Новый УникальныйИдентификатор;
	ИдентификаторОрганизации                 = Новый УникальныйИдентификатор(СтруктураПараметров.Организация);
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	ПараметрыАктуализации.Период                       = КонецМесяца(?(ТипЗнч(СтруктураПараметров.Период) = Тип("Дата"), СтруктураПараметров.Период, ТекущаяДатаСеанса()));
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = Ложь;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	ИдентификаторЗадания = АктуализироватьРасчетНалоговВФоне(ПараметрыАктуализации, СообщениеОбОшибке);
	
	СтруктураПараметров.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	СтруктураПараметров = СериализаторXDTO.ЗаписатьXDTO(СтруктураПараметров);
	
	Возврат Не ЗначениеЗаполнено(СообщениеОбОшибке);
	
КонецФункции

Функция ДанныеПлатежаПоЗадачеБухгалтера(СтруктураПараметров, СообщениеОбОшибке) Экспорт
	
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXDTO(СтруктураПараметров);
	
	ОрганизацияСсылка = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	Если СтруктураПараметров.ИдПравила = "ПАТЕНТ" Тогда
		Правило = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.ИдЗадачи, "Патенты");
	Иначе
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
											СтруктураПараметров.ИдЗадачи, 
											СтруктураПараметров.ИдПравила);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗадачиБухгалтера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(ОрганизацияСсылка);
	НаборЗаписей.Отбор.ПериодСобытия.Установить(СтруктураПараметров.ПериодСобытия);
	НаборЗаписей.Отбор.Правило.Установить(Правило);
	НаборЗаписей.Отбор.РегистрацияВНалоговомОргане.Установить(Справочники.НалоговыеОрганы.ПустаяСсылка());
	НаборЗаписей.Прочитать();
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыКоманды, НаборЗаписей[0]);
	Иначе
		ПараметрыКоманды.Организация   = ОрганизацияСсылка;
		ПараметрыКоманды.Правило       = Правило;
		ПараметрыКоманды.ПериодСобытия = СтруктураПараметров.ПериодСобытия;
		ПараметрыКоманды.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Налоги")
		И СтруктураПараметров.Налоги.Количество() > 0  Тогда
		
		ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
		Если ОписаниеДействия <> Неопределено И ОписаниеДействия.Свойство("ИмяФормы") Тогда
			ПомощникВыполненияЗадачи = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеДействия.ИмяФормы);
		Иначе
			ПомощникВыполненияЗадачи = Неопределено;
		КонецЕсли;
	
		Для Каждого Налог Из СтруктураПараметров.Налоги Цикл
			
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоИмени(Налог.НалогКод);
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВидНалоговогоОбязательстваПоИмени(Налог.ВидПлатежа);
			
			СвойстваКонтекста = ИсточникДанныхКонтекстаПлатежаВБюджет(СтруктураПараметров.ПериодСобытия, ОрганизацияСсылка,
				Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога), ВидНалоговогоОбязательства);
			Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(СвойстваКонтекста);
			
			РеквизитыПлатежаВБюджет = Документы.ПлатежноеПоручение.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
				СтруктураПараметров.ПериодСобытия, ОрганизацияСсылка, Истина,
				Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога), ВидНалоговогоОбязательства, Контекст);
			
			Если Налог.НалогКод = "УСН_Доходы"
				ИЛИ Налог.НалогКод = "УСН_ДоходыМинусРасходы"
				ИЛИ Налог.НалогКод = "ФиксированныеВзносы_ПФР_СтраховаяЧасть" 
				ИЛИ Налог.НалогКод = "ФиксированныеВзносы_ФФОМС" 
				ИЛИ Налог.НалогКод = "ФиксированныеВзносы_ФСС" Тогда
				
				ПараметрыРасчетаСуммы = ПараметрыРасчетаНалогаКУплате(
					ОрганизацияСсылка, СтруктураПараметров.ПериодСобытия, ВидНалога, ВидНалоговогоОбязательства);
				
				СуммаПлатежа = ПомощникВыполненияЗадачи.СуммаНалогаКУплате(ПараметрыРасчетаСуммы);
				
			Иначе
				СуммаПлатежа = 0;
			КонецЕсли;
			
			//Сериализуем значения ссылочных типов
			РеквизитыПлатежаВБюджет.Вставить("ВидПеречисленияВБюджет", ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыПлатежаВБюджет.ВидПеречисленияВБюджет));
			РеквизитыПлатежаВБюджет.Вставить("Получатель", МобильнаяБухгалтерия.СериализоватьСсылку(РеквизитыПлатежаВБюджет.Получатель));
			РеквизитыПлатежаВБюджет.Вставить("СчетПолучателя", МобильнаяБухгалтерия.СериализоватьСсылку(РеквизитыПлатежаВБюджет.СчетПолучателя));
			
			РеквизитыПлатежаВБюджет.Вставить("СуммаПлатежа", СуммаПлатежа);
			
			Если РеквизитыПлатежаВБюджет.Свойство("ПорядокУплатыНалога") Тогда
				РеквизитыПлатежаВБюджет.Удалить("ПорядокУплатыНалога");
			КонецЕсли;
			
			Налог.Вставить("РеквизитыПлатежа", РеквизитыПлатежаВБюджет);
			Налог.Вставить("ОКТМО", РеквизитыПлатежаВБюджет.КодОКАТО);
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыЗадачи = Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи();
		ПараметрыЗадачи.СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, Ложь);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ПараметрыКоманды);
		
		ПараметрыЗадачи.ПравилоУплаты = ПараметрыКоманды.Правило;
		ПараметрыЗадачи.ПериодОтчета  = Обработки.ПомощникУплатыНалога.ПериодОтчетаПоПравилуУплаты(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.ПериодСобытия);
		ПараметрыЗадачи.ПравилоОтчета = Обработки.ПомощникУплатыНалога.ПравилоОтчетаПоПравилуУплаты(ПараметрыЗадачи.ПравилоУплаты, ПараметрыЗадачи.Организация, ПараметрыЗадачи.ПериодОтчета);
			
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		
		Обработки.ПомощникУплатыНалога.СведенияПоЗадаче(ПараметрыЗадачи, АдресХранилища);
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		СведенияОРасчетеСуммы = РезультатВыполнения.СведенияОРасчетеСуммы;
		ТаблицаПлатежей = СведенияОРасчетеСуммы.ТаблицаПлатежей;
		
		Если НЕ СведенияОРасчетеСуммы.РасчетСуммыВыполнен Или ТаблицаПлатежей = Неопределено Тогда
			СообщениеОбОшибке = "Налог не расчитан или не заполнена декларация";
		Иначе
			
			ЕстьКолонкаНалог     = (ТаблицаПлатежей.Колонки.Найти("Налог") <> Неопределено);
			ЕстьКолонкаВидНалога = (ТаблицаПлатежей.Колонки.Найти("ВидНалога") <> Неопределено);
			Для Каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
			
				Если ЕстьКолонкаВидНалога И ЗначениеЗаполнено(СтрокаПлатежа.ВидНалога) Тогда
					ВидНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(СтрокаПлатежа.ВидНалога);
				ИначеЕсли ЕстьКолонкаНалог И ЗначениеЗаполнено(СтрокаПлатежа.Налог) Тогда
					ВидНалога = СтрокаПлатежа.Налог;
				Иначе
					ВидНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаПлатежа.КБК)
				КонецЕсли;
					
				СвойстваКонтекста = ИсточникДанныхКонтекстаПлатежаВБюджет(СтруктураПараметров.ПериодСобытия, ОрганизацияСсылка,
					ВидНалога, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(СвойстваКонтекста);
			
				РеквизитыПлатежаВБюджет = Документы.ПлатежноеПоручение.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
					СтруктураПараметров.ПериодСобытия, ОрганизацияСсылка, Истина, ВидНалога, Перечисления.ВидыПлатежейВГосБюджет.Налог, Контекст);
					
				СуммаПлатежа = СтрокаПлатежа.Сумма - СтрокаПлатежа.СуммаОплачено;
				РеквизитыПлатежаВБюджет.Вставить("СуммаПлатежа", СуммаПлатежа);
				РеквизитыПлатежаВБюджет.Вставить("КодОКАТО", СтрокаПлатежа.ОКАТО);
				РеквизитыПлатежаВБюджет.Вставить("ПоказательПериода", СведенияОРасчетеСуммы.ПоказательПериода);
				//Сериализуем значения ссылочных типов
				РеквизитыПлатежаВБюджет.Вставить("ВидПеречисленияВБюджет", ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыПлатежаВБюджет.ВидПеречисленияВБюджет));
				РеквизитыПлатежаВБюджет.Вставить("Получатель", МобильнаяБухгалтерия.СериализоватьСсылку(РеквизитыПлатежаВБюджет.Получатель));
				РеквизитыПлатежаВБюджет.Вставить("СчетПолучателя", МобильнаяБухгалтерия.СериализоватьСсылку(РеквизитыПлатежаВБюджет.СчетПолучателя));
				
				Если РеквизитыПлатежаВБюджет.Свойство("ПорядокУплатыНалога") Тогда
					РеквизитыПлатежаВБюджет.Удалить("ПорядокУплатыНалога");
				КонецЕсли;
				
				СтруктураНалога = Новый Структура;
				СтруктураНалога.Вставить("НалогНаименование", СтрокаПлатежа.Наименование);
				СтруктураНалога.Вставить("ОКТМО", СтрокаПлатежа.ОКАТО);
				СтруктураНалога.Вставить("НалогКод", СтрокаПлатежа.Наименование);
				СтруктураНалога.Вставить("ВидПлатежа", "Налог");
				СтруктураНалога.Вставить("РеквизитыПлатежа", РеквизитыПлатежаВБюджет);
				
				СтруктураПараметров.Налоги.Добавить(СтруктураНалога);

			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураПараметров);
	
КонецФункции

Функция ИсточникДанныхКонтекстаПлатежаВБюджет(ПериодПлатежа, Организация, Налог, ВидНалоговогоОбязательства)
	
	СвойстваКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	
	СвойстваКонтекста.Период                     = ПериодПлатежа;
	СвойстваКонтекста.ПериодПлатежа              = ПериодПлатежа;
	СвойстваКонтекста.Организация                = Организация;
	СвойстваКонтекста.Налог                      = Налог;
	СвойстваКонтекста.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	
	Возврат СвойстваКонтекста;
	
КонецФункции

Функция ПараметрыРасчетаНалогаКУплате(Организация, НалоговыйПериод, ВидНалога, ВидНалоговогоОбязательства)
	
	ПараметрыРасчета = ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате();
	
	ПараметрыРасчета.Организация                = Организация;
	ПараметрыРасчета.НалоговыйПериод            = НалоговыйПериод;
	ПараметрыРасчета.ВидНалога                  = ВидНалога;
	ПараметрыРасчета.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ПараметрыРасчетаПатентаКУплате(СтруктураПараметров, СообщениеОбОшибке) Экспорт
	
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXDTO(СтруктураПараметров);
	Организация         = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	Патент              = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Патент, "Патенты");
	ПериодСобытия       = СтруктураПараметров.ПериодСобытия;
	ВидНалога           = ЗначениеПеречисленияПоИмени(Перечисления.ВидыНалогов, СтруктураПараметров.ВидНалога);

	ДокументыУплатыПатента = Обработки.ПомощникОплатыПатента.ДокументыУплатыПатента(Организация, Патент, ПериодСобытия, ВидНалога);
	Уплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ДокументыУплатыПатента);
	
	РасходыСтраховыеВзносы =
		РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыПСНЗаГод(Организация, ПериодСобытия);
		
	Результат = Новый Структура;
	Результат.Вставить("РасходыСтраховыеВзносы", РасходыСтраховыеВзносы);
	Результат.Вставить("Уплачено",               Уплачено);
		
	Возврат СериализаторXDTO.ЗаписатьXDTO(Результат);
	
КонецФункции


#КонецОбласти

Функция ЕстьНастройкаЯндексКассыДляОрганизации(Организация, ВидОплатыЯндексКасса)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЯндексКассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
	|ГДЕ
	|	НастройкиЯндексКассы.Организация = &Организация
	|	И НЕ НастройкиЯндексКассы.Недействительна";
	
	ЕстьНастройкиЯндексКассыДляОрганизации = НЕ Запрос.Выполнить().Пустой();

	Если ЕстьНастройкиЯндексКассыДляОрганизации Тогда
		ВидОплатыЯндексКасса = ИнтеграцияСЯндексКассойБП.НайтиИлиСоздатьВидОплаты(Организация);
	КонецЕсли; 
	
	Возврат ЕстьНастройкиЯндексКассыДляОрганизации;
КонецФункции

#КонецОбласти

#Область ОграниченияФункциональностиМобильногоПриложения

Функция ВидыОперацийБанкКассаМобильноеПриложение()
	
	Менеджер = Перечисления.ВидыОперацийСписаниеДенежныхСредств;
	СписокВидов = Новый Массив;
	СписокВидов.Добавить(Менеджер.ОплатаПоставщику);
	СписокВидов.Добавить(Менеджер.ПеречислениеНалога);
	СписокВидов.Добавить(Менеджер.КомиссияБанка);
	СписокВидов.Добавить(Менеджер.ЛичныеСредстваПредпринимателя);
	СписокВидов.Добавить(Менеджер.СнятиеНаличных);
	СписокВидов.Добавить(Менеджер.ВозвратПокупателю);
	СписокВидов.Добавить(Менеджер.ПрочееСписание);
	СписокВидов.Добавить(Менеджер.ПеречислениеЗаработнойПлатыРаботнику);
	
	Менеджер = Перечисления.ВидыОперацийРКО;
	СписокВидов.Добавить(Менеджер.ОплатаПоставщику);
	СписокВидов.Добавить(Менеджер.ВозвратПокупателю);
	СписокВидов.Добавить(Менеджер.УплатаНалога);
	СписокВидов.Добавить(Менеджер.ВыплатаЗаработнойПлатыПоВедомостям);
	СписокВидов.Добавить(Менеджер.ВыплатаЗаработнойПлатыРаботнику);
	СписокВидов.Добавить(Менеджер.ВзносНаличнымиВБанк);
	СписокВидов.Добавить(Менеджер.ВозвратЗайма);
	СписокВидов.Добавить(Менеджер.ВыдачаЗаймаКонтрагенту);
	СписокВидов.Добавить(Менеджер.ЛичныеСредстваПредпринимателя);
	СписокВидов.Добавить(Менеджер.ПрочийРасход);
	
	Менеджер = Перечисления.ВидыОперацийПоступлениеДенежныхСредств;
	СписокВидов.Добавить(Менеджер.ОплатаПокупателя);
	СписокВидов.Добавить(Менеджер.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	СписокВидов.Добавить(Менеджер.ВозвратОтПоставщика);
	СписокВидов.Добавить(Менеджер.ПолучениеЗайма);
	СписокВидов.Добавить(Менеджер.ПереводСДругогоСчета);
	СписокВидов.Добавить(Менеджер.ВзносНаличными);
	СписокВидов.Добавить(Менеджер.ЛичныеСредстваПредпринимателя);
	СписокВидов.Добавить(Менеджер.ПрочееПоступление);
	
	Менеджер = Перечисления.ВидыОперацийПКО;
	СписокВидов.Добавить(Менеджер.ОплатаПокупателя);
	СписокВидов.Добавить(Менеджер.ВозвратОтПоставщика);
	СписокВидов.Добавить(Менеджер.ПолучениеНаличныхВБанке);
	СписокВидов.Добавить(Менеджер.ПолучениеЗайма);
	СписокВидов.Добавить(Менеджер.ВозвратЗаймаКонтрагентом);
	СписокВидов.Добавить(Менеджер.ЛичныеСредстваПредпринимателя);
	СписокВидов.Добавить(Менеджер.ПрочийПриход);
	СписокВидов.Добавить(Менеджер.РозничнаяВыручка);
	
	Возврат СписокВидов;
	
КонецФункции

Функция ВидыДоговоровКонтрагентаРедактируемыхВМобильномПриложении()
	
	Менеджер = Перечисления.ВидыДоговоровКонтрагентов;
	СписокВидов = Новый Массив;
	СписокВидов.Добавить(Менеджер.СПокупателем);
	СписокВидов.Добавить(Менеджер.СПоставщиком);
	СписокВидов.Добавить(Менеджер.Прочее);
	
	Возврат СписокВидов;
	
КонецФункции

Функция ДокументЗапрещеноРедактироватьВМобильномПриложении(ДанныеДокумента)
	
	Если ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		НеПоддерживаемыйВидОперации = ВидыОперацийБанкКассаМобильноеПриложение().Найти(ДанныеДокумента.ВидОперации) = Неопределено;
		Если НеПоддерживаемыйВидОперации Тогда
			Возврат Истина;
		КонецЕсли;
	
		Если ТипЗнч(ДанныеДокумента) <> Тип("ДокументОбъект.ПлатежноеПоручение")
			И ДанныеДокумента.РасшифровкаПлатежа.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
			И ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
			И ЗначениеЗаполнено(ДанныеДокумента.ПлатежнаяВедомость)Тогда
			
			Если ТипЗнч(ДанныеДокумента.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Возврат Истина;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВедомостьНаВыплатуЗарплатыВКассуЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьНаВыплатуЗарплатыВКассуЗарплата
			|ГДЕ
			|	ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Ссылка = &ПлатежнаяВедомость";
			Запрос.УстановитьПараметр("ПлатежнаяВедомость", ДанныеДокумента.ПлатежнаяВедомость);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
			ИЛИ ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.ПлатежноеПоручение"))
			И ЗначениеЗаполнено(ДанныеДокумента.ПлатежнаяВедомость) Тогда
			
			Если ТипЗнч(ДанныеДокумента.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Возврат Истина;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
			|ГДЕ
			|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка = &ПлатежнаяВедомость";
			Запрос.УстановитьПараметр("ПлатежнаяВедомость", ДанныеДокумента.ПлатежнаяВедомость);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 1 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДокумента.ВалютаДокумента <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоговорКонтрагента) Тогда
		ПроверямыеРеквизиты = Новый Структура("ОплатаВВалюте");
		ПроверямыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДокумента.ДоговорКонтрагента, ПроверямыеРеквизиты);
		Если ПроверямыеРеквизиты.ОплатаВВалюте = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления


Процедура ВыполнитьПереходКУчетуПоДоговорамКонтрагентов(СтруктураПараметров)
	
	Попытка
		
		Отбор = Новый Массив;
		Отбор.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
		Отбор.Добавить(Метаданные.РегистрыСведений.ОсновныеДоговорыКонтрагента);
		Отбор.Добавить(Метаданные.Константы.ВестиУчетПоДоговорам);
		
		ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(СтруктураПараметров, Отбор);
		
	Исключение
		ЗарегистрироватьОшибкуОбмена(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			"МобильнаяБухгалтерия.ВыполнитьПереходКУчетуПоДоговорамКонтрагентов");
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ПолучитьДанныеДокументовПоступления(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Организация = &Организация
	|	И ПоступлениеТоваровУслуг.Дата >= &ДатаНачалаВыгрузки
	|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Организация = &Организация
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &ДатаНачалаВыгрузки
	|	И (ПоступлениеТоваровУслугУслуги.ОтражениеВУСН <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	|			ИЛИ ПоступлениеТоваровУслугУслуги.Субконто1 <> НЕОПРЕДЕЛЕНО
	|				И ПоступлениеТоваровУслугУслуги.Субконто1 <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка))";
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", СтруктураПараметров.ДатаНачалаВыгрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиНастройкиПриложения(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильнаяБухгалтерия.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК МобильнаяБухгалтерия
	|ГДЕ
	|	МобильнаяБухгалтерия.Организация = &ПустаяОрганизация
	|	И НЕ МобильнаяБухгалтерия.ЭтотУзел";
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектУзла = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектУзла.Организация = СтруктураПараметров.Организация;
		ОбъектУзла.Записать();
	КонецЦикла;

	//Перенесем настройки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильнаяБухгалтерия.Ссылка КАК Ссылка,
	|	МобильнаяБухгалтерия.Организация КАК Организация,
	|	МобильнаяБухгалтерия.УдалитьОбщиеНастройки КАК ОбщиеНастройки,
	|	МобильнаяБухгалтерия.УдалитьДатаНачалаРаботы КАК ДатаНачалаРаботы
	|ИЗ
	|	ПланОбмена.МобильнаяБухгалтерия КАК МобильнаяБухгалтерия
	|ГДЕ
	|	МобильнаяБухгалтерия.Организация <> &ПустаяОрганизация
	|	И МобильнаяБухгалтерия.ЭтотУзел";
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	ВыборкаПоУзлам = Запрос.Выполнить().Выбрать();
	Если ВыборкаПоУзлам.Следующий() Тогда
		НачатьТранзакцию();
		ОбъектУзла = ВыборкаПоУзлам.Ссылка.ПолучитьОбъект();
		
		НовыеНастройкиОрганизации = ОбъектУзла.НастройкиПриложения.Добавить();
		НовыеНастройкиОрганизации.Организация         = ВыборкаПоУзлам.Организация;
		НовыеНастройкиОрганизации.НастройкиПриложения = ВыборкаПоУзлам.ОбщиеНастройки;
		
		ОбъектУзла.Организация      = Неопределено;
		ОбъектУзла.УдалитьОбщиеНастройки   = Неопределено;
		ОбъектУзла.УдалитьДатаНачалаРаботы = Неопределено;
		ОбъектУзла.Записать();
		
		ДатаВводаНачальныхОстатков = НачалоГода(ВыборкаПоУзлам.ДатаНачалаРаботы) -1;
		СтараяДатаВВодаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(ВыборкаПоУзлам.Организация);
		Если НЕ ЗначениеЗаполнено(СтараяДатаВВодаНачальныхОстатков) Тогда
			ПроверитьУстановитьДатуВводаНачальныхОстатков(ДатаВводаНачальныхОстатков, ВыборкаПоУзлам.Организация, СтруктураПараметров.УзелОбмена);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДвиженияУдаленныхДокументов(Параметры) Экспорт
	
	Если НЕ ОбменДаннымиВключен() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СписокДокументов") Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("РеализацияТоваровУслуг");
		СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
		СписокДокументов.Добавить("ПриходныйКассовыйОрдер");
		СписокДокументов.Добавить("РасходныйКассовыйОрдер");
		СписокДокументов.Добавить("ПоступлениеНаРасчетныйСчет");
		СписокДокументов.Добавить("СписаниеСРасчетногоСчета");
		СписокДокументов.Добавить("ОтчетОРозничныхПродажах");
		
		Параметры.Вставить("СписокДокументов", СписокДокументов);
	КонецЕсли;
	
	Если Параметры.СписокДокументов.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		ТипДокумента = Параметры.СписокДокументов[0];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО Хозрасчетный.Регистратор = РеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	Хозрасчетный.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И РеализацияТоваровУслуг.Дата ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", ТипДокумента);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Параметры.СписокДокументов.Удалить(0);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			//Создание документа
			НовыйДокумент = Документы[ТипДокумента].СоздатьДокумент();
			НовыйДокумент.УстановитьСсылкуНового(Выборка.Регистратор);
			НовыйДокумент.Проведен = Истина;
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			НовыйДокумент.Записать();
			
			//Очистка движений
			НовыйДокумент.ОбменДанными.Загрузка = Ложь;
			НовыйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			//Удаление документа
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			НовыйДокумент.Удалить();
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре МобильнаяБухгалтерия.ОчиститьДвиженияУдаленныхДокументов() не удалось очистить движения удаленного документа по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Регистратор,
				ТекстСообщения);
				
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 И ОбъектовОбработано = 0 Тогда
		//Повторный проход для обработки исключительных ситуаций результата не дал
		Параметры.СписокДокументов.Удалить(0);
	ИначеЕсли ПроблемныхОбъектов > 0 Тогда
		//Попробуем обработать проблемные объекты за второй проход
	ИначеЕсли ОбъектовОбработано < 1000 Тогда
		//Проблем нет и все объекты выбраны за один проход
		Параметры.СписокДокументов.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиФайлПодписиРуководителяВПрисоединенныеФайлыФизлиц(Организация, СсылкаНаФайлПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИндивидуальныйПредприниматель, ЮридическоеФизическоеЛицо");
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		РуководительФизЛицо = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
	Иначе
		РуководительФизЛицо = Неопределено;
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, КонецДня(ТекущаяДатаСеанса()));
		Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
			РуководительФизЛицо = Руководители.Руководитель;
		КонецЕсли;
	КонецЕсли;
	
	Если РуководительФизЛицо <> Неопределено Тогда
		
		//Факсимиле было удалено в мобильном - пришла пустая ссылка
		Если ЗначениеЗаполнено(СсылкаНаФайлПодписи) Тогда
			НачатьТранзакцию();
			Попытка
				
				ФаксимилеПодписи = Справочники.Организации.СкопироватьПрисоединенныйФайл(СсылкаНаФайлПодписи, РуководительФизЛицо);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
		Иначе
			ФаксимилеПодписи = Справочники.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка();
		КонецЕсли;
		
		ФизическоеЛицоОбъект = РуководительФизЛицо.ПолучитьОбъект();
		ФизическоеЛицоОбъект.ФаксимилеПодписи = ФаксимилеПодписи;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФизическоеЛицоОбъект, Истина);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПодключенияНПД

Функция ПодключитьПриложениеКСервисуИнтеграции() Экспорт
	
	Результат = ИнтеграцияСПлатформойСамозанятые.ПодключитьПриложениеКСервисуИнтеграции();
	Результат.Вставить("URL",      Константы.АдресСервисаИнтеграцииСПлатформойСамозанятые.Получить());
	Результат.Вставить("UserName", ИмяСлужебногоПользователяСервисаИнтеграции());
	Результат.Вставить("Password", ПарольСлужебногоПользователяСервисаИнтеграции());
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

Функция ВладелецДанныхСлужебногоПользователя()
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.АдресСервисаИнтеграцииСПлатформойСамозанятые");
	
КонецФункции

Функция ИмяСлужебногоПользователяСервисаИнтеграции()
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецДанныхСлужебногоПользователя(), КлючДанныхИмяСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИмяСлужебногоПользователя;
	
КонецФункции

Функция КлючДанныхИмяСлужебногоПользователя()
	
	Возврат "ИмяСлужебногоПользователяСервисаИнтеграцииСПлатформойСамозанятые";
	
КонецФункции

Функция ПарольСлужебногоПользователяСервисаИнтеграции()
	
	УстановитьПривилегированныйРежим(Истина);
	ПарольСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ВладелецДанныхСлужебногоПользователя(), КлючДанныхПарольСлужебногоПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПарольСлужебногоПользователя;
	
КонецФункции

Функция КлючДанныхПарольСлужебногоПользователя()
	
	Возврат "ПарольСлужебногоПользователяСервисаИнтеграцииСПлатформойСамозанятые"
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалогаНаСтраховыеВзносы

Функция НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("УИД");
	Данные.Колонки.Добавить("ДатаВыдПат");
	Данные.Колонки.Добавить("НомерПат");
	Данные.Колонки.Добавить("СумНалПатУм");
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы()
	
	Данные = Новый Структура;
	
	Данные.Вставить("ОбщСумНалПатУм", 0);
	Данные.Вставить("ПрНП", "");
	Данные.Вставить("СумСтрВзнУмНал", 0);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

