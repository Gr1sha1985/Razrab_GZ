
#Область СлужебныйПрограммныйИнтерфейс

#Область КонвертацияФорматированногоДокументаВФорматRTF

// Преобразует форматированный документ 1С в документ формата RTF
Процедура КонвертироватьВФорматRTF(ФорматированныйДокумент, ИмяФайла) Экспорт
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	
	СоответствиеТегов = ПолучитьСоответствиеТегов(ФорматированныйДокумент);
	ЗаписьТекста.ЗаписатьСтроку(НачалоRTF(СоответствиеТегов));
	НомерСписка = 0;
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Если Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
			
			НомерСписка = НомерСписка + 1;
			
		Иначе
			
			НомерСписка = 0;
			
		КонецЕсли;
		ПараграфRTF = ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка);
		ЗаписьТекста.ЗаписатьСтроку(ПараграфRTF);
		
	КонецЦикла;
	ЗаписьТекста.ЗаписатьСтроку(КонецRTF());
	
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// Ищет ссылку на номенклатуру поставщика по идентификатору
//
// Параметры:
//  Идентификатор			 - Строка	 - идентификатор номенклатуры поставщика
//  Контрагент				 - СправочникСсылка.Контрагенты	 - ссылка на поставщика
//  ТипВозвращаемогоЗначения - Строка	 - возможные значения: "Номенклатура", "НоменклатураПоставщика"
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, СправочникСсылка.НоменклатураПоставщика - ссылка на справочник
//
Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура") Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Идентификатор = &Идентификатор
	|	И СпрНоменклатура.Владелец = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрНоменклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
			Результат = Выборка.Номенклатура;
		Иначе
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда был найден всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата) Экспорт
	
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	
	ПолноеИмяДопФайла = Неопределено;
	СтруктураОбмена.Свойство("ПолноеИмяДопФайла", ПолноеИмяДопФайла);

	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(
		СтруктураОбмена.ПолноеИмяФайла,
		СтруктураОбмена.СтруктураЭД.НаправлениеЭД,
		Новый Структура("ИмяФайлаДопДанных", ПолноеИмяДопФайла));
		
	Если ТабличныйДокумент <> Неопределено Тогда
		СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
		
		ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
			+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
		
		ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать табличный документ (подробности см. в Журнале регистрации).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ФайлСохранения = Неопределено;
	КонецЕсли;
	
	Возврат ФайлСохранения;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива.
// Проверяется максимальная длина полного имени файла в 255 символов.
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив.
//  ПапкаРаспаковки - Строка - папка, в которую будут извлечены данные.
//  ИмяСоздаваемогоФайла - Строка - имя файла, который не может быть извлечен.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаФайловXML);
	ДанныеДокумента = Неопределено;
	ФайлДанных = Неопределено;
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ТекстОшибки = ТаблицаДанных[0].ТекстОшибки;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;		
		ДанныеДокумента = ТаблицаДанных[0].ДанныеДокумента;
		ФайлДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных[0].ФайлДанных, ИдентификаторФормы);		
		
	КонецЕсли;		
	Если ДанныеДокумента = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;       	
	СтруктураЭД = ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных);
	
	Возврат СтруктураЭД;
	
КонецФункции 

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
	
	Попытка
		Результат = СоздатьОбъектИБ(СтруктураЭД.ДанныеДокумента, СтруктураЭД.Контрагент);
		ДокументПоступления = Неопределено;
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			Для Каждого Документ Из Результат Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ДокументПоступления = Документ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(Результат) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ДокументПоступления = Результат;
			КонецЕсли;
		КонецЕсли;
		Возврат ДокументПоступления;
	Исключение
		ШаблонСообщения = НСтр("ru='%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

Функция ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных, НаименованиеКонтрагента = "") Экспорт
	
	ДеревоРазбора = ДанныеДокумента.ДеревоРазбора;
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	
	СсылкаКонтрагента = Неопределено;
	Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		
		ТипУчастника = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, "СведенияОПродавце.ТипУчастника");
		Если ТипУчастника = "ЮЛ" Тогда
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, "СведенияОПродавце.ТипУчастника.ЮЛ.ИНН");
		Иначе
			ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаОбъекта.ЗначениеРеквизита, "СведенияОПродавце.ТипУчастника.ИП.ИНН");
		КонецЕсли;
		СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН);
	Иначе
		СсылкаКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина, ДеревоРазбора);	
		Если СсылкаКонтрагента = Неопределено Или СсылкаКонтрагента.Пустая() Тогда
			
			ИндексСтрокиКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);	
			СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
			ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "ИНН", Истина, ДеревоРазбора);
			КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "КПП", Истина, ДеревоРазбора);
			
			СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
			Если СсылкаКонтрагента = Неопределено Тогда
				
				СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН); // если не найден по ИНН и КПП, ищем только по ИНН
				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СсылкаКонтрагента) Тогда
				
				СсылкаКонтрагента = НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено, НаименованиеКонтрагента); // если не находим по ИНН, создаем нового контрагента
				
			КонецЕсли;
			СтрокаКонтрагента.СсылкаНаОбъект = СсылкаКонтрагента;
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДокумента.СтрокаОбъекта = СтрокаОбъекта;
	АдресДанныхДокумента = ПоместитьВоВременноеХранилище(ДанныеДокумента, ИдентификаторФормы);
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", СтрокаОбъекта.ВидЭД);
	СтруктураЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен);
	СтруктураЭД.Вставить("ДанныеФайлаРазбора", ФайлДанных);
	СтруктураЭД.Вставить("Контрагент"    , СсылкаКонтрагента);                                        
	СтруктураЭД.Вставить("НаправлениеЭД" , Перечисления.НаправленияЭД.Входящий);
	СтруктураЭД.Вставить("ВладелецФайла" , Неопределено);  
	СтруктураЭД.Вставить("ДанныеДокумента" , АдресДанныхДокумента);
	
	Возврат СтруктураЭД;  
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, НаименованиеКонтрагента = "") Экспорт
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);	
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент= Справочники.Контрагенты.СоздатьЭлемент();		
	Иначе
		Контрагент= СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	ДанныеКонтрагента       = СтрокаДляЗагрузки;
	ПолноеНаименование      = ДанныеКонтрагента.Строки.Найти("ПолноеНаименование", "Реквизит", Истина);
	ЮрФизЛицо               = ДанныеКонтрагента.Строки.Найти("ЮрФизЛицо", "Реквизит", Истина);	
	ЮрАдресСтруктурой       = ДанныеКонтрагента.Строки.Найти("АдресСтруктурой", "Реквизит", Истина);
	Телефон       			= ДанныеКонтрагента.Строки.Найти("Телефоны", "Реквизит", Истина);
	Контакты                = ДанныеКонтрагента.Строки.Найти("Контакты", "Реквизит", Истина); 	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		
		Контрагент.Наименование = НаименованиеКонтрагента;
		
	Иначе
		
		Контрагент.Наименование = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
		
	КонецЕсли;
	Контрагент.НаименованиеПолное = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП; 
	Контрагент.ЮридическоеФизическоеЛицо = ?(ЮрФизЛицо = Неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, ЮрФизЛицо.ЗначениеРеквизита);
	
	// Контактная информация
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
	Если ЮрАдресСтруктурой <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, ЮрАдресСтруктурой.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		
	КонецЕсли;
	
	Если Телефон <> Неопределено Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, Телефон.ЗначениеРеквизита,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		
	КонецЕсли;
	
	Контрагент.Записать();
	
	// Банковский счет
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	ИДБанковскогоСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "БанковскийСчетКонтрагента", Истина);
	НайденныеСтроки = ДеревоРазбора.Строки.Найти(ИДБанковскогоСчета, "ИндексСтроки", Истина);
	Если НайденныеСтроки <> Неопределено Тогда
				
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "НомерСчета", Истина);
		Если ЗначениеЗаполнено(НомерСчета) Тогда	
		
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Владелец", Контрагент.Ссылка);
			
			БанковскийСчет = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
			Если БанковскийСчет = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
				БанковскийСчет.НомерСчета = НомерСчета;
			Иначе
				БанковскийСчет = БанковскийСчет.Получитьобъект();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
				
				ДанныеБанка = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "Банк", Истина, ДеревоРазбора);
				Если ДанныеБанка <> Неопределено Тогда
					
					БанкБИК = ДанныеБанка.Код;
					Если ЗначениеЗаполнено(БанкБИК) Тогда
						
						Банк = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("Банки", БанкБИК);
						Если Не ЗначениеЗаполнено(Банк) Тогда
							
							МассивБанковИзКлассификатора = Новый Массив;
							МассивБанковИзКлассификатора.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору(БанкБИК));
							РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
							Банк = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект("Банки", БанкБИК);
							
						КонецЕсли;						
						БанковскийСчет.Банк = Банк;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643"); 
			БанковскийСчет.Наименование = Строка(Банк) + " (" + БанковскийСчет.НомерСчета  + ", руб.)";
			БанковскийСчет.Записать();
			                 
		КонецЕсли;
		
	КонецЕсли;		
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Процедура ПолучитьДанныеВФорматеБЭД(ПараметрыВызоваСервера, АдресХранилища) Экспорт
		
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;
	Результат = Новый Структура;
	ДанныеФайла = ЗагрузитьФайлВТаблицу(ИмяВременногоФайла);
	ДанныеДокумента = ПолучитьДанныеДокумента(ДанныеФайла.Лист1);
	Если ДанныеДокумента.Свойство("ТекстОшибки") Тогда
		Результат.Вставить("ТекстОшибки", ДанныеДокумента.ТекстОшибки);
	Иначе
		Если ДанныеДокумента.Свойство("НомерСчФ") Тогда
			Результат.Вставить("НомерСчФ", ДанныеДокумента.НомерСчФ);
			Результат.Вставить("ДатаСчФ", ДанныеДокумента.ДатаСчФ);
		КонецЕсли;
		ФайлЭД = ЗаписатьДанныеВXML(ДанныеДокумента);
		Если ФайлЭД = Неопределено Тогда
			Результат.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось получить данные из файла. Подробности см. в журнале регистрации.'"));
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлЭД);
			Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);
			УдалитьФайлы(ФайлЭД);
		КонецЕсли;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Формирует пакеты электронных документов для быстрого обмена.
//
// Параметры:
//  СериализуемыеОбъекты - Массив - ссылки на сериализуемые документы.
//
// Возвращаемое значение:
//  Массив - пакеты электронных документов.
//
Функция СериализоватьОбъекты(СериализуемыеОбъекты) Экспорт
	
	ПакетыЭД = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СериализуемыеОбъекты)
		ИЛИ ТипЗнч(СериализуемыеОбъекты) <> Тип("Массив") Тогда
		
		Возврат ПакетыЭД;
		
	КонецЕсли;
	
	// объекты всегда будут одного типа
	ТипСериализуемыхОбъектов = ТипЗнч(СериализуемыеОбъекты[0]);
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Попытка
			ПакетыЭД = Документы.РеализацияТоваровУслуг.СформироватьРеализациюТоваровИУслугВXML(СериализуемыеОбъекты);
		Исключение
			
		КонецПопытки
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		Попытка
			
			ПакетыЭД = Документы.СчетНаОплатуПокупателю.СформироватьСчетаНаОплатуПокупателюВXML(СериализуемыеОбъекты);
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Отправка документов по электронной почте'");
			ТекстОшибки = НСтр("ru = 'Произошли ошибки при формировании электронного документа. Электронный документ для счета на оплату не создан'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("СправочникСсылка.Организации") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПакетыЭД = Справочники.Организации.СформироватьКарточкиОрганизацииВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

#КонецОбласти

#Область ОбменСКонтрагентами

Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Компании.Ссылка КАК Ссылка
	|ИЗ
	|	&Компании КАК Компании
	|ГДЕ
	|	Компании.ИНН = &ИНН
	|	И &УсловиеПоКПП
	|	И НЕ Компании.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Компании", "Справочник." + ТипОбъекта); 
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Компании.КПП = &КПП"); 
		Запрос.УстановитьПараметр("КПП", КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Истина"); 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция - Проверяет наличие действующего прямого обмена для банковских счетов организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организации, банковские счета которого нужно проверить
// 
// Возвращаемое значение:
//  Булево - Истина, если есть действующая настройка обмена
//
Функция ИспользуетсяПрямойОбменСБанком(Организация = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Возврат ОбменСБанками.НастройкаОбмена(Организация) <> Неопределено;
		
	Иначе
		
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
			
			Если ОбменСБанками.НастройкаОбмена(ОрганизацияИзСписка) <> Неопределено Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИспользованияЭП

// Функция - проверяет ФО и наличие действующих настроек обмена с контрагентами
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с контрагентами через ЭДО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Функция - проверяет ФО и наличие действующих настроек обмена с банками
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменДиректБанк() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с банками через ДиректБанк
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанками.Недействительна";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СписокНеСопоставленнойНоменклатуры(Контрагент, ДанныеФайлаРазбора) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИмяФайлаЭлектронногоДокумента = ПолучитьИмяВременногоФайла("xml");
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаРазбора);
	ДанныеФайла.Записать(ИмяФайлаЭлектронногоДокумента);
	
	НаборНоменклатурыКонтрагентов = ОбменСКонтрагентамиСлужебный.НоменклатураКонтрагентаВФайле(ИмяФайлаЭлектронногоДокумента, Контрагент);
	
	УдалитьФайлы(ИмяФайлаЭлектронногоДокумента);
	
	Результат = ОбменСКонтрагентамиСлужебный.ВыполнитьКонтрольСопоставленияНоменклатуры(
		Неопределено, НаборНоменклатурыКонтрагентов, Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьНоменклатуруПоДаннымКонтрагентаВФоне(Параметры, АдресХранилища) Экспорт
	
	СписокДляСопоставления = Новый Массив;
	
	ДанныеНоменклатурыКонтрагента = Параметры.ДанныеНоменклатурыКонтрагента;
	Ошибки = Неопределено;
	ЭтоУслуга = Общегоназначения.ЗначениеРеквизитаОбъекта(
		ДанныеНоменклатурыКонтрагента.РеквизитыНоменклатурыПоУмолчанию.ВидНоменклатуры, "Услуга");
	ДанныеНоменклатурыКонтрагента.Вставить("ЭтоУслуга", ЭтоУслуга);
	Для Каждого НоменклатураКонтрагента Из ДанныеНоменклатурыКонтрагента.НаборНоменклатурыКонтрагентов Цикл
		НаборДляСопоставления = Новый Структура("НоменклатураКонтрагента, НоменклатураИБ");
		НаборДляСопоставления.НоменклатураКонтрагента = НоменклатураКонтрагента;
		НаборДляСопоставления.НоменклатураИБ = СоздатьНоменклатурнуюПозицию(
			НоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента, Ошибки);
		СписокДляСопоставления.Добавить(НаборДляСопоставления);
	КонецЦикла;
	
	Результат = Новый Структура("ДанныеСопоставления, Ошибки", СписокДляСопоставления, Ошибки);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКлючевыхРеквизитовОбъекта

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента()
//
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ) Экспорт
	
	ЭлектронныйДокументСформирован = ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента);
	
	Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		И Объект.ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И НЕ ЭлектронныйДокументСформирован Тогда
			
		ПодлежитОбменуЭД = Ложь;
	КонецЕсли;
	
	// Если документ не подлежит обмену, то проверять изменение ключевых реквизитов не требуется.
	Если ПодлежитОбменуЭД Тогда
		Если ЭлектронныйДокументСформирован Тогда
			ИзменилисьКлючевыеРеквизиты = ИзменилисьКлючевыеРеквизитыОбъекта(Объект);
			Если ИзменилисьКлючевыеРеквизиты Тогда
				ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ);
			КонецЕсли;
		Иначе
			ИзменилисьКлючевыеРеквизиты = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

Процедура КомандыЭДО_ФормаСпискаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

Процедура КомандыЭДО_ФормаЭлементаПриСоздании(Форма) Экспорт

	Элементы = Форма.Элементы;
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма = Форма;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);

КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	// Удаляем команды ДиректБанка из журнала "Документы"
	Если НастройкиФормы.ИмяФормы = "ЖурналДокументов.Документы.Форма.ФормаСписка" Тогда
		ПараметрыОтбора = Новый Структура("Вид", "ДиректБанк");
		УдаляемыеСтроки = Команды.НайтиСтроки(ПараметрыОтбора);
		Для каждого ЭлементКоллекции Из УдаляемыеСтроки Цикл
			Команды.Удалить(ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСБанками

Функция НетДокументовДиректБанкСбербанк(Организация, БанковскийСчет) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В параметрах функции передается разрешенная организация из отбора.
	// Функция возвращает технические данные (есть/нет документов) и не нарушает конфиденциальность.
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиБанковскогоСчета = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками)
		И НастройкиБанковскогоСчета.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации = &СчетОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписаниеСРасчетногоСчета.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Организация = &Организация
		|	И СписаниеСРасчетногоСчета.СчетОрганизации = &СчетОрганизации";
		
		Результат = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияФорматированногоДокументаВФорматRTF

Функция ПолучитьСоответствиеТегов(ФорматированныйДокумент)
	
	СоответствиеWebЦветов = Новый Соответствие;
	ЦветаWeb = ПолучитьОбщийМакет("WebЦветаRGB");
	ВысотаТаблицы = ЦветаWeb.ВысотаТаблицы;
	Для Н = 2 По ВысотаТаблицы Цикл
		
		Ключ = НРег(СокрЛП(ЦветаWeb.Область(Н, 1).Текст));
		Значение = СокрЛП(ЦветаWeb.Область(Н, 2).Текст);
		СоответствиеWebЦветов.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	СоответствиеТегов = Новый Соответствие;
	СоответствиеЦветовRGB = Новый Соответствие;
	
	// Получаем шрифты и цвета, используемые в документе
	СоответствиеТегов.Вставить("Arial", "\f0");
	СчетчикШрифтов = 1;
	СчетчикЦветов = 0;
	ТаблицаШрифтов = "{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}";
	ТаблицаЦветов = "";
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Для Каждого Элемент Из Параграф.Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				
				Шрифт = Элемент.Шрифт;
				Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
					
					Если СоответствиеТегов[Шрифт.Имя] = Неопределено Тогда
						
						СчетчикШрифтов = СчетчикШрифтов + 1;
						Ключ = Шрифт.Имя;
						Значение = "\f" + Формат(СчетчикШрифтов, "ЧГ=0");
						СоответствиеТегов.Вставить(Ключ, Значение);
						ТаблицаШрифтов = ТаблицаШрифтов + "{" + Значение + "\fnil\fcharset0 " + Ключ + ";}";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветТекста = Элемент.ЦветТекста;
				Если ЦветТекста.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветТекста.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветТекста] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветТекста);
						ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
						Если ТегЦвета = Неопределено Тогда
							
							СчетчикЦветов = СчетчикЦветов + 1;
							ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
							СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
							ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
							
						КонецЕсли;
						СоответствиеТегов.Вставить(ЦветТекста, ТегЦвета);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветФона = Элемент.ЦветФона;
				Если ЦветФона.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветФона.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветФона] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветФона);
						Если ЗначениеЗаполнено(ЦветRGB) Тогда
							
							ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
							Если ТегЦвета = Неопределено Тогда
								
								СчетчикЦветов = СчетчикЦветов + 1;
								ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
								СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
								ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
								
							КонецЕсли;
							СоответствиеТегов.Вставить(ЦветФона, ТегЦвета);
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	СоответствиеТегов.Вставить("ТаблицаШрифтов", ТаблицаШрифтов);
	СоответствиеТегов.Вставить("ТаблицаЦветов", ТаблицаЦветов);
	
	// Положение текста
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Лево,	 "\ql");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Право,	 "\qr");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Центр,	 "\qc");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.ПоШирине, "\qj");
	
	Возврат СоответствиеТегов;
	
КонецФункции

Функция ПолучитьЦветRGB(СоответствиеWebЦветов, Цвет)
	
	ЭтоВебЦвет = Цвет.Вид = ВидЦвета.WebЦвет;
	НазваниеЦвета = "";
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ЭлементДокумента = ФорматированныйДокумент.Добавить("Цвет");
		ЭлементДокумента.ЦветТекста = Цвет;
		ТекстHTML = "";
		ВложенияHTML = Неопределено;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
		НачПозицияЗначенияЦвета = СтрНайти(ТекстHTML, "color:");
		Если НачПозицияЗначенияЦвета > 0 Тогда
			
			КонПозицияЗначенияЦвета = СтрНайти(ТекстHTML, ";",, НачПозицияЗначенияЦвета);
			СтрЦвета = Сред(ТекстHTML, НачПозицияЗначенияЦвета, КонПозицияЗначенияЦвета - НачПозицияЗначенияЦвета);
			
			Если СтрНайти(СтрЦвета, "#") > 0 Тогда
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				Цвет16 = СокрЛП(Массив[1]);
				Красный = HexToDec(Лев(Цвет16, 2));
				Зеленый = HexToDec(Сред(Цвет16, 3, 2));
				Синий  = HexToDec(Сред(Цвет16, 5, 2));
				Результат = "\red" + Красный + "\green" + Зеленый + "\blue" + Синий + ";";
				
				Возврат Результат;
				
			Иначе
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				НазваниеЦвета = СокрЛП(Массив[1]);
				
			КонецЕсли;
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		
		Результат = "\red" + Цвет.Красный + "\green" + Цвет.Зеленый + "\blue" + Цвет.Синий + ";";
		
		Возврат Результат;
		
	КонецЕсли;
		
	Если ЭтоВебЦвет Тогда
		
		Если Не ЗначениеЗаполнено(НазваниеЦвета) Тогда
			
			НазваниеЦвета = НРег(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()",
				СтрРазделить(Строка(Цвет), "(")[1], ""));
				
		КонецЕсли;
		ЦветRGB = СоответствиеWebЦветов[НазваниеЦвета];
		Если ЦветRGB = Неопределено Тогда
			
			Возврат "";
			
		Иначе
			
			МассивRGB = СтрРазделить(ЦветRGB, " ", Ложь);
			Результат = "\red" + СокрЛП(МассивRGB[0]) + "\green" + СокрЛП(МассивRGB[1]) + "\blue" + СокрЛП(МассивRGB[2]) + ";";
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции

// Преобразуем шестнадцатеричное число в десятичное
Функция HexToDec(СтрокаHex)
	
	ДлинаСтроки = СтрДлина(СтрокаHex);
	ЧислоDec = 0;
	Для Н = 0 По ДлинаСтроки - 1 Цикл
		
		Множитель = Pow(16 , Н);
		СимволСтроки = НРег(Сред(СтрокаHex, ДлинаСтроки - Н, 1));
		Если СимволСтроки = "a" Тогда
			
			ЧислоDec = ЧислоDec + 10 * Множитель;
			
		ИначеЕсли СимволСтроки = "b" Тогда
			
			ЧислоDec = ЧислоDec + 11 * Множитель;
			
		ИначеЕсли СимволСтроки = "c" Тогда
			
			ЧислоDec = ЧислоDec + 12 * Множитель;
			
		ИначеЕсли СимволСтроки = "d" Тогда
			
			ЧислоDec = ЧислоDec + 13 * Множитель;
			
		ИначеЕсли СимволСтроки = "e" Тогда
			
			ЧислоDec = ЧислоDec + 14 * Множитель;
			
		ИначеЕсли СимволСтроки = "f" Тогда
			
			ЧислоDec = ЧислоDec + 15 * Множитель;
			
		Иначе
			
			ЧислоDec = ЧислоDec + СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СимволСтроки) * Множитель;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧислоDec;
	
КонецФункции

Функция НачалоRTF(СоответствиеТегов)
	
	Значение = "{\rtf1\ansi\ansicpg1251\deff0{\fonttbl" + СоответствиеТегов["ТаблицаШрифтов"] 
		+ "}" + Символы.ПС;
	
	ТаблицаЦветов = СоответствиеТегов["ТаблицаЦветов"];
	Если ЗначениеЗаполнено(ТаблицаЦветов) Тогда
		
		Значение = Значение + "{\colortbl;" + ТаблицаЦветов + "}" + Символы.ПС;
		
	КонецЕсли;
	
	Значение = Значение + "\viewkind4\uc1\sa200\lang9\paperw11906\paperh16838";
	
	Возврат Значение;
	
КонецФункции

Функция КонецRTF()
	
	Возврат "}";
	
КонецФункции

Функция ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка)
	
	Отступ = ?(Параграф.Отступ = 0, "", "\li" + Формат(Параграф.Отступ * 20, "ЧГ=0"));
	Если Параграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок Тогда
		
		ВидСписка = "{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent200{\pntxtb\'B7}}";
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
		
	ИначеЕсли Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
		
		ВидСписка = "{\pntext\f0 " + Формат(НомерСписка, "ЧГ=0") +".\tab}"
			+ "{\*\pn\pnlvlbody\pnf0\pnindent300\pnstart1\pndec{\pntxta.}}";
			
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
			
	Иначе
		
		ВидСписка = "";
		
	КонецЕсли;
	
	Данные = "\pard"
		+ СоответствиеТегов[Параграф.ГоризонтальноеПоложение]
		+ "\sl" + Формат(Параграф.МеждустрочныйИнтервал * 240, "ЧДЦ=0; ЧГ=0") + "\slmult1"
		+ Отступ
		+ ВидСписка;
		
	КоличествоЭлементов = Параграф.Элементы.Количество();
	Счетчик = 0;
	Для Каждого Элемент Из Параграф.Элементы Цикл
		
		Счетчик = Счетчик + 1;
		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
			
			Данные = Данные + ОбработатьТекст(Элемент, СоответствиеТегов);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			
			Если Счетчик < КоличествоЭлементов Тогда
				
				Данные = Данные + "\line";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Данные = Данные + "\par";
		
	Возврат Данные;
	
КонецФункции

Функция ОбработатьТекст(ЭлементТекст, СоответствиеТегов)

	Данные = ШрифтТекста(ЭлементТекст, СоответствиеТегов) + " ";
		
	Текст = ЭлементТекст.Текст;
	ДлинаСтроки = СтрДлина(Текст);
	Для Н = 1 По ДлинаСтроки Цикл
		
		Код = Формат(КодСимвола(Текст, Н), "ЧВН=; ЧГ=0");
		Данные = Данные + "\u" + Код + "?"; // символ в Unicode, если символ не распознан - вывод знака вопроса
		
	КонецЦикла;
	Данные = Данные + ШрифтТекста(ЭлементТекст, СоответствиеТегов, Истина);
	
	Возврат Данные;

КонецФункции

Функция ШрифтТекста(ЭлементТекста, СоответствиеТегов, ЗакрывающийТег = Ложь)
	
	Значение		 = "";
	Шрифт			 = ЭлементТекста.Шрифт;
	ЦветТекста		 = ЭлементТекста.ЦветТекста;
	ЦветФона		 = ЭлементТекста.ЦветФона;
	Если Не ЗакрывающийТег Тогда
		
		Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
			
			ТегШрифта = СоответствиеТегов[Шрифт.Имя];
			Значение = Значение + ?(ТегШрифта = Неопределено, "", ТегШрифта); // определяем шрифт
			
		Иначе
			
			Значение = Значение + "\f0"; // шрифт по умолчанию
			
		КонецЕсли;
		Если Шрифт.Размер <> Неопределено Тогда
			
			Значение = Значение + ?(Шрифт.Размер = -1 ИЛИ Шрифт.Размер = 0, "\fs20", "\fs" + Формат(Шрифт.Размер * 2, "ЧГ=0"));
			
		КонецЕсли;
		
	КонецЕсли;
	Если Шрифт.Полужирный <> Неопределено Тогда 
		
		Значение = Значение + ?(Шрифт.Полужирный, ?(ЗакрывающийТег, "\b0", "\b"), "");
		
	КонецЕсли;
	Если Шрифт.Наклонный <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Наклонный, ?(ЗакрывающийТег, "\i0", "\i"), "");
		
	КонецЕсли;
	Если Шрифт.Подчеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Подчеркивание, ?(ЗакрывающийТег, "\ulnone", "\ul"), "");
		
	КонецЕсли;
	Если Шрифт.Зачеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Зачеркивание, ?(ЗакрывающийТег, "\strike0", "\strike"), "");
		
	КонецЕсли;
	Если ЦветТекста.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветТекста.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветТекста];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\cf0", "\cf" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
	Если ЦветФона.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветФона.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветФона];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\highlight0", "\highlight" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Функция ПолучитьДанныеДокумента(ТаблицаДанных)
	
	// Выясняем вид печатной формы
	МаксИндексКолонок = ТаблицаДанных.Колонки.Количество() - 1;
	КоличествоСтрок = ТаблицаДанных.Количество();
	ВидДокумента = "";	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Для Н = 0 По МаксИндексКолонок Цикл
			
			ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
			Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
				Продолжить;				
				
			КонецЕсли;
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, "унифицированнаяформаторг12") > 0 Тогда
				
				ВидДокумента = "ТОРГ12";
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "универсальныйпередаточныйдокумент") > 0 Тогда
				
				ВидДокумента = "УПД";
				Прервать;	
				
			КонецЕсли;			
			
		КонецЦикла;
		Если Не ПустаяСтрока(ВидДокумента) Тогда
				
			Прервать;
				
		КонецЕсли;				
		
	КонецЦикла;
	
	// Получаем данные о товарах в соответствии с видом печатной формы		
	ДанныеДокумента = Неопределено;	
	Если Не ПустаяСтрока(ВидДокумента) Тогда	
	
		ДанныеДокумента = ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Выбранный файл не содержит данных в формате ТОРГ-12 или УПД. Укажите корректный файл.'");
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;	
	
	Возврат ДанныеДокумента;
	
КонецФункции

// ТОРГ12

Функция ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок)
		
	ДанныеПоставщика = Новый Структура;
	ИскатьДанныеПоставщика = Ложь;	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеПоставщика И СтрНайти(ПодготовленноеЗначение, "инн") > 0 Тогда			
						
			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				Если Не ДанныеПоставщика.Свойство("ЮридическийАдрес") Тогда				
					
					// выделяем адрес из строки
					Адрес = ЗначениеЯчейки;
					Адрес = Сред(Адрес, СтрНайти(НРег(Адрес), "инн"));
					Адрес = Сред(Адрес, СтрНайти(Адрес, ",") + 1);
					ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "тел.:") - 1;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "факс:") - 1;
						
					КонецЕсли;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "р/с") - 1;
						
					КонецЕсли;	
					Если ПозицияКонцаАдреса <= 0 Тогда						
						
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));					
					
					Иначе 
						
						Адрес = СокрЛП(Лев(Адрес, ПозицияКонцаАдреса));
						Если Прав(Адрес, 1) = "," Тогда
							
							Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
							
						КонецЕсли;
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));
						
					КонецЕсли;	
				
				КонецЕсли;
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеПоставщика.Свойство("НаименованиеПолное") Тогда
					
					ДанныеПоставщика.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеПоставщика, ЧастьСтроки);
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Телефон") И СтрНайти(НРег(ЧастьСтроки), "тел.:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "тел.:", "");
					ДанныеПоставщика.Вставить("Телефон", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Факс") И СтрНайти(НРег(ЧастьСтроки), "факс:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "факс:", "");
					ДанныеПоставщика.Вставить("Факс", СокрЛП(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("РасчетныйСчет") И СтрНайти(НРег(ЧастьСтроки), "р/с") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("РасчетныйСчет", ЦифрыИзСтроки(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("БИК") И СтрНайти(НРег(ЧастьСтроки), "бик") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("БИК", ЦифрыИзСтроки(ЧастьСтроки));		
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = "поставщик" Тогда 
		
			ИскатьДанныеПоставщика = Истина;
		
		КонецЕсли;			
		
	КонецЦикла; 
	
	Возврат ДанныеПоставщика;

КонецФункции // ПолучитьДанныеПоставщика(СтрокаДанных, МаксИндекКолонок)()

Функция ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьДанныеКонтрагента = Ложь;		
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеКонтрагента И СтрНайти(НРег(ЗначениеЯчейки), "инн") > 0 Тогда	

			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
					
					ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, ЧастьСтроки);
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = НРег(КлючевоеСлово) Тогда 
		
			ИскатьДанныеКонтрагента = Истина;
		
		КонецЕсли;				
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, СтрокаИННКПП)

	Разделитель = "/";
	Если СтрНайти(СтрокаИННКПП, "\") > 0 Тогда
		
		Разделитель = "\";
		
	КонецЕсли;
	ИННКПП = СтрРазделить(СтрокаИННКПП, Разделитель);
	ДанныеКонтрагента.Вставить("ИНН", ЦифрыИзСтроки(ИННКПП[0]));
	Если ИННКПП.Количество() > 1 Тогда
		
		ДанныеКонтрагента.Вставить("КПП", ЦифрыИзСтроки(ИННКПП[1]));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента)
		
	НомерНайден = Ложь;
	ДатаНайдена = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если Не НомерНайден И СтрНайти(ПодготовленноеЗначение, "номердокумента") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(НомТН) Тогда
				
				ДанныеДокумента.Вставить("НомТН", Строка(НомТН));
				
			Иначе
				
				// Ищем номер ТН до колонки с датой составления
				Для НомерСтолбца = Н + 1 По МаксИндексКолонок Цикл
					
					НазваниеЯчейки = ПодготовитьСтроку(СтрокаДанных[НомерСтолбца]);
					Если ТипЗнч(НазваниеЯчейки) = Тип("Строка") И СтрНайти(НазваниеЯчейки, "датасоставления") > 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][НомерСтолбца]);
					Если ЗначениеЗаполнено(НомТН) Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				ДанныеДокумента.Вставить("НомТН", ?(ЗначениеЗаполнено(НомТН), НомТН, "0"));
				
			КонецЕсли;
			НомерНайден = Истина;
			
		ИначеЕсли Не ДатаНайдена И СтрНайти(ПодготовленноеЗначение, "датасоставления") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			ДатаТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(ДатаТН) Тогда
				
				ДанныеДокумента.Вставить("ДатаТН", Строка(ДатаТН));
				
			Иначе	
				
				ДанныеДокумента.Вставить("ДатаТН", "");
				
			КонецЕсли;	
			ДатаНайдена = Истина;
					
		КонецЕсли;						
		Если НомерНайден И ДатаНайдена Тогда
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры // ПолучитьНомерДатуДокумента()

Процедура ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номер";	
	НоваяСтрокаЗаголовков.НомерКолонки		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "единицаизмерения";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количествомассанетто";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "суммабезучетандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "12";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммасучетомндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "15";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных	 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска	 	= "кодпоокеи";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";   	
	
КонецПроцедуры

// УПД

Процедура НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "№", "");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "N", "");
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	// Поиск номера счета-фактуры.
	ИндексДанных = МассивПоиск.Найти("счетфактура");
	Если ИндексДанных <> Неопределено
		И МассивДанных.ВГраница() > ИндексДанных + 1 Тогда
		
		ДанныеДокумента.Вставить("НомерСчФ", МассивДанных[ИндексДанных + 1]);
		ДанныеДокумента.Вставить("НомТН", ДанныеДокумента.НомерСчФ);
		
		// Поиск даты счета-фактуры, после того как нашли номер СФ.
		ИндексДанных = МассивПоиск.Найти("от");
		Если ИндексДанных <> Неопределено
			И МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
			
			Дата = '00010101';
			
			День     = МассивДанных[ИндексДанных + 1];
			МесяцСтр = НРег(?(МассивДанных.ВГраница() >= ИндексДанных + 2, МассивДанных[ИндексДанных + 2], ""));
			Год = ЦифрыИзСтроки(?(МассивДанных.ВГраница() >= ИндексДанных + 3, МассивДанных[ИндексДанных + 3], ""), Истина);
			
			Если СтрНайти(МесяцСтр, "январ") > 0 Тогда
				Месяц = 1;
			ИначеЕсли СтрНайти(МесяцСтр, "феврал") > 0 Тогда
				Месяц = 2;
			ИначеЕсли СтрНайти(МесяцСтр, "март") > 0 Тогда
				Месяц = 3;
			ИначеЕсли СтрНайти(МесяцСтр, "апрел") > 0 Тогда
				Месяц = 4;
			ИначеЕсли СтрНайти(МесяцСтр, "ма") > 0 Тогда
				Месяц = 5;
			ИначеЕсли СтрНайти(МесяцСтр, "июн") > 0 Тогда
				Месяц = 6;
			ИначеЕсли СтрНайти(МесяцСтр, "июл") > 0 Тогда
				Месяц = 7;
			ИначеЕсли СтрНайти(МесяцСтр, "август") > 0 Тогда
				Месяц = 8;
			ИначеЕсли СтрНайти(МесяцСтр, "сентябр") > 0 Тогда
				Месяц = 9;
			ИначеЕсли СтрНайти(МесяцСтр, "октябр") > 0 Тогда
				Месяц = 10;
			ИначеЕсли СтрНайти(МесяцСтр, "ноябр") > 0 Тогда
				Месяц = 11;
			ИначеЕсли СтрНайти(МесяцСтр, "декабр") > 0 Тогда
				Месяц = 12;
			ИначеЕсли ЗначениеЗаполнено(День) Тогда
				Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(День);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(День)
				И ЗначениеЗаполнено(Месяц)
				И ЗначениеЗаполнено(Год) Тогда
				
				Дата = Дата(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Год),
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Месяц),
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(День))
					
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ДатаСчФ", Дата);
			ДанныеДокумента.Вставить("ДатаТН", Формат(ДанныеДокумента.ДатаСчФ, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат ДанныеКонтрагента;
	КонецЕсли;
	
	ИндексСтрокиДанных = ТаблицаДанных.Индекс(СтрокаДанных);
	КоличествоСтрок  = ТаблицаДанных.Количество();
	
	// Данные контрагента
	ИндексДанных = ДанныеДляОбработки.МассивПоиск.Найти(КлючевоеСлово);
	Если ИндексДанных <> Неопределено
		И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанных + 1 Тогда
		
		// Наименование
		ДанныеКонтрагента.Вставить("НаименованиеПолное",
			СтрокаИзМассива(ДанныеДляОбработки.МассивДанных, ИндексДанных + 1));
		
		// Адрес и ИНН
		Пока ИндексСтрокиДанных < КоличествоСтрок - 1 Цикл
			
			ИндексСтрокиДанных = ИндексСтрокиДанных + 1;
			СтрокаДанных = ТаблицаДанных[ИндексСтрокиДанных];
			ДанныеДляОбработки = ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок);
			Если ДанныеДляОбработки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
				
				ИндексДанных = ДанныеДляОбработки.МассивПоиск.Найти("адрес");
				Если ИндексДанных <> Неопределено Тогда
					
					ДанныеКонтрагента.Вставить("ЮридическийАдрес",
						СтрокаИзМассива(ДанныеДляОбработки.МассивДанных, ИндексДанных + 1));
					
				КонецЕсли;
					
			ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") Тогда
				
				ИндексДанных = ДанныеДляОбработки.МассивПоиск.Найти("иннкпп");
				Если ИндексДанных <> Неопределено
					И ДанныеДляОбработки.МассивДанных.ВГраница() >= ИндексДанных + 2 Тогда
					
					ИННКПП = ДанныеДляОбработки.МассивДанных[ИндексДанных + 2];
					МассивИННКПП = СтрРазделить(ИННКПП, "/\");
					Если МассивИННКПП.Количество() > 0 Тогда
						ДанныеКонтрагента.Вставить("ИНН", МассивИННКПП[0]);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Прервать; // нашли адрес и ИНН, завершаем цикл
			КонецЕсли
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Функция СтрокаИзМассива(Массив, ИндексНачало)
	
	МассивДляОбработки = Новый Массив;
	Для Н = ИндексНачало По Массив.ВГраница() Цикл
		МассивДляОбработки.Добавить(Массив[Н]);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивДляОбработки, " ");
	
КонецФункции

Функция ПодготовитьДанныеДляОбработки(СтрокаДанных, МаксИндексКолонок)
	
	ТекстСтроки = "";
	ПерваяИтерация = Истина;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтроки = ТекстСтроки +?(ПерваяИтерация, "", " ") + ЗначениеЯчейки;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	МассивДанных = СтрРазделить(ТекстСтроки, " ", Ложь);
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПоиск = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		МассивПоиск.Добавить(ПодготовитьСтроку(ЭлементМассива));
	КонецЦикла;
	
	Возврат Новый Структура("МассивДанных, МассивПоиск", МассивДанных, МассивПоиск);
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименованиетовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "условноеобозначение";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количество";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправбезналога";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправсналогом";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "налоговаяставка";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "7";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "б";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";  	
	
	// код страны происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цифровойкод";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НазваниеСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "краткоенаименование";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомерТД";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номертаможеннойдекларации";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
КонецПроцедуры

// Общие

Функция ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента)
		
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ВидДокумента", ВидДокумента);
	ТаблицаТоваров = ПодготовитьТаблицуТоваров();		
	
	КоличествоСовпаденийЗаголовков = 5;
	КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
	КоличествоСовпаденийНумерацииКолонок = 5;
	
	НайденаСтрокаЗаголовкаТаблицы			 = Ложь;
	НайденаВтораяСтрокаЗаголовкаТаблицы		 = Ложь;
	НайденаСтрокаНумерацииКолонокТаблицы	 = Ложь;		
	
	СчетчикСтрок = 0;
	НомерСтрокиТовара = 1;
	ДанныеШапкиПолучены = Ложь;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл							
		
		Если Не ДанныеШапкиПолучены Тогда
			
			Если ВидДокумента = "ТОРГ12" Тогда
			
				Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Грузополучатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						
					КонецЕсли;
				
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Плательщик");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("НомТН") Тогда	
				
					ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента);			
					Если ДанныеДокумента.Свойство("НомТН") Тогда
						
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;	
			
			Иначе // УПД
				
				Если Не ДанныеДокумента.Свойство("НомерСчФ") Тогда
					
					НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "продавец");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "покупатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			
			// поиск данных табличной части
			Если НЕ НайденаСтрокаЗаголовкаТаблицы Тогда			
				
				ТаблицаЗаголовков = ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 1));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийЗаголовков Тогда
						
						НайденаСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;			
				
			ИначеЕсли Не НайденаВтораяСтрокаЗаголовкаТаблицы Тогда	
				
				НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 2));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийВторойСтрокиЗаголовков Тогда
						
						НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;
				
			// поиск нумерации колонок таблицы товаров	
			ИначеЕсли НЕ НайденаСтрокаНумерацииКолонокТаблицы Тогда
				
				ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков);
				МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("НумерацияКолонкиНайдена", Истина));
				Если МассивЗаголовков.Количество() >= КоличествоСовпаденийНумерацииКолонок Тогда
					
					НайденаСтрокаНумерацииКолонокТаблицы = Истина;
					
				КонецЕсли;
				
				// поиск товаров	
			ИначеЕсли НайденаСтрокаЗаголовкаТаблицы И НайденаВтораяСтрокаЗаголовкаТаблицы И НайденаСтрокаНумерацииКолонокТаблицы Тогда	
				
				РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров);		
				
			КонецЕсли;	
			
		КонецЕсли;	
		СчетчикСтрок = СчетчикСтрок + 1;	
		
	КонецЦикла;		
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
	ТекстОшибки = "";
	Если 	ДанныеДокумента.ВидДокумента = "ТОРГ12" 
			И ДанныеДокумента.Свойство("Грузополучатель") 
			И ДанныеДокумента.Свойство("Поставщик") 
			И ДанныеДокумента.Свойство("Плательщик") 
			И ДанныеДокумента.Свойство("НомТН") Тогда 				
			
		ПроверитьДанныеПолучателя(ДанныеДокумента);	
			
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
			
		Возврат ДанныеДокумента;		
		
	ИначеЕсли 	ДанныеДокумента.ВидДокумента = "УПД" 
		        И ДанныеДокумента.Свойство("НомерСчФ")
				И ДанныеДокумента.Свойство("Грузополучатель")
				И ДанныеДокумента.Свойство("Плательщик")
				И ДанныеДокумента.Свойство("Поставщик") Тогда
				
		Если ПустаяСтрока(ДанныеДокумента.Поставщик.ИНН) Тогда
						
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");									
			
		КонецЕсли;  
		
		ПроверитьДанныеПолучателя(ДанныеДокумента);
		
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;			
		
	Иначе		
		
		Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Нет данных грузополучателя или не указан его ИНН'");
		
		ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");
			
		ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных плательщика или не указан его ИНН.'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл.'");
			
		КонецЕсли;
		
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДанныеПолучателя(ДанныеДокумента)
	
	Грузополучатель = ДанныеДокумента.Грузополучатель;
	Плательщик = ДанныеДокумента.Плательщик;
	ИННГрузополучателя = "";
	Если Не Грузополучатель.Свойство("ИНН", ИННГрузополучателя) Тогда
		
		Грузополучатель.Вставить("ИНН");
		
	КонецЕсли;
	ИННПлательщика = "";
	Если Не Плательщик.Свойство("ИНН", ИННПлательщика) Тогда
		
		Плательщик.Вставить("ИНН");
		
	КонецЕсли;
	Если ПустаяСтрока(Грузополучатель.ИНН) Тогда
		
		Грузополучатель.ИНН = ИННПлательщика;
		
	КонецЕсли;
	Если ПустаяСтрока(Плательщик.ИНН) Тогда
		
		Плательщик.ИНН = ИННГрузополучателя;
		
	КонецЕсли;	

КонецПроцедуры 

Функция УдалитьПереносыСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
		
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК Тогда 
				
			СимволСтроки = ?(СимволСтроки = Символы.ПС, " ", "");
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СокрЛП(СтрРезультат); 

КонецФункции// УдалитьПереносСтроки()

// Перевод текста в нижний регистр и удаление из нее крайних пробелов и других спец. символов.
Функция ПодготовитьСтроку(Стр, УдалятьПробелы = Истина)
	
	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		Возврат Стр;
	КонецЕсли;
	
	Стр = СокрЛП(НРег(Стр));
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = "-"
			ИЛИ (УдалятьПробелы И СимволСтроки = " ")
			ИЛИ СимволСтроки = "№"
			ИЛИ СимволСтроки = """"
			ИЛИ СимволСтроки = ","
			ИЛИ СимволСтроки = "."
			ИЛИ СимволСтроки = ":"
			ИЛИ СимволСтроки = ";"
			ИЛИ СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК
			ИЛИ СимволСтроки = "/"
			ИЛИ СимволСтроки = "("
			ИЛИ СимволСтроки = ")"
			ИЛИ СимволСтроки = "\"
			ИЛИ СимволСтроки = "|" Тогда 
				
			Продолжить;
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ЦифрыИзСтроки(Знач Стр, ТолькоЛидирующиеЦифры = Ложь)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если КодСимвола(СимволСтроки) < 48 ИЛИ КодСимвола(СимволСтроки) > 57 Тогда
			Если ТолькоЛидирующиеЦифры Тогда
				Возврат СтрРезультат; // берем цифры только из начала строки
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;   

КонецФункции // ЦифрыИзСтроки()

Функция ПодготовитьТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов");
	ТаблицаТоваров.Колонки.Добавить("НаимТов");
	ТаблицаТоваров.Колонки.Добавить("Артикул");	
	ТаблицаТоваров.Колонки.Добавить("НаимЕдИзм");
	ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов");
	ТаблицаТоваров.Колонки.Добавить("Нетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СумБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СумУчНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаТоваров.Колонки.Добавить("КодСтраны");
	ТаблицаТоваров.Колонки.Добавить("НазваниеСтраны");
	ТаблицаТоваров.Колонки.Добавить("НомерТД");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента)

	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ВидДокумента = "ТОРГ12" Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "номерпопорядку") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
		
		Иначе
			
			Если СтрНайти(ПодготовленноеЗначение, "наименованиетовара") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("НазваниеКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("КолонкаНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("НумерацияКолонкиНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗаголовков.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаЗаголовка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Если ВидДокумента = "ТОРГ12" Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков);
		
	Иначе
		
		ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
		
	КонецЕсли;
	
	// индексы для поиска
	ТаблицаЗаголовков.Индексы.Добавить("НазваниеКолонки, КолонкаНайдена, НумерацияКолонкиНайдена, СтрокаЗаголовка");
			
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "КолонкаНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "НумерацияКолонкиНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(0, "ИндексКолонки");		
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = СтрокаДанных[Н];
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда
				
				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "СтавкаНДС" Тогда
					
					Если ПодготовленноеЗначение = "ндс" Тогда // исключаю строки "СуммаСНДС" и "СуммаБезНДС"
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗаголовков;	

КонецФункции // ПодготовитьТаблицуПоиска()

Процедура НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента)
	
	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ПодготовленноеЗначение = "код" ИЛИ СтрНайти(ПодготовленноеЗначение, "кодпоокеи") > 0 Тогда
		
			ИскатьЗаголовки = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат;
		
	КонецЕсли; 	
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 2));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда

				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "Артикул" Тогда
					
					Если ПодготовленноеЗначение = "код" Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков)

	Для Каждого СтрокаЗаголовков Из ТаблицаЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(Строка(СтрокаДанных[СтрокаЗаголовков.ИндексКолонки]));
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);		
		Если СтрокаЗаголовков.НомерКолонки = ПодготовленноеЗначение Тогда
			
			СтрокаЗаголовков.НумерацияКолонкиНайдена = Истина;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров)

	ЗаголовокНомерПоПорядку = ТаблицаЗаголовков.Найти("НомТов", "НазваниеКолонки");
	ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНомерПоПорядку.ИндексКолонки]);
	ПодготовленноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
	Если ПодготовленноеЗначение <> НомерСтрокиТовара Тогда
		
		Возврат;
		
	КонецЕсли;	
	НоваяСтрокаТовара = ТаблицаТоваров.Добавить();	
	МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена", Истина));
	Для Каждого ЭлементЗаголовка Из МассивЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЭлементЗаголовка.ИндексКолонки]);		
		Если ЭлементЗаголовка.ТипДанных = "Число" Тогда
			
			Если ЭлементЗаголовка.НазваниеКолонки = "СтавкаНДС" Тогда
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦифрыИзСтроки(ЗначениеЯчейки));	
				
			Иначе	
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
				
			КонецЕсли;
			
		ИначеЕсли ЭлементЗаголовка.ТипДанных = "Строка" Тогда
			
			ЗначениеЯчейки = Строка(ЗначениеЯчейки);
			Если ЭлементЗаголовка.НазваниеКолонки = "НаимЕдИзм" Тогда
				
				ЗначениеЯчейки = "";
				
			КонецЕсли;
			
		КонецЕсли;
			
		НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ЗначениеЯчейки;
		
	КонецЦикла;
    НомерСтрокиТовара = НомерСтрокиТовара + 1;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанныхДокументаВXML

Функция ЗаписатьДанныеВXML(ДанныеДокумента)
	
	ВременныйКаталог = ОбщегоНазначения.СоздатьВременныйКаталог();
	Ид = Строка(Новый УникальныйИдентификатор());
	ТекстОшибки = "";
	
	СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки);	
	СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид);
	СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента);
	
	ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗипКонтейнер = Новый ЗаписьZipФайла();	
	ЗипКонтейнер.Открыть(ФайлАрхива);	
	ОбъектыДобавляемыеВАрхив = ВременныйКаталог + "*";
	ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив);
	ЗипКонтейнер.Записать();	
	
	ОбщегоНазначения.УдалитьВременныйКаталог(ВременныйКаталог);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ФайлАрхива;
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки)
	
	Попытка
		
		ДанныеПоставщика = ДанныеДокумента.Поставщик;
		ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;
		ДатаСеанса = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
		
		ДатаТН = Формат(СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеДокумента.ДатаТН), "ДФ=dd.MM.yyyy");
		
		СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор");
		СтруктураФайла.Префикс = "DP_OTORG12";
		СтруктураФайла.ИДПолучателя = ДанныеГрузополучателя.ИНН + ?(ДанныеГрузополучателя.Свойство("КПП"),
			"_" + ДанныеГрузополучателя.КПП, "");
		СтруктураФайла.ИДОтправителя = ДанныеПоставщика.ИНН + ?(ДанныеПоставщика.Свойство("КПП"),
			"_" + ДанныеПоставщика.КПП, "");
		СтруктураФайла.ГГГГММДД = ДатаСеанса;
		СтруктураФайла.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		ИдФайла = ОбменСКонтрагентамиСлужебный.ФНСИмяФайла(СтруктураФайла);
			
		ПространствоИменСхемы = "OTORG_5_01_02";
		Файл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ИдФайла,   Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8", , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, ТекстОшибки);				
		
		СвУчДокОбор = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ИдОтпр = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдОтправителя);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ИдОтпр, Истина, ТекстОшибки);
		ИдПок = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдПолучателя);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ИдПок, Истина, ТекстОшибки);
		
		СвОЭДОтпр = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИменСхемы);
		НаимОрг = """ООО Такском""";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = "7704211201";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = "2AL";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", ИдЭДО, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ",СвОЭДОтпр, , ТекстОшибки);	
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаТН, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ.мм.сс"), Истина, ТекстОшибки);
		
		СвТНО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", "Товарная накладная", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", "0330212", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "ТОРГ-12", Истина, ТекстОшибки);
		
		// поставщик	
		Поставщик = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПоставщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Поставщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик",  Поставщик, , ТекстОшибки);	
		
		// грузополучатель	
		Грузополучатель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеГрузополучателя, ПространствоИменСхемы, ИдСв, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Грузополучатель, "ИдСв",  ИдСв, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч",  Грузополучатель, , ТекстОшибки);	
		
		// плательщик
		ДанныеПлательщика = ДанныеДокумента.Плательщик;
		Плательщик = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПлательщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Плательщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик",  Плательщик, , ТекстОшибки);	
		
		// Данные товарной накладной.
		ТН = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "НомТН", ДанныеДокумента.НомТН, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаТН, Истина, ТекстОшибки);
		
		// Заполнение таблицы товаров.
		Таблица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		СуммаБезНДСВсего = 0;
		СуммаСНДСВсего = 0;
		Для Каждого Товар Из ДанныеДокумента.ТаблицаТоваров Цикл
			
			СведТов = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомТов, Истина, ТекстОшибки);
			НаименованиеЕдиницыИзмерения = "шт";
			Если СтрДлина(Товар.ОКЕИ_Тов) = 3 Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ОКЕИ_Тов, , ТекстОшибки);
				ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(Товар.ОКЕИ_Тов);
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					НаименованиеЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование");
				КонецЕсли;
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", НаименованиеЕдиницыИзмерения, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Нетто", Товар.Нетто, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, , ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СумБезНДС, , ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", Товар.СтавкаНДС, , ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СумУчНДС - Товар.СумБезНДС, , ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СумУчНДС, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Товар.Артикул, Истина, ТекстОшибки);
			КонецЕсли;
			
			ДопДанные = "";
			ШаблонДопДанных = "<Реквизит Имя=""%1"" Значение=""%2""/>";
			Если ЗначениеЗаполнено(Товар.НомерТД)
				И ЗначениеЗаполнено(СтрЗаменить(Товар.НомерТД, "-", "")) Тогда
				
				ДопДанные = ДопДанные + СтрШаблон(ШаблонДопДанных, "НомерТД", Товар.НомерТД);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодСтраны)
				И ЗначениеЗаполнено(СтрЗаменить(Товар.КодСтраны, "-", "")) Тогда
				
				ДопДанные = ДопДанные + СтрШаблон(ШаблонДопДанных, "КодСтраныПроисхождения", Товар.КодСтраны);
				
			КонецЕсли;
			Если Не ПустаяСтрока(ДопДанные) Тогда
				
				ДопДанные = "<Данные>" + ДопДанные + "</Данные>";
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", ДопДанные,, ТекстОшибки);
				
			КонецЕсли;
			
			СуммаБезНДСВсего = СуммаБезНДСВсего + Товар.СумБезНДС;
			СуммаСНДСВсего = СуммаСНДСВсего + Товар.СумУчНДС; 
			
			Таблица.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		// итого по таблице товаров
		ВсегоНакл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаСНДСВсего - СуммаБезНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);	
		
		ИнфПол = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
		СтрокаИнфПол = "<Данные><Реквизит Имя=""ЗагрузкаИзФайлаExcel"" Значение=""Истина""/></Данные>";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, Истина, ТекстОшибки);	
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);

		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ВременныйКаталог + "doc.xml", Ложь, "windows-1251");  	
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
																					
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибки = ТекстСообщения;	
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьДанныеВXML()

Процедура ПодготовитьДанныеУчастника(ДанныеУчастника, ПространствоИменСхемы, ИдСв, ТекстОшибки)
	
	Если СтрДлина(ДанныеУчастника.ИНН) > 10 Тогда
		
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		СвФЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);		
		ДанныеИП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеУчастника.НаименованиеПолное, " ", Истина, Истина);
		Для Н = 0 По ДанныеИП.ВГраница() Цикл
			
			Если Н = 0 Тогда
				
				ФИО.Фамилия = ДанныеИП[Н];
				
			ИначеЕсли  Н = 1 Тогда
				
				ФИО.Имя = ДанныеИП[Н];
				
			ИначеЕсли  Н = 2 Тогда
				
				ФИО.Отчество = ДанныеИП[Н];
				
			КонецЕсли;
			
		КонецЦикла;  
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеУчастника.ИНН, , ТекстОшибки);			
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);			
		
	Иначе
		
		СвЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", ДанныеУчастника.НаименованиеПолное, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ДанныеУчастника.ИНН, , ТекстОшибки);
		Если ДанныеУчастника.Свойство("КПП") Тогда
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", ДанныеУчастника.КПП, , ТекстОшибки);
			
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";	
	Попытка
		
		ОписаниеКонтейнера = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "ID", Ид, , ТекстОшибки);
		
		ДокументыСхемы  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 		
		
		Файлы = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		ФайлДанных = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", "doc.xml", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);				
			
		ФайлКарточки = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "card.xml", , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ВременныйКаталог + "meta.xml", Ложь);		
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);                                   		
																					
	КонецПопытки; 

КонецПроцедуры

Процедура СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента)

	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	ТекстОшибки = "";
	ДанныеПоставщика = ДанныеДокумента.Поставщик;
	ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;	
	Попытка
		
		Карточка = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ДанныеПоставщика.ИНН, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name", ДанныеПоставщика.НаименованиеПолное, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ДанныеПоставщика.ИНН, , ТекстОшибки);				
		Отправитель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
	
		АбонентПолучатель  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");								
		Получатель  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "Abonent", АбонентПолучатель, , ТекстОшибки);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier", Ид, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Тип, "Name", "Consignment", , ТекстОшибки);		
			
		Описание = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Описание, "Title", "ТОРГ-12 (титул продавца)", , ТекстОшибки);				
				
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Карточка, ВременныйКаталог + "card.xml", Ложь);
	
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование карточки такском'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);		
	
	КонецПопытки;	

КонецПроцедуры  

#КонецОбласти

#Область ПроверкаКлючевыхРеквизитовОбъекта

// Проверяет изменение ключевых реквизитов объекта
//
// Параметры:
//  Объект	 - ДокументОбъект - проверяемы документ объект
// 
// Возвращаемое значение:
//  Булево - Истина, если изменились ключевые реквизиты
//
Функция ИзменилисьКлючевыеРеквизитыОбъекта(Объект)

	КлючевыеРеквизиты = КлючевыеРеквизитыОбъекта(Объект);
	Если Не ЗначениеЗаполнено(КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция КлючевыеРеквизитыОбъекта(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	Результат = Новый Структура;
	Если ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары",          РеквизитыТЧ); 
		Результат.Вставить("Услуги",          РеквизитыТЧ);
		Результат.Вставить("АгентскиеУслуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаВознаграждения");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента, ИННПолучателя,"
			+ "ВалютаДокумента, КодБК, НазначениеПлатежа, ПеречислениеВБюджет, КодОКАТО");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПлатежноеТребование") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		Результат.Вставить("Товары", "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Количество, Номенклатура, Сумма, СуммаНДС, СтавкаНДС";
		Результат.Вставить("Товары",          РеквизитыТЧ); 
		Результат.Вставить("Услуги",          РеквизитыТЧ);
		Результат.Вставить("АгентскиеУслуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ДокументОснование");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаВознаграждения";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктОРасхождениях") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Товары", РеквизитыТЧ);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Результат.Вставить("Шапка", "Дата, Номер, Организация, Контрагент, ВалютаДокумента");
		РеквизитыТЧ = "Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС";
		Результат.Вставить("Услуги", РеквизитыТЧ);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьКлючевыеРеквизитыШапки(Объект, КлючевыеРеквизиты)

	Если Не ОбщегоНазначения.КоллекцииИдентичны(
		РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты),
		РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ИзменилисьКлючевыеРеквизитыТабличнойЧасти(Объект, КлючевыеРеквизиты)

	Для Каждого КлючЗначение Из КлючевыеРеквизиты Цикл
		
		Если КлючЗначение.Ключ = "Шапка" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.КоллекцииИдентичны(
			РеквизитыТабличнойЧастиДоИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение),
			РеквизитыТабличнойЧастиПослеИзменения(Объект, КлючЗначение.Ключ, КлючЗначение.Значение)) Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыШапкиДоИзменения(Объект, КлючевыеРеквизиты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, КлючевыеРеквизиты.Шапка);

КонецФункции

Функция РеквизитыШапкиПослеИзменения(Объект, КлючевыеРеквизиты)
	
	Результат = Новый Структура;
	ИменаРеквизитов = СтрРазделить(КлючевыеРеквизиты.Шапка, ", ", Ложь);
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		Результат.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция РеквизитыТабличнойЧастиДоИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ КлючевыеРеквизитыТабличнойЧасти + " ИЗ "
	+ Объект.Метаданные().ПолноеИмя() + "." + ИмяТабличнойЧасти
	+ " КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РеквизитыТабличнойЧастиПослеИзменения(Объект, ИмяТабличнойЧасти, КлючевыеРеквизитыТабличнойЧасти)
	
	Возврат Объект[ИмяТабличнойЧасти].Выгрузить(, КлючевыеРеквизитыТабличнойЧасти);

КонецФункции

Процедура ПроверитьСтатусЭлектронногоДокументаОбменаСБанком(Объект, СостояниеЭлектронногоДокумента, Отказ)

	Если НЕ ЭтоБанковскийДокумент(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.ОшибкаПередачи
		И СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.Отклонен Тогда
		
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ЭлектронныйДокументСформирован(Объект, СостояниеЭлектронногоДокумента)

	Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоБанковскийДокумент(Объект) Тогда
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияОбменСБанками.НеСформирован;
	Иначе
		Возврат СостояниеЭлектронногоДокумента <> Перечисления.СостоянияВерсийЭД.НеСформирован;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЭтоБанковскийДокумент(Объект)

	ТипОбъекта = ТипЗнч(Объект);
	Возврат ТипОбъекта = Тип("ДокументОбъект.ПлатежноеПоручение")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ПлатежноеТребование");
		
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЗагрузитьФайлВТаблицу(ИмяВременногоФайла)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);	
	ЗагрузитьВТаблицуMXL(ИмяВременногоФайла, РезультатВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗагрузитьВТаблицуMXL(ПутьКФайлу, РезультатВыполнения)

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу);
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	
	// Исключаем колонки справа с пустыми ячейками
	Для Н = 0 По КоличествоКолонок - 1 Цикл
		
		ЯчейкаЗаполнена = Ложь;
		НомерКолонки = КоличествоКолонок - Н;
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			АдресЯчейки = "R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0");
			Ячейка = ТабДок.Область(АдресЯчейки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				
				ЯчейкаЗаполнена = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		Если ЯчейкаЗаполнена Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	КоличествоКолонок = НомерКолонки;
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		ТаблицаДанных.Колонки.Добавить("К" + НомерКолонки);
		
	КонецЦикла;	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			
			АдресЯчейки = "R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0");
			Ячейка = ТабДок.Область(АдресЯчейки);
			ЗначениеЯчейки = ?(ПустаяСтрока(Ячейка.Текст), Неопределено, Ячейка.Текст);
			СтрокаТаблицы[НомерКолонки - 1] = ЗначениеЯчейки;
			
		КонецЦикла;		
		
	КонецЦикла;
		
	РезультатВыполнения.Вставить("Лист1", ТаблицаДанных);
	
КонецПроцедуры

Функция СоздатьОбъектИБ(ДанныеДокумента, Контрагент = Неопределено, ДокументПоступления = Неопределено)
	
	СтруктураРазбора = ПолучитьИзВременногоХранилища(ДанныеДокумента);
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	Если ТипЗнч(СтрокаОбъекта) <> Тип("СтрокаДереваЗначений") Тогда
		НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
		СтрокаОбъекта = НайденныеСтроки.Строки[0];
	КонецЕсли;
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ЗаполнитьНоменклатуру(ДеревоРазбора, Контрагент);
	КонецЕсли;
	
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		НоваяСтрока = СтрокаОбъекта.Строки.Добавить();
		НоваяСтрока.Реквизит = "ДокументыОснования";
		ДокументыОснования = НоваяСтрока.Строки.Добавить();
		ДокументыОснования.СсылкаНаОбъект = ДокументПоступления;
	КонецЕсли; 
	
	СсылкаНаОбъект = Неопределено;
	Если СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		ОбменСКонтрагентамиБП.НайтиСоздатьУПДДокументОПередаче_2019(СтрокаОбъекта.ЗначениеРеквизита, СсылкаНаОбъект);
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		СозданныеОбъекты = Неопределено;
		ОбменСКонтрагентамиБП.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(СтрокаОбъекта.ЗначениеРеквизита, СозданныеОбъекты);
		СсылкаНаОбъект = СозданныеОбъекты;
	Иначе
		ОбменСКонтрагентамиБП.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
				ДеревоРазбора,
				Новый Структура("СсылкаНаВладельца", Неопределено),
				СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ЗаполнитьНоменклатуру(ДеревоРазбора, Владелец)

	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	МассивИдентификаторов = Новый Массив;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			МассивИдентификаторов.Добавить(СтрокаСписка.ИД);
			
		КонецЕсли;
		
	КонецЦикла;	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	НоменклатураПоставщиков.Идентификатор,
	                      |	НоменклатураПоставщиков.Номенклатура
	                      |ИЗ
	                      |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	                      |ГДЕ
	                      |	НоменклатураПоставщиков.Владелец = &Владелец
	                      |	И НоменклатураПоставщиков.Идентификатор В(&СписокИдентификаторов)");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("СписокИдентификаторов", МассивИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	ИдНоменклатура = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ИдНоменклатура.Вставить(Выборка.Идентификатор, Выборка.Номенклатура);
		
	КонецЦикла;
	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);						  
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		СтрокаСписка.СсылкаНаОбъект = ИдНоменклатура[СтрокаСписка.ИД];
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СоздатьНоменклатурнуюПозицию(НоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента, Ошибки)
	
	Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	
	НоменклатураОбъект.Наименование         = НоменклатураКонтрагента.Наименование;
	НоменклатураОбъект.НаименованиеПолное   = НоменклатураКонтрагента.Наименование;
	НоменклатураОбъект.Артикул = НоменклатураКонтрагента.Артикул;
	НоменклатураОбъект.ВидНоменклатуры      = ?(ЗначениеЗаполнено(ДанныеНоменклатурыКонтрагента.ВидНоменклатуры),
		ДанныеНоменклатурыКонтрагента.ВидНоменклатуры, ДанныеНоменклатурыКонтрагента.РеквизитыНоменклатурыПоУмолчанию.ВидНоменклатуры);
	НоменклатураОбъект.Родитель             = ДанныеНоменклатурыКонтрагента.Родитель;
	НоменклатураОбъект.НоменклатурнаяГруппа = ДанныеНоменклатурыКонтрагента.НоменклатурнаяГруппа;
	
	СтавкаНДС = ОбменСКонтрагентамиБП.ПолучитьСтавкуНДСПеречислением(НоменклатураКонтрагента.СтавкаНДС);
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = ДанныеНоменклатурыКонтрагента.РеквизитыНоменклатурыПоУмолчанию.СтавкаНДС;
	КонецЕсли;
	НоменклатураОбъект.ВидСтавкиНДС         = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	
	ЕдиницаИзмерения = Неопределено;
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) И Не ДанныеНоменклатурыКонтрагента.ЭтоУслуга Тогда
			ЕдиницаИзмерения = ДанныеНоменклатурыКонтрагента.РеквизитыНоменклатурыПоУмолчанию.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	НоменклатураОбъект.ЕдиницаИзмерения     = ЕдиницаИзмерения;
	НоменклатураОбъект.Услуга               = ДанныеНоменклатурыКонтрагента.ЭтоУслуга;
	
	Попытка
		НоменклатураОбъект.Записать();
		Результат.Номенклатура = НоменклатураОбъект.Ссылка;
		Результат.Упаковка = НоменклатураОбъект.ЕдиницаИзмерения;
		ЗаписатьШтрикходыНоменклатуры(НоменклатураОбъект.Ссылка, НоменклатураКонтрагента.ШтрихкодыНоменклатуры);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать номенклатуру ""%1""
		|%2'");
		
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения, 
			НоменклатураКонтрагента.Наименование,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения,"");
		
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения, 
			НоменклатураКонтрагента.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Номенклатура,, 
			ОписаниеОшибки.Описание);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьШтрикходыНоменклатуры(Номенклатура, Штрихкоды)
	
	Если НЕ ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;

	МассивШтрихкодов = СтрРазделить(Штрихкоды, ",", Ложь);
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		МенеджерЗаписи              = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номенклатура = Номенклатура;
		МенеджерЗаписи.Штрихкод     = Штрихкод;
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьЗначенияКонстантЭДОПриОбновлении() Экспорт
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОбменСКонтрагентами.УстановитьЗначенияКонстантЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиПолученияКорректировокИВозвратов() Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДокумента.Установить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.СпособОбработки = "ОпределяетсяПрограммой";
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

#КонецОбласти
